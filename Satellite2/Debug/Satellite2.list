
Satellite2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000110e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000938  08011278  08011278  00021278  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011bb0  08011bb0  0003034c  2**0
                  CONTENTS
  4 .ARM          00000008  08011bb0  08011bb0  00021bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011bb8  08011bb8  0003034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011bb8  08011bb8  00021bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011bbc  08011bbc  00021bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000034c  20000000  08011bc0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002918  2000034c  08011f0c  0003034c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002c64  08011f0c  00032c64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003034c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029216  00000000  00000000  0003037c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005037  00000000  00000000  00059592  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001f00  00000000  00000000  0005e5d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001cd8  00000000  00000000  000604d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00007916  00000000  00000000  000621a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001df58  00000000  00000000  00069abe  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d443d  00000000  00000000  00087a16  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015be53  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008fa4  00000000  00000000  0015bed0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000034c 	.word	0x2000034c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801125c 	.word	0x0801125c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000350 	.word	0x20000350
 80001cc:	0801125c 	.word	0x0801125c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <println>:
static inline void print(char* str)
{
	while (CDC_Transmit_FS((uint8_t*) str, strlen(str)) == USBD_BUSY);
};
static inline void println(char* str)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	printLen = strlen(str);
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f7ff f91d 	bl	80001d0 <strlen>
 8000f96:	4602      	mov	r2, r0
 8000f98:	4b1a      	ldr	r3, [pc, #104]	; (8001004 <println+0x7c>)
 8000f9a:	601a      	str	r2, [r3, #0]
	uint8_t i;
	for (i = 0; i < printLen; i++)
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	73fb      	strb	r3, [r7, #15]
 8000fa0:	e009      	b.n	8000fb6 <println+0x2e>
	{
		printBuffer[i] = str[i];
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	441a      	add	r2, r3
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
 8000faa:	7811      	ldrb	r1, [r2, #0]
 8000fac:	4a16      	ldr	r2, [pc, #88]	; (8001008 <println+0x80>)
 8000fae:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < printLen; i++)
 8000fb0:	7bfb      	ldrb	r3, [r7, #15]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	73fb      	strb	r3, [r7, #15]
 8000fb6:	7bfa      	ldrb	r2, [r7, #15]
 8000fb8:	4b12      	ldr	r3, [pc, #72]	; (8001004 <println+0x7c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d3f0      	bcc.n	8000fa2 <println+0x1a>
	}
	printBuffer[printLen] = '\n';
 8000fc0:	4b10      	ldr	r3, [pc, #64]	; (8001004 <println+0x7c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a10      	ldr	r2, [pc, #64]	; (8001008 <println+0x80>)
 8000fc6:	210a      	movs	r1, #10
 8000fc8:	54d1      	strb	r1, [r2, r3]
	printBuffer[printLen + 1] = '\r';
 8000fca:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <println+0x7c>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	4a0d      	ldr	r2, [pc, #52]	; (8001008 <println+0x80>)
 8000fd2:	210d      	movs	r1, #13
 8000fd4:	54d1      	strb	r1, [r2, r3]
	printBuffer[printLen + 2] = '\0';
 8000fd6:	4b0b      	ldr	r3, [pc, #44]	; (8001004 <println+0x7c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	3302      	adds	r3, #2
 8000fdc:	4a0a      	ldr	r2, [pc, #40]	; (8001008 <println+0x80>)
 8000fde:	2100      	movs	r1, #0
 8000fe0:	54d1      	strb	r1, [r2, r3]
 	while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen + 3) == USBD_BUSY);
 8000fe2:	bf00      	nop
 8000fe4:	4b07      	ldr	r3, [pc, #28]	; (8001004 <println+0x7c>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	3303      	adds	r3, #3
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4805      	ldr	r0, [pc, #20]	; (8001008 <println+0x80>)
 8000ff2:	f00b ff85 	bl	800cf00 <CDC_Transmit_FS>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d0f3      	beq.n	8000fe4 <println+0x5c>
};
 8000ffc:	bf00      	nop
 8000ffe:	3710      	adds	r7, #16
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000368 	.word	0x20000368
 8001008:	2000036c 	.word	0x2000036c

0800100c <printv>:
static inline void printv(char* str, uint32_t len)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
	while (CDC_Transmit_FS((uint8_t*) str, len) == USBD_BUSY);
 8001016:	bf00      	nop
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	b29b      	uxth	r3, r3
 800101c:	4619      	mov	r1, r3
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f00b ff6e 	bl	800cf00 <CDC_Transmit_FS>
 8001024:	4603      	mov	r3, r0
 8001026:	2b01      	cmp	r3, #1
 8001028:	d0f6      	beq.n	8001018 <printv+0xc>
}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <SX1278_write>:
//#### SPI communication with SX1278 ####
uint64_t frf = 0;
uint8_t frf_bytes[8] = {0};

void SX1278_write(SPI_HandleTypeDef* spi, uint8_t data)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
 800103a:	460b      	mov	r3, r1
 800103c:	70fb      	strb	r3, [r7, #3]
	// writes byte [data] on SPI bus
	HAL_SPI_Transmit(spi, &data, 1, 1000);
 800103e:	1cf9      	adds	r1, r7, #3
 8001040:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001044:	2201      	movs	r2, #1
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f006 f9d2 	bl	80073f0 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(spi) != HAL_SPI_STATE_READY);
 800104c:	bf00      	nop
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f006 fca4 	bl	800799c <HAL_SPI_GetState>
 8001054:	4603      	mov	r3, r0
 8001056:	2b01      	cmp	r3, #1
 8001058:	d1f9      	bne.n	800104e <SX1278_write+0x1c>
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <SX1278_command>:
void SX1278_command(SX1278* inst, uint8_t addr, uint8_t cmd)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b082      	sub	sp, #8
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
 800106a:	460b      	mov	r3, r1
 800106c:	70fb      	strb	r3, [r7, #3]
 800106e:	4613      	mov	r3, r2
 8001070:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	69d8      	ldr	r0, [r3, #28]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	8a5b      	ldrh	r3, [r3, #18]
 800107a:	2200      	movs	r2, #0
 800107c:	4619      	mov	r1, r3
 800107e:	f002 fbbd 	bl	80037fc <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr | 0x80);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6a1a      	ldr	r2, [r3, #32]
 8001086:	78fb      	ldrb	r3, [r7, #3]
 8001088:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800108c:	b2db      	uxtb	r3, r3
 800108e:	4619      	mov	r1, r3
 8001090:	4610      	mov	r0, r2
 8001092:	f7ff ffce 	bl	8001032 <SX1278_write>
	SX1278_write(inst->spi, cmd);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6a1b      	ldr	r3, [r3, #32]
 800109a:	78ba      	ldrb	r2, [r7, #2]
 800109c:	4611      	mov	r1, r2
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff ffc7 	bl	8001032 <SX1278_write>

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	69d8      	ldr	r0, [r3, #28]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	8a5b      	ldrh	r3, [r3, #18]
 80010ac:	2201      	movs	r2, #1
 80010ae:	4619      	mov	r1, r3
 80010b0:	f002 fba4 	bl	80037fc <HAL_GPIO_WritePin>
}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <SX1278_command_burst>:
void SX1278_command_burst(SX1278* inst, uint8_t addr, uint8_t* buff, uint8_t len)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	607a      	str	r2, [r7, #4]
 80010c6:	461a      	mov	r2, r3
 80010c8:	460b      	mov	r3, r1
 80010ca:	72fb      	strb	r3, [r7, #11]
 80010cc:	4613      	mov	r3, r2
 80010ce:	72bb      	strb	r3, [r7, #10]
	uint8_t i;

	if (len <= 1) return;
 80010d0:	7abb      	ldrb	r3, [r7, #10]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d92d      	bls.n	8001132 <SX1278_command_burst+0x76>

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	69d8      	ldr	r0, [r3, #28]
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	8a5b      	ldrh	r3, [r3, #18]
 80010de:	2200      	movs	r2, #0
 80010e0:	4619      	mov	r1, r3
 80010e2:	f002 fb8b 	bl	80037fc <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr | 0x80);
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	6a1a      	ldr	r2, [r3, #32]
 80010ea:	7afb      	ldrb	r3, [r7, #11]
 80010ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	4619      	mov	r1, r3
 80010f4:	4610      	mov	r0, r2
 80010f6:	f7ff ff9c 	bl	8001032 <SX1278_write>
	for (i = 0; i < len; i++)
 80010fa:	2300      	movs	r3, #0
 80010fc:	75fb      	strb	r3, [r7, #23]
 80010fe:	e00b      	b.n	8001118 <SX1278_command_burst+0x5c>
	{
		SX1278_write(inst->spi, *(buff + i));	//explanation: *(buff + i) = buff[i]
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	6a18      	ldr	r0, [r3, #32]
 8001104:	7dfb      	ldrb	r3, [r7, #23]
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	4413      	add	r3, r2
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	4619      	mov	r1, r3
 800110e:	f7ff ff90 	bl	8001032 <SX1278_write>
	for (i = 0; i < len; i++)
 8001112:	7dfb      	ldrb	r3, [r7, #23]
 8001114:	3301      	adds	r3, #1
 8001116:	75fb      	strb	r3, [r7, #23]
 8001118:	7dfa      	ldrb	r2, [r7, #23]
 800111a:	7abb      	ldrb	r3, [r7, #10]
 800111c:	429a      	cmp	r2, r3
 800111e:	d3ef      	bcc.n	8001100 <SX1278_command_burst+0x44>
	}

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	69d8      	ldr	r0, [r3, #28]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	8a5b      	ldrh	r3, [r3, #18]
 8001128:	2201      	movs	r2, #1
 800112a:	4619      	mov	r1, r3
 800112c:	f002 fb66 	bl	80037fc <HAL_GPIO_WritePin>
 8001130:	e000      	b.n	8001134 <SX1278_command_burst+0x78>
	if (len <= 1) return;
 8001132:	bf00      	nop
}
 8001134:	3718      	adds	r7, #24
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <SX1278_read>:

uint8_t SX1278_read(SPI_HandleTypeDef* spi)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b086      	sub	sp, #24
 800113e:	af02      	add	r7, sp, #8
 8001140:	6078      	str	r0, [r7, #4]
	// reads byte from SPI bus
	uint8_t txByte = 0x00;
 8001142:	2300      	movs	r3, #0
 8001144:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8001146:	2300      	movs	r3, #0
 8001148:	73bb      	strb	r3, [r7, #14]

	HAL_SPI_TransmitReceive(spi, &txByte, &rxByte, 1, 1000);
 800114a:	f107 020e 	add.w	r2, r7, #14
 800114e:	f107 010f 	add.w	r1, r7, #15
 8001152:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	2301      	movs	r3, #1
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f006 fa7c 	bl	8007658 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(spi) != HAL_SPI_STATE_READY);
 8001160:	bf00      	nop
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f006 fc1a 	bl	800799c <HAL_SPI_GetState>
 8001168:	4603      	mov	r3, r0
 800116a:	2b01      	cmp	r3, #1
 800116c:	d1f9      	bne.n	8001162 <SX1278_read+0x28>

	return rxByte;
 800116e:	7bbb      	ldrb	r3, [r7, #14]
}
 8001170:	4618      	mov	r0, r3
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <SX1278_read_address>:
uint8_t SX1278_read_address(SX1278* inst, uint8_t addr)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	460b      	mov	r3, r1
 8001182:	70fb      	strb	r3, [r7, #3]
	uint8_t recv;

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	69d8      	ldr	r0, [r3, #28]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	8a5b      	ldrh	r3, [r3, #18]
 800118c:	2200      	movs	r2, #0
 800118e:	4619      	mov	r1, r3
 8001190:	f002 fb34 	bl	80037fc <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6a1b      	ldr	r3, [r3, #32]
 8001198:	78fa      	ldrb	r2, [r7, #3]
 800119a:	4611      	mov	r1, r2
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff48 	bl	8001032 <SX1278_write>
	recv = SX1278_read(inst->spi);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6a1b      	ldr	r3, [r3, #32]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff ffc7 	bl	800113a <SX1278_read>
 80011ac:	4603      	mov	r3, r0
 80011ae:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	69d8      	ldr	r0, [r3, #28]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	8a5b      	ldrh	r3, [r3, #18]
 80011b8:	2201      	movs	r2, #1
 80011ba:	4619      	mov	r1, r3
 80011bc:	f002 fb1e 	bl	80037fc <HAL_GPIO_WritePin>

	return recv;
 80011c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <SX1278_read_burst>:
void SX1278_read_burst(SX1278* inst, uint8_t addr, uint8_t* buff, uint8_t len)
{
 80011ca:	b590      	push	{r4, r7, lr}
 80011cc:	b087      	sub	sp, #28
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	60f8      	str	r0, [r7, #12]
 80011d2:	607a      	str	r2, [r7, #4]
 80011d4:	461a      	mov	r2, r3
 80011d6:	460b      	mov	r3, r1
 80011d8:	72fb      	strb	r3, [r7, #11]
 80011da:	4613      	mov	r3, r2
 80011dc:	72bb      	strb	r3, [r7, #10]
	uint8_t i;

	if (len <= 1) return;
 80011de:	7abb      	ldrb	r3, [r7, #10]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d92b      	bls.n	800123c <SX1278_read_burst+0x72>

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	69d8      	ldr	r0, [r3, #28]
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	8a5b      	ldrh	r3, [r3, #18]
 80011ec:	2200      	movs	r2, #0
 80011ee:	4619      	mov	r1, r3
 80011f0:	f002 fb04 	bl	80037fc <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr);
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	6a1b      	ldr	r3, [r3, #32]
 80011f8:	7afa      	ldrb	r2, [r7, #11]
 80011fa:	4611      	mov	r1, r2
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff ff18 	bl	8001032 <SX1278_write>
	for (i = 0; i < len; i++)
 8001202:	2300      	movs	r3, #0
 8001204:	75fb      	strb	r3, [r7, #23]
 8001206:	e00c      	b.n	8001222 <SX1278_read_burst+0x58>
	{
		*(buff + i) = SX1278_read(inst->spi);	//explanation: *(buff + i) = buff[i]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	6a19      	ldr	r1, [r3, #32]
 800120c:	7dfb      	ldrb	r3, [r7, #23]
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	18d4      	adds	r4, r2, r3
 8001212:	4608      	mov	r0, r1
 8001214:	f7ff ff91 	bl	800113a <SX1278_read>
 8001218:	4603      	mov	r3, r0
 800121a:	7023      	strb	r3, [r4, #0]
	for (i = 0; i < len; i++)
 800121c:	7dfb      	ldrb	r3, [r7, #23]
 800121e:	3301      	adds	r3, #1
 8001220:	75fb      	strb	r3, [r7, #23]
 8001222:	7dfa      	ldrb	r2, [r7, #23]
 8001224:	7abb      	ldrb	r3, [r7, #10]
 8001226:	429a      	cmp	r2, r3
 8001228:	d3ee      	bcc.n	8001208 <SX1278_read_burst+0x3e>
	}

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	69d8      	ldr	r0, [r3, #28]
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	8a5b      	ldrh	r3, [r3, #18]
 8001232:	2201      	movs	r2, #1
 8001234:	4619      	mov	r1, r3
 8001236:	f002 fae1 	bl	80037fc <HAL_GPIO_WritePin>
 800123a:	e000      	b.n	800123e <SX1278_read_burst+0x74>
	if (len <= 1) return;
 800123c:	bf00      	nop
}
 800123e:	371c      	adds	r7, #28
 8001240:	46bd      	mov	sp, r7
 8001242:	bd90      	pop	{r4, r7, pc}

08001244 <SX1278_transmit>:

	return true;
}

bool SX1278_transmit(SX1278* inst, uint8_t* txBuffer, uint8_t length)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	4613      	mov	r3, r2
 8001250:	71fb      	strb	r3, [r7, #7]
	// check if the module is ready for the transmission
	if (inst->mode == STANDBY)
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	7b1b      	ldrb	r3, [r3, #12]
 8001256:	2b01      	cmp	r3, #1
 8001258:	d130      	bne.n	80012bc <SX1278_transmit+0x78>
	{
		println("[LoRa] Starting transmission...");
 800125a:	481c      	ldr	r0, [pc, #112]	; (80012cc <SX1278_transmit+0x88>)
 800125c:	f7ff fe94 	bl	8000f88 <println>
		SX1278_tx_mode(inst);
 8001260:	68f8      	ldr	r0, [r7, #12]
 8001262:	f000 f979 	bl	8001558 <SX1278_tx_mode>
		SX1278_tx_input(inst, txBuffer, length);
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	461a      	mov	r2, r3
 800126a:	68b9      	ldr	r1, [r7, #8]
 800126c:	68f8      	ldr	r0, [r7, #12]
 800126e:	f000 f873 	bl	8001358 <SX1278_tx_input>
		SX1278_tx_push(inst);
 8001272:	68f8      	ldr	r0, [r7, #12]
 8001274:	f000 f88b 	bl	800138e <SX1278_tx_push>

		if (inst->useDio0IRQ)
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800127e:	2b00      	cmp	r3, #0
 8001280:	d008      	beq.n	8001294 <SX1278_transmit+0x50>
		{
			//waiting for interrupt
			println("[LoRa] Transmission pushed! Waiting for an interrupt...");
 8001282:	4813      	ldr	r0, [pc, #76]	; (80012d0 <SX1278_transmit+0x8c>)
 8001284:	f7ff fe80 	bl	8000f88 <println>
			inst->pendingIRQ = true;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	2201      	movs	r2, #1
 800128c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			while (HAL_GPIO_ReadPin(inst->dio0_port, inst->dio0) == GPIO_PIN_RESET);

			return SX1278_tx_finish(inst);
		}

		return true;
 8001290:	2301      	movs	r3, #1
 8001292:	e017      	b.n	80012c4 <SX1278_transmit+0x80>
			println("[LoRa] Transmission pushed!");
 8001294:	480f      	ldr	r0, [pc, #60]	; (80012d4 <SX1278_transmit+0x90>)
 8001296:	f7ff fe77 	bl	8000f88 <println>
			while (HAL_GPIO_ReadPin(inst->dio0_port, inst->dio0) == GPIO_PIN_RESET);
 800129a:	bf00      	nop
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	699a      	ldr	r2, [r3, #24]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	8a1b      	ldrh	r3, [r3, #16]
 80012a4:	4619      	mov	r1, r3
 80012a6:	4610      	mov	r0, r2
 80012a8:	f002 fa90 	bl	80037cc <HAL_GPIO_ReadPin>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d0f4      	beq.n	800129c <SX1278_transmit+0x58>
			return SX1278_tx_finish(inst);
 80012b2:	68f8      	ldr	r0, [r7, #12]
 80012b4:	f000 f878 	bl	80013a8 <SX1278_tx_finish>
 80012b8:	4603      	mov	r3, r0
 80012ba:	e003      	b.n	80012c4 <SX1278_transmit+0x80>
	}
	else
	{
		println("[LoRa] Cannot transmit...standby");
 80012bc:	4806      	ldr	r0, [pc, #24]	; (80012d8 <SX1278_transmit+0x94>)
 80012be:	f7ff fe63 	bl	8000f88 <println>
		return false;
 80012c2:	2300      	movs	r3, #0
	}
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	080112e4 	.word	0x080112e4
 80012d0:	08011304 	.word	0x08011304
 80012d4:	0801133c 	.word	0x0801133c
 80012d8:	08011358 	.word	0x08011358

080012dc <SX1278_receive>:

bool SX1278_receive(SX1278* inst)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
	// [!!] writes data to the inst->rxBuffer
	if (inst->mode == STANDBY)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	7b1b      	ldrb	r3, [r3, #12]
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d126      	bne.n	800133a <SX1278_receive+0x5e>
	{
		println("[LoRa] Starting receiving...");
 80012ec:	4817      	ldr	r0, [pc, #92]	; (800134c <SX1278_receive+0x70>)
 80012ee:	f7ff fe4b 	bl	8000f88 <println>
		SX1278_rx_mode(inst);
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f000 f95e 	bl	80015b4 <SX1278_rx_mode>

		if (inst->useDio0IRQ)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d008      	beq.n	8001314 <SX1278_receive+0x38>
		{
			//waiting for interrupt
			println("[LoRa] Receiver set! Waiting for an interrupt...");
 8001302:	4813      	ldr	r0, [pc, #76]	; (8001350 <SX1278_receive+0x74>)
 8001304:	f7ff fe40 	bl	8000f88 <println>
			inst->pendingIRQ = true;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2201      	movs	r2, #1
 800130c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

			SX1278_rx_get_packet(inst);
			return inst->newPacket;
		}

		return true;
 8001310:	2301      	movs	r3, #1
 8001312:	e016      	b.n	8001342 <SX1278_receive+0x66>
			while (HAL_GPIO_ReadPin(inst->dio0_port, inst->dio0) == GPIO_PIN_RESET);
 8001314:	bf00      	nop
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	699a      	ldr	r2, [r3, #24]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	8a1b      	ldrh	r3, [r3, #16]
 800131e:	4619      	mov	r1, r3
 8001320:	4610      	mov	r0, r2
 8001322:	f002 fa53 	bl	80037cc <HAL_GPIO_ReadPin>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d0f4      	beq.n	8001316 <SX1278_receive+0x3a>
			SX1278_rx_get_packet(inst);
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f000 f879 	bl	8001424 <SX1278_rx_get_packet>
			return inst->newPacket;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001338:	e003      	b.n	8001342 <SX1278_receive+0x66>
	}
	else
	{
		println("[LoRa] Cannot receive...standby");
 800133a:	4806      	ldr	r0, [pc, #24]	; (8001354 <SX1278_receive+0x78>)
 800133c:	f7ff fe24 	bl	8000f88 <println>
		return false;
 8001340:	2300      	movs	r3, #0
	}
}
 8001342:	4618      	mov	r0, r3
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	0801137c 	.word	0x0801137c
 8001350:	0801139c 	.word	0x0801139c
 8001354:	080113d0 	.word	0x080113d0

08001358 <SX1278_tx_input>:

//#### Data send / receive routines ####

void SX1278_tx_input(SX1278* inst, uint8_t* txBuffer, uint8_t length)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	4613      	mov	r3, r2
 8001364:	71fb      	strb	r3, [r7, #7]
	SX1278_command(inst, LR_RegPayloadLength, length);	//(this register must difine when the data long of one byte in SF is 6)
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	461a      	mov	r2, r3
 800136a:	2122      	movs	r1, #34	; 0x22
 800136c:	68f8      	ldr	r0, [r7, #12]
 800136e:	f7ff fe78 	bl	8001062 <SX1278_command>
	SX1278_command_burst(inst, 0x00, txBuffer, length);
 8001372:	79fb      	ldrb	r3, [r7, #7]
 8001374:	68ba      	ldr	r2, [r7, #8]
 8001376:	2100      	movs	r1, #0
 8001378:	68f8      	ldr	r0, [r7, #12]
 800137a:	f7ff fe9f 	bl	80010bc <SX1278_command_burst>

	inst->txLen = length;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	79fa      	ldrb	r2, [r7, #7]
 8001382:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 8001386:	bf00      	nop
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <SX1278_tx_push>:
void SX1278_tx_push(SX1278* inst)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
	//set module to TX mode and transmit
	SX1278_command(inst, LR_RegOpMode, 0x8b);
 8001396:	228b      	movs	r2, #139	; 0x8b
 8001398:	2101      	movs	r1, #1
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f7ff fe61 	bl	8001062 <SX1278_command>
}
 80013a0:	bf00      	nop
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <SX1278_tx_finish>:
bool SX1278_tx_finish(SX1278* inst)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
	inst->irqStatus = SX1278_read_address(inst, LR_RegIrqFlags);
 80013b0:	2112      	movs	r1, #18
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff fee0 	bl	8001178 <SX1278_read_address>
 80013b8:	4603      	mov	r3, r0
 80013ba:	461a      	mov	r2, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	inst->txDone = ((inst->irqStatus & IRQ_LR_TXDONE) > 0x00);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013c8:	f003 0308 	and.w	r3, r3, #8
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	bfcc      	ite	gt
 80013d0:	2301      	movgt	r3, #1
 80013d2:	2300      	movle	r3, #0
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	SX1278_clearLoRaIrq(inst);
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f000 f99a 	bl	8001716 <SX1278_clearLoRaIrq>
	SX1278_standby(inst);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f000 f91c 	bl	8001620 <SX1278_standby>

	printLen = sprintf(printBuffer, "[LoRa] Transmission finished! IRQ status: %d (<-should be 8)\r\n", inst->irqStatus);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013ee:	461a      	mov	r2, r3
 80013f0:	4909      	ldr	r1, [pc, #36]	; (8001418 <SX1278_tx_finish+0x70>)
 80013f2:	480a      	ldr	r0, [pc, #40]	; (800141c <SX1278_tx_finish+0x74>)
 80013f4:	f00d f8fc 	bl	800e5f0 <siprintf>
 80013f8:	4603      	mov	r3, r0
 80013fa:	461a      	mov	r2, r3
 80013fc:	4b08      	ldr	r3, [pc, #32]	; (8001420 <SX1278_tx_finish+0x78>)
 80013fe:	601a      	str	r2, [r3, #0]
	printv(printBuffer, printLen);
 8001400:	4b07      	ldr	r3, [pc, #28]	; (8001420 <SX1278_tx_finish+0x78>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4619      	mov	r1, r3
 8001406:	4805      	ldr	r0, [pc, #20]	; (800141c <SX1278_tx_finish+0x74>)
 8001408:	f7ff fe00 	bl	800100c <printv>
	return true;
 800140c:	2301      	movs	r3, #1
}
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	080113f0 	.word	0x080113f0
 800141c:	2000036c 	.word	0x2000036c
 8001420:	20000368 	.word	0x20000368

08001424 <SX1278_rx_get_packet>:

bool SX1278_rx_get_packet(SX1278* inst)
{
 8001424:	b5b0      	push	{r4, r5, r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	uint8_t addr;
	uint8_t packet_size;

	SX1278_update_IRQ_status(inst);
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f000 f93a 	bl	80016a6 <SX1278_update_IRQ_status>

	memset(inst->rxBuffer, 0x00, SX1278_MAX_PACKET);	//clear rxBuffer
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	3335      	adds	r3, #53	; 0x35
 8001436:	f44f 7280 	mov.w	r2, #256	; 0x100
 800143a:	2100      	movs	r1, #0
 800143c:	4618      	mov	r0, r3
 800143e:	f00c f9d2 	bl	800d7e6 <memset>

	addr = SX1278_read_address(inst, LR_RegFifoRxCurrentaddr);	//get last packet address
 8001442:	2110      	movs	r1, #16
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f7ff fe97 	bl	8001178 <SX1278_read_address>
 800144a:	4603      	mov	r3, r0
 800144c:	73bb      	strb	r3, [r7, #14]
	SX1278_command(inst, LR_RegFifoAddrPtr, addr);				//set fifo pointer to this address
 800144e:	7bbb      	ldrb	r3, [r7, #14]
 8001450:	461a      	mov	r2, r3
 8001452:	210d      	movs	r1, #13
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f7ff fe04 	bl	8001062 <SX1278_command>

	//When SpreadingFactor = 6, use Implicit Header mode (Excluding internal packet length)
	if (inst->config.spreadingFactor == SX1278_SF_6)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	795b      	ldrb	r3, [r3, #5]
 800145e:	2b06      	cmp	r3, #6
 8001460:	d104      	bne.n	800146c <SX1278_rx_get_packet+0x48>
	{
		// ??? not sure what to put here
		packet_size = inst->txLen;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001468:	73fb      	strb	r3, [r7, #15]
 800146a:	e005      	b.n	8001478 <SX1278_rx_get_packet+0x54>
	}
	else
	{
		packet_size = SX1278_read_address(inst, LR_RegRxNbBytes); //get the number of received bytes
 800146c:	2113      	movs	r1, #19
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff fe82 	bl	8001178 <SX1278_read_address>
 8001474:	4603      	mov	r3, r0
 8001476:	73fb      	strb	r3, [r7, #15]
	}

	SX1278_read_burst(inst, 0x00, inst->rxBuffer, packet_size);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f103 0235 	add.w	r2, r3, #53	; 0x35
 800147e:	7bfb      	ldrb	r3, [r7, #15]
 8001480:	2100      	movs	r1, #0
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f7ff fea1 	bl	80011ca <SX1278_read_burst>

	inst->newPacket = (inst->rxTimeout || (inst->crcError && LR_VALIDATE_CRCERROR));
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	inst->rssi = SX1278_getRSSI(inst);
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f000 f94b 	bl	8001730 <SX1278_getRSSI>
 800149a:	4602      	mov	r2, r0
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	62da      	str	r2, [r3, #44]	; 0x2c
	inst->rxLen = packet_size;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	7bfa      	ldrb	r2, [r7, #15]
 80014a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	SX1278_clearLoRaIrq(inst);
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f000 f934 	bl	8001716 <SX1278_clearLoRaIrq>
	SX1278_standby(inst);
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f000 f8b6 	bl	8001620 <SX1278_standby>

	if (inst->rxTimeout)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d010      	beq.n	80014e0 <SX1278_rx_get_packet+0xbc>
	{
		printLen = sprintf(printBuffer, "[LoRa] Receive timeout! Nothing to listen to.\r\n");
 80014be:	4a21      	ldr	r2, [pc, #132]	; (8001544 <SX1278_rx_get_packet+0x120>)
 80014c0:	4b21      	ldr	r3, [pc, #132]	; (8001548 <SX1278_rx_get_packet+0x124>)
 80014c2:	4614      	mov	r4, r2
 80014c4:	461d      	mov	r5, r3
 80014c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014ce:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80014d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80014d6:	232f      	movs	r3, #47	; 0x2f
 80014d8:	461a      	mov	r2, r3
 80014da:	4b1c      	ldr	r3, [pc, #112]	; (800154c <SX1278_rx_get_packet+0x128>)
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	e023      	b.n	8001528 <SX1278_rx_get_packet+0x104>
	}
	else if (inst->crcError)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d010      	beq.n	800150c <SX1278_rx_get_packet+0xe8>
	{
		printLen = sprintf(printBuffer, "[LoRa] CRC error occured. Packet discarded!\r\n");
 80014ea:	4a16      	ldr	r2, [pc, #88]	; (8001544 <SX1278_rx_get_packet+0x120>)
 80014ec:	4b18      	ldr	r3, [pc, #96]	; (8001550 <SX1278_rx_get_packet+0x12c>)
 80014ee:	4614      	mov	r4, r2
 80014f0:	461d      	mov	r5, r3
 80014f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014fa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80014fe:	c407      	stmia	r4!, {r0, r1, r2}
 8001500:	8023      	strh	r3, [r4, #0]
 8001502:	232d      	movs	r3, #45	; 0x2d
 8001504:	461a      	mov	r2, r3
 8001506:	4b11      	ldr	r3, [pc, #68]	; (800154c <SX1278_rx_get_packet+0x128>)
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	e00d      	b.n	8001528 <SX1278_rx_get_packet+0x104>
	}
	else
	{
		printLen = sprintf(printBuffer, "[LoRa] Valid packet received!\r\n");
 800150c:	4a0d      	ldr	r2, [pc, #52]	; (8001544 <SX1278_rx_get_packet+0x120>)
 800150e:	4b11      	ldr	r3, [pc, #68]	; (8001554 <SX1278_rx_get_packet+0x130>)
 8001510:	4614      	mov	r4, r2
 8001512:	461d      	mov	r5, r3
 8001514:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001516:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001518:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800151c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001520:	231f      	movs	r3, #31
 8001522:	461a      	mov	r2, r3
 8001524:	4b09      	ldr	r3, [pc, #36]	; (800154c <SX1278_rx_get_packet+0x128>)
 8001526:	601a      	str	r2, [r3, #0]
	}
	printv(printBuffer, printLen);
 8001528:	4b08      	ldr	r3, [pc, #32]	; (800154c <SX1278_rx_get_packet+0x128>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4619      	mov	r1, r3
 800152e:	4805      	ldr	r0, [pc, #20]	; (8001544 <SX1278_rx_get_packet+0x120>)
 8001530:	f7ff fd6c 	bl	800100c <printv>

	return inst->newPacket;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
}
 800153a:	4618      	mov	r0, r3
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bdb0      	pop	{r4, r5, r7, pc}
 8001542:	bf00      	nop
 8001544:	2000036c 	.word	0x2000036c
 8001548:	08011430 	.word	0x08011430
 800154c:	20000368 	.word	0x20000368
 8001550:	08011460 	.word	0x08011460
 8001554:	08011490 	.word	0x08011490

08001558 <SX1278_tx_mode>:

//#### Functions to change SX1278 operation mode ####

void SX1278_tx_mode(SX1278* inst)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
	println("[LoRa] Goes into Transmit mode.");
 8001560:	4813      	ldr	r0, [pc, #76]	; (80015b0 <SX1278_tx_mode+0x58>)
 8001562:	f7ff fd11 	bl	8000f88 <println>
	uint8_t addr;

	SX1278_clearLoRaIrq(inst);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f000 f8d5 	bl	8001716 <SX1278_clearLoRaIrq>
	SX1278_command(inst, REG_LR_DIOMAPPING1, 0x41);	//DIO0=01, DIO1=00, DIO2=00, DIO3=01
 800156c:	2241      	movs	r2, #65	; 0x41
 800156e:	2140      	movs	r1, #64	; 0x40
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f7ff fd76 	bl	8001062 <SX1278_command>
	SX1278_command(inst, LR_RegIrqFlagsMask, 0xF7);	//Open TxDone interrupt
 8001576:	22f7      	movs	r2, #247	; 0xf7
 8001578:	2111      	movs	r1, #17
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f7ff fd71 	bl	8001062 <SX1278_command>

	addr = SX1278_read_address(inst, LR_RegFifoTxBaseAddr);	//read tx_fifo beginning adress in memory
 8001580:	210e      	movs	r1, #14
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f7ff fdf8 	bl	8001178 <SX1278_read_address>
 8001588:	4603      	mov	r3, r0
 800158a:	73fb      	strb	r3, [r7, #15]
	SX1278_command(inst, LR_RegFifoAddrPtr, addr);			//set fifo pointer there
 800158c:	7bfb      	ldrb	r3, [r7, #15]
 800158e:	461a      	mov	r2, r3
 8001590:	210d      	movs	r1, #13
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff fd65 	bl	8001062 <SX1278_command>

	inst->txLen = 0;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2200      	movs	r2, #0
 800159c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	inst->mode = TX;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2202      	movs	r2, #2
 80015a4:	731a      	strb	r2, [r3, #12]
}
 80015a6:	bf00      	nop
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	080114b0 	.word	0x080114b0

080015b4 <SX1278_rx_mode>:

void SX1278_rx_mode(SX1278* inst)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
	println("[LoRa] Goes into Receive mode.");
 80015bc:	4817      	ldr	r0, [pc, #92]	; (800161c <SX1278_rx_mode+0x68>)
 80015be:	f7ff fce3 	bl	8000f88 <println>
	uint8_t addr;

	SX1278_clearLoRaIrq(inst);
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f000 f8a7 	bl	8001716 <SX1278_clearLoRaIrq>
	SX1278_command(inst, REG_LR_DIOMAPPING1, 0x01);	//DIO=00, DIO1=00,DIO2=00, DIO3=01
 80015c8:	2201      	movs	r2, #1
 80015ca:	2140      	movs	r1, #64	; 0x40
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f7ff fd48 	bl	8001062 <SX1278_command>
	SX1278_command(inst, LR_RegIrqFlagsMask, 0x1F);	//Open RxDone, RxTimeout, crcError interrupt
 80015d2:	221f      	movs	r2, #31
 80015d4:	2111      	movs	r1, #17
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f7ff fd43 	bl	8001062 <SX1278_command>

	addr = SX1278_read_address(inst, LR_RegFifoRxBaseAddr);	//read rx_fifo beginning adress in memory
 80015dc:	210f      	movs	r1, #15
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7ff fdca 	bl	8001178 <SX1278_read_address>
 80015e4:	4603      	mov	r3, r0
 80015e6:	73fb      	strb	r3, [r7, #15]
	SX1278_command(inst, LR_RegFifoAddrPtr, addr);			//set fifo pointer there
 80015e8:	7bfb      	ldrb	r3, [r7, #15]
 80015ea:	461a      	mov	r2, r3
 80015ec:	210d      	movs	r1, #13
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f7ff fd37 	bl	8001062 <SX1278_command>

	SX1278_command(inst, LR_RegOpMode, 0x8d);				//0x8d = 1_00_0_1_101 = Lora, FSK, (r), Low Frequency mode, Rx mode
 80015f4:	228d      	movs	r2, #141	; 0x8d
 80015f6:	2101      	movs	r1, #1
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f7ff fd32 	bl	8001062 <SX1278_command>

	inst->crcError = false;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	inst->rxLen = 0;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	inst->mode = RX;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2203      	movs	r2, #3
 8001612:	731a      	strb	r2, [r3, #12]
}
 8001614:	bf00      	nop
 8001616:	3710      	adds	r7, #16
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	080114d0 	.word	0x080114d0

08001620 <SX1278_standby>:
	SX1278_command(inst, LR_RegOpMode, 0x08);
	inst->mode = SLEEP;
}

void SX1278_standby(SX1278* inst)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
	println("[LoRa] Goes into Standby mode.");
 8001628:	4807      	ldr	r0, [pc, #28]	; (8001648 <SX1278_standby+0x28>)
 800162a:	f7ff fcad 	bl	8000f88 <println>
	SX1278_command(inst, LR_RegOpMode, 0x09);
 800162e:	2209      	movs	r2, #9
 8001630:	2101      	movs	r1, #1
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f7ff fd15 	bl	8001062 <SX1278_command>
	inst->mode = STANDBY;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2201      	movs	r2, #1
 800163c:	731a      	strb	r2, [r3, #12]
}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	08011510 	.word	0x08011510

0800164c <SX1278_dio0_IRQ>:
}

//#### Interrupt methods ####

bool SX1278_dio0_IRQ(SX1278* inst)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
	//function to call when dio0 rises, used only when waiting for the DIO0 interrupt
	//finishes transmit and receive routines
	if (inst->useDio0IRQ && inst->pendingIRQ)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800165a:	2b00      	cmp	r3, #0
 800165c:	d01e      	beq.n	800169c <SX1278_dio0_IRQ+0x50>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001664:	2b00      	cmp	r3, #0
 8001666:	d019      	beq.n	800169c <SX1278_dio0_IRQ+0x50>
	{
		if (inst->mode == TX)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	7b1b      	ldrb	r3, [r3, #12]
 800166c:	2b02      	cmp	r3, #2
 800166e:	d104      	bne.n	800167a <SX1278_dio0_IRQ+0x2e>
		{
			return SX1278_tx_finish(inst);
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f7ff fe99 	bl	80013a8 <SX1278_tx_finish>
 8001676:	4603      	mov	r3, r0
 8001678:	e011      	b.n	800169e <SX1278_dio0_IRQ+0x52>
		}
		else if (inst->mode == RX)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	7b1b      	ldrb	r3, [r3, #12]
 800167e:	2b03      	cmp	r3, #3
 8001680:	d104      	bne.n	800168c <SX1278_dio0_IRQ+0x40>
		{
			return SX1278_rx_get_packet(inst);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f7ff fece 	bl	8001424 <SX1278_rx_get_packet>
 8001688:	4603      	mov	r3, r0
 800168a:	e008      	b.n	800169e <SX1278_dio0_IRQ+0x52>
		}
		else
		{
			SX1278_clearLoRaIrq(inst);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f000 f842 	bl	8001716 <SX1278_clearLoRaIrq>
			SX1278_standby(inst);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff ffc4 	bl	8001620 <SX1278_standby>
			return false;
 8001698:	2300      	movs	r3, #0
 800169a:	e000      	b.n	800169e <SX1278_dio0_IRQ+0x52>
		inst->pendingIRQ = false;
		return true;
	}
	else
	{
		return false;
 800169c:	2300      	movs	r3, #0
	}
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <SX1278_update_IRQ_status>:

void SX1278_update_IRQ_status(SX1278* inst)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b082      	sub	sp, #8
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
	inst->irqStatus = SX1278_read_address(inst, LR_RegIrqFlags);
 80016ae:	2112      	movs	r1, #18
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7ff fd61 	bl	8001178 <SX1278_read_address>
 80016b6:	4603      	mov	r3, r0
 80016b8:	461a      	mov	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	inst->rxTimeout = ((inst->irqStatus & IRQ_LR_RXTIMEOUT) > 0x00);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	bfcc      	ite	gt
 80016ce:	2301      	movgt	r3, #1
 80016d0:	2300      	movle	r3, #0
 80016d2:	b2da      	uxtb	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	inst->rxDone = 	  ((inst->irqStatus & IRQ_LR_RXDONE) > 0x00);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	bfcc      	ite	gt
 80016e8:	2301      	movgt	r3, #1
 80016ea:	2300      	movle	r3, #0
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	inst->crcError =  ((inst->irqStatus & IRQ_LR_CRCERROR) > 0x00);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016fa:	f003 0320 	and.w	r3, r3, #32
 80016fe:	2b00      	cmp	r3, #0
 8001700:	bfcc      	ite	gt
 8001702:	2301      	movgt	r3, #1
 8001704:	2300      	movle	r3, #0
 8001706:	b2da      	uxtb	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278* inst)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b082      	sub	sp, #8
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
	SX1278_command(inst, LR_RegIrqFlags, 0xFF);
 800171e:	22ff      	movs	r2, #255	; 0xff
 8001720:	2112      	movs	r1, #18
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7ff fc9d 	bl	8001062 <SX1278_command>
}
 8001728:	bf00      	nop
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <SX1278_getRSSI>:

int SX1278_getRSSI(SX1278* inst)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  return (-164 + SX1278_read_address(inst, LR_RegPktRssiValue));
 8001738:	211a      	movs	r1, #26
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f7ff fd1c 	bl	8001178 <SX1278_read_address>
 8001740:	4603      	mov	r3, r0
 8001742:	3ba4      	subs	r3, #164	; 0xa4
}
 8001744:	4618      	mov	r0, r3
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <print>:
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
	while (CDC_Transmit_FS((uint8_t*) str, strlen(str)) == USBD_BUSY);
 8001754:	bf00      	nop
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f7fe fd3a 	bl	80001d0 <strlen>
 800175c:	4603      	mov	r3, r0
 800175e:	b29b      	uxth	r3, r3
 8001760:	4619      	mov	r1, r3
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f00b fbcc 	bl	800cf00 <CDC_Transmit_FS>
 8001768:	4603      	mov	r3, r0
 800176a:	2b01      	cmp	r3, #1
 800176c:	d0f3      	beq.n	8001756 <print+0xa>
};
 800176e:	bf00      	nop
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
	...

08001778 <println>:
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
	printLen = strlen(str);
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f7fe fd25 	bl	80001d0 <strlen>
 8001786:	4602      	mov	r2, r0
 8001788:	4b1a      	ldr	r3, [pc, #104]	; (80017f4 <println+0x7c>)
 800178a:	601a      	str	r2, [r3, #0]
	for (i = 0; i < printLen; i++)
 800178c:	2300      	movs	r3, #0
 800178e:	73fb      	strb	r3, [r7, #15]
 8001790:	e009      	b.n	80017a6 <println+0x2e>
		printBuffer[i] = str[i];
 8001792:	7bfb      	ldrb	r3, [r7, #15]
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	441a      	add	r2, r3
 8001798:	7bfb      	ldrb	r3, [r7, #15]
 800179a:	7811      	ldrb	r1, [r2, #0]
 800179c:	4a16      	ldr	r2, [pc, #88]	; (80017f8 <println+0x80>)
 800179e:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < printLen; i++)
 80017a0:	7bfb      	ldrb	r3, [r7, #15]
 80017a2:	3301      	adds	r3, #1
 80017a4:	73fb      	strb	r3, [r7, #15]
 80017a6:	7bfa      	ldrb	r2, [r7, #15]
 80017a8:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <println+0x7c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d3f0      	bcc.n	8001792 <println+0x1a>
	printBuffer[printLen] = '\n';
 80017b0:	4b10      	ldr	r3, [pc, #64]	; (80017f4 <println+0x7c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a10      	ldr	r2, [pc, #64]	; (80017f8 <println+0x80>)
 80017b6:	210a      	movs	r1, #10
 80017b8:	54d1      	strb	r1, [r2, r3]
	printBuffer[printLen + 1] = '\r';
 80017ba:	4b0e      	ldr	r3, [pc, #56]	; (80017f4 <println+0x7c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	3301      	adds	r3, #1
 80017c0:	4a0d      	ldr	r2, [pc, #52]	; (80017f8 <println+0x80>)
 80017c2:	210d      	movs	r1, #13
 80017c4:	54d1      	strb	r1, [r2, r3]
	printBuffer[printLen + 2] = '\0';
 80017c6:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <println+0x7c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	3302      	adds	r3, #2
 80017cc:	4a0a      	ldr	r2, [pc, #40]	; (80017f8 <println+0x80>)
 80017ce:	2100      	movs	r1, #0
 80017d0:	54d1      	strb	r1, [r2, r3]
 	while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen + 3) == USBD_BUSY);
 80017d2:	bf00      	nop
 80017d4:	4b07      	ldr	r3, [pc, #28]	; (80017f4 <println+0x7c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	b29b      	uxth	r3, r3
 80017da:	3303      	adds	r3, #3
 80017dc:	b29b      	uxth	r3, r3
 80017de:	4619      	mov	r1, r3
 80017e0:	4805      	ldr	r0, [pc, #20]	; (80017f8 <println+0x80>)
 80017e2:	f00b fb8d 	bl	800cf00 <CDC_Transmit_FS>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d0f3      	beq.n	80017d4 <println+0x5c>
};
 80017ec:	bf00      	nop
 80017ee:	3710      	adds	r7, #16
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	2000056c 	.word	0x2000056c
 80017f8:	20000570 	.word	0x20000570

080017fc <printv>:
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
	while (CDC_Transmit_FS((uint8_t*) str, len) == USBD_BUSY);
 8001806:	bf00      	nop
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	b29b      	uxth	r3, r3
 800180c:	4619      	mov	r1, r3
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f00b fb76 	bl	800cf00 <CDC_Transmit_FS>
 8001814:	4603      	mov	r3, r0
 8001816:	2b01      	cmp	r3, #1
 8001818:	d0f6      	beq.n	8001808 <printv+0xc>
}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
	...

08001824 <millis>:
#include <stdbool.h>
#include "stm32f4xx_hal.h"
#include "main.h"

// TIM5 has 32-bit counter -> takes longer to overflow
static inline uint32_t millis() { return (uint32_t)TIM5->CNT; }
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
 8001828:	4b03      	ldr	r3, [pc, #12]	; (8001838 <millis+0x14>)
 800182a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182c:	4618      	mov	r0, r3
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	40000c00 	.word	0x40000c00

0800183c <setup>:

uint8_t i;
uint32_t lastMillis;

static void setup()
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_RESET);
 8001840:	2200      	movs	r2, #0
 8001842:	2180      	movs	r1, #128	; 0x80
 8001844:	482c      	ldr	r0, [pc, #176]	; (80018f8 <setup+0xbc>)
 8001846:	f001 ffd9 	bl	80037fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 800184a:	2200      	movs	r2, #0
 800184c:	2140      	movs	r1, #64	; 0x40
 800184e:	482a      	ldr	r0, [pc, #168]	; (80018f8 <setup+0xbc>)
 8001850:	f001 ffd4 	bl	80037fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDC_GPIO_Port, LEDC_Pin, GPIO_PIN_RESET);
 8001854:	2200      	movs	r2, #0
 8001856:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800185a:	4828      	ldr	r0, [pc, #160]	; (80018fc <setup+0xc0>)
 800185c:	f001 ffce 	bl	80037fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDD_GPIO_Port, LEDD_Pin, GPIO_PIN_RESET);
 8001860:	2200      	movs	r2, #0
 8001862:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001866:	4825      	ldr	r0, [pc, #148]	; (80018fc <setup+0xc0>)
 8001868:	f001 ffc8 	bl	80037fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PH_L_GPIO_Port, PH_L_Pin, GPIO_PIN_RESET);
 800186c:	2200      	movs	r2, #0
 800186e:	2101      	movs	r1, #1
 8001870:	4823      	ldr	r0, [pc, #140]	; (8001900 <setup+0xc4>)
 8001872:	f001 ffc3 	bl	80037fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PH_R_GPIO_Port, PH_R_Pin, GPIO_PIN_RESET);
 8001876:	2200      	movs	r2, #0
 8001878:	2104      	movs	r1, #4
 800187a:	4821      	ldr	r0, [pc, #132]	; (8001900 <setup+0xc4>)
 800187c:	f001 ffbe 	bl	80037fc <HAL_GPIO_WritePin>

	while (HAL_GPIO_ReadPin(BTN_USR_GPIO_Port, BTN_USR_Pin) == GPIO_PIN_SET)
 8001880:	e01f      	b.n	80018c2 <setup+0x86>
	{
		print("Waiting for button press..");
 8001882:	4820      	ldr	r0, [pc, #128]	; (8001904 <setup+0xc8>)
 8001884:	f7ff ff62 	bl	800174c <print>
		printLen = sprintf(printBuffer, "%d(<-should be ~100)\n\r", (int)(millis() - lastMillis));
 8001888:	f7ff ffcc 	bl	8001824 <millis>
 800188c:	4602      	mov	r2, r0
 800188e:	4b1e      	ldr	r3, [pc, #120]	; (8001908 <setup+0xcc>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	461a      	mov	r2, r3
 8001896:	491d      	ldr	r1, [pc, #116]	; (800190c <setup+0xd0>)
 8001898:	481d      	ldr	r0, [pc, #116]	; (8001910 <setup+0xd4>)
 800189a:	f00c fea9 	bl	800e5f0 <siprintf>
 800189e:	4603      	mov	r3, r0
 80018a0:	461a      	mov	r2, r3
 80018a2:	4b1c      	ldr	r3, [pc, #112]	; (8001914 <setup+0xd8>)
 80018a4:	601a      	str	r2, [r3, #0]
		printv(printBuffer, printLen);	//should print: 100
 80018a6:	4b1b      	ldr	r3, [pc, #108]	; (8001914 <setup+0xd8>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4619      	mov	r1, r3
 80018ac:	4818      	ldr	r0, [pc, #96]	; (8001910 <setup+0xd4>)
 80018ae:	f7ff ffa5 	bl	80017fc <printv>
		lastMillis = millis();
 80018b2:	f7ff ffb7 	bl	8001824 <millis>
 80018b6:	4602      	mov	r2, r0
 80018b8:	4b13      	ldr	r3, [pc, #76]	; (8001908 <setup+0xcc>)
 80018ba:	601a      	str	r2, [r3, #0]
		HAL_Delay(100);
 80018bc:	2064      	movs	r0, #100	; 0x64
 80018be:	f001 f91b 	bl	8002af8 <HAL_Delay>
	while (HAL_GPIO_ReadPin(BTN_USR_GPIO_Port, BTN_USR_Pin) == GPIO_PIN_SET)
 80018c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018c6:	480e      	ldr	r0, [pc, #56]	; (8001900 <setup+0xc4>)
 80018c8:	f001 ff80 	bl	80037cc <HAL_GPIO_ReadPin>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d0d7      	beq.n	8001882 <setup+0x46>
	}

	HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_SET);
 80018d2:	2201      	movs	r2, #1
 80018d4:	2180      	movs	r1, #128	; 0x80
 80018d6:	4808      	ldr	r0, [pc, #32]	; (80018f8 <setup+0xbc>)
 80018d8:	f001 ff90 	bl	80037fc <HAL_GPIO_WritePin>
	println("Hello world!!");
 80018dc:	480e      	ldr	r0, [pc, #56]	; (8001918 <setup+0xdc>)
 80018de:	f7ff ff4b 	bl	8001778 <println>
	HAL_Delay(500);
 80018e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018e6:	f001 f907 	bl	8002af8 <HAL_Delay>
	HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_RESET);
 80018ea:	2200      	movs	r2, #0
 80018ec:	2180      	movs	r1, #128	; 0x80
 80018ee:	4802      	ldr	r0, [pc, #8]	; (80018f8 <setup+0xbc>)
 80018f0:	f001 ff84 	bl	80037fc <HAL_GPIO_WritePin>
	println("[MOT] Same frequency as in CanSatKit. Sound should be the same.");
	setMotorTimeout(1000);
	println("[MOT] Left motor: GPIO (copy on P7), Right motor: PWM (copy on P6)");
	*/

}
 80018f4:	bf00      	nop
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40020800 	.word	0x40020800
 80018fc:	40020400 	.word	0x40020400
 8001900:	40020000 	.word	0x40020000
 8001904:	08011544 	.word	0x08011544
 8001908:	20000bd8 	.word	0x20000bd8
 800190c:	08011560 	.word	0x08011560
 8001910:	20000570 	.word	0x20000570
 8001914:	2000056c 	.word	0x2000056c
 8001918:	08011578 	.word	0x08011578

0800191c <loop>:

static void loop()
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(BTN_USR_GPIO_Port, BTN_USR_Pin) == GPIO_PIN_RESET)
 8001920:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001924:	4815      	ldr	r0, [pc, #84]	; (800197c <loop+0x60>)
 8001926:	f001 ff51 	bl	80037cc <HAL_GPIO_ReadPin>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d113      	bne.n	8001958 <loop+0x3c>
	{
		HAL_GPIO_WritePin(EN_L_GPIO_Port, EN_L_Pin, GPIO_PIN_SET);
 8001930:	2201      	movs	r2, #1
 8001932:	2102      	movs	r1, #2
 8001934:	4811      	ldr	r0, [pc, #68]	; (800197c <loop+0x60>)
 8001936:	f001 ff61 	bl	80037fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_L_GPIO_Port, EN_R_Pin, GPIO_PIN_SET);
 800193a:	2201      	movs	r2, #1
 800193c:	2108      	movs	r1, #8
 800193e:	480f      	ldr	r0, [pc, #60]	; (800197c <loop+0x60>)
 8001940:	f001 ff5c 	bl	80037fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_SET);
 8001944:	2201      	movs	r2, #1
 8001946:	2180      	movs	r1, #128	; 0x80
 8001948:	480d      	ldr	r0, [pc, #52]	; (8001980 <loop+0x64>)
 800194a:	f001 ff57 	bl	80037fc <HAL_GPIO_WritePin>
		HAL_Delay(3000);
 800194e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001952:	f001 f8d1 	bl	8002af8 <HAL_Delay>
			printv(printBuffer, radio.txLen + 23);
			radio.txDone = false;
		}
	}
	*/
}
 8001956:	e00e      	b.n	8001976 <loop+0x5a>
		HAL_GPIO_WritePin(EN_L_GPIO_Port, EN_L_Pin, GPIO_PIN_RESET);
 8001958:	2200      	movs	r2, #0
 800195a:	2102      	movs	r1, #2
 800195c:	4807      	ldr	r0, [pc, #28]	; (800197c <loop+0x60>)
 800195e:	f001 ff4d 	bl	80037fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_L_GPIO_Port, EN_R_Pin, GPIO_PIN_RESET);
 8001962:	2200      	movs	r2, #0
 8001964:	2108      	movs	r1, #8
 8001966:	4805      	ldr	r0, [pc, #20]	; (800197c <loop+0x60>)
 8001968:	f001 ff48 	bl	80037fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_RESET);
 800196c:	2200      	movs	r2, #0
 800196e:	2180      	movs	r1, #128	; 0x80
 8001970:	4803      	ldr	r0, [pc, #12]	; (8001980 <loop+0x64>)
 8001972:	f001 ff43 	bl	80037fc <HAL_GPIO_WritePin>
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40020000 	.word	0x40020000
 8001980:	40020800 	.word	0x40020800

08001984 <radio_procedure>:

static void radio_procedure()
{
 8001984:	b5b0      	push	{r4, r5, r7, lr}
 8001986:	af00      	add	r7, sp, #0
	if (nextTX)
 8001988:	4b19      	ldr	r3, [pc, #100]	; (80019f0 <radio_procedure+0x6c>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d026      	beq.n	80019de <radio_procedure+0x5a>
	{
		memset(sendBuffer, 0x00, SX1278_MAX_PACKET);
 8001990:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001994:	2100      	movs	r1, #0
 8001996:	4817      	ldr	r0, [pc, #92]	; (80019f4 <radio_procedure+0x70>)
 8001998:	f00b ff25 	bl	800d7e6 <memset>
		message_length = sprintf(sendBuffer, "Cats can have little a salami.");
 800199c:	4a15      	ldr	r2, [pc, #84]	; (80019f4 <radio_procedure+0x70>)
 800199e:	4b16      	ldr	r3, [pc, #88]	; (80019f8 <radio_procedure+0x74>)
 80019a0:	4615      	mov	r5, r2
 80019a2:	461c      	mov	r4, r3
 80019a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019a6:	6028      	str	r0, [r5, #0]
 80019a8:	6069      	str	r1, [r5, #4]
 80019aa:	60aa      	str	r2, [r5, #8]
 80019ac:	60eb      	str	r3, [r5, #12]
 80019ae:	cc07      	ldmia	r4!, {r0, r1, r2}
 80019b0:	6128      	str	r0, [r5, #16]
 80019b2:	6169      	str	r1, [r5, #20]
 80019b4:	61aa      	str	r2, [r5, #24]
 80019b6:	8823      	ldrh	r3, [r4, #0]
 80019b8:	78a2      	ldrb	r2, [r4, #2]
 80019ba:	83ab      	strh	r3, [r5, #28]
 80019bc:	4613      	mov	r3, r2
 80019be:	77ab      	strb	r3, [r5, #30]
 80019c0:	231e      	movs	r3, #30
 80019c2:	b2da      	uxtb	r2, r3
 80019c4:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <radio_procedure+0x78>)
 80019c6:	701a      	strb	r2, [r3, #0]
		SX1278_transmit(&radio, sendBuffer, message_length);
 80019c8:	4b0c      	ldr	r3, [pc, #48]	; (80019fc <radio_procedure+0x78>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	461a      	mov	r2, r3
 80019ce:	4909      	ldr	r1, [pc, #36]	; (80019f4 <radio_procedure+0x70>)
 80019d0:	480b      	ldr	r0, [pc, #44]	; (8001a00 <radio_procedure+0x7c>)
 80019d2:	f7ff fc37 	bl	8001244 <SX1278_transmit>

		nextTX = false;
 80019d6:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <radio_procedure+0x6c>)
 80019d8:	2200      	movs	r2, #0
 80019da:	701a      	strb	r2, [r3, #0]
	{
		SX1278_receive(&radio);

		nextTX = true;
	}
}
 80019dc:	e005      	b.n	80019ea <radio_procedure+0x66>
		SX1278_receive(&radio);
 80019de:	4808      	ldr	r0, [pc, #32]	; (8001a00 <radio_procedure+0x7c>)
 80019e0:	f7ff fc7c 	bl	80012dc <SX1278_receive>
		nextTX = true;
 80019e4:	4b02      	ldr	r3, [pc, #8]	; (80019f0 <radio_procedure+0x6c>)
 80019e6:	2201      	movs	r2, #1
 80019e8:	701a      	strb	r2, [r3, #0]
}
 80019ea:	bf00      	nop
 80019ec:	bdb0      	pop	{r4, r5, r7, pc}
 80019ee:	bf00      	nop
 80019f0:	20000bd4 	.word	0x20000bd4
 80019f4:	20000ad4 	.word	0x20000ad4
 80019f8:	08011588 	.word	0x08011588
 80019fc:	20000994 	.word	0x20000994
 8001a00:	20000998 	.word	0x20000998

08001a04 <dio0_IRQ>:

	return true;
}

static void dio0_IRQ()
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
	if (radio.pendingIRQ)
 8001a08:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <dio0_IRQ+0x2c>)
 8001a0a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d008      	beq.n	8001a24 <dio0_IRQ+0x20>
	{
		println("[LoRa] DIO0 interrupt received.");
 8001a12:	4808      	ldr	r0, [pc, #32]	; (8001a34 <dio0_IRQ+0x30>)
 8001a14:	f7ff feb0 	bl	8001778 <println>
		SX1278_dio0_IRQ(&radio);
 8001a18:	4805      	ldr	r0, [pc, #20]	; (8001a30 <dio0_IRQ+0x2c>)
 8001a1a:	f7ff fe17 	bl	800164c <SX1278_dio0_IRQ>
		radio_procedure();
 8001a1e:	f7ff ffb1 	bl	8001984 <radio_procedure>
	}
	else
	{
		println("[LoRa] DIO0 interrupt received but NOT used!");
	}
}
 8001a22:	e002      	b.n	8001a2a <dio0_IRQ+0x26>
		println("[LoRa] DIO0 interrupt received but NOT used!");
 8001a24:	4804      	ldr	r0, [pc, #16]	; (8001a38 <dio0_IRQ+0x34>)
 8001a26:	f7ff fea7 	bl	8001778 <println>
}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20000998 	.word	0x20000998
 8001a34:	08011674 	.word	0x08011674
 8001a38:	08011694 	.word	0x08011694

08001a3c <haltMotors>:

	TIM4->CNT = 0;	// reset timer counter -> clears motor timeout
}

static void haltMotors()
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
	// Function called on TIM4 overflow interrupt
	TIM2->CCR2 = 0;
 8001a40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a44:	2200      	movs	r2, #0
 8001a46:	639a      	str	r2, [r3, #56]	; 0x38
	TIM2->CCR4 = 0;
 8001a48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	641a      	str	r2, [r3, #64]	; 0x40

	//todelete
	TIM3->CCR3 = 0;
 8001a50:	4b05      	ldr	r3, [pc, #20]	; (8001a68 <haltMotors+0x2c>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	63da      	str	r2, [r3, #60]	; 0x3c

	TIM4->CNT = 0;	// reset timer counter -> clears motor timeout
 8001a56:	4b05      	ldr	r3, [pc, #20]	; (8001a6c <haltMotors+0x30>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	40000400 	.word	0x40000400
 8001a6c:	40000800 	.word	0x40000800

08001a70 <motorTimeout>:
	printLen = sprintf(printBuffer, "[MOT] Timeout set to: %dms\n\r", (uint16_t)timeout_ms);
	printv(printBuffer, printLen);
}

static void motorTimeout()
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
	haltMotors();
 8001a74:	f7ff ffe2 	bl	8001a3c <haltMotors>
	println("[MOT] Motors halted due to timeout!");
 8001a78:	4802      	ldr	r0, [pc, #8]	; (8001a84 <motorTimeout+0x14>)
 8001a7a:	f7ff fe7d 	bl	8001778 <println>
}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	08011868 	.word	0x08011868

08001a88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a8c:	f000 ffc2 	bl	8002a14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a90:	f000 f834 	bl	8001afc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a94:	f000 fb42 	bl	800211c <MX_GPIO_Init>
  MX_DMA_Init();
 8001a98:	f000 fb18 	bl	80020cc <MX_DMA_Init>
  MX_SDIO_SD_Init();
 8001a9c:	f000 f938 	bl	8001d10 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8001aa0:	f009 faec 	bl	800b07c <MX_FATFS_Init>
  MX_I2C1_Init();
 8001aa4:	f000 f8ac 	bl	8001c00 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8001aa8:	f00b f934 	bl	800cd14 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8001aac:	f000 f950 	bl	8001d50 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8001ab0:	f000 fae2 	bl	8002078 <MX_USART3_UART_Init>
  MX_RTC_Init();
 8001ab4:	f000 f8d2 	bl	8001c5c <MX_RTC_Init>
  MX_TIM2_Init();
 8001ab8:	f000 f980 	bl	8001dbc <MX_TIM2_Init>
  MX_TIM5_Init();
 8001abc:	f000 fa8e 	bl	8001fdc <MX_TIM5_Init>
  MX_TIM3_Init();
 8001ac0:	f000 f9c8 	bl	8001e54 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001ac4:	f000 fa3c 	bl	8001f40 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  setup();
 8001ac8:	f7ff feb8 	bl	800183c <setup>

  // Start motor timeout interrupt timer
  HAL_TIM_Base_Start_IT(&htim4);
 8001acc:	4807      	ldr	r0, [pc, #28]	; (8001aec <main+0x64>)
 8001ace:	f006 f84a 	bl	8007b66 <HAL_TIM_Base_Start_IT>

  HAL_TIM_Base_Start_IT(&htim2);
 8001ad2:	4807      	ldr	r0, [pc, #28]	; (8001af0 <main+0x68>)
 8001ad4:	f006 f847 	bl	8007b66 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8001ad8:	4806      	ldr	r0, [pc, #24]	; (8001af4 <main+0x6c>)
 8001ada:	f006 f844 	bl	8007b66 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 8001ade:	4806      	ldr	r0, [pc, #24]	; (8001af8 <main+0x70>)
 8001ae0:	f006 f841 	bl	8007b66 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	loop();
 8001ae4:	f7ff ff1a 	bl	800191c <loop>
 8001ae8:	e7fc      	b.n	8001ae4 <main+0x5c>
 8001aea:	bf00      	nop
 8001aec:	20000c60 	.word	0x20000c60
 8001af0:	20000f10 	.word	0x20000f10
 8001af4:	20000d74 	.word	0x20000d74
 8001af8:	20000d34 	.word	0x20000d34

08001afc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b098      	sub	sp, #96	; 0x60
 8001b00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b06:	2230      	movs	r2, #48	; 0x30
 8001b08:	2100      	movs	r1, #0
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f00b fe6b 	bl	800d7e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b10:	f107 031c 	add.w	r3, r7, #28
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	60da      	str	r2, [r3, #12]
 8001b1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b20:	f107 030c 	add.w	r3, r7, #12
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	605a      	str	r2, [r3, #4]
 8001b2a:	609a      	str	r2, [r3, #8]
 8001b2c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60bb      	str	r3, [r7, #8]
 8001b32:	4b31      	ldr	r3, [pc, #196]	; (8001bf8 <SystemClock_Config+0xfc>)
 8001b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b36:	4a30      	ldr	r2, [pc, #192]	; (8001bf8 <SystemClock_Config+0xfc>)
 8001b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b3e:	4b2e      	ldr	r3, [pc, #184]	; (8001bf8 <SystemClock_Config+0xfc>)
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b46:	60bb      	str	r3, [r7, #8]
 8001b48:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	607b      	str	r3, [r7, #4]
 8001b4e:	4b2b      	ldr	r3, [pc, #172]	; (8001bfc <SystemClock_Config+0x100>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a2a      	ldr	r2, [pc, #168]	; (8001bfc <SystemClock_Config+0x100>)
 8001b54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b58:	6013      	str	r3, [r2, #0]
 8001b5a:	4b28      	ldr	r3, [pc, #160]	; (8001bfc <SystemClock_Config+0x100>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b62:	607b      	str	r3, [r7, #4]
 8001b64:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001b66:	2305      	movs	r3, #5
 8001b68:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b6e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001b70:	2301      	movs	r3, #1
 8001b72:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b74:	2302      	movs	r3, #2
 8001b76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b78:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8001b7e:	2306      	movs	r3, #6
 8001b80:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001b82:	23a8      	movs	r3, #168	; 0xa8
 8001b84:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b86:	2302      	movs	r3, #2
 8001b88:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001b8a:	2307      	movs	r3, #7
 8001b8c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b92:	4618      	mov	r0, r3
 8001b94:	f003 f926 	bl	8004de4 <HAL_RCC_OscConfig>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001b9e:	f000 fbd1 	bl	8002344 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ba2:	230f      	movs	r3, #15
 8001ba4:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001baa:	2300      	movs	r3, #0
 8001bac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001bae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001bb2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001bb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bb8:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001bba:	f107 031c 	add.w	r3, r7, #28
 8001bbe:	2105      	movs	r1, #5
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f003 fb7f 	bl	80052c4 <HAL_RCC_ClockConfig>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001bcc:	f000 fbba 	bl	8002344 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001bd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bd8:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bda:	f107 030c 	add.w	r3, r7, #12
 8001bde:	4618      	mov	r0, r3
 8001be0:	f003 fd3c 	bl	800565c <HAL_RCCEx_PeriphCLKConfig>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8001bea:	f000 fbab 	bl	8002344 <Error_Handler>
  }
}
 8001bee:	bf00      	nop
 8001bf0:	3760      	adds	r7, #96	; 0x60
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	40007000 	.word	0x40007000

08001c00 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c04:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <MX_I2C1_Init+0x50>)
 8001c06:	4a13      	ldr	r2, [pc, #76]	; (8001c54 <MX_I2C1_Init+0x54>)
 8001c08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001c0a:	4b11      	ldr	r3, [pc, #68]	; (8001c50 <MX_I2C1_Init+0x50>)
 8001c0c:	4a12      	ldr	r2, [pc, #72]	; (8001c58 <MX_I2C1_Init+0x58>)
 8001c0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c10:	4b0f      	ldr	r3, [pc, #60]	; (8001c50 <MX_I2C1_Init+0x50>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c16:	4b0e      	ldr	r3, [pc, #56]	; (8001c50 <MX_I2C1_Init+0x50>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c1c:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <MX_I2C1_Init+0x50>)
 8001c1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c22:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c24:	4b0a      	ldr	r3, [pc, #40]	; (8001c50 <MX_I2C1_Init+0x50>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c2a:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <MX_I2C1_Init+0x50>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c30:	4b07      	ldr	r3, [pc, #28]	; (8001c50 <MX_I2C1_Init+0x50>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c36:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <MX_I2C1_Init+0x50>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c3c:	4804      	ldr	r0, [pc, #16]	; (8001c50 <MX_I2C1_Init+0x50>)
 8001c3e:	f001 fe0f 	bl	8003860 <HAL_I2C_Init>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c48:	f000 fb7c 	bl	8002344 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c4c:	bf00      	nop
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	20000ce0 	.word	0x20000ce0
 8001c54:	40005400 	.word	0x40005400
 8001c58:	000186a0 	.word	0x000186a0

08001c5c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001c62:	1d3b      	adds	r3, r7, #4
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	60da      	str	r2, [r3, #12]
 8001c6e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001c70:	2300      	movs	r3, #0
 8001c72:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8001c74:	4b24      	ldr	r3, [pc, #144]	; (8001d08 <MX_RTC_Init+0xac>)
 8001c76:	4a25      	ldr	r2, [pc, #148]	; (8001d0c <MX_RTC_Init+0xb0>)
 8001c78:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001c7a:	4b23      	ldr	r3, [pc, #140]	; (8001d08 <MX_RTC_Init+0xac>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001c80:	4b21      	ldr	r3, [pc, #132]	; (8001d08 <MX_RTC_Init+0xac>)
 8001c82:	227f      	movs	r2, #127	; 0x7f
 8001c84:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001c86:	4b20      	ldr	r3, [pc, #128]	; (8001d08 <MX_RTC_Init+0xac>)
 8001c88:	22ff      	movs	r2, #255	; 0xff
 8001c8a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001c8c:	4b1e      	ldr	r3, [pc, #120]	; (8001d08 <MX_RTC_Init+0xac>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001c92:	4b1d      	ldr	r3, [pc, #116]	; (8001d08 <MX_RTC_Init+0xac>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001c98:	4b1b      	ldr	r3, [pc, #108]	; (8001d08 <MX_RTC_Init+0xac>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001c9e:	481a      	ldr	r0, [pc, #104]	; (8001d08 <MX_RTC_Init+0xac>)
 8001ca0:	f003 fdbe 	bl	8005820 <HAL_RTC_Init>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001caa:	f000 fb4b 	bl	8002344 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001cc2:	1d3b      	adds	r3, r7, #4
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	480f      	ldr	r0, [pc, #60]	; (8001d08 <MX_RTC_Init+0xac>)
 8001cca:	f003 fe3a 	bl	8005942 <HAL_RTC_SetTime>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001cd4:	f000 fb36 	bl	8002344 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x20;
 8001ce4:	2320      	movs	r3, #32
 8001ce6:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001ce8:	463b      	mov	r3, r7
 8001cea:	2201      	movs	r2, #1
 8001cec:	4619      	mov	r1, r3
 8001cee:	4806      	ldr	r0, [pc, #24]	; (8001d08 <MX_RTC_Init+0xac>)
 8001cf0:	f003 fee4 	bl	8005abc <HAL_RTC_SetDate>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001cfa:	f000 fb23 	bl	8002344 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001cfe:	bf00      	nop
 8001d00:	3718      	adds	r7, #24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	20000db4 	.word	0x20000db4
 8001d0c:	40002800 	.word	0x40002800

08001d10 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001d14:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <MX_SDIO_SD_Init+0x38>)
 8001d16:	4a0d      	ldr	r2, [pc, #52]	; (8001d4c <MX_SDIO_SD_Init+0x3c>)
 8001d18:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001d1a:	4b0b      	ldr	r3, [pc, #44]	; (8001d48 <MX_SDIO_SD_Init+0x38>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001d20:	4b09      	ldr	r3, [pc, #36]	; (8001d48 <MX_SDIO_SD_Init+0x38>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001d26:	4b08      	ldr	r3, [pc, #32]	; (8001d48 <MX_SDIO_SD_Init+0x38>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001d2c:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <MX_SDIO_SD_Init+0x38>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001d32:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <MX_SDIO_SD_Init+0x38>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001d38:	4b03      	ldr	r3, [pc, #12]	; (8001d48 <MX_SDIO_SD_Init+0x38>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001d3e:	bf00      	nop
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	20000e34 	.word	0x20000e34
 8001d4c:	40012c00 	.word	0x40012c00

08001d50 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001d54:	4b17      	ldr	r3, [pc, #92]	; (8001db4 <MX_SPI1_Init+0x64>)
 8001d56:	4a18      	ldr	r2, [pc, #96]	; (8001db8 <MX_SPI1_Init+0x68>)
 8001d58:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d5a:	4b16      	ldr	r3, [pc, #88]	; (8001db4 <MX_SPI1_Init+0x64>)
 8001d5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d60:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d62:	4b14      	ldr	r3, [pc, #80]	; (8001db4 <MX_SPI1_Init+0x64>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d68:	4b12      	ldr	r3, [pc, #72]	; (8001db4 <MX_SPI1_Init+0x64>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d6e:	4b11      	ldr	r3, [pc, #68]	; (8001db4 <MX_SPI1_Init+0x64>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d74:	4b0f      	ldr	r3, [pc, #60]	; (8001db4 <MX_SPI1_Init+0x64>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d7a:	4b0e      	ldr	r3, [pc, #56]	; (8001db4 <MX_SPI1_Init+0x64>)
 8001d7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d80:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d82:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <MX_SPI1_Init+0x64>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d88:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <MX_SPI1_Init+0x64>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d8e:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <MX_SPI1_Init+0x64>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d94:	4b07      	ldr	r3, [pc, #28]	; (8001db4 <MX_SPI1_Init+0x64>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d9a:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <MX_SPI1_Init+0x64>)
 8001d9c:	220a      	movs	r2, #10
 8001d9e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001da0:	4804      	ldr	r0, [pc, #16]	; (8001db4 <MX_SPI1_Init+0x64>)
 8001da2:	f005 fac1 	bl	8007328 <HAL_SPI_Init>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001dac:	f000 faca 	bl	8002344 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001db0:	bf00      	nop
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	20000eb8 	.word	0x20000eb8
 8001db8:	40013000 	.word	0x40013000

08001dbc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dc2:	f107 0308 	add.w	r3, r7, #8
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	605a      	str	r2, [r3, #4]
 8001dcc:	609a      	str	r2, [r3, #8]
 8001dce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dd0:	463b      	mov	r3, r7
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001dd8:	4b1d      	ldr	r3, [pc, #116]	; (8001e50 <MX_TIM2_Init+0x94>)
 8001dda:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001dde:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001de0:	4b1b      	ldr	r3, [pc, #108]	; (8001e50 <MX_TIM2_Init+0x94>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 8001de6:	4b1a      	ldr	r3, [pc, #104]	; (8001e50 <MX_TIM2_Init+0x94>)
 8001de8:	2240      	movs	r2, #64	; 0x40
 8001dea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8001dec:	4b18      	ldr	r3, [pc, #96]	; (8001e50 <MX_TIM2_Init+0x94>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001df2:	4b17      	ldr	r3, [pc, #92]	; (8001e50 <MX_TIM2_Init+0x94>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001df8:	4b15      	ldr	r3, [pc, #84]	; (8001e50 <MX_TIM2_Init+0x94>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001dfe:	4814      	ldr	r0, [pc, #80]	; (8001e50 <MX_TIM2_Init+0x94>)
 8001e00:	f005 fe86 	bl	8007b10 <HAL_TIM_Base_Init>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001e0a:	f000 fa9b 	bl	8002344 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e12:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e14:	f107 0308 	add.w	r3, r7, #8
 8001e18:	4619      	mov	r1, r3
 8001e1a:	480d      	ldr	r0, [pc, #52]	; (8001e50 <MX_TIM2_Init+0x94>)
 8001e1c:	f006 f8ca 	bl	8007fb4 <HAL_TIM_ConfigClockSource>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001e26:	f000 fa8d 	bl	8002344 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e32:	463b      	mov	r3, r7
 8001e34:	4619      	mov	r1, r3
 8001e36:	4806      	ldr	r0, [pc, #24]	; (8001e50 <MX_TIM2_Init+0x94>)
 8001e38:	f006 fc86 	bl	8008748 <HAL_TIMEx_MasterConfigSynchronization>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001e42:	f000 fa7f 	bl	8002344 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e46:	bf00      	nop
 8001e48:	3718      	adds	r7, #24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	20000f10 	.word	0x20000f10

08001e54 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b08e      	sub	sp, #56	; 0x38
 8001e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e5e:	2200      	movs	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]
 8001e62:	605a      	str	r2, [r3, #4]
 8001e64:	609a      	str	r2, [r3, #8]
 8001e66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e68:	f107 0320 	add.w	r3, r7, #32
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e72:	1d3b      	adds	r3, r7, #4
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	605a      	str	r2, [r3, #4]
 8001e7a:	609a      	str	r2, [r3, #8]
 8001e7c:	60da      	str	r2, [r3, #12]
 8001e7e:	611a      	str	r2, [r3, #16]
 8001e80:	615a      	str	r2, [r3, #20]
 8001e82:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e84:	4b2c      	ldr	r3, [pc, #176]	; (8001f38 <MX_TIM3_Init+0xe4>)
 8001e86:	4a2d      	ldr	r2, [pc, #180]	; (8001f3c <MX_TIM3_Init+0xe8>)
 8001e88:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001e8a:	4b2b      	ldr	r3, [pc, #172]	; (8001f38 <MX_TIM3_Init+0xe4>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 8001e90:	4b29      	ldr	r3, [pc, #164]	; (8001f38 <MX_TIM3_Init+0xe4>)
 8001e92:	2240      	movs	r2, #64	; 0x40
 8001e94:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8001e96:	4b28      	ldr	r3, [pc, #160]	; (8001f38 <MX_TIM3_Init+0xe4>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e9c:	4b26      	ldr	r3, [pc, #152]	; (8001f38 <MX_TIM3_Init+0xe4>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ea2:	4b25      	ldr	r3, [pc, #148]	; (8001f38 <MX_TIM3_Init+0xe4>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ea8:	4823      	ldr	r0, [pc, #140]	; (8001f38 <MX_TIM3_Init+0xe4>)
 8001eaa:	f005 fe31 	bl	8007b10 <HAL_TIM_Base_Init>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001eb4:	f000 fa46 	bl	8002344 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001eb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ebc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ebe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	481c      	ldr	r0, [pc, #112]	; (8001f38 <MX_TIM3_Init+0xe4>)
 8001ec6:	f006 f875 	bl	8007fb4 <HAL_TIM_ConfigClockSource>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001ed0:	f000 fa38 	bl	8002344 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001ed4:	4818      	ldr	r0, [pc, #96]	; (8001f38 <MX_TIM3_Init+0xe4>)
 8001ed6:	f005 fe6a 	bl	8007bae <HAL_TIM_PWM_Init>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001ee0:	f000 fa30 	bl	8002344 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001eec:	f107 0320 	add.w	r3, r7, #32
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4811      	ldr	r0, [pc, #68]	; (8001f38 <MX_TIM3_Init+0xe4>)
 8001ef4:	f006 fc28 	bl	8008748 <HAL_TIMEx_MasterConfigSynchronization>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8001efe:	f000 fa21 	bl	8002344 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f02:	2360      	movs	r3, #96	; 0x60
 8001f04:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f06:	2300      	movs	r3, #0
 8001f08:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f12:	1d3b      	adds	r3, r7, #4
 8001f14:	2208      	movs	r2, #8
 8001f16:	4619      	mov	r1, r3
 8001f18:	4807      	ldr	r0, [pc, #28]	; (8001f38 <MX_TIM3_Init+0xe4>)
 8001f1a:	f005 ff85 	bl	8007e28 <HAL_TIM_PWM_ConfigChannel>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001f24:	f000 fa0e 	bl	8002344 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001f28:	4803      	ldr	r0, [pc, #12]	; (8001f38 <MX_TIM3_Init+0xe4>)
 8001f2a:	f000 fc49 	bl	80027c0 <HAL_TIM_MspPostInit>

}
 8001f2e:	bf00      	nop
 8001f30:	3738      	adds	r7, #56	; 0x38
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	20000d74 	.word	0x20000d74
 8001f3c:	40000400 	.word	0x40000400

08001f40 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f46:	f107 0308 	add.w	r3, r7, #8
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	605a      	str	r2, [r3, #4]
 8001f50:	609a      	str	r2, [r3, #8]
 8001f52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f54:	463b      	mov	r3, r7
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]
 8001f5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001f5c:	4b1d      	ldr	r3, [pc, #116]	; (8001fd4 <MX_TIM4_Init+0x94>)
 8001f5e:	4a1e      	ldr	r2, [pc, #120]	; (8001fd8 <MX_TIM4_Init+0x98>)
 8001f60:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 41999;
 8001f62:	4b1c      	ldr	r3, [pc, #112]	; (8001fd4 <MX_TIM4_Init+0x94>)
 8001f64:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8001f68:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f6a:	4b1a      	ldr	r3, [pc, #104]	; (8001fd4 <MX_TIM4_Init+0x94>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8001f70:	4b18      	ldr	r3, [pc, #96]	; (8001fd4 <MX_TIM4_Init+0x94>)
 8001f72:	2264      	movs	r2, #100	; 0x64
 8001f74:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f76:	4b17      	ldr	r3, [pc, #92]	; (8001fd4 <MX_TIM4_Init+0x94>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f7c:	4b15      	ldr	r3, [pc, #84]	; (8001fd4 <MX_TIM4_Init+0x94>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001f82:	4814      	ldr	r0, [pc, #80]	; (8001fd4 <MX_TIM4_Init+0x94>)
 8001f84:	f005 fdc4 	bl	8007b10 <HAL_TIM_Base_Init>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001f8e:	f000 f9d9 	bl	8002344 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f96:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001f98:	f107 0308 	add.w	r3, r7, #8
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	480d      	ldr	r0, [pc, #52]	; (8001fd4 <MX_TIM4_Init+0x94>)
 8001fa0:	f006 f808 	bl	8007fb4 <HAL_TIM_ConfigClockSource>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001faa:	f000 f9cb 	bl	8002344 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001fb6:	463b      	mov	r3, r7
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4806      	ldr	r0, [pc, #24]	; (8001fd4 <MX_TIM4_Init+0x94>)
 8001fbc:	f006 fbc4 	bl	8008748 <HAL_TIMEx_MasterConfigSynchronization>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001fc6:	f000 f9bd 	bl	8002344 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001fca:	bf00      	nop
 8001fcc:	3718      	adds	r7, #24
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	20000c60 	.word	0x20000c60
 8001fd8:	40000800 	.word	0x40000800

08001fdc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fe2:	f107 0308 	add.w	r3, r7, #8
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	601a      	str	r2, [r3, #0]
 8001fea:	605a      	str	r2, [r3, #4]
 8001fec:	609a      	str	r2, [r3, #8]
 8001fee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ff0:	463b      	mov	r3, r7
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001ff8:	4b1d      	ldr	r3, [pc, #116]	; (8002070 <MX_TIM5_Init+0x94>)
 8001ffa:	4a1e      	ldr	r2, [pc, #120]	; (8002074 <MX_TIM5_Init+0x98>)
 8001ffc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 41999;
 8001ffe:	4b1c      	ldr	r3, [pc, #112]	; (8002070 <MX_TIM5_Init+0x94>)
 8002000:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8002004:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002006:	4b1a      	ldr	r3, [pc, #104]	; (8002070 <MX_TIM5_Init+0x94>)
 8002008:	2200      	movs	r2, #0
 800200a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 800200c:	4b18      	ldr	r3, [pc, #96]	; (8002070 <MX_TIM5_Init+0x94>)
 800200e:	2200      	movs	r2, #0
 8002010:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002012:	4b17      	ldr	r3, [pc, #92]	; (8002070 <MX_TIM5_Init+0x94>)
 8002014:	2200      	movs	r2, #0
 8002016:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002018:	4b15      	ldr	r3, [pc, #84]	; (8002070 <MX_TIM5_Init+0x94>)
 800201a:	2200      	movs	r2, #0
 800201c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800201e:	4814      	ldr	r0, [pc, #80]	; (8002070 <MX_TIM5_Init+0x94>)
 8002020:	f005 fd76 	bl	8007b10 <HAL_TIM_Base_Init>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800202a:	f000 f98b 	bl	8002344 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800202e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002032:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002034:	f107 0308 	add.w	r3, r7, #8
 8002038:	4619      	mov	r1, r3
 800203a:	480d      	ldr	r0, [pc, #52]	; (8002070 <MX_TIM5_Init+0x94>)
 800203c:	f005 ffba 	bl	8007fb4 <HAL_TIM_ConfigClockSource>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8002046:	f000 f97d 	bl	8002344 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800204a:	2300      	movs	r3, #0
 800204c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800204e:	2300      	movs	r3, #0
 8002050:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002052:	463b      	mov	r3, r7
 8002054:	4619      	mov	r1, r3
 8002056:	4806      	ldr	r0, [pc, #24]	; (8002070 <MX_TIM5_Init+0x94>)
 8002058:	f006 fb76 	bl	8008748 <HAL_TIMEx_MasterConfigSynchronization>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8002062:	f000 f96f 	bl	8002344 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002066:	bf00      	nop
 8002068:	3718      	adds	r7, #24
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	20000d34 	.word	0x20000d34
 8002074:	40000c00 	.word	0x40000c00

08002078 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800207c:	4b11      	ldr	r3, [pc, #68]	; (80020c4 <MX_USART3_UART_Init+0x4c>)
 800207e:	4a12      	ldr	r2, [pc, #72]	; (80020c8 <MX_USART3_UART_Init+0x50>)
 8002080:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002082:	4b10      	ldr	r3, [pc, #64]	; (80020c4 <MX_USART3_UART_Init+0x4c>)
 8002084:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002088:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800208a:	4b0e      	ldr	r3, [pc, #56]	; (80020c4 <MX_USART3_UART_Init+0x4c>)
 800208c:	2200      	movs	r2, #0
 800208e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002090:	4b0c      	ldr	r3, [pc, #48]	; (80020c4 <MX_USART3_UART_Init+0x4c>)
 8002092:	2200      	movs	r2, #0
 8002094:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002096:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <MX_USART3_UART_Init+0x4c>)
 8002098:	2200      	movs	r2, #0
 800209a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800209c:	4b09      	ldr	r3, [pc, #36]	; (80020c4 <MX_USART3_UART_Init+0x4c>)
 800209e:	220c      	movs	r2, #12
 80020a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020a2:	4b08      	ldr	r3, [pc, #32]	; (80020c4 <MX_USART3_UART_Init+0x4c>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80020a8:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <MX_USART3_UART_Init+0x4c>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80020ae:	4805      	ldr	r0, [pc, #20]	; (80020c4 <MX_USART3_UART_Init+0x4c>)
 80020b0:	f006 fbda 	bl	8008868 <HAL_UART_Init>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80020ba:	f000 f943 	bl	8002344 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	20000ca0 	.word	0x20000ca0
 80020c8:	40004800 	.word	0x40004800

080020cc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80020d2:	2300      	movs	r3, #0
 80020d4:	607b      	str	r3, [r7, #4]
 80020d6:	4b10      	ldr	r3, [pc, #64]	; (8002118 <MX_DMA_Init+0x4c>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	4a0f      	ldr	r2, [pc, #60]	; (8002118 <MX_DMA_Init+0x4c>)
 80020dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020e0:	6313      	str	r3, [r2, #48]	; 0x30
 80020e2:	4b0d      	ldr	r3, [pc, #52]	; (8002118 <MX_DMA_Init+0x4c>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ea:	607b      	str	r3, [r7, #4]
 80020ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80020ee:	2200      	movs	r2, #0
 80020f0:	2100      	movs	r1, #0
 80020f2:	203b      	movs	r0, #59	; 0x3b
 80020f4:	f000 fdfd 	bl	8002cf2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80020f8:	203b      	movs	r0, #59	; 0x3b
 80020fa:	f000 fe16 	bl	8002d2a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80020fe:	2200      	movs	r2, #0
 8002100:	2100      	movs	r1, #0
 8002102:	2045      	movs	r0, #69	; 0x45
 8002104:	f000 fdf5 	bl	8002cf2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002108:	2045      	movs	r0, #69	; 0x45
 800210a:	f000 fe0e 	bl	8002d2a <HAL_NVIC_EnableIRQ>

}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40023800 	.word	0x40023800

0800211c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b08a      	sub	sp, #40	; 0x28
 8002120:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002122:	f107 0314 	add.w	r3, r7, #20
 8002126:	2200      	movs	r2, #0
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	605a      	str	r2, [r3, #4]
 800212c:	609a      	str	r2, [r3, #8]
 800212e:	60da      	str	r2, [r3, #12]
 8002130:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	613b      	str	r3, [r7, #16]
 8002136:	4b6e      	ldr	r3, [pc, #440]	; (80022f0 <MX_GPIO_Init+0x1d4>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	4a6d      	ldr	r2, [pc, #436]	; (80022f0 <MX_GPIO_Init+0x1d4>)
 800213c:	f043 0304 	orr.w	r3, r3, #4
 8002140:	6313      	str	r3, [r2, #48]	; 0x30
 8002142:	4b6b      	ldr	r3, [pc, #428]	; (80022f0 <MX_GPIO_Init+0x1d4>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002146:	f003 0304 	and.w	r3, r3, #4
 800214a:	613b      	str	r3, [r7, #16]
 800214c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800214e:	2300      	movs	r3, #0
 8002150:	60fb      	str	r3, [r7, #12]
 8002152:	4b67      	ldr	r3, [pc, #412]	; (80022f0 <MX_GPIO_Init+0x1d4>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	4a66      	ldr	r2, [pc, #408]	; (80022f0 <MX_GPIO_Init+0x1d4>)
 8002158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800215c:	6313      	str	r3, [r2, #48]	; 0x30
 800215e:	4b64      	ldr	r3, [pc, #400]	; (80022f0 <MX_GPIO_Init+0x1d4>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002166:	60fb      	str	r3, [r7, #12]
 8002168:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	60bb      	str	r3, [r7, #8]
 800216e:	4b60      	ldr	r3, [pc, #384]	; (80022f0 <MX_GPIO_Init+0x1d4>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	4a5f      	ldr	r2, [pc, #380]	; (80022f0 <MX_GPIO_Init+0x1d4>)
 8002174:	f043 0301 	orr.w	r3, r3, #1
 8002178:	6313      	str	r3, [r2, #48]	; 0x30
 800217a:	4b5d      	ldr	r3, [pc, #372]	; (80022f0 <MX_GPIO_Init+0x1d4>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	60bb      	str	r3, [r7, #8]
 8002184:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	607b      	str	r3, [r7, #4]
 800218a:	4b59      	ldr	r3, [pc, #356]	; (80022f0 <MX_GPIO_Init+0x1d4>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	4a58      	ldr	r2, [pc, #352]	; (80022f0 <MX_GPIO_Init+0x1d4>)
 8002190:	f043 0302 	orr.w	r3, r3, #2
 8002194:	6313      	str	r3, [r2, #48]	; 0x30
 8002196:	4b56      	ldr	r3, [pc, #344]	; (80022f0 <MX_GPIO_Init+0x1d4>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	607b      	str	r3, [r7, #4]
 80021a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021a2:	2300      	movs	r3, #0
 80021a4:	603b      	str	r3, [r7, #0]
 80021a6:	4b52      	ldr	r3, [pc, #328]	; (80022f0 <MX_GPIO_Init+0x1d4>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	4a51      	ldr	r2, [pc, #324]	; (80022f0 <MX_GPIO_Init+0x1d4>)
 80021ac:	f043 0308 	orr.w	r3, r3, #8
 80021b0:	6313      	str	r3, [r2, #48]	; 0x30
 80021b2:	4b4f      	ldr	r3, [pc, #316]	; (80022f0 <MX_GPIO_Init+0x1d4>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	f003 0308 	and.w	r3, r3, #8
 80021ba:	603b      	str	r3, [r7, #0]
 80021bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, P1_Pin|P4_Pin|P2_Pin|P5_Pin 
 80021be:	2200      	movs	r2, #0
 80021c0:	21ef      	movs	r1, #239	; 0xef
 80021c2:	484c      	ldr	r0, [pc, #304]	; (80022f4 <MX_GPIO_Init+0x1d8>)
 80021c4:	f001 fb1a 	bl	80037fc <HAL_GPIO_WritePin>
                          |LR_RESET_Pin|LEDB_Pin|LEDA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PH_L_Pin|EN_L_Pin|PH_R_Pin|EN_R_Pin 
 80021c8:	2200      	movs	r2, #0
 80021ca:	211f      	movs	r1, #31
 80021cc:	484a      	ldr	r0, [pc, #296]	; (80022f8 <MX_GPIO_Init+0x1dc>)
 80021ce:	f001 fb15 	bl	80037fc <HAL_GPIO_WritePin>
                          |P7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, P3_Pin|LEDD_Pin|LEDC_Pin|LR_NSS_Pin, GPIO_PIN_RESET);
 80021d2:	2200      	movs	r2, #0
 80021d4:	f243 2102 	movw	r1, #12802	; 0x3202
 80021d8:	4848      	ldr	r0, [pc, #288]	; (80022fc <MX_GPIO_Init+0x1e0>)
 80021da:	f001 fb0f 	bl	80037fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : P1_Pin P4_Pin P2_Pin P5_Pin 
                           LR_RESET_Pin */
  GPIO_InitStruct.Pin = P1_Pin|P4_Pin|P2_Pin|P5_Pin 
 80021de:	232f      	movs	r3, #47	; 0x2f
 80021e0:	617b      	str	r3, [r7, #20]
                          |LR_RESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021e2:	2301      	movs	r3, #1
 80021e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e6:	2300      	movs	r3, #0
 80021e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ea:	2300      	movs	r3, #0
 80021ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021ee:	f107 0314 	add.w	r3, r7, #20
 80021f2:	4619      	mov	r1, r3
 80021f4:	483f      	ldr	r0, [pc, #252]	; (80022f4 <MX_GPIO_Init+0x1d8>)
 80021f6:	f001 f94f 	bl	8003498 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH_L_Pin EN_L_Pin PH_R_Pin */
  GPIO_InitStruct.Pin = PH_L_Pin|EN_L_Pin|PH_R_Pin;
 80021fa:	2307      	movs	r3, #7
 80021fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021fe:	2301      	movs	r3, #1
 8002200:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002202:	2302      	movs	r3, #2
 8002204:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002206:	2300      	movs	r3, #0
 8002208:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800220a:	f107 0314 	add.w	r3, r7, #20
 800220e:	4619      	mov	r1, r3
 8002210:	4839      	ldr	r0, [pc, #228]	; (80022f8 <MX_GPIO_Init+0x1dc>)
 8002212:	f001 f941 	bl	8003498 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_R_Pin P7_Pin */
  GPIO_InitStruct.Pin = EN_R_Pin|P7_Pin;
 8002216:	2318      	movs	r3, #24
 8002218:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800221a:	2301      	movs	r3, #1
 800221c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221e:	2300      	movs	r3, #0
 8002220:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002222:	2300      	movs	r3, #0
 8002224:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002226:	f107 0314 	add.w	r3, r7, #20
 800222a:	4619      	mov	r1, r3
 800222c:	4832      	ldr	r0, [pc, #200]	; (80022f8 <MX_GPIO_Init+0x1dc>)
 800222e:	f001 f933 	bl	8003498 <HAL_GPIO_Init>

  /*Configure GPIO pin : LR_DIO0_Pin */
  GPIO_InitStruct.Pin = LR_DIO0_Pin;
 8002232:	2340      	movs	r3, #64	; 0x40
 8002234:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002236:	4b32      	ldr	r3, [pc, #200]	; (8002300 <MX_GPIO_Init+0x1e4>)
 8002238:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800223a:	2302      	movs	r3, #2
 800223c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LR_DIO0_GPIO_Port, &GPIO_InitStruct);
 800223e:	f107 0314 	add.w	r3, r7, #20
 8002242:	4619      	mov	r1, r3
 8002244:	482c      	ldr	r0, [pc, #176]	; (80022f8 <MX_GPIO_Init+0x1dc>)
 8002246:	f001 f927 	bl	8003498 <HAL_GPIO_Init>

  /*Configure GPIO pins : P3_Pin LR_NSS_Pin */
  GPIO_InitStruct.Pin = P3_Pin|LR_NSS_Pin;
 800224a:	f240 2302 	movw	r3, #514	; 0x202
 800224e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002250:	2301      	movs	r3, #1
 8002252:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002254:	2300      	movs	r3, #0
 8002256:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002258:	2300      	movs	r3, #0
 800225a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800225c:	f107 0314 	add.w	r3, r7, #20
 8002260:	4619      	mov	r1, r3
 8002262:	4826      	ldr	r0, [pc, #152]	; (80022fc <MX_GPIO_Init+0x1e0>)
 8002264:	f001 f918 	bl	8003498 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDD_Pin LEDC_Pin */
  GPIO_InitStruct.Pin = LEDD_Pin|LEDC_Pin;
 8002268:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800226c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800226e:	2301      	movs	r3, #1
 8002270:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002272:	2302      	movs	r3, #2
 8002274:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002276:	2300      	movs	r3, #0
 8002278:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800227a:	f107 0314 	add.w	r3, r7, #20
 800227e:	4619      	mov	r1, r3
 8002280:	481e      	ldr	r0, [pc, #120]	; (80022fc <MX_GPIO_Init+0x1e0>)
 8002282:	f001 f909 	bl	8003498 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDB_Pin LEDA_Pin */
  GPIO_InitStruct.Pin = LEDB_Pin|LEDA_Pin;
 8002286:	23c0      	movs	r3, #192	; 0xc0
 8002288:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800228a:	2301      	movs	r3, #1
 800228c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800228e:	2302      	movs	r3, #2
 8002290:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002292:	2300      	movs	r3, #0
 8002294:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002296:	f107 0314 	add.w	r3, r7, #20
 800229a:	4619      	mov	r1, r3
 800229c:	4815      	ldr	r0, [pc, #84]	; (80022f4 <MX_GPIO_Init+0x1d8>)
 800229e:	f001 f8fb 	bl	8003498 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_SW_Pin */
  GPIO_InitStruct.Pin = SDIO_SW_Pin;
 80022a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022a8:	2300      	movs	r3, #0
 80022aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ac:	2300      	movs	r3, #0
 80022ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDIO_SW_GPIO_Port, &GPIO_InitStruct);
 80022b0:	f107 0314 	add.w	r3, r7, #20
 80022b4:	4619      	mov	r1, r3
 80022b6:	4810      	ldr	r0, [pc, #64]	; (80022f8 <MX_GPIO_Init+0x1dc>)
 80022b8:	f001 f8ee 	bl	8003498 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_USR_Pin */
  GPIO_InitStruct.Pin = BTN_USR_Pin;
 80022bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022c2:	2300      	movs	r3, #0
 80022c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022c6:	2301      	movs	r3, #1
 80022c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_USR_GPIO_Port, &GPIO_InitStruct);
 80022ca:	f107 0314 	add.w	r3, r7, #20
 80022ce:	4619      	mov	r1, r3
 80022d0:	4809      	ldr	r0, [pc, #36]	; (80022f8 <MX_GPIO_Init+0x1dc>)
 80022d2:	f001 f8e1 	bl	8003498 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80022d6:	2200      	movs	r2, #0
 80022d8:	2100      	movs	r1, #0
 80022da:	2017      	movs	r0, #23
 80022dc:	f000 fd09 	bl	8002cf2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80022e0:	2017      	movs	r0, #23
 80022e2:	f000 fd22 	bl	8002d2a <HAL_NVIC_EnableIRQ>

}
 80022e6:	bf00      	nop
 80022e8:	3728      	adds	r7, #40	; 0x28
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40023800 	.word	0x40023800
 80022f4:	40020800 	.word	0x40020800
 80022f8:	40020000 	.word	0x40020000
 80022fc:	40020400 	.word	0x40020400
 8002300:	10110000 	.word	0x10110000

08002304 <HAL_GPIO_EXTI_Callback>:
//todelete
TIM_HandleTypeDef* Get_TIM3_Instance() { return &htim3; }


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	4603      	mov	r3, r0
 800230c:	80fb      	strh	r3, [r7, #6]
	//DIO0 Interrupt function
	if (GPIO_Pin == LR_DIO0_Pin)
 800230e:	88fb      	ldrh	r3, [r7, #6]
 8002310:	2b40      	cmp	r3, #64	; 0x40
 8002312:	d101      	bne.n	8002318 <HAL_GPIO_EXTI_Callback+0x14>
	{
		dio0_IRQ();
 8002314:	f7ff fb76 	bl	8001a04 <dio0_IRQ>
	}
}
 8002318:	bf00      	nop
 800231a:	3708      	adds	r7, #8
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
	// motor interrupt in on TIM3
	if (htim->Instance == TIM3)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a04      	ldr	r2, [pc, #16]	; (8002340 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d101      	bne.n	8002336 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		motorTimeout();
 8002332:	f7ff fb9d 	bl	8001a70 <motorTimeout>
	}

}
 8002336:	bf00      	nop
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40000400 	.word	0x40000400

08002344 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002348:	bf00      	nop
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
	...

08002354 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	607b      	str	r3, [r7, #4]
 800235e:	4b10      	ldr	r3, [pc, #64]	; (80023a0 <HAL_MspInit+0x4c>)
 8002360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002362:	4a0f      	ldr	r2, [pc, #60]	; (80023a0 <HAL_MspInit+0x4c>)
 8002364:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002368:	6453      	str	r3, [r2, #68]	; 0x44
 800236a:	4b0d      	ldr	r3, [pc, #52]	; (80023a0 <HAL_MspInit+0x4c>)
 800236c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002372:	607b      	str	r3, [r7, #4]
 8002374:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002376:	2300      	movs	r3, #0
 8002378:	603b      	str	r3, [r7, #0]
 800237a:	4b09      	ldr	r3, [pc, #36]	; (80023a0 <HAL_MspInit+0x4c>)
 800237c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237e:	4a08      	ldr	r2, [pc, #32]	; (80023a0 <HAL_MspInit+0x4c>)
 8002380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002384:	6413      	str	r3, [r2, #64]	; 0x40
 8002386:	4b06      	ldr	r3, [pc, #24]	; (80023a0 <HAL_MspInit+0x4c>)
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238e:	603b      	str	r3, [r7, #0]
 8002390:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002392:	bf00      	nop
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	40023800 	.word	0x40023800

080023a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b08a      	sub	sp, #40	; 0x28
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ac:	f107 0314 	add.w	r3, r7, #20
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	605a      	str	r2, [r3, #4]
 80023b6:	609a      	str	r2, [r3, #8]
 80023b8:	60da      	str	r2, [r3, #12]
 80023ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a19      	ldr	r2, [pc, #100]	; (8002428 <HAL_I2C_MspInit+0x84>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d12b      	bne.n	800241e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023c6:	2300      	movs	r3, #0
 80023c8:	613b      	str	r3, [r7, #16]
 80023ca:	4b18      	ldr	r3, [pc, #96]	; (800242c <HAL_I2C_MspInit+0x88>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	4a17      	ldr	r2, [pc, #92]	; (800242c <HAL_I2C_MspInit+0x88>)
 80023d0:	f043 0302 	orr.w	r3, r3, #2
 80023d4:	6313      	str	r3, [r2, #48]	; 0x30
 80023d6:	4b15      	ldr	r3, [pc, #84]	; (800242c <HAL_I2C_MspInit+0x88>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	613b      	str	r3, [r7, #16]
 80023e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 80023e2:	23c0      	movs	r3, #192	; 0xc0
 80023e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023e6:	2312      	movs	r3, #18
 80023e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ea:	2300      	movs	r3, #0
 80023ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ee:	2303      	movs	r3, #3
 80023f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023f2:	2304      	movs	r3, #4
 80023f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023f6:	f107 0314 	add.w	r3, r7, #20
 80023fa:	4619      	mov	r1, r3
 80023fc:	480c      	ldr	r0, [pc, #48]	; (8002430 <HAL_I2C_MspInit+0x8c>)
 80023fe:	f001 f84b 	bl	8003498 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002402:	2300      	movs	r3, #0
 8002404:	60fb      	str	r3, [r7, #12]
 8002406:	4b09      	ldr	r3, [pc, #36]	; (800242c <HAL_I2C_MspInit+0x88>)
 8002408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240a:	4a08      	ldr	r2, [pc, #32]	; (800242c <HAL_I2C_MspInit+0x88>)
 800240c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002410:	6413      	str	r3, [r2, #64]	; 0x40
 8002412:	4b06      	ldr	r3, [pc, #24]	; (800242c <HAL_I2C_MspInit+0x88>)
 8002414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002416:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800241a:	60fb      	str	r3, [r7, #12]
 800241c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800241e:	bf00      	nop
 8002420:	3728      	adds	r7, #40	; 0x28
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40005400 	.word	0x40005400
 800242c:	40023800 	.word	0x40023800
 8002430:	40020400 	.word	0x40020400

08002434 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a05      	ldr	r2, [pc, #20]	; (8002458 <HAL_RTC_MspInit+0x24>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d102      	bne.n	800244c <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002446:	4b05      	ldr	r3, [pc, #20]	; (800245c <HAL_RTC_MspInit+0x28>)
 8002448:	2201      	movs	r2, #1
 800244a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	40002800 	.word	0x40002800
 800245c:	42470e3c 	.word	0x42470e3c

08002460 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b08a      	sub	sp, #40	; 0x28
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002468:	f107 0314 	add.w	r3, r7, #20
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	605a      	str	r2, [r3, #4]
 8002472:	609a      	str	r2, [r3, #8]
 8002474:	60da      	str	r2, [r3, #12]
 8002476:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a70      	ldr	r2, [pc, #448]	; (8002640 <HAL_SD_MspInit+0x1e0>)
 800247e:	4293      	cmp	r3, r2
 8002480:	f040 80da 	bne.w	8002638 <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8002484:	2300      	movs	r3, #0
 8002486:	613b      	str	r3, [r7, #16]
 8002488:	4b6e      	ldr	r3, [pc, #440]	; (8002644 <HAL_SD_MspInit+0x1e4>)
 800248a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248c:	4a6d      	ldr	r2, [pc, #436]	; (8002644 <HAL_SD_MspInit+0x1e4>)
 800248e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002492:	6453      	str	r3, [r2, #68]	; 0x44
 8002494:	4b6b      	ldr	r3, [pc, #428]	; (8002644 <HAL_SD_MspInit+0x1e4>)
 8002496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002498:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800249c:	613b      	str	r3, [r7, #16]
 800249e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024a0:	2300      	movs	r3, #0
 80024a2:	60fb      	str	r3, [r7, #12]
 80024a4:	4b67      	ldr	r3, [pc, #412]	; (8002644 <HAL_SD_MspInit+0x1e4>)
 80024a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a8:	4a66      	ldr	r2, [pc, #408]	; (8002644 <HAL_SD_MspInit+0x1e4>)
 80024aa:	f043 0304 	orr.w	r3, r3, #4
 80024ae:	6313      	str	r3, [r2, #48]	; 0x30
 80024b0:	4b64      	ldr	r3, [pc, #400]	; (8002644 <HAL_SD_MspInit+0x1e4>)
 80024b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b4:	f003 0304 	and.w	r3, r3, #4
 80024b8:	60fb      	str	r3, [r7, #12]
 80024ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024bc:	2300      	movs	r3, #0
 80024be:	60bb      	str	r3, [r7, #8]
 80024c0:	4b60      	ldr	r3, [pc, #384]	; (8002644 <HAL_SD_MspInit+0x1e4>)
 80024c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c4:	4a5f      	ldr	r2, [pc, #380]	; (8002644 <HAL_SD_MspInit+0x1e4>)
 80024c6:	f043 0308 	orr.w	r3, r3, #8
 80024ca:	6313      	str	r3, [r2, #48]	; 0x30
 80024cc:	4b5d      	ldr	r3, [pc, #372]	; (8002644 <HAL_SD_MspInit+0x1e4>)
 80024ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d0:	f003 0308 	and.w	r3, r3, #8
 80024d4:	60bb      	str	r3, [r7, #8]
 80024d6:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80024d8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80024dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024de:	2302      	movs	r3, #2
 80024e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024e2:	2301      	movs	r3, #1
 80024e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e6:	2303      	movs	r3, #3
 80024e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80024ea:	230c      	movs	r3, #12
 80024ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024ee:	f107 0314 	add.w	r3, r7, #20
 80024f2:	4619      	mov	r1, r3
 80024f4:	4854      	ldr	r0, [pc, #336]	; (8002648 <HAL_SD_MspInit+0x1e8>)
 80024f6:	f000 ffcf 	bl	8003498 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80024fa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80024fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002500:	2302      	movs	r3, #2
 8002502:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002504:	2300      	movs	r3, #0
 8002506:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002508:	2303      	movs	r3, #3
 800250a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800250c:	230c      	movs	r3, #12
 800250e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002510:	f107 0314 	add.w	r3, r7, #20
 8002514:	4619      	mov	r1, r3
 8002516:	484c      	ldr	r0, [pc, #304]	; (8002648 <HAL_SD_MspInit+0x1e8>)
 8002518:	f000 ffbe 	bl	8003498 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800251c:	2304      	movs	r3, #4
 800251e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002520:	2302      	movs	r3, #2
 8002522:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002524:	2301      	movs	r3, #1
 8002526:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002528:	2303      	movs	r3, #3
 800252a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800252c:	230c      	movs	r3, #12
 800252e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002530:	f107 0314 	add.w	r3, r7, #20
 8002534:	4619      	mov	r1, r3
 8002536:	4845      	ldr	r0, [pc, #276]	; (800264c <HAL_SD_MspInit+0x1ec>)
 8002538:	f000 ffae 	bl	8003498 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800253c:	4b44      	ldr	r3, [pc, #272]	; (8002650 <HAL_SD_MspInit+0x1f0>)
 800253e:	4a45      	ldr	r2, [pc, #276]	; (8002654 <HAL_SD_MspInit+0x1f4>)
 8002540:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8002542:	4b43      	ldr	r3, [pc, #268]	; (8002650 <HAL_SD_MspInit+0x1f0>)
 8002544:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002548:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800254a:	4b41      	ldr	r3, [pc, #260]	; (8002650 <HAL_SD_MspInit+0x1f0>)
 800254c:	2200      	movs	r2, #0
 800254e:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002550:	4b3f      	ldr	r3, [pc, #252]	; (8002650 <HAL_SD_MspInit+0x1f0>)
 8002552:	2200      	movs	r2, #0
 8002554:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002556:	4b3e      	ldr	r3, [pc, #248]	; (8002650 <HAL_SD_MspInit+0x1f0>)
 8002558:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800255c:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800255e:	4b3c      	ldr	r3, [pc, #240]	; (8002650 <HAL_SD_MspInit+0x1f0>)
 8002560:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002564:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002566:	4b3a      	ldr	r3, [pc, #232]	; (8002650 <HAL_SD_MspInit+0x1f0>)
 8002568:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800256c:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800256e:	4b38      	ldr	r3, [pc, #224]	; (8002650 <HAL_SD_MspInit+0x1f0>)
 8002570:	2220      	movs	r2, #32
 8002572:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002574:	4b36      	ldr	r3, [pc, #216]	; (8002650 <HAL_SD_MspInit+0x1f0>)
 8002576:	2200      	movs	r2, #0
 8002578:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800257a:	4b35      	ldr	r3, [pc, #212]	; (8002650 <HAL_SD_MspInit+0x1f0>)
 800257c:	2204      	movs	r2, #4
 800257e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002580:	4b33      	ldr	r3, [pc, #204]	; (8002650 <HAL_SD_MspInit+0x1f0>)
 8002582:	2203      	movs	r2, #3
 8002584:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8002586:	4b32      	ldr	r3, [pc, #200]	; (8002650 <HAL_SD_MspInit+0x1f0>)
 8002588:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800258c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800258e:	4b30      	ldr	r3, [pc, #192]	; (8002650 <HAL_SD_MspInit+0x1f0>)
 8002590:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002594:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8002596:	482e      	ldr	r0, [pc, #184]	; (8002650 <HAL_SD_MspInit+0x1f0>)
 8002598:	f000 fbe2 	bl	8002d60 <HAL_DMA_Init>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 80025a2:	f7ff fecf 	bl	8002344 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a29      	ldr	r2, [pc, #164]	; (8002650 <HAL_SD_MspInit+0x1f0>)
 80025aa:	641a      	str	r2, [r3, #64]	; 0x40
 80025ac:	4a28      	ldr	r2, [pc, #160]	; (8002650 <HAL_SD_MspInit+0x1f0>)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80025b2:	4b29      	ldr	r3, [pc, #164]	; (8002658 <HAL_SD_MspInit+0x1f8>)
 80025b4:	4a29      	ldr	r2, [pc, #164]	; (800265c <HAL_SD_MspInit+0x1fc>)
 80025b6:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80025b8:	4b27      	ldr	r3, [pc, #156]	; (8002658 <HAL_SD_MspInit+0x1f8>)
 80025ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025be:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025c0:	4b25      	ldr	r3, [pc, #148]	; (8002658 <HAL_SD_MspInit+0x1f8>)
 80025c2:	2240      	movs	r2, #64	; 0x40
 80025c4:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025c6:	4b24      	ldr	r3, [pc, #144]	; (8002658 <HAL_SD_MspInit+0x1f8>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025cc:	4b22      	ldr	r3, [pc, #136]	; (8002658 <HAL_SD_MspInit+0x1f8>)
 80025ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025d2:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80025d4:	4b20      	ldr	r3, [pc, #128]	; (8002658 <HAL_SD_MspInit+0x1f8>)
 80025d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80025da:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80025dc:	4b1e      	ldr	r3, [pc, #120]	; (8002658 <HAL_SD_MspInit+0x1f8>)
 80025de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80025e2:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80025e4:	4b1c      	ldr	r3, [pc, #112]	; (8002658 <HAL_SD_MspInit+0x1f8>)
 80025e6:	2220      	movs	r2, #32
 80025e8:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80025ea:	4b1b      	ldr	r3, [pc, #108]	; (8002658 <HAL_SD_MspInit+0x1f8>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80025f0:	4b19      	ldr	r3, [pc, #100]	; (8002658 <HAL_SD_MspInit+0x1f8>)
 80025f2:	2204      	movs	r2, #4
 80025f4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80025f6:	4b18      	ldr	r3, [pc, #96]	; (8002658 <HAL_SD_MspInit+0x1f8>)
 80025f8:	2203      	movs	r2, #3
 80025fa:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80025fc:	4b16      	ldr	r3, [pc, #88]	; (8002658 <HAL_SD_MspInit+0x1f8>)
 80025fe:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002602:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002604:	4b14      	ldr	r3, [pc, #80]	; (8002658 <HAL_SD_MspInit+0x1f8>)
 8002606:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800260a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800260c:	4812      	ldr	r0, [pc, #72]	; (8002658 <HAL_SD_MspInit+0x1f8>)
 800260e:	f000 fba7 	bl	8002d60 <HAL_DMA_Init>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 8002618:	f7ff fe94 	bl	8002344 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4a0e      	ldr	r2, [pc, #56]	; (8002658 <HAL_SD_MspInit+0x1f8>)
 8002620:	63da      	str	r2, [r3, #60]	; 0x3c
 8002622:	4a0d      	ldr	r2, [pc, #52]	; (8002658 <HAL_SD_MspInit+0x1f8>)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8002628:	2200      	movs	r2, #0
 800262a:	2100      	movs	r1, #0
 800262c:	2031      	movs	r0, #49	; 0x31
 800262e:	f000 fb60 	bl	8002cf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8002632:	2031      	movs	r0, #49	; 0x31
 8002634:	f000 fb79 	bl	8002d2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8002638:	bf00      	nop
 800263a:	3728      	adds	r7, #40	; 0x28
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	40012c00 	.word	0x40012c00
 8002644:	40023800 	.word	0x40023800
 8002648:	40020800 	.word	0x40020800
 800264c:	40020c00 	.word	0x40020c00
 8002650:	20000c00 	.word	0x20000c00
 8002654:	40026458 	.word	0x40026458
 8002658:	20000dd4 	.word	0x20000dd4
 800265c:	400264a0 	.word	0x400264a0

08002660 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b08a      	sub	sp, #40	; 0x28
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002668:	f107 0314 	add.w	r3, r7, #20
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	605a      	str	r2, [r3, #4]
 8002672:	609a      	str	r2, [r3, #8]
 8002674:	60da      	str	r2, [r3, #12]
 8002676:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a19      	ldr	r2, [pc, #100]	; (80026e4 <HAL_SPI_MspInit+0x84>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d12b      	bne.n	80026da <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002682:	2300      	movs	r3, #0
 8002684:	613b      	str	r3, [r7, #16]
 8002686:	4b18      	ldr	r3, [pc, #96]	; (80026e8 <HAL_SPI_MspInit+0x88>)
 8002688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268a:	4a17      	ldr	r2, [pc, #92]	; (80026e8 <HAL_SPI_MspInit+0x88>)
 800268c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002690:	6453      	str	r3, [r2, #68]	; 0x44
 8002692:	4b15      	ldr	r3, [pc, #84]	; (80026e8 <HAL_SPI_MspInit+0x88>)
 8002694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002696:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800269a:	613b      	str	r3, [r7, #16]
 800269c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	4b11      	ldr	r3, [pc, #68]	; (80026e8 <HAL_SPI_MspInit+0x88>)
 80026a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a6:	4a10      	ldr	r2, [pc, #64]	; (80026e8 <HAL_SPI_MspInit+0x88>)
 80026a8:	f043 0302 	orr.w	r3, r3, #2
 80026ac:	6313      	str	r3, [r2, #48]	; 0x30
 80026ae:	4b0e      	ldr	r3, [pc, #56]	; (80026e8 <HAL_SPI_MspInit+0x88>)
 80026b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = LR_SCK_Pin|LR_MISO_Pin|LR_MOSI_Pin;
 80026ba:	2338      	movs	r3, #56	; 0x38
 80026bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026be:	2302      	movs	r3, #2
 80026c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c2:	2300      	movs	r3, #0
 80026c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026c6:	2303      	movs	r3, #3
 80026c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80026ca:	2305      	movs	r3, #5
 80026cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ce:	f107 0314 	add.w	r3, r7, #20
 80026d2:	4619      	mov	r1, r3
 80026d4:	4805      	ldr	r0, [pc, #20]	; (80026ec <HAL_SPI_MspInit+0x8c>)
 80026d6:	f000 fedf 	bl	8003498 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80026da:	bf00      	nop
 80026dc:	3728      	adds	r7, #40	; 0x28
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	40013000 	.word	0x40013000
 80026e8:	40023800 	.word	0x40023800
 80026ec:	40020400 	.word	0x40020400

080026f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002700:	d10e      	bne.n	8002720 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002702:	2300      	movs	r3, #0
 8002704:	617b      	str	r3, [r7, #20]
 8002706:	4b2a      	ldr	r3, [pc, #168]	; (80027b0 <HAL_TIM_Base_MspInit+0xc0>)
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	4a29      	ldr	r2, [pc, #164]	; (80027b0 <HAL_TIM_Base_MspInit+0xc0>)
 800270c:	f043 0301 	orr.w	r3, r3, #1
 8002710:	6413      	str	r3, [r2, #64]	; 0x40
 8002712:	4b27      	ldr	r3, [pc, #156]	; (80027b0 <HAL_TIM_Base_MspInit+0xc0>)
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	617b      	str	r3, [r7, #20]
 800271c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800271e:	e042      	b.n	80027a6 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a23      	ldr	r2, [pc, #140]	; (80027b4 <HAL_TIM_Base_MspInit+0xc4>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d116      	bne.n	8002758 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800272a:	2300      	movs	r3, #0
 800272c:	613b      	str	r3, [r7, #16]
 800272e:	4b20      	ldr	r3, [pc, #128]	; (80027b0 <HAL_TIM_Base_MspInit+0xc0>)
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	4a1f      	ldr	r2, [pc, #124]	; (80027b0 <HAL_TIM_Base_MspInit+0xc0>)
 8002734:	f043 0302 	orr.w	r3, r3, #2
 8002738:	6413      	str	r3, [r2, #64]	; 0x40
 800273a:	4b1d      	ldr	r3, [pc, #116]	; (80027b0 <HAL_TIM_Base_MspInit+0xc0>)
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	613b      	str	r3, [r7, #16]
 8002744:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002746:	2200      	movs	r2, #0
 8002748:	2100      	movs	r1, #0
 800274a:	201d      	movs	r0, #29
 800274c:	f000 fad1 	bl	8002cf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002750:	201d      	movs	r0, #29
 8002752:	f000 faea 	bl	8002d2a <HAL_NVIC_EnableIRQ>
}
 8002756:	e026      	b.n	80027a6 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM4)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a16      	ldr	r2, [pc, #88]	; (80027b8 <HAL_TIM_Base_MspInit+0xc8>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d10e      	bne.n	8002780 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002762:	2300      	movs	r3, #0
 8002764:	60fb      	str	r3, [r7, #12]
 8002766:	4b12      	ldr	r3, [pc, #72]	; (80027b0 <HAL_TIM_Base_MspInit+0xc0>)
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	4a11      	ldr	r2, [pc, #68]	; (80027b0 <HAL_TIM_Base_MspInit+0xc0>)
 800276c:	f043 0304 	orr.w	r3, r3, #4
 8002770:	6413      	str	r3, [r2, #64]	; 0x40
 8002772:	4b0f      	ldr	r3, [pc, #60]	; (80027b0 <HAL_TIM_Base_MspInit+0xc0>)
 8002774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002776:	f003 0304 	and.w	r3, r3, #4
 800277a:	60fb      	str	r3, [r7, #12]
 800277c:	68fb      	ldr	r3, [r7, #12]
}
 800277e:	e012      	b.n	80027a6 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM5)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a0d      	ldr	r2, [pc, #52]	; (80027bc <HAL_TIM_Base_MspInit+0xcc>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d10d      	bne.n	80027a6 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800278a:	2300      	movs	r3, #0
 800278c:	60bb      	str	r3, [r7, #8]
 800278e:	4b08      	ldr	r3, [pc, #32]	; (80027b0 <HAL_TIM_Base_MspInit+0xc0>)
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	4a07      	ldr	r2, [pc, #28]	; (80027b0 <HAL_TIM_Base_MspInit+0xc0>)
 8002794:	f043 0308 	orr.w	r3, r3, #8
 8002798:	6413      	str	r3, [r2, #64]	; 0x40
 800279a:	4b05      	ldr	r3, [pc, #20]	; (80027b0 <HAL_TIM_Base_MspInit+0xc0>)
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	f003 0308 	and.w	r3, r3, #8
 80027a2:	60bb      	str	r3, [r7, #8]
 80027a4:	68bb      	ldr	r3, [r7, #8]
}
 80027a6:	bf00      	nop
 80027a8:	3718      	adds	r7, #24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40023800 	.word	0x40023800
 80027b4:	40000400 	.word	0x40000400
 80027b8:	40000800 	.word	0x40000800
 80027bc:	40000c00 	.word	0x40000c00

080027c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b088      	sub	sp, #32
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c8:	f107 030c 	add.w	r3, r7, #12
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	605a      	str	r2, [r3, #4]
 80027d2:	609a      	str	r2, [r3, #8]
 80027d4:	60da      	str	r2, [r3, #12]
 80027d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a12      	ldr	r2, [pc, #72]	; (8002828 <HAL_TIM_MspPostInit+0x68>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d11d      	bne.n	800281e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027e2:	2300      	movs	r3, #0
 80027e4:	60bb      	str	r3, [r7, #8]
 80027e6:	4b11      	ldr	r3, [pc, #68]	; (800282c <HAL_TIM_MspPostInit+0x6c>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	4a10      	ldr	r2, [pc, #64]	; (800282c <HAL_TIM_MspPostInit+0x6c>)
 80027ec:	f043 0302 	orr.w	r3, r3, #2
 80027f0:	6313      	str	r3, [r2, #48]	; 0x30
 80027f2:	4b0e      	ldr	r3, [pc, #56]	; (800282c <HAL_TIM_MspPostInit+0x6c>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	60bb      	str	r3, [r7, #8]
 80027fc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PB0     ------> TIM3_CH3 
    */
    GPIO_InitStruct.Pin = P6_Pin;
 80027fe:	2301      	movs	r3, #1
 8002800:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002802:	2302      	movs	r3, #2
 8002804:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002806:	2300      	movs	r3, #0
 8002808:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800280a:	2300      	movs	r3, #0
 800280c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800280e:	2302      	movs	r3, #2
 8002810:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(P6_GPIO_Port, &GPIO_InitStruct);
 8002812:	f107 030c 	add.w	r3, r7, #12
 8002816:	4619      	mov	r1, r3
 8002818:	4805      	ldr	r0, [pc, #20]	; (8002830 <HAL_TIM_MspPostInit+0x70>)
 800281a:	f000 fe3d 	bl	8003498 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800281e:	bf00      	nop
 8002820:	3720      	adds	r7, #32
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	40000400 	.word	0x40000400
 800282c:	40023800 	.word	0x40023800
 8002830:	40020400 	.word	0x40020400

08002834 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b08a      	sub	sp, #40	; 0x28
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800283c:	f107 0314 	add.w	r3, r7, #20
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	605a      	str	r2, [r3, #4]
 8002846:	609a      	str	r2, [r3, #8]
 8002848:	60da      	str	r2, [r3, #12]
 800284a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a19      	ldr	r2, [pc, #100]	; (80028b8 <HAL_UART_MspInit+0x84>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d12c      	bne.n	80028b0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002856:	2300      	movs	r3, #0
 8002858:	613b      	str	r3, [r7, #16]
 800285a:	4b18      	ldr	r3, [pc, #96]	; (80028bc <HAL_UART_MspInit+0x88>)
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	4a17      	ldr	r2, [pc, #92]	; (80028bc <HAL_UART_MspInit+0x88>)
 8002860:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002864:	6413      	str	r3, [r2, #64]	; 0x40
 8002866:	4b15      	ldr	r3, [pc, #84]	; (80028bc <HAL_UART_MspInit+0x88>)
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800286e:	613b      	str	r3, [r7, #16]
 8002870:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002872:	2300      	movs	r3, #0
 8002874:	60fb      	str	r3, [r7, #12]
 8002876:	4b11      	ldr	r3, [pc, #68]	; (80028bc <HAL_UART_MspInit+0x88>)
 8002878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287a:	4a10      	ldr	r2, [pc, #64]	; (80028bc <HAL_UART_MspInit+0x88>)
 800287c:	f043 0302 	orr.w	r3, r3, #2
 8002880:	6313      	str	r3, [r2, #48]	; 0x30
 8002882:	4b0e      	ldr	r3, [pc, #56]	; (80028bc <HAL_UART_MspInit+0x88>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	60fb      	str	r3, [r7, #12]
 800288c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPS_RX_Pin|GPS_TX_Pin;
 800288e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002892:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002894:	2302      	movs	r3, #2
 8002896:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002898:	2300      	movs	r3, #0
 800289a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800289c:	2303      	movs	r3, #3
 800289e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80028a0:	2307      	movs	r3, #7
 80028a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028a4:	f107 0314 	add.w	r3, r7, #20
 80028a8:	4619      	mov	r1, r3
 80028aa:	4805      	ldr	r0, [pc, #20]	; (80028c0 <HAL_UART_MspInit+0x8c>)
 80028ac:	f000 fdf4 	bl	8003498 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80028b0:	bf00      	nop
 80028b2:	3728      	adds	r7, #40	; 0x28
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40004800 	.word	0x40004800
 80028bc:	40023800 	.word	0x40023800
 80028c0:	40020400 	.word	0x40020400

080028c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80028c8:	bf00      	nop
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr

080028d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028d2:	b480      	push	{r7}
 80028d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028d6:	e7fe      	b.n	80028d6 <HardFault_Handler+0x4>

080028d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028dc:	e7fe      	b.n	80028dc <MemManage_Handler+0x4>

080028de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028de:	b480      	push	{r7}
 80028e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028e2:	e7fe      	b.n	80028e2 <BusFault_Handler+0x4>

080028e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028e8:	e7fe      	b.n	80028e8 <UsageFault_Handler+0x4>

080028ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028ea:	b480      	push	{r7}
 80028ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028ee:	bf00      	nop
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028fc:	bf00      	nop
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002906:	b480      	push	{r7}
 8002908:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800290a:	bf00      	nop
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002918:	f000 f8ce 	bl	8002ab8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800291c:	bf00      	nop
 800291e:	bd80      	pop	{r7, pc}

08002920 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002924:	2040      	movs	r0, #64	; 0x40
 8002926:	f000 ff83 	bl	8003830 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800292a:	bf00      	nop
 800292c:	bd80      	pop	{r7, pc}
	...

08002930 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002934:	4802      	ldr	r0, [pc, #8]	; (8002940 <TIM3_IRQHandler+0x10>)
 8002936:	f005 f96f 	bl	8007c18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800293a:	bf00      	nop
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	20000d74 	.word	0x20000d74

08002944 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8002948:	4802      	ldr	r0, [pc, #8]	; (8002954 <SDIO_IRQHandler+0x10>)
 800294a:	f003 fc3b 	bl	80061c4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800294e:	bf00      	nop
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	20000e34 	.word	0x20000e34

08002958 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800295c:	4802      	ldr	r0, [pc, #8]	; (8002968 <DMA2_Stream3_IRQHandler+0x10>)
 800295e:	f000 fb27 	bl	8002fb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002962:	bf00      	nop
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	20000c00 	.word	0x20000c00

0800296c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002970:	4802      	ldr	r0, [pc, #8]	; (800297c <OTG_FS_IRQHandler+0x10>)
 8002972:	f001 f9fd 	bl	8003d70 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002976:	bf00      	nop
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	20002858 	.word	0x20002858

08002980 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8002984:	4802      	ldr	r0, [pc, #8]	; (8002990 <DMA2_Stream6_IRQHandler+0x10>)
 8002986:	f000 fb13 	bl	8002fb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800298a:	bf00      	nop
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	20000dd4 	.word	0x20000dd4

08002994 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002998:	4b08      	ldr	r3, [pc, #32]	; (80029bc <SystemInit+0x28>)
 800299a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800299e:	4a07      	ldr	r2, [pc, #28]	; (80029bc <SystemInit+0x28>)
 80029a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80029a8:	4b04      	ldr	r3, [pc, #16]	; (80029bc <SystemInit+0x28>)
 80029aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029ae:	609a      	str	r2, [r3, #8]
#endif
}
 80029b0:	bf00      	nop
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	e000ed00 	.word	0xe000ed00

080029c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80029c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80029c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80029c6:	e003      	b.n	80029d0 <LoopCopyDataInit>

080029c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80029c8:	4b0c      	ldr	r3, [pc, #48]	; (80029fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80029ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80029cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80029ce:	3104      	adds	r1, #4

080029d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80029d0:	480b      	ldr	r0, [pc, #44]	; (8002a00 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80029d2:	4b0c      	ldr	r3, [pc, #48]	; (8002a04 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80029d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80029d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80029d8:	d3f6      	bcc.n	80029c8 <CopyDataInit>
  ldr  r2, =_sbss
 80029da:	4a0b      	ldr	r2, [pc, #44]	; (8002a08 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80029dc:	e002      	b.n	80029e4 <LoopFillZerobss>

080029de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80029de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80029e0:	f842 3b04 	str.w	r3, [r2], #4

080029e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80029e4:	4b09      	ldr	r3, [pc, #36]	; (8002a0c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80029e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80029e8:	d3f9      	bcc.n	80029de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80029ea:	f7ff ffd3 	bl	8002994 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029ee:	f00a febb 	bl	800d768 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029f2:	f7ff f849 	bl	8001a88 <main>
  bx  lr    
 80029f6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80029f8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80029fc:	08011bc0 	.word	0x08011bc0
  ldr  r0, =_sdata
 8002a00:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002a04:	2000034c 	.word	0x2000034c
  ldr  r2, =_sbss
 8002a08:	2000034c 	.word	0x2000034c
  ldr  r3, = _ebss
 8002a0c:	20002c64 	.word	0x20002c64

08002a10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a10:	e7fe      	b.n	8002a10 <ADC_IRQHandler>
	...

08002a14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a18:	4b0e      	ldr	r3, [pc, #56]	; (8002a54 <HAL_Init+0x40>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a0d      	ldr	r2, [pc, #52]	; (8002a54 <HAL_Init+0x40>)
 8002a1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a24:	4b0b      	ldr	r3, [pc, #44]	; (8002a54 <HAL_Init+0x40>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a0a      	ldr	r2, [pc, #40]	; (8002a54 <HAL_Init+0x40>)
 8002a2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a30:	4b08      	ldr	r3, [pc, #32]	; (8002a54 <HAL_Init+0x40>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a07      	ldr	r2, [pc, #28]	; (8002a54 <HAL_Init+0x40>)
 8002a36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a3c:	2003      	movs	r0, #3
 8002a3e:	f000 f94d 	bl	8002cdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a42:	2000      	movs	r0, #0
 8002a44:	f000 f808 	bl	8002a58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a48:	f7ff fc84 	bl	8002354 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	40023c00 	.word	0x40023c00

08002a58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a60:	4b12      	ldr	r3, [pc, #72]	; (8002aac <HAL_InitTick+0x54>)
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	4b12      	ldr	r3, [pc, #72]	; (8002ab0 <HAL_InitTick+0x58>)
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	4619      	mov	r1, r3
 8002a6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a76:	4618      	mov	r0, r3
 8002a78:	f000 f965 	bl	8002d46 <HAL_SYSTICK_Config>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e00e      	b.n	8002aa4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2b0f      	cmp	r3, #15
 8002a8a:	d80a      	bhi.n	8002aa2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	6879      	ldr	r1, [r7, #4]
 8002a90:	f04f 30ff 	mov.w	r0, #4294967295
 8002a94:	f000 f92d 	bl	8002cf2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a98:	4a06      	ldr	r2, [pc, #24]	; (8002ab4 <HAL_InitTick+0x5c>)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	e000      	b.n	8002aa4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3708      	adds	r7, #8
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	20000000 	.word	0x20000000
 8002ab0:	20000008 	.word	0x20000008
 8002ab4:	20000004 	.word	0x20000004

08002ab8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002abc:	4b06      	ldr	r3, [pc, #24]	; (8002ad8 <HAL_IncTick+0x20>)
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	4b06      	ldr	r3, [pc, #24]	; (8002adc <HAL_IncTick+0x24>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	4a04      	ldr	r2, [pc, #16]	; (8002adc <HAL_IncTick+0x24>)
 8002aca:	6013      	str	r3, [r2, #0]
}
 8002acc:	bf00      	nop
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	20000008 	.word	0x20000008
 8002adc:	20000f50 	.word	0x20000f50

08002ae0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ae4:	4b03      	ldr	r3, [pc, #12]	; (8002af4 <HAL_GetTick+0x14>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	20000f50 	.word	0x20000f50

08002af8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b00:	f7ff ffee 	bl	8002ae0 <HAL_GetTick>
 8002b04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b10:	d005      	beq.n	8002b1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b12:	4b09      	ldr	r3, [pc, #36]	; (8002b38 <HAL_Delay+0x40>)
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	461a      	mov	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b1e:	bf00      	nop
 8002b20:	f7ff ffde 	bl	8002ae0 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d8f7      	bhi.n	8002b20 <HAL_Delay+0x28>
  {
  }
}
 8002b30:	bf00      	nop
 8002b32:	3710      	adds	r7, #16
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	20000008 	.word	0x20000008

08002b3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f003 0307 	and.w	r3, r3, #7
 8002b4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b4c:	4b0c      	ldr	r3, [pc, #48]	; (8002b80 <__NVIC_SetPriorityGrouping+0x44>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b52:	68ba      	ldr	r2, [r7, #8]
 8002b54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b58:	4013      	ands	r3, r2
 8002b5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b6e:	4a04      	ldr	r2, [pc, #16]	; (8002b80 <__NVIC_SetPriorityGrouping+0x44>)
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	60d3      	str	r3, [r2, #12]
}
 8002b74:	bf00      	nop
 8002b76:	3714      	adds	r7, #20
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr
 8002b80:	e000ed00 	.word	0xe000ed00

08002b84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b88:	4b04      	ldr	r3, [pc, #16]	; (8002b9c <__NVIC_GetPriorityGrouping+0x18>)
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	0a1b      	lsrs	r3, r3, #8
 8002b8e:	f003 0307 	and.w	r3, r3, #7
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr
 8002b9c:	e000ed00 	.word	0xe000ed00

08002ba0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	db0b      	blt.n	8002bca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bb2:	79fb      	ldrb	r3, [r7, #7]
 8002bb4:	f003 021f 	and.w	r2, r3, #31
 8002bb8:	4907      	ldr	r1, [pc, #28]	; (8002bd8 <__NVIC_EnableIRQ+0x38>)
 8002bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bbe:	095b      	lsrs	r3, r3, #5
 8002bc0:	2001      	movs	r0, #1
 8002bc2:	fa00 f202 	lsl.w	r2, r0, r2
 8002bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bca:	bf00      	nop
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	e000e100 	.word	0xe000e100

08002bdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	4603      	mov	r3, r0
 8002be4:	6039      	str	r1, [r7, #0]
 8002be6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	db0a      	blt.n	8002c06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	b2da      	uxtb	r2, r3
 8002bf4:	490c      	ldr	r1, [pc, #48]	; (8002c28 <__NVIC_SetPriority+0x4c>)
 8002bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfa:	0112      	lsls	r2, r2, #4
 8002bfc:	b2d2      	uxtb	r2, r2
 8002bfe:	440b      	add	r3, r1
 8002c00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c04:	e00a      	b.n	8002c1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	b2da      	uxtb	r2, r3
 8002c0a:	4908      	ldr	r1, [pc, #32]	; (8002c2c <__NVIC_SetPriority+0x50>)
 8002c0c:	79fb      	ldrb	r3, [r7, #7]
 8002c0e:	f003 030f 	and.w	r3, r3, #15
 8002c12:	3b04      	subs	r3, #4
 8002c14:	0112      	lsls	r2, r2, #4
 8002c16:	b2d2      	uxtb	r2, r2
 8002c18:	440b      	add	r3, r1
 8002c1a:	761a      	strb	r2, [r3, #24]
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr
 8002c28:	e000e100 	.word	0xe000e100
 8002c2c:	e000ed00 	.word	0xe000ed00

08002c30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b089      	sub	sp, #36	; 0x24
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f003 0307 	and.w	r3, r3, #7
 8002c42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	f1c3 0307 	rsb	r3, r3, #7
 8002c4a:	2b04      	cmp	r3, #4
 8002c4c:	bf28      	it	cs
 8002c4e:	2304      	movcs	r3, #4
 8002c50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	3304      	adds	r3, #4
 8002c56:	2b06      	cmp	r3, #6
 8002c58:	d902      	bls.n	8002c60 <NVIC_EncodePriority+0x30>
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	3b03      	subs	r3, #3
 8002c5e:	e000      	b.n	8002c62 <NVIC_EncodePriority+0x32>
 8002c60:	2300      	movs	r3, #0
 8002c62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c64:	f04f 32ff 	mov.w	r2, #4294967295
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6e:	43da      	mvns	r2, r3
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	401a      	ands	r2, r3
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c78:	f04f 31ff 	mov.w	r1, #4294967295
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c82:	43d9      	mvns	r1, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c88:	4313      	orrs	r3, r2
         );
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3724      	adds	r7, #36	; 0x24
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
	...

08002c98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ca8:	d301      	bcc.n	8002cae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002caa:	2301      	movs	r3, #1
 8002cac:	e00f      	b.n	8002cce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cae:	4a0a      	ldr	r2, [pc, #40]	; (8002cd8 <SysTick_Config+0x40>)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cb6:	210f      	movs	r1, #15
 8002cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cbc:	f7ff ff8e 	bl	8002bdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cc0:	4b05      	ldr	r3, [pc, #20]	; (8002cd8 <SysTick_Config+0x40>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cc6:	4b04      	ldr	r3, [pc, #16]	; (8002cd8 <SysTick_Config+0x40>)
 8002cc8:	2207      	movs	r2, #7
 8002cca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3708      	adds	r7, #8
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	e000e010 	.word	0xe000e010

08002cdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f7ff ff29 	bl	8002b3c <__NVIC_SetPriorityGrouping>
}
 8002cea:	bf00      	nop
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b086      	sub	sp, #24
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	60b9      	str	r1, [r7, #8]
 8002cfc:	607a      	str	r2, [r7, #4]
 8002cfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d00:	2300      	movs	r3, #0
 8002d02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d04:	f7ff ff3e 	bl	8002b84 <__NVIC_GetPriorityGrouping>
 8002d08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	68b9      	ldr	r1, [r7, #8]
 8002d0e:	6978      	ldr	r0, [r7, #20]
 8002d10:	f7ff ff8e 	bl	8002c30 <NVIC_EncodePriority>
 8002d14:	4602      	mov	r2, r0
 8002d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d1a:	4611      	mov	r1, r2
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7ff ff5d 	bl	8002bdc <__NVIC_SetPriority>
}
 8002d22:	bf00      	nop
 8002d24:	3718      	adds	r7, #24
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b082      	sub	sp, #8
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	4603      	mov	r3, r0
 8002d32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7ff ff31 	bl	8002ba0 <__NVIC_EnableIRQ>
}
 8002d3e:	bf00      	nop
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b082      	sub	sp, #8
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f7ff ffa2 	bl	8002c98 <SysTick_Config>
 8002d54:	4603      	mov	r3, r0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
	...

08002d60 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d6c:	f7ff feb8 	bl	8002ae0 <HAL_GetTick>
 8002d70:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d101      	bne.n	8002d7c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e099      	b.n	8002eb0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2202      	movs	r2, #2
 8002d88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f022 0201 	bic.w	r2, r2, #1
 8002d9a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d9c:	e00f      	b.n	8002dbe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d9e:	f7ff fe9f 	bl	8002ae0 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	2b05      	cmp	r3, #5
 8002daa:	d908      	bls.n	8002dbe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2220      	movs	r2, #32
 8002db0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2203      	movs	r2, #3
 8002db6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e078      	b.n	8002eb0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d1e8      	bne.n	8002d9e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002dd4:	697a      	ldr	r2, [r7, #20]
 8002dd6:	4b38      	ldr	r3, [pc, #224]	; (8002eb8 <HAL_DMA_Init+0x158>)
 8002dd8:	4013      	ands	r3, r2
 8002dda:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685a      	ldr	r2, [r3, #4]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002dea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002df6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e14:	2b04      	cmp	r3, #4
 8002e16:	d107      	bne.n	8002e28 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e20:	4313      	orrs	r3, r2
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	697a      	ldr	r2, [r7, #20]
 8002e2e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	f023 0307 	bic.w	r3, r3, #7
 8002e3e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e44:	697a      	ldr	r2, [r7, #20]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4e:	2b04      	cmp	r3, #4
 8002e50:	d117      	bne.n	8002e82 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e56:	697a      	ldr	r2, [r7, #20]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d00e      	beq.n	8002e82 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f000 fa9d 	bl	80033a4 <DMA_CheckFifoParam>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d008      	beq.n	8002e82 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2240      	movs	r2, #64	; 0x40
 8002e74:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e016      	b.n	8002eb0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	697a      	ldr	r2, [r7, #20]
 8002e88:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 fa54 	bl	8003338 <DMA_CalcBaseAndBitshift>
 8002e90:	4603      	mov	r3, r0
 8002e92:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e98:	223f      	movs	r2, #63	; 0x3f
 8002e9a:	409a      	lsls	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3718      	adds	r7, #24
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	f010803f 	.word	0xf010803f

08002ebc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b086      	sub	sp, #24
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
 8002ec8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d101      	bne.n	8002ee2 <HAL_DMA_Start_IT+0x26>
 8002ede:	2302      	movs	r3, #2
 8002ee0:	e040      	b.n	8002f64 <HAL_DMA_Start_IT+0xa8>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d12f      	bne.n	8002f56 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2202      	movs	r2, #2
 8002efa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	68b9      	ldr	r1, [r7, #8]
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f000 f9e6 	bl	80032dc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f14:	223f      	movs	r2, #63	; 0x3f
 8002f16:	409a      	lsls	r2, r3
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f042 0216 	orr.w	r2, r2, #22
 8002f2a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d007      	beq.n	8002f44 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f042 0208 	orr.w	r2, r2, #8
 8002f42:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f042 0201 	orr.w	r2, r2, #1
 8002f52:	601a      	str	r2, [r3, #0]
 8002f54:	e005      	b.n	8002f62 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002f5e:	2302      	movs	r3, #2
 8002f60:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3718      	adds	r7, #24
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d004      	beq.n	8002f8a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2280      	movs	r2, #128	; 0x80
 8002f84:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e00c      	b.n	8002fa4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2205      	movs	r2, #5
 8002f8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 0201 	bic.w	r2, r2, #1
 8002fa0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002fbc:	4b92      	ldr	r3, [pc, #584]	; (8003208 <HAL_DMA_IRQHandler+0x258>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a92      	ldr	r2, [pc, #584]	; (800320c <HAL_DMA_IRQHandler+0x25c>)
 8002fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc6:	0a9b      	lsrs	r3, r3, #10
 8002fc8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fda:	2208      	movs	r2, #8
 8002fdc:	409a      	lsls	r2, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d01a      	beq.n	800301c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0304 	and.w	r3, r3, #4
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d013      	beq.n	800301c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 0204 	bic.w	r2, r2, #4
 8003002:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003008:	2208      	movs	r2, #8
 800300a:	409a      	lsls	r2, r3
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003014:	f043 0201 	orr.w	r2, r3, #1
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003020:	2201      	movs	r2, #1
 8003022:	409a      	lsls	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	4013      	ands	r3, r2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d012      	beq.n	8003052 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00b      	beq.n	8003052 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800303e:	2201      	movs	r2, #1
 8003040:	409a      	lsls	r2, r3
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800304a:	f043 0202 	orr.w	r2, r3, #2
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003056:	2204      	movs	r2, #4
 8003058:	409a      	lsls	r2, r3
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	4013      	ands	r3, r2
 800305e:	2b00      	cmp	r3, #0
 8003060:	d012      	beq.n	8003088 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00b      	beq.n	8003088 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003074:	2204      	movs	r2, #4
 8003076:	409a      	lsls	r2, r3
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003080:	f043 0204 	orr.w	r2, r3, #4
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800308c:	2210      	movs	r2, #16
 800308e:	409a      	lsls	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	4013      	ands	r3, r2
 8003094:	2b00      	cmp	r3, #0
 8003096:	d043      	beq.n	8003120 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0308 	and.w	r3, r3, #8
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d03c      	beq.n	8003120 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030aa:	2210      	movs	r2, #16
 80030ac:	409a      	lsls	r2, r3
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d018      	beq.n	80030f2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d108      	bne.n	80030e0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d024      	beq.n	8003120 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	4798      	blx	r3
 80030de:	e01f      	b.n	8003120 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d01b      	beq.n	8003120 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	4798      	blx	r3
 80030f0:	e016      	b.n	8003120 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d107      	bne.n	8003110 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f022 0208 	bic.w	r2, r2, #8
 800310e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003114:	2b00      	cmp	r3, #0
 8003116:	d003      	beq.n	8003120 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003124:	2220      	movs	r2, #32
 8003126:	409a      	lsls	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	4013      	ands	r3, r2
 800312c:	2b00      	cmp	r3, #0
 800312e:	f000 808e 	beq.w	800324e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0310 	and.w	r3, r3, #16
 800313c:	2b00      	cmp	r3, #0
 800313e:	f000 8086 	beq.w	800324e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003146:	2220      	movs	r2, #32
 8003148:	409a      	lsls	r2, r3
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b05      	cmp	r3, #5
 8003158:	d136      	bne.n	80031c8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f022 0216 	bic.w	r2, r2, #22
 8003168:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	695a      	ldr	r2, [r3, #20]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003178:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317e:	2b00      	cmp	r3, #0
 8003180:	d103      	bne.n	800318a <HAL_DMA_IRQHandler+0x1da>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003186:	2b00      	cmp	r3, #0
 8003188:	d007      	beq.n	800319a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f022 0208 	bic.w	r2, r2, #8
 8003198:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800319e:	223f      	movs	r2, #63	; 0x3f
 80031a0:	409a      	lsls	r2, r3
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d07d      	beq.n	80032ba <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	4798      	blx	r3
        }
        return;
 80031c6:	e078      	b.n	80032ba <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d01c      	beq.n	8003210 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d108      	bne.n	80031f6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d030      	beq.n	800324e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	4798      	blx	r3
 80031f4:	e02b      	b.n	800324e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d027      	beq.n	800324e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	4798      	blx	r3
 8003206:	e022      	b.n	800324e <HAL_DMA_IRQHandler+0x29e>
 8003208:	20000000 	.word	0x20000000
 800320c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10f      	bne.n	800323e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f022 0210 	bic.w	r2, r2, #16
 800322c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003242:	2b00      	cmp	r3, #0
 8003244:	d003      	beq.n	800324e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003252:	2b00      	cmp	r3, #0
 8003254:	d032      	beq.n	80032bc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b00      	cmp	r3, #0
 8003260:	d022      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2205      	movs	r2, #5
 8003266:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 0201 	bic.w	r2, r2, #1
 8003278:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	3301      	adds	r3, #1
 800327e:	60bb      	str	r3, [r7, #8]
 8003280:	697a      	ldr	r2, [r7, #20]
 8003282:	429a      	cmp	r2, r3
 8003284:	d307      	bcc.n	8003296 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	2b00      	cmp	r3, #0
 8003292:	d1f2      	bne.n	800327a <HAL_DMA_IRQHandler+0x2ca>
 8003294:	e000      	b.n	8003298 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003296:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d005      	beq.n	80032bc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	4798      	blx	r3
 80032b8:	e000      	b.n	80032bc <HAL_DMA_IRQHandler+0x30c>
        return;
 80032ba:	bf00      	nop
    }
  }
}
 80032bc:	3718      	adds	r7, #24
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop

080032c4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032dc:	b480      	push	{r7}
 80032de:	b085      	sub	sp, #20
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
 80032e8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80032f8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	683a      	ldr	r2, [r7, #0]
 8003300:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	2b40      	cmp	r3, #64	; 0x40
 8003308:	d108      	bne.n	800331c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68ba      	ldr	r2, [r7, #8]
 8003318:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800331a:	e007      	b.n	800332c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68ba      	ldr	r2, [r7, #8]
 8003322:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	60da      	str	r2, [r3, #12]
}
 800332c:	bf00      	nop
 800332e:	3714      	adds	r7, #20
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	b2db      	uxtb	r3, r3
 8003346:	3b10      	subs	r3, #16
 8003348:	4a14      	ldr	r2, [pc, #80]	; (800339c <DMA_CalcBaseAndBitshift+0x64>)
 800334a:	fba2 2303 	umull	r2, r3, r2, r3
 800334e:	091b      	lsrs	r3, r3, #4
 8003350:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003352:	4a13      	ldr	r2, [pc, #76]	; (80033a0 <DMA_CalcBaseAndBitshift+0x68>)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	4413      	add	r3, r2
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	461a      	mov	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2b03      	cmp	r3, #3
 8003364:	d909      	bls.n	800337a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800336e:	f023 0303 	bic.w	r3, r3, #3
 8003372:	1d1a      	adds	r2, r3, #4
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	659a      	str	r2, [r3, #88]	; 0x58
 8003378:	e007      	b.n	800338a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003382:	f023 0303 	bic.w	r3, r3, #3
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800338e:	4618      	mov	r0, r3
 8003390:	3714      	adds	r7, #20
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	aaaaaaab 	.word	0xaaaaaaab
 80033a0:	080118e0 	.word	0x080118e0

080033a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033ac:	2300      	movs	r3, #0
 80033ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d11f      	bne.n	80033fe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	2b03      	cmp	r3, #3
 80033c2:	d855      	bhi.n	8003470 <DMA_CheckFifoParam+0xcc>
 80033c4:	a201      	add	r2, pc, #4	; (adr r2, 80033cc <DMA_CheckFifoParam+0x28>)
 80033c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ca:	bf00      	nop
 80033cc:	080033dd 	.word	0x080033dd
 80033d0:	080033ef 	.word	0x080033ef
 80033d4:	080033dd 	.word	0x080033dd
 80033d8:	08003471 	.word	0x08003471
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d045      	beq.n	8003474 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033ec:	e042      	b.n	8003474 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80033f6:	d13f      	bne.n	8003478 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033fc:	e03c      	b.n	8003478 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	699b      	ldr	r3, [r3, #24]
 8003402:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003406:	d121      	bne.n	800344c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	2b03      	cmp	r3, #3
 800340c:	d836      	bhi.n	800347c <DMA_CheckFifoParam+0xd8>
 800340e:	a201      	add	r2, pc, #4	; (adr r2, 8003414 <DMA_CheckFifoParam+0x70>)
 8003410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003414:	08003425 	.word	0x08003425
 8003418:	0800342b 	.word	0x0800342b
 800341c:	08003425 	.word	0x08003425
 8003420:	0800343d 	.word	0x0800343d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	73fb      	strb	r3, [r7, #15]
      break;
 8003428:	e02f      	b.n	800348a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d024      	beq.n	8003480 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800343a:	e021      	b.n	8003480 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003440:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003444:	d11e      	bne.n	8003484 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800344a:	e01b      	b.n	8003484 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	2b02      	cmp	r3, #2
 8003450:	d902      	bls.n	8003458 <DMA_CheckFifoParam+0xb4>
 8003452:	2b03      	cmp	r3, #3
 8003454:	d003      	beq.n	800345e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003456:	e018      	b.n	800348a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	73fb      	strb	r3, [r7, #15]
      break;
 800345c:	e015      	b.n	800348a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003462:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00e      	beq.n	8003488 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	73fb      	strb	r3, [r7, #15]
      break;
 800346e:	e00b      	b.n	8003488 <DMA_CheckFifoParam+0xe4>
      break;
 8003470:	bf00      	nop
 8003472:	e00a      	b.n	800348a <DMA_CheckFifoParam+0xe6>
      break;
 8003474:	bf00      	nop
 8003476:	e008      	b.n	800348a <DMA_CheckFifoParam+0xe6>
      break;
 8003478:	bf00      	nop
 800347a:	e006      	b.n	800348a <DMA_CheckFifoParam+0xe6>
      break;
 800347c:	bf00      	nop
 800347e:	e004      	b.n	800348a <DMA_CheckFifoParam+0xe6>
      break;
 8003480:	bf00      	nop
 8003482:	e002      	b.n	800348a <DMA_CheckFifoParam+0xe6>
      break;   
 8003484:	bf00      	nop
 8003486:	e000      	b.n	800348a <DMA_CheckFifoParam+0xe6>
      break;
 8003488:	bf00      	nop
    }
  } 
  
  return status; 
 800348a:	7bfb      	ldrb	r3, [r7, #15]
}
 800348c:	4618      	mov	r0, r3
 800348e:	3714      	adds	r7, #20
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003498:	b480      	push	{r7}
 800349a:	b089      	sub	sp, #36	; 0x24
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034a2:	2300      	movs	r3, #0
 80034a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80034a6:	2300      	movs	r3, #0
 80034a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80034aa:	2300      	movs	r3, #0
 80034ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034ae:	2300      	movs	r3, #0
 80034b0:	61fb      	str	r3, [r7, #28]
 80034b2:	e16b      	b.n	800378c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80034b4:	2201      	movs	r2, #1
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	fa02 f303 	lsl.w	r3, r2, r3
 80034bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	4013      	ands	r3, r2
 80034c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	f040 815a 	bne.w	8003786 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d00b      	beq.n	80034f2 <HAL_GPIO_Init+0x5a>
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d007      	beq.n	80034f2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80034e6:	2b11      	cmp	r3, #17
 80034e8:	d003      	beq.n	80034f2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	2b12      	cmp	r3, #18
 80034f0:	d130      	bne.n	8003554 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	2203      	movs	r2, #3
 80034fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003502:	43db      	mvns	r3, r3
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	4013      	ands	r3, r2
 8003508:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	68da      	ldr	r2, [r3, #12]
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	005b      	lsls	r3, r3, #1
 8003512:	fa02 f303 	lsl.w	r3, r2, r3
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	4313      	orrs	r3, r2
 800351a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003528:	2201      	movs	r2, #1
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	fa02 f303 	lsl.w	r3, r2, r3
 8003530:	43db      	mvns	r3, r3
 8003532:	69ba      	ldr	r2, [r7, #24]
 8003534:	4013      	ands	r3, r2
 8003536:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	091b      	lsrs	r3, r3, #4
 800353e:	f003 0201 	and.w	r2, r3, #1
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	fa02 f303 	lsl.w	r3, r2, r3
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	4313      	orrs	r3, r2
 800354c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	005b      	lsls	r3, r3, #1
 800355e:	2203      	movs	r2, #3
 8003560:	fa02 f303 	lsl.w	r3, r2, r3
 8003564:	43db      	mvns	r3, r3
 8003566:	69ba      	ldr	r2, [r7, #24]
 8003568:	4013      	ands	r3, r2
 800356a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	689a      	ldr	r2, [r3, #8]
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	005b      	lsls	r3, r3, #1
 8003574:	fa02 f303 	lsl.w	r3, r2, r3
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	4313      	orrs	r3, r2
 800357c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	2b02      	cmp	r3, #2
 800358a:	d003      	beq.n	8003594 <HAL_GPIO_Init+0xfc>
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	2b12      	cmp	r3, #18
 8003592:	d123      	bne.n	80035dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	08da      	lsrs	r2, r3, #3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	3208      	adds	r2, #8
 800359c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	f003 0307 	and.w	r3, r3, #7
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	220f      	movs	r2, #15
 80035ac:	fa02 f303 	lsl.w	r3, r2, r3
 80035b0:	43db      	mvns	r3, r3
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	4013      	ands	r3, r2
 80035b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	691a      	ldr	r2, [r3, #16]
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	f003 0307 	and.w	r3, r3, #7
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	fa02 f303 	lsl.w	r3, r2, r3
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	08da      	lsrs	r2, r3, #3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	3208      	adds	r2, #8
 80035d6:	69b9      	ldr	r1, [r7, #24]
 80035d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	005b      	lsls	r3, r3, #1
 80035e6:	2203      	movs	r2, #3
 80035e8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ec:	43db      	mvns	r3, r3
 80035ee:	69ba      	ldr	r2, [r7, #24]
 80035f0:	4013      	ands	r3, r2
 80035f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f003 0203 	and.w	r2, r3, #3
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	005b      	lsls	r3, r3, #1
 8003600:	fa02 f303 	lsl.w	r3, r2, r3
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	4313      	orrs	r3, r2
 8003608:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003618:	2b00      	cmp	r3, #0
 800361a:	f000 80b4 	beq.w	8003786 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800361e:	2300      	movs	r3, #0
 8003620:	60fb      	str	r3, [r7, #12]
 8003622:	4b5f      	ldr	r3, [pc, #380]	; (80037a0 <HAL_GPIO_Init+0x308>)
 8003624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003626:	4a5e      	ldr	r2, [pc, #376]	; (80037a0 <HAL_GPIO_Init+0x308>)
 8003628:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800362c:	6453      	str	r3, [r2, #68]	; 0x44
 800362e:	4b5c      	ldr	r3, [pc, #368]	; (80037a0 <HAL_GPIO_Init+0x308>)
 8003630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003632:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003636:	60fb      	str	r3, [r7, #12]
 8003638:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800363a:	4a5a      	ldr	r2, [pc, #360]	; (80037a4 <HAL_GPIO_Init+0x30c>)
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	089b      	lsrs	r3, r3, #2
 8003640:	3302      	adds	r3, #2
 8003642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003646:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	f003 0303 	and.w	r3, r3, #3
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	220f      	movs	r2, #15
 8003652:	fa02 f303 	lsl.w	r3, r2, r3
 8003656:	43db      	mvns	r3, r3
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	4013      	ands	r3, r2
 800365c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a51      	ldr	r2, [pc, #324]	; (80037a8 <HAL_GPIO_Init+0x310>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d02b      	beq.n	80036be <HAL_GPIO_Init+0x226>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a50      	ldr	r2, [pc, #320]	; (80037ac <HAL_GPIO_Init+0x314>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d025      	beq.n	80036ba <HAL_GPIO_Init+0x222>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a4f      	ldr	r2, [pc, #316]	; (80037b0 <HAL_GPIO_Init+0x318>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d01f      	beq.n	80036b6 <HAL_GPIO_Init+0x21e>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a4e      	ldr	r2, [pc, #312]	; (80037b4 <HAL_GPIO_Init+0x31c>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d019      	beq.n	80036b2 <HAL_GPIO_Init+0x21a>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a4d      	ldr	r2, [pc, #308]	; (80037b8 <HAL_GPIO_Init+0x320>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d013      	beq.n	80036ae <HAL_GPIO_Init+0x216>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a4c      	ldr	r2, [pc, #304]	; (80037bc <HAL_GPIO_Init+0x324>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d00d      	beq.n	80036aa <HAL_GPIO_Init+0x212>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a4b      	ldr	r2, [pc, #300]	; (80037c0 <HAL_GPIO_Init+0x328>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d007      	beq.n	80036a6 <HAL_GPIO_Init+0x20e>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a4a      	ldr	r2, [pc, #296]	; (80037c4 <HAL_GPIO_Init+0x32c>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d101      	bne.n	80036a2 <HAL_GPIO_Init+0x20a>
 800369e:	2307      	movs	r3, #7
 80036a0:	e00e      	b.n	80036c0 <HAL_GPIO_Init+0x228>
 80036a2:	2308      	movs	r3, #8
 80036a4:	e00c      	b.n	80036c0 <HAL_GPIO_Init+0x228>
 80036a6:	2306      	movs	r3, #6
 80036a8:	e00a      	b.n	80036c0 <HAL_GPIO_Init+0x228>
 80036aa:	2305      	movs	r3, #5
 80036ac:	e008      	b.n	80036c0 <HAL_GPIO_Init+0x228>
 80036ae:	2304      	movs	r3, #4
 80036b0:	e006      	b.n	80036c0 <HAL_GPIO_Init+0x228>
 80036b2:	2303      	movs	r3, #3
 80036b4:	e004      	b.n	80036c0 <HAL_GPIO_Init+0x228>
 80036b6:	2302      	movs	r3, #2
 80036b8:	e002      	b.n	80036c0 <HAL_GPIO_Init+0x228>
 80036ba:	2301      	movs	r3, #1
 80036bc:	e000      	b.n	80036c0 <HAL_GPIO_Init+0x228>
 80036be:	2300      	movs	r3, #0
 80036c0:	69fa      	ldr	r2, [r7, #28]
 80036c2:	f002 0203 	and.w	r2, r2, #3
 80036c6:	0092      	lsls	r2, r2, #2
 80036c8:	4093      	lsls	r3, r2
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036d0:	4934      	ldr	r1, [pc, #208]	; (80037a4 <HAL_GPIO_Init+0x30c>)
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	089b      	lsrs	r3, r3, #2
 80036d6:	3302      	adds	r3, #2
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036de:	4b3a      	ldr	r3, [pc, #232]	; (80037c8 <HAL_GPIO_Init+0x330>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	43db      	mvns	r3, r3
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	4013      	ands	r3, r2
 80036ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d003      	beq.n	8003702 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	4313      	orrs	r3, r2
 8003700:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003702:	4a31      	ldr	r2, [pc, #196]	; (80037c8 <HAL_GPIO_Init+0x330>)
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003708:	4b2f      	ldr	r3, [pc, #188]	; (80037c8 <HAL_GPIO_Init+0x330>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	43db      	mvns	r3, r3
 8003712:	69ba      	ldr	r2, [r7, #24]
 8003714:	4013      	ands	r3, r2
 8003716:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d003      	beq.n	800372c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	4313      	orrs	r3, r2
 800372a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800372c:	4a26      	ldr	r2, [pc, #152]	; (80037c8 <HAL_GPIO_Init+0x330>)
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003732:	4b25      	ldr	r3, [pc, #148]	; (80037c8 <HAL_GPIO_Init+0x330>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	43db      	mvns	r3, r3
 800373c:	69ba      	ldr	r2, [r7, #24]
 800373e:	4013      	ands	r3, r2
 8003740:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d003      	beq.n	8003756 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800374e:	69ba      	ldr	r2, [r7, #24]
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	4313      	orrs	r3, r2
 8003754:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003756:	4a1c      	ldr	r2, [pc, #112]	; (80037c8 <HAL_GPIO_Init+0x330>)
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800375c:	4b1a      	ldr	r3, [pc, #104]	; (80037c8 <HAL_GPIO_Init+0x330>)
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	43db      	mvns	r3, r3
 8003766:	69ba      	ldr	r2, [r7, #24]
 8003768:	4013      	ands	r3, r2
 800376a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d003      	beq.n	8003780 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003778:	69ba      	ldr	r2, [r7, #24]
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	4313      	orrs	r3, r2
 800377e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003780:	4a11      	ldr	r2, [pc, #68]	; (80037c8 <HAL_GPIO_Init+0x330>)
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	3301      	adds	r3, #1
 800378a:	61fb      	str	r3, [r7, #28]
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	2b0f      	cmp	r3, #15
 8003790:	f67f ae90 	bls.w	80034b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003794:	bf00      	nop
 8003796:	3724      	adds	r7, #36	; 0x24
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr
 80037a0:	40023800 	.word	0x40023800
 80037a4:	40013800 	.word	0x40013800
 80037a8:	40020000 	.word	0x40020000
 80037ac:	40020400 	.word	0x40020400
 80037b0:	40020800 	.word	0x40020800
 80037b4:	40020c00 	.word	0x40020c00
 80037b8:	40021000 	.word	0x40021000
 80037bc:	40021400 	.word	0x40021400
 80037c0:	40021800 	.word	0x40021800
 80037c4:	40021c00 	.word	0x40021c00
 80037c8:	40013c00 	.word	0x40013c00

080037cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b085      	sub	sp, #20
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	460b      	mov	r3, r1
 80037d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	691a      	ldr	r2, [r3, #16]
 80037dc:	887b      	ldrh	r3, [r7, #2]
 80037de:	4013      	ands	r3, r2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d002      	beq.n	80037ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80037e4:	2301      	movs	r3, #1
 80037e6:	73fb      	strb	r3, [r7, #15]
 80037e8:	e001      	b.n	80037ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80037ea:	2300      	movs	r3, #0
 80037ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80037ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3714      	adds	r7, #20
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	460b      	mov	r3, r1
 8003806:	807b      	strh	r3, [r7, #2]
 8003808:	4613      	mov	r3, r2
 800380a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800380c:	787b      	ldrb	r3, [r7, #1]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d003      	beq.n	800381a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003812:	887a      	ldrh	r2, [r7, #2]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003818:	e003      	b.n	8003822 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800381a:	887b      	ldrh	r3, [r7, #2]
 800381c:	041a      	lsls	r2, r3, #16
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	619a      	str	r2, [r3, #24]
}
 8003822:	bf00      	nop
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
	...

08003830 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	4603      	mov	r3, r0
 8003838:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800383a:	4b08      	ldr	r3, [pc, #32]	; (800385c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800383c:	695a      	ldr	r2, [r3, #20]
 800383e:	88fb      	ldrh	r3, [r7, #6]
 8003840:	4013      	ands	r3, r2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d006      	beq.n	8003854 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003846:	4a05      	ldr	r2, [pc, #20]	; (800385c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003848:	88fb      	ldrh	r3, [r7, #6]
 800384a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800384c:	88fb      	ldrh	r3, [r7, #6]
 800384e:	4618      	mov	r0, r3
 8003850:	f7fe fd58 	bl	8002304 <HAL_GPIO_EXTI_Callback>
  }
}
 8003854:	bf00      	nop
 8003856:	3708      	adds	r7, #8
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	40013c00 	.word	0x40013c00

08003860 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e11f      	b.n	8003ab2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d106      	bne.n	800388c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f7fe fd8c 	bl	80023a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2224      	movs	r2, #36	; 0x24
 8003890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f022 0201 	bic.w	r2, r2, #1
 80038a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80038c4:	f001 fea2 	bl	800560c <HAL_RCC_GetPCLK1Freq>
 80038c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	4a7b      	ldr	r2, [pc, #492]	; (8003abc <HAL_I2C_Init+0x25c>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d807      	bhi.n	80038e4 <HAL_I2C_Init+0x84>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	4a7a      	ldr	r2, [pc, #488]	; (8003ac0 <HAL_I2C_Init+0x260>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	bf94      	ite	ls
 80038dc:	2301      	movls	r3, #1
 80038de:	2300      	movhi	r3, #0
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	e006      	b.n	80038f2 <HAL_I2C_Init+0x92>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	4a77      	ldr	r2, [pc, #476]	; (8003ac4 <HAL_I2C_Init+0x264>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	bf94      	ite	ls
 80038ec:	2301      	movls	r3, #1
 80038ee:	2300      	movhi	r3, #0
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e0db      	b.n	8003ab2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	4a72      	ldr	r2, [pc, #456]	; (8003ac8 <HAL_I2C_Init+0x268>)
 80038fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003902:	0c9b      	lsrs	r3, r3, #18
 8003904:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68ba      	ldr	r2, [r7, #8]
 8003916:	430a      	orrs	r2, r1
 8003918:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	6a1b      	ldr	r3, [r3, #32]
 8003920:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	4a64      	ldr	r2, [pc, #400]	; (8003abc <HAL_I2C_Init+0x25c>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d802      	bhi.n	8003934 <HAL_I2C_Init+0xd4>
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	3301      	adds	r3, #1
 8003932:	e009      	b.n	8003948 <HAL_I2C_Init+0xe8>
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800393a:	fb02 f303 	mul.w	r3, r2, r3
 800393e:	4a63      	ldr	r2, [pc, #396]	; (8003acc <HAL_I2C_Init+0x26c>)
 8003940:	fba2 2303 	umull	r2, r3, r2, r3
 8003944:	099b      	lsrs	r3, r3, #6
 8003946:	3301      	adds	r3, #1
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	6812      	ldr	r2, [r2, #0]
 800394c:	430b      	orrs	r3, r1
 800394e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	69db      	ldr	r3, [r3, #28]
 8003956:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800395a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	4956      	ldr	r1, [pc, #344]	; (8003abc <HAL_I2C_Init+0x25c>)
 8003964:	428b      	cmp	r3, r1
 8003966:	d80d      	bhi.n	8003984 <HAL_I2C_Init+0x124>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	1e59      	subs	r1, r3, #1
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	005b      	lsls	r3, r3, #1
 8003972:	fbb1 f3f3 	udiv	r3, r1, r3
 8003976:	3301      	adds	r3, #1
 8003978:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800397c:	2b04      	cmp	r3, #4
 800397e:	bf38      	it	cc
 8003980:	2304      	movcc	r3, #4
 8003982:	e04f      	b.n	8003a24 <HAL_I2C_Init+0x1c4>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d111      	bne.n	80039b0 <HAL_I2C_Init+0x150>
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	1e58      	subs	r0, r3, #1
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6859      	ldr	r1, [r3, #4]
 8003994:	460b      	mov	r3, r1
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	440b      	add	r3, r1
 800399a:	fbb0 f3f3 	udiv	r3, r0, r3
 800399e:	3301      	adds	r3, #1
 80039a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	bf0c      	ite	eq
 80039a8:	2301      	moveq	r3, #1
 80039aa:	2300      	movne	r3, #0
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	e012      	b.n	80039d6 <HAL_I2C_Init+0x176>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	1e58      	subs	r0, r3, #1
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6859      	ldr	r1, [r3, #4]
 80039b8:	460b      	mov	r3, r1
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	440b      	add	r3, r1
 80039be:	0099      	lsls	r1, r3, #2
 80039c0:	440b      	add	r3, r1
 80039c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80039c6:	3301      	adds	r3, #1
 80039c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	bf0c      	ite	eq
 80039d0:	2301      	moveq	r3, #1
 80039d2:	2300      	movne	r3, #0
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <HAL_I2C_Init+0x17e>
 80039da:	2301      	movs	r3, #1
 80039dc:	e022      	b.n	8003a24 <HAL_I2C_Init+0x1c4>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10e      	bne.n	8003a04 <HAL_I2C_Init+0x1a4>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	1e58      	subs	r0, r3, #1
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6859      	ldr	r1, [r3, #4]
 80039ee:	460b      	mov	r3, r1
 80039f0:	005b      	lsls	r3, r3, #1
 80039f2:	440b      	add	r3, r1
 80039f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80039f8:	3301      	adds	r3, #1
 80039fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a02:	e00f      	b.n	8003a24 <HAL_I2C_Init+0x1c4>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	1e58      	subs	r0, r3, #1
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6859      	ldr	r1, [r3, #4]
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	440b      	add	r3, r1
 8003a12:	0099      	lsls	r1, r3, #2
 8003a14:	440b      	add	r3, r1
 8003a16:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a24:	6879      	ldr	r1, [r7, #4]
 8003a26:	6809      	ldr	r1, [r1, #0]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	69da      	ldr	r2, [r3, #28]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	430a      	orrs	r2, r1
 8003a46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	6911      	ldr	r1, [r2, #16]
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	68d2      	ldr	r2, [r2, #12]
 8003a5e:	4311      	orrs	r1, r2
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	6812      	ldr	r2, [r2, #0]
 8003a64:	430b      	orrs	r3, r1
 8003a66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	695a      	ldr	r2, [r3, #20]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	431a      	orrs	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	430a      	orrs	r2, r1
 8003a82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f042 0201 	orr.w	r2, r2, #1
 8003a92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2220      	movs	r2, #32
 8003a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3710      	adds	r7, #16
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	000186a0 	.word	0x000186a0
 8003ac0:	001e847f 	.word	0x001e847f
 8003ac4:	003d08ff 	.word	0x003d08ff
 8003ac8:	431bde83 	.word	0x431bde83
 8003acc:	10624dd3 	.word	0x10624dd3

08003ad0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ad2:	b08f      	sub	sp, #60	; 0x3c
 8003ad4:	af0a      	add	r7, sp, #40	; 0x28
 8003ad6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d101      	bne.n	8003ae2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e10f      	b.n	8003d02 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d106      	bne.n	8003b02 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f009 fb33 	bl	800d168 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2203      	movs	r2, #3
 8003b06:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d102      	bne.n	8003b1c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f006 f8e4 	bl	8009cee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	603b      	str	r3, [r7, #0]
 8003b2c:	687e      	ldr	r6, [r7, #4]
 8003b2e:	466d      	mov	r5, sp
 8003b30:	f106 0410 	add.w	r4, r6, #16
 8003b34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b3c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b40:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b44:	1d33      	adds	r3, r6, #4
 8003b46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b48:	6838      	ldr	r0, [r7, #0]
 8003b4a:	f005 ffbb 	bl	8009ac4 <USB_CoreInit>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d005      	beq.n	8003b60 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2202      	movs	r2, #2
 8003b58:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e0d0      	b.n	8003d02 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2100      	movs	r1, #0
 8003b66:	4618      	mov	r0, r3
 8003b68:	f006 f8d2 	bl	8009d10 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	73fb      	strb	r3, [r7, #15]
 8003b70:	e04a      	b.n	8003c08 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003b72:	7bfa      	ldrb	r2, [r7, #15]
 8003b74:	6879      	ldr	r1, [r7, #4]
 8003b76:	4613      	mov	r3, r2
 8003b78:	00db      	lsls	r3, r3, #3
 8003b7a:	1a9b      	subs	r3, r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	440b      	add	r3, r1
 8003b80:	333d      	adds	r3, #61	; 0x3d
 8003b82:	2201      	movs	r2, #1
 8003b84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003b86:	7bfa      	ldrb	r2, [r7, #15]
 8003b88:	6879      	ldr	r1, [r7, #4]
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	00db      	lsls	r3, r3, #3
 8003b8e:	1a9b      	subs	r3, r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	440b      	add	r3, r1
 8003b94:	333c      	adds	r3, #60	; 0x3c
 8003b96:	7bfa      	ldrb	r2, [r7, #15]
 8003b98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003b9a:	7bfa      	ldrb	r2, [r7, #15]
 8003b9c:	7bfb      	ldrb	r3, [r7, #15]
 8003b9e:	b298      	uxth	r0, r3
 8003ba0:	6879      	ldr	r1, [r7, #4]
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	00db      	lsls	r3, r3, #3
 8003ba6:	1a9b      	subs	r3, r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	440b      	add	r3, r1
 8003bac:	3342      	adds	r3, #66	; 0x42
 8003bae:	4602      	mov	r2, r0
 8003bb0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003bb2:	7bfa      	ldrb	r2, [r7, #15]
 8003bb4:	6879      	ldr	r1, [r7, #4]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	00db      	lsls	r3, r3, #3
 8003bba:	1a9b      	subs	r3, r3, r2
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	440b      	add	r3, r1
 8003bc0:	333f      	adds	r3, #63	; 0x3f
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003bc6:	7bfa      	ldrb	r2, [r7, #15]
 8003bc8:	6879      	ldr	r1, [r7, #4]
 8003bca:	4613      	mov	r3, r2
 8003bcc:	00db      	lsls	r3, r3, #3
 8003bce:	1a9b      	subs	r3, r3, r2
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	440b      	add	r3, r1
 8003bd4:	3344      	adds	r3, #68	; 0x44
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003bda:	7bfa      	ldrb	r2, [r7, #15]
 8003bdc:	6879      	ldr	r1, [r7, #4]
 8003bde:	4613      	mov	r3, r2
 8003be0:	00db      	lsls	r3, r3, #3
 8003be2:	1a9b      	subs	r3, r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	440b      	add	r3, r1
 8003be8:	3348      	adds	r3, #72	; 0x48
 8003bea:	2200      	movs	r2, #0
 8003bec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003bee:	7bfa      	ldrb	r2, [r7, #15]
 8003bf0:	6879      	ldr	r1, [r7, #4]
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	00db      	lsls	r3, r3, #3
 8003bf6:	1a9b      	subs	r3, r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	440b      	add	r3, r1
 8003bfc:	3350      	adds	r3, #80	; 0x50
 8003bfe:	2200      	movs	r2, #0
 8003c00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c02:	7bfb      	ldrb	r3, [r7, #15]
 8003c04:	3301      	adds	r3, #1
 8003c06:	73fb      	strb	r3, [r7, #15]
 8003c08:	7bfa      	ldrb	r2, [r7, #15]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d3af      	bcc.n	8003b72 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c12:	2300      	movs	r3, #0
 8003c14:	73fb      	strb	r3, [r7, #15]
 8003c16:	e044      	b.n	8003ca2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003c18:	7bfa      	ldrb	r2, [r7, #15]
 8003c1a:	6879      	ldr	r1, [r7, #4]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	00db      	lsls	r3, r3, #3
 8003c20:	1a9b      	subs	r3, r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	440b      	add	r3, r1
 8003c26:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003c2e:	7bfa      	ldrb	r2, [r7, #15]
 8003c30:	6879      	ldr	r1, [r7, #4]
 8003c32:	4613      	mov	r3, r2
 8003c34:	00db      	lsls	r3, r3, #3
 8003c36:	1a9b      	subs	r3, r3, r2
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	440b      	add	r3, r1
 8003c3c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003c40:	7bfa      	ldrb	r2, [r7, #15]
 8003c42:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003c44:	7bfa      	ldrb	r2, [r7, #15]
 8003c46:	6879      	ldr	r1, [r7, #4]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	00db      	lsls	r3, r3, #3
 8003c4c:	1a9b      	subs	r3, r3, r2
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	440b      	add	r3, r1
 8003c52:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003c56:	2200      	movs	r2, #0
 8003c58:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003c5a:	7bfa      	ldrb	r2, [r7, #15]
 8003c5c:	6879      	ldr	r1, [r7, #4]
 8003c5e:	4613      	mov	r3, r2
 8003c60:	00db      	lsls	r3, r3, #3
 8003c62:	1a9b      	subs	r3, r3, r2
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	440b      	add	r3, r1
 8003c68:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003c70:	7bfa      	ldrb	r2, [r7, #15]
 8003c72:	6879      	ldr	r1, [r7, #4]
 8003c74:	4613      	mov	r3, r2
 8003c76:	00db      	lsls	r3, r3, #3
 8003c78:	1a9b      	subs	r3, r3, r2
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	440b      	add	r3, r1
 8003c7e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003c82:	2200      	movs	r2, #0
 8003c84:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003c86:	7bfa      	ldrb	r2, [r7, #15]
 8003c88:	6879      	ldr	r1, [r7, #4]
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	00db      	lsls	r3, r3, #3
 8003c8e:	1a9b      	subs	r3, r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	440b      	add	r3, r1
 8003c94:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003c98:	2200      	movs	r2, #0
 8003c9a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c9c:	7bfb      	ldrb	r3, [r7, #15]
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	73fb      	strb	r3, [r7, #15]
 8003ca2:	7bfa      	ldrb	r2, [r7, #15]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d3b5      	bcc.n	8003c18 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	603b      	str	r3, [r7, #0]
 8003cb2:	687e      	ldr	r6, [r7, #4]
 8003cb4:	466d      	mov	r5, sp
 8003cb6:	f106 0410 	add.w	r4, r6, #16
 8003cba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cc2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003cc6:	e885 0003 	stmia.w	r5, {r0, r1}
 8003cca:	1d33      	adds	r3, r6, #4
 8003ccc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003cce:	6838      	ldr	r0, [r7, #0]
 8003cd0:	f006 f848 	bl	8009d64 <USB_DevInit>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d005      	beq.n	8003ce6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2202      	movs	r2, #2
 8003cde:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e00d      	b.n	8003d02 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f007 f83d 	bl	800ad7a <USB_DevDisconnect>

  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3714      	adds	r7, #20
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d0a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b084      	sub	sp, #16
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d101      	bne.n	8003d26 <HAL_PCD_Start+0x1c>
 8003d22:	2302      	movs	r3, #2
 8003d24:	e020      	b.n	8003d68 <HAL_PCD_Start+0x5e>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d109      	bne.n	8003d4a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d005      	beq.n	8003d4a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d42:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f006 fffb 	bl	800ad4a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f005 ffb7 	bl	8009ccc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3710      	adds	r7, #16
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003d70:	b590      	push	{r4, r7, lr}
 8003d72:	b08d      	sub	sp, #52	; 0x34
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d7e:	6a3b      	ldr	r3, [r7, #32]
 8003d80:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4618      	mov	r0, r3
 8003d88:	f007 f8a2 	bl	800aed0 <USB_GetMode>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	f040 838e 	bne.w	80044b0 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f007 f806 	bl	800adaa <USB_ReadInterrupts>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	f000 8384 	beq.w	80044ae <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f006 fffd 	bl	800adaa <USB_ReadInterrupts>
 8003db0:	4603      	mov	r3, r0
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d107      	bne.n	8003dca <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	695a      	ldr	r2, [r3, #20]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f002 0202 	and.w	r2, r2, #2
 8003dc8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f006 ffeb 	bl	800adaa <USB_ReadInterrupts>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dda:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003dde:	d17b      	bne.n	8003ed8 <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8003de0:	2300      	movs	r3, #0
 8003de2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4618      	mov	r0, r3
 8003dea:	f006 fff1 	bl	800add0 <USB_ReadDevAllOutEpInterrupt>
 8003dee:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003df0:	e06f      	b.n	8003ed2 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df4:	f003 0301 	and.w	r3, r3, #1
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d064      	beq.n	8003ec6 <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e02:	b2d2      	uxtb	r2, r2
 8003e04:	4611      	mov	r1, r2
 8003e06:	4618      	mov	r0, r3
 8003e08:	f007 f816 	bl	800ae38 <USB_ReadDevOutEPInterrupt>
 8003e0c:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	f003 0301 	and.w	r3, r3, #1
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d00c      	beq.n	8003e32 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1a:	015a      	lsls	r2, r3, #5
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	4413      	add	r3, r2
 8003e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e24:	461a      	mov	r2, r3
 8003e26:	2301      	movs	r3, #1
 8003e28:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003e2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 fe0d 	bl	8004a4c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	f003 0308 	and.w	r3, r3, #8
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00c      	beq.n	8003e56 <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003e3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 ff0c 	bl	8004c5c <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e46:	015a      	lsls	r2, r3, #5
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e50:	461a      	mov	r2, r3
 8003e52:	2308      	movs	r3, #8
 8003e54:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	f003 0310 	and.w	r3, r3, #16
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d008      	beq.n	8003e72 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e62:	015a      	lsls	r2, r3, #5
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	4413      	add	r3, r2
 8003e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	2310      	movs	r3, #16
 8003e70:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	f003 0320 	and.w	r3, r3, #32
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d015      	beq.n	8003ea8 <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d108      	bne.n	8003e96 <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6818      	ldr	r0, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003e8e:	461a      	mov	r2, r3
 8003e90:	2101      	movs	r1, #1
 8003e92:	f007 f861 	bl	800af58 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e98:	015a      	lsls	r2, r3, #5
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	2320      	movs	r3, #32
 8003ea6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d009      	beq.n	8003ec6 <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb4:	015a      	lsls	r2, r3, #5
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	4413      	add	r3, r2
 8003eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ec4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec8:	3301      	adds	r3, #1
 8003eca:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ece:	085b      	lsrs	r3, r3, #1
 8003ed0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d18c      	bne.n	8003df2 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4618      	mov	r0, r3
 8003ede:	f006 ff64 	bl	800adaa <USB_ReadInterrupts>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ee8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003eec:	f040 80c4 	bne.w	8004078 <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f006 ff85 	bl	800ae04 <USB_ReadDevAllInEpInterrupt>
 8003efa:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003efc:	2300      	movs	r3, #0
 8003efe:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003f00:	e0b6      	b.n	8004070 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f04:	f003 0301 	and.w	r3, r3, #1
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f000 80ab 	beq.w	8004064 <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f14:	b2d2      	uxtb	r2, r2
 8003f16:	4611      	mov	r1, r2
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f006 ffab 	bl	800ae74 <USB_ReadDevInEPInterrupt>
 8003f1e:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d05b      	beq.n	8003fe2 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2c:	f003 030f 	and.w	r3, r3, #15
 8003f30:	2201      	movs	r2, #1
 8003f32:	fa02 f303 	lsl.w	r3, r2, r3
 8003f36:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	43db      	mvns	r3, r3
 8003f44:	69f9      	ldr	r1, [r7, #28]
 8003f46:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f50:	015a      	lsls	r2, r3, #5
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	4413      	add	r3, r2
 8003f56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d11b      	bne.n	8003fa0 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003f68:	6879      	ldr	r1, [r7, #4]
 8003f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	00db      	lsls	r3, r3, #3
 8003f70:	1a9b      	subs	r3, r3, r2
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	440b      	add	r3, r1
 8003f76:	3348      	adds	r3, #72	; 0x48
 8003f78:	6819      	ldr	r1, [r3, #0]
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f7e:	4613      	mov	r3, r2
 8003f80:	00db      	lsls	r3, r3, #3
 8003f82:	1a9b      	subs	r3, r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	4403      	add	r3, r0
 8003f88:	3344      	adds	r3, #68	; 0x44
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4419      	add	r1, r3
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f92:	4613      	mov	r3, r2
 8003f94:	00db      	lsls	r3, r3, #3
 8003f96:	1a9b      	subs	r3, r3, r2
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	4403      	add	r3, r0
 8003f9c:	3348      	adds	r3, #72	; 0x48
 8003f9e:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f009 f95f 	bl	800d26a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d116      	bne.n	8003fe2 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d113      	bne.n	8003fe2 <HAL_PCD_IRQHandler+0x272>
 8003fba:	6879      	ldr	r1, [r7, #4]
 8003fbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	00db      	lsls	r3, r3, #3
 8003fc2:	1a9b      	subs	r3, r3, r2
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	440b      	add	r3, r1
 8003fc8:	3350      	adds	r3, #80	; 0x50
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d108      	bne.n	8003fe2 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6818      	ldr	r0, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003fda:	461a      	mov	r2, r3
 8003fdc:	2101      	movs	r1, #1
 8003fde:	f006 ffbb 	bl	800af58 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	f003 0308 	and.w	r3, r3, #8
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d008      	beq.n	8003ffe <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fee:	015a      	lsls	r2, r3, #5
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	2308      	movs	r3, #8
 8003ffc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	f003 0310 	and.w	r3, r3, #16
 8004004:	2b00      	cmp	r3, #0
 8004006:	d008      	beq.n	800401a <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400a:	015a      	lsls	r2, r3, #5
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	4413      	add	r3, r2
 8004010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004014:	461a      	mov	r2, r3
 8004016:	2310      	movs	r3, #16
 8004018:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004020:	2b00      	cmp	r3, #0
 8004022:	d008      	beq.n	8004036 <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004026:	015a      	lsls	r2, r3, #5
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	4413      	add	r3, r2
 800402c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004030:	461a      	mov	r2, r3
 8004032:	2340      	movs	r3, #64	; 0x40
 8004034:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	f003 0302 	and.w	r3, r3, #2
 800403c:	2b00      	cmp	r3, #0
 800403e:	d008      	beq.n	8004052 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004042:	015a      	lsls	r2, r3, #5
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	4413      	add	r3, r2
 8004048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800404c:	461a      	mov	r2, r3
 800404e:	2302      	movs	r3, #2
 8004050:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004058:	2b00      	cmp	r3, #0
 800405a:	d003      	beq.n	8004064 <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800405c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 fc67 	bl	8004932 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004066:	3301      	adds	r3, #1
 8004068:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800406a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800406c:	085b      	lsrs	r3, r3, #1
 800406e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004072:	2b00      	cmp	r3, #0
 8004074:	f47f af45 	bne.w	8003f02 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4618      	mov	r0, r3
 800407e:	f006 fe94 	bl	800adaa <USB_ReadInterrupts>
 8004082:	4603      	mov	r3, r0
 8004084:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004088:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800408c:	d122      	bne.n	80040d4 <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	69fa      	ldr	r2, [r7, #28]
 8004098:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800409c:	f023 0301 	bic.w	r3, r3, #1
 80040a0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d108      	bne.n	80040be <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80040b4:	2100      	movs	r1, #0
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 fe88 	bl	8004dcc <HAL_PCDEx_LPM_Callback>
 80040bc:	e002      	b.n	80040c4 <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f009 f94a 	bl	800d358 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	695a      	ldr	r2, [r3, #20]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80040d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4618      	mov	r0, r3
 80040da:	f006 fe66 	bl	800adaa <USB_ReadInterrupts>
 80040de:	4603      	mov	r3, r0
 80040e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040e8:	d112      	bne.n	8004110 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d102      	bne.n	8004100 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f009 f906 	bl	800d30c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	695a      	ldr	r2, [r3, #20]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800410e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4618      	mov	r0, r3
 8004116:	f006 fe48 	bl	800adaa <USB_ReadInterrupts>
 800411a:	4603      	mov	r3, r0
 800411c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004120:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004124:	f040 80a7 	bne.w	8004276 <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	69fa      	ldr	r2, [r7, #28]
 8004132:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004136:	f023 0301 	bic.w	r3, r3, #1
 800413a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2110      	movs	r1, #16
 8004142:	4618      	mov	r0, r3
 8004144:	f005 ff80 	bl	800a048 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004148:	2300      	movs	r3, #0
 800414a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800414c:	e036      	b.n	80041bc <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800414e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004150:	015a      	lsls	r2, r3, #5
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	4413      	add	r3, r2
 8004156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800415a:	461a      	mov	r2, r3
 800415c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004160:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004164:	015a      	lsls	r2, r3, #5
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	4413      	add	r3, r2
 800416a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004172:	0151      	lsls	r1, r2, #5
 8004174:	69fa      	ldr	r2, [r7, #28]
 8004176:	440a      	add	r2, r1
 8004178:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800417c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004180:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004184:	015a      	lsls	r2, r3, #5
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	4413      	add	r3, r2
 800418a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800418e:	461a      	mov	r2, r3
 8004190:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004194:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004198:	015a      	lsls	r2, r3, #5
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	4413      	add	r3, r2
 800419e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041a6:	0151      	lsls	r1, r2, #5
 80041a8:	69fa      	ldr	r2, [r7, #28]
 80041aa:	440a      	add	r2, r1
 80041ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041b0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80041b4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041b8:	3301      	adds	r3, #1
 80041ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d3c3      	bcc.n	800414e <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041cc:	69db      	ldr	r3, [r3, #28]
 80041ce:	69fa      	ldr	r2, [r7, #28]
 80041d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041d4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80041d8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d016      	beq.n	8004210 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041ec:	69fa      	ldr	r2, [r7, #28]
 80041ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041f2:	f043 030b 	orr.w	r3, r3, #11
 80041f6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004202:	69fa      	ldr	r2, [r7, #28]
 8004204:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004208:	f043 030b 	orr.w	r3, r3, #11
 800420c:	6453      	str	r3, [r2, #68]	; 0x44
 800420e:	e015      	b.n	800423c <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004216:	695b      	ldr	r3, [r3, #20]
 8004218:	69fa      	ldr	r2, [r7, #28]
 800421a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800421e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004222:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004226:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	69fa      	ldr	r2, [r7, #28]
 8004232:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004236:	f043 030b 	orr.w	r3, r3, #11
 800423a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	69fa      	ldr	r2, [r7, #28]
 8004246:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800424a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800424e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6818      	ldr	r0, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004260:	461a      	mov	r2, r3
 8004262:	f006 fe79 	bl	800af58 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	695a      	ldr	r2, [r3, #20]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004274:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4618      	mov	r0, r3
 800427c:	f006 fd95 	bl	800adaa <USB_ReadInterrupts>
 8004280:	4603      	mov	r3, r0
 8004282:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004286:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800428a:	d124      	bne.n	80042d6 <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4618      	mov	r0, r3
 8004292:	f006 fe2b 	bl	800aeec <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4618      	mov	r0, r3
 800429c:	f005 ff35 	bl	800a10a <USB_GetDevSpeed>
 80042a0:	4603      	mov	r3, r0
 80042a2:	461a      	mov	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681c      	ldr	r4, [r3, #0]
 80042ac:	f001 f9a2 	bl	80055f4 <HAL_RCC_GetHCLKFreq>
 80042b0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	461a      	mov	r2, r3
 80042ba:	4620      	mov	r0, r4
 80042bc:	f005 fc64 	bl	8009b88 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f008 fffa 	bl	800d2ba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	695a      	ldr	r2, [r3, #20]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80042d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4618      	mov	r0, r3
 80042dc:	f006 fd65 	bl	800adaa <USB_ReadInterrupts>
 80042e0:	4603      	mov	r3, r0
 80042e2:	f003 0310 	and.w	r3, r3, #16
 80042e6:	2b10      	cmp	r3, #16
 80042e8:	d161      	bne.n	80043ae <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	699a      	ldr	r2, [r3, #24]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f022 0210 	bic.w	r2, r2, #16
 80042f8:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80042fa:	6a3b      	ldr	r3, [r7, #32]
 80042fc:	6a1b      	ldr	r3, [r3, #32]
 80042fe:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	f003 020f 	and.w	r2, r3, #15
 8004306:	4613      	mov	r3, r2
 8004308:	00db      	lsls	r3, r3, #3
 800430a:	1a9b      	subs	r3, r3, r2
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	4413      	add	r3, r2
 8004316:	3304      	adds	r3, #4
 8004318:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	0c5b      	lsrs	r3, r3, #17
 800431e:	f003 030f 	and.w	r3, r3, #15
 8004322:	2b02      	cmp	r3, #2
 8004324:	d124      	bne.n	8004370 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004326:	693a      	ldr	r2, [r7, #16]
 8004328:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800432c:	4013      	ands	r3, r2
 800432e:	2b00      	cmp	r3, #0
 8004330:	d035      	beq.n	800439e <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	091b      	lsrs	r3, r3, #4
 800433a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800433c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004340:	b29b      	uxth	r3, r3
 8004342:	461a      	mov	r2, r3
 8004344:	6a38      	ldr	r0, [r7, #32]
 8004346:	f006 fbdd 	bl	800ab04 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	68da      	ldr	r2, [r3, #12]
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	091b      	lsrs	r3, r3, #4
 8004352:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004356:	441a      	add	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	699a      	ldr	r2, [r3, #24]
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	091b      	lsrs	r3, r3, #4
 8004364:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004368:	441a      	add	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	619a      	str	r2, [r3, #24]
 800436e:	e016      	b.n	800439e <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	0c5b      	lsrs	r3, r3, #17
 8004374:	f003 030f 	and.w	r3, r3, #15
 8004378:	2b06      	cmp	r3, #6
 800437a:	d110      	bne.n	800439e <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004382:	2208      	movs	r2, #8
 8004384:	4619      	mov	r1, r3
 8004386:	6a38      	ldr	r0, [r7, #32]
 8004388:	f006 fbbc 	bl	800ab04 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	699a      	ldr	r2, [r3, #24]
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	091b      	lsrs	r3, r3, #4
 8004394:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004398:	441a      	add	r2, r3
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	699a      	ldr	r2, [r3, #24]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f042 0210 	orr.w	r2, r2, #16
 80043ac:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4618      	mov	r0, r3
 80043b4:	f006 fcf9 	bl	800adaa <USB_ReadInterrupts>
 80043b8:	4603      	mov	r3, r0
 80043ba:	f003 0308 	and.w	r3, r3, #8
 80043be:	2b08      	cmp	r3, #8
 80043c0:	d10a      	bne.n	80043d8 <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f008 ff6b 	bl	800d29e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	695a      	ldr	r2, [r3, #20]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f002 0208 	and.w	r2, r2, #8
 80043d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4618      	mov	r0, r3
 80043de:	f006 fce4 	bl	800adaa <USB_ReadInterrupts>
 80043e2:	4603      	mov	r3, r0
 80043e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043ec:	d10f      	bne.n	800440e <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80043ee:	2300      	movs	r3, #0
 80043f0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80043f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	4619      	mov	r1, r3
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f008 ffcd 	bl	800d398 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	695a      	ldr	r2, [r3, #20]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800440c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4618      	mov	r0, r3
 8004414:	f006 fcc9 	bl	800adaa <USB_ReadInterrupts>
 8004418:	4603      	mov	r3, r0
 800441a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800441e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004422:	d10f      	bne.n	8004444 <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004424:	2300      	movs	r3, #0
 8004426:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442a:	b2db      	uxtb	r3, r3
 800442c:	4619      	mov	r1, r3
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f008 ffa0 	bl	800d374 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	695a      	ldr	r2, [r3, #20]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004442:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4618      	mov	r0, r3
 800444a:	f006 fcae 	bl	800adaa <USB_ReadInterrupts>
 800444e:	4603      	mov	r3, r0
 8004450:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004454:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004458:	d10a      	bne.n	8004470 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f008 ffae 	bl	800d3bc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	695a      	ldr	r2, [r3, #20]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800446e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4618      	mov	r0, r3
 8004476:	f006 fc98 	bl	800adaa <USB_ReadInterrupts>
 800447a:	4603      	mov	r3, r0
 800447c:	f003 0304 	and.w	r3, r3, #4
 8004480:	2b04      	cmp	r3, #4
 8004482:	d115      	bne.n	80044b0 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	f003 0304 	and.w	r3, r3, #4
 8004492:	2b00      	cmp	r3, #0
 8004494:	d002      	beq.n	800449c <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f008 ff9e 	bl	800d3d8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6859      	ldr	r1, [r3, #4]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	693a      	ldr	r2, [r7, #16]
 80044a8:	430a      	orrs	r2, r1
 80044aa:	605a      	str	r2, [r3, #4]
 80044ac:	e000      	b.n	80044b0 <HAL_PCD_IRQHandler+0x740>
      return;
 80044ae:	bf00      	nop
    }
  }
}
 80044b0:	3734      	adds	r7, #52	; 0x34
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd90      	pop	{r4, r7, pc}

080044b6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b082      	sub	sp, #8
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
 80044be:	460b      	mov	r3, r1
 80044c0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d101      	bne.n	80044d0 <HAL_PCD_SetAddress+0x1a>
 80044cc:	2302      	movs	r3, #2
 80044ce:	e013      	b.n	80044f8 <HAL_PCD_SetAddress+0x42>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	78fa      	ldrb	r2, [r7, #3]
 80044dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	78fa      	ldrb	r2, [r7, #3]
 80044e6:	4611      	mov	r1, r2
 80044e8:	4618      	mov	r0, r3
 80044ea:	f006 fc08 	bl	800acfe <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3708      	adds	r7, #8
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	4608      	mov	r0, r1
 800450a:	4611      	mov	r1, r2
 800450c:	461a      	mov	r2, r3
 800450e:	4603      	mov	r3, r0
 8004510:	70fb      	strb	r3, [r7, #3]
 8004512:	460b      	mov	r3, r1
 8004514:	803b      	strh	r3, [r7, #0]
 8004516:	4613      	mov	r3, r2
 8004518:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800451a:	2300      	movs	r3, #0
 800451c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800451e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004522:	2b00      	cmp	r3, #0
 8004524:	da0f      	bge.n	8004546 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004526:	78fb      	ldrb	r3, [r7, #3]
 8004528:	f003 020f 	and.w	r2, r3, #15
 800452c:	4613      	mov	r3, r2
 800452e:	00db      	lsls	r3, r3, #3
 8004530:	1a9b      	subs	r3, r3, r2
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	3338      	adds	r3, #56	; 0x38
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	4413      	add	r3, r2
 800453a:	3304      	adds	r3, #4
 800453c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2201      	movs	r2, #1
 8004542:	705a      	strb	r2, [r3, #1]
 8004544:	e00f      	b.n	8004566 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004546:	78fb      	ldrb	r3, [r7, #3]
 8004548:	f003 020f 	and.w	r2, r3, #15
 800454c:	4613      	mov	r3, r2
 800454e:	00db      	lsls	r3, r3, #3
 8004550:	1a9b      	subs	r3, r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	4413      	add	r3, r2
 800455c:	3304      	adds	r3, #4
 800455e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2200      	movs	r2, #0
 8004564:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004566:	78fb      	ldrb	r3, [r7, #3]
 8004568:	f003 030f 	and.w	r3, r3, #15
 800456c:	b2da      	uxtb	r2, r3
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004572:	883a      	ldrh	r2, [r7, #0]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	78ba      	ldrb	r2, [r7, #2]
 800457c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	785b      	ldrb	r3, [r3, #1]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d004      	beq.n	8004590 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	b29a      	uxth	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004590:	78bb      	ldrb	r3, [r7, #2]
 8004592:	2b02      	cmp	r3, #2
 8004594:	d102      	bne.n	800459c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2200      	movs	r2, #0
 800459a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d101      	bne.n	80045aa <HAL_PCD_EP_Open+0xaa>
 80045a6:	2302      	movs	r3, #2
 80045a8:	e00e      	b.n	80045c8 <HAL_PCD_EP_Open+0xc8>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68f9      	ldr	r1, [r7, #12]
 80045b8:	4618      	mov	r0, r3
 80045ba:	f005 fdcb 	bl	800a154 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80045c6:	7afb      	ldrb	r3, [r7, #11]
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3710      	adds	r7, #16
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	460b      	mov	r3, r1
 80045da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80045dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	da0f      	bge.n	8004604 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045e4:	78fb      	ldrb	r3, [r7, #3]
 80045e6:	f003 020f 	and.w	r2, r3, #15
 80045ea:	4613      	mov	r3, r2
 80045ec:	00db      	lsls	r3, r3, #3
 80045ee:	1a9b      	subs	r3, r3, r2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	3338      	adds	r3, #56	; 0x38
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	4413      	add	r3, r2
 80045f8:	3304      	adds	r3, #4
 80045fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2201      	movs	r2, #1
 8004600:	705a      	strb	r2, [r3, #1]
 8004602:	e00f      	b.n	8004624 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004604:	78fb      	ldrb	r3, [r7, #3]
 8004606:	f003 020f 	and.w	r2, r3, #15
 800460a:	4613      	mov	r3, r2
 800460c:	00db      	lsls	r3, r3, #3
 800460e:	1a9b      	subs	r3, r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	4413      	add	r3, r2
 800461a:	3304      	adds	r3, #4
 800461c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004624:	78fb      	ldrb	r3, [r7, #3]
 8004626:	f003 030f 	and.w	r3, r3, #15
 800462a:	b2da      	uxtb	r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004636:	2b01      	cmp	r3, #1
 8004638:	d101      	bne.n	800463e <HAL_PCD_EP_Close+0x6e>
 800463a:	2302      	movs	r3, #2
 800463c:	e00e      	b.n	800465c <HAL_PCD_EP_Close+0x8c>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68f9      	ldr	r1, [r7, #12]
 800464c:	4618      	mov	r0, r3
 800464e:	f005 fe09 	bl	800a264 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	3710      	adds	r7, #16
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b086      	sub	sp, #24
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	607a      	str	r2, [r7, #4]
 800466e:	603b      	str	r3, [r7, #0]
 8004670:	460b      	mov	r3, r1
 8004672:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004674:	7afb      	ldrb	r3, [r7, #11]
 8004676:	f003 020f 	and.w	r2, r3, #15
 800467a:	4613      	mov	r3, r2
 800467c:	00db      	lsls	r3, r3, #3
 800467e:	1a9b      	subs	r3, r3, r2
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	4413      	add	r3, r2
 800468a:	3304      	adds	r3, #4
 800468c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	683a      	ldr	r2, [r7, #0]
 8004698:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	2200      	movs	r2, #0
 800469e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	2200      	movs	r2, #0
 80046a4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046a6:	7afb      	ldrb	r3, [r7, #11]
 80046a8:	f003 030f 	and.w	r3, r3, #15
 80046ac:	b2da      	uxtb	r2, r3
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d102      	bne.n	80046c0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80046c0:	7afb      	ldrb	r3, [r7, #11]
 80046c2:	f003 030f 	and.w	r3, r3, #15
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d109      	bne.n	80046de <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6818      	ldr	r0, [r3, #0]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	461a      	mov	r2, r3
 80046d6:	6979      	ldr	r1, [r7, #20]
 80046d8:	f006 f88c 	bl	800a7f4 <USB_EP0StartXfer>
 80046dc:	e008      	b.n	80046f0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6818      	ldr	r0, [r3, #0]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	461a      	mov	r2, r3
 80046ea:	6979      	ldr	r1, [r7, #20]
 80046ec:	f005 fe3e 	bl	800a36c <USB_EPStartXfer>
  }

  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3718      	adds	r7, #24
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046fa:	b480      	push	{r7}
 80046fc:	b083      	sub	sp, #12
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
 8004702:	460b      	mov	r3, r1
 8004704:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004706:	78fb      	ldrb	r3, [r7, #3]
 8004708:	f003 020f 	and.w	r2, r3, #15
 800470c:	6879      	ldr	r1, [r7, #4]
 800470e:	4613      	mov	r3, r2
 8004710:	00db      	lsls	r3, r3, #3
 8004712:	1a9b      	subs	r3, r3, r2
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	440b      	add	r3, r1
 8004718:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800471c:	681b      	ldr	r3, [r3, #0]
}
 800471e:	4618      	mov	r0, r3
 8004720:	370c      	adds	r7, #12
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr

0800472a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800472a:	b580      	push	{r7, lr}
 800472c:	b086      	sub	sp, #24
 800472e:	af00      	add	r7, sp, #0
 8004730:	60f8      	str	r0, [r7, #12]
 8004732:	607a      	str	r2, [r7, #4]
 8004734:	603b      	str	r3, [r7, #0]
 8004736:	460b      	mov	r3, r1
 8004738:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800473a:	7afb      	ldrb	r3, [r7, #11]
 800473c:	f003 020f 	and.w	r2, r3, #15
 8004740:	4613      	mov	r3, r2
 8004742:	00db      	lsls	r3, r3, #3
 8004744:	1a9b      	subs	r3, r3, r2
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	3338      	adds	r3, #56	; 0x38
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	4413      	add	r3, r2
 800474e:	3304      	adds	r3, #4
 8004750:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	683a      	ldr	r2, [r7, #0]
 800475c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	2200      	movs	r2, #0
 8004762:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	2201      	movs	r2, #1
 8004768:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800476a:	7afb      	ldrb	r3, [r7, #11]
 800476c:	f003 030f 	and.w	r3, r3, #15
 8004770:	b2da      	uxtb	r2, r3
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	2b01      	cmp	r3, #1
 800477c:	d102      	bne.n	8004784 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004784:	7afb      	ldrb	r3, [r7, #11]
 8004786:	f003 030f 	and.w	r3, r3, #15
 800478a:	2b00      	cmp	r3, #0
 800478c:	d109      	bne.n	80047a2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6818      	ldr	r0, [r3, #0]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	b2db      	uxtb	r3, r3
 8004798:	461a      	mov	r2, r3
 800479a:	6979      	ldr	r1, [r7, #20]
 800479c:	f006 f82a 	bl	800a7f4 <USB_EP0StartXfer>
 80047a0:	e008      	b.n	80047b4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6818      	ldr	r0, [r3, #0]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	461a      	mov	r2, r3
 80047ae:	6979      	ldr	r1, [r7, #20]
 80047b0:	f005 fddc 	bl	800a36c <USB_EPStartXfer>
  }

  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3718      	adds	r7, #24
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}

080047be <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047be:	b580      	push	{r7, lr}
 80047c0:	b084      	sub	sp, #16
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
 80047c6:	460b      	mov	r3, r1
 80047c8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80047ca:	78fb      	ldrb	r3, [r7, #3]
 80047cc:	f003 020f 	and.w	r2, r3, #15
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d901      	bls.n	80047dc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e050      	b.n	800487e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80047dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	da0f      	bge.n	8004804 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047e4:	78fb      	ldrb	r3, [r7, #3]
 80047e6:	f003 020f 	and.w	r2, r3, #15
 80047ea:	4613      	mov	r3, r2
 80047ec:	00db      	lsls	r3, r3, #3
 80047ee:	1a9b      	subs	r3, r3, r2
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	3338      	adds	r3, #56	; 0x38
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	4413      	add	r3, r2
 80047f8:	3304      	adds	r3, #4
 80047fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2201      	movs	r2, #1
 8004800:	705a      	strb	r2, [r3, #1]
 8004802:	e00d      	b.n	8004820 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004804:	78fa      	ldrb	r2, [r7, #3]
 8004806:	4613      	mov	r3, r2
 8004808:	00db      	lsls	r3, r3, #3
 800480a:	1a9b      	subs	r3, r3, r2
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	4413      	add	r3, r2
 8004816:	3304      	adds	r3, #4
 8004818:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2201      	movs	r2, #1
 8004824:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004826:	78fb      	ldrb	r3, [r7, #3]
 8004828:	f003 030f 	and.w	r3, r3, #15
 800482c:	b2da      	uxtb	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004838:	2b01      	cmp	r3, #1
 800483a:	d101      	bne.n	8004840 <HAL_PCD_EP_SetStall+0x82>
 800483c:	2302      	movs	r3, #2
 800483e:	e01e      	b.n	800487e <HAL_PCD_EP_SetStall+0xc0>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68f9      	ldr	r1, [r7, #12]
 800484e:	4618      	mov	r0, r3
 8004850:	f006 f981 	bl	800ab56 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004854:	78fb      	ldrb	r3, [r7, #3]
 8004856:	f003 030f 	and.w	r3, r3, #15
 800485a:	2b00      	cmp	r3, #0
 800485c:	d10a      	bne.n	8004874 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6818      	ldr	r0, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	b2d9      	uxtb	r1, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800486e:	461a      	mov	r2, r3
 8004870:	f006 fb72 	bl	800af58 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3710      	adds	r7, #16
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}

08004886 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004886:	b580      	push	{r7, lr}
 8004888:	b084      	sub	sp, #16
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
 800488e:	460b      	mov	r3, r1
 8004890:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004892:	78fb      	ldrb	r3, [r7, #3]
 8004894:	f003 020f 	and.w	r2, r3, #15
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	429a      	cmp	r2, r3
 800489e:	d901      	bls.n	80048a4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e042      	b.n	800492a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80048a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	da0f      	bge.n	80048cc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048ac:	78fb      	ldrb	r3, [r7, #3]
 80048ae:	f003 020f 	and.w	r2, r3, #15
 80048b2:	4613      	mov	r3, r2
 80048b4:	00db      	lsls	r3, r3, #3
 80048b6:	1a9b      	subs	r3, r3, r2
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	3338      	adds	r3, #56	; 0x38
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	4413      	add	r3, r2
 80048c0:	3304      	adds	r3, #4
 80048c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2201      	movs	r2, #1
 80048c8:	705a      	strb	r2, [r3, #1]
 80048ca:	e00f      	b.n	80048ec <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80048cc:	78fb      	ldrb	r3, [r7, #3]
 80048ce:	f003 020f 	and.w	r2, r3, #15
 80048d2:	4613      	mov	r3, r2
 80048d4:	00db      	lsls	r3, r3, #3
 80048d6:	1a9b      	subs	r3, r3, r2
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	4413      	add	r3, r2
 80048e2:	3304      	adds	r3, #4
 80048e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2200      	movs	r2, #0
 80048f0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048f2:	78fb      	ldrb	r3, [r7, #3]
 80048f4:	f003 030f 	and.w	r3, r3, #15
 80048f8:	b2da      	uxtb	r2, r3
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004904:	2b01      	cmp	r3, #1
 8004906:	d101      	bne.n	800490c <HAL_PCD_EP_ClrStall+0x86>
 8004908:	2302      	movs	r3, #2
 800490a:	e00e      	b.n	800492a <HAL_PCD_EP_ClrStall+0xa4>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68f9      	ldr	r1, [r7, #12]
 800491a:	4618      	mov	r0, r3
 800491c:	f006 f989 	bl	800ac32 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3710      	adds	r7, #16
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004932:	b580      	push	{r7, lr}
 8004934:	b08a      	sub	sp, #40	; 0x28
 8004936:	af02      	add	r7, sp, #8
 8004938:	6078      	str	r0, [r7, #4]
 800493a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004946:	683a      	ldr	r2, [r7, #0]
 8004948:	4613      	mov	r3, r2
 800494a:	00db      	lsls	r3, r3, #3
 800494c:	1a9b      	subs	r3, r3, r2
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	3338      	adds	r3, #56	; 0x38
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	4413      	add	r3, r2
 8004956:	3304      	adds	r3, #4
 8004958:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	699a      	ldr	r2, [r3, #24]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	429a      	cmp	r2, r3
 8004964:	d901      	bls.n	800496a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e06c      	b.n	8004a44 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	695a      	ldr	r2, [r3, #20]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	69fa      	ldr	r2, [r7, #28]
 800497c:	429a      	cmp	r2, r3
 800497e:	d902      	bls.n	8004986 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	3303      	adds	r3, #3
 800498a:	089b      	lsrs	r3, r3, #2
 800498c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800498e:	e02b      	b.n	80049e8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	695a      	ldr	r2, [r3, #20]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	699b      	ldr	r3, [r3, #24]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	69fa      	ldr	r2, [r7, #28]
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d902      	bls.n	80049ac <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	3303      	adds	r3, #3
 80049b0:	089b      	lsrs	r3, r3, #2
 80049b2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	68d9      	ldr	r1, [r3, #12]
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	b2da      	uxtb	r2, r3
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	9300      	str	r3, [sp, #0]
 80049c8:	4603      	mov	r3, r0
 80049ca:	6978      	ldr	r0, [r7, #20]
 80049cc:	f006 f865 	bl	800aa9a <USB_WritePacket>

    ep->xfer_buff  += len;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	68da      	ldr	r2, [r3, #12]
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	441a      	add	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	699a      	ldr	r2, [r3, #24]
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	441a      	add	r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	015a      	lsls	r2, r3, #5
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	4413      	add	r3, r2
 80049f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	69ba      	ldr	r2, [r7, #24]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d809      	bhi.n	8004a12 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	699a      	ldr	r2, [r3, #24]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d203      	bcs.n	8004a12 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	695b      	ldr	r3, [r3, #20]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1be      	bne.n	8004990 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	695a      	ldr	r2, [r3, #20]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	699b      	ldr	r3, [r3, #24]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d811      	bhi.n	8004a42 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	f003 030f 	and.w	r3, r3, #15
 8004a24:	2201      	movs	r2, #1
 8004a26:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	43db      	mvns	r3, r3
 8004a38:	6939      	ldr	r1, [r7, #16]
 8004a3a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a3e:	4013      	ands	r3, r2
 8004a40:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004a42:	2300      	movs	r3, #0
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3720      	adds	r7, #32
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b086      	sub	sp, #24
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	333c      	adds	r3, #60	; 0x3c
 8004a64:	3304      	adds	r3, #4
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	015a      	lsls	r2, r3, #5
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	4413      	add	r3, r2
 8004a72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	f040 80b3 	bne.w	8004bea <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	f003 0308 	and.w	r3, r3, #8
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d028      	beq.n	8004ae0 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	4a70      	ldr	r2, [pc, #448]	; (8004c54 <PCD_EP_OutXfrComplete_int+0x208>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d90e      	bls.n	8004ab4 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d009      	beq.n	8004ab4 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	015a      	lsls	r2, r3, #5
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aac:	461a      	mov	r2, r3
 8004aae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ab2:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f008 fbab 	bl	800d210 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6818      	ldr	r0, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	2101      	movs	r1, #1
 8004ac8:	f006 fa46 	bl	800af58 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	015a      	lsls	r2, r3, #5
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ad8:	461a      	mov	r2, r3
 8004ada:	2308      	movs	r3, #8
 8004adc:	6093      	str	r3, [r2, #8]
 8004ade:	e0b3      	b.n	8004c48 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	f003 0320 	and.w	r3, r3, #32
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d009      	beq.n	8004afe <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	015a      	lsls	r2, r3, #5
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	4413      	add	r3, r2
 8004af2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004af6:	461a      	mov	r2, r3
 8004af8:	2320      	movs	r3, #32
 8004afa:	6093      	str	r3, [r2, #8]
 8004afc:	e0a4      	b.n	8004c48 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f040 809f 	bne.w	8004c48 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	4a51      	ldr	r2, [pc, #324]	; (8004c54 <PCD_EP_OutXfrComplete_int+0x208>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d90f      	bls.n	8004b32 <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d00a      	beq.n	8004b32 <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	015a      	lsls	r2, r3, #5
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	4413      	add	r3, r2
 8004b24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b28:	461a      	mov	r2, r3
 8004b2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b2e:	6093      	str	r3, [r2, #8]
 8004b30:	e08a      	b.n	8004c48 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004b32:	6879      	ldr	r1, [r7, #4]
 8004b34:	683a      	ldr	r2, [r7, #0]
 8004b36:	4613      	mov	r3, r2
 8004b38:	00db      	lsls	r3, r3, #3
 8004b3a:	1a9b      	subs	r3, r3, r2
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	440b      	add	r3, r1
 8004b40:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004b44:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	0159      	lsls	r1, r3, #5
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	440b      	add	r3, r1
 8004b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8004b58:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	683a      	ldr	r2, [r7, #0]
 8004b5e:	4613      	mov	r3, r2
 8004b60:	00db      	lsls	r3, r3, #3
 8004b62:	1a9b      	subs	r3, r3, r2
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	4403      	add	r3, r0
 8004b68:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004b6c:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004b6e:	6879      	ldr	r1, [r7, #4]
 8004b70:	683a      	ldr	r2, [r7, #0]
 8004b72:	4613      	mov	r3, r2
 8004b74:	00db      	lsls	r3, r3, #3
 8004b76:	1a9b      	subs	r3, r3, r2
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	440b      	add	r3, r1
 8004b7c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004b80:	6819      	ldr	r1, [r3, #0]
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	683a      	ldr	r2, [r7, #0]
 8004b86:	4613      	mov	r3, r2
 8004b88:	00db      	lsls	r3, r3, #3
 8004b8a:	1a9b      	subs	r3, r3, r2
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	4403      	add	r3, r0
 8004b90:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4419      	add	r1, r3
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	683a      	ldr	r2, [r7, #0]
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	00db      	lsls	r3, r3, #3
 8004ba0:	1a9b      	subs	r3, r3, r2
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	4403      	add	r3, r0
 8004ba6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004baa:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f008 fb3e 	bl	800d234 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d144      	bne.n	8004c48 <PCD_EP_OutXfrComplete_int+0x1fc>
 8004bbe:	6879      	ldr	r1, [r7, #4]
 8004bc0:	683a      	ldr	r2, [r7, #0]
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	00db      	lsls	r3, r3, #3
 8004bc6:	1a9b      	subs	r3, r3, r2
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	440b      	add	r3, r1
 8004bcc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d138      	bne.n	8004c48 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6818      	ldr	r0, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004be0:	461a      	mov	r2, r3
 8004be2:	2101      	movs	r1, #1
 8004be4:	f006 f9b8 	bl	800af58 <USB_EP0_OutStart>
 8004be8:	e02e      	b.n	8004c48 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	4a1a      	ldr	r2, [pc, #104]	; (8004c58 <PCD_EP_OutXfrComplete_int+0x20c>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d124      	bne.n	8004c3c <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00a      	beq.n	8004c12 <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	015a      	lsls	r2, r3, #5
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	4413      	add	r3, r2
 8004c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c08:	461a      	mov	r2, r3
 8004c0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c0e:	6093      	str	r3, [r2, #8]
 8004c10:	e01a      	b.n	8004c48 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	f003 0320 	and.w	r3, r3, #32
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d008      	beq.n	8004c2e <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	015a      	lsls	r2, r3, #5
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	4413      	add	r3, r2
 8004c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c28:	461a      	mov	r2, r3
 8004c2a:	2320      	movs	r3, #32
 8004c2c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	4619      	mov	r1, r3
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f008 fafd 	bl	800d234 <HAL_PCD_DataOutStageCallback>
 8004c3a:	e005      	b.n	8004c48 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	4619      	mov	r1, r3
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f008 faf6 	bl	800d234 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3718      	adds	r7, #24
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	4f54300a 	.word	0x4f54300a
 8004c58:	4f54310a 	.word	0x4f54310a

08004c5c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b086      	sub	sp, #24
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	333c      	adds	r3, #60	; 0x3c
 8004c74:	3304      	adds	r3, #4
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	015a      	lsls	r2, r3, #5
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	4413      	add	r3, r2
 8004c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d113      	bne.n	8004cba <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	4a1f      	ldr	r2, [pc, #124]	; (8004d14 <PCD_EP_OutSetupPacket_int+0xb8>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d922      	bls.n	8004ce0 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d01d      	beq.n	8004ce0 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	015a      	lsls	r2, r3, #5
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	4413      	add	r3, r2
 8004cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cb6:	6093      	str	r3, [r2, #8]
 8004cb8:	e012      	b.n	8004ce0 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	4a16      	ldr	r2, [pc, #88]	; (8004d18 <PCD_EP_OutSetupPacket_int+0xbc>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d10e      	bne.n	8004ce0 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d009      	beq.n	8004ce0 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	015a      	lsls	r2, r3, #5
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cd8:	461a      	mov	r2, r3
 8004cda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cde:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f008 fa95 	bl	800d210 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	4a0a      	ldr	r2, [pc, #40]	; (8004d14 <PCD_EP_OutSetupPacket_int+0xb8>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d90c      	bls.n	8004d08 <PCD_EP_OutSetupPacket_int+0xac>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d108      	bne.n	8004d08 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6818      	ldr	r0, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004d00:	461a      	mov	r2, r3
 8004d02:	2101      	movs	r1, #1
 8004d04:	f006 f928 	bl	800af58 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3718      	adds	r7, #24
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop
 8004d14:	4f54300a 	.word	0x4f54300a
 8004d18:	4f54310a 	.word	0x4f54310a

08004d1c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	460b      	mov	r3, r1
 8004d26:	70fb      	strb	r3, [r7, #3]
 8004d28:	4613      	mov	r3, r2
 8004d2a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d32:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004d34:	78fb      	ldrb	r3, [r7, #3]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d107      	bne.n	8004d4a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004d3a:	883b      	ldrh	r3, [r7, #0]
 8004d3c:	0419      	lsls	r1, r3, #16
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68ba      	ldr	r2, [r7, #8]
 8004d44:	430a      	orrs	r2, r1
 8004d46:	629a      	str	r2, [r3, #40]	; 0x28
 8004d48:	e028      	b.n	8004d9c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d50:	0c1b      	lsrs	r3, r3, #16
 8004d52:	68ba      	ldr	r2, [r7, #8]
 8004d54:	4413      	add	r3, r2
 8004d56:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004d58:	2300      	movs	r3, #0
 8004d5a:	73fb      	strb	r3, [r7, #15]
 8004d5c:	e00d      	b.n	8004d7a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	7bfb      	ldrb	r3, [r7, #15]
 8004d64:	3340      	adds	r3, #64	; 0x40
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	4413      	add	r3, r2
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	0c1b      	lsrs	r3, r3, #16
 8004d6e:	68ba      	ldr	r2, [r7, #8]
 8004d70:	4413      	add	r3, r2
 8004d72:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004d74:	7bfb      	ldrb	r3, [r7, #15]
 8004d76:	3301      	adds	r3, #1
 8004d78:	73fb      	strb	r3, [r7, #15]
 8004d7a:	7bfa      	ldrb	r2, [r7, #15]
 8004d7c:	78fb      	ldrb	r3, [r7, #3]
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d3ec      	bcc.n	8004d5e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004d84:	883b      	ldrh	r3, [r7, #0]
 8004d86:	0418      	lsls	r0, r3, #16
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6819      	ldr	r1, [r3, #0]
 8004d8c:	78fb      	ldrb	r3, [r7, #3]
 8004d8e:	3b01      	subs	r3, #1
 8004d90:	68ba      	ldr	r2, [r7, #8]
 8004d92:	4302      	orrs	r2, r0
 8004d94:	3340      	adds	r3, #64	; 0x40
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	440b      	add	r3, r1
 8004d9a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3714      	adds	r7, #20
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr

08004daa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004daa:	b480      	push	{r7}
 8004dac:	b083      	sub	sp, #12
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
 8004db2:	460b      	mov	r3, r1
 8004db4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	887a      	ldrh	r2, [r7, #2]
 8004dbc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004dbe:	2300      	movs	r3, #0
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004dd8:	bf00      	nop
 8004dda:	370c      	adds	r7, #12
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b086      	sub	sp, #24
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d101      	bne.n	8004df6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e25b      	b.n	80052ae <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0301 	and.w	r3, r3, #1
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d075      	beq.n	8004eee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e02:	4ba3      	ldr	r3, [pc, #652]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f003 030c 	and.w	r3, r3, #12
 8004e0a:	2b04      	cmp	r3, #4
 8004e0c:	d00c      	beq.n	8004e28 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e0e:	4ba0      	ldr	r3, [pc, #640]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e16:	2b08      	cmp	r3, #8
 8004e18:	d112      	bne.n	8004e40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e1a:	4b9d      	ldr	r3, [pc, #628]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e26:	d10b      	bne.n	8004e40 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e28:	4b99      	ldr	r3, [pc, #612]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d05b      	beq.n	8004eec <HAL_RCC_OscConfig+0x108>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d157      	bne.n	8004eec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e236      	b.n	80052ae <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e48:	d106      	bne.n	8004e58 <HAL_RCC_OscConfig+0x74>
 8004e4a:	4b91      	ldr	r3, [pc, #580]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a90      	ldr	r2, [pc, #576]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e54:	6013      	str	r3, [r2, #0]
 8004e56:	e01d      	b.n	8004e94 <HAL_RCC_OscConfig+0xb0>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e60:	d10c      	bne.n	8004e7c <HAL_RCC_OscConfig+0x98>
 8004e62:	4b8b      	ldr	r3, [pc, #556]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a8a      	ldr	r2, [pc, #552]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004e68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e6c:	6013      	str	r3, [r2, #0]
 8004e6e:	4b88      	ldr	r3, [pc, #544]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a87      	ldr	r2, [pc, #540]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e78:	6013      	str	r3, [r2, #0]
 8004e7a:	e00b      	b.n	8004e94 <HAL_RCC_OscConfig+0xb0>
 8004e7c:	4b84      	ldr	r3, [pc, #528]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a83      	ldr	r2, [pc, #524]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004e82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e86:	6013      	str	r3, [r2, #0]
 8004e88:	4b81      	ldr	r3, [pc, #516]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a80      	ldr	r2, [pc, #512]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004e8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d013      	beq.n	8004ec4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e9c:	f7fd fe20 	bl	8002ae0 <HAL_GetTick>
 8004ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ea2:	e008      	b.n	8004eb6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ea4:	f7fd fe1c 	bl	8002ae0 <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	2b64      	cmp	r3, #100	; 0x64
 8004eb0:	d901      	bls.n	8004eb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e1fb      	b.n	80052ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eb6:	4b76      	ldr	r3, [pc, #472]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d0f0      	beq.n	8004ea4 <HAL_RCC_OscConfig+0xc0>
 8004ec2:	e014      	b.n	8004eee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ec4:	f7fd fe0c 	bl	8002ae0 <HAL_GetTick>
 8004ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004eca:	e008      	b.n	8004ede <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ecc:	f7fd fe08 	bl	8002ae0 <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	2b64      	cmp	r3, #100	; 0x64
 8004ed8:	d901      	bls.n	8004ede <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e1e7      	b.n	80052ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ede:	4b6c      	ldr	r3, [pc, #432]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d1f0      	bne.n	8004ecc <HAL_RCC_OscConfig+0xe8>
 8004eea:	e000      	b.n	8004eee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004eec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0302 	and.w	r3, r3, #2
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d063      	beq.n	8004fc2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004efa:	4b65      	ldr	r3, [pc, #404]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f003 030c 	and.w	r3, r3, #12
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00b      	beq.n	8004f1e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f06:	4b62      	ldr	r3, [pc, #392]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f0e:	2b08      	cmp	r3, #8
 8004f10:	d11c      	bne.n	8004f4c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f12:	4b5f      	ldr	r3, [pc, #380]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d116      	bne.n	8004f4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f1e:	4b5c      	ldr	r3, [pc, #368]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0302 	and.w	r3, r3, #2
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d005      	beq.n	8004f36 <HAL_RCC_OscConfig+0x152>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d001      	beq.n	8004f36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e1bb      	b.n	80052ae <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f36:	4b56      	ldr	r3, [pc, #344]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	00db      	lsls	r3, r3, #3
 8004f44:	4952      	ldr	r1, [pc, #328]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004f46:	4313      	orrs	r3, r2
 8004f48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f4a:	e03a      	b.n	8004fc2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d020      	beq.n	8004f96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f54:	4b4f      	ldr	r3, [pc, #316]	; (8005094 <HAL_RCC_OscConfig+0x2b0>)
 8004f56:	2201      	movs	r2, #1
 8004f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f5a:	f7fd fdc1 	bl	8002ae0 <HAL_GetTick>
 8004f5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f60:	e008      	b.n	8004f74 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f62:	f7fd fdbd 	bl	8002ae0 <HAL_GetTick>
 8004f66:	4602      	mov	r2, r0
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d901      	bls.n	8004f74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	e19c      	b.n	80052ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f74:	4b46      	ldr	r3, [pc, #280]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0302 	and.w	r3, r3, #2
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d0f0      	beq.n	8004f62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f80:	4b43      	ldr	r3, [pc, #268]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	691b      	ldr	r3, [r3, #16]
 8004f8c:	00db      	lsls	r3, r3, #3
 8004f8e:	4940      	ldr	r1, [pc, #256]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004f90:	4313      	orrs	r3, r2
 8004f92:	600b      	str	r3, [r1, #0]
 8004f94:	e015      	b.n	8004fc2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f96:	4b3f      	ldr	r3, [pc, #252]	; (8005094 <HAL_RCC_OscConfig+0x2b0>)
 8004f98:	2200      	movs	r2, #0
 8004f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f9c:	f7fd fda0 	bl	8002ae0 <HAL_GetTick>
 8004fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fa2:	e008      	b.n	8004fb6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fa4:	f7fd fd9c 	bl	8002ae0 <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d901      	bls.n	8004fb6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e17b      	b.n	80052ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fb6:	4b36      	ldr	r3, [pc, #216]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0302 	and.w	r3, r3, #2
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d1f0      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0308 	and.w	r3, r3, #8
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d030      	beq.n	8005030 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	695b      	ldr	r3, [r3, #20]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d016      	beq.n	8005004 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fd6:	4b30      	ldr	r3, [pc, #192]	; (8005098 <HAL_RCC_OscConfig+0x2b4>)
 8004fd8:	2201      	movs	r2, #1
 8004fda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fdc:	f7fd fd80 	bl	8002ae0 <HAL_GetTick>
 8004fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fe2:	e008      	b.n	8004ff6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fe4:	f7fd fd7c 	bl	8002ae0 <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d901      	bls.n	8004ff6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e15b      	b.n	80052ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ff6:	4b26      	ldr	r3, [pc, #152]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004ff8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ffa:	f003 0302 	and.w	r3, r3, #2
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d0f0      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x200>
 8005002:	e015      	b.n	8005030 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005004:	4b24      	ldr	r3, [pc, #144]	; (8005098 <HAL_RCC_OscConfig+0x2b4>)
 8005006:	2200      	movs	r2, #0
 8005008:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800500a:	f7fd fd69 	bl	8002ae0 <HAL_GetTick>
 800500e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005010:	e008      	b.n	8005024 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005012:	f7fd fd65 	bl	8002ae0 <HAL_GetTick>
 8005016:	4602      	mov	r2, r0
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	2b02      	cmp	r3, #2
 800501e:	d901      	bls.n	8005024 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e144      	b.n	80052ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005024:	4b1a      	ldr	r3, [pc, #104]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8005026:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005028:	f003 0302 	and.w	r3, r3, #2
 800502c:	2b00      	cmp	r3, #0
 800502e:	d1f0      	bne.n	8005012 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 0304 	and.w	r3, r3, #4
 8005038:	2b00      	cmp	r3, #0
 800503a:	f000 80a0 	beq.w	800517e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800503e:	2300      	movs	r3, #0
 8005040:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005042:	4b13      	ldr	r3, [pc, #76]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8005044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d10f      	bne.n	800506e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800504e:	2300      	movs	r3, #0
 8005050:	60bb      	str	r3, [r7, #8]
 8005052:	4b0f      	ldr	r3, [pc, #60]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8005054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005056:	4a0e      	ldr	r2, [pc, #56]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8005058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800505c:	6413      	str	r3, [r2, #64]	; 0x40
 800505e:	4b0c      	ldr	r3, [pc, #48]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8005060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005066:	60bb      	str	r3, [r7, #8]
 8005068:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800506a:	2301      	movs	r3, #1
 800506c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800506e:	4b0b      	ldr	r3, [pc, #44]	; (800509c <HAL_RCC_OscConfig+0x2b8>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005076:	2b00      	cmp	r3, #0
 8005078:	d121      	bne.n	80050be <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800507a:	4b08      	ldr	r3, [pc, #32]	; (800509c <HAL_RCC_OscConfig+0x2b8>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a07      	ldr	r2, [pc, #28]	; (800509c <HAL_RCC_OscConfig+0x2b8>)
 8005080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005084:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005086:	f7fd fd2b 	bl	8002ae0 <HAL_GetTick>
 800508a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800508c:	e011      	b.n	80050b2 <HAL_RCC_OscConfig+0x2ce>
 800508e:	bf00      	nop
 8005090:	40023800 	.word	0x40023800
 8005094:	42470000 	.word	0x42470000
 8005098:	42470e80 	.word	0x42470e80
 800509c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050a0:	f7fd fd1e 	bl	8002ae0 <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d901      	bls.n	80050b2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e0fd      	b.n	80052ae <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050b2:	4b81      	ldr	r3, [pc, #516]	; (80052b8 <HAL_RCC_OscConfig+0x4d4>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d0f0      	beq.n	80050a0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d106      	bne.n	80050d4 <HAL_RCC_OscConfig+0x2f0>
 80050c6:	4b7d      	ldr	r3, [pc, #500]	; (80052bc <HAL_RCC_OscConfig+0x4d8>)
 80050c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ca:	4a7c      	ldr	r2, [pc, #496]	; (80052bc <HAL_RCC_OscConfig+0x4d8>)
 80050cc:	f043 0301 	orr.w	r3, r3, #1
 80050d0:	6713      	str	r3, [r2, #112]	; 0x70
 80050d2:	e01c      	b.n	800510e <HAL_RCC_OscConfig+0x32a>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	2b05      	cmp	r3, #5
 80050da:	d10c      	bne.n	80050f6 <HAL_RCC_OscConfig+0x312>
 80050dc:	4b77      	ldr	r3, [pc, #476]	; (80052bc <HAL_RCC_OscConfig+0x4d8>)
 80050de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050e0:	4a76      	ldr	r2, [pc, #472]	; (80052bc <HAL_RCC_OscConfig+0x4d8>)
 80050e2:	f043 0304 	orr.w	r3, r3, #4
 80050e6:	6713      	str	r3, [r2, #112]	; 0x70
 80050e8:	4b74      	ldr	r3, [pc, #464]	; (80052bc <HAL_RCC_OscConfig+0x4d8>)
 80050ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ec:	4a73      	ldr	r2, [pc, #460]	; (80052bc <HAL_RCC_OscConfig+0x4d8>)
 80050ee:	f043 0301 	orr.w	r3, r3, #1
 80050f2:	6713      	str	r3, [r2, #112]	; 0x70
 80050f4:	e00b      	b.n	800510e <HAL_RCC_OscConfig+0x32a>
 80050f6:	4b71      	ldr	r3, [pc, #452]	; (80052bc <HAL_RCC_OscConfig+0x4d8>)
 80050f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050fa:	4a70      	ldr	r2, [pc, #448]	; (80052bc <HAL_RCC_OscConfig+0x4d8>)
 80050fc:	f023 0301 	bic.w	r3, r3, #1
 8005100:	6713      	str	r3, [r2, #112]	; 0x70
 8005102:	4b6e      	ldr	r3, [pc, #440]	; (80052bc <HAL_RCC_OscConfig+0x4d8>)
 8005104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005106:	4a6d      	ldr	r2, [pc, #436]	; (80052bc <HAL_RCC_OscConfig+0x4d8>)
 8005108:	f023 0304 	bic.w	r3, r3, #4
 800510c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d015      	beq.n	8005142 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005116:	f7fd fce3 	bl	8002ae0 <HAL_GetTick>
 800511a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800511c:	e00a      	b.n	8005134 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800511e:	f7fd fcdf 	bl	8002ae0 <HAL_GetTick>
 8005122:	4602      	mov	r2, r0
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	f241 3288 	movw	r2, #5000	; 0x1388
 800512c:	4293      	cmp	r3, r2
 800512e:	d901      	bls.n	8005134 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e0bc      	b.n	80052ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005134:	4b61      	ldr	r3, [pc, #388]	; (80052bc <HAL_RCC_OscConfig+0x4d8>)
 8005136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005138:	f003 0302 	and.w	r3, r3, #2
 800513c:	2b00      	cmp	r3, #0
 800513e:	d0ee      	beq.n	800511e <HAL_RCC_OscConfig+0x33a>
 8005140:	e014      	b.n	800516c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005142:	f7fd fccd 	bl	8002ae0 <HAL_GetTick>
 8005146:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005148:	e00a      	b.n	8005160 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800514a:	f7fd fcc9 	bl	8002ae0 <HAL_GetTick>
 800514e:	4602      	mov	r2, r0
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	f241 3288 	movw	r2, #5000	; 0x1388
 8005158:	4293      	cmp	r3, r2
 800515a:	d901      	bls.n	8005160 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e0a6      	b.n	80052ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005160:	4b56      	ldr	r3, [pc, #344]	; (80052bc <HAL_RCC_OscConfig+0x4d8>)
 8005162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005164:	f003 0302 	and.w	r3, r3, #2
 8005168:	2b00      	cmp	r3, #0
 800516a:	d1ee      	bne.n	800514a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800516c:	7dfb      	ldrb	r3, [r7, #23]
 800516e:	2b01      	cmp	r3, #1
 8005170:	d105      	bne.n	800517e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005172:	4b52      	ldr	r3, [pc, #328]	; (80052bc <HAL_RCC_OscConfig+0x4d8>)
 8005174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005176:	4a51      	ldr	r2, [pc, #324]	; (80052bc <HAL_RCC_OscConfig+0x4d8>)
 8005178:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800517c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	699b      	ldr	r3, [r3, #24]
 8005182:	2b00      	cmp	r3, #0
 8005184:	f000 8092 	beq.w	80052ac <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005188:	4b4c      	ldr	r3, [pc, #304]	; (80052bc <HAL_RCC_OscConfig+0x4d8>)
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	f003 030c 	and.w	r3, r3, #12
 8005190:	2b08      	cmp	r3, #8
 8005192:	d05c      	beq.n	800524e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	2b02      	cmp	r3, #2
 800519a:	d141      	bne.n	8005220 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800519c:	4b48      	ldr	r3, [pc, #288]	; (80052c0 <HAL_RCC_OscConfig+0x4dc>)
 800519e:	2200      	movs	r2, #0
 80051a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051a2:	f7fd fc9d 	bl	8002ae0 <HAL_GetTick>
 80051a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051a8:	e008      	b.n	80051bc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051aa:	f7fd fc99 	bl	8002ae0 <HAL_GetTick>
 80051ae:	4602      	mov	r2, r0
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d901      	bls.n	80051bc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80051b8:	2303      	movs	r3, #3
 80051ba:	e078      	b.n	80052ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051bc:	4b3f      	ldr	r3, [pc, #252]	; (80052bc <HAL_RCC_OscConfig+0x4d8>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d1f0      	bne.n	80051aa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	69da      	ldr	r2, [r3, #28]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a1b      	ldr	r3, [r3, #32]
 80051d0:	431a      	orrs	r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d6:	019b      	lsls	r3, r3, #6
 80051d8:	431a      	orrs	r2, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051de:	085b      	lsrs	r3, r3, #1
 80051e0:	3b01      	subs	r3, #1
 80051e2:	041b      	lsls	r3, r3, #16
 80051e4:	431a      	orrs	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ea:	061b      	lsls	r3, r3, #24
 80051ec:	4933      	ldr	r1, [pc, #204]	; (80052bc <HAL_RCC_OscConfig+0x4d8>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051f2:	4b33      	ldr	r3, [pc, #204]	; (80052c0 <HAL_RCC_OscConfig+0x4dc>)
 80051f4:	2201      	movs	r2, #1
 80051f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051f8:	f7fd fc72 	bl	8002ae0 <HAL_GetTick>
 80051fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051fe:	e008      	b.n	8005212 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005200:	f7fd fc6e 	bl	8002ae0 <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	2b02      	cmp	r3, #2
 800520c:	d901      	bls.n	8005212 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e04d      	b.n	80052ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005212:	4b2a      	ldr	r3, [pc, #168]	; (80052bc <HAL_RCC_OscConfig+0x4d8>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d0f0      	beq.n	8005200 <HAL_RCC_OscConfig+0x41c>
 800521e:	e045      	b.n	80052ac <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005220:	4b27      	ldr	r3, [pc, #156]	; (80052c0 <HAL_RCC_OscConfig+0x4dc>)
 8005222:	2200      	movs	r2, #0
 8005224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005226:	f7fd fc5b 	bl	8002ae0 <HAL_GetTick>
 800522a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800522c:	e008      	b.n	8005240 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800522e:	f7fd fc57 	bl	8002ae0 <HAL_GetTick>
 8005232:	4602      	mov	r2, r0
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	2b02      	cmp	r3, #2
 800523a:	d901      	bls.n	8005240 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e036      	b.n	80052ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005240:	4b1e      	ldr	r3, [pc, #120]	; (80052bc <HAL_RCC_OscConfig+0x4d8>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d1f0      	bne.n	800522e <HAL_RCC_OscConfig+0x44a>
 800524c:	e02e      	b.n	80052ac <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	2b01      	cmp	r3, #1
 8005254:	d101      	bne.n	800525a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e029      	b.n	80052ae <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800525a:	4b18      	ldr	r3, [pc, #96]	; (80052bc <HAL_RCC_OscConfig+0x4d8>)
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	69db      	ldr	r3, [r3, #28]
 800526a:	429a      	cmp	r2, r3
 800526c:	d11c      	bne.n	80052a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005278:	429a      	cmp	r2, r3
 800527a:	d115      	bne.n	80052a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005282:	4013      	ands	r3, r2
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005288:	4293      	cmp	r3, r2
 800528a:	d10d      	bne.n	80052a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005296:	429a      	cmp	r2, r3
 8005298:	d106      	bne.n	80052a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d001      	beq.n	80052ac <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e000      	b.n	80052ae <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3718      	adds	r7, #24
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	40007000 	.word	0x40007000
 80052bc:	40023800 	.word	0x40023800
 80052c0:	42470060 	.word	0x42470060

080052c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d101      	bne.n	80052d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e0cc      	b.n	8005472 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052d8:	4b68      	ldr	r3, [pc, #416]	; (800547c <HAL_RCC_ClockConfig+0x1b8>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 030f 	and.w	r3, r3, #15
 80052e0:	683a      	ldr	r2, [r7, #0]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d90c      	bls.n	8005300 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052e6:	4b65      	ldr	r3, [pc, #404]	; (800547c <HAL_RCC_ClockConfig+0x1b8>)
 80052e8:	683a      	ldr	r2, [r7, #0]
 80052ea:	b2d2      	uxtb	r2, r2
 80052ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ee:	4b63      	ldr	r3, [pc, #396]	; (800547c <HAL_RCC_ClockConfig+0x1b8>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 030f 	and.w	r3, r3, #15
 80052f6:	683a      	ldr	r2, [r7, #0]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d001      	beq.n	8005300 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e0b8      	b.n	8005472 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0302 	and.w	r3, r3, #2
 8005308:	2b00      	cmp	r3, #0
 800530a:	d020      	beq.n	800534e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0304 	and.w	r3, r3, #4
 8005314:	2b00      	cmp	r3, #0
 8005316:	d005      	beq.n	8005324 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005318:	4b59      	ldr	r3, [pc, #356]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	4a58      	ldr	r2, [pc, #352]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 800531e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005322:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0308 	and.w	r3, r3, #8
 800532c:	2b00      	cmp	r3, #0
 800532e:	d005      	beq.n	800533c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005330:	4b53      	ldr	r3, [pc, #332]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	4a52      	ldr	r2, [pc, #328]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 8005336:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800533a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800533c:	4b50      	ldr	r3, [pc, #320]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	494d      	ldr	r1, [pc, #308]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 800534a:	4313      	orrs	r3, r2
 800534c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 0301 	and.w	r3, r3, #1
 8005356:	2b00      	cmp	r3, #0
 8005358:	d044      	beq.n	80053e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	2b01      	cmp	r3, #1
 8005360:	d107      	bne.n	8005372 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005362:	4b47      	ldr	r3, [pc, #284]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d119      	bne.n	80053a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e07f      	b.n	8005472 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	2b02      	cmp	r3, #2
 8005378:	d003      	beq.n	8005382 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800537e:	2b03      	cmp	r3, #3
 8005380:	d107      	bne.n	8005392 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005382:	4b3f      	ldr	r3, [pc, #252]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d109      	bne.n	80053a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e06f      	b.n	8005472 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005392:	4b3b      	ldr	r3, [pc, #236]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0302 	and.w	r3, r3, #2
 800539a:	2b00      	cmp	r3, #0
 800539c:	d101      	bne.n	80053a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e067      	b.n	8005472 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053a2:	4b37      	ldr	r3, [pc, #220]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	f023 0203 	bic.w	r2, r3, #3
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	4934      	ldr	r1, [pc, #208]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 80053b0:	4313      	orrs	r3, r2
 80053b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053b4:	f7fd fb94 	bl	8002ae0 <HAL_GetTick>
 80053b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053ba:	e00a      	b.n	80053d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053bc:	f7fd fb90 	bl	8002ae0 <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d901      	bls.n	80053d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e04f      	b.n	8005472 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053d2:	4b2b      	ldr	r3, [pc, #172]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f003 020c 	and.w	r2, r3, #12
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d1eb      	bne.n	80053bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053e4:	4b25      	ldr	r3, [pc, #148]	; (800547c <HAL_RCC_ClockConfig+0x1b8>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 030f 	and.w	r3, r3, #15
 80053ec:	683a      	ldr	r2, [r7, #0]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d20c      	bcs.n	800540c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053f2:	4b22      	ldr	r3, [pc, #136]	; (800547c <HAL_RCC_ClockConfig+0x1b8>)
 80053f4:	683a      	ldr	r2, [r7, #0]
 80053f6:	b2d2      	uxtb	r2, r2
 80053f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053fa:	4b20      	ldr	r3, [pc, #128]	; (800547c <HAL_RCC_ClockConfig+0x1b8>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 030f 	and.w	r3, r3, #15
 8005402:	683a      	ldr	r2, [r7, #0]
 8005404:	429a      	cmp	r2, r3
 8005406:	d001      	beq.n	800540c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e032      	b.n	8005472 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0304 	and.w	r3, r3, #4
 8005414:	2b00      	cmp	r3, #0
 8005416:	d008      	beq.n	800542a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005418:	4b19      	ldr	r3, [pc, #100]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	4916      	ldr	r1, [pc, #88]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 8005426:	4313      	orrs	r3, r2
 8005428:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0308 	and.w	r3, r3, #8
 8005432:	2b00      	cmp	r3, #0
 8005434:	d009      	beq.n	800544a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005436:	4b12      	ldr	r3, [pc, #72]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	00db      	lsls	r3, r3, #3
 8005444:	490e      	ldr	r1, [pc, #56]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 8005446:	4313      	orrs	r3, r2
 8005448:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800544a:	f000 f821 	bl	8005490 <HAL_RCC_GetSysClockFreq>
 800544e:	4601      	mov	r1, r0
 8005450:	4b0b      	ldr	r3, [pc, #44]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	091b      	lsrs	r3, r3, #4
 8005456:	f003 030f 	and.w	r3, r3, #15
 800545a:	4a0a      	ldr	r2, [pc, #40]	; (8005484 <HAL_RCC_ClockConfig+0x1c0>)
 800545c:	5cd3      	ldrb	r3, [r2, r3]
 800545e:	fa21 f303 	lsr.w	r3, r1, r3
 8005462:	4a09      	ldr	r2, [pc, #36]	; (8005488 <HAL_RCC_ClockConfig+0x1c4>)
 8005464:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005466:	4b09      	ldr	r3, [pc, #36]	; (800548c <HAL_RCC_ClockConfig+0x1c8>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4618      	mov	r0, r3
 800546c:	f7fd faf4 	bl	8002a58 <HAL_InitTick>

  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3710      	adds	r7, #16
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	40023c00 	.word	0x40023c00
 8005480:	40023800 	.word	0x40023800
 8005484:	080118c8 	.word	0x080118c8
 8005488:	20000000 	.word	0x20000000
 800548c:	20000004 	.word	0x20000004

08005490 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005496:	2300      	movs	r3, #0
 8005498:	607b      	str	r3, [r7, #4]
 800549a:	2300      	movs	r3, #0
 800549c:	60fb      	str	r3, [r7, #12]
 800549e:	2300      	movs	r3, #0
 80054a0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80054a2:	2300      	movs	r3, #0
 80054a4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054a6:	4b50      	ldr	r3, [pc, #320]	; (80055e8 <HAL_RCC_GetSysClockFreq+0x158>)
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	f003 030c 	and.w	r3, r3, #12
 80054ae:	2b04      	cmp	r3, #4
 80054b0:	d007      	beq.n	80054c2 <HAL_RCC_GetSysClockFreq+0x32>
 80054b2:	2b08      	cmp	r3, #8
 80054b4:	d008      	beq.n	80054c8 <HAL_RCC_GetSysClockFreq+0x38>
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	f040 808d 	bne.w	80055d6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80054bc:	4b4b      	ldr	r3, [pc, #300]	; (80055ec <HAL_RCC_GetSysClockFreq+0x15c>)
 80054be:	60bb      	str	r3, [r7, #8]
       break;
 80054c0:	e08c      	b.n	80055dc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054c2:	4b4b      	ldr	r3, [pc, #300]	; (80055f0 <HAL_RCC_GetSysClockFreq+0x160>)
 80054c4:	60bb      	str	r3, [r7, #8]
      break;
 80054c6:	e089      	b.n	80055dc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054c8:	4b47      	ldr	r3, [pc, #284]	; (80055e8 <HAL_RCC_GetSysClockFreq+0x158>)
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054d0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054d2:	4b45      	ldr	r3, [pc, #276]	; (80055e8 <HAL_RCC_GetSysClockFreq+0x158>)
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d023      	beq.n	8005526 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054de:	4b42      	ldr	r3, [pc, #264]	; (80055e8 <HAL_RCC_GetSysClockFreq+0x158>)
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	099b      	lsrs	r3, r3, #6
 80054e4:	f04f 0400 	mov.w	r4, #0
 80054e8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80054ec:	f04f 0200 	mov.w	r2, #0
 80054f0:	ea03 0501 	and.w	r5, r3, r1
 80054f4:	ea04 0602 	and.w	r6, r4, r2
 80054f8:	4a3d      	ldr	r2, [pc, #244]	; (80055f0 <HAL_RCC_GetSysClockFreq+0x160>)
 80054fa:	fb02 f106 	mul.w	r1, r2, r6
 80054fe:	2200      	movs	r2, #0
 8005500:	fb02 f205 	mul.w	r2, r2, r5
 8005504:	440a      	add	r2, r1
 8005506:	493a      	ldr	r1, [pc, #232]	; (80055f0 <HAL_RCC_GetSysClockFreq+0x160>)
 8005508:	fba5 0101 	umull	r0, r1, r5, r1
 800550c:	1853      	adds	r3, r2, r1
 800550e:	4619      	mov	r1, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f04f 0400 	mov.w	r4, #0
 8005516:	461a      	mov	r2, r3
 8005518:	4623      	mov	r3, r4
 800551a:	f7fb fbb5 	bl	8000c88 <__aeabi_uldivmod>
 800551e:	4603      	mov	r3, r0
 8005520:	460c      	mov	r4, r1
 8005522:	60fb      	str	r3, [r7, #12]
 8005524:	e049      	b.n	80055ba <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005526:	4b30      	ldr	r3, [pc, #192]	; (80055e8 <HAL_RCC_GetSysClockFreq+0x158>)
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	099b      	lsrs	r3, r3, #6
 800552c:	f04f 0400 	mov.w	r4, #0
 8005530:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005534:	f04f 0200 	mov.w	r2, #0
 8005538:	ea03 0501 	and.w	r5, r3, r1
 800553c:	ea04 0602 	and.w	r6, r4, r2
 8005540:	4629      	mov	r1, r5
 8005542:	4632      	mov	r2, r6
 8005544:	f04f 0300 	mov.w	r3, #0
 8005548:	f04f 0400 	mov.w	r4, #0
 800554c:	0154      	lsls	r4, r2, #5
 800554e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005552:	014b      	lsls	r3, r1, #5
 8005554:	4619      	mov	r1, r3
 8005556:	4622      	mov	r2, r4
 8005558:	1b49      	subs	r1, r1, r5
 800555a:	eb62 0206 	sbc.w	r2, r2, r6
 800555e:	f04f 0300 	mov.w	r3, #0
 8005562:	f04f 0400 	mov.w	r4, #0
 8005566:	0194      	lsls	r4, r2, #6
 8005568:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800556c:	018b      	lsls	r3, r1, #6
 800556e:	1a5b      	subs	r3, r3, r1
 8005570:	eb64 0402 	sbc.w	r4, r4, r2
 8005574:	f04f 0100 	mov.w	r1, #0
 8005578:	f04f 0200 	mov.w	r2, #0
 800557c:	00e2      	lsls	r2, r4, #3
 800557e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005582:	00d9      	lsls	r1, r3, #3
 8005584:	460b      	mov	r3, r1
 8005586:	4614      	mov	r4, r2
 8005588:	195b      	adds	r3, r3, r5
 800558a:	eb44 0406 	adc.w	r4, r4, r6
 800558e:	f04f 0100 	mov.w	r1, #0
 8005592:	f04f 0200 	mov.w	r2, #0
 8005596:	02a2      	lsls	r2, r4, #10
 8005598:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800559c:	0299      	lsls	r1, r3, #10
 800559e:	460b      	mov	r3, r1
 80055a0:	4614      	mov	r4, r2
 80055a2:	4618      	mov	r0, r3
 80055a4:	4621      	mov	r1, r4
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f04f 0400 	mov.w	r4, #0
 80055ac:	461a      	mov	r2, r3
 80055ae:	4623      	mov	r3, r4
 80055b0:	f7fb fb6a 	bl	8000c88 <__aeabi_uldivmod>
 80055b4:	4603      	mov	r3, r0
 80055b6:	460c      	mov	r4, r1
 80055b8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80055ba:	4b0b      	ldr	r3, [pc, #44]	; (80055e8 <HAL_RCC_GetSysClockFreq+0x158>)
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	0c1b      	lsrs	r3, r3, #16
 80055c0:	f003 0303 	and.w	r3, r3, #3
 80055c4:	3301      	adds	r3, #1
 80055c6:	005b      	lsls	r3, r3, #1
 80055c8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80055ca:	68fa      	ldr	r2, [r7, #12]
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80055d2:	60bb      	str	r3, [r7, #8]
      break;
 80055d4:	e002      	b.n	80055dc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80055d6:	4b05      	ldr	r3, [pc, #20]	; (80055ec <HAL_RCC_GetSysClockFreq+0x15c>)
 80055d8:	60bb      	str	r3, [r7, #8]
      break;
 80055da:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055dc:	68bb      	ldr	r3, [r7, #8]
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3714      	adds	r7, #20
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055e6:	bf00      	nop
 80055e8:	40023800 	.word	0x40023800
 80055ec:	00f42400 	.word	0x00f42400
 80055f0:	00b71b00 	.word	0x00b71b00

080055f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055f4:	b480      	push	{r7}
 80055f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055f8:	4b03      	ldr	r3, [pc, #12]	; (8005608 <HAL_RCC_GetHCLKFreq+0x14>)
 80055fa:	681b      	ldr	r3, [r3, #0]
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop
 8005608:	20000000 	.word	0x20000000

0800560c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005610:	f7ff fff0 	bl	80055f4 <HAL_RCC_GetHCLKFreq>
 8005614:	4601      	mov	r1, r0
 8005616:	4b05      	ldr	r3, [pc, #20]	; (800562c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	0a9b      	lsrs	r3, r3, #10
 800561c:	f003 0307 	and.w	r3, r3, #7
 8005620:	4a03      	ldr	r2, [pc, #12]	; (8005630 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005622:	5cd3      	ldrb	r3, [r2, r3]
 8005624:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005628:	4618      	mov	r0, r3
 800562a:	bd80      	pop	{r7, pc}
 800562c:	40023800 	.word	0x40023800
 8005630:	080118d8 	.word	0x080118d8

08005634 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005638:	f7ff ffdc 	bl	80055f4 <HAL_RCC_GetHCLKFreq>
 800563c:	4601      	mov	r1, r0
 800563e:	4b05      	ldr	r3, [pc, #20]	; (8005654 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	0b5b      	lsrs	r3, r3, #13
 8005644:	f003 0307 	and.w	r3, r3, #7
 8005648:	4a03      	ldr	r2, [pc, #12]	; (8005658 <HAL_RCC_GetPCLK2Freq+0x24>)
 800564a:	5cd3      	ldrb	r3, [r2, r3]
 800564c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005650:	4618      	mov	r0, r3
 8005652:	bd80      	pop	{r7, pc}
 8005654:	40023800 	.word	0x40023800
 8005658:	080118d8 	.word	0x080118d8

0800565c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b086      	sub	sp, #24
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005664:	2300      	movs	r3, #0
 8005666:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005668:	2300      	movs	r3, #0
 800566a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0301 	and.w	r3, r3, #1
 8005674:	2b00      	cmp	r3, #0
 8005676:	d105      	bne.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005680:	2b00      	cmp	r3, #0
 8005682:	d035      	beq.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005684:	4b62      	ldr	r3, [pc, #392]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005686:	2200      	movs	r2, #0
 8005688:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800568a:	f7fd fa29 	bl	8002ae0 <HAL_GetTick>
 800568e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005690:	e008      	b.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005692:	f7fd fa25 	bl	8002ae0 <HAL_GetTick>
 8005696:	4602      	mov	r2, r0
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	2b02      	cmp	r3, #2
 800569e:	d901      	bls.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056a0:	2303      	movs	r3, #3
 80056a2:	e0b0      	b.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80056a4:	4b5b      	ldr	r3, [pc, #364]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d1f0      	bne.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	019a      	lsls	r2, r3, #6
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	071b      	lsls	r3, r3, #28
 80056bc:	4955      	ldr	r1, [pc, #340]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056be:	4313      	orrs	r3, r2
 80056c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80056c4:	4b52      	ldr	r3, [pc, #328]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80056c6:	2201      	movs	r2, #1
 80056c8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80056ca:	f7fd fa09 	bl	8002ae0 <HAL_GetTick>
 80056ce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80056d0:	e008      	b.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80056d2:	f7fd fa05 	bl	8002ae0 <HAL_GetTick>
 80056d6:	4602      	mov	r2, r0
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	2b02      	cmp	r3, #2
 80056de:	d901      	bls.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056e0:	2303      	movs	r3, #3
 80056e2:	e090      	b.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80056e4:	4b4b      	ldr	r3, [pc, #300]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d0f0      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 0302 	and.w	r3, r3, #2
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	f000 8083 	beq.w	8005804 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80056fe:	2300      	movs	r3, #0
 8005700:	60fb      	str	r3, [r7, #12]
 8005702:	4b44      	ldr	r3, [pc, #272]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005706:	4a43      	ldr	r2, [pc, #268]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800570c:	6413      	str	r3, [r2, #64]	; 0x40
 800570e:	4b41      	ldr	r3, [pc, #260]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005716:	60fb      	str	r3, [r7, #12]
 8005718:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800571a:	4b3f      	ldr	r3, [pc, #252]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a3e      	ldr	r2, [pc, #248]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005720:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005724:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005726:	f7fd f9db 	bl	8002ae0 <HAL_GetTick>
 800572a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800572c:	e008      	b.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800572e:	f7fd f9d7 	bl	8002ae0 <HAL_GetTick>
 8005732:	4602      	mov	r2, r0
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	2b02      	cmp	r3, #2
 800573a:	d901      	bls.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800573c:	2303      	movs	r3, #3
 800573e:	e062      	b.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005740:	4b35      	ldr	r3, [pc, #212]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005748:	2b00      	cmp	r3, #0
 800574a:	d0f0      	beq.n	800572e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800574c:	4b31      	ldr	r3, [pc, #196]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800574e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005750:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005754:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d02f      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	429a      	cmp	r2, r3
 8005768:	d028      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800576a:	4b2a      	ldr	r3, [pc, #168]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800576c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800576e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005772:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005774:	4b29      	ldr	r3, [pc, #164]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005776:	2201      	movs	r2, #1
 8005778:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800577a:	4b28      	ldr	r3, [pc, #160]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800577c:	2200      	movs	r2, #0
 800577e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005780:	4a24      	ldr	r2, [pc, #144]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005786:	4b23      	ldr	r3, [pc, #140]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800578a:	f003 0301 	and.w	r3, r3, #1
 800578e:	2b01      	cmp	r3, #1
 8005790:	d114      	bne.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005792:	f7fd f9a5 	bl	8002ae0 <HAL_GetTick>
 8005796:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005798:	e00a      	b.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800579a:	f7fd f9a1 	bl	8002ae0 <HAL_GetTick>
 800579e:	4602      	mov	r2, r0
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	1ad3      	subs	r3, r2, r3
 80057a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d901      	bls.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80057ac:	2303      	movs	r3, #3
 80057ae:	e02a      	b.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057b0:	4b18      	ldr	r3, [pc, #96]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057b4:	f003 0302 	and.w	r3, r3, #2
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d0ee      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057c8:	d10d      	bne.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80057ca:	4b12      	ldr	r3, [pc, #72]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80057da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057de:	490d      	ldr	r1, [pc, #52]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057e0:	4313      	orrs	r3, r2
 80057e2:	608b      	str	r3, [r1, #8]
 80057e4:	e005      	b.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80057e6:	4b0b      	ldr	r3, [pc, #44]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	4a0a      	ldr	r2, [pc, #40]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057ec:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80057f0:	6093      	str	r3, [r2, #8]
 80057f2:	4b08      	ldr	r3, [pc, #32]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057f4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057fe:	4905      	ldr	r1, [pc, #20]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005800:	4313      	orrs	r3, r2
 8005802:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3718      	adds	r7, #24
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
 800580e:	bf00      	nop
 8005810:	42470068 	.word	0x42470068
 8005814:	40023800 	.word	0x40023800
 8005818:	40007000 	.word	0x40007000
 800581c:	42470e40 	.word	0x42470e40

08005820 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b082      	sub	sp, #8
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d101      	bne.n	8005832 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e083      	b.n	800593a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	7f5b      	ldrb	r3, [r3, #29]
 8005836:	b2db      	uxtb	r3, r3
 8005838:	2b00      	cmp	r3, #0
 800583a:	d105      	bne.n	8005848 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f7fc fdf6 	bl	8002434 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2202      	movs	r2, #2
 800584c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	22ca      	movs	r2, #202	; 0xca
 8005854:	625a      	str	r2, [r3, #36]	; 0x24
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2253      	movs	r2, #83	; 0x53
 800585c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 f9fb 	bl	8005c5a <RTC_EnterInitMode>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d008      	beq.n	800587c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	22ff      	movs	r2, #255	; 0xff
 8005870:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2204      	movs	r2, #4
 8005876:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e05e      	b.n	800593a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	6812      	ldr	r2, [r2, #0]
 8005886:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800588a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800588e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	6899      	ldr	r1, [r3, #8]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	685a      	ldr	r2, [r3, #4]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	431a      	orrs	r2, r3
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	695b      	ldr	r3, [r3, #20]
 80058a4:	431a      	orrs	r2, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	430a      	orrs	r2, r1
 80058ac:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	68d2      	ldr	r2, [r2, #12]
 80058b6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	6919      	ldr	r1, [r3, #16]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	041a      	lsls	r2, r3, #16
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	430a      	orrs	r2, r1
 80058ca:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68da      	ldr	r2, [r3, #12]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058da:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	f003 0320 	and.w	r3, r3, #32
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d10e      	bne.n	8005908 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 f98d 	bl	8005c0a <HAL_RTC_WaitForSynchro>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d008      	beq.n	8005908 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	22ff      	movs	r2, #255	; 0xff
 80058fc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2204      	movs	r2, #4
 8005902:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e018      	b.n	800593a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005916:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	699a      	ldr	r2, [r3, #24]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	430a      	orrs	r2, r1
 8005928:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	22ff      	movs	r2, #255	; 0xff
 8005930:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2201      	movs	r2, #1
 8005936:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005938:	2300      	movs	r3, #0
  }
}
 800593a:	4618      	mov	r0, r3
 800593c:	3708      	adds	r7, #8
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}

08005942 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005942:	b590      	push	{r4, r7, lr}
 8005944:	b087      	sub	sp, #28
 8005946:	af00      	add	r7, sp, #0
 8005948:	60f8      	str	r0, [r7, #12]
 800594a:	60b9      	str	r1, [r7, #8]
 800594c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800594e:	2300      	movs	r3, #0
 8005950:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	7f1b      	ldrb	r3, [r3, #28]
 8005956:	2b01      	cmp	r3, #1
 8005958:	d101      	bne.n	800595e <HAL_RTC_SetTime+0x1c>
 800595a:	2302      	movs	r3, #2
 800595c:	e0aa      	b.n	8005ab4 <HAL_RTC_SetTime+0x172>
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2201      	movs	r2, #1
 8005962:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2202      	movs	r2, #2
 8005968:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d126      	bne.n	80059be <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800597a:	2b00      	cmp	r3, #0
 800597c:	d102      	bne.n	8005984 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	2200      	movs	r2, #0
 8005982:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	4618      	mov	r0, r3
 800598a:	f000 f992 	bl	8005cb2 <RTC_ByteToBcd2>
 800598e:	4603      	mov	r3, r0
 8005990:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	785b      	ldrb	r3, [r3, #1]
 8005996:	4618      	mov	r0, r3
 8005998:	f000 f98b 	bl	8005cb2 <RTC_ByteToBcd2>
 800599c:	4603      	mov	r3, r0
 800599e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80059a0:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	789b      	ldrb	r3, [r3, #2]
 80059a6:	4618      	mov	r0, r3
 80059a8:	f000 f983 	bl	8005cb2 <RTC_ByteToBcd2>
 80059ac:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80059ae:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	78db      	ldrb	r3, [r3, #3]
 80059b6:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80059b8:	4313      	orrs	r3, r2
 80059ba:	617b      	str	r3, [r7, #20]
 80059bc:	e018      	b.n	80059f0 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d102      	bne.n	80059d2 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	2200      	movs	r2, #0
 80059d0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	785b      	ldrb	r3, [r3, #1]
 80059dc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80059de:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80059e0:	68ba      	ldr	r2, [r7, #8]
 80059e2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80059e4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	78db      	ldrb	r3, [r3, #3]
 80059ea:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80059ec:	4313      	orrs	r3, r2
 80059ee:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	22ca      	movs	r2, #202	; 0xca
 80059f6:	625a      	str	r2, [r3, #36]	; 0x24
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2253      	movs	r2, #83	; 0x53
 80059fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005a00:	68f8      	ldr	r0, [r7, #12]
 8005a02:	f000 f92a 	bl	8005c5a <RTC_EnterInitMode>
 8005a06:	4603      	mov	r3, r0
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d00b      	beq.n	8005a24 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	22ff      	movs	r2, #255	; 0xff
 8005a12:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2204      	movs	r2, #4
 8005a18:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e047      	b.n	8005ab4 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005a2e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005a32:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	689a      	ldr	r2, [r3, #8]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005a42:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	6899      	ldr	r1, [r3, #8]
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	68da      	ldr	r2, [r3, #12]
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	431a      	orrs	r2, r3
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	430a      	orrs	r2, r1
 8005a5a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68da      	ldr	r2, [r3, #12]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a6a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	f003 0320 	and.w	r3, r3, #32
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d111      	bne.n	8005a9e <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005a7a:	68f8      	ldr	r0, [r7, #12]
 8005a7c:	f000 f8c5 	bl	8005c0a <HAL_RTC_WaitForSynchro>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d00b      	beq.n	8005a9e <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	22ff      	movs	r2, #255	; 0xff
 8005a8c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2204      	movs	r2, #4
 8005a92:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2200      	movs	r2, #0
 8005a98:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e00a      	b.n	8005ab4 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	22ff      	movs	r2, #255	; 0xff
 8005aa4:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8005ab2:	2300      	movs	r3, #0
  }
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	371c      	adds	r7, #28
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd90      	pop	{r4, r7, pc}

08005abc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005abc:	b590      	push	{r4, r7, lr}
 8005abe:	b087      	sub	sp, #28
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	7f1b      	ldrb	r3, [r3, #28]
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d101      	bne.n	8005ad8 <HAL_RTC_SetDate+0x1c>
 8005ad4:	2302      	movs	r3, #2
 8005ad6:	e094      	b.n	8005c02 <HAL_RTC_SetDate+0x146>
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2201      	movs	r2, #1
 8005adc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2202      	movs	r2, #2
 8005ae2:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d10e      	bne.n	8005b08 <HAL_RTC_SetDate+0x4c>
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	785b      	ldrb	r3, [r3, #1]
 8005aee:	f003 0310 	and.w	r3, r3, #16
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d008      	beq.n	8005b08 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	785b      	ldrb	r3, [r3, #1]
 8005afa:	f023 0310 	bic.w	r3, r3, #16
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	330a      	adds	r3, #10
 8005b02:	b2da      	uxtb	r2, r3
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d11c      	bne.n	8005b48 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	78db      	ldrb	r3, [r3, #3]
 8005b12:	4618      	mov	r0, r3
 8005b14:	f000 f8cd 	bl	8005cb2 <RTC_ByteToBcd2>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	785b      	ldrb	r3, [r3, #1]
 8005b20:	4618      	mov	r0, r3
 8005b22:	f000 f8c6 	bl	8005cb2 <RTC_ByteToBcd2>
 8005b26:	4603      	mov	r3, r0
 8005b28:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005b2a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	789b      	ldrb	r3, [r3, #2]
 8005b30:	4618      	mov	r0, r3
 8005b32:	f000 f8be 	bl	8005cb2 <RTC_ByteToBcd2>
 8005b36:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005b38:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005b42:	4313      	orrs	r3, r2
 8005b44:	617b      	str	r3, [r7, #20]
 8005b46:	e00e      	b.n	8005b66 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	78db      	ldrb	r3, [r3, #3]
 8005b4c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	785b      	ldrb	r3, [r3, #1]
 8005b52:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005b54:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005b56:	68ba      	ldr	r2, [r7, #8]
 8005b58:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8005b5a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005b62:	4313      	orrs	r3, r2
 8005b64:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	22ca      	movs	r2, #202	; 0xca
 8005b6c:	625a      	str	r2, [r3, #36]	; 0x24
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	2253      	movs	r2, #83	; 0x53
 8005b74:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005b76:	68f8      	ldr	r0, [r7, #12]
 8005b78:	f000 f86f 	bl	8005c5a <RTC_EnterInitMode>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00b      	beq.n	8005b9a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	22ff      	movs	r2, #255	; 0xff
 8005b88:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2204      	movs	r2, #4
 8005b8e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2200      	movs	r2, #0
 8005b94:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e033      	b.n	8005c02 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005ba4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005ba8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68da      	ldr	r2, [r3, #12]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005bb8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	f003 0320 	and.w	r3, r3, #32
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d111      	bne.n	8005bec <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005bc8:	68f8      	ldr	r0, [r7, #12]
 8005bca:	f000 f81e 	bl	8005c0a <HAL_RTC_WaitForSynchro>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d00b      	beq.n	8005bec <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	22ff      	movs	r2, #255	; 0xff
 8005bda:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2204      	movs	r2, #4
 8005be0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e00a      	b.n	8005c02 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	22ff      	movs	r2, #255	; 0xff
 8005bf2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005c00:	2300      	movs	r3, #0
  }
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	371c      	adds	r7, #28
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd90      	pop	{r4, r7, pc}

08005c0a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005c0a:	b580      	push	{r7, lr}
 8005c0c:	b084      	sub	sp, #16
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c12:	2300      	movs	r3, #0
 8005c14:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68da      	ldr	r2, [r3, #12]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005c24:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005c26:	f7fc ff5b 	bl	8002ae0 <HAL_GetTick>
 8005c2a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005c2c:	e009      	b.n	8005c42 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005c2e:	f7fc ff57 	bl	8002ae0 <HAL_GetTick>
 8005c32:	4602      	mov	r2, r0
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c3c:	d901      	bls.n	8005c42 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e007      	b.n	8005c52 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	f003 0320 	and.w	r3, r3, #32
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d0ee      	beq.n	8005c2e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3710      	adds	r7, #16
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}

08005c5a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005c5a:	b580      	push	{r7, lr}
 8005c5c:	b084      	sub	sp, #16
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c62:	2300      	movs	r3, #0
 8005c64:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d119      	bne.n	8005ca8 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f04f 32ff 	mov.w	r2, #4294967295
 8005c7c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005c7e:	f7fc ff2f 	bl	8002ae0 <HAL_GetTick>
 8005c82:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005c84:	e009      	b.n	8005c9a <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005c86:	f7fc ff2b 	bl	8002ae0 <HAL_GetTick>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c94:	d901      	bls.n	8005c9a <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	e007      	b.n	8005caa <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d0ee      	beq.n	8005c86 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005ca8:	2300      	movs	r3, #0
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3710      	adds	r7, #16
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}

08005cb2 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005cb2:	b480      	push	{r7}
 8005cb4:	b085      	sub	sp, #20
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	4603      	mov	r3, r0
 8005cba:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8005cc0:	e005      	b.n	8005cce <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8005cc8:	79fb      	ldrb	r3, [r7, #7]
 8005cca:	3b0a      	subs	r3, #10
 8005ccc:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8005cce:	79fb      	ldrb	r3, [r7, #7]
 8005cd0:	2b09      	cmp	r3, #9
 8005cd2:	d8f6      	bhi.n	8005cc2 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	011b      	lsls	r3, r3, #4
 8005cda:	b2da      	uxtb	r2, r3
 8005cdc:	79fb      	ldrb	r3, [r7, #7]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	b2db      	uxtb	r3, r3
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3714      	adds	r7, #20
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr

08005cee <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005cee:	b580      	push	{r7, lr}
 8005cf0:	b082      	sub	sp, #8
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d101      	bne.n	8005d00 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e022      	b.n	8005d46 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d105      	bne.n	8005d18 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f7fc fba4 	bl	8002460 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2203      	movs	r2, #3
 8005d1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f000 f815 	bl	8005d50 <HAL_SD_InitCard>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d001      	beq.n	8005d30 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e00a      	b.n	8005d46 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3708      	adds	r7, #8
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
	...

08005d50 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005d50:	b5b0      	push	{r4, r5, r7, lr}
 8005d52:	b08e      	sub	sp, #56	; 0x38
 8005d54:	af04      	add	r7, sp, #16
 8005d56:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005d60:	2300      	movs	r3, #0
 8005d62:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8005d64:	2300      	movs	r3, #0
 8005d66:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8005d6c:	2376      	movs	r3, #118	; 0x76
 8005d6e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681d      	ldr	r5, [r3, #0]
 8005d74:	466c      	mov	r4, sp
 8005d76:	f107 0314 	add.w	r3, r7, #20
 8005d7a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005d7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005d82:	f107 0308 	add.w	r3, r7, #8
 8005d86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005d88:	4628      	mov	r0, r5
 8005d8a:	f003 f937 	bl	8008ffc <SDIO_Init>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8005d94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d001      	beq.n	8005da0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e031      	b.n	8005e04 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8005da0:	4b1a      	ldr	r3, [pc, #104]	; (8005e0c <HAL_SD_InitCard+0xbc>)
 8005da2:	2200      	movs	r2, #0
 8005da4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4618      	mov	r0, r3
 8005dac:	f003 f96f 	bl	800908e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8005db0:	4b16      	ldr	r3, [pc, #88]	; (8005e0c <HAL_SD_InitCard+0xbc>)
 8005db2:	2201      	movs	r2, #1
 8005db4:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 fffa 	bl	8006db0 <SD_PowerON>
 8005dbc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005dbe:	6a3b      	ldr	r3, [r7, #32]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00b      	beq.n	8005ddc <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dd0:	6a3b      	ldr	r3, [r7, #32]
 8005dd2:	431a      	orrs	r2, r3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e013      	b.n	8005e04 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f000 ff19 	bl	8006c14 <SD_InitCard>
 8005de2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005de4:	6a3b      	ldr	r3, [r7, #32]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d00b      	beq.n	8005e02 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2201      	movs	r2, #1
 8005dee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005df6:	6a3b      	ldr	r3, [r7, #32]
 8005df8:	431a      	orrs	r2, r3
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e000      	b.n	8005e04 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3728      	adds	r7, #40	; 0x28
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bdb0      	pop	{r4, r5, r7, pc}
 8005e0c:	422580a0 	.word	0x422580a0

08005e10 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b08c      	sub	sp, #48	; 0x30
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	60b9      	str	r1, [r7, #8]
 8005e1a:	607a      	str	r2, [r7, #4]
 8005e1c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d107      	bne.n	8005e38 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e2c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	e0c9      	b.n	8005fcc <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	f040 80c2 	bne.w	8005fca <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005e4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	441a      	add	r2, r3
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d907      	bls.n	8005e6a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e5e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	e0b0      	b.n	8005fcc <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2203      	movs	r2, #3
 8005e6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2200      	movs	r2, #0
 8005e78:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	6812      	ldr	r2, [r2, #0]
 8005e84:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8005e88:	f043 0302 	orr.w	r3, r3, #2
 8005e8c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e92:	4a50      	ldr	r2, [pc, #320]	; (8005fd4 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 8005e94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9a:	4a4f      	ldr	r2, [pc, #316]	; (8005fd8 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8005e9c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	3380      	adds	r3, #128	; 0x80
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	68ba      	ldr	r2, [r7, #8]
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	025b      	lsls	r3, r3, #9
 8005eb8:	089b      	lsrs	r3, r3, #2
 8005eba:	f7fc ffff 	bl	8002ebc <HAL_DMA_Start_IT>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d017      	beq.n	8005ef4 <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8005ed2:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a40      	ldr	r2, [pc, #256]	; (8005fdc <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8005eda:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e06b      	b.n	8005fcc <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8005ef4:	4b3a      	ldr	r3, [pc, #232]	; (8005fe0 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d002      	beq.n	8005f08 <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 8005f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f04:	025b      	lsls	r3, r3, #9
 8005f06:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005f10:	4618      	mov	r0, r3
 8005f12:	f003 f94f 	bl	80091b4 <SDMMC_CmdBlockLength>
 8005f16:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8005f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00f      	beq.n	8005f3e <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a2e      	ldr	r2, [pc, #184]	; (8005fdc <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8005f24:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f2c:	431a      	orrs	r2, r3
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2201      	movs	r2, #1
 8005f36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e046      	b.n	8005fcc <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8005f42:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	025b      	lsls	r3, r3, #9
 8005f48:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005f4a:	2390      	movs	r3, #144	; 0x90
 8005f4c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005f4e:	2302      	movs	r3, #2
 8005f50:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005f52:	2300      	movs	r3, #0
 8005f54:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8005f56:	2301      	movs	r3, #1
 8005f58:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f107 0210 	add.w	r2, r7, #16
 8005f62:	4611      	mov	r1, r2
 8005f64:	4618      	mov	r0, r3
 8005f66:	f003 f8f9 	bl	800915c <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d90a      	bls.n	8005f86 <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2282      	movs	r2, #130	; 0x82
 8005f74:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f003 f95d 	bl	800923c <SDMMC_CmdReadMultiBlock>
 8005f82:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005f84:	e009      	b.n	8005f9a <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2281      	movs	r2, #129	; 0x81
 8005f8a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f92:	4618      	mov	r0, r3
 8005f94:	f003 f930 	bl	80091f8 <SDMMC_CmdReadSingleBlock>
 8005f98:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8005f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d012      	beq.n	8005fc6 <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a0d      	ldr	r2, [pc, #52]	; (8005fdc <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8005fa6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fae:	431a      	orrs	r2, r3
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e002      	b.n	8005fcc <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	e000      	b.n	8005fcc <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 8005fca:	2302      	movs	r3, #2
  }
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3730      	adds	r7, #48	; 0x30
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	08006a23 	.word	0x08006a23
 8005fd8:	08006a95 	.word	0x08006a95
 8005fdc:	004005ff 	.word	0x004005ff
 8005fe0:	4225858c 	.word	0x4225858c

08005fe4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b08c      	sub	sp, #48	; 0x30
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	607a      	str	r2, [r7, #4]
 8005ff0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d107      	bne.n	800600c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006000:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	e0ce      	b.n	80061aa <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006012:	b2db      	uxtb	r3, r3
 8006014:	2b01      	cmp	r3, #1
 8006016:	f040 80c7 	bne.w	80061a8 <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2200      	movs	r2, #0
 800601e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006020:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	441a      	add	r2, r3
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800602a:	429a      	cmp	r2, r3
 800602c:	d907      	bls.n	800603e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006032:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e0b5      	b.n	80061aa <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2203      	movs	r2, #3
 8006042:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	2200      	movs	r2, #0
 800604c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	6812      	ldr	r2, [r2, #0]
 8006058:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 800605c:	f043 0302 	orr.w	r3, r3, #2
 8006060:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006066:	4a53      	ldr	r2, [pc, #332]	; (80061b4 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8006068:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800606e:	4a52      	ldr	r2, [pc, #328]	; (80061b8 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8006070:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006076:	2200      	movs	r2, #0
 8006078:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800607e:	2b01      	cmp	r3, #1
 8006080:	d002      	beq.n	8006088 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8006082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006084:	025b      	lsls	r3, r3, #9
 8006086:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006090:	4618      	mov	r0, r3
 8006092:	f003 f88f 	bl	80091b4 <SDMMC_CmdBlockLength>
 8006096:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800609a:	2b00      	cmp	r3, #0
 800609c:	d00f      	beq.n	80060be <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a46      	ldr	r2, [pc, #280]	; (80061bc <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80060a4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ac:	431a      	orrs	r2, r3
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2201      	movs	r2, #1
 80060b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e075      	b.n	80061aa <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d90a      	bls.n	80060da <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	22a0      	movs	r2, #160	; 0xa0
 80060c8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060d0:	4618      	mov	r0, r3
 80060d2:	f003 f8f7 	bl	80092c4 <SDMMC_CmdWriteMultiBlock>
 80060d6:	62f8      	str	r0, [r7, #44]	; 0x2c
 80060d8:	e009      	b.n	80060ee <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2290      	movs	r2, #144	; 0x90
 80060de:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060e6:	4618      	mov	r0, r3
 80060e8:	f003 f8ca 	bl	8009280 <SDMMC_CmdWriteSingleBlock>
 80060ec:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80060ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d012      	beq.n	800611a <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a30      	ldr	r2, [pc, #192]	; (80061bc <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80060fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006102:	431a      	orrs	r2, r3
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2200      	movs	r2, #0
 8006114:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	e047      	b.n	80061aa <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800611a:	4b29      	ldr	r3, [pc, #164]	; (80061c0 <HAL_SD_WriteBlocks_DMA+0x1dc>)
 800611c:	2201      	movs	r2, #1
 800611e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006124:	68b9      	ldr	r1, [r7, #8]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	3380      	adds	r3, #128	; 0x80
 800612c:	461a      	mov	r2, r3
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	025b      	lsls	r3, r3, #9
 8006132:	089b      	lsrs	r3, r3, #2
 8006134:	f7fc fec2 	bl	8002ebc <HAL_DMA_Start_IT>
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d01c      	beq.n	8006178 <HAL_SD_WriteBlocks_DMA+0x194>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	6812      	ldr	r2, [r2, #0]
 8006148:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 800614c:	f023 0302 	bic.w	r3, r3, #2
 8006150:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a19      	ldr	r2, [pc, #100]	; (80061bc <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8006158:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800615e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2201      	movs	r2, #1
 800616a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2200      	movs	r2, #0
 8006172:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	e018      	b.n	80061aa <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006178:	f04f 33ff 	mov.w	r3, #4294967295
 800617c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	025b      	lsls	r3, r3, #9
 8006182:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006184:	2390      	movs	r3, #144	; 0x90
 8006186:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8006188:	2300      	movs	r3, #0
 800618a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800618c:	2300      	movs	r3, #0
 800618e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8006190:	2301      	movs	r3, #1
 8006192:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f107 0210 	add.w	r2, r7, #16
 800619c:	4611      	mov	r1, r2
 800619e:	4618      	mov	r0, r3
 80061a0:	f002 ffdc 	bl	800915c <SDIO_ConfigData>

      return HAL_OK;
 80061a4:	2300      	movs	r3, #0
 80061a6:	e000      	b.n	80061aa <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 80061a8:	2302      	movs	r3, #2
  }
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3730      	adds	r7, #48	; 0x30
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	080069f9 	.word	0x080069f9
 80061b8:	08006a95 	.word	0x08006a95
 80061bc:	004005ff 	.word	0x004005ff
 80061c0:	4225858c 	.word	0x4225858c

080061c4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d0:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d008      	beq.n	80061f2 <HAL_SD_IRQHandler+0x2e>
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f003 0308 	and.w	r3, r3, #8
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d003      	beq.n	80061f2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 fff6 	bl	80071dc <SD_Read_IT>
 80061f0:	e165      	b.n	80064be <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	f000 808f 	beq.w	8006320 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f44f 7280 	mov.w	r2, #256	; 0x100
 800620a:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	6812      	ldr	r2, [r2, #0]
 8006216:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800621a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800621e:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f022 0201 	bic.w	r2, r2, #1
 800622e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f003 0308 	and.w	r3, r3, #8
 8006236:	2b00      	cmp	r3, #0
 8006238:	d039      	beq.n	80062ae <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f003 0302 	and.w	r3, r3, #2
 8006240:	2b00      	cmp	r3, #0
 8006242:	d104      	bne.n	800624e <HAL_SD_IRQHandler+0x8a>
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f003 0320 	and.w	r3, r3, #32
 800624a:	2b00      	cmp	r3, #0
 800624c:	d011      	beq.n	8006272 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4618      	mov	r0, r3
 8006254:	f003 f858 	bl	8009308 <SDMMC_CmdStopTransfer>
 8006258:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d008      	beq.n	8006272 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	431a      	orrs	r2, r3
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f000 f943 	bl	80064f8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f240 523a 	movw	r2, #1338	; 0x53a
 800627a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f003 0301 	and.w	r3, r3, #1
 8006290:	2b00      	cmp	r3, #0
 8006292:	d104      	bne.n	800629e <HAL_SD_IRQHandler+0xda>
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f003 0302 	and.w	r3, r3, #2
 800629a:	2b00      	cmp	r3, #0
 800629c:	d003      	beq.n	80062a6 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 f920 	bl	80064e4 <HAL_SD_RxCpltCallback>
 80062a4:	e10b      	b.n	80064be <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 f912 	bl	80064d0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80062ac:	e107      	b.n	80064be <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	f000 8102 	beq.w	80064be <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f003 0320 	and.w	r3, r3, #32
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d011      	beq.n	80062e8 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4618      	mov	r0, r3
 80062ca:	f003 f81d 	bl	8009308 <SDMMC_CmdStopTransfer>
 80062ce:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d008      	beq.n	80062e8 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	431a      	orrs	r2, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 f908 	bl	80064f8 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f003 0301 	and.w	r3, r3, #1
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	f040 80e5 	bne.w	80064be <HAL_SD_IRQHandler+0x2fa>
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f003 0302 	and.w	r3, r3, #2
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	f040 80df 	bne.w	80064be <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f022 0208 	bic.w	r2, r2, #8
 800630e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2201      	movs	r2, #1
 8006314:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f000 f8d9 	bl	80064d0 <HAL_SD_TxCpltCallback>
}
 800631e:	e0ce      	b.n	80064be <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800632a:	2b00      	cmp	r3, #0
 800632c:	d008      	beq.n	8006340 <HAL_SD_IRQHandler+0x17c>
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f003 0308 	and.w	r3, r3, #8
 8006334:	2b00      	cmp	r3, #0
 8006336:	d003      	beq.n	8006340 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 ffa0 	bl	800727e <SD_Write_IT>
 800633e:	e0be      	b.n	80064be <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006346:	f240 233a 	movw	r3, #570	; 0x23a
 800634a:	4013      	ands	r3, r2
 800634c:	2b00      	cmp	r3, #0
 800634e:	f000 80b6 	beq.w	80064be <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006358:	f003 0302 	and.w	r3, r3, #2
 800635c:	2b00      	cmp	r3, #0
 800635e:	d005      	beq.n	800636c <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006364:	f043 0202 	orr.w	r2, r3, #2
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006372:	f003 0308 	and.w	r3, r3, #8
 8006376:	2b00      	cmp	r3, #0
 8006378:	d005      	beq.n	8006386 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800637e:	f043 0208 	orr.w	r2, r3, #8
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800638c:	f003 0320 	and.w	r3, r3, #32
 8006390:	2b00      	cmp	r3, #0
 8006392:	d005      	beq.n	80063a0 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006398:	f043 0220 	orr.w	r2, r3, #32
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063a6:	f003 0310 	and.w	r3, r3, #16
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d005      	beq.n	80063ba <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b2:	f043 0210 	orr.w	r2, r3, #16
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d005      	beq.n	80063d4 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063cc:	f043 0208 	orr.w	r2, r3, #8
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f240 723a 	movw	r2, #1850	; 0x73a
 80063dc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	6812      	ldr	r2, [r2, #0]
 80063e8:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 80063ec:	f023 0302 	bic.w	r3, r3, #2
 80063f0:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4618      	mov	r0, r3
 80063f8:	f002 ff86 	bl	8009308 <SDMMC_CmdStopTransfer>
 80063fc:	4602      	mov	r2, r0
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006402:	431a      	orrs	r2, r3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f003 0308 	and.w	r3, r3, #8
 800640e:	2b00      	cmp	r3, #0
 8006410:	d00a      	beq.n	8006428 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2201      	movs	r2, #1
 8006416:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f000 f869 	bl	80064f8 <HAL_SD_ErrorCallback>
}
 8006426:	e04a      	b.n	80064be <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800642e:	2b00      	cmp	r3, #0
 8006430:	d045      	beq.n	80064be <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f003 0310 	and.w	r3, r3, #16
 8006438:	2b00      	cmp	r3, #0
 800643a:	d104      	bne.n	8006446 <HAL_SD_IRQHandler+0x282>
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f003 0320 	and.w	r3, r3, #32
 8006442:	2b00      	cmp	r3, #0
 8006444:	d011      	beq.n	800646a <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800644a:	4a1f      	ldr	r2, [pc, #124]	; (80064c8 <HAL_SD_IRQHandler+0x304>)
 800644c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006452:	4618      	mov	r0, r3
 8006454:	f7fc fd8a 	bl	8002f6c <HAL_DMA_Abort_IT>
 8006458:	4603      	mov	r3, r0
 800645a:	2b00      	cmp	r3, #0
 800645c:	d02f      	beq.n	80064be <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006462:	4618      	mov	r0, r3
 8006464:	f000 fb68 	bl	8006b38 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006468:	e029      	b.n	80064be <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f003 0301 	and.w	r3, r3, #1
 8006470:	2b00      	cmp	r3, #0
 8006472:	d104      	bne.n	800647e <HAL_SD_IRQHandler+0x2ba>
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f003 0302 	and.w	r3, r3, #2
 800647a:	2b00      	cmp	r3, #0
 800647c:	d011      	beq.n	80064a2 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006482:	4a12      	ldr	r2, [pc, #72]	; (80064cc <HAL_SD_IRQHandler+0x308>)
 8006484:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648a:	4618      	mov	r0, r3
 800648c:	f7fc fd6e 	bl	8002f6c <HAL_DMA_Abort_IT>
 8006490:	4603      	mov	r3, r0
 8006492:	2b00      	cmp	r3, #0
 8006494:	d013      	beq.n	80064be <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800649a:	4618      	mov	r0, r3
 800649c:	f000 fb83 	bl	8006ba6 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80064a0:	e00d      	b.n	80064be <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 f828 	bl	800650c <HAL_SD_AbortCallback>
}
 80064bc:	e7ff      	b.n	80064be <HAL_SD_IRQHandler+0x2fa>
 80064be:	bf00      	nop
 80064c0:	3710      	adds	r7, #16
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	08006b39 	.word	0x08006b39
 80064cc:	08006ba7 	.word	0x08006ba7

080064d0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: Pointer to SD handle
  * @retval None
  */
__weak void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b083      	sub	sp, #12
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_TxCpltCallback can be implemented in the user file
   */
}
 80064d8:	bf00      	nop
 80064da:	370c      	adds	r7, #12
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr

080064e4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_RxCpltCallback can be implemented in the user file
   */
}
 80064ec:	bf00      	nop
 80064ee:	370c      	adds	r7, #12
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b083      	sub	sp, #12
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006500:	bf00      	nop
 8006502:	370c      	adds	r7, #12
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_AbortCallback can be implemented in the user file
   */
}
 8006514:	bf00      	nop
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006520:	b480      	push	{r7}
 8006522:	b083      	sub	sp, #12
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800652e:	0f9b      	lsrs	r3, r3, #30
 8006530:	b2da      	uxtb	r2, r3
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800653a:	0e9b      	lsrs	r3, r3, #26
 800653c:	b2db      	uxtb	r3, r3
 800653e:	f003 030f 	and.w	r3, r3, #15
 8006542:	b2da      	uxtb	r2, r3
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800654c:	0e1b      	lsrs	r3, r3, #24
 800654e:	b2db      	uxtb	r3, r3
 8006550:	f003 0303 	and.w	r3, r3, #3
 8006554:	b2da      	uxtb	r2, r3
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800655e:	0c1b      	lsrs	r3, r3, #16
 8006560:	b2da      	uxtb	r2, r3
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800656a:	0a1b      	lsrs	r3, r3, #8
 800656c:	b2da      	uxtb	r2, r3
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006576:	b2da      	uxtb	r2, r3
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006580:	0d1b      	lsrs	r3, r3, #20
 8006582:	b29a      	uxth	r2, r3
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800658c:	0c1b      	lsrs	r3, r3, #16
 800658e:	b2db      	uxtb	r3, r3
 8006590:	f003 030f 	and.w	r3, r3, #15
 8006594:	b2da      	uxtb	r2, r3
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800659e:	0bdb      	lsrs	r3, r3, #15
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	f003 0301 	and.w	r3, r3, #1
 80065a6:	b2da      	uxtb	r2, r3
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065b0:	0b9b      	lsrs	r3, r3, #14
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	f003 0301 	and.w	r3, r3, #1
 80065b8:	b2da      	uxtb	r2, r3
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065c2:	0b5b      	lsrs	r3, r3, #13
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	f003 0301 	and.w	r3, r3, #1
 80065ca:	b2da      	uxtb	r2, r3
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065d4:	0b1b      	lsrs	r3, r3, #12
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	f003 0301 	and.w	r3, r3, #1
 80065dc:	b2da      	uxtb	r2, r3
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	2200      	movs	r2, #0
 80065e6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d163      	bne.n	80066b8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065f4:	009a      	lsls	r2, r3, #2
 80065f6:	f640 73fc 	movw	r3, #4092	; 0xffc
 80065fa:	4013      	ands	r3, r2
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006600:	0f92      	lsrs	r2, r2, #30
 8006602:	431a      	orrs	r2, r3
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800660c:	0edb      	lsrs	r3, r3, #27
 800660e:	b2db      	uxtb	r3, r3
 8006610:	f003 0307 	and.w	r3, r3, #7
 8006614:	b2da      	uxtb	r2, r3
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800661e:	0e1b      	lsrs	r3, r3, #24
 8006620:	b2db      	uxtb	r3, r3
 8006622:	f003 0307 	and.w	r3, r3, #7
 8006626:	b2da      	uxtb	r2, r3
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006630:	0d5b      	lsrs	r3, r3, #21
 8006632:	b2db      	uxtb	r3, r3
 8006634:	f003 0307 	and.w	r3, r3, #7
 8006638:	b2da      	uxtb	r2, r3
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006642:	0c9b      	lsrs	r3, r3, #18
 8006644:	b2db      	uxtb	r3, r3
 8006646:	f003 0307 	and.w	r3, r3, #7
 800664a:	b2da      	uxtb	r2, r3
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006654:	0bdb      	lsrs	r3, r3, #15
 8006656:	b2db      	uxtb	r3, r3
 8006658:	f003 0307 	and.w	r3, r3, #7
 800665c:	b2da      	uxtb	r2, r3
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	1c5a      	adds	r2, r3, #1
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	7e1b      	ldrb	r3, [r3, #24]
 8006670:	b2db      	uxtb	r3, r3
 8006672:	f003 0307 	and.w	r3, r3, #7
 8006676:	3302      	adds	r3, #2
 8006678:	2201      	movs	r2, #1
 800667a:	fa02 f303 	lsl.w	r3, r2, r3
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006682:	fb02 f203 	mul.w	r2, r2, r3
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	7a1b      	ldrb	r3, [r3, #8]
 800668e:	b2db      	uxtb	r3, r3
 8006690:	f003 030f 	and.w	r3, r3, #15
 8006694:	2201      	movs	r2, #1
 8006696:	409a      	lsls	r2, r3
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80066a4:	0a52      	lsrs	r2, r2, #9
 80066a6:	fb02 f203 	mul.w	r2, r2, r3
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066b4:	661a      	str	r2, [r3, #96]	; 0x60
 80066b6:	e031      	b.n	800671c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d11d      	bne.n	80066fc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066c4:	041b      	lsls	r3, r3, #16
 80066c6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066ce:	0c1b      	lsrs	r3, r3, #16
 80066d0:	431a      	orrs	r2, r3
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	691b      	ldr	r3, [r3, #16]
 80066da:	3301      	adds	r3, #1
 80066dc:	029a      	lsls	r2, r3, #10
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066f0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	661a      	str	r2, [r3, #96]	; 0x60
 80066fa:	e00f      	b.n	800671c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a58      	ldr	r2, [pc, #352]	; (8006864 <HAL_SD_GetCardCSD+0x344>)
 8006702:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006708:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	e09d      	b.n	8006858 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006720:	0b9b      	lsrs	r3, r3, #14
 8006722:	b2db      	uxtb	r3, r3
 8006724:	f003 0301 	and.w	r3, r3, #1
 8006728:	b2da      	uxtb	r2, r3
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006732:	09db      	lsrs	r3, r3, #7
 8006734:	b2db      	uxtb	r3, r3
 8006736:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800673a:	b2da      	uxtb	r2, r3
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006744:	b2db      	uxtb	r3, r3
 8006746:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800674a:	b2da      	uxtb	r2, r3
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006754:	0fdb      	lsrs	r3, r3, #31
 8006756:	b2da      	uxtb	r2, r3
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006760:	0f5b      	lsrs	r3, r3, #29
 8006762:	b2db      	uxtb	r3, r3
 8006764:	f003 0303 	and.w	r3, r3, #3
 8006768:	b2da      	uxtb	r2, r3
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006772:	0e9b      	lsrs	r3, r3, #26
 8006774:	b2db      	uxtb	r3, r3
 8006776:	f003 0307 	and.w	r3, r3, #7
 800677a:	b2da      	uxtb	r2, r3
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006784:	0d9b      	lsrs	r3, r3, #22
 8006786:	b2db      	uxtb	r3, r3
 8006788:	f003 030f 	and.w	r3, r3, #15
 800678c:	b2da      	uxtb	r2, r3
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006796:	0d5b      	lsrs	r3, r3, #21
 8006798:	b2db      	uxtb	r3, r3
 800679a:	f003 0301 	and.w	r3, r3, #1
 800679e:	b2da      	uxtb	r2, r3
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	2200      	movs	r2, #0
 80067aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067b2:	0c1b      	lsrs	r3, r3, #16
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	f003 0301 	and.w	r3, r3, #1
 80067ba:	b2da      	uxtb	r2, r3
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067c6:	0bdb      	lsrs	r3, r3, #15
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	f003 0301 	and.w	r3, r3, #1
 80067ce:	b2da      	uxtb	r2, r3
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067da:	0b9b      	lsrs	r3, r3, #14
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	f003 0301 	and.w	r3, r3, #1
 80067e2:	b2da      	uxtb	r2, r3
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ee:	0b5b      	lsrs	r3, r3, #13
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	f003 0301 	and.w	r3, r3, #1
 80067f6:	b2da      	uxtb	r2, r3
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006802:	0b1b      	lsrs	r3, r3, #12
 8006804:	b2db      	uxtb	r3, r3
 8006806:	f003 0301 	and.w	r3, r3, #1
 800680a:	b2da      	uxtb	r2, r3
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006816:	0a9b      	lsrs	r3, r3, #10
 8006818:	b2db      	uxtb	r3, r3
 800681a:	f003 0303 	and.w	r3, r3, #3
 800681e:	b2da      	uxtb	r2, r3
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800682a:	0a1b      	lsrs	r3, r3, #8
 800682c:	b2db      	uxtb	r3, r3
 800682e:	f003 0303 	and.w	r3, r3, #3
 8006832:	b2da      	uxtb	r2, r3
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800683e:	085b      	lsrs	r3, r3, #1
 8006840:	b2db      	uxtb	r3, r3
 8006842:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006846:	b2da      	uxtb	r2, r3
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	2201      	movs	r2, #1
 8006852:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006856:	2300      	movs	r3, #0
}
 8006858:	4618      	mov	r0, r3
 800685a:	370c      	adds	r7, #12
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr
 8006864:	004005ff 	.word	0x004005ff

08006868 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80068b2:	2300      	movs	r3, #0
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80068c0:	b5b0      	push	{r4, r5, r7, lr}
 80068c2:	b08e      	sub	sp, #56	; 0x38
 80068c4:	af04      	add	r7, sp, #16
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2203      	movs	r2, #3
 80068ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068d6:	2b03      	cmp	r3, #3
 80068d8:	d02e      	beq.n	8006938 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068e0:	d106      	bne.n	80068f0 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	639a      	str	r2, [r3, #56]	; 0x38
 80068ee:	e029      	b.n	8006944 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068f6:	d10a      	bne.n	800690e <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f000 fb0f 	bl	8006f1c <SD_WideBus_Enable>
 80068fe:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006906:	431a      	orrs	r2, r3
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	639a      	str	r2, [r3, #56]	; 0x38
 800690c:	e01a      	b.n	8006944 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d10a      	bne.n	800692a <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 fb4c 	bl	8006fb2 <SD_WideBus_Disable>
 800691a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006922:	431a      	orrs	r2, r3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	639a      	str	r2, [r3, #56]	; 0x38
 8006928:	e00c      	b.n	8006944 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800692e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	639a      	str	r2, [r3, #56]	; 0x38
 8006936:	e005      	b.n	8006944 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800693c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006948:	2b00      	cmp	r3, #0
 800694a:	d009      	beq.n	8006960 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a18      	ldr	r2, [pc, #96]	; (80069b4 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8006952:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2201      	movs	r2, #1
 8006958:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	e024      	b.n	80069aa <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	695b      	ldr	r3, [r3, #20]
 800697a:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	699b      	ldr	r3, [r3, #24]
 8006980:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681d      	ldr	r5, [r3, #0]
 8006986:	466c      	mov	r4, sp
 8006988:	f107 0318 	add.w	r3, r7, #24
 800698c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006990:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006994:	f107 030c 	add.w	r3, r7, #12
 8006998:	cb0e      	ldmia	r3, {r1, r2, r3}
 800699a:	4628      	mov	r0, r5
 800699c:	f002 fb2e 	bl	8008ffc <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2201      	movs	r2, #1
 80069a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80069a8:	2300      	movs	r3, #0
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3728      	adds	r7, #40	; 0x28
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bdb0      	pop	{r4, r5, r7, pc}
 80069b2:	bf00      	nop
 80069b4:	004005ff 	.word	0x004005ff

080069b8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b086      	sub	sp, #24
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80069c0:	2300      	movs	r3, #0
 80069c2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80069c4:	f107 030c 	add.w	r3, r7, #12
 80069c8:	4619      	mov	r1, r3
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 fa7e 	bl	8006ecc <SD_SendStatus>
 80069d0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d005      	beq.n	80069e4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	431a      	orrs	r2, r3
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	0a5b      	lsrs	r3, r3, #9
 80069e8:	f003 030f 	and.w	r3, r3, #15
 80069ec:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80069ee:	693b      	ldr	r3, [r7, #16]
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3718      	adds	r7, #24
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b085      	sub	sp, #20
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a04:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a14:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006a16:	bf00      	nop
 8006a18:	3714      	adds	r7, #20
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr

08006a22 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006a22:	b580      	push	{r7, lr}
 8006a24:	b084      	sub	sp, #16
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a2e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a34:	2b82      	cmp	r3, #130	; 0x82
 8006a36:	d111      	bne.n	8006a5c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f002 fc63 	bl	8009308 <SDMMC_CmdStopTransfer>
 8006a42:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d008      	beq.n	8006a5c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	431a      	orrs	r2, r3
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8006a56:	68f8      	ldr	r0, [r7, #12]
 8006a58:	f7ff fd4e 	bl	80064f8 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f022 0208 	bic.w	r2, r2, #8
 8006a6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f240 523a 	movw	r2, #1338	; 0x53a
 8006a74:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2201      	movs	r2, #1
 8006a7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2200      	movs	r2, #0
 8006a82:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8006a84:	68f8      	ldr	r0, [r7, #12]
 8006a86:	f7ff fd2d 	bl	80064e4 <HAL_SD_RxCpltCallback>
#endif
}
 8006a8a:	bf00      	nop
 8006a8c:	3710      	adds	r7, #16
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
	...

08006a94 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b086      	sub	sp, #24
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa0:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f7fc fc0e 	bl	80032c4 <HAL_DMA_GetError>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b02      	cmp	r3, #2
 8006aac:	d03e      	beq.n	8006b2c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ab4:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006abc:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d002      	beq.n	8006aca <SD_DMAError+0x36>
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d12d      	bne.n	8006b26 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a19      	ldr	r2, [pc, #100]	; (8006b34 <SD_DMAError+0xa0>)
 8006ad0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006ae0:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8006aee:	6978      	ldr	r0, [r7, #20]
 8006af0:	f7ff ff62 	bl	80069b8 <HAL_SD_GetCardState>
 8006af4:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	2b06      	cmp	r3, #6
 8006afa:	d002      	beq.n	8006b02 <SD_DMAError+0x6e>
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	2b05      	cmp	r3, #5
 8006b00:	d10a      	bne.n	8006b18 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4618      	mov	r0, r3
 8006b08:	f002 fbfe 	bl	8009308 <SDMMC_CmdStopTransfer>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b12:	431a      	orrs	r2, r3
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	2200      	movs	r2, #0
 8006b24:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8006b26:	6978      	ldr	r0, [r7, #20]
 8006b28:	f7ff fce6 	bl	80064f8 <HAL_SD_ErrorCallback>
#endif
  }
}
 8006b2c:	bf00      	nop
 8006b2e:	3718      	adds	r7, #24
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	004005ff 	.word	0x004005ff

08006b38 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b44:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f240 523a 	movw	r2, #1338	; 0x53a
 8006b4e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006b50:	68f8      	ldr	r0, [r7, #12]
 8006b52:	f7ff ff31 	bl	80069b8 <HAL_SD_GetCardState>
 8006b56:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2200      	movs	r2, #0
 8006b64:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	2b06      	cmp	r3, #6
 8006b6a:	d002      	beq.n	8006b72 <SD_DMATxAbort+0x3a>
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	2b05      	cmp	r3, #5
 8006b70:	d10a      	bne.n	8006b88 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4618      	mov	r0, r3
 8006b78:	f002 fbc6 	bl	8009308 <SDMMC_CmdStopTransfer>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b82:	431a      	orrs	r2, r3
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d103      	bne.n	8006b98 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006b90:	68f8      	ldr	r0, [r7, #12]
 8006b92:	f7ff fcbb 	bl	800650c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006b96:	e002      	b.n	8006b9e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006b98:	68f8      	ldr	r0, [r7, #12]
 8006b9a:	f7ff fcad 	bl	80064f8 <HAL_SD_ErrorCallback>
}
 8006b9e:	bf00      	nop
 8006ba0:	3710      	adds	r7, #16
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}

08006ba6 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b084      	sub	sp, #16
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb2:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f240 523a 	movw	r2, #1338	; 0x53a
 8006bbc:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006bbe:	68f8      	ldr	r0, [r7, #12]
 8006bc0:	f7ff fefa 	bl	80069b8 <HAL_SD_GetCardState>
 8006bc4:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2201      	movs	r2, #1
 8006bca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	2b06      	cmp	r3, #6
 8006bd8:	d002      	beq.n	8006be0 <SD_DMARxAbort+0x3a>
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	2b05      	cmp	r3, #5
 8006bde:	d10a      	bne.n	8006bf6 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4618      	mov	r0, r3
 8006be6:	f002 fb8f 	bl	8009308 <SDMMC_CmdStopTransfer>
 8006bea:	4602      	mov	r2, r0
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf0:	431a      	orrs	r2, r3
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d103      	bne.n	8006c06 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006bfe:	68f8      	ldr	r0, [r7, #12]
 8006c00:	f7ff fc84 	bl	800650c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006c04:	e002      	b.n	8006c0c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006c06:	68f8      	ldr	r0, [r7, #12]
 8006c08:	f7ff fc76 	bl	80064f8 <HAL_SD_ErrorCallback>
}
 8006c0c:	bf00      	nop
 8006c0e:	3710      	adds	r7, #16
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006c14:	b5b0      	push	{r4, r5, r7, lr}
 8006c16:	b094      	sub	sp, #80	; 0x50
 8006c18:	af04      	add	r7, sp, #16
 8006c1a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4618      	mov	r0, r3
 8006c26:	f002 fa41 	bl	80090ac <SDIO_GetPowerState>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d102      	bne.n	8006c36 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006c30:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006c34:	e0b7      	b.n	8006da6 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c3a:	2b03      	cmp	r3, #3
 8006c3c:	d02f      	beq.n	8006c9e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4618      	mov	r0, r3
 8006c44:	f002 fc6a 	bl	800951c <SDMMC_CmdSendCID>
 8006c48:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006c4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d001      	beq.n	8006c54 <SD_InitCard+0x40>
    {
      return errorstate;
 8006c50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c52:	e0a8      	b.n	8006da6 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	2100      	movs	r1, #0
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f002 fa6b 	bl	8009136 <SDIO_GetResponse>
 8006c60:	4602      	mov	r2, r0
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	2104      	movs	r1, #4
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f002 fa62 	bl	8009136 <SDIO_GetResponse>
 8006c72:	4602      	mov	r2, r0
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	2108      	movs	r1, #8
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f002 fa59 	bl	8009136 <SDIO_GetResponse>
 8006c84:	4602      	mov	r2, r0
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	210c      	movs	r1, #12
 8006c90:	4618      	mov	r0, r3
 8006c92:	f002 fa50 	bl	8009136 <SDIO_GetResponse>
 8006c96:	4602      	mov	r2, r0
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ca2:	2b03      	cmp	r3, #3
 8006ca4:	d00d      	beq.n	8006cc2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f107 020e 	add.w	r2, r7, #14
 8006cae:	4611      	mov	r1, r2
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f002 fc70 	bl	8009596 <SDMMC_CmdSetRelAdd>
 8006cb6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d001      	beq.n	8006cc2 <SD_InitCard+0xae>
    {
      return errorstate;
 8006cbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cc0:	e071      	b.n	8006da6 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cc6:	2b03      	cmp	r3, #3
 8006cc8:	d036      	beq.n	8006d38 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006cca:	89fb      	ldrh	r3, [r7, #14]
 8006ccc:	461a      	mov	r2, r3
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cda:	041b      	lsls	r3, r3, #16
 8006cdc:	4619      	mov	r1, r3
 8006cde:	4610      	mov	r0, r2
 8006ce0:	f002 fc3a 	bl	8009558 <SDMMC_CmdSendCSD>
 8006ce4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d001      	beq.n	8006cf0 <SD_InitCard+0xdc>
    {
      return errorstate;
 8006cec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cee:	e05a      	b.n	8006da6 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	2100      	movs	r1, #0
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f002 fa1d 	bl	8009136 <SDIO_GetResponse>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	2104      	movs	r1, #4
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f002 fa14 	bl	8009136 <SDIO_GetResponse>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	2108      	movs	r1, #8
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f002 fa0b 	bl	8009136 <SDIO_GetResponse>
 8006d20:	4602      	mov	r2, r0
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	210c      	movs	r1, #12
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f002 fa02 	bl	8009136 <SDIO_GetResponse>
 8006d32:	4602      	mov	r2, r0
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	2104      	movs	r1, #4
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f002 f9f9 	bl	8009136 <SDIO_GetResponse>
 8006d44:	4603      	mov	r3, r0
 8006d46:	0d1a      	lsrs	r2, r3, #20
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006d4c:	f107 0310 	add.w	r3, r7, #16
 8006d50:	4619      	mov	r1, r3
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f7ff fbe4 	bl	8006520 <HAL_SD_GetCardCSD>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d002      	beq.n	8006d64 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006d5e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006d62:	e020      	b.n	8006da6 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6819      	ldr	r1, [r3, #0]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d6c:	041b      	lsls	r3, r3, #16
 8006d6e:	f04f 0400 	mov.w	r4, #0
 8006d72:	461a      	mov	r2, r3
 8006d74:	4623      	mov	r3, r4
 8006d76:	4608      	mov	r0, r1
 8006d78:	f002 fae8 	bl	800934c <SDMMC_CmdSelDesel>
 8006d7c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006d7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d001      	beq.n	8006d88 <SD_InitCard+0x174>
  {
    return errorstate;
 8006d84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d86:	e00e      	b.n	8006da6 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681d      	ldr	r5, [r3, #0]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	466c      	mov	r4, sp
 8006d90:	f103 0210 	add.w	r2, r3, #16
 8006d94:	ca07      	ldmia	r2, {r0, r1, r2}
 8006d96:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006d9a:	3304      	adds	r3, #4
 8006d9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006d9e:	4628      	mov	r0, r5
 8006da0:	f002 f92c 	bl	8008ffc <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006da4:	2300      	movs	r3, #0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3740      	adds	r7, #64	; 0x40
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006db0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b086      	sub	sp, #24
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006db8:	2300      	movs	r3, #0
 8006dba:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	617b      	str	r3, [r7, #20]
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f002 fae2 	bl	8009392 <SDMMC_CmdGoIdleState>
 8006dce:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d001      	beq.n	8006dda <SD_PowerON+0x2a>
  {
    return errorstate;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	e072      	b.n	8006ec0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4618      	mov	r0, r3
 8006de0:	f002 faf5 	bl	80093ce <SDMMC_CmdOperCond>
 8006de4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d00d      	beq.n	8006e08 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4618      	mov	r0, r3
 8006df8:	f002 facb 	bl	8009392 <SDMMC_CmdGoIdleState>
 8006dfc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d004      	beq.n	8006e0e <SD_PowerON+0x5e>
    {
      return errorstate;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	e05b      	b.n	8006ec0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d137      	bne.n	8006e86 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2100      	movs	r1, #0
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f002 faf5 	bl	800940c <SDMMC_CmdAppCommand>
 8006e22:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d02d      	beq.n	8006e86 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006e2a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006e2e:	e047      	b.n	8006ec0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	2100      	movs	r1, #0
 8006e36:	4618      	mov	r0, r3
 8006e38:	f002 fae8 	bl	800940c <SDMMC_CmdAppCommand>
 8006e3c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d001      	beq.n	8006e48 <SD_PowerON+0x98>
    {
      return errorstate;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	e03b      	b.n	8006ec0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	491e      	ldr	r1, [pc, #120]	; (8006ec8 <SD_PowerON+0x118>)
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f002 fafe 	bl	8009450 <SDMMC_CmdAppOperCommand>
 8006e54:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d002      	beq.n	8006e62 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006e5c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006e60:	e02e      	b.n	8006ec0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	2100      	movs	r1, #0
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f002 f964 	bl	8009136 <SDIO_GetResponse>
 8006e6e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	0fdb      	lsrs	r3, r3, #31
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d101      	bne.n	8006e7c <SD_PowerON+0xcc>
 8006e78:	2301      	movs	r3, #1
 8006e7a:	e000      	b.n	8006e7e <SD_PowerON+0xce>
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	613b      	str	r3, [r7, #16]

    count++;
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	3301      	adds	r3, #1
 8006e84:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d802      	bhi.n	8006e96 <SD_PowerON+0xe6>
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d0cc      	beq.n	8006e30 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d902      	bls.n	8006ea6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006ea0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006ea4:	e00c      	b.n	8006ec0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d003      	beq.n	8006eb8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	645a      	str	r2, [r3, #68]	; 0x44
 8006eb6:	e002      	b.n	8006ebe <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006ebe:	2300      	movs	r3, #0
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3718      	adds	r7, #24
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}
 8006ec8:	c1100000 	.word	0xc1100000

08006ecc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d102      	bne.n	8006ee2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006edc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006ee0:	e018      	b.n	8006f14 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681a      	ldr	r2, [r3, #0]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eea:	041b      	lsls	r3, r3, #16
 8006eec:	4619      	mov	r1, r3
 8006eee:	4610      	mov	r0, r2
 8006ef0:	f002 fb72 	bl	80095d8 <SDMMC_CmdSendStatus>
 8006ef4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d001      	beq.n	8006f00 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	e009      	b.n	8006f14 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	2100      	movs	r1, #0
 8006f06:	4618      	mov	r0, r3
 8006f08:	f002 f915 	bl	8009136 <SDIO_GetResponse>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006f12:	2300      	movs	r3, #0
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3710      	adds	r7, #16
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b086      	sub	sp, #24
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006f24:	2300      	movs	r3, #0
 8006f26:	60fb      	str	r3, [r7, #12]
 8006f28:	2300      	movs	r3, #0
 8006f2a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	2100      	movs	r1, #0
 8006f32:	4618      	mov	r0, r3
 8006f34:	f002 f8ff 	bl	8009136 <SDIO_GetResponse>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f42:	d102      	bne.n	8006f4a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006f44:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006f48:	e02f      	b.n	8006faa <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006f4a:	f107 030c 	add.w	r3, r7, #12
 8006f4e:	4619      	mov	r1, r3
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 f879 	bl	8007048 <SD_FindSCR>
 8006f56:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d001      	beq.n	8006f62 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	e023      	b.n	8006faa <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d01c      	beq.n	8006fa6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f74:	041b      	lsls	r3, r3, #16
 8006f76:	4619      	mov	r1, r3
 8006f78:	4610      	mov	r0, r2
 8006f7a:	f002 fa47 	bl	800940c <SDMMC_CmdAppCommand>
 8006f7e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d001      	beq.n	8006f8a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	e00f      	b.n	8006faa <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	2102      	movs	r1, #2
 8006f90:	4618      	mov	r0, r3
 8006f92:	f002 fa80 	bl	8009496 <SDMMC_CmdBusWidth>
 8006f96:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d001      	beq.n	8006fa2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	e003      	b.n	8006faa <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	e001      	b.n	8006faa <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006fa6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3718      	adds	r7, #24
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}

08006fb2 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006fb2:	b580      	push	{r7, lr}
 8006fb4:	b086      	sub	sp, #24
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006fba:	2300      	movs	r3, #0
 8006fbc:	60fb      	str	r3, [r7, #12]
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	2100      	movs	r1, #0
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f002 f8b4 	bl	8009136 <SDIO_GetResponse>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fd4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006fd8:	d102      	bne.n	8006fe0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006fda:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006fde:	e02f      	b.n	8007040 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006fe0:	f107 030c 	add.w	r3, r7, #12
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 f82e 	bl	8007048 <SD_FindSCR>
 8006fec:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d001      	beq.n	8006ff8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	e023      	b.n	8007040 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d01c      	beq.n	800703c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800700a:	041b      	lsls	r3, r3, #16
 800700c:	4619      	mov	r1, r3
 800700e:	4610      	mov	r0, r2
 8007010:	f002 f9fc 	bl	800940c <SDMMC_CmdAppCommand>
 8007014:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d001      	beq.n	8007020 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	e00f      	b.n	8007040 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	2100      	movs	r1, #0
 8007026:	4618      	mov	r0, r3
 8007028:	f002 fa35 	bl	8009496 <SDMMC_CmdBusWidth>
 800702c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d001      	beq.n	8007038 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	e003      	b.n	8007040 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007038:	2300      	movs	r3, #0
 800703a:	e001      	b.n	8007040 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800703c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007040:	4618      	mov	r0, r3
 8007042:	3718      	adds	r7, #24
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007048:	b590      	push	{r4, r7, lr}
 800704a:	b08f      	sub	sp, #60	; 0x3c
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007052:	f7fb fd45 	bl	8002ae0 <HAL_GetTick>
 8007056:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007058:	2300      	movs	r3, #0
 800705a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800705c:	2300      	movs	r3, #0
 800705e:	60bb      	str	r3, [r7, #8]
 8007060:	2300      	movs	r3, #0
 8007062:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	2108      	movs	r1, #8
 800706e:	4618      	mov	r0, r3
 8007070:	f002 f8a0 	bl	80091b4 <SDMMC_CmdBlockLength>
 8007074:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007078:	2b00      	cmp	r3, #0
 800707a:	d001      	beq.n	8007080 <SD_FindSCR+0x38>
  {
    return errorstate;
 800707c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800707e:	e0a9      	b.n	80071d4 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007088:	041b      	lsls	r3, r3, #16
 800708a:	4619      	mov	r1, r3
 800708c:	4610      	mov	r0, r2
 800708e:	f002 f9bd 	bl	800940c <SDMMC_CmdAppCommand>
 8007092:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007096:	2b00      	cmp	r3, #0
 8007098:	d001      	beq.n	800709e <SD_FindSCR+0x56>
  {
    return errorstate;
 800709a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800709c:	e09a      	b.n	80071d4 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800709e:	f04f 33ff 	mov.w	r3, #4294967295
 80070a2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80070a4:	2308      	movs	r3, #8
 80070a6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80070a8:	2330      	movs	r3, #48	; 0x30
 80070aa:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80070ac:	2302      	movs	r3, #2
 80070ae:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80070b0:	2300      	movs	r3, #0
 80070b2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80070b4:	2301      	movs	r3, #1
 80070b6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f107 0210 	add.w	r2, r7, #16
 80070c0:	4611      	mov	r1, r2
 80070c2:	4618      	mov	r0, r3
 80070c4:	f002 f84a 	bl	800915c <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4618      	mov	r0, r3
 80070ce:	f002 fa04 	bl	80094da <SDMMC_CmdSendSCR>
 80070d2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80070d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d022      	beq.n	8007120 <SD_FindSCR+0xd8>
  {
    return errorstate;
 80070da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070dc:	e07a      	b.n	80071d4 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d00e      	beq.n	800710a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6819      	ldr	r1, [r3, #0]
 80070f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070f2:	009b      	lsls	r3, r3, #2
 80070f4:	f107 0208 	add.w	r2, r7, #8
 80070f8:	18d4      	adds	r4, r2, r3
 80070fa:	4608      	mov	r0, r1
 80070fc:	f001 ffa9 	bl	8009052 <SDIO_ReadFIFO>
 8007100:	4603      	mov	r3, r0
 8007102:	6023      	str	r3, [r4, #0]
      index++;
 8007104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007106:	3301      	adds	r3, #1
 8007108:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800710a:	f7fb fce9 	bl	8002ae0 <HAL_GetTick>
 800710e:	4602      	mov	r2, r0
 8007110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007112:	1ad3      	subs	r3, r2, r3
 8007114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007118:	d102      	bne.n	8007120 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800711a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800711e:	e059      	b.n	80071d4 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007126:	f240 432a 	movw	r3, #1066	; 0x42a
 800712a:	4013      	ands	r3, r2
 800712c:	2b00      	cmp	r3, #0
 800712e:	d0d6      	beq.n	80070de <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007136:	f003 0308 	and.w	r3, r3, #8
 800713a:	2b00      	cmp	r3, #0
 800713c:	d005      	beq.n	800714a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	2208      	movs	r2, #8
 8007144:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007146:	2308      	movs	r3, #8
 8007148:	e044      	b.n	80071d4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007150:	f003 0302 	and.w	r3, r3, #2
 8007154:	2b00      	cmp	r3, #0
 8007156:	d005      	beq.n	8007164 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	2202      	movs	r2, #2
 800715e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007160:	2302      	movs	r3, #2
 8007162:	e037      	b.n	80071d4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800716a:	f003 0320 	and.w	r3, r3, #32
 800716e:	2b00      	cmp	r3, #0
 8007170:	d005      	beq.n	800717e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	2220      	movs	r2, #32
 8007178:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800717a:	2320      	movs	r3, #32
 800717c:	e02a      	b.n	80071d4 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f240 523a 	movw	r2, #1338	; 0x53a
 8007186:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	061a      	lsls	r2, r3, #24
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	021b      	lsls	r3, r3, #8
 8007190:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007194:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	0a1b      	lsrs	r3, r3, #8
 800719a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800719e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	0e1b      	lsrs	r3, r3, #24
 80071a4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80071a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a8:	601a      	str	r2, [r3, #0]
    scr++;
 80071aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ac:	3304      	adds	r3, #4
 80071ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	061a      	lsls	r2, r3, #24
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	021b      	lsls	r3, r3, #8
 80071b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80071bc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	0a1b      	lsrs	r3, r3, #8
 80071c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80071c6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	0e1b      	lsrs	r3, r3, #24
 80071cc:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80071ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80071d2:	2300      	movs	r3, #0
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	373c      	adds	r7, #60	; 0x3c
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd90      	pop	{r4, r7, pc}

080071dc <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b086      	sub	sp, #24
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ee:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d03f      	beq.n	8007276 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80071f6:	2300      	movs	r3, #0
 80071f8:	617b      	str	r3, [r7, #20]
 80071fa:	e033      	b.n	8007264 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4618      	mov	r0, r3
 8007202:	f001 ff26 	bl	8009052 <SDIO_ReadFIFO>
 8007206:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	b2da      	uxtb	r2, r3
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	3301      	adds	r3, #1
 8007214:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	3b01      	subs	r3, #1
 800721a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	0a1b      	lsrs	r3, r3, #8
 8007220:	b2da      	uxtb	r2, r3
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	3301      	adds	r3, #1
 800722a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	3b01      	subs	r3, #1
 8007230:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	0c1b      	lsrs	r3, r3, #16
 8007236:	b2da      	uxtb	r2, r3
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	3301      	adds	r3, #1
 8007240:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	3b01      	subs	r3, #1
 8007246:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	0e1b      	lsrs	r3, r3, #24
 800724c:	b2da      	uxtb	r2, r3
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	3301      	adds	r3, #1
 8007256:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	3b01      	subs	r3, #1
 800725c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	3301      	adds	r3, #1
 8007262:	617b      	str	r3, [r7, #20]
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	2b07      	cmp	r3, #7
 8007268:	d9c8      	bls.n	80071fc <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	68fa      	ldr	r2, [r7, #12]
 800726e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	693a      	ldr	r2, [r7, #16]
 8007274:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8007276:	bf00      	nop
 8007278:	3718      	adds	r7, #24
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}

0800727e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800727e:	b580      	push	{r7, lr}
 8007280:	b086      	sub	sp, #24
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6a1b      	ldr	r3, [r3, #32]
 800728a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007290:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d043      	beq.n	8007320 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8007298:	2300      	movs	r3, #0
 800729a:	617b      	str	r3, [r7, #20]
 800729c:	e037      	b.n	800730e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	3301      	adds	r3, #1
 80072a8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	3b01      	subs	r3, #1
 80072ae:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	021a      	lsls	r2, r3, #8
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	4313      	orrs	r3, r2
 80072ba:	60bb      	str	r3, [r7, #8]
      tmp++;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	3301      	adds	r3, #1
 80072c0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	3b01      	subs	r3, #1
 80072c6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	041a      	lsls	r2, r3, #16
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	4313      	orrs	r3, r2
 80072d2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	3301      	adds	r3, #1
 80072d8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	3b01      	subs	r3, #1
 80072de:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	061a      	lsls	r2, r3, #24
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	4313      	orrs	r3, r2
 80072ea:	60bb      	str	r3, [r7, #8]
      tmp++;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	3301      	adds	r3, #1
 80072f0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	3b01      	subs	r3, #1
 80072f6:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f107 0208 	add.w	r2, r7, #8
 8007300:	4611      	mov	r1, r2
 8007302:	4618      	mov	r0, r3
 8007304:	f001 feb2 	bl	800906c <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	3301      	adds	r3, #1
 800730c:	617b      	str	r3, [r7, #20]
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	2b07      	cmp	r3, #7
 8007312:	d9c4      	bls.n	800729e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	68fa      	ldr	r2, [r7, #12]
 8007318:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	693a      	ldr	r2, [r7, #16]
 800731e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8007320:	bf00      	nop
 8007322:	3718      	adds	r7, #24
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d101      	bne.n	800733a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	e056      	b.n	80073e8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2200      	movs	r2, #0
 800733e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007346:	b2db      	uxtb	r3, r3
 8007348:	2b00      	cmp	r3, #0
 800734a:	d106      	bne.n	800735a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2200      	movs	r2, #0
 8007350:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f7fb f983 	bl	8002660 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2202      	movs	r2, #2
 800735e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007370:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	685a      	ldr	r2, [r3, #4]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	431a      	orrs	r2, r3
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	68db      	ldr	r3, [r3, #12]
 8007380:	431a      	orrs	r2, r3
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	691b      	ldr	r3, [r3, #16]
 8007386:	431a      	orrs	r2, r3
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	695b      	ldr	r3, [r3, #20]
 800738c:	431a      	orrs	r2, r3
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	699b      	ldr	r3, [r3, #24]
 8007392:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007396:	431a      	orrs	r2, r3
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	69db      	ldr	r3, [r3, #28]
 800739c:	431a      	orrs	r2, r3
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6a1b      	ldr	r3, [r3, #32]
 80073a2:	ea42 0103 	orr.w	r1, r2, r3
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	430a      	orrs	r2, r1
 80073b0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	699b      	ldr	r3, [r3, #24]
 80073b6:	0c1b      	lsrs	r3, r3, #16
 80073b8:	f003 0104 	and.w	r1, r3, #4
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	430a      	orrs	r2, r1
 80073c6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	69da      	ldr	r2, [r3, #28]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80073d6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2200      	movs	r2, #0
 80073dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2201      	movs	r2, #1
 80073e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80073e6:	2300      	movs	r3, #0
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3708      	adds	r7, #8
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b088      	sub	sp, #32
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	60f8      	str	r0, [r7, #12]
 80073f8:	60b9      	str	r1, [r7, #8]
 80073fa:	603b      	str	r3, [r7, #0]
 80073fc:	4613      	mov	r3, r2
 80073fe:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007400:	2300      	movs	r3, #0
 8007402:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800740a:	2b01      	cmp	r3, #1
 800740c:	d101      	bne.n	8007412 <HAL_SPI_Transmit+0x22>
 800740e:	2302      	movs	r3, #2
 8007410:	e11e      	b.n	8007650 <HAL_SPI_Transmit+0x260>
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2201      	movs	r2, #1
 8007416:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800741a:	f7fb fb61 	bl	8002ae0 <HAL_GetTick>
 800741e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007420:	88fb      	ldrh	r3, [r7, #6]
 8007422:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800742a:	b2db      	uxtb	r3, r3
 800742c:	2b01      	cmp	r3, #1
 800742e:	d002      	beq.n	8007436 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007430:	2302      	movs	r3, #2
 8007432:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007434:	e103      	b.n	800763e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d002      	beq.n	8007442 <HAL_SPI_Transmit+0x52>
 800743c:	88fb      	ldrh	r3, [r7, #6]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d102      	bne.n	8007448 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007446:	e0fa      	b.n	800763e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2203      	movs	r2, #3
 800744c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2200      	movs	r2, #0
 8007454:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	68ba      	ldr	r2, [r7, #8]
 800745a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	88fa      	ldrh	r2, [r7, #6]
 8007460:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	88fa      	ldrh	r2, [r7, #6]
 8007466:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2200      	movs	r2, #0
 800746c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2200      	movs	r2, #0
 8007472:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2200      	movs	r2, #0
 8007478:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2200      	movs	r2, #0
 800747e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2200      	movs	r2, #0
 8007484:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	689b      	ldr	r3, [r3, #8]
 800748a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800748e:	d107      	bne.n	80074a0 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800749e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074aa:	2b40      	cmp	r3, #64	; 0x40
 80074ac:	d007      	beq.n	80074be <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	68db      	ldr	r3, [r3, #12]
 80074c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074c6:	d14b      	bne.n	8007560 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d002      	beq.n	80074d6 <HAL_SPI_Transmit+0xe6>
 80074d0:	8afb      	ldrh	r3, [r7, #22]
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d13e      	bne.n	8007554 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074da:	881a      	ldrh	r2, [r3, #0]
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e6:	1c9a      	adds	r2, r3, #2
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	3b01      	subs	r3, #1
 80074f4:	b29a      	uxth	r2, r3
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80074fa:	e02b      	b.n	8007554 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	f003 0302 	and.w	r3, r3, #2
 8007506:	2b02      	cmp	r3, #2
 8007508:	d112      	bne.n	8007530 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800750e:	881a      	ldrh	r2, [r3, #0]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800751a:	1c9a      	adds	r2, r3, #2
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007524:	b29b      	uxth	r3, r3
 8007526:	3b01      	subs	r3, #1
 8007528:	b29a      	uxth	r2, r3
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	86da      	strh	r2, [r3, #54]	; 0x36
 800752e:	e011      	b.n	8007554 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007530:	f7fb fad6 	bl	8002ae0 <HAL_GetTick>
 8007534:	4602      	mov	r2, r0
 8007536:	69bb      	ldr	r3, [r7, #24]
 8007538:	1ad3      	subs	r3, r2, r3
 800753a:	683a      	ldr	r2, [r7, #0]
 800753c:	429a      	cmp	r2, r3
 800753e:	d803      	bhi.n	8007548 <HAL_SPI_Transmit+0x158>
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007546:	d102      	bne.n	800754e <HAL_SPI_Transmit+0x15e>
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d102      	bne.n	8007554 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800754e:	2303      	movs	r3, #3
 8007550:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007552:	e074      	b.n	800763e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007558:	b29b      	uxth	r3, r3
 800755a:	2b00      	cmp	r3, #0
 800755c:	d1ce      	bne.n	80074fc <HAL_SPI_Transmit+0x10c>
 800755e:	e04c      	b.n	80075fa <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d002      	beq.n	800756e <HAL_SPI_Transmit+0x17e>
 8007568:	8afb      	ldrh	r3, [r7, #22]
 800756a:	2b01      	cmp	r3, #1
 800756c:	d140      	bne.n	80075f0 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	330c      	adds	r3, #12
 8007578:	7812      	ldrb	r2, [r2, #0]
 800757a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007580:	1c5a      	adds	r2, r3, #1
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800758a:	b29b      	uxth	r3, r3
 800758c:	3b01      	subs	r3, #1
 800758e:	b29a      	uxth	r2, r3
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007594:	e02c      	b.n	80075f0 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	f003 0302 	and.w	r3, r3, #2
 80075a0:	2b02      	cmp	r3, #2
 80075a2:	d113      	bne.n	80075cc <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	330c      	adds	r3, #12
 80075ae:	7812      	ldrb	r2, [r2, #0]
 80075b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075b6:	1c5a      	adds	r2, r3, #1
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	3b01      	subs	r3, #1
 80075c4:	b29a      	uxth	r2, r3
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	86da      	strh	r2, [r3, #54]	; 0x36
 80075ca:	e011      	b.n	80075f0 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075cc:	f7fb fa88 	bl	8002ae0 <HAL_GetTick>
 80075d0:	4602      	mov	r2, r0
 80075d2:	69bb      	ldr	r3, [r7, #24]
 80075d4:	1ad3      	subs	r3, r2, r3
 80075d6:	683a      	ldr	r2, [r7, #0]
 80075d8:	429a      	cmp	r2, r3
 80075da:	d803      	bhi.n	80075e4 <HAL_SPI_Transmit+0x1f4>
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075e2:	d102      	bne.n	80075ea <HAL_SPI_Transmit+0x1fa>
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d102      	bne.n	80075f0 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80075ea:	2303      	movs	r3, #3
 80075ec:	77fb      	strb	r3, [r7, #31]
          goto error;
 80075ee:	e026      	b.n	800763e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d1cd      	bne.n	8007596 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80075fa:	69ba      	ldr	r2, [r7, #24]
 80075fc:	6839      	ldr	r1, [r7, #0]
 80075fe:	68f8      	ldr	r0, [r7, #12]
 8007600:	f000 fa44 	bl	8007a8c <SPI_EndRxTxTransaction>
 8007604:	4603      	mov	r3, r0
 8007606:	2b00      	cmp	r3, #0
 8007608:	d002      	beq.n	8007610 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2220      	movs	r2, #32
 800760e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d10a      	bne.n	800762e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007618:	2300      	movs	r3, #0
 800761a:	613b      	str	r3, [r7, #16]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	68db      	ldr	r3, [r3, #12]
 8007622:	613b      	str	r3, [r7, #16]
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	613b      	str	r3, [r7, #16]
 800762c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007632:	2b00      	cmp	r3, #0
 8007634:	d002      	beq.n	800763c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	77fb      	strb	r3, [r7, #31]
 800763a:	e000      	b.n	800763e <HAL_SPI_Transmit+0x24e>
  }

error:
 800763c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2201      	movs	r2, #1
 8007642:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2200      	movs	r2, #0
 800764a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800764e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007650:	4618      	mov	r0, r3
 8007652:	3720      	adds	r7, #32
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b08c      	sub	sp, #48	; 0x30
 800765c:	af00      	add	r7, sp, #0
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	60b9      	str	r1, [r7, #8]
 8007662:	607a      	str	r2, [r7, #4]
 8007664:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007666:	2301      	movs	r3, #1
 8007668:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800766a:	2300      	movs	r3, #0
 800766c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007676:	2b01      	cmp	r3, #1
 8007678:	d101      	bne.n	800767e <HAL_SPI_TransmitReceive+0x26>
 800767a:	2302      	movs	r3, #2
 800767c:	e18a      	b.n	8007994 <HAL_SPI_TransmitReceive+0x33c>
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2201      	movs	r2, #1
 8007682:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007686:	f7fb fa2b 	bl	8002ae0 <HAL_GetTick>
 800768a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007692:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800769c:	887b      	ldrh	r3, [r7, #2]
 800769e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80076a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d00f      	beq.n	80076c8 <HAL_SPI_TransmitReceive+0x70>
 80076a8:	69fb      	ldr	r3, [r7, #28]
 80076aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076ae:	d107      	bne.n	80076c0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d103      	bne.n	80076c0 <HAL_SPI_TransmitReceive+0x68>
 80076b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076bc:	2b04      	cmp	r3, #4
 80076be:	d003      	beq.n	80076c8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80076c0:	2302      	movs	r3, #2
 80076c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80076c6:	e15b      	b.n	8007980 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d005      	beq.n	80076da <HAL_SPI_TransmitReceive+0x82>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d002      	beq.n	80076da <HAL_SPI_TransmitReceive+0x82>
 80076d4:	887b      	ldrh	r3, [r7, #2]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d103      	bne.n	80076e2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80076e0:	e14e      	b.n	8007980 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	2b04      	cmp	r3, #4
 80076ec:	d003      	beq.n	80076f6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2205      	movs	r2, #5
 80076f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2200      	movs	r2, #0
 80076fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	687a      	ldr	r2, [r7, #4]
 8007700:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	887a      	ldrh	r2, [r7, #2]
 8007706:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	887a      	ldrh	r2, [r7, #2]
 800770c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	68ba      	ldr	r2, [r7, #8]
 8007712:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	887a      	ldrh	r2, [r7, #2]
 8007718:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	887a      	ldrh	r2, [r7, #2]
 800771e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	2200      	movs	r2, #0
 8007724:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2200      	movs	r2, #0
 800772a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007736:	2b40      	cmp	r3, #64	; 0x40
 8007738:	d007      	beq.n	800774a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007748:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	68db      	ldr	r3, [r3, #12]
 800774e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007752:	d178      	bne.n	8007846 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d002      	beq.n	8007762 <HAL_SPI_TransmitReceive+0x10a>
 800775c:	8b7b      	ldrh	r3, [r7, #26]
 800775e:	2b01      	cmp	r3, #1
 8007760:	d166      	bne.n	8007830 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007766:	881a      	ldrh	r2, [r3, #0]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007772:	1c9a      	adds	r2, r3, #2
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800777c:	b29b      	uxth	r3, r3
 800777e:	3b01      	subs	r3, #1
 8007780:	b29a      	uxth	r2, r3
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007786:	e053      	b.n	8007830 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	f003 0302 	and.w	r3, r3, #2
 8007792:	2b02      	cmp	r3, #2
 8007794:	d11b      	bne.n	80077ce <HAL_SPI_TransmitReceive+0x176>
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800779a:	b29b      	uxth	r3, r3
 800779c:	2b00      	cmp	r3, #0
 800779e:	d016      	beq.n	80077ce <HAL_SPI_TransmitReceive+0x176>
 80077a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	d113      	bne.n	80077ce <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077aa:	881a      	ldrh	r2, [r3, #0]
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077b6:	1c9a      	adds	r2, r3, #2
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	3b01      	subs	r3, #1
 80077c4:	b29a      	uxth	r2, r3
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80077ca:	2300      	movs	r3, #0
 80077cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	f003 0301 	and.w	r3, r3, #1
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d119      	bne.n	8007810 <HAL_SPI_TransmitReceive+0x1b8>
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d014      	beq.n	8007810 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	68da      	ldr	r2, [r3, #12]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f0:	b292      	uxth	r2, r2
 80077f2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f8:	1c9a      	adds	r2, r3, #2
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007802:	b29b      	uxth	r3, r3
 8007804:	3b01      	subs	r3, #1
 8007806:	b29a      	uxth	r2, r3
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800780c:	2301      	movs	r3, #1
 800780e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007810:	f7fb f966 	bl	8002ae0 <HAL_GetTick>
 8007814:	4602      	mov	r2, r0
 8007816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007818:	1ad3      	subs	r3, r2, r3
 800781a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800781c:	429a      	cmp	r2, r3
 800781e:	d807      	bhi.n	8007830 <HAL_SPI_TransmitReceive+0x1d8>
 8007820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007826:	d003      	beq.n	8007830 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007828:	2303      	movs	r3, #3
 800782a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800782e:	e0a7      	b.n	8007980 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007834:	b29b      	uxth	r3, r3
 8007836:	2b00      	cmp	r3, #0
 8007838:	d1a6      	bne.n	8007788 <HAL_SPI_TransmitReceive+0x130>
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800783e:	b29b      	uxth	r3, r3
 8007840:	2b00      	cmp	r3, #0
 8007842:	d1a1      	bne.n	8007788 <HAL_SPI_TransmitReceive+0x130>
 8007844:	e07c      	b.n	8007940 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d002      	beq.n	8007854 <HAL_SPI_TransmitReceive+0x1fc>
 800784e:	8b7b      	ldrh	r3, [r7, #26]
 8007850:	2b01      	cmp	r3, #1
 8007852:	d16b      	bne.n	800792c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	330c      	adds	r3, #12
 800785e:	7812      	ldrb	r2, [r2, #0]
 8007860:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007866:	1c5a      	adds	r2, r3, #1
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007870:	b29b      	uxth	r3, r3
 8007872:	3b01      	subs	r3, #1
 8007874:	b29a      	uxth	r2, r3
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800787a:	e057      	b.n	800792c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	f003 0302 	and.w	r3, r3, #2
 8007886:	2b02      	cmp	r3, #2
 8007888:	d11c      	bne.n	80078c4 <HAL_SPI_TransmitReceive+0x26c>
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800788e:	b29b      	uxth	r3, r3
 8007890:	2b00      	cmp	r3, #0
 8007892:	d017      	beq.n	80078c4 <HAL_SPI_TransmitReceive+0x26c>
 8007894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007896:	2b01      	cmp	r3, #1
 8007898:	d114      	bne.n	80078c4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	330c      	adds	r3, #12
 80078a4:	7812      	ldrb	r2, [r2, #0]
 80078a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ac:	1c5a      	adds	r2, r3, #1
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	3b01      	subs	r3, #1
 80078ba:	b29a      	uxth	r2, r3
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80078c0:	2300      	movs	r3, #0
 80078c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	689b      	ldr	r3, [r3, #8]
 80078ca:	f003 0301 	and.w	r3, r3, #1
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	d119      	bne.n	8007906 <HAL_SPI_TransmitReceive+0x2ae>
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d014      	beq.n	8007906 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	68da      	ldr	r2, [r3, #12]
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e6:	b2d2      	uxtb	r2, r2
 80078e8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ee:	1c5a      	adds	r2, r3, #1
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	3b01      	subs	r3, #1
 80078fc:	b29a      	uxth	r2, r3
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007902:	2301      	movs	r3, #1
 8007904:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007906:	f7fb f8eb 	bl	8002ae0 <HAL_GetTick>
 800790a:	4602      	mov	r2, r0
 800790c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790e:	1ad3      	subs	r3, r2, r3
 8007910:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007912:	429a      	cmp	r2, r3
 8007914:	d803      	bhi.n	800791e <HAL_SPI_TransmitReceive+0x2c6>
 8007916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800791c:	d102      	bne.n	8007924 <HAL_SPI_TransmitReceive+0x2cc>
 800791e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007920:	2b00      	cmp	r3, #0
 8007922:	d103      	bne.n	800792c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007924:	2303      	movs	r3, #3
 8007926:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800792a:	e029      	b.n	8007980 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007930:	b29b      	uxth	r3, r3
 8007932:	2b00      	cmp	r3, #0
 8007934:	d1a2      	bne.n	800787c <HAL_SPI_TransmitReceive+0x224>
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800793a:	b29b      	uxth	r3, r3
 800793c:	2b00      	cmp	r3, #0
 800793e:	d19d      	bne.n	800787c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007942:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007944:	68f8      	ldr	r0, [r7, #12]
 8007946:	f000 f8a1 	bl	8007a8c <SPI_EndRxTxTransaction>
 800794a:	4603      	mov	r3, r0
 800794c:	2b00      	cmp	r3, #0
 800794e:	d006      	beq.n	800795e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007950:	2301      	movs	r3, #1
 8007952:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2220      	movs	r2, #32
 800795a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800795c:	e010      	b.n	8007980 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d10b      	bne.n	800797e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007966:	2300      	movs	r3, #0
 8007968:	617b      	str	r3, [r7, #20]
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	68db      	ldr	r3, [r3, #12]
 8007970:	617b      	str	r3, [r7, #20]
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	617b      	str	r3, [r7, #20]
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	e000      	b.n	8007980 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800797e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2201      	movs	r2, #1
 8007984:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2200      	movs	r2, #0
 800798c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007990:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007994:	4618      	mov	r0, r3
 8007996:	3730      	adds	r7, #48	; 0x30
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800799c:	b480      	push	{r7}
 800799e:	b083      	sub	sp, #12
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80079aa:	b2db      	uxtb	r3, r3
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	370c      	adds	r7, #12
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr

080079b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	60b9      	str	r1, [r7, #8]
 80079c2:	603b      	str	r3, [r7, #0]
 80079c4:	4613      	mov	r3, r2
 80079c6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80079c8:	e04c      	b.n	8007a64 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079d0:	d048      	beq.n	8007a64 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80079d2:	f7fb f885 	bl	8002ae0 <HAL_GetTick>
 80079d6:	4602      	mov	r2, r0
 80079d8:	69bb      	ldr	r3, [r7, #24]
 80079da:	1ad3      	subs	r3, r2, r3
 80079dc:	683a      	ldr	r2, [r7, #0]
 80079de:	429a      	cmp	r2, r3
 80079e0:	d902      	bls.n	80079e8 <SPI_WaitFlagStateUntilTimeout+0x30>
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d13d      	bne.n	8007a64 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	685a      	ldr	r2, [r3, #4]
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80079f6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a00:	d111      	bne.n	8007a26 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a0a:	d004      	beq.n	8007a16 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a14:	d107      	bne.n	8007a26 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	681a      	ldr	r2, [r3, #0]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a24:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a2e:	d10f      	bne.n	8007a50 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	681a      	ldr	r2, [r3, #0]
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a3e:	601a      	str	r2, [r3, #0]
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	681a      	ldr	r2, [r3, #0]
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a4e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2201      	movs	r2, #1
 8007a54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007a60:	2303      	movs	r3, #3
 8007a62:	e00f      	b.n	8007a84 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	689a      	ldr	r2, [r3, #8]
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	4013      	ands	r3, r2
 8007a6e:	68ba      	ldr	r2, [r7, #8]
 8007a70:	429a      	cmp	r2, r3
 8007a72:	bf0c      	ite	eq
 8007a74:	2301      	moveq	r3, #1
 8007a76:	2300      	movne	r3, #0
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	79fb      	ldrb	r3, [r7, #7]
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d1a3      	bne.n	80079ca <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007a82:	2300      	movs	r3, #0
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3710      	adds	r7, #16
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b088      	sub	sp, #32
 8007a90:	af02      	add	r7, sp, #8
 8007a92:	60f8      	str	r0, [r7, #12]
 8007a94:	60b9      	str	r1, [r7, #8]
 8007a96:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007a98:	4b1b      	ldr	r3, [pc, #108]	; (8007b08 <SPI_EndRxTxTransaction+0x7c>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a1b      	ldr	r2, [pc, #108]	; (8007b0c <SPI_EndRxTxTransaction+0x80>)
 8007a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8007aa2:	0d5b      	lsrs	r3, r3, #21
 8007aa4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007aa8:	fb02 f303 	mul.w	r3, r2, r3
 8007aac:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ab6:	d112      	bne.n	8007ade <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	9300      	str	r3, [sp, #0]
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	2180      	movs	r1, #128	; 0x80
 8007ac2:	68f8      	ldr	r0, [r7, #12]
 8007ac4:	f7ff ff78 	bl	80079b8 <SPI_WaitFlagStateUntilTimeout>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d016      	beq.n	8007afc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ad2:	f043 0220 	orr.w	r2, r3, #32
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007ada:	2303      	movs	r3, #3
 8007adc:	e00f      	b.n	8007afe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d00a      	beq.n	8007afa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	3b01      	subs	r3, #1
 8007ae8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007af4:	2b80      	cmp	r3, #128	; 0x80
 8007af6:	d0f2      	beq.n	8007ade <SPI_EndRxTxTransaction+0x52>
 8007af8:	e000      	b.n	8007afc <SPI_EndRxTxTransaction+0x70>
        break;
 8007afa:	bf00      	nop
  }

  return HAL_OK;
 8007afc:	2300      	movs	r3, #0
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3718      	adds	r7, #24
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop
 8007b08:	20000000 	.word	0x20000000
 8007b0c:	165e9f81 	.word	0x165e9f81

08007b10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b082      	sub	sp, #8
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d101      	bne.n	8007b22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b1e:	2301      	movs	r3, #1
 8007b20:	e01d      	b.n	8007b5e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b28:	b2db      	uxtb	r3, r3
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d106      	bne.n	8007b3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f7fa fdda 	bl	80026f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2202      	movs	r2, #2
 8007b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	3304      	adds	r3, #4
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	4610      	mov	r0, r2
 8007b50:	f000 fb10 	bl	8008174 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2201      	movs	r2, #1
 8007b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b5c:	2300      	movs	r3, #0
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3708      	adds	r7, #8
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}

08007b66 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007b66:	b480      	push	{r7}
 8007b68:	b085      	sub	sp, #20
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	68da      	ldr	r2, [r3, #12]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f042 0201 	orr.w	r2, r2, #1
 8007b7c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	f003 0307 	and.w	r3, r3, #7
 8007b88:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2b06      	cmp	r3, #6
 8007b8e:	d007      	beq.n	8007ba0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	681a      	ldr	r2, [r3, #0]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f042 0201 	orr.w	r2, r2, #1
 8007b9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007ba0:	2300      	movs	r3, #0
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3714      	adds	r7, #20
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr

08007bae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007bae:	b580      	push	{r7, lr}
 8007bb0:	b082      	sub	sp, #8
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d101      	bne.n	8007bc0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	e01d      	b.n	8007bfc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d106      	bne.n	8007bda <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 f815 	bl	8007c04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2202      	movs	r2, #2
 8007bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681a      	ldr	r2, [r3, #0]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	3304      	adds	r3, #4
 8007bea:	4619      	mov	r1, r3
 8007bec:	4610      	mov	r0, r2
 8007bee:	f000 fac1 	bl	8008174 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007bfa:	2300      	movs	r3, #0
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3708      	adds	r7, #8
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b083      	sub	sp, #12
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007c0c:	bf00      	nop
 8007c0e:	370c      	adds	r7, #12
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr

08007c18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b082      	sub	sp, #8
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	691b      	ldr	r3, [r3, #16]
 8007c26:	f003 0302 	and.w	r3, r3, #2
 8007c2a:	2b02      	cmp	r3, #2
 8007c2c:	d122      	bne.n	8007c74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	f003 0302 	and.w	r3, r3, #2
 8007c38:	2b02      	cmp	r3, #2
 8007c3a:	d11b      	bne.n	8007c74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f06f 0202 	mvn.w	r2, #2
 8007c44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2201      	movs	r2, #1
 8007c4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	699b      	ldr	r3, [r3, #24]
 8007c52:	f003 0303 	and.w	r3, r3, #3
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d003      	beq.n	8007c62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 fa6b 	bl	8008136 <HAL_TIM_IC_CaptureCallback>
 8007c60:	e005      	b.n	8007c6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 fa5d 	bl	8008122 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 fa6e 	bl	800814a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2200      	movs	r2, #0
 8007c72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	691b      	ldr	r3, [r3, #16]
 8007c7a:	f003 0304 	and.w	r3, r3, #4
 8007c7e:	2b04      	cmp	r3, #4
 8007c80:	d122      	bne.n	8007cc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	68db      	ldr	r3, [r3, #12]
 8007c88:	f003 0304 	and.w	r3, r3, #4
 8007c8c:	2b04      	cmp	r3, #4
 8007c8e:	d11b      	bne.n	8007cc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f06f 0204 	mvn.w	r2, #4
 8007c98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2202      	movs	r2, #2
 8007c9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	699b      	ldr	r3, [r3, #24]
 8007ca6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d003      	beq.n	8007cb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 fa41 	bl	8008136 <HAL_TIM_IC_CaptureCallback>
 8007cb4:	e005      	b.n	8007cc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 fa33 	bl	8008122 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f000 fa44 	bl	800814a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	691b      	ldr	r3, [r3, #16]
 8007cce:	f003 0308 	and.w	r3, r3, #8
 8007cd2:	2b08      	cmp	r3, #8
 8007cd4:	d122      	bne.n	8007d1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	68db      	ldr	r3, [r3, #12]
 8007cdc:	f003 0308 	and.w	r3, r3, #8
 8007ce0:	2b08      	cmp	r3, #8
 8007ce2:	d11b      	bne.n	8007d1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f06f 0208 	mvn.w	r2, #8
 8007cec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2204      	movs	r2, #4
 8007cf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	69db      	ldr	r3, [r3, #28]
 8007cfa:	f003 0303 	and.w	r3, r3, #3
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d003      	beq.n	8007d0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 fa17 	bl	8008136 <HAL_TIM_IC_CaptureCallback>
 8007d08:	e005      	b.n	8007d16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 fa09 	bl	8008122 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 fa1a 	bl	800814a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	691b      	ldr	r3, [r3, #16]
 8007d22:	f003 0310 	and.w	r3, r3, #16
 8007d26:	2b10      	cmp	r3, #16
 8007d28:	d122      	bne.n	8007d70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	68db      	ldr	r3, [r3, #12]
 8007d30:	f003 0310 	and.w	r3, r3, #16
 8007d34:	2b10      	cmp	r3, #16
 8007d36:	d11b      	bne.n	8007d70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f06f 0210 	mvn.w	r2, #16
 8007d40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2208      	movs	r2, #8
 8007d46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	69db      	ldr	r3, [r3, #28]
 8007d4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d003      	beq.n	8007d5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 f9ed 	bl	8008136 <HAL_TIM_IC_CaptureCallback>
 8007d5c:	e005      	b.n	8007d6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 f9df 	bl	8008122 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 f9f0 	bl	800814a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	691b      	ldr	r3, [r3, #16]
 8007d76:	f003 0301 	and.w	r3, r3, #1
 8007d7a:	2b01      	cmp	r3, #1
 8007d7c:	d10e      	bne.n	8007d9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	68db      	ldr	r3, [r3, #12]
 8007d84:	f003 0301 	and.w	r3, r3, #1
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d107      	bne.n	8007d9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f06f 0201 	mvn.w	r2, #1
 8007d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f7fa fac2 	bl	8002320 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	691b      	ldr	r3, [r3, #16]
 8007da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007da6:	2b80      	cmp	r3, #128	; 0x80
 8007da8:	d10e      	bne.n	8007dc8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	68db      	ldr	r3, [r3, #12]
 8007db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007db4:	2b80      	cmp	r3, #128	; 0x80
 8007db6:	d107      	bne.n	8007dc8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 fd46 	bl	8008854 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	691b      	ldr	r3, [r3, #16]
 8007dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dd2:	2b40      	cmp	r3, #64	; 0x40
 8007dd4:	d10e      	bne.n	8007df4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	68db      	ldr	r3, [r3, #12]
 8007ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007de0:	2b40      	cmp	r3, #64	; 0x40
 8007de2:	d107      	bne.n	8007df4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 f9b5 	bl	800815e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	691b      	ldr	r3, [r3, #16]
 8007dfa:	f003 0320 	and.w	r3, r3, #32
 8007dfe:	2b20      	cmp	r3, #32
 8007e00:	d10e      	bne.n	8007e20 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	68db      	ldr	r3, [r3, #12]
 8007e08:	f003 0320 	and.w	r3, r3, #32
 8007e0c:	2b20      	cmp	r3, #32
 8007e0e:	d107      	bne.n	8007e20 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f06f 0220 	mvn.w	r2, #32
 8007e18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f000 fd10 	bl	8008840 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007e20:	bf00      	nop
 8007e22:	3708      	adds	r7, #8
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b084      	sub	sp, #16
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	60f8      	str	r0, [r7, #12]
 8007e30:	60b9      	str	r1, [r7, #8]
 8007e32:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d101      	bne.n	8007e42 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007e3e:	2302      	movs	r3, #2
 8007e40:	e0b4      	b.n	8007fac <HAL_TIM_PWM_ConfigChannel+0x184>
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2201      	movs	r2, #1
 8007e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2202      	movs	r2, #2
 8007e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2b0c      	cmp	r3, #12
 8007e56:	f200 809f 	bhi.w	8007f98 <HAL_TIM_PWM_ConfigChannel+0x170>
 8007e5a:	a201      	add	r2, pc, #4	; (adr r2, 8007e60 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e60:	08007e95 	.word	0x08007e95
 8007e64:	08007f99 	.word	0x08007f99
 8007e68:	08007f99 	.word	0x08007f99
 8007e6c:	08007f99 	.word	0x08007f99
 8007e70:	08007ed5 	.word	0x08007ed5
 8007e74:	08007f99 	.word	0x08007f99
 8007e78:	08007f99 	.word	0x08007f99
 8007e7c:	08007f99 	.word	0x08007f99
 8007e80:	08007f17 	.word	0x08007f17
 8007e84:	08007f99 	.word	0x08007f99
 8007e88:	08007f99 	.word	0x08007f99
 8007e8c:	08007f99 	.word	0x08007f99
 8007e90:	08007f57 	.word	0x08007f57
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	68b9      	ldr	r1, [r7, #8]
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f000 fa0a 	bl	80082b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	699a      	ldr	r2, [r3, #24]
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f042 0208 	orr.w	r2, r2, #8
 8007eae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	699a      	ldr	r2, [r3, #24]
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f022 0204 	bic.w	r2, r2, #4
 8007ebe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	6999      	ldr	r1, [r3, #24]
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	691a      	ldr	r2, [r3, #16]
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	430a      	orrs	r2, r1
 8007ed0:	619a      	str	r2, [r3, #24]
      break;
 8007ed2:	e062      	b.n	8007f9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	68b9      	ldr	r1, [r7, #8]
 8007eda:	4618      	mov	r0, r3
 8007edc:	f000 fa5a 	bl	8008394 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	699a      	ldr	r2, [r3, #24]
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007eee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	699a      	ldr	r2, [r3, #24]
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007efe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	6999      	ldr	r1, [r3, #24]
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	691b      	ldr	r3, [r3, #16]
 8007f0a:	021a      	lsls	r2, r3, #8
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	430a      	orrs	r2, r1
 8007f12:	619a      	str	r2, [r3, #24]
      break;
 8007f14:	e041      	b.n	8007f9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	68b9      	ldr	r1, [r7, #8]
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f000 faaf 	bl	8008480 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	69da      	ldr	r2, [r3, #28]
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f042 0208 	orr.w	r2, r2, #8
 8007f30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	69da      	ldr	r2, [r3, #28]
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f022 0204 	bic.w	r2, r2, #4
 8007f40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	69d9      	ldr	r1, [r3, #28]
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	691a      	ldr	r2, [r3, #16]
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	430a      	orrs	r2, r1
 8007f52:	61da      	str	r2, [r3, #28]
      break;
 8007f54:	e021      	b.n	8007f9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	68b9      	ldr	r1, [r7, #8]
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f000 fb03 	bl	8008568 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	69da      	ldr	r2, [r3, #28]
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	69da      	ldr	r2, [r3, #28]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	69d9      	ldr	r1, [r3, #28]
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	691b      	ldr	r3, [r3, #16]
 8007f8c:	021a      	lsls	r2, r3, #8
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	430a      	orrs	r2, r1
 8007f94:	61da      	str	r2, [r3, #28]
      break;
 8007f96:	e000      	b.n	8007f9a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8007f98:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007faa:	2300      	movs	r3, #0
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3710      	adds	r7, #16
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b084      	sub	sp, #16
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d101      	bne.n	8007fcc <HAL_TIM_ConfigClockSource+0x18>
 8007fc8:	2302      	movs	r3, #2
 8007fca:	e0a6      	b.n	800811a <HAL_TIM_ConfigClockSource+0x166>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2202      	movs	r2, #2
 8007fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	689b      	ldr	r3, [r3, #8]
 8007fe2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007fea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ff2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	68fa      	ldr	r2, [r7, #12]
 8007ffa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	2b40      	cmp	r3, #64	; 0x40
 8008002:	d067      	beq.n	80080d4 <HAL_TIM_ConfigClockSource+0x120>
 8008004:	2b40      	cmp	r3, #64	; 0x40
 8008006:	d80b      	bhi.n	8008020 <HAL_TIM_ConfigClockSource+0x6c>
 8008008:	2b10      	cmp	r3, #16
 800800a:	d073      	beq.n	80080f4 <HAL_TIM_ConfigClockSource+0x140>
 800800c:	2b10      	cmp	r3, #16
 800800e:	d802      	bhi.n	8008016 <HAL_TIM_ConfigClockSource+0x62>
 8008010:	2b00      	cmp	r3, #0
 8008012:	d06f      	beq.n	80080f4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008014:	e078      	b.n	8008108 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008016:	2b20      	cmp	r3, #32
 8008018:	d06c      	beq.n	80080f4 <HAL_TIM_ConfigClockSource+0x140>
 800801a:	2b30      	cmp	r3, #48	; 0x30
 800801c:	d06a      	beq.n	80080f4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800801e:	e073      	b.n	8008108 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008020:	2b70      	cmp	r3, #112	; 0x70
 8008022:	d00d      	beq.n	8008040 <HAL_TIM_ConfigClockSource+0x8c>
 8008024:	2b70      	cmp	r3, #112	; 0x70
 8008026:	d804      	bhi.n	8008032 <HAL_TIM_ConfigClockSource+0x7e>
 8008028:	2b50      	cmp	r3, #80	; 0x50
 800802a:	d033      	beq.n	8008094 <HAL_TIM_ConfigClockSource+0xe0>
 800802c:	2b60      	cmp	r3, #96	; 0x60
 800802e:	d041      	beq.n	80080b4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8008030:	e06a      	b.n	8008108 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008032:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008036:	d066      	beq.n	8008106 <HAL_TIM_ConfigClockSource+0x152>
 8008038:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800803c:	d017      	beq.n	800806e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800803e:	e063      	b.n	8008108 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6818      	ldr	r0, [r3, #0]
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	6899      	ldr	r1, [r3, #8]
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	685a      	ldr	r2, [r3, #4]
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	68db      	ldr	r3, [r3, #12]
 8008050:	f000 fb5a 	bl	8008708 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	689b      	ldr	r3, [r3, #8]
 800805a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008062:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	68fa      	ldr	r2, [r7, #12]
 800806a:	609a      	str	r2, [r3, #8]
      break;
 800806c:	e04c      	b.n	8008108 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6818      	ldr	r0, [r3, #0]
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	6899      	ldr	r1, [r3, #8]
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	685a      	ldr	r2, [r3, #4]
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	68db      	ldr	r3, [r3, #12]
 800807e:	f000 fb43 	bl	8008708 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	689a      	ldr	r2, [r3, #8]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008090:	609a      	str	r2, [r3, #8]
      break;
 8008092:	e039      	b.n	8008108 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6818      	ldr	r0, [r3, #0]
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	6859      	ldr	r1, [r3, #4]
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	68db      	ldr	r3, [r3, #12]
 80080a0:	461a      	mov	r2, r3
 80080a2:	f000 fab7 	bl	8008614 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	2150      	movs	r1, #80	; 0x50
 80080ac:	4618      	mov	r0, r3
 80080ae:	f000 fb10 	bl	80086d2 <TIM_ITRx_SetConfig>
      break;
 80080b2:	e029      	b.n	8008108 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6818      	ldr	r0, [r3, #0]
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	6859      	ldr	r1, [r3, #4]
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	68db      	ldr	r3, [r3, #12]
 80080c0:	461a      	mov	r2, r3
 80080c2:	f000 fad6 	bl	8008672 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	2160      	movs	r1, #96	; 0x60
 80080cc:	4618      	mov	r0, r3
 80080ce:	f000 fb00 	bl	80086d2 <TIM_ITRx_SetConfig>
      break;
 80080d2:	e019      	b.n	8008108 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6818      	ldr	r0, [r3, #0]
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	6859      	ldr	r1, [r3, #4]
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	68db      	ldr	r3, [r3, #12]
 80080e0:	461a      	mov	r2, r3
 80080e2:	f000 fa97 	bl	8008614 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	2140      	movs	r1, #64	; 0x40
 80080ec:	4618      	mov	r0, r3
 80080ee:	f000 faf0 	bl	80086d2 <TIM_ITRx_SetConfig>
      break;
 80080f2:	e009      	b.n	8008108 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681a      	ldr	r2, [r3, #0]
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4619      	mov	r1, r3
 80080fe:	4610      	mov	r0, r2
 8008100:	f000 fae7 	bl	80086d2 <TIM_ITRx_SetConfig>
      break;
 8008104:	e000      	b.n	8008108 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8008106:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2201      	movs	r2, #1
 800810c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2200      	movs	r2, #0
 8008114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008118:	2300      	movs	r3, #0
}
 800811a:	4618      	mov	r0, r3
 800811c:	3710      	adds	r7, #16
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}

08008122 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008122:	b480      	push	{r7}
 8008124:	b083      	sub	sp, #12
 8008126:	af00      	add	r7, sp, #0
 8008128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800812a:	bf00      	nop
 800812c:	370c      	adds	r7, #12
 800812e:	46bd      	mov	sp, r7
 8008130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008134:	4770      	bx	lr

08008136 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008136:	b480      	push	{r7}
 8008138:	b083      	sub	sp, #12
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800813e:	bf00      	nop
 8008140:	370c      	adds	r7, #12
 8008142:	46bd      	mov	sp, r7
 8008144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008148:	4770      	bx	lr

0800814a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800814a:	b480      	push	{r7}
 800814c:	b083      	sub	sp, #12
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008152:	bf00      	nop
 8008154:	370c      	adds	r7, #12
 8008156:	46bd      	mov	sp, r7
 8008158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815c:	4770      	bx	lr

0800815e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800815e:	b480      	push	{r7}
 8008160:	b083      	sub	sp, #12
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008166:	bf00      	nop
 8008168:	370c      	adds	r7, #12
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr
	...

08008174 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008174:	b480      	push	{r7}
 8008176:	b085      	sub	sp, #20
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	4a40      	ldr	r2, [pc, #256]	; (8008288 <TIM_Base_SetConfig+0x114>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d013      	beq.n	80081b4 <TIM_Base_SetConfig+0x40>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008192:	d00f      	beq.n	80081b4 <TIM_Base_SetConfig+0x40>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	4a3d      	ldr	r2, [pc, #244]	; (800828c <TIM_Base_SetConfig+0x118>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d00b      	beq.n	80081b4 <TIM_Base_SetConfig+0x40>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	4a3c      	ldr	r2, [pc, #240]	; (8008290 <TIM_Base_SetConfig+0x11c>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d007      	beq.n	80081b4 <TIM_Base_SetConfig+0x40>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	4a3b      	ldr	r2, [pc, #236]	; (8008294 <TIM_Base_SetConfig+0x120>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d003      	beq.n	80081b4 <TIM_Base_SetConfig+0x40>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	4a3a      	ldr	r2, [pc, #232]	; (8008298 <TIM_Base_SetConfig+0x124>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d108      	bne.n	80081c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	68fa      	ldr	r2, [r7, #12]
 80081c2:	4313      	orrs	r3, r2
 80081c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	4a2f      	ldr	r2, [pc, #188]	; (8008288 <TIM_Base_SetConfig+0x114>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d02b      	beq.n	8008226 <TIM_Base_SetConfig+0xb2>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081d4:	d027      	beq.n	8008226 <TIM_Base_SetConfig+0xb2>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	4a2c      	ldr	r2, [pc, #176]	; (800828c <TIM_Base_SetConfig+0x118>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d023      	beq.n	8008226 <TIM_Base_SetConfig+0xb2>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	4a2b      	ldr	r2, [pc, #172]	; (8008290 <TIM_Base_SetConfig+0x11c>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d01f      	beq.n	8008226 <TIM_Base_SetConfig+0xb2>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	4a2a      	ldr	r2, [pc, #168]	; (8008294 <TIM_Base_SetConfig+0x120>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d01b      	beq.n	8008226 <TIM_Base_SetConfig+0xb2>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	4a29      	ldr	r2, [pc, #164]	; (8008298 <TIM_Base_SetConfig+0x124>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d017      	beq.n	8008226 <TIM_Base_SetConfig+0xb2>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	4a28      	ldr	r2, [pc, #160]	; (800829c <TIM_Base_SetConfig+0x128>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d013      	beq.n	8008226 <TIM_Base_SetConfig+0xb2>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	4a27      	ldr	r2, [pc, #156]	; (80082a0 <TIM_Base_SetConfig+0x12c>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d00f      	beq.n	8008226 <TIM_Base_SetConfig+0xb2>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	4a26      	ldr	r2, [pc, #152]	; (80082a4 <TIM_Base_SetConfig+0x130>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d00b      	beq.n	8008226 <TIM_Base_SetConfig+0xb2>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	4a25      	ldr	r2, [pc, #148]	; (80082a8 <TIM_Base_SetConfig+0x134>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d007      	beq.n	8008226 <TIM_Base_SetConfig+0xb2>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	4a24      	ldr	r2, [pc, #144]	; (80082ac <TIM_Base_SetConfig+0x138>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d003      	beq.n	8008226 <TIM_Base_SetConfig+0xb2>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	4a23      	ldr	r2, [pc, #140]	; (80082b0 <TIM_Base_SetConfig+0x13c>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d108      	bne.n	8008238 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800822c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	68db      	ldr	r3, [r3, #12]
 8008232:	68fa      	ldr	r2, [r7, #12]
 8008234:	4313      	orrs	r3, r2
 8008236:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	695b      	ldr	r3, [r3, #20]
 8008242:	4313      	orrs	r3, r2
 8008244:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	68fa      	ldr	r2, [r7, #12]
 800824a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	689a      	ldr	r2, [r3, #8]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	4a0a      	ldr	r2, [pc, #40]	; (8008288 <TIM_Base_SetConfig+0x114>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d003      	beq.n	800826c <TIM_Base_SetConfig+0xf8>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	4a0c      	ldr	r2, [pc, #48]	; (8008298 <TIM_Base_SetConfig+0x124>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d103      	bne.n	8008274 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	691a      	ldr	r2, [r3, #16]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2201      	movs	r2, #1
 8008278:	615a      	str	r2, [r3, #20]
}
 800827a:	bf00      	nop
 800827c:	3714      	adds	r7, #20
 800827e:	46bd      	mov	sp, r7
 8008280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008284:	4770      	bx	lr
 8008286:	bf00      	nop
 8008288:	40010000 	.word	0x40010000
 800828c:	40000400 	.word	0x40000400
 8008290:	40000800 	.word	0x40000800
 8008294:	40000c00 	.word	0x40000c00
 8008298:	40010400 	.word	0x40010400
 800829c:	40014000 	.word	0x40014000
 80082a0:	40014400 	.word	0x40014400
 80082a4:	40014800 	.word	0x40014800
 80082a8:	40001800 	.word	0x40001800
 80082ac:	40001c00 	.word	0x40001c00
 80082b0:	40002000 	.word	0x40002000

080082b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b087      	sub	sp, #28
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6a1b      	ldr	r3, [r3, #32]
 80082c2:	f023 0201 	bic.w	r2, r3, #1
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6a1b      	ldr	r3, [r3, #32]
 80082ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	699b      	ldr	r3, [r3, #24]
 80082da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f023 0303 	bic.w	r3, r3, #3
 80082ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	68fa      	ldr	r2, [r7, #12]
 80082f2:	4313      	orrs	r3, r2
 80082f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	f023 0302 	bic.w	r3, r3, #2
 80082fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	689b      	ldr	r3, [r3, #8]
 8008302:	697a      	ldr	r2, [r7, #20]
 8008304:	4313      	orrs	r3, r2
 8008306:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	4a20      	ldr	r2, [pc, #128]	; (800838c <TIM_OC1_SetConfig+0xd8>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d003      	beq.n	8008318 <TIM_OC1_SetConfig+0x64>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	4a1f      	ldr	r2, [pc, #124]	; (8008390 <TIM_OC1_SetConfig+0xdc>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d10c      	bne.n	8008332 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	f023 0308 	bic.w	r3, r3, #8
 800831e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	68db      	ldr	r3, [r3, #12]
 8008324:	697a      	ldr	r2, [r7, #20]
 8008326:	4313      	orrs	r3, r2
 8008328:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	f023 0304 	bic.w	r3, r3, #4
 8008330:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	4a15      	ldr	r2, [pc, #84]	; (800838c <TIM_OC1_SetConfig+0xd8>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d003      	beq.n	8008342 <TIM_OC1_SetConfig+0x8e>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	4a14      	ldr	r2, [pc, #80]	; (8008390 <TIM_OC1_SetConfig+0xdc>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d111      	bne.n	8008366 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008348:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008350:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	695b      	ldr	r3, [r3, #20]
 8008356:	693a      	ldr	r2, [r7, #16]
 8008358:	4313      	orrs	r3, r2
 800835a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	699b      	ldr	r3, [r3, #24]
 8008360:	693a      	ldr	r2, [r7, #16]
 8008362:	4313      	orrs	r3, r2
 8008364:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	693a      	ldr	r2, [r7, #16]
 800836a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	68fa      	ldr	r2, [r7, #12]
 8008370:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	685a      	ldr	r2, [r3, #4]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	697a      	ldr	r2, [r7, #20]
 800837e:	621a      	str	r2, [r3, #32]
}
 8008380:	bf00      	nop
 8008382:	371c      	adds	r7, #28
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr
 800838c:	40010000 	.word	0x40010000
 8008390:	40010400 	.word	0x40010400

08008394 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008394:	b480      	push	{r7}
 8008396:	b087      	sub	sp, #28
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6a1b      	ldr	r3, [r3, #32]
 80083a2:	f023 0210 	bic.w	r2, r3, #16
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6a1b      	ldr	r3, [r3, #32]
 80083ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	699b      	ldr	r3, [r3, #24]
 80083ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	021b      	lsls	r3, r3, #8
 80083d2:	68fa      	ldr	r2, [r7, #12]
 80083d4:	4313      	orrs	r3, r2
 80083d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	f023 0320 	bic.w	r3, r3, #32
 80083de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	689b      	ldr	r3, [r3, #8]
 80083e4:	011b      	lsls	r3, r3, #4
 80083e6:	697a      	ldr	r2, [r7, #20]
 80083e8:	4313      	orrs	r3, r2
 80083ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	4a22      	ldr	r2, [pc, #136]	; (8008478 <TIM_OC2_SetConfig+0xe4>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d003      	beq.n	80083fc <TIM_OC2_SetConfig+0x68>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	4a21      	ldr	r2, [pc, #132]	; (800847c <TIM_OC2_SetConfig+0xe8>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d10d      	bne.n	8008418 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008402:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	68db      	ldr	r3, [r3, #12]
 8008408:	011b      	lsls	r3, r3, #4
 800840a:	697a      	ldr	r2, [r7, #20]
 800840c:	4313      	orrs	r3, r2
 800840e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008416:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	4a17      	ldr	r2, [pc, #92]	; (8008478 <TIM_OC2_SetConfig+0xe4>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d003      	beq.n	8008428 <TIM_OC2_SetConfig+0x94>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	4a16      	ldr	r2, [pc, #88]	; (800847c <TIM_OC2_SetConfig+0xe8>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d113      	bne.n	8008450 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800842e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008436:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	695b      	ldr	r3, [r3, #20]
 800843c:	009b      	lsls	r3, r3, #2
 800843e:	693a      	ldr	r2, [r7, #16]
 8008440:	4313      	orrs	r3, r2
 8008442:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	699b      	ldr	r3, [r3, #24]
 8008448:	009b      	lsls	r3, r3, #2
 800844a:	693a      	ldr	r2, [r7, #16]
 800844c:	4313      	orrs	r3, r2
 800844e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	693a      	ldr	r2, [r7, #16]
 8008454:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	68fa      	ldr	r2, [r7, #12]
 800845a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	685a      	ldr	r2, [r3, #4]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	697a      	ldr	r2, [r7, #20]
 8008468:	621a      	str	r2, [r3, #32]
}
 800846a:	bf00      	nop
 800846c:	371c      	adds	r7, #28
 800846e:	46bd      	mov	sp, r7
 8008470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008474:	4770      	bx	lr
 8008476:	bf00      	nop
 8008478:	40010000 	.word	0x40010000
 800847c:	40010400 	.word	0x40010400

08008480 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008480:	b480      	push	{r7}
 8008482:	b087      	sub	sp, #28
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
 8008488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6a1b      	ldr	r3, [r3, #32]
 800848e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6a1b      	ldr	r3, [r3, #32]
 800849a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	69db      	ldr	r3, [r3, #28]
 80084a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f023 0303 	bic.w	r3, r3, #3
 80084b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	68fa      	ldr	r2, [r7, #12]
 80084be:	4313      	orrs	r3, r2
 80084c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80084c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	021b      	lsls	r3, r3, #8
 80084d0:	697a      	ldr	r2, [r7, #20]
 80084d2:	4313      	orrs	r3, r2
 80084d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	4a21      	ldr	r2, [pc, #132]	; (8008560 <TIM_OC3_SetConfig+0xe0>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d003      	beq.n	80084e6 <TIM_OC3_SetConfig+0x66>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	4a20      	ldr	r2, [pc, #128]	; (8008564 <TIM_OC3_SetConfig+0xe4>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d10d      	bne.n	8008502 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80084ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	68db      	ldr	r3, [r3, #12]
 80084f2:	021b      	lsls	r3, r3, #8
 80084f4:	697a      	ldr	r2, [r7, #20]
 80084f6:	4313      	orrs	r3, r2
 80084f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008500:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	4a16      	ldr	r2, [pc, #88]	; (8008560 <TIM_OC3_SetConfig+0xe0>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d003      	beq.n	8008512 <TIM_OC3_SetConfig+0x92>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	4a15      	ldr	r2, [pc, #84]	; (8008564 <TIM_OC3_SetConfig+0xe4>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d113      	bne.n	800853a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008518:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008520:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	695b      	ldr	r3, [r3, #20]
 8008526:	011b      	lsls	r3, r3, #4
 8008528:	693a      	ldr	r2, [r7, #16]
 800852a:	4313      	orrs	r3, r2
 800852c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	699b      	ldr	r3, [r3, #24]
 8008532:	011b      	lsls	r3, r3, #4
 8008534:	693a      	ldr	r2, [r7, #16]
 8008536:	4313      	orrs	r3, r2
 8008538:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	693a      	ldr	r2, [r7, #16]
 800853e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	68fa      	ldr	r2, [r7, #12]
 8008544:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	685a      	ldr	r2, [r3, #4]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	697a      	ldr	r2, [r7, #20]
 8008552:	621a      	str	r2, [r3, #32]
}
 8008554:	bf00      	nop
 8008556:	371c      	adds	r7, #28
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr
 8008560:	40010000 	.word	0x40010000
 8008564:	40010400 	.word	0x40010400

08008568 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008568:	b480      	push	{r7}
 800856a:	b087      	sub	sp, #28
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6a1b      	ldr	r3, [r3, #32]
 8008576:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6a1b      	ldr	r3, [r3, #32]
 8008582:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	69db      	ldr	r3, [r3, #28]
 800858e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800859e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	021b      	lsls	r3, r3, #8
 80085a6:	68fa      	ldr	r2, [r7, #12]
 80085a8:	4313      	orrs	r3, r2
 80085aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80085b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	031b      	lsls	r3, r3, #12
 80085ba:	693a      	ldr	r2, [r7, #16]
 80085bc:	4313      	orrs	r3, r2
 80085be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	4a12      	ldr	r2, [pc, #72]	; (800860c <TIM_OC4_SetConfig+0xa4>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d003      	beq.n	80085d0 <TIM_OC4_SetConfig+0x68>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	4a11      	ldr	r2, [pc, #68]	; (8008610 <TIM_OC4_SetConfig+0xa8>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d109      	bne.n	80085e4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	695b      	ldr	r3, [r3, #20]
 80085dc:	019b      	lsls	r3, r3, #6
 80085de:	697a      	ldr	r2, [r7, #20]
 80085e0:	4313      	orrs	r3, r2
 80085e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	697a      	ldr	r2, [r7, #20]
 80085e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	68fa      	ldr	r2, [r7, #12]
 80085ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	685a      	ldr	r2, [r3, #4]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	693a      	ldr	r2, [r7, #16]
 80085fc:	621a      	str	r2, [r3, #32]
}
 80085fe:	bf00      	nop
 8008600:	371c      	adds	r7, #28
 8008602:	46bd      	mov	sp, r7
 8008604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008608:	4770      	bx	lr
 800860a:	bf00      	nop
 800860c:	40010000 	.word	0x40010000
 8008610:	40010400 	.word	0x40010400

08008614 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008614:	b480      	push	{r7}
 8008616:	b087      	sub	sp, #28
 8008618:	af00      	add	r7, sp, #0
 800861a:	60f8      	str	r0, [r7, #12]
 800861c:	60b9      	str	r1, [r7, #8]
 800861e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	6a1b      	ldr	r3, [r3, #32]
 8008624:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	6a1b      	ldr	r3, [r3, #32]
 800862a:	f023 0201 	bic.w	r2, r3, #1
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	699b      	ldr	r3, [r3, #24]
 8008636:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800863e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	011b      	lsls	r3, r3, #4
 8008644:	693a      	ldr	r2, [r7, #16]
 8008646:	4313      	orrs	r3, r2
 8008648:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	f023 030a 	bic.w	r3, r3, #10
 8008650:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008652:	697a      	ldr	r2, [r7, #20]
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	4313      	orrs	r3, r2
 8008658:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	693a      	ldr	r2, [r7, #16]
 800865e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	697a      	ldr	r2, [r7, #20]
 8008664:	621a      	str	r2, [r3, #32]
}
 8008666:	bf00      	nop
 8008668:	371c      	adds	r7, #28
 800866a:	46bd      	mov	sp, r7
 800866c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008670:	4770      	bx	lr

08008672 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008672:	b480      	push	{r7}
 8008674:	b087      	sub	sp, #28
 8008676:	af00      	add	r7, sp, #0
 8008678:	60f8      	str	r0, [r7, #12]
 800867a:	60b9      	str	r1, [r7, #8]
 800867c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	6a1b      	ldr	r3, [r3, #32]
 8008682:	f023 0210 	bic.w	r2, r3, #16
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	699b      	ldr	r3, [r3, #24]
 800868e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	6a1b      	ldr	r3, [r3, #32]
 8008694:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800869c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	031b      	lsls	r3, r3, #12
 80086a2:	697a      	ldr	r2, [r7, #20]
 80086a4:	4313      	orrs	r3, r2
 80086a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80086ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	011b      	lsls	r3, r3, #4
 80086b4:	693a      	ldr	r2, [r7, #16]
 80086b6:	4313      	orrs	r3, r2
 80086b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	697a      	ldr	r2, [r7, #20]
 80086be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	693a      	ldr	r2, [r7, #16]
 80086c4:	621a      	str	r2, [r3, #32]
}
 80086c6:	bf00      	nop
 80086c8:	371c      	adds	r7, #28
 80086ca:	46bd      	mov	sp, r7
 80086cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d0:	4770      	bx	lr

080086d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80086d2:	b480      	push	{r7}
 80086d4:	b085      	sub	sp, #20
 80086d6:	af00      	add	r7, sp, #0
 80086d8:	6078      	str	r0, [r7, #4]
 80086da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	689b      	ldr	r3, [r3, #8]
 80086e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80086ea:	683a      	ldr	r2, [r7, #0]
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	4313      	orrs	r3, r2
 80086f0:	f043 0307 	orr.w	r3, r3, #7
 80086f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	68fa      	ldr	r2, [r7, #12]
 80086fa:	609a      	str	r2, [r3, #8]
}
 80086fc:	bf00      	nop
 80086fe:	3714      	adds	r7, #20
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr

08008708 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008708:	b480      	push	{r7}
 800870a:	b087      	sub	sp, #28
 800870c:	af00      	add	r7, sp, #0
 800870e:	60f8      	str	r0, [r7, #12]
 8008710:	60b9      	str	r1, [r7, #8]
 8008712:	607a      	str	r2, [r7, #4]
 8008714:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	689b      	ldr	r3, [r3, #8]
 800871a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008722:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	021a      	lsls	r2, r3, #8
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	431a      	orrs	r2, r3
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	4313      	orrs	r3, r2
 8008730:	697a      	ldr	r2, [r7, #20]
 8008732:	4313      	orrs	r3, r2
 8008734:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	697a      	ldr	r2, [r7, #20]
 800873a:	609a      	str	r2, [r3, #8]
}
 800873c:	bf00      	nop
 800873e:	371c      	adds	r7, #28
 8008740:	46bd      	mov	sp, r7
 8008742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008746:	4770      	bx	lr

08008748 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008748:	b480      	push	{r7}
 800874a:	b085      	sub	sp, #20
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008758:	2b01      	cmp	r3, #1
 800875a:	d101      	bne.n	8008760 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800875c:	2302      	movs	r3, #2
 800875e:	e05a      	b.n	8008816 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2201      	movs	r2, #1
 8008764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2202      	movs	r2, #2
 800876c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	685b      	ldr	r3, [r3, #4]
 8008776:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	689b      	ldr	r3, [r3, #8]
 800877e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008786:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	68fa      	ldr	r2, [r7, #12]
 800878e:	4313      	orrs	r3, r2
 8008790:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	68fa      	ldr	r2, [r7, #12]
 8008798:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a21      	ldr	r2, [pc, #132]	; (8008824 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d022      	beq.n	80087ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087ac:	d01d      	beq.n	80087ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a1d      	ldr	r2, [pc, #116]	; (8008828 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d018      	beq.n	80087ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a1b      	ldr	r2, [pc, #108]	; (800882c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d013      	beq.n	80087ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a1a      	ldr	r2, [pc, #104]	; (8008830 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d00e      	beq.n	80087ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4a18      	ldr	r2, [pc, #96]	; (8008834 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d009      	beq.n	80087ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4a17      	ldr	r2, [pc, #92]	; (8008838 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d004      	beq.n	80087ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a15      	ldr	r2, [pc, #84]	; (800883c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d10c      	bne.n	8008804 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	68ba      	ldr	r2, [r7, #8]
 80087f8:	4313      	orrs	r3, r2
 80087fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	68ba      	ldr	r2, [r7, #8]
 8008802:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2201      	movs	r2, #1
 8008808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2200      	movs	r2, #0
 8008810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008814:	2300      	movs	r3, #0
}
 8008816:	4618      	mov	r0, r3
 8008818:	3714      	adds	r7, #20
 800881a:	46bd      	mov	sp, r7
 800881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008820:	4770      	bx	lr
 8008822:	bf00      	nop
 8008824:	40010000 	.word	0x40010000
 8008828:	40000400 	.word	0x40000400
 800882c:	40000800 	.word	0x40000800
 8008830:	40000c00 	.word	0x40000c00
 8008834:	40010400 	.word	0x40010400
 8008838:	40014000 	.word	0x40014000
 800883c:	40001800 	.word	0x40001800

08008840 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008840:	b480      	push	{r7}
 8008842:	b083      	sub	sp, #12
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008848:	bf00      	nop
 800884a:	370c      	adds	r7, #12
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr

08008854 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800885c:	bf00      	nop
 800885e:	370c      	adds	r7, #12
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d101      	bne.n	800887a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	e03f      	b.n	80088fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008880:	b2db      	uxtb	r3, r3
 8008882:	2b00      	cmp	r3, #0
 8008884:	d106      	bne.n	8008894 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2200      	movs	r2, #0
 800888a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f7f9 ffd0 	bl	8002834 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2224      	movs	r2, #36	; 0x24
 8008898:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	68da      	ldr	r2, [r3, #12]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80088aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 f829 	bl	8008904 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	691a      	ldr	r2, [r3, #16]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80088c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	695a      	ldr	r2, [r3, #20]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80088d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	68da      	ldr	r2, [r3, #12]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80088e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2200      	movs	r2, #0
 80088e6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2220      	movs	r2, #32
 80088ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2220      	movs	r2, #32
 80088f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80088f8:	2300      	movs	r3, #0
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3708      	adds	r7, #8
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}
	...

08008904 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008908:	b085      	sub	sp, #20
 800890a:	af00      	add	r7, sp, #0
 800890c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	691b      	ldr	r3, [r3, #16]
 8008914:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	68da      	ldr	r2, [r3, #12]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	430a      	orrs	r2, r1
 8008922:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	689a      	ldr	r2, [r3, #8]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	691b      	ldr	r3, [r3, #16]
 800892c:	431a      	orrs	r2, r3
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	695b      	ldr	r3, [r3, #20]
 8008932:	431a      	orrs	r2, r3
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	69db      	ldr	r3, [r3, #28]
 8008938:	4313      	orrs	r3, r2
 800893a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	68db      	ldr	r3, [r3, #12]
 8008942:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008946:	f023 030c 	bic.w	r3, r3, #12
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	6812      	ldr	r2, [r2, #0]
 800894e:	68f9      	ldr	r1, [r7, #12]
 8008950:	430b      	orrs	r3, r1
 8008952:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	695b      	ldr	r3, [r3, #20]
 800895a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	699a      	ldr	r2, [r3, #24]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	430a      	orrs	r2, r1
 8008968:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	69db      	ldr	r3, [r3, #28]
 800896e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008972:	f040 818b 	bne.w	8008c8c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4ac1      	ldr	r2, [pc, #772]	; (8008c80 <UART_SetConfig+0x37c>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d005      	beq.n	800898c <UART_SetConfig+0x88>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4abf      	ldr	r2, [pc, #764]	; (8008c84 <UART_SetConfig+0x380>)
 8008986:	4293      	cmp	r3, r2
 8008988:	f040 80bd 	bne.w	8008b06 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800898c:	f7fc fe52 	bl	8005634 <HAL_RCC_GetPCLK2Freq>
 8008990:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	461d      	mov	r5, r3
 8008996:	f04f 0600 	mov.w	r6, #0
 800899a:	46a8      	mov	r8, r5
 800899c:	46b1      	mov	r9, r6
 800899e:	eb18 0308 	adds.w	r3, r8, r8
 80089a2:	eb49 0409 	adc.w	r4, r9, r9
 80089a6:	4698      	mov	r8, r3
 80089a8:	46a1      	mov	r9, r4
 80089aa:	eb18 0805 	adds.w	r8, r8, r5
 80089ae:	eb49 0906 	adc.w	r9, r9, r6
 80089b2:	f04f 0100 	mov.w	r1, #0
 80089b6:	f04f 0200 	mov.w	r2, #0
 80089ba:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80089be:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80089c2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80089c6:	4688      	mov	r8, r1
 80089c8:	4691      	mov	r9, r2
 80089ca:	eb18 0005 	adds.w	r0, r8, r5
 80089ce:	eb49 0106 	adc.w	r1, r9, r6
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	685b      	ldr	r3, [r3, #4]
 80089d6:	461d      	mov	r5, r3
 80089d8:	f04f 0600 	mov.w	r6, #0
 80089dc:	196b      	adds	r3, r5, r5
 80089de:	eb46 0406 	adc.w	r4, r6, r6
 80089e2:	461a      	mov	r2, r3
 80089e4:	4623      	mov	r3, r4
 80089e6:	f7f8 f94f 	bl	8000c88 <__aeabi_uldivmod>
 80089ea:	4603      	mov	r3, r0
 80089ec:	460c      	mov	r4, r1
 80089ee:	461a      	mov	r2, r3
 80089f0:	4ba5      	ldr	r3, [pc, #660]	; (8008c88 <UART_SetConfig+0x384>)
 80089f2:	fba3 2302 	umull	r2, r3, r3, r2
 80089f6:	095b      	lsrs	r3, r3, #5
 80089f8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	461d      	mov	r5, r3
 8008a00:	f04f 0600 	mov.w	r6, #0
 8008a04:	46a9      	mov	r9, r5
 8008a06:	46b2      	mov	sl, r6
 8008a08:	eb19 0309 	adds.w	r3, r9, r9
 8008a0c:	eb4a 040a 	adc.w	r4, sl, sl
 8008a10:	4699      	mov	r9, r3
 8008a12:	46a2      	mov	sl, r4
 8008a14:	eb19 0905 	adds.w	r9, r9, r5
 8008a18:	eb4a 0a06 	adc.w	sl, sl, r6
 8008a1c:	f04f 0100 	mov.w	r1, #0
 8008a20:	f04f 0200 	mov.w	r2, #0
 8008a24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008a28:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008a2c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008a30:	4689      	mov	r9, r1
 8008a32:	4692      	mov	sl, r2
 8008a34:	eb19 0005 	adds.w	r0, r9, r5
 8008a38:	eb4a 0106 	adc.w	r1, sl, r6
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	461d      	mov	r5, r3
 8008a42:	f04f 0600 	mov.w	r6, #0
 8008a46:	196b      	adds	r3, r5, r5
 8008a48:	eb46 0406 	adc.w	r4, r6, r6
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	4623      	mov	r3, r4
 8008a50:	f7f8 f91a 	bl	8000c88 <__aeabi_uldivmod>
 8008a54:	4603      	mov	r3, r0
 8008a56:	460c      	mov	r4, r1
 8008a58:	461a      	mov	r2, r3
 8008a5a:	4b8b      	ldr	r3, [pc, #556]	; (8008c88 <UART_SetConfig+0x384>)
 8008a5c:	fba3 1302 	umull	r1, r3, r3, r2
 8008a60:	095b      	lsrs	r3, r3, #5
 8008a62:	2164      	movs	r1, #100	; 0x64
 8008a64:	fb01 f303 	mul.w	r3, r1, r3
 8008a68:	1ad3      	subs	r3, r2, r3
 8008a6a:	00db      	lsls	r3, r3, #3
 8008a6c:	3332      	adds	r3, #50	; 0x32
 8008a6e:	4a86      	ldr	r2, [pc, #536]	; (8008c88 <UART_SetConfig+0x384>)
 8008a70:	fba2 2303 	umull	r2, r3, r2, r3
 8008a74:	095b      	lsrs	r3, r3, #5
 8008a76:	005b      	lsls	r3, r3, #1
 8008a78:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008a7c:	4498      	add	r8, r3
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	461d      	mov	r5, r3
 8008a82:	f04f 0600 	mov.w	r6, #0
 8008a86:	46a9      	mov	r9, r5
 8008a88:	46b2      	mov	sl, r6
 8008a8a:	eb19 0309 	adds.w	r3, r9, r9
 8008a8e:	eb4a 040a 	adc.w	r4, sl, sl
 8008a92:	4699      	mov	r9, r3
 8008a94:	46a2      	mov	sl, r4
 8008a96:	eb19 0905 	adds.w	r9, r9, r5
 8008a9a:	eb4a 0a06 	adc.w	sl, sl, r6
 8008a9e:	f04f 0100 	mov.w	r1, #0
 8008aa2:	f04f 0200 	mov.w	r2, #0
 8008aa6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008aaa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008aae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008ab2:	4689      	mov	r9, r1
 8008ab4:	4692      	mov	sl, r2
 8008ab6:	eb19 0005 	adds.w	r0, r9, r5
 8008aba:	eb4a 0106 	adc.w	r1, sl, r6
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	685b      	ldr	r3, [r3, #4]
 8008ac2:	461d      	mov	r5, r3
 8008ac4:	f04f 0600 	mov.w	r6, #0
 8008ac8:	196b      	adds	r3, r5, r5
 8008aca:	eb46 0406 	adc.w	r4, r6, r6
 8008ace:	461a      	mov	r2, r3
 8008ad0:	4623      	mov	r3, r4
 8008ad2:	f7f8 f8d9 	bl	8000c88 <__aeabi_uldivmod>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	460c      	mov	r4, r1
 8008ada:	461a      	mov	r2, r3
 8008adc:	4b6a      	ldr	r3, [pc, #424]	; (8008c88 <UART_SetConfig+0x384>)
 8008ade:	fba3 1302 	umull	r1, r3, r3, r2
 8008ae2:	095b      	lsrs	r3, r3, #5
 8008ae4:	2164      	movs	r1, #100	; 0x64
 8008ae6:	fb01 f303 	mul.w	r3, r1, r3
 8008aea:	1ad3      	subs	r3, r2, r3
 8008aec:	00db      	lsls	r3, r3, #3
 8008aee:	3332      	adds	r3, #50	; 0x32
 8008af0:	4a65      	ldr	r2, [pc, #404]	; (8008c88 <UART_SetConfig+0x384>)
 8008af2:	fba2 2303 	umull	r2, r3, r2, r3
 8008af6:	095b      	lsrs	r3, r3, #5
 8008af8:	f003 0207 	and.w	r2, r3, #7
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4442      	add	r2, r8
 8008b02:	609a      	str	r2, [r3, #8]
 8008b04:	e26f      	b.n	8008fe6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008b06:	f7fc fd81 	bl	800560c <HAL_RCC_GetPCLK1Freq>
 8008b0a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	461d      	mov	r5, r3
 8008b10:	f04f 0600 	mov.w	r6, #0
 8008b14:	46a8      	mov	r8, r5
 8008b16:	46b1      	mov	r9, r6
 8008b18:	eb18 0308 	adds.w	r3, r8, r8
 8008b1c:	eb49 0409 	adc.w	r4, r9, r9
 8008b20:	4698      	mov	r8, r3
 8008b22:	46a1      	mov	r9, r4
 8008b24:	eb18 0805 	adds.w	r8, r8, r5
 8008b28:	eb49 0906 	adc.w	r9, r9, r6
 8008b2c:	f04f 0100 	mov.w	r1, #0
 8008b30:	f04f 0200 	mov.w	r2, #0
 8008b34:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008b38:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008b3c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008b40:	4688      	mov	r8, r1
 8008b42:	4691      	mov	r9, r2
 8008b44:	eb18 0005 	adds.w	r0, r8, r5
 8008b48:	eb49 0106 	adc.w	r1, r9, r6
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	461d      	mov	r5, r3
 8008b52:	f04f 0600 	mov.w	r6, #0
 8008b56:	196b      	adds	r3, r5, r5
 8008b58:	eb46 0406 	adc.w	r4, r6, r6
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	4623      	mov	r3, r4
 8008b60:	f7f8 f892 	bl	8000c88 <__aeabi_uldivmod>
 8008b64:	4603      	mov	r3, r0
 8008b66:	460c      	mov	r4, r1
 8008b68:	461a      	mov	r2, r3
 8008b6a:	4b47      	ldr	r3, [pc, #284]	; (8008c88 <UART_SetConfig+0x384>)
 8008b6c:	fba3 2302 	umull	r2, r3, r3, r2
 8008b70:	095b      	lsrs	r3, r3, #5
 8008b72:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	461d      	mov	r5, r3
 8008b7a:	f04f 0600 	mov.w	r6, #0
 8008b7e:	46a9      	mov	r9, r5
 8008b80:	46b2      	mov	sl, r6
 8008b82:	eb19 0309 	adds.w	r3, r9, r9
 8008b86:	eb4a 040a 	adc.w	r4, sl, sl
 8008b8a:	4699      	mov	r9, r3
 8008b8c:	46a2      	mov	sl, r4
 8008b8e:	eb19 0905 	adds.w	r9, r9, r5
 8008b92:	eb4a 0a06 	adc.w	sl, sl, r6
 8008b96:	f04f 0100 	mov.w	r1, #0
 8008b9a:	f04f 0200 	mov.w	r2, #0
 8008b9e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008ba2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008ba6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008baa:	4689      	mov	r9, r1
 8008bac:	4692      	mov	sl, r2
 8008bae:	eb19 0005 	adds.w	r0, r9, r5
 8008bb2:	eb4a 0106 	adc.w	r1, sl, r6
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	461d      	mov	r5, r3
 8008bbc:	f04f 0600 	mov.w	r6, #0
 8008bc0:	196b      	adds	r3, r5, r5
 8008bc2:	eb46 0406 	adc.w	r4, r6, r6
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	4623      	mov	r3, r4
 8008bca:	f7f8 f85d 	bl	8000c88 <__aeabi_uldivmod>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	460c      	mov	r4, r1
 8008bd2:	461a      	mov	r2, r3
 8008bd4:	4b2c      	ldr	r3, [pc, #176]	; (8008c88 <UART_SetConfig+0x384>)
 8008bd6:	fba3 1302 	umull	r1, r3, r3, r2
 8008bda:	095b      	lsrs	r3, r3, #5
 8008bdc:	2164      	movs	r1, #100	; 0x64
 8008bde:	fb01 f303 	mul.w	r3, r1, r3
 8008be2:	1ad3      	subs	r3, r2, r3
 8008be4:	00db      	lsls	r3, r3, #3
 8008be6:	3332      	adds	r3, #50	; 0x32
 8008be8:	4a27      	ldr	r2, [pc, #156]	; (8008c88 <UART_SetConfig+0x384>)
 8008bea:	fba2 2303 	umull	r2, r3, r2, r3
 8008bee:	095b      	lsrs	r3, r3, #5
 8008bf0:	005b      	lsls	r3, r3, #1
 8008bf2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008bf6:	4498      	add	r8, r3
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	461d      	mov	r5, r3
 8008bfc:	f04f 0600 	mov.w	r6, #0
 8008c00:	46a9      	mov	r9, r5
 8008c02:	46b2      	mov	sl, r6
 8008c04:	eb19 0309 	adds.w	r3, r9, r9
 8008c08:	eb4a 040a 	adc.w	r4, sl, sl
 8008c0c:	4699      	mov	r9, r3
 8008c0e:	46a2      	mov	sl, r4
 8008c10:	eb19 0905 	adds.w	r9, r9, r5
 8008c14:	eb4a 0a06 	adc.w	sl, sl, r6
 8008c18:	f04f 0100 	mov.w	r1, #0
 8008c1c:	f04f 0200 	mov.w	r2, #0
 8008c20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008c24:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008c28:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008c2c:	4689      	mov	r9, r1
 8008c2e:	4692      	mov	sl, r2
 8008c30:	eb19 0005 	adds.w	r0, r9, r5
 8008c34:	eb4a 0106 	adc.w	r1, sl, r6
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	461d      	mov	r5, r3
 8008c3e:	f04f 0600 	mov.w	r6, #0
 8008c42:	196b      	adds	r3, r5, r5
 8008c44:	eb46 0406 	adc.w	r4, r6, r6
 8008c48:	461a      	mov	r2, r3
 8008c4a:	4623      	mov	r3, r4
 8008c4c:	f7f8 f81c 	bl	8000c88 <__aeabi_uldivmod>
 8008c50:	4603      	mov	r3, r0
 8008c52:	460c      	mov	r4, r1
 8008c54:	461a      	mov	r2, r3
 8008c56:	4b0c      	ldr	r3, [pc, #48]	; (8008c88 <UART_SetConfig+0x384>)
 8008c58:	fba3 1302 	umull	r1, r3, r3, r2
 8008c5c:	095b      	lsrs	r3, r3, #5
 8008c5e:	2164      	movs	r1, #100	; 0x64
 8008c60:	fb01 f303 	mul.w	r3, r1, r3
 8008c64:	1ad3      	subs	r3, r2, r3
 8008c66:	00db      	lsls	r3, r3, #3
 8008c68:	3332      	adds	r3, #50	; 0x32
 8008c6a:	4a07      	ldr	r2, [pc, #28]	; (8008c88 <UART_SetConfig+0x384>)
 8008c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8008c70:	095b      	lsrs	r3, r3, #5
 8008c72:	f003 0207 	and.w	r2, r3, #7
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4442      	add	r2, r8
 8008c7c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8008c7e:	e1b2      	b.n	8008fe6 <UART_SetConfig+0x6e2>
 8008c80:	40011000 	.word	0x40011000
 8008c84:	40011400 	.word	0x40011400
 8008c88:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4ad7      	ldr	r2, [pc, #860]	; (8008ff0 <UART_SetConfig+0x6ec>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d005      	beq.n	8008ca2 <UART_SetConfig+0x39e>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	4ad6      	ldr	r2, [pc, #856]	; (8008ff4 <UART_SetConfig+0x6f0>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	f040 80d1 	bne.w	8008e44 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008ca2:	f7fc fcc7 	bl	8005634 <HAL_RCC_GetPCLK2Freq>
 8008ca6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	469a      	mov	sl, r3
 8008cac:	f04f 0b00 	mov.w	fp, #0
 8008cb0:	46d0      	mov	r8, sl
 8008cb2:	46d9      	mov	r9, fp
 8008cb4:	eb18 0308 	adds.w	r3, r8, r8
 8008cb8:	eb49 0409 	adc.w	r4, r9, r9
 8008cbc:	4698      	mov	r8, r3
 8008cbe:	46a1      	mov	r9, r4
 8008cc0:	eb18 080a 	adds.w	r8, r8, sl
 8008cc4:	eb49 090b 	adc.w	r9, r9, fp
 8008cc8:	f04f 0100 	mov.w	r1, #0
 8008ccc:	f04f 0200 	mov.w	r2, #0
 8008cd0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008cd4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008cd8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008cdc:	4688      	mov	r8, r1
 8008cde:	4691      	mov	r9, r2
 8008ce0:	eb1a 0508 	adds.w	r5, sl, r8
 8008ce4:	eb4b 0609 	adc.w	r6, fp, r9
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	685b      	ldr	r3, [r3, #4]
 8008cec:	4619      	mov	r1, r3
 8008cee:	f04f 0200 	mov.w	r2, #0
 8008cf2:	f04f 0300 	mov.w	r3, #0
 8008cf6:	f04f 0400 	mov.w	r4, #0
 8008cfa:	0094      	lsls	r4, r2, #2
 8008cfc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008d00:	008b      	lsls	r3, r1, #2
 8008d02:	461a      	mov	r2, r3
 8008d04:	4623      	mov	r3, r4
 8008d06:	4628      	mov	r0, r5
 8008d08:	4631      	mov	r1, r6
 8008d0a:	f7f7 ffbd 	bl	8000c88 <__aeabi_uldivmod>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	460c      	mov	r4, r1
 8008d12:	461a      	mov	r2, r3
 8008d14:	4bb8      	ldr	r3, [pc, #736]	; (8008ff8 <UART_SetConfig+0x6f4>)
 8008d16:	fba3 2302 	umull	r2, r3, r3, r2
 8008d1a:	095b      	lsrs	r3, r3, #5
 8008d1c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	469b      	mov	fp, r3
 8008d24:	f04f 0c00 	mov.w	ip, #0
 8008d28:	46d9      	mov	r9, fp
 8008d2a:	46e2      	mov	sl, ip
 8008d2c:	eb19 0309 	adds.w	r3, r9, r9
 8008d30:	eb4a 040a 	adc.w	r4, sl, sl
 8008d34:	4699      	mov	r9, r3
 8008d36:	46a2      	mov	sl, r4
 8008d38:	eb19 090b 	adds.w	r9, r9, fp
 8008d3c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008d40:	f04f 0100 	mov.w	r1, #0
 8008d44:	f04f 0200 	mov.w	r2, #0
 8008d48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008d4c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008d50:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008d54:	4689      	mov	r9, r1
 8008d56:	4692      	mov	sl, r2
 8008d58:	eb1b 0509 	adds.w	r5, fp, r9
 8008d5c:	eb4c 060a 	adc.w	r6, ip, sl
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	4619      	mov	r1, r3
 8008d66:	f04f 0200 	mov.w	r2, #0
 8008d6a:	f04f 0300 	mov.w	r3, #0
 8008d6e:	f04f 0400 	mov.w	r4, #0
 8008d72:	0094      	lsls	r4, r2, #2
 8008d74:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008d78:	008b      	lsls	r3, r1, #2
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	4623      	mov	r3, r4
 8008d7e:	4628      	mov	r0, r5
 8008d80:	4631      	mov	r1, r6
 8008d82:	f7f7 ff81 	bl	8000c88 <__aeabi_uldivmod>
 8008d86:	4603      	mov	r3, r0
 8008d88:	460c      	mov	r4, r1
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	4b9a      	ldr	r3, [pc, #616]	; (8008ff8 <UART_SetConfig+0x6f4>)
 8008d8e:	fba3 1302 	umull	r1, r3, r3, r2
 8008d92:	095b      	lsrs	r3, r3, #5
 8008d94:	2164      	movs	r1, #100	; 0x64
 8008d96:	fb01 f303 	mul.w	r3, r1, r3
 8008d9a:	1ad3      	subs	r3, r2, r3
 8008d9c:	011b      	lsls	r3, r3, #4
 8008d9e:	3332      	adds	r3, #50	; 0x32
 8008da0:	4a95      	ldr	r2, [pc, #596]	; (8008ff8 <UART_SetConfig+0x6f4>)
 8008da2:	fba2 2303 	umull	r2, r3, r2, r3
 8008da6:	095b      	lsrs	r3, r3, #5
 8008da8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008dac:	4498      	add	r8, r3
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	469b      	mov	fp, r3
 8008db2:	f04f 0c00 	mov.w	ip, #0
 8008db6:	46d9      	mov	r9, fp
 8008db8:	46e2      	mov	sl, ip
 8008dba:	eb19 0309 	adds.w	r3, r9, r9
 8008dbe:	eb4a 040a 	adc.w	r4, sl, sl
 8008dc2:	4699      	mov	r9, r3
 8008dc4:	46a2      	mov	sl, r4
 8008dc6:	eb19 090b 	adds.w	r9, r9, fp
 8008dca:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008dce:	f04f 0100 	mov.w	r1, #0
 8008dd2:	f04f 0200 	mov.w	r2, #0
 8008dd6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008dda:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008dde:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008de2:	4689      	mov	r9, r1
 8008de4:	4692      	mov	sl, r2
 8008de6:	eb1b 0509 	adds.w	r5, fp, r9
 8008dea:	eb4c 060a 	adc.w	r6, ip, sl
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	4619      	mov	r1, r3
 8008df4:	f04f 0200 	mov.w	r2, #0
 8008df8:	f04f 0300 	mov.w	r3, #0
 8008dfc:	f04f 0400 	mov.w	r4, #0
 8008e00:	0094      	lsls	r4, r2, #2
 8008e02:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008e06:	008b      	lsls	r3, r1, #2
 8008e08:	461a      	mov	r2, r3
 8008e0a:	4623      	mov	r3, r4
 8008e0c:	4628      	mov	r0, r5
 8008e0e:	4631      	mov	r1, r6
 8008e10:	f7f7 ff3a 	bl	8000c88 <__aeabi_uldivmod>
 8008e14:	4603      	mov	r3, r0
 8008e16:	460c      	mov	r4, r1
 8008e18:	461a      	mov	r2, r3
 8008e1a:	4b77      	ldr	r3, [pc, #476]	; (8008ff8 <UART_SetConfig+0x6f4>)
 8008e1c:	fba3 1302 	umull	r1, r3, r3, r2
 8008e20:	095b      	lsrs	r3, r3, #5
 8008e22:	2164      	movs	r1, #100	; 0x64
 8008e24:	fb01 f303 	mul.w	r3, r1, r3
 8008e28:	1ad3      	subs	r3, r2, r3
 8008e2a:	011b      	lsls	r3, r3, #4
 8008e2c:	3332      	adds	r3, #50	; 0x32
 8008e2e:	4a72      	ldr	r2, [pc, #456]	; (8008ff8 <UART_SetConfig+0x6f4>)
 8008e30:	fba2 2303 	umull	r2, r3, r2, r3
 8008e34:	095b      	lsrs	r3, r3, #5
 8008e36:	f003 020f 	and.w	r2, r3, #15
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4442      	add	r2, r8
 8008e40:	609a      	str	r2, [r3, #8]
 8008e42:	e0d0      	b.n	8008fe6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008e44:	f7fc fbe2 	bl	800560c <HAL_RCC_GetPCLK1Freq>
 8008e48:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	469a      	mov	sl, r3
 8008e4e:	f04f 0b00 	mov.w	fp, #0
 8008e52:	46d0      	mov	r8, sl
 8008e54:	46d9      	mov	r9, fp
 8008e56:	eb18 0308 	adds.w	r3, r8, r8
 8008e5a:	eb49 0409 	adc.w	r4, r9, r9
 8008e5e:	4698      	mov	r8, r3
 8008e60:	46a1      	mov	r9, r4
 8008e62:	eb18 080a 	adds.w	r8, r8, sl
 8008e66:	eb49 090b 	adc.w	r9, r9, fp
 8008e6a:	f04f 0100 	mov.w	r1, #0
 8008e6e:	f04f 0200 	mov.w	r2, #0
 8008e72:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008e76:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008e7a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008e7e:	4688      	mov	r8, r1
 8008e80:	4691      	mov	r9, r2
 8008e82:	eb1a 0508 	adds.w	r5, sl, r8
 8008e86:	eb4b 0609 	adc.w	r6, fp, r9
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	4619      	mov	r1, r3
 8008e90:	f04f 0200 	mov.w	r2, #0
 8008e94:	f04f 0300 	mov.w	r3, #0
 8008e98:	f04f 0400 	mov.w	r4, #0
 8008e9c:	0094      	lsls	r4, r2, #2
 8008e9e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008ea2:	008b      	lsls	r3, r1, #2
 8008ea4:	461a      	mov	r2, r3
 8008ea6:	4623      	mov	r3, r4
 8008ea8:	4628      	mov	r0, r5
 8008eaa:	4631      	mov	r1, r6
 8008eac:	f7f7 feec 	bl	8000c88 <__aeabi_uldivmod>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	460c      	mov	r4, r1
 8008eb4:	461a      	mov	r2, r3
 8008eb6:	4b50      	ldr	r3, [pc, #320]	; (8008ff8 <UART_SetConfig+0x6f4>)
 8008eb8:	fba3 2302 	umull	r2, r3, r3, r2
 8008ebc:	095b      	lsrs	r3, r3, #5
 8008ebe:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	469b      	mov	fp, r3
 8008ec6:	f04f 0c00 	mov.w	ip, #0
 8008eca:	46d9      	mov	r9, fp
 8008ecc:	46e2      	mov	sl, ip
 8008ece:	eb19 0309 	adds.w	r3, r9, r9
 8008ed2:	eb4a 040a 	adc.w	r4, sl, sl
 8008ed6:	4699      	mov	r9, r3
 8008ed8:	46a2      	mov	sl, r4
 8008eda:	eb19 090b 	adds.w	r9, r9, fp
 8008ede:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008ee2:	f04f 0100 	mov.w	r1, #0
 8008ee6:	f04f 0200 	mov.w	r2, #0
 8008eea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008eee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008ef2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008ef6:	4689      	mov	r9, r1
 8008ef8:	4692      	mov	sl, r2
 8008efa:	eb1b 0509 	adds.w	r5, fp, r9
 8008efe:	eb4c 060a 	adc.w	r6, ip, sl
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	4619      	mov	r1, r3
 8008f08:	f04f 0200 	mov.w	r2, #0
 8008f0c:	f04f 0300 	mov.w	r3, #0
 8008f10:	f04f 0400 	mov.w	r4, #0
 8008f14:	0094      	lsls	r4, r2, #2
 8008f16:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008f1a:	008b      	lsls	r3, r1, #2
 8008f1c:	461a      	mov	r2, r3
 8008f1e:	4623      	mov	r3, r4
 8008f20:	4628      	mov	r0, r5
 8008f22:	4631      	mov	r1, r6
 8008f24:	f7f7 feb0 	bl	8000c88 <__aeabi_uldivmod>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	460c      	mov	r4, r1
 8008f2c:	461a      	mov	r2, r3
 8008f2e:	4b32      	ldr	r3, [pc, #200]	; (8008ff8 <UART_SetConfig+0x6f4>)
 8008f30:	fba3 1302 	umull	r1, r3, r3, r2
 8008f34:	095b      	lsrs	r3, r3, #5
 8008f36:	2164      	movs	r1, #100	; 0x64
 8008f38:	fb01 f303 	mul.w	r3, r1, r3
 8008f3c:	1ad3      	subs	r3, r2, r3
 8008f3e:	011b      	lsls	r3, r3, #4
 8008f40:	3332      	adds	r3, #50	; 0x32
 8008f42:	4a2d      	ldr	r2, [pc, #180]	; (8008ff8 <UART_SetConfig+0x6f4>)
 8008f44:	fba2 2303 	umull	r2, r3, r2, r3
 8008f48:	095b      	lsrs	r3, r3, #5
 8008f4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008f4e:	4498      	add	r8, r3
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	469b      	mov	fp, r3
 8008f54:	f04f 0c00 	mov.w	ip, #0
 8008f58:	46d9      	mov	r9, fp
 8008f5a:	46e2      	mov	sl, ip
 8008f5c:	eb19 0309 	adds.w	r3, r9, r9
 8008f60:	eb4a 040a 	adc.w	r4, sl, sl
 8008f64:	4699      	mov	r9, r3
 8008f66:	46a2      	mov	sl, r4
 8008f68:	eb19 090b 	adds.w	r9, r9, fp
 8008f6c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008f70:	f04f 0100 	mov.w	r1, #0
 8008f74:	f04f 0200 	mov.w	r2, #0
 8008f78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008f7c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008f80:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008f84:	4689      	mov	r9, r1
 8008f86:	4692      	mov	sl, r2
 8008f88:	eb1b 0509 	adds.w	r5, fp, r9
 8008f8c:	eb4c 060a 	adc.w	r6, ip, sl
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	4619      	mov	r1, r3
 8008f96:	f04f 0200 	mov.w	r2, #0
 8008f9a:	f04f 0300 	mov.w	r3, #0
 8008f9e:	f04f 0400 	mov.w	r4, #0
 8008fa2:	0094      	lsls	r4, r2, #2
 8008fa4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008fa8:	008b      	lsls	r3, r1, #2
 8008faa:	461a      	mov	r2, r3
 8008fac:	4623      	mov	r3, r4
 8008fae:	4628      	mov	r0, r5
 8008fb0:	4631      	mov	r1, r6
 8008fb2:	f7f7 fe69 	bl	8000c88 <__aeabi_uldivmod>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	460c      	mov	r4, r1
 8008fba:	461a      	mov	r2, r3
 8008fbc:	4b0e      	ldr	r3, [pc, #56]	; (8008ff8 <UART_SetConfig+0x6f4>)
 8008fbe:	fba3 1302 	umull	r1, r3, r3, r2
 8008fc2:	095b      	lsrs	r3, r3, #5
 8008fc4:	2164      	movs	r1, #100	; 0x64
 8008fc6:	fb01 f303 	mul.w	r3, r1, r3
 8008fca:	1ad3      	subs	r3, r2, r3
 8008fcc:	011b      	lsls	r3, r3, #4
 8008fce:	3332      	adds	r3, #50	; 0x32
 8008fd0:	4a09      	ldr	r2, [pc, #36]	; (8008ff8 <UART_SetConfig+0x6f4>)
 8008fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8008fd6:	095b      	lsrs	r3, r3, #5
 8008fd8:	f003 020f 	and.w	r2, r3, #15
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4442      	add	r2, r8
 8008fe2:	609a      	str	r2, [r3, #8]
}
 8008fe4:	e7ff      	b.n	8008fe6 <UART_SetConfig+0x6e2>
 8008fe6:	bf00      	nop
 8008fe8:	3714      	adds	r7, #20
 8008fea:	46bd      	mov	sp, r7
 8008fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ff0:	40011000 	.word	0x40011000
 8008ff4:	40011400 	.word	0x40011400
 8008ff8:	51eb851f 	.word	0x51eb851f

08008ffc <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8008ffc:	b084      	sub	sp, #16
 8008ffe:	b480      	push	{r7}
 8009000:	b085      	sub	sp, #20
 8009002:	af00      	add	r7, sp, #0
 8009004:	6078      	str	r0, [r7, #4]
 8009006:	f107 001c 	add.w	r0, r7, #28
 800900a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800900e:	2300      	movs	r3, #0
 8009010:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8009012:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009014:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009016:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800901a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800901c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800901e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8009022:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8009026:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009028:	68fa      	ldr	r2, [r7, #12]
 800902a:	4313      	orrs	r3, r2
 800902c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	685b      	ldr	r3, [r3, #4]
 8009032:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8009036:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800903a:	68fa      	ldr	r2, [r7, #12]
 800903c:	431a      	orrs	r2, r3
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009042:	2300      	movs	r3, #0
}
 8009044:	4618      	mov	r0, r3
 8009046:	3714      	adds	r7, #20
 8009048:	46bd      	mov	sp, r7
 800904a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904e:	b004      	add	sp, #16
 8009050:	4770      	bx	lr

08009052 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8009052:	b480      	push	{r7}
 8009054:	b083      	sub	sp, #12
 8009056:	af00      	add	r7, sp, #0
 8009058:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009060:	4618      	mov	r0, r3
 8009062:	370c      	adds	r7, #12
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr

0800906c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800906c:	b480      	push	{r7}
 800906e:	b083      	sub	sp, #12
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
 8009074:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	681a      	ldr	r2, [r3, #0]
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009080:	2300      	movs	r3, #0
}
 8009082:	4618      	mov	r0, r3
 8009084:	370c      	adds	r7, #12
 8009086:	46bd      	mov	sp, r7
 8009088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908c:	4770      	bx	lr

0800908e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800908e:	b580      	push	{r7, lr}
 8009090:	b082      	sub	sp, #8
 8009092:	af00      	add	r7, sp, #0
 8009094:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2203      	movs	r2, #3
 800909a:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800909c:	2002      	movs	r0, #2
 800909e:	f7f9 fd2b 	bl	8002af8 <HAL_Delay>
  
  return HAL_OK;
 80090a2:	2300      	movs	r3, #0
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3708      	adds	r7, #8
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}

080090ac <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80090ac:	b480      	push	{r7}
 80090ae:	b083      	sub	sp, #12
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f003 0303 	and.w	r3, r3, #3
}
 80090bc:	4618      	mov	r0, r3
 80090be:	370c      	adds	r7, #12
 80090c0:	46bd      	mov	sp, r7
 80090c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c6:	4770      	bx	lr

080090c8 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80090c8:	b480      	push	{r7}
 80090ca:	b085      	sub	sp, #20
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
 80090d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80090d2:	2300      	movs	r3, #0
 80090d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	681a      	ldr	r2, [r3, #0]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80090e6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80090ec:	431a      	orrs	r2, r3
                       Command->CPSM);
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80090f2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80090f4:	68fa      	ldr	r2, [r7, #12]
 80090f6:	4313      	orrs	r3, r2
 80090f8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	68db      	ldr	r3, [r3, #12]
 80090fe:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8009102:	f023 030f 	bic.w	r3, r3, #15
 8009106:	68fa      	ldr	r2, [r7, #12]
 8009108:	431a      	orrs	r2, r3
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800910e:	2300      	movs	r3, #0
}
 8009110:	4618      	mov	r0, r3
 8009112:	3714      	adds	r7, #20
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr

0800911c <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800911c:	b480      	push	{r7}
 800911e:	b083      	sub	sp, #12
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	691b      	ldr	r3, [r3, #16]
 8009128:	b2db      	uxtb	r3, r3
}
 800912a:	4618      	mov	r0, r3
 800912c:	370c      	adds	r7, #12
 800912e:	46bd      	mov	sp, r7
 8009130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009134:	4770      	bx	lr

08009136 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8009136:	b480      	push	{r7}
 8009138:	b085      	sub	sp, #20
 800913a:	af00      	add	r7, sp, #0
 800913c:	6078      	str	r0, [r7, #4]
 800913e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	3314      	adds	r3, #20
 8009144:	461a      	mov	r2, r3
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	4413      	add	r3, r2
 800914a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
}  
 8009150:	4618      	mov	r0, r3
 8009152:	3714      	adds	r7, #20
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	4770      	bx	lr

0800915c <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800915c:	b480      	push	{r7}
 800915e:	b085      	sub	sp, #20
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
 8009164:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009166:	2300      	movs	r3, #0
 8009168:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	681a      	ldr	r2, [r3, #0]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	685a      	ldr	r2, [r3, #4]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009182:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009188:	431a      	orrs	r2, r3
                       Data->DPSM);
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800918e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009190:	68fa      	ldr	r2, [r7, #12]
 8009192:	4313      	orrs	r3, r2
 8009194:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800919a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	431a      	orrs	r2, r3
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80091a6:	2300      	movs	r3, #0

}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3714      	adds	r7, #20
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr

080091b4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b088      	sub	sp, #32
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
 80091bc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80091c2:	2310      	movs	r3, #16
 80091c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80091c6:	2340      	movs	r3, #64	; 0x40
 80091c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80091ca:	2300      	movs	r3, #0
 80091cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80091ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091d2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80091d4:	f107 0308 	add.w	r3, r7, #8
 80091d8:	4619      	mov	r1, r3
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f7ff ff74 	bl	80090c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80091e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80091e4:	2110      	movs	r1, #16
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f000 fa40 	bl	800966c <SDMMC_GetCmdResp1>
 80091ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091ee:	69fb      	ldr	r3, [r7, #28]
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3720      	adds	r7, #32
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}

080091f8 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b088      	sub	sp, #32
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
 8009200:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009206:	2311      	movs	r3, #17
 8009208:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800920a:	2340      	movs	r3, #64	; 0x40
 800920c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800920e:	2300      	movs	r3, #0
 8009210:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009212:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009216:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009218:	f107 0308 	add.w	r3, r7, #8
 800921c:	4619      	mov	r1, r3
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f7ff ff52 	bl	80090c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009224:	f241 3288 	movw	r2, #5000	; 0x1388
 8009228:	2111      	movs	r1, #17
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f000 fa1e 	bl	800966c <SDMMC_GetCmdResp1>
 8009230:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009232:	69fb      	ldr	r3, [r7, #28]
}
 8009234:	4618      	mov	r0, r3
 8009236:	3720      	adds	r7, #32
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}

0800923c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b088      	sub	sp, #32
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800924a:	2312      	movs	r3, #18
 800924c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800924e:	2340      	movs	r3, #64	; 0x40
 8009250:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009252:	2300      	movs	r3, #0
 8009254:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009256:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800925a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800925c:	f107 0308 	add.w	r3, r7, #8
 8009260:	4619      	mov	r1, r3
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f7ff ff30 	bl	80090c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009268:	f241 3288 	movw	r2, #5000	; 0x1388
 800926c:	2112      	movs	r1, #18
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f000 f9fc 	bl	800966c <SDMMC_GetCmdResp1>
 8009274:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009276:	69fb      	ldr	r3, [r7, #28]
}
 8009278:	4618      	mov	r0, r3
 800927a:	3720      	adds	r7, #32
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}

08009280 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b088      	sub	sp, #32
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
 8009288:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800928e:	2318      	movs	r3, #24
 8009290:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009292:	2340      	movs	r3, #64	; 0x40
 8009294:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009296:	2300      	movs	r3, #0
 8009298:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800929a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800929e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80092a0:	f107 0308 	add.w	r3, r7, #8
 80092a4:	4619      	mov	r1, r3
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f7ff ff0e 	bl	80090c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80092ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80092b0:	2118      	movs	r1, #24
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f000 f9da 	bl	800966c <SDMMC_GetCmdResp1>
 80092b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80092ba:	69fb      	ldr	r3, [r7, #28]
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3720      	adds	r7, #32
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}

080092c4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b088      	sub	sp, #32
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80092d2:	2319      	movs	r3, #25
 80092d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80092d6:	2340      	movs	r3, #64	; 0x40
 80092d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80092da:	2300      	movs	r3, #0
 80092dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80092de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80092e4:	f107 0308 	add.w	r3, r7, #8
 80092e8:	4619      	mov	r1, r3
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f7ff feec 	bl	80090c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80092f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80092f4:	2119      	movs	r1, #25
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f000 f9b8 	bl	800966c <SDMMC_GetCmdResp1>
 80092fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80092fe:	69fb      	ldr	r3, [r7, #28]
}
 8009300:	4618      	mov	r0, r3
 8009302:	3720      	adds	r7, #32
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}

08009308 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b088      	sub	sp, #32
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009310:	2300      	movs	r3, #0
 8009312:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009314:	230c      	movs	r3, #12
 8009316:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009318:	2340      	movs	r3, #64	; 0x40
 800931a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800931c:	2300      	movs	r3, #0
 800931e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009320:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009324:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009326:	f107 0308 	add.w	r3, r7, #8
 800932a:	4619      	mov	r1, r3
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f7ff fecb 	bl	80090c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8009332:	4a05      	ldr	r2, [pc, #20]	; (8009348 <SDMMC_CmdStopTransfer+0x40>)
 8009334:	210c      	movs	r1, #12
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f000 f998 	bl	800966c <SDMMC_GetCmdResp1>
 800933c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800933e:	69fb      	ldr	r3, [r7, #28]
}
 8009340:	4618      	mov	r0, r3
 8009342:	3720      	adds	r7, #32
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}
 8009348:	05f5e100 	.word	0x05f5e100

0800934c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b08a      	sub	sp, #40	; 0x28
 8009350:	af00      	add	r7, sp, #0
 8009352:	60f8      	str	r0, [r7, #12]
 8009354:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800935c:	2307      	movs	r3, #7
 800935e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009360:	2340      	movs	r3, #64	; 0x40
 8009362:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009364:	2300      	movs	r3, #0
 8009366:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009368:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800936c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800936e:	f107 0310 	add.w	r3, r7, #16
 8009372:	4619      	mov	r1, r3
 8009374:	68f8      	ldr	r0, [r7, #12]
 8009376:	f7ff fea7 	bl	80090c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800937a:	f241 3288 	movw	r2, #5000	; 0x1388
 800937e:	2107      	movs	r1, #7
 8009380:	68f8      	ldr	r0, [r7, #12]
 8009382:	f000 f973 	bl	800966c <SDMMC_GetCmdResp1>
 8009386:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8009388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800938a:	4618      	mov	r0, r3
 800938c:	3728      	adds	r7, #40	; 0x28
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}

08009392 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8009392:	b580      	push	{r7, lr}
 8009394:	b088      	sub	sp, #32
 8009396:	af00      	add	r7, sp, #0
 8009398:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800939a:	2300      	movs	r3, #0
 800939c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800939e:	2300      	movs	r3, #0
 80093a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80093a2:	2300      	movs	r3, #0
 80093a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80093a6:	2300      	movs	r3, #0
 80093a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80093aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80093b0:	f107 0308 	add.w	r3, r7, #8
 80093b4:	4619      	mov	r1, r3
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f7ff fe86 	bl	80090c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f000 f92d 	bl	800961c <SDMMC_GetCmdError>
 80093c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80093c4:	69fb      	ldr	r3, [r7, #28]
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3720      	adds	r7, #32
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}

080093ce <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80093ce:	b580      	push	{r7, lr}
 80093d0:	b088      	sub	sp, #32
 80093d2:	af00      	add	r7, sp, #0
 80093d4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80093d6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80093da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80093dc:	2308      	movs	r3, #8
 80093de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80093e0:	2340      	movs	r3, #64	; 0x40
 80093e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80093e4:	2300      	movs	r3, #0
 80093e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80093e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093ec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80093ee:	f107 0308 	add.w	r3, r7, #8
 80093f2:	4619      	mov	r1, r3
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f7ff fe67 	bl	80090c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f000 fb16 	bl	8009a2c <SDMMC_GetCmdResp7>
 8009400:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009402:	69fb      	ldr	r3, [r7, #28]
}
 8009404:	4618      	mov	r0, r3
 8009406:	3720      	adds	r7, #32
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}

0800940c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b088      	sub	sp, #32
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800941a:	2337      	movs	r3, #55	; 0x37
 800941c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800941e:	2340      	movs	r3, #64	; 0x40
 8009420:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009422:	2300      	movs	r3, #0
 8009424:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009426:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800942a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800942c:	f107 0308 	add.w	r3, r7, #8
 8009430:	4619      	mov	r1, r3
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f7ff fe48 	bl	80090c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8009438:	f241 3288 	movw	r2, #5000	; 0x1388
 800943c:	2137      	movs	r1, #55	; 0x37
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f000 f914 	bl	800966c <SDMMC_GetCmdResp1>
 8009444:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009446:	69fb      	ldr	r3, [r7, #28]
}
 8009448:	4618      	mov	r0, r3
 800944a:	3720      	adds	r7, #32
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}

08009450 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b088      	sub	sp, #32
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009460:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009464:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009466:	2329      	movs	r3, #41	; 0x29
 8009468:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800946a:	2340      	movs	r3, #64	; 0x40
 800946c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800946e:	2300      	movs	r3, #0
 8009470:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009472:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009476:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009478:	f107 0308 	add.w	r3, r7, #8
 800947c:	4619      	mov	r1, r3
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f7ff fe22 	bl	80090c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f000 fa23 	bl	80098d0 <SDMMC_GetCmdResp3>
 800948a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800948c:	69fb      	ldr	r3, [r7, #28]
}
 800948e:	4618      	mov	r0, r3
 8009490:	3720      	adds	r7, #32
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}

08009496 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8009496:	b580      	push	{r7, lr}
 8009498:	b088      	sub	sp, #32
 800949a:	af00      	add	r7, sp, #0
 800949c:	6078      	str	r0, [r7, #4]
 800949e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80094a4:	2306      	movs	r3, #6
 80094a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80094a8:	2340      	movs	r3, #64	; 0x40
 80094aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80094ac:	2300      	movs	r3, #0
 80094ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80094b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094b4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80094b6:	f107 0308 	add.w	r3, r7, #8
 80094ba:	4619      	mov	r1, r3
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f7ff fe03 	bl	80090c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80094c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80094c6:	2106      	movs	r1, #6
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f000 f8cf 	bl	800966c <SDMMC_GetCmdResp1>
 80094ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80094d0:	69fb      	ldr	r3, [r7, #28]
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3720      	adds	r7, #32
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}

080094da <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80094da:	b580      	push	{r7, lr}
 80094dc:	b088      	sub	sp, #32
 80094de:	af00      	add	r7, sp, #0
 80094e0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80094e2:	2300      	movs	r3, #0
 80094e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80094e6:	2333      	movs	r3, #51	; 0x33
 80094e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80094ea:	2340      	movs	r3, #64	; 0x40
 80094ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80094ee:	2300      	movs	r3, #0
 80094f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80094f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094f6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80094f8:	f107 0308 	add.w	r3, r7, #8
 80094fc:	4619      	mov	r1, r3
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f7ff fde2 	bl	80090c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8009504:	f241 3288 	movw	r2, #5000	; 0x1388
 8009508:	2133      	movs	r1, #51	; 0x33
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f000 f8ae 	bl	800966c <SDMMC_GetCmdResp1>
 8009510:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009512:	69fb      	ldr	r3, [r7, #28]
}
 8009514:	4618      	mov	r0, r3
 8009516:	3720      	adds	r7, #32
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}

0800951c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b088      	sub	sp, #32
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009524:	2300      	movs	r3, #0
 8009526:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009528:	2302      	movs	r3, #2
 800952a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800952c:	23c0      	movs	r3, #192	; 0xc0
 800952e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009530:	2300      	movs	r3, #0
 8009532:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009534:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009538:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800953a:	f107 0308 	add.w	r3, r7, #8
 800953e:	4619      	mov	r1, r3
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f7ff fdc1 	bl	80090c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f000 f97c 	bl	8009844 <SDMMC_GetCmdResp2>
 800954c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800954e:	69fb      	ldr	r3, [r7, #28]
}
 8009550:	4618      	mov	r0, r3
 8009552:	3720      	adds	r7, #32
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}

08009558 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b088      	sub	sp, #32
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009566:	2309      	movs	r3, #9
 8009568:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800956a:	23c0      	movs	r3, #192	; 0xc0
 800956c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800956e:	2300      	movs	r3, #0
 8009570:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009572:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009576:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009578:	f107 0308 	add.w	r3, r7, #8
 800957c:	4619      	mov	r1, r3
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f7ff fda2 	bl	80090c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f000 f95d 	bl	8009844 <SDMMC_GetCmdResp2>
 800958a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800958c:	69fb      	ldr	r3, [r7, #28]
}
 800958e:	4618      	mov	r0, r3
 8009590:	3720      	adds	r7, #32
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}

08009596 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8009596:	b580      	push	{r7, lr}
 8009598:	b088      	sub	sp, #32
 800959a:	af00      	add	r7, sp, #0
 800959c:	6078      	str	r0, [r7, #4]
 800959e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80095a0:	2300      	movs	r3, #0
 80095a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80095a4:	2303      	movs	r3, #3
 80095a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80095a8:	2340      	movs	r3, #64	; 0x40
 80095aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80095ac:	2300      	movs	r3, #0
 80095ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80095b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095b4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80095b6:	f107 0308 	add.w	r3, r7, #8
 80095ba:	4619      	mov	r1, r3
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f7ff fd83 	bl	80090c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80095c2:	683a      	ldr	r2, [r7, #0]
 80095c4:	2103      	movs	r1, #3
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f000 f9bc 	bl	8009944 <SDMMC_GetCmdResp6>
 80095cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80095ce:	69fb      	ldr	r3, [r7, #28]
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3720      	adds	r7, #32
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}

080095d8 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b088      	sub	sp, #32
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80095e6:	230d      	movs	r3, #13
 80095e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80095ea:	2340      	movs	r3, #64	; 0x40
 80095ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80095ee:	2300      	movs	r3, #0
 80095f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80095f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095f6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80095f8:	f107 0308 	add.w	r3, r7, #8
 80095fc:	4619      	mov	r1, r3
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f7ff fd62 	bl	80090c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8009604:	f241 3288 	movw	r2, #5000	; 0x1388
 8009608:	210d      	movs	r1, #13
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f000 f82e 	bl	800966c <SDMMC_GetCmdResp1>
 8009610:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009612:	69fb      	ldr	r3, [r7, #28]
}
 8009614:	4618      	mov	r0, r3
 8009616:	3720      	adds	r7, #32
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}

0800961c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800961c:	b490      	push	{r4, r7}
 800961e:	b082      	sub	sp, #8
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009624:	4b0f      	ldr	r3, [pc, #60]	; (8009664 <SDMMC_GetCmdError+0x48>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	4a0f      	ldr	r2, [pc, #60]	; (8009668 <SDMMC_GetCmdError+0x4c>)
 800962a:	fba2 2303 	umull	r2, r3, r2, r3
 800962e:	0a5b      	lsrs	r3, r3, #9
 8009630:	f241 3288 	movw	r2, #5000	; 0x1388
 8009634:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009638:	4623      	mov	r3, r4
 800963a:	1e5c      	subs	r4, r3, #1
 800963c:	2b00      	cmp	r3, #0
 800963e:	d102      	bne.n	8009646 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009640:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009644:	e009      	b.n	800965a <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800964a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800964e:	2b00      	cmp	r3, #0
 8009650:	d0f2      	beq.n	8009638 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	22c5      	movs	r2, #197	; 0xc5
 8009656:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8009658:	2300      	movs	r3, #0
}
 800965a:	4618      	mov	r0, r3
 800965c:	3708      	adds	r7, #8
 800965e:	46bd      	mov	sp, r7
 8009660:	bc90      	pop	{r4, r7}
 8009662:	4770      	bx	lr
 8009664:	20000000 	.word	0x20000000
 8009668:	10624dd3 	.word	0x10624dd3

0800966c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800966c:	b590      	push	{r4, r7, lr}
 800966e:	b087      	sub	sp, #28
 8009670:	af00      	add	r7, sp, #0
 8009672:	60f8      	str	r0, [r7, #12]
 8009674:	460b      	mov	r3, r1
 8009676:	607a      	str	r2, [r7, #4]
 8009678:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800967a:	4b6f      	ldr	r3, [pc, #444]	; (8009838 <SDMMC_GetCmdResp1+0x1cc>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	4a6f      	ldr	r2, [pc, #444]	; (800983c <SDMMC_GetCmdResp1+0x1d0>)
 8009680:	fba2 2303 	umull	r2, r3, r2, r3
 8009684:	0a5b      	lsrs	r3, r3, #9
 8009686:	687a      	ldr	r2, [r7, #4]
 8009688:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800968c:	4623      	mov	r3, r4
 800968e:	1e5c      	subs	r4, r3, #1
 8009690:	2b00      	cmp	r3, #0
 8009692:	d102      	bne.n	800969a <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009694:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009698:	e0c9      	b.n	800982e <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800969e:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d0f0      	beq.n	800968c <SDMMC_GetCmdResp1+0x20>
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d1eb      	bne.n	800968c <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096b8:	f003 0304 	and.w	r3, r3, #4
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d004      	beq.n	80096ca <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	2204      	movs	r2, #4
 80096c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80096c6:	2304      	movs	r3, #4
 80096c8:	e0b1      	b.n	800982e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096ce:	f003 0301 	and.w	r3, r3, #1
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d004      	beq.n	80096e0 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	2201      	movs	r2, #1
 80096da:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80096dc:	2301      	movs	r3, #1
 80096de:	e0a6      	b.n	800982e <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	22c5      	movs	r2, #197	; 0xc5
 80096e4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80096e6:	68f8      	ldr	r0, [r7, #12]
 80096e8:	f7ff fd18 	bl	800911c <SDIO_GetCommandResponse>
 80096ec:	4603      	mov	r3, r0
 80096ee:	461a      	mov	r2, r3
 80096f0:	7afb      	ldrb	r3, [r7, #11]
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d001      	beq.n	80096fa <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80096f6:	2301      	movs	r3, #1
 80096f8:	e099      	b.n	800982e <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80096fa:	2100      	movs	r1, #0
 80096fc:	68f8      	ldr	r0, [r7, #12]
 80096fe:	f7ff fd1a 	bl	8009136 <SDIO_GetResponse>
 8009702:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009704:	693a      	ldr	r2, [r7, #16]
 8009706:	4b4e      	ldr	r3, [pc, #312]	; (8009840 <SDMMC_GetCmdResp1+0x1d4>)
 8009708:	4013      	ands	r3, r2
 800970a:	2b00      	cmp	r3, #0
 800970c:	d101      	bne.n	8009712 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800970e:	2300      	movs	r3, #0
 8009710:	e08d      	b.n	800982e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	2b00      	cmp	r3, #0
 8009716:	da02      	bge.n	800971e <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009718:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800971c:	e087      	b.n	800982e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009724:	2b00      	cmp	r3, #0
 8009726:	d001      	beq.n	800972c <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009728:	2340      	movs	r3, #64	; 0x40
 800972a:	e080      	b.n	800982e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009732:	2b00      	cmp	r3, #0
 8009734:	d001      	beq.n	800973a <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009736:	2380      	movs	r3, #128	; 0x80
 8009738:	e079      	b.n	800982e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009740:	2b00      	cmp	r3, #0
 8009742:	d002      	beq.n	800974a <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009744:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009748:	e071      	b.n	800982e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800974a:	693b      	ldr	r3, [r7, #16]
 800974c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009750:	2b00      	cmp	r3, #0
 8009752:	d002      	beq.n	800975a <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009754:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009758:	e069      	b.n	800982e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009760:	2b00      	cmp	r3, #0
 8009762:	d002      	beq.n	800976a <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009764:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009768:	e061      	b.n	800982e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009770:	2b00      	cmp	r3, #0
 8009772:	d002      	beq.n	800977a <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009774:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009778:	e059      	b.n	800982e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009780:	2b00      	cmp	r3, #0
 8009782:	d002      	beq.n	800978a <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009788:	e051      	b.n	800982e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800978a:	693b      	ldr	r3, [r7, #16]
 800978c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009790:	2b00      	cmp	r3, #0
 8009792:	d002      	beq.n	800979a <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009794:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009798:	e049      	b.n	800982e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d002      	beq.n	80097aa <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80097a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80097a8:	e041      	b.n	800982e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d002      	beq.n	80097ba <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 80097b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80097b8:	e039      	b.n	800982e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d002      	beq.n	80097ca <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80097c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80097c8:	e031      	b.n	800982e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d002      	beq.n	80097da <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80097d4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80097d8:	e029      	b.n	800982e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80097da:	693b      	ldr	r3, [r7, #16]
 80097dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d002      	beq.n	80097ea <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80097e4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80097e8:	e021      	b.n	800982e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80097ea:	693b      	ldr	r3, [r7, #16]
 80097ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d002      	beq.n	80097fa <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80097f4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80097f8:	e019      	b.n	800982e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80097fa:	693b      	ldr	r3, [r7, #16]
 80097fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009800:	2b00      	cmp	r3, #0
 8009802:	d002      	beq.n	800980a <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009804:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009808:	e011      	b.n	800982e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009810:	2b00      	cmp	r3, #0
 8009812:	d002      	beq.n	800981a <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009814:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009818:	e009      	b.n	800982e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	f003 0308 	and.w	r3, r3, #8
 8009820:	2b00      	cmp	r3, #0
 8009822:	d002      	beq.n	800982a <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009824:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009828:	e001      	b.n	800982e <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800982a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800982e:	4618      	mov	r0, r3
 8009830:	371c      	adds	r7, #28
 8009832:	46bd      	mov	sp, r7
 8009834:	bd90      	pop	{r4, r7, pc}
 8009836:	bf00      	nop
 8009838:	20000000 	.word	0x20000000
 800983c:	10624dd3 	.word	0x10624dd3
 8009840:	fdffe008 	.word	0xfdffe008

08009844 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8009844:	b490      	push	{r4, r7}
 8009846:	b084      	sub	sp, #16
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800984c:	4b1e      	ldr	r3, [pc, #120]	; (80098c8 <SDMMC_GetCmdResp2+0x84>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4a1e      	ldr	r2, [pc, #120]	; (80098cc <SDMMC_GetCmdResp2+0x88>)
 8009852:	fba2 2303 	umull	r2, r3, r2, r3
 8009856:	0a5b      	lsrs	r3, r3, #9
 8009858:	f241 3288 	movw	r2, #5000	; 0x1388
 800985c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009860:	4623      	mov	r3, r4
 8009862:	1e5c      	subs	r4, r3, #1
 8009864:	2b00      	cmp	r3, #0
 8009866:	d102      	bne.n	800986e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009868:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800986c:	e026      	b.n	80098bc <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009872:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800987a:	2b00      	cmp	r3, #0
 800987c:	d0f0      	beq.n	8009860 <SDMMC_GetCmdResp2+0x1c>
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009884:	2b00      	cmp	r3, #0
 8009886:	d1eb      	bne.n	8009860 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800988c:	f003 0304 	and.w	r3, r3, #4
 8009890:	2b00      	cmp	r3, #0
 8009892:	d004      	beq.n	800989e <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2204      	movs	r2, #4
 8009898:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800989a:	2304      	movs	r3, #4
 800989c:	e00e      	b.n	80098bc <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098a2:	f003 0301 	and.w	r3, r3, #1
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d004      	beq.n	80098b4 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2201      	movs	r2, #1
 80098ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80098b0:	2301      	movs	r3, #1
 80098b2:	e003      	b.n	80098bc <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	22c5      	movs	r2, #197	; 0xc5
 80098b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80098ba:	2300      	movs	r3, #0
}
 80098bc:	4618      	mov	r0, r3
 80098be:	3710      	adds	r7, #16
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bc90      	pop	{r4, r7}
 80098c4:	4770      	bx	lr
 80098c6:	bf00      	nop
 80098c8:	20000000 	.word	0x20000000
 80098cc:	10624dd3 	.word	0x10624dd3

080098d0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80098d0:	b490      	push	{r4, r7}
 80098d2:	b084      	sub	sp, #16
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80098d8:	4b18      	ldr	r3, [pc, #96]	; (800993c <SDMMC_GetCmdResp3+0x6c>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	4a18      	ldr	r2, [pc, #96]	; (8009940 <SDMMC_GetCmdResp3+0x70>)
 80098de:	fba2 2303 	umull	r2, r3, r2, r3
 80098e2:	0a5b      	lsrs	r3, r3, #9
 80098e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80098e8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80098ec:	4623      	mov	r3, r4
 80098ee:	1e5c      	subs	r4, r3, #1
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d102      	bne.n	80098fa <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80098f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80098f8:	e01b      	b.n	8009932 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098fe:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009906:	2b00      	cmp	r3, #0
 8009908:	d0f0      	beq.n	80098ec <SDMMC_GetCmdResp3+0x1c>
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009910:	2b00      	cmp	r3, #0
 8009912:	d1eb      	bne.n	80098ec <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009918:	f003 0304 	and.w	r3, r3, #4
 800991c:	2b00      	cmp	r3, #0
 800991e:	d004      	beq.n	800992a <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2204      	movs	r2, #4
 8009924:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009926:	2304      	movs	r3, #4
 8009928:	e003      	b.n	8009932 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	22c5      	movs	r2, #197	; 0xc5
 800992e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009930:	2300      	movs	r3, #0
}
 8009932:	4618      	mov	r0, r3
 8009934:	3710      	adds	r7, #16
 8009936:	46bd      	mov	sp, r7
 8009938:	bc90      	pop	{r4, r7}
 800993a:	4770      	bx	lr
 800993c:	20000000 	.word	0x20000000
 8009940:	10624dd3 	.word	0x10624dd3

08009944 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009944:	b590      	push	{r4, r7, lr}
 8009946:	b087      	sub	sp, #28
 8009948:	af00      	add	r7, sp, #0
 800994a:	60f8      	str	r0, [r7, #12]
 800994c:	460b      	mov	r3, r1
 800994e:	607a      	str	r2, [r7, #4]
 8009950:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009952:	4b34      	ldr	r3, [pc, #208]	; (8009a24 <SDMMC_GetCmdResp6+0xe0>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	4a34      	ldr	r2, [pc, #208]	; (8009a28 <SDMMC_GetCmdResp6+0xe4>)
 8009958:	fba2 2303 	umull	r2, r3, r2, r3
 800995c:	0a5b      	lsrs	r3, r3, #9
 800995e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009962:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009966:	4623      	mov	r3, r4
 8009968:	1e5c      	subs	r4, r3, #1
 800996a:	2b00      	cmp	r3, #0
 800996c:	d102      	bne.n	8009974 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800996e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009972:	e052      	b.n	8009a1a <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009978:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009980:	2b00      	cmp	r3, #0
 8009982:	d0f0      	beq.n	8009966 <SDMMC_GetCmdResp6+0x22>
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800998a:	2b00      	cmp	r3, #0
 800998c:	d1eb      	bne.n	8009966 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009992:	f003 0304 	and.w	r3, r3, #4
 8009996:	2b00      	cmp	r3, #0
 8009998:	d004      	beq.n	80099a4 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	2204      	movs	r2, #4
 800999e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80099a0:	2304      	movs	r3, #4
 80099a2:	e03a      	b.n	8009a1a <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099a8:	f003 0301 	and.w	r3, r3, #1
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d004      	beq.n	80099ba <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	2201      	movs	r2, #1
 80099b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80099b6:	2301      	movs	r3, #1
 80099b8:	e02f      	b.n	8009a1a <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80099ba:	68f8      	ldr	r0, [r7, #12]
 80099bc:	f7ff fbae 	bl	800911c <SDIO_GetCommandResponse>
 80099c0:	4603      	mov	r3, r0
 80099c2:	461a      	mov	r2, r3
 80099c4:	7afb      	ldrb	r3, [r7, #11]
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d001      	beq.n	80099ce <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80099ca:	2301      	movs	r3, #1
 80099cc:	e025      	b.n	8009a1a <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	22c5      	movs	r2, #197	; 0xc5
 80099d2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80099d4:	2100      	movs	r1, #0
 80099d6:	68f8      	ldr	r0, [r7, #12]
 80099d8:	f7ff fbad 	bl	8009136 <SDIO_GetResponse>
 80099dc:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d106      	bne.n	80099f6 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80099e8:	693b      	ldr	r3, [r7, #16]
 80099ea:	0c1b      	lsrs	r3, r3, #16
 80099ec:	b29a      	uxth	r2, r3
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80099f2:	2300      	movs	r3, #0
 80099f4:	e011      	b.n	8009a1a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80099f6:	693b      	ldr	r3, [r7, #16]
 80099f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d002      	beq.n	8009a06 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009a00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009a04:	e009      	b.n	8009a1a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009a06:	693b      	ldr	r3, [r7, #16]
 8009a08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d002      	beq.n	8009a16 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009a10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a14:	e001      	b.n	8009a1a <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009a16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	371c      	adds	r7, #28
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd90      	pop	{r4, r7, pc}
 8009a22:	bf00      	nop
 8009a24:	20000000 	.word	0x20000000
 8009a28:	10624dd3 	.word	0x10624dd3

08009a2c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8009a2c:	b490      	push	{r4, r7}
 8009a2e:	b084      	sub	sp, #16
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009a34:	4b21      	ldr	r3, [pc, #132]	; (8009abc <SDMMC_GetCmdResp7+0x90>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	4a21      	ldr	r2, [pc, #132]	; (8009ac0 <SDMMC_GetCmdResp7+0x94>)
 8009a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8009a3e:	0a5b      	lsrs	r3, r3, #9
 8009a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a44:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009a48:	4623      	mov	r3, r4
 8009a4a:	1e5c      	subs	r4, r3, #1
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d102      	bne.n	8009a56 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009a50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009a54:	e02c      	b.n	8009ab0 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a5a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d0f0      	beq.n	8009a48 <SDMMC_GetCmdResp7+0x1c>
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d1eb      	bne.n	8009a48 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a74:	f003 0304 	and.w	r3, r3, #4
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d004      	beq.n	8009a86 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2204      	movs	r2, #4
 8009a80:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009a82:	2304      	movs	r3, #4
 8009a84:	e014      	b.n	8009ab0 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a8a:	f003 0301 	and.w	r3, r3, #1
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d004      	beq.n	8009a9c <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2201      	movs	r2, #1
 8009a96:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009a98:	2301      	movs	r3, #1
 8009a9a:	e009      	b.n	8009ab0 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d002      	beq.n	8009aae <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2240      	movs	r2, #64	; 0x40
 8009aac:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009aae:	2300      	movs	r3, #0
  
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3710      	adds	r7, #16
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bc90      	pop	{r4, r7}
 8009ab8:	4770      	bx	lr
 8009aba:	bf00      	nop
 8009abc:	20000000 	.word	0x20000000
 8009ac0:	10624dd3 	.word	0x10624dd3

08009ac4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009ac4:	b084      	sub	sp, #16
 8009ac6:	b580      	push	{r7, lr}
 8009ac8:	b084      	sub	sp, #16
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	6078      	str	r0, [r7, #4]
 8009ace:	f107 001c 	add.w	r0, r7, #28
 8009ad2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad8:	2b01      	cmp	r3, #1
 8009ada:	d122      	bne.n	8009b22 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ae0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	68db      	ldr	r3, [r3, #12]
 8009aec:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009af0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009af4:	687a      	ldr	r2, [r7, #4]
 8009af6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	68db      	ldr	r3, [r3, #12]
 8009afc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009b04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b06:	2b01      	cmp	r3, #1
 8009b08:	d105      	bne.n	8009b16 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	68db      	ldr	r3, [r3, #12]
 8009b0e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f001 fa7c 	bl	800b014 <USB_CoreReset>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	73fb      	strb	r3, [r7, #15]
 8009b20:	e01a      	b.n	8009b58 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	68db      	ldr	r3, [r3, #12]
 8009b26:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f001 fa70 	bl	800b014 <USB_CoreReset>
 8009b34:	4603      	mov	r3, r0
 8009b36:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009b38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d106      	bne.n	8009b4c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b42:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	639a      	str	r2, [r3, #56]	; 0x38
 8009b4a:	e005      	b.n	8009b58 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b5a:	2b01      	cmp	r3, #1
 8009b5c:	d10b      	bne.n	8009b76 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	689b      	ldr	r3, [r3, #8]
 8009b62:	f043 0206 	orr.w	r2, r3, #6
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	689b      	ldr	r3, [r3, #8]
 8009b6e:	f043 0220 	orr.w	r2, r3, #32
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b78:	4618      	mov	r0, r3
 8009b7a:	3710      	adds	r7, #16
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009b82:	b004      	add	sp, #16
 8009b84:	4770      	bx	lr
	...

08009b88 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b087      	sub	sp, #28
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	60f8      	str	r0, [r7, #12]
 8009b90:	60b9      	str	r1, [r7, #8]
 8009b92:	4613      	mov	r3, r2
 8009b94:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009b96:	79fb      	ldrb	r3, [r7, #7]
 8009b98:	2b02      	cmp	r3, #2
 8009b9a:	d165      	bne.n	8009c68 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	4a41      	ldr	r2, [pc, #260]	; (8009ca4 <USB_SetTurnaroundTime+0x11c>)
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d906      	bls.n	8009bb2 <USB_SetTurnaroundTime+0x2a>
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	4a40      	ldr	r2, [pc, #256]	; (8009ca8 <USB_SetTurnaroundTime+0x120>)
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	d802      	bhi.n	8009bb2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009bac:	230f      	movs	r3, #15
 8009bae:	617b      	str	r3, [r7, #20]
 8009bb0:	e062      	b.n	8009c78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	4a3c      	ldr	r2, [pc, #240]	; (8009ca8 <USB_SetTurnaroundTime+0x120>)
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d906      	bls.n	8009bc8 <USB_SetTurnaroundTime+0x40>
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	4a3b      	ldr	r2, [pc, #236]	; (8009cac <USB_SetTurnaroundTime+0x124>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d802      	bhi.n	8009bc8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009bc2:	230e      	movs	r3, #14
 8009bc4:	617b      	str	r3, [r7, #20]
 8009bc6:	e057      	b.n	8009c78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	4a38      	ldr	r2, [pc, #224]	; (8009cac <USB_SetTurnaroundTime+0x124>)
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d906      	bls.n	8009bde <USB_SetTurnaroundTime+0x56>
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	4a37      	ldr	r2, [pc, #220]	; (8009cb0 <USB_SetTurnaroundTime+0x128>)
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d802      	bhi.n	8009bde <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009bd8:	230d      	movs	r3, #13
 8009bda:	617b      	str	r3, [r7, #20]
 8009bdc:	e04c      	b.n	8009c78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	4a33      	ldr	r2, [pc, #204]	; (8009cb0 <USB_SetTurnaroundTime+0x128>)
 8009be2:	4293      	cmp	r3, r2
 8009be4:	d906      	bls.n	8009bf4 <USB_SetTurnaroundTime+0x6c>
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	4a32      	ldr	r2, [pc, #200]	; (8009cb4 <USB_SetTurnaroundTime+0x12c>)
 8009bea:	4293      	cmp	r3, r2
 8009bec:	d802      	bhi.n	8009bf4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009bee:	230c      	movs	r3, #12
 8009bf0:	617b      	str	r3, [r7, #20]
 8009bf2:	e041      	b.n	8009c78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	4a2f      	ldr	r2, [pc, #188]	; (8009cb4 <USB_SetTurnaroundTime+0x12c>)
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d906      	bls.n	8009c0a <USB_SetTurnaroundTime+0x82>
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	4a2e      	ldr	r2, [pc, #184]	; (8009cb8 <USB_SetTurnaroundTime+0x130>)
 8009c00:	4293      	cmp	r3, r2
 8009c02:	d802      	bhi.n	8009c0a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009c04:	230b      	movs	r3, #11
 8009c06:	617b      	str	r3, [r7, #20]
 8009c08:	e036      	b.n	8009c78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	4a2a      	ldr	r2, [pc, #168]	; (8009cb8 <USB_SetTurnaroundTime+0x130>)
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d906      	bls.n	8009c20 <USB_SetTurnaroundTime+0x98>
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	4a29      	ldr	r2, [pc, #164]	; (8009cbc <USB_SetTurnaroundTime+0x134>)
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d802      	bhi.n	8009c20 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009c1a:	230a      	movs	r3, #10
 8009c1c:	617b      	str	r3, [r7, #20]
 8009c1e:	e02b      	b.n	8009c78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	4a26      	ldr	r2, [pc, #152]	; (8009cbc <USB_SetTurnaroundTime+0x134>)
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d906      	bls.n	8009c36 <USB_SetTurnaroundTime+0xae>
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	4a25      	ldr	r2, [pc, #148]	; (8009cc0 <USB_SetTurnaroundTime+0x138>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d802      	bhi.n	8009c36 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009c30:	2309      	movs	r3, #9
 8009c32:	617b      	str	r3, [r7, #20]
 8009c34:	e020      	b.n	8009c78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	4a21      	ldr	r2, [pc, #132]	; (8009cc0 <USB_SetTurnaroundTime+0x138>)
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	d906      	bls.n	8009c4c <USB_SetTurnaroundTime+0xc4>
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	4a20      	ldr	r2, [pc, #128]	; (8009cc4 <USB_SetTurnaroundTime+0x13c>)
 8009c42:	4293      	cmp	r3, r2
 8009c44:	d802      	bhi.n	8009c4c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009c46:	2308      	movs	r3, #8
 8009c48:	617b      	str	r3, [r7, #20]
 8009c4a:	e015      	b.n	8009c78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	4a1d      	ldr	r2, [pc, #116]	; (8009cc4 <USB_SetTurnaroundTime+0x13c>)
 8009c50:	4293      	cmp	r3, r2
 8009c52:	d906      	bls.n	8009c62 <USB_SetTurnaroundTime+0xda>
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	4a1c      	ldr	r2, [pc, #112]	; (8009cc8 <USB_SetTurnaroundTime+0x140>)
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	d802      	bhi.n	8009c62 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009c5c:	2307      	movs	r3, #7
 8009c5e:	617b      	str	r3, [r7, #20]
 8009c60:	e00a      	b.n	8009c78 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009c62:	2306      	movs	r3, #6
 8009c64:	617b      	str	r3, [r7, #20]
 8009c66:	e007      	b.n	8009c78 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009c68:	79fb      	ldrb	r3, [r7, #7]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d102      	bne.n	8009c74 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009c6e:	2309      	movs	r3, #9
 8009c70:	617b      	str	r3, [r7, #20]
 8009c72:	e001      	b.n	8009c78 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009c74:	2309      	movs	r3, #9
 8009c76:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	68db      	ldr	r3, [r3, #12]
 8009c7c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	68da      	ldr	r2, [r3, #12]
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	029b      	lsls	r3, r3, #10
 8009c8c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009c90:	431a      	orrs	r2, r3
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009c96:	2300      	movs	r3, #0
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	371c      	adds	r7, #28
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca2:	4770      	bx	lr
 8009ca4:	00d8acbf 	.word	0x00d8acbf
 8009ca8:	00e4e1bf 	.word	0x00e4e1bf
 8009cac:	00f423ff 	.word	0x00f423ff
 8009cb0:	0106737f 	.word	0x0106737f
 8009cb4:	011a499f 	.word	0x011a499f
 8009cb8:	01312cff 	.word	0x01312cff
 8009cbc:	014ca43f 	.word	0x014ca43f
 8009cc0:	016e35ff 	.word	0x016e35ff
 8009cc4:	01a6ab1f 	.word	0x01a6ab1f
 8009cc8:	01e847ff 	.word	0x01e847ff

08009ccc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b083      	sub	sp, #12
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	689b      	ldr	r3, [r3, #8]
 8009cd8:	f043 0201 	orr.w	r2, r3, #1
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009ce0:	2300      	movs	r3, #0
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	370c      	adds	r7, #12
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cec:	4770      	bx	lr

08009cee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009cee:	b480      	push	{r7}
 8009cf0:	b083      	sub	sp, #12
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	689b      	ldr	r3, [r3, #8]
 8009cfa:	f023 0201 	bic.w	r2, r3, #1
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009d02:	2300      	movs	r3, #0
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	370c      	adds	r7, #12
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0e:	4770      	bx	lr

08009d10 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b082      	sub	sp, #8
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
 8009d18:	460b      	mov	r3, r1
 8009d1a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	68db      	ldr	r3, [r3, #12]
 8009d20:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009d28:	78fb      	ldrb	r3, [r7, #3]
 8009d2a:	2b01      	cmp	r3, #1
 8009d2c:	d106      	bne.n	8009d3c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	68db      	ldr	r3, [r3, #12]
 8009d32:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	60da      	str	r2, [r3, #12]
 8009d3a:	e00b      	b.n	8009d54 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8009d3c:	78fb      	ldrb	r3, [r7, #3]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d106      	bne.n	8009d50 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	68db      	ldr	r3, [r3, #12]
 8009d46:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	60da      	str	r2, [r3, #12]
 8009d4e:	e001      	b.n	8009d54 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8009d50:	2301      	movs	r3, #1
 8009d52:	e003      	b.n	8009d5c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8009d54:	2032      	movs	r0, #50	; 0x32
 8009d56:	f7f8 fecf 	bl	8002af8 <HAL_Delay>

  return HAL_OK;
 8009d5a:	2300      	movs	r3, #0
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3708      	adds	r7, #8
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}

08009d64 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009d64:	b084      	sub	sp, #16
 8009d66:	b580      	push	{r7, lr}
 8009d68:	b086      	sub	sp, #24
 8009d6a:	af00      	add	r7, sp, #0
 8009d6c:	6078      	str	r0, [r7, #4]
 8009d6e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009d72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009d76:	2300      	movs	r3, #0
 8009d78:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009d7e:	2300      	movs	r3, #0
 8009d80:	613b      	str	r3, [r7, #16]
 8009d82:	e009      	b.n	8009d98 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009d84:	687a      	ldr	r2, [r7, #4]
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	3340      	adds	r3, #64	; 0x40
 8009d8a:	009b      	lsls	r3, r3, #2
 8009d8c:	4413      	add	r3, r2
 8009d8e:	2200      	movs	r2, #0
 8009d90:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009d92:	693b      	ldr	r3, [r7, #16]
 8009d94:	3301      	adds	r3, #1
 8009d96:	613b      	str	r3, [r7, #16]
 8009d98:	693b      	ldr	r3, [r7, #16]
 8009d9a:	2b0e      	cmp	r3, #14
 8009d9c:	d9f2      	bls.n	8009d84 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009d9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d112      	bne.n	8009dca <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009da8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009db4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dc0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	639a      	str	r2, [r3, #56]	; 0x38
 8009dc8:	e00b      	b.n	8009de2 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dda:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009de8:	461a      	mov	r2, r3
 8009dea:	2300      	movs	r3, #0
 8009dec:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009df4:	4619      	mov	r1, r3
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dfc:	461a      	mov	r2, r3
 8009dfe:	680b      	ldr	r3, [r1, #0]
 8009e00:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e04:	2b01      	cmp	r3, #1
 8009e06:	d10c      	bne.n	8009e22 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d104      	bne.n	8009e18 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009e0e:	2100      	movs	r1, #0
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f000 f961 	bl	800a0d8 <USB_SetDevSpeed>
 8009e16:	e008      	b.n	8009e2a <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009e18:	2101      	movs	r1, #1
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f000 f95c 	bl	800a0d8 <USB_SetDevSpeed>
 8009e20:	e003      	b.n	8009e2a <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009e22:	2103      	movs	r1, #3
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f000 f957 	bl	800a0d8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009e2a:	2110      	movs	r1, #16
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f000 f90b 	bl	800a048 <USB_FlushTxFifo>
 8009e32:	4603      	mov	r3, r0
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d001      	beq.n	8009e3c <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8009e38:	2301      	movs	r3, #1
 8009e3a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f000 f929 	bl	800a094 <USB_FlushRxFifo>
 8009e42:	4603      	mov	r3, r0
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d001      	beq.n	8009e4c <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8009e48:	2301      	movs	r3, #1
 8009e4a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e52:	461a      	mov	r2, r3
 8009e54:	2300      	movs	r3, #0
 8009e56:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e5e:	461a      	mov	r2, r3
 8009e60:	2300      	movs	r3, #0
 8009e62:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e6a:	461a      	mov	r2, r3
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009e70:	2300      	movs	r3, #0
 8009e72:	613b      	str	r3, [r7, #16]
 8009e74:	e043      	b.n	8009efe <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009e76:	693b      	ldr	r3, [r7, #16]
 8009e78:	015a      	lsls	r2, r3, #5
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	4413      	add	r3, r2
 8009e7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009e8c:	d118      	bne.n	8009ec0 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 8009e8e:	693b      	ldr	r3, [r7, #16]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d10a      	bne.n	8009eaa <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	015a      	lsls	r2, r3, #5
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	4413      	add	r3, r2
 8009e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ea0:	461a      	mov	r2, r3
 8009ea2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009ea6:	6013      	str	r3, [r2, #0]
 8009ea8:	e013      	b.n	8009ed2 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009eaa:	693b      	ldr	r3, [r7, #16]
 8009eac:	015a      	lsls	r2, r3, #5
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	4413      	add	r3, r2
 8009eb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009eb6:	461a      	mov	r2, r3
 8009eb8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009ebc:	6013      	str	r3, [r2, #0]
 8009ebe:	e008      	b.n	8009ed2 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009ec0:	693b      	ldr	r3, [r7, #16]
 8009ec2:	015a      	lsls	r2, r3, #5
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	4413      	add	r3, r2
 8009ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ecc:	461a      	mov	r2, r3
 8009ece:	2300      	movs	r3, #0
 8009ed0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009ed2:	693b      	ldr	r3, [r7, #16]
 8009ed4:	015a      	lsls	r2, r3, #5
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	4413      	add	r3, r2
 8009eda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ede:	461a      	mov	r2, r3
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009ee4:	693b      	ldr	r3, [r7, #16]
 8009ee6:	015a      	lsls	r2, r3, #5
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	4413      	add	r3, r2
 8009eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ef0:	461a      	mov	r2, r3
 8009ef2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009ef6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	3301      	adds	r3, #1
 8009efc:	613b      	str	r3, [r7, #16]
 8009efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f00:	693a      	ldr	r2, [r7, #16]
 8009f02:	429a      	cmp	r2, r3
 8009f04:	d3b7      	bcc.n	8009e76 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009f06:	2300      	movs	r3, #0
 8009f08:	613b      	str	r3, [r7, #16]
 8009f0a:	e043      	b.n	8009f94 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	015a      	lsls	r2, r3, #5
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	4413      	add	r3, r2
 8009f14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009f22:	d118      	bne.n	8009f56 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d10a      	bne.n	8009f40 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	015a      	lsls	r2, r3, #5
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	4413      	add	r3, r2
 8009f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f36:	461a      	mov	r2, r3
 8009f38:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009f3c:	6013      	str	r3, [r2, #0]
 8009f3e:	e013      	b.n	8009f68 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	015a      	lsls	r2, r3, #5
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	4413      	add	r3, r2
 8009f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f4c:	461a      	mov	r2, r3
 8009f4e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009f52:	6013      	str	r3, [r2, #0]
 8009f54:	e008      	b.n	8009f68 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009f56:	693b      	ldr	r3, [r7, #16]
 8009f58:	015a      	lsls	r2, r3, #5
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	4413      	add	r3, r2
 8009f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f62:	461a      	mov	r2, r3
 8009f64:	2300      	movs	r3, #0
 8009f66:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	015a      	lsls	r2, r3, #5
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	4413      	add	r3, r2
 8009f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f74:	461a      	mov	r2, r3
 8009f76:	2300      	movs	r3, #0
 8009f78:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009f7a:	693b      	ldr	r3, [r7, #16]
 8009f7c:	015a      	lsls	r2, r3, #5
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	4413      	add	r3, r2
 8009f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f86:	461a      	mov	r2, r3
 8009f88:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009f8c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009f8e:	693b      	ldr	r3, [r7, #16]
 8009f90:	3301      	adds	r3, #1
 8009f92:	613b      	str	r3, [r7, #16]
 8009f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f96:	693a      	ldr	r2, [r7, #16]
 8009f98:	429a      	cmp	r2, r3
 8009f9a:	d3b7      	bcc.n	8009f0c <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fa2:	691b      	ldr	r3, [r3, #16]
 8009fa4:	68fa      	ldr	r2, [r7, #12]
 8009fa6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009faa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009fae:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8009fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb2:	2b01      	cmp	r3, #1
 8009fb4:	d111      	bne.n	8009fda <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fbc:	461a      	mov	r2, r3
 8009fbe:	4b20      	ldr	r3, [pc, #128]	; (800a040 <USB_DevInit+0x2dc>)
 8009fc0:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fca:	68fa      	ldr	r2, [r7, #12]
 8009fcc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009fd4:	f043 0303 	orr.w	r3, r3, #3
 8009fd8:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009fe6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d105      	bne.n	8009ffa <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	699b      	ldr	r3, [r3, #24]
 8009ff2:	f043 0210 	orr.w	r2, r3, #16
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	699a      	ldr	r2, [r3, #24]
 8009ffe:	4b11      	ldr	r3, [pc, #68]	; (800a044 <USB_DevInit+0x2e0>)
 800a000:	4313      	orrs	r3, r2
 800a002:	687a      	ldr	r2, [r7, #4]
 800a004:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d005      	beq.n	800a018 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	699b      	ldr	r3, [r3, #24]
 800a010:	f043 0208 	orr.w	r2, r3, #8
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a018:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d107      	bne.n	800a02e <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	699b      	ldr	r3, [r3, #24]
 800a022:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a026:	f043 0304 	orr.w	r3, r3, #4
 800a02a:	687a      	ldr	r2, [r7, #4]
 800a02c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a02e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a030:	4618      	mov	r0, r3
 800a032:	3718      	adds	r7, #24
 800a034:	46bd      	mov	sp, r7
 800a036:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a03a:	b004      	add	sp, #16
 800a03c:	4770      	bx	lr
 800a03e:	bf00      	nop
 800a040:	00800100 	.word	0x00800100
 800a044:	803c3800 	.word	0x803c3800

0800a048 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a048:	b480      	push	{r7}
 800a04a:	b085      	sub	sp, #20
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
 800a050:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a052:	2300      	movs	r3, #0
 800a054:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	019b      	lsls	r3, r3, #6
 800a05a:	f043 0220 	orr.w	r2, r3, #32
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	3301      	adds	r3, #1
 800a066:	60fb      	str	r3, [r7, #12]
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	4a09      	ldr	r2, [pc, #36]	; (800a090 <USB_FlushTxFifo+0x48>)
 800a06c:	4293      	cmp	r3, r2
 800a06e:	d901      	bls.n	800a074 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a070:	2303      	movs	r3, #3
 800a072:	e006      	b.n	800a082 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	691b      	ldr	r3, [r3, #16]
 800a078:	f003 0320 	and.w	r3, r3, #32
 800a07c:	2b20      	cmp	r3, #32
 800a07e:	d0f0      	beq.n	800a062 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a080:	2300      	movs	r3, #0
}
 800a082:	4618      	mov	r0, r3
 800a084:	3714      	adds	r7, #20
 800a086:	46bd      	mov	sp, r7
 800a088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08c:	4770      	bx	lr
 800a08e:	bf00      	nop
 800a090:	00030d40 	.word	0x00030d40

0800a094 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a094:	b480      	push	{r7}
 800a096:	b085      	sub	sp, #20
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800a09c:	2300      	movs	r3, #0
 800a09e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2210      	movs	r2, #16
 800a0a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	3301      	adds	r3, #1
 800a0aa:	60fb      	str	r3, [r7, #12]
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	4a09      	ldr	r2, [pc, #36]	; (800a0d4 <USB_FlushRxFifo+0x40>)
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	d901      	bls.n	800a0b8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800a0b4:	2303      	movs	r3, #3
 800a0b6:	e006      	b.n	800a0c6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	691b      	ldr	r3, [r3, #16]
 800a0bc:	f003 0310 	and.w	r3, r3, #16
 800a0c0:	2b10      	cmp	r3, #16
 800a0c2:	d0f0      	beq.n	800a0a6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a0c4:	2300      	movs	r3, #0
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3714      	adds	r7, #20
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d0:	4770      	bx	lr
 800a0d2:	bf00      	nop
 800a0d4:	00030d40 	.word	0x00030d40

0800a0d8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b085      	sub	sp, #20
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
 800a0e0:	460b      	mov	r3, r1
 800a0e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0ee:	681a      	ldr	r2, [r3, #0]
 800a0f0:	78fb      	ldrb	r3, [r7, #3]
 800a0f2:	68f9      	ldr	r1, [r7, #12]
 800a0f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a0f8:	4313      	orrs	r3, r2
 800a0fa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a0fc:	2300      	movs	r3, #0
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	3714      	adds	r7, #20
 800a102:	46bd      	mov	sp, r7
 800a104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a108:	4770      	bx	lr

0800a10a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a10a:	b480      	push	{r7}
 800a10c:	b087      	sub	sp, #28
 800a10e:	af00      	add	r7, sp, #0
 800a110:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a116:	693b      	ldr	r3, [r7, #16]
 800a118:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a11c:	689b      	ldr	r3, [r3, #8]
 800a11e:	f003 0306 	and.w	r3, r3, #6
 800a122:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d102      	bne.n	800a130 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a12a:	2300      	movs	r3, #0
 800a12c:	75fb      	strb	r3, [r7, #23]
 800a12e:	e00a      	b.n	800a146 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	2b02      	cmp	r3, #2
 800a134:	d002      	beq.n	800a13c <USB_GetDevSpeed+0x32>
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	2b06      	cmp	r3, #6
 800a13a:	d102      	bne.n	800a142 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a13c:	2302      	movs	r3, #2
 800a13e:	75fb      	strb	r3, [r7, #23]
 800a140:	e001      	b.n	800a146 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a142:	230f      	movs	r3, #15
 800a144:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a146:	7dfb      	ldrb	r3, [r7, #23]
}
 800a148:	4618      	mov	r0, r3
 800a14a:	371c      	adds	r7, #28
 800a14c:	46bd      	mov	sp, r7
 800a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a152:	4770      	bx	lr

0800a154 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a154:	b480      	push	{r7}
 800a156:	b085      	sub	sp, #20
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
 800a15c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	781b      	ldrb	r3, [r3, #0]
 800a166:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	785b      	ldrb	r3, [r3, #1]
 800a16c:	2b01      	cmp	r3, #1
 800a16e:	d13a      	bne.n	800a1e6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a176:	69da      	ldr	r2, [r3, #28]
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	781b      	ldrb	r3, [r3, #0]
 800a17c:	f003 030f 	and.w	r3, r3, #15
 800a180:	2101      	movs	r1, #1
 800a182:	fa01 f303 	lsl.w	r3, r1, r3
 800a186:	b29b      	uxth	r3, r3
 800a188:	68f9      	ldr	r1, [r7, #12]
 800a18a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a18e:	4313      	orrs	r3, r2
 800a190:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	015a      	lsls	r2, r3, #5
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	4413      	add	r3, r2
 800a19a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d155      	bne.n	800a254 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	015a      	lsls	r2, r3, #5
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	4413      	add	r3, r2
 800a1b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1b4:	681a      	ldr	r2, [r3, #0]
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	689b      	ldr	r3, [r3, #8]
 800a1ba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	78db      	ldrb	r3, [r3, #3]
 800a1c2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a1c4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	059b      	lsls	r3, r3, #22
 800a1ca:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a1cc:	4313      	orrs	r3, r2
 800a1ce:	68ba      	ldr	r2, [r7, #8]
 800a1d0:	0151      	lsls	r1, r2, #5
 800a1d2:	68fa      	ldr	r2, [r7, #12]
 800a1d4:	440a      	add	r2, r1
 800a1d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a1de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1e2:	6013      	str	r3, [r2, #0]
 800a1e4:	e036      	b.n	800a254 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1ec:	69da      	ldr	r2, [r3, #28]
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	781b      	ldrb	r3, [r3, #0]
 800a1f2:	f003 030f 	and.w	r3, r3, #15
 800a1f6:	2101      	movs	r1, #1
 800a1f8:	fa01 f303 	lsl.w	r3, r1, r3
 800a1fc:	041b      	lsls	r3, r3, #16
 800a1fe:	68f9      	ldr	r1, [r7, #12]
 800a200:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a204:	4313      	orrs	r3, r2
 800a206:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	015a      	lsls	r2, r3, #5
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	4413      	add	r3, r2
 800a210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d11a      	bne.n	800a254 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	015a      	lsls	r2, r3, #5
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	4413      	add	r3, r2
 800a226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a22a:	681a      	ldr	r2, [r3, #0]
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	689b      	ldr	r3, [r3, #8]
 800a230:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	78db      	ldrb	r3, [r3, #3]
 800a238:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a23a:	430b      	orrs	r3, r1
 800a23c:	4313      	orrs	r3, r2
 800a23e:	68ba      	ldr	r2, [r7, #8]
 800a240:	0151      	lsls	r1, r2, #5
 800a242:	68fa      	ldr	r2, [r7, #12]
 800a244:	440a      	add	r2, r1
 800a246:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a24a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a24e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a252:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a254:	2300      	movs	r3, #0
}
 800a256:	4618      	mov	r0, r3
 800a258:	3714      	adds	r7, #20
 800a25a:	46bd      	mov	sp, r7
 800a25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a260:	4770      	bx	lr
	...

0800a264 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a264:	b480      	push	{r7}
 800a266:	b085      	sub	sp, #20
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
 800a26c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	781b      	ldrb	r3, [r3, #0]
 800a276:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	785b      	ldrb	r3, [r3, #1]
 800a27c:	2b01      	cmp	r3, #1
 800a27e:	d135      	bne.n	800a2ec <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a286:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	781b      	ldrb	r3, [r3, #0]
 800a28c:	f003 030f 	and.w	r3, r3, #15
 800a290:	2101      	movs	r1, #1
 800a292:	fa01 f303 	lsl.w	r3, r1, r3
 800a296:	b29b      	uxth	r3, r3
 800a298:	43db      	mvns	r3, r3
 800a29a:	68f9      	ldr	r1, [r7, #12]
 800a29c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a2a0:	4013      	ands	r3, r2
 800a2a2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2aa:	69da      	ldr	r2, [r3, #28]
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	781b      	ldrb	r3, [r3, #0]
 800a2b0:	f003 030f 	and.w	r3, r3, #15
 800a2b4:	2101      	movs	r1, #1
 800a2b6:	fa01 f303 	lsl.w	r3, r1, r3
 800a2ba:	b29b      	uxth	r3, r3
 800a2bc:	43db      	mvns	r3, r3
 800a2be:	68f9      	ldr	r1, [r7, #12]
 800a2c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a2c4:	4013      	ands	r3, r2
 800a2c6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	015a      	lsls	r2, r3, #5
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	4413      	add	r3, r2
 800a2d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2d4:	681a      	ldr	r2, [r3, #0]
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	0159      	lsls	r1, r3, #5
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	440b      	add	r3, r1
 800a2de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2e2:	4619      	mov	r1, r3
 800a2e4:	4b1f      	ldr	r3, [pc, #124]	; (800a364 <USB_DeactivateEndpoint+0x100>)
 800a2e6:	4013      	ands	r3, r2
 800a2e8:	600b      	str	r3, [r1, #0]
 800a2ea:	e034      	b.n	800a356 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	781b      	ldrb	r3, [r3, #0]
 800a2f8:	f003 030f 	and.w	r3, r3, #15
 800a2fc:	2101      	movs	r1, #1
 800a2fe:	fa01 f303 	lsl.w	r3, r1, r3
 800a302:	041b      	lsls	r3, r3, #16
 800a304:	43db      	mvns	r3, r3
 800a306:	68f9      	ldr	r1, [r7, #12]
 800a308:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a30c:	4013      	ands	r3, r2
 800a30e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a316:	69da      	ldr	r2, [r3, #28]
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	781b      	ldrb	r3, [r3, #0]
 800a31c:	f003 030f 	and.w	r3, r3, #15
 800a320:	2101      	movs	r1, #1
 800a322:	fa01 f303 	lsl.w	r3, r1, r3
 800a326:	041b      	lsls	r3, r3, #16
 800a328:	43db      	mvns	r3, r3
 800a32a:	68f9      	ldr	r1, [r7, #12]
 800a32c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a330:	4013      	ands	r3, r2
 800a332:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	015a      	lsls	r2, r3, #5
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	4413      	add	r3, r2
 800a33c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a340:	681a      	ldr	r2, [r3, #0]
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	0159      	lsls	r1, r3, #5
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	440b      	add	r3, r1
 800a34a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a34e:	4619      	mov	r1, r3
 800a350:	4b05      	ldr	r3, [pc, #20]	; (800a368 <USB_DeactivateEndpoint+0x104>)
 800a352:	4013      	ands	r3, r2
 800a354:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a356:	2300      	movs	r3, #0
}
 800a358:	4618      	mov	r0, r3
 800a35a:	3714      	adds	r7, #20
 800a35c:	46bd      	mov	sp, r7
 800a35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a362:	4770      	bx	lr
 800a364:	ec337800 	.word	0xec337800
 800a368:	eff37800 	.word	0xeff37800

0800a36c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b08a      	sub	sp, #40	; 0x28
 800a370:	af02      	add	r7, sp, #8
 800a372:	60f8      	str	r0, [r7, #12]
 800a374:	60b9      	str	r1, [r7, #8]
 800a376:	4613      	mov	r3, r2
 800a378:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	781b      	ldrb	r3, [r3, #0]
 800a382:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	785b      	ldrb	r3, [r3, #1]
 800a388:	2b01      	cmp	r3, #1
 800a38a:	f040 815c 	bne.w	800a646 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	695b      	ldr	r3, [r3, #20]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d132      	bne.n	800a3fc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a396:	69bb      	ldr	r3, [r7, #24]
 800a398:	015a      	lsls	r2, r3, #5
 800a39a:	69fb      	ldr	r3, [r7, #28]
 800a39c:	4413      	add	r3, r2
 800a39e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3a2:	691b      	ldr	r3, [r3, #16]
 800a3a4:	69ba      	ldr	r2, [r7, #24]
 800a3a6:	0151      	lsls	r1, r2, #5
 800a3a8:	69fa      	ldr	r2, [r7, #28]
 800a3aa:	440a      	add	r2, r1
 800a3ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a3b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a3b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a3ba:	69bb      	ldr	r3, [r7, #24]
 800a3bc:	015a      	lsls	r2, r3, #5
 800a3be:	69fb      	ldr	r3, [r7, #28]
 800a3c0:	4413      	add	r3, r2
 800a3c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3c6:	691b      	ldr	r3, [r3, #16]
 800a3c8:	69ba      	ldr	r2, [r7, #24]
 800a3ca:	0151      	lsls	r1, r2, #5
 800a3cc:	69fa      	ldr	r2, [r7, #28]
 800a3ce:	440a      	add	r2, r1
 800a3d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a3d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a3da:	69bb      	ldr	r3, [r7, #24]
 800a3dc:	015a      	lsls	r2, r3, #5
 800a3de:	69fb      	ldr	r3, [r7, #28]
 800a3e0:	4413      	add	r3, r2
 800a3e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3e6:	691b      	ldr	r3, [r3, #16]
 800a3e8:	69ba      	ldr	r2, [r7, #24]
 800a3ea:	0151      	lsls	r1, r2, #5
 800a3ec:	69fa      	ldr	r2, [r7, #28]
 800a3ee:	440a      	add	r2, r1
 800a3f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3f4:	0cdb      	lsrs	r3, r3, #19
 800a3f6:	04db      	lsls	r3, r3, #19
 800a3f8:	6113      	str	r3, [r2, #16]
 800a3fa:	e074      	b.n	800a4e6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a3fc:	69bb      	ldr	r3, [r7, #24]
 800a3fe:	015a      	lsls	r2, r3, #5
 800a400:	69fb      	ldr	r3, [r7, #28]
 800a402:	4413      	add	r3, r2
 800a404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a408:	691b      	ldr	r3, [r3, #16]
 800a40a:	69ba      	ldr	r2, [r7, #24]
 800a40c:	0151      	lsls	r1, r2, #5
 800a40e:	69fa      	ldr	r2, [r7, #28]
 800a410:	440a      	add	r2, r1
 800a412:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a416:	0cdb      	lsrs	r3, r3, #19
 800a418:	04db      	lsls	r3, r3, #19
 800a41a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a41c:	69bb      	ldr	r3, [r7, #24]
 800a41e:	015a      	lsls	r2, r3, #5
 800a420:	69fb      	ldr	r3, [r7, #28]
 800a422:	4413      	add	r3, r2
 800a424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a428:	691b      	ldr	r3, [r3, #16]
 800a42a:	69ba      	ldr	r2, [r7, #24]
 800a42c:	0151      	lsls	r1, r2, #5
 800a42e:	69fa      	ldr	r2, [r7, #28]
 800a430:	440a      	add	r2, r1
 800a432:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a436:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a43a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a43e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a440:	69bb      	ldr	r3, [r7, #24]
 800a442:	015a      	lsls	r2, r3, #5
 800a444:	69fb      	ldr	r3, [r7, #28]
 800a446:	4413      	add	r3, r2
 800a448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a44c:	691a      	ldr	r2, [r3, #16]
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	6959      	ldr	r1, [r3, #20]
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	689b      	ldr	r3, [r3, #8]
 800a456:	440b      	add	r3, r1
 800a458:	1e59      	subs	r1, r3, #1
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	689b      	ldr	r3, [r3, #8]
 800a45e:	fbb1 f3f3 	udiv	r3, r1, r3
 800a462:	04d9      	lsls	r1, r3, #19
 800a464:	4b9d      	ldr	r3, [pc, #628]	; (800a6dc <USB_EPStartXfer+0x370>)
 800a466:	400b      	ands	r3, r1
 800a468:	69b9      	ldr	r1, [r7, #24]
 800a46a:	0148      	lsls	r0, r1, #5
 800a46c:	69f9      	ldr	r1, [r7, #28]
 800a46e:	4401      	add	r1, r0
 800a470:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a474:	4313      	orrs	r3, r2
 800a476:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a478:	69bb      	ldr	r3, [r7, #24]
 800a47a:	015a      	lsls	r2, r3, #5
 800a47c:	69fb      	ldr	r3, [r7, #28]
 800a47e:	4413      	add	r3, r2
 800a480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a484:	691a      	ldr	r2, [r3, #16]
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	695b      	ldr	r3, [r3, #20]
 800a48a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a48e:	69b9      	ldr	r1, [r7, #24]
 800a490:	0148      	lsls	r0, r1, #5
 800a492:	69f9      	ldr	r1, [r7, #28]
 800a494:	4401      	add	r1, r0
 800a496:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a49a:	4313      	orrs	r3, r2
 800a49c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	78db      	ldrb	r3, [r3, #3]
 800a4a2:	2b01      	cmp	r3, #1
 800a4a4:	d11f      	bne.n	800a4e6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a4a6:	69bb      	ldr	r3, [r7, #24]
 800a4a8:	015a      	lsls	r2, r3, #5
 800a4aa:	69fb      	ldr	r3, [r7, #28]
 800a4ac:	4413      	add	r3, r2
 800a4ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4b2:	691b      	ldr	r3, [r3, #16]
 800a4b4:	69ba      	ldr	r2, [r7, #24]
 800a4b6:	0151      	lsls	r1, r2, #5
 800a4b8:	69fa      	ldr	r2, [r7, #28]
 800a4ba:	440a      	add	r2, r1
 800a4bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4c0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a4c4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a4c6:	69bb      	ldr	r3, [r7, #24]
 800a4c8:	015a      	lsls	r2, r3, #5
 800a4ca:	69fb      	ldr	r3, [r7, #28]
 800a4cc:	4413      	add	r3, r2
 800a4ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4d2:	691b      	ldr	r3, [r3, #16]
 800a4d4:	69ba      	ldr	r2, [r7, #24]
 800a4d6:	0151      	lsls	r1, r2, #5
 800a4d8:	69fa      	ldr	r2, [r7, #28]
 800a4da:	440a      	add	r2, r1
 800a4dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a4e4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a4e6:	79fb      	ldrb	r3, [r7, #7]
 800a4e8:	2b01      	cmp	r3, #1
 800a4ea:	d14b      	bne.n	800a584 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	691b      	ldr	r3, [r3, #16]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d009      	beq.n	800a508 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a4f4:	69bb      	ldr	r3, [r7, #24]
 800a4f6:	015a      	lsls	r2, r3, #5
 800a4f8:	69fb      	ldr	r3, [r7, #28]
 800a4fa:	4413      	add	r3, r2
 800a4fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a500:	461a      	mov	r2, r3
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	691b      	ldr	r3, [r3, #16]
 800a506:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	78db      	ldrb	r3, [r3, #3]
 800a50c:	2b01      	cmp	r3, #1
 800a50e:	d128      	bne.n	800a562 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a510:	69fb      	ldr	r3, [r7, #28]
 800a512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a516:	689b      	ldr	r3, [r3, #8]
 800a518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d110      	bne.n	800a542 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a520:	69bb      	ldr	r3, [r7, #24]
 800a522:	015a      	lsls	r2, r3, #5
 800a524:	69fb      	ldr	r3, [r7, #28]
 800a526:	4413      	add	r3, r2
 800a528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	69ba      	ldr	r2, [r7, #24]
 800a530:	0151      	lsls	r1, r2, #5
 800a532:	69fa      	ldr	r2, [r7, #28]
 800a534:	440a      	add	r2, r1
 800a536:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a53a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a53e:	6013      	str	r3, [r2, #0]
 800a540:	e00f      	b.n	800a562 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a542:	69bb      	ldr	r3, [r7, #24]
 800a544:	015a      	lsls	r2, r3, #5
 800a546:	69fb      	ldr	r3, [r7, #28]
 800a548:	4413      	add	r3, r2
 800a54a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	69ba      	ldr	r2, [r7, #24]
 800a552:	0151      	lsls	r1, r2, #5
 800a554:	69fa      	ldr	r2, [r7, #28]
 800a556:	440a      	add	r2, r1
 800a558:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a55c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a560:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a562:	69bb      	ldr	r3, [r7, #24]
 800a564:	015a      	lsls	r2, r3, #5
 800a566:	69fb      	ldr	r3, [r7, #28]
 800a568:	4413      	add	r3, r2
 800a56a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	69ba      	ldr	r2, [r7, #24]
 800a572:	0151      	lsls	r1, r2, #5
 800a574:	69fa      	ldr	r2, [r7, #28]
 800a576:	440a      	add	r2, r1
 800a578:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a57c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a580:	6013      	str	r3, [r2, #0]
 800a582:	e12f      	b.n	800a7e4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a584:	69bb      	ldr	r3, [r7, #24]
 800a586:	015a      	lsls	r2, r3, #5
 800a588:	69fb      	ldr	r3, [r7, #28]
 800a58a:	4413      	add	r3, r2
 800a58c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	69ba      	ldr	r2, [r7, #24]
 800a594:	0151      	lsls	r1, r2, #5
 800a596:	69fa      	ldr	r2, [r7, #28]
 800a598:	440a      	add	r2, r1
 800a59a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a59e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a5a2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	78db      	ldrb	r3, [r3, #3]
 800a5a8:	2b01      	cmp	r3, #1
 800a5aa:	d015      	beq.n	800a5d8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	695b      	ldr	r3, [r3, #20]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	f000 8117 	beq.w	800a7e4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a5b6:	69fb      	ldr	r3, [r7, #28]
 800a5b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	781b      	ldrb	r3, [r3, #0]
 800a5c2:	f003 030f 	and.w	r3, r3, #15
 800a5c6:	2101      	movs	r1, #1
 800a5c8:	fa01 f303 	lsl.w	r3, r1, r3
 800a5cc:	69f9      	ldr	r1, [r7, #28]
 800a5ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a5d2:	4313      	orrs	r3, r2
 800a5d4:	634b      	str	r3, [r1, #52]	; 0x34
 800a5d6:	e105      	b.n	800a7e4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a5d8:	69fb      	ldr	r3, [r7, #28]
 800a5da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5de:	689b      	ldr	r3, [r3, #8]
 800a5e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d110      	bne.n	800a60a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a5e8:	69bb      	ldr	r3, [r7, #24]
 800a5ea:	015a      	lsls	r2, r3, #5
 800a5ec:	69fb      	ldr	r3, [r7, #28]
 800a5ee:	4413      	add	r3, r2
 800a5f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	69ba      	ldr	r2, [r7, #24]
 800a5f8:	0151      	lsls	r1, r2, #5
 800a5fa:	69fa      	ldr	r2, [r7, #28]
 800a5fc:	440a      	add	r2, r1
 800a5fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a602:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a606:	6013      	str	r3, [r2, #0]
 800a608:	e00f      	b.n	800a62a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a60a:	69bb      	ldr	r3, [r7, #24]
 800a60c:	015a      	lsls	r2, r3, #5
 800a60e:	69fb      	ldr	r3, [r7, #28]
 800a610:	4413      	add	r3, r2
 800a612:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	69ba      	ldr	r2, [r7, #24]
 800a61a:	0151      	lsls	r1, r2, #5
 800a61c:	69fa      	ldr	r2, [r7, #28]
 800a61e:	440a      	add	r2, r1
 800a620:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a628:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	68d9      	ldr	r1, [r3, #12]
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	781a      	ldrb	r2, [r3, #0]
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	695b      	ldr	r3, [r3, #20]
 800a636:	b298      	uxth	r0, r3
 800a638:	79fb      	ldrb	r3, [r7, #7]
 800a63a:	9300      	str	r3, [sp, #0]
 800a63c:	4603      	mov	r3, r0
 800a63e:	68f8      	ldr	r0, [r7, #12]
 800a640:	f000 fa2b 	bl	800aa9a <USB_WritePacket>
 800a644:	e0ce      	b.n	800a7e4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a646:	69bb      	ldr	r3, [r7, #24]
 800a648:	015a      	lsls	r2, r3, #5
 800a64a:	69fb      	ldr	r3, [r7, #28]
 800a64c:	4413      	add	r3, r2
 800a64e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a652:	691b      	ldr	r3, [r3, #16]
 800a654:	69ba      	ldr	r2, [r7, #24]
 800a656:	0151      	lsls	r1, r2, #5
 800a658:	69fa      	ldr	r2, [r7, #28]
 800a65a:	440a      	add	r2, r1
 800a65c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a660:	0cdb      	lsrs	r3, r3, #19
 800a662:	04db      	lsls	r3, r3, #19
 800a664:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a666:	69bb      	ldr	r3, [r7, #24]
 800a668:	015a      	lsls	r2, r3, #5
 800a66a:	69fb      	ldr	r3, [r7, #28]
 800a66c:	4413      	add	r3, r2
 800a66e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a672:	691b      	ldr	r3, [r3, #16]
 800a674:	69ba      	ldr	r2, [r7, #24]
 800a676:	0151      	lsls	r1, r2, #5
 800a678:	69fa      	ldr	r2, [r7, #28]
 800a67a:	440a      	add	r2, r1
 800a67c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a680:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a684:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a688:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	695b      	ldr	r3, [r3, #20]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d126      	bne.n	800a6e0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a692:	69bb      	ldr	r3, [r7, #24]
 800a694:	015a      	lsls	r2, r3, #5
 800a696:	69fb      	ldr	r3, [r7, #28]
 800a698:	4413      	add	r3, r2
 800a69a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a69e:	691a      	ldr	r2, [r3, #16]
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	689b      	ldr	r3, [r3, #8]
 800a6a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a6a8:	69b9      	ldr	r1, [r7, #24]
 800a6aa:	0148      	lsls	r0, r1, #5
 800a6ac:	69f9      	ldr	r1, [r7, #28]
 800a6ae:	4401      	add	r1, r0
 800a6b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a6b4:	4313      	orrs	r3, r2
 800a6b6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a6b8:	69bb      	ldr	r3, [r7, #24]
 800a6ba:	015a      	lsls	r2, r3, #5
 800a6bc:	69fb      	ldr	r3, [r7, #28]
 800a6be:	4413      	add	r3, r2
 800a6c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6c4:	691b      	ldr	r3, [r3, #16]
 800a6c6:	69ba      	ldr	r2, [r7, #24]
 800a6c8:	0151      	lsls	r1, r2, #5
 800a6ca:	69fa      	ldr	r2, [r7, #28]
 800a6cc:	440a      	add	r2, r1
 800a6ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a6d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a6d6:	6113      	str	r3, [r2, #16]
 800a6d8:	e036      	b.n	800a748 <USB_EPStartXfer+0x3dc>
 800a6da:	bf00      	nop
 800a6dc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	695a      	ldr	r2, [r3, #20]
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	689b      	ldr	r3, [r3, #8]
 800a6e8:	4413      	add	r3, r2
 800a6ea:	1e5a      	subs	r2, r3, #1
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	689b      	ldr	r3, [r3, #8]
 800a6f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6f4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a6f6:	69bb      	ldr	r3, [r7, #24]
 800a6f8:	015a      	lsls	r2, r3, #5
 800a6fa:	69fb      	ldr	r3, [r7, #28]
 800a6fc:	4413      	add	r3, r2
 800a6fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a702:	691a      	ldr	r2, [r3, #16]
 800a704:	8afb      	ldrh	r3, [r7, #22]
 800a706:	04d9      	lsls	r1, r3, #19
 800a708:	4b39      	ldr	r3, [pc, #228]	; (800a7f0 <USB_EPStartXfer+0x484>)
 800a70a:	400b      	ands	r3, r1
 800a70c:	69b9      	ldr	r1, [r7, #24]
 800a70e:	0148      	lsls	r0, r1, #5
 800a710:	69f9      	ldr	r1, [r7, #28]
 800a712:	4401      	add	r1, r0
 800a714:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a718:	4313      	orrs	r3, r2
 800a71a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800a71c:	69bb      	ldr	r3, [r7, #24]
 800a71e:	015a      	lsls	r2, r3, #5
 800a720:	69fb      	ldr	r3, [r7, #28]
 800a722:	4413      	add	r3, r2
 800a724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a728:	691a      	ldr	r2, [r3, #16]
 800a72a:	68bb      	ldr	r3, [r7, #8]
 800a72c:	689b      	ldr	r3, [r3, #8]
 800a72e:	8af9      	ldrh	r1, [r7, #22]
 800a730:	fb01 f303 	mul.w	r3, r1, r3
 800a734:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a738:	69b9      	ldr	r1, [r7, #24]
 800a73a:	0148      	lsls	r0, r1, #5
 800a73c:	69f9      	ldr	r1, [r7, #28]
 800a73e:	4401      	add	r1, r0
 800a740:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a744:	4313      	orrs	r3, r2
 800a746:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a748:	79fb      	ldrb	r3, [r7, #7]
 800a74a:	2b01      	cmp	r3, #1
 800a74c:	d10d      	bne.n	800a76a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	68db      	ldr	r3, [r3, #12]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d009      	beq.n	800a76a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	68d9      	ldr	r1, [r3, #12]
 800a75a:	69bb      	ldr	r3, [r7, #24]
 800a75c:	015a      	lsls	r2, r3, #5
 800a75e:	69fb      	ldr	r3, [r7, #28]
 800a760:	4413      	add	r3, r2
 800a762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a766:	460a      	mov	r2, r1
 800a768:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	78db      	ldrb	r3, [r3, #3]
 800a76e:	2b01      	cmp	r3, #1
 800a770:	d128      	bne.n	800a7c4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a772:	69fb      	ldr	r3, [r7, #28]
 800a774:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a778:	689b      	ldr	r3, [r3, #8]
 800a77a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d110      	bne.n	800a7a4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a782:	69bb      	ldr	r3, [r7, #24]
 800a784:	015a      	lsls	r2, r3, #5
 800a786:	69fb      	ldr	r3, [r7, #28]
 800a788:	4413      	add	r3, r2
 800a78a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	69ba      	ldr	r2, [r7, #24]
 800a792:	0151      	lsls	r1, r2, #5
 800a794:	69fa      	ldr	r2, [r7, #28]
 800a796:	440a      	add	r2, r1
 800a798:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a79c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a7a0:	6013      	str	r3, [r2, #0]
 800a7a2:	e00f      	b.n	800a7c4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a7a4:	69bb      	ldr	r3, [r7, #24]
 800a7a6:	015a      	lsls	r2, r3, #5
 800a7a8:	69fb      	ldr	r3, [r7, #28]
 800a7aa:	4413      	add	r3, r2
 800a7ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	69ba      	ldr	r2, [r7, #24]
 800a7b4:	0151      	lsls	r1, r2, #5
 800a7b6:	69fa      	ldr	r2, [r7, #28]
 800a7b8:	440a      	add	r2, r1
 800a7ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a7c2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a7c4:	69bb      	ldr	r3, [r7, #24]
 800a7c6:	015a      	lsls	r2, r3, #5
 800a7c8:	69fb      	ldr	r3, [r7, #28]
 800a7ca:	4413      	add	r3, r2
 800a7cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	69ba      	ldr	r2, [r7, #24]
 800a7d4:	0151      	lsls	r1, r2, #5
 800a7d6:	69fa      	ldr	r2, [r7, #28]
 800a7d8:	440a      	add	r2, r1
 800a7da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a7e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a7e4:	2300      	movs	r3, #0
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	3720      	adds	r7, #32
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}
 800a7ee:	bf00      	nop
 800a7f0:	1ff80000 	.word	0x1ff80000

0800a7f4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b087      	sub	sp, #28
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	60f8      	str	r0, [r7, #12]
 800a7fc:	60b9      	str	r1, [r7, #8]
 800a7fe:	4613      	mov	r3, r2
 800a800:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a806:	68bb      	ldr	r3, [r7, #8]
 800a808:	781b      	ldrb	r3, [r3, #0]
 800a80a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	785b      	ldrb	r3, [r3, #1]
 800a810:	2b01      	cmp	r3, #1
 800a812:	f040 80cd 	bne.w	800a9b0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	695b      	ldr	r3, [r3, #20]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d132      	bne.n	800a884 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a81e:	693b      	ldr	r3, [r7, #16]
 800a820:	015a      	lsls	r2, r3, #5
 800a822:	697b      	ldr	r3, [r7, #20]
 800a824:	4413      	add	r3, r2
 800a826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a82a:	691b      	ldr	r3, [r3, #16]
 800a82c:	693a      	ldr	r2, [r7, #16]
 800a82e:	0151      	lsls	r1, r2, #5
 800a830:	697a      	ldr	r2, [r7, #20]
 800a832:	440a      	add	r2, r1
 800a834:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a838:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a83c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a840:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	015a      	lsls	r2, r3, #5
 800a846:	697b      	ldr	r3, [r7, #20]
 800a848:	4413      	add	r3, r2
 800a84a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a84e:	691b      	ldr	r3, [r3, #16]
 800a850:	693a      	ldr	r2, [r7, #16]
 800a852:	0151      	lsls	r1, r2, #5
 800a854:	697a      	ldr	r2, [r7, #20]
 800a856:	440a      	add	r2, r1
 800a858:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a85c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a860:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a862:	693b      	ldr	r3, [r7, #16]
 800a864:	015a      	lsls	r2, r3, #5
 800a866:	697b      	ldr	r3, [r7, #20]
 800a868:	4413      	add	r3, r2
 800a86a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a86e:	691b      	ldr	r3, [r3, #16]
 800a870:	693a      	ldr	r2, [r7, #16]
 800a872:	0151      	lsls	r1, r2, #5
 800a874:	697a      	ldr	r2, [r7, #20]
 800a876:	440a      	add	r2, r1
 800a878:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a87c:	0cdb      	lsrs	r3, r3, #19
 800a87e:	04db      	lsls	r3, r3, #19
 800a880:	6113      	str	r3, [r2, #16]
 800a882:	e04e      	b.n	800a922 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a884:	693b      	ldr	r3, [r7, #16]
 800a886:	015a      	lsls	r2, r3, #5
 800a888:	697b      	ldr	r3, [r7, #20]
 800a88a:	4413      	add	r3, r2
 800a88c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a890:	691b      	ldr	r3, [r3, #16]
 800a892:	693a      	ldr	r2, [r7, #16]
 800a894:	0151      	lsls	r1, r2, #5
 800a896:	697a      	ldr	r2, [r7, #20]
 800a898:	440a      	add	r2, r1
 800a89a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a89e:	0cdb      	lsrs	r3, r3, #19
 800a8a0:	04db      	lsls	r3, r3, #19
 800a8a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a8a4:	693b      	ldr	r3, [r7, #16]
 800a8a6:	015a      	lsls	r2, r3, #5
 800a8a8:	697b      	ldr	r3, [r7, #20]
 800a8aa:	4413      	add	r3, r2
 800a8ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8b0:	691b      	ldr	r3, [r3, #16]
 800a8b2:	693a      	ldr	r2, [r7, #16]
 800a8b4:	0151      	lsls	r1, r2, #5
 800a8b6:	697a      	ldr	r2, [r7, #20]
 800a8b8:	440a      	add	r2, r1
 800a8ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8be:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a8c2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a8c6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	695a      	ldr	r2, [r3, #20]
 800a8cc:	68bb      	ldr	r3, [r7, #8]
 800a8ce:	689b      	ldr	r3, [r3, #8]
 800a8d0:	429a      	cmp	r2, r3
 800a8d2:	d903      	bls.n	800a8dc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	689a      	ldr	r2, [r3, #8]
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a8dc:	693b      	ldr	r3, [r7, #16]
 800a8de:	015a      	lsls	r2, r3, #5
 800a8e0:	697b      	ldr	r3, [r7, #20]
 800a8e2:	4413      	add	r3, r2
 800a8e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8e8:	691b      	ldr	r3, [r3, #16]
 800a8ea:	693a      	ldr	r2, [r7, #16]
 800a8ec:	0151      	lsls	r1, r2, #5
 800a8ee:	697a      	ldr	r2, [r7, #20]
 800a8f0:	440a      	add	r2, r1
 800a8f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a8fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a8fc:	693b      	ldr	r3, [r7, #16]
 800a8fe:	015a      	lsls	r2, r3, #5
 800a900:	697b      	ldr	r3, [r7, #20]
 800a902:	4413      	add	r3, r2
 800a904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a908:	691a      	ldr	r2, [r3, #16]
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	695b      	ldr	r3, [r3, #20]
 800a90e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a912:	6939      	ldr	r1, [r7, #16]
 800a914:	0148      	lsls	r0, r1, #5
 800a916:	6979      	ldr	r1, [r7, #20]
 800a918:	4401      	add	r1, r0
 800a91a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a91e:	4313      	orrs	r3, r2
 800a920:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a922:	79fb      	ldrb	r3, [r7, #7]
 800a924:	2b01      	cmp	r3, #1
 800a926:	d11e      	bne.n	800a966 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a928:	68bb      	ldr	r3, [r7, #8]
 800a92a:	691b      	ldr	r3, [r3, #16]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d009      	beq.n	800a944 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a930:	693b      	ldr	r3, [r7, #16]
 800a932:	015a      	lsls	r2, r3, #5
 800a934:	697b      	ldr	r3, [r7, #20]
 800a936:	4413      	add	r3, r2
 800a938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a93c:	461a      	mov	r2, r3
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	691b      	ldr	r3, [r3, #16]
 800a942:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a944:	693b      	ldr	r3, [r7, #16]
 800a946:	015a      	lsls	r2, r3, #5
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	4413      	add	r3, r2
 800a94c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	693a      	ldr	r2, [r7, #16]
 800a954:	0151      	lsls	r1, r2, #5
 800a956:	697a      	ldr	r2, [r7, #20]
 800a958:	440a      	add	r2, r1
 800a95a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a95e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a962:	6013      	str	r3, [r2, #0]
 800a964:	e092      	b.n	800aa8c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a966:	693b      	ldr	r3, [r7, #16]
 800a968:	015a      	lsls	r2, r3, #5
 800a96a:	697b      	ldr	r3, [r7, #20]
 800a96c:	4413      	add	r3, r2
 800a96e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	693a      	ldr	r2, [r7, #16]
 800a976:	0151      	lsls	r1, r2, #5
 800a978:	697a      	ldr	r2, [r7, #20]
 800a97a:	440a      	add	r2, r1
 800a97c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a980:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a984:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	695b      	ldr	r3, [r3, #20]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d07e      	beq.n	800aa8c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a98e:	697b      	ldr	r3, [r7, #20]
 800a990:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a994:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	781b      	ldrb	r3, [r3, #0]
 800a99a:	f003 030f 	and.w	r3, r3, #15
 800a99e:	2101      	movs	r1, #1
 800a9a0:	fa01 f303 	lsl.w	r3, r1, r3
 800a9a4:	6979      	ldr	r1, [r7, #20]
 800a9a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a9aa:	4313      	orrs	r3, r2
 800a9ac:	634b      	str	r3, [r1, #52]	; 0x34
 800a9ae:	e06d      	b.n	800aa8c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a9b0:	693b      	ldr	r3, [r7, #16]
 800a9b2:	015a      	lsls	r2, r3, #5
 800a9b4:	697b      	ldr	r3, [r7, #20]
 800a9b6:	4413      	add	r3, r2
 800a9b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9bc:	691b      	ldr	r3, [r3, #16]
 800a9be:	693a      	ldr	r2, [r7, #16]
 800a9c0:	0151      	lsls	r1, r2, #5
 800a9c2:	697a      	ldr	r2, [r7, #20]
 800a9c4:	440a      	add	r2, r1
 800a9c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9ca:	0cdb      	lsrs	r3, r3, #19
 800a9cc:	04db      	lsls	r3, r3, #19
 800a9ce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a9d0:	693b      	ldr	r3, [r7, #16]
 800a9d2:	015a      	lsls	r2, r3, #5
 800a9d4:	697b      	ldr	r3, [r7, #20]
 800a9d6:	4413      	add	r3, r2
 800a9d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9dc:	691b      	ldr	r3, [r3, #16]
 800a9de:	693a      	ldr	r2, [r7, #16]
 800a9e0:	0151      	lsls	r1, r2, #5
 800a9e2:	697a      	ldr	r2, [r7, #20]
 800a9e4:	440a      	add	r2, r1
 800a9e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9ea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a9ee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a9f2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800a9f4:	68bb      	ldr	r3, [r7, #8]
 800a9f6:	695b      	ldr	r3, [r3, #20]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d003      	beq.n	800aa04 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	689a      	ldr	r2, [r3, #8]
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aa04:	693b      	ldr	r3, [r7, #16]
 800aa06:	015a      	lsls	r2, r3, #5
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	4413      	add	r3, r2
 800aa0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa10:	691b      	ldr	r3, [r3, #16]
 800aa12:	693a      	ldr	r2, [r7, #16]
 800aa14:	0151      	lsls	r1, r2, #5
 800aa16:	697a      	ldr	r2, [r7, #20]
 800aa18:	440a      	add	r2, r1
 800aa1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa1e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aa22:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800aa24:	693b      	ldr	r3, [r7, #16]
 800aa26:	015a      	lsls	r2, r3, #5
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	4413      	add	r3, r2
 800aa2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa30:	691a      	ldr	r2, [r3, #16]
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	689b      	ldr	r3, [r3, #8]
 800aa36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aa3a:	6939      	ldr	r1, [r7, #16]
 800aa3c:	0148      	lsls	r0, r1, #5
 800aa3e:	6979      	ldr	r1, [r7, #20]
 800aa40:	4401      	add	r1, r0
 800aa42:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800aa46:	4313      	orrs	r3, r2
 800aa48:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800aa4a:	79fb      	ldrb	r3, [r7, #7]
 800aa4c:	2b01      	cmp	r3, #1
 800aa4e:	d10d      	bne.n	800aa6c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	68db      	ldr	r3, [r3, #12]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d009      	beq.n	800aa6c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	68d9      	ldr	r1, [r3, #12]
 800aa5c:	693b      	ldr	r3, [r7, #16]
 800aa5e:	015a      	lsls	r2, r3, #5
 800aa60:	697b      	ldr	r3, [r7, #20]
 800aa62:	4413      	add	r3, r2
 800aa64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa68:	460a      	mov	r2, r1
 800aa6a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800aa6c:	693b      	ldr	r3, [r7, #16]
 800aa6e:	015a      	lsls	r2, r3, #5
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	4413      	add	r3, r2
 800aa74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	693a      	ldr	r2, [r7, #16]
 800aa7c:	0151      	lsls	r1, r2, #5
 800aa7e:	697a      	ldr	r2, [r7, #20]
 800aa80:	440a      	add	r2, r1
 800aa82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa86:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800aa8a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800aa8c:	2300      	movs	r3, #0
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	371c      	adds	r7, #28
 800aa92:	46bd      	mov	sp, r7
 800aa94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa98:	4770      	bx	lr

0800aa9a <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800aa9a:	b480      	push	{r7}
 800aa9c:	b089      	sub	sp, #36	; 0x24
 800aa9e:	af00      	add	r7, sp, #0
 800aaa0:	60f8      	str	r0, [r7, #12]
 800aaa2:	60b9      	str	r1, [r7, #8]
 800aaa4:	4611      	mov	r1, r2
 800aaa6:	461a      	mov	r2, r3
 800aaa8:	460b      	mov	r3, r1
 800aaaa:	71fb      	strb	r3, [r7, #7]
 800aaac:	4613      	mov	r3, r2
 800aaae:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800aab8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d11a      	bne.n	800aaf6 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800aac0:	88bb      	ldrh	r3, [r7, #4]
 800aac2:	3303      	adds	r3, #3
 800aac4:	089b      	lsrs	r3, r3, #2
 800aac6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800aac8:	2300      	movs	r3, #0
 800aaca:	61bb      	str	r3, [r7, #24]
 800aacc:	e00f      	b.n	800aaee <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800aace:	79fb      	ldrb	r3, [r7, #7]
 800aad0:	031a      	lsls	r2, r3, #12
 800aad2:	697b      	ldr	r3, [r7, #20]
 800aad4:	4413      	add	r3, r2
 800aad6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aada:	461a      	mov	r2, r3
 800aadc:	69fb      	ldr	r3, [r7, #28]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	6013      	str	r3, [r2, #0]
      pSrc++;
 800aae2:	69fb      	ldr	r3, [r7, #28]
 800aae4:	3304      	adds	r3, #4
 800aae6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800aae8:	69bb      	ldr	r3, [r7, #24]
 800aaea:	3301      	adds	r3, #1
 800aaec:	61bb      	str	r3, [r7, #24]
 800aaee:	69ba      	ldr	r2, [r7, #24]
 800aaf0:	693b      	ldr	r3, [r7, #16]
 800aaf2:	429a      	cmp	r2, r3
 800aaf4:	d3eb      	bcc.n	800aace <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800aaf6:	2300      	movs	r3, #0
}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	3724      	adds	r7, #36	; 0x24
 800aafc:	46bd      	mov	sp, r7
 800aafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab02:	4770      	bx	lr

0800ab04 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ab04:	b480      	push	{r7}
 800ab06:	b089      	sub	sp, #36	; 0x24
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	60f8      	str	r0, [r7, #12]
 800ab0c:	60b9      	str	r1, [r7, #8]
 800ab0e:	4613      	mov	r3, r2
 800ab10:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800ab1a:	88fb      	ldrh	r3, [r7, #6]
 800ab1c:	3303      	adds	r3, #3
 800ab1e:	089b      	lsrs	r3, r3, #2
 800ab20:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800ab22:	2300      	movs	r3, #0
 800ab24:	61bb      	str	r3, [r7, #24]
 800ab26:	e00b      	b.n	800ab40 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ab28:	697b      	ldr	r3, [r7, #20]
 800ab2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab2e:	681a      	ldr	r2, [r3, #0]
 800ab30:	69fb      	ldr	r3, [r7, #28]
 800ab32:	601a      	str	r2, [r3, #0]
    pDest++;
 800ab34:	69fb      	ldr	r3, [r7, #28]
 800ab36:	3304      	adds	r3, #4
 800ab38:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800ab3a:	69bb      	ldr	r3, [r7, #24]
 800ab3c:	3301      	adds	r3, #1
 800ab3e:	61bb      	str	r3, [r7, #24]
 800ab40:	69ba      	ldr	r2, [r7, #24]
 800ab42:	693b      	ldr	r3, [r7, #16]
 800ab44:	429a      	cmp	r2, r3
 800ab46:	d3ef      	bcc.n	800ab28 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800ab48:	69fb      	ldr	r3, [r7, #28]
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3724      	adds	r7, #36	; 0x24
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab54:	4770      	bx	lr

0800ab56 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ab56:	b480      	push	{r7}
 800ab58:	b085      	sub	sp, #20
 800ab5a:	af00      	add	r7, sp, #0
 800ab5c:	6078      	str	r0, [r7, #4]
 800ab5e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	781b      	ldrb	r3, [r3, #0]
 800ab68:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	785b      	ldrb	r3, [r3, #1]
 800ab6e:	2b01      	cmp	r3, #1
 800ab70:	d12c      	bne.n	800abcc <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	015a      	lsls	r2, r3, #5
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	4413      	add	r3, r2
 800ab7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	db12      	blt.n	800abaa <USB_EPSetStall+0x54>
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d00f      	beq.n	800abaa <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ab8a:	68bb      	ldr	r3, [r7, #8]
 800ab8c:	015a      	lsls	r2, r3, #5
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	4413      	add	r3, r2
 800ab92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	68ba      	ldr	r2, [r7, #8]
 800ab9a:	0151      	lsls	r1, r2, #5
 800ab9c:	68fa      	ldr	r2, [r7, #12]
 800ab9e:	440a      	add	r2, r1
 800aba0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aba4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800aba8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	015a      	lsls	r2, r3, #5
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	4413      	add	r3, r2
 800abb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	68ba      	ldr	r2, [r7, #8]
 800abba:	0151      	lsls	r1, r2, #5
 800abbc:	68fa      	ldr	r2, [r7, #12]
 800abbe:	440a      	add	r2, r1
 800abc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abc4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800abc8:	6013      	str	r3, [r2, #0]
 800abca:	e02b      	b.n	800ac24 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	015a      	lsls	r2, r3, #5
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	4413      	add	r3, r2
 800abd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	db12      	blt.n	800ac04 <USB_EPSetStall+0xae>
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d00f      	beq.n	800ac04 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	015a      	lsls	r2, r3, #5
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	4413      	add	r3, r2
 800abec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	68ba      	ldr	r2, [r7, #8]
 800abf4:	0151      	lsls	r1, r2, #5
 800abf6:	68fa      	ldr	r2, [r7, #12]
 800abf8:	440a      	add	r2, r1
 800abfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800abfe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ac02:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	015a      	lsls	r2, r3, #5
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	4413      	add	r3, r2
 800ac0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	68ba      	ldr	r2, [r7, #8]
 800ac14:	0151      	lsls	r1, r2, #5
 800ac16:	68fa      	ldr	r2, [r7, #12]
 800ac18:	440a      	add	r2, r1
 800ac1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ac22:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ac24:	2300      	movs	r3, #0
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	3714      	adds	r7, #20
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac30:	4770      	bx	lr

0800ac32 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ac32:	b480      	push	{r7}
 800ac34:	b085      	sub	sp, #20
 800ac36:	af00      	add	r7, sp, #0
 800ac38:	6078      	str	r0, [r7, #4]
 800ac3a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	781b      	ldrb	r3, [r3, #0]
 800ac44:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	785b      	ldrb	r3, [r3, #1]
 800ac4a:	2b01      	cmp	r3, #1
 800ac4c:	d128      	bne.n	800aca0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	015a      	lsls	r2, r3, #5
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	4413      	add	r3, r2
 800ac56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	68ba      	ldr	r2, [r7, #8]
 800ac5e:	0151      	lsls	r1, r2, #5
 800ac60:	68fa      	ldr	r2, [r7, #12]
 800ac62:	440a      	add	r2, r1
 800ac64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac68:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ac6c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	78db      	ldrb	r3, [r3, #3]
 800ac72:	2b03      	cmp	r3, #3
 800ac74:	d003      	beq.n	800ac7e <USB_EPClearStall+0x4c>
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	78db      	ldrb	r3, [r3, #3]
 800ac7a:	2b02      	cmp	r3, #2
 800ac7c:	d138      	bne.n	800acf0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	015a      	lsls	r2, r3, #5
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	4413      	add	r3, r2
 800ac86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	68ba      	ldr	r2, [r7, #8]
 800ac8e:	0151      	lsls	r1, r2, #5
 800ac90:	68fa      	ldr	r2, [r7, #12]
 800ac92:	440a      	add	r2, r1
 800ac94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac9c:	6013      	str	r3, [r2, #0]
 800ac9e:	e027      	b.n	800acf0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	015a      	lsls	r2, r3, #5
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	4413      	add	r3, r2
 800aca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	68ba      	ldr	r2, [r7, #8]
 800acb0:	0151      	lsls	r1, r2, #5
 800acb2:	68fa      	ldr	r2, [r7, #12]
 800acb4:	440a      	add	r2, r1
 800acb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800acba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800acbe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	78db      	ldrb	r3, [r3, #3]
 800acc4:	2b03      	cmp	r3, #3
 800acc6:	d003      	beq.n	800acd0 <USB_EPClearStall+0x9e>
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	78db      	ldrb	r3, [r3, #3]
 800accc:	2b02      	cmp	r3, #2
 800acce:	d10f      	bne.n	800acf0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	015a      	lsls	r2, r3, #5
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	4413      	add	r3, r2
 800acd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	68ba      	ldr	r2, [r7, #8]
 800ace0:	0151      	lsls	r1, r2, #5
 800ace2:	68fa      	ldr	r2, [r7, #12]
 800ace4:	440a      	add	r2, r1
 800ace6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800acea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800acee:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800acf0:	2300      	movs	r3, #0
}
 800acf2:	4618      	mov	r0, r3
 800acf4:	3714      	adds	r7, #20
 800acf6:	46bd      	mov	sp, r7
 800acf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfc:	4770      	bx	lr

0800acfe <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800acfe:	b480      	push	{r7}
 800ad00:	b085      	sub	sp, #20
 800ad02:	af00      	add	r7, sp, #0
 800ad04:	6078      	str	r0, [r7, #4]
 800ad06:	460b      	mov	r3, r1
 800ad08:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	68fa      	ldr	r2, [r7, #12]
 800ad18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ad1c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ad20:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad28:	681a      	ldr	r2, [r3, #0]
 800ad2a:	78fb      	ldrb	r3, [r7, #3]
 800ad2c:	011b      	lsls	r3, r3, #4
 800ad2e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800ad32:	68f9      	ldr	r1, [r7, #12]
 800ad34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ad38:	4313      	orrs	r3, r2
 800ad3a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ad3c:	2300      	movs	r3, #0
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3714      	adds	r7, #20
 800ad42:	46bd      	mov	sp, r7
 800ad44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad48:	4770      	bx	lr

0800ad4a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ad4a:	b580      	push	{r7, lr}
 800ad4c:	b084      	sub	sp, #16
 800ad4e:	af00      	add	r7, sp, #0
 800ad50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad5c:	685b      	ldr	r3, [r3, #4]
 800ad5e:	68fa      	ldr	r2, [r7, #12]
 800ad60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ad64:	f023 0302 	bic.w	r3, r3, #2
 800ad68:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800ad6a:	2003      	movs	r0, #3
 800ad6c:	f7f7 fec4 	bl	8002af8 <HAL_Delay>

  return HAL_OK;
 800ad70:	2300      	movs	r3, #0
}
 800ad72:	4618      	mov	r0, r3
 800ad74:	3710      	adds	r7, #16
 800ad76:	46bd      	mov	sp, r7
 800ad78:	bd80      	pop	{r7, pc}

0800ad7a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ad7a:	b580      	push	{r7, lr}
 800ad7c:	b084      	sub	sp, #16
 800ad7e:	af00      	add	r7, sp, #0
 800ad80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad8c:	685b      	ldr	r3, [r3, #4]
 800ad8e:	68fa      	ldr	r2, [r7, #12]
 800ad90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ad94:	f043 0302 	orr.w	r3, r3, #2
 800ad98:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800ad9a:	2003      	movs	r0, #3
 800ad9c:	f7f7 feac 	bl	8002af8 <HAL_Delay>

  return HAL_OK;
 800ada0:	2300      	movs	r3, #0
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	3710      	adds	r7, #16
 800ada6:	46bd      	mov	sp, r7
 800ada8:	bd80      	pop	{r7, pc}

0800adaa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800adaa:	b480      	push	{r7}
 800adac:	b085      	sub	sp, #20
 800adae:	af00      	add	r7, sp, #0
 800adb0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	695b      	ldr	r3, [r3, #20]
 800adb6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	699b      	ldr	r3, [r3, #24]
 800adbc:	68fa      	ldr	r2, [r7, #12]
 800adbe:	4013      	ands	r3, r2
 800adc0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800adc2:	68fb      	ldr	r3, [r7, #12]
}
 800adc4:	4618      	mov	r0, r3
 800adc6:	3714      	adds	r7, #20
 800adc8:	46bd      	mov	sp, r7
 800adca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adce:	4770      	bx	lr

0800add0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800add0:	b480      	push	{r7}
 800add2:	b085      	sub	sp, #20
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ade2:	699b      	ldr	r3, [r3, #24]
 800ade4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adec:	69db      	ldr	r3, [r3, #28]
 800adee:	68ba      	ldr	r2, [r7, #8]
 800adf0:	4013      	ands	r3, r2
 800adf2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800adf4:	68bb      	ldr	r3, [r7, #8]
 800adf6:	0c1b      	lsrs	r3, r3, #16
}
 800adf8:	4618      	mov	r0, r3
 800adfa:	3714      	adds	r7, #20
 800adfc:	46bd      	mov	sp, r7
 800adfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae02:	4770      	bx	lr

0800ae04 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ae04:	b480      	push	{r7}
 800ae06:	b085      	sub	sp, #20
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae16:	699b      	ldr	r3, [r3, #24]
 800ae18:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae20:	69db      	ldr	r3, [r3, #28]
 800ae22:	68ba      	ldr	r2, [r7, #8]
 800ae24:	4013      	ands	r3, r2
 800ae26:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	b29b      	uxth	r3, r3
}
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	3714      	adds	r7, #20
 800ae30:	46bd      	mov	sp, r7
 800ae32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae36:	4770      	bx	lr

0800ae38 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ae38:	b480      	push	{r7}
 800ae3a:	b085      	sub	sp, #20
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
 800ae40:	460b      	mov	r3, r1
 800ae42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ae48:	78fb      	ldrb	r3, [r7, #3]
 800ae4a:	015a      	lsls	r2, r3, #5
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	4413      	add	r3, r2
 800ae50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae54:	689b      	ldr	r3, [r3, #8]
 800ae56:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae5e:	695b      	ldr	r3, [r3, #20]
 800ae60:	68ba      	ldr	r2, [r7, #8]
 800ae62:	4013      	ands	r3, r2
 800ae64:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ae66:	68bb      	ldr	r3, [r7, #8]
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	3714      	adds	r7, #20
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae72:	4770      	bx	lr

0800ae74 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ae74:	b480      	push	{r7}
 800ae76:	b087      	sub	sp, #28
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
 800ae7c:	460b      	mov	r3, r1
 800ae7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ae84:	697b      	ldr	r3, [r7, #20]
 800ae86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae8a:	691b      	ldr	r3, [r3, #16]
 800ae8c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ae8e:	697b      	ldr	r3, [r7, #20]
 800ae90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae96:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ae98:	78fb      	ldrb	r3, [r7, #3]
 800ae9a:	f003 030f 	and.w	r3, r3, #15
 800ae9e:	68fa      	ldr	r2, [r7, #12]
 800aea0:	fa22 f303 	lsr.w	r3, r2, r3
 800aea4:	01db      	lsls	r3, r3, #7
 800aea6:	b2db      	uxtb	r3, r3
 800aea8:	693a      	ldr	r2, [r7, #16]
 800aeaa:	4313      	orrs	r3, r2
 800aeac:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800aeae:	78fb      	ldrb	r3, [r7, #3]
 800aeb0:	015a      	lsls	r2, r3, #5
 800aeb2:	697b      	ldr	r3, [r7, #20]
 800aeb4:	4413      	add	r3, r2
 800aeb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aeba:	689b      	ldr	r3, [r3, #8]
 800aebc:	693a      	ldr	r2, [r7, #16]
 800aebe:	4013      	ands	r3, r2
 800aec0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800aec2:	68bb      	ldr	r3, [r7, #8]
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	371c      	adds	r7, #28
 800aec8:	46bd      	mov	sp, r7
 800aeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aece:	4770      	bx	lr

0800aed0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800aed0:	b480      	push	{r7}
 800aed2:	b083      	sub	sp, #12
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	695b      	ldr	r3, [r3, #20]
 800aedc:	f003 0301 	and.w	r3, r3, #1
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	370c      	adds	r7, #12
 800aee4:	46bd      	mov	sp, r7
 800aee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeea:	4770      	bx	lr

0800aeec <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800aeec:	b480      	push	{r7}
 800aeee:	b085      	sub	sp, #20
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	68fa      	ldr	r2, [r7, #12]
 800af02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af06:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800af0a:	f023 0307 	bic.w	r3, r3, #7
 800af0e:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af16:	689b      	ldr	r3, [r3, #8]
 800af18:	f003 0306 	and.w	r3, r3, #6
 800af1c:	2b04      	cmp	r3, #4
 800af1e:	d109      	bne.n	800af34 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	68fa      	ldr	r2, [r7, #12]
 800af2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af2e:	f043 0303 	orr.w	r3, r3, #3
 800af32:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af3a:	685b      	ldr	r3, [r3, #4]
 800af3c:	68fa      	ldr	r2, [r7, #12]
 800af3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800af42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af46:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800af48:	2300      	movs	r3, #0
}
 800af4a:	4618      	mov	r0, r3
 800af4c:	3714      	adds	r7, #20
 800af4e:	46bd      	mov	sp, r7
 800af50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af54:	4770      	bx	lr
	...

0800af58 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800af58:	b480      	push	{r7}
 800af5a:	b087      	sub	sp, #28
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	60f8      	str	r0, [r7, #12]
 800af60:	460b      	mov	r3, r1
 800af62:	607a      	str	r2, [r7, #4]
 800af64:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	333c      	adds	r3, #60	; 0x3c
 800af6e:	3304      	adds	r3, #4
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800af74:	693b      	ldr	r3, [r7, #16]
 800af76:	4a26      	ldr	r2, [pc, #152]	; (800b010 <USB_EP0_OutStart+0xb8>)
 800af78:	4293      	cmp	r3, r2
 800af7a:	d90a      	bls.n	800af92 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800af7c:	697b      	ldr	r3, [r7, #20]
 800af7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800af88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800af8c:	d101      	bne.n	800af92 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800af8e:	2300      	movs	r3, #0
 800af90:	e037      	b.n	800b002 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af98:	461a      	mov	r2, r3
 800af9a:	2300      	movs	r3, #0
 800af9c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800af9e:	697b      	ldr	r3, [r7, #20]
 800afa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afa4:	691b      	ldr	r3, [r3, #16]
 800afa6:	697a      	ldr	r2, [r7, #20]
 800afa8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800afac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800afb0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800afb2:	697b      	ldr	r3, [r7, #20]
 800afb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afb8:	691b      	ldr	r3, [r3, #16]
 800afba:	697a      	ldr	r2, [r7, #20]
 800afbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800afc0:	f043 0318 	orr.w	r3, r3, #24
 800afc4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800afc6:	697b      	ldr	r3, [r7, #20]
 800afc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afcc:	691b      	ldr	r3, [r3, #16]
 800afce:	697a      	ldr	r2, [r7, #20]
 800afd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800afd4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800afd8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800afda:	7afb      	ldrb	r3, [r7, #11]
 800afdc:	2b01      	cmp	r3, #1
 800afde:	d10f      	bne.n	800b000 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800afe0:	697b      	ldr	r3, [r7, #20]
 800afe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afe6:	461a      	mov	r2, r3
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800afec:	697b      	ldr	r3, [r7, #20]
 800afee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	697a      	ldr	r2, [r7, #20]
 800aff6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800affa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800affe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b000:	2300      	movs	r3, #0
}
 800b002:	4618      	mov	r0, r3
 800b004:	371c      	adds	r7, #28
 800b006:	46bd      	mov	sp, r7
 800b008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00c:	4770      	bx	lr
 800b00e:	bf00      	nop
 800b010:	4f54300a 	.word	0x4f54300a

0800b014 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b014:	b480      	push	{r7}
 800b016:	b085      	sub	sp, #20
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b01c:	2300      	movs	r3, #0
 800b01e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	3301      	adds	r3, #1
 800b024:	60fb      	str	r3, [r7, #12]
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	4a13      	ldr	r2, [pc, #76]	; (800b078 <USB_CoreReset+0x64>)
 800b02a:	4293      	cmp	r3, r2
 800b02c:	d901      	bls.n	800b032 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b02e:	2303      	movs	r3, #3
 800b030:	e01b      	b.n	800b06a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	691b      	ldr	r3, [r3, #16]
 800b036:	2b00      	cmp	r3, #0
 800b038:	daf2      	bge.n	800b020 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b03a:	2300      	movs	r3, #0
 800b03c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	691b      	ldr	r3, [r3, #16]
 800b042:	f043 0201 	orr.w	r2, r3, #1
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	3301      	adds	r3, #1
 800b04e:	60fb      	str	r3, [r7, #12]
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	4a09      	ldr	r2, [pc, #36]	; (800b078 <USB_CoreReset+0x64>)
 800b054:	4293      	cmp	r3, r2
 800b056:	d901      	bls.n	800b05c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b058:	2303      	movs	r3, #3
 800b05a:	e006      	b.n	800b06a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	691b      	ldr	r3, [r3, #16]
 800b060:	f003 0301 	and.w	r3, r3, #1
 800b064:	2b01      	cmp	r3, #1
 800b066:	d0f0      	beq.n	800b04a <USB_CoreReset+0x36>

  return HAL_OK;
 800b068:	2300      	movs	r3, #0
}
 800b06a:	4618      	mov	r0, r3
 800b06c:	3714      	adds	r7, #20
 800b06e:	46bd      	mov	sp, r7
 800b070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b074:	4770      	bx	lr
 800b076:	bf00      	nop
 800b078:	00030d40 	.word	0x00030d40

0800b07c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b080:	4904      	ldr	r1, [pc, #16]	; (800b094 <MX_FATFS_Init+0x18>)
 800b082:	4805      	ldr	r0, [pc, #20]	; (800b098 <MX_FATFS_Init+0x1c>)
 800b084:	f001 fe36 	bl	800ccf4 <FATFS_LinkDriver>
 800b088:	4603      	mov	r3, r0
 800b08a:	461a      	mov	r2, r3
 800b08c:	4b03      	ldr	r3, [pc, #12]	; (800b09c <MX_FATFS_Init+0x20>)
 800b08e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800b090:	bf00      	nop
 800b092:	bd80      	pop	{r7, pc}
 800b094:	20000f58 	.word	0x20000f58
 800b098:	080118e8 	.word	0x080118e8
 800b09c:	20000f54 	.word	0x20000f54

0800b0a0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b082      	sub	sp, #8
 800b0a4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b0aa:	f000 f871 	bl	800b190 <BSP_SD_IsDetected>
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	2b01      	cmp	r3, #1
 800b0b2:	d001      	beq.n	800b0b8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800b0b4:	2301      	movs	r3, #1
 800b0b6:	e012      	b.n	800b0de <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800b0b8:	480b      	ldr	r0, [pc, #44]	; (800b0e8 <BSP_SD_Init+0x48>)
 800b0ba:	f7fa fe18 	bl	8005cee <HAL_SD_Init>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800b0c2:	79fb      	ldrb	r3, [r7, #7]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d109      	bne.n	800b0dc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800b0c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b0cc:	4806      	ldr	r0, [pc, #24]	; (800b0e8 <BSP_SD_Init+0x48>)
 800b0ce:	f7fb fbf7 	bl	80068c0 <HAL_SD_ConfigWideBusOperation>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d001      	beq.n	800b0dc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800b0d8:	2301      	movs	r3, #1
 800b0da:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800b0dc:	79fb      	ldrb	r3, [r7, #7]
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3708      	adds	r7, #8
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}
 800b0e6:	bf00      	nop
 800b0e8:	20000e34 	.word	0x20000e34

0800b0ec <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b086      	sub	sp, #24
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	60f8      	str	r0, [r7, #12]
 800b0f4:	60b9      	str	r1, [r7, #8]
 800b0f6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	68ba      	ldr	r2, [r7, #8]
 800b100:	68f9      	ldr	r1, [r7, #12]
 800b102:	4806      	ldr	r0, [pc, #24]	; (800b11c <BSP_SD_ReadBlocks_DMA+0x30>)
 800b104:	f7fa fe84 	bl	8005e10 <HAL_SD_ReadBlocks_DMA>
 800b108:	4603      	mov	r3, r0
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d001      	beq.n	800b112 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b10e:	2301      	movs	r3, #1
 800b110:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800b112:	7dfb      	ldrb	r3, [r7, #23]
}
 800b114:	4618      	mov	r0, r3
 800b116:	3718      	adds	r7, #24
 800b118:	46bd      	mov	sp, r7
 800b11a:	bd80      	pop	{r7, pc}
 800b11c:	20000e34 	.word	0x20000e34

0800b120 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b086      	sub	sp, #24
 800b124:	af00      	add	r7, sp, #0
 800b126:	60f8      	str	r0, [r7, #12]
 800b128:	60b9      	str	r1, [r7, #8]
 800b12a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b12c:	2300      	movs	r3, #0
 800b12e:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	68ba      	ldr	r2, [r7, #8]
 800b134:	68f9      	ldr	r1, [r7, #12]
 800b136:	4806      	ldr	r0, [pc, #24]	; (800b150 <BSP_SD_WriteBlocks_DMA+0x30>)
 800b138:	f7fa ff54 	bl	8005fe4 <HAL_SD_WriteBlocks_DMA>
 800b13c:	4603      	mov	r3, r0
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d001      	beq.n	800b146 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b142:	2301      	movs	r3, #1
 800b144:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800b146:	7dfb      	ldrb	r3, [r7, #23]
}
 800b148:	4618      	mov	r0, r3
 800b14a:	3718      	adds	r7, #24
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}
 800b150:	20000e34 	.word	0x20000e34

0800b154 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b158:	4805      	ldr	r0, [pc, #20]	; (800b170 <BSP_SD_GetCardState+0x1c>)
 800b15a:	f7fb fc2d 	bl	80069b8 <HAL_SD_GetCardState>
 800b15e:	4603      	mov	r3, r0
 800b160:	2b04      	cmp	r3, #4
 800b162:	bf14      	ite	ne
 800b164:	2301      	movne	r3, #1
 800b166:	2300      	moveq	r3, #0
 800b168:	b2db      	uxtb	r3, r3
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	bd80      	pop	{r7, pc}
 800b16e:	bf00      	nop
 800b170:	20000e34 	.word	0x20000e34

0800b174 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b082      	sub	sp, #8
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800b17c:	6879      	ldr	r1, [r7, #4]
 800b17e:	4803      	ldr	r0, [pc, #12]	; (800b18c <BSP_SD_GetCardInfo+0x18>)
 800b180:	f7fb fb72 	bl	8006868 <HAL_SD_GetCardInfo>
}
 800b184:	bf00      	nop
 800b186:	3708      	adds	r7, #8
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}
 800b18c:	20000e34 	.word	0x20000e34

0800b190 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b082      	sub	sp, #8
 800b194:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b196:	2301      	movs	r3, #1
 800b198:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800b19a:	f000 f80b 	bl	800b1b4 <BSP_PlatformIsDetected>
 800b19e:	4603      	mov	r3, r0
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d101      	bne.n	800b1a8 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800b1a8:	79fb      	ldrb	r3, [r7, #7]
 800b1aa:	b2db      	uxtb	r3, r3
}
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	3708      	adds	r7, #8
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}

0800b1b4 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b082      	sub	sp, #8
 800b1b8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800b1be:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b1c2:	4806      	ldr	r0, [pc, #24]	; (800b1dc <BSP_PlatformIsDetected+0x28>)
 800b1c4:	f7f8 fb02 	bl	80037cc <HAL_GPIO_ReadPin>
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d001      	beq.n	800b1d2 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800b1d2:	79fb      	ldrb	r3, [r7, #7]
}  
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	3708      	adds	r7, #8
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bd80      	pop	{r7, pc}
 800b1dc:	40020000 	.word	0x40020000

0800b1e0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b084      	sub	sp, #16
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800b1e8:	f7f7 fc7a 	bl	8002ae0 <HAL_GetTick>
 800b1ec:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800b1ee:	e006      	b.n	800b1fe <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b1f0:	f7ff ffb0 	bl	800b154 <BSP_SD_GetCardState>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d101      	bne.n	800b1fe <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	e009      	b.n	800b212 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800b1fe:	f7f7 fc6f 	bl	8002ae0 <HAL_GetTick>
 800b202:	4602      	mov	r2, r0
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	1ad3      	subs	r3, r2, r3
 800b208:	687a      	ldr	r2, [r7, #4]
 800b20a:	429a      	cmp	r2, r3
 800b20c:	d8f0      	bhi.n	800b1f0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800b20e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b212:	4618      	mov	r0, r3
 800b214:	3710      	adds	r7, #16
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}
	...

0800b21c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b082      	sub	sp, #8
 800b220:	af00      	add	r7, sp, #0
 800b222:	4603      	mov	r3, r0
 800b224:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b226:	4b0b      	ldr	r3, [pc, #44]	; (800b254 <SD_CheckStatus+0x38>)
 800b228:	2201      	movs	r2, #1
 800b22a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800b22c:	f7ff ff92 	bl	800b154 <BSP_SD_GetCardState>
 800b230:	4603      	mov	r3, r0
 800b232:	2b00      	cmp	r3, #0
 800b234:	d107      	bne.n	800b246 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b236:	4b07      	ldr	r3, [pc, #28]	; (800b254 <SD_CheckStatus+0x38>)
 800b238:	781b      	ldrb	r3, [r3, #0]
 800b23a:	b2db      	uxtb	r3, r3
 800b23c:	f023 0301 	bic.w	r3, r3, #1
 800b240:	b2da      	uxtb	r2, r3
 800b242:	4b04      	ldr	r3, [pc, #16]	; (800b254 <SD_CheckStatus+0x38>)
 800b244:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b246:	4b03      	ldr	r3, [pc, #12]	; (800b254 <SD_CheckStatus+0x38>)
 800b248:	781b      	ldrb	r3, [r3, #0]
 800b24a:	b2db      	uxtb	r3, r3
}
 800b24c:	4618      	mov	r0, r3
 800b24e:	3708      	adds	r7, #8
 800b250:	46bd      	mov	sp, r7
 800b252:	bd80      	pop	{r7, pc}
 800b254:	20000009 	.word	0x20000009

0800b258 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b082      	sub	sp, #8
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	4603      	mov	r3, r0
 800b260:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800b262:	f7ff ff1d 	bl	800b0a0 <BSP_SD_Init>
 800b266:	4603      	mov	r3, r0
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d107      	bne.n	800b27c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800b26c:	79fb      	ldrb	r3, [r7, #7]
 800b26e:	4618      	mov	r0, r3
 800b270:	f7ff ffd4 	bl	800b21c <SD_CheckStatus>
 800b274:	4603      	mov	r3, r0
 800b276:	461a      	mov	r2, r3
 800b278:	4b04      	ldr	r3, [pc, #16]	; (800b28c <SD_initialize+0x34>)
 800b27a:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 800b27c:	4b03      	ldr	r3, [pc, #12]	; (800b28c <SD_initialize+0x34>)
 800b27e:	781b      	ldrb	r3, [r3, #0]
 800b280:	b2db      	uxtb	r3, r3
}
 800b282:	4618      	mov	r0, r3
 800b284:	3708      	adds	r7, #8
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}
 800b28a:	bf00      	nop
 800b28c:	20000009 	.word	0x20000009

0800b290 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b082      	sub	sp, #8
 800b294:	af00      	add	r7, sp, #0
 800b296:	4603      	mov	r3, r0
 800b298:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b29a:	79fb      	ldrb	r3, [r7, #7]
 800b29c:	4618      	mov	r0, r3
 800b29e:	f7ff ffbd 	bl	800b21c <SD_CheckStatus>
 800b2a2:	4603      	mov	r3, r0
}
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	3708      	adds	r7, #8
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	bd80      	pop	{r7, pc}

0800b2ac <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b088      	sub	sp, #32
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	60b9      	str	r1, [r7, #8]
 800b2b4:	607a      	str	r2, [r7, #4]
 800b2b6:	603b      	str	r3, [r7, #0]
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b2bc:	2301      	movs	r3, #1
 800b2be:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b2c0:	f247 5030 	movw	r0, #30000	; 0x7530
 800b2c4:	f7ff ff8c 	bl	800b1e0 <SD_CheckStatusWithTimeout>
 800b2c8:	4603      	mov	r3, r0
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	da01      	bge.n	800b2d2 <SD_read+0x26>
  {
    return res;
 800b2ce:	7ffb      	ldrb	r3, [r7, #31]
 800b2d0:	e08b      	b.n	800b3ea <SD_read+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800b2d2:	68bb      	ldr	r3, [r7, #8]
 800b2d4:	f003 0303 	and.w	r3, r3, #3
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	f040 8085 	bne.w	800b3e8 <SD_read+0x13c>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800b2de:	683a      	ldr	r2, [r7, #0]
 800b2e0:	6879      	ldr	r1, [r7, #4]
 800b2e2:	68b8      	ldr	r0, [r7, #8]
 800b2e4:	f7ff ff02 	bl	800b0ec <BSP_SD_ReadBlocks_DMA>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d133      	bne.n	800b356 <SD_read+0xaa>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800b2ee:	4b41      	ldr	r3, [pc, #260]	; (800b3f4 <SD_read+0x148>)
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800b2f4:	f7f7 fbf4 	bl	8002ae0 <HAL_GetTick>
 800b2f8:	6178      	str	r0, [r7, #20]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b2fa:	bf00      	nop
 800b2fc:	4b3d      	ldr	r3, [pc, #244]	; (800b3f4 <SD_read+0x148>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d108      	bne.n	800b316 <SD_read+0x6a>
 800b304:	f7f7 fbec 	bl	8002ae0 <HAL_GetTick>
 800b308:	4602      	mov	r2, r0
 800b30a:	697b      	ldr	r3, [r7, #20]
 800b30c:	1ad3      	subs	r3, r2, r3
 800b30e:	f247 522f 	movw	r2, #29999	; 0x752f
 800b312:	4293      	cmp	r3, r2
 800b314:	d9f2      	bls.n	800b2fc <SD_read+0x50>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800b316:	4b37      	ldr	r3, [pc, #220]	; (800b3f4 <SD_read+0x148>)
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d102      	bne.n	800b324 <SD_read+0x78>
      {
        res = RES_ERROR;
 800b31e:	2301      	movs	r3, #1
 800b320:	77fb      	strb	r3, [r7, #31]
 800b322:	e061      	b.n	800b3e8 <SD_read+0x13c>
      }
      else
      {
        ReadStatus = 0;
 800b324:	4b33      	ldr	r3, [pc, #204]	; (800b3f4 <SD_read+0x148>)
 800b326:	2200      	movs	r2, #0
 800b328:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800b32a:	f7f7 fbd9 	bl	8002ae0 <HAL_GetTick>
 800b32e:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b330:	e007      	b.n	800b342 <SD_read+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b332:	f7ff ff0f 	bl	800b154 <BSP_SD_GetCardState>
 800b336:	4603      	mov	r3, r0
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d102      	bne.n	800b342 <SD_read+0x96>
          {
            res = RES_OK;
 800b33c:	2300      	movs	r3, #0
 800b33e:	77fb      	strb	r3, [r7, #31]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800b340:	e052      	b.n	800b3e8 <SD_read+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b342:	f7f7 fbcd 	bl	8002ae0 <HAL_GetTick>
 800b346:	4602      	mov	r2, r0
 800b348:	697b      	ldr	r3, [r7, #20]
 800b34a:	1ad3      	subs	r3, r2, r3
 800b34c:	f247 522f 	movw	r2, #29999	; 0x752f
 800b350:	4293      	cmp	r3, r2
 800b352:	d9ee      	bls.n	800b332 <SD_read+0x86>
 800b354:	e048      	b.n	800b3e8 <SD_read+0x13c>
#if defined(ENABLE_SCRATCH_BUFFER)
    else {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 800b356:	2300      	movs	r3, #0
 800b358:	61bb      	str	r3, [r7, #24]
 800b35a:	e034      	b.n	800b3c6 <SD_read+0x11a>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	1c5a      	adds	r2, r3, #1
 800b360:	607a      	str	r2, [r7, #4]
 800b362:	2201      	movs	r2, #1
 800b364:	4619      	mov	r1, r3
 800b366:	4824      	ldr	r0, [pc, #144]	; (800b3f8 <SD_read+0x14c>)
 800b368:	f7ff fec0 	bl	800b0ec <BSP_SD_ReadBlocks_DMA>
 800b36c:	4603      	mov	r3, r0
 800b36e:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 800b370:	7fbb      	ldrb	r3, [r7, #30]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d12c      	bne.n	800b3d0 <SD_read+0x124>
          /* wait until the read is successful or a timeout occurs */

          ReadStatus = 0;
 800b376:	4b1f      	ldr	r3, [pc, #124]	; (800b3f4 <SD_read+0x148>)
 800b378:	2200      	movs	r2, #0
 800b37a:	601a      	str	r2, [r3, #0]
          timeout = HAL_GetTick();
 800b37c:	f7f7 fbb0 	bl	8002ae0 <HAL_GetTick>
 800b380:	6178      	str	r0, [r7, #20]
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b382:	bf00      	nop
 800b384:	4b1b      	ldr	r3, [pc, #108]	; (800b3f4 <SD_read+0x148>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d108      	bne.n	800b39e <SD_read+0xf2>
 800b38c:	f7f7 fba8 	bl	8002ae0 <HAL_GetTick>
 800b390:	4602      	mov	r2, r0
 800b392:	697b      	ldr	r3, [r7, #20]
 800b394:	1ad3      	subs	r3, r2, r3
 800b396:	f247 522f 	movw	r2, #29999	; 0x752f
 800b39a:	4293      	cmp	r3, r2
 800b39c:	d9f2      	bls.n	800b384 <SD_read+0xd8>
          {
          }
          if (ReadStatus == 0)
 800b39e:	4b15      	ldr	r3, [pc, #84]	; (800b3f4 <SD_read+0x148>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d016      	beq.n	800b3d4 <SD_read+0x128>
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 800b3a6:	68bb      	ldr	r3, [r7, #8]
 800b3a8:	4a13      	ldr	r2, [pc, #76]	; (800b3f8 <SD_read+0x14c>)
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	4611      	mov	r1, r2
 800b3ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b3b2:	461a      	mov	r2, r3
 800b3b4:	f002 fa0c 	bl	800d7d0 <memcpy>
          buff += BLOCKSIZE;
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b3be:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 800b3c0:	69bb      	ldr	r3, [r7, #24]
 800b3c2:	3301      	adds	r3, #1
 800b3c4:	61bb      	str	r3, [r7, #24]
 800b3c6:	69bb      	ldr	r3, [r7, #24]
 800b3c8:	683a      	ldr	r2, [r7, #0]
 800b3ca:	429a      	cmp	r2, r3
 800b3cc:	d8c6      	bhi.n	800b35c <SD_read+0xb0>
 800b3ce:	e002      	b.n	800b3d6 <SD_read+0x12a>
        }
        else
        {
          break;
 800b3d0:	bf00      	nop
 800b3d2:	e000      	b.n	800b3d6 <SD_read+0x12a>
            break;
 800b3d4:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 800b3d6:	69bb      	ldr	r3, [r7, #24]
 800b3d8:	683a      	ldr	r2, [r7, #0]
 800b3da:	429a      	cmp	r2, r3
 800b3dc:	d104      	bne.n	800b3e8 <SD_read+0x13c>
 800b3de:	7fbb      	ldrb	r3, [r7, #30]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d101      	bne.n	800b3e8 <SD_read+0x13c>
        res = RES_OK;
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	77fb      	strb	r3, [r7, #31]
    }
#endif
  }

  return res;
 800b3e8:	7ffb      	ldrb	r3, [r7, #31]
}
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	3720      	adds	r7, #32
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bd80      	pop	{r7, pc}
 800b3f2:	bf00      	nop
 800b3f4:	20000974 	.word	0x20000974
 800b3f8:	20000770 	.word	0x20000770

0800b3fc <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b088      	sub	sp, #32
 800b400:	af00      	add	r7, sp, #0
 800b402:	60b9      	str	r1, [r7, #8]
 800b404:	607a      	str	r2, [r7, #4]
 800b406:	603b      	str	r3, [r7, #0]
 800b408:	4603      	mov	r3, r0
 800b40a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b40c:	2301      	movs	r3, #1
 800b40e:	77fb      	strb	r3, [r7, #31]
  uint32_t timeout;
  uint8_t ret;
  int i;

   WriteStatus = 0;
 800b410:	4b4c      	ldr	r3, [pc, #304]	; (800b544 <SD_write+0x148>)
 800b412:	2200      	movs	r2, #0
 800b414:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b416:	f247 5030 	movw	r0, #30000	; 0x7530
 800b41a:	f7ff fee1 	bl	800b1e0 <SD_CheckStatusWithTimeout>
 800b41e:	4603      	mov	r3, r0
 800b420:	2b00      	cmp	r3, #0
 800b422:	da01      	bge.n	800b428 <SD_write+0x2c>
  {
    return res;
 800b424:	7ffb      	ldrb	r3, [r7, #31]
 800b426:	e088      	b.n	800b53a <SD_write+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800b428:	68bb      	ldr	r3, [r7, #8]
 800b42a:	f003 0303 	and.w	r3, r3, #3
 800b42e:	2b00      	cmp	r3, #0
 800b430:	f040 8082 	bne.w	800b538 <SD_write+0x13c>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800b434:	683a      	ldr	r2, [r7, #0]
 800b436:	6879      	ldr	r1, [r7, #4]
 800b438:	68b8      	ldr	r0, [r7, #8]
 800b43a:	f7ff fe71 	bl	800b120 <BSP_SD_WriteBlocks_DMA>
 800b43e:	4603      	mov	r3, r0
 800b440:	2b00      	cmp	r3, #0
 800b442:	d130      	bne.n	800b4a6 <SD_write+0xaa>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800b444:	f7f7 fb4c 	bl	8002ae0 <HAL_GetTick>
 800b448:	6178      	str	r0, [r7, #20]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b44a:	bf00      	nop
 800b44c:	4b3d      	ldr	r3, [pc, #244]	; (800b544 <SD_write+0x148>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d108      	bne.n	800b466 <SD_write+0x6a>
 800b454:	f7f7 fb44 	bl	8002ae0 <HAL_GetTick>
 800b458:	4602      	mov	r2, r0
 800b45a:	697b      	ldr	r3, [r7, #20]
 800b45c:	1ad3      	subs	r3, r2, r3
 800b45e:	f247 522f 	movw	r2, #29999	; 0x752f
 800b462:	4293      	cmp	r3, r2
 800b464:	d9f2      	bls.n	800b44c <SD_write+0x50>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800b466:	4b37      	ldr	r3, [pc, #220]	; (800b544 <SD_write+0x148>)
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d102      	bne.n	800b474 <SD_write+0x78>
      {
        res = RES_ERROR;
 800b46e:	2301      	movs	r3, #1
 800b470:	77fb      	strb	r3, [r7, #31]
 800b472:	e061      	b.n	800b538 <SD_write+0x13c>
      }
      else
      {
        WriteStatus = 0;
 800b474:	4b33      	ldr	r3, [pc, #204]	; (800b544 <SD_write+0x148>)
 800b476:	2200      	movs	r2, #0
 800b478:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800b47a:	f7f7 fb31 	bl	8002ae0 <HAL_GetTick>
 800b47e:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b480:	e007      	b.n	800b492 <SD_write+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b482:	f7ff fe67 	bl	800b154 <BSP_SD_GetCardState>
 800b486:	4603      	mov	r3, r0
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d102      	bne.n	800b492 <SD_write+0x96>
          {
            res = RES_OK;
 800b48c:	2300      	movs	r3, #0
 800b48e:	77fb      	strb	r3, [r7, #31]
            break;
 800b490:	e052      	b.n	800b538 <SD_write+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b492:	f7f7 fb25 	bl	8002ae0 <HAL_GetTick>
 800b496:	4602      	mov	r2, r0
 800b498:	697b      	ldr	r3, [r7, #20]
 800b49a:	1ad3      	subs	r3, r2, r3
 800b49c:	f247 522f 	movw	r2, #29999	; 0x752f
 800b4a0:	4293      	cmp	r3, r2
 800b4a2:	d9ee      	bls.n	800b482 <SD_write+0x86>
 800b4a4:	e048      	b.n	800b538 <SD_write+0x13c>
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	61bb      	str	r3, [r7, #24]
 800b4aa:	e034      	b.n	800b516 <SD_write+0x11a>
      {
        WriteStatus = 0;
 800b4ac:	4b25      	ldr	r3, [pc, #148]	; (800b544 <SD_write+0x148>)
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	601a      	str	r2, [r3, #0]
        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	1c5a      	adds	r2, r3, #1
 800b4b6:	607a      	str	r2, [r7, #4]
 800b4b8:	2201      	movs	r2, #1
 800b4ba:	4619      	mov	r1, r3
 800b4bc:	4822      	ldr	r0, [pc, #136]	; (800b548 <SD_write+0x14c>)
 800b4be:	f7ff fe2f 	bl	800b120 <BSP_SD_WriteBlocks_DMA>
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 800b4c6:	7fbb      	ldrb	r3, [r7, #30]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d129      	bne.n	800b520 <SD_write+0x124>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 800b4cc:	f7f7 fb08 	bl	8002ae0 <HAL_GetTick>
 800b4d0:	6178      	str	r0, [r7, #20]
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b4d2:	bf00      	nop
 800b4d4:	4b1b      	ldr	r3, [pc, #108]	; (800b544 <SD_write+0x148>)
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d108      	bne.n	800b4ee <SD_write+0xf2>
 800b4dc:	f7f7 fb00 	bl	8002ae0 <HAL_GetTick>
 800b4e0:	4602      	mov	r2, r0
 800b4e2:	697b      	ldr	r3, [r7, #20]
 800b4e4:	1ad3      	subs	r3, r2, r3
 800b4e6:	f247 522f 	movw	r2, #29999	; 0x752f
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	d9f2      	bls.n	800b4d4 <SD_write+0xd8>
          {
          }
          if (WriteStatus == 0)
 800b4ee:	4b15      	ldr	r3, [pc, #84]	; (800b544 <SD_write+0x148>)
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d016      	beq.n	800b524 <SD_write+0x128>
          {
            break;
          }

          memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 800b4f6:	68bb      	ldr	r3, [r7, #8]
 800b4f8:	4a13      	ldr	r2, [pc, #76]	; (800b548 <SD_write+0x14c>)
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	4611      	mov	r1, r2
 800b4fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b502:	461a      	mov	r2, r3
 800b504:	f002 f964 	bl	800d7d0 <memcpy>
          buff += BLOCKSIZE;
 800b508:	68bb      	ldr	r3, [r7, #8]
 800b50a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b50e:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++)
 800b510:	69bb      	ldr	r3, [r7, #24]
 800b512:	3301      	adds	r3, #1
 800b514:	61bb      	str	r3, [r7, #24]
 800b516:	69bb      	ldr	r3, [r7, #24]
 800b518:	683a      	ldr	r2, [r7, #0]
 800b51a:	429a      	cmp	r2, r3
 800b51c:	d8c6      	bhi.n	800b4ac <SD_write+0xb0>
 800b51e:	e002      	b.n	800b526 <SD_write+0x12a>
        }
        else
        {
          break;
 800b520:	bf00      	nop
 800b522:	e000      	b.n	800b526 <SD_write+0x12a>
            break;
 800b524:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 800b526:	69bb      	ldr	r3, [r7, #24]
 800b528:	683a      	ldr	r2, [r7, #0]
 800b52a:	429a      	cmp	r2, r3
 800b52c:	d104      	bne.n	800b538 <SD_write+0x13c>
 800b52e:	7fbb      	ldrb	r3, [r7, #30]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d101      	bne.n	800b538 <SD_write+0x13c>
        res = RES_OK;
 800b534:	2300      	movs	r3, #0
 800b536:	77fb      	strb	r3, [r7, #31]
    }

  }
  return res;
 800b538:	7ffb      	ldrb	r3, [r7, #31]
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	3720      	adds	r7, #32
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}
 800b542:	bf00      	nop
 800b544:	20000970 	.word	0x20000970
 800b548:	20000770 	.word	0x20000770

0800b54c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b08c      	sub	sp, #48	; 0x30
 800b550:	af00      	add	r7, sp, #0
 800b552:	4603      	mov	r3, r0
 800b554:	603a      	str	r2, [r7, #0]
 800b556:	71fb      	strb	r3, [r7, #7]
 800b558:	460b      	mov	r3, r1
 800b55a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b55c:	2301      	movs	r3, #1
 800b55e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b562:	4b25      	ldr	r3, [pc, #148]	; (800b5f8 <SD_ioctl+0xac>)
 800b564:	781b      	ldrb	r3, [r3, #0]
 800b566:	b2db      	uxtb	r3, r3
 800b568:	f003 0301 	and.w	r3, r3, #1
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d001      	beq.n	800b574 <SD_ioctl+0x28>
 800b570:	2303      	movs	r3, #3
 800b572:	e03c      	b.n	800b5ee <SD_ioctl+0xa2>

  switch (cmd)
 800b574:	79bb      	ldrb	r3, [r7, #6]
 800b576:	2b03      	cmp	r3, #3
 800b578:	d834      	bhi.n	800b5e4 <SD_ioctl+0x98>
 800b57a:	a201      	add	r2, pc, #4	; (adr r2, 800b580 <SD_ioctl+0x34>)
 800b57c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b580:	0800b591 	.word	0x0800b591
 800b584:	0800b599 	.word	0x0800b599
 800b588:	0800b5b1 	.word	0x0800b5b1
 800b58c:	0800b5cb 	.word	0x0800b5cb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b590:	2300      	movs	r3, #0
 800b592:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b596:	e028      	b.n	800b5ea <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b598:	f107 030c 	add.w	r3, r7, #12
 800b59c:	4618      	mov	r0, r3
 800b59e:	f7ff fde9 	bl	800b174 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b5a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b5ae:	e01c      	b.n	800b5ea <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b5b0:	f107 030c 	add.w	r3, r7, #12
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	f7ff fddd 	bl	800b174 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b5ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5bc:	b29a      	uxth	r2, r3
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b5c8:	e00f      	b.n	800b5ea <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b5ca:	f107 030c 	add.w	r3, r7, #12
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	f7ff fdd0 	bl	800b174 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b5d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5d6:	0a5a      	lsrs	r2, r3, #9
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b5dc:	2300      	movs	r3, #0
 800b5de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b5e2:	e002      	b.n	800b5ea <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b5e4:	2304      	movs	r3, #4
 800b5e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800b5ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	3730      	adds	r7, #48	; 0x30
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd80      	pop	{r7, pc}
 800b5f6:	bf00      	nop
 800b5f8:	20000009 	.word	0x20000009

0800b5fc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b084      	sub	sp, #16
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
 800b604:	460b      	mov	r3, r1
 800b606:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b608:	2300      	movs	r3, #0
 800b60a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	7c1b      	ldrb	r3, [r3, #16]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d115      	bne.n	800b640 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b614:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b618:	2202      	movs	r2, #2
 800b61a:	2181      	movs	r1, #129	; 0x81
 800b61c:	6878      	ldr	r0, [r7, #4]
 800b61e:	f001 ff50 	bl	800d4c2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	2201      	movs	r2, #1
 800b626:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b628:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b62c:	2202      	movs	r2, #2
 800b62e:	2101      	movs	r1, #1
 800b630:	6878      	ldr	r0, [r7, #4]
 800b632:	f001 ff46 	bl	800d4c2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	2201      	movs	r2, #1
 800b63a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800b63e:	e012      	b.n	800b666 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b640:	2340      	movs	r3, #64	; 0x40
 800b642:	2202      	movs	r2, #2
 800b644:	2181      	movs	r1, #129	; 0x81
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f001 ff3b 	bl	800d4c2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2201      	movs	r2, #1
 800b650:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b652:	2340      	movs	r3, #64	; 0x40
 800b654:	2202      	movs	r2, #2
 800b656:	2101      	movs	r1, #1
 800b658:	6878      	ldr	r0, [r7, #4]
 800b65a:	f001 ff32 	bl	800d4c2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	2201      	movs	r2, #1
 800b662:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b666:	2308      	movs	r3, #8
 800b668:	2203      	movs	r2, #3
 800b66a:	2182      	movs	r1, #130	; 0x82
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f001 ff28 	bl	800d4c2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	2201      	movs	r2, #1
 800b676:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800b678:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b67c:	f002 f898 	bl	800d7b0 <malloc>
 800b680:	4603      	mov	r3, r0
 800b682:	461a      	mov	r2, r3
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b690:	2b00      	cmp	r3, #0
 800b692:	d102      	bne.n	800b69a <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 800b694:	2301      	movs	r3, #1
 800b696:	73fb      	strb	r3, [r7, #15]
 800b698:	e026      	b.n	800b6e8 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b6a0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800b6ac:	68bb      	ldr	r3, [r7, #8]
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	7c1b      	ldrb	r3, [r3, #16]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d109      	bne.n	800b6d8 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b6c4:	68bb      	ldr	r3, [r7, #8]
 800b6c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b6ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b6ce:	2101      	movs	r1, #1
 800b6d0:	6878      	ldr	r0, [r7, #4]
 800b6d2:	f001 ffe7 	bl	800d6a4 <USBD_LL_PrepareReceive>
 800b6d6:	e007      	b.n	800b6e8 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b6d8:	68bb      	ldr	r3, [r7, #8]
 800b6da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b6de:	2340      	movs	r3, #64	; 0x40
 800b6e0:	2101      	movs	r1, #1
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	f001 ffde 	bl	800d6a4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800b6e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	3710      	adds	r7, #16
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}

0800b6f2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b6f2:	b580      	push	{r7, lr}
 800b6f4:	b084      	sub	sp, #16
 800b6f6:	af00      	add	r7, sp, #0
 800b6f8:	6078      	str	r0, [r7, #4]
 800b6fa:	460b      	mov	r3, r1
 800b6fc:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b6fe:	2300      	movs	r3, #0
 800b700:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b702:	2181      	movs	r1, #129	; 0x81
 800b704:	6878      	ldr	r0, [r7, #4]
 800b706:	f001 ff02 	bl	800d50e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	2200      	movs	r2, #0
 800b70e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b710:	2101      	movs	r1, #1
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f001 fefb 	bl	800d50e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2200      	movs	r2, #0
 800b71c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b720:	2182      	movs	r1, #130	; 0x82
 800b722:	6878      	ldr	r0, [r7, #4]
 800b724:	f001 fef3 	bl	800d50e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2200      	movs	r2, #0
 800b72c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b734:	2b00      	cmp	r3, #0
 800b736:	d00e      	beq.n	800b756 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b73e:	685b      	ldr	r3, [r3, #4]
 800b740:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b748:	4618      	mov	r0, r3
 800b74a:	f002 f839 	bl	800d7c0 <free>
    pdev->pClassData = NULL;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2200      	movs	r2, #0
 800b752:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800b756:	7bfb      	ldrb	r3, [r7, #15]
}
 800b758:	4618      	mov	r0, r3
 800b75a:	3710      	adds	r7, #16
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}

0800b760 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b086      	sub	sp, #24
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
 800b768:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b770:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800b772:	2300      	movs	r3, #0
 800b774:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800b776:	2300      	movs	r3, #0
 800b778:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800b77a:	2300      	movs	r3, #0
 800b77c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	781b      	ldrb	r3, [r3, #0]
 800b782:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b786:	2b00      	cmp	r3, #0
 800b788:	d039      	beq.n	800b7fe <USBD_CDC_Setup+0x9e>
 800b78a:	2b20      	cmp	r3, #32
 800b78c:	d17c      	bne.n	800b888 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	88db      	ldrh	r3, [r3, #6]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d029      	beq.n	800b7ea <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	781b      	ldrb	r3, [r3, #0]
 800b79a:	b25b      	sxtb	r3, r3
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	da11      	bge.n	800b7c4 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b7a6:	689b      	ldr	r3, [r3, #8]
 800b7a8:	683a      	ldr	r2, [r7, #0]
 800b7aa:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800b7ac:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b7ae:	683a      	ldr	r2, [r7, #0]
 800b7b0:	88d2      	ldrh	r2, [r2, #6]
 800b7b2:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b7b4:	6939      	ldr	r1, [r7, #16]
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	88db      	ldrh	r3, [r3, #6]
 800b7ba:	461a      	mov	r2, r3
 800b7bc:	6878      	ldr	r0, [r7, #4]
 800b7be:	f001 f9c9 	bl	800cb54 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800b7c2:	e068      	b.n	800b896 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	785a      	ldrb	r2, [r3, #1]
 800b7c8:	693b      	ldr	r3, [r7, #16]
 800b7ca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800b7ce:	683b      	ldr	r3, [r7, #0]
 800b7d0:	88db      	ldrh	r3, [r3, #6]
 800b7d2:	b2da      	uxtb	r2, r3
 800b7d4:	693b      	ldr	r3, [r7, #16]
 800b7d6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b7da:	6939      	ldr	r1, [r7, #16]
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	88db      	ldrh	r3, [r3, #6]
 800b7e0:	461a      	mov	r2, r3
 800b7e2:	6878      	ldr	r0, [r7, #4]
 800b7e4:	f001 f9e4 	bl	800cbb0 <USBD_CtlPrepareRx>
    break;
 800b7e8:	e055      	b.n	800b896 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b7f0:	689b      	ldr	r3, [r3, #8]
 800b7f2:	683a      	ldr	r2, [r7, #0]
 800b7f4:	7850      	ldrb	r0, [r2, #1]
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	6839      	ldr	r1, [r7, #0]
 800b7fa:	4798      	blx	r3
    break;
 800b7fc:	e04b      	b.n	800b896 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	785b      	ldrb	r3, [r3, #1]
 800b802:	2b0a      	cmp	r3, #10
 800b804:	d017      	beq.n	800b836 <USBD_CDC_Setup+0xd6>
 800b806:	2b0b      	cmp	r3, #11
 800b808:	d029      	beq.n	800b85e <USBD_CDC_Setup+0xfe>
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d133      	bne.n	800b876 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800b814:	2b03      	cmp	r3, #3
 800b816:	d107      	bne.n	800b828 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800b818:	f107 030c 	add.w	r3, r7, #12
 800b81c:	2202      	movs	r2, #2
 800b81e:	4619      	mov	r1, r3
 800b820:	6878      	ldr	r0, [r7, #4]
 800b822:	f001 f997 	bl	800cb54 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800b826:	e02e      	b.n	800b886 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800b828:	6839      	ldr	r1, [r7, #0]
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	f001 f927 	bl	800ca7e <USBD_CtlError>
			  ret = USBD_FAIL;
 800b830:	2302      	movs	r3, #2
 800b832:	75fb      	strb	r3, [r7, #23]
      break;
 800b834:	e027      	b.n	800b886 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800b83c:	2b03      	cmp	r3, #3
 800b83e:	d107      	bne.n	800b850 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800b840:	f107 030f 	add.w	r3, r7, #15
 800b844:	2201      	movs	r2, #1
 800b846:	4619      	mov	r1, r3
 800b848:	6878      	ldr	r0, [r7, #4]
 800b84a:	f001 f983 	bl	800cb54 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800b84e:	e01a      	b.n	800b886 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800b850:	6839      	ldr	r1, [r7, #0]
 800b852:	6878      	ldr	r0, [r7, #4]
 800b854:	f001 f913 	bl	800ca7e <USBD_CtlError>
			  ret = USBD_FAIL;
 800b858:	2302      	movs	r3, #2
 800b85a:	75fb      	strb	r3, [r7, #23]
      break;
 800b85c:	e013      	b.n	800b886 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800b864:	2b03      	cmp	r3, #3
 800b866:	d00d      	beq.n	800b884 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 800b868:	6839      	ldr	r1, [r7, #0]
 800b86a:	6878      	ldr	r0, [r7, #4]
 800b86c:	f001 f907 	bl	800ca7e <USBD_CtlError>
			  ret = USBD_FAIL;
 800b870:	2302      	movs	r3, #2
 800b872:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800b874:	e006      	b.n	800b884 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 800b876:	6839      	ldr	r1, [r7, #0]
 800b878:	6878      	ldr	r0, [r7, #4]
 800b87a:	f001 f900 	bl	800ca7e <USBD_CtlError>
      ret = USBD_FAIL;
 800b87e:	2302      	movs	r3, #2
 800b880:	75fb      	strb	r3, [r7, #23]
      break;
 800b882:	e000      	b.n	800b886 <USBD_CDC_Setup+0x126>
      break;
 800b884:	bf00      	nop
    }
    break;
 800b886:	e006      	b.n	800b896 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 800b888:	6839      	ldr	r1, [r7, #0]
 800b88a:	6878      	ldr	r0, [r7, #4]
 800b88c:	f001 f8f7 	bl	800ca7e <USBD_CtlError>
    ret = USBD_FAIL;
 800b890:	2302      	movs	r3, #2
 800b892:	75fb      	strb	r3, [r7, #23]
    break;
 800b894:	bf00      	nop
  }

  return ret;
 800b896:	7dfb      	ldrb	r3, [r7, #23]
}
 800b898:	4618      	mov	r0, r3
 800b89a:	3718      	adds	r7, #24
 800b89c:	46bd      	mov	sp, r7
 800b89e:	bd80      	pop	{r7, pc}

0800b8a0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b084      	sub	sp, #16
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
 800b8a8:	460b      	mov	r3, r1
 800b8aa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b8b2:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800b8ba:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d03a      	beq.n	800b93c <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b8c6:	78fa      	ldrb	r2, [r7, #3]
 800b8c8:	6879      	ldr	r1, [r7, #4]
 800b8ca:	4613      	mov	r3, r2
 800b8cc:	009b      	lsls	r3, r3, #2
 800b8ce:	4413      	add	r3, r2
 800b8d0:	009b      	lsls	r3, r3, #2
 800b8d2:	440b      	add	r3, r1
 800b8d4:	331c      	adds	r3, #28
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d029      	beq.n	800b930 <USBD_CDC_DataIn+0x90>
 800b8dc:	78fa      	ldrb	r2, [r7, #3]
 800b8de:	6879      	ldr	r1, [r7, #4]
 800b8e0:	4613      	mov	r3, r2
 800b8e2:	009b      	lsls	r3, r3, #2
 800b8e4:	4413      	add	r3, r2
 800b8e6:	009b      	lsls	r3, r3, #2
 800b8e8:	440b      	add	r3, r1
 800b8ea:	331c      	adds	r3, #28
 800b8ec:	681a      	ldr	r2, [r3, #0]
 800b8ee:	78f9      	ldrb	r1, [r7, #3]
 800b8f0:	68b8      	ldr	r0, [r7, #8]
 800b8f2:	460b      	mov	r3, r1
 800b8f4:	00db      	lsls	r3, r3, #3
 800b8f6:	1a5b      	subs	r3, r3, r1
 800b8f8:	009b      	lsls	r3, r3, #2
 800b8fa:	4403      	add	r3, r0
 800b8fc:	3344      	adds	r3, #68	; 0x44
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	fbb2 f1f3 	udiv	r1, r2, r3
 800b904:	fb03 f301 	mul.w	r3, r3, r1
 800b908:	1ad3      	subs	r3, r2, r3
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d110      	bne.n	800b930 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800b90e:	78fa      	ldrb	r2, [r7, #3]
 800b910:	6879      	ldr	r1, [r7, #4]
 800b912:	4613      	mov	r3, r2
 800b914:	009b      	lsls	r3, r3, #2
 800b916:	4413      	add	r3, r2
 800b918:	009b      	lsls	r3, r3, #2
 800b91a:	440b      	add	r3, r1
 800b91c:	331c      	adds	r3, #28
 800b91e:	2200      	movs	r2, #0
 800b920:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800b922:	78f9      	ldrb	r1, [r7, #3]
 800b924:	2300      	movs	r3, #0
 800b926:	2200      	movs	r2, #0
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	f001 fe98 	bl	800d65e <USBD_LL_Transmit>
 800b92e:	e003      	b.n	800b938 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	2200      	movs	r2, #0
 800b934:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800b938:	2300      	movs	r3, #0
 800b93a:	e000      	b.n	800b93e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800b93c:	2302      	movs	r3, #2
  }
}
 800b93e:	4618      	mov	r0, r3
 800b940:	3710      	adds	r7, #16
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}

0800b946 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b946:	b580      	push	{r7, lr}
 800b948:	b084      	sub	sp, #16
 800b94a:	af00      	add	r7, sp, #0
 800b94c:	6078      	str	r0, [r7, #4]
 800b94e:	460b      	mov	r3, r1
 800b950:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b958:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800b95a:	78fb      	ldrb	r3, [r7, #3]
 800b95c:	4619      	mov	r1, r3
 800b95e:	6878      	ldr	r0, [r7, #4]
 800b960:	f001 fec3 	bl	800d6ea <USBD_LL_GetRxDataSize>
 800b964:	4602      	mov	r2, r0
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b972:	2b00      	cmp	r3, #0
 800b974:	d00d      	beq.n	800b992 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b97c:	68db      	ldr	r3, [r3, #12]
 800b97e:	68fa      	ldr	r2, [r7, #12]
 800b980:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b984:	68fa      	ldr	r2, [r7, #12]
 800b986:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b98a:	4611      	mov	r1, r2
 800b98c:	4798      	blx	r3

    return USBD_OK;
 800b98e:	2300      	movs	r3, #0
 800b990:	e000      	b.n	800b994 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800b992:	2302      	movs	r3, #2
  }
}
 800b994:	4618      	mov	r0, r3
 800b996:	3710      	adds	r7, #16
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}

0800b99c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b084      	sub	sp, #16
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b9aa:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d015      	beq.n	800b9e2 <USBD_CDC_EP0_RxReady+0x46>
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b9bc:	2bff      	cmp	r3, #255	; 0xff
 800b9be:	d010      	beq.n	800b9e2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b9c6:	689b      	ldr	r3, [r3, #8]
 800b9c8:	68fa      	ldr	r2, [r7, #12]
 800b9ca:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800b9ce:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b9d0:	68fa      	ldr	r2, [r7, #12]
 800b9d2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b9d6:	b292      	uxth	r2, r2
 800b9d8:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	22ff      	movs	r2, #255	; 0xff
 800b9de:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800b9e2:	2300      	movs	r3, #0
}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	3710      	adds	r7, #16
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}

0800b9ec <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800b9ec:	b480      	push	{r7}
 800b9ee:	b083      	sub	sp, #12
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2243      	movs	r2, #67	; 0x43
 800b9f8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800b9fa:	4b03      	ldr	r3, [pc, #12]	; (800ba08 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	370c      	adds	r7, #12
 800ba00:	46bd      	mov	sp, r7
 800ba02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba06:	4770      	bx	lr
 800ba08:	20000094 	.word	0x20000094

0800ba0c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800ba0c:	b480      	push	{r7}
 800ba0e:	b083      	sub	sp, #12
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2243      	movs	r2, #67	; 0x43
 800ba18:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800ba1a:	4b03      	ldr	r3, [pc, #12]	; (800ba28 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	370c      	adds	r7, #12
 800ba20:	46bd      	mov	sp, r7
 800ba22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba26:	4770      	bx	lr
 800ba28:	20000050 	.word	0x20000050

0800ba2c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800ba2c:	b480      	push	{r7}
 800ba2e:	b083      	sub	sp, #12
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2243      	movs	r2, #67	; 0x43
 800ba38:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800ba3a:	4b03      	ldr	r3, [pc, #12]	; (800ba48 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	370c      	adds	r7, #12
 800ba40:	46bd      	mov	sp, r7
 800ba42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba46:	4770      	bx	lr
 800ba48:	200000d8 	.word	0x200000d8

0800ba4c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800ba4c:	b480      	push	{r7}
 800ba4e:	b083      	sub	sp, #12
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	220a      	movs	r2, #10
 800ba58:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800ba5a:	4b03      	ldr	r3, [pc, #12]	; (800ba68 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	370c      	adds	r7, #12
 800ba60:	46bd      	mov	sp, r7
 800ba62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba66:	4770      	bx	lr
 800ba68:	2000000c 	.word	0x2000000c

0800ba6c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800ba6c:	b480      	push	{r7}
 800ba6e:	b085      	sub	sp, #20
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
 800ba74:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800ba76:	2302      	movs	r3, #2
 800ba78:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d005      	beq.n	800ba8c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	683a      	ldr	r2, [r7, #0]
 800ba84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 800ba88:	2300      	movs	r3, #0
 800ba8a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ba8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba8e:	4618      	mov	r0, r3
 800ba90:	3714      	adds	r7, #20
 800ba92:	46bd      	mov	sp, r7
 800ba94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba98:	4770      	bx	lr

0800ba9a <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800ba9a:	b480      	push	{r7}
 800ba9c:	b087      	sub	sp, #28
 800ba9e:	af00      	add	r7, sp, #0
 800baa0:	60f8      	str	r0, [r7, #12]
 800baa2:	60b9      	str	r1, [r7, #8]
 800baa4:	4613      	mov	r3, r2
 800baa6:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800baae:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800bab0:	697b      	ldr	r3, [r7, #20]
 800bab2:	68ba      	ldr	r2, [r7, #8]
 800bab4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800bab8:	88fa      	ldrh	r2, [r7, #6]
 800baba:	697b      	ldr	r3, [r7, #20]
 800babc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800bac0:	2300      	movs	r3, #0
}
 800bac2:	4618      	mov	r0, r3
 800bac4:	371c      	adds	r7, #28
 800bac6:	46bd      	mov	sp, r7
 800bac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bacc:	4770      	bx	lr

0800bace <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800bace:	b480      	push	{r7}
 800bad0:	b085      	sub	sp, #20
 800bad2:	af00      	add	r7, sp, #0
 800bad4:	6078      	str	r0, [r7, #4]
 800bad6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bade:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	683a      	ldr	r2, [r7, #0]
 800bae4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800bae8:	2300      	movs	r3, #0
}
 800baea:	4618      	mov	r0, r3
 800baec:	3714      	adds	r7, #20
 800baee:	46bd      	mov	sp, r7
 800baf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf4:	4770      	bx	lr

0800baf6 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800baf6:	b580      	push	{r7, lr}
 800baf8:	b084      	sub	sp, #16
 800bafa:	af00      	add	r7, sp, #0
 800bafc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bb04:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d01c      	beq.n	800bb4a <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d115      	bne.n	800bb46 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	2201      	movs	r2, #1
 800bb1e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800bb38:	b29b      	uxth	r3, r3
 800bb3a:	2181      	movs	r1, #129	; 0x81
 800bb3c:	6878      	ldr	r0, [r7, #4]
 800bb3e:	f001 fd8e 	bl	800d65e <USBD_LL_Transmit>

      return USBD_OK;
 800bb42:	2300      	movs	r3, #0
 800bb44:	e002      	b.n	800bb4c <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800bb46:	2301      	movs	r3, #1
 800bb48:	e000      	b.n	800bb4c <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800bb4a:	2302      	movs	r3, #2
  }
}
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	3710      	adds	r7, #16
 800bb50:	46bd      	mov	sp, r7
 800bb52:	bd80      	pop	{r7, pc}

0800bb54 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b084      	sub	sp, #16
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bb62:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d017      	beq.n	800bb9e <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	7c1b      	ldrb	r3, [r3, #16]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d109      	bne.n	800bb8a <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bb7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bb80:	2101      	movs	r1, #1
 800bb82:	6878      	ldr	r0, [r7, #4]
 800bb84:	f001 fd8e 	bl	800d6a4 <USBD_LL_PrepareReceive>
 800bb88:	e007      	b.n	800bb9a <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bb90:	2340      	movs	r3, #64	; 0x40
 800bb92:	2101      	movs	r1, #1
 800bb94:	6878      	ldr	r0, [r7, #4]
 800bb96:	f001 fd85 	bl	800d6a4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	e000      	b.n	800bba0 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800bb9e:	2302      	movs	r3, #2
  }
}
 800bba0:	4618      	mov	r0, r3
 800bba2:	3710      	adds	r7, #16
 800bba4:	46bd      	mov	sp, r7
 800bba6:	bd80      	pop	{r7, pc}

0800bba8 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b084      	sub	sp, #16
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	60f8      	str	r0, [r7, #12]
 800bbb0:	60b9      	str	r1, [r7, #8]
 800bbb2:	4613      	mov	r3, r2
 800bbb4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d101      	bne.n	800bbc0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800bbbc:	2302      	movs	r3, #2
 800bbbe:	e01a      	b.n	800bbf6 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d003      	beq.n	800bbd2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	2200      	movs	r2, #0
 800bbce:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800bbd2:	68bb      	ldr	r3, [r7, #8]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d003      	beq.n	800bbe0 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	68ba      	ldr	r2, [r7, #8]
 800bbdc:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	2201      	movs	r2, #1
 800bbe4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	79fa      	ldrb	r2, [r7, #7]
 800bbec:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800bbee:	68f8      	ldr	r0, [r7, #12]
 800bbf0:	f001 fc00 	bl	800d3f4 <USBD_LL_Init>

  return USBD_OK;
 800bbf4:	2300      	movs	r3, #0
}
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	3710      	adds	r7, #16
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}

0800bbfe <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bbfe:	b480      	push	{r7}
 800bc00:	b085      	sub	sp, #20
 800bc02:	af00      	add	r7, sp, #0
 800bc04:	6078      	str	r0, [r7, #4]
 800bc06:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800bc08:	2300      	movs	r3, #0
 800bc0a:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d006      	beq.n	800bc20 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	683a      	ldr	r2, [r7, #0]
 800bc16:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	73fb      	strb	r3, [r7, #15]
 800bc1e:	e001      	b.n	800bc24 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800bc20:	2302      	movs	r3, #2
 800bc22:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bc24:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc26:	4618      	mov	r0, r3
 800bc28:	3714      	adds	r7, #20
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc30:	4770      	bx	lr

0800bc32 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800bc32:	b580      	push	{r7, lr}
 800bc34:	b082      	sub	sp, #8
 800bc36:	af00      	add	r7, sp, #0
 800bc38:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800bc3a:	6878      	ldr	r0, [r7, #4]
 800bc3c:	f001 fc26 	bl	800d48c <USBD_LL_Start>

  return USBD_OK;
 800bc40:	2300      	movs	r3, #0
}
 800bc42:	4618      	mov	r0, r3
 800bc44:	3708      	adds	r7, #8
 800bc46:	46bd      	mov	sp, r7
 800bc48:	bd80      	pop	{r7, pc}

0800bc4a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800bc4a:	b480      	push	{r7}
 800bc4c:	b083      	sub	sp, #12
 800bc4e:	af00      	add	r7, sp, #0
 800bc50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bc52:	2300      	movs	r3, #0
}
 800bc54:	4618      	mov	r0, r3
 800bc56:	370c      	adds	r7, #12
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5e:	4770      	bx	lr

0800bc60 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b084      	sub	sp, #16
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
 800bc68:	460b      	mov	r3, r1
 800bc6a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800bc6c:	2302      	movs	r3, #2
 800bc6e:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d00c      	beq.n	800bc94 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	78fa      	ldrb	r2, [r7, #3]
 800bc84:	4611      	mov	r1, r2
 800bc86:	6878      	ldr	r0, [r7, #4]
 800bc88:	4798      	blx	r3
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d101      	bne.n	800bc94 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800bc90:	2300      	movs	r3, #0
 800bc92:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800bc94:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	3710      	adds	r7, #16
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	bd80      	pop	{r7, pc}

0800bc9e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800bc9e:	b580      	push	{r7, lr}
 800bca0:	b082      	sub	sp, #8
 800bca2:	af00      	add	r7, sp, #0
 800bca4:	6078      	str	r0, [r7, #4]
 800bca6:	460b      	mov	r3, r1
 800bca8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800bcb0:	685b      	ldr	r3, [r3, #4]
 800bcb2:	78fa      	ldrb	r2, [r7, #3]
 800bcb4:	4611      	mov	r1, r2
 800bcb6:	6878      	ldr	r0, [r7, #4]
 800bcb8:	4798      	blx	r3
  return USBD_OK;
 800bcba:	2300      	movs	r3, #0
}
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	3708      	adds	r7, #8
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bd80      	pop	{r7, pc}

0800bcc4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b082      	sub	sp, #8
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
 800bccc:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800bcd4:	6839      	ldr	r1, [r7, #0]
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	f000 fe94 	bl	800ca04 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2201      	movs	r2, #1
 800bce0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800bcea:	461a      	mov	r2, r3
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800bcf8:	f003 031f 	and.w	r3, r3, #31
 800bcfc:	2b01      	cmp	r3, #1
 800bcfe:	d00c      	beq.n	800bd1a <USBD_LL_SetupStage+0x56>
 800bd00:	2b01      	cmp	r3, #1
 800bd02:	d302      	bcc.n	800bd0a <USBD_LL_SetupStage+0x46>
 800bd04:	2b02      	cmp	r3, #2
 800bd06:	d010      	beq.n	800bd2a <USBD_LL_SetupStage+0x66>
 800bd08:	e017      	b.n	800bd3a <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800bd10:	4619      	mov	r1, r3
 800bd12:	6878      	ldr	r0, [r7, #4]
 800bd14:	f000 fa04 	bl	800c120 <USBD_StdDevReq>
    break;
 800bd18:	e01a      	b.n	800bd50 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800bd20:	4619      	mov	r1, r3
 800bd22:	6878      	ldr	r0, [r7, #4]
 800bd24:	f000 fa66 	bl	800c1f4 <USBD_StdItfReq>
    break;
 800bd28:	e012      	b.n	800bd50 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800bd30:	4619      	mov	r1, r3
 800bd32:	6878      	ldr	r0, [r7, #4]
 800bd34:	f000 faa4 	bl	800c280 <USBD_StdEPReq>
    break;
 800bd38:	e00a      	b.n	800bd50 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800bd40:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bd44:	b2db      	uxtb	r3, r3
 800bd46:	4619      	mov	r1, r3
 800bd48:	6878      	ldr	r0, [r7, #4]
 800bd4a:	f001 fbff 	bl	800d54c <USBD_LL_StallEP>
    break;
 800bd4e:	bf00      	nop
  }

  return USBD_OK;
 800bd50:	2300      	movs	r3, #0
}
 800bd52:	4618      	mov	r0, r3
 800bd54:	3708      	adds	r7, #8
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd80      	pop	{r7, pc}

0800bd5a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bd5a:	b580      	push	{r7, lr}
 800bd5c:	b086      	sub	sp, #24
 800bd5e:	af00      	add	r7, sp, #0
 800bd60:	60f8      	str	r0, [r7, #12]
 800bd62:	460b      	mov	r3, r1
 800bd64:	607a      	str	r2, [r7, #4]
 800bd66:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800bd68:	7afb      	ldrb	r3, [r7, #11]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d14b      	bne.n	800be06 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800bd74:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800bd7c:	2b03      	cmp	r3, #3
 800bd7e:	d134      	bne.n	800bdea <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800bd80:	697b      	ldr	r3, [r7, #20]
 800bd82:	68da      	ldr	r2, [r3, #12]
 800bd84:	697b      	ldr	r3, [r7, #20]
 800bd86:	691b      	ldr	r3, [r3, #16]
 800bd88:	429a      	cmp	r2, r3
 800bd8a:	d919      	bls.n	800bdc0 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800bd8c:	697b      	ldr	r3, [r7, #20]
 800bd8e:	68da      	ldr	r2, [r3, #12]
 800bd90:	697b      	ldr	r3, [r7, #20]
 800bd92:	691b      	ldr	r3, [r3, #16]
 800bd94:	1ad2      	subs	r2, r2, r3
 800bd96:	697b      	ldr	r3, [r7, #20]
 800bd98:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800bd9a:	697b      	ldr	r3, [r7, #20]
 800bd9c:	68da      	ldr	r2, [r3, #12]
 800bd9e:	697b      	ldr	r3, [r7, #20]
 800bda0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800bda2:	429a      	cmp	r2, r3
 800bda4:	d203      	bcs.n	800bdae <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800bda6:	697b      	ldr	r3, [r7, #20]
 800bda8:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800bdaa:	b29b      	uxth	r3, r3
 800bdac:	e002      	b.n	800bdb4 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800bdae:	697b      	ldr	r3, [r7, #20]
 800bdb0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800bdb2:	b29b      	uxth	r3, r3
 800bdb4:	461a      	mov	r2, r3
 800bdb6:	6879      	ldr	r1, [r7, #4]
 800bdb8:	68f8      	ldr	r0, [r7, #12]
 800bdba:	f000 ff17 	bl	800cbec <USBD_CtlContinueRx>
 800bdbe:	e038      	b.n	800be32 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800bdc6:	691b      	ldr	r3, [r3, #16]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d00a      	beq.n	800bde2 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800bdd2:	2b03      	cmp	r3, #3
 800bdd4:	d105      	bne.n	800bde2 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800bddc:	691b      	ldr	r3, [r3, #16]
 800bdde:	68f8      	ldr	r0, [r7, #12]
 800bde0:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800bde2:	68f8      	ldr	r0, [r7, #12]
 800bde4:	f000 ff14 	bl	800cc10 <USBD_CtlSendStatus>
 800bde8:	e023      	b.n	800be32 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800bdf0:	2b05      	cmp	r3, #5
 800bdf2:	d11e      	bne.n	800be32 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800bdfc:	2100      	movs	r1, #0
 800bdfe:	68f8      	ldr	r0, [r7, #12]
 800be00:	f001 fba4 	bl	800d54c <USBD_LL_StallEP>
 800be04:	e015      	b.n	800be32 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800be0c:	699b      	ldr	r3, [r3, #24]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d00d      	beq.n	800be2e <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800be18:	2b03      	cmp	r3, #3
 800be1a:	d108      	bne.n	800be2e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800be22:	699b      	ldr	r3, [r3, #24]
 800be24:	7afa      	ldrb	r2, [r7, #11]
 800be26:	4611      	mov	r1, r2
 800be28:	68f8      	ldr	r0, [r7, #12]
 800be2a:	4798      	blx	r3
 800be2c:	e001      	b.n	800be32 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800be2e:	2302      	movs	r3, #2
 800be30:	e000      	b.n	800be34 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800be32:	2300      	movs	r3, #0
}
 800be34:	4618      	mov	r0, r3
 800be36:	3718      	adds	r7, #24
 800be38:	46bd      	mov	sp, r7
 800be3a:	bd80      	pop	{r7, pc}

0800be3c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b086      	sub	sp, #24
 800be40:	af00      	add	r7, sp, #0
 800be42:	60f8      	str	r0, [r7, #12]
 800be44:	460b      	mov	r3, r1
 800be46:	607a      	str	r2, [r7, #4]
 800be48:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800be4a:	7afb      	ldrb	r3, [r7, #11]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d17f      	bne.n	800bf50 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	3314      	adds	r3, #20
 800be54:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800be5c:	2b02      	cmp	r3, #2
 800be5e:	d15c      	bne.n	800bf1a <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800be60:	697b      	ldr	r3, [r7, #20]
 800be62:	68da      	ldr	r2, [r3, #12]
 800be64:	697b      	ldr	r3, [r7, #20]
 800be66:	691b      	ldr	r3, [r3, #16]
 800be68:	429a      	cmp	r2, r3
 800be6a:	d915      	bls.n	800be98 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800be6c:	697b      	ldr	r3, [r7, #20]
 800be6e:	68da      	ldr	r2, [r3, #12]
 800be70:	697b      	ldr	r3, [r7, #20]
 800be72:	691b      	ldr	r3, [r3, #16]
 800be74:	1ad2      	subs	r2, r2, r3
 800be76:	697b      	ldr	r3, [r7, #20]
 800be78:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800be7a:	697b      	ldr	r3, [r7, #20]
 800be7c:	68db      	ldr	r3, [r3, #12]
 800be7e:	b29b      	uxth	r3, r3
 800be80:	461a      	mov	r2, r3
 800be82:	6879      	ldr	r1, [r7, #4]
 800be84:	68f8      	ldr	r0, [r7, #12]
 800be86:	f000 fe81 	bl	800cb8c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800be8a:	2300      	movs	r3, #0
 800be8c:	2200      	movs	r2, #0
 800be8e:	2100      	movs	r1, #0
 800be90:	68f8      	ldr	r0, [r7, #12]
 800be92:	f001 fc07 	bl	800d6a4 <USBD_LL_PrepareReceive>
 800be96:	e04e      	b.n	800bf36 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800be98:	697b      	ldr	r3, [r7, #20]
 800be9a:	689b      	ldr	r3, [r3, #8]
 800be9c:	697a      	ldr	r2, [r7, #20]
 800be9e:	6912      	ldr	r2, [r2, #16]
 800bea0:	fbb3 f1f2 	udiv	r1, r3, r2
 800bea4:	fb02 f201 	mul.w	r2, r2, r1
 800bea8:	1a9b      	subs	r3, r3, r2
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d11c      	bne.n	800bee8 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800beae:	697b      	ldr	r3, [r7, #20]
 800beb0:	689a      	ldr	r2, [r3, #8]
 800beb2:	697b      	ldr	r3, [r7, #20]
 800beb4:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800beb6:	429a      	cmp	r2, r3
 800beb8:	d316      	bcc.n	800bee8 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800beba:	697b      	ldr	r3, [r7, #20]
 800bebc:	689a      	ldr	r2, [r3, #8]
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800bec4:	429a      	cmp	r2, r3
 800bec6:	d20f      	bcs.n	800bee8 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bec8:	2200      	movs	r2, #0
 800beca:	2100      	movs	r1, #0
 800becc:	68f8      	ldr	r0, [r7, #12]
 800bece:	f000 fe5d 	bl	800cb8c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	2200      	movs	r2, #0
 800bed6:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800beda:	2300      	movs	r3, #0
 800bedc:	2200      	movs	r2, #0
 800bede:	2100      	movs	r1, #0
 800bee0:	68f8      	ldr	r0, [r7, #12]
 800bee2:	f001 fbdf 	bl	800d6a4 <USBD_LL_PrepareReceive>
 800bee6:	e026      	b.n	800bf36 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800beee:	68db      	ldr	r3, [r3, #12]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d00a      	beq.n	800bf0a <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800befa:	2b03      	cmp	r3, #3
 800befc:	d105      	bne.n	800bf0a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800bf04:	68db      	ldr	r3, [r3, #12]
 800bf06:	68f8      	ldr	r0, [r7, #12]
 800bf08:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800bf0a:	2180      	movs	r1, #128	; 0x80
 800bf0c:	68f8      	ldr	r0, [r7, #12]
 800bf0e:	f001 fb1d 	bl	800d54c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800bf12:	68f8      	ldr	r0, [r7, #12]
 800bf14:	f000 fe8f 	bl	800cc36 <USBD_CtlReceiveStatus>
 800bf18:	e00d      	b.n	800bf36 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800bf20:	2b04      	cmp	r3, #4
 800bf22:	d004      	beq.n	800bf2e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d103      	bne.n	800bf36 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800bf2e:	2180      	movs	r1, #128	; 0x80
 800bf30:	68f8      	ldr	r0, [r7, #12]
 800bf32:	f001 fb0b 	bl	800d54c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800bf3c:	2b01      	cmp	r3, #1
 800bf3e:	d11d      	bne.n	800bf7c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800bf40:	68f8      	ldr	r0, [r7, #12]
 800bf42:	f7ff fe82 	bl	800bc4a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	2200      	movs	r2, #0
 800bf4a:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800bf4e:	e015      	b.n	800bf7c <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800bf56:	695b      	ldr	r3, [r3, #20]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d00d      	beq.n	800bf78 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800bf62:	2b03      	cmp	r3, #3
 800bf64:	d108      	bne.n	800bf78 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800bf6c:	695b      	ldr	r3, [r3, #20]
 800bf6e:	7afa      	ldrb	r2, [r7, #11]
 800bf70:	4611      	mov	r1, r2
 800bf72:	68f8      	ldr	r0, [r7, #12]
 800bf74:	4798      	blx	r3
 800bf76:	e001      	b.n	800bf7c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bf78:	2302      	movs	r3, #2
 800bf7a:	e000      	b.n	800bf7e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800bf7c:	2300      	movs	r3, #0
}
 800bf7e:	4618      	mov	r0, r3
 800bf80:	3718      	adds	r7, #24
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}

0800bf86 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800bf86:	b580      	push	{r7, lr}
 800bf88:	b082      	sub	sp, #8
 800bf8a:	af00      	add	r7, sp, #0
 800bf8c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bf8e:	2340      	movs	r3, #64	; 0x40
 800bf90:	2200      	movs	r2, #0
 800bf92:	2100      	movs	r1, #0
 800bf94:	6878      	ldr	r0, [r7, #4]
 800bf96:	f001 fa94 	bl	800d4c2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	2201      	movs	r2, #1
 800bf9e:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	2240      	movs	r2, #64	; 0x40
 800bfa6:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bfaa:	2340      	movs	r3, #64	; 0x40
 800bfac:	2200      	movs	r2, #0
 800bfae:	2180      	movs	r1, #128	; 0x80
 800bfb0:	6878      	ldr	r0, [r7, #4]
 800bfb2:	f001 fa86 	bl	800d4c2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	2201      	movs	r2, #1
 800bfba:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2240      	movs	r2, #64	; 0x40
 800bfc0:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	2201      	movs	r2, #1
 800bfc6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	2200      	movs	r2, #0
 800bfce:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2200      	movs	r2, #0
 800bfdc:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d009      	beq.n	800bffe <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800bff0:	685b      	ldr	r3, [r3, #4]
 800bff2:	687a      	ldr	r2, [r7, #4]
 800bff4:	6852      	ldr	r2, [r2, #4]
 800bff6:	b2d2      	uxtb	r2, r2
 800bff8:	4611      	mov	r1, r2
 800bffa:	6878      	ldr	r0, [r7, #4]
 800bffc:	4798      	blx	r3
  }

  return USBD_OK;
 800bffe:	2300      	movs	r3, #0
}
 800c000:	4618      	mov	r0, r3
 800c002:	3708      	adds	r7, #8
 800c004:	46bd      	mov	sp, r7
 800c006:	bd80      	pop	{r7, pc}

0800c008 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800c008:	b480      	push	{r7}
 800c00a:	b083      	sub	sp, #12
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
 800c010:	460b      	mov	r3, r1
 800c012:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	78fa      	ldrb	r2, [r7, #3]
 800c018:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800c01a:	2300      	movs	r3, #0
}
 800c01c:	4618      	mov	r0, r3
 800c01e:	370c      	adds	r7, #12
 800c020:	46bd      	mov	sp, r7
 800c022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c026:	4770      	bx	lr

0800c028 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800c028:	b480      	push	{r7}
 800c02a:	b083      	sub	sp, #12
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2204      	movs	r2, #4
 800c040:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800c044:	2300      	movs	r3, #0
}
 800c046:	4618      	mov	r0, r3
 800c048:	370c      	adds	r7, #12
 800c04a:	46bd      	mov	sp, r7
 800c04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c050:	4770      	bx	lr

0800c052 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800c052:	b480      	push	{r7}
 800c054:	b083      	sub	sp, #12
 800c056:	af00      	add	r7, sp, #0
 800c058:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800c066:	2300      	movs	r3, #0
}
 800c068:	4618      	mov	r0, r3
 800c06a:	370c      	adds	r7, #12
 800c06c:	46bd      	mov	sp, r7
 800c06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c072:	4770      	bx	lr

0800c074 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b082      	sub	sp, #8
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c082:	2b03      	cmp	r3, #3
 800c084:	d10b      	bne.n	800c09e <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c08c:	69db      	ldr	r3, [r3, #28]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d005      	beq.n	800c09e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c098:	69db      	ldr	r3, [r3, #28]
 800c09a:	6878      	ldr	r0, [r7, #4]
 800c09c:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800c09e:	2300      	movs	r3, #0
}
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	3708      	adds	r7, #8
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bd80      	pop	{r7, pc}

0800c0a8 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800c0a8:	b480      	push	{r7}
 800c0aa:	b083      	sub	sp, #12
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
 800c0b0:	460b      	mov	r3, r1
 800c0b2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800c0b4:	2300      	movs	r3, #0
}
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	370c      	adds	r7, #12
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c0:	4770      	bx	lr

0800c0c2 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800c0c2:	b480      	push	{r7}
 800c0c4:	b083      	sub	sp, #12
 800c0c6:	af00      	add	r7, sp, #0
 800c0c8:	6078      	str	r0, [r7, #4]
 800c0ca:	460b      	mov	r3, r1
 800c0cc:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800c0ce:	2300      	movs	r3, #0
}
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	370c      	adds	r7, #12
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0da:	4770      	bx	lr

0800c0dc <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 800c0dc:	b480      	push	{r7}
 800c0de:	b083      	sub	sp, #12
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c0e4:	2300      	movs	r3, #0
}
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	370c      	adds	r7, #12
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f0:	4770      	bx	lr

0800c0f2 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 800c0f2:	b580      	push	{r7, lr}
 800c0f4:	b082      	sub	sp, #8
 800c0f6:	af00      	add	r7, sp, #0
 800c0f8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	2201      	movs	r2, #1
 800c0fe:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c108:	685b      	ldr	r3, [r3, #4]
 800c10a:	687a      	ldr	r2, [r7, #4]
 800c10c:	6852      	ldr	r2, [r2, #4]
 800c10e:	b2d2      	uxtb	r2, r2
 800c110:	4611      	mov	r1, r2
 800c112:	6878      	ldr	r0, [r7, #4]
 800c114:	4798      	blx	r3

  return USBD_OK;
 800c116:	2300      	movs	r3, #0
}
 800c118:	4618      	mov	r0, r3
 800c11a:	3708      	adds	r7, #8
 800c11c:	46bd      	mov	sp, r7
 800c11e:	bd80      	pop	{r7, pc}

0800c120 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b084      	sub	sp, #16
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
 800c128:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c12a:	2300      	movs	r3, #0
 800c12c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	781b      	ldrb	r3, [r3, #0]
 800c132:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c136:	2b20      	cmp	r3, #32
 800c138:	d004      	beq.n	800c144 <USBD_StdDevReq+0x24>
 800c13a:	2b40      	cmp	r3, #64	; 0x40
 800c13c:	d002      	beq.n	800c144 <USBD_StdDevReq+0x24>
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d008      	beq.n	800c154 <USBD_StdDevReq+0x34>
 800c142:	e04c      	b.n	800c1de <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c14a:	689b      	ldr	r3, [r3, #8]
 800c14c:	6839      	ldr	r1, [r7, #0]
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	4798      	blx	r3
    break;
 800c152:	e049      	b.n	800c1e8 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	785b      	ldrb	r3, [r3, #1]
 800c158:	2b09      	cmp	r3, #9
 800c15a:	d83a      	bhi.n	800c1d2 <USBD_StdDevReq+0xb2>
 800c15c:	a201      	add	r2, pc, #4	; (adr r2, 800c164 <USBD_StdDevReq+0x44>)
 800c15e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c162:	bf00      	nop
 800c164:	0800c1b5 	.word	0x0800c1b5
 800c168:	0800c1c9 	.word	0x0800c1c9
 800c16c:	0800c1d3 	.word	0x0800c1d3
 800c170:	0800c1bf 	.word	0x0800c1bf
 800c174:	0800c1d3 	.word	0x0800c1d3
 800c178:	0800c197 	.word	0x0800c197
 800c17c:	0800c18d 	.word	0x0800c18d
 800c180:	0800c1d3 	.word	0x0800c1d3
 800c184:	0800c1ab 	.word	0x0800c1ab
 800c188:	0800c1a1 	.word	0x0800c1a1
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800c18c:	6839      	ldr	r1, [r7, #0]
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	f000 f9d2 	bl	800c538 <USBD_GetDescriptor>
      break;
 800c194:	e022      	b.n	800c1dc <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800c196:	6839      	ldr	r1, [r7, #0]
 800c198:	6878      	ldr	r0, [r7, #4]
 800c19a:	f000 fac7 	bl	800c72c <USBD_SetAddress>
      break;
 800c19e:	e01d      	b.n	800c1dc <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800c1a0:	6839      	ldr	r1, [r7, #0]
 800c1a2:	6878      	ldr	r0, [r7, #4]
 800c1a4:	f000 fb04 	bl	800c7b0 <USBD_SetConfig>
      break;
 800c1a8:	e018      	b.n	800c1dc <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800c1aa:	6839      	ldr	r1, [r7, #0]
 800c1ac:	6878      	ldr	r0, [r7, #4]
 800c1ae:	f000 fb8d 	bl	800c8cc <USBD_GetConfig>
      break;
 800c1b2:	e013      	b.n	800c1dc <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800c1b4:	6839      	ldr	r1, [r7, #0]
 800c1b6:	6878      	ldr	r0, [r7, #4]
 800c1b8:	f000 fbbc 	bl	800c934 <USBD_GetStatus>
      break;
 800c1bc:	e00e      	b.n	800c1dc <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800c1be:	6839      	ldr	r1, [r7, #0]
 800c1c0:	6878      	ldr	r0, [r7, #4]
 800c1c2:	f000 fbea 	bl	800c99a <USBD_SetFeature>
      break;
 800c1c6:	e009      	b.n	800c1dc <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800c1c8:	6839      	ldr	r1, [r7, #0]
 800c1ca:	6878      	ldr	r0, [r7, #4]
 800c1cc:	f000 fbf9 	bl	800c9c2 <USBD_ClrFeature>
      break;
 800c1d0:	e004      	b.n	800c1dc <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800c1d2:	6839      	ldr	r1, [r7, #0]
 800c1d4:	6878      	ldr	r0, [r7, #4]
 800c1d6:	f000 fc52 	bl	800ca7e <USBD_CtlError>
      break;
 800c1da:	bf00      	nop
    }
    break;
 800c1dc:	e004      	b.n	800c1e8 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800c1de:	6839      	ldr	r1, [r7, #0]
 800c1e0:	6878      	ldr	r0, [r7, #4]
 800c1e2:	f000 fc4c 	bl	800ca7e <USBD_CtlError>
    break;
 800c1e6:	bf00      	nop
  }

  return ret;
 800c1e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	3710      	adds	r7, #16
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	bd80      	pop	{r7, pc}
 800c1f2:	bf00      	nop

0800c1f4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b084      	sub	sp, #16
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
 800c1fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c1fe:	2300      	movs	r3, #0
 800c200:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	781b      	ldrb	r3, [r3, #0]
 800c206:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c20a:	2b20      	cmp	r3, #32
 800c20c:	d003      	beq.n	800c216 <USBD_StdItfReq+0x22>
 800c20e:	2b40      	cmp	r3, #64	; 0x40
 800c210:	d001      	beq.n	800c216 <USBD_StdItfReq+0x22>
 800c212:	2b00      	cmp	r3, #0
 800c214:	d12a      	bne.n	800c26c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c21c:	3b01      	subs	r3, #1
 800c21e:	2b02      	cmp	r3, #2
 800c220:	d81d      	bhi.n	800c25e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c222:	683b      	ldr	r3, [r7, #0]
 800c224:	889b      	ldrh	r3, [r3, #4]
 800c226:	b2db      	uxtb	r3, r3
 800c228:	2b01      	cmp	r3, #1
 800c22a:	d813      	bhi.n	800c254 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c232:	689b      	ldr	r3, [r3, #8]
 800c234:	6839      	ldr	r1, [r7, #0]
 800c236:	6878      	ldr	r0, [r7, #4]
 800c238:	4798      	blx	r3
 800c23a:	4603      	mov	r3, r0
 800c23c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800c23e:	683b      	ldr	r3, [r7, #0]
 800c240:	88db      	ldrh	r3, [r3, #6]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d110      	bne.n	800c268 <USBD_StdItfReq+0x74>
 800c246:	7bfb      	ldrb	r3, [r7, #15]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d10d      	bne.n	800c268 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 800c24c:	6878      	ldr	r0, [r7, #4]
 800c24e:	f000 fcdf 	bl	800cc10 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800c252:	e009      	b.n	800c268 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800c254:	6839      	ldr	r1, [r7, #0]
 800c256:	6878      	ldr	r0, [r7, #4]
 800c258:	f000 fc11 	bl	800ca7e <USBD_CtlError>
      break;
 800c25c:	e004      	b.n	800c268 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800c25e:	6839      	ldr	r1, [r7, #0]
 800c260:	6878      	ldr	r0, [r7, #4]
 800c262:	f000 fc0c 	bl	800ca7e <USBD_CtlError>
      break;
 800c266:	e000      	b.n	800c26a <USBD_StdItfReq+0x76>
      break;
 800c268:	bf00      	nop
    }
    break;
 800c26a:	e004      	b.n	800c276 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800c26c:	6839      	ldr	r1, [r7, #0]
 800c26e:	6878      	ldr	r0, [r7, #4]
 800c270:	f000 fc05 	bl	800ca7e <USBD_CtlError>
    break;
 800c274:	bf00      	nop
  }

  return USBD_OK;
 800c276:	2300      	movs	r3, #0
}
 800c278:	4618      	mov	r0, r3
 800c27a:	3710      	adds	r7, #16
 800c27c:	46bd      	mov	sp, r7
 800c27e:	bd80      	pop	{r7, pc}

0800c280 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b084      	sub	sp, #16
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
 800c288:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c28a:	2300      	movs	r3, #0
 800c28c:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	889b      	ldrh	r3, [r3, #4]
 800c292:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	781b      	ldrb	r3, [r3, #0]
 800c298:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c29c:	2b20      	cmp	r3, #32
 800c29e:	d004      	beq.n	800c2aa <USBD_StdEPReq+0x2a>
 800c2a0:	2b40      	cmp	r3, #64	; 0x40
 800c2a2:	d002      	beq.n	800c2aa <USBD_StdEPReq+0x2a>
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d008      	beq.n	800c2ba <USBD_StdEPReq+0x3a>
 800c2a8:	e13b      	b.n	800c522 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c2b0:	689b      	ldr	r3, [r3, #8]
 800c2b2:	6839      	ldr	r1, [r7, #0]
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	4798      	blx	r3
    break;
 800c2b8:	e138      	b.n	800c52c <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800c2ba:	683b      	ldr	r3, [r7, #0]
 800c2bc:	781b      	ldrb	r3, [r3, #0]
 800c2be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c2c2:	2b20      	cmp	r3, #32
 800c2c4:	d10a      	bne.n	800c2dc <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c2cc:	689b      	ldr	r3, [r3, #8]
 800c2ce:	6839      	ldr	r1, [r7, #0]
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	4798      	blx	r3
 800c2d4:	4603      	mov	r3, r0
 800c2d6:	73fb      	strb	r3, [r7, #15]

      return ret;
 800c2d8:	7bfb      	ldrb	r3, [r7, #15]
 800c2da:	e128      	b.n	800c52e <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 800c2dc:	683b      	ldr	r3, [r7, #0]
 800c2de:	785b      	ldrb	r3, [r3, #1]
 800c2e0:	2b01      	cmp	r3, #1
 800c2e2:	d03e      	beq.n	800c362 <USBD_StdEPReq+0xe2>
 800c2e4:	2b03      	cmp	r3, #3
 800c2e6:	d002      	beq.n	800c2ee <USBD_StdEPReq+0x6e>
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d070      	beq.n	800c3ce <USBD_StdEPReq+0x14e>
 800c2ec:	e113      	b.n	800c516 <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c2f4:	2b02      	cmp	r3, #2
 800c2f6:	d002      	beq.n	800c2fe <USBD_StdEPReq+0x7e>
 800c2f8:	2b03      	cmp	r3, #3
 800c2fa:	d015      	beq.n	800c328 <USBD_StdEPReq+0xa8>
 800c2fc:	e02b      	b.n	800c356 <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c2fe:	7bbb      	ldrb	r3, [r7, #14]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d00c      	beq.n	800c31e <USBD_StdEPReq+0x9e>
 800c304:	7bbb      	ldrb	r3, [r7, #14]
 800c306:	2b80      	cmp	r3, #128	; 0x80
 800c308:	d009      	beq.n	800c31e <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800c30a:	7bbb      	ldrb	r3, [r7, #14]
 800c30c:	4619      	mov	r1, r3
 800c30e:	6878      	ldr	r0, [r7, #4]
 800c310:	f001 f91c 	bl	800d54c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800c314:	2180      	movs	r1, #128	; 0x80
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	f001 f918 	bl	800d54c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c31c:	e020      	b.n	800c360 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 800c31e:	6839      	ldr	r1, [r7, #0]
 800c320:	6878      	ldr	r0, [r7, #4]
 800c322:	f000 fbac 	bl	800ca7e <USBD_CtlError>
        break;
 800c326:	e01b      	b.n	800c360 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c328:	683b      	ldr	r3, [r7, #0]
 800c32a:	885b      	ldrh	r3, [r3, #2]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d10e      	bne.n	800c34e <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c330:	7bbb      	ldrb	r3, [r7, #14]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d00b      	beq.n	800c34e <USBD_StdEPReq+0xce>
 800c336:	7bbb      	ldrb	r3, [r7, #14]
 800c338:	2b80      	cmp	r3, #128	; 0x80
 800c33a:	d008      	beq.n	800c34e <USBD_StdEPReq+0xce>
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	88db      	ldrh	r3, [r3, #6]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d104      	bne.n	800c34e <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800c344:	7bbb      	ldrb	r3, [r7, #14]
 800c346:	4619      	mov	r1, r3
 800c348:	6878      	ldr	r0, [r7, #4]
 800c34a:	f001 f8ff 	bl	800d54c <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800c34e:	6878      	ldr	r0, [r7, #4]
 800c350:	f000 fc5e 	bl	800cc10 <USBD_CtlSendStatus>

        break;
 800c354:	e004      	b.n	800c360 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 800c356:	6839      	ldr	r1, [r7, #0]
 800c358:	6878      	ldr	r0, [r7, #4]
 800c35a:	f000 fb90 	bl	800ca7e <USBD_CtlError>
        break;
 800c35e:	bf00      	nop
      }
      break;
 800c360:	e0de      	b.n	800c520 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c368:	2b02      	cmp	r3, #2
 800c36a:	d002      	beq.n	800c372 <USBD_StdEPReq+0xf2>
 800c36c:	2b03      	cmp	r3, #3
 800c36e:	d015      	beq.n	800c39c <USBD_StdEPReq+0x11c>
 800c370:	e026      	b.n	800c3c0 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c372:	7bbb      	ldrb	r3, [r7, #14]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d00c      	beq.n	800c392 <USBD_StdEPReq+0x112>
 800c378:	7bbb      	ldrb	r3, [r7, #14]
 800c37a:	2b80      	cmp	r3, #128	; 0x80
 800c37c:	d009      	beq.n	800c392 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800c37e:	7bbb      	ldrb	r3, [r7, #14]
 800c380:	4619      	mov	r1, r3
 800c382:	6878      	ldr	r0, [r7, #4]
 800c384:	f001 f8e2 	bl	800d54c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800c388:	2180      	movs	r1, #128	; 0x80
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	f001 f8de 	bl	800d54c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c390:	e01c      	b.n	800c3cc <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800c392:	6839      	ldr	r1, [r7, #0]
 800c394:	6878      	ldr	r0, [r7, #4]
 800c396:	f000 fb72 	bl	800ca7e <USBD_CtlError>
        break;
 800c39a:	e017      	b.n	800c3cc <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	885b      	ldrh	r3, [r3, #2]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d112      	bne.n	800c3ca <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800c3a4:	7bbb      	ldrb	r3, [r7, #14]
 800c3a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d004      	beq.n	800c3b8 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800c3ae:	7bbb      	ldrb	r3, [r7, #14]
 800c3b0:	4619      	mov	r1, r3
 800c3b2:	6878      	ldr	r0, [r7, #4]
 800c3b4:	f001 f8e9 	bl	800d58a <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800c3b8:	6878      	ldr	r0, [r7, #4]
 800c3ba:	f000 fc29 	bl	800cc10 <USBD_CtlSendStatus>
        }
        break;
 800c3be:	e004      	b.n	800c3ca <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800c3c0:	6839      	ldr	r1, [r7, #0]
 800c3c2:	6878      	ldr	r0, [r7, #4]
 800c3c4:	f000 fb5b 	bl	800ca7e <USBD_CtlError>
        break;
 800c3c8:	e000      	b.n	800c3cc <USBD_StdEPReq+0x14c>
        break;
 800c3ca:	bf00      	nop
      }
      break;
 800c3cc:	e0a8      	b.n	800c520 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c3d4:	2b02      	cmp	r3, #2
 800c3d6:	d002      	beq.n	800c3de <USBD_StdEPReq+0x15e>
 800c3d8:	2b03      	cmp	r3, #3
 800c3da:	d031      	beq.n	800c440 <USBD_StdEPReq+0x1c0>
 800c3dc:	e095      	b.n	800c50a <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c3de:	7bbb      	ldrb	r3, [r7, #14]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d007      	beq.n	800c3f4 <USBD_StdEPReq+0x174>
 800c3e4:	7bbb      	ldrb	r3, [r7, #14]
 800c3e6:	2b80      	cmp	r3, #128	; 0x80
 800c3e8:	d004      	beq.n	800c3f4 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800c3ea:	6839      	ldr	r1, [r7, #0]
 800c3ec:	6878      	ldr	r0, [r7, #4]
 800c3ee:	f000 fb46 	bl	800ca7e <USBD_CtlError>
          break;
 800c3f2:	e08f      	b.n	800c514 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800c3f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	da0b      	bge.n	800c414 <USBD_StdEPReq+0x194>
 800c3fc:	7bbb      	ldrb	r3, [r7, #14]
 800c3fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c402:	4613      	mov	r3, r2
 800c404:	009b      	lsls	r3, r3, #2
 800c406:	4413      	add	r3, r2
 800c408:	009b      	lsls	r3, r3, #2
 800c40a:	3310      	adds	r3, #16
 800c40c:	687a      	ldr	r2, [r7, #4]
 800c40e:	4413      	add	r3, r2
 800c410:	3304      	adds	r3, #4
 800c412:	e00a      	b.n	800c42a <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 800c414:	7bbb      	ldrb	r3, [r7, #14]
 800c416:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800c41a:	4613      	mov	r3, r2
 800c41c:	009b      	lsls	r3, r3, #2
 800c41e:	4413      	add	r3, r2
 800c420:	009b      	lsls	r3, r3, #2
 800c422:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800c426:	687a      	ldr	r2, [r7, #4]
 800c428:	4413      	add	r3, r2
 800c42a:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800c42c:	68bb      	ldr	r3, [r7, #8]
 800c42e:	2200      	movs	r2, #0
 800c430:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c432:	68bb      	ldr	r3, [r7, #8]
 800c434:	2202      	movs	r2, #2
 800c436:	4619      	mov	r1, r3
 800c438:	6878      	ldr	r0, [r7, #4]
 800c43a:	f000 fb8b 	bl	800cb54 <USBD_CtlSendData>
          break;
 800c43e:	e069      	b.n	800c514 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800c440:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c444:	2b00      	cmp	r3, #0
 800c446:	da11      	bge.n	800c46c <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c448:	7bbb      	ldrb	r3, [r7, #14]
 800c44a:	f003 020f 	and.w	r2, r3, #15
 800c44e:	6879      	ldr	r1, [r7, #4]
 800c450:	4613      	mov	r3, r2
 800c452:	009b      	lsls	r3, r3, #2
 800c454:	4413      	add	r3, r2
 800c456:	009b      	lsls	r3, r3, #2
 800c458:	440b      	add	r3, r1
 800c45a:	3318      	adds	r3, #24
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d117      	bne.n	800c492 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800c462:	6839      	ldr	r1, [r7, #0]
 800c464:	6878      	ldr	r0, [r7, #4]
 800c466:	f000 fb0a 	bl	800ca7e <USBD_CtlError>
            break;
 800c46a:	e053      	b.n	800c514 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c46c:	7bbb      	ldrb	r3, [r7, #14]
 800c46e:	f003 020f 	and.w	r2, r3, #15
 800c472:	6879      	ldr	r1, [r7, #4]
 800c474:	4613      	mov	r3, r2
 800c476:	009b      	lsls	r3, r3, #2
 800c478:	4413      	add	r3, r2
 800c47a:	009b      	lsls	r3, r3, #2
 800c47c:	440b      	add	r3, r1
 800c47e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d104      	bne.n	800c492 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800c488:	6839      	ldr	r1, [r7, #0]
 800c48a:	6878      	ldr	r0, [r7, #4]
 800c48c:	f000 faf7 	bl	800ca7e <USBD_CtlError>
            break;
 800c490:	e040      	b.n	800c514 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800c492:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c496:	2b00      	cmp	r3, #0
 800c498:	da0b      	bge.n	800c4b2 <USBD_StdEPReq+0x232>
 800c49a:	7bbb      	ldrb	r3, [r7, #14]
 800c49c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c4a0:	4613      	mov	r3, r2
 800c4a2:	009b      	lsls	r3, r3, #2
 800c4a4:	4413      	add	r3, r2
 800c4a6:	009b      	lsls	r3, r3, #2
 800c4a8:	3310      	adds	r3, #16
 800c4aa:	687a      	ldr	r2, [r7, #4]
 800c4ac:	4413      	add	r3, r2
 800c4ae:	3304      	adds	r3, #4
 800c4b0:	e00a      	b.n	800c4c8 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 800c4b2:	7bbb      	ldrb	r3, [r7, #14]
 800c4b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800c4b8:	4613      	mov	r3, r2
 800c4ba:	009b      	lsls	r3, r3, #2
 800c4bc:	4413      	add	r3, r2
 800c4be:	009b      	lsls	r3, r3, #2
 800c4c0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800c4c4:	687a      	ldr	r2, [r7, #4]
 800c4c6:	4413      	add	r3, r2
 800c4c8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c4ca:	7bbb      	ldrb	r3, [r7, #14]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d002      	beq.n	800c4d6 <USBD_StdEPReq+0x256>
 800c4d0:	7bbb      	ldrb	r3, [r7, #14]
 800c4d2:	2b80      	cmp	r3, #128	; 0x80
 800c4d4:	d103      	bne.n	800c4de <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 800c4d6:	68bb      	ldr	r3, [r7, #8]
 800c4d8:	2200      	movs	r2, #0
 800c4da:	601a      	str	r2, [r3, #0]
 800c4dc:	e00e      	b.n	800c4fc <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800c4de:	7bbb      	ldrb	r3, [r7, #14]
 800c4e0:	4619      	mov	r1, r3
 800c4e2:	6878      	ldr	r0, [r7, #4]
 800c4e4:	f001 f870 	bl	800d5c8 <USBD_LL_IsStallEP>
 800c4e8:	4603      	mov	r3, r0
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d003      	beq.n	800c4f6 <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	2201      	movs	r2, #1
 800c4f2:	601a      	str	r2, [r3, #0]
 800c4f4:	e002      	b.n	800c4fc <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 800c4f6:	68bb      	ldr	r3, [r7, #8]
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c4fc:	68bb      	ldr	r3, [r7, #8]
 800c4fe:	2202      	movs	r2, #2
 800c500:	4619      	mov	r1, r3
 800c502:	6878      	ldr	r0, [r7, #4]
 800c504:	f000 fb26 	bl	800cb54 <USBD_CtlSendData>
          break;
 800c508:	e004      	b.n	800c514 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 800c50a:	6839      	ldr	r1, [r7, #0]
 800c50c:	6878      	ldr	r0, [r7, #4]
 800c50e:	f000 fab6 	bl	800ca7e <USBD_CtlError>
        break;
 800c512:	bf00      	nop
      }
      break;
 800c514:	e004      	b.n	800c520 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 800c516:	6839      	ldr	r1, [r7, #0]
 800c518:	6878      	ldr	r0, [r7, #4]
 800c51a:	f000 fab0 	bl	800ca7e <USBD_CtlError>
      break;
 800c51e:	bf00      	nop
    }
    break;
 800c520:	e004      	b.n	800c52c <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 800c522:	6839      	ldr	r1, [r7, #0]
 800c524:	6878      	ldr	r0, [r7, #4]
 800c526:	f000 faaa 	bl	800ca7e <USBD_CtlError>
    break;
 800c52a:	bf00      	nop
  }

  return ret;
 800c52c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c52e:	4618      	mov	r0, r3
 800c530:	3710      	adds	r7, #16
 800c532:	46bd      	mov	sp, r7
 800c534:	bd80      	pop	{r7, pc}
	...

0800c538 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b084      	sub	sp, #16
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
 800c540:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800c542:	683b      	ldr	r3, [r7, #0]
 800c544:	885b      	ldrh	r3, [r3, #2]
 800c546:	0a1b      	lsrs	r3, r3, #8
 800c548:	b29b      	uxth	r3, r3
 800c54a:	3b01      	subs	r3, #1
 800c54c:	2b06      	cmp	r3, #6
 800c54e:	f200 80c9 	bhi.w	800c6e4 <USBD_GetDescriptor+0x1ac>
 800c552:	a201      	add	r2, pc, #4	; (adr r2, 800c558 <USBD_GetDescriptor+0x20>)
 800c554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c558:	0800c575 	.word	0x0800c575
 800c55c:	0800c58d 	.word	0x0800c58d
 800c560:	0800c5cd 	.word	0x0800c5cd
 800c564:	0800c6e5 	.word	0x0800c6e5
 800c568:	0800c6e5 	.word	0x0800c6e5
 800c56c:	0800c691 	.word	0x0800c691
 800c570:	0800c6b7 	.word	0x0800c6b7
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	687a      	ldr	r2, [r7, #4]
 800c57e:	7c12      	ldrb	r2, [r2, #16]
 800c580:	f107 010a 	add.w	r1, r7, #10
 800c584:	4610      	mov	r0, r2
 800c586:	4798      	blx	r3
 800c588:	60f8      	str	r0, [r7, #12]
    break;
 800c58a:	e0b0      	b.n	800c6ee <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	7c1b      	ldrb	r3, [r3, #16]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d10d      	bne.n	800c5b0 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c59a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c59c:	f107 020a 	add.w	r2, r7, #10
 800c5a0:	4610      	mov	r0, r2
 800c5a2:	4798      	blx	r3
 800c5a4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	3301      	adds	r3, #1
 800c5aa:	2202      	movs	r2, #2
 800c5ac:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800c5ae:	e09e      	b.n	800c6ee <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c5b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5b8:	f107 020a 	add.w	r2, r7, #10
 800c5bc:	4610      	mov	r0, r2
 800c5be:	4798      	blx	r3
 800c5c0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	3301      	adds	r3, #1
 800c5c6:	2202      	movs	r2, #2
 800c5c8:	701a      	strb	r2, [r3, #0]
    break;
 800c5ca:	e090      	b.n	800c6ee <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800c5cc:	683b      	ldr	r3, [r7, #0]
 800c5ce:	885b      	ldrh	r3, [r3, #2]
 800c5d0:	b2db      	uxtb	r3, r3
 800c5d2:	2b05      	cmp	r3, #5
 800c5d4:	d856      	bhi.n	800c684 <USBD_GetDescriptor+0x14c>
 800c5d6:	a201      	add	r2, pc, #4	; (adr r2, 800c5dc <USBD_GetDescriptor+0xa4>)
 800c5d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5dc:	0800c5f5 	.word	0x0800c5f5
 800c5e0:	0800c60d 	.word	0x0800c60d
 800c5e4:	0800c625 	.word	0x0800c625
 800c5e8:	0800c63d 	.word	0x0800c63d
 800c5ec:	0800c655 	.word	0x0800c655
 800c5f0:	0800c66d 	.word	0x0800c66d
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800c5fa:	685b      	ldr	r3, [r3, #4]
 800c5fc:	687a      	ldr	r2, [r7, #4]
 800c5fe:	7c12      	ldrb	r2, [r2, #16]
 800c600:	f107 010a 	add.w	r1, r7, #10
 800c604:	4610      	mov	r0, r2
 800c606:	4798      	blx	r3
 800c608:	60f8      	str	r0, [r7, #12]
      break;
 800c60a:	e040      	b.n	800c68e <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800c612:	689b      	ldr	r3, [r3, #8]
 800c614:	687a      	ldr	r2, [r7, #4]
 800c616:	7c12      	ldrb	r2, [r2, #16]
 800c618:	f107 010a 	add.w	r1, r7, #10
 800c61c:	4610      	mov	r0, r2
 800c61e:	4798      	blx	r3
 800c620:	60f8      	str	r0, [r7, #12]
      break;
 800c622:	e034      	b.n	800c68e <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800c62a:	68db      	ldr	r3, [r3, #12]
 800c62c:	687a      	ldr	r2, [r7, #4]
 800c62e:	7c12      	ldrb	r2, [r2, #16]
 800c630:	f107 010a 	add.w	r1, r7, #10
 800c634:	4610      	mov	r0, r2
 800c636:	4798      	blx	r3
 800c638:	60f8      	str	r0, [r7, #12]
      break;
 800c63a:	e028      	b.n	800c68e <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800c642:	691b      	ldr	r3, [r3, #16]
 800c644:	687a      	ldr	r2, [r7, #4]
 800c646:	7c12      	ldrb	r2, [r2, #16]
 800c648:	f107 010a 	add.w	r1, r7, #10
 800c64c:	4610      	mov	r0, r2
 800c64e:	4798      	blx	r3
 800c650:	60f8      	str	r0, [r7, #12]
      break;
 800c652:	e01c      	b.n	800c68e <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800c65a:	695b      	ldr	r3, [r3, #20]
 800c65c:	687a      	ldr	r2, [r7, #4]
 800c65e:	7c12      	ldrb	r2, [r2, #16]
 800c660:	f107 010a 	add.w	r1, r7, #10
 800c664:	4610      	mov	r0, r2
 800c666:	4798      	blx	r3
 800c668:	60f8      	str	r0, [r7, #12]
      break;
 800c66a:	e010      	b.n	800c68e <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800c672:	699b      	ldr	r3, [r3, #24]
 800c674:	687a      	ldr	r2, [r7, #4]
 800c676:	7c12      	ldrb	r2, [r2, #16]
 800c678:	f107 010a 	add.w	r1, r7, #10
 800c67c:	4610      	mov	r0, r2
 800c67e:	4798      	blx	r3
 800c680:	60f8      	str	r0, [r7, #12]
      break;
 800c682:	e004      	b.n	800c68e <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800c684:	6839      	ldr	r1, [r7, #0]
 800c686:	6878      	ldr	r0, [r7, #4]
 800c688:	f000 f9f9 	bl	800ca7e <USBD_CtlError>
      return;
 800c68c:	e04b      	b.n	800c726 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800c68e:	e02e      	b.n	800c6ee <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	7c1b      	ldrb	r3, [r3, #16]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d109      	bne.n	800c6ac <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c69e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6a0:	f107 020a 	add.w	r2, r7, #10
 800c6a4:	4610      	mov	r0, r2
 800c6a6:	4798      	blx	r3
 800c6a8:	60f8      	str	r0, [r7, #12]
      break;
 800c6aa:	e020      	b.n	800c6ee <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800c6ac:	6839      	ldr	r1, [r7, #0]
 800c6ae:	6878      	ldr	r0, [r7, #4]
 800c6b0:	f000 f9e5 	bl	800ca7e <USBD_CtlError>
      return;
 800c6b4:	e037      	b.n	800c726 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	7c1b      	ldrb	r3, [r3, #16]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d10d      	bne.n	800c6da <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c6c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6c6:	f107 020a 	add.w	r2, r7, #10
 800c6ca:	4610      	mov	r0, r2
 800c6cc:	4798      	blx	r3
 800c6ce:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	3301      	adds	r3, #1
 800c6d4:	2207      	movs	r2, #7
 800c6d6:	701a      	strb	r2, [r3, #0]
      break;
 800c6d8:	e009      	b.n	800c6ee <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800c6da:	6839      	ldr	r1, [r7, #0]
 800c6dc:	6878      	ldr	r0, [r7, #4]
 800c6de:	f000 f9ce 	bl	800ca7e <USBD_CtlError>
      return;
 800c6e2:	e020      	b.n	800c726 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 800c6e4:	6839      	ldr	r1, [r7, #0]
 800c6e6:	6878      	ldr	r0, [r7, #4]
 800c6e8:	f000 f9c9 	bl	800ca7e <USBD_CtlError>
    return;
 800c6ec:	e01b      	b.n	800c726 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800c6ee:	897b      	ldrh	r3, [r7, #10]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d011      	beq.n	800c718 <USBD_GetDescriptor+0x1e0>
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	88db      	ldrh	r3, [r3, #6]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d00d      	beq.n	800c718 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	88da      	ldrh	r2, [r3, #6]
 800c700:	897b      	ldrh	r3, [r7, #10]
 800c702:	4293      	cmp	r3, r2
 800c704:	bf28      	it	cs
 800c706:	4613      	movcs	r3, r2
 800c708:	b29b      	uxth	r3, r3
 800c70a:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800c70c:	897b      	ldrh	r3, [r7, #10]
 800c70e:	461a      	mov	r2, r3
 800c710:	68f9      	ldr	r1, [r7, #12]
 800c712:	6878      	ldr	r0, [r7, #4]
 800c714:	f000 fa1e 	bl	800cb54 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	88db      	ldrh	r3, [r3, #6]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d102      	bne.n	800c726 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800c720:	6878      	ldr	r0, [r7, #4]
 800c722:	f000 fa75 	bl	800cc10 <USBD_CtlSendStatus>
  }
}
 800c726:	3710      	adds	r7, #16
 800c728:	46bd      	mov	sp, r7
 800c72a:	bd80      	pop	{r7, pc}

0800c72c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b084      	sub	sp, #16
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
 800c734:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	889b      	ldrh	r3, [r3, #4]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d130      	bne.n	800c7a0 <USBD_SetAddress+0x74>
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	88db      	ldrh	r3, [r3, #6]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d12c      	bne.n	800c7a0 <USBD_SetAddress+0x74>
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	885b      	ldrh	r3, [r3, #2]
 800c74a:	2b7f      	cmp	r3, #127	; 0x7f
 800c74c:	d828      	bhi.n	800c7a0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	885b      	ldrh	r3, [r3, #2]
 800c752:	b2db      	uxtb	r3, r3
 800c754:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c758:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c760:	2b03      	cmp	r3, #3
 800c762:	d104      	bne.n	800c76e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800c764:	6839      	ldr	r1, [r7, #0]
 800c766:	6878      	ldr	r0, [r7, #4]
 800c768:	f000 f989 	bl	800ca7e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c76c:	e01c      	b.n	800c7a8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	7bfa      	ldrb	r2, [r7, #15]
 800c772:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c776:	7bfb      	ldrb	r3, [r7, #15]
 800c778:	4619      	mov	r1, r3
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	f000 ff50 	bl	800d620 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	f000 fa45 	bl	800cc10 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c786:	7bfb      	ldrb	r3, [r7, #15]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d004      	beq.n	800c796 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	2202      	movs	r2, #2
 800c790:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c794:	e008      	b.n	800c7a8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	2201      	movs	r2, #1
 800c79a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c79e:	e003      	b.n	800c7a8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c7a0:	6839      	ldr	r1, [r7, #0]
 800c7a2:	6878      	ldr	r0, [r7, #4]
 800c7a4:	f000 f96b 	bl	800ca7e <USBD_CtlError>
  }
}
 800c7a8:	bf00      	nop
 800c7aa:	3710      	adds	r7, #16
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}

0800c7b0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b082      	sub	sp, #8
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
 800c7b8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c7ba:	683b      	ldr	r3, [r7, #0]
 800c7bc:	885b      	ldrh	r3, [r3, #2]
 800c7be:	b2da      	uxtb	r2, r3
 800c7c0:	4b41      	ldr	r3, [pc, #260]	; (800c8c8 <USBD_SetConfig+0x118>)
 800c7c2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c7c4:	4b40      	ldr	r3, [pc, #256]	; (800c8c8 <USBD_SetConfig+0x118>)
 800c7c6:	781b      	ldrb	r3, [r3, #0]
 800c7c8:	2b01      	cmp	r3, #1
 800c7ca:	d904      	bls.n	800c7d6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800c7cc:	6839      	ldr	r1, [r7, #0]
 800c7ce:	6878      	ldr	r0, [r7, #4]
 800c7d0:	f000 f955 	bl	800ca7e <USBD_CtlError>
 800c7d4:	e075      	b.n	800c8c2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c7dc:	2b02      	cmp	r3, #2
 800c7de:	d002      	beq.n	800c7e6 <USBD_SetConfig+0x36>
 800c7e0:	2b03      	cmp	r3, #3
 800c7e2:	d023      	beq.n	800c82c <USBD_SetConfig+0x7c>
 800c7e4:	e062      	b.n	800c8ac <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800c7e6:	4b38      	ldr	r3, [pc, #224]	; (800c8c8 <USBD_SetConfig+0x118>)
 800c7e8:	781b      	ldrb	r3, [r3, #0]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d01a      	beq.n	800c824 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800c7ee:	4b36      	ldr	r3, [pc, #216]	; (800c8c8 <USBD_SetConfig+0x118>)
 800c7f0:	781b      	ldrb	r3, [r3, #0]
 800c7f2:	461a      	mov	r2, r3
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	2203      	movs	r2, #3
 800c7fc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c800:	4b31      	ldr	r3, [pc, #196]	; (800c8c8 <USBD_SetConfig+0x118>)
 800c802:	781b      	ldrb	r3, [r3, #0]
 800c804:	4619      	mov	r1, r3
 800c806:	6878      	ldr	r0, [r7, #4]
 800c808:	f7ff fa2a 	bl	800bc60 <USBD_SetClassConfig>
 800c80c:	4603      	mov	r3, r0
 800c80e:	2b02      	cmp	r3, #2
 800c810:	d104      	bne.n	800c81c <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800c812:	6839      	ldr	r1, [r7, #0]
 800c814:	6878      	ldr	r0, [r7, #4]
 800c816:	f000 f932 	bl	800ca7e <USBD_CtlError>
          return;
 800c81a:	e052      	b.n	800c8c2 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800c81c:	6878      	ldr	r0, [r7, #4]
 800c81e:	f000 f9f7 	bl	800cc10 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800c822:	e04e      	b.n	800c8c2 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800c824:	6878      	ldr	r0, [r7, #4]
 800c826:	f000 f9f3 	bl	800cc10 <USBD_CtlSendStatus>
      break;
 800c82a:	e04a      	b.n	800c8c2 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c82c:	4b26      	ldr	r3, [pc, #152]	; (800c8c8 <USBD_SetConfig+0x118>)
 800c82e:	781b      	ldrb	r3, [r3, #0]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d112      	bne.n	800c85a <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	2202      	movs	r2, #2
 800c838:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800c83c:	4b22      	ldr	r3, [pc, #136]	; (800c8c8 <USBD_SetConfig+0x118>)
 800c83e:	781b      	ldrb	r3, [r3, #0]
 800c840:	461a      	mov	r2, r3
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800c846:	4b20      	ldr	r3, [pc, #128]	; (800c8c8 <USBD_SetConfig+0x118>)
 800c848:	781b      	ldrb	r3, [r3, #0]
 800c84a:	4619      	mov	r1, r3
 800c84c:	6878      	ldr	r0, [r7, #4]
 800c84e:	f7ff fa26 	bl	800bc9e <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f000 f9dc 	bl	800cc10 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800c858:	e033      	b.n	800c8c2 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800c85a:	4b1b      	ldr	r3, [pc, #108]	; (800c8c8 <USBD_SetConfig+0x118>)
 800c85c:	781b      	ldrb	r3, [r3, #0]
 800c85e:	461a      	mov	r2, r3
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	685b      	ldr	r3, [r3, #4]
 800c864:	429a      	cmp	r2, r3
 800c866:	d01d      	beq.n	800c8a4 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	685b      	ldr	r3, [r3, #4]
 800c86c:	b2db      	uxtb	r3, r3
 800c86e:	4619      	mov	r1, r3
 800c870:	6878      	ldr	r0, [r7, #4]
 800c872:	f7ff fa14 	bl	800bc9e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c876:	4b14      	ldr	r3, [pc, #80]	; (800c8c8 <USBD_SetConfig+0x118>)
 800c878:	781b      	ldrb	r3, [r3, #0]
 800c87a:	461a      	mov	r2, r3
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c880:	4b11      	ldr	r3, [pc, #68]	; (800c8c8 <USBD_SetConfig+0x118>)
 800c882:	781b      	ldrb	r3, [r3, #0]
 800c884:	4619      	mov	r1, r3
 800c886:	6878      	ldr	r0, [r7, #4]
 800c888:	f7ff f9ea 	bl	800bc60 <USBD_SetClassConfig>
 800c88c:	4603      	mov	r3, r0
 800c88e:	2b02      	cmp	r3, #2
 800c890:	d104      	bne.n	800c89c <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800c892:	6839      	ldr	r1, [r7, #0]
 800c894:	6878      	ldr	r0, [r7, #4]
 800c896:	f000 f8f2 	bl	800ca7e <USBD_CtlError>
          return;
 800c89a:	e012      	b.n	800c8c2 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800c89c:	6878      	ldr	r0, [r7, #4]
 800c89e:	f000 f9b7 	bl	800cc10 <USBD_CtlSendStatus>
      break;
 800c8a2:	e00e      	b.n	800c8c2 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	f000 f9b3 	bl	800cc10 <USBD_CtlSendStatus>
      break;
 800c8aa:	e00a      	b.n	800c8c2 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800c8ac:	6839      	ldr	r1, [r7, #0]
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	f000 f8e5 	bl	800ca7e <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800c8b4:	4b04      	ldr	r3, [pc, #16]	; (800c8c8 <USBD_SetConfig+0x118>)
 800c8b6:	781b      	ldrb	r3, [r3, #0]
 800c8b8:	4619      	mov	r1, r3
 800c8ba:	6878      	ldr	r0, [r7, #4]
 800c8bc:	f7ff f9ef 	bl	800bc9e <USBD_ClrClassConfig>
      break;
 800c8c0:	bf00      	nop
    }
  }
}
 800c8c2:	3708      	adds	r7, #8
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	bd80      	pop	{r7, pc}
 800c8c8:	20000978 	.word	0x20000978

0800c8cc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b082      	sub	sp, #8
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
 800c8d4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	88db      	ldrh	r3, [r3, #6]
 800c8da:	2b01      	cmp	r3, #1
 800c8dc:	d004      	beq.n	800c8e8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800c8de:	6839      	ldr	r1, [r7, #0]
 800c8e0:	6878      	ldr	r0, [r7, #4]
 800c8e2:	f000 f8cc 	bl	800ca7e <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800c8e6:	e021      	b.n	800c92c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c8ee:	2b01      	cmp	r3, #1
 800c8f0:	db17      	blt.n	800c922 <USBD_GetConfig+0x56>
 800c8f2:	2b02      	cmp	r3, #2
 800c8f4:	dd02      	ble.n	800c8fc <USBD_GetConfig+0x30>
 800c8f6:	2b03      	cmp	r3, #3
 800c8f8:	d00b      	beq.n	800c912 <USBD_GetConfig+0x46>
 800c8fa:	e012      	b.n	800c922 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	2200      	movs	r2, #0
 800c900:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	3308      	adds	r3, #8
 800c906:	2201      	movs	r2, #1
 800c908:	4619      	mov	r1, r3
 800c90a:	6878      	ldr	r0, [r7, #4]
 800c90c:	f000 f922 	bl	800cb54 <USBD_CtlSendData>
      break;
 800c910:	e00c      	b.n	800c92c <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	3304      	adds	r3, #4
 800c916:	2201      	movs	r2, #1
 800c918:	4619      	mov	r1, r3
 800c91a:	6878      	ldr	r0, [r7, #4]
 800c91c:	f000 f91a 	bl	800cb54 <USBD_CtlSendData>
      break;
 800c920:	e004      	b.n	800c92c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 800c922:	6839      	ldr	r1, [r7, #0]
 800c924:	6878      	ldr	r0, [r7, #4]
 800c926:	f000 f8aa 	bl	800ca7e <USBD_CtlError>
      break;
 800c92a:	bf00      	nop
}
 800c92c:	bf00      	nop
 800c92e:	3708      	adds	r7, #8
 800c930:	46bd      	mov	sp, r7
 800c932:	bd80      	pop	{r7, pc}

0800c934 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b082      	sub	sp, #8
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
 800c93c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c944:	3b01      	subs	r3, #1
 800c946:	2b02      	cmp	r3, #2
 800c948:	d81e      	bhi.n	800c988 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800c94a:	683b      	ldr	r3, [r7, #0]
 800c94c:	88db      	ldrh	r3, [r3, #6]
 800c94e:	2b02      	cmp	r3, #2
 800c950:	d004      	beq.n	800c95c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800c952:	6839      	ldr	r1, [r7, #0]
 800c954:	6878      	ldr	r0, [r7, #4]
 800c956:	f000 f892 	bl	800ca7e <USBD_CtlError>
      break;
 800c95a:	e01a      	b.n	800c992 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2201      	movs	r2, #1
 800c960:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d005      	beq.n	800c978 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	68db      	ldr	r3, [r3, #12]
 800c970:	f043 0202 	orr.w	r2, r3, #2
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	330c      	adds	r3, #12
 800c97c:	2202      	movs	r2, #2
 800c97e:	4619      	mov	r1, r3
 800c980:	6878      	ldr	r0, [r7, #4]
 800c982:	f000 f8e7 	bl	800cb54 <USBD_CtlSendData>
    break;
 800c986:	e004      	b.n	800c992 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800c988:	6839      	ldr	r1, [r7, #0]
 800c98a:	6878      	ldr	r0, [r7, #4]
 800c98c:	f000 f877 	bl	800ca7e <USBD_CtlError>
    break;
 800c990:	bf00      	nop
  }
}
 800c992:	bf00      	nop
 800c994:	3708      	adds	r7, #8
 800c996:	46bd      	mov	sp, r7
 800c998:	bd80      	pop	{r7, pc}

0800c99a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800c99a:	b580      	push	{r7, lr}
 800c99c:	b082      	sub	sp, #8
 800c99e:	af00      	add	r7, sp, #0
 800c9a0:	6078      	str	r0, [r7, #4]
 800c9a2:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c9a4:	683b      	ldr	r3, [r7, #0]
 800c9a6:	885b      	ldrh	r3, [r3, #2]
 800c9a8:	2b01      	cmp	r3, #1
 800c9aa:	d106      	bne.n	800c9ba <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	2201      	movs	r2, #1
 800c9b0:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800c9b4:	6878      	ldr	r0, [r7, #4]
 800c9b6:	f000 f92b 	bl	800cc10 <USBD_CtlSendStatus>
  }

}
 800c9ba:	bf00      	nop
 800c9bc:	3708      	adds	r7, #8
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}

0800c9c2 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800c9c2:	b580      	push	{r7, lr}
 800c9c4:	b082      	sub	sp, #8
 800c9c6:	af00      	add	r7, sp, #0
 800c9c8:	6078      	str	r0, [r7, #4]
 800c9ca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c9d2:	3b01      	subs	r3, #1
 800c9d4:	2b02      	cmp	r3, #2
 800c9d6:	d80b      	bhi.n	800c9f0 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c9d8:	683b      	ldr	r3, [r7, #0]
 800c9da:	885b      	ldrh	r3, [r3, #2]
 800c9dc:	2b01      	cmp	r3, #1
 800c9de:	d10c      	bne.n	800c9fa <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800c9e8:	6878      	ldr	r0, [r7, #4]
 800c9ea:	f000 f911 	bl	800cc10 <USBD_CtlSendStatus>
    }
    break;
 800c9ee:	e004      	b.n	800c9fa <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800c9f0:	6839      	ldr	r1, [r7, #0]
 800c9f2:	6878      	ldr	r0, [r7, #4]
 800c9f4:	f000 f843 	bl	800ca7e <USBD_CtlError>
    break;
 800c9f8:	e000      	b.n	800c9fc <USBD_ClrFeature+0x3a>
    break;
 800c9fa:	bf00      	nop
  }
}
 800c9fc:	bf00      	nop
 800c9fe:	3708      	adds	r7, #8
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bd80      	pop	{r7, pc}

0800ca04 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ca04:	b480      	push	{r7}
 800ca06:	b083      	sub	sp, #12
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
 800ca0c:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	781a      	ldrb	r2, [r3, #0]
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	785a      	ldrb	r2, [r3, #1]
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	3302      	adds	r3, #2
 800ca22:	781b      	ldrb	r3, [r3, #0]
 800ca24:	b29a      	uxth	r2, r3
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	3303      	adds	r3, #3
 800ca2a:	781b      	ldrb	r3, [r3, #0]
 800ca2c:	b29b      	uxth	r3, r3
 800ca2e:	021b      	lsls	r3, r3, #8
 800ca30:	b29b      	uxth	r3, r3
 800ca32:	4413      	add	r3, r2
 800ca34:	b29a      	uxth	r2, r3
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	3304      	adds	r3, #4
 800ca3e:	781b      	ldrb	r3, [r3, #0]
 800ca40:	b29a      	uxth	r2, r3
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	3305      	adds	r3, #5
 800ca46:	781b      	ldrb	r3, [r3, #0]
 800ca48:	b29b      	uxth	r3, r3
 800ca4a:	021b      	lsls	r3, r3, #8
 800ca4c:	b29b      	uxth	r3, r3
 800ca4e:	4413      	add	r3, r2
 800ca50:	b29a      	uxth	r2, r3
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	3306      	adds	r3, #6
 800ca5a:	781b      	ldrb	r3, [r3, #0]
 800ca5c:	b29a      	uxth	r2, r3
 800ca5e:	683b      	ldr	r3, [r7, #0]
 800ca60:	3307      	adds	r3, #7
 800ca62:	781b      	ldrb	r3, [r3, #0]
 800ca64:	b29b      	uxth	r3, r3
 800ca66:	021b      	lsls	r3, r3, #8
 800ca68:	b29b      	uxth	r3, r3
 800ca6a:	4413      	add	r3, r2
 800ca6c:	b29a      	uxth	r2, r3
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	80da      	strh	r2, [r3, #6]

}
 800ca72:	bf00      	nop
 800ca74:	370c      	adds	r7, #12
 800ca76:	46bd      	mov	sp, r7
 800ca78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7c:	4770      	bx	lr

0800ca7e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800ca7e:	b580      	push	{r7, lr}
 800ca80:	b082      	sub	sp, #8
 800ca82:	af00      	add	r7, sp, #0
 800ca84:	6078      	str	r0, [r7, #4]
 800ca86:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800ca88:	2180      	movs	r1, #128	; 0x80
 800ca8a:	6878      	ldr	r0, [r7, #4]
 800ca8c:	f000 fd5e 	bl	800d54c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800ca90:	2100      	movs	r1, #0
 800ca92:	6878      	ldr	r0, [r7, #4]
 800ca94:	f000 fd5a 	bl	800d54c <USBD_LL_StallEP>
}
 800ca98:	bf00      	nop
 800ca9a:	3708      	adds	r7, #8
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	bd80      	pop	{r7, pc}

0800caa0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b086      	sub	sp, #24
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	60f8      	str	r0, [r7, #12]
 800caa8:	60b9      	str	r1, [r7, #8]
 800caaa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800caac:	2300      	movs	r3, #0
 800caae:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d032      	beq.n	800cb1c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800cab6:	68f8      	ldr	r0, [r7, #12]
 800cab8:	f000 f834 	bl	800cb24 <USBD_GetLen>
 800cabc:	4603      	mov	r3, r0
 800cabe:	3301      	adds	r3, #1
 800cac0:	b29b      	uxth	r3, r3
 800cac2:	005b      	lsls	r3, r3, #1
 800cac4:	b29a      	uxth	r2, r3
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800caca:	7dfb      	ldrb	r3, [r7, #23]
 800cacc:	1c5a      	adds	r2, r3, #1
 800cace:	75fa      	strb	r2, [r7, #23]
 800cad0:	461a      	mov	r2, r3
 800cad2:	68bb      	ldr	r3, [r7, #8]
 800cad4:	4413      	add	r3, r2
 800cad6:	687a      	ldr	r2, [r7, #4]
 800cad8:	7812      	ldrb	r2, [r2, #0]
 800cada:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800cadc:	7dfb      	ldrb	r3, [r7, #23]
 800cade:	1c5a      	adds	r2, r3, #1
 800cae0:	75fa      	strb	r2, [r7, #23]
 800cae2:	461a      	mov	r2, r3
 800cae4:	68bb      	ldr	r3, [r7, #8]
 800cae6:	4413      	add	r3, r2
 800cae8:	2203      	movs	r2, #3
 800caea:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800caec:	e012      	b.n	800cb14 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	1c5a      	adds	r2, r3, #1
 800caf2:	60fa      	str	r2, [r7, #12]
 800caf4:	7dfa      	ldrb	r2, [r7, #23]
 800caf6:	1c51      	adds	r1, r2, #1
 800caf8:	75f9      	strb	r1, [r7, #23]
 800cafa:	4611      	mov	r1, r2
 800cafc:	68ba      	ldr	r2, [r7, #8]
 800cafe:	440a      	add	r2, r1
 800cb00:	781b      	ldrb	r3, [r3, #0]
 800cb02:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800cb04:	7dfb      	ldrb	r3, [r7, #23]
 800cb06:	1c5a      	adds	r2, r3, #1
 800cb08:	75fa      	strb	r2, [r7, #23]
 800cb0a:	461a      	mov	r2, r3
 800cb0c:	68bb      	ldr	r3, [r7, #8]
 800cb0e:	4413      	add	r3, r2
 800cb10:	2200      	movs	r2, #0
 800cb12:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	781b      	ldrb	r3, [r3, #0]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d1e8      	bne.n	800caee <USBD_GetString+0x4e>
    }
  }
}
 800cb1c:	bf00      	nop
 800cb1e:	3718      	adds	r7, #24
 800cb20:	46bd      	mov	sp, r7
 800cb22:	bd80      	pop	{r7, pc}

0800cb24 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cb24:	b480      	push	{r7}
 800cb26:	b085      	sub	sp, #20
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800cb30:	e005      	b.n	800cb3e <USBD_GetLen+0x1a>
    {
        len++;
 800cb32:	7bfb      	ldrb	r3, [r7, #15]
 800cb34:	3301      	adds	r3, #1
 800cb36:	73fb      	strb	r3, [r7, #15]
        buf++;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	3301      	adds	r3, #1
 800cb3c:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	781b      	ldrb	r3, [r3, #0]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d1f5      	bne.n	800cb32 <USBD_GetLen+0xe>
    }

    return len;
 800cb46:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb48:	4618      	mov	r0, r3
 800cb4a:	3714      	adds	r7, #20
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb52:	4770      	bx	lr

0800cb54 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b084      	sub	sp, #16
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	60f8      	str	r0, [r7, #12]
 800cb5c:	60b9      	str	r1, [r7, #8]
 800cb5e:	4613      	mov	r3, r2
 800cb60:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	2202      	movs	r2, #2
 800cb66:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800cb6a:	88fa      	ldrh	r2, [r7, #6]
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800cb70:	88fa      	ldrh	r2, [r7, #6]
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800cb76:	88fb      	ldrh	r3, [r7, #6]
 800cb78:	68ba      	ldr	r2, [r7, #8]
 800cb7a:	2100      	movs	r1, #0
 800cb7c:	68f8      	ldr	r0, [r7, #12]
 800cb7e:	f000 fd6e 	bl	800d65e <USBD_LL_Transmit>

  return USBD_OK;
 800cb82:	2300      	movs	r3, #0
}
 800cb84:	4618      	mov	r0, r3
 800cb86:	3710      	adds	r7, #16
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	bd80      	pop	{r7, pc}

0800cb8c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b084      	sub	sp, #16
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	60f8      	str	r0, [r7, #12]
 800cb94:	60b9      	str	r1, [r7, #8]
 800cb96:	4613      	mov	r3, r2
 800cb98:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800cb9a:	88fb      	ldrh	r3, [r7, #6]
 800cb9c:	68ba      	ldr	r2, [r7, #8]
 800cb9e:	2100      	movs	r1, #0
 800cba0:	68f8      	ldr	r0, [r7, #12]
 800cba2:	f000 fd5c 	bl	800d65e <USBD_LL_Transmit>

  return USBD_OK;
 800cba6:	2300      	movs	r3, #0
}
 800cba8:	4618      	mov	r0, r3
 800cbaa:	3710      	adds	r7, #16
 800cbac:	46bd      	mov	sp, r7
 800cbae:	bd80      	pop	{r7, pc}

0800cbb0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b084      	sub	sp, #16
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	60f8      	str	r0, [r7, #12]
 800cbb8:	60b9      	str	r1, [r7, #8]
 800cbba:	4613      	mov	r3, r2
 800cbbc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	2203      	movs	r2, #3
 800cbc2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800cbc6:	88fa      	ldrh	r2, [r7, #6]
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800cbce:	88fa      	ldrh	r2, [r7, #6]
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800cbd6:	88fb      	ldrh	r3, [r7, #6]
 800cbd8:	68ba      	ldr	r2, [r7, #8]
 800cbda:	2100      	movs	r1, #0
 800cbdc:	68f8      	ldr	r0, [r7, #12]
 800cbde:	f000 fd61 	bl	800d6a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cbe2:	2300      	movs	r3, #0
}
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	3710      	adds	r7, #16
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	bd80      	pop	{r7, pc}

0800cbec <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b084      	sub	sp, #16
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	60f8      	str	r0, [r7, #12]
 800cbf4:	60b9      	str	r1, [r7, #8]
 800cbf6:	4613      	mov	r3, r2
 800cbf8:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cbfa:	88fb      	ldrh	r3, [r7, #6]
 800cbfc:	68ba      	ldr	r2, [r7, #8]
 800cbfe:	2100      	movs	r1, #0
 800cc00:	68f8      	ldr	r0, [r7, #12]
 800cc02:	f000 fd4f 	bl	800d6a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cc06:	2300      	movs	r3, #0
}
 800cc08:	4618      	mov	r0, r3
 800cc0a:	3710      	adds	r7, #16
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	bd80      	pop	{r7, pc}

0800cc10 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b082      	sub	sp, #8
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	2204      	movs	r2, #4
 800cc1c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cc20:	2300      	movs	r3, #0
 800cc22:	2200      	movs	r2, #0
 800cc24:	2100      	movs	r1, #0
 800cc26:	6878      	ldr	r0, [r7, #4]
 800cc28:	f000 fd19 	bl	800d65e <USBD_LL_Transmit>

  return USBD_OK;
 800cc2c:	2300      	movs	r3, #0
}
 800cc2e:	4618      	mov	r0, r3
 800cc30:	3708      	adds	r7, #8
 800cc32:	46bd      	mov	sp, r7
 800cc34:	bd80      	pop	{r7, pc}

0800cc36 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800cc36:	b580      	push	{r7, lr}
 800cc38:	b082      	sub	sp, #8
 800cc3a:	af00      	add	r7, sp, #0
 800cc3c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	2205      	movs	r2, #5
 800cc42:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800cc46:	2300      	movs	r3, #0
 800cc48:	2200      	movs	r2, #0
 800cc4a:	2100      	movs	r1, #0
 800cc4c:	6878      	ldr	r0, [r7, #4]
 800cc4e:	f000 fd29 	bl	800d6a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cc52:	2300      	movs	r3, #0
}
 800cc54:	4618      	mov	r0, r3
 800cc56:	3708      	adds	r7, #8
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	bd80      	pop	{r7, pc}

0800cc5c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800cc5c:	b480      	push	{r7}
 800cc5e:	b087      	sub	sp, #28
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	60f8      	str	r0, [r7, #12]
 800cc64:	60b9      	str	r1, [r7, #8]
 800cc66:	4613      	mov	r3, r2
 800cc68:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800cc6a:	2301      	movs	r3, #1
 800cc6c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cc6e:	2300      	movs	r3, #0
 800cc70:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800cc72:	4b1f      	ldr	r3, [pc, #124]	; (800ccf0 <FATFS_LinkDriverEx+0x94>)
 800cc74:	7a5b      	ldrb	r3, [r3, #9]
 800cc76:	b2db      	uxtb	r3, r3
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d131      	bne.n	800cce0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cc7c:	4b1c      	ldr	r3, [pc, #112]	; (800ccf0 <FATFS_LinkDriverEx+0x94>)
 800cc7e:	7a5b      	ldrb	r3, [r3, #9]
 800cc80:	b2db      	uxtb	r3, r3
 800cc82:	461a      	mov	r2, r3
 800cc84:	4b1a      	ldr	r3, [pc, #104]	; (800ccf0 <FATFS_LinkDriverEx+0x94>)
 800cc86:	2100      	movs	r1, #0
 800cc88:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800cc8a:	4b19      	ldr	r3, [pc, #100]	; (800ccf0 <FATFS_LinkDriverEx+0x94>)
 800cc8c:	7a5b      	ldrb	r3, [r3, #9]
 800cc8e:	b2db      	uxtb	r3, r3
 800cc90:	4a17      	ldr	r2, [pc, #92]	; (800ccf0 <FATFS_LinkDriverEx+0x94>)
 800cc92:	009b      	lsls	r3, r3, #2
 800cc94:	4413      	add	r3, r2
 800cc96:	68fa      	ldr	r2, [r7, #12]
 800cc98:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800cc9a:	4b15      	ldr	r3, [pc, #84]	; (800ccf0 <FATFS_LinkDriverEx+0x94>)
 800cc9c:	7a5b      	ldrb	r3, [r3, #9]
 800cc9e:	b2db      	uxtb	r3, r3
 800cca0:	461a      	mov	r2, r3
 800cca2:	4b13      	ldr	r3, [pc, #76]	; (800ccf0 <FATFS_LinkDriverEx+0x94>)
 800cca4:	4413      	add	r3, r2
 800cca6:	79fa      	ldrb	r2, [r7, #7]
 800cca8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ccaa:	4b11      	ldr	r3, [pc, #68]	; (800ccf0 <FATFS_LinkDriverEx+0x94>)
 800ccac:	7a5b      	ldrb	r3, [r3, #9]
 800ccae:	b2db      	uxtb	r3, r3
 800ccb0:	1c5a      	adds	r2, r3, #1
 800ccb2:	b2d1      	uxtb	r1, r2
 800ccb4:	4a0e      	ldr	r2, [pc, #56]	; (800ccf0 <FATFS_LinkDriverEx+0x94>)
 800ccb6:	7251      	strb	r1, [r2, #9]
 800ccb8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ccba:	7dbb      	ldrb	r3, [r7, #22]
 800ccbc:	3330      	adds	r3, #48	; 0x30
 800ccbe:	b2da      	uxtb	r2, r3
 800ccc0:	68bb      	ldr	r3, [r7, #8]
 800ccc2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ccc4:	68bb      	ldr	r3, [r7, #8]
 800ccc6:	3301      	adds	r3, #1
 800ccc8:	223a      	movs	r2, #58	; 0x3a
 800ccca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cccc:	68bb      	ldr	r3, [r7, #8]
 800ccce:	3302      	adds	r3, #2
 800ccd0:	222f      	movs	r2, #47	; 0x2f
 800ccd2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ccd4:	68bb      	ldr	r3, [r7, #8]
 800ccd6:	3303      	adds	r3, #3
 800ccd8:	2200      	movs	r2, #0
 800ccda:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ccdc:	2300      	movs	r3, #0
 800ccde:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800cce0:	7dfb      	ldrb	r3, [r7, #23]
}
 800cce2:	4618      	mov	r0, r3
 800cce4:	371c      	adds	r7, #28
 800cce6:	46bd      	mov	sp, r7
 800cce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccec:	4770      	bx	lr
 800ccee:	bf00      	nop
 800ccf0:	2000097c 	.word	0x2000097c

0800ccf4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b082      	sub	sp, #8
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
 800ccfc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ccfe:	2200      	movs	r2, #0
 800cd00:	6839      	ldr	r1, [r7, #0]
 800cd02:	6878      	ldr	r0, [r7, #4]
 800cd04:	f7ff ffaa 	bl	800cc5c <FATFS_LinkDriverEx>
 800cd08:	4603      	mov	r3, r0
}
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	3708      	adds	r7, #8
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	bd80      	pop	{r7, pc}
	...

0800cd14 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cd18:	2200      	movs	r2, #0
 800cd1a:	4912      	ldr	r1, [pc, #72]	; (800cd64 <MX_USB_DEVICE_Init+0x50>)
 800cd1c:	4812      	ldr	r0, [pc, #72]	; (800cd68 <MX_USB_DEVICE_Init+0x54>)
 800cd1e:	f7fe ff43 	bl	800bba8 <USBD_Init>
 800cd22:	4603      	mov	r3, r0
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d001      	beq.n	800cd2c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cd28:	f7f5 fb0c 	bl	8002344 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cd2c:	490f      	ldr	r1, [pc, #60]	; (800cd6c <MX_USB_DEVICE_Init+0x58>)
 800cd2e:	480e      	ldr	r0, [pc, #56]	; (800cd68 <MX_USB_DEVICE_Init+0x54>)
 800cd30:	f7fe ff65 	bl	800bbfe <USBD_RegisterClass>
 800cd34:	4603      	mov	r3, r0
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d001      	beq.n	800cd3e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cd3a:	f7f5 fb03 	bl	8002344 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cd3e:	490c      	ldr	r1, [pc, #48]	; (800cd70 <MX_USB_DEVICE_Init+0x5c>)
 800cd40:	4809      	ldr	r0, [pc, #36]	; (800cd68 <MX_USB_DEVICE_Init+0x54>)
 800cd42:	f7fe fe93 	bl	800ba6c <USBD_CDC_RegisterInterface>
 800cd46:	4603      	mov	r3, r0
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d001      	beq.n	800cd50 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cd4c:	f7f5 fafa 	bl	8002344 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cd50:	4805      	ldr	r0, [pc, #20]	; (800cd68 <MX_USB_DEVICE_Init+0x54>)
 800cd52:	f7fe ff6e 	bl	800bc32 <USBD_Start>
 800cd56:	4603      	mov	r3, r0
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d001      	beq.n	800cd60 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cd5c:	f7f5 faf2 	bl	8002344 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cd60:	bf00      	nop
 800cd62:	bd80      	pop	{r7, pc}
 800cd64:	2000012c 	.word	0x2000012c
 800cd68:	200013bc 	.word	0x200013bc
 800cd6c:	20000018 	.word	0x20000018
 800cd70:	2000011c 	.word	0x2000011c

0800cd74 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cd74:	b580      	push	{r7, lr}
 800cd76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cd78:	2200      	movs	r2, #0
 800cd7a:	4905      	ldr	r1, [pc, #20]	; (800cd90 <CDC_Init_FS+0x1c>)
 800cd7c:	4805      	ldr	r0, [pc, #20]	; (800cd94 <CDC_Init_FS+0x20>)
 800cd7e:	f7fe fe8c 	bl	800ba9a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cd82:	4905      	ldr	r1, [pc, #20]	; (800cd98 <CDC_Init_FS+0x24>)
 800cd84:	4803      	ldr	r0, [pc, #12]	; (800cd94 <CDC_Init_FS+0x20>)
 800cd86:	f7fe fea2 	bl	800bace <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cd8a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	bd80      	pop	{r7, pc}
 800cd90:	20001e58 	.word	0x20001e58
 800cd94:	200013bc 	.word	0x200013bc
 800cd98:	20001658 	.word	0x20001658

0800cd9c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cd9c:	b480      	push	{r7}
 800cd9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cda0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cda2:	4618      	mov	r0, r3
 800cda4:	46bd      	mov	sp, r7
 800cda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdaa:	4770      	bx	lr

0800cdac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cdac:	b480      	push	{r7}
 800cdae:	b085      	sub	sp, #20
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	6039      	str	r1, [r7, #0]
 800cdb6:	71fb      	strb	r3, [r7, #7]
 800cdb8:	4613      	mov	r3, r2
 800cdba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint8_t tempbuf[7] = {0,0,0,0,0,0,0};
 800cdbc:	f107 0308 	add.w	r3, r7, #8
 800cdc0:	2200      	movs	r2, #0
 800cdc2:	601a      	str	r2, [r3, #0]
 800cdc4:	f8c3 2003 	str.w	r2, [r3, #3]
  switch(cmd)
 800cdc8:	79fb      	ldrb	r3, [r7, #7]
 800cdca:	2b23      	cmp	r3, #35	; 0x23
 800cdcc:	d87c      	bhi.n	800cec8 <CDC_Control_FS+0x11c>
 800cdce:	a201      	add	r2, pc, #4	; (adr r2, 800cdd4 <CDC_Control_FS+0x28>)
 800cdd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdd4:	0800cec9 	.word	0x0800cec9
 800cdd8:	0800cec9 	.word	0x0800cec9
 800cddc:	0800cec9 	.word	0x0800cec9
 800cde0:	0800cec9 	.word	0x0800cec9
 800cde4:	0800cec9 	.word	0x0800cec9
 800cde8:	0800cec9 	.word	0x0800cec9
 800cdec:	0800cec9 	.word	0x0800cec9
 800cdf0:	0800cec9 	.word	0x0800cec9
 800cdf4:	0800cec9 	.word	0x0800cec9
 800cdf8:	0800cec9 	.word	0x0800cec9
 800cdfc:	0800cec9 	.word	0x0800cec9
 800ce00:	0800cec9 	.word	0x0800cec9
 800ce04:	0800cec9 	.word	0x0800cec9
 800ce08:	0800cec9 	.word	0x0800cec9
 800ce0c:	0800cec9 	.word	0x0800cec9
 800ce10:	0800cec9 	.word	0x0800cec9
 800ce14:	0800cec9 	.word	0x0800cec9
 800ce18:	0800cec9 	.word	0x0800cec9
 800ce1c:	0800cec9 	.word	0x0800cec9
 800ce20:	0800cec9 	.word	0x0800cec9
 800ce24:	0800cec9 	.word	0x0800cec9
 800ce28:	0800cec9 	.word	0x0800cec9
 800ce2c:	0800cec9 	.word	0x0800cec9
 800ce30:	0800cec9 	.word	0x0800cec9
 800ce34:	0800cec9 	.word	0x0800cec9
 800ce38:	0800cec9 	.word	0x0800cec9
 800ce3c:	0800cec9 	.word	0x0800cec9
 800ce40:	0800cec9 	.word	0x0800cec9
 800ce44:	0800cec9 	.word	0x0800cec9
 800ce48:	0800cec9 	.word	0x0800cec9
 800ce4c:	0800cec9 	.word	0x0800cec9
 800ce50:	0800cec9 	.word	0x0800cec9
 800ce54:	0800ce65 	.word	0x0800ce65
 800ce58:	0800ce91 	.word	0x0800ce91
 800ce5c:	0800cec9 	.word	0x0800cec9
 800ce60:	0800cec9 	.word	0x0800cec9
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      	tempbuf[0] = pbuf[0];
 800ce64:	683b      	ldr	r3, [r7, #0]
 800ce66:	781b      	ldrb	r3, [r3, #0]
 800ce68:	723b      	strb	r3, [r7, #8]
      	tempbuf[1] = pbuf[1];
 800ce6a:	683b      	ldr	r3, [r7, #0]
 800ce6c:	785b      	ldrb	r3, [r3, #1]
 800ce6e:	727b      	strb	r3, [r7, #9]
      	tempbuf[2] = pbuf[2];
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	789b      	ldrb	r3, [r3, #2]
 800ce74:	72bb      	strb	r3, [r7, #10]
      	tempbuf[3] = pbuf[3];
 800ce76:	683b      	ldr	r3, [r7, #0]
 800ce78:	78db      	ldrb	r3, [r3, #3]
 800ce7a:	72fb      	strb	r3, [r7, #11]
      	tempbuf[4] = pbuf[4];
 800ce7c:	683b      	ldr	r3, [r7, #0]
 800ce7e:	791b      	ldrb	r3, [r3, #4]
 800ce80:	733b      	strb	r3, [r7, #12]
      	tempbuf[5] = pbuf[5];
 800ce82:	683b      	ldr	r3, [r7, #0]
 800ce84:	795b      	ldrb	r3, [r3, #5]
 800ce86:	737b      	strb	r3, [r7, #13]
      	tempbuf[6] = pbuf[6];
 800ce88:	683b      	ldr	r3, [r7, #0]
 800ce8a:	799b      	ldrb	r3, [r3, #6]
 800ce8c:	73bb      	strb	r3, [r7, #14]
      	break;
 800ce8e:	e01c      	b.n	800ceca <CDC_Control_FS+0x11e>

    case CDC_GET_LINE_CODING:
      	pbuf[0] = tempbuf[0];
 800ce90:	7a3a      	ldrb	r2, [r7, #8]
 800ce92:	683b      	ldr	r3, [r7, #0]
 800ce94:	701a      	strb	r2, [r3, #0]
      	pbuf[1] = tempbuf[1];
 800ce96:	683b      	ldr	r3, [r7, #0]
 800ce98:	3301      	adds	r3, #1
 800ce9a:	7a7a      	ldrb	r2, [r7, #9]
 800ce9c:	701a      	strb	r2, [r3, #0]
      	pbuf[2] = tempbuf[2];
 800ce9e:	683b      	ldr	r3, [r7, #0]
 800cea0:	3302      	adds	r3, #2
 800cea2:	7aba      	ldrb	r2, [r7, #10]
 800cea4:	701a      	strb	r2, [r3, #0]
      	pbuf[3] = tempbuf[3];
 800cea6:	683b      	ldr	r3, [r7, #0]
 800cea8:	3303      	adds	r3, #3
 800ceaa:	7afa      	ldrb	r2, [r7, #11]
 800ceac:	701a      	strb	r2, [r3, #0]
      	pbuf[4] = tempbuf[4];
 800ceae:	683b      	ldr	r3, [r7, #0]
 800ceb0:	3304      	adds	r3, #4
 800ceb2:	7b3a      	ldrb	r2, [r7, #12]
 800ceb4:	701a      	strb	r2, [r3, #0]
      	pbuf[5] = tempbuf[5];
 800ceb6:	683b      	ldr	r3, [r7, #0]
 800ceb8:	3305      	adds	r3, #5
 800ceba:	7b7a      	ldrb	r2, [r7, #13]
 800cebc:	701a      	strb	r2, [r3, #0]
      	pbuf[6] = tempbuf[6];
 800cebe:	683b      	ldr	r3, [r7, #0]
 800cec0:	3306      	adds	r3, #6
 800cec2:	7bba      	ldrb	r2, [r7, #14]
 800cec4:	701a      	strb	r2, [r3, #0]
      	break;
 800cec6:	e000      	b.n	800ceca <CDC_Control_FS+0x11e>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cec8:	bf00      	nop
  }

  return (USBD_OK);
 800ceca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cecc:	4618      	mov	r0, r3
 800cece:	3714      	adds	r7, #20
 800ced0:	46bd      	mov	sp, r7
 800ced2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced6:	4770      	bx	lr

0800ced8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ced8:	b580      	push	{r7, lr}
 800ceda:	b082      	sub	sp, #8
 800cedc:	af00      	add	r7, sp, #0
 800cede:	6078      	str	r0, [r7, #4]
 800cee0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cee2:	6879      	ldr	r1, [r7, #4]
 800cee4:	4805      	ldr	r0, [pc, #20]	; (800cefc <CDC_Receive_FS+0x24>)
 800cee6:	f7fe fdf2 	bl	800bace <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ceea:	4804      	ldr	r0, [pc, #16]	; (800cefc <CDC_Receive_FS+0x24>)
 800ceec:	f7fe fe32 	bl	800bb54 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800cef0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cef2:	4618      	mov	r0, r3
 800cef4:	3708      	adds	r7, #8
 800cef6:	46bd      	mov	sp, r7
 800cef8:	bd80      	pop	{r7, pc}
 800cefa:	bf00      	nop
 800cefc:	200013bc 	.word	0x200013bc

0800cf00 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b084      	sub	sp, #16
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
 800cf08:	460b      	mov	r3, r1
 800cf0a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cf10:	4b0d      	ldr	r3, [pc, #52]	; (800cf48 <CDC_Transmit_FS+0x48>)
 800cf12:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cf16:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800cf18:	68bb      	ldr	r3, [r7, #8]
 800cf1a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d001      	beq.n	800cf26 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800cf22:	2301      	movs	r3, #1
 800cf24:	e00b      	b.n	800cf3e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800cf26:	887b      	ldrh	r3, [r7, #2]
 800cf28:	461a      	mov	r2, r3
 800cf2a:	6879      	ldr	r1, [r7, #4]
 800cf2c:	4806      	ldr	r0, [pc, #24]	; (800cf48 <CDC_Transmit_FS+0x48>)
 800cf2e:	f7fe fdb4 	bl	800ba9a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cf32:	4805      	ldr	r0, [pc, #20]	; (800cf48 <CDC_Transmit_FS+0x48>)
 800cf34:	f7fe fddf 	bl	800baf6 <USBD_CDC_TransmitPacket>
 800cf38:	4603      	mov	r3, r0
 800cf3a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800cf3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf3e:	4618      	mov	r0, r3
 800cf40:	3710      	adds	r7, #16
 800cf42:	46bd      	mov	sp, r7
 800cf44:	bd80      	pop	{r7, pc}
 800cf46:	bf00      	nop
 800cf48:	200013bc 	.word	0x200013bc

0800cf4c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf4c:	b480      	push	{r7}
 800cf4e:	b083      	sub	sp, #12
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	4603      	mov	r3, r0
 800cf54:	6039      	str	r1, [r7, #0]
 800cf56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	2212      	movs	r2, #18
 800cf5c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cf5e:	4b03      	ldr	r3, [pc, #12]	; (800cf6c <USBD_FS_DeviceDescriptor+0x20>)
}
 800cf60:	4618      	mov	r0, r3
 800cf62:	370c      	adds	r7, #12
 800cf64:	46bd      	mov	sp, r7
 800cf66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6a:	4770      	bx	lr
 800cf6c:	20000148 	.word	0x20000148

0800cf70 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf70:	b480      	push	{r7}
 800cf72:	b083      	sub	sp, #12
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	4603      	mov	r3, r0
 800cf78:	6039      	str	r1, [r7, #0]
 800cf7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	2204      	movs	r2, #4
 800cf80:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cf82:	4b03      	ldr	r3, [pc, #12]	; (800cf90 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cf84:	4618      	mov	r0, r3
 800cf86:	370c      	adds	r7, #12
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8e:	4770      	bx	lr
 800cf90:	2000015c 	.word	0x2000015c

0800cf94 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b082      	sub	sp, #8
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	4603      	mov	r3, r0
 800cf9c:	6039      	str	r1, [r7, #0]
 800cf9e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cfa0:	79fb      	ldrb	r3, [r7, #7]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d105      	bne.n	800cfb2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cfa6:	683a      	ldr	r2, [r7, #0]
 800cfa8:	4907      	ldr	r1, [pc, #28]	; (800cfc8 <USBD_FS_ProductStrDescriptor+0x34>)
 800cfaa:	4808      	ldr	r0, [pc, #32]	; (800cfcc <USBD_FS_ProductStrDescriptor+0x38>)
 800cfac:	f7ff fd78 	bl	800caa0 <USBD_GetString>
 800cfb0:	e004      	b.n	800cfbc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cfb2:	683a      	ldr	r2, [r7, #0]
 800cfb4:	4904      	ldr	r1, [pc, #16]	; (800cfc8 <USBD_FS_ProductStrDescriptor+0x34>)
 800cfb6:	4805      	ldr	r0, [pc, #20]	; (800cfcc <USBD_FS_ProductStrDescriptor+0x38>)
 800cfb8:	f7ff fd72 	bl	800caa0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cfbc:	4b02      	ldr	r3, [pc, #8]	; (800cfc8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	3708      	adds	r7, #8
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd80      	pop	{r7, pc}
 800cfc6:	bf00      	nop
 800cfc8:	20002658 	.word	0x20002658
 800cfcc:	0801188c 	.word	0x0801188c

0800cfd0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b082      	sub	sp, #8
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	4603      	mov	r3, r0
 800cfd8:	6039      	str	r1, [r7, #0]
 800cfda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cfdc:	683a      	ldr	r2, [r7, #0]
 800cfde:	4904      	ldr	r1, [pc, #16]	; (800cff0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cfe0:	4804      	ldr	r0, [pc, #16]	; (800cff4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cfe2:	f7ff fd5d 	bl	800caa0 <USBD_GetString>
  return USBD_StrDesc;
 800cfe6:	4b02      	ldr	r3, [pc, #8]	; (800cff0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cfe8:	4618      	mov	r0, r3
 800cfea:	3708      	adds	r7, #8
 800cfec:	46bd      	mov	sp, r7
 800cfee:	bd80      	pop	{r7, pc}
 800cff0:	20002658 	.word	0x20002658
 800cff4:	08011898 	.word	0x08011898

0800cff8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b082      	sub	sp, #8
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	4603      	mov	r3, r0
 800d000:	6039      	str	r1, [r7, #0]
 800d002:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d004:	683b      	ldr	r3, [r7, #0]
 800d006:	221a      	movs	r2, #26
 800d008:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d00a:	f000 f843 	bl	800d094 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d00e:	4b02      	ldr	r3, [pc, #8]	; (800d018 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d010:	4618      	mov	r0, r3
 800d012:	3708      	adds	r7, #8
 800d014:	46bd      	mov	sp, r7
 800d016:	bd80      	pop	{r7, pc}
 800d018:	20000160 	.word	0x20000160

0800d01c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b082      	sub	sp, #8
 800d020:	af00      	add	r7, sp, #0
 800d022:	4603      	mov	r3, r0
 800d024:	6039      	str	r1, [r7, #0]
 800d026:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d028:	79fb      	ldrb	r3, [r7, #7]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d105      	bne.n	800d03a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d02e:	683a      	ldr	r2, [r7, #0]
 800d030:	4907      	ldr	r1, [pc, #28]	; (800d050 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d032:	4808      	ldr	r0, [pc, #32]	; (800d054 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d034:	f7ff fd34 	bl	800caa0 <USBD_GetString>
 800d038:	e004      	b.n	800d044 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d03a:	683a      	ldr	r2, [r7, #0]
 800d03c:	4904      	ldr	r1, [pc, #16]	; (800d050 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d03e:	4805      	ldr	r0, [pc, #20]	; (800d054 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d040:	f7ff fd2e 	bl	800caa0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d044:	4b02      	ldr	r3, [pc, #8]	; (800d050 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d046:	4618      	mov	r0, r3
 800d048:	3708      	adds	r7, #8
 800d04a:	46bd      	mov	sp, r7
 800d04c:	bd80      	pop	{r7, pc}
 800d04e:	bf00      	nop
 800d050:	20002658 	.word	0x20002658
 800d054:	080118ac 	.word	0x080118ac

0800d058 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b082      	sub	sp, #8
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	4603      	mov	r3, r0
 800d060:	6039      	str	r1, [r7, #0]
 800d062:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d064:	79fb      	ldrb	r3, [r7, #7]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d105      	bne.n	800d076 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d06a:	683a      	ldr	r2, [r7, #0]
 800d06c:	4907      	ldr	r1, [pc, #28]	; (800d08c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d06e:	4808      	ldr	r0, [pc, #32]	; (800d090 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d070:	f7ff fd16 	bl	800caa0 <USBD_GetString>
 800d074:	e004      	b.n	800d080 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d076:	683a      	ldr	r2, [r7, #0]
 800d078:	4904      	ldr	r1, [pc, #16]	; (800d08c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d07a:	4805      	ldr	r0, [pc, #20]	; (800d090 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d07c:	f7ff fd10 	bl	800caa0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d080:	4b02      	ldr	r3, [pc, #8]	; (800d08c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d082:	4618      	mov	r0, r3
 800d084:	3708      	adds	r7, #8
 800d086:	46bd      	mov	sp, r7
 800d088:	bd80      	pop	{r7, pc}
 800d08a:	bf00      	nop
 800d08c:	20002658 	.word	0x20002658
 800d090:	080118b8 	.word	0x080118b8

0800d094 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b084      	sub	sp, #16
 800d098:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d09a:	4b0f      	ldr	r3, [pc, #60]	; (800d0d8 <Get_SerialNum+0x44>)
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d0a0:	4b0e      	ldr	r3, [pc, #56]	; (800d0dc <Get_SerialNum+0x48>)
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d0a6:	4b0e      	ldr	r3, [pc, #56]	; (800d0e0 <Get_SerialNum+0x4c>)
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d0ac:	68fa      	ldr	r2, [r7, #12]
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	4413      	add	r3, r2
 800d0b2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d009      	beq.n	800d0ce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d0ba:	2208      	movs	r2, #8
 800d0bc:	4909      	ldr	r1, [pc, #36]	; (800d0e4 <Get_SerialNum+0x50>)
 800d0be:	68f8      	ldr	r0, [r7, #12]
 800d0c0:	f000 f814 	bl	800d0ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d0c4:	2204      	movs	r2, #4
 800d0c6:	4908      	ldr	r1, [pc, #32]	; (800d0e8 <Get_SerialNum+0x54>)
 800d0c8:	68b8      	ldr	r0, [r7, #8]
 800d0ca:	f000 f80f 	bl	800d0ec <IntToUnicode>
  }
}
 800d0ce:	bf00      	nop
 800d0d0:	3710      	adds	r7, #16
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd80      	pop	{r7, pc}
 800d0d6:	bf00      	nop
 800d0d8:	1fff7a10 	.word	0x1fff7a10
 800d0dc:	1fff7a14 	.word	0x1fff7a14
 800d0e0:	1fff7a18 	.word	0x1fff7a18
 800d0e4:	20000162 	.word	0x20000162
 800d0e8:	20000172 	.word	0x20000172

0800d0ec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d0ec:	b480      	push	{r7}
 800d0ee:	b087      	sub	sp, #28
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	60f8      	str	r0, [r7, #12]
 800d0f4:	60b9      	str	r1, [r7, #8]
 800d0f6:	4613      	mov	r3, r2
 800d0f8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d0fe:	2300      	movs	r3, #0
 800d100:	75fb      	strb	r3, [r7, #23]
 800d102:	e027      	b.n	800d154 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	0f1b      	lsrs	r3, r3, #28
 800d108:	2b09      	cmp	r3, #9
 800d10a:	d80b      	bhi.n	800d124 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	0f1b      	lsrs	r3, r3, #28
 800d110:	b2da      	uxtb	r2, r3
 800d112:	7dfb      	ldrb	r3, [r7, #23]
 800d114:	005b      	lsls	r3, r3, #1
 800d116:	4619      	mov	r1, r3
 800d118:	68bb      	ldr	r3, [r7, #8]
 800d11a:	440b      	add	r3, r1
 800d11c:	3230      	adds	r2, #48	; 0x30
 800d11e:	b2d2      	uxtb	r2, r2
 800d120:	701a      	strb	r2, [r3, #0]
 800d122:	e00a      	b.n	800d13a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	0f1b      	lsrs	r3, r3, #28
 800d128:	b2da      	uxtb	r2, r3
 800d12a:	7dfb      	ldrb	r3, [r7, #23]
 800d12c:	005b      	lsls	r3, r3, #1
 800d12e:	4619      	mov	r1, r3
 800d130:	68bb      	ldr	r3, [r7, #8]
 800d132:	440b      	add	r3, r1
 800d134:	3237      	adds	r2, #55	; 0x37
 800d136:	b2d2      	uxtb	r2, r2
 800d138:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	011b      	lsls	r3, r3, #4
 800d13e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d140:	7dfb      	ldrb	r3, [r7, #23]
 800d142:	005b      	lsls	r3, r3, #1
 800d144:	3301      	adds	r3, #1
 800d146:	68ba      	ldr	r2, [r7, #8]
 800d148:	4413      	add	r3, r2
 800d14a:	2200      	movs	r2, #0
 800d14c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d14e:	7dfb      	ldrb	r3, [r7, #23]
 800d150:	3301      	adds	r3, #1
 800d152:	75fb      	strb	r3, [r7, #23]
 800d154:	7dfa      	ldrb	r2, [r7, #23]
 800d156:	79fb      	ldrb	r3, [r7, #7]
 800d158:	429a      	cmp	r2, r3
 800d15a:	d3d3      	bcc.n	800d104 <IntToUnicode+0x18>
  }
}
 800d15c:	bf00      	nop
 800d15e:	371c      	adds	r7, #28
 800d160:	46bd      	mov	sp, r7
 800d162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d166:	4770      	bx	lr

0800d168 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b08a      	sub	sp, #40	; 0x28
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d170:	f107 0314 	add.w	r3, r7, #20
 800d174:	2200      	movs	r2, #0
 800d176:	601a      	str	r2, [r3, #0]
 800d178:	605a      	str	r2, [r3, #4]
 800d17a:	609a      	str	r2, [r3, #8]
 800d17c:	60da      	str	r2, [r3, #12]
 800d17e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d188:	d13a      	bne.n	800d200 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d18a:	2300      	movs	r3, #0
 800d18c:	613b      	str	r3, [r7, #16]
 800d18e:	4b1e      	ldr	r3, [pc, #120]	; (800d208 <HAL_PCD_MspInit+0xa0>)
 800d190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d192:	4a1d      	ldr	r2, [pc, #116]	; (800d208 <HAL_PCD_MspInit+0xa0>)
 800d194:	f043 0301 	orr.w	r3, r3, #1
 800d198:	6313      	str	r3, [r2, #48]	; 0x30
 800d19a:	4b1b      	ldr	r3, [pc, #108]	; (800d208 <HAL_PCD_MspInit+0xa0>)
 800d19c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d19e:	f003 0301 	and.w	r3, r3, #1
 800d1a2:	613b      	str	r3, [r7, #16]
 800d1a4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d1a6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d1aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d1ac:	2302      	movs	r3, #2
 800d1ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d1b4:	2303      	movs	r3, #3
 800d1b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d1b8:	230a      	movs	r3, #10
 800d1ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d1bc:	f107 0314 	add.w	r3, r7, #20
 800d1c0:	4619      	mov	r1, r3
 800d1c2:	4812      	ldr	r0, [pc, #72]	; (800d20c <HAL_PCD_MspInit+0xa4>)
 800d1c4:	f7f6 f968 	bl	8003498 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d1c8:	4b0f      	ldr	r3, [pc, #60]	; (800d208 <HAL_PCD_MspInit+0xa0>)
 800d1ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1cc:	4a0e      	ldr	r2, [pc, #56]	; (800d208 <HAL_PCD_MspInit+0xa0>)
 800d1ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d1d2:	6353      	str	r3, [r2, #52]	; 0x34
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	60fb      	str	r3, [r7, #12]
 800d1d8:	4b0b      	ldr	r3, [pc, #44]	; (800d208 <HAL_PCD_MspInit+0xa0>)
 800d1da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d1dc:	4a0a      	ldr	r2, [pc, #40]	; (800d208 <HAL_PCD_MspInit+0xa0>)
 800d1de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d1e2:	6453      	str	r3, [r2, #68]	; 0x44
 800d1e4:	4b08      	ldr	r3, [pc, #32]	; (800d208 <HAL_PCD_MspInit+0xa0>)
 800d1e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d1e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d1ec:	60fb      	str	r3, [r7, #12]
 800d1ee:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	2100      	movs	r1, #0
 800d1f4:	2043      	movs	r0, #67	; 0x43
 800d1f6:	f7f5 fd7c 	bl	8002cf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d1fa:	2043      	movs	r0, #67	; 0x43
 800d1fc:	f7f5 fd95 	bl	8002d2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d200:	bf00      	nop
 800d202:	3728      	adds	r7, #40	; 0x28
 800d204:	46bd      	mov	sp, r7
 800d206:	bd80      	pop	{r7, pc}
 800d208:	40023800 	.word	0x40023800
 800d20c:	40020000 	.word	0x40020000

0800d210 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d210:	b580      	push	{r7, lr}
 800d212:	b082      	sub	sp, #8
 800d214:	af00      	add	r7, sp, #0
 800d216:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d224:	4619      	mov	r1, r3
 800d226:	4610      	mov	r0, r2
 800d228:	f7fe fd4c 	bl	800bcc4 <USBD_LL_SetupStage>
}
 800d22c:	bf00      	nop
 800d22e:	3708      	adds	r7, #8
 800d230:	46bd      	mov	sp, r7
 800d232:	bd80      	pop	{r7, pc}

0800d234 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d234:	b580      	push	{r7, lr}
 800d236:	b082      	sub	sp, #8
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
 800d23c:	460b      	mov	r3, r1
 800d23e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800d246:	78fa      	ldrb	r2, [r7, #3]
 800d248:	6879      	ldr	r1, [r7, #4]
 800d24a:	4613      	mov	r3, r2
 800d24c:	00db      	lsls	r3, r3, #3
 800d24e:	1a9b      	subs	r3, r3, r2
 800d250:	009b      	lsls	r3, r3, #2
 800d252:	440b      	add	r3, r1
 800d254:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d258:	681a      	ldr	r2, [r3, #0]
 800d25a:	78fb      	ldrb	r3, [r7, #3]
 800d25c:	4619      	mov	r1, r3
 800d25e:	f7fe fd7c 	bl	800bd5a <USBD_LL_DataOutStage>
}
 800d262:	bf00      	nop
 800d264:	3708      	adds	r7, #8
 800d266:	46bd      	mov	sp, r7
 800d268:	bd80      	pop	{r7, pc}

0800d26a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d26a:	b580      	push	{r7, lr}
 800d26c:	b082      	sub	sp, #8
 800d26e:	af00      	add	r7, sp, #0
 800d270:	6078      	str	r0, [r7, #4]
 800d272:	460b      	mov	r3, r1
 800d274:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800d27c:	78fa      	ldrb	r2, [r7, #3]
 800d27e:	6879      	ldr	r1, [r7, #4]
 800d280:	4613      	mov	r3, r2
 800d282:	00db      	lsls	r3, r3, #3
 800d284:	1a9b      	subs	r3, r3, r2
 800d286:	009b      	lsls	r3, r3, #2
 800d288:	440b      	add	r3, r1
 800d28a:	3348      	adds	r3, #72	; 0x48
 800d28c:	681a      	ldr	r2, [r3, #0]
 800d28e:	78fb      	ldrb	r3, [r7, #3]
 800d290:	4619      	mov	r1, r3
 800d292:	f7fe fdd3 	bl	800be3c <USBD_LL_DataInStage>
}
 800d296:	bf00      	nop
 800d298:	3708      	adds	r7, #8
 800d29a:	46bd      	mov	sp, r7
 800d29c:	bd80      	pop	{r7, pc}

0800d29e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d29e:	b580      	push	{r7, lr}
 800d2a0:	b082      	sub	sp, #8
 800d2a2:	af00      	add	r7, sp, #0
 800d2a4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	f7fe fee1 	bl	800c074 <USBD_LL_SOF>
}
 800d2b2:	bf00      	nop
 800d2b4:	3708      	adds	r7, #8
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	bd80      	pop	{r7, pc}

0800d2ba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800d2ba:	b580      	push	{r7, lr}
 800d2bc:	b084      	sub	sp, #16
 800d2be:	af00      	add	r7, sp, #0
 800d2c0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d2c2:	2301      	movs	r3, #1
 800d2c4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	68db      	ldr	r3, [r3, #12]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d102      	bne.n	800d2d4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	73fb      	strb	r3, [r7, #15]
 800d2d2:	e008      	b.n	800d2e6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	68db      	ldr	r3, [r3, #12]
 800d2d8:	2b02      	cmp	r3, #2
 800d2da:	d102      	bne.n	800d2e2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d2dc:	2301      	movs	r3, #1
 800d2de:	73fb      	strb	r3, [r7, #15]
 800d2e0:	e001      	b.n	800d2e6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d2e2:	f7f5 f82f 	bl	8002344 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d2ec:	7bfa      	ldrb	r2, [r7, #15]
 800d2ee:	4611      	mov	r1, r2
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	f7fe fe89 	bl	800c008 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	f7fe fe42 	bl	800bf86 <USBD_LL_Reset>
}
 800d302:	bf00      	nop
 800d304:	3710      	adds	r7, #16
 800d306:	46bd      	mov	sp, r7
 800d308:	bd80      	pop	{r7, pc}
	...

0800d30c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b082      	sub	sp, #8
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d31a:	4618      	mov	r0, r3
 800d31c:	f7fe fe84 	bl	800c028 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	687a      	ldr	r2, [r7, #4]
 800d32c:	6812      	ldr	r2, [r2, #0]
 800d32e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d332:	f043 0301 	orr.w	r3, r3, #1
 800d336:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	6a1b      	ldr	r3, [r3, #32]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d005      	beq.n	800d34c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d340:	4b04      	ldr	r3, [pc, #16]	; (800d354 <HAL_PCD_SuspendCallback+0x48>)
 800d342:	691b      	ldr	r3, [r3, #16]
 800d344:	4a03      	ldr	r2, [pc, #12]	; (800d354 <HAL_PCD_SuspendCallback+0x48>)
 800d346:	f043 0306 	orr.w	r3, r3, #6
 800d34a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d34c:	bf00      	nop
 800d34e:	3708      	adds	r7, #8
 800d350:	46bd      	mov	sp, r7
 800d352:	bd80      	pop	{r7, pc}
 800d354:	e000ed00 	.word	0xe000ed00

0800d358 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b082      	sub	sp, #8
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d366:	4618      	mov	r0, r3
 800d368:	f7fe fe73 	bl	800c052 <USBD_LL_Resume>
}
 800d36c:	bf00      	nop
 800d36e:	3708      	adds	r7, #8
 800d370:	46bd      	mov	sp, r7
 800d372:	bd80      	pop	{r7, pc}

0800d374 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b082      	sub	sp, #8
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
 800d37c:	460b      	mov	r3, r1
 800d37e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d386:	78fa      	ldrb	r2, [r7, #3]
 800d388:	4611      	mov	r1, r2
 800d38a:	4618      	mov	r0, r3
 800d38c:	f7fe fe99 	bl	800c0c2 <USBD_LL_IsoOUTIncomplete>
}
 800d390:	bf00      	nop
 800d392:	3708      	adds	r7, #8
 800d394:	46bd      	mov	sp, r7
 800d396:	bd80      	pop	{r7, pc}

0800d398 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d398:	b580      	push	{r7, lr}
 800d39a:	b082      	sub	sp, #8
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	6078      	str	r0, [r7, #4]
 800d3a0:	460b      	mov	r3, r1
 800d3a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d3aa:	78fa      	ldrb	r2, [r7, #3]
 800d3ac:	4611      	mov	r1, r2
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	f7fe fe7a 	bl	800c0a8 <USBD_LL_IsoINIncomplete>
}
 800d3b4:	bf00      	nop
 800d3b6:	3708      	adds	r7, #8
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	bd80      	pop	{r7, pc}

0800d3bc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b082      	sub	sp, #8
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	f7fe fe86 	bl	800c0dc <USBD_LL_DevConnected>
}
 800d3d0:	bf00      	nop
 800d3d2:	3708      	adds	r7, #8
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	bd80      	pop	{r7, pc}

0800d3d8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d3d8:	b580      	push	{r7, lr}
 800d3da:	b082      	sub	sp, #8
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	f7fe fe83 	bl	800c0f2 <USBD_LL_DevDisconnected>
}
 800d3ec:	bf00      	nop
 800d3ee:	3708      	adds	r7, #8
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	bd80      	pop	{r7, pc}

0800d3f4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	b082      	sub	sp, #8
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	781b      	ldrb	r3, [r3, #0]
 800d400:	2b00      	cmp	r3, #0
 800d402:	d13c      	bne.n	800d47e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d404:	4a20      	ldr	r2, [pc, #128]	; (800d488 <USBD_LL_Init+0x94>)
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	4a1e      	ldr	r2, [pc, #120]	; (800d488 <USBD_LL_Init+0x94>)
 800d410:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d414:	4b1c      	ldr	r3, [pc, #112]	; (800d488 <USBD_LL_Init+0x94>)
 800d416:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d41a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d41c:	4b1a      	ldr	r3, [pc, #104]	; (800d488 <USBD_LL_Init+0x94>)
 800d41e:	2204      	movs	r2, #4
 800d420:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d422:	4b19      	ldr	r3, [pc, #100]	; (800d488 <USBD_LL_Init+0x94>)
 800d424:	2202      	movs	r2, #2
 800d426:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d428:	4b17      	ldr	r3, [pc, #92]	; (800d488 <USBD_LL_Init+0x94>)
 800d42a:	2200      	movs	r2, #0
 800d42c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d42e:	4b16      	ldr	r3, [pc, #88]	; (800d488 <USBD_LL_Init+0x94>)
 800d430:	2202      	movs	r2, #2
 800d432:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d434:	4b14      	ldr	r3, [pc, #80]	; (800d488 <USBD_LL_Init+0x94>)
 800d436:	2200      	movs	r2, #0
 800d438:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d43a:	4b13      	ldr	r3, [pc, #76]	; (800d488 <USBD_LL_Init+0x94>)
 800d43c:	2200      	movs	r2, #0
 800d43e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d440:	4b11      	ldr	r3, [pc, #68]	; (800d488 <USBD_LL_Init+0x94>)
 800d442:	2200      	movs	r2, #0
 800d444:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d446:	4b10      	ldr	r3, [pc, #64]	; (800d488 <USBD_LL_Init+0x94>)
 800d448:	2200      	movs	r2, #0
 800d44a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d44c:	4b0e      	ldr	r3, [pc, #56]	; (800d488 <USBD_LL_Init+0x94>)
 800d44e:	2200      	movs	r2, #0
 800d450:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d452:	480d      	ldr	r0, [pc, #52]	; (800d488 <USBD_LL_Init+0x94>)
 800d454:	f7f6 fb3c 	bl	8003ad0 <HAL_PCD_Init>
 800d458:	4603      	mov	r3, r0
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d001      	beq.n	800d462 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d45e:	f7f4 ff71 	bl	8002344 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d462:	2180      	movs	r1, #128	; 0x80
 800d464:	4808      	ldr	r0, [pc, #32]	; (800d488 <USBD_LL_Init+0x94>)
 800d466:	f7f7 fca0 	bl	8004daa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d46a:	2240      	movs	r2, #64	; 0x40
 800d46c:	2100      	movs	r1, #0
 800d46e:	4806      	ldr	r0, [pc, #24]	; (800d488 <USBD_LL_Init+0x94>)
 800d470:	f7f7 fc54 	bl	8004d1c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d474:	2280      	movs	r2, #128	; 0x80
 800d476:	2101      	movs	r1, #1
 800d478:	4803      	ldr	r0, [pc, #12]	; (800d488 <USBD_LL_Init+0x94>)
 800d47a:	f7f7 fc4f 	bl	8004d1c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d47e:	2300      	movs	r3, #0
}
 800d480:	4618      	mov	r0, r3
 800d482:	3708      	adds	r7, #8
 800d484:	46bd      	mov	sp, r7
 800d486:	bd80      	pop	{r7, pc}
 800d488:	20002858 	.word	0x20002858

0800d48c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d48c:	b580      	push	{r7, lr}
 800d48e:	b084      	sub	sp, #16
 800d490:	af00      	add	r7, sp, #0
 800d492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d494:	2300      	movs	r3, #0
 800d496:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d498:	2300      	movs	r3, #0
 800d49a:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	f7f6 fc31 	bl	8003d0a <HAL_PCD_Start>
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 800d4ac:	7bfb      	ldrb	r3, [r7, #15]
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	f000 f92e 	bl	800d710 <USBD_Get_USB_Status>
 800d4b4:	4603      	mov	r3, r0
 800d4b6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800d4b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	3710      	adds	r7, #16
 800d4be:	46bd      	mov	sp, r7
 800d4c0:	bd80      	pop	{r7, pc}

0800d4c2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d4c2:	b580      	push	{r7, lr}
 800d4c4:	b084      	sub	sp, #16
 800d4c6:	af00      	add	r7, sp, #0
 800d4c8:	6078      	str	r0, [r7, #4]
 800d4ca:	4608      	mov	r0, r1
 800d4cc:	4611      	mov	r1, r2
 800d4ce:	461a      	mov	r2, r3
 800d4d0:	4603      	mov	r3, r0
 800d4d2:	70fb      	strb	r3, [r7, #3]
 800d4d4:	460b      	mov	r3, r1
 800d4d6:	70bb      	strb	r3, [r7, #2]
 800d4d8:	4613      	mov	r3, r2
 800d4da:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4dc:	2300      	movs	r3, #0
 800d4de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800d4ea:	78bb      	ldrb	r3, [r7, #2]
 800d4ec:	883a      	ldrh	r2, [r7, #0]
 800d4ee:	78f9      	ldrb	r1, [r7, #3]
 800d4f0:	f7f7 f806 	bl	8004500 <HAL_PCD_EP_Open>
 800d4f4:	4603      	mov	r3, r0
 800d4f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d4f8:	7bfb      	ldrb	r3, [r7, #15]
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	f000 f908 	bl	800d710 <USBD_Get_USB_Status>
 800d500:	4603      	mov	r3, r0
 800d502:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800d504:	7bbb      	ldrb	r3, [r7, #14]
}
 800d506:	4618      	mov	r0, r3
 800d508:	3710      	adds	r7, #16
 800d50a:	46bd      	mov	sp, r7
 800d50c:	bd80      	pop	{r7, pc}

0800d50e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d50e:	b580      	push	{r7, lr}
 800d510:	b084      	sub	sp, #16
 800d512:	af00      	add	r7, sp, #0
 800d514:	6078      	str	r0, [r7, #4]
 800d516:	460b      	mov	r3, r1
 800d518:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d51a:	2300      	movs	r3, #0
 800d51c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d51e:	2300      	movs	r3, #0
 800d520:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800d528:	78fa      	ldrb	r2, [r7, #3]
 800d52a:	4611      	mov	r1, r2
 800d52c:	4618      	mov	r0, r3
 800d52e:	f7f7 f84f 	bl	80045d0 <HAL_PCD_EP_Close>
 800d532:	4603      	mov	r3, r0
 800d534:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800d536:	7bfb      	ldrb	r3, [r7, #15]
 800d538:	4618      	mov	r0, r3
 800d53a:	f000 f8e9 	bl	800d710 <USBD_Get_USB_Status>
 800d53e:	4603      	mov	r3, r0
 800d540:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800d542:	7bbb      	ldrb	r3, [r7, #14]
}
 800d544:	4618      	mov	r0, r3
 800d546:	3710      	adds	r7, #16
 800d548:	46bd      	mov	sp, r7
 800d54a:	bd80      	pop	{r7, pc}

0800d54c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b084      	sub	sp, #16
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
 800d554:	460b      	mov	r3, r1
 800d556:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d558:	2300      	movs	r3, #0
 800d55a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d55c:	2300      	movs	r3, #0
 800d55e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800d566:	78fa      	ldrb	r2, [r7, #3]
 800d568:	4611      	mov	r1, r2
 800d56a:	4618      	mov	r0, r3
 800d56c:	f7f7 f927 	bl	80047be <HAL_PCD_EP_SetStall>
 800d570:	4603      	mov	r3, r0
 800d572:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d574:	7bfb      	ldrb	r3, [r7, #15]
 800d576:	4618      	mov	r0, r3
 800d578:	f000 f8ca 	bl	800d710 <USBD_Get_USB_Status>
 800d57c:	4603      	mov	r3, r0
 800d57e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800d580:	7bbb      	ldrb	r3, [r7, #14]
}
 800d582:	4618      	mov	r0, r3
 800d584:	3710      	adds	r7, #16
 800d586:	46bd      	mov	sp, r7
 800d588:	bd80      	pop	{r7, pc}

0800d58a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d58a:	b580      	push	{r7, lr}
 800d58c:	b084      	sub	sp, #16
 800d58e:	af00      	add	r7, sp, #0
 800d590:	6078      	str	r0, [r7, #4]
 800d592:	460b      	mov	r3, r1
 800d594:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d596:	2300      	movs	r3, #0
 800d598:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d59a:	2300      	movs	r3, #0
 800d59c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800d5a4:	78fa      	ldrb	r2, [r7, #3]
 800d5a6:	4611      	mov	r1, r2
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	f7f7 f96c 	bl	8004886 <HAL_PCD_EP_ClrStall>
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800d5b2:	7bfb      	ldrb	r3, [r7, #15]
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	f000 f8ab 	bl	800d710 <USBD_Get_USB_Status>
 800d5ba:	4603      	mov	r3, r0
 800d5bc:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800d5be:	7bbb      	ldrb	r3, [r7, #14]
}
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	3710      	adds	r7, #16
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bd80      	pop	{r7, pc}

0800d5c8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d5c8:	b480      	push	{r7}
 800d5ca:	b085      	sub	sp, #20
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
 800d5d0:	460b      	mov	r3, r1
 800d5d2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800d5da:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800d5dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	da0b      	bge.n	800d5fc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800d5e4:	78fb      	ldrb	r3, [r7, #3]
 800d5e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d5ea:	68f9      	ldr	r1, [r7, #12]
 800d5ec:	4613      	mov	r3, r2
 800d5ee:	00db      	lsls	r3, r3, #3
 800d5f0:	1a9b      	subs	r3, r3, r2
 800d5f2:	009b      	lsls	r3, r3, #2
 800d5f4:	440b      	add	r3, r1
 800d5f6:	333e      	adds	r3, #62	; 0x3e
 800d5f8:	781b      	ldrb	r3, [r3, #0]
 800d5fa:	e00b      	b.n	800d614 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800d5fc:	78fb      	ldrb	r3, [r7, #3]
 800d5fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d602:	68f9      	ldr	r1, [r7, #12]
 800d604:	4613      	mov	r3, r2
 800d606:	00db      	lsls	r3, r3, #3
 800d608:	1a9b      	subs	r3, r3, r2
 800d60a:	009b      	lsls	r3, r3, #2
 800d60c:	440b      	add	r3, r1
 800d60e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d612:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d614:	4618      	mov	r0, r3
 800d616:	3714      	adds	r7, #20
 800d618:	46bd      	mov	sp, r7
 800d61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61e:	4770      	bx	lr

0800d620 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b084      	sub	sp, #16
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
 800d628:	460b      	mov	r3, r1
 800d62a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d62c:	2300      	movs	r3, #0
 800d62e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d630:	2300      	movs	r3, #0
 800d632:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800d63a:	78fa      	ldrb	r2, [r7, #3]
 800d63c:	4611      	mov	r1, r2
 800d63e:	4618      	mov	r0, r3
 800d640:	f7f6 ff39 	bl	80044b6 <HAL_PCD_SetAddress>
 800d644:	4603      	mov	r3, r0
 800d646:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d648:	7bfb      	ldrb	r3, [r7, #15]
 800d64a:	4618      	mov	r0, r3
 800d64c:	f000 f860 	bl	800d710 <USBD_Get_USB_Status>
 800d650:	4603      	mov	r3, r0
 800d652:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800d654:	7bbb      	ldrb	r3, [r7, #14]
}
 800d656:	4618      	mov	r0, r3
 800d658:	3710      	adds	r7, #16
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bd80      	pop	{r7, pc}

0800d65e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d65e:	b580      	push	{r7, lr}
 800d660:	b086      	sub	sp, #24
 800d662:	af00      	add	r7, sp, #0
 800d664:	60f8      	str	r0, [r7, #12]
 800d666:	607a      	str	r2, [r7, #4]
 800d668:	461a      	mov	r2, r3
 800d66a:	460b      	mov	r3, r1
 800d66c:	72fb      	strb	r3, [r7, #11]
 800d66e:	4613      	mov	r3, r2
 800d670:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d672:	2300      	movs	r3, #0
 800d674:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d676:	2300      	movs	r3, #0
 800d678:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800d680:	893b      	ldrh	r3, [r7, #8]
 800d682:	7af9      	ldrb	r1, [r7, #11]
 800d684:	687a      	ldr	r2, [r7, #4]
 800d686:	f7f7 f850 	bl	800472a <HAL_PCD_EP_Transmit>
 800d68a:	4603      	mov	r3, r0
 800d68c:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800d68e:	7dfb      	ldrb	r3, [r7, #23]
 800d690:	4618      	mov	r0, r3
 800d692:	f000 f83d 	bl	800d710 <USBD_Get_USB_Status>
 800d696:	4603      	mov	r3, r0
 800d698:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800d69a:	7dbb      	ldrb	r3, [r7, #22]
}
 800d69c:	4618      	mov	r0, r3
 800d69e:	3718      	adds	r7, #24
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	bd80      	pop	{r7, pc}

0800d6a4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	b086      	sub	sp, #24
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	60f8      	str	r0, [r7, #12]
 800d6ac:	607a      	str	r2, [r7, #4]
 800d6ae:	461a      	mov	r2, r3
 800d6b0:	460b      	mov	r3, r1
 800d6b2:	72fb      	strb	r3, [r7, #11]
 800d6b4:	4613      	mov	r3, r2
 800d6b6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d6bc:	2300      	movs	r3, #0
 800d6be:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800d6c6:	893b      	ldrh	r3, [r7, #8]
 800d6c8:	7af9      	ldrb	r1, [r7, #11]
 800d6ca:	687a      	ldr	r2, [r7, #4]
 800d6cc:	f7f6 ffca 	bl	8004664 <HAL_PCD_EP_Receive>
 800d6d0:	4603      	mov	r3, r0
 800d6d2:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800d6d4:	7dfb      	ldrb	r3, [r7, #23]
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	f000 f81a 	bl	800d710 <USBD_Get_USB_Status>
 800d6dc:	4603      	mov	r3, r0
 800d6de:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 800d6e0:	7dbb      	ldrb	r3, [r7, #22]
}
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	3718      	adds	r7, #24
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	bd80      	pop	{r7, pc}

0800d6ea <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d6ea:	b580      	push	{r7, lr}
 800d6ec:	b082      	sub	sp, #8
 800d6ee:	af00      	add	r7, sp, #0
 800d6f0:	6078      	str	r0, [r7, #4]
 800d6f2:	460b      	mov	r3, r1
 800d6f4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800d6fc:	78fa      	ldrb	r2, [r7, #3]
 800d6fe:	4611      	mov	r1, r2
 800d700:	4618      	mov	r0, r3
 800d702:	f7f6 fffa 	bl	80046fa <HAL_PCD_EP_GetRxCount>
 800d706:	4603      	mov	r3, r0
}
 800d708:	4618      	mov	r0, r3
 800d70a:	3708      	adds	r7, #8
 800d70c:	46bd      	mov	sp, r7
 800d70e:	bd80      	pop	{r7, pc}

0800d710 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d710:	b480      	push	{r7}
 800d712:	b085      	sub	sp, #20
 800d714:	af00      	add	r7, sp, #0
 800d716:	4603      	mov	r3, r0
 800d718:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d71a:	2300      	movs	r3, #0
 800d71c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d71e:	79fb      	ldrb	r3, [r7, #7]
 800d720:	2b03      	cmp	r3, #3
 800d722:	d817      	bhi.n	800d754 <USBD_Get_USB_Status+0x44>
 800d724:	a201      	add	r2, pc, #4	; (adr r2, 800d72c <USBD_Get_USB_Status+0x1c>)
 800d726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d72a:	bf00      	nop
 800d72c:	0800d73d 	.word	0x0800d73d
 800d730:	0800d743 	.word	0x0800d743
 800d734:	0800d749 	.word	0x0800d749
 800d738:	0800d74f 	.word	0x0800d74f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d73c:	2300      	movs	r3, #0
 800d73e:	73fb      	strb	r3, [r7, #15]
    break;
 800d740:	e00b      	b.n	800d75a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d742:	2302      	movs	r3, #2
 800d744:	73fb      	strb	r3, [r7, #15]
    break;
 800d746:	e008      	b.n	800d75a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d748:	2301      	movs	r3, #1
 800d74a:	73fb      	strb	r3, [r7, #15]
    break;
 800d74c:	e005      	b.n	800d75a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d74e:	2302      	movs	r3, #2
 800d750:	73fb      	strb	r3, [r7, #15]
    break;
 800d752:	e002      	b.n	800d75a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d754:	2302      	movs	r3, #2
 800d756:	73fb      	strb	r3, [r7, #15]
    break;
 800d758:	bf00      	nop
  }
  return usb_status;
 800d75a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d75c:	4618      	mov	r0, r3
 800d75e:	3714      	adds	r7, #20
 800d760:	46bd      	mov	sp, r7
 800d762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d766:	4770      	bx	lr

0800d768 <__libc_init_array>:
 800d768:	b570      	push	{r4, r5, r6, lr}
 800d76a:	4e0d      	ldr	r6, [pc, #52]	; (800d7a0 <__libc_init_array+0x38>)
 800d76c:	4c0d      	ldr	r4, [pc, #52]	; (800d7a4 <__libc_init_array+0x3c>)
 800d76e:	1ba4      	subs	r4, r4, r6
 800d770:	10a4      	asrs	r4, r4, #2
 800d772:	2500      	movs	r5, #0
 800d774:	42a5      	cmp	r5, r4
 800d776:	d109      	bne.n	800d78c <__libc_init_array+0x24>
 800d778:	4e0b      	ldr	r6, [pc, #44]	; (800d7a8 <__libc_init_array+0x40>)
 800d77a:	4c0c      	ldr	r4, [pc, #48]	; (800d7ac <__libc_init_array+0x44>)
 800d77c:	f003 fd6e 	bl	801125c <_init>
 800d780:	1ba4      	subs	r4, r4, r6
 800d782:	10a4      	asrs	r4, r4, #2
 800d784:	2500      	movs	r5, #0
 800d786:	42a5      	cmp	r5, r4
 800d788:	d105      	bne.n	800d796 <__libc_init_array+0x2e>
 800d78a:	bd70      	pop	{r4, r5, r6, pc}
 800d78c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d790:	4798      	blx	r3
 800d792:	3501      	adds	r5, #1
 800d794:	e7ee      	b.n	800d774 <__libc_init_array+0xc>
 800d796:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d79a:	4798      	blx	r3
 800d79c:	3501      	adds	r5, #1
 800d79e:	e7f2      	b.n	800d786 <__libc_init_array+0x1e>
 800d7a0:	08011bb8 	.word	0x08011bb8
 800d7a4:	08011bb8 	.word	0x08011bb8
 800d7a8:	08011bb8 	.word	0x08011bb8
 800d7ac:	08011bbc 	.word	0x08011bbc

0800d7b0 <malloc>:
 800d7b0:	4b02      	ldr	r3, [pc, #8]	; (800d7bc <malloc+0xc>)
 800d7b2:	4601      	mov	r1, r0
 800d7b4:	6818      	ldr	r0, [r3, #0]
 800d7b6:	f000 b86d 	b.w	800d894 <_malloc_r>
 800d7ba:	bf00      	nop
 800d7bc:	2000017c 	.word	0x2000017c

0800d7c0 <free>:
 800d7c0:	4b02      	ldr	r3, [pc, #8]	; (800d7cc <free+0xc>)
 800d7c2:	4601      	mov	r1, r0
 800d7c4:	6818      	ldr	r0, [r3, #0]
 800d7c6:	f000 b817 	b.w	800d7f8 <_free_r>
 800d7ca:	bf00      	nop
 800d7cc:	2000017c 	.word	0x2000017c

0800d7d0 <memcpy>:
 800d7d0:	b510      	push	{r4, lr}
 800d7d2:	1e43      	subs	r3, r0, #1
 800d7d4:	440a      	add	r2, r1
 800d7d6:	4291      	cmp	r1, r2
 800d7d8:	d100      	bne.n	800d7dc <memcpy+0xc>
 800d7da:	bd10      	pop	{r4, pc}
 800d7dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d7e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d7e4:	e7f7      	b.n	800d7d6 <memcpy+0x6>

0800d7e6 <memset>:
 800d7e6:	4402      	add	r2, r0
 800d7e8:	4603      	mov	r3, r0
 800d7ea:	4293      	cmp	r3, r2
 800d7ec:	d100      	bne.n	800d7f0 <memset+0xa>
 800d7ee:	4770      	bx	lr
 800d7f0:	f803 1b01 	strb.w	r1, [r3], #1
 800d7f4:	e7f9      	b.n	800d7ea <memset+0x4>
	...

0800d7f8 <_free_r>:
 800d7f8:	b538      	push	{r3, r4, r5, lr}
 800d7fa:	4605      	mov	r5, r0
 800d7fc:	2900      	cmp	r1, #0
 800d7fe:	d045      	beq.n	800d88c <_free_r+0x94>
 800d800:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d804:	1f0c      	subs	r4, r1, #4
 800d806:	2b00      	cmp	r3, #0
 800d808:	bfb8      	it	lt
 800d80a:	18e4      	addlt	r4, r4, r3
 800d80c:	f002 ff50 	bl	80106b0 <__malloc_lock>
 800d810:	4a1f      	ldr	r2, [pc, #124]	; (800d890 <_free_r+0x98>)
 800d812:	6813      	ldr	r3, [r2, #0]
 800d814:	4610      	mov	r0, r2
 800d816:	b933      	cbnz	r3, 800d826 <_free_r+0x2e>
 800d818:	6063      	str	r3, [r4, #4]
 800d81a:	6014      	str	r4, [r2, #0]
 800d81c:	4628      	mov	r0, r5
 800d81e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d822:	f002 bf46 	b.w	80106b2 <__malloc_unlock>
 800d826:	42a3      	cmp	r3, r4
 800d828:	d90c      	bls.n	800d844 <_free_r+0x4c>
 800d82a:	6821      	ldr	r1, [r4, #0]
 800d82c:	1862      	adds	r2, r4, r1
 800d82e:	4293      	cmp	r3, r2
 800d830:	bf04      	itt	eq
 800d832:	681a      	ldreq	r2, [r3, #0]
 800d834:	685b      	ldreq	r3, [r3, #4]
 800d836:	6063      	str	r3, [r4, #4]
 800d838:	bf04      	itt	eq
 800d83a:	1852      	addeq	r2, r2, r1
 800d83c:	6022      	streq	r2, [r4, #0]
 800d83e:	6004      	str	r4, [r0, #0]
 800d840:	e7ec      	b.n	800d81c <_free_r+0x24>
 800d842:	4613      	mov	r3, r2
 800d844:	685a      	ldr	r2, [r3, #4]
 800d846:	b10a      	cbz	r2, 800d84c <_free_r+0x54>
 800d848:	42a2      	cmp	r2, r4
 800d84a:	d9fa      	bls.n	800d842 <_free_r+0x4a>
 800d84c:	6819      	ldr	r1, [r3, #0]
 800d84e:	1858      	adds	r0, r3, r1
 800d850:	42a0      	cmp	r0, r4
 800d852:	d10b      	bne.n	800d86c <_free_r+0x74>
 800d854:	6820      	ldr	r0, [r4, #0]
 800d856:	4401      	add	r1, r0
 800d858:	1858      	adds	r0, r3, r1
 800d85a:	4282      	cmp	r2, r0
 800d85c:	6019      	str	r1, [r3, #0]
 800d85e:	d1dd      	bne.n	800d81c <_free_r+0x24>
 800d860:	6810      	ldr	r0, [r2, #0]
 800d862:	6852      	ldr	r2, [r2, #4]
 800d864:	605a      	str	r2, [r3, #4]
 800d866:	4401      	add	r1, r0
 800d868:	6019      	str	r1, [r3, #0]
 800d86a:	e7d7      	b.n	800d81c <_free_r+0x24>
 800d86c:	d902      	bls.n	800d874 <_free_r+0x7c>
 800d86e:	230c      	movs	r3, #12
 800d870:	602b      	str	r3, [r5, #0]
 800d872:	e7d3      	b.n	800d81c <_free_r+0x24>
 800d874:	6820      	ldr	r0, [r4, #0]
 800d876:	1821      	adds	r1, r4, r0
 800d878:	428a      	cmp	r2, r1
 800d87a:	bf04      	itt	eq
 800d87c:	6811      	ldreq	r1, [r2, #0]
 800d87e:	6852      	ldreq	r2, [r2, #4]
 800d880:	6062      	str	r2, [r4, #4]
 800d882:	bf04      	itt	eq
 800d884:	1809      	addeq	r1, r1, r0
 800d886:	6021      	streq	r1, [r4, #0]
 800d888:	605c      	str	r4, [r3, #4]
 800d88a:	e7c7      	b.n	800d81c <_free_r+0x24>
 800d88c:	bd38      	pop	{r3, r4, r5, pc}
 800d88e:	bf00      	nop
 800d890:	20000988 	.word	0x20000988

0800d894 <_malloc_r>:
 800d894:	b570      	push	{r4, r5, r6, lr}
 800d896:	1ccd      	adds	r5, r1, #3
 800d898:	f025 0503 	bic.w	r5, r5, #3
 800d89c:	3508      	adds	r5, #8
 800d89e:	2d0c      	cmp	r5, #12
 800d8a0:	bf38      	it	cc
 800d8a2:	250c      	movcc	r5, #12
 800d8a4:	2d00      	cmp	r5, #0
 800d8a6:	4606      	mov	r6, r0
 800d8a8:	db01      	blt.n	800d8ae <_malloc_r+0x1a>
 800d8aa:	42a9      	cmp	r1, r5
 800d8ac:	d903      	bls.n	800d8b6 <_malloc_r+0x22>
 800d8ae:	230c      	movs	r3, #12
 800d8b0:	6033      	str	r3, [r6, #0]
 800d8b2:	2000      	movs	r0, #0
 800d8b4:	bd70      	pop	{r4, r5, r6, pc}
 800d8b6:	f002 fefb 	bl	80106b0 <__malloc_lock>
 800d8ba:	4a21      	ldr	r2, [pc, #132]	; (800d940 <_malloc_r+0xac>)
 800d8bc:	6814      	ldr	r4, [r2, #0]
 800d8be:	4621      	mov	r1, r4
 800d8c0:	b991      	cbnz	r1, 800d8e8 <_malloc_r+0x54>
 800d8c2:	4c20      	ldr	r4, [pc, #128]	; (800d944 <_malloc_r+0xb0>)
 800d8c4:	6823      	ldr	r3, [r4, #0]
 800d8c6:	b91b      	cbnz	r3, 800d8d0 <_malloc_r+0x3c>
 800d8c8:	4630      	mov	r0, r6
 800d8ca:	f000 fe7b 	bl	800e5c4 <_sbrk_r>
 800d8ce:	6020      	str	r0, [r4, #0]
 800d8d0:	4629      	mov	r1, r5
 800d8d2:	4630      	mov	r0, r6
 800d8d4:	f000 fe76 	bl	800e5c4 <_sbrk_r>
 800d8d8:	1c43      	adds	r3, r0, #1
 800d8da:	d124      	bne.n	800d926 <_malloc_r+0x92>
 800d8dc:	230c      	movs	r3, #12
 800d8de:	6033      	str	r3, [r6, #0]
 800d8e0:	4630      	mov	r0, r6
 800d8e2:	f002 fee6 	bl	80106b2 <__malloc_unlock>
 800d8e6:	e7e4      	b.n	800d8b2 <_malloc_r+0x1e>
 800d8e8:	680b      	ldr	r3, [r1, #0]
 800d8ea:	1b5b      	subs	r3, r3, r5
 800d8ec:	d418      	bmi.n	800d920 <_malloc_r+0x8c>
 800d8ee:	2b0b      	cmp	r3, #11
 800d8f0:	d90f      	bls.n	800d912 <_malloc_r+0x7e>
 800d8f2:	600b      	str	r3, [r1, #0]
 800d8f4:	50cd      	str	r5, [r1, r3]
 800d8f6:	18cc      	adds	r4, r1, r3
 800d8f8:	4630      	mov	r0, r6
 800d8fa:	f002 feda 	bl	80106b2 <__malloc_unlock>
 800d8fe:	f104 000b 	add.w	r0, r4, #11
 800d902:	1d23      	adds	r3, r4, #4
 800d904:	f020 0007 	bic.w	r0, r0, #7
 800d908:	1ac3      	subs	r3, r0, r3
 800d90a:	d0d3      	beq.n	800d8b4 <_malloc_r+0x20>
 800d90c:	425a      	negs	r2, r3
 800d90e:	50e2      	str	r2, [r4, r3]
 800d910:	e7d0      	b.n	800d8b4 <_malloc_r+0x20>
 800d912:	428c      	cmp	r4, r1
 800d914:	684b      	ldr	r3, [r1, #4]
 800d916:	bf16      	itet	ne
 800d918:	6063      	strne	r3, [r4, #4]
 800d91a:	6013      	streq	r3, [r2, #0]
 800d91c:	460c      	movne	r4, r1
 800d91e:	e7eb      	b.n	800d8f8 <_malloc_r+0x64>
 800d920:	460c      	mov	r4, r1
 800d922:	6849      	ldr	r1, [r1, #4]
 800d924:	e7cc      	b.n	800d8c0 <_malloc_r+0x2c>
 800d926:	1cc4      	adds	r4, r0, #3
 800d928:	f024 0403 	bic.w	r4, r4, #3
 800d92c:	42a0      	cmp	r0, r4
 800d92e:	d005      	beq.n	800d93c <_malloc_r+0xa8>
 800d930:	1a21      	subs	r1, r4, r0
 800d932:	4630      	mov	r0, r6
 800d934:	f000 fe46 	bl	800e5c4 <_sbrk_r>
 800d938:	3001      	adds	r0, #1
 800d93a:	d0cf      	beq.n	800d8dc <_malloc_r+0x48>
 800d93c:	6025      	str	r5, [r4, #0]
 800d93e:	e7db      	b.n	800d8f8 <_malloc_r+0x64>
 800d940:	20000988 	.word	0x20000988
 800d944:	2000098c 	.word	0x2000098c

0800d948 <__cvt>:
 800d948:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d94c:	ec55 4b10 	vmov	r4, r5, d0
 800d950:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800d952:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d956:	2d00      	cmp	r5, #0
 800d958:	460e      	mov	r6, r1
 800d95a:	4691      	mov	r9, r2
 800d95c:	4619      	mov	r1, r3
 800d95e:	bfb8      	it	lt
 800d960:	4622      	movlt	r2, r4
 800d962:	462b      	mov	r3, r5
 800d964:	f027 0720 	bic.w	r7, r7, #32
 800d968:	bfbb      	ittet	lt
 800d96a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d96e:	461d      	movlt	r5, r3
 800d970:	2300      	movge	r3, #0
 800d972:	232d      	movlt	r3, #45	; 0x2d
 800d974:	bfb8      	it	lt
 800d976:	4614      	movlt	r4, r2
 800d978:	2f46      	cmp	r7, #70	; 0x46
 800d97a:	700b      	strb	r3, [r1, #0]
 800d97c:	d004      	beq.n	800d988 <__cvt+0x40>
 800d97e:	2f45      	cmp	r7, #69	; 0x45
 800d980:	d100      	bne.n	800d984 <__cvt+0x3c>
 800d982:	3601      	adds	r6, #1
 800d984:	2102      	movs	r1, #2
 800d986:	e000      	b.n	800d98a <__cvt+0x42>
 800d988:	2103      	movs	r1, #3
 800d98a:	ab03      	add	r3, sp, #12
 800d98c:	9301      	str	r3, [sp, #4]
 800d98e:	ab02      	add	r3, sp, #8
 800d990:	9300      	str	r3, [sp, #0]
 800d992:	4632      	mov	r2, r6
 800d994:	4653      	mov	r3, sl
 800d996:	ec45 4b10 	vmov	d0, r4, r5
 800d99a:	f001 fd85 	bl	800f4a8 <_dtoa_r>
 800d99e:	2f47      	cmp	r7, #71	; 0x47
 800d9a0:	4680      	mov	r8, r0
 800d9a2:	d102      	bne.n	800d9aa <__cvt+0x62>
 800d9a4:	f019 0f01 	tst.w	r9, #1
 800d9a8:	d026      	beq.n	800d9f8 <__cvt+0xb0>
 800d9aa:	2f46      	cmp	r7, #70	; 0x46
 800d9ac:	eb08 0906 	add.w	r9, r8, r6
 800d9b0:	d111      	bne.n	800d9d6 <__cvt+0x8e>
 800d9b2:	f898 3000 	ldrb.w	r3, [r8]
 800d9b6:	2b30      	cmp	r3, #48	; 0x30
 800d9b8:	d10a      	bne.n	800d9d0 <__cvt+0x88>
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	2300      	movs	r3, #0
 800d9be:	4620      	mov	r0, r4
 800d9c0:	4629      	mov	r1, r5
 800d9c2:	f7f3 f881 	bl	8000ac8 <__aeabi_dcmpeq>
 800d9c6:	b918      	cbnz	r0, 800d9d0 <__cvt+0x88>
 800d9c8:	f1c6 0601 	rsb	r6, r6, #1
 800d9cc:	f8ca 6000 	str.w	r6, [sl]
 800d9d0:	f8da 3000 	ldr.w	r3, [sl]
 800d9d4:	4499      	add	r9, r3
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	2300      	movs	r3, #0
 800d9da:	4620      	mov	r0, r4
 800d9dc:	4629      	mov	r1, r5
 800d9de:	f7f3 f873 	bl	8000ac8 <__aeabi_dcmpeq>
 800d9e2:	b938      	cbnz	r0, 800d9f4 <__cvt+0xac>
 800d9e4:	2230      	movs	r2, #48	; 0x30
 800d9e6:	9b03      	ldr	r3, [sp, #12]
 800d9e8:	454b      	cmp	r3, r9
 800d9ea:	d205      	bcs.n	800d9f8 <__cvt+0xb0>
 800d9ec:	1c59      	adds	r1, r3, #1
 800d9ee:	9103      	str	r1, [sp, #12]
 800d9f0:	701a      	strb	r2, [r3, #0]
 800d9f2:	e7f8      	b.n	800d9e6 <__cvt+0x9e>
 800d9f4:	f8cd 900c 	str.w	r9, [sp, #12]
 800d9f8:	9b03      	ldr	r3, [sp, #12]
 800d9fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d9fc:	eba3 0308 	sub.w	r3, r3, r8
 800da00:	4640      	mov	r0, r8
 800da02:	6013      	str	r3, [r2, #0]
 800da04:	b004      	add	sp, #16
 800da06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800da0a <__exponent>:
 800da0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800da0c:	2900      	cmp	r1, #0
 800da0e:	4604      	mov	r4, r0
 800da10:	bfba      	itte	lt
 800da12:	4249      	neglt	r1, r1
 800da14:	232d      	movlt	r3, #45	; 0x2d
 800da16:	232b      	movge	r3, #43	; 0x2b
 800da18:	2909      	cmp	r1, #9
 800da1a:	f804 2b02 	strb.w	r2, [r4], #2
 800da1e:	7043      	strb	r3, [r0, #1]
 800da20:	dd20      	ble.n	800da64 <__exponent+0x5a>
 800da22:	f10d 0307 	add.w	r3, sp, #7
 800da26:	461f      	mov	r7, r3
 800da28:	260a      	movs	r6, #10
 800da2a:	fb91 f5f6 	sdiv	r5, r1, r6
 800da2e:	fb06 1115 	mls	r1, r6, r5, r1
 800da32:	3130      	adds	r1, #48	; 0x30
 800da34:	2d09      	cmp	r5, #9
 800da36:	f803 1c01 	strb.w	r1, [r3, #-1]
 800da3a:	f103 32ff 	add.w	r2, r3, #4294967295
 800da3e:	4629      	mov	r1, r5
 800da40:	dc09      	bgt.n	800da56 <__exponent+0x4c>
 800da42:	3130      	adds	r1, #48	; 0x30
 800da44:	3b02      	subs	r3, #2
 800da46:	f802 1c01 	strb.w	r1, [r2, #-1]
 800da4a:	42bb      	cmp	r3, r7
 800da4c:	4622      	mov	r2, r4
 800da4e:	d304      	bcc.n	800da5a <__exponent+0x50>
 800da50:	1a10      	subs	r0, r2, r0
 800da52:	b003      	add	sp, #12
 800da54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da56:	4613      	mov	r3, r2
 800da58:	e7e7      	b.n	800da2a <__exponent+0x20>
 800da5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da5e:	f804 2b01 	strb.w	r2, [r4], #1
 800da62:	e7f2      	b.n	800da4a <__exponent+0x40>
 800da64:	2330      	movs	r3, #48	; 0x30
 800da66:	4419      	add	r1, r3
 800da68:	7083      	strb	r3, [r0, #2]
 800da6a:	1d02      	adds	r2, r0, #4
 800da6c:	70c1      	strb	r1, [r0, #3]
 800da6e:	e7ef      	b.n	800da50 <__exponent+0x46>

0800da70 <_printf_float>:
 800da70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da74:	b08d      	sub	sp, #52	; 0x34
 800da76:	460c      	mov	r4, r1
 800da78:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800da7c:	4616      	mov	r6, r2
 800da7e:	461f      	mov	r7, r3
 800da80:	4605      	mov	r5, r0
 800da82:	f002 fdf5 	bl	8010670 <_localeconv_r>
 800da86:	6803      	ldr	r3, [r0, #0]
 800da88:	9304      	str	r3, [sp, #16]
 800da8a:	4618      	mov	r0, r3
 800da8c:	f7f2 fba0 	bl	80001d0 <strlen>
 800da90:	2300      	movs	r3, #0
 800da92:	930a      	str	r3, [sp, #40]	; 0x28
 800da94:	f8d8 3000 	ldr.w	r3, [r8]
 800da98:	9005      	str	r0, [sp, #20]
 800da9a:	3307      	adds	r3, #7
 800da9c:	f023 0307 	bic.w	r3, r3, #7
 800daa0:	f103 0208 	add.w	r2, r3, #8
 800daa4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800daa8:	f8d4 b000 	ldr.w	fp, [r4]
 800daac:	f8c8 2000 	str.w	r2, [r8]
 800dab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dab4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800dab8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800dabc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800dac0:	9307      	str	r3, [sp, #28]
 800dac2:	f8cd 8018 	str.w	r8, [sp, #24]
 800dac6:	f04f 32ff 	mov.w	r2, #4294967295
 800daca:	4ba7      	ldr	r3, [pc, #668]	; (800dd68 <_printf_float+0x2f8>)
 800dacc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dad0:	f7f3 f82c 	bl	8000b2c <__aeabi_dcmpun>
 800dad4:	bb70      	cbnz	r0, 800db34 <_printf_float+0xc4>
 800dad6:	f04f 32ff 	mov.w	r2, #4294967295
 800dada:	4ba3      	ldr	r3, [pc, #652]	; (800dd68 <_printf_float+0x2f8>)
 800dadc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dae0:	f7f3 f806 	bl	8000af0 <__aeabi_dcmple>
 800dae4:	bb30      	cbnz	r0, 800db34 <_printf_float+0xc4>
 800dae6:	2200      	movs	r2, #0
 800dae8:	2300      	movs	r3, #0
 800daea:	4640      	mov	r0, r8
 800daec:	4649      	mov	r1, r9
 800daee:	f7f2 fff5 	bl	8000adc <__aeabi_dcmplt>
 800daf2:	b110      	cbz	r0, 800dafa <_printf_float+0x8a>
 800daf4:	232d      	movs	r3, #45	; 0x2d
 800daf6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dafa:	4a9c      	ldr	r2, [pc, #624]	; (800dd6c <_printf_float+0x2fc>)
 800dafc:	4b9c      	ldr	r3, [pc, #624]	; (800dd70 <_printf_float+0x300>)
 800dafe:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800db02:	bf8c      	ite	hi
 800db04:	4690      	movhi	r8, r2
 800db06:	4698      	movls	r8, r3
 800db08:	2303      	movs	r3, #3
 800db0a:	f02b 0204 	bic.w	r2, fp, #4
 800db0e:	6123      	str	r3, [r4, #16]
 800db10:	6022      	str	r2, [r4, #0]
 800db12:	f04f 0900 	mov.w	r9, #0
 800db16:	9700      	str	r7, [sp, #0]
 800db18:	4633      	mov	r3, r6
 800db1a:	aa0b      	add	r2, sp, #44	; 0x2c
 800db1c:	4621      	mov	r1, r4
 800db1e:	4628      	mov	r0, r5
 800db20:	f000 f9e6 	bl	800def0 <_printf_common>
 800db24:	3001      	adds	r0, #1
 800db26:	f040 808d 	bne.w	800dc44 <_printf_float+0x1d4>
 800db2a:	f04f 30ff 	mov.w	r0, #4294967295
 800db2e:	b00d      	add	sp, #52	; 0x34
 800db30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db34:	4642      	mov	r2, r8
 800db36:	464b      	mov	r3, r9
 800db38:	4640      	mov	r0, r8
 800db3a:	4649      	mov	r1, r9
 800db3c:	f7f2 fff6 	bl	8000b2c <__aeabi_dcmpun>
 800db40:	b110      	cbz	r0, 800db48 <_printf_float+0xd8>
 800db42:	4a8c      	ldr	r2, [pc, #560]	; (800dd74 <_printf_float+0x304>)
 800db44:	4b8c      	ldr	r3, [pc, #560]	; (800dd78 <_printf_float+0x308>)
 800db46:	e7da      	b.n	800dafe <_printf_float+0x8e>
 800db48:	6861      	ldr	r1, [r4, #4]
 800db4a:	1c4b      	adds	r3, r1, #1
 800db4c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800db50:	a80a      	add	r0, sp, #40	; 0x28
 800db52:	d13e      	bne.n	800dbd2 <_printf_float+0x162>
 800db54:	2306      	movs	r3, #6
 800db56:	6063      	str	r3, [r4, #4]
 800db58:	2300      	movs	r3, #0
 800db5a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800db5e:	ab09      	add	r3, sp, #36	; 0x24
 800db60:	9300      	str	r3, [sp, #0]
 800db62:	ec49 8b10 	vmov	d0, r8, r9
 800db66:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800db6a:	6022      	str	r2, [r4, #0]
 800db6c:	f8cd a004 	str.w	sl, [sp, #4]
 800db70:	6861      	ldr	r1, [r4, #4]
 800db72:	4628      	mov	r0, r5
 800db74:	f7ff fee8 	bl	800d948 <__cvt>
 800db78:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800db7c:	2b47      	cmp	r3, #71	; 0x47
 800db7e:	4680      	mov	r8, r0
 800db80:	d109      	bne.n	800db96 <_printf_float+0x126>
 800db82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db84:	1cd8      	adds	r0, r3, #3
 800db86:	db02      	blt.n	800db8e <_printf_float+0x11e>
 800db88:	6862      	ldr	r2, [r4, #4]
 800db8a:	4293      	cmp	r3, r2
 800db8c:	dd47      	ble.n	800dc1e <_printf_float+0x1ae>
 800db8e:	f1aa 0a02 	sub.w	sl, sl, #2
 800db92:	fa5f fa8a 	uxtb.w	sl, sl
 800db96:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800db9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800db9c:	d824      	bhi.n	800dbe8 <_printf_float+0x178>
 800db9e:	3901      	subs	r1, #1
 800dba0:	4652      	mov	r2, sl
 800dba2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800dba6:	9109      	str	r1, [sp, #36]	; 0x24
 800dba8:	f7ff ff2f 	bl	800da0a <__exponent>
 800dbac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dbae:	1813      	adds	r3, r2, r0
 800dbb0:	2a01      	cmp	r2, #1
 800dbb2:	4681      	mov	r9, r0
 800dbb4:	6123      	str	r3, [r4, #16]
 800dbb6:	dc02      	bgt.n	800dbbe <_printf_float+0x14e>
 800dbb8:	6822      	ldr	r2, [r4, #0]
 800dbba:	07d1      	lsls	r1, r2, #31
 800dbbc:	d501      	bpl.n	800dbc2 <_printf_float+0x152>
 800dbbe:	3301      	adds	r3, #1
 800dbc0:	6123      	str	r3, [r4, #16]
 800dbc2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d0a5      	beq.n	800db16 <_printf_float+0xa6>
 800dbca:	232d      	movs	r3, #45	; 0x2d
 800dbcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dbd0:	e7a1      	b.n	800db16 <_printf_float+0xa6>
 800dbd2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800dbd6:	f000 8177 	beq.w	800dec8 <_printf_float+0x458>
 800dbda:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800dbde:	d1bb      	bne.n	800db58 <_printf_float+0xe8>
 800dbe0:	2900      	cmp	r1, #0
 800dbe2:	d1b9      	bne.n	800db58 <_printf_float+0xe8>
 800dbe4:	2301      	movs	r3, #1
 800dbe6:	e7b6      	b.n	800db56 <_printf_float+0xe6>
 800dbe8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800dbec:	d119      	bne.n	800dc22 <_printf_float+0x1b2>
 800dbee:	2900      	cmp	r1, #0
 800dbf0:	6863      	ldr	r3, [r4, #4]
 800dbf2:	dd0c      	ble.n	800dc0e <_printf_float+0x19e>
 800dbf4:	6121      	str	r1, [r4, #16]
 800dbf6:	b913      	cbnz	r3, 800dbfe <_printf_float+0x18e>
 800dbf8:	6822      	ldr	r2, [r4, #0]
 800dbfa:	07d2      	lsls	r2, r2, #31
 800dbfc:	d502      	bpl.n	800dc04 <_printf_float+0x194>
 800dbfe:	3301      	adds	r3, #1
 800dc00:	440b      	add	r3, r1
 800dc02:	6123      	str	r3, [r4, #16]
 800dc04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc06:	65a3      	str	r3, [r4, #88]	; 0x58
 800dc08:	f04f 0900 	mov.w	r9, #0
 800dc0c:	e7d9      	b.n	800dbc2 <_printf_float+0x152>
 800dc0e:	b913      	cbnz	r3, 800dc16 <_printf_float+0x1a6>
 800dc10:	6822      	ldr	r2, [r4, #0]
 800dc12:	07d0      	lsls	r0, r2, #31
 800dc14:	d501      	bpl.n	800dc1a <_printf_float+0x1aa>
 800dc16:	3302      	adds	r3, #2
 800dc18:	e7f3      	b.n	800dc02 <_printf_float+0x192>
 800dc1a:	2301      	movs	r3, #1
 800dc1c:	e7f1      	b.n	800dc02 <_printf_float+0x192>
 800dc1e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800dc22:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800dc26:	4293      	cmp	r3, r2
 800dc28:	db05      	blt.n	800dc36 <_printf_float+0x1c6>
 800dc2a:	6822      	ldr	r2, [r4, #0]
 800dc2c:	6123      	str	r3, [r4, #16]
 800dc2e:	07d1      	lsls	r1, r2, #31
 800dc30:	d5e8      	bpl.n	800dc04 <_printf_float+0x194>
 800dc32:	3301      	adds	r3, #1
 800dc34:	e7e5      	b.n	800dc02 <_printf_float+0x192>
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	bfd4      	ite	le
 800dc3a:	f1c3 0302 	rsble	r3, r3, #2
 800dc3e:	2301      	movgt	r3, #1
 800dc40:	4413      	add	r3, r2
 800dc42:	e7de      	b.n	800dc02 <_printf_float+0x192>
 800dc44:	6823      	ldr	r3, [r4, #0]
 800dc46:	055a      	lsls	r2, r3, #21
 800dc48:	d407      	bmi.n	800dc5a <_printf_float+0x1ea>
 800dc4a:	6923      	ldr	r3, [r4, #16]
 800dc4c:	4642      	mov	r2, r8
 800dc4e:	4631      	mov	r1, r6
 800dc50:	4628      	mov	r0, r5
 800dc52:	47b8      	blx	r7
 800dc54:	3001      	adds	r0, #1
 800dc56:	d12b      	bne.n	800dcb0 <_printf_float+0x240>
 800dc58:	e767      	b.n	800db2a <_printf_float+0xba>
 800dc5a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800dc5e:	f240 80dc 	bls.w	800de1a <_printf_float+0x3aa>
 800dc62:	2200      	movs	r2, #0
 800dc64:	2300      	movs	r3, #0
 800dc66:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dc6a:	f7f2 ff2d 	bl	8000ac8 <__aeabi_dcmpeq>
 800dc6e:	2800      	cmp	r0, #0
 800dc70:	d033      	beq.n	800dcda <_printf_float+0x26a>
 800dc72:	2301      	movs	r3, #1
 800dc74:	4a41      	ldr	r2, [pc, #260]	; (800dd7c <_printf_float+0x30c>)
 800dc76:	4631      	mov	r1, r6
 800dc78:	4628      	mov	r0, r5
 800dc7a:	47b8      	blx	r7
 800dc7c:	3001      	adds	r0, #1
 800dc7e:	f43f af54 	beq.w	800db2a <_printf_float+0xba>
 800dc82:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dc86:	429a      	cmp	r2, r3
 800dc88:	db02      	blt.n	800dc90 <_printf_float+0x220>
 800dc8a:	6823      	ldr	r3, [r4, #0]
 800dc8c:	07d8      	lsls	r0, r3, #31
 800dc8e:	d50f      	bpl.n	800dcb0 <_printf_float+0x240>
 800dc90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dc94:	4631      	mov	r1, r6
 800dc96:	4628      	mov	r0, r5
 800dc98:	47b8      	blx	r7
 800dc9a:	3001      	adds	r0, #1
 800dc9c:	f43f af45 	beq.w	800db2a <_printf_float+0xba>
 800dca0:	f04f 0800 	mov.w	r8, #0
 800dca4:	f104 091a 	add.w	r9, r4, #26
 800dca8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dcaa:	3b01      	subs	r3, #1
 800dcac:	4543      	cmp	r3, r8
 800dcae:	dc09      	bgt.n	800dcc4 <_printf_float+0x254>
 800dcb0:	6823      	ldr	r3, [r4, #0]
 800dcb2:	079b      	lsls	r3, r3, #30
 800dcb4:	f100 8103 	bmi.w	800debe <_printf_float+0x44e>
 800dcb8:	68e0      	ldr	r0, [r4, #12]
 800dcba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dcbc:	4298      	cmp	r0, r3
 800dcbe:	bfb8      	it	lt
 800dcc0:	4618      	movlt	r0, r3
 800dcc2:	e734      	b.n	800db2e <_printf_float+0xbe>
 800dcc4:	2301      	movs	r3, #1
 800dcc6:	464a      	mov	r2, r9
 800dcc8:	4631      	mov	r1, r6
 800dcca:	4628      	mov	r0, r5
 800dccc:	47b8      	blx	r7
 800dcce:	3001      	adds	r0, #1
 800dcd0:	f43f af2b 	beq.w	800db2a <_printf_float+0xba>
 800dcd4:	f108 0801 	add.w	r8, r8, #1
 800dcd8:	e7e6      	b.n	800dca8 <_printf_float+0x238>
 800dcda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	dc2b      	bgt.n	800dd38 <_printf_float+0x2c8>
 800dce0:	2301      	movs	r3, #1
 800dce2:	4a26      	ldr	r2, [pc, #152]	; (800dd7c <_printf_float+0x30c>)
 800dce4:	4631      	mov	r1, r6
 800dce6:	4628      	mov	r0, r5
 800dce8:	47b8      	blx	r7
 800dcea:	3001      	adds	r0, #1
 800dcec:	f43f af1d 	beq.w	800db2a <_printf_float+0xba>
 800dcf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcf2:	b923      	cbnz	r3, 800dcfe <_printf_float+0x28e>
 800dcf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dcf6:	b913      	cbnz	r3, 800dcfe <_printf_float+0x28e>
 800dcf8:	6823      	ldr	r3, [r4, #0]
 800dcfa:	07d9      	lsls	r1, r3, #31
 800dcfc:	d5d8      	bpl.n	800dcb0 <_printf_float+0x240>
 800dcfe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dd02:	4631      	mov	r1, r6
 800dd04:	4628      	mov	r0, r5
 800dd06:	47b8      	blx	r7
 800dd08:	3001      	adds	r0, #1
 800dd0a:	f43f af0e 	beq.w	800db2a <_printf_float+0xba>
 800dd0e:	f04f 0900 	mov.w	r9, #0
 800dd12:	f104 0a1a 	add.w	sl, r4, #26
 800dd16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd18:	425b      	negs	r3, r3
 800dd1a:	454b      	cmp	r3, r9
 800dd1c:	dc01      	bgt.n	800dd22 <_printf_float+0x2b2>
 800dd1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd20:	e794      	b.n	800dc4c <_printf_float+0x1dc>
 800dd22:	2301      	movs	r3, #1
 800dd24:	4652      	mov	r2, sl
 800dd26:	4631      	mov	r1, r6
 800dd28:	4628      	mov	r0, r5
 800dd2a:	47b8      	blx	r7
 800dd2c:	3001      	adds	r0, #1
 800dd2e:	f43f aefc 	beq.w	800db2a <_printf_float+0xba>
 800dd32:	f109 0901 	add.w	r9, r9, #1
 800dd36:	e7ee      	b.n	800dd16 <_printf_float+0x2a6>
 800dd38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dd3a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dd3c:	429a      	cmp	r2, r3
 800dd3e:	bfa8      	it	ge
 800dd40:	461a      	movge	r2, r3
 800dd42:	2a00      	cmp	r2, #0
 800dd44:	4691      	mov	r9, r2
 800dd46:	dd07      	ble.n	800dd58 <_printf_float+0x2e8>
 800dd48:	4613      	mov	r3, r2
 800dd4a:	4631      	mov	r1, r6
 800dd4c:	4642      	mov	r2, r8
 800dd4e:	4628      	mov	r0, r5
 800dd50:	47b8      	blx	r7
 800dd52:	3001      	adds	r0, #1
 800dd54:	f43f aee9 	beq.w	800db2a <_printf_float+0xba>
 800dd58:	f104 031a 	add.w	r3, r4, #26
 800dd5c:	f04f 0b00 	mov.w	fp, #0
 800dd60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dd64:	9306      	str	r3, [sp, #24]
 800dd66:	e015      	b.n	800dd94 <_printf_float+0x324>
 800dd68:	7fefffff 	.word	0x7fefffff
 800dd6c:	08011900 	.word	0x08011900
 800dd70:	080118fc 	.word	0x080118fc
 800dd74:	08011908 	.word	0x08011908
 800dd78:	08011904 	.word	0x08011904
 800dd7c:	0801190c 	.word	0x0801190c
 800dd80:	2301      	movs	r3, #1
 800dd82:	9a06      	ldr	r2, [sp, #24]
 800dd84:	4631      	mov	r1, r6
 800dd86:	4628      	mov	r0, r5
 800dd88:	47b8      	blx	r7
 800dd8a:	3001      	adds	r0, #1
 800dd8c:	f43f aecd 	beq.w	800db2a <_printf_float+0xba>
 800dd90:	f10b 0b01 	add.w	fp, fp, #1
 800dd94:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800dd98:	ebaa 0309 	sub.w	r3, sl, r9
 800dd9c:	455b      	cmp	r3, fp
 800dd9e:	dcef      	bgt.n	800dd80 <_printf_float+0x310>
 800dda0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dda4:	429a      	cmp	r2, r3
 800dda6:	44d0      	add	r8, sl
 800dda8:	db15      	blt.n	800ddd6 <_printf_float+0x366>
 800ddaa:	6823      	ldr	r3, [r4, #0]
 800ddac:	07da      	lsls	r2, r3, #31
 800ddae:	d412      	bmi.n	800ddd6 <_printf_float+0x366>
 800ddb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ddb2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ddb4:	eba3 020a 	sub.w	r2, r3, sl
 800ddb8:	eba3 0a01 	sub.w	sl, r3, r1
 800ddbc:	4592      	cmp	sl, r2
 800ddbe:	bfa8      	it	ge
 800ddc0:	4692      	movge	sl, r2
 800ddc2:	f1ba 0f00 	cmp.w	sl, #0
 800ddc6:	dc0e      	bgt.n	800dde6 <_printf_float+0x376>
 800ddc8:	f04f 0800 	mov.w	r8, #0
 800ddcc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ddd0:	f104 091a 	add.w	r9, r4, #26
 800ddd4:	e019      	b.n	800de0a <_printf_float+0x39a>
 800ddd6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ddda:	4631      	mov	r1, r6
 800dddc:	4628      	mov	r0, r5
 800ddde:	47b8      	blx	r7
 800dde0:	3001      	adds	r0, #1
 800dde2:	d1e5      	bne.n	800ddb0 <_printf_float+0x340>
 800dde4:	e6a1      	b.n	800db2a <_printf_float+0xba>
 800dde6:	4653      	mov	r3, sl
 800dde8:	4642      	mov	r2, r8
 800ddea:	4631      	mov	r1, r6
 800ddec:	4628      	mov	r0, r5
 800ddee:	47b8      	blx	r7
 800ddf0:	3001      	adds	r0, #1
 800ddf2:	d1e9      	bne.n	800ddc8 <_printf_float+0x358>
 800ddf4:	e699      	b.n	800db2a <_printf_float+0xba>
 800ddf6:	2301      	movs	r3, #1
 800ddf8:	464a      	mov	r2, r9
 800ddfa:	4631      	mov	r1, r6
 800ddfc:	4628      	mov	r0, r5
 800ddfe:	47b8      	blx	r7
 800de00:	3001      	adds	r0, #1
 800de02:	f43f ae92 	beq.w	800db2a <_printf_float+0xba>
 800de06:	f108 0801 	add.w	r8, r8, #1
 800de0a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800de0e:	1a9b      	subs	r3, r3, r2
 800de10:	eba3 030a 	sub.w	r3, r3, sl
 800de14:	4543      	cmp	r3, r8
 800de16:	dcee      	bgt.n	800ddf6 <_printf_float+0x386>
 800de18:	e74a      	b.n	800dcb0 <_printf_float+0x240>
 800de1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800de1c:	2a01      	cmp	r2, #1
 800de1e:	dc01      	bgt.n	800de24 <_printf_float+0x3b4>
 800de20:	07db      	lsls	r3, r3, #31
 800de22:	d53a      	bpl.n	800de9a <_printf_float+0x42a>
 800de24:	2301      	movs	r3, #1
 800de26:	4642      	mov	r2, r8
 800de28:	4631      	mov	r1, r6
 800de2a:	4628      	mov	r0, r5
 800de2c:	47b8      	blx	r7
 800de2e:	3001      	adds	r0, #1
 800de30:	f43f ae7b 	beq.w	800db2a <_printf_float+0xba>
 800de34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800de38:	4631      	mov	r1, r6
 800de3a:	4628      	mov	r0, r5
 800de3c:	47b8      	blx	r7
 800de3e:	3001      	adds	r0, #1
 800de40:	f108 0801 	add.w	r8, r8, #1
 800de44:	f43f ae71 	beq.w	800db2a <_printf_float+0xba>
 800de48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de4a:	2200      	movs	r2, #0
 800de4c:	f103 3aff 	add.w	sl, r3, #4294967295
 800de50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800de54:	2300      	movs	r3, #0
 800de56:	f7f2 fe37 	bl	8000ac8 <__aeabi_dcmpeq>
 800de5a:	b9c8      	cbnz	r0, 800de90 <_printf_float+0x420>
 800de5c:	4653      	mov	r3, sl
 800de5e:	4642      	mov	r2, r8
 800de60:	4631      	mov	r1, r6
 800de62:	4628      	mov	r0, r5
 800de64:	47b8      	blx	r7
 800de66:	3001      	adds	r0, #1
 800de68:	d10e      	bne.n	800de88 <_printf_float+0x418>
 800de6a:	e65e      	b.n	800db2a <_printf_float+0xba>
 800de6c:	2301      	movs	r3, #1
 800de6e:	4652      	mov	r2, sl
 800de70:	4631      	mov	r1, r6
 800de72:	4628      	mov	r0, r5
 800de74:	47b8      	blx	r7
 800de76:	3001      	adds	r0, #1
 800de78:	f43f ae57 	beq.w	800db2a <_printf_float+0xba>
 800de7c:	f108 0801 	add.w	r8, r8, #1
 800de80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de82:	3b01      	subs	r3, #1
 800de84:	4543      	cmp	r3, r8
 800de86:	dcf1      	bgt.n	800de6c <_printf_float+0x3fc>
 800de88:	464b      	mov	r3, r9
 800de8a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800de8e:	e6de      	b.n	800dc4e <_printf_float+0x1de>
 800de90:	f04f 0800 	mov.w	r8, #0
 800de94:	f104 0a1a 	add.w	sl, r4, #26
 800de98:	e7f2      	b.n	800de80 <_printf_float+0x410>
 800de9a:	2301      	movs	r3, #1
 800de9c:	e7df      	b.n	800de5e <_printf_float+0x3ee>
 800de9e:	2301      	movs	r3, #1
 800dea0:	464a      	mov	r2, r9
 800dea2:	4631      	mov	r1, r6
 800dea4:	4628      	mov	r0, r5
 800dea6:	47b8      	blx	r7
 800dea8:	3001      	adds	r0, #1
 800deaa:	f43f ae3e 	beq.w	800db2a <_printf_float+0xba>
 800deae:	f108 0801 	add.w	r8, r8, #1
 800deb2:	68e3      	ldr	r3, [r4, #12]
 800deb4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800deb6:	1a9b      	subs	r3, r3, r2
 800deb8:	4543      	cmp	r3, r8
 800deba:	dcf0      	bgt.n	800de9e <_printf_float+0x42e>
 800debc:	e6fc      	b.n	800dcb8 <_printf_float+0x248>
 800debe:	f04f 0800 	mov.w	r8, #0
 800dec2:	f104 0919 	add.w	r9, r4, #25
 800dec6:	e7f4      	b.n	800deb2 <_printf_float+0x442>
 800dec8:	2900      	cmp	r1, #0
 800deca:	f43f ae8b 	beq.w	800dbe4 <_printf_float+0x174>
 800dece:	2300      	movs	r3, #0
 800ded0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800ded4:	ab09      	add	r3, sp, #36	; 0x24
 800ded6:	9300      	str	r3, [sp, #0]
 800ded8:	ec49 8b10 	vmov	d0, r8, r9
 800dedc:	6022      	str	r2, [r4, #0]
 800dede:	f8cd a004 	str.w	sl, [sp, #4]
 800dee2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800dee6:	4628      	mov	r0, r5
 800dee8:	f7ff fd2e 	bl	800d948 <__cvt>
 800deec:	4680      	mov	r8, r0
 800deee:	e648      	b.n	800db82 <_printf_float+0x112>

0800def0 <_printf_common>:
 800def0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800def4:	4691      	mov	r9, r2
 800def6:	461f      	mov	r7, r3
 800def8:	688a      	ldr	r2, [r1, #8]
 800defa:	690b      	ldr	r3, [r1, #16]
 800defc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800df00:	4293      	cmp	r3, r2
 800df02:	bfb8      	it	lt
 800df04:	4613      	movlt	r3, r2
 800df06:	f8c9 3000 	str.w	r3, [r9]
 800df0a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800df0e:	4606      	mov	r6, r0
 800df10:	460c      	mov	r4, r1
 800df12:	b112      	cbz	r2, 800df1a <_printf_common+0x2a>
 800df14:	3301      	adds	r3, #1
 800df16:	f8c9 3000 	str.w	r3, [r9]
 800df1a:	6823      	ldr	r3, [r4, #0]
 800df1c:	0699      	lsls	r1, r3, #26
 800df1e:	bf42      	ittt	mi
 800df20:	f8d9 3000 	ldrmi.w	r3, [r9]
 800df24:	3302      	addmi	r3, #2
 800df26:	f8c9 3000 	strmi.w	r3, [r9]
 800df2a:	6825      	ldr	r5, [r4, #0]
 800df2c:	f015 0506 	ands.w	r5, r5, #6
 800df30:	d107      	bne.n	800df42 <_printf_common+0x52>
 800df32:	f104 0a19 	add.w	sl, r4, #25
 800df36:	68e3      	ldr	r3, [r4, #12]
 800df38:	f8d9 2000 	ldr.w	r2, [r9]
 800df3c:	1a9b      	subs	r3, r3, r2
 800df3e:	42ab      	cmp	r3, r5
 800df40:	dc28      	bgt.n	800df94 <_printf_common+0xa4>
 800df42:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800df46:	6822      	ldr	r2, [r4, #0]
 800df48:	3300      	adds	r3, #0
 800df4a:	bf18      	it	ne
 800df4c:	2301      	movne	r3, #1
 800df4e:	0692      	lsls	r2, r2, #26
 800df50:	d42d      	bmi.n	800dfae <_printf_common+0xbe>
 800df52:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800df56:	4639      	mov	r1, r7
 800df58:	4630      	mov	r0, r6
 800df5a:	47c0      	blx	r8
 800df5c:	3001      	adds	r0, #1
 800df5e:	d020      	beq.n	800dfa2 <_printf_common+0xb2>
 800df60:	6823      	ldr	r3, [r4, #0]
 800df62:	68e5      	ldr	r5, [r4, #12]
 800df64:	f8d9 2000 	ldr.w	r2, [r9]
 800df68:	f003 0306 	and.w	r3, r3, #6
 800df6c:	2b04      	cmp	r3, #4
 800df6e:	bf08      	it	eq
 800df70:	1aad      	subeq	r5, r5, r2
 800df72:	68a3      	ldr	r3, [r4, #8]
 800df74:	6922      	ldr	r2, [r4, #16]
 800df76:	bf0c      	ite	eq
 800df78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800df7c:	2500      	movne	r5, #0
 800df7e:	4293      	cmp	r3, r2
 800df80:	bfc4      	itt	gt
 800df82:	1a9b      	subgt	r3, r3, r2
 800df84:	18ed      	addgt	r5, r5, r3
 800df86:	f04f 0900 	mov.w	r9, #0
 800df8a:	341a      	adds	r4, #26
 800df8c:	454d      	cmp	r5, r9
 800df8e:	d11a      	bne.n	800dfc6 <_printf_common+0xd6>
 800df90:	2000      	movs	r0, #0
 800df92:	e008      	b.n	800dfa6 <_printf_common+0xb6>
 800df94:	2301      	movs	r3, #1
 800df96:	4652      	mov	r2, sl
 800df98:	4639      	mov	r1, r7
 800df9a:	4630      	mov	r0, r6
 800df9c:	47c0      	blx	r8
 800df9e:	3001      	adds	r0, #1
 800dfa0:	d103      	bne.n	800dfaa <_printf_common+0xba>
 800dfa2:	f04f 30ff 	mov.w	r0, #4294967295
 800dfa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfaa:	3501      	adds	r5, #1
 800dfac:	e7c3      	b.n	800df36 <_printf_common+0x46>
 800dfae:	18e1      	adds	r1, r4, r3
 800dfb0:	1c5a      	adds	r2, r3, #1
 800dfb2:	2030      	movs	r0, #48	; 0x30
 800dfb4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dfb8:	4422      	add	r2, r4
 800dfba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dfbe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dfc2:	3302      	adds	r3, #2
 800dfc4:	e7c5      	b.n	800df52 <_printf_common+0x62>
 800dfc6:	2301      	movs	r3, #1
 800dfc8:	4622      	mov	r2, r4
 800dfca:	4639      	mov	r1, r7
 800dfcc:	4630      	mov	r0, r6
 800dfce:	47c0      	blx	r8
 800dfd0:	3001      	adds	r0, #1
 800dfd2:	d0e6      	beq.n	800dfa2 <_printf_common+0xb2>
 800dfd4:	f109 0901 	add.w	r9, r9, #1
 800dfd8:	e7d8      	b.n	800df8c <_printf_common+0x9c>
	...

0800dfdc <_printf_i>:
 800dfdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dfe0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800dfe4:	460c      	mov	r4, r1
 800dfe6:	7e09      	ldrb	r1, [r1, #24]
 800dfe8:	b085      	sub	sp, #20
 800dfea:	296e      	cmp	r1, #110	; 0x6e
 800dfec:	4617      	mov	r7, r2
 800dfee:	4606      	mov	r6, r0
 800dff0:	4698      	mov	r8, r3
 800dff2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dff4:	f000 80b3 	beq.w	800e15e <_printf_i+0x182>
 800dff8:	d822      	bhi.n	800e040 <_printf_i+0x64>
 800dffa:	2963      	cmp	r1, #99	; 0x63
 800dffc:	d036      	beq.n	800e06c <_printf_i+0x90>
 800dffe:	d80a      	bhi.n	800e016 <_printf_i+0x3a>
 800e000:	2900      	cmp	r1, #0
 800e002:	f000 80b9 	beq.w	800e178 <_printf_i+0x19c>
 800e006:	2958      	cmp	r1, #88	; 0x58
 800e008:	f000 8083 	beq.w	800e112 <_printf_i+0x136>
 800e00c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e010:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800e014:	e032      	b.n	800e07c <_printf_i+0xa0>
 800e016:	2964      	cmp	r1, #100	; 0x64
 800e018:	d001      	beq.n	800e01e <_printf_i+0x42>
 800e01a:	2969      	cmp	r1, #105	; 0x69
 800e01c:	d1f6      	bne.n	800e00c <_printf_i+0x30>
 800e01e:	6820      	ldr	r0, [r4, #0]
 800e020:	6813      	ldr	r3, [r2, #0]
 800e022:	0605      	lsls	r5, r0, #24
 800e024:	f103 0104 	add.w	r1, r3, #4
 800e028:	d52a      	bpl.n	800e080 <_printf_i+0xa4>
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	6011      	str	r1, [r2, #0]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	da03      	bge.n	800e03a <_printf_i+0x5e>
 800e032:	222d      	movs	r2, #45	; 0x2d
 800e034:	425b      	negs	r3, r3
 800e036:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800e03a:	486f      	ldr	r0, [pc, #444]	; (800e1f8 <_printf_i+0x21c>)
 800e03c:	220a      	movs	r2, #10
 800e03e:	e039      	b.n	800e0b4 <_printf_i+0xd8>
 800e040:	2973      	cmp	r1, #115	; 0x73
 800e042:	f000 809d 	beq.w	800e180 <_printf_i+0x1a4>
 800e046:	d808      	bhi.n	800e05a <_printf_i+0x7e>
 800e048:	296f      	cmp	r1, #111	; 0x6f
 800e04a:	d020      	beq.n	800e08e <_printf_i+0xb2>
 800e04c:	2970      	cmp	r1, #112	; 0x70
 800e04e:	d1dd      	bne.n	800e00c <_printf_i+0x30>
 800e050:	6823      	ldr	r3, [r4, #0]
 800e052:	f043 0320 	orr.w	r3, r3, #32
 800e056:	6023      	str	r3, [r4, #0]
 800e058:	e003      	b.n	800e062 <_printf_i+0x86>
 800e05a:	2975      	cmp	r1, #117	; 0x75
 800e05c:	d017      	beq.n	800e08e <_printf_i+0xb2>
 800e05e:	2978      	cmp	r1, #120	; 0x78
 800e060:	d1d4      	bne.n	800e00c <_printf_i+0x30>
 800e062:	2378      	movs	r3, #120	; 0x78
 800e064:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e068:	4864      	ldr	r0, [pc, #400]	; (800e1fc <_printf_i+0x220>)
 800e06a:	e055      	b.n	800e118 <_printf_i+0x13c>
 800e06c:	6813      	ldr	r3, [r2, #0]
 800e06e:	1d19      	adds	r1, r3, #4
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	6011      	str	r1, [r2, #0]
 800e074:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e078:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e07c:	2301      	movs	r3, #1
 800e07e:	e08c      	b.n	800e19a <_printf_i+0x1be>
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	6011      	str	r1, [r2, #0]
 800e084:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e088:	bf18      	it	ne
 800e08a:	b21b      	sxthne	r3, r3
 800e08c:	e7cf      	b.n	800e02e <_printf_i+0x52>
 800e08e:	6813      	ldr	r3, [r2, #0]
 800e090:	6825      	ldr	r5, [r4, #0]
 800e092:	1d18      	adds	r0, r3, #4
 800e094:	6010      	str	r0, [r2, #0]
 800e096:	0628      	lsls	r0, r5, #24
 800e098:	d501      	bpl.n	800e09e <_printf_i+0xc2>
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	e002      	b.n	800e0a4 <_printf_i+0xc8>
 800e09e:	0668      	lsls	r0, r5, #25
 800e0a0:	d5fb      	bpl.n	800e09a <_printf_i+0xbe>
 800e0a2:	881b      	ldrh	r3, [r3, #0]
 800e0a4:	4854      	ldr	r0, [pc, #336]	; (800e1f8 <_printf_i+0x21c>)
 800e0a6:	296f      	cmp	r1, #111	; 0x6f
 800e0a8:	bf14      	ite	ne
 800e0aa:	220a      	movne	r2, #10
 800e0ac:	2208      	moveq	r2, #8
 800e0ae:	2100      	movs	r1, #0
 800e0b0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e0b4:	6865      	ldr	r5, [r4, #4]
 800e0b6:	60a5      	str	r5, [r4, #8]
 800e0b8:	2d00      	cmp	r5, #0
 800e0ba:	f2c0 8095 	blt.w	800e1e8 <_printf_i+0x20c>
 800e0be:	6821      	ldr	r1, [r4, #0]
 800e0c0:	f021 0104 	bic.w	r1, r1, #4
 800e0c4:	6021      	str	r1, [r4, #0]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d13d      	bne.n	800e146 <_printf_i+0x16a>
 800e0ca:	2d00      	cmp	r5, #0
 800e0cc:	f040 808e 	bne.w	800e1ec <_printf_i+0x210>
 800e0d0:	4665      	mov	r5, ip
 800e0d2:	2a08      	cmp	r2, #8
 800e0d4:	d10b      	bne.n	800e0ee <_printf_i+0x112>
 800e0d6:	6823      	ldr	r3, [r4, #0]
 800e0d8:	07db      	lsls	r3, r3, #31
 800e0da:	d508      	bpl.n	800e0ee <_printf_i+0x112>
 800e0dc:	6923      	ldr	r3, [r4, #16]
 800e0de:	6862      	ldr	r2, [r4, #4]
 800e0e0:	429a      	cmp	r2, r3
 800e0e2:	bfde      	ittt	le
 800e0e4:	2330      	movle	r3, #48	; 0x30
 800e0e6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e0ea:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e0ee:	ebac 0305 	sub.w	r3, ip, r5
 800e0f2:	6123      	str	r3, [r4, #16]
 800e0f4:	f8cd 8000 	str.w	r8, [sp]
 800e0f8:	463b      	mov	r3, r7
 800e0fa:	aa03      	add	r2, sp, #12
 800e0fc:	4621      	mov	r1, r4
 800e0fe:	4630      	mov	r0, r6
 800e100:	f7ff fef6 	bl	800def0 <_printf_common>
 800e104:	3001      	adds	r0, #1
 800e106:	d14d      	bne.n	800e1a4 <_printf_i+0x1c8>
 800e108:	f04f 30ff 	mov.w	r0, #4294967295
 800e10c:	b005      	add	sp, #20
 800e10e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e112:	4839      	ldr	r0, [pc, #228]	; (800e1f8 <_printf_i+0x21c>)
 800e114:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800e118:	6813      	ldr	r3, [r2, #0]
 800e11a:	6821      	ldr	r1, [r4, #0]
 800e11c:	1d1d      	adds	r5, r3, #4
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	6015      	str	r5, [r2, #0]
 800e122:	060a      	lsls	r2, r1, #24
 800e124:	d50b      	bpl.n	800e13e <_printf_i+0x162>
 800e126:	07ca      	lsls	r2, r1, #31
 800e128:	bf44      	itt	mi
 800e12a:	f041 0120 	orrmi.w	r1, r1, #32
 800e12e:	6021      	strmi	r1, [r4, #0]
 800e130:	b91b      	cbnz	r3, 800e13a <_printf_i+0x15e>
 800e132:	6822      	ldr	r2, [r4, #0]
 800e134:	f022 0220 	bic.w	r2, r2, #32
 800e138:	6022      	str	r2, [r4, #0]
 800e13a:	2210      	movs	r2, #16
 800e13c:	e7b7      	b.n	800e0ae <_printf_i+0xd2>
 800e13e:	064d      	lsls	r5, r1, #25
 800e140:	bf48      	it	mi
 800e142:	b29b      	uxthmi	r3, r3
 800e144:	e7ef      	b.n	800e126 <_printf_i+0x14a>
 800e146:	4665      	mov	r5, ip
 800e148:	fbb3 f1f2 	udiv	r1, r3, r2
 800e14c:	fb02 3311 	mls	r3, r2, r1, r3
 800e150:	5cc3      	ldrb	r3, [r0, r3]
 800e152:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800e156:	460b      	mov	r3, r1
 800e158:	2900      	cmp	r1, #0
 800e15a:	d1f5      	bne.n	800e148 <_printf_i+0x16c>
 800e15c:	e7b9      	b.n	800e0d2 <_printf_i+0xf6>
 800e15e:	6813      	ldr	r3, [r2, #0]
 800e160:	6825      	ldr	r5, [r4, #0]
 800e162:	6961      	ldr	r1, [r4, #20]
 800e164:	1d18      	adds	r0, r3, #4
 800e166:	6010      	str	r0, [r2, #0]
 800e168:	0628      	lsls	r0, r5, #24
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	d501      	bpl.n	800e172 <_printf_i+0x196>
 800e16e:	6019      	str	r1, [r3, #0]
 800e170:	e002      	b.n	800e178 <_printf_i+0x19c>
 800e172:	066a      	lsls	r2, r5, #25
 800e174:	d5fb      	bpl.n	800e16e <_printf_i+0x192>
 800e176:	8019      	strh	r1, [r3, #0]
 800e178:	2300      	movs	r3, #0
 800e17a:	6123      	str	r3, [r4, #16]
 800e17c:	4665      	mov	r5, ip
 800e17e:	e7b9      	b.n	800e0f4 <_printf_i+0x118>
 800e180:	6813      	ldr	r3, [r2, #0]
 800e182:	1d19      	adds	r1, r3, #4
 800e184:	6011      	str	r1, [r2, #0]
 800e186:	681d      	ldr	r5, [r3, #0]
 800e188:	6862      	ldr	r2, [r4, #4]
 800e18a:	2100      	movs	r1, #0
 800e18c:	4628      	mov	r0, r5
 800e18e:	f7f2 f827 	bl	80001e0 <memchr>
 800e192:	b108      	cbz	r0, 800e198 <_printf_i+0x1bc>
 800e194:	1b40      	subs	r0, r0, r5
 800e196:	6060      	str	r0, [r4, #4]
 800e198:	6863      	ldr	r3, [r4, #4]
 800e19a:	6123      	str	r3, [r4, #16]
 800e19c:	2300      	movs	r3, #0
 800e19e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e1a2:	e7a7      	b.n	800e0f4 <_printf_i+0x118>
 800e1a4:	6923      	ldr	r3, [r4, #16]
 800e1a6:	462a      	mov	r2, r5
 800e1a8:	4639      	mov	r1, r7
 800e1aa:	4630      	mov	r0, r6
 800e1ac:	47c0      	blx	r8
 800e1ae:	3001      	adds	r0, #1
 800e1b0:	d0aa      	beq.n	800e108 <_printf_i+0x12c>
 800e1b2:	6823      	ldr	r3, [r4, #0]
 800e1b4:	079b      	lsls	r3, r3, #30
 800e1b6:	d413      	bmi.n	800e1e0 <_printf_i+0x204>
 800e1b8:	68e0      	ldr	r0, [r4, #12]
 800e1ba:	9b03      	ldr	r3, [sp, #12]
 800e1bc:	4298      	cmp	r0, r3
 800e1be:	bfb8      	it	lt
 800e1c0:	4618      	movlt	r0, r3
 800e1c2:	e7a3      	b.n	800e10c <_printf_i+0x130>
 800e1c4:	2301      	movs	r3, #1
 800e1c6:	464a      	mov	r2, r9
 800e1c8:	4639      	mov	r1, r7
 800e1ca:	4630      	mov	r0, r6
 800e1cc:	47c0      	blx	r8
 800e1ce:	3001      	adds	r0, #1
 800e1d0:	d09a      	beq.n	800e108 <_printf_i+0x12c>
 800e1d2:	3501      	adds	r5, #1
 800e1d4:	68e3      	ldr	r3, [r4, #12]
 800e1d6:	9a03      	ldr	r2, [sp, #12]
 800e1d8:	1a9b      	subs	r3, r3, r2
 800e1da:	42ab      	cmp	r3, r5
 800e1dc:	dcf2      	bgt.n	800e1c4 <_printf_i+0x1e8>
 800e1de:	e7eb      	b.n	800e1b8 <_printf_i+0x1dc>
 800e1e0:	2500      	movs	r5, #0
 800e1e2:	f104 0919 	add.w	r9, r4, #25
 800e1e6:	e7f5      	b.n	800e1d4 <_printf_i+0x1f8>
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d1ac      	bne.n	800e146 <_printf_i+0x16a>
 800e1ec:	7803      	ldrb	r3, [r0, #0]
 800e1ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e1f2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e1f6:	e76c      	b.n	800e0d2 <_printf_i+0xf6>
 800e1f8:	0801190e 	.word	0x0801190e
 800e1fc:	0801191f 	.word	0x0801191f

0800e200 <_scanf_float>:
 800e200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e204:	469a      	mov	sl, r3
 800e206:	688b      	ldr	r3, [r1, #8]
 800e208:	4616      	mov	r6, r2
 800e20a:	1e5a      	subs	r2, r3, #1
 800e20c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e210:	b087      	sub	sp, #28
 800e212:	bf83      	ittte	hi
 800e214:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800e218:	189b      	addhi	r3, r3, r2
 800e21a:	9301      	strhi	r3, [sp, #4]
 800e21c:	2300      	movls	r3, #0
 800e21e:	bf86      	itte	hi
 800e220:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e224:	608b      	strhi	r3, [r1, #8]
 800e226:	9301      	strls	r3, [sp, #4]
 800e228:	680b      	ldr	r3, [r1, #0]
 800e22a:	4688      	mov	r8, r1
 800e22c:	f04f 0b00 	mov.w	fp, #0
 800e230:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800e234:	f848 3b1c 	str.w	r3, [r8], #28
 800e238:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800e23c:	4607      	mov	r7, r0
 800e23e:	460c      	mov	r4, r1
 800e240:	4645      	mov	r5, r8
 800e242:	465a      	mov	r2, fp
 800e244:	46d9      	mov	r9, fp
 800e246:	f8cd b008 	str.w	fp, [sp, #8]
 800e24a:	68a1      	ldr	r1, [r4, #8]
 800e24c:	b181      	cbz	r1, 800e270 <_scanf_float+0x70>
 800e24e:	6833      	ldr	r3, [r6, #0]
 800e250:	781b      	ldrb	r3, [r3, #0]
 800e252:	2b49      	cmp	r3, #73	; 0x49
 800e254:	d071      	beq.n	800e33a <_scanf_float+0x13a>
 800e256:	d84d      	bhi.n	800e2f4 <_scanf_float+0xf4>
 800e258:	2b39      	cmp	r3, #57	; 0x39
 800e25a:	d840      	bhi.n	800e2de <_scanf_float+0xde>
 800e25c:	2b31      	cmp	r3, #49	; 0x31
 800e25e:	f080 8088 	bcs.w	800e372 <_scanf_float+0x172>
 800e262:	2b2d      	cmp	r3, #45	; 0x2d
 800e264:	f000 8090 	beq.w	800e388 <_scanf_float+0x188>
 800e268:	d815      	bhi.n	800e296 <_scanf_float+0x96>
 800e26a:	2b2b      	cmp	r3, #43	; 0x2b
 800e26c:	f000 808c 	beq.w	800e388 <_scanf_float+0x188>
 800e270:	f1b9 0f00 	cmp.w	r9, #0
 800e274:	d003      	beq.n	800e27e <_scanf_float+0x7e>
 800e276:	6823      	ldr	r3, [r4, #0]
 800e278:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e27c:	6023      	str	r3, [r4, #0]
 800e27e:	3a01      	subs	r2, #1
 800e280:	2a01      	cmp	r2, #1
 800e282:	f200 80ea 	bhi.w	800e45a <_scanf_float+0x25a>
 800e286:	4545      	cmp	r5, r8
 800e288:	f200 80dc 	bhi.w	800e444 <_scanf_float+0x244>
 800e28c:	2601      	movs	r6, #1
 800e28e:	4630      	mov	r0, r6
 800e290:	b007      	add	sp, #28
 800e292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e296:	2b2e      	cmp	r3, #46	; 0x2e
 800e298:	f000 809f 	beq.w	800e3da <_scanf_float+0x1da>
 800e29c:	2b30      	cmp	r3, #48	; 0x30
 800e29e:	d1e7      	bne.n	800e270 <_scanf_float+0x70>
 800e2a0:	6820      	ldr	r0, [r4, #0]
 800e2a2:	f410 7f80 	tst.w	r0, #256	; 0x100
 800e2a6:	d064      	beq.n	800e372 <_scanf_float+0x172>
 800e2a8:	9b01      	ldr	r3, [sp, #4]
 800e2aa:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800e2ae:	6020      	str	r0, [r4, #0]
 800e2b0:	f109 0901 	add.w	r9, r9, #1
 800e2b4:	b11b      	cbz	r3, 800e2be <_scanf_float+0xbe>
 800e2b6:	3b01      	subs	r3, #1
 800e2b8:	3101      	adds	r1, #1
 800e2ba:	9301      	str	r3, [sp, #4]
 800e2bc:	60a1      	str	r1, [r4, #8]
 800e2be:	68a3      	ldr	r3, [r4, #8]
 800e2c0:	3b01      	subs	r3, #1
 800e2c2:	60a3      	str	r3, [r4, #8]
 800e2c4:	6923      	ldr	r3, [r4, #16]
 800e2c6:	3301      	adds	r3, #1
 800e2c8:	6123      	str	r3, [r4, #16]
 800e2ca:	6873      	ldr	r3, [r6, #4]
 800e2cc:	3b01      	subs	r3, #1
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	6073      	str	r3, [r6, #4]
 800e2d2:	f340 80ac 	ble.w	800e42e <_scanf_float+0x22e>
 800e2d6:	6833      	ldr	r3, [r6, #0]
 800e2d8:	3301      	adds	r3, #1
 800e2da:	6033      	str	r3, [r6, #0]
 800e2dc:	e7b5      	b.n	800e24a <_scanf_float+0x4a>
 800e2de:	2b45      	cmp	r3, #69	; 0x45
 800e2e0:	f000 8085 	beq.w	800e3ee <_scanf_float+0x1ee>
 800e2e4:	2b46      	cmp	r3, #70	; 0x46
 800e2e6:	d06a      	beq.n	800e3be <_scanf_float+0x1be>
 800e2e8:	2b41      	cmp	r3, #65	; 0x41
 800e2ea:	d1c1      	bne.n	800e270 <_scanf_float+0x70>
 800e2ec:	2a01      	cmp	r2, #1
 800e2ee:	d1bf      	bne.n	800e270 <_scanf_float+0x70>
 800e2f0:	2202      	movs	r2, #2
 800e2f2:	e046      	b.n	800e382 <_scanf_float+0x182>
 800e2f4:	2b65      	cmp	r3, #101	; 0x65
 800e2f6:	d07a      	beq.n	800e3ee <_scanf_float+0x1ee>
 800e2f8:	d818      	bhi.n	800e32c <_scanf_float+0x12c>
 800e2fa:	2b54      	cmp	r3, #84	; 0x54
 800e2fc:	d066      	beq.n	800e3cc <_scanf_float+0x1cc>
 800e2fe:	d811      	bhi.n	800e324 <_scanf_float+0x124>
 800e300:	2b4e      	cmp	r3, #78	; 0x4e
 800e302:	d1b5      	bne.n	800e270 <_scanf_float+0x70>
 800e304:	2a00      	cmp	r2, #0
 800e306:	d146      	bne.n	800e396 <_scanf_float+0x196>
 800e308:	f1b9 0f00 	cmp.w	r9, #0
 800e30c:	d145      	bne.n	800e39a <_scanf_float+0x19a>
 800e30e:	6821      	ldr	r1, [r4, #0]
 800e310:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800e314:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800e318:	d13f      	bne.n	800e39a <_scanf_float+0x19a>
 800e31a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800e31e:	6021      	str	r1, [r4, #0]
 800e320:	2201      	movs	r2, #1
 800e322:	e02e      	b.n	800e382 <_scanf_float+0x182>
 800e324:	2b59      	cmp	r3, #89	; 0x59
 800e326:	d01e      	beq.n	800e366 <_scanf_float+0x166>
 800e328:	2b61      	cmp	r3, #97	; 0x61
 800e32a:	e7de      	b.n	800e2ea <_scanf_float+0xea>
 800e32c:	2b6e      	cmp	r3, #110	; 0x6e
 800e32e:	d0e9      	beq.n	800e304 <_scanf_float+0x104>
 800e330:	d815      	bhi.n	800e35e <_scanf_float+0x15e>
 800e332:	2b66      	cmp	r3, #102	; 0x66
 800e334:	d043      	beq.n	800e3be <_scanf_float+0x1be>
 800e336:	2b69      	cmp	r3, #105	; 0x69
 800e338:	d19a      	bne.n	800e270 <_scanf_float+0x70>
 800e33a:	f1bb 0f00 	cmp.w	fp, #0
 800e33e:	d138      	bne.n	800e3b2 <_scanf_float+0x1b2>
 800e340:	f1b9 0f00 	cmp.w	r9, #0
 800e344:	d197      	bne.n	800e276 <_scanf_float+0x76>
 800e346:	6821      	ldr	r1, [r4, #0]
 800e348:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800e34c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800e350:	d195      	bne.n	800e27e <_scanf_float+0x7e>
 800e352:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800e356:	6021      	str	r1, [r4, #0]
 800e358:	f04f 0b01 	mov.w	fp, #1
 800e35c:	e011      	b.n	800e382 <_scanf_float+0x182>
 800e35e:	2b74      	cmp	r3, #116	; 0x74
 800e360:	d034      	beq.n	800e3cc <_scanf_float+0x1cc>
 800e362:	2b79      	cmp	r3, #121	; 0x79
 800e364:	d184      	bne.n	800e270 <_scanf_float+0x70>
 800e366:	f1bb 0f07 	cmp.w	fp, #7
 800e36a:	d181      	bne.n	800e270 <_scanf_float+0x70>
 800e36c:	f04f 0b08 	mov.w	fp, #8
 800e370:	e007      	b.n	800e382 <_scanf_float+0x182>
 800e372:	eb12 0f0b 	cmn.w	r2, fp
 800e376:	f47f af7b 	bne.w	800e270 <_scanf_float+0x70>
 800e37a:	6821      	ldr	r1, [r4, #0]
 800e37c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800e380:	6021      	str	r1, [r4, #0]
 800e382:	702b      	strb	r3, [r5, #0]
 800e384:	3501      	adds	r5, #1
 800e386:	e79a      	b.n	800e2be <_scanf_float+0xbe>
 800e388:	6821      	ldr	r1, [r4, #0]
 800e38a:	0608      	lsls	r0, r1, #24
 800e38c:	f57f af70 	bpl.w	800e270 <_scanf_float+0x70>
 800e390:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800e394:	e7f4      	b.n	800e380 <_scanf_float+0x180>
 800e396:	2a02      	cmp	r2, #2
 800e398:	d047      	beq.n	800e42a <_scanf_float+0x22a>
 800e39a:	f1bb 0f01 	cmp.w	fp, #1
 800e39e:	d003      	beq.n	800e3a8 <_scanf_float+0x1a8>
 800e3a0:	f1bb 0f04 	cmp.w	fp, #4
 800e3a4:	f47f af64 	bne.w	800e270 <_scanf_float+0x70>
 800e3a8:	f10b 0b01 	add.w	fp, fp, #1
 800e3ac:	fa5f fb8b 	uxtb.w	fp, fp
 800e3b0:	e7e7      	b.n	800e382 <_scanf_float+0x182>
 800e3b2:	f1bb 0f03 	cmp.w	fp, #3
 800e3b6:	d0f7      	beq.n	800e3a8 <_scanf_float+0x1a8>
 800e3b8:	f1bb 0f05 	cmp.w	fp, #5
 800e3bc:	e7f2      	b.n	800e3a4 <_scanf_float+0x1a4>
 800e3be:	f1bb 0f02 	cmp.w	fp, #2
 800e3c2:	f47f af55 	bne.w	800e270 <_scanf_float+0x70>
 800e3c6:	f04f 0b03 	mov.w	fp, #3
 800e3ca:	e7da      	b.n	800e382 <_scanf_float+0x182>
 800e3cc:	f1bb 0f06 	cmp.w	fp, #6
 800e3d0:	f47f af4e 	bne.w	800e270 <_scanf_float+0x70>
 800e3d4:	f04f 0b07 	mov.w	fp, #7
 800e3d8:	e7d3      	b.n	800e382 <_scanf_float+0x182>
 800e3da:	6821      	ldr	r1, [r4, #0]
 800e3dc:	0588      	lsls	r0, r1, #22
 800e3de:	f57f af47 	bpl.w	800e270 <_scanf_float+0x70>
 800e3e2:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800e3e6:	6021      	str	r1, [r4, #0]
 800e3e8:	f8cd 9008 	str.w	r9, [sp, #8]
 800e3ec:	e7c9      	b.n	800e382 <_scanf_float+0x182>
 800e3ee:	6821      	ldr	r1, [r4, #0]
 800e3f0:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800e3f4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800e3f8:	d006      	beq.n	800e408 <_scanf_float+0x208>
 800e3fa:	0548      	lsls	r0, r1, #21
 800e3fc:	f57f af38 	bpl.w	800e270 <_scanf_float+0x70>
 800e400:	f1b9 0f00 	cmp.w	r9, #0
 800e404:	f43f af3b 	beq.w	800e27e <_scanf_float+0x7e>
 800e408:	0588      	lsls	r0, r1, #22
 800e40a:	bf58      	it	pl
 800e40c:	9802      	ldrpl	r0, [sp, #8]
 800e40e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800e412:	bf58      	it	pl
 800e414:	eba9 0000 	subpl.w	r0, r9, r0
 800e418:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800e41c:	bf58      	it	pl
 800e41e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800e422:	6021      	str	r1, [r4, #0]
 800e424:	f04f 0900 	mov.w	r9, #0
 800e428:	e7ab      	b.n	800e382 <_scanf_float+0x182>
 800e42a:	2203      	movs	r2, #3
 800e42c:	e7a9      	b.n	800e382 <_scanf_float+0x182>
 800e42e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e432:	9205      	str	r2, [sp, #20]
 800e434:	4631      	mov	r1, r6
 800e436:	4638      	mov	r0, r7
 800e438:	4798      	blx	r3
 800e43a:	9a05      	ldr	r2, [sp, #20]
 800e43c:	2800      	cmp	r0, #0
 800e43e:	f43f af04 	beq.w	800e24a <_scanf_float+0x4a>
 800e442:	e715      	b.n	800e270 <_scanf_float+0x70>
 800e444:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e448:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800e44c:	4632      	mov	r2, r6
 800e44e:	4638      	mov	r0, r7
 800e450:	4798      	blx	r3
 800e452:	6923      	ldr	r3, [r4, #16]
 800e454:	3b01      	subs	r3, #1
 800e456:	6123      	str	r3, [r4, #16]
 800e458:	e715      	b.n	800e286 <_scanf_float+0x86>
 800e45a:	f10b 33ff 	add.w	r3, fp, #4294967295
 800e45e:	2b06      	cmp	r3, #6
 800e460:	d80a      	bhi.n	800e478 <_scanf_float+0x278>
 800e462:	f1bb 0f02 	cmp.w	fp, #2
 800e466:	d968      	bls.n	800e53a <_scanf_float+0x33a>
 800e468:	f1ab 0b03 	sub.w	fp, fp, #3
 800e46c:	fa5f fb8b 	uxtb.w	fp, fp
 800e470:	eba5 0b0b 	sub.w	fp, r5, fp
 800e474:	455d      	cmp	r5, fp
 800e476:	d14b      	bne.n	800e510 <_scanf_float+0x310>
 800e478:	6823      	ldr	r3, [r4, #0]
 800e47a:	05da      	lsls	r2, r3, #23
 800e47c:	d51f      	bpl.n	800e4be <_scanf_float+0x2be>
 800e47e:	055b      	lsls	r3, r3, #21
 800e480:	d468      	bmi.n	800e554 <_scanf_float+0x354>
 800e482:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800e486:	6923      	ldr	r3, [r4, #16]
 800e488:	2965      	cmp	r1, #101	; 0x65
 800e48a:	f103 33ff 	add.w	r3, r3, #4294967295
 800e48e:	f105 3bff 	add.w	fp, r5, #4294967295
 800e492:	6123      	str	r3, [r4, #16]
 800e494:	d00d      	beq.n	800e4b2 <_scanf_float+0x2b2>
 800e496:	2945      	cmp	r1, #69	; 0x45
 800e498:	d00b      	beq.n	800e4b2 <_scanf_float+0x2b2>
 800e49a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e49e:	4632      	mov	r2, r6
 800e4a0:	4638      	mov	r0, r7
 800e4a2:	4798      	blx	r3
 800e4a4:	6923      	ldr	r3, [r4, #16]
 800e4a6:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800e4aa:	3b01      	subs	r3, #1
 800e4ac:	f1a5 0b02 	sub.w	fp, r5, #2
 800e4b0:	6123      	str	r3, [r4, #16]
 800e4b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e4b6:	4632      	mov	r2, r6
 800e4b8:	4638      	mov	r0, r7
 800e4ba:	4798      	blx	r3
 800e4bc:	465d      	mov	r5, fp
 800e4be:	6826      	ldr	r6, [r4, #0]
 800e4c0:	f016 0610 	ands.w	r6, r6, #16
 800e4c4:	d17a      	bne.n	800e5bc <_scanf_float+0x3bc>
 800e4c6:	702e      	strb	r6, [r5, #0]
 800e4c8:	6823      	ldr	r3, [r4, #0]
 800e4ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800e4ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e4d2:	d142      	bne.n	800e55a <_scanf_float+0x35a>
 800e4d4:	9b02      	ldr	r3, [sp, #8]
 800e4d6:	eba9 0303 	sub.w	r3, r9, r3
 800e4da:	425a      	negs	r2, r3
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d149      	bne.n	800e574 <_scanf_float+0x374>
 800e4e0:	2200      	movs	r2, #0
 800e4e2:	4641      	mov	r1, r8
 800e4e4:	4638      	mov	r0, r7
 800e4e6:	f000 feb3 	bl	800f250 <_strtod_r>
 800e4ea:	6825      	ldr	r5, [r4, #0]
 800e4ec:	f8da 3000 	ldr.w	r3, [sl]
 800e4f0:	f015 0f02 	tst.w	r5, #2
 800e4f4:	f103 0204 	add.w	r2, r3, #4
 800e4f8:	ec59 8b10 	vmov	r8, r9, d0
 800e4fc:	f8ca 2000 	str.w	r2, [sl]
 800e500:	d043      	beq.n	800e58a <_scanf_float+0x38a>
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	e9c3 8900 	strd	r8, r9, [r3]
 800e508:	68e3      	ldr	r3, [r4, #12]
 800e50a:	3301      	adds	r3, #1
 800e50c:	60e3      	str	r3, [r4, #12]
 800e50e:	e6be      	b.n	800e28e <_scanf_float+0x8e>
 800e510:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e514:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800e518:	4632      	mov	r2, r6
 800e51a:	4638      	mov	r0, r7
 800e51c:	4798      	blx	r3
 800e51e:	6923      	ldr	r3, [r4, #16]
 800e520:	3b01      	subs	r3, #1
 800e522:	6123      	str	r3, [r4, #16]
 800e524:	e7a6      	b.n	800e474 <_scanf_float+0x274>
 800e526:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e52a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800e52e:	4632      	mov	r2, r6
 800e530:	4638      	mov	r0, r7
 800e532:	4798      	blx	r3
 800e534:	6923      	ldr	r3, [r4, #16]
 800e536:	3b01      	subs	r3, #1
 800e538:	6123      	str	r3, [r4, #16]
 800e53a:	4545      	cmp	r5, r8
 800e53c:	d8f3      	bhi.n	800e526 <_scanf_float+0x326>
 800e53e:	e6a5      	b.n	800e28c <_scanf_float+0x8c>
 800e540:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e544:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800e548:	4632      	mov	r2, r6
 800e54a:	4638      	mov	r0, r7
 800e54c:	4798      	blx	r3
 800e54e:	6923      	ldr	r3, [r4, #16]
 800e550:	3b01      	subs	r3, #1
 800e552:	6123      	str	r3, [r4, #16]
 800e554:	4545      	cmp	r5, r8
 800e556:	d8f3      	bhi.n	800e540 <_scanf_float+0x340>
 800e558:	e698      	b.n	800e28c <_scanf_float+0x8c>
 800e55a:	9b03      	ldr	r3, [sp, #12]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d0bf      	beq.n	800e4e0 <_scanf_float+0x2e0>
 800e560:	9904      	ldr	r1, [sp, #16]
 800e562:	230a      	movs	r3, #10
 800e564:	4632      	mov	r2, r6
 800e566:	3101      	adds	r1, #1
 800e568:	4638      	mov	r0, r7
 800e56a:	f000 fefd 	bl	800f368 <_strtol_r>
 800e56e:	9b03      	ldr	r3, [sp, #12]
 800e570:	9d04      	ldr	r5, [sp, #16]
 800e572:	1ac2      	subs	r2, r0, r3
 800e574:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800e578:	429d      	cmp	r5, r3
 800e57a:	bf28      	it	cs
 800e57c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800e580:	490f      	ldr	r1, [pc, #60]	; (800e5c0 <_scanf_float+0x3c0>)
 800e582:	4628      	mov	r0, r5
 800e584:	f000 f834 	bl	800e5f0 <siprintf>
 800e588:	e7aa      	b.n	800e4e0 <_scanf_float+0x2e0>
 800e58a:	f015 0504 	ands.w	r5, r5, #4
 800e58e:	d1b8      	bne.n	800e502 <_scanf_float+0x302>
 800e590:	681f      	ldr	r7, [r3, #0]
 800e592:	ee10 2a10 	vmov	r2, s0
 800e596:	464b      	mov	r3, r9
 800e598:	ee10 0a10 	vmov	r0, s0
 800e59c:	4649      	mov	r1, r9
 800e59e:	f7f2 fac5 	bl	8000b2c <__aeabi_dcmpun>
 800e5a2:	b128      	cbz	r0, 800e5b0 <_scanf_float+0x3b0>
 800e5a4:	4628      	mov	r0, r5
 800e5a6:	f000 f81d 	bl	800e5e4 <nanf>
 800e5aa:	ed87 0a00 	vstr	s0, [r7]
 800e5ae:	e7ab      	b.n	800e508 <_scanf_float+0x308>
 800e5b0:	4640      	mov	r0, r8
 800e5b2:	4649      	mov	r1, r9
 800e5b4:	f7f2 fb18 	bl	8000be8 <__aeabi_d2f>
 800e5b8:	6038      	str	r0, [r7, #0]
 800e5ba:	e7a5      	b.n	800e508 <_scanf_float+0x308>
 800e5bc:	2600      	movs	r6, #0
 800e5be:	e666      	b.n	800e28e <_scanf_float+0x8e>
 800e5c0:	08011930 	.word	0x08011930

0800e5c4 <_sbrk_r>:
 800e5c4:	b538      	push	{r3, r4, r5, lr}
 800e5c6:	4c06      	ldr	r4, [pc, #24]	; (800e5e0 <_sbrk_r+0x1c>)
 800e5c8:	2300      	movs	r3, #0
 800e5ca:	4605      	mov	r5, r0
 800e5cc:	4608      	mov	r0, r1
 800e5ce:	6023      	str	r3, [r4, #0]
 800e5d0:	f002 fe36 	bl	8011240 <_sbrk>
 800e5d4:	1c43      	adds	r3, r0, #1
 800e5d6:	d102      	bne.n	800e5de <_sbrk_r+0x1a>
 800e5d8:	6823      	ldr	r3, [r4, #0]
 800e5da:	b103      	cbz	r3, 800e5de <_sbrk_r+0x1a>
 800e5dc:	602b      	str	r3, [r5, #0]
 800e5de:	bd38      	pop	{r3, r4, r5, pc}
 800e5e0:	20002c60 	.word	0x20002c60

0800e5e4 <nanf>:
 800e5e4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e5ec <nanf+0x8>
 800e5e8:	4770      	bx	lr
 800e5ea:	bf00      	nop
 800e5ec:	7fc00000 	.word	0x7fc00000

0800e5f0 <siprintf>:
 800e5f0:	b40e      	push	{r1, r2, r3}
 800e5f2:	b500      	push	{lr}
 800e5f4:	b09c      	sub	sp, #112	; 0x70
 800e5f6:	ab1d      	add	r3, sp, #116	; 0x74
 800e5f8:	9002      	str	r0, [sp, #8]
 800e5fa:	9006      	str	r0, [sp, #24]
 800e5fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e600:	4809      	ldr	r0, [pc, #36]	; (800e628 <siprintf+0x38>)
 800e602:	9107      	str	r1, [sp, #28]
 800e604:	9104      	str	r1, [sp, #16]
 800e606:	4909      	ldr	r1, [pc, #36]	; (800e62c <siprintf+0x3c>)
 800e608:	f853 2b04 	ldr.w	r2, [r3], #4
 800e60c:	9105      	str	r1, [sp, #20]
 800e60e:	6800      	ldr	r0, [r0, #0]
 800e610:	9301      	str	r3, [sp, #4]
 800e612:	a902      	add	r1, sp, #8
 800e614:	f002 fcb6 	bl	8010f84 <_svfiprintf_r>
 800e618:	9b02      	ldr	r3, [sp, #8]
 800e61a:	2200      	movs	r2, #0
 800e61c:	701a      	strb	r2, [r3, #0]
 800e61e:	b01c      	add	sp, #112	; 0x70
 800e620:	f85d eb04 	ldr.w	lr, [sp], #4
 800e624:	b003      	add	sp, #12
 800e626:	4770      	bx	lr
 800e628:	2000017c 	.word	0x2000017c
 800e62c:	ffff0208 	.word	0xffff0208

0800e630 <sulp>:
 800e630:	b570      	push	{r4, r5, r6, lr}
 800e632:	4604      	mov	r4, r0
 800e634:	460d      	mov	r5, r1
 800e636:	ec45 4b10 	vmov	d0, r4, r5
 800e63a:	4616      	mov	r6, r2
 800e63c:	f002 fb06 	bl	8010c4c <__ulp>
 800e640:	ec51 0b10 	vmov	r0, r1, d0
 800e644:	b17e      	cbz	r6, 800e666 <sulp+0x36>
 800e646:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e64a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e64e:	2b00      	cmp	r3, #0
 800e650:	dd09      	ble.n	800e666 <sulp+0x36>
 800e652:	051b      	lsls	r3, r3, #20
 800e654:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800e658:	2400      	movs	r4, #0
 800e65a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800e65e:	4622      	mov	r2, r4
 800e660:	462b      	mov	r3, r5
 800e662:	f7f1 ffc9 	bl	80005f8 <__aeabi_dmul>
 800e666:	bd70      	pop	{r4, r5, r6, pc}

0800e668 <_strtod_l>:
 800e668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e66c:	461f      	mov	r7, r3
 800e66e:	b0a1      	sub	sp, #132	; 0x84
 800e670:	2300      	movs	r3, #0
 800e672:	4681      	mov	r9, r0
 800e674:	4638      	mov	r0, r7
 800e676:	460e      	mov	r6, r1
 800e678:	9217      	str	r2, [sp, #92]	; 0x5c
 800e67a:	931c      	str	r3, [sp, #112]	; 0x70
 800e67c:	f001 fff5 	bl	801066a <__localeconv_l>
 800e680:	4680      	mov	r8, r0
 800e682:	6800      	ldr	r0, [r0, #0]
 800e684:	f7f1 fda4 	bl	80001d0 <strlen>
 800e688:	f04f 0a00 	mov.w	sl, #0
 800e68c:	4604      	mov	r4, r0
 800e68e:	f04f 0b00 	mov.w	fp, #0
 800e692:	961b      	str	r6, [sp, #108]	; 0x6c
 800e694:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e696:	781a      	ldrb	r2, [r3, #0]
 800e698:	2a0d      	cmp	r2, #13
 800e69a:	d832      	bhi.n	800e702 <_strtod_l+0x9a>
 800e69c:	2a09      	cmp	r2, #9
 800e69e:	d236      	bcs.n	800e70e <_strtod_l+0xa6>
 800e6a0:	2a00      	cmp	r2, #0
 800e6a2:	d03e      	beq.n	800e722 <_strtod_l+0xba>
 800e6a4:	2300      	movs	r3, #0
 800e6a6:	930d      	str	r3, [sp, #52]	; 0x34
 800e6a8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800e6aa:	782b      	ldrb	r3, [r5, #0]
 800e6ac:	2b30      	cmp	r3, #48	; 0x30
 800e6ae:	f040 80ac 	bne.w	800e80a <_strtod_l+0x1a2>
 800e6b2:	786b      	ldrb	r3, [r5, #1]
 800e6b4:	2b58      	cmp	r3, #88	; 0x58
 800e6b6:	d001      	beq.n	800e6bc <_strtod_l+0x54>
 800e6b8:	2b78      	cmp	r3, #120	; 0x78
 800e6ba:	d167      	bne.n	800e78c <_strtod_l+0x124>
 800e6bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e6be:	9301      	str	r3, [sp, #4]
 800e6c0:	ab1c      	add	r3, sp, #112	; 0x70
 800e6c2:	9300      	str	r3, [sp, #0]
 800e6c4:	9702      	str	r7, [sp, #8]
 800e6c6:	ab1d      	add	r3, sp, #116	; 0x74
 800e6c8:	4a88      	ldr	r2, [pc, #544]	; (800e8ec <_strtod_l+0x284>)
 800e6ca:	a91b      	add	r1, sp, #108	; 0x6c
 800e6cc:	4648      	mov	r0, r9
 800e6ce:	f001 fcf2 	bl	80100b6 <__gethex>
 800e6d2:	f010 0407 	ands.w	r4, r0, #7
 800e6d6:	4606      	mov	r6, r0
 800e6d8:	d005      	beq.n	800e6e6 <_strtod_l+0x7e>
 800e6da:	2c06      	cmp	r4, #6
 800e6dc:	d12b      	bne.n	800e736 <_strtod_l+0xce>
 800e6de:	3501      	adds	r5, #1
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	951b      	str	r5, [sp, #108]	; 0x6c
 800e6e4:	930d      	str	r3, [sp, #52]	; 0x34
 800e6e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	f040 859a 	bne.w	800f222 <_strtod_l+0xbba>
 800e6ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e6f0:	b1e3      	cbz	r3, 800e72c <_strtod_l+0xc4>
 800e6f2:	4652      	mov	r2, sl
 800e6f4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e6f8:	ec43 2b10 	vmov	d0, r2, r3
 800e6fc:	b021      	add	sp, #132	; 0x84
 800e6fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e702:	2a2b      	cmp	r2, #43	; 0x2b
 800e704:	d015      	beq.n	800e732 <_strtod_l+0xca>
 800e706:	2a2d      	cmp	r2, #45	; 0x2d
 800e708:	d004      	beq.n	800e714 <_strtod_l+0xac>
 800e70a:	2a20      	cmp	r2, #32
 800e70c:	d1ca      	bne.n	800e6a4 <_strtod_l+0x3c>
 800e70e:	3301      	adds	r3, #1
 800e710:	931b      	str	r3, [sp, #108]	; 0x6c
 800e712:	e7bf      	b.n	800e694 <_strtod_l+0x2c>
 800e714:	2201      	movs	r2, #1
 800e716:	920d      	str	r2, [sp, #52]	; 0x34
 800e718:	1c5a      	adds	r2, r3, #1
 800e71a:	921b      	str	r2, [sp, #108]	; 0x6c
 800e71c:	785b      	ldrb	r3, [r3, #1]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d1c2      	bne.n	800e6a8 <_strtod_l+0x40>
 800e722:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e724:	961b      	str	r6, [sp, #108]	; 0x6c
 800e726:	2b00      	cmp	r3, #0
 800e728:	f040 8579 	bne.w	800f21e <_strtod_l+0xbb6>
 800e72c:	4652      	mov	r2, sl
 800e72e:	465b      	mov	r3, fp
 800e730:	e7e2      	b.n	800e6f8 <_strtod_l+0x90>
 800e732:	2200      	movs	r2, #0
 800e734:	e7ef      	b.n	800e716 <_strtod_l+0xae>
 800e736:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800e738:	b13a      	cbz	r2, 800e74a <_strtod_l+0xe2>
 800e73a:	2135      	movs	r1, #53	; 0x35
 800e73c:	a81e      	add	r0, sp, #120	; 0x78
 800e73e:	f002 fb7d 	bl	8010e3c <__copybits>
 800e742:	991c      	ldr	r1, [sp, #112]	; 0x70
 800e744:	4648      	mov	r0, r9
 800e746:	f001 ffe9 	bl	801071c <_Bfree>
 800e74a:	3c01      	subs	r4, #1
 800e74c:	2c04      	cmp	r4, #4
 800e74e:	d806      	bhi.n	800e75e <_strtod_l+0xf6>
 800e750:	e8df f004 	tbb	[pc, r4]
 800e754:	1714030a 	.word	0x1714030a
 800e758:	0a          	.byte	0x0a
 800e759:	00          	.byte	0x00
 800e75a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800e75e:	0730      	lsls	r0, r6, #28
 800e760:	d5c1      	bpl.n	800e6e6 <_strtod_l+0x7e>
 800e762:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800e766:	e7be      	b.n	800e6e6 <_strtod_l+0x7e>
 800e768:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800e76c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800e76e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e772:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e776:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e77a:	e7f0      	b.n	800e75e <_strtod_l+0xf6>
 800e77c:	f8df b170 	ldr.w	fp, [pc, #368]	; 800e8f0 <_strtod_l+0x288>
 800e780:	e7ed      	b.n	800e75e <_strtod_l+0xf6>
 800e782:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800e786:	f04f 3aff 	mov.w	sl, #4294967295
 800e78a:	e7e8      	b.n	800e75e <_strtod_l+0xf6>
 800e78c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e78e:	1c5a      	adds	r2, r3, #1
 800e790:	921b      	str	r2, [sp, #108]	; 0x6c
 800e792:	785b      	ldrb	r3, [r3, #1]
 800e794:	2b30      	cmp	r3, #48	; 0x30
 800e796:	d0f9      	beq.n	800e78c <_strtod_l+0x124>
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d0a4      	beq.n	800e6e6 <_strtod_l+0x7e>
 800e79c:	2301      	movs	r3, #1
 800e79e:	2500      	movs	r5, #0
 800e7a0:	9306      	str	r3, [sp, #24]
 800e7a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e7a4:	9308      	str	r3, [sp, #32]
 800e7a6:	9507      	str	r5, [sp, #28]
 800e7a8:	9505      	str	r5, [sp, #20]
 800e7aa:	220a      	movs	r2, #10
 800e7ac:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800e7ae:	7807      	ldrb	r7, [r0, #0]
 800e7b0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800e7b4:	b2d9      	uxtb	r1, r3
 800e7b6:	2909      	cmp	r1, #9
 800e7b8:	d929      	bls.n	800e80e <_strtod_l+0x1a6>
 800e7ba:	4622      	mov	r2, r4
 800e7bc:	f8d8 1000 	ldr.w	r1, [r8]
 800e7c0:	f002 fcd8 	bl	8011174 <strncmp>
 800e7c4:	2800      	cmp	r0, #0
 800e7c6:	d031      	beq.n	800e82c <_strtod_l+0x1c4>
 800e7c8:	2000      	movs	r0, #0
 800e7ca:	9c05      	ldr	r4, [sp, #20]
 800e7cc:	9004      	str	r0, [sp, #16]
 800e7ce:	463b      	mov	r3, r7
 800e7d0:	4602      	mov	r2, r0
 800e7d2:	2b65      	cmp	r3, #101	; 0x65
 800e7d4:	d001      	beq.n	800e7da <_strtod_l+0x172>
 800e7d6:	2b45      	cmp	r3, #69	; 0x45
 800e7d8:	d114      	bne.n	800e804 <_strtod_l+0x19c>
 800e7da:	b924      	cbnz	r4, 800e7e6 <_strtod_l+0x17e>
 800e7dc:	b910      	cbnz	r0, 800e7e4 <_strtod_l+0x17c>
 800e7de:	9b06      	ldr	r3, [sp, #24]
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d09e      	beq.n	800e722 <_strtod_l+0xba>
 800e7e4:	2400      	movs	r4, #0
 800e7e6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800e7e8:	1c73      	adds	r3, r6, #1
 800e7ea:	931b      	str	r3, [sp, #108]	; 0x6c
 800e7ec:	7873      	ldrb	r3, [r6, #1]
 800e7ee:	2b2b      	cmp	r3, #43	; 0x2b
 800e7f0:	d078      	beq.n	800e8e4 <_strtod_l+0x27c>
 800e7f2:	2b2d      	cmp	r3, #45	; 0x2d
 800e7f4:	d070      	beq.n	800e8d8 <_strtod_l+0x270>
 800e7f6:	f04f 0c00 	mov.w	ip, #0
 800e7fa:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800e7fe:	2f09      	cmp	r7, #9
 800e800:	d97c      	bls.n	800e8fc <_strtod_l+0x294>
 800e802:	961b      	str	r6, [sp, #108]	; 0x6c
 800e804:	f04f 0e00 	mov.w	lr, #0
 800e808:	e09a      	b.n	800e940 <_strtod_l+0x2d8>
 800e80a:	2300      	movs	r3, #0
 800e80c:	e7c7      	b.n	800e79e <_strtod_l+0x136>
 800e80e:	9905      	ldr	r1, [sp, #20]
 800e810:	2908      	cmp	r1, #8
 800e812:	bfdd      	ittte	le
 800e814:	9907      	ldrle	r1, [sp, #28]
 800e816:	fb02 3301 	mlale	r3, r2, r1, r3
 800e81a:	9307      	strle	r3, [sp, #28]
 800e81c:	fb02 3505 	mlagt	r5, r2, r5, r3
 800e820:	9b05      	ldr	r3, [sp, #20]
 800e822:	3001      	adds	r0, #1
 800e824:	3301      	adds	r3, #1
 800e826:	9305      	str	r3, [sp, #20]
 800e828:	901b      	str	r0, [sp, #108]	; 0x6c
 800e82a:	e7bf      	b.n	800e7ac <_strtod_l+0x144>
 800e82c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e82e:	191a      	adds	r2, r3, r4
 800e830:	921b      	str	r2, [sp, #108]	; 0x6c
 800e832:	9a05      	ldr	r2, [sp, #20]
 800e834:	5d1b      	ldrb	r3, [r3, r4]
 800e836:	2a00      	cmp	r2, #0
 800e838:	d037      	beq.n	800e8aa <_strtod_l+0x242>
 800e83a:	9c05      	ldr	r4, [sp, #20]
 800e83c:	4602      	mov	r2, r0
 800e83e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800e842:	2909      	cmp	r1, #9
 800e844:	d913      	bls.n	800e86e <_strtod_l+0x206>
 800e846:	2101      	movs	r1, #1
 800e848:	9104      	str	r1, [sp, #16]
 800e84a:	e7c2      	b.n	800e7d2 <_strtod_l+0x16a>
 800e84c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e84e:	1c5a      	adds	r2, r3, #1
 800e850:	921b      	str	r2, [sp, #108]	; 0x6c
 800e852:	785b      	ldrb	r3, [r3, #1]
 800e854:	3001      	adds	r0, #1
 800e856:	2b30      	cmp	r3, #48	; 0x30
 800e858:	d0f8      	beq.n	800e84c <_strtod_l+0x1e4>
 800e85a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800e85e:	2a08      	cmp	r2, #8
 800e860:	f200 84e4 	bhi.w	800f22c <_strtod_l+0xbc4>
 800e864:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800e866:	9208      	str	r2, [sp, #32]
 800e868:	4602      	mov	r2, r0
 800e86a:	2000      	movs	r0, #0
 800e86c:	4604      	mov	r4, r0
 800e86e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800e872:	f100 0101 	add.w	r1, r0, #1
 800e876:	d012      	beq.n	800e89e <_strtod_l+0x236>
 800e878:	440a      	add	r2, r1
 800e87a:	eb00 0c04 	add.w	ip, r0, r4
 800e87e:	4621      	mov	r1, r4
 800e880:	270a      	movs	r7, #10
 800e882:	458c      	cmp	ip, r1
 800e884:	d113      	bne.n	800e8ae <_strtod_l+0x246>
 800e886:	1821      	adds	r1, r4, r0
 800e888:	2908      	cmp	r1, #8
 800e88a:	f104 0401 	add.w	r4, r4, #1
 800e88e:	4404      	add	r4, r0
 800e890:	dc19      	bgt.n	800e8c6 <_strtod_l+0x25e>
 800e892:	9b07      	ldr	r3, [sp, #28]
 800e894:	210a      	movs	r1, #10
 800e896:	fb01 e303 	mla	r3, r1, r3, lr
 800e89a:	9307      	str	r3, [sp, #28]
 800e89c:	2100      	movs	r1, #0
 800e89e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e8a0:	1c58      	adds	r0, r3, #1
 800e8a2:	901b      	str	r0, [sp, #108]	; 0x6c
 800e8a4:	785b      	ldrb	r3, [r3, #1]
 800e8a6:	4608      	mov	r0, r1
 800e8a8:	e7c9      	b.n	800e83e <_strtod_l+0x1d6>
 800e8aa:	9805      	ldr	r0, [sp, #20]
 800e8ac:	e7d3      	b.n	800e856 <_strtod_l+0x1ee>
 800e8ae:	2908      	cmp	r1, #8
 800e8b0:	f101 0101 	add.w	r1, r1, #1
 800e8b4:	dc03      	bgt.n	800e8be <_strtod_l+0x256>
 800e8b6:	9b07      	ldr	r3, [sp, #28]
 800e8b8:	437b      	muls	r3, r7
 800e8ba:	9307      	str	r3, [sp, #28]
 800e8bc:	e7e1      	b.n	800e882 <_strtod_l+0x21a>
 800e8be:	2910      	cmp	r1, #16
 800e8c0:	bfd8      	it	le
 800e8c2:	437d      	mulle	r5, r7
 800e8c4:	e7dd      	b.n	800e882 <_strtod_l+0x21a>
 800e8c6:	2c10      	cmp	r4, #16
 800e8c8:	bfdc      	itt	le
 800e8ca:	210a      	movle	r1, #10
 800e8cc:	fb01 e505 	mlale	r5, r1, r5, lr
 800e8d0:	e7e4      	b.n	800e89c <_strtod_l+0x234>
 800e8d2:	2301      	movs	r3, #1
 800e8d4:	9304      	str	r3, [sp, #16]
 800e8d6:	e781      	b.n	800e7dc <_strtod_l+0x174>
 800e8d8:	f04f 0c01 	mov.w	ip, #1
 800e8dc:	1cb3      	adds	r3, r6, #2
 800e8de:	931b      	str	r3, [sp, #108]	; 0x6c
 800e8e0:	78b3      	ldrb	r3, [r6, #2]
 800e8e2:	e78a      	b.n	800e7fa <_strtod_l+0x192>
 800e8e4:	f04f 0c00 	mov.w	ip, #0
 800e8e8:	e7f8      	b.n	800e8dc <_strtod_l+0x274>
 800e8ea:	bf00      	nop
 800e8ec:	08011938 	.word	0x08011938
 800e8f0:	7ff00000 	.word	0x7ff00000
 800e8f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e8f6:	1c5f      	adds	r7, r3, #1
 800e8f8:	971b      	str	r7, [sp, #108]	; 0x6c
 800e8fa:	785b      	ldrb	r3, [r3, #1]
 800e8fc:	2b30      	cmp	r3, #48	; 0x30
 800e8fe:	d0f9      	beq.n	800e8f4 <_strtod_l+0x28c>
 800e900:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800e904:	2f08      	cmp	r7, #8
 800e906:	f63f af7d 	bhi.w	800e804 <_strtod_l+0x19c>
 800e90a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800e90e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e910:	930a      	str	r3, [sp, #40]	; 0x28
 800e912:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e914:	1c5f      	adds	r7, r3, #1
 800e916:	971b      	str	r7, [sp, #108]	; 0x6c
 800e918:	785b      	ldrb	r3, [r3, #1]
 800e91a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800e91e:	f1b8 0f09 	cmp.w	r8, #9
 800e922:	d937      	bls.n	800e994 <_strtod_l+0x32c>
 800e924:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e926:	1a7f      	subs	r7, r7, r1
 800e928:	2f08      	cmp	r7, #8
 800e92a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800e92e:	dc37      	bgt.n	800e9a0 <_strtod_l+0x338>
 800e930:	45be      	cmp	lr, r7
 800e932:	bfa8      	it	ge
 800e934:	46be      	movge	lr, r7
 800e936:	f1bc 0f00 	cmp.w	ip, #0
 800e93a:	d001      	beq.n	800e940 <_strtod_l+0x2d8>
 800e93c:	f1ce 0e00 	rsb	lr, lr, #0
 800e940:	2c00      	cmp	r4, #0
 800e942:	d151      	bne.n	800e9e8 <_strtod_l+0x380>
 800e944:	2800      	cmp	r0, #0
 800e946:	f47f aece 	bne.w	800e6e6 <_strtod_l+0x7e>
 800e94a:	9a06      	ldr	r2, [sp, #24]
 800e94c:	2a00      	cmp	r2, #0
 800e94e:	f47f aeca 	bne.w	800e6e6 <_strtod_l+0x7e>
 800e952:	9a04      	ldr	r2, [sp, #16]
 800e954:	2a00      	cmp	r2, #0
 800e956:	f47f aee4 	bne.w	800e722 <_strtod_l+0xba>
 800e95a:	2b4e      	cmp	r3, #78	; 0x4e
 800e95c:	d027      	beq.n	800e9ae <_strtod_l+0x346>
 800e95e:	dc21      	bgt.n	800e9a4 <_strtod_l+0x33c>
 800e960:	2b49      	cmp	r3, #73	; 0x49
 800e962:	f47f aede 	bne.w	800e722 <_strtod_l+0xba>
 800e966:	49a0      	ldr	r1, [pc, #640]	; (800ebe8 <_strtod_l+0x580>)
 800e968:	a81b      	add	r0, sp, #108	; 0x6c
 800e96a:	f001 fdd7 	bl	801051c <__match>
 800e96e:	2800      	cmp	r0, #0
 800e970:	f43f aed7 	beq.w	800e722 <_strtod_l+0xba>
 800e974:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e976:	499d      	ldr	r1, [pc, #628]	; (800ebec <_strtod_l+0x584>)
 800e978:	3b01      	subs	r3, #1
 800e97a:	a81b      	add	r0, sp, #108	; 0x6c
 800e97c:	931b      	str	r3, [sp, #108]	; 0x6c
 800e97e:	f001 fdcd 	bl	801051c <__match>
 800e982:	b910      	cbnz	r0, 800e98a <_strtod_l+0x322>
 800e984:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e986:	3301      	adds	r3, #1
 800e988:	931b      	str	r3, [sp, #108]	; 0x6c
 800e98a:	f8df b274 	ldr.w	fp, [pc, #628]	; 800ec00 <_strtod_l+0x598>
 800e98e:	f04f 0a00 	mov.w	sl, #0
 800e992:	e6a8      	b.n	800e6e6 <_strtod_l+0x7e>
 800e994:	210a      	movs	r1, #10
 800e996:	fb01 3e0e 	mla	lr, r1, lr, r3
 800e99a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800e99e:	e7b8      	b.n	800e912 <_strtod_l+0x2aa>
 800e9a0:	46be      	mov	lr, r7
 800e9a2:	e7c8      	b.n	800e936 <_strtod_l+0x2ce>
 800e9a4:	2b69      	cmp	r3, #105	; 0x69
 800e9a6:	d0de      	beq.n	800e966 <_strtod_l+0x2fe>
 800e9a8:	2b6e      	cmp	r3, #110	; 0x6e
 800e9aa:	f47f aeba 	bne.w	800e722 <_strtod_l+0xba>
 800e9ae:	4990      	ldr	r1, [pc, #576]	; (800ebf0 <_strtod_l+0x588>)
 800e9b0:	a81b      	add	r0, sp, #108	; 0x6c
 800e9b2:	f001 fdb3 	bl	801051c <__match>
 800e9b6:	2800      	cmp	r0, #0
 800e9b8:	f43f aeb3 	beq.w	800e722 <_strtod_l+0xba>
 800e9bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e9be:	781b      	ldrb	r3, [r3, #0]
 800e9c0:	2b28      	cmp	r3, #40	; 0x28
 800e9c2:	d10e      	bne.n	800e9e2 <_strtod_l+0x37a>
 800e9c4:	aa1e      	add	r2, sp, #120	; 0x78
 800e9c6:	498b      	ldr	r1, [pc, #556]	; (800ebf4 <_strtod_l+0x58c>)
 800e9c8:	a81b      	add	r0, sp, #108	; 0x6c
 800e9ca:	f001 fdbb 	bl	8010544 <__hexnan>
 800e9ce:	2805      	cmp	r0, #5
 800e9d0:	d107      	bne.n	800e9e2 <_strtod_l+0x37a>
 800e9d2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e9d4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800e9d8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800e9dc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800e9e0:	e681      	b.n	800e6e6 <_strtod_l+0x7e>
 800e9e2:	f8df b224 	ldr.w	fp, [pc, #548]	; 800ec08 <_strtod_l+0x5a0>
 800e9e6:	e7d2      	b.n	800e98e <_strtod_l+0x326>
 800e9e8:	ebae 0302 	sub.w	r3, lr, r2
 800e9ec:	9306      	str	r3, [sp, #24]
 800e9ee:	9b05      	ldr	r3, [sp, #20]
 800e9f0:	9807      	ldr	r0, [sp, #28]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	bf08      	it	eq
 800e9f6:	4623      	moveq	r3, r4
 800e9f8:	2c10      	cmp	r4, #16
 800e9fa:	9305      	str	r3, [sp, #20]
 800e9fc:	46a0      	mov	r8, r4
 800e9fe:	bfa8      	it	ge
 800ea00:	f04f 0810 	movge.w	r8, #16
 800ea04:	f7f1 fd7e 	bl	8000504 <__aeabi_ui2d>
 800ea08:	2c09      	cmp	r4, #9
 800ea0a:	4682      	mov	sl, r0
 800ea0c:	468b      	mov	fp, r1
 800ea0e:	dc13      	bgt.n	800ea38 <_strtod_l+0x3d0>
 800ea10:	9b06      	ldr	r3, [sp, #24]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	f43f ae67 	beq.w	800e6e6 <_strtod_l+0x7e>
 800ea18:	9b06      	ldr	r3, [sp, #24]
 800ea1a:	dd7a      	ble.n	800eb12 <_strtod_l+0x4aa>
 800ea1c:	2b16      	cmp	r3, #22
 800ea1e:	dc61      	bgt.n	800eae4 <_strtod_l+0x47c>
 800ea20:	4a75      	ldr	r2, [pc, #468]	; (800ebf8 <_strtod_l+0x590>)
 800ea22:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800ea26:	e9de 0100 	ldrd	r0, r1, [lr]
 800ea2a:	4652      	mov	r2, sl
 800ea2c:	465b      	mov	r3, fp
 800ea2e:	f7f1 fde3 	bl	80005f8 <__aeabi_dmul>
 800ea32:	4682      	mov	sl, r0
 800ea34:	468b      	mov	fp, r1
 800ea36:	e656      	b.n	800e6e6 <_strtod_l+0x7e>
 800ea38:	4b6f      	ldr	r3, [pc, #444]	; (800ebf8 <_strtod_l+0x590>)
 800ea3a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ea3e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ea42:	f7f1 fdd9 	bl	80005f8 <__aeabi_dmul>
 800ea46:	4606      	mov	r6, r0
 800ea48:	4628      	mov	r0, r5
 800ea4a:	460f      	mov	r7, r1
 800ea4c:	f7f1 fd5a 	bl	8000504 <__aeabi_ui2d>
 800ea50:	4602      	mov	r2, r0
 800ea52:	460b      	mov	r3, r1
 800ea54:	4630      	mov	r0, r6
 800ea56:	4639      	mov	r1, r7
 800ea58:	f7f1 fc18 	bl	800028c <__adddf3>
 800ea5c:	2c0f      	cmp	r4, #15
 800ea5e:	4682      	mov	sl, r0
 800ea60:	468b      	mov	fp, r1
 800ea62:	ddd5      	ble.n	800ea10 <_strtod_l+0x3a8>
 800ea64:	9b06      	ldr	r3, [sp, #24]
 800ea66:	eba4 0808 	sub.w	r8, r4, r8
 800ea6a:	4498      	add	r8, r3
 800ea6c:	f1b8 0f00 	cmp.w	r8, #0
 800ea70:	f340 8096 	ble.w	800eba0 <_strtod_l+0x538>
 800ea74:	f018 030f 	ands.w	r3, r8, #15
 800ea78:	d00a      	beq.n	800ea90 <_strtod_l+0x428>
 800ea7a:	495f      	ldr	r1, [pc, #380]	; (800ebf8 <_strtod_l+0x590>)
 800ea7c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ea80:	4652      	mov	r2, sl
 800ea82:	465b      	mov	r3, fp
 800ea84:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ea88:	f7f1 fdb6 	bl	80005f8 <__aeabi_dmul>
 800ea8c:	4682      	mov	sl, r0
 800ea8e:	468b      	mov	fp, r1
 800ea90:	f038 080f 	bics.w	r8, r8, #15
 800ea94:	d073      	beq.n	800eb7e <_strtod_l+0x516>
 800ea96:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800ea9a:	dd47      	ble.n	800eb2c <_strtod_l+0x4c4>
 800ea9c:	2400      	movs	r4, #0
 800ea9e:	46a0      	mov	r8, r4
 800eaa0:	9407      	str	r4, [sp, #28]
 800eaa2:	9405      	str	r4, [sp, #20]
 800eaa4:	2322      	movs	r3, #34	; 0x22
 800eaa6:	f8df b158 	ldr.w	fp, [pc, #344]	; 800ec00 <_strtod_l+0x598>
 800eaaa:	f8c9 3000 	str.w	r3, [r9]
 800eaae:	f04f 0a00 	mov.w	sl, #0
 800eab2:	9b07      	ldr	r3, [sp, #28]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	f43f ae16 	beq.w	800e6e6 <_strtod_l+0x7e>
 800eaba:	991c      	ldr	r1, [sp, #112]	; 0x70
 800eabc:	4648      	mov	r0, r9
 800eabe:	f001 fe2d 	bl	801071c <_Bfree>
 800eac2:	9905      	ldr	r1, [sp, #20]
 800eac4:	4648      	mov	r0, r9
 800eac6:	f001 fe29 	bl	801071c <_Bfree>
 800eaca:	4641      	mov	r1, r8
 800eacc:	4648      	mov	r0, r9
 800eace:	f001 fe25 	bl	801071c <_Bfree>
 800ead2:	9907      	ldr	r1, [sp, #28]
 800ead4:	4648      	mov	r0, r9
 800ead6:	f001 fe21 	bl	801071c <_Bfree>
 800eada:	4621      	mov	r1, r4
 800eadc:	4648      	mov	r0, r9
 800eade:	f001 fe1d 	bl	801071c <_Bfree>
 800eae2:	e600      	b.n	800e6e6 <_strtod_l+0x7e>
 800eae4:	9a06      	ldr	r2, [sp, #24]
 800eae6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800eaea:	4293      	cmp	r3, r2
 800eaec:	dbba      	blt.n	800ea64 <_strtod_l+0x3fc>
 800eaee:	4d42      	ldr	r5, [pc, #264]	; (800ebf8 <_strtod_l+0x590>)
 800eaf0:	f1c4 040f 	rsb	r4, r4, #15
 800eaf4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800eaf8:	4652      	mov	r2, sl
 800eafa:	465b      	mov	r3, fp
 800eafc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eb00:	f7f1 fd7a 	bl	80005f8 <__aeabi_dmul>
 800eb04:	9b06      	ldr	r3, [sp, #24]
 800eb06:	1b1c      	subs	r4, r3, r4
 800eb08:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800eb0c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800eb10:	e78d      	b.n	800ea2e <_strtod_l+0x3c6>
 800eb12:	f113 0f16 	cmn.w	r3, #22
 800eb16:	dba5      	blt.n	800ea64 <_strtod_l+0x3fc>
 800eb18:	4a37      	ldr	r2, [pc, #220]	; (800ebf8 <_strtod_l+0x590>)
 800eb1a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800eb1e:	e9d2 2300 	ldrd	r2, r3, [r2]
 800eb22:	4650      	mov	r0, sl
 800eb24:	4659      	mov	r1, fp
 800eb26:	f7f1 fe91 	bl	800084c <__aeabi_ddiv>
 800eb2a:	e782      	b.n	800ea32 <_strtod_l+0x3ca>
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	4e33      	ldr	r6, [pc, #204]	; (800ebfc <_strtod_l+0x594>)
 800eb30:	ea4f 1828 	mov.w	r8, r8, asr #4
 800eb34:	4650      	mov	r0, sl
 800eb36:	4659      	mov	r1, fp
 800eb38:	461d      	mov	r5, r3
 800eb3a:	f1b8 0f01 	cmp.w	r8, #1
 800eb3e:	dc21      	bgt.n	800eb84 <_strtod_l+0x51c>
 800eb40:	b10b      	cbz	r3, 800eb46 <_strtod_l+0x4de>
 800eb42:	4682      	mov	sl, r0
 800eb44:	468b      	mov	fp, r1
 800eb46:	4b2d      	ldr	r3, [pc, #180]	; (800ebfc <_strtod_l+0x594>)
 800eb48:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800eb4c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800eb50:	4652      	mov	r2, sl
 800eb52:	465b      	mov	r3, fp
 800eb54:	e9d5 0100 	ldrd	r0, r1, [r5]
 800eb58:	f7f1 fd4e 	bl	80005f8 <__aeabi_dmul>
 800eb5c:	4b28      	ldr	r3, [pc, #160]	; (800ec00 <_strtod_l+0x598>)
 800eb5e:	460a      	mov	r2, r1
 800eb60:	400b      	ands	r3, r1
 800eb62:	4928      	ldr	r1, [pc, #160]	; (800ec04 <_strtod_l+0x59c>)
 800eb64:	428b      	cmp	r3, r1
 800eb66:	4682      	mov	sl, r0
 800eb68:	d898      	bhi.n	800ea9c <_strtod_l+0x434>
 800eb6a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800eb6e:	428b      	cmp	r3, r1
 800eb70:	bf86      	itte	hi
 800eb72:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800ec0c <_strtod_l+0x5a4>
 800eb76:	f04f 3aff 	movhi.w	sl, #4294967295
 800eb7a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800eb7e:	2300      	movs	r3, #0
 800eb80:	9304      	str	r3, [sp, #16]
 800eb82:	e077      	b.n	800ec74 <_strtod_l+0x60c>
 800eb84:	f018 0f01 	tst.w	r8, #1
 800eb88:	d006      	beq.n	800eb98 <_strtod_l+0x530>
 800eb8a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800eb8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb92:	f7f1 fd31 	bl	80005f8 <__aeabi_dmul>
 800eb96:	2301      	movs	r3, #1
 800eb98:	3501      	adds	r5, #1
 800eb9a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800eb9e:	e7cc      	b.n	800eb3a <_strtod_l+0x4d2>
 800eba0:	d0ed      	beq.n	800eb7e <_strtod_l+0x516>
 800eba2:	f1c8 0800 	rsb	r8, r8, #0
 800eba6:	f018 020f 	ands.w	r2, r8, #15
 800ebaa:	d00a      	beq.n	800ebc2 <_strtod_l+0x55a>
 800ebac:	4b12      	ldr	r3, [pc, #72]	; (800ebf8 <_strtod_l+0x590>)
 800ebae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ebb2:	4650      	mov	r0, sl
 800ebb4:	4659      	mov	r1, fp
 800ebb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebba:	f7f1 fe47 	bl	800084c <__aeabi_ddiv>
 800ebbe:	4682      	mov	sl, r0
 800ebc0:	468b      	mov	fp, r1
 800ebc2:	ea5f 1828 	movs.w	r8, r8, asr #4
 800ebc6:	d0da      	beq.n	800eb7e <_strtod_l+0x516>
 800ebc8:	f1b8 0f1f 	cmp.w	r8, #31
 800ebcc:	dd20      	ble.n	800ec10 <_strtod_l+0x5a8>
 800ebce:	2400      	movs	r4, #0
 800ebd0:	46a0      	mov	r8, r4
 800ebd2:	9407      	str	r4, [sp, #28]
 800ebd4:	9405      	str	r4, [sp, #20]
 800ebd6:	2322      	movs	r3, #34	; 0x22
 800ebd8:	f04f 0a00 	mov.w	sl, #0
 800ebdc:	f04f 0b00 	mov.w	fp, #0
 800ebe0:	f8c9 3000 	str.w	r3, [r9]
 800ebe4:	e765      	b.n	800eab2 <_strtod_l+0x44a>
 800ebe6:	bf00      	nop
 800ebe8:	08011901 	.word	0x08011901
 800ebec:	0801198b 	.word	0x0801198b
 800ebf0:	08011909 	.word	0x08011909
 800ebf4:	0801194c 	.word	0x0801194c
 800ebf8:	080119c8 	.word	0x080119c8
 800ebfc:	080119a0 	.word	0x080119a0
 800ec00:	7ff00000 	.word	0x7ff00000
 800ec04:	7ca00000 	.word	0x7ca00000
 800ec08:	fff80000 	.word	0xfff80000
 800ec0c:	7fefffff 	.word	0x7fefffff
 800ec10:	f018 0310 	ands.w	r3, r8, #16
 800ec14:	bf18      	it	ne
 800ec16:	236a      	movne	r3, #106	; 0x6a
 800ec18:	4da0      	ldr	r5, [pc, #640]	; (800ee9c <_strtod_l+0x834>)
 800ec1a:	9304      	str	r3, [sp, #16]
 800ec1c:	4650      	mov	r0, sl
 800ec1e:	4659      	mov	r1, fp
 800ec20:	2300      	movs	r3, #0
 800ec22:	f1b8 0f00 	cmp.w	r8, #0
 800ec26:	f300 810a 	bgt.w	800ee3e <_strtod_l+0x7d6>
 800ec2a:	b10b      	cbz	r3, 800ec30 <_strtod_l+0x5c8>
 800ec2c:	4682      	mov	sl, r0
 800ec2e:	468b      	mov	fp, r1
 800ec30:	9b04      	ldr	r3, [sp, #16]
 800ec32:	b1bb      	cbz	r3, 800ec64 <_strtod_l+0x5fc>
 800ec34:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800ec38:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	4659      	mov	r1, fp
 800ec40:	dd10      	ble.n	800ec64 <_strtod_l+0x5fc>
 800ec42:	2b1f      	cmp	r3, #31
 800ec44:	f340 8107 	ble.w	800ee56 <_strtod_l+0x7ee>
 800ec48:	2b34      	cmp	r3, #52	; 0x34
 800ec4a:	bfde      	ittt	le
 800ec4c:	3b20      	suble	r3, #32
 800ec4e:	f04f 32ff 	movle.w	r2, #4294967295
 800ec52:	fa02 f303 	lslle.w	r3, r2, r3
 800ec56:	f04f 0a00 	mov.w	sl, #0
 800ec5a:	bfcc      	ite	gt
 800ec5c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800ec60:	ea03 0b01 	andle.w	fp, r3, r1
 800ec64:	2200      	movs	r2, #0
 800ec66:	2300      	movs	r3, #0
 800ec68:	4650      	mov	r0, sl
 800ec6a:	4659      	mov	r1, fp
 800ec6c:	f7f1 ff2c 	bl	8000ac8 <__aeabi_dcmpeq>
 800ec70:	2800      	cmp	r0, #0
 800ec72:	d1ac      	bne.n	800ebce <_strtod_l+0x566>
 800ec74:	9b07      	ldr	r3, [sp, #28]
 800ec76:	9300      	str	r3, [sp, #0]
 800ec78:	9a05      	ldr	r2, [sp, #20]
 800ec7a:	9908      	ldr	r1, [sp, #32]
 800ec7c:	4623      	mov	r3, r4
 800ec7e:	4648      	mov	r0, r9
 800ec80:	f001 fd9e 	bl	80107c0 <__s2b>
 800ec84:	9007      	str	r0, [sp, #28]
 800ec86:	2800      	cmp	r0, #0
 800ec88:	f43f af08 	beq.w	800ea9c <_strtod_l+0x434>
 800ec8c:	9a06      	ldr	r2, [sp, #24]
 800ec8e:	9b06      	ldr	r3, [sp, #24]
 800ec90:	2a00      	cmp	r2, #0
 800ec92:	f1c3 0300 	rsb	r3, r3, #0
 800ec96:	bfa8      	it	ge
 800ec98:	2300      	movge	r3, #0
 800ec9a:	930e      	str	r3, [sp, #56]	; 0x38
 800ec9c:	2400      	movs	r4, #0
 800ec9e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800eca2:	9316      	str	r3, [sp, #88]	; 0x58
 800eca4:	46a0      	mov	r8, r4
 800eca6:	9b07      	ldr	r3, [sp, #28]
 800eca8:	4648      	mov	r0, r9
 800ecaa:	6859      	ldr	r1, [r3, #4]
 800ecac:	f001 fd02 	bl	80106b4 <_Balloc>
 800ecb0:	9005      	str	r0, [sp, #20]
 800ecb2:	2800      	cmp	r0, #0
 800ecb4:	f43f aef6 	beq.w	800eaa4 <_strtod_l+0x43c>
 800ecb8:	9b07      	ldr	r3, [sp, #28]
 800ecba:	691a      	ldr	r2, [r3, #16]
 800ecbc:	3202      	adds	r2, #2
 800ecbe:	f103 010c 	add.w	r1, r3, #12
 800ecc2:	0092      	lsls	r2, r2, #2
 800ecc4:	300c      	adds	r0, #12
 800ecc6:	f7fe fd83 	bl	800d7d0 <memcpy>
 800ecca:	aa1e      	add	r2, sp, #120	; 0x78
 800eccc:	a91d      	add	r1, sp, #116	; 0x74
 800ecce:	ec4b ab10 	vmov	d0, sl, fp
 800ecd2:	4648      	mov	r0, r9
 800ecd4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800ecd8:	f002 f82e 	bl	8010d38 <__d2b>
 800ecdc:	901c      	str	r0, [sp, #112]	; 0x70
 800ecde:	2800      	cmp	r0, #0
 800ece0:	f43f aee0 	beq.w	800eaa4 <_strtod_l+0x43c>
 800ece4:	2101      	movs	r1, #1
 800ece6:	4648      	mov	r0, r9
 800ece8:	f001 fdf6 	bl	80108d8 <__i2b>
 800ecec:	4680      	mov	r8, r0
 800ecee:	2800      	cmp	r0, #0
 800ecf0:	f43f aed8 	beq.w	800eaa4 <_strtod_l+0x43c>
 800ecf4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800ecf6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ecf8:	2e00      	cmp	r6, #0
 800ecfa:	bfab      	itete	ge
 800ecfc:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800ecfe:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800ed00:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800ed02:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800ed04:	bfac      	ite	ge
 800ed06:	18f7      	addge	r7, r6, r3
 800ed08:	1b9d      	sublt	r5, r3, r6
 800ed0a:	9b04      	ldr	r3, [sp, #16]
 800ed0c:	1af6      	subs	r6, r6, r3
 800ed0e:	4416      	add	r6, r2
 800ed10:	4b63      	ldr	r3, [pc, #396]	; (800eea0 <_strtod_l+0x838>)
 800ed12:	3e01      	subs	r6, #1
 800ed14:	429e      	cmp	r6, r3
 800ed16:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ed1a:	f280 80af 	bge.w	800ee7c <_strtod_l+0x814>
 800ed1e:	1b9b      	subs	r3, r3, r6
 800ed20:	2b1f      	cmp	r3, #31
 800ed22:	eba2 0203 	sub.w	r2, r2, r3
 800ed26:	f04f 0101 	mov.w	r1, #1
 800ed2a:	f300 809b 	bgt.w	800ee64 <_strtod_l+0x7fc>
 800ed2e:	fa01 f303 	lsl.w	r3, r1, r3
 800ed32:	930f      	str	r3, [sp, #60]	; 0x3c
 800ed34:	2300      	movs	r3, #0
 800ed36:	930a      	str	r3, [sp, #40]	; 0x28
 800ed38:	18be      	adds	r6, r7, r2
 800ed3a:	9b04      	ldr	r3, [sp, #16]
 800ed3c:	42b7      	cmp	r7, r6
 800ed3e:	4415      	add	r5, r2
 800ed40:	441d      	add	r5, r3
 800ed42:	463b      	mov	r3, r7
 800ed44:	bfa8      	it	ge
 800ed46:	4633      	movge	r3, r6
 800ed48:	42ab      	cmp	r3, r5
 800ed4a:	bfa8      	it	ge
 800ed4c:	462b      	movge	r3, r5
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	bfc2      	ittt	gt
 800ed52:	1af6      	subgt	r6, r6, r3
 800ed54:	1aed      	subgt	r5, r5, r3
 800ed56:	1aff      	subgt	r7, r7, r3
 800ed58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ed5a:	b1bb      	cbz	r3, 800ed8c <_strtod_l+0x724>
 800ed5c:	4641      	mov	r1, r8
 800ed5e:	461a      	mov	r2, r3
 800ed60:	4648      	mov	r0, r9
 800ed62:	f001 fe59 	bl	8010a18 <__pow5mult>
 800ed66:	4680      	mov	r8, r0
 800ed68:	2800      	cmp	r0, #0
 800ed6a:	f43f ae9b 	beq.w	800eaa4 <_strtod_l+0x43c>
 800ed6e:	4601      	mov	r1, r0
 800ed70:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ed72:	4648      	mov	r0, r9
 800ed74:	f001 fdb9 	bl	80108ea <__multiply>
 800ed78:	900c      	str	r0, [sp, #48]	; 0x30
 800ed7a:	2800      	cmp	r0, #0
 800ed7c:	f43f ae92 	beq.w	800eaa4 <_strtod_l+0x43c>
 800ed80:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ed82:	4648      	mov	r0, r9
 800ed84:	f001 fcca 	bl	801071c <_Bfree>
 800ed88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ed8a:	931c      	str	r3, [sp, #112]	; 0x70
 800ed8c:	2e00      	cmp	r6, #0
 800ed8e:	dc7a      	bgt.n	800ee86 <_strtod_l+0x81e>
 800ed90:	9b06      	ldr	r3, [sp, #24]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	dd08      	ble.n	800eda8 <_strtod_l+0x740>
 800ed96:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ed98:	9905      	ldr	r1, [sp, #20]
 800ed9a:	4648      	mov	r0, r9
 800ed9c:	f001 fe3c 	bl	8010a18 <__pow5mult>
 800eda0:	9005      	str	r0, [sp, #20]
 800eda2:	2800      	cmp	r0, #0
 800eda4:	f43f ae7e 	beq.w	800eaa4 <_strtod_l+0x43c>
 800eda8:	2d00      	cmp	r5, #0
 800edaa:	dd08      	ble.n	800edbe <_strtod_l+0x756>
 800edac:	462a      	mov	r2, r5
 800edae:	9905      	ldr	r1, [sp, #20]
 800edb0:	4648      	mov	r0, r9
 800edb2:	f001 fe7f 	bl	8010ab4 <__lshift>
 800edb6:	9005      	str	r0, [sp, #20]
 800edb8:	2800      	cmp	r0, #0
 800edba:	f43f ae73 	beq.w	800eaa4 <_strtod_l+0x43c>
 800edbe:	2f00      	cmp	r7, #0
 800edc0:	dd08      	ble.n	800edd4 <_strtod_l+0x76c>
 800edc2:	4641      	mov	r1, r8
 800edc4:	463a      	mov	r2, r7
 800edc6:	4648      	mov	r0, r9
 800edc8:	f001 fe74 	bl	8010ab4 <__lshift>
 800edcc:	4680      	mov	r8, r0
 800edce:	2800      	cmp	r0, #0
 800edd0:	f43f ae68 	beq.w	800eaa4 <_strtod_l+0x43c>
 800edd4:	9a05      	ldr	r2, [sp, #20]
 800edd6:	991c      	ldr	r1, [sp, #112]	; 0x70
 800edd8:	4648      	mov	r0, r9
 800edda:	f001 fed9 	bl	8010b90 <__mdiff>
 800edde:	4604      	mov	r4, r0
 800ede0:	2800      	cmp	r0, #0
 800ede2:	f43f ae5f 	beq.w	800eaa4 <_strtod_l+0x43c>
 800ede6:	68c3      	ldr	r3, [r0, #12]
 800ede8:	930c      	str	r3, [sp, #48]	; 0x30
 800edea:	2300      	movs	r3, #0
 800edec:	60c3      	str	r3, [r0, #12]
 800edee:	4641      	mov	r1, r8
 800edf0:	f001 feb4 	bl	8010b5c <__mcmp>
 800edf4:	2800      	cmp	r0, #0
 800edf6:	da55      	bge.n	800eea4 <_strtod_l+0x83c>
 800edf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800edfa:	b9e3      	cbnz	r3, 800ee36 <_strtod_l+0x7ce>
 800edfc:	f1ba 0f00 	cmp.w	sl, #0
 800ee00:	d119      	bne.n	800ee36 <_strtod_l+0x7ce>
 800ee02:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ee06:	b9b3      	cbnz	r3, 800ee36 <_strtod_l+0x7ce>
 800ee08:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ee0c:	0d1b      	lsrs	r3, r3, #20
 800ee0e:	051b      	lsls	r3, r3, #20
 800ee10:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ee14:	d90f      	bls.n	800ee36 <_strtod_l+0x7ce>
 800ee16:	6963      	ldr	r3, [r4, #20]
 800ee18:	b913      	cbnz	r3, 800ee20 <_strtod_l+0x7b8>
 800ee1a:	6923      	ldr	r3, [r4, #16]
 800ee1c:	2b01      	cmp	r3, #1
 800ee1e:	dd0a      	ble.n	800ee36 <_strtod_l+0x7ce>
 800ee20:	4621      	mov	r1, r4
 800ee22:	2201      	movs	r2, #1
 800ee24:	4648      	mov	r0, r9
 800ee26:	f001 fe45 	bl	8010ab4 <__lshift>
 800ee2a:	4641      	mov	r1, r8
 800ee2c:	4604      	mov	r4, r0
 800ee2e:	f001 fe95 	bl	8010b5c <__mcmp>
 800ee32:	2800      	cmp	r0, #0
 800ee34:	dc67      	bgt.n	800ef06 <_strtod_l+0x89e>
 800ee36:	9b04      	ldr	r3, [sp, #16]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d171      	bne.n	800ef20 <_strtod_l+0x8b8>
 800ee3c:	e63d      	b.n	800eaba <_strtod_l+0x452>
 800ee3e:	f018 0f01 	tst.w	r8, #1
 800ee42:	d004      	beq.n	800ee4e <_strtod_l+0x7e6>
 800ee44:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ee48:	f7f1 fbd6 	bl	80005f8 <__aeabi_dmul>
 800ee4c:	2301      	movs	r3, #1
 800ee4e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ee52:	3508      	adds	r5, #8
 800ee54:	e6e5      	b.n	800ec22 <_strtod_l+0x5ba>
 800ee56:	f04f 32ff 	mov.w	r2, #4294967295
 800ee5a:	fa02 f303 	lsl.w	r3, r2, r3
 800ee5e:	ea03 0a0a 	and.w	sl, r3, sl
 800ee62:	e6ff      	b.n	800ec64 <_strtod_l+0x5fc>
 800ee64:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800ee68:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800ee6c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800ee70:	36e2      	adds	r6, #226	; 0xe2
 800ee72:	fa01 f306 	lsl.w	r3, r1, r6
 800ee76:	930a      	str	r3, [sp, #40]	; 0x28
 800ee78:	910f      	str	r1, [sp, #60]	; 0x3c
 800ee7a:	e75d      	b.n	800ed38 <_strtod_l+0x6d0>
 800ee7c:	2300      	movs	r3, #0
 800ee7e:	930a      	str	r3, [sp, #40]	; 0x28
 800ee80:	2301      	movs	r3, #1
 800ee82:	930f      	str	r3, [sp, #60]	; 0x3c
 800ee84:	e758      	b.n	800ed38 <_strtod_l+0x6d0>
 800ee86:	4632      	mov	r2, r6
 800ee88:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ee8a:	4648      	mov	r0, r9
 800ee8c:	f001 fe12 	bl	8010ab4 <__lshift>
 800ee90:	901c      	str	r0, [sp, #112]	; 0x70
 800ee92:	2800      	cmp	r0, #0
 800ee94:	f47f af7c 	bne.w	800ed90 <_strtod_l+0x728>
 800ee98:	e604      	b.n	800eaa4 <_strtod_l+0x43c>
 800ee9a:	bf00      	nop
 800ee9c:	08011960 	.word	0x08011960
 800eea0:	fffffc02 	.word	0xfffffc02
 800eea4:	465d      	mov	r5, fp
 800eea6:	f040 8086 	bne.w	800efb6 <_strtod_l+0x94e>
 800eeaa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800eeac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800eeb0:	b32a      	cbz	r2, 800eefe <_strtod_l+0x896>
 800eeb2:	4aaf      	ldr	r2, [pc, #700]	; (800f170 <_strtod_l+0xb08>)
 800eeb4:	4293      	cmp	r3, r2
 800eeb6:	d153      	bne.n	800ef60 <_strtod_l+0x8f8>
 800eeb8:	9b04      	ldr	r3, [sp, #16]
 800eeba:	4650      	mov	r0, sl
 800eebc:	b1d3      	cbz	r3, 800eef4 <_strtod_l+0x88c>
 800eebe:	4aad      	ldr	r2, [pc, #692]	; (800f174 <_strtod_l+0xb0c>)
 800eec0:	402a      	ands	r2, r5
 800eec2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800eec6:	f04f 31ff 	mov.w	r1, #4294967295
 800eeca:	d816      	bhi.n	800eefa <_strtod_l+0x892>
 800eecc:	0d12      	lsrs	r2, r2, #20
 800eece:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800eed2:	fa01 f303 	lsl.w	r3, r1, r3
 800eed6:	4298      	cmp	r0, r3
 800eed8:	d142      	bne.n	800ef60 <_strtod_l+0x8f8>
 800eeda:	4ba7      	ldr	r3, [pc, #668]	; (800f178 <_strtod_l+0xb10>)
 800eedc:	429d      	cmp	r5, r3
 800eede:	d102      	bne.n	800eee6 <_strtod_l+0x87e>
 800eee0:	3001      	adds	r0, #1
 800eee2:	f43f addf 	beq.w	800eaa4 <_strtod_l+0x43c>
 800eee6:	4ba3      	ldr	r3, [pc, #652]	; (800f174 <_strtod_l+0xb0c>)
 800eee8:	402b      	ands	r3, r5
 800eeea:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800eeee:	f04f 0a00 	mov.w	sl, #0
 800eef2:	e7a0      	b.n	800ee36 <_strtod_l+0x7ce>
 800eef4:	f04f 33ff 	mov.w	r3, #4294967295
 800eef8:	e7ed      	b.n	800eed6 <_strtod_l+0x86e>
 800eefa:	460b      	mov	r3, r1
 800eefc:	e7eb      	b.n	800eed6 <_strtod_l+0x86e>
 800eefe:	bb7b      	cbnz	r3, 800ef60 <_strtod_l+0x8f8>
 800ef00:	f1ba 0f00 	cmp.w	sl, #0
 800ef04:	d12c      	bne.n	800ef60 <_strtod_l+0x8f8>
 800ef06:	9904      	ldr	r1, [sp, #16]
 800ef08:	4a9a      	ldr	r2, [pc, #616]	; (800f174 <_strtod_l+0xb0c>)
 800ef0a:	465b      	mov	r3, fp
 800ef0c:	b1f1      	cbz	r1, 800ef4c <_strtod_l+0x8e4>
 800ef0e:	ea02 010b 	and.w	r1, r2, fp
 800ef12:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ef16:	dc19      	bgt.n	800ef4c <_strtod_l+0x8e4>
 800ef18:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ef1c:	f77f ae5b 	ble.w	800ebd6 <_strtod_l+0x56e>
 800ef20:	4a96      	ldr	r2, [pc, #600]	; (800f17c <_strtod_l+0xb14>)
 800ef22:	2300      	movs	r3, #0
 800ef24:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800ef28:	4650      	mov	r0, sl
 800ef2a:	4659      	mov	r1, fp
 800ef2c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ef30:	f7f1 fb62 	bl	80005f8 <__aeabi_dmul>
 800ef34:	4682      	mov	sl, r0
 800ef36:	468b      	mov	fp, r1
 800ef38:	2900      	cmp	r1, #0
 800ef3a:	f47f adbe 	bne.w	800eaba <_strtod_l+0x452>
 800ef3e:	2800      	cmp	r0, #0
 800ef40:	f47f adbb 	bne.w	800eaba <_strtod_l+0x452>
 800ef44:	2322      	movs	r3, #34	; 0x22
 800ef46:	f8c9 3000 	str.w	r3, [r9]
 800ef4a:	e5b6      	b.n	800eaba <_strtod_l+0x452>
 800ef4c:	4013      	ands	r3, r2
 800ef4e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ef52:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ef56:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ef5a:	f04f 3aff 	mov.w	sl, #4294967295
 800ef5e:	e76a      	b.n	800ee36 <_strtod_l+0x7ce>
 800ef60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef62:	b193      	cbz	r3, 800ef8a <_strtod_l+0x922>
 800ef64:	422b      	tst	r3, r5
 800ef66:	f43f af66 	beq.w	800ee36 <_strtod_l+0x7ce>
 800ef6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ef6c:	9a04      	ldr	r2, [sp, #16]
 800ef6e:	4650      	mov	r0, sl
 800ef70:	4659      	mov	r1, fp
 800ef72:	b173      	cbz	r3, 800ef92 <_strtod_l+0x92a>
 800ef74:	f7ff fb5c 	bl	800e630 <sulp>
 800ef78:	4602      	mov	r2, r0
 800ef7a:	460b      	mov	r3, r1
 800ef7c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ef80:	f7f1 f984 	bl	800028c <__adddf3>
 800ef84:	4682      	mov	sl, r0
 800ef86:	468b      	mov	fp, r1
 800ef88:	e755      	b.n	800ee36 <_strtod_l+0x7ce>
 800ef8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ef8c:	ea13 0f0a 	tst.w	r3, sl
 800ef90:	e7e9      	b.n	800ef66 <_strtod_l+0x8fe>
 800ef92:	f7ff fb4d 	bl	800e630 <sulp>
 800ef96:	4602      	mov	r2, r0
 800ef98:	460b      	mov	r3, r1
 800ef9a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ef9e:	f7f1 f973 	bl	8000288 <__aeabi_dsub>
 800efa2:	2200      	movs	r2, #0
 800efa4:	2300      	movs	r3, #0
 800efa6:	4682      	mov	sl, r0
 800efa8:	468b      	mov	fp, r1
 800efaa:	f7f1 fd8d 	bl	8000ac8 <__aeabi_dcmpeq>
 800efae:	2800      	cmp	r0, #0
 800efb0:	f47f ae11 	bne.w	800ebd6 <_strtod_l+0x56e>
 800efb4:	e73f      	b.n	800ee36 <_strtod_l+0x7ce>
 800efb6:	4641      	mov	r1, r8
 800efb8:	4620      	mov	r0, r4
 800efba:	f001 ff0c 	bl	8010dd6 <__ratio>
 800efbe:	ec57 6b10 	vmov	r6, r7, d0
 800efc2:	2200      	movs	r2, #0
 800efc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800efc8:	ee10 0a10 	vmov	r0, s0
 800efcc:	4639      	mov	r1, r7
 800efce:	f7f1 fd8f 	bl	8000af0 <__aeabi_dcmple>
 800efd2:	2800      	cmp	r0, #0
 800efd4:	d077      	beq.n	800f0c6 <_strtod_l+0xa5e>
 800efd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d04a      	beq.n	800f072 <_strtod_l+0xa0a>
 800efdc:	4b68      	ldr	r3, [pc, #416]	; (800f180 <_strtod_l+0xb18>)
 800efde:	2200      	movs	r2, #0
 800efe0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800efe4:	4f66      	ldr	r7, [pc, #408]	; (800f180 <_strtod_l+0xb18>)
 800efe6:	2600      	movs	r6, #0
 800efe8:	4b62      	ldr	r3, [pc, #392]	; (800f174 <_strtod_l+0xb0c>)
 800efea:	402b      	ands	r3, r5
 800efec:	930f      	str	r3, [sp, #60]	; 0x3c
 800efee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800eff0:	4b64      	ldr	r3, [pc, #400]	; (800f184 <_strtod_l+0xb1c>)
 800eff2:	429a      	cmp	r2, r3
 800eff4:	f040 80ce 	bne.w	800f194 <_strtod_l+0xb2c>
 800eff8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800effc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f000:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800f004:	ec4b ab10 	vmov	d0, sl, fp
 800f008:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800f00c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800f010:	f001 fe1c 	bl	8010c4c <__ulp>
 800f014:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f018:	ec53 2b10 	vmov	r2, r3, d0
 800f01c:	f7f1 faec 	bl	80005f8 <__aeabi_dmul>
 800f020:	4652      	mov	r2, sl
 800f022:	465b      	mov	r3, fp
 800f024:	f7f1 f932 	bl	800028c <__adddf3>
 800f028:	460b      	mov	r3, r1
 800f02a:	4952      	ldr	r1, [pc, #328]	; (800f174 <_strtod_l+0xb0c>)
 800f02c:	4a56      	ldr	r2, [pc, #344]	; (800f188 <_strtod_l+0xb20>)
 800f02e:	4019      	ands	r1, r3
 800f030:	4291      	cmp	r1, r2
 800f032:	4682      	mov	sl, r0
 800f034:	d95b      	bls.n	800f0ee <_strtod_l+0xa86>
 800f036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f038:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800f03c:	4293      	cmp	r3, r2
 800f03e:	d103      	bne.n	800f048 <_strtod_l+0x9e0>
 800f040:	9b08      	ldr	r3, [sp, #32]
 800f042:	3301      	adds	r3, #1
 800f044:	f43f ad2e 	beq.w	800eaa4 <_strtod_l+0x43c>
 800f048:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800f178 <_strtod_l+0xb10>
 800f04c:	f04f 3aff 	mov.w	sl, #4294967295
 800f050:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f052:	4648      	mov	r0, r9
 800f054:	f001 fb62 	bl	801071c <_Bfree>
 800f058:	9905      	ldr	r1, [sp, #20]
 800f05a:	4648      	mov	r0, r9
 800f05c:	f001 fb5e 	bl	801071c <_Bfree>
 800f060:	4641      	mov	r1, r8
 800f062:	4648      	mov	r0, r9
 800f064:	f001 fb5a 	bl	801071c <_Bfree>
 800f068:	4621      	mov	r1, r4
 800f06a:	4648      	mov	r0, r9
 800f06c:	f001 fb56 	bl	801071c <_Bfree>
 800f070:	e619      	b.n	800eca6 <_strtod_l+0x63e>
 800f072:	f1ba 0f00 	cmp.w	sl, #0
 800f076:	d11a      	bne.n	800f0ae <_strtod_l+0xa46>
 800f078:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f07c:	b9eb      	cbnz	r3, 800f0ba <_strtod_l+0xa52>
 800f07e:	2200      	movs	r2, #0
 800f080:	4b3f      	ldr	r3, [pc, #252]	; (800f180 <_strtod_l+0xb18>)
 800f082:	4630      	mov	r0, r6
 800f084:	4639      	mov	r1, r7
 800f086:	f7f1 fd29 	bl	8000adc <__aeabi_dcmplt>
 800f08a:	b9c8      	cbnz	r0, 800f0c0 <_strtod_l+0xa58>
 800f08c:	4630      	mov	r0, r6
 800f08e:	4639      	mov	r1, r7
 800f090:	2200      	movs	r2, #0
 800f092:	4b3e      	ldr	r3, [pc, #248]	; (800f18c <_strtod_l+0xb24>)
 800f094:	f7f1 fab0 	bl	80005f8 <__aeabi_dmul>
 800f098:	4606      	mov	r6, r0
 800f09a:	460f      	mov	r7, r1
 800f09c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800f0a0:	9618      	str	r6, [sp, #96]	; 0x60
 800f0a2:	9319      	str	r3, [sp, #100]	; 0x64
 800f0a4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800f0a8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800f0ac:	e79c      	b.n	800efe8 <_strtod_l+0x980>
 800f0ae:	f1ba 0f01 	cmp.w	sl, #1
 800f0b2:	d102      	bne.n	800f0ba <_strtod_l+0xa52>
 800f0b4:	2d00      	cmp	r5, #0
 800f0b6:	f43f ad8e 	beq.w	800ebd6 <_strtod_l+0x56e>
 800f0ba:	2200      	movs	r2, #0
 800f0bc:	4b34      	ldr	r3, [pc, #208]	; (800f190 <_strtod_l+0xb28>)
 800f0be:	e78f      	b.n	800efe0 <_strtod_l+0x978>
 800f0c0:	2600      	movs	r6, #0
 800f0c2:	4f32      	ldr	r7, [pc, #200]	; (800f18c <_strtod_l+0xb24>)
 800f0c4:	e7ea      	b.n	800f09c <_strtod_l+0xa34>
 800f0c6:	4b31      	ldr	r3, [pc, #196]	; (800f18c <_strtod_l+0xb24>)
 800f0c8:	4630      	mov	r0, r6
 800f0ca:	4639      	mov	r1, r7
 800f0cc:	2200      	movs	r2, #0
 800f0ce:	f7f1 fa93 	bl	80005f8 <__aeabi_dmul>
 800f0d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f0d4:	4606      	mov	r6, r0
 800f0d6:	460f      	mov	r7, r1
 800f0d8:	b933      	cbnz	r3, 800f0e8 <_strtod_l+0xa80>
 800f0da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f0de:	9010      	str	r0, [sp, #64]	; 0x40
 800f0e0:	9311      	str	r3, [sp, #68]	; 0x44
 800f0e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f0e6:	e7df      	b.n	800f0a8 <_strtod_l+0xa40>
 800f0e8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800f0ec:	e7f9      	b.n	800f0e2 <_strtod_l+0xa7a>
 800f0ee:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800f0f2:	9b04      	ldr	r3, [sp, #16]
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d1ab      	bne.n	800f050 <_strtod_l+0x9e8>
 800f0f8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f0fc:	0d1b      	lsrs	r3, r3, #20
 800f0fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f100:	051b      	lsls	r3, r3, #20
 800f102:	429a      	cmp	r2, r3
 800f104:	465d      	mov	r5, fp
 800f106:	d1a3      	bne.n	800f050 <_strtod_l+0x9e8>
 800f108:	4639      	mov	r1, r7
 800f10a:	4630      	mov	r0, r6
 800f10c:	f7f1 fd24 	bl	8000b58 <__aeabi_d2iz>
 800f110:	f7f1 fa08 	bl	8000524 <__aeabi_i2d>
 800f114:	460b      	mov	r3, r1
 800f116:	4602      	mov	r2, r0
 800f118:	4639      	mov	r1, r7
 800f11a:	4630      	mov	r0, r6
 800f11c:	f7f1 f8b4 	bl	8000288 <__aeabi_dsub>
 800f120:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f122:	4606      	mov	r6, r0
 800f124:	460f      	mov	r7, r1
 800f126:	b933      	cbnz	r3, 800f136 <_strtod_l+0xace>
 800f128:	f1ba 0f00 	cmp.w	sl, #0
 800f12c:	d103      	bne.n	800f136 <_strtod_l+0xace>
 800f12e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800f132:	2d00      	cmp	r5, #0
 800f134:	d06d      	beq.n	800f212 <_strtod_l+0xbaa>
 800f136:	a30a      	add	r3, pc, #40	; (adr r3, 800f160 <_strtod_l+0xaf8>)
 800f138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f13c:	4630      	mov	r0, r6
 800f13e:	4639      	mov	r1, r7
 800f140:	f7f1 fccc 	bl	8000adc <__aeabi_dcmplt>
 800f144:	2800      	cmp	r0, #0
 800f146:	f47f acb8 	bne.w	800eaba <_strtod_l+0x452>
 800f14a:	a307      	add	r3, pc, #28	; (adr r3, 800f168 <_strtod_l+0xb00>)
 800f14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f150:	4630      	mov	r0, r6
 800f152:	4639      	mov	r1, r7
 800f154:	f7f1 fce0 	bl	8000b18 <__aeabi_dcmpgt>
 800f158:	2800      	cmp	r0, #0
 800f15a:	f43f af79 	beq.w	800f050 <_strtod_l+0x9e8>
 800f15e:	e4ac      	b.n	800eaba <_strtod_l+0x452>
 800f160:	94a03595 	.word	0x94a03595
 800f164:	3fdfffff 	.word	0x3fdfffff
 800f168:	35afe535 	.word	0x35afe535
 800f16c:	3fe00000 	.word	0x3fe00000
 800f170:	000fffff 	.word	0x000fffff
 800f174:	7ff00000 	.word	0x7ff00000
 800f178:	7fefffff 	.word	0x7fefffff
 800f17c:	39500000 	.word	0x39500000
 800f180:	3ff00000 	.word	0x3ff00000
 800f184:	7fe00000 	.word	0x7fe00000
 800f188:	7c9fffff 	.word	0x7c9fffff
 800f18c:	3fe00000 	.word	0x3fe00000
 800f190:	bff00000 	.word	0xbff00000
 800f194:	9b04      	ldr	r3, [sp, #16]
 800f196:	b333      	cbz	r3, 800f1e6 <_strtod_l+0xb7e>
 800f198:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f19a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f19e:	d822      	bhi.n	800f1e6 <_strtod_l+0xb7e>
 800f1a0:	a327      	add	r3, pc, #156	; (adr r3, 800f240 <_strtod_l+0xbd8>)
 800f1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1a6:	4630      	mov	r0, r6
 800f1a8:	4639      	mov	r1, r7
 800f1aa:	f7f1 fca1 	bl	8000af0 <__aeabi_dcmple>
 800f1ae:	b1a0      	cbz	r0, 800f1da <_strtod_l+0xb72>
 800f1b0:	4639      	mov	r1, r7
 800f1b2:	4630      	mov	r0, r6
 800f1b4:	f7f1 fcf8 	bl	8000ba8 <__aeabi_d2uiz>
 800f1b8:	2800      	cmp	r0, #0
 800f1ba:	bf08      	it	eq
 800f1bc:	2001      	moveq	r0, #1
 800f1be:	f7f1 f9a1 	bl	8000504 <__aeabi_ui2d>
 800f1c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f1c4:	4606      	mov	r6, r0
 800f1c6:	460f      	mov	r7, r1
 800f1c8:	bb03      	cbnz	r3, 800f20c <_strtod_l+0xba4>
 800f1ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f1ce:	9012      	str	r0, [sp, #72]	; 0x48
 800f1d0:	9313      	str	r3, [sp, #76]	; 0x4c
 800f1d2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800f1d6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800f1da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f1dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f1de:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800f1e2:	1a9b      	subs	r3, r3, r2
 800f1e4:	930b      	str	r3, [sp, #44]	; 0x2c
 800f1e6:	ed9d 0b08 	vldr	d0, [sp, #32]
 800f1ea:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800f1ee:	f001 fd2d 	bl	8010c4c <__ulp>
 800f1f2:	4650      	mov	r0, sl
 800f1f4:	ec53 2b10 	vmov	r2, r3, d0
 800f1f8:	4659      	mov	r1, fp
 800f1fa:	f7f1 f9fd 	bl	80005f8 <__aeabi_dmul>
 800f1fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f202:	f7f1 f843 	bl	800028c <__adddf3>
 800f206:	4682      	mov	sl, r0
 800f208:	468b      	mov	fp, r1
 800f20a:	e772      	b.n	800f0f2 <_strtod_l+0xa8a>
 800f20c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800f210:	e7df      	b.n	800f1d2 <_strtod_l+0xb6a>
 800f212:	a30d      	add	r3, pc, #52	; (adr r3, 800f248 <_strtod_l+0xbe0>)
 800f214:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f218:	f7f1 fc60 	bl	8000adc <__aeabi_dcmplt>
 800f21c:	e79c      	b.n	800f158 <_strtod_l+0xaf0>
 800f21e:	2300      	movs	r3, #0
 800f220:	930d      	str	r3, [sp, #52]	; 0x34
 800f222:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f224:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f226:	6013      	str	r3, [r2, #0]
 800f228:	f7ff ba61 	b.w	800e6ee <_strtod_l+0x86>
 800f22c:	2b65      	cmp	r3, #101	; 0x65
 800f22e:	f04f 0200 	mov.w	r2, #0
 800f232:	f43f ab4e 	beq.w	800e8d2 <_strtod_l+0x26a>
 800f236:	2101      	movs	r1, #1
 800f238:	4614      	mov	r4, r2
 800f23a:	9104      	str	r1, [sp, #16]
 800f23c:	f7ff bacb 	b.w	800e7d6 <_strtod_l+0x16e>
 800f240:	ffc00000 	.word	0xffc00000
 800f244:	41dfffff 	.word	0x41dfffff
 800f248:	94a03595 	.word	0x94a03595
 800f24c:	3fcfffff 	.word	0x3fcfffff

0800f250 <_strtod_r>:
 800f250:	4b05      	ldr	r3, [pc, #20]	; (800f268 <_strtod_r+0x18>)
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	b410      	push	{r4}
 800f256:	6a1b      	ldr	r3, [r3, #32]
 800f258:	4c04      	ldr	r4, [pc, #16]	; (800f26c <_strtod_r+0x1c>)
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	bf08      	it	eq
 800f25e:	4623      	moveq	r3, r4
 800f260:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f264:	f7ff ba00 	b.w	800e668 <_strtod_l>
 800f268:	2000017c 	.word	0x2000017c
 800f26c:	200001e0 	.word	0x200001e0

0800f270 <_strtol_l.isra.0>:
 800f270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f274:	4680      	mov	r8, r0
 800f276:	4689      	mov	r9, r1
 800f278:	4692      	mov	sl, r2
 800f27a:	461e      	mov	r6, r3
 800f27c:	460f      	mov	r7, r1
 800f27e:	463d      	mov	r5, r7
 800f280:	9808      	ldr	r0, [sp, #32]
 800f282:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f286:	f001 f9ed 	bl	8010664 <__locale_ctype_ptr_l>
 800f28a:	4420      	add	r0, r4
 800f28c:	7843      	ldrb	r3, [r0, #1]
 800f28e:	f013 0308 	ands.w	r3, r3, #8
 800f292:	d132      	bne.n	800f2fa <_strtol_l.isra.0+0x8a>
 800f294:	2c2d      	cmp	r4, #45	; 0x2d
 800f296:	d132      	bne.n	800f2fe <_strtol_l.isra.0+0x8e>
 800f298:	787c      	ldrb	r4, [r7, #1]
 800f29a:	1cbd      	adds	r5, r7, #2
 800f29c:	2201      	movs	r2, #1
 800f29e:	2e00      	cmp	r6, #0
 800f2a0:	d05d      	beq.n	800f35e <_strtol_l.isra.0+0xee>
 800f2a2:	2e10      	cmp	r6, #16
 800f2a4:	d109      	bne.n	800f2ba <_strtol_l.isra.0+0x4a>
 800f2a6:	2c30      	cmp	r4, #48	; 0x30
 800f2a8:	d107      	bne.n	800f2ba <_strtol_l.isra.0+0x4a>
 800f2aa:	782b      	ldrb	r3, [r5, #0]
 800f2ac:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f2b0:	2b58      	cmp	r3, #88	; 0x58
 800f2b2:	d14f      	bne.n	800f354 <_strtol_l.isra.0+0xe4>
 800f2b4:	786c      	ldrb	r4, [r5, #1]
 800f2b6:	2610      	movs	r6, #16
 800f2b8:	3502      	adds	r5, #2
 800f2ba:	2a00      	cmp	r2, #0
 800f2bc:	bf14      	ite	ne
 800f2be:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800f2c2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800f2c6:	2700      	movs	r7, #0
 800f2c8:	fbb1 fcf6 	udiv	ip, r1, r6
 800f2cc:	4638      	mov	r0, r7
 800f2ce:	fb06 1e1c 	mls	lr, r6, ip, r1
 800f2d2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800f2d6:	2b09      	cmp	r3, #9
 800f2d8:	d817      	bhi.n	800f30a <_strtol_l.isra.0+0x9a>
 800f2da:	461c      	mov	r4, r3
 800f2dc:	42a6      	cmp	r6, r4
 800f2de:	dd23      	ble.n	800f328 <_strtol_l.isra.0+0xb8>
 800f2e0:	1c7b      	adds	r3, r7, #1
 800f2e2:	d007      	beq.n	800f2f4 <_strtol_l.isra.0+0x84>
 800f2e4:	4584      	cmp	ip, r0
 800f2e6:	d31c      	bcc.n	800f322 <_strtol_l.isra.0+0xb2>
 800f2e8:	d101      	bne.n	800f2ee <_strtol_l.isra.0+0x7e>
 800f2ea:	45a6      	cmp	lr, r4
 800f2ec:	db19      	blt.n	800f322 <_strtol_l.isra.0+0xb2>
 800f2ee:	fb00 4006 	mla	r0, r0, r6, r4
 800f2f2:	2701      	movs	r7, #1
 800f2f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f2f8:	e7eb      	b.n	800f2d2 <_strtol_l.isra.0+0x62>
 800f2fa:	462f      	mov	r7, r5
 800f2fc:	e7bf      	b.n	800f27e <_strtol_l.isra.0+0xe>
 800f2fe:	2c2b      	cmp	r4, #43	; 0x2b
 800f300:	bf04      	itt	eq
 800f302:	1cbd      	addeq	r5, r7, #2
 800f304:	787c      	ldrbeq	r4, [r7, #1]
 800f306:	461a      	mov	r2, r3
 800f308:	e7c9      	b.n	800f29e <_strtol_l.isra.0+0x2e>
 800f30a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800f30e:	2b19      	cmp	r3, #25
 800f310:	d801      	bhi.n	800f316 <_strtol_l.isra.0+0xa6>
 800f312:	3c37      	subs	r4, #55	; 0x37
 800f314:	e7e2      	b.n	800f2dc <_strtol_l.isra.0+0x6c>
 800f316:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800f31a:	2b19      	cmp	r3, #25
 800f31c:	d804      	bhi.n	800f328 <_strtol_l.isra.0+0xb8>
 800f31e:	3c57      	subs	r4, #87	; 0x57
 800f320:	e7dc      	b.n	800f2dc <_strtol_l.isra.0+0x6c>
 800f322:	f04f 37ff 	mov.w	r7, #4294967295
 800f326:	e7e5      	b.n	800f2f4 <_strtol_l.isra.0+0x84>
 800f328:	1c7b      	adds	r3, r7, #1
 800f32a:	d108      	bne.n	800f33e <_strtol_l.isra.0+0xce>
 800f32c:	2322      	movs	r3, #34	; 0x22
 800f32e:	f8c8 3000 	str.w	r3, [r8]
 800f332:	4608      	mov	r0, r1
 800f334:	f1ba 0f00 	cmp.w	sl, #0
 800f338:	d107      	bne.n	800f34a <_strtol_l.isra.0+0xda>
 800f33a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f33e:	b102      	cbz	r2, 800f342 <_strtol_l.isra.0+0xd2>
 800f340:	4240      	negs	r0, r0
 800f342:	f1ba 0f00 	cmp.w	sl, #0
 800f346:	d0f8      	beq.n	800f33a <_strtol_l.isra.0+0xca>
 800f348:	b10f      	cbz	r7, 800f34e <_strtol_l.isra.0+0xde>
 800f34a:	f105 39ff 	add.w	r9, r5, #4294967295
 800f34e:	f8ca 9000 	str.w	r9, [sl]
 800f352:	e7f2      	b.n	800f33a <_strtol_l.isra.0+0xca>
 800f354:	2430      	movs	r4, #48	; 0x30
 800f356:	2e00      	cmp	r6, #0
 800f358:	d1af      	bne.n	800f2ba <_strtol_l.isra.0+0x4a>
 800f35a:	2608      	movs	r6, #8
 800f35c:	e7ad      	b.n	800f2ba <_strtol_l.isra.0+0x4a>
 800f35e:	2c30      	cmp	r4, #48	; 0x30
 800f360:	d0a3      	beq.n	800f2aa <_strtol_l.isra.0+0x3a>
 800f362:	260a      	movs	r6, #10
 800f364:	e7a9      	b.n	800f2ba <_strtol_l.isra.0+0x4a>
	...

0800f368 <_strtol_r>:
 800f368:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f36a:	4c06      	ldr	r4, [pc, #24]	; (800f384 <_strtol_r+0x1c>)
 800f36c:	4d06      	ldr	r5, [pc, #24]	; (800f388 <_strtol_r+0x20>)
 800f36e:	6824      	ldr	r4, [r4, #0]
 800f370:	6a24      	ldr	r4, [r4, #32]
 800f372:	2c00      	cmp	r4, #0
 800f374:	bf08      	it	eq
 800f376:	462c      	moveq	r4, r5
 800f378:	9400      	str	r4, [sp, #0]
 800f37a:	f7ff ff79 	bl	800f270 <_strtol_l.isra.0>
 800f37e:	b003      	add	sp, #12
 800f380:	bd30      	pop	{r4, r5, pc}
 800f382:	bf00      	nop
 800f384:	2000017c 	.word	0x2000017c
 800f388:	200001e0 	.word	0x200001e0

0800f38c <quorem>:
 800f38c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f390:	6903      	ldr	r3, [r0, #16]
 800f392:	690c      	ldr	r4, [r1, #16]
 800f394:	42a3      	cmp	r3, r4
 800f396:	4680      	mov	r8, r0
 800f398:	f2c0 8082 	blt.w	800f4a0 <quorem+0x114>
 800f39c:	3c01      	subs	r4, #1
 800f39e:	f101 0714 	add.w	r7, r1, #20
 800f3a2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800f3a6:	f100 0614 	add.w	r6, r0, #20
 800f3aa:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800f3ae:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800f3b2:	eb06 030c 	add.w	r3, r6, ip
 800f3b6:	3501      	adds	r5, #1
 800f3b8:	eb07 090c 	add.w	r9, r7, ip
 800f3bc:	9301      	str	r3, [sp, #4]
 800f3be:	fbb0 f5f5 	udiv	r5, r0, r5
 800f3c2:	b395      	cbz	r5, 800f42a <quorem+0x9e>
 800f3c4:	f04f 0a00 	mov.w	sl, #0
 800f3c8:	4638      	mov	r0, r7
 800f3ca:	46b6      	mov	lr, r6
 800f3cc:	46d3      	mov	fp, sl
 800f3ce:	f850 2b04 	ldr.w	r2, [r0], #4
 800f3d2:	b293      	uxth	r3, r2
 800f3d4:	fb05 a303 	mla	r3, r5, r3, sl
 800f3d8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f3dc:	b29b      	uxth	r3, r3
 800f3de:	ebab 0303 	sub.w	r3, fp, r3
 800f3e2:	0c12      	lsrs	r2, r2, #16
 800f3e4:	f8de b000 	ldr.w	fp, [lr]
 800f3e8:	fb05 a202 	mla	r2, r5, r2, sl
 800f3ec:	fa13 f38b 	uxtah	r3, r3, fp
 800f3f0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800f3f4:	fa1f fb82 	uxth.w	fp, r2
 800f3f8:	f8de 2000 	ldr.w	r2, [lr]
 800f3fc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800f400:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f404:	b29b      	uxth	r3, r3
 800f406:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f40a:	4581      	cmp	r9, r0
 800f40c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800f410:	f84e 3b04 	str.w	r3, [lr], #4
 800f414:	d2db      	bcs.n	800f3ce <quorem+0x42>
 800f416:	f856 300c 	ldr.w	r3, [r6, ip]
 800f41a:	b933      	cbnz	r3, 800f42a <quorem+0x9e>
 800f41c:	9b01      	ldr	r3, [sp, #4]
 800f41e:	3b04      	subs	r3, #4
 800f420:	429e      	cmp	r6, r3
 800f422:	461a      	mov	r2, r3
 800f424:	d330      	bcc.n	800f488 <quorem+0xfc>
 800f426:	f8c8 4010 	str.w	r4, [r8, #16]
 800f42a:	4640      	mov	r0, r8
 800f42c:	f001 fb96 	bl	8010b5c <__mcmp>
 800f430:	2800      	cmp	r0, #0
 800f432:	db25      	blt.n	800f480 <quorem+0xf4>
 800f434:	3501      	adds	r5, #1
 800f436:	4630      	mov	r0, r6
 800f438:	f04f 0c00 	mov.w	ip, #0
 800f43c:	f857 2b04 	ldr.w	r2, [r7], #4
 800f440:	f8d0 e000 	ldr.w	lr, [r0]
 800f444:	b293      	uxth	r3, r2
 800f446:	ebac 0303 	sub.w	r3, ip, r3
 800f44a:	0c12      	lsrs	r2, r2, #16
 800f44c:	fa13 f38e 	uxtah	r3, r3, lr
 800f450:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f454:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f458:	b29b      	uxth	r3, r3
 800f45a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f45e:	45b9      	cmp	r9, r7
 800f460:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f464:	f840 3b04 	str.w	r3, [r0], #4
 800f468:	d2e8      	bcs.n	800f43c <quorem+0xb0>
 800f46a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800f46e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800f472:	b92a      	cbnz	r2, 800f480 <quorem+0xf4>
 800f474:	3b04      	subs	r3, #4
 800f476:	429e      	cmp	r6, r3
 800f478:	461a      	mov	r2, r3
 800f47a:	d30b      	bcc.n	800f494 <quorem+0x108>
 800f47c:	f8c8 4010 	str.w	r4, [r8, #16]
 800f480:	4628      	mov	r0, r5
 800f482:	b003      	add	sp, #12
 800f484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f488:	6812      	ldr	r2, [r2, #0]
 800f48a:	3b04      	subs	r3, #4
 800f48c:	2a00      	cmp	r2, #0
 800f48e:	d1ca      	bne.n	800f426 <quorem+0x9a>
 800f490:	3c01      	subs	r4, #1
 800f492:	e7c5      	b.n	800f420 <quorem+0x94>
 800f494:	6812      	ldr	r2, [r2, #0]
 800f496:	3b04      	subs	r3, #4
 800f498:	2a00      	cmp	r2, #0
 800f49a:	d1ef      	bne.n	800f47c <quorem+0xf0>
 800f49c:	3c01      	subs	r4, #1
 800f49e:	e7ea      	b.n	800f476 <quorem+0xea>
 800f4a0:	2000      	movs	r0, #0
 800f4a2:	e7ee      	b.n	800f482 <quorem+0xf6>
 800f4a4:	0000      	movs	r0, r0
	...

0800f4a8 <_dtoa_r>:
 800f4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4ac:	ec57 6b10 	vmov	r6, r7, d0
 800f4b0:	b097      	sub	sp, #92	; 0x5c
 800f4b2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f4b4:	9106      	str	r1, [sp, #24]
 800f4b6:	4604      	mov	r4, r0
 800f4b8:	920b      	str	r2, [sp, #44]	; 0x2c
 800f4ba:	9312      	str	r3, [sp, #72]	; 0x48
 800f4bc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f4c0:	e9cd 6700 	strd	r6, r7, [sp]
 800f4c4:	b93d      	cbnz	r5, 800f4d6 <_dtoa_r+0x2e>
 800f4c6:	2010      	movs	r0, #16
 800f4c8:	f7fe f972 	bl	800d7b0 <malloc>
 800f4cc:	6260      	str	r0, [r4, #36]	; 0x24
 800f4ce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f4d2:	6005      	str	r5, [r0, #0]
 800f4d4:	60c5      	str	r5, [r0, #12]
 800f4d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f4d8:	6819      	ldr	r1, [r3, #0]
 800f4da:	b151      	cbz	r1, 800f4f2 <_dtoa_r+0x4a>
 800f4dc:	685a      	ldr	r2, [r3, #4]
 800f4de:	604a      	str	r2, [r1, #4]
 800f4e0:	2301      	movs	r3, #1
 800f4e2:	4093      	lsls	r3, r2
 800f4e4:	608b      	str	r3, [r1, #8]
 800f4e6:	4620      	mov	r0, r4
 800f4e8:	f001 f918 	bl	801071c <_Bfree>
 800f4ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f4ee:	2200      	movs	r2, #0
 800f4f0:	601a      	str	r2, [r3, #0]
 800f4f2:	1e3b      	subs	r3, r7, #0
 800f4f4:	bfbb      	ittet	lt
 800f4f6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f4fa:	9301      	strlt	r3, [sp, #4]
 800f4fc:	2300      	movge	r3, #0
 800f4fe:	2201      	movlt	r2, #1
 800f500:	bfac      	ite	ge
 800f502:	f8c8 3000 	strge.w	r3, [r8]
 800f506:	f8c8 2000 	strlt.w	r2, [r8]
 800f50a:	4baf      	ldr	r3, [pc, #700]	; (800f7c8 <_dtoa_r+0x320>)
 800f50c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f510:	ea33 0308 	bics.w	r3, r3, r8
 800f514:	d114      	bne.n	800f540 <_dtoa_r+0x98>
 800f516:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f518:	f242 730f 	movw	r3, #9999	; 0x270f
 800f51c:	6013      	str	r3, [r2, #0]
 800f51e:	9b00      	ldr	r3, [sp, #0]
 800f520:	b923      	cbnz	r3, 800f52c <_dtoa_r+0x84>
 800f522:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800f526:	2800      	cmp	r0, #0
 800f528:	f000 8542 	beq.w	800ffb0 <_dtoa_r+0xb08>
 800f52c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f52e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800f7dc <_dtoa_r+0x334>
 800f532:	2b00      	cmp	r3, #0
 800f534:	f000 8544 	beq.w	800ffc0 <_dtoa_r+0xb18>
 800f538:	f10b 0303 	add.w	r3, fp, #3
 800f53c:	f000 bd3e 	b.w	800ffbc <_dtoa_r+0xb14>
 800f540:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f544:	2200      	movs	r2, #0
 800f546:	2300      	movs	r3, #0
 800f548:	4630      	mov	r0, r6
 800f54a:	4639      	mov	r1, r7
 800f54c:	f7f1 fabc 	bl	8000ac8 <__aeabi_dcmpeq>
 800f550:	4681      	mov	r9, r0
 800f552:	b168      	cbz	r0, 800f570 <_dtoa_r+0xc8>
 800f554:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f556:	2301      	movs	r3, #1
 800f558:	6013      	str	r3, [r2, #0]
 800f55a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	f000 8524 	beq.w	800ffaa <_dtoa_r+0xb02>
 800f562:	4b9a      	ldr	r3, [pc, #616]	; (800f7cc <_dtoa_r+0x324>)
 800f564:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f566:	f103 3bff 	add.w	fp, r3, #4294967295
 800f56a:	6013      	str	r3, [r2, #0]
 800f56c:	f000 bd28 	b.w	800ffc0 <_dtoa_r+0xb18>
 800f570:	aa14      	add	r2, sp, #80	; 0x50
 800f572:	a915      	add	r1, sp, #84	; 0x54
 800f574:	ec47 6b10 	vmov	d0, r6, r7
 800f578:	4620      	mov	r0, r4
 800f57a:	f001 fbdd 	bl	8010d38 <__d2b>
 800f57e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800f582:	9004      	str	r0, [sp, #16]
 800f584:	2d00      	cmp	r5, #0
 800f586:	d07c      	beq.n	800f682 <_dtoa_r+0x1da>
 800f588:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f58c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800f590:	46b2      	mov	sl, r6
 800f592:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800f596:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f59a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800f59e:	2200      	movs	r2, #0
 800f5a0:	4b8b      	ldr	r3, [pc, #556]	; (800f7d0 <_dtoa_r+0x328>)
 800f5a2:	4650      	mov	r0, sl
 800f5a4:	4659      	mov	r1, fp
 800f5a6:	f7f0 fe6f 	bl	8000288 <__aeabi_dsub>
 800f5aa:	a381      	add	r3, pc, #516	; (adr r3, 800f7b0 <_dtoa_r+0x308>)
 800f5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5b0:	f7f1 f822 	bl	80005f8 <__aeabi_dmul>
 800f5b4:	a380      	add	r3, pc, #512	; (adr r3, 800f7b8 <_dtoa_r+0x310>)
 800f5b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5ba:	f7f0 fe67 	bl	800028c <__adddf3>
 800f5be:	4606      	mov	r6, r0
 800f5c0:	4628      	mov	r0, r5
 800f5c2:	460f      	mov	r7, r1
 800f5c4:	f7f0 ffae 	bl	8000524 <__aeabi_i2d>
 800f5c8:	a37d      	add	r3, pc, #500	; (adr r3, 800f7c0 <_dtoa_r+0x318>)
 800f5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5ce:	f7f1 f813 	bl	80005f8 <__aeabi_dmul>
 800f5d2:	4602      	mov	r2, r0
 800f5d4:	460b      	mov	r3, r1
 800f5d6:	4630      	mov	r0, r6
 800f5d8:	4639      	mov	r1, r7
 800f5da:	f7f0 fe57 	bl	800028c <__adddf3>
 800f5de:	4606      	mov	r6, r0
 800f5e0:	460f      	mov	r7, r1
 800f5e2:	f7f1 fab9 	bl	8000b58 <__aeabi_d2iz>
 800f5e6:	2200      	movs	r2, #0
 800f5e8:	4682      	mov	sl, r0
 800f5ea:	2300      	movs	r3, #0
 800f5ec:	4630      	mov	r0, r6
 800f5ee:	4639      	mov	r1, r7
 800f5f0:	f7f1 fa74 	bl	8000adc <__aeabi_dcmplt>
 800f5f4:	b148      	cbz	r0, 800f60a <_dtoa_r+0x162>
 800f5f6:	4650      	mov	r0, sl
 800f5f8:	f7f0 ff94 	bl	8000524 <__aeabi_i2d>
 800f5fc:	4632      	mov	r2, r6
 800f5fe:	463b      	mov	r3, r7
 800f600:	f7f1 fa62 	bl	8000ac8 <__aeabi_dcmpeq>
 800f604:	b908      	cbnz	r0, 800f60a <_dtoa_r+0x162>
 800f606:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f60a:	f1ba 0f16 	cmp.w	sl, #22
 800f60e:	d859      	bhi.n	800f6c4 <_dtoa_r+0x21c>
 800f610:	4970      	ldr	r1, [pc, #448]	; (800f7d4 <_dtoa_r+0x32c>)
 800f612:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800f616:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f61a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f61e:	f7f1 fa7b 	bl	8000b18 <__aeabi_dcmpgt>
 800f622:	2800      	cmp	r0, #0
 800f624:	d050      	beq.n	800f6c8 <_dtoa_r+0x220>
 800f626:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f62a:	2300      	movs	r3, #0
 800f62c:	930f      	str	r3, [sp, #60]	; 0x3c
 800f62e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f630:	1b5d      	subs	r5, r3, r5
 800f632:	f1b5 0801 	subs.w	r8, r5, #1
 800f636:	bf49      	itett	mi
 800f638:	f1c5 0301 	rsbmi	r3, r5, #1
 800f63c:	2300      	movpl	r3, #0
 800f63e:	9305      	strmi	r3, [sp, #20]
 800f640:	f04f 0800 	movmi.w	r8, #0
 800f644:	bf58      	it	pl
 800f646:	9305      	strpl	r3, [sp, #20]
 800f648:	f1ba 0f00 	cmp.w	sl, #0
 800f64c:	db3e      	blt.n	800f6cc <_dtoa_r+0x224>
 800f64e:	2300      	movs	r3, #0
 800f650:	44d0      	add	r8, sl
 800f652:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800f656:	9307      	str	r3, [sp, #28]
 800f658:	9b06      	ldr	r3, [sp, #24]
 800f65a:	2b09      	cmp	r3, #9
 800f65c:	f200 8090 	bhi.w	800f780 <_dtoa_r+0x2d8>
 800f660:	2b05      	cmp	r3, #5
 800f662:	bfc4      	itt	gt
 800f664:	3b04      	subgt	r3, #4
 800f666:	9306      	strgt	r3, [sp, #24]
 800f668:	9b06      	ldr	r3, [sp, #24]
 800f66a:	f1a3 0302 	sub.w	r3, r3, #2
 800f66e:	bfcc      	ite	gt
 800f670:	2500      	movgt	r5, #0
 800f672:	2501      	movle	r5, #1
 800f674:	2b03      	cmp	r3, #3
 800f676:	f200 808f 	bhi.w	800f798 <_dtoa_r+0x2f0>
 800f67a:	e8df f003 	tbb	[pc, r3]
 800f67e:	7f7d      	.short	0x7f7d
 800f680:	7131      	.short	0x7131
 800f682:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800f686:	441d      	add	r5, r3
 800f688:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800f68c:	2820      	cmp	r0, #32
 800f68e:	dd13      	ble.n	800f6b8 <_dtoa_r+0x210>
 800f690:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800f694:	9b00      	ldr	r3, [sp, #0]
 800f696:	fa08 f800 	lsl.w	r8, r8, r0
 800f69a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800f69e:	fa23 f000 	lsr.w	r0, r3, r0
 800f6a2:	ea48 0000 	orr.w	r0, r8, r0
 800f6a6:	f7f0 ff2d 	bl	8000504 <__aeabi_ui2d>
 800f6aa:	2301      	movs	r3, #1
 800f6ac:	4682      	mov	sl, r0
 800f6ae:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800f6b2:	3d01      	subs	r5, #1
 800f6b4:	9313      	str	r3, [sp, #76]	; 0x4c
 800f6b6:	e772      	b.n	800f59e <_dtoa_r+0xf6>
 800f6b8:	9b00      	ldr	r3, [sp, #0]
 800f6ba:	f1c0 0020 	rsb	r0, r0, #32
 800f6be:	fa03 f000 	lsl.w	r0, r3, r0
 800f6c2:	e7f0      	b.n	800f6a6 <_dtoa_r+0x1fe>
 800f6c4:	2301      	movs	r3, #1
 800f6c6:	e7b1      	b.n	800f62c <_dtoa_r+0x184>
 800f6c8:	900f      	str	r0, [sp, #60]	; 0x3c
 800f6ca:	e7b0      	b.n	800f62e <_dtoa_r+0x186>
 800f6cc:	9b05      	ldr	r3, [sp, #20]
 800f6ce:	eba3 030a 	sub.w	r3, r3, sl
 800f6d2:	9305      	str	r3, [sp, #20]
 800f6d4:	f1ca 0300 	rsb	r3, sl, #0
 800f6d8:	9307      	str	r3, [sp, #28]
 800f6da:	2300      	movs	r3, #0
 800f6dc:	930e      	str	r3, [sp, #56]	; 0x38
 800f6de:	e7bb      	b.n	800f658 <_dtoa_r+0x1b0>
 800f6e0:	2301      	movs	r3, #1
 800f6e2:	930a      	str	r3, [sp, #40]	; 0x28
 800f6e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	dd59      	ble.n	800f79e <_dtoa_r+0x2f6>
 800f6ea:	9302      	str	r3, [sp, #8]
 800f6ec:	4699      	mov	r9, r3
 800f6ee:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f6f0:	2200      	movs	r2, #0
 800f6f2:	6072      	str	r2, [r6, #4]
 800f6f4:	2204      	movs	r2, #4
 800f6f6:	f102 0014 	add.w	r0, r2, #20
 800f6fa:	4298      	cmp	r0, r3
 800f6fc:	6871      	ldr	r1, [r6, #4]
 800f6fe:	d953      	bls.n	800f7a8 <_dtoa_r+0x300>
 800f700:	4620      	mov	r0, r4
 800f702:	f000 ffd7 	bl	80106b4 <_Balloc>
 800f706:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f708:	6030      	str	r0, [r6, #0]
 800f70a:	f1b9 0f0e 	cmp.w	r9, #14
 800f70e:	f8d3 b000 	ldr.w	fp, [r3]
 800f712:	f200 80e6 	bhi.w	800f8e2 <_dtoa_r+0x43a>
 800f716:	2d00      	cmp	r5, #0
 800f718:	f000 80e3 	beq.w	800f8e2 <_dtoa_r+0x43a>
 800f71c:	ed9d 7b00 	vldr	d7, [sp]
 800f720:	f1ba 0f00 	cmp.w	sl, #0
 800f724:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800f728:	dd74      	ble.n	800f814 <_dtoa_r+0x36c>
 800f72a:	4a2a      	ldr	r2, [pc, #168]	; (800f7d4 <_dtoa_r+0x32c>)
 800f72c:	f00a 030f 	and.w	r3, sl, #15
 800f730:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f734:	ed93 7b00 	vldr	d7, [r3]
 800f738:	ea4f 162a 	mov.w	r6, sl, asr #4
 800f73c:	06f0      	lsls	r0, r6, #27
 800f73e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800f742:	d565      	bpl.n	800f810 <_dtoa_r+0x368>
 800f744:	4b24      	ldr	r3, [pc, #144]	; (800f7d8 <_dtoa_r+0x330>)
 800f746:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f74a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f74e:	f7f1 f87d 	bl	800084c <__aeabi_ddiv>
 800f752:	e9cd 0100 	strd	r0, r1, [sp]
 800f756:	f006 060f 	and.w	r6, r6, #15
 800f75a:	2503      	movs	r5, #3
 800f75c:	4f1e      	ldr	r7, [pc, #120]	; (800f7d8 <_dtoa_r+0x330>)
 800f75e:	e04c      	b.n	800f7fa <_dtoa_r+0x352>
 800f760:	2301      	movs	r3, #1
 800f762:	930a      	str	r3, [sp, #40]	; 0x28
 800f764:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f766:	4453      	add	r3, sl
 800f768:	f103 0901 	add.w	r9, r3, #1
 800f76c:	9302      	str	r3, [sp, #8]
 800f76e:	464b      	mov	r3, r9
 800f770:	2b01      	cmp	r3, #1
 800f772:	bfb8      	it	lt
 800f774:	2301      	movlt	r3, #1
 800f776:	e7ba      	b.n	800f6ee <_dtoa_r+0x246>
 800f778:	2300      	movs	r3, #0
 800f77a:	e7b2      	b.n	800f6e2 <_dtoa_r+0x23a>
 800f77c:	2300      	movs	r3, #0
 800f77e:	e7f0      	b.n	800f762 <_dtoa_r+0x2ba>
 800f780:	2501      	movs	r5, #1
 800f782:	2300      	movs	r3, #0
 800f784:	9306      	str	r3, [sp, #24]
 800f786:	950a      	str	r5, [sp, #40]	; 0x28
 800f788:	f04f 33ff 	mov.w	r3, #4294967295
 800f78c:	9302      	str	r3, [sp, #8]
 800f78e:	4699      	mov	r9, r3
 800f790:	2200      	movs	r2, #0
 800f792:	2312      	movs	r3, #18
 800f794:	920b      	str	r2, [sp, #44]	; 0x2c
 800f796:	e7aa      	b.n	800f6ee <_dtoa_r+0x246>
 800f798:	2301      	movs	r3, #1
 800f79a:	930a      	str	r3, [sp, #40]	; 0x28
 800f79c:	e7f4      	b.n	800f788 <_dtoa_r+0x2e0>
 800f79e:	2301      	movs	r3, #1
 800f7a0:	9302      	str	r3, [sp, #8]
 800f7a2:	4699      	mov	r9, r3
 800f7a4:	461a      	mov	r2, r3
 800f7a6:	e7f5      	b.n	800f794 <_dtoa_r+0x2ec>
 800f7a8:	3101      	adds	r1, #1
 800f7aa:	6071      	str	r1, [r6, #4]
 800f7ac:	0052      	lsls	r2, r2, #1
 800f7ae:	e7a2      	b.n	800f6f6 <_dtoa_r+0x24e>
 800f7b0:	636f4361 	.word	0x636f4361
 800f7b4:	3fd287a7 	.word	0x3fd287a7
 800f7b8:	8b60c8b3 	.word	0x8b60c8b3
 800f7bc:	3fc68a28 	.word	0x3fc68a28
 800f7c0:	509f79fb 	.word	0x509f79fb
 800f7c4:	3fd34413 	.word	0x3fd34413
 800f7c8:	7ff00000 	.word	0x7ff00000
 800f7cc:	0801190d 	.word	0x0801190d
 800f7d0:	3ff80000 	.word	0x3ff80000
 800f7d4:	080119c8 	.word	0x080119c8
 800f7d8:	080119a0 	.word	0x080119a0
 800f7dc:	08011991 	.word	0x08011991
 800f7e0:	07f1      	lsls	r1, r6, #31
 800f7e2:	d508      	bpl.n	800f7f6 <_dtoa_r+0x34e>
 800f7e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f7e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f7ec:	f7f0 ff04 	bl	80005f8 <__aeabi_dmul>
 800f7f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f7f4:	3501      	adds	r5, #1
 800f7f6:	1076      	asrs	r6, r6, #1
 800f7f8:	3708      	adds	r7, #8
 800f7fa:	2e00      	cmp	r6, #0
 800f7fc:	d1f0      	bne.n	800f7e0 <_dtoa_r+0x338>
 800f7fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f802:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f806:	f7f1 f821 	bl	800084c <__aeabi_ddiv>
 800f80a:	e9cd 0100 	strd	r0, r1, [sp]
 800f80e:	e01a      	b.n	800f846 <_dtoa_r+0x39e>
 800f810:	2502      	movs	r5, #2
 800f812:	e7a3      	b.n	800f75c <_dtoa_r+0x2b4>
 800f814:	f000 80a0 	beq.w	800f958 <_dtoa_r+0x4b0>
 800f818:	f1ca 0600 	rsb	r6, sl, #0
 800f81c:	4b9f      	ldr	r3, [pc, #636]	; (800fa9c <_dtoa_r+0x5f4>)
 800f81e:	4fa0      	ldr	r7, [pc, #640]	; (800faa0 <_dtoa_r+0x5f8>)
 800f820:	f006 020f 	and.w	r2, r6, #15
 800f824:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f82c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f830:	f7f0 fee2 	bl	80005f8 <__aeabi_dmul>
 800f834:	e9cd 0100 	strd	r0, r1, [sp]
 800f838:	1136      	asrs	r6, r6, #4
 800f83a:	2300      	movs	r3, #0
 800f83c:	2502      	movs	r5, #2
 800f83e:	2e00      	cmp	r6, #0
 800f840:	d17f      	bne.n	800f942 <_dtoa_r+0x49a>
 800f842:	2b00      	cmp	r3, #0
 800f844:	d1e1      	bne.n	800f80a <_dtoa_r+0x362>
 800f846:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f848:	2b00      	cmp	r3, #0
 800f84a:	f000 8087 	beq.w	800f95c <_dtoa_r+0x4b4>
 800f84e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f852:	2200      	movs	r2, #0
 800f854:	4b93      	ldr	r3, [pc, #588]	; (800faa4 <_dtoa_r+0x5fc>)
 800f856:	4630      	mov	r0, r6
 800f858:	4639      	mov	r1, r7
 800f85a:	f7f1 f93f 	bl	8000adc <__aeabi_dcmplt>
 800f85e:	2800      	cmp	r0, #0
 800f860:	d07c      	beq.n	800f95c <_dtoa_r+0x4b4>
 800f862:	f1b9 0f00 	cmp.w	r9, #0
 800f866:	d079      	beq.n	800f95c <_dtoa_r+0x4b4>
 800f868:	9b02      	ldr	r3, [sp, #8]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	dd35      	ble.n	800f8da <_dtoa_r+0x432>
 800f86e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f872:	9308      	str	r3, [sp, #32]
 800f874:	4639      	mov	r1, r7
 800f876:	2200      	movs	r2, #0
 800f878:	4b8b      	ldr	r3, [pc, #556]	; (800faa8 <_dtoa_r+0x600>)
 800f87a:	4630      	mov	r0, r6
 800f87c:	f7f0 febc 	bl	80005f8 <__aeabi_dmul>
 800f880:	e9cd 0100 	strd	r0, r1, [sp]
 800f884:	9f02      	ldr	r7, [sp, #8]
 800f886:	3501      	adds	r5, #1
 800f888:	4628      	mov	r0, r5
 800f88a:	f7f0 fe4b 	bl	8000524 <__aeabi_i2d>
 800f88e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f892:	f7f0 feb1 	bl	80005f8 <__aeabi_dmul>
 800f896:	2200      	movs	r2, #0
 800f898:	4b84      	ldr	r3, [pc, #528]	; (800faac <_dtoa_r+0x604>)
 800f89a:	f7f0 fcf7 	bl	800028c <__adddf3>
 800f89e:	4605      	mov	r5, r0
 800f8a0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800f8a4:	2f00      	cmp	r7, #0
 800f8a6:	d15d      	bne.n	800f964 <_dtoa_r+0x4bc>
 800f8a8:	2200      	movs	r2, #0
 800f8aa:	4b81      	ldr	r3, [pc, #516]	; (800fab0 <_dtoa_r+0x608>)
 800f8ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f8b0:	f7f0 fcea 	bl	8000288 <__aeabi_dsub>
 800f8b4:	462a      	mov	r2, r5
 800f8b6:	4633      	mov	r3, r6
 800f8b8:	e9cd 0100 	strd	r0, r1, [sp]
 800f8bc:	f7f1 f92c 	bl	8000b18 <__aeabi_dcmpgt>
 800f8c0:	2800      	cmp	r0, #0
 800f8c2:	f040 8288 	bne.w	800fdd6 <_dtoa_r+0x92e>
 800f8c6:	462a      	mov	r2, r5
 800f8c8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800f8cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f8d0:	f7f1 f904 	bl	8000adc <__aeabi_dcmplt>
 800f8d4:	2800      	cmp	r0, #0
 800f8d6:	f040 827c 	bne.w	800fdd2 <_dtoa_r+0x92a>
 800f8da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f8de:	e9cd 2300 	strd	r2, r3, [sp]
 800f8e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	f2c0 8150 	blt.w	800fb8a <_dtoa_r+0x6e2>
 800f8ea:	f1ba 0f0e 	cmp.w	sl, #14
 800f8ee:	f300 814c 	bgt.w	800fb8a <_dtoa_r+0x6e2>
 800f8f2:	4b6a      	ldr	r3, [pc, #424]	; (800fa9c <_dtoa_r+0x5f4>)
 800f8f4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f8f8:	ed93 7b00 	vldr	d7, [r3]
 800f8fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f904:	f280 80d8 	bge.w	800fab8 <_dtoa_r+0x610>
 800f908:	f1b9 0f00 	cmp.w	r9, #0
 800f90c:	f300 80d4 	bgt.w	800fab8 <_dtoa_r+0x610>
 800f910:	f040 825e 	bne.w	800fdd0 <_dtoa_r+0x928>
 800f914:	2200      	movs	r2, #0
 800f916:	4b66      	ldr	r3, [pc, #408]	; (800fab0 <_dtoa_r+0x608>)
 800f918:	ec51 0b17 	vmov	r0, r1, d7
 800f91c:	f7f0 fe6c 	bl	80005f8 <__aeabi_dmul>
 800f920:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f924:	f7f1 f8ee 	bl	8000b04 <__aeabi_dcmpge>
 800f928:	464f      	mov	r7, r9
 800f92a:	464e      	mov	r6, r9
 800f92c:	2800      	cmp	r0, #0
 800f92e:	f040 8234 	bne.w	800fd9a <_dtoa_r+0x8f2>
 800f932:	2331      	movs	r3, #49	; 0x31
 800f934:	f10b 0501 	add.w	r5, fp, #1
 800f938:	f88b 3000 	strb.w	r3, [fp]
 800f93c:	f10a 0a01 	add.w	sl, sl, #1
 800f940:	e22f      	b.n	800fda2 <_dtoa_r+0x8fa>
 800f942:	07f2      	lsls	r2, r6, #31
 800f944:	d505      	bpl.n	800f952 <_dtoa_r+0x4aa>
 800f946:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f94a:	f7f0 fe55 	bl	80005f8 <__aeabi_dmul>
 800f94e:	3501      	adds	r5, #1
 800f950:	2301      	movs	r3, #1
 800f952:	1076      	asrs	r6, r6, #1
 800f954:	3708      	adds	r7, #8
 800f956:	e772      	b.n	800f83e <_dtoa_r+0x396>
 800f958:	2502      	movs	r5, #2
 800f95a:	e774      	b.n	800f846 <_dtoa_r+0x39e>
 800f95c:	f8cd a020 	str.w	sl, [sp, #32]
 800f960:	464f      	mov	r7, r9
 800f962:	e791      	b.n	800f888 <_dtoa_r+0x3e0>
 800f964:	4b4d      	ldr	r3, [pc, #308]	; (800fa9c <_dtoa_r+0x5f4>)
 800f966:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f96a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800f96e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f970:	2b00      	cmp	r3, #0
 800f972:	d047      	beq.n	800fa04 <_dtoa_r+0x55c>
 800f974:	4602      	mov	r2, r0
 800f976:	460b      	mov	r3, r1
 800f978:	2000      	movs	r0, #0
 800f97a:	494e      	ldr	r1, [pc, #312]	; (800fab4 <_dtoa_r+0x60c>)
 800f97c:	f7f0 ff66 	bl	800084c <__aeabi_ddiv>
 800f980:	462a      	mov	r2, r5
 800f982:	4633      	mov	r3, r6
 800f984:	f7f0 fc80 	bl	8000288 <__aeabi_dsub>
 800f988:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f98c:	465d      	mov	r5, fp
 800f98e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f992:	f7f1 f8e1 	bl	8000b58 <__aeabi_d2iz>
 800f996:	4606      	mov	r6, r0
 800f998:	f7f0 fdc4 	bl	8000524 <__aeabi_i2d>
 800f99c:	4602      	mov	r2, r0
 800f99e:	460b      	mov	r3, r1
 800f9a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f9a4:	f7f0 fc70 	bl	8000288 <__aeabi_dsub>
 800f9a8:	3630      	adds	r6, #48	; 0x30
 800f9aa:	f805 6b01 	strb.w	r6, [r5], #1
 800f9ae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f9b2:	e9cd 0100 	strd	r0, r1, [sp]
 800f9b6:	f7f1 f891 	bl	8000adc <__aeabi_dcmplt>
 800f9ba:	2800      	cmp	r0, #0
 800f9bc:	d163      	bne.n	800fa86 <_dtoa_r+0x5de>
 800f9be:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f9c2:	2000      	movs	r0, #0
 800f9c4:	4937      	ldr	r1, [pc, #220]	; (800faa4 <_dtoa_r+0x5fc>)
 800f9c6:	f7f0 fc5f 	bl	8000288 <__aeabi_dsub>
 800f9ca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f9ce:	f7f1 f885 	bl	8000adc <__aeabi_dcmplt>
 800f9d2:	2800      	cmp	r0, #0
 800f9d4:	f040 80b7 	bne.w	800fb46 <_dtoa_r+0x69e>
 800f9d8:	eba5 030b 	sub.w	r3, r5, fp
 800f9dc:	429f      	cmp	r7, r3
 800f9de:	f77f af7c 	ble.w	800f8da <_dtoa_r+0x432>
 800f9e2:	2200      	movs	r2, #0
 800f9e4:	4b30      	ldr	r3, [pc, #192]	; (800faa8 <_dtoa_r+0x600>)
 800f9e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f9ea:	f7f0 fe05 	bl	80005f8 <__aeabi_dmul>
 800f9ee:	2200      	movs	r2, #0
 800f9f0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f9f4:	4b2c      	ldr	r3, [pc, #176]	; (800faa8 <_dtoa_r+0x600>)
 800f9f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f9fa:	f7f0 fdfd 	bl	80005f8 <__aeabi_dmul>
 800f9fe:	e9cd 0100 	strd	r0, r1, [sp]
 800fa02:	e7c4      	b.n	800f98e <_dtoa_r+0x4e6>
 800fa04:	462a      	mov	r2, r5
 800fa06:	4633      	mov	r3, r6
 800fa08:	f7f0 fdf6 	bl	80005f8 <__aeabi_dmul>
 800fa0c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800fa10:	eb0b 0507 	add.w	r5, fp, r7
 800fa14:	465e      	mov	r6, fp
 800fa16:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fa1a:	f7f1 f89d 	bl	8000b58 <__aeabi_d2iz>
 800fa1e:	4607      	mov	r7, r0
 800fa20:	f7f0 fd80 	bl	8000524 <__aeabi_i2d>
 800fa24:	3730      	adds	r7, #48	; 0x30
 800fa26:	4602      	mov	r2, r0
 800fa28:	460b      	mov	r3, r1
 800fa2a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fa2e:	f7f0 fc2b 	bl	8000288 <__aeabi_dsub>
 800fa32:	f806 7b01 	strb.w	r7, [r6], #1
 800fa36:	42ae      	cmp	r6, r5
 800fa38:	e9cd 0100 	strd	r0, r1, [sp]
 800fa3c:	f04f 0200 	mov.w	r2, #0
 800fa40:	d126      	bne.n	800fa90 <_dtoa_r+0x5e8>
 800fa42:	4b1c      	ldr	r3, [pc, #112]	; (800fab4 <_dtoa_r+0x60c>)
 800fa44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800fa48:	f7f0 fc20 	bl	800028c <__adddf3>
 800fa4c:	4602      	mov	r2, r0
 800fa4e:	460b      	mov	r3, r1
 800fa50:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fa54:	f7f1 f860 	bl	8000b18 <__aeabi_dcmpgt>
 800fa58:	2800      	cmp	r0, #0
 800fa5a:	d174      	bne.n	800fb46 <_dtoa_r+0x69e>
 800fa5c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800fa60:	2000      	movs	r0, #0
 800fa62:	4914      	ldr	r1, [pc, #80]	; (800fab4 <_dtoa_r+0x60c>)
 800fa64:	f7f0 fc10 	bl	8000288 <__aeabi_dsub>
 800fa68:	4602      	mov	r2, r0
 800fa6a:	460b      	mov	r3, r1
 800fa6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fa70:	f7f1 f834 	bl	8000adc <__aeabi_dcmplt>
 800fa74:	2800      	cmp	r0, #0
 800fa76:	f43f af30 	beq.w	800f8da <_dtoa_r+0x432>
 800fa7a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fa7e:	2b30      	cmp	r3, #48	; 0x30
 800fa80:	f105 32ff 	add.w	r2, r5, #4294967295
 800fa84:	d002      	beq.n	800fa8c <_dtoa_r+0x5e4>
 800fa86:	f8dd a020 	ldr.w	sl, [sp, #32]
 800fa8a:	e04a      	b.n	800fb22 <_dtoa_r+0x67a>
 800fa8c:	4615      	mov	r5, r2
 800fa8e:	e7f4      	b.n	800fa7a <_dtoa_r+0x5d2>
 800fa90:	4b05      	ldr	r3, [pc, #20]	; (800faa8 <_dtoa_r+0x600>)
 800fa92:	f7f0 fdb1 	bl	80005f8 <__aeabi_dmul>
 800fa96:	e9cd 0100 	strd	r0, r1, [sp]
 800fa9a:	e7bc      	b.n	800fa16 <_dtoa_r+0x56e>
 800fa9c:	080119c8 	.word	0x080119c8
 800faa0:	080119a0 	.word	0x080119a0
 800faa4:	3ff00000 	.word	0x3ff00000
 800faa8:	40240000 	.word	0x40240000
 800faac:	401c0000 	.word	0x401c0000
 800fab0:	40140000 	.word	0x40140000
 800fab4:	3fe00000 	.word	0x3fe00000
 800fab8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800fabc:	465d      	mov	r5, fp
 800fabe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fac2:	4630      	mov	r0, r6
 800fac4:	4639      	mov	r1, r7
 800fac6:	f7f0 fec1 	bl	800084c <__aeabi_ddiv>
 800faca:	f7f1 f845 	bl	8000b58 <__aeabi_d2iz>
 800face:	4680      	mov	r8, r0
 800fad0:	f7f0 fd28 	bl	8000524 <__aeabi_i2d>
 800fad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fad8:	f7f0 fd8e 	bl	80005f8 <__aeabi_dmul>
 800fadc:	4602      	mov	r2, r0
 800fade:	460b      	mov	r3, r1
 800fae0:	4630      	mov	r0, r6
 800fae2:	4639      	mov	r1, r7
 800fae4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800fae8:	f7f0 fbce 	bl	8000288 <__aeabi_dsub>
 800faec:	f805 6b01 	strb.w	r6, [r5], #1
 800faf0:	eba5 060b 	sub.w	r6, r5, fp
 800faf4:	45b1      	cmp	r9, r6
 800faf6:	4602      	mov	r2, r0
 800faf8:	460b      	mov	r3, r1
 800fafa:	d139      	bne.n	800fb70 <_dtoa_r+0x6c8>
 800fafc:	f7f0 fbc6 	bl	800028c <__adddf3>
 800fb00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fb04:	4606      	mov	r6, r0
 800fb06:	460f      	mov	r7, r1
 800fb08:	f7f1 f806 	bl	8000b18 <__aeabi_dcmpgt>
 800fb0c:	b9c8      	cbnz	r0, 800fb42 <_dtoa_r+0x69a>
 800fb0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fb12:	4630      	mov	r0, r6
 800fb14:	4639      	mov	r1, r7
 800fb16:	f7f0 ffd7 	bl	8000ac8 <__aeabi_dcmpeq>
 800fb1a:	b110      	cbz	r0, 800fb22 <_dtoa_r+0x67a>
 800fb1c:	f018 0f01 	tst.w	r8, #1
 800fb20:	d10f      	bne.n	800fb42 <_dtoa_r+0x69a>
 800fb22:	9904      	ldr	r1, [sp, #16]
 800fb24:	4620      	mov	r0, r4
 800fb26:	f000 fdf9 	bl	801071c <_Bfree>
 800fb2a:	2300      	movs	r3, #0
 800fb2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fb2e:	702b      	strb	r3, [r5, #0]
 800fb30:	f10a 0301 	add.w	r3, sl, #1
 800fb34:	6013      	str	r3, [r2, #0]
 800fb36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	f000 8241 	beq.w	800ffc0 <_dtoa_r+0xb18>
 800fb3e:	601d      	str	r5, [r3, #0]
 800fb40:	e23e      	b.n	800ffc0 <_dtoa_r+0xb18>
 800fb42:	f8cd a020 	str.w	sl, [sp, #32]
 800fb46:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800fb4a:	2a39      	cmp	r2, #57	; 0x39
 800fb4c:	f105 33ff 	add.w	r3, r5, #4294967295
 800fb50:	d108      	bne.n	800fb64 <_dtoa_r+0x6bc>
 800fb52:	459b      	cmp	fp, r3
 800fb54:	d10a      	bne.n	800fb6c <_dtoa_r+0x6c4>
 800fb56:	9b08      	ldr	r3, [sp, #32]
 800fb58:	3301      	adds	r3, #1
 800fb5a:	9308      	str	r3, [sp, #32]
 800fb5c:	2330      	movs	r3, #48	; 0x30
 800fb5e:	f88b 3000 	strb.w	r3, [fp]
 800fb62:	465b      	mov	r3, fp
 800fb64:	781a      	ldrb	r2, [r3, #0]
 800fb66:	3201      	adds	r2, #1
 800fb68:	701a      	strb	r2, [r3, #0]
 800fb6a:	e78c      	b.n	800fa86 <_dtoa_r+0x5de>
 800fb6c:	461d      	mov	r5, r3
 800fb6e:	e7ea      	b.n	800fb46 <_dtoa_r+0x69e>
 800fb70:	2200      	movs	r2, #0
 800fb72:	4b9b      	ldr	r3, [pc, #620]	; (800fde0 <_dtoa_r+0x938>)
 800fb74:	f7f0 fd40 	bl	80005f8 <__aeabi_dmul>
 800fb78:	2200      	movs	r2, #0
 800fb7a:	2300      	movs	r3, #0
 800fb7c:	4606      	mov	r6, r0
 800fb7e:	460f      	mov	r7, r1
 800fb80:	f7f0 ffa2 	bl	8000ac8 <__aeabi_dcmpeq>
 800fb84:	2800      	cmp	r0, #0
 800fb86:	d09a      	beq.n	800fabe <_dtoa_r+0x616>
 800fb88:	e7cb      	b.n	800fb22 <_dtoa_r+0x67a>
 800fb8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fb8c:	2a00      	cmp	r2, #0
 800fb8e:	f000 808b 	beq.w	800fca8 <_dtoa_r+0x800>
 800fb92:	9a06      	ldr	r2, [sp, #24]
 800fb94:	2a01      	cmp	r2, #1
 800fb96:	dc6e      	bgt.n	800fc76 <_dtoa_r+0x7ce>
 800fb98:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800fb9a:	2a00      	cmp	r2, #0
 800fb9c:	d067      	beq.n	800fc6e <_dtoa_r+0x7c6>
 800fb9e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800fba2:	9f07      	ldr	r7, [sp, #28]
 800fba4:	9d05      	ldr	r5, [sp, #20]
 800fba6:	9a05      	ldr	r2, [sp, #20]
 800fba8:	2101      	movs	r1, #1
 800fbaa:	441a      	add	r2, r3
 800fbac:	4620      	mov	r0, r4
 800fbae:	9205      	str	r2, [sp, #20]
 800fbb0:	4498      	add	r8, r3
 800fbb2:	f000 fe91 	bl	80108d8 <__i2b>
 800fbb6:	4606      	mov	r6, r0
 800fbb8:	2d00      	cmp	r5, #0
 800fbba:	dd0c      	ble.n	800fbd6 <_dtoa_r+0x72e>
 800fbbc:	f1b8 0f00 	cmp.w	r8, #0
 800fbc0:	dd09      	ble.n	800fbd6 <_dtoa_r+0x72e>
 800fbc2:	4545      	cmp	r5, r8
 800fbc4:	9a05      	ldr	r2, [sp, #20]
 800fbc6:	462b      	mov	r3, r5
 800fbc8:	bfa8      	it	ge
 800fbca:	4643      	movge	r3, r8
 800fbcc:	1ad2      	subs	r2, r2, r3
 800fbce:	9205      	str	r2, [sp, #20]
 800fbd0:	1aed      	subs	r5, r5, r3
 800fbd2:	eba8 0803 	sub.w	r8, r8, r3
 800fbd6:	9b07      	ldr	r3, [sp, #28]
 800fbd8:	b1eb      	cbz	r3, 800fc16 <_dtoa_r+0x76e>
 800fbda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d067      	beq.n	800fcb0 <_dtoa_r+0x808>
 800fbe0:	b18f      	cbz	r7, 800fc06 <_dtoa_r+0x75e>
 800fbe2:	4631      	mov	r1, r6
 800fbe4:	463a      	mov	r2, r7
 800fbe6:	4620      	mov	r0, r4
 800fbe8:	f000 ff16 	bl	8010a18 <__pow5mult>
 800fbec:	9a04      	ldr	r2, [sp, #16]
 800fbee:	4601      	mov	r1, r0
 800fbf0:	4606      	mov	r6, r0
 800fbf2:	4620      	mov	r0, r4
 800fbf4:	f000 fe79 	bl	80108ea <__multiply>
 800fbf8:	9904      	ldr	r1, [sp, #16]
 800fbfa:	9008      	str	r0, [sp, #32]
 800fbfc:	4620      	mov	r0, r4
 800fbfe:	f000 fd8d 	bl	801071c <_Bfree>
 800fc02:	9b08      	ldr	r3, [sp, #32]
 800fc04:	9304      	str	r3, [sp, #16]
 800fc06:	9b07      	ldr	r3, [sp, #28]
 800fc08:	1bda      	subs	r2, r3, r7
 800fc0a:	d004      	beq.n	800fc16 <_dtoa_r+0x76e>
 800fc0c:	9904      	ldr	r1, [sp, #16]
 800fc0e:	4620      	mov	r0, r4
 800fc10:	f000 ff02 	bl	8010a18 <__pow5mult>
 800fc14:	9004      	str	r0, [sp, #16]
 800fc16:	2101      	movs	r1, #1
 800fc18:	4620      	mov	r0, r4
 800fc1a:	f000 fe5d 	bl	80108d8 <__i2b>
 800fc1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fc20:	4607      	mov	r7, r0
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	f000 81d0 	beq.w	800ffc8 <_dtoa_r+0xb20>
 800fc28:	461a      	mov	r2, r3
 800fc2a:	4601      	mov	r1, r0
 800fc2c:	4620      	mov	r0, r4
 800fc2e:	f000 fef3 	bl	8010a18 <__pow5mult>
 800fc32:	9b06      	ldr	r3, [sp, #24]
 800fc34:	2b01      	cmp	r3, #1
 800fc36:	4607      	mov	r7, r0
 800fc38:	dc40      	bgt.n	800fcbc <_dtoa_r+0x814>
 800fc3a:	9b00      	ldr	r3, [sp, #0]
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d139      	bne.n	800fcb4 <_dtoa_r+0x80c>
 800fc40:	9b01      	ldr	r3, [sp, #4]
 800fc42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d136      	bne.n	800fcb8 <_dtoa_r+0x810>
 800fc4a:	9b01      	ldr	r3, [sp, #4]
 800fc4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fc50:	0d1b      	lsrs	r3, r3, #20
 800fc52:	051b      	lsls	r3, r3, #20
 800fc54:	b12b      	cbz	r3, 800fc62 <_dtoa_r+0x7ba>
 800fc56:	9b05      	ldr	r3, [sp, #20]
 800fc58:	3301      	adds	r3, #1
 800fc5a:	9305      	str	r3, [sp, #20]
 800fc5c:	f108 0801 	add.w	r8, r8, #1
 800fc60:	2301      	movs	r3, #1
 800fc62:	9307      	str	r3, [sp, #28]
 800fc64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d12a      	bne.n	800fcc0 <_dtoa_r+0x818>
 800fc6a:	2001      	movs	r0, #1
 800fc6c:	e030      	b.n	800fcd0 <_dtoa_r+0x828>
 800fc6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fc70:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800fc74:	e795      	b.n	800fba2 <_dtoa_r+0x6fa>
 800fc76:	9b07      	ldr	r3, [sp, #28]
 800fc78:	f109 37ff 	add.w	r7, r9, #4294967295
 800fc7c:	42bb      	cmp	r3, r7
 800fc7e:	bfbf      	itttt	lt
 800fc80:	9b07      	ldrlt	r3, [sp, #28]
 800fc82:	9707      	strlt	r7, [sp, #28]
 800fc84:	1afa      	sublt	r2, r7, r3
 800fc86:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800fc88:	bfbb      	ittet	lt
 800fc8a:	189b      	addlt	r3, r3, r2
 800fc8c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800fc8e:	1bdf      	subge	r7, r3, r7
 800fc90:	2700      	movlt	r7, #0
 800fc92:	f1b9 0f00 	cmp.w	r9, #0
 800fc96:	bfb5      	itete	lt
 800fc98:	9b05      	ldrlt	r3, [sp, #20]
 800fc9a:	9d05      	ldrge	r5, [sp, #20]
 800fc9c:	eba3 0509 	sublt.w	r5, r3, r9
 800fca0:	464b      	movge	r3, r9
 800fca2:	bfb8      	it	lt
 800fca4:	2300      	movlt	r3, #0
 800fca6:	e77e      	b.n	800fba6 <_dtoa_r+0x6fe>
 800fca8:	9f07      	ldr	r7, [sp, #28]
 800fcaa:	9d05      	ldr	r5, [sp, #20]
 800fcac:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800fcae:	e783      	b.n	800fbb8 <_dtoa_r+0x710>
 800fcb0:	9a07      	ldr	r2, [sp, #28]
 800fcb2:	e7ab      	b.n	800fc0c <_dtoa_r+0x764>
 800fcb4:	2300      	movs	r3, #0
 800fcb6:	e7d4      	b.n	800fc62 <_dtoa_r+0x7ba>
 800fcb8:	9b00      	ldr	r3, [sp, #0]
 800fcba:	e7d2      	b.n	800fc62 <_dtoa_r+0x7ba>
 800fcbc:	2300      	movs	r3, #0
 800fcbe:	9307      	str	r3, [sp, #28]
 800fcc0:	693b      	ldr	r3, [r7, #16]
 800fcc2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800fcc6:	6918      	ldr	r0, [r3, #16]
 800fcc8:	f000 fdb8 	bl	801083c <__hi0bits>
 800fccc:	f1c0 0020 	rsb	r0, r0, #32
 800fcd0:	4440      	add	r0, r8
 800fcd2:	f010 001f 	ands.w	r0, r0, #31
 800fcd6:	d047      	beq.n	800fd68 <_dtoa_r+0x8c0>
 800fcd8:	f1c0 0320 	rsb	r3, r0, #32
 800fcdc:	2b04      	cmp	r3, #4
 800fcde:	dd3b      	ble.n	800fd58 <_dtoa_r+0x8b0>
 800fce0:	9b05      	ldr	r3, [sp, #20]
 800fce2:	f1c0 001c 	rsb	r0, r0, #28
 800fce6:	4403      	add	r3, r0
 800fce8:	9305      	str	r3, [sp, #20]
 800fcea:	4405      	add	r5, r0
 800fcec:	4480      	add	r8, r0
 800fcee:	9b05      	ldr	r3, [sp, #20]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	dd05      	ble.n	800fd00 <_dtoa_r+0x858>
 800fcf4:	461a      	mov	r2, r3
 800fcf6:	9904      	ldr	r1, [sp, #16]
 800fcf8:	4620      	mov	r0, r4
 800fcfa:	f000 fedb 	bl	8010ab4 <__lshift>
 800fcfe:	9004      	str	r0, [sp, #16]
 800fd00:	f1b8 0f00 	cmp.w	r8, #0
 800fd04:	dd05      	ble.n	800fd12 <_dtoa_r+0x86a>
 800fd06:	4639      	mov	r1, r7
 800fd08:	4642      	mov	r2, r8
 800fd0a:	4620      	mov	r0, r4
 800fd0c:	f000 fed2 	bl	8010ab4 <__lshift>
 800fd10:	4607      	mov	r7, r0
 800fd12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fd14:	b353      	cbz	r3, 800fd6c <_dtoa_r+0x8c4>
 800fd16:	4639      	mov	r1, r7
 800fd18:	9804      	ldr	r0, [sp, #16]
 800fd1a:	f000 ff1f 	bl	8010b5c <__mcmp>
 800fd1e:	2800      	cmp	r0, #0
 800fd20:	da24      	bge.n	800fd6c <_dtoa_r+0x8c4>
 800fd22:	2300      	movs	r3, #0
 800fd24:	220a      	movs	r2, #10
 800fd26:	9904      	ldr	r1, [sp, #16]
 800fd28:	4620      	mov	r0, r4
 800fd2a:	f000 fd0e 	bl	801074a <__multadd>
 800fd2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd30:	9004      	str	r0, [sp, #16]
 800fd32:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	f000 814d 	beq.w	800ffd6 <_dtoa_r+0xb2e>
 800fd3c:	2300      	movs	r3, #0
 800fd3e:	4631      	mov	r1, r6
 800fd40:	220a      	movs	r2, #10
 800fd42:	4620      	mov	r0, r4
 800fd44:	f000 fd01 	bl	801074a <__multadd>
 800fd48:	9b02      	ldr	r3, [sp, #8]
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	4606      	mov	r6, r0
 800fd4e:	dc4f      	bgt.n	800fdf0 <_dtoa_r+0x948>
 800fd50:	9b06      	ldr	r3, [sp, #24]
 800fd52:	2b02      	cmp	r3, #2
 800fd54:	dd4c      	ble.n	800fdf0 <_dtoa_r+0x948>
 800fd56:	e011      	b.n	800fd7c <_dtoa_r+0x8d4>
 800fd58:	d0c9      	beq.n	800fcee <_dtoa_r+0x846>
 800fd5a:	9a05      	ldr	r2, [sp, #20]
 800fd5c:	331c      	adds	r3, #28
 800fd5e:	441a      	add	r2, r3
 800fd60:	9205      	str	r2, [sp, #20]
 800fd62:	441d      	add	r5, r3
 800fd64:	4498      	add	r8, r3
 800fd66:	e7c2      	b.n	800fcee <_dtoa_r+0x846>
 800fd68:	4603      	mov	r3, r0
 800fd6a:	e7f6      	b.n	800fd5a <_dtoa_r+0x8b2>
 800fd6c:	f1b9 0f00 	cmp.w	r9, #0
 800fd70:	dc38      	bgt.n	800fde4 <_dtoa_r+0x93c>
 800fd72:	9b06      	ldr	r3, [sp, #24]
 800fd74:	2b02      	cmp	r3, #2
 800fd76:	dd35      	ble.n	800fde4 <_dtoa_r+0x93c>
 800fd78:	f8cd 9008 	str.w	r9, [sp, #8]
 800fd7c:	9b02      	ldr	r3, [sp, #8]
 800fd7e:	b963      	cbnz	r3, 800fd9a <_dtoa_r+0x8f2>
 800fd80:	4639      	mov	r1, r7
 800fd82:	2205      	movs	r2, #5
 800fd84:	4620      	mov	r0, r4
 800fd86:	f000 fce0 	bl	801074a <__multadd>
 800fd8a:	4601      	mov	r1, r0
 800fd8c:	4607      	mov	r7, r0
 800fd8e:	9804      	ldr	r0, [sp, #16]
 800fd90:	f000 fee4 	bl	8010b5c <__mcmp>
 800fd94:	2800      	cmp	r0, #0
 800fd96:	f73f adcc 	bgt.w	800f932 <_dtoa_r+0x48a>
 800fd9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fd9c:	465d      	mov	r5, fp
 800fd9e:	ea6f 0a03 	mvn.w	sl, r3
 800fda2:	f04f 0900 	mov.w	r9, #0
 800fda6:	4639      	mov	r1, r7
 800fda8:	4620      	mov	r0, r4
 800fdaa:	f000 fcb7 	bl	801071c <_Bfree>
 800fdae:	2e00      	cmp	r6, #0
 800fdb0:	f43f aeb7 	beq.w	800fb22 <_dtoa_r+0x67a>
 800fdb4:	f1b9 0f00 	cmp.w	r9, #0
 800fdb8:	d005      	beq.n	800fdc6 <_dtoa_r+0x91e>
 800fdba:	45b1      	cmp	r9, r6
 800fdbc:	d003      	beq.n	800fdc6 <_dtoa_r+0x91e>
 800fdbe:	4649      	mov	r1, r9
 800fdc0:	4620      	mov	r0, r4
 800fdc2:	f000 fcab 	bl	801071c <_Bfree>
 800fdc6:	4631      	mov	r1, r6
 800fdc8:	4620      	mov	r0, r4
 800fdca:	f000 fca7 	bl	801071c <_Bfree>
 800fdce:	e6a8      	b.n	800fb22 <_dtoa_r+0x67a>
 800fdd0:	2700      	movs	r7, #0
 800fdd2:	463e      	mov	r6, r7
 800fdd4:	e7e1      	b.n	800fd9a <_dtoa_r+0x8f2>
 800fdd6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800fdda:	463e      	mov	r6, r7
 800fddc:	e5a9      	b.n	800f932 <_dtoa_r+0x48a>
 800fdde:	bf00      	nop
 800fde0:	40240000 	.word	0x40240000
 800fde4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fde6:	f8cd 9008 	str.w	r9, [sp, #8]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	f000 80fa 	beq.w	800ffe4 <_dtoa_r+0xb3c>
 800fdf0:	2d00      	cmp	r5, #0
 800fdf2:	dd05      	ble.n	800fe00 <_dtoa_r+0x958>
 800fdf4:	4631      	mov	r1, r6
 800fdf6:	462a      	mov	r2, r5
 800fdf8:	4620      	mov	r0, r4
 800fdfa:	f000 fe5b 	bl	8010ab4 <__lshift>
 800fdfe:	4606      	mov	r6, r0
 800fe00:	9b07      	ldr	r3, [sp, #28]
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d04c      	beq.n	800fea0 <_dtoa_r+0x9f8>
 800fe06:	6871      	ldr	r1, [r6, #4]
 800fe08:	4620      	mov	r0, r4
 800fe0a:	f000 fc53 	bl	80106b4 <_Balloc>
 800fe0e:	6932      	ldr	r2, [r6, #16]
 800fe10:	3202      	adds	r2, #2
 800fe12:	4605      	mov	r5, r0
 800fe14:	0092      	lsls	r2, r2, #2
 800fe16:	f106 010c 	add.w	r1, r6, #12
 800fe1a:	300c      	adds	r0, #12
 800fe1c:	f7fd fcd8 	bl	800d7d0 <memcpy>
 800fe20:	2201      	movs	r2, #1
 800fe22:	4629      	mov	r1, r5
 800fe24:	4620      	mov	r0, r4
 800fe26:	f000 fe45 	bl	8010ab4 <__lshift>
 800fe2a:	9b00      	ldr	r3, [sp, #0]
 800fe2c:	f8cd b014 	str.w	fp, [sp, #20]
 800fe30:	f003 0301 	and.w	r3, r3, #1
 800fe34:	46b1      	mov	r9, r6
 800fe36:	9307      	str	r3, [sp, #28]
 800fe38:	4606      	mov	r6, r0
 800fe3a:	4639      	mov	r1, r7
 800fe3c:	9804      	ldr	r0, [sp, #16]
 800fe3e:	f7ff faa5 	bl	800f38c <quorem>
 800fe42:	4649      	mov	r1, r9
 800fe44:	4605      	mov	r5, r0
 800fe46:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800fe4a:	9804      	ldr	r0, [sp, #16]
 800fe4c:	f000 fe86 	bl	8010b5c <__mcmp>
 800fe50:	4632      	mov	r2, r6
 800fe52:	9000      	str	r0, [sp, #0]
 800fe54:	4639      	mov	r1, r7
 800fe56:	4620      	mov	r0, r4
 800fe58:	f000 fe9a 	bl	8010b90 <__mdiff>
 800fe5c:	68c3      	ldr	r3, [r0, #12]
 800fe5e:	4602      	mov	r2, r0
 800fe60:	bb03      	cbnz	r3, 800fea4 <_dtoa_r+0x9fc>
 800fe62:	4601      	mov	r1, r0
 800fe64:	9008      	str	r0, [sp, #32]
 800fe66:	9804      	ldr	r0, [sp, #16]
 800fe68:	f000 fe78 	bl	8010b5c <__mcmp>
 800fe6c:	9a08      	ldr	r2, [sp, #32]
 800fe6e:	4603      	mov	r3, r0
 800fe70:	4611      	mov	r1, r2
 800fe72:	4620      	mov	r0, r4
 800fe74:	9308      	str	r3, [sp, #32]
 800fe76:	f000 fc51 	bl	801071c <_Bfree>
 800fe7a:	9b08      	ldr	r3, [sp, #32]
 800fe7c:	b9a3      	cbnz	r3, 800fea8 <_dtoa_r+0xa00>
 800fe7e:	9a06      	ldr	r2, [sp, #24]
 800fe80:	b992      	cbnz	r2, 800fea8 <_dtoa_r+0xa00>
 800fe82:	9a07      	ldr	r2, [sp, #28]
 800fe84:	b982      	cbnz	r2, 800fea8 <_dtoa_r+0xa00>
 800fe86:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800fe8a:	d029      	beq.n	800fee0 <_dtoa_r+0xa38>
 800fe8c:	9b00      	ldr	r3, [sp, #0]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	dd01      	ble.n	800fe96 <_dtoa_r+0x9ee>
 800fe92:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800fe96:	9b05      	ldr	r3, [sp, #20]
 800fe98:	1c5d      	adds	r5, r3, #1
 800fe9a:	f883 8000 	strb.w	r8, [r3]
 800fe9e:	e782      	b.n	800fda6 <_dtoa_r+0x8fe>
 800fea0:	4630      	mov	r0, r6
 800fea2:	e7c2      	b.n	800fe2a <_dtoa_r+0x982>
 800fea4:	2301      	movs	r3, #1
 800fea6:	e7e3      	b.n	800fe70 <_dtoa_r+0x9c8>
 800fea8:	9a00      	ldr	r2, [sp, #0]
 800feaa:	2a00      	cmp	r2, #0
 800feac:	db04      	blt.n	800feb8 <_dtoa_r+0xa10>
 800feae:	d125      	bne.n	800fefc <_dtoa_r+0xa54>
 800feb0:	9a06      	ldr	r2, [sp, #24]
 800feb2:	bb1a      	cbnz	r2, 800fefc <_dtoa_r+0xa54>
 800feb4:	9a07      	ldr	r2, [sp, #28]
 800feb6:	bb0a      	cbnz	r2, 800fefc <_dtoa_r+0xa54>
 800feb8:	2b00      	cmp	r3, #0
 800feba:	ddec      	ble.n	800fe96 <_dtoa_r+0x9ee>
 800febc:	2201      	movs	r2, #1
 800febe:	9904      	ldr	r1, [sp, #16]
 800fec0:	4620      	mov	r0, r4
 800fec2:	f000 fdf7 	bl	8010ab4 <__lshift>
 800fec6:	4639      	mov	r1, r7
 800fec8:	9004      	str	r0, [sp, #16]
 800feca:	f000 fe47 	bl	8010b5c <__mcmp>
 800fece:	2800      	cmp	r0, #0
 800fed0:	dc03      	bgt.n	800feda <_dtoa_r+0xa32>
 800fed2:	d1e0      	bne.n	800fe96 <_dtoa_r+0x9ee>
 800fed4:	f018 0f01 	tst.w	r8, #1
 800fed8:	d0dd      	beq.n	800fe96 <_dtoa_r+0x9ee>
 800feda:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800fede:	d1d8      	bne.n	800fe92 <_dtoa_r+0x9ea>
 800fee0:	9b05      	ldr	r3, [sp, #20]
 800fee2:	9a05      	ldr	r2, [sp, #20]
 800fee4:	1c5d      	adds	r5, r3, #1
 800fee6:	2339      	movs	r3, #57	; 0x39
 800fee8:	7013      	strb	r3, [r2, #0]
 800feea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800feee:	2b39      	cmp	r3, #57	; 0x39
 800fef0:	f105 32ff 	add.w	r2, r5, #4294967295
 800fef4:	d04f      	beq.n	800ff96 <_dtoa_r+0xaee>
 800fef6:	3301      	adds	r3, #1
 800fef8:	7013      	strb	r3, [r2, #0]
 800fefa:	e754      	b.n	800fda6 <_dtoa_r+0x8fe>
 800fefc:	9a05      	ldr	r2, [sp, #20]
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	f102 0501 	add.w	r5, r2, #1
 800ff04:	dd06      	ble.n	800ff14 <_dtoa_r+0xa6c>
 800ff06:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ff0a:	d0e9      	beq.n	800fee0 <_dtoa_r+0xa38>
 800ff0c:	f108 0801 	add.w	r8, r8, #1
 800ff10:	9b05      	ldr	r3, [sp, #20]
 800ff12:	e7c2      	b.n	800fe9a <_dtoa_r+0x9f2>
 800ff14:	9a02      	ldr	r2, [sp, #8]
 800ff16:	f805 8c01 	strb.w	r8, [r5, #-1]
 800ff1a:	eba5 030b 	sub.w	r3, r5, fp
 800ff1e:	4293      	cmp	r3, r2
 800ff20:	d021      	beq.n	800ff66 <_dtoa_r+0xabe>
 800ff22:	2300      	movs	r3, #0
 800ff24:	220a      	movs	r2, #10
 800ff26:	9904      	ldr	r1, [sp, #16]
 800ff28:	4620      	mov	r0, r4
 800ff2a:	f000 fc0e 	bl	801074a <__multadd>
 800ff2e:	45b1      	cmp	r9, r6
 800ff30:	9004      	str	r0, [sp, #16]
 800ff32:	f04f 0300 	mov.w	r3, #0
 800ff36:	f04f 020a 	mov.w	r2, #10
 800ff3a:	4649      	mov	r1, r9
 800ff3c:	4620      	mov	r0, r4
 800ff3e:	d105      	bne.n	800ff4c <_dtoa_r+0xaa4>
 800ff40:	f000 fc03 	bl	801074a <__multadd>
 800ff44:	4681      	mov	r9, r0
 800ff46:	4606      	mov	r6, r0
 800ff48:	9505      	str	r5, [sp, #20]
 800ff4a:	e776      	b.n	800fe3a <_dtoa_r+0x992>
 800ff4c:	f000 fbfd 	bl	801074a <__multadd>
 800ff50:	4631      	mov	r1, r6
 800ff52:	4681      	mov	r9, r0
 800ff54:	2300      	movs	r3, #0
 800ff56:	220a      	movs	r2, #10
 800ff58:	4620      	mov	r0, r4
 800ff5a:	f000 fbf6 	bl	801074a <__multadd>
 800ff5e:	4606      	mov	r6, r0
 800ff60:	e7f2      	b.n	800ff48 <_dtoa_r+0xaa0>
 800ff62:	f04f 0900 	mov.w	r9, #0
 800ff66:	2201      	movs	r2, #1
 800ff68:	9904      	ldr	r1, [sp, #16]
 800ff6a:	4620      	mov	r0, r4
 800ff6c:	f000 fda2 	bl	8010ab4 <__lshift>
 800ff70:	4639      	mov	r1, r7
 800ff72:	9004      	str	r0, [sp, #16]
 800ff74:	f000 fdf2 	bl	8010b5c <__mcmp>
 800ff78:	2800      	cmp	r0, #0
 800ff7a:	dcb6      	bgt.n	800feea <_dtoa_r+0xa42>
 800ff7c:	d102      	bne.n	800ff84 <_dtoa_r+0xadc>
 800ff7e:	f018 0f01 	tst.w	r8, #1
 800ff82:	d1b2      	bne.n	800feea <_dtoa_r+0xa42>
 800ff84:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ff88:	2b30      	cmp	r3, #48	; 0x30
 800ff8a:	f105 32ff 	add.w	r2, r5, #4294967295
 800ff8e:	f47f af0a 	bne.w	800fda6 <_dtoa_r+0x8fe>
 800ff92:	4615      	mov	r5, r2
 800ff94:	e7f6      	b.n	800ff84 <_dtoa_r+0xadc>
 800ff96:	4593      	cmp	fp, r2
 800ff98:	d105      	bne.n	800ffa6 <_dtoa_r+0xafe>
 800ff9a:	2331      	movs	r3, #49	; 0x31
 800ff9c:	f10a 0a01 	add.w	sl, sl, #1
 800ffa0:	f88b 3000 	strb.w	r3, [fp]
 800ffa4:	e6ff      	b.n	800fda6 <_dtoa_r+0x8fe>
 800ffa6:	4615      	mov	r5, r2
 800ffa8:	e79f      	b.n	800feea <_dtoa_r+0xa42>
 800ffaa:	f8df b064 	ldr.w	fp, [pc, #100]	; 8010010 <_dtoa_r+0xb68>
 800ffae:	e007      	b.n	800ffc0 <_dtoa_r+0xb18>
 800ffb0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ffb2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8010014 <_dtoa_r+0xb6c>
 800ffb6:	b11b      	cbz	r3, 800ffc0 <_dtoa_r+0xb18>
 800ffb8:	f10b 0308 	add.w	r3, fp, #8
 800ffbc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ffbe:	6013      	str	r3, [r2, #0]
 800ffc0:	4658      	mov	r0, fp
 800ffc2:	b017      	add	sp, #92	; 0x5c
 800ffc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffc8:	9b06      	ldr	r3, [sp, #24]
 800ffca:	2b01      	cmp	r3, #1
 800ffcc:	f77f ae35 	ble.w	800fc3a <_dtoa_r+0x792>
 800ffd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ffd2:	9307      	str	r3, [sp, #28]
 800ffd4:	e649      	b.n	800fc6a <_dtoa_r+0x7c2>
 800ffd6:	9b02      	ldr	r3, [sp, #8]
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	dc03      	bgt.n	800ffe4 <_dtoa_r+0xb3c>
 800ffdc:	9b06      	ldr	r3, [sp, #24]
 800ffde:	2b02      	cmp	r3, #2
 800ffe0:	f73f aecc 	bgt.w	800fd7c <_dtoa_r+0x8d4>
 800ffe4:	465d      	mov	r5, fp
 800ffe6:	4639      	mov	r1, r7
 800ffe8:	9804      	ldr	r0, [sp, #16]
 800ffea:	f7ff f9cf 	bl	800f38c <quorem>
 800ffee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800fff2:	f805 8b01 	strb.w	r8, [r5], #1
 800fff6:	9a02      	ldr	r2, [sp, #8]
 800fff8:	eba5 030b 	sub.w	r3, r5, fp
 800fffc:	429a      	cmp	r2, r3
 800fffe:	ddb0      	ble.n	800ff62 <_dtoa_r+0xaba>
 8010000:	2300      	movs	r3, #0
 8010002:	220a      	movs	r2, #10
 8010004:	9904      	ldr	r1, [sp, #16]
 8010006:	4620      	mov	r0, r4
 8010008:	f000 fb9f 	bl	801074a <__multadd>
 801000c:	9004      	str	r0, [sp, #16]
 801000e:	e7ea      	b.n	800ffe6 <_dtoa_r+0xb3e>
 8010010:	0801190c 	.word	0x0801190c
 8010014:	08011988 	.word	0x08011988

08010018 <rshift>:
 8010018:	b5f0      	push	{r4, r5, r6, r7, lr}
 801001a:	6906      	ldr	r6, [r0, #16]
 801001c:	114b      	asrs	r3, r1, #5
 801001e:	429e      	cmp	r6, r3
 8010020:	f100 0414 	add.w	r4, r0, #20
 8010024:	dd30      	ble.n	8010088 <rshift+0x70>
 8010026:	f011 011f 	ands.w	r1, r1, #31
 801002a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801002e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8010032:	d108      	bne.n	8010046 <rshift+0x2e>
 8010034:	4621      	mov	r1, r4
 8010036:	42b2      	cmp	r2, r6
 8010038:	460b      	mov	r3, r1
 801003a:	d211      	bcs.n	8010060 <rshift+0x48>
 801003c:	f852 3b04 	ldr.w	r3, [r2], #4
 8010040:	f841 3b04 	str.w	r3, [r1], #4
 8010044:	e7f7      	b.n	8010036 <rshift+0x1e>
 8010046:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 801004a:	f1c1 0c20 	rsb	ip, r1, #32
 801004e:	40cd      	lsrs	r5, r1
 8010050:	3204      	adds	r2, #4
 8010052:	4623      	mov	r3, r4
 8010054:	42b2      	cmp	r2, r6
 8010056:	4617      	mov	r7, r2
 8010058:	d30c      	bcc.n	8010074 <rshift+0x5c>
 801005a:	601d      	str	r5, [r3, #0]
 801005c:	b105      	cbz	r5, 8010060 <rshift+0x48>
 801005e:	3304      	adds	r3, #4
 8010060:	1b1a      	subs	r2, r3, r4
 8010062:	42a3      	cmp	r3, r4
 8010064:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010068:	bf08      	it	eq
 801006a:	2300      	moveq	r3, #0
 801006c:	6102      	str	r2, [r0, #16]
 801006e:	bf08      	it	eq
 8010070:	6143      	streq	r3, [r0, #20]
 8010072:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010074:	683f      	ldr	r7, [r7, #0]
 8010076:	fa07 f70c 	lsl.w	r7, r7, ip
 801007a:	433d      	orrs	r5, r7
 801007c:	f843 5b04 	str.w	r5, [r3], #4
 8010080:	f852 5b04 	ldr.w	r5, [r2], #4
 8010084:	40cd      	lsrs	r5, r1
 8010086:	e7e5      	b.n	8010054 <rshift+0x3c>
 8010088:	4623      	mov	r3, r4
 801008a:	e7e9      	b.n	8010060 <rshift+0x48>

0801008c <__hexdig_fun>:
 801008c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010090:	2b09      	cmp	r3, #9
 8010092:	d802      	bhi.n	801009a <__hexdig_fun+0xe>
 8010094:	3820      	subs	r0, #32
 8010096:	b2c0      	uxtb	r0, r0
 8010098:	4770      	bx	lr
 801009a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801009e:	2b05      	cmp	r3, #5
 80100a0:	d801      	bhi.n	80100a6 <__hexdig_fun+0x1a>
 80100a2:	3847      	subs	r0, #71	; 0x47
 80100a4:	e7f7      	b.n	8010096 <__hexdig_fun+0xa>
 80100a6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80100aa:	2b05      	cmp	r3, #5
 80100ac:	d801      	bhi.n	80100b2 <__hexdig_fun+0x26>
 80100ae:	3827      	subs	r0, #39	; 0x27
 80100b0:	e7f1      	b.n	8010096 <__hexdig_fun+0xa>
 80100b2:	2000      	movs	r0, #0
 80100b4:	4770      	bx	lr

080100b6 <__gethex>:
 80100b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100ba:	b08b      	sub	sp, #44	; 0x2c
 80100bc:	468a      	mov	sl, r1
 80100be:	9002      	str	r0, [sp, #8]
 80100c0:	9816      	ldr	r0, [sp, #88]	; 0x58
 80100c2:	9306      	str	r3, [sp, #24]
 80100c4:	4690      	mov	r8, r2
 80100c6:	f000 fad0 	bl	801066a <__localeconv_l>
 80100ca:	6803      	ldr	r3, [r0, #0]
 80100cc:	9303      	str	r3, [sp, #12]
 80100ce:	4618      	mov	r0, r3
 80100d0:	f7f0 f87e 	bl	80001d0 <strlen>
 80100d4:	9b03      	ldr	r3, [sp, #12]
 80100d6:	9001      	str	r0, [sp, #4]
 80100d8:	4403      	add	r3, r0
 80100da:	f04f 0b00 	mov.w	fp, #0
 80100de:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80100e2:	9307      	str	r3, [sp, #28]
 80100e4:	f8da 3000 	ldr.w	r3, [sl]
 80100e8:	3302      	adds	r3, #2
 80100ea:	461f      	mov	r7, r3
 80100ec:	f813 0b01 	ldrb.w	r0, [r3], #1
 80100f0:	2830      	cmp	r0, #48	; 0x30
 80100f2:	d06c      	beq.n	80101ce <__gethex+0x118>
 80100f4:	f7ff ffca 	bl	801008c <__hexdig_fun>
 80100f8:	4604      	mov	r4, r0
 80100fa:	2800      	cmp	r0, #0
 80100fc:	d16a      	bne.n	80101d4 <__gethex+0x11e>
 80100fe:	9a01      	ldr	r2, [sp, #4]
 8010100:	9903      	ldr	r1, [sp, #12]
 8010102:	4638      	mov	r0, r7
 8010104:	f001 f836 	bl	8011174 <strncmp>
 8010108:	2800      	cmp	r0, #0
 801010a:	d166      	bne.n	80101da <__gethex+0x124>
 801010c:	9b01      	ldr	r3, [sp, #4]
 801010e:	5cf8      	ldrb	r0, [r7, r3]
 8010110:	18fe      	adds	r6, r7, r3
 8010112:	f7ff ffbb 	bl	801008c <__hexdig_fun>
 8010116:	2800      	cmp	r0, #0
 8010118:	d062      	beq.n	80101e0 <__gethex+0x12a>
 801011a:	4633      	mov	r3, r6
 801011c:	7818      	ldrb	r0, [r3, #0]
 801011e:	2830      	cmp	r0, #48	; 0x30
 8010120:	461f      	mov	r7, r3
 8010122:	f103 0301 	add.w	r3, r3, #1
 8010126:	d0f9      	beq.n	801011c <__gethex+0x66>
 8010128:	f7ff ffb0 	bl	801008c <__hexdig_fun>
 801012c:	fab0 f580 	clz	r5, r0
 8010130:	096d      	lsrs	r5, r5, #5
 8010132:	4634      	mov	r4, r6
 8010134:	f04f 0b01 	mov.w	fp, #1
 8010138:	463a      	mov	r2, r7
 801013a:	4616      	mov	r6, r2
 801013c:	3201      	adds	r2, #1
 801013e:	7830      	ldrb	r0, [r6, #0]
 8010140:	f7ff ffa4 	bl	801008c <__hexdig_fun>
 8010144:	2800      	cmp	r0, #0
 8010146:	d1f8      	bne.n	801013a <__gethex+0x84>
 8010148:	9a01      	ldr	r2, [sp, #4]
 801014a:	9903      	ldr	r1, [sp, #12]
 801014c:	4630      	mov	r0, r6
 801014e:	f001 f811 	bl	8011174 <strncmp>
 8010152:	b950      	cbnz	r0, 801016a <__gethex+0xb4>
 8010154:	b954      	cbnz	r4, 801016c <__gethex+0xb6>
 8010156:	9b01      	ldr	r3, [sp, #4]
 8010158:	18f4      	adds	r4, r6, r3
 801015a:	4622      	mov	r2, r4
 801015c:	4616      	mov	r6, r2
 801015e:	3201      	adds	r2, #1
 8010160:	7830      	ldrb	r0, [r6, #0]
 8010162:	f7ff ff93 	bl	801008c <__hexdig_fun>
 8010166:	2800      	cmp	r0, #0
 8010168:	d1f8      	bne.n	801015c <__gethex+0xa6>
 801016a:	b10c      	cbz	r4, 8010170 <__gethex+0xba>
 801016c:	1ba4      	subs	r4, r4, r6
 801016e:	00a4      	lsls	r4, r4, #2
 8010170:	7833      	ldrb	r3, [r6, #0]
 8010172:	2b50      	cmp	r3, #80	; 0x50
 8010174:	d001      	beq.n	801017a <__gethex+0xc4>
 8010176:	2b70      	cmp	r3, #112	; 0x70
 8010178:	d140      	bne.n	80101fc <__gethex+0x146>
 801017a:	7873      	ldrb	r3, [r6, #1]
 801017c:	2b2b      	cmp	r3, #43	; 0x2b
 801017e:	d031      	beq.n	80101e4 <__gethex+0x12e>
 8010180:	2b2d      	cmp	r3, #45	; 0x2d
 8010182:	d033      	beq.n	80101ec <__gethex+0x136>
 8010184:	1c71      	adds	r1, r6, #1
 8010186:	f04f 0900 	mov.w	r9, #0
 801018a:	7808      	ldrb	r0, [r1, #0]
 801018c:	f7ff ff7e 	bl	801008c <__hexdig_fun>
 8010190:	1e43      	subs	r3, r0, #1
 8010192:	b2db      	uxtb	r3, r3
 8010194:	2b18      	cmp	r3, #24
 8010196:	d831      	bhi.n	80101fc <__gethex+0x146>
 8010198:	f1a0 0210 	sub.w	r2, r0, #16
 801019c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80101a0:	f7ff ff74 	bl	801008c <__hexdig_fun>
 80101a4:	1e43      	subs	r3, r0, #1
 80101a6:	b2db      	uxtb	r3, r3
 80101a8:	2b18      	cmp	r3, #24
 80101aa:	d922      	bls.n	80101f2 <__gethex+0x13c>
 80101ac:	f1b9 0f00 	cmp.w	r9, #0
 80101b0:	d000      	beq.n	80101b4 <__gethex+0xfe>
 80101b2:	4252      	negs	r2, r2
 80101b4:	4414      	add	r4, r2
 80101b6:	f8ca 1000 	str.w	r1, [sl]
 80101ba:	b30d      	cbz	r5, 8010200 <__gethex+0x14a>
 80101bc:	f1bb 0f00 	cmp.w	fp, #0
 80101c0:	bf0c      	ite	eq
 80101c2:	2706      	moveq	r7, #6
 80101c4:	2700      	movne	r7, #0
 80101c6:	4638      	mov	r0, r7
 80101c8:	b00b      	add	sp, #44	; 0x2c
 80101ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101ce:	f10b 0b01 	add.w	fp, fp, #1
 80101d2:	e78a      	b.n	80100ea <__gethex+0x34>
 80101d4:	2500      	movs	r5, #0
 80101d6:	462c      	mov	r4, r5
 80101d8:	e7ae      	b.n	8010138 <__gethex+0x82>
 80101da:	463e      	mov	r6, r7
 80101dc:	2501      	movs	r5, #1
 80101de:	e7c7      	b.n	8010170 <__gethex+0xba>
 80101e0:	4604      	mov	r4, r0
 80101e2:	e7fb      	b.n	80101dc <__gethex+0x126>
 80101e4:	f04f 0900 	mov.w	r9, #0
 80101e8:	1cb1      	adds	r1, r6, #2
 80101ea:	e7ce      	b.n	801018a <__gethex+0xd4>
 80101ec:	f04f 0901 	mov.w	r9, #1
 80101f0:	e7fa      	b.n	80101e8 <__gethex+0x132>
 80101f2:	230a      	movs	r3, #10
 80101f4:	fb03 0202 	mla	r2, r3, r2, r0
 80101f8:	3a10      	subs	r2, #16
 80101fa:	e7cf      	b.n	801019c <__gethex+0xe6>
 80101fc:	4631      	mov	r1, r6
 80101fe:	e7da      	b.n	80101b6 <__gethex+0x100>
 8010200:	1bf3      	subs	r3, r6, r7
 8010202:	3b01      	subs	r3, #1
 8010204:	4629      	mov	r1, r5
 8010206:	2b07      	cmp	r3, #7
 8010208:	dc49      	bgt.n	801029e <__gethex+0x1e8>
 801020a:	9802      	ldr	r0, [sp, #8]
 801020c:	f000 fa52 	bl	80106b4 <_Balloc>
 8010210:	9b01      	ldr	r3, [sp, #4]
 8010212:	f100 0914 	add.w	r9, r0, #20
 8010216:	f04f 0b00 	mov.w	fp, #0
 801021a:	f1c3 0301 	rsb	r3, r3, #1
 801021e:	4605      	mov	r5, r0
 8010220:	f8cd 9010 	str.w	r9, [sp, #16]
 8010224:	46da      	mov	sl, fp
 8010226:	9308      	str	r3, [sp, #32]
 8010228:	42b7      	cmp	r7, r6
 801022a:	d33b      	bcc.n	80102a4 <__gethex+0x1ee>
 801022c:	9804      	ldr	r0, [sp, #16]
 801022e:	f840 ab04 	str.w	sl, [r0], #4
 8010232:	eba0 0009 	sub.w	r0, r0, r9
 8010236:	1080      	asrs	r0, r0, #2
 8010238:	6128      	str	r0, [r5, #16]
 801023a:	0147      	lsls	r7, r0, #5
 801023c:	4650      	mov	r0, sl
 801023e:	f000 fafd 	bl	801083c <__hi0bits>
 8010242:	f8d8 6000 	ldr.w	r6, [r8]
 8010246:	1a3f      	subs	r7, r7, r0
 8010248:	42b7      	cmp	r7, r6
 801024a:	dd64      	ble.n	8010316 <__gethex+0x260>
 801024c:	1bbf      	subs	r7, r7, r6
 801024e:	4639      	mov	r1, r7
 8010250:	4628      	mov	r0, r5
 8010252:	f000 fe0d 	bl	8010e70 <__any_on>
 8010256:	4682      	mov	sl, r0
 8010258:	b178      	cbz	r0, 801027a <__gethex+0x1c4>
 801025a:	1e7b      	subs	r3, r7, #1
 801025c:	1159      	asrs	r1, r3, #5
 801025e:	f003 021f 	and.w	r2, r3, #31
 8010262:	f04f 0a01 	mov.w	sl, #1
 8010266:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801026a:	fa0a f202 	lsl.w	r2, sl, r2
 801026e:	420a      	tst	r2, r1
 8010270:	d003      	beq.n	801027a <__gethex+0x1c4>
 8010272:	4553      	cmp	r3, sl
 8010274:	dc46      	bgt.n	8010304 <__gethex+0x24e>
 8010276:	f04f 0a02 	mov.w	sl, #2
 801027a:	4639      	mov	r1, r7
 801027c:	4628      	mov	r0, r5
 801027e:	f7ff fecb 	bl	8010018 <rshift>
 8010282:	443c      	add	r4, r7
 8010284:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010288:	42a3      	cmp	r3, r4
 801028a:	da52      	bge.n	8010332 <__gethex+0x27c>
 801028c:	4629      	mov	r1, r5
 801028e:	9802      	ldr	r0, [sp, #8]
 8010290:	f000 fa44 	bl	801071c <_Bfree>
 8010294:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010296:	2300      	movs	r3, #0
 8010298:	6013      	str	r3, [r2, #0]
 801029a:	27a3      	movs	r7, #163	; 0xa3
 801029c:	e793      	b.n	80101c6 <__gethex+0x110>
 801029e:	3101      	adds	r1, #1
 80102a0:	105b      	asrs	r3, r3, #1
 80102a2:	e7b0      	b.n	8010206 <__gethex+0x150>
 80102a4:	1e73      	subs	r3, r6, #1
 80102a6:	9305      	str	r3, [sp, #20]
 80102a8:	9a07      	ldr	r2, [sp, #28]
 80102aa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80102ae:	4293      	cmp	r3, r2
 80102b0:	d018      	beq.n	80102e4 <__gethex+0x22e>
 80102b2:	f1bb 0f20 	cmp.w	fp, #32
 80102b6:	d107      	bne.n	80102c8 <__gethex+0x212>
 80102b8:	9b04      	ldr	r3, [sp, #16]
 80102ba:	f8c3 a000 	str.w	sl, [r3]
 80102be:	3304      	adds	r3, #4
 80102c0:	f04f 0a00 	mov.w	sl, #0
 80102c4:	9304      	str	r3, [sp, #16]
 80102c6:	46d3      	mov	fp, sl
 80102c8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80102cc:	f7ff fede 	bl	801008c <__hexdig_fun>
 80102d0:	f000 000f 	and.w	r0, r0, #15
 80102d4:	fa00 f00b 	lsl.w	r0, r0, fp
 80102d8:	ea4a 0a00 	orr.w	sl, sl, r0
 80102dc:	f10b 0b04 	add.w	fp, fp, #4
 80102e0:	9b05      	ldr	r3, [sp, #20]
 80102e2:	e00d      	b.n	8010300 <__gethex+0x24a>
 80102e4:	9b05      	ldr	r3, [sp, #20]
 80102e6:	9a08      	ldr	r2, [sp, #32]
 80102e8:	4413      	add	r3, r2
 80102ea:	42bb      	cmp	r3, r7
 80102ec:	d3e1      	bcc.n	80102b2 <__gethex+0x1fc>
 80102ee:	4618      	mov	r0, r3
 80102f0:	9a01      	ldr	r2, [sp, #4]
 80102f2:	9903      	ldr	r1, [sp, #12]
 80102f4:	9309      	str	r3, [sp, #36]	; 0x24
 80102f6:	f000 ff3d 	bl	8011174 <strncmp>
 80102fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102fc:	2800      	cmp	r0, #0
 80102fe:	d1d8      	bne.n	80102b2 <__gethex+0x1fc>
 8010300:	461e      	mov	r6, r3
 8010302:	e791      	b.n	8010228 <__gethex+0x172>
 8010304:	1eb9      	subs	r1, r7, #2
 8010306:	4628      	mov	r0, r5
 8010308:	f000 fdb2 	bl	8010e70 <__any_on>
 801030c:	2800      	cmp	r0, #0
 801030e:	d0b2      	beq.n	8010276 <__gethex+0x1c0>
 8010310:	f04f 0a03 	mov.w	sl, #3
 8010314:	e7b1      	b.n	801027a <__gethex+0x1c4>
 8010316:	da09      	bge.n	801032c <__gethex+0x276>
 8010318:	1bf7      	subs	r7, r6, r7
 801031a:	4629      	mov	r1, r5
 801031c:	463a      	mov	r2, r7
 801031e:	9802      	ldr	r0, [sp, #8]
 8010320:	f000 fbc8 	bl	8010ab4 <__lshift>
 8010324:	1be4      	subs	r4, r4, r7
 8010326:	4605      	mov	r5, r0
 8010328:	f100 0914 	add.w	r9, r0, #20
 801032c:	f04f 0a00 	mov.w	sl, #0
 8010330:	e7a8      	b.n	8010284 <__gethex+0x1ce>
 8010332:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010336:	42a0      	cmp	r0, r4
 8010338:	dd6a      	ble.n	8010410 <__gethex+0x35a>
 801033a:	1b04      	subs	r4, r0, r4
 801033c:	42a6      	cmp	r6, r4
 801033e:	dc2e      	bgt.n	801039e <__gethex+0x2e8>
 8010340:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010344:	2b02      	cmp	r3, #2
 8010346:	d022      	beq.n	801038e <__gethex+0x2d8>
 8010348:	2b03      	cmp	r3, #3
 801034a:	d024      	beq.n	8010396 <__gethex+0x2e0>
 801034c:	2b01      	cmp	r3, #1
 801034e:	d115      	bne.n	801037c <__gethex+0x2c6>
 8010350:	42a6      	cmp	r6, r4
 8010352:	d113      	bne.n	801037c <__gethex+0x2c6>
 8010354:	2e01      	cmp	r6, #1
 8010356:	dc0b      	bgt.n	8010370 <__gethex+0x2ba>
 8010358:	9a06      	ldr	r2, [sp, #24]
 801035a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801035e:	6013      	str	r3, [r2, #0]
 8010360:	2301      	movs	r3, #1
 8010362:	612b      	str	r3, [r5, #16]
 8010364:	f8c9 3000 	str.w	r3, [r9]
 8010368:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801036a:	2762      	movs	r7, #98	; 0x62
 801036c:	601d      	str	r5, [r3, #0]
 801036e:	e72a      	b.n	80101c6 <__gethex+0x110>
 8010370:	1e71      	subs	r1, r6, #1
 8010372:	4628      	mov	r0, r5
 8010374:	f000 fd7c 	bl	8010e70 <__any_on>
 8010378:	2800      	cmp	r0, #0
 801037a:	d1ed      	bne.n	8010358 <__gethex+0x2a2>
 801037c:	4629      	mov	r1, r5
 801037e:	9802      	ldr	r0, [sp, #8]
 8010380:	f000 f9cc 	bl	801071c <_Bfree>
 8010384:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010386:	2300      	movs	r3, #0
 8010388:	6013      	str	r3, [r2, #0]
 801038a:	2750      	movs	r7, #80	; 0x50
 801038c:	e71b      	b.n	80101c6 <__gethex+0x110>
 801038e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010390:	2b00      	cmp	r3, #0
 8010392:	d0e1      	beq.n	8010358 <__gethex+0x2a2>
 8010394:	e7f2      	b.n	801037c <__gethex+0x2c6>
 8010396:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010398:	2b00      	cmp	r3, #0
 801039a:	d1dd      	bne.n	8010358 <__gethex+0x2a2>
 801039c:	e7ee      	b.n	801037c <__gethex+0x2c6>
 801039e:	1e67      	subs	r7, r4, #1
 80103a0:	f1ba 0f00 	cmp.w	sl, #0
 80103a4:	d131      	bne.n	801040a <__gethex+0x354>
 80103a6:	b127      	cbz	r7, 80103b2 <__gethex+0x2fc>
 80103a8:	4639      	mov	r1, r7
 80103aa:	4628      	mov	r0, r5
 80103ac:	f000 fd60 	bl	8010e70 <__any_on>
 80103b0:	4682      	mov	sl, r0
 80103b2:	117a      	asrs	r2, r7, #5
 80103b4:	2301      	movs	r3, #1
 80103b6:	f007 071f 	and.w	r7, r7, #31
 80103ba:	fa03 f707 	lsl.w	r7, r3, r7
 80103be:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80103c2:	4621      	mov	r1, r4
 80103c4:	421f      	tst	r7, r3
 80103c6:	4628      	mov	r0, r5
 80103c8:	bf18      	it	ne
 80103ca:	f04a 0a02 	orrne.w	sl, sl, #2
 80103ce:	1b36      	subs	r6, r6, r4
 80103d0:	f7ff fe22 	bl	8010018 <rshift>
 80103d4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80103d8:	2702      	movs	r7, #2
 80103da:	f1ba 0f00 	cmp.w	sl, #0
 80103de:	d048      	beq.n	8010472 <__gethex+0x3bc>
 80103e0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80103e4:	2b02      	cmp	r3, #2
 80103e6:	d015      	beq.n	8010414 <__gethex+0x35e>
 80103e8:	2b03      	cmp	r3, #3
 80103ea:	d017      	beq.n	801041c <__gethex+0x366>
 80103ec:	2b01      	cmp	r3, #1
 80103ee:	d109      	bne.n	8010404 <__gethex+0x34e>
 80103f0:	f01a 0f02 	tst.w	sl, #2
 80103f4:	d006      	beq.n	8010404 <__gethex+0x34e>
 80103f6:	f8d9 3000 	ldr.w	r3, [r9]
 80103fa:	ea4a 0a03 	orr.w	sl, sl, r3
 80103fe:	f01a 0f01 	tst.w	sl, #1
 8010402:	d10e      	bne.n	8010422 <__gethex+0x36c>
 8010404:	f047 0710 	orr.w	r7, r7, #16
 8010408:	e033      	b.n	8010472 <__gethex+0x3bc>
 801040a:	f04f 0a01 	mov.w	sl, #1
 801040e:	e7d0      	b.n	80103b2 <__gethex+0x2fc>
 8010410:	2701      	movs	r7, #1
 8010412:	e7e2      	b.n	80103da <__gethex+0x324>
 8010414:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010416:	f1c3 0301 	rsb	r3, r3, #1
 801041a:	9315      	str	r3, [sp, #84]	; 0x54
 801041c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801041e:	2b00      	cmp	r3, #0
 8010420:	d0f0      	beq.n	8010404 <__gethex+0x34e>
 8010422:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8010426:	f105 0314 	add.w	r3, r5, #20
 801042a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 801042e:	eb03 010a 	add.w	r1, r3, sl
 8010432:	f04f 0c00 	mov.w	ip, #0
 8010436:	4618      	mov	r0, r3
 8010438:	f853 2b04 	ldr.w	r2, [r3], #4
 801043c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010440:	d01c      	beq.n	801047c <__gethex+0x3c6>
 8010442:	3201      	adds	r2, #1
 8010444:	6002      	str	r2, [r0, #0]
 8010446:	2f02      	cmp	r7, #2
 8010448:	f105 0314 	add.w	r3, r5, #20
 801044c:	d138      	bne.n	80104c0 <__gethex+0x40a>
 801044e:	f8d8 2000 	ldr.w	r2, [r8]
 8010452:	3a01      	subs	r2, #1
 8010454:	42b2      	cmp	r2, r6
 8010456:	d10a      	bne.n	801046e <__gethex+0x3b8>
 8010458:	1171      	asrs	r1, r6, #5
 801045a:	2201      	movs	r2, #1
 801045c:	f006 061f 	and.w	r6, r6, #31
 8010460:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010464:	fa02 f606 	lsl.w	r6, r2, r6
 8010468:	421e      	tst	r6, r3
 801046a:	bf18      	it	ne
 801046c:	4617      	movne	r7, r2
 801046e:	f047 0720 	orr.w	r7, r7, #32
 8010472:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010474:	601d      	str	r5, [r3, #0]
 8010476:	9b06      	ldr	r3, [sp, #24]
 8010478:	601c      	str	r4, [r3, #0]
 801047a:	e6a4      	b.n	80101c6 <__gethex+0x110>
 801047c:	4299      	cmp	r1, r3
 801047e:	f843 cc04 	str.w	ip, [r3, #-4]
 8010482:	d8d8      	bhi.n	8010436 <__gethex+0x380>
 8010484:	68ab      	ldr	r3, [r5, #8]
 8010486:	4599      	cmp	r9, r3
 8010488:	db12      	blt.n	80104b0 <__gethex+0x3fa>
 801048a:	6869      	ldr	r1, [r5, #4]
 801048c:	9802      	ldr	r0, [sp, #8]
 801048e:	3101      	adds	r1, #1
 8010490:	f000 f910 	bl	80106b4 <_Balloc>
 8010494:	692a      	ldr	r2, [r5, #16]
 8010496:	3202      	adds	r2, #2
 8010498:	f105 010c 	add.w	r1, r5, #12
 801049c:	4683      	mov	fp, r0
 801049e:	0092      	lsls	r2, r2, #2
 80104a0:	300c      	adds	r0, #12
 80104a2:	f7fd f995 	bl	800d7d0 <memcpy>
 80104a6:	4629      	mov	r1, r5
 80104a8:	9802      	ldr	r0, [sp, #8]
 80104aa:	f000 f937 	bl	801071c <_Bfree>
 80104ae:	465d      	mov	r5, fp
 80104b0:	692b      	ldr	r3, [r5, #16]
 80104b2:	1c5a      	adds	r2, r3, #1
 80104b4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80104b8:	612a      	str	r2, [r5, #16]
 80104ba:	2201      	movs	r2, #1
 80104bc:	615a      	str	r2, [r3, #20]
 80104be:	e7c2      	b.n	8010446 <__gethex+0x390>
 80104c0:	692a      	ldr	r2, [r5, #16]
 80104c2:	454a      	cmp	r2, r9
 80104c4:	dd0b      	ble.n	80104de <__gethex+0x428>
 80104c6:	2101      	movs	r1, #1
 80104c8:	4628      	mov	r0, r5
 80104ca:	f7ff fda5 	bl	8010018 <rshift>
 80104ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80104d2:	3401      	adds	r4, #1
 80104d4:	42a3      	cmp	r3, r4
 80104d6:	f6ff aed9 	blt.w	801028c <__gethex+0x1d6>
 80104da:	2701      	movs	r7, #1
 80104dc:	e7c7      	b.n	801046e <__gethex+0x3b8>
 80104de:	f016 061f 	ands.w	r6, r6, #31
 80104e2:	d0fa      	beq.n	80104da <__gethex+0x424>
 80104e4:	449a      	add	sl, r3
 80104e6:	f1c6 0620 	rsb	r6, r6, #32
 80104ea:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80104ee:	f000 f9a5 	bl	801083c <__hi0bits>
 80104f2:	42b0      	cmp	r0, r6
 80104f4:	dbe7      	blt.n	80104c6 <__gethex+0x410>
 80104f6:	e7f0      	b.n	80104da <__gethex+0x424>

080104f8 <L_shift>:
 80104f8:	f1c2 0208 	rsb	r2, r2, #8
 80104fc:	0092      	lsls	r2, r2, #2
 80104fe:	b570      	push	{r4, r5, r6, lr}
 8010500:	f1c2 0620 	rsb	r6, r2, #32
 8010504:	6843      	ldr	r3, [r0, #4]
 8010506:	6804      	ldr	r4, [r0, #0]
 8010508:	fa03 f506 	lsl.w	r5, r3, r6
 801050c:	432c      	orrs	r4, r5
 801050e:	40d3      	lsrs	r3, r2
 8010510:	6004      	str	r4, [r0, #0]
 8010512:	f840 3f04 	str.w	r3, [r0, #4]!
 8010516:	4288      	cmp	r0, r1
 8010518:	d3f4      	bcc.n	8010504 <L_shift+0xc>
 801051a:	bd70      	pop	{r4, r5, r6, pc}

0801051c <__match>:
 801051c:	b530      	push	{r4, r5, lr}
 801051e:	6803      	ldr	r3, [r0, #0]
 8010520:	3301      	adds	r3, #1
 8010522:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010526:	b914      	cbnz	r4, 801052e <__match+0x12>
 8010528:	6003      	str	r3, [r0, #0]
 801052a:	2001      	movs	r0, #1
 801052c:	bd30      	pop	{r4, r5, pc}
 801052e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010532:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010536:	2d19      	cmp	r5, #25
 8010538:	bf98      	it	ls
 801053a:	3220      	addls	r2, #32
 801053c:	42a2      	cmp	r2, r4
 801053e:	d0f0      	beq.n	8010522 <__match+0x6>
 8010540:	2000      	movs	r0, #0
 8010542:	e7f3      	b.n	801052c <__match+0x10>

08010544 <__hexnan>:
 8010544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010548:	680b      	ldr	r3, [r1, #0]
 801054a:	6801      	ldr	r1, [r0, #0]
 801054c:	115f      	asrs	r7, r3, #5
 801054e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8010552:	f013 031f 	ands.w	r3, r3, #31
 8010556:	b087      	sub	sp, #28
 8010558:	bf18      	it	ne
 801055a:	3704      	addne	r7, #4
 801055c:	2500      	movs	r5, #0
 801055e:	1f3e      	subs	r6, r7, #4
 8010560:	4682      	mov	sl, r0
 8010562:	4690      	mov	r8, r2
 8010564:	9301      	str	r3, [sp, #4]
 8010566:	f847 5c04 	str.w	r5, [r7, #-4]
 801056a:	46b1      	mov	r9, r6
 801056c:	4634      	mov	r4, r6
 801056e:	9502      	str	r5, [sp, #8]
 8010570:	46ab      	mov	fp, r5
 8010572:	784a      	ldrb	r2, [r1, #1]
 8010574:	1c4b      	adds	r3, r1, #1
 8010576:	9303      	str	r3, [sp, #12]
 8010578:	b342      	cbz	r2, 80105cc <__hexnan+0x88>
 801057a:	4610      	mov	r0, r2
 801057c:	9105      	str	r1, [sp, #20]
 801057e:	9204      	str	r2, [sp, #16]
 8010580:	f7ff fd84 	bl	801008c <__hexdig_fun>
 8010584:	2800      	cmp	r0, #0
 8010586:	d143      	bne.n	8010610 <__hexnan+0xcc>
 8010588:	9a04      	ldr	r2, [sp, #16]
 801058a:	9905      	ldr	r1, [sp, #20]
 801058c:	2a20      	cmp	r2, #32
 801058e:	d818      	bhi.n	80105c2 <__hexnan+0x7e>
 8010590:	9b02      	ldr	r3, [sp, #8]
 8010592:	459b      	cmp	fp, r3
 8010594:	dd13      	ble.n	80105be <__hexnan+0x7a>
 8010596:	454c      	cmp	r4, r9
 8010598:	d206      	bcs.n	80105a8 <__hexnan+0x64>
 801059a:	2d07      	cmp	r5, #7
 801059c:	dc04      	bgt.n	80105a8 <__hexnan+0x64>
 801059e:	462a      	mov	r2, r5
 80105a0:	4649      	mov	r1, r9
 80105a2:	4620      	mov	r0, r4
 80105a4:	f7ff ffa8 	bl	80104f8 <L_shift>
 80105a8:	4544      	cmp	r4, r8
 80105aa:	d944      	bls.n	8010636 <__hexnan+0xf2>
 80105ac:	2300      	movs	r3, #0
 80105ae:	f1a4 0904 	sub.w	r9, r4, #4
 80105b2:	f844 3c04 	str.w	r3, [r4, #-4]
 80105b6:	f8cd b008 	str.w	fp, [sp, #8]
 80105ba:	464c      	mov	r4, r9
 80105bc:	461d      	mov	r5, r3
 80105be:	9903      	ldr	r1, [sp, #12]
 80105c0:	e7d7      	b.n	8010572 <__hexnan+0x2e>
 80105c2:	2a29      	cmp	r2, #41	; 0x29
 80105c4:	d14a      	bne.n	801065c <__hexnan+0x118>
 80105c6:	3102      	adds	r1, #2
 80105c8:	f8ca 1000 	str.w	r1, [sl]
 80105cc:	f1bb 0f00 	cmp.w	fp, #0
 80105d0:	d044      	beq.n	801065c <__hexnan+0x118>
 80105d2:	454c      	cmp	r4, r9
 80105d4:	d206      	bcs.n	80105e4 <__hexnan+0xa0>
 80105d6:	2d07      	cmp	r5, #7
 80105d8:	dc04      	bgt.n	80105e4 <__hexnan+0xa0>
 80105da:	462a      	mov	r2, r5
 80105dc:	4649      	mov	r1, r9
 80105de:	4620      	mov	r0, r4
 80105e0:	f7ff ff8a 	bl	80104f8 <L_shift>
 80105e4:	4544      	cmp	r4, r8
 80105e6:	d928      	bls.n	801063a <__hexnan+0xf6>
 80105e8:	4643      	mov	r3, r8
 80105ea:	f854 2b04 	ldr.w	r2, [r4], #4
 80105ee:	f843 2b04 	str.w	r2, [r3], #4
 80105f2:	42a6      	cmp	r6, r4
 80105f4:	d2f9      	bcs.n	80105ea <__hexnan+0xa6>
 80105f6:	2200      	movs	r2, #0
 80105f8:	f843 2b04 	str.w	r2, [r3], #4
 80105fc:	429e      	cmp	r6, r3
 80105fe:	d2fb      	bcs.n	80105f8 <__hexnan+0xb4>
 8010600:	6833      	ldr	r3, [r6, #0]
 8010602:	b91b      	cbnz	r3, 801060c <__hexnan+0xc8>
 8010604:	4546      	cmp	r6, r8
 8010606:	d127      	bne.n	8010658 <__hexnan+0x114>
 8010608:	2301      	movs	r3, #1
 801060a:	6033      	str	r3, [r6, #0]
 801060c:	2005      	movs	r0, #5
 801060e:	e026      	b.n	801065e <__hexnan+0x11a>
 8010610:	3501      	adds	r5, #1
 8010612:	2d08      	cmp	r5, #8
 8010614:	f10b 0b01 	add.w	fp, fp, #1
 8010618:	dd06      	ble.n	8010628 <__hexnan+0xe4>
 801061a:	4544      	cmp	r4, r8
 801061c:	d9cf      	bls.n	80105be <__hexnan+0x7a>
 801061e:	2300      	movs	r3, #0
 8010620:	f844 3c04 	str.w	r3, [r4, #-4]
 8010624:	2501      	movs	r5, #1
 8010626:	3c04      	subs	r4, #4
 8010628:	6822      	ldr	r2, [r4, #0]
 801062a:	f000 000f 	and.w	r0, r0, #15
 801062e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010632:	6020      	str	r0, [r4, #0]
 8010634:	e7c3      	b.n	80105be <__hexnan+0x7a>
 8010636:	2508      	movs	r5, #8
 8010638:	e7c1      	b.n	80105be <__hexnan+0x7a>
 801063a:	9b01      	ldr	r3, [sp, #4]
 801063c:	2b00      	cmp	r3, #0
 801063e:	d0df      	beq.n	8010600 <__hexnan+0xbc>
 8010640:	f04f 32ff 	mov.w	r2, #4294967295
 8010644:	f1c3 0320 	rsb	r3, r3, #32
 8010648:	fa22 f303 	lsr.w	r3, r2, r3
 801064c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8010650:	401a      	ands	r2, r3
 8010652:	f847 2c04 	str.w	r2, [r7, #-4]
 8010656:	e7d3      	b.n	8010600 <__hexnan+0xbc>
 8010658:	3e04      	subs	r6, #4
 801065a:	e7d1      	b.n	8010600 <__hexnan+0xbc>
 801065c:	2004      	movs	r0, #4
 801065e:	b007      	add	sp, #28
 8010660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010664 <__locale_ctype_ptr_l>:
 8010664:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8010668:	4770      	bx	lr

0801066a <__localeconv_l>:
 801066a:	30f0      	adds	r0, #240	; 0xf0
 801066c:	4770      	bx	lr
	...

08010670 <_localeconv_r>:
 8010670:	4b04      	ldr	r3, [pc, #16]	; (8010684 <_localeconv_r+0x14>)
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	6a18      	ldr	r0, [r3, #32]
 8010676:	4b04      	ldr	r3, [pc, #16]	; (8010688 <_localeconv_r+0x18>)
 8010678:	2800      	cmp	r0, #0
 801067a:	bf08      	it	eq
 801067c:	4618      	moveq	r0, r3
 801067e:	30f0      	adds	r0, #240	; 0xf0
 8010680:	4770      	bx	lr
 8010682:	bf00      	nop
 8010684:	2000017c 	.word	0x2000017c
 8010688:	200001e0 	.word	0x200001e0

0801068c <__ascii_mbtowc>:
 801068c:	b082      	sub	sp, #8
 801068e:	b901      	cbnz	r1, 8010692 <__ascii_mbtowc+0x6>
 8010690:	a901      	add	r1, sp, #4
 8010692:	b142      	cbz	r2, 80106a6 <__ascii_mbtowc+0x1a>
 8010694:	b14b      	cbz	r3, 80106aa <__ascii_mbtowc+0x1e>
 8010696:	7813      	ldrb	r3, [r2, #0]
 8010698:	600b      	str	r3, [r1, #0]
 801069a:	7812      	ldrb	r2, [r2, #0]
 801069c:	1c10      	adds	r0, r2, #0
 801069e:	bf18      	it	ne
 80106a0:	2001      	movne	r0, #1
 80106a2:	b002      	add	sp, #8
 80106a4:	4770      	bx	lr
 80106a6:	4610      	mov	r0, r2
 80106a8:	e7fb      	b.n	80106a2 <__ascii_mbtowc+0x16>
 80106aa:	f06f 0001 	mvn.w	r0, #1
 80106ae:	e7f8      	b.n	80106a2 <__ascii_mbtowc+0x16>

080106b0 <__malloc_lock>:
 80106b0:	4770      	bx	lr

080106b2 <__malloc_unlock>:
 80106b2:	4770      	bx	lr

080106b4 <_Balloc>:
 80106b4:	b570      	push	{r4, r5, r6, lr}
 80106b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80106b8:	4604      	mov	r4, r0
 80106ba:	460e      	mov	r6, r1
 80106bc:	b93d      	cbnz	r5, 80106ce <_Balloc+0x1a>
 80106be:	2010      	movs	r0, #16
 80106c0:	f7fd f876 	bl	800d7b0 <malloc>
 80106c4:	6260      	str	r0, [r4, #36]	; 0x24
 80106c6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80106ca:	6005      	str	r5, [r0, #0]
 80106cc:	60c5      	str	r5, [r0, #12]
 80106ce:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80106d0:	68eb      	ldr	r3, [r5, #12]
 80106d2:	b183      	cbz	r3, 80106f6 <_Balloc+0x42>
 80106d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80106d6:	68db      	ldr	r3, [r3, #12]
 80106d8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80106dc:	b9b8      	cbnz	r0, 801070e <_Balloc+0x5a>
 80106de:	2101      	movs	r1, #1
 80106e0:	fa01 f506 	lsl.w	r5, r1, r6
 80106e4:	1d6a      	adds	r2, r5, #5
 80106e6:	0092      	lsls	r2, r2, #2
 80106e8:	4620      	mov	r0, r4
 80106ea:	f000 fbe2 	bl	8010eb2 <_calloc_r>
 80106ee:	b160      	cbz	r0, 801070a <_Balloc+0x56>
 80106f0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80106f4:	e00e      	b.n	8010714 <_Balloc+0x60>
 80106f6:	2221      	movs	r2, #33	; 0x21
 80106f8:	2104      	movs	r1, #4
 80106fa:	4620      	mov	r0, r4
 80106fc:	f000 fbd9 	bl	8010eb2 <_calloc_r>
 8010700:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010702:	60e8      	str	r0, [r5, #12]
 8010704:	68db      	ldr	r3, [r3, #12]
 8010706:	2b00      	cmp	r3, #0
 8010708:	d1e4      	bne.n	80106d4 <_Balloc+0x20>
 801070a:	2000      	movs	r0, #0
 801070c:	bd70      	pop	{r4, r5, r6, pc}
 801070e:	6802      	ldr	r2, [r0, #0]
 8010710:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8010714:	2300      	movs	r3, #0
 8010716:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801071a:	e7f7      	b.n	801070c <_Balloc+0x58>

0801071c <_Bfree>:
 801071c:	b570      	push	{r4, r5, r6, lr}
 801071e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8010720:	4606      	mov	r6, r0
 8010722:	460d      	mov	r5, r1
 8010724:	b93c      	cbnz	r4, 8010736 <_Bfree+0x1a>
 8010726:	2010      	movs	r0, #16
 8010728:	f7fd f842 	bl	800d7b0 <malloc>
 801072c:	6270      	str	r0, [r6, #36]	; 0x24
 801072e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010732:	6004      	str	r4, [r0, #0]
 8010734:	60c4      	str	r4, [r0, #12]
 8010736:	b13d      	cbz	r5, 8010748 <_Bfree+0x2c>
 8010738:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801073a:	686a      	ldr	r2, [r5, #4]
 801073c:	68db      	ldr	r3, [r3, #12]
 801073e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010742:	6029      	str	r1, [r5, #0]
 8010744:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8010748:	bd70      	pop	{r4, r5, r6, pc}

0801074a <__multadd>:
 801074a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801074e:	690d      	ldr	r5, [r1, #16]
 8010750:	461f      	mov	r7, r3
 8010752:	4606      	mov	r6, r0
 8010754:	460c      	mov	r4, r1
 8010756:	f101 0c14 	add.w	ip, r1, #20
 801075a:	2300      	movs	r3, #0
 801075c:	f8dc 0000 	ldr.w	r0, [ip]
 8010760:	b281      	uxth	r1, r0
 8010762:	fb02 7101 	mla	r1, r2, r1, r7
 8010766:	0c0f      	lsrs	r7, r1, #16
 8010768:	0c00      	lsrs	r0, r0, #16
 801076a:	fb02 7000 	mla	r0, r2, r0, r7
 801076e:	b289      	uxth	r1, r1
 8010770:	3301      	adds	r3, #1
 8010772:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8010776:	429d      	cmp	r5, r3
 8010778:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801077c:	f84c 1b04 	str.w	r1, [ip], #4
 8010780:	dcec      	bgt.n	801075c <__multadd+0x12>
 8010782:	b1d7      	cbz	r7, 80107ba <__multadd+0x70>
 8010784:	68a3      	ldr	r3, [r4, #8]
 8010786:	42ab      	cmp	r3, r5
 8010788:	dc12      	bgt.n	80107b0 <__multadd+0x66>
 801078a:	6861      	ldr	r1, [r4, #4]
 801078c:	4630      	mov	r0, r6
 801078e:	3101      	adds	r1, #1
 8010790:	f7ff ff90 	bl	80106b4 <_Balloc>
 8010794:	6922      	ldr	r2, [r4, #16]
 8010796:	3202      	adds	r2, #2
 8010798:	f104 010c 	add.w	r1, r4, #12
 801079c:	4680      	mov	r8, r0
 801079e:	0092      	lsls	r2, r2, #2
 80107a0:	300c      	adds	r0, #12
 80107a2:	f7fd f815 	bl	800d7d0 <memcpy>
 80107a6:	4621      	mov	r1, r4
 80107a8:	4630      	mov	r0, r6
 80107aa:	f7ff ffb7 	bl	801071c <_Bfree>
 80107ae:	4644      	mov	r4, r8
 80107b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80107b4:	3501      	adds	r5, #1
 80107b6:	615f      	str	r7, [r3, #20]
 80107b8:	6125      	str	r5, [r4, #16]
 80107ba:	4620      	mov	r0, r4
 80107bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080107c0 <__s2b>:
 80107c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80107c4:	460c      	mov	r4, r1
 80107c6:	4615      	mov	r5, r2
 80107c8:	461f      	mov	r7, r3
 80107ca:	2209      	movs	r2, #9
 80107cc:	3308      	adds	r3, #8
 80107ce:	4606      	mov	r6, r0
 80107d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80107d4:	2100      	movs	r1, #0
 80107d6:	2201      	movs	r2, #1
 80107d8:	429a      	cmp	r2, r3
 80107da:	db20      	blt.n	801081e <__s2b+0x5e>
 80107dc:	4630      	mov	r0, r6
 80107de:	f7ff ff69 	bl	80106b4 <_Balloc>
 80107e2:	9b08      	ldr	r3, [sp, #32]
 80107e4:	6143      	str	r3, [r0, #20]
 80107e6:	2d09      	cmp	r5, #9
 80107e8:	f04f 0301 	mov.w	r3, #1
 80107ec:	6103      	str	r3, [r0, #16]
 80107ee:	dd19      	ble.n	8010824 <__s2b+0x64>
 80107f0:	f104 0809 	add.w	r8, r4, #9
 80107f4:	46c1      	mov	r9, r8
 80107f6:	442c      	add	r4, r5
 80107f8:	f819 3b01 	ldrb.w	r3, [r9], #1
 80107fc:	4601      	mov	r1, r0
 80107fe:	3b30      	subs	r3, #48	; 0x30
 8010800:	220a      	movs	r2, #10
 8010802:	4630      	mov	r0, r6
 8010804:	f7ff ffa1 	bl	801074a <__multadd>
 8010808:	45a1      	cmp	r9, r4
 801080a:	d1f5      	bne.n	80107f8 <__s2b+0x38>
 801080c:	eb08 0405 	add.w	r4, r8, r5
 8010810:	3c08      	subs	r4, #8
 8010812:	1b2d      	subs	r5, r5, r4
 8010814:	1963      	adds	r3, r4, r5
 8010816:	42bb      	cmp	r3, r7
 8010818:	db07      	blt.n	801082a <__s2b+0x6a>
 801081a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801081e:	0052      	lsls	r2, r2, #1
 8010820:	3101      	adds	r1, #1
 8010822:	e7d9      	b.n	80107d8 <__s2b+0x18>
 8010824:	340a      	adds	r4, #10
 8010826:	2509      	movs	r5, #9
 8010828:	e7f3      	b.n	8010812 <__s2b+0x52>
 801082a:	f814 3b01 	ldrb.w	r3, [r4], #1
 801082e:	4601      	mov	r1, r0
 8010830:	3b30      	subs	r3, #48	; 0x30
 8010832:	220a      	movs	r2, #10
 8010834:	4630      	mov	r0, r6
 8010836:	f7ff ff88 	bl	801074a <__multadd>
 801083a:	e7eb      	b.n	8010814 <__s2b+0x54>

0801083c <__hi0bits>:
 801083c:	0c02      	lsrs	r2, r0, #16
 801083e:	0412      	lsls	r2, r2, #16
 8010840:	4603      	mov	r3, r0
 8010842:	b9b2      	cbnz	r2, 8010872 <__hi0bits+0x36>
 8010844:	0403      	lsls	r3, r0, #16
 8010846:	2010      	movs	r0, #16
 8010848:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801084c:	bf04      	itt	eq
 801084e:	021b      	lsleq	r3, r3, #8
 8010850:	3008      	addeq	r0, #8
 8010852:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8010856:	bf04      	itt	eq
 8010858:	011b      	lsleq	r3, r3, #4
 801085a:	3004      	addeq	r0, #4
 801085c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8010860:	bf04      	itt	eq
 8010862:	009b      	lsleq	r3, r3, #2
 8010864:	3002      	addeq	r0, #2
 8010866:	2b00      	cmp	r3, #0
 8010868:	db06      	blt.n	8010878 <__hi0bits+0x3c>
 801086a:	005b      	lsls	r3, r3, #1
 801086c:	d503      	bpl.n	8010876 <__hi0bits+0x3a>
 801086e:	3001      	adds	r0, #1
 8010870:	4770      	bx	lr
 8010872:	2000      	movs	r0, #0
 8010874:	e7e8      	b.n	8010848 <__hi0bits+0xc>
 8010876:	2020      	movs	r0, #32
 8010878:	4770      	bx	lr

0801087a <__lo0bits>:
 801087a:	6803      	ldr	r3, [r0, #0]
 801087c:	f013 0207 	ands.w	r2, r3, #7
 8010880:	4601      	mov	r1, r0
 8010882:	d00b      	beq.n	801089c <__lo0bits+0x22>
 8010884:	07da      	lsls	r2, r3, #31
 8010886:	d423      	bmi.n	80108d0 <__lo0bits+0x56>
 8010888:	0798      	lsls	r0, r3, #30
 801088a:	bf49      	itett	mi
 801088c:	085b      	lsrmi	r3, r3, #1
 801088e:	089b      	lsrpl	r3, r3, #2
 8010890:	2001      	movmi	r0, #1
 8010892:	600b      	strmi	r3, [r1, #0]
 8010894:	bf5c      	itt	pl
 8010896:	600b      	strpl	r3, [r1, #0]
 8010898:	2002      	movpl	r0, #2
 801089a:	4770      	bx	lr
 801089c:	b298      	uxth	r0, r3
 801089e:	b9a8      	cbnz	r0, 80108cc <__lo0bits+0x52>
 80108a0:	0c1b      	lsrs	r3, r3, #16
 80108a2:	2010      	movs	r0, #16
 80108a4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80108a8:	bf04      	itt	eq
 80108aa:	0a1b      	lsreq	r3, r3, #8
 80108ac:	3008      	addeq	r0, #8
 80108ae:	071a      	lsls	r2, r3, #28
 80108b0:	bf04      	itt	eq
 80108b2:	091b      	lsreq	r3, r3, #4
 80108b4:	3004      	addeq	r0, #4
 80108b6:	079a      	lsls	r2, r3, #30
 80108b8:	bf04      	itt	eq
 80108ba:	089b      	lsreq	r3, r3, #2
 80108bc:	3002      	addeq	r0, #2
 80108be:	07da      	lsls	r2, r3, #31
 80108c0:	d402      	bmi.n	80108c8 <__lo0bits+0x4e>
 80108c2:	085b      	lsrs	r3, r3, #1
 80108c4:	d006      	beq.n	80108d4 <__lo0bits+0x5a>
 80108c6:	3001      	adds	r0, #1
 80108c8:	600b      	str	r3, [r1, #0]
 80108ca:	4770      	bx	lr
 80108cc:	4610      	mov	r0, r2
 80108ce:	e7e9      	b.n	80108a4 <__lo0bits+0x2a>
 80108d0:	2000      	movs	r0, #0
 80108d2:	4770      	bx	lr
 80108d4:	2020      	movs	r0, #32
 80108d6:	4770      	bx	lr

080108d8 <__i2b>:
 80108d8:	b510      	push	{r4, lr}
 80108da:	460c      	mov	r4, r1
 80108dc:	2101      	movs	r1, #1
 80108de:	f7ff fee9 	bl	80106b4 <_Balloc>
 80108e2:	2201      	movs	r2, #1
 80108e4:	6144      	str	r4, [r0, #20]
 80108e6:	6102      	str	r2, [r0, #16]
 80108e8:	bd10      	pop	{r4, pc}

080108ea <__multiply>:
 80108ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108ee:	4614      	mov	r4, r2
 80108f0:	690a      	ldr	r2, [r1, #16]
 80108f2:	6923      	ldr	r3, [r4, #16]
 80108f4:	429a      	cmp	r2, r3
 80108f6:	bfb8      	it	lt
 80108f8:	460b      	movlt	r3, r1
 80108fa:	4688      	mov	r8, r1
 80108fc:	bfbc      	itt	lt
 80108fe:	46a0      	movlt	r8, r4
 8010900:	461c      	movlt	r4, r3
 8010902:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010906:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801090a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801090e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010912:	eb07 0609 	add.w	r6, r7, r9
 8010916:	42b3      	cmp	r3, r6
 8010918:	bfb8      	it	lt
 801091a:	3101      	addlt	r1, #1
 801091c:	f7ff feca 	bl	80106b4 <_Balloc>
 8010920:	f100 0514 	add.w	r5, r0, #20
 8010924:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8010928:	462b      	mov	r3, r5
 801092a:	2200      	movs	r2, #0
 801092c:	4573      	cmp	r3, lr
 801092e:	d316      	bcc.n	801095e <__multiply+0x74>
 8010930:	f104 0214 	add.w	r2, r4, #20
 8010934:	f108 0114 	add.w	r1, r8, #20
 8010938:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801093c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8010940:	9300      	str	r3, [sp, #0]
 8010942:	9b00      	ldr	r3, [sp, #0]
 8010944:	9201      	str	r2, [sp, #4]
 8010946:	4293      	cmp	r3, r2
 8010948:	d80c      	bhi.n	8010964 <__multiply+0x7a>
 801094a:	2e00      	cmp	r6, #0
 801094c:	dd03      	ble.n	8010956 <__multiply+0x6c>
 801094e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8010952:	2b00      	cmp	r3, #0
 8010954:	d05d      	beq.n	8010a12 <__multiply+0x128>
 8010956:	6106      	str	r6, [r0, #16]
 8010958:	b003      	add	sp, #12
 801095a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801095e:	f843 2b04 	str.w	r2, [r3], #4
 8010962:	e7e3      	b.n	801092c <__multiply+0x42>
 8010964:	f8b2 b000 	ldrh.w	fp, [r2]
 8010968:	f1bb 0f00 	cmp.w	fp, #0
 801096c:	d023      	beq.n	80109b6 <__multiply+0xcc>
 801096e:	4689      	mov	r9, r1
 8010970:	46ac      	mov	ip, r5
 8010972:	f04f 0800 	mov.w	r8, #0
 8010976:	f859 4b04 	ldr.w	r4, [r9], #4
 801097a:	f8dc a000 	ldr.w	sl, [ip]
 801097e:	b2a3      	uxth	r3, r4
 8010980:	fa1f fa8a 	uxth.w	sl, sl
 8010984:	fb0b a303 	mla	r3, fp, r3, sl
 8010988:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801098c:	f8dc 4000 	ldr.w	r4, [ip]
 8010990:	4443      	add	r3, r8
 8010992:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8010996:	fb0b 840a 	mla	r4, fp, sl, r8
 801099a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801099e:	46e2      	mov	sl, ip
 80109a0:	b29b      	uxth	r3, r3
 80109a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80109a6:	454f      	cmp	r7, r9
 80109a8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80109ac:	f84a 3b04 	str.w	r3, [sl], #4
 80109b0:	d82b      	bhi.n	8010a0a <__multiply+0x120>
 80109b2:	f8cc 8004 	str.w	r8, [ip, #4]
 80109b6:	9b01      	ldr	r3, [sp, #4]
 80109b8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80109bc:	3204      	adds	r2, #4
 80109be:	f1ba 0f00 	cmp.w	sl, #0
 80109c2:	d020      	beq.n	8010a06 <__multiply+0x11c>
 80109c4:	682b      	ldr	r3, [r5, #0]
 80109c6:	4689      	mov	r9, r1
 80109c8:	46a8      	mov	r8, r5
 80109ca:	f04f 0b00 	mov.w	fp, #0
 80109ce:	f8b9 c000 	ldrh.w	ip, [r9]
 80109d2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80109d6:	fb0a 440c 	mla	r4, sl, ip, r4
 80109da:	445c      	add	r4, fp
 80109dc:	46c4      	mov	ip, r8
 80109de:	b29b      	uxth	r3, r3
 80109e0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80109e4:	f84c 3b04 	str.w	r3, [ip], #4
 80109e8:	f859 3b04 	ldr.w	r3, [r9], #4
 80109ec:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80109f0:	0c1b      	lsrs	r3, r3, #16
 80109f2:	fb0a b303 	mla	r3, sl, r3, fp
 80109f6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80109fa:	454f      	cmp	r7, r9
 80109fc:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8010a00:	d805      	bhi.n	8010a0e <__multiply+0x124>
 8010a02:	f8c8 3004 	str.w	r3, [r8, #4]
 8010a06:	3504      	adds	r5, #4
 8010a08:	e79b      	b.n	8010942 <__multiply+0x58>
 8010a0a:	46d4      	mov	ip, sl
 8010a0c:	e7b3      	b.n	8010976 <__multiply+0x8c>
 8010a0e:	46e0      	mov	r8, ip
 8010a10:	e7dd      	b.n	80109ce <__multiply+0xe4>
 8010a12:	3e01      	subs	r6, #1
 8010a14:	e799      	b.n	801094a <__multiply+0x60>
	...

08010a18 <__pow5mult>:
 8010a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a1c:	4615      	mov	r5, r2
 8010a1e:	f012 0203 	ands.w	r2, r2, #3
 8010a22:	4606      	mov	r6, r0
 8010a24:	460f      	mov	r7, r1
 8010a26:	d007      	beq.n	8010a38 <__pow5mult+0x20>
 8010a28:	3a01      	subs	r2, #1
 8010a2a:	4c21      	ldr	r4, [pc, #132]	; (8010ab0 <__pow5mult+0x98>)
 8010a2c:	2300      	movs	r3, #0
 8010a2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010a32:	f7ff fe8a 	bl	801074a <__multadd>
 8010a36:	4607      	mov	r7, r0
 8010a38:	10ad      	asrs	r5, r5, #2
 8010a3a:	d035      	beq.n	8010aa8 <__pow5mult+0x90>
 8010a3c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010a3e:	b93c      	cbnz	r4, 8010a50 <__pow5mult+0x38>
 8010a40:	2010      	movs	r0, #16
 8010a42:	f7fc feb5 	bl	800d7b0 <malloc>
 8010a46:	6270      	str	r0, [r6, #36]	; 0x24
 8010a48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010a4c:	6004      	str	r4, [r0, #0]
 8010a4e:	60c4      	str	r4, [r0, #12]
 8010a50:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010a54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010a58:	b94c      	cbnz	r4, 8010a6e <__pow5mult+0x56>
 8010a5a:	f240 2171 	movw	r1, #625	; 0x271
 8010a5e:	4630      	mov	r0, r6
 8010a60:	f7ff ff3a 	bl	80108d8 <__i2b>
 8010a64:	2300      	movs	r3, #0
 8010a66:	f8c8 0008 	str.w	r0, [r8, #8]
 8010a6a:	4604      	mov	r4, r0
 8010a6c:	6003      	str	r3, [r0, #0]
 8010a6e:	f04f 0800 	mov.w	r8, #0
 8010a72:	07eb      	lsls	r3, r5, #31
 8010a74:	d50a      	bpl.n	8010a8c <__pow5mult+0x74>
 8010a76:	4639      	mov	r1, r7
 8010a78:	4622      	mov	r2, r4
 8010a7a:	4630      	mov	r0, r6
 8010a7c:	f7ff ff35 	bl	80108ea <__multiply>
 8010a80:	4639      	mov	r1, r7
 8010a82:	4681      	mov	r9, r0
 8010a84:	4630      	mov	r0, r6
 8010a86:	f7ff fe49 	bl	801071c <_Bfree>
 8010a8a:	464f      	mov	r7, r9
 8010a8c:	106d      	asrs	r5, r5, #1
 8010a8e:	d00b      	beq.n	8010aa8 <__pow5mult+0x90>
 8010a90:	6820      	ldr	r0, [r4, #0]
 8010a92:	b938      	cbnz	r0, 8010aa4 <__pow5mult+0x8c>
 8010a94:	4622      	mov	r2, r4
 8010a96:	4621      	mov	r1, r4
 8010a98:	4630      	mov	r0, r6
 8010a9a:	f7ff ff26 	bl	80108ea <__multiply>
 8010a9e:	6020      	str	r0, [r4, #0]
 8010aa0:	f8c0 8000 	str.w	r8, [r0]
 8010aa4:	4604      	mov	r4, r0
 8010aa6:	e7e4      	b.n	8010a72 <__pow5mult+0x5a>
 8010aa8:	4638      	mov	r0, r7
 8010aaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010aae:	bf00      	nop
 8010ab0:	08011a90 	.word	0x08011a90

08010ab4 <__lshift>:
 8010ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ab8:	460c      	mov	r4, r1
 8010aba:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010abe:	6923      	ldr	r3, [r4, #16]
 8010ac0:	6849      	ldr	r1, [r1, #4]
 8010ac2:	eb0a 0903 	add.w	r9, sl, r3
 8010ac6:	68a3      	ldr	r3, [r4, #8]
 8010ac8:	4607      	mov	r7, r0
 8010aca:	4616      	mov	r6, r2
 8010acc:	f109 0501 	add.w	r5, r9, #1
 8010ad0:	42ab      	cmp	r3, r5
 8010ad2:	db32      	blt.n	8010b3a <__lshift+0x86>
 8010ad4:	4638      	mov	r0, r7
 8010ad6:	f7ff fded 	bl	80106b4 <_Balloc>
 8010ada:	2300      	movs	r3, #0
 8010adc:	4680      	mov	r8, r0
 8010ade:	f100 0114 	add.w	r1, r0, #20
 8010ae2:	461a      	mov	r2, r3
 8010ae4:	4553      	cmp	r3, sl
 8010ae6:	db2b      	blt.n	8010b40 <__lshift+0x8c>
 8010ae8:	6920      	ldr	r0, [r4, #16]
 8010aea:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010aee:	f104 0314 	add.w	r3, r4, #20
 8010af2:	f016 021f 	ands.w	r2, r6, #31
 8010af6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010afa:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010afe:	d025      	beq.n	8010b4c <__lshift+0x98>
 8010b00:	f1c2 0e20 	rsb	lr, r2, #32
 8010b04:	2000      	movs	r0, #0
 8010b06:	681e      	ldr	r6, [r3, #0]
 8010b08:	468a      	mov	sl, r1
 8010b0a:	4096      	lsls	r6, r2
 8010b0c:	4330      	orrs	r0, r6
 8010b0e:	f84a 0b04 	str.w	r0, [sl], #4
 8010b12:	f853 0b04 	ldr.w	r0, [r3], #4
 8010b16:	459c      	cmp	ip, r3
 8010b18:	fa20 f00e 	lsr.w	r0, r0, lr
 8010b1c:	d814      	bhi.n	8010b48 <__lshift+0x94>
 8010b1e:	6048      	str	r0, [r1, #4]
 8010b20:	b108      	cbz	r0, 8010b26 <__lshift+0x72>
 8010b22:	f109 0502 	add.w	r5, r9, #2
 8010b26:	3d01      	subs	r5, #1
 8010b28:	4638      	mov	r0, r7
 8010b2a:	f8c8 5010 	str.w	r5, [r8, #16]
 8010b2e:	4621      	mov	r1, r4
 8010b30:	f7ff fdf4 	bl	801071c <_Bfree>
 8010b34:	4640      	mov	r0, r8
 8010b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b3a:	3101      	adds	r1, #1
 8010b3c:	005b      	lsls	r3, r3, #1
 8010b3e:	e7c7      	b.n	8010ad0 <__lshift+0x1c>
 8010b40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8010b44:	3301      	adds	r3, #1
 8010b46:	e7cd      	b.n	8010ae4 <__lshift+0x30>
 8010b48:	4651      	mov	r1, sl
 8010b4a:	e7dc      	b.n	8010b06 <__lshift+0x52>
 8010b4c:	3904      	subs	r1, #4
 8010b4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b52:	f841 2f04 	str.w	r2, [r1, #4]!
 8010b56:	459c      	cmp	ip, r3
 8010b58:	d8f9      	bhi.n	8010b4e <__lshift+0x9a>
 8010b5a:	e7e4      	b.n	8010b26 <__lshift+0x72>

08010b5c <__mcmp>:
 8010b5c:	6903      	ldr	r3, [r0, #16]
 8010b5e:	690a      	ldr	r2, [r1, #16]
 8010b60:	1a9b      	subs	r3, r3, r2
 8010b62:	b530      	push	{r4, r5, lr}
 8010b64:	d10c      	bne.n	8010b80 <__mcmp+0x24>
 8010b66:	0092      	lsls	r2, r2, #2
 8010b68:	3014      	adds	r0, #20
 8010b6a:	3114      	adds	r1, #20
 8010b6c:	1884      	adds	r4, r0, r2
 8010b6e:	4411      	add	r1, r2
 8010b70:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010b74:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010b78:	4295      	cmp	r5, r2
 8010b7a:	d003      	beq.n	8010b84 <__mcmp+0x28>
 8010b7c:	d305      	bcc.n	8010b8a <__mcmp+0x2e>
 8010b7e:	2301      	movs	r3, #1
 8010b80:	4618      	mov	r0, r3
 8010b82:	bd30      	pop	{r4, r5, pc}
 8010b84:	42a0      	cmp	r0, r4
 8010b86:	d3f3      	bcc.n	8010b70 <__mcmp+0x14>
 8010b88:	e7fa      	b.n	8010b80 <__mcmp+0x24>
 8010b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8010b8e:	e7f7      	b.n	8010b80 <__mcmp+0x24>

08010b90 <__mdiff>:
 8010b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b94:	460d      	mov	r5, r1
 8010b96:	4607      	mov	r7, r0
 8010b98:	4611      	mov	r1, r2
 8010b9a:	4628      	mov	r0, r5
 8010b9c:	4614      	mov	r4, r2
 8010b9e:	f7ff ffdd 	bl	8010b5c <__mcmp>
 8010ba2:	1e06      	subs	r6, r0, #0
 8010ba4:	d108      	bne.n	8010bb8 <__mdiff+0x28>
 8010ba6:	4631      	mov	r1, r6
 8010ba8:	4638      	mov	r0, r7
 8010baa:	f7ff fd83 	bl	80106b4 <_Balloc>
 8010bae:	2301      	movs	r3, #1
 8010bb0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8010bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010bb8:	bfa4      	itt	ge
 8010bba:	4623      	movge	r3, r4
 8010bbc:	462c      	movge	r4, r5
 8010bbe:	4638      	mov	r0, r7
 8010bc0:	6861      	ldr	r1, [r4, #4]
 8010bc2:	bfa6      	itte	ge
 8010bc4:	461d      	movge	r5, r3
 8010bc6:	2600      	movge	r6, #0
 8010bc8:	2601      	movlt	r6, #1
 8010bca:	f7ff fd73 	bl	80106b4 <_Balloc>
 8010bce:	692b      	ldr	r3, [r5, #16]
 8010bd0:	60c6      	str	r6, [r0, #12]
 8010bd2:	6926      	ldr	r6, [r4, #16]
 8010bd4:	f105 0914 	add.w	r9, r5, #20
 8010bd8:	f104 0214 	add.w	r2, r4, #20
 8010bdc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8010be0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8010be4:	f100 0514 	add.w	r5, r0, #20
 8010be8:	f04f 0e00 	mov.w	lr, #0
 8010bec:	f852 ab04 	ldr.w	sl, [r2], #4
 8010bf0:	f859 4b04 	ldr.w	r4, [r9], #4
 8010bf4:	fa1e f18a 	uxtah	r1, lr, sl
 8010bf8:	b2a3      	uxth	r3, r4
 8010bfa:	1ac9      	subs	r1, r1, r3
 8010bfc:	0c23      	lsrs	r3, r4, #16
 8010bfe:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8010c02:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8010c06:	b289      	uxth	r1, r1
 8010c08:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8010c0c:	45c8      	cmp	r8, r9
 8010c0e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8010c12:	4694      	mov	ip, r2
 8010c14:	f845 3b04 	str.w	r3, [r5], #4
 8010c18:	d8e8      	bhi.n	8010bec <__mdiff+0x5c>
 8010c1a:	45bc      	cmp	ip, r7
 8010c1c:	d304      	bcc.n	8010c28 <__mdiff+0x98>
 8010c1e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8010c22:	b183      	cbz	r3, 8010c46 <__mdiff+0xb6>
 8010c24:	6106      	str	r6, [r0, #16]
 8010c26:	e7c5      	b.n	8010bb4 <__mdiff+0x24>
 8010c28:	f85c 1b04 	ldr.w	r1, [ip], #4
 8010c2c:	fa1e f381 	uxtah	r3, lr, r1
 8010c30:	141a      	asrs	r2, r3, #16
 8010c32:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010c36:	b29b      	uxth	r3, r3
 8010c38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010c3c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8010c40:	f845 3b04 	str.w	r3, [r5], #4
 8010c44:	e7e9      	b.n	8010c1a <__mdiff+0x8a>
 8010c46:	3e01      	subs	r6, #1
 8010c48:	e7e9      	b.n	8010c1e <__mdiff+0x8e>
	...

08010c4c <__ulp>:
 8010c4c:	4b12      	ldr	r3, [pc, #72]	; (8010c98 <__ulp+0x4c>)
 8010c4e:	ee10 2a90 	vmov	r2, s1
 8010c52:	401a      	ands	r2, r3
 8010c54:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	dd04      	ble.n	8010c66 <__ulp+0x1a>
 8010c5c:	2000      	movs	r0, #0
 8010c5e:	4619      	mov	r1, r3
 8010c60:	ec41 0b10 	vmov	d0, r0, r1
 8010c64:	4770      	bx	lr
 8010c66:	425b      	negs	r3, r3
 8010c68:	151b      	asrs	r3, r3, #20
 8010c6a:	2b13      	cmp	r3, #19
 8010c6c:	f04f 0000 	mov.w	r0, #0
 8010c70:	f04f 0100 	mov.w	r1, #0
 8010c74:	dc04      	bgt.n	8010c80 <__ulp+0x34>
 8010c76:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8010c7a:	fa42 f103 	asr.w	r1, r2, r3
 8010c7e:	e7ef      	b.n	8010c60 <__ulp+0x14>
 8010c80:	3b14      	subs	r3, #20
 8010c82:	2b1e      	cmp	r3, #30
 8010c84:	f04f 0201 	mov.w	r2, #1
 8010c88:	bfda      	itte	le
 8010c8a:	f1c3 031f 	rsble	r3, r3, #31
 8010c8e:	fa02 f303 	lslle.w	r3, r2, r3
 8010c92:	4613      	movgt	r3, r2
 8010c94:	4618      	mov	r0, r3
 8010c96:	e7e3      	b.n	8010c60 <__ulp+0x14>
 8010c98:	7ff00000 	.word	0x7ff00000

08010c9c <__b2d>:
 8010c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c9e:	6905      	ldr	r5, [r0, #16]
 8010ca0:	f100 0714 	add.w	r7, r0, #20
 8010ca4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8010ca8:	1f2e      	subs	r6, r5, #4
 8010caa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8010cae:	4620      	mov	r0, r4
 8010cb0:	f7ff fdc4 	bl	801083c <__hi0bits>
 8010cb4:	f1c0 0320 	rsb	r3, r0, #32
 8010cb8:	280a      	cmp	r0, #10
 8010cba:	600b      	str	r3, [r1, #0]
 8010cbc:	f8df c074 	ldr.w	ip, [pc, #116]	; 8010d34 <__b2d+0x98>
 8010cc0:	dc14      	bgt.n	8010cec <__b2d+0x50>
 8010cc2:	f1c0 0e0b 	rsb	lr, r0, #11
 8010cc6:	fa24 f10e 	lsr.w	r1, r4, lr
 8010cca:	42b7      	cmp	r7, r6
 8010ccc:	ea41 030c 	orr.w	r3, r1, ip
 8010cd0:	bf34      	ite	cc
 8010cd2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010cd6:	2100      	movcs	r1, #0
 8010cd8:	3015      	adds	r0, #21
 8010cda:	fa04 f000 	lsl.w	r0, r4, r0
 8010cde:	fa21 f10e 	lsr.w	r1, r1, lr
 8010ce2:	ea40 0201 	orr.w	r2, r0, r1
 8010ce6:	ec43 2b10 	vmov	d0, r2, r3
 8010cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010cec:	42b7      	cmp	r7, r6
 8010cee:	bf3a      	itte	cc
 8010cf0:	f1a5 0608 	subcc.w	r6, r5, #8
 8010cf4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010cf8:	2100      	movcs	r1, #0
 8010cfa:	380b      	subs	r0, #11
 8010cfc:	d015      	beq.n	8010d2a <__b2d+0x8e>
 8010cfe:	4084      	lsls	r4, r0
 8010d00:	f1c0 0520 	rsb	r5, r0, #32
 8010d04:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8010d08:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8010d0c:	42be      	cmp	r6, r7
 8010d0e:	fa21 fc05 	lsr.w	ip, r1, r5
 8010d12:	ea44 030c 	orr.w	r3, r4, ip
 8010d16:	bf8c      	ite	hi
 8010d18:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8010d1c:	2400      	movls	r4, #0
 8010d1e:	fa01 f000 	lsl.w	r0, r1, r0
 8010d22:	40ec      	lsrs	r4, r5
 8010d24:	ea40 0204 	orr.w	r2, r0, r4
 8010d28:	e7dd      	b.n	8010ce6 <__b2d+0x4a>
 8010d2a:	ea44 030c 	orr.w	r3, r4, ip
 8010d2e:	460a      	mov	r2, r1
 8010d30:	e7d9      	b.n	8010ce6 <__b2d+0x4a>
 8010d32:	bf00      	nop
 8010d34:	3ff00000 	.word	0x3ff00000

08010d38 <__d2b>:
 8010d38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010d3c:	460e      	mov	r6, r1
 8010d3e:	2101      	movs	r1, #1
 8010d40:	ec59 8b10 	vmov	r8, r9, d0
 8010d44:	4615      	mov	r5, r2
 8010d46:	f7ff fcb5 	bl	80106b4 <_Balloc>
 8010d4a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8010d4e:	4607      	mov	r7, r0
 8010d50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010d54:	bb34      	cbnz	r4, 8010da4 <__d2b+0x6c>
 8010d56:	9301      	str	r3, [sp, #4]
 8010d58:	f1b8 0300 	subs.w	r3, r8, #0
 8010d5c:	d027      	beq.n	8010dae <__d2b+0x76>
 8010d5e:	a802      	add	r0, sp, #8
 8010d60:	f840 3d08 	str.w	r3, [r0, #-8]!
 8010d64:	f7ff fd89 	bl	801087a <__lo0bits>
 8010d68:	9900      	ldr	r1, [sp, #0]
 8010d6a:	b1f0      	cbz	r0, 8010daa <__d2b+0x72>
 8010d6c:	9a01      	ldr	r2, [sp, #4]
 8010d6e:	f1c0 0320 	rsb	r3, r0, #32
 8010d72:	fa02 f303 	lsl.w	r3, r2, r3
 8010d76:	430b      	orrs	r3, r1
 8010d78:	40c2      	lsrs	r2, r0
 8010d7a:	617b      	str	r3, [r7, #20]
 8010d7c:	9201      	str	r2, [sp, #4]
 8010d7e:	9b01      	ldr	r3, [sp, #4]
 8010d80:	61bb      	str	r3, [r7, #24]
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	bf14      	ite	ne
 8010d86:	2102      	movne	r1, #2
 8010d88:	2101      	moveq	r1, #1
 8010d8a:	6139      	str	r1, [r7, #16]
 8010d8c:	b1c4      	cbz	r4, 8010dc0 <__d2b+0x88>
 8010d8e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8010d92:	4404      	add	r4, r0
 8010d94:	6034      	str	r4, [r6, #0]
 8010d96:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010d9a:	6028      	str	r0, [r5, #0]
 8010d9c:	4638      	mov	r0, r7
 8010d9e:	b003      	add	sp, #12
 8010da0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010da4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010da8:	e7d5      	b.n	8010d56 <__d2b+0x1e>
 8010daa:	6179      	str	r1, [r7, #20]
 8010dac:	e7e7      	b.n	8010d7e <__d2b+0x46>
 8010dae:	a801      	add	r0, sp, #4
 8010db0:	f7ff fd63 	bl	801087a <__lo0bits>
 8010db4:	9b01      	ldr	r3, [sp, #4]
 8010db6:	617b      	str	r3, [r7, #20]
 8010db8:	2101      	movs	r1, #1
 8010dba:	6139      	str	r1, [r7, #16]
 8010dbc:	3020      	adds	r0, #32
 8010dbe:	e7e5      	b.n	8010d8c <__d2b+0x54>
 8010dc0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8010dc4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010dc8:	6030      	str	r0, [r6, #0]
 8010dca:	6918      	ldr	r0, [r3, #16]
 8010dcc:	f7ff fd36 	bl	801083c <__hi0bits>
 8010dd0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8010dd4:	e7e1      	b.n	8010d9a <__d2b+0x62>

08010dd6 <__ratio>:
 8010dd6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dda:	4688      	mov	r8, r1
 8010ddc:	4669      	mov	r1, sp
 8010dde:	4681      	mov	r9, r0
 8010de0:	f7ff ff5c 	bl	8010c9c <__b2d>
 8010de4:	a901      	add	r1, sp, #4
 8010de6:	4640      	mov	r0, r8
 8010de8:	ec57 6b10 	vmov	r6, r7, d0
 8010dec:	f7ff ff56 	bl	8010c9c <__b2d>
 8010df0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010df4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8010df8:	eba3 0c02 	sub.w	ip, r3, r2
 8010dfc:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010e00:	1a9b      	subs	r3, r3, r2
 8010e02:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8010e06:	ec5b ab10 	vmov	sl, fp, d0
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	bfce      	itee	gt
 8010e0e:	463a      	movgt	r2, r7
 8010e10:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010e14:	465a      	movle	r2, fp
 8010e16:	4659      	mov	r1, fp
 8010e18:	463d      	mov	r5, r7
 8010e1a:	bfd4      	ite	le
 8010e1c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8010e20:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8010e24:	4630      	mov	r0, r6
 8010e26:	ee10 2a10 	vmov	r2, s0
 8010e2a:	460b      	mov	r3, r1
 8010e2c:	4629      	mov	r1, r5
 8010e2e:	f7ef fd0d 	bl	800084c <__aeabi_ddiv>
 8010e32:	ec41 0b10 	vmov	d0, r0, r1
 8010e36:	b003      	add	sp, #12
 8010e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010e3c <__copybits>:
 8010e3c:	3901      	subs	r1, #1
 8010e3e:	b510      	push	{r4, lr}
 8010e40:	1149      	asrs	r1, r1, #5
 8010e42:	6914      	ldr	r4, [r2, #16]
 8010e44:	3101      	adds	r1, #1
 8010e46:	f102 0314 	add.w	r3, r2, #20
 8010e4a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010e4e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010e52:	42a3      	cmp	r3, r4
 8010e54:	4602      	mov	r2, r0
 8010e56:	d303      	bcc.n	8010e60 <__copybits+0x24>
 8010e58:	2300      	movs	r3, #0
 8010e5a:	428a      	cmp	r2, r1
 8010e5c:	d305      	bcc.n	8010e6a <__copybits+0x2e>
 8010e5e:	bd10      	pop	{r4, pc}
 8010e60:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e64:	f840 2b04 	str.w	r2, [r0], #4
 8010e68:	e7f3      	b.n	8010e52 <__copybits+0x16>
 8010e6a:	f842 3b04 	str.w	r3, [r2], #4
 8010e6e:	e7f4      	b.n	8010e5a <__copybits+0x1e>

08010e70 <__any_on>:
 8010e70:	f100 0214 	add.w	r2, r0, #20
 8010e74:	6900      	ldr	r0, [r0, #16]
 8010e76:	114b      	asrs	r3, r1, #5
 8010e78:	4298      	cmp	r0, r3
 8010e7a:	b510      	push	{r4, lr}
 8010e7c:	db11      	blt.n	8010ea2 <__any_on+0x32>
 8010e7e:	dd0a      	ble.n	8010e96 <__any_on+0x26>
 8010e80:	f011 011f 	ands.w	r1, r1, #31
 8010e84:	d007      	beq.n	8010e96 <__any_on+0x26>
 8010e86:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010e8a:	fa24 f001 	lsr.w	r0, r4, r1
 8010e8e:	fa00 f101 	lsl.w	r1, r0, r1
 8010e92:	428c      	cmp	r4, r1
 8010e94:	d10b      	bne.n	8010eae <__any_on+0x3e>
 8010e96:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010e9a:	4293      	cmp	r3, r2
 8010e9c:	d803      	bhi.n	8010ea6 <__any_on+0x36>
 8010e9e:	2000      	movs	r0, #0
 8010ea0:	bd10      	pop	{r4, pc}
 8010ea2:	4603      	mov	r3, r0
 8010ea4:	e7f7      	b.n	8010e96 <__any_on+0x26>
 8010ea6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010eaa:	2900      	cmp	r1, #0
 8010eac:	d0f5      	beq.n	8010e9a <__any_on+0x2a>
 8010eae:	2001      	movs	r0, #1
 8010eb0:	e7f6      	b.n	8010ea0 <__any_on+0x30>

08010eb2 <_calloc_r>:
 8010eb2:	b538      	push	{r3, r4, r5, lr}
 8010eb4:	fb02 f401 	mul.w	r4, r2, r1
 8010eb8:	4621      	mov	r1, r4
 8010eba:	f7fc fceb 	bl	800d894 <_malloc_r>
 8010ebe:	4605      	mov	r5, r0
 8010ec0:	b118      	cbz	r0, 8010eca <_calloc_r+0x18>
 8010ec2:	4622      	mov	r2, r4
 8010ec4:	2100      	movs	r1, #0
 8010ec6:	f7fc fc8e 	bl	800d7e6 <memset>
 8010eca:	4628      	mov	r0, r5
 8010ecc:	bd38      	pop	{r3, r4, r5, pc}

08010ece <__ssputs_r>:
 8010ece:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ed2:	688e      	ldr	r6, [r1, #8]
 8010ed4:	429e      	cmp	r6, r3
 8010ed6:	4682      	mov	sl, r0
 8010ed8:	460c      	mov	r4, r1
 8010eda:	4690      	mov	r8, r2
 8010edc:	4699      	mov	r9, r3
 8010ede:	d837      	bhi.n	8010f50 <__ssputs_r+0x82>
 8010ee0:	898a      	ldrh	r2, [r1, #12]
 8010ee2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010ee6:	d031      	beq.n	8010f4c <__ssputs_r+0x7e>
 8010ee8:	6825      	ldr	r5, [r4, #0]
 8010eea:	6909      	ldr	r1, [r1, #16]
 8010eec:	1a6f      	subs	r7, r5, r1
 8010eee:	6965      	ldr	r5, [r4, #20]
 8010ef0:	2302      	movs	r3, #2
 8010ef2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010ef6:	fb95 f5f3 	sdiv	r5, r5, r3
 8010efa:	f109 0301 	add.w	r3, r9, #1
 8010efe:	443b      	add	r3, r7
 8010f00:	429d      	cmp	r5, r3
 8010f02:	bf38      	it	cc
 8010f04:	461d      	movcc	r5, r3
 8010f06:	0553      	lsls	r3, r2, #21
 8010f08:	d530      	bpl.n	8010f6c <__ssputs_r+0x9e>
 8010f0a:	4629      	mov	r1, r5
 8010f0c:	f7fc fcc2 	bl	800d894 <_malloc_r>
 8010f10:	4606      	mov	r6, r0
 8010f12:	b950      	cbnz	r0, 8010f2a <__ssputs_r+0x5c>
 8010f14:	230c      	movs	r3, #12
 8010f16:	f8ca 3000 	str.w	r3, [sl]
 8010f1a:	89a3      	ldrh	r3, [r4, #12]
 8010f1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010f20:	81a3      	strh	r3, [r4, #12]
 8010f22:	f04f 30ff 	mov.w	r0, #4294967295
 8010f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f2a:	463a      	mov	r2, r7
 8010f2c:	6921      	ldr	r1, [r4, #16]
 8010f2e:	f7fc fc4f 	bl	800d7d0 <memcpy>
 8010f32:	89a3      	ldrh	r3, [r4, #12]
 8010f34:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010f38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010f3c:	81a3      	strh	r3, [r4, #12]
 8010f3e:	6126      	str	r6, [r4, #16]
 8010f40:	6165      	str	r5, [r4, #20]
 8010f42:	443e      	add	r6, r7
 8010f44:	1bed      	subs	r5, r5, r7
 8010f46:	6026      	str	r6, [r4, #0]
 8010f48:	60a5      	str	r5, [r4, #8]
 8010f4a:	464e      	mov	r6, r9
 8010f4c:	454e      	cmp	r6, r9
 8010f4e:	d900      	bls.n	8010f52 <__ssputs_r+0x84>
 8010f50:	464e      	mov	r6, r9
 8010f52:	4632      	mov	r2, r6
 8010f54:	4641      	mov	r1, r8
 8010f56:	6820      	ldr	r0, [r4, #0]
 8010f58:	f000 f92b 	bl	80111b2 <memmove>
 8010f5c:	68a3      	ldr	r3, [r4, #8]
 8010f5e:	1b9b      	subs	r3, r3, r6
 8010f60:	60a3      	str	r3, [r4, #8]
 8010f62:	6823      	ldr	r3, [r4, #0]
 8010f64:	441e      	add	r6, r3
 8010f66:	6026      	str	r6, [r4, #0]
 8010f68:	2000      	movs	r0, #0
 8010f6a:	e7dc      	b.n	8010f26 <__ssputs_r+0x58>
 8010f6c:	462a      	mov	r2, r5
 8010f6e:	f000 f939 	bl	80111e4 <_realloc_r>
 8010f72:	4606      	mov	r6, r0
 8010f74:	2800      	cmp	r0, #0
 8010f76:	d1e2      	bne.n	8010f3e <__ssputs_r+0x70>
 8010f78:	6921      	ldr	r1, [r4, #16]
 8010f7a:	4650      	mov	r0, sl
 8010f7c:	f7fc fc3c 	bl	800d7f8 <_free_r>
 8010f80:	e7c8      	b.n	8010f14 <__ssputs_r+0x46>
	...

08010f84 <_svfiprintf_r>:
 8010f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f88:	461d      	mov	r5, r3
 8010f8a:	898b      	ldrh	r3, [r1, #12]
 8010f8c:	061f      	lsls	r7, r3, #24
 8010f8e:	b09d      	sub	sp, #116	; 0x74
 8010f90:	4680      	mov	r8, r0
 8010f92:	460c      	mov	r4, r1
 8010f94:	4616      	mov	r6, r2
 8010f96:	d50f      	bpl.n	8010fb8 <_svfiprintf_r+0x34>
 8010f98:	690b      	ldr	r3, [r1, #16]
 8010f9a:	b96b      	cbnz	r3, 8010fb8 <_svfiprintf_r+0x34>
 8010f9c:	2140      	movs	r1, #64	; 0x40
 8010f9e:	f7fc fc79 	bl	800d894 <_malloc_r>
 8010fa2:	6020      	str	r0, [r4, #0]
 8010fa4:	6120      	str	r0, [r4, #16]
 8010fa6:	b928      	cbnz	r0, 8010fb4 <_svfiprintf_r+0x30>
 8010fa8:	230c      	movs	r3, #12
 8010faa:	f8c8 3000 	str.w	r3, [r8]
 8010fae:	f04f 30ff 	mov.w	r0, #4294967295
 8010fb2:	e0c8      	b.n	8011146 <_svfiprintf_r+0x1c2>
 8010fb4:	2340      	movs	r3, #64	; 0x40
 8010fb6:	6163      	str	r3, [r4, #20]
 8010fb8:	2300      	movs	r3, #0
 8010fba:	9309      	str	r3, [sp, #36]	; 0x24
 8010fbc:	2320      	movs	r3, #32
 8010fbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010fc2:	2330      	movs	r3, #48	; 0x30
 8010fc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010fc8:	9503      	str	r5, [sp, #12]
 8010fca:	f04f 0b01 	mov.w	fp, #1
 8010fce:	4637      	mov	r7, r6
 8010fd0:	463d      	mov	r5, r7
 8010fd2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010fd6:	b10b      	cbz	r3, 8010fdc <_svfiprintf_r+0x58>
 8010fd8:	2b25      	cmp	r3, #37	; 0x25
 8010fda:	d13e      	bne.n	801105a <_svfiprintf_r+0xd6>
 8010fdc:	ebb7 0a06 	subs.w	sl, r7, r6
 8010fe0:	d00b      	beq.n	8010ffa <_svfiprintf_r+0x76>
 8010fe2:	4653      	mov	r3, sl
 8010fe4:	4632      	mov	r2, r6
 8010fe6:	4621      	mov	r1, r4
 8010fe8:	4640      	mov	r0, r8
 8010fea:	f7ff ff70 	bl	8010ece <__ssputs_r>
 8010fee:	3001      	adds	r0, #1
 8010ff0:	f000 80a4 	beq.w	801113c <_svfiprintf_r+0x1b8>
 8010ff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ff6:	4453      	add	r3, sl
 8010ff8:	9309      	str	r3, [sp, #36]	; 0x24
 8010ffa:	783b      	ldrb	r3, [r7, #0]
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	f000 809d 	beq.w	801113c <_svfiprintf_r+0x1b8>
 8011002:	2300      	movs	r3, #0
 8011004:	f04f 32ff 	mov.w	r2, #4294967295
 8011008:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801100c:	9304      	str	r3, [sp, #16]
 801100e:	9307      	str	r3, [sp, #28]
 8011010:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011014:	931a      	str	r3, [sp, #104]	; 0x68
 8011016:	462f      	mov	r7, r5
 8011018:	2205      	movs	r2, #5
 801101a:	f817 1b01 	ldrb.w	r1, [r7], #1
 801101e:	4850      	ldr	r0, [pc, #320]	; (8011160 <_svfiprintf_r+0x1dc>)
 8011020:	f7ef f8de 	bl	80001e0 <memchr>
 8011024:	9b04      	ldr	r3, [sp, #16]
 8011026:	b9d0      	cbnz	r0, 801105e <_svfiprintf_r+0xda>
 8011028:	06d9      	lsls	r1, r3, #27
 801102a:	bf44      	itt	mi
 801102c:	2220      	movmi	r2, #32
 801102e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011032:	071a      	lsls	r2, r3, #28
 8011034:	bf44      	itt	mi
 8011036:	222b      	movmi	r2, #43	; 0x2b
 8011038:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801103c:	782a      	ldrb	r2, [r5, #0]
 801103e:	2a2a      	cmp	r2, #42	; 0x2a
 8011040:	d015      	beq.n	801106e <_svfiprintf_r+0xea>
 8011042:	9a07      	ldr	r2, [sp, #28]
 8011044:	462f      	mov	r7, r5
 8011046:	2000      	movs	r0, #0
 8011048:	250a      	movs	r5, #10
 801104a:	4639      	mov	r1, r7
 801104c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011050:	3b30      	subs	r3, #48	; 0x30
 8011052:	2b09      	cmp	r3, #9
 8011054:	d94d      	bls.n	80110f2 <_svfiprintf_r+0x16e>
 8011056:	b1b8      	cbz	r0, 8011088 <_svfiprintf_r+0x104>
 8011058:	e00f      	b.n	801107a <_svfiprintf_r+0xf6>
 801105a:	462f      	mov	r7, r5
 801105c:	e7b8      	b.n	8010fd0 <_svfiprintf_r+0x4c>
 801105e:	4a40      	ldr	r2, [pc, #256]	; (8011160 <_svfiprintf_r+0x1dc>)
 8011060:	1a80      	subs	r0, r0, r2
 8011062:	fa0b f000 	lsl.w	r0, fp, r0
 8011066:	4318      	orrs	r0, r3
 8011068:	9004      	str	r0, [sp, #16]
 801106a:	463d      	mov	r5, r7
 801106c:	e7d3      	b.n	8011016 <_svfiprintf_r+0x92>
 801106e:	9a03      	ldr	r2, [sp, #12]
 8011070:	1d11      	adds	r1, r2, #4
 8011072:	6812      	ldr	r2, [r2, #0]
 8011074:	9103      	str	r1, [sp, #12]
 8011076:	2a00      	cmp	r2, #0
 8011078:	db01      	blt.n	801107e <_svfiprintf_r+0xfa>
 801107a:	9207      	str	r2, [sp, #28]
 801107c:	e004      	b.n	8011088 <_svfiprintf_r+0x104>
 801107e:	4252      	negs	r2, r2
 8011080:	f043 0302 	orr.w	r3, r3, #2
 8011084:	9207      	str	r2, [sp, #28]
 8011086:	9304      	str	r3, [sp, #16]
 8011088:	783b      	ldrb	r3, [r7, #0]
 801108a:	2b2e      	cmp	r3, #46	; 0x2e
 801108c:	d10c      	bne.n	80110a8 <_svfiprintf_r+0x124>
 801108e:	787b      	ldrb	r3, [r7, #1]
 8011090:	2b2a      	cmp	r3, #42	; 0x2a
 8011092:	d133      	bne.n	80110fc <_svfiprintf_r+0x178>
 8011094:	9b03      	ldr	r3, [sp, #12]
 8011096:	1d1a      	adds	r2, r3, #4
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	9203      	str	r2, [sp, #12]
 801109c:	2b00      	cmp	r3, #0
 801109e:	bfb8      	it	lt
 80110a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80110a4:	3702      	adds	r7, #2
 80110a6:	9305      	str	r3, [sp, #20]
 80110a8:	4d2e      	ldr	r5, [pc, #184]	; (8011164 <_svfiprintf_r+0x1e0>)
 80110aa:	7839      	ldrb	r1, [r7, #0]
 80110ac:	2203      	movs	r2, #3
 80110ae:	4628      	mov	r0, r5
 80110b0:	f7ef f896 	bl	80001e0 <memchr>
 80110b4:	b138      	cbz	r0, 80110c6 <_svfiprintf_r+0x142>
 80110b6:	2340      	movs	r3, #64	; 0x40
 80110b8:	1b40      	subs	r0, r0, r5
 80110ba:	fa03 f000 	lsl.w	r0, r3, r0
 80110be:	9b04      	ldr	r3, [sp, #16]
 80110c0:	4303      	orrs	r3, r0
 80110c2:	3701      	adds	r7, #1
 80110c4:	9304      	str	r3, [sp, #16]
 80110c6:	7839      	ldrb	r1, [r7, #0]
 80110c8:	4827      	ldr	r0, [pc, #156]	; (8011168 <_svfiprintf_r+0x1e4>)
 80110ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80110ce:	2206      	movs	r2, #6
 80110d0:	1c7e      	adds	r6, r7, #1
 80110d2:	f7ef f885 	bl	80001e0 <memchr>
 80110d6:	2800      	cmp	r0, #0
 80110d8:	d038      	beq.n	801114c <_svfiprintf_r+0x1c8>
 80110da:	4b24      	ldr	r3, [pc, #144]	; (801116c <_svfiprintf_r+0x1e8>)
 80110dc:	bb13      	cbnz	r3, 8011124 <_svfiprintf_r+0x1a0>
 80110de:	9b03      	ldr	r3, [sp, #12]
 80110e0:	3307      	adds	r3, #7
 80110e2:	f023 0307 	bic.w	r3, r3, #7
 80110e6:	3308      	adds	r3, #8
 80110e8:	9303      	str	r3, [sp, #12]
 80110ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80110ec:	444b      	add	r3, r9
 80110ee:	9309      	str	r3, [sp, #36]	; 0x24
 80110f0:	e76d      	b.n	8010fce <_svfiprintf_r+0x4a>
 80110f2:	fb05 3202 	mla	r2, r5, r2, r3
 80110f6:	2001      	movs	r0, #1
 80110f8:	460f      	mov	r7, r1
 80110fa:	e7a6      	b.n	801104a <_svfiprintf_r+0xc6>
 80110fc:	2300      	movs	r3, #0
 80110fe:	3701      	adds	r7, #1
 8011100:	9305      	str	r3, [sp, #20]
 8011102:	4619      	mov	r1, r3
 8011104:	250a      	movs	r5, #10
 8011106:	4638      	mov	r0, r7
 8011108:	f810 2b01 	ldrb.w	r2, [r0], #1
 801110c:	3a30      	subs	r2, #48	; 0x30
 801110e:	2a09      	cmp	r2, #9
 8011110:	d903      	bls.n	801111a <_svfiprintf_r+0x196>
 8011112:	2b00      	cmp	r3, #0
 8011114:	d0c8      	beq.n	80110a8 <_svfiprintf_r+0x124>
 8011116:	9105      	str	r1, [sp, #20]
 8011118:	e7c6      	b.n	80110a8 <_svfiprintf_r+0x124>
 801111a:	fb05 2101 	mla	r1, r5, r1, r2
 801111e:	2301      	movs	r3, #1
 8011120:	4607      	mov	r7, r0
 8011122:	e7f0      	b.n	8011106 <_svfiprintf_r+0x182>
 8011124:	ab03      	add	r3, sp, #12
 8011126:	9300      	str	r3, [sp, #0]
 8011128:	4622      	mov	r2, r4
 801112a:	4b11      	ldr	r3, [pc, #68]	; (8011170 <_svfiprintf_r+0x1ec>)
 801112c:	a904      	add	r1, sp, #16
 801112e:	4640      	mov	r0, r8
 8011130:	f7fc fc9e 	bl	800da70 <_printf_float>
 8011134:	f1b0 3fff 	cmp.w	r0, #4294967295
 8011138:	4681      	mov	r9, r0
 801113a:	d1d6      	bne.n	80110ea <_svfiprintf_r+0x166>
 801113c:	89a3      	ldrh	r3, [r4, #12]
 801113e:	065b      	lsls	r3, r3, #25
 8011140:	f53f af35 	bmi.w	8010fae <_svfiprintf_r+0x2a>
 8011144:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011146:	b01d      	add	sp, #116	; 0x74
 8011148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801114c:	ab03      	add	r3, sp, #12
 801114e:	9300      	str	r3, [sp, #0]
 8011150:	4622      	mov	r2, r4
 8011152:	4b07      	ldr	r3, [pc, #28]	; (8011170 <_svfiprintf_r+0x1ec>)
 8011154:	a904      	add	r1, sp, #16
 8011156:	4640      	mov	r0, r8
 8011158:	f7fc ff40 	bl	800dfdc <_printf_i>
 801115c:	e7ea      	b.n	8011134 <_svfiprintf_r+0x1b0>
 801115e:	bf00      	nop
 8011160:	08011a9c 	.word	0x08011a9c
 8011164:	08011aa2 	.word	0x08011aa2
 8011168:	08011aa6 	.word	0x08011aa6
 801116c:	0800da71 	.word	0x0800da71
 8011170:	08010ecf 	.word	0x08010ecf

08011174 <strncmp>:
 8011174:	b510      	push	{r4, lr}
 8011176:	b16a      	cbz	r2, 8011194 <strncmp+0x20>
 8011178:	3901      	subs	r1, #1
 801117a:	1884      	adds	r4, r0, r2
 801117c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8011180:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8011184:	4293      	cmp	r3, r2
 8011186:	d103      	bne.n	8011190 <strncmp+0x1c>
 8011188:	42a0      	cmp	r0, r4
 801118a:	d001      	beq.n	8011190 <strncmp+0x1c>
 801118c:	2b00      	cmp	r3, #0
 801118e:	d1f5      	bne.n	801117c <strncmp+0x8>
 8011190:	1a98      	subs	r0, r3, r2
 8011192:	bd10      	pop	{r4, pc}
 8011194:	4610      	mov	r0, r2
 8011196:	e7fc      	b.n	8011192 <strncmp+0x1e>

08011198 <__ascii_wctomb>:
 8011198:	b149      	cbz	r1, 80111ae <__ascii_wctomb+0x16>
 801119a:	2aff      	cmp	r2, #255	; 0xff
 801119c:	bf85      	ittet	hi
 801119e:	238a      	movhi	r3, #138	; 0x8a
 80111a0:	6003      	strhi	r3, [r0, #0]
 80111a2:	700a      	strbls	r2, [r1, #0]
 80111a4:	f04f 30ff 	movhi.w	r0, #4294967295
 80111a8:	bf98      	it	ls
 80111aa:	2001      	movls	r0, #1
 80111ac:	4770      	bx	lr
 80111ae:	4608      	mov	r0, r1
 80111b0:	4770      	bx	lr

080111b2 <memmove>:
 80111b2:	4288      	cmp	r0, r1
 80111b4:	b510      	push	{r4, lr}
 80111b6:	eb01 0302 	add.w	r3, r1, r2
 80111ba:	d807      	bhi.n	80111cc <memmove+0x1a>
 80111bc:	1e42      	subs	r2, r0, #1
 80111be:	4299      	cmp	r1, r3
 80111c0:	d00a      	beq.n	80111d8 <memmove+0x26>
 80111c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80111c6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80111ca:	e7f8      	b.n	80111be <memmove+0xc>
 80111cc:	4283      	cmp	r3, r0
 80111ce:	d9f5      	bls.n	80111bc <memmove+0xa>
 80111d0:	1881      	adds	r1, r0, r2
 80111d2:	1ad2      	subs	r2, r2, r3
 80111d4:	42d3      	cmn	r3, r2
 80111d6:	d100      	bne.n	80111da <memmove+0x28>
 80111d8:	bd10      	pop	{r4, pc}
 80111da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80111de:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80111e2:	e7f7      	b.n	80111d4 <memmove+0x22>

080111e4 <_realloc_r>:
 80111e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111e6:	4607      	mov	r7, r0
 80111e8:	4614      	mov	r4, r2
 80111ea:	460e      	mov	r6, r1
 80111ec:	b921      	cbnz	r1, 80111f8 <_realloc_r+0x14>
 80111ee:	4611      	mov	r1, r2
 80111f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80111f4:	f7fc bb4e 	b.w	800d894 <_malloc_r>
 80111f8:	b922      	cbnz	r2, 8011204 <_realloc_r+0x20>
 80111fa:	f7fc fafd 	bl	800d7f8 <_free_r>
 80111fe:	4625      	mov	r5, r4
 8011200:	4628      	mov	r0, r5
 8011202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011204:	f000 f814 	bl	8011230 <_malloc_usable_size_r>
 8011208:	42a0      	cmp	r0, r4
 801120a:	d20f      	bcs.n	801122c <_realloc_r+0x48>
 801120c:	4621      	mov	r1, r4
 801120e:	4638      	mov	r0, r7
 8011210:	f7fc fb40 	bl	800d894 <_malloc_r>
 8011214:	4605      	mov	r5, r0
 8011216:	2800      	cmp	r0, #0
 8011218:	d0f2      	beq.n	8011200 <_realloc_r+0x1c>
 801121a:	4631      	mov	r1, r6
 801121c:	4622      	mov	r2, r4
 801121e:	f7fc fad7 	bl	800d7d0 <memcpy>
 8011222:	4631      	mov	r1, r6
 8011224:	4638      	mov	r0, r7
 8011226:	f7fc fae7 	bl	800d7f8 <_free_r>
 801122a:	e7e9      	b.n	8011200 <_realloc_r+0x1c>
 801122c:	4635      	mov	r5, r6
 801122e:	e7e7      	b.n	8011200 <_realloc_r+0x1c>

08011230 <_malloc_usable_size_r>:
 8011230:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011234:	1f18      	subs	r0, r3, #4
 8011236:	2b00      	cmp	r3, #0
 8011238:	bfbc      	itt	lt
 801123a:	580b      	ldrlt	r3, [r1, r0]
 801123c:	18c0      	addlt	r0, r0, r3
 801123e:	4770      	bx	lr

08011240 <_sbrk>:
 8011240:	4b04      	ldr	r3, [pc, #16]	; (8011254 <_sbrk+0x14>)
 8011242:	6819      	ldr	r1, [r3, #0]
 8011244:	4602      	mov	r2, r0
 8011246:	b909      	cbnz	r1, 801124c <_sbrk+0xc>
 8011248:	4903      	ldr	r1, [pc, #12]	; (8011258 <_sbrk+0x18>)
 801124a:	6019      	str	r1, [r3, #0]
 801124c:	6818      	ldr	r0, [r3, #0]
 801124e:	4402      	add	r2, r0
 8011250:	601a      	str	r2, [r3, #0]
 8011252:	4770      	bx	lr
 8011254:	20000990 	.word	0x20000990
 8011258:	20002c68 	.word	0x20002c68

0801125c <_init>:
 801125c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801125e:	bf00      	nop
 8011260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011262:	bc08      	pop	{r3}
 8011264:	469e      	mov	lr, r3
 8011266:	4770      	bx	lr

08011268 <_fini>:
 8011268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801126a:	bf00      	nop
 801126c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801126e:	bc08      	pop	{r3}
 8011270:	469e      	mov	lr, r3
 8011272:	4770      	bx	lr
