
Satellite2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000116e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a78  08011878  08011878  00021878  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080122f0  080122f0  00030354  2**0
                  CONTENTS
  4 .ARM          00000008  080122f0  080122f0  000222f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080122f8  080122f8  00030354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080122f8  080122f8  000222f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080122fc  080122fc  000222fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  08012300  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000291c  20000354  08012654  00030354  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002c70  08012654  00032c70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030354  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002923e  00000000  00000000  00030384  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005007  00000000  00000000  000595c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001f00  00000000  00000000  0005e5d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001cd8  00000000  00000000  000604d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00007916  00000000  00000000  000621a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001dfd1  00000000  00000000  00069abe  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d443d  00000000  00000000  00087a8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015becc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008fa4  00000000  00000000  0015bf48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000354 	.word	0x20000354
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801185c 	.word	0x0801185c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000358 	.word	0x20000358
 80001cc:	0801185c 	.word	0x0801185c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <println>:
static inline void print(char* str)
{
	while (CDC_Transmit_FS((uint8_t*) str, strlen(str)) == USBD_BUSY);
};
static inline void println(char* str)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	printLen = strlen(str);
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f7ff f91d 	bl	80001d0 <strlen>
 8000f96:	4602      	mov	r2, r0
 8000f98:	4b1a      	ldr	r3, [pc, #104]	; (8001004 <println+0x7c>)
 8000f9a:	601a      	str	r2, [r3, #0]
	uint8_t i;
	for (i = 0; i < printLen; i++)
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	73fb      	strb	r3, [r7, #15]
 8000fa0:	e009      	b.n	8000fb6 <println+0x2e>
	{
		printBuffer[i] = str[i];
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	441a      	add	r2, r3
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
 8000faa:	7811      	ldrb	r1, [r2, #0]
 8000fac:	4a16      	ldr	r2, [pc, #88]	; (8001008 <println+0x80>)
 8000fae:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < printLen; i++)
 8000fb0:	7bfb      	ldrb	r3, [r7, #15]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	73fb      	strb	r3, [r7, #15]
 8000fb6:	7bfa      	ldrb	r2, [r7, #15]
 8000fb8:	4b12      	ldr	r3, [pc, #72]	; (8001004 <println+0x7c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d3f0      	bcc.n	8000fa2 <println+0x1a>
	}
	printBuffer[printLen] = '\n';
 8000fc0:	4b10      	ldr	r3, [pc, #64]	; (8001004 <println+0x7c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a10      	ldr	r2, [pc, #64]	; (8001008 <println+0x80>)
 8000fc6:	210a      	movs	r1, #10
 8000fc8:	54d1      	strb	r1, [r2, r3]
	printBuffer[printLen + 1] = '\r';
 8000fca:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <println+0x7c>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	4a0d      	ldr	r2, [pc, #52]	; (8001008 <println+0x80>)
 8000fd2:	210d      	movs	r1, #13
 8000fd4:	54d1      	strb	r1, [r2, r3]
	printBuffer[printLen + 2] = '\0';
 8000fd6:	4b0b      	ldr	r3, [pc, #44]	; (8001004 <println+0x7c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	3302      	adds	r3, #2
 8000fdc:	4a0a      	ldr	r2, [pc, #40]	; (8001008 <println+0x80>)
 8000fde:	2100      	movs	r1, #0
 8000fe0:	54d1      	strb	r1, [r2, r3]
 	while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen + 3) == USBD_BUSY);
 8000fe2:	bf00      	nop
 8000fe4:	4b07      	ldr	r3, [pc, #28]	; (8001004 <println+0x7c>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	3303      	adds	r3, #3
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4805      	ldr	r0, [pc, #20]	; (8001008 <println+0x80>)
 8000ff2:	f00c fa85 	bl	800d500 <CDC_Transmit_FS>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d0f3      	beq.n	8000fe4 <println+0x5c>
};
 8000ffc:	bf00      	nop
 8000ffe:	3710      	adds	r7, #16
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000370 	.word	0x20000370
 8001008:	20000374 	.word	0x20000374

0800100c <printv>:
static inline void printv(char* str, uint32_t len)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
	while (CDC_Transmit_FS((uint8_t*) str, len) == USBD_BUSY);
 8001016:	bf00      	nop
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	b29b      	uxth	r3, r3
 800101c:	4619      	mov	r1, r3
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f00c fa6e 	bl	800d500 <CDC_Transmit_FS>
 8001024:	4603      	mov	r3, r0
 8001026:	2b01      	cmp	r3, #1
 8001028:	d0f6      	beq.n	8001018 <printv+0xc>
}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <SX1278_write>:
//#### SPI communication with SX1278 ####
uint64_t frf = 0;
uint8_t frf_bytes[8] = {0};

void SX1278_write(SPI_HandleTypeDef* spi, uint8_t data)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
 800103a:	460b      	mov	r3, r1
 800103c:	70fb      	strb	r3, [r7, #3]
	// writes byte [data] on SPI bus
	HAL_SPI_Transmit(spi, &data, 1, 1000);
 800103e:	1cf9      	adds	r1, r7, #3
 8001040:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001044:	2201      	movs	r2, #1
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f006 fc6e 	bl	8007928 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(spi) != HAL_SPI_STATE_READY);
 800104c:	bf00      	nop
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f006 ff40 	bl	8007ed4 <HAL_SPI_GetState>
 8001054:	4603      	mov	r3, r0
 8001056:	2b01      	cmp	r3, #1
 8001058:	d1f9      	bne.n	800104e <SX1278_write+0x1c>
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <SX1278_command>:
void SX1278_command(SX1278* inst, uint8_t addr, uint8_t cmd)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b082      	sub	sp, #8
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
 800106a:	460b      	mov	r3, r1
 800106c:	70fb      	strb	r3, [r7, #3]
 800106e:	4613      	mov	r3, r2
 8001070:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	69d8      	ldr	r0, [r3, #28]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	8a5b      	ldrh	r3, [r3, #18]
 800107a:	2200      	movs	r2, #0
 800107c:	4619      	mov	r1, r3
 800107e:	f002 fe59 	bl	8003d34 <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr | 0x80);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6a1a      	ldr	r2, [r3, #32]
 8001086:	78fb      	ldrb	r3, [r7, #3]
 8001088:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800108c:	b2db      	uxtb	r3, r3
 800108e:	4619      	mov	r1, r3
 8001090:	4610      	mov	r0, r2
 8001092:	f7ff ffce 	bl	8001032 <SX1278_write>
	SX1278_write(inst->spi, cmd);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6a1b      	ldr	r3, [r3, #32]
 800109a:	78ba      	ldrb	r2, [r7, #2]
 800109c:	4611      	mov	r1, r2
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff ffc7 	bl	8001032 <SX1278_write>

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	69d8      	ldr	r0, [r3, #28]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	8a5b      	ldrh	r3, [r3, #18]
 80010ac:	2201      	movs	r2, #1
 80010ae:	4619      	mov	r1, r3
 80010b0:	f002 fe40 	bl	8003d34 <HAL_GPIO_WritePin>
}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <SX1278_command_burst>:
void SX1278_command_burst(SX1278* inst, uint8_t addr, uint8_t* buff, uint8_t len)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	607a      	str	r2, [r7, #4]
 80010c6:	461a      	mov	r2, r3
 80010c8:	460b      	mov	r3, r1
 80010ca:	72fb      	strb	r3, [r7, #11]
 80010cc:	4613      	mov	r3, r2
 80010ce:	72bb      	strb	r3, [r7, #10]
	uint8_t i;

	if (len <= 1) return;
 80010d0:	7abb      	ldrb	r3, [r7, #10]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d92d      	bls.n	8001132 <SX1278_command_burst+0x76>

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	69d8      	ldr	r0, [r3, #28]
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	8a5b      	ldrh	r3, [r3, #18]
 80010de:	2200      	movs	r2, #0
 80010e0:	4619      	mov	r1, r3
 80010e2:	f002 fe27 	bl	8003d34 <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr | 0x80);
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	6a1a      	ldr	r2, [r3, #32]
 80010ea:	7afb      	ldrb	r3, [r7, #11]
 80010ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	4619      	mov	r1, r3
 80010f4:	4610      	mov	r0, r2
 80010f6:	f7ff ff9c 	bl	8001032 <SX1278_write>
	for (i = 0; i < len; i++)
 80010fa:	2300      	movs	r3, #0
 80010fc:	75fb      	strb	r3, [r7, #23]
 80010fe:	e00b      	b.n	8001118 <SX1278_command_burst+0x5c>
	{
		SX1278_write(inst->spi, *(buff + i));	//explanation: *(buff + i) = buff[i]
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	6a18      	ldr	r0, [r3, #32]
 8001104:	7dfb      	ldrb	r3, [r7, #23]
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	4413      	add	r3, r2
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	4619      	mov	r1, r3
 800110e:	f7ff ff90 	bl	8001032 <SX1278_write>
	for (i = 0; i < len; i++)
 8001112:	7dfb      	ldrb	r3, [r7, #23]
 8001114:	3301      	adds	r3, #1
 8001116:	75fb      	strb	r3, [r7, #23]
 8001118:	7dfa      	ldrb	r2, [r7, #23]
 800111a:	7abb      	ldrb	r3, [r7, #10]
 800111c:	429a      	cmp	r2, r3
 800111e:	d3ef      	bcc.n	8001100 <SX1278_command_burst+0x44>
	}

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	69d8      	ldr	r0, [r3, #28]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	8a5b      	ldrh	r3, [r3, #18]
 8001128:	2201      	movs	r2, #1
 800112a:	4619      	mov	r1, r3
 800112c:	f002 fe02 	bl	8003d34 <HAL_GPIO_WritePin>
 8001130:	e000      	b.n	8001134 <SX1278_command_burst+0x78>
	if (len <= 1) return;
 8001132:	bf00      	nop
}
 8001134:	3718      	adds	r7, #24
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <SX1278_read>:

uint8_t SX1278_read(SPI_HandleTypeDef* spi)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b086      	sub	sp, #24
 800113e:	af02      	add	r7, sp, #8
 8001140:	6078      	str	r0, [r7, #4]
	// reads byte from SPI bus
	uint8_t txByte = 0x00;
 8001142:	2300      	movs	r3, #0
 8001144:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8001146:	2300      	movs	r3, #0
 8001148:	73bb      	strb	r3, [r7, #14]

	HAL_SPI_TransmitReceive(spi, &txByte, &rxByte, 1, 1000);
 800114a:	f107 020e 	add.w	r2, r7, #14
 800114e:	f107 010f 	add.w	r1, r7, #15
 8001152:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	2301      	movs	r3, #1
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f006 fd18 	bl	8007b90 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(spi) != HAL_SPI_STATE_READY);
 8001160:	bf00      	nop
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f006 feb6 	bl	8007ed4 <HAL_SPI_GetState>
 8001168:	4603      	mov	r3, r0
 800116a:	2b01      	cmp	r3, #1
 800116c:	d1f9      	bne.n	8001162 <SX1278_read+0x28>

	return rxByte;
 800116e:	7bbb      	ldrb	r3, [r7, #14]
}
 8001170:	4618      	mov	r0, r3
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <SX1278_read_address>:
uint8_t SX1278_read_address(SX1278* inst, uint8_t addr)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	460b      	mov	r3, r1
 8001182:	70fb      	strb	r3, [r7, #3]
	uint8_t recv;

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	69d8      	ldr	r0, [r3, #28]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	8a5b      	ldrh	r3, [r3, #18]
 800118c:	2200      	movs	r2, #0
 800118e:	4619      	mov	r1, r3
 8001190:	f002 fdd0 	bl	8003d34 <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6a1b      	ldr	r3, [r3, #32]
 8001198:	78fa      	ldrb	r2, [r7, #3]
 800119a:	4611      	mov	r1, r2
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff48 	bl	8001032 <SX1278_write>
	recv = SX1278_read(inst->spi);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6a1b      	ldr	r3, [r3, #32]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff ffc7 	bl	800113a <SX1278_read>
 80011ac:	4603      	mov	r3, r0
 80011ae:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	69d8      	ldr	r0, [r3, #28]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	8a5b      	ldrh	r3, [r3, #18]
 80011b8:	2201      	movs	r2, #1
 80011ba:	4619      	mov	r1, r3
 80011bc:	f002 fdba 	bl	8003d34 <HAL_GPIO_WritePin>

	return recv;
 80011c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <SX1278_read_burst>:
void SX1278_read_burst(SX1278* inst, uint8_t addr, uint8_t* buff, uint8_t len)
{
 80011ca:	b590      	push	{r4, r7, lr}
 80011cc:	b087      	sub	sp, #28
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	60f8      	str	r0, [r7, #12]
 80011d2:	607a      	str	r2, [r7, #4]
 80011d4:	461a      	mov	r2, r3
 80011d6:	460b      	mov	r3, r1
 80011d8:	72fb      	strb	r3, [r7, #11]
 80011da:	4613      	mov	r3, r2
 80011dc:	72bb      	strb	r3, [r7, #10]
	uint8_t i;

	if (len <= 1) return;
 80011de:	7abb      	ldrb	r3, [r7, #10]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d92b      	bls.n	800123c <SX1278_read_burst+0x72>

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	69d8      	ldr	r0, [r3, #28]
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	8a5b      	ldrh	r3, [r3, #18]
 80011ec:	2200      	movs	r2, #0
 80011ee:	4619      	mov	r1, r3
 80011f0:	f002 fda0 	bl	8003d34 <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr);
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	6a1b      	ldr	r3, [r3, #32]
 80011f8:	7afa      	ldrb	r2, [r7, #11]
 80011fa:	4611      	mov	r1, r2
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff ff18 	bl	8001032 <SX1278_write>
	for (i = 0; i < len; i++)
 8001202:	2300      	movs	r3, #0
 8001204:	75fb      	strb	r3, [r7, #23]
 8001206:	e00c      	b.n	8001222 <SX1278_read_burst+0x58>
	{
		*(buff + i) = SX1278_read(inst->spi);	//explanation: *(buff + i) = buff[i]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	6a19      	ldr	r1, [r3, #32]
 800120c:	7dfb      	ldrb	r3, [r7, #23]
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	18d4      	adds	r4, r2, r3
 8001212:	4608      	mov	r0, r1
 8001214:	f7ff ff91 	bl	800113a <SX1278_read>
 8001218:	4603      	mov	r3, r0
 800121a:	7023      	strb	r3, [r4, #0]
	for (i = 0; i < len; i++)
 800121c:	7dfb      	ldrb	r3, [r7, #23]
 800121e:	3301      	adds	r3, #1
 8001220:	75fb      	strb	r3, [r7, #23]
 8001222:	7dfa      	ldrb	r2, [r7, #23]
 8001224:	7abb      	ldrb	r3, [r7, #10]
 8001226:	429a      	cmp	r2, r3
 8001228:	d3ee      	bcc.n	8001208 <SX1278_read_burst+0x3e>
	}

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	69d8      	ldr	r0, [r3, #28]
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	8a5b      	ldrh	r3, [r3, #18]
 8001232:	2201      	movs	r2, #1
 8001234:	4619      	mov	r1, r3
 8001236:	f002 fd7d 	bl	8003d34 <HAL_GPIO_WritePin>
 800123a:	e000      	b.n	800123e <SX1278_read_burst+0x74>
	if (len <= 1) return;
 800123c:	bf00      	nop
}
 800123e:	371c      	adds	r7, #28
 8001240:	46bd      	mov	sp, r7
 8001242:	bd90      	pop	{r4, r7, pc}

08001244 <SX1278_transmit>:

	return true;
}

bool SX1278_transmit(SX1278* inst, uint8_t* txBuffer, uint8_t length)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	4613      	mov	r3, r2
 8001250:	71fb      	strb	r3, [r7, #7]
	// check if the module is ready for the transmission
	if (inst->mode == STANDBY)
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	7b1b      	ldrb	r3, [r3, #12]
 8001256:	2b01      	cmp	r3, #1
 8001258:	d130      	bne.n	80012bc <SX1278_transmit+0x78>
	{
		println("[LoRa] Starting transmission...");
 800125a:	481c      	ldr	r0, [pc, #112]	; (80012cc <SX1278_transmit+0x88>)
 800125c:	f7ff fe94 	bl	8000f88 <println>
		SX1278_tx_mode(inst);
 8001260:	68f8      	ldr	r0, [r7, #12]
 8001262:	f000 f979 	bl	8001558 <SX1278_tx_mode>
		SX1278_tx_input(inst, txBuffer, length);
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	461a      	mov	r2, r3
 800126a:	68b9      	ldr	r1, [r7, #8]
 800126c:	68f8      	ldr	r0, [r7, #12]
 800126e:	f000 f873 	bl	8001358 <SX1278_tx_input>
		SX1278_tx_push(inst);
 8001272:	68f8      	ldr	r0, [r7, #12]
 8001274:	f000 f88b 	bl	800138e <SX1278_tx_push>

		if (inst->useDio0IRQ)
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800127e:	2b00      	cmp	r3, #0
 8001280:	d008      	beq.n	8001294 <SX1278_transmit+0x50>
		{
			//waiting for interrupt
			println("[LoRa] Transmission pushed! Waiting for an interrupt...");
 8001282:	4813      	ldr	r0, [pc, #76]	; (80012d0 <SX1278_transmit+0x8c>)
 8001284:	f7ff fe80 	bl	8000f88 <println>
			inst->pendingIRQ = true;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	2201      	movs	r2, #1
 800128c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			while (HAL_GPIO_ReadPin(inst->dio0_port, inst->dio0) == GPIO_PIN_RESET);

			return SX1278_tx_finish(inst);
		}

		return true;
 8001290:	2301      	movs	r3, #1
 8001292:	e017      	b.n	80012c4 <SX1278_transmit+0x80>
			println("[LoRa] Transmission pushed!");
 8001294:	480f      	ldr	r0, [pc, #60]	; (80012d4 <SX1278_transmit+0x90>)
 8001296:	f7ff fe77 	bl	8000f88 <println>
			while (HAL_GPIO_ReadPin(inst->dio0_port, inst->dio0) == GPIO_PIN_RESET);
 800129a:	bf00      	nop
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	699a      	ldr	r2, [r3, #24]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	8a1b      	ldrh	r3, [r3, #16]
 80012a4:	4619      	mov	r1, r3
 80012a6:	4610      	mov	r0, r2
 80012a8:	f002 fd2c 	bl	8003d04 <HAL_GPIO_ReadPin>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d0f4      	beq.n	800129c <SX1278_transmit+0x58>
			return SX1278_tx_finish(inst);
 80012b2:	68f8      	ldr	r0, [r7, #12]
 80012b4:	f000 f878 	bl	80013a8 <SX1278_tx_finish>
 80012b8:	4603      	mov	r3, r0
 80012ba:	e003      	b.n	80012c4 <SX1278_transmit+0x80>
	}
	else
	{
		println("[LoRa] Cannot transmit...standby");
 80012bc:	4806      	ldr	r0, [pc, #24]	; (80012d8 <SX1278_transmit+0x94>)
 80012be:	f7ff fe63 	bl	8000f88 <println>
		return false;
 80012c2:	2300      	movs	r3, #0
	}
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	080118e4 	.word	0x080118e4
 80012d0:	08011904 	.word	0x08011904
 80012d4:	0801193c 	.word	0x0801193c
 80012d8:	08011958 	.word	0x08011958

080012dc <SX1278_receive>:

bool SX1278_receive(SX1278* inst)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
	// [!!] writes data to the inst->rxBuffer
	if (inst->mode == STANDBY)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	7b1b      	ldrb	r3, [r3, #12]
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d126      	bne.n	800133a <SX1278_receive+0x5e>
	{
		println("[LoRa] Starting receiving...");
 80012ec:	4817      	ldr	r0, [pc, #92]	; (800134c <SX1278_receive+0x70>)
 80012ee:	f7ff fe4b 	bl	8000f88 <println>
		SX1278_rx_mode(inst);
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f000 f95e 	bl	80015b4 <SX1278_rx_mode>

		if (inst->useDio0IRQ)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d008      	beq.n	8001314 <SX1278_receive+0x38>
		{
			//waiting for interrupt
			println("[LoRa] Receiver set! Waiting for an interrupt...");
 8001302:	4813      	ldr	r0, [pc, #76]	; (8001350 <SX1278_receive+0x74>)
 8001304:	f7ff fe40 	bl	8000f88 <println>
			inst->pendingIRQ = true;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2201      	movs	r2, #1
 800130c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

			SX1278_rx_get_packet(inst);
			return inst->newPacket;
		}

		return true;
 8001310:	2301      	movs	r3, #1
 8001312:	e016      	b.n	8001342 <SX1278_receive+0x66>
			while (HAL_GPIO_ReadPin(inst->dio0_port, inst->dio0) == GPIO_PIN_RESET);
 8001314:	bf00      	nop
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	699a      	ldr	r2, [r3, #24]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	8a1b      	ldrh	r3, [r3, #16]
 800131e:	4619      	mov	r1, r3
 8001320:	4610      	mov	r0, r2
 8001322:	f002 fcef 	bl	8003d04 <HAL_GPIO_ReadPin>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d0f4      	beq.n	8001316 <SX1278_receive+0x3a>
			SX1278_rx_get_packet(inst);
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f000 f879 	bl	8001424 <SX1278_rx_get_packet>
			return inst->newPacket;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001338:	e003      	b.n	8001342 <SX1278_receive+0x66>
	}
	else
	{
		println("[LoRa] Cannot receive...standby");
 800133a:	4806      	ldr	r0, [pc, #24]	; (8001354 <SX1278_receive+0x78>)
 800133c:	f7ff fe24 	bl	8000f88 <println>
		return false;
 8001340:	2300      	movs	r3, #0
	}
}
 8001342:	4618      	mov	r0, r3
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	0801197c 	.word	0x0801197c
 8001350:	0801199c 	.word	0x0801199c
 8001354:	080119d0 	.word	0x080119d0

08001358 <SX1278_tx_input>:

//#### Data send / receive routines ####

void SX1278_tx_input(SX1278* inst, uint8_t* txBuffer, uint8_t length)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	4613      	mov	r3, r2
 8001364:	71fb      	strb	r3, [r7, #7]
	SX1278_command(inst, LR_RegPayloadLength, length);	//(this register must difine when the data long of one byte in SF is 6)
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	461a      	mov	r2, r3
 800136a:	2122      	movs	r1, #34	; 0x22
 800136c:	68f8      	ldr	r0, [r7, #12]
 800136e:	f7ff fe78 	bl	8001062 <SX1278_command>
	SX1278_command_burst(inst, 0x00, txBuffer, length);
 8001372:	79fb      	ldrb	r3, [r7, #7]
 8001374:	68ba      	ldr	r2, [r7, #8]
 8001376:	2100      	movs	r1, #0
 8001378:	68f8      	ldr	r0, [r7, #12]
 800137a:	f7ff fe9f 	bl	80010bc <SX1278_command_burst>

	inst->txLen = length;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	79fa      	ldrb	r2, [r7, #7]
 8001382:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 8001386:	bf00      	nop
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <SX1278_tx_push>:
void SX1278_tx_push(SX1278* inst)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
	//set module to TX mode and transmit
	SX1278_command(inst, LR_RegOpMode, 0x8b);
 8001396:	228b      	movs	r2, #139	; 0x8b
 8001398:	2101      	movs	r1, #1
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f7ff fe61 	bl	8001062 <SX1278_command>
}
 80013a0:	bf00      	nop
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <SX1278_tx_finish>:
bool SX1278_tx_finish(SX1278* inst)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
	inst->irqStatus = SX1278_read_address(inst, LR_RegIrqFlags);
 80013b0:	2112      	movs	r1, #18
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff fee0 	bl	8001178 <SX1278_read_address>
 80013b8:	4603      	mov	r3, r0
 80013ba:	461a      	mov	r2, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	inst->txDone = ((inst->irqStatus & IRQ_LR_TXDONE) > 0x00);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013c8:	f003 0308 	and.w	r3, r3, #8
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	bfcc      	ite	gt
 80013d0:	2301      	movgt	r3, #1
 80013d2:	2300      	movle	r3, #0
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	SX1278_clearLoRaIrq(inst);
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f000 f99a 	bl	8001716 <SX1278_clearLoRaIrq>
	SX1278_standby(inst);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f000 f91c 	bl	8001620 <SX1278_standby>

	printLen = sprintf(printBuffer, "[LoRa] Transmission finished! IRQ status: %d (<-should be 8)\r\n", inst->irqStatus);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013ee:	461a      	mov	r2, r3
 80013f0:	4909      	ldr	r1, [pc, #36]	; (8001418 <SX1278_tx_finish+0x70>)
 80013f2:	480a      	ldr	r0, [pc, #40]	; (800141c <SX1278_tx_finish+0x74>)
 80013f4:	f00d fbfc 	bl	800ebf0 <siprintf>
 80013f8:	4603      	mov	r3, r0
 80013fa:	461a      	mov	r2, r3
 80013fc:	4b08      	ldr	r3, [pc, #32]	; (8001420 <SX1278_tx_finish+0x78>)
 80013fe:	601a      	str	r2, [r3, #0]
	printv(printBuffer, printLen);
 8001400:	4b07      	ldr	r3, [pc, #28]	; (8001420 <SX1278_tx_finish+0x78>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4619      	mov	r1, r3
 8001406:	4805      	ldr	r0, [pc, #20]	; (800141c <SX1278_tx_finish+0x74>)
 8001408:	f7ff fe00 	bl	800100c <printv>
	return true;
 800140c:	2301      	movs	r3, #1
}
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	080119f0 	.word	0x080119f0
 800141c:	20000374 	.word	0x20000374
 8001420:	20000370 	.word	0x20000370

08001424 <SX1278_rx_get_packet>:

bool SX1278_rx_get_packet(SX1278* inst)
{
 8001424:	b5b0      	push	{r4, r5, r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	uint8_t addr;
	uint8_t packet_size;

	SX1278_update_IRQ_status(inst);
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f000 f93a 	bl	80016a6 <SX1278_update_IRQ_status>

	memset(inst->rxBuffer, 0x00, SX1278_MAX_PACKET);	//clear rxBuffer
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	3335      	adds	r3, #53	; 0x35
 8001436:	f44f 7280 	mov.w	r2, #256	; 0x100
 800143a:	2100      	movs	r1, #0
 800143c:	4618      	mov	r0, r3
 800143e:	f00c fcd2 	bl	800dde6 <memset>

	addr = SX1278_read_address(inst, LR_RegFifoRxCurrentaddr);	//get last packet address
 8001442:	2110      	movs	r1, #16
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f7ff fe97 	bl	8001178 <SX1278_read_address>
 800144a:	4603      	mov	r3, r0
 800144c:	73bb      	strb	r3, [r7, #14]
	SX1278_command(inst, LR_RegFifoAddrPtr, addr);				//set fifo pointer to this address
 800144e:	7bbb      	ldrb	r3, [r7, #14]
 8001450:	461a      	mov	r2, r3
 8001452:	210d      	movs	r1, #13
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f7ff fe04 	bl	8001062 <SX1278_command>

	//When SpreadingFactor = 6, use Implicit Header mode (Excluding internal packet length)
	if (inst->config.spreadingFactor == SX1278_SF_6)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	795b      	ldrb	r3, [r3, #5]
 800145e:	2b06      	cmp	r3, #6
 8001460:	d104      	bne.n	800146c <SX1278_rx_get_packet+0x48>
	{
		// ??? not sure what to put here
		packet_size = inst->txLen;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001468:	73fb      	strb	r3, [r7, #15]
 800146a:	e005      	b.n	8001478 <SX1278_rx_get_packet+0x54>
	}
	else
	{
		packet_size = SX1278_read_address(inst, LR_RegRxNbBytes); //get the number of received bytes
 800146c:	2113      	movs	r1, #19
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff fe82 	bl	8001178 <SX1278_read_address>
 8001474:	4603      	mov	r3, r0
 8001476:	73fb      	strb	r3, [r7, #15]
	}

	SX1278_read_burst(inst, 0x00, inst->rxBuffer, packet_size);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f103 0235 	add.w	r2, r3, #53	; 0x35
 800147e:	7bfb      	ldrb	r3, [r7, #15]
 8001480:	2100      	movs	r1, #0
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f7ff fea1 	bl	80011ca <SX1278_read_burst>

	inst->newPacket = (inst->rxTimeout || (inst->crcError && LR_VALIDATE_CRCERROR));
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	inst->rssi = SX1278_getRSSI(inst);
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f000 f94b 	bl	8001730 <SX1278_getRSSI>
 800149a:	4602      	mov	r2, r0
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	62da      	str	r2, [r3, #44]	; 0x2c
	inst->rxLen = packet_size;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	7bfa      	ldrb	r2, [r7, #15]
 80014a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	SX1278_clearLoRaIrq(inst);
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f000 f934 	bl	8001716 <SX1278_clearLoRaIrq>
	SX1278_standby(inst);
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f000 f8b6 	bl	8001620 <SX1278_standby>

	if (inst->rxTimeout)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d010      	beq.n	80014e0 <SX1278_rx_get_packet+0xbc>
	{
		printLen = sprintf(printBuffer, "[LoRa] Receive timeout! Nothing to listen to.\r\n");
 80014be:	4a21      	ldr	r2, [pc, #132]	; (8001544 <SX1278_rx_get_packet+0x120>)
 80014c0:	4b21      	ldr	r3, [pc, #132]	; (8001548 <SX1278_rx_get_packet+0x124>)
 80014c2:	4614      	mov	r4, r2
 80014c4:	461d      	mov	r5, r3
 80014c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014ce:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80014d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80014d6:	232f      	movs	r3, #47	; 0x2f
 80014d8:	461a      	mov	r2, r3
 80014da:	4b1c      	ldr	r3, [pc, #112]	; (800154c <SX1278_rx_get_packet+0x128>)
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	e023      	b.n	8001528 <SX1278_rx_get_packet+0x104>
	}
	else if (inst->crcError)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d010      	beq.n	800150c <SX1278_rx_get_packet+0xe8>
	{
		printLen = sprintf(printBuffer, "[LoRa] CRC error occured. Packet discarded!\r\n");
 80014ea:	4a16      	ldr	r2, [pc, #88]	; (8001544 <SX1278_rx_get_packet+0x120>)
 80014ec:	4b18      	ldr	r3, [pc, #96]	; (8001550 <SX1278_rx_get_packet+0x12c>)
 80014ee:	4614      	mov	r4, r2
 80014f0:	461d      	mov	r5, r3
 80014f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014fa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80014fe:	c407      	stmia	r4!, {r0, r1, r2}
 8001500:	8023      	strh	r3, [r4, #0]
 8001502:	232d      	movs	r3, #45	; 0x2d
 8001504:	461a      	mov	r2, r3
 8001506:	4b11      	ldr	r3, [pc, #68]	; (800154c <SX1278_rx_get_packet+0x128>)
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	e00d      	b.n	8001528 <SX1278_rx_get_packet+0x104>
	}
	else
	{
		printLen = sprintf(printBuffer, "[LoRa] Valid packet received!\r\n");
 800150c:	4a0d      	ldr	r2, [pc, #52]	; (8001544 <SX1278_rx_get_packet+0x120>)
 800150e:	4b11      	ldr	r3, [pc, #68]	; (8001554 <SX1278_rx_get_packet+0x130>)
 8001510:	4614      	mov	r4, r2
 8001512:	461d      	mov	r5, r3
 8001514:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001516:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001518:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800151c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001520:	231f      	movs	r3, #31
 8001522:	461a      	mov	r2, r3
 8001524:	4b09      	ldr	r3, [pc, #36]	; (800154c <SX1278_rx_get_packet+0x128>)
 8001526:	601a      	str	r2, [r3, #0]
	}
	printv(printBuffer, printLen);
 8001528:	4b08      	ldr	r3, [pc, #32]	; (800154c <SX1278_rx_get_packet+0x128>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4619      	mov	r1, r3
 800152e:	4805      	ldr	r0, [pc, #20]	; (8001544 <SX1278_rx_get_packet+0x120>)
 8001530:	f7ff fd6c 	bl	800100c <printv>

	return inst->newPacket;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
}
 800153a:	4618      	mov	r0, r3
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bdb0      	pop	{r4, r5, r7, pc}
 8001542:	bf00      	nop
 8001544:	20000374 	.word	0x20000374
 8001548:	08011a30 	.word	0x08011a30
 800154c:	20000370 	.word	0x20000370
 8001550:	08011a60 	.word	0x08011a60
 8001554:	08011a90 	.word	0x08011a90

08001558 <SX1278_tx_mode>:

//#### Functions to change SX1278 operation mode ####

void SX1278_tx_mode(SX1278* inst)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
	println("[LoRa] Goes into Transmit mode.");
 8001560:	4813      	ldr	r0, [pc, #76]	; (80015b0 <SX1278_tx_mode+0x58>)
 8001562:	f7ff fd11 	bl	8000f88 <println>
	uint8_t addr;

	SX1278_clearLoRaIrq(inst);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f000 f8d5 	bl	8001716 <SX1278_clearLoRaIrq>
	SX1278_command(inst, REG_LR_DIOMAPPING1, 0x41);	//DIO0=01, DIO1=00, DIO2=00, DIO3=01
 800156c:	2241      	movs	r2, #65	; 0x41
 800156e:	2140      	movs	r1, #64	; 0x40
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f7ff fd76 	bl	8001062 <SX1278_command>
	SX1278_command(inst, LR_RegIrqFlagsMask, 0xF7);	//Open TxDone interrupt
 8001576:	22f7      	movs	r2, #247	; 0xf7
 8001578:	2111      	movs	r1, #17
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f7ff fd71 	bl	8001062 <SX1278_command>

	addr = SX1278_read_address(inst, LR_RegFifoTxBaseAddr);	//read tx_fifo beginning adress in memory
 8001580:	210e      	movs	r1, #14
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f7ff fdf8 	bl	8001178 <SX1278_read_address>
 8001588:	4603      	mov	r3, r0
 800158a:	73fb      	strb	r3, [r7, #15]
	SX1278_command(inst, LR_RegFifoAddrPtr, addr);			//set fifo pointer there
 800158c:	7bfb      	ldrb	r3, [r7, #15]
 800158e:	461a      	mov	r2, r3
 8001590:	210d      	movs	r1, #13
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff fd65 	bl	8001062 <SX1278_command>

	inst->txLen = 0;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2200      	movs	r2, #0
 800159c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	inst->mode = TX;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2202      	movs	r2, #2
 80015a4:	731a      	strb	r2, [r3, #12]
}
 80015a6:	bf00      	nop
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	08011ab0 	.word	0x08011ab0

080015b4 <SX1278_rx_mode>:

void SX1278_rx_mode(SX1278* inst)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
	println("[LoRa] Goes into Receive mode.");
 80015bc:	4817      	ldr	r0, [pc, #92]	; (800161c <SX1278_rx_mode+0x68>)
 80015be:	f7ff fce3 	bl	8000f88 <println>
	uint8_t addr;

	SX1278_clearLoRaIrq(inst);
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f000 f8a7 	bl	8001716 <SX1278_clearLoRaIrq>
	SX1278_command(inst, REG_LR_DIOMAPPING1, 0x01);	//DIO=00, DIO1=00,DIO2=00, DIO3=01
 80015c8:	2201      	movs	r2, #1
 80015ca:	2140      	movs	r1, #64	; 0x40
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f7ff fd48 	bl	8001062 <SX1278_command>
	SX1278_command(inst, LR_RegIrqFlagsMask, 0x1F);	//Open RxDone, RxTimeout, crcError interrupt
 80015d2:	221f      	movs	r2, #31
 80015d4:	2111      	movs	r1, #17
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f7ff fd43 	bl	8001062 <SX1278_command>

	addr = SX1278_read_address(inst, LR_RegFifoRxBaseAddr);	//read rx_fifo beginning adress in memory
 80015dc:	210f      	movs	r1, #15
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7ff fdca 	bl	8001178 <SX1278_read_address>
 80015e4:	4603      	mov	r3, r0
 80015e6:	73fb      	strb	r3, [r7, #15]
	SX1278_command(inst, LR_RegFifoAddrPtr, addr);			//set fifo pointer there
 80015e8:	7bfb      	ldrb	r3, [r7, #15]
 80015ea:	461a      	mov	r2, r3
 80015ec:	210d      	movs	r1, #13
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f7ff fd37 	bl	8001062 <SX1278_command>

	SX1278_command(inst, LR_RegOpMode, 0x8d);				//0x8d = 1_00_0_1_101 = Lora, FSK, (r), Low Frequency mode, Rx mode
 80015f4:	228d      	movs	r2, #141	; 0x8d
 80015f6:	2101      	movs	r1, #1
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f7ff fd32 	bl	8001062 <SX1278_command>

	inst->crcError = false;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	inst->rxLen = 0;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	inst->mode = RX;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2203      	movs	r2, #3
 8001612:	731a      	strb	r2, [r3, #12]
}
 8001614:	bf00      	nop
 8001616:	3710      	adds	r7, #16
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	08011ad0 	.word	0x08011ad0

08001620 <SX1278_standby>:
	SX1278_command(inst, LR_RegOpMode, 0x08);
	inst->mode = SLEEP;
}

void SX1278_standby(SX1278* inst)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
	println("[LoRa] Goes into Standby mode.");
 8001628:	4807      	ldr	r0, [pc, #28]	; (8001648 <SX1278_standby+0x28>)
 800162a:	f7ff fcad 	bl	8000f88 <println>
	SX1278_command(inst, LR_RegOpMode, 0x09);
 800162e:	2209      	movs	r2, #9
 8001630:	2101      	movs	r1, #1
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f7ff fd15 	bl	8001062 <SX1278_command>
	inst->mode = STANDBY;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2201      	movs	r2, #1
 800163c:	731a      	strb	r2, [r3, #12]
}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	08011b10 	.word	0x08011b10

0800164c <SX1278_dio0_IRQ>:
}

//#### Interrupt methods ####

bool SX1278_dio0_IRQ(SX1278* inst)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
	//function to call when dio0 rises, used only when waiting for the DIO0 interrupt
	//finishes transmit and receive routines
	if (inst->useDio0IRQ && inst->pendingIRQ)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800165a:	2b00      	cmp	r3, #0
 800165c:	d01e      	beq.n	800169c <SX1278_dio0_IRQ+0x50>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001664:	2b00      	cmp	r3, #0
 8001666:	d019      	beq.n	800169c <SX1278_dio0_IRQ+0x50>
	{
		if (inst->mode == TX)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	7b1b      	ldrb	r3, [r3, #12]
 800166c:	2b02      	cmp	r3, #2
 800166e:	d104      	bne.n	800167a <SX1278_dio0_IRQ+0x2e>
		{
			return SX1278_tx_finish(inst);
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f7ff fe99 	bl	80013a8 <SX1278_tx_finish>
 8001676:	4603      	mov	r3, r0
 8001678:	e011      	b.n	800169e <SX1278_dio0_IRQ+0x52>
		}
		else if (inst->mode == RX)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	7b1b      	ldrb	r3, [r3, #12]
 800167e:	2b03      	cmp	r3, #3
 8001680:	d104      	bne.n	800168c <SX1278_dio0_IRQ+0x40>
		{
			return SX1278_rx_get_packet(inst);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f7ff fece 	bl	8001424 <SX1278_rx_get_packet>
 8001688:	4603      	mov	r3, r0
 800168a:	e008      	b.n	800169e <SX1278_dio0_IRQ+0x52>
		}
		else
		{
			SX1278_clearLoRaIrq(inst);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f000 f842 	bl	8001716 <SX1278_clearLoRaIrq>
			SX1278_standby(inst);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff ffc4 	bl	8001620 <SX1278_standby>
			return false;
 8001698:	2300      	movs	r3, #0
 800169a:	e000      	b.n	800169e <SX1278_dio0_IRQ+0x52>
		inst->pendingIRQ = false;
		return true;
	}
	else
	{
		return false;
 800169c:	2300      	movs	r3, #0
	}
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <SX1278_update_IRQ_status>:

void SX1278_update_IRQ_status(SX1278* inst)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b082      	sub	sp, #8
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
	inst->irqStatus = SX1278_read_address(inst, LR_RegIrqFlags);
 80016ae:	2112      	movs	r1, #18
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7ff fd61 	bl	8001178 <SX1278_read_address>
 80016b6:	4603      	mov	r3, r0
 80016b8:	461a      	mov	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	inst->rxTimeout = ((inst->irqStatus & IRQ_LR_RXTIMEOUT) > 0x00);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	bfcc      	ite	gt
 80016ce:	2301      	movgt	r3, #1
 80016d0:	2300      	movle	r3, #0
 80016d2:	b2da      	uxtb	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	inst->rxDone = 	  ((inst->irqStatus & IRQ_LR_RXDONE) > 0x00);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	bfcc      	ite	gt
 80016e8:	2301      	movgt	r3, #1
 80016ea:	2300      	movle	r3, #0
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	inst->crcError =  ((inst->irqStatus & IRQ_LR_CRCERROR) > 0x00);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016fa:	f003 0320 	and.w	r3, r3, #32
 80016fe:	2b00      	cmp	r3, #0
 8001700:	bfcc      	ite	gt
 8001702:	2301      	movgt	r3, #1
 8001704:	2300      	movle	r3, #0
 8001706:	b2da      	uxtb	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278* inst)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b082      	sub	sp, #8
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
	SX1278_command(inst, LR_RegIrqFlags, 0xFF);
 800171e:	22ff      	movs	r2, #255	; 0xff
 8001720:	2112      	movs	r1, #18
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7ff fc9d 	bl	8001062 <SX1278_command>
}
 8001728:	bf00      	nop
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <SX1278_getRSSI>:

int SX1278_getRSSI(SX1278* inst)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  return (-164 + SX1278_read_address(inst, LR_RegPktRssiValue));
 8001738:	211a      	movs	r1, #26
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f7ff fd1c 	bl	8001178 <SX1278_read_address>
 8001740:	4603      	mov	r3, r0
 8001742:	3ba4      	subs	r3, #164	; 0xa4
}
 8001744:	4618      	mov	r0, r3
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <print>:
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
	while (CDC_Transmit_FS((uint8_t*) str, strlen(str)) == USBD_BUSY);
 8001754:	bf00      	nop
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f7fe fd3a 	bl	80001d0 <strlen>
 800175c:	4603      	mov	r3, r0
 800175e:	b29b      	uxth	r3, r3
 8001760:	4619      	mov	r1, r3
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f00b fecc 	bl	800d500 <CDC_Transmit_FS>
 8001768:	4603      	mov	r3, r0
 800176a:	2b01      	cmp	r3, #1
 800176c:	d0f3      	beq.n	8001756 <print+0xa>
};
 800176e:	bf00      	nop
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
	...

08001778 <println>:
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
	printLen = strlen(str);
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f7fe fd25 	bl	80001d0 <strlen>
 8001786:	4602      	mov	r2, r0
 8001788:	4b1a      	ldr	r3, [pc, #104]	; (80017f4 <println+0x7c>)
 800178a:	601a      	str	r2, [r3, #0]
	for (i = 0; i < printLen; i++)
 800178c:	2300      	movs	r3, #0
 800178e:	73fb      	strb	r3, [r7, #15]
 8001790:	e009      	b.n	80017a6 <println+0x2e>
		printBuffer[i] = str[i];
 8001792:	7bfb      	ldrb	r3, [r7, #15]
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	441a      	add	r2, r3
 8001798:	7bfb      	ldrb	r3, [r7, #15]
 800179a:	7811      	ldrb	r1, [r2, #0]
 800179c:	4a16      	ldr	r2, [pc, #88]	; (80017f8 <println+0x80>)
 800179e:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < printLen; i++)
 80017a0:	7bfb      	ldrb	r3, [r7, #15]
 80017a2:	3301      	adds	r3, #1
 80017a4:	73fb      	strb	r3, [r7, #15]
 80017a6:	7bfa      	ldrb	r2, [r7, #15]
 80017a8:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <println+0x7c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d3f0      	bcc.n	8001792 <println+0x1a>
	printBuffer[printLen] = '\n';
 80017b0:	4b10      	ldr	r3, [pc, #64]	; (80017f4 <println+0x7c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a10      	ldr	r2, [pc, #64]	; (80017f8 <println+0x80>)
 80017b6:	210a      	movs	r1, #10
 80017b8:	54d1      	strb	r1, [r2, r3]
	printBuffer[printLen + 1] = '\r';
 80017ba:	4b0e      	ldr	r3, [pc, #56]	; (80017f4 <println+0x7c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	3301      	adds	r3, #1
 80017c0:	4a0d      	ldr	r2, [pc, #52]	; (80017f8 <println+0x80>)
 80017c2:	210d      	movs	r1, #13
 80017c4:	54d1      	strb	r1, [r2, r3]
	printBuffer[printLen + 2] = '\0';
 80017c6:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <println+0x7c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	3302      	adds	r3, #2
 80017cc:	4a0a      	ldr	r2, [pc, #40]	; (80017f8 <println+0x80>)
 80017ce:	2100      	movs	r1, #0
 80017d0:	54d1      	strb	r1, [r2, r3]
 	while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen + 3) == USBD_BUSY);
 80017d2:	bf00      	nop
 80017d4:	4b07      	ldr	r3, [pc, #28]	; (80017f4 <println+0x7c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	b29b      	uxth	r3, r3
 80017da:	3303      	adds	r3, #3
 80017dc:	b29b      	uxth	r3, r3
 80017de:	4619      	mov	r1, r3
 80017e0:	4805      	ldr	r0, [pc, #20]	; (80017f8 <println+0x80>)
 80017e2:	f00b fe8d 	bl	800d500 <CDC_Transmit_FS>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d0f3      	beq.n	80017d4 <println+0x5c>
};
 80017ec:	bf00      	nop
 80017ee:	3710      	adds	r7, #16
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20000574 	.word	0x20000574
 80017f8:	20000578 	.word	0x20000578

080017fc <printv>:
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
	while (CDC_Transmit_FS((uint8_t*) str, len) == USBD_BUSY);
 8001806:	bf00      	nop
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	b29b      	uxth	r3, r3
 800180c:	4619      	mov	r1, r3
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f00b fe76 	bl	800d500 <CDC_Transmit_FS>
 8001814:	4603      	mov	r3, r0
 8001816:	2b01      	cmp	r3, #1
 8001818:	d0f6      	beq.n	8001808 <printv+0xc>
}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
	...

08001824 <millis>:
#include <stdbool.h>
#include "stm32f4xx_hal.h"
#include "main.h"

// TIM5 has 32-bit counter -> takes longer to overflow
static inline uint32_t millis() { return (uint32_t)TIM5->CNT; }
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
 8001828:	4b03      	ldr	r3, [pc, #12]	; (8001838 <millis+0x14>)
 800182a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182c:	4618      	mov	r0, r3
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	40000c00 	.word	0x40000c00

0800183c <setup>:

uint8_t i;
uint32_t lastMillis;

static void setup()
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_RESET);
 8001840:	2200      	movs	r2, #0
 8001842:	2180      	movs	r1, #128	; 0x80
 8001844:	484a      	ldr	r0, [pc, #296]	; (8001970 <setup+0x134>)
 8001846:	f002 fa75 	bl	8003d34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 800184a:	2200      	movs	r2, #0
 800184c:	2140      	movs	r1, #64	; 0x40
 800184e:	4848      	ldr	r0, [pc, #288]	; (8001970 <setup+0x134>)
 8001850:	f002 fa70 	bl	8003d34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDC_GPIO_Port, LEDC_Pin, GPIO_PIN_RESET);
 8001854:	2200      	movs	r2, #0
 8001856:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800185a:	4846      	ldr	r0, [pc, #280]	; (8001974 <setup+0x138>)
 800185c:	f002 fa6a 	bl	8003d34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDD_GPIO_Port, LEDD_Pin, GPIO_PIN_RESET);
 8001860:	2200      	movs	r2, #0
 8001862:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001866:	4843      	ldr	r0, [pc, #268]	; (8001974 <setup+0x138>)
 8001868:	f002 fa64 	bl	8003d34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PH_L_GPIO_Port, PH_L_Pin, GPIO_PIN_RESET);
 800186c:	2200      	movs	r2, #0
 800186e:	2101      	movs	r1, #1
 8001870:	4841      	ldr	r0, [pc, #260]	; (8001978 <setup+0x13c>)
 8001872:	f002 fa5f 	bl	8003d34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PH_R_GPIO_Port, PH_R_Pin, GPIO_PIN_RESET);
 8001876:	2200      	movs	r2, #0
 8001878:	2104      	movs	r1, #4
 800187a:	483f      	ldr	r0, [pc, #252]	; (8001978 <setup+0x13c>)
 800187c:	f002 fa5a 	bl	8003d34 <HAL_GPIO_WritePin>

	while (HAL_GPIO_ReadPin(BTN_USR_GPIO_Port, BTN_USR_Pin) == GPIO_PIN_SET)
 8001880:	e01f      	b.n	80018c2 <setup+0x86>
	{
		print("Waiting for button press..");
 8001882:	483e      	ldr	r0, [pc, #248]	; (800197c <setup+0x140>)
 8001884:	f7ff ff62 	bl	800174c <print>
		printLen = sprintf(printBuffer, "%d(<-should be ~100)\n\r", (int)(millis() - lastMillis));
 8001888:	f7ff ffcc 	bl	8001824 <millis>
 800188c:	4602      	mov	r2, r0
 800188e:	4b3c      	ldr	r3, [pc, #240]	; (8001980 <setup+0x144>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	461a      	mov	r2, r3
 8001896:	493b      	ldr	r1, [pc, #236]	; (8001984 <setup+0x148>)
 8001898:	483b      	ldr	r0, [pc, #236]	; (8001988 <setup+0x14c>)
 800189a:	f00d f9a9 	bl	800ebf0 <siprintf>
 800189e:	4603      	mov	r3, r0
 80018a0:	461a      	mov	r2, r3
 80018a2:	4b3a      	ldr	r3, [pc, #232]	; (800198c <setup+0x150>)
 80018a4:	601a      	str	r2, [r3, #0]
		printv(printBuffer, printLen);	//should print: 100
 80018a6:	4b39      	ldr	r3, [pc, #228]	; (800198c <setup+0x150>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4619      	mov	r1, r3
 80018ac:	4836      	ldr	r0, [pc, #216]	; (8001988 <setup+0x14c>)
 80018ae:	f7ff ffa5 	bl	80017fc <printv>
		lastMillis = millis();
 80018b2:	f7ff ffb7 	bl	8001824 <millis>
 80018b6:	4602      	mov	r2, r0
 80018b8:	4b31      	ldr	r3, [pc, #196]	; (8001980 <setup+0x144>)
 80018ba:	601a      	str	r2, [r3, #0]
		HAL_Delay(100);
 80018bc:	2064      	movs	r0, #100	; 0x64
 80018be:	f001 fbb7 	bl	8003030 <HAL_Delay>
	while (HAL_GPIO_ReadPin(BTN_USR_GPIO_Port, BTN_USR_Pin) == GPIO_PIN_SET)
 80018c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018c6:	482c      	ldr	r0, [pc, #176]	; (8001978 <setup+0x13c>)
 80018c8:	f002 fa1c 	bl	8003d04 <HAL_GPIO_ReadPin>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d0d7      	beq.n	8001882 <setup+0x46>
	}

	HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_SET);
 80018d2:	2201      	movs	r2, #1
 80018d4:	2180      	movs	r1, #128	; 0x80
 80018d6:	4826      	ldr	r0, [pc, #152]	; (8001970 <setup+0x134>)
 80018d8:	f002 fa2c 	bl	8003d34 <HAL_GPIO_WritePin>
	println("Hello world!!");
 80018dc:	482c      	ldr	r0, [pc, #176]	; (8001990 <setup+0x154>)
 80018de:	f7ff ff4b 	bl	8001778 <println>
	HAL_Delay(500);
 80018e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018e6:	f001 fba3 	bl	8003030 <HAL_Delay>
	HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_RESET);
 80018ea:	2200      	movs	r2, #0
 80018ec:	2180      	movs	r1, #128	; 0x80
 80018ee:	4820      	ldr	r0, [pc, #128]	; (8001970 <setup+0x134>)
 80018f0:	f002 fa20 	bl	8003d34 <HAL_GPIO_WritePin>
		//radio_procedure();	//starts radio loop, now radio wokrs dependend on DIO0 interrupt in ping-pong mode
	}

	sd_begin();
	 */
	println("[MOT] WATCH OUT NOW! THERE IS A CHANCE THAT PWM POLARITY IS FLIPPED!");
 80018f4:	4827      	ldr	r0, [pc, #156]	; (8001994 <setup+0x158>)
 80018f6:	f7ff ff3f 	bl	8001778 <println>
	println("[MOT] IN THIS CASE MOTORS WILL TURN ON AND WONT STOP!!!!");
 80018fa:	4827      	ldr	r0, [pc, #156]	; (8001998 <setup+0x15c>)
 80018fc:	f7ff ff3c 	bl	8001778 <println>
	println("[MOT] Starting in 5 seconds!!");
 8001900:	4826      	ldr	r0, [pc, #152]	; (800199c <setup+0x160>)
 8001902:	f7ff ff39 	bl	8001778 <println>
	HAL_Delay(2000);
 8001906:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800190a:	f001 fb91 	bl	8003030 <HAL_Delay>
	print("[MOT] 3..");
 800190e:	4824      	ldr	r0, [pc, #144]	; (80019a0 <setup+0x164>)
 8001910:	f7ff ff1c 	bl	800174c <print>
	HAL_Delay(1000);
 8001914:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001918:	f001 fb8a 	bl	8003030 <HAL_Delay>
	print("2..");
 800191c:	4821      	ldr	r0, [pc, #132]	; (80019a4 <setup+0x168>)
 800191e:	f7ff ff15 	bl	800174c <print>
	HAL_Delay(1000);
 8001922:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001926:	f001 fb83 	bl	8003030 <HAL_Delay>
	print("1..");
 800192a:	481f      	ldr	r0, [pc, #124]	; (80019a8 <setup+0x16c>)
 800192c:	f7ff ff0e 	bl	800174c <print>
	HAL_Delay(1000);
 8001930:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001934:	f001 fb7c 	bl	8003030 <HAL_Delay>
	println("0");
 8001938:	481c      	ldr	r0, [pc, #112]	; (80019ac <setup+0x170>)
 800193a:	f7ff ff1d 	bl	8001778 <println>

	motL = 0;
 800193e:	4b1c      	ldr	r3, [pc, #112]	; (80019b0 <setup+0x174>)
 8001940:	2200      	movs	r2, #0
 8001942:	701a      	strb	r2, [r3, #0]
	motR = 0;
 8001944:	4b1b      	ldr	r3, [pc, #108]	; (80019b4 <setup+0x178>)
 8001946:	2200      	movs	r2, #0
 8001948:	701a      	strb	r2, [r3, #0]
	enableMotors();
 800194a:	f000 fa09 	bl	8001d60 <enableMotors>
	setPwmFrequency(720);
 800194e:	f44f 7034 	mov.w	r0, #720	; 0x2d0
 8001952:	f000 fa53 	bl	8001dfc <setPwmFrequency>
	println("[MOT] Same frequency as in CanSatKit. Sound should be the same.");
 8001956:	4818      	ldr	r0, [pc, #96]	; (80019b8 <setup+0x17c>)
 8001958:	f7ff ff0e 	bl	8001778 <println>
	setMotorTimeout(1000);
 800195c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001960:	f000 fa98 	bl	8001e94 <setMotorTimeout>
	println("[MOT] Left motor: GPIO (copy on P7), Right motor: PWM (copy on P6)");
 8001964:	4815      	ldr	r0, [pc, #84]	; (80019bc <setup+0x180>)
 8001966:	f7ff ff07 	bl	8001778 <println>

}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40020800 	.word	0x40020800
 8001974:	40020400 	.word	0x40020400
 8001978:	40020000 	.word	0x40020000
 800197c:	08011b44 	.word	0x08011b44
 8001980:	20000be4 	.word	0x20000be4
 8001984:	08011b60 	.word	0x08011b60
 8001988:	20000578 	.word	0x20000578
 800198c:	20000574 	.word	0x20000574
 8001990:	08011b78 	.word	0x08011b78
 8001994:	08011b88 	.word	0x08011b88
 8001998:	08011bd0 	.word	0x08011bd0
 800199c:	08011c0c 	.word	0x08011c0c
 80019a0:	08011c2c 	.word	0x08011c2c
 80019a4:	08011c38 	.word	0x08011c38
 80019a8:	08011c3c 	.word	0x08011c3c
 80019ac:	08011c40 	.word	0x08011c40
 80019b0:	20000778 	.word	0x20000778
 80019b4:	20000779 	.word	0x20000779
 80019b8:	08011c44 	.word	0x08011c44
 80019bc:	08011c84 	.word	0x08011c84

080019c0 <loop>:

static void loop()
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
	//println("#######################");
	//println("[MOT] Motor test! Press USR.");
	//println("#######################");
	for (i = 0; i < 255; i++)
 80019c4:	4b5f      	ldr	r3, [pc, #380]	; (8001b44 <loop+0x184>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	701a      	strb	r2, [r3, #0]
 80019ca:	e059      	b.n	8001a80 <loop+0xc0>
	{
		if (HAL_GPIO_ReadPin(BTN_USR_GPIO_Port, BTN_USR_Pin) == GPIO_PIN_RESET)
 80019cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019d0:	485d      	ldr	r0, [pc, #372]	; (8001b48 <loop+0x188>)
 80019d2:	f002 f997 	bl	8003d04 <HAL_GPIO_ReadPin>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d137      	bne.n	8001a4c <loop+0x8c>
		{
			setMotors(i, i);
 80019dc:	4b59      	ldr	r3, [pc, #356]	; (8001b44 <loop+0x184>)
 80019de:	781a      	ldrb	r2, [r3, #0]
 80019e0:	4b58      	ldr	r3, [pc, #352]	; (8001b44 <loop+0x184>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	4619      	mov	r1, r3
 80019e6:	4610      	mov	r0, r2
 80019e8:	f000 f910 	bl	8001c0c <setMotors>
			HAL_GPIO_WritePin(EN_L_GPIO_Port, EN_L_Pin, (i % 5 == 0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80019ec:	4b55      	ldr	r3, [pc, #340]	; (8001b44 <loop+0x184>)
 80019ee:	781a      	ldrb	r2, [r3, #0]
 80019f0:	4b56      	ldr	r3, [pc, #344]	; (8001b4c <loop+0x18c>)
 80019f2:	fba3 1302 	umull	r1, r3, r3, r2
 80019f6:	0899      	lsrs	r1, r3, #2
 80019f8:	460b      	mov	r3, r1
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	440b      	add	r3, r1
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	bf14      	ite	ne
 8001a06:	2301      	movne	r3, #1
 8001a08:	2300      	moveq	r3, #0
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	2102      	movs	r1, #2
 8001a10:	484d      	ldr	r0, [pc, #308]	; (8001b48 <loop+0x188>)
 8001a12:	f002 f98f 	bl	8003d34 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(P7_GPIO_Port, P7_Pin, (i % 5 == 0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001a16:	4b4b      	ldr	r3, [pc, #300]	; (8001b44 <loop+0x184>)
 8001a18:	781a      	ldrb	r2, [r3, #0]
 8001a1a:	4b4c      	ldr	r3, [pc, #304]	; (8001b4c <loop+0x18c>)
 8001a1c:	fba3 1302 	umull	r1, r3, r3, r2
 8001a20:	0899      	lsrs	r1, r3, #2
 8001a22:	460b      	mov	r3, r1
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	440b      	add	r3, r1
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	bf14      	ite	ne
 8001a30:	2301      	movne	r3, #1
 8001a32:	2300      	moveq	r3, #0
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	461a      	mov	r2, r3
 8001a38:	2110      	movs	r1, #16
 8001a3a:	4843      	ldr	r0, [pc, #268]	; (8001b48 <loop+0x188>)
 8001a3c:	f002 f97a 	bl	8003d34 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_SET);
 8001a40:	2201      	movs	r2, #1
 8001a42:	2180      	movs	r1, #128	; 0x80
 8001a44:	4842      	ldr	r0, [pc, #264]	; (8001b50 <loop+0x190>)
 8001a46:	f002 f975 	bl	8003d34 <HAL_GPIO_WritePin>
 8001a4a:	e010      	b.n	8001a6e <loop+0xae>
		}
		else
		{
			haltMotors();
 8001a4c:	f000 f96e 	bl	8001d2c <haltMotors>
			HAL_GPIO_WritePin(EN_L_GPIO_Port, EN_L_Pin, GPIO_PIN_RESET);
 8001a50:	2200      	movs	r2, #0
 8001a52:	2102      	movs	r1, #2
 8001a54:	483c      	ldr	r0, [pc, #240]	; (8001b48 <loop+0x188>)
 8001a56:	f002 f96d 	bl	8003d34 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(P7_GPIO_Port, P7_Pin, GPIO_PIN_RESET);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	2110      	movs	r1, #16
 8001a5e:	483a      	ldr	r0, [pc, #232]	; (8001b48 <loop+0x188>)
 8001a60:	f002 f968 	bl	8003d34 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_RESET);
 8001a64:	2200      	movs	r2, #0
 8001a66:	2180      	movs	r1, #128	; 0x80
 8001a68:	4839      	ldr	r0, [pc, #228]	; (8001b50 <loop+0x190>)
 8001a6a:	f002 f963 	bl	8003d34 <HAL_GPIO_WritePin>
		}

		HAL_Delay(100);
 8001a6e:	2064      	movs	r0, #100	; 0x64
 8001a70:	f001 fade 	bl	8003030 <HAL_Delay>
	for (i = 0; i < 255; i++)
 8001a74:	4b33      	ldr	r3, [pc, #204]	; (8001b44 <loop+0x184>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	4b31      	ldr	r3, [pc, #196]	; (8001b44 <loop+0x184>)
 8001a7e:	701a      	strb	r2, [r3, #0]
 8001a80:	4b30      	ldr	r3, [pc, #192]	; (8001b44 <loop+0x184>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2bff      	cmp	r3, #255	; 0xff
 8001a86:	d1a1      	bne.n	80019cc <loop+0xc>
	}
	for (i = 255; i >= 0; i--)
 8001a88:	4b2e      	ldr	r3, [pc, #184]	; (8001b44 <loop+0x184>)
 8001a8a:	22ff      	movs	r2, #255	; 0xff
 8001a8c:	701a      	strb	r2, [r3, #0]
	{
		if (HAL_GPIO_ReadPin(BTN_USR_GPIO_Port, BTN_USR_Pin) == GPIO_PIN_RESET)
 8001a8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a92:	482d      	ldr	r0, [pc, #180]	; (8001b48 <loop+0x188>)
 8001a94:	f002 f936 	bl	8003d04 <HAL_GPIO_ReadPin>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d137      	bne.n	8001b0e <loop+0x14e>
		{
			setMotors(i, i);
 8001a9e:	4b29      	ldr	r3, [pc, #164]	; (8001b44 <loop+0x184>)
 8001aa0:	781a      	ldrb	r2, [r3, #0]
 8001aa2:	4b28      	ldr	r3, [pc, #160]	; (8001b44 <loop+0x184>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4610      	mov	r0, r2
 8001aaa:	f000 f8af 	bl	8001c0c <setMotors>
			HAL_GPIO_WritePin(EN_L_GPIO_Port, EN_L_Pin, (i % 5 == 0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001aae:	4b25      	ldr	r3, [pc, #148]	; (8001b44 <loop+0x184>)
 8001ab0:	781a      	ldrb	r2, [r3, #0]
 8001ab2:	4b26      	ldr	r3, [pc, #152]	; (8001b4c <loop+0x18c>)
 8001ab4:	fba3 1302 	umull	r1, r3, r3, r2
 8001ab8:	0899      	lsrs	r1, r3, #2
 8001aba:	460b      	mov	r3, r1
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	440b      	add	r3, r1
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	bf14      	ite	ne
 8001ac8:	2301      	movne	r3, #1
 8001aca:	2300      	moveq	r3, #0
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	461a      	mov	r2, r3
 8001ad0:	2102      	movs	r1, #2
 8001ad2:	481d      	ldr	r0, [pc, #116]	; (8001b48 <loop+0x188>)
 8001ad4:	f002 f92e 	bl	8003d34 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(P7_GPIO_Port, P7_Pin, (i % 5 == 0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001ad8:	4b1a      	ldr	r3, [pc, #104]	; (8001b44 <loop+0x184>)
 8001ada:	781a      	ldrb	r2, [r3, #0]
 8001adc:	4b1b      	ldr	r3, [pc, #108]	; (8001b4c <loop+0x18c>)
 8001ade:	fba3 1302 	umull	r1, r3, r3, r2
 8001ae2:	0899      	lsrs	r1, r3, #2
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	440b      	add	r3, r1
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	bf14      	ite	ne
 8001af2:	2301      	movne	r3, #1
 8001af4:	2300      	moveq	r3, #0
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	461a      	mov	r2, r3
 8001afa:	2110      	movs	r1, #16
 8001afc:	4812      	ldr	r0, [pc, #72]	; (8001b48 <loop+0x188>)
 8001afe:	f002 f919 	bl	8003d34 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_SET);
 8001b02:	2201      	movs	r2, #1
 8001b04:	2180      	movs	r1, #128	; 0x80
 8001b06:	4812      	ldr	r0, [pc, #72]	; (8001b50 <loop+0x190>)
 8001b08:	f002 f914 	bl	8003d34 <HAL_GPIO_WritePin>
 8001b0c:	e010      	b.n	8001b30 <loop+0x170>
		}
		else
		{
			haltMotors();
 8001b0e:	f000 f90d 	bl	8001d2c <haltMotors>
			HAL_GPIO_WritePin(EN_L_GPIO_Port, EN_L_Pin, GPIO_PIN_RESET);
 8001b12:	2200      	movs	r2, #0
 8001b14:	2102      	movs	r1, #2
 8001b16:	480c      	ldr	r0, [pc, #48]	; (8001b48 <loop+0x188>)
 8001b18:	f002 f90c 	bl	8003d34 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(P7_GPIO_Port, P7_Pin, GPIO_PIN_RESET);
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	2110      	movs	r1, #16
 8001b20:	4809      	ldr	r0, [pc, #36]	; (8001b48 <loop+0x188>)
 8001b22:	f002 f907 	bl	8003d34 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_RESET);
 8001b26:	2200      	movs	r2, #0
 8001b28:	2180      	movs	r1, #128	; 0x80
 8001b2a:	4809      	ldr	r0, [pc, #36]	; (8001b50 <loop+0x190>)
 8001b2c:	f002 f902 	bl	8003d34 <HAL_GPIO_WritePin>
		}

		HAL_Delay(100);
 8001b30:	2064      	movs	r0, #100	; 0x64
 8001b32:	f001 fa7d 	bl	8003030 <HAL_Delay>
	for (i = 255; i >= 0; i--)
 8001b36:	4b03      	ldr	r3, [pc, #12]	; (8001b44 <loop+0x184>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	b2da      	uxtb	r2, r3
 8001b3e:	4b01      	ldr	r3, [pc, #4]	; (8001b44 <loop+0x184>)
 8001b40:	701a      	strb	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_USR_GPIO_Port, BTN_USR_Pin) == GPIO_PIN_RESET)
 8001b42:	e7a4      	b.n	8001a8e <loop+0xce>
 8001b44:	20000adc 	.word	0x20000adc
 8001b48:	40020000 	.word	0x40020000
 8001b4c:	cccccccd 	.word	0xcccccccd
 8001b50:	40020800 	.word	0x40020800

08001b54 <radio_procedure>:
	}
	*/
}

static void radio_procedure()
{
 8001b54:	b5b0      	push	{r4, r5, r7, lr}
 8001b56:	af00      	add	r7, sp, #0
	if (nextTX)
 8001b58:	4b19      	ldr	r3, [pc, #100]	; (8001bc0 <radio_procedure+0x6c>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d026      	beq.n	8001bae <radio_procedure+0x5a>
	{
		memset(sendBuffer, 0x00, SX1278_MAX_PACKET);
 8001b60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b64:	2100      	movs	r1, #0
 8001b66:	4817      	ldr	r0, [pc, #92]	; (8001bc4 <radio_procedure+0x70>)
 8001b68:	f00c f93d 	bl	800dde6 <memset>
		message_length = sprintf(sendBuffer, "Cats can have little a salami.");
 8001b6c:	4a15      	ldr	r2, [pc, #84]	; (8001bc4 <radio_procedure+0x70>)
 8001b6e:	4b16      	ldr	r3, [pc, #88]	; (8001bc8 <radio_procedure+0x74>)
 8001b70:	4615      	mov	r5, r2
 8001b72:	461c      	mov	r4, r3
 8001b74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b76:	6028      	str	r0, [r5, #0]
 8001b78:	6069      	str	r1, [r5, #4]
 8001b7a:	60aa      	str	r2, [r5, #8]
 8001b7c:	60eb      	str	r3, [r5, #12]
 8001b7e:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001b80:	6128      	str	r0, [r5, #16]
 8001b82:	6169      	str	r1, [r5, #20]
 8001b84:	61aa      	str	r2, [r5, #24]
 8001b86:	8823      	ldrh	r3, [r4, #0]
 8001b88:	78a2      	ldrb	r2, [r4, #2]
 8001b8a:	83ab      	strh	r3, [r5, #28]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	77ab      	strb	r3, [r5, #30]
 8001b90:	231e      	movs	r3, #30
 8001b92:	b2da      	uxtb	r2, r3
 8001b94:	4b0d      	ldr	r3, [pc, #52]	; (8001bcc <radio_procedure+0x78>)
 8001b96:	701a      	strb	r2, [r3, #0]
		SX1278_transmit(&radio, sendBuffer, message_length);
 8001b98:	4b0c      	ldr	r3, [pc, #48]	; (8001bcc <radio_procedure+0x78>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	4909      	ldr	r1, [pc, #36]	; (8001bc4 <radio_procedure+0x70>)
 8001ba0:	480b      	ldr	r0, [pc, #44]	; (8001bd0 <radio_procedure+0x7c>)
 8001ba2:	f7ff fb4f 	bl	8001244 <SX1278_transmit>

		nextTX = false;
 8001ba6:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <radio_procedure+0x6c>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	701a      	strb	r2, [r3, #0]
	{
		SX1278_receive(&radio);

		nextTX = true;
	}
}
 8001bac:	e005      	b.n	8001bba <radio_procedure+0x66>
		SX1278_receive(&radio);
 8001bae:	4808      	ldr	r0, [pc, #32]	; (8001bd0 <radio_procedure+0x7c>)
 8001bb0:	f7ff fb94 	bl	80012dc <SX1278_receive>
		nextTX = true;
 8001bb4:	4b02      	ldr	r3, [pc, #8]	; (8001bc0 <radio_procedure+0x6c>)
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	701a      	strb	r2, [r3, #0]
}
 8001bba:	bf00      	nop
 8001bbc:	bdb0      	pop	{r4, r5, r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20000be0 	.word	0x20000be0
 8001bc4:	20000ae0 	.word	0x20000ae0
 8001bc8:	08011cc8 	.word	0x08011cc8
 8001bcc:	200009a0 	.word	0x200009a0
 8001bd0:	200009a4 	.word	0x200009a4

08001bd4 <dio0_IRQ>:

	return true;
}

static void dio0_IRQ()
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
	if (radio.pendingIRQ)
 8001bd8:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <dio0_IRQ+0x2c>)
 8001bda:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d008      	beq.n	8001bf4 <dio0_IRQ+0x20>
	{
		println("[LoRa] DIO0 interrupt received.");
 8001be2:	4808      	ldr	r0, [pc, #32]	; (8001c04 <dio0_IRQ+0x30>)
 8001be4:	f7ff fdc8 	bl	8001778 <println>
		SX1278_dio0_IRQ(&radio);
 8001be8:	4805      	ldr	r0, [pc, #20]	; (8001c00 <dio0_IRQ+0x2c>)
 8001bea:	f7ff fd2f 	bl	800164c <SX1278_dio0_IRQ>
		radio_procedure();
 8001bee:	f7ff ffb1 	bl	8001b54 <radio_procedure>
	}
	else
	{
		println("[LoRa] DIO0 interrupt received but NOT used!");
	}
}
 8001bf2:	e002      	b.n	8001bfa <dio0_IRQ+0x26>
		println("[LoRa] DIO0 interrupt received but NOT used!");
 8001bf4:	4804      	ldr	r0, [pc, #16]	; (8001c08 <dio0_IRQ+0x34>)
 8001bf6:	f7ff fdbf 	bl	8001778 <println>
}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	200009a4 	.word	0x200009a4
 8001c04:	08011db4 	.word	0x08011db4
 8001c08:	08011dd4 	.word	0x08011dd4

08001c0c <setMotors>:
// DRV8838 has max of 250kHz PWM frequency
// Motors will automatically turn off after (TIM4->ARR * 1ms) time, default 100ms
// Any new value applied will reset timeout timer

static void setMotors(uint8_t pwmL, uint8_t pwmR)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	460a      	mov	r2, r1
 8001c16:	71fb      	strb	r3, [r7, #7]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	71bb      	strb	r3, [r7, #6]
	//							    			some value	 / [0.0:1.0] duty cycle
	if (pwmL != 0) TIM2->CCR2 = (uint32_t)((float)TIM2->ARR / ((float)pwmL / (float)(PWM_RESOLUTION)));
 8001c1c:	79fb      	ldrb	r3, [r7, #7]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d019      	beq.n	8001c56 <setMotors+0x4a>
 8001c22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c28:	ee07 3a90 	vmov	s15, r3
 8001c2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001c30:	79fb      	ldrb	r3, [r7, #7]
 8001c32:	ee07 3a90 	vmov	s15, r3
 8001c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c3a:	ed9f 6a39 	vldr	s12, [pc, #228]	; 8001d20 <setMotors+0x114>
 8001c3e:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8001c42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c4e:	ee17 2a90 	vmov	r2, s15
 8001c52:	639a      	str	r2, [r3, #56]	; 0x38
 8001c54:	e005      	b.n	8001c62 <setMotors+0x56>
	else TIM2->CCR2 = TIM2->ARR;
 8001c56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c60:	6393      	str	r3, [r2, #56]	; 0x38
	if (pwmR != 0) TIM2->CCR4 = (uint32_t)((float)TIM2->ARR / ((float)pwmR / (float)(PWM_RESOLUTION)));
 8001c62:	79bb      	ldrb	r3, [r7, #6]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d019      	beq.n	8001c9c <setMotors+0x90>
 8001c68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6e:	ee07 3a90 	vmov	s15, r3
 8001c72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001c76:	79bb      	ldrb	r3, [r7, #6]
 8001c78:	ee07 3a90 	vmov	s15, r3
 8001c7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c80:	ed9f 6a27 	vldr	s12, [pc, #156]	; 8001d20 <setMotors+0x114>
 8001c84:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8001c88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c94:	ee17 2a90 	vmov	r2, s15
 8001c98:	641a      	str	r2, [r3, #64]	; 0x40
 8001c9a:	e005      	b.n	8001ca8 <setMotors+0x9c>
	else TIM2->CCR4 = TIM2->ARR;
 8001c9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ca0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca6:	6413      	str	r3, [r2, #64]	; 0x40

	//todelete
	if (pwmR != 0) TIM3->CCR3 = (uint32_t)((float)TIM3->ARR / ((float)pwmR / (float)(PWM_RESOLUTION)));
 8001ca8:	79bb      	ldrb	r3, [r7, #6]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d017      	beq.n	8001cde <setMotors+0xd2>
 8001cae:	4b1d      	ldr	r3, [pc, #116]	; (8001d24 <setMotors+0x118>)
 8001cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb2:	ee07 3a90 	vmov	s15, r3
 8001cb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001cba:	79bb      	ldrb	r3, [r7, #6]
 8001cbc:	ee07 3a90 	vmov	s15, r3
 8001cc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cc4:	ed9f 6a16 	vldr	s12, [pc, #88]	; 8001d20 <setMotors+0x114>
 8001cc8:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8001ccc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cd0:	4b14      	ldr	r3, [pc, #80]	; (8001d24 <setMotors+0x118>)
 8001cd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cd6:	ee17 2a90 	vmov	r2, s15
 8001cda:	63da      	str	r2, [r3, #60]	; 0x3c
 8001cdc:	e003      	b.n	8001ce6 <setMotors+0xda>
	else TIM3->CCR3 = TIM3->ARR;
 8001cde:	4b11      	ldr	r3, [pc, #68]	; (8001d24 <setMotors+0x118>)
 8001ce0:	4a10      	ldr	r2, [pc, #64]	; (8001d24 <setMotors+0x118>)
 8001ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce4:	63d3      	str	r3, [r2, #60]	; 0x3c

	HAL_TIM_PWM_Start(Get_TIM2_Instance(), TIM_CHANNEL_2);
 8001ce6:	f000 fd6f 	bl	80027c8 <Get_TIM2_Instance>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2104      	movs	r1, #4
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f006 fa2e 	bl	8008150 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Get_TIM2_Instance(), TIM_CHANNEL_4);
 8001cf4:	f000 fd68 	bl	80027c8 <Get_TIM2_Instance>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	210c      	movs	r1, #12
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f006 fa27 	bl	8008150 <HAL_TIM_PWM_Start>

	//todelete
	HAL_TIM_PWM_Start(Get_TIM3_Instance(), TIM_CHANNEL_3);
 8001d02:	f000 fd6b 	bl	80027dc <Get_TIM3_Instance>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2108      	movs	r1, #8
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f006 fa20 	bl	8008150 <HAL_TIM_PWM_Start>

	TIM4->CNT = 0;	// reset timer counter -> clears motor timeout
 8001d10:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <setMotors+0x11c>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001d16:	bf00      	nop
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	43800000 	.word	0x43800000
 8001d24:	40000400 	.word	0x40000400
 8001d28:	40000800 	.word	0x40000800

08001d2c <haltMotors>:

static void haltMotors()
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
	// Function called on TIM4 overflow interrupt
	TIM2->CCR2 = 0;
 8001d30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d34:	2200      	movs	r2, #0
 8001d36:	639a      	str	r2, [r3, #56]	; 0x38
	TIM2->CCR4 = 0;
 8001d38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	641a      	str	r2, [r3, #64]	; 0x40

	//todelete
	TIM3->CCR3 = 0;
 8001d40:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <haltMotors+0x2c>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	63da      	str	r2, [r3, #60]	; 0x3c

	TIM4->CNT = 0;	// reset timer counter -> clears motor timeout
 8001d46:	4b05      	ldr	r3, [pc, #20]	; (8001d5c <haltMotors+0x30>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001d4c:	bf00      	nop
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	40000400 	.word	0x40000400
 8001d5c:	40000800 	.word	0x40000800

08001d60 <enableMotors>:

static void enableMotors()
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
	haltMotors();
 8001d64:	f7ff ffe2 	bl	8001d2c <haltMotors>

	MAX_PWM_FREQ = 42000000 / (2 * PWM_RESOLUTION); // 82031 Hz for 256 resolution
 8001d68:	4b1e      	ldr	r3, [pc, #120]	; (8001de4 <enableMotors+0x84>)
 8001d6a:	4a1f      	ldr	r2, [pc, #124]	; (8001de8 <enableMotors+0x88>)
 8001d6c:	601a      	str	r2, [r3, #0]
	setPwmFrequency(MAX_PWM_FREQ);
 8001d6e:	4b1d      	ldr	r3, [pc, #116]	; (8001de4 <enableMotors+0x84>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f000 f842 	bl	8001dfc <setPwmFrequency>

	motL_forward = true;
 8001d78:	4b1c      	ldr	r3, [pc, #112]	; (8001dec <enableMotors+0x8c>)
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	701a      	strb	r2, [r3, #0]
	motR_forward = true;
 8001d7e:	4b1c      	ldr	r3, [pc, #112]	; (8001df0 <enableMotors+0x90>)
 8001d80:	2201      	movs	r2, #1
 8001d82:	701a      	strb	r2, [r3, #0]

	// flip direction based on config
	HAL_GPIO_WritePin(PH_L_GPIO_Port, PH_L_Pin, motL_forward ^ MOTOR_L_DIR);
 8001d84:	4b19      	ldr	r3, [pc, #100]	; (8001dec <enableMotors+0x8c>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	f083 0301 	eor.w	r3, r3, #1
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	461a      	mov	r2, r3
 8001d90:	2101      	movs	r1, #1
 8001d92:	4818      	ldr	r0, [pc, #96]	; (8001df4 <enableMotors+0x94>)
 8001d94:	f001 ffce 	bl	8003d34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PH_R_GPIO_Port, PH_R_Pin, motR_forward ^ MOTOR_R_DIR);
 8001d98:	4b15      	ldr	r3, [pc, #84]	; (8001df0 <enableMotors+0x90>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	f083 0301 	eor.w	r3, r3, #1
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	461a      	mov	r2, r3
 8001da4:	2104      	movs	r1, #4
 8001da6:	4813      	ldr	r0, [pc, #76]	; (8001df4 <enableMotors+0x94>)
 8001da8:	f001 ffc4 	bl	8003d34 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(Get_TIM2_Instance(), TIM_CHANNEL_2);
 8001dac:	f000 fd0c 	bl	80027c8 <Get_TIM2_Instance>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2104      	movs	r1, #4
 8001db4:	4618      	mov	r0, r3
 8001db6:	f006 f9cb 	bl	8008150 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Get_TIM2_Instance(), TIM_CHANNEL_4);
 8001dba:	f000 fd05 	bl	80027c8 <Get_TIM2_Instance>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	210c      	movs	r1, #12
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f006 f9c4 	bl	8008150 <HAL_TIM_PWM_Start>

	//todelete
	HAL_TIM_PWM_Start(Get_TIM3_Instance(), TIM_CHANNEL_3);
 8001dc8:	f000 fd08 	bl	80027dc <Get_TIM3_Instance>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2108      	movs	r1, #8
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f006 f9bd 	bl	8008150 <HAL_TIM_PWM_Start>

	haltMotors();
 8001dd6:	f7ff ffa9 	bl	8001d2c <haltMotors>
	println("[MOT] MOTORS ENABLED!!");
 8001dda:	4807      	ldr	r0, [pc, #28]	; (8001df8 <enableMotors+0x98>)
 8001ddc:	f7ff fccc 	bl	8001778 <println>
}
 8001de0:	bf00      	nop
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	20000000 	.word	0x20000000
 8001de8:	0001406f 	.word	0x0001406f
 8001dec:	20000004 	.word	0x20000004
 8001df0:	20000005 	.word	0x20000005
 8001df4:	40020000 	.word	0x40020000
 8001df8:	08011f20 	.word	0x08011f20

08001dfc <setPwmFrequency>:
	HAL_TIM_PWM_Stop(Get_TIM2_Instance(), TIM_CHANNEL_2);
	HAL_TIM_PWM_Stop(Get_TIM2_Instance(), TIM_CHANNEL_4);
}

static void setPwmFrequency(uint32_t f_hz)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
	// ARR = Clock frequency / (2 * Frequency)
	// Clock frequency (42MHz) = Source frequency (42Mhz) / PSC (1)

	//TIM2->ARR = (uint32_t)(42000000 / TIM2->PSC) / (2 * f_hz);

	if (f_hz > MAX_PWM_FREQ)
 8001e04:	4b1c      	ldr	r3, [pc, #112]	; (8001e78 <setPwmFrequency+0x7c>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d908      	bls.n	8001e20 <setPwmFrequency+0x24>
	{
		println("[MOT] PWM frequency too high! Setting maximum.");
 8001e0e:	481b      	ldr	r0, [pc, #108]	; (8001e7c <setPwmFrequency+0x80>)
 8001e10:	f7ff fcb2 	bl	8001778 <println>
		setPwmFrequency(MAX_PWM_FREQ);
 8001e14:	4b18      	ldr	r3, [pc, #96]	; (8001e78 <setPwmFrequency+0x7c>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff ffef 	bl	8001dfc <setPwmFrequency>
		//todelete
		TIM3->CNT = 0;
		TIM3->ARR = 42000000 / (2 * f_hz);

	}
}
 8001e1e:	e026      	b.n	8001e6e <setPwmFrequency+0x72>
		TIM2->CNT = 0;
 8001e20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e24:	2200      	movs	r2, #0
 8001e26:	625a      	str	r2, [r3, #36]	; 0x24
		TIM2->ARR = 42000000 / (2 * f_hz);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e30:	4913      	ldr	r1, [pc, #76]	; (8001e80 <setPwmFrequency+0x84>)
 8001e32:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e36:	62d3      	str	r3, [r2, #44]	; 0x2c
		printLen = sprintf(printBuffer, "[MOT] Frequency set to: %dHz\n\r", (uint16_t)f_hz);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	4911      	ldr	r1, [pc, #68]	; (8001e84 <setPwmFrequency+0x88>)
 8001e40:	4811      	ldr	r0, [pc, #68]	; (8001e88 <setPwmFrequency+0x8c>)
 8001e42:	f00c fed5 	bl	800ebf0 <siprintf>
 8001e46:	4603      	mov	r3, r0
 8001e48:	461a      	mov	r2, r3
 8001e4a:	4b10      	ldr	r3, [pc, #64]	; (8001e8c <setPwmFrequency+0x90>)
 8001e4c:	601a      	str	r2, [r3, #0]
		printv(printBuffer, printLen);
 8001e4e:	4b0f      	ldr	r3, [pc, #60]	; (8001e8c <setPwmFrequency+0x90>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4619      	mov	r1, r3
 8001e54:	480c      	ldr	r0, [pc, #48]	; (8001e88 <setPwmFrequency+0x8c>)
 8001e56:	f7ff fcd1 	bl	80017fc <printv>
		TIM3->CNT = 0;
 8001e5a:	4b0d      	ldr	r3, [pc, #52]	; (8001e90 <setPwmFrequency+0x94>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	625a      	str	r2, [r3, #36]	; 0x24
		TIM3->ARR = 42000000 / (2 * f_hz);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	4a0a      	ldr	r2, [pc, #40]	; (8001e90 <setPwmFrequency+0x94>)
 8001e66:	4906      	ldr	r1, [pc, #24]	; (8001e80 <setPwmFrequency+0x84>)
 8001e68:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e6c:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8001e6e:	bf00      	nop
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	20000000 	.word	0x20000000
 8001e7c:	08011f38 	.word	0x08011f38
 8001e80:	0280de80 	.word	0x0280de80
 8001e84:	08011f68 	.word	0x08011f68
 8001e88:	20000578 	.word	0x20000578
 8001e8c:	20000574 	.word	0x20000574
 8001e90:	40000400 	.word	0x40000400

08001e94 <setMotorTimeout>:

static void setMotorTimeout(uint32_t timeout_ms)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
	TIM4->CNT = 0;
 8001e9c:	4b0d      	ldr	r3, [pc, #52]	; (8001ed4 <setMotorTimeout+0x40>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4->ARR = timeout_ms;
 8001ea2:	4a0c      	ldr	r2, [pc, #48]	; (8001ed4 <setMotorTimeout+0x40>)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	62d3      	str	r3, [r2, #44]	; 0x2c
	printLen = sprintf(printBuffer, "[MOT] Timeout set to: %dms\n\r", (uint16_t)timeout_ms);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	461a      	mov	r2, r3
 8001eae:	490a      	ldr	r1, [pc, #40]	; (8001ed8 <setMotorTimeout+0x44>)
 8001eb0:	480a      	ldr	r0, [pc, #40]	; (8001edc <setMotorTimeout+0x48>)
 8001eb2:	f00c fe9d 	bl	800ebf0 <siprintf>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	461a      	mov	r2, r3
 8001eba:	4b09      	ldr	r3, [pc, #36]	; (8001ee0 <setMotorTimeout+0x4c>)
 8001ebc:	601a      	str	r2, [r3, #0]
	printv(printBuffer, printLen);
 8001ebe:	4b08      	ldr	r3, [pc, #32]	; (8001ee0 <setMotorTimeout+0x4c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4805      	ldr	r0, [pc, #20]	; (8001edc <setMotorTimeout+0x48>)
 8001ec6:	f7ff fc99 	bl	80017fc <printv>
}
 8001eca:	bf00      	nop
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40000800 	.word	0x40000800
 8001ed8:	08011f88 	.word	0x08011f88
 8001edc:	20000578 	.word	0x20000578
 8001ee0:	20000574 	.word	0x20000574

08001ee4 <motorTimeout>:

static void motorTimeout()
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
	haltMotors();
 8001ee8:	f7ff ff20 	bl	8001d2c <haltMotors>
	println("[MOT] Motors halted due to timeout!");
 8001eec:	4802      	ldr	r0, [pc, #8]	; (8001ef8 <motorTimeout+0x14>)
 8001eee:	f7ff fc43 	bl	8001778 <println>
}
 8001ef2:	bf00      	nop
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	08011fa8 	.word	0x08011fa8

08001efc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f00:	f001 f824 	bl	8002f4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f04:	f000 f834 	bl	8001f70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f08:	f000 fb6a 	bl	80025e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f0c:	f000 fb40 	bl	8002590 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 8001f10:	f000 f938 	bl	8002184 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8001f14:	f009 fbb2 	bl	800b67c <MX_FATFS_Init>
  MX_I2C1_Init();
 8001f18:	f000 f8ac 	bl	8002074 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8001f1c:	f00b f9fa 	bl	800d314 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8001f20:	f000 f950 	bl	80021c4 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8001f24:	f000 fb0a 	bl	800253c <MX_USART3_UART_Init>
  MX_RTC_Init();
 8001f28:	f000 f8d2 	bl	80020d0 <MX_RTC_Init>
  MX_TIM2_Init();
 8001f2c:	f000 f980 	bl	8002230 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001f30:	f000 fab6 	bl	80024a0 <MX_TIM5_Init>
  MX_TIM3_Init();
 8001f34:	f000 f9f0 	bl	8002318 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001f38:	f000 fa64 	bl	8002404 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  setup();
 8001f3c:	f7ff fc7e 	bl	800183c <setup>

  // Start motor timeout interrupt timer
  HAL_TIM_Base_Start_IT(&htim4);
 8001f40:	4807      	ldr	r0, [pc, #28]	; (8001f60 <main+0x64>)
 8001f42:	f006 f8ac 	bl	800809e <HAL_TIM_Base_Start_IT>

  HAL_TIM_Base_Start_IT(&htim2);
 8001f46:	4807      	ldr	r0, [pc, #28]	; (8001f64 <main+0x68>)
 8001f48:	f006 f8a9 	bl	800809e <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8001f4c:	4806      	ldr	r0, [pc, #24]	; (8001f68 <main+0x6c>)
 8001f4e:	f006 f8a6 	bl	800809e <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 8001f52:	4806      	ldr	r0, [pc, #24]	; (8001f6c <main+0x70>)
 8001f54:	f006 f8a3 	bl	800809e <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	loop();
 8001f58:	f7ff fd32 	bl	80019c0 <loop>
 8001f5c:	e7fc      	b.n	8001f58 <main+0x5c>
 8001f5e:	bf00      	nop
 8001f60:	20000c6c 	.word	0x20000c6c
 8001f64:	20000f1c 	.word	0x20000f1c
 8001f68:	20000d80 	.word	0x20000d80
 8001f6c:	20000d40 	.word	0x20000d40

08001f70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b098      	sub	sp, #96	; 0x60
 8001f74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f76:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f7a:	2230      	movs	r2, #48	; 0x30
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f00b ff31 	bl	800dde6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f84:	f107 031c 	add.w	r3, r7, #28
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	60da      	str	r2, [r3, #12]
 8001f92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f94:	f107 030c 	add.w	r3, r7, #12
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	605a      	str	r2, [r3, #4]
 8001f9e:	609a      	str	r2, [r3, #8]
 8001fa0:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60bb      	str	r3, [r7, #8]
 8001fa6:	4b31      	ldr	r3, [pc, #196]	; (800206c <SystemClock_Config+0xfc>)
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001faa:	4a30      	ldr	r2, [pc, #192]	; (800206c <SystemClock_Config+0xfc>)
 8001fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fb2:	4b2e      	ldr	r3, [pc, #184]	; (800206c <SystemClock_Config+0xfc>)
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fba:	60bb      	str	r3, [r7, #8]
 8001fbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	607b      	str	r3, [r7, #4]
 8001fc2:	4b2b      	ldr	r3, [pc, #172]	; (8002070 <SystemClock_Config+0x100>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a2a      	ldr	r2, [pc, #168]	; (8002070 <SystemClock_Config+0x100>)
 8001fc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fcc:	6013      	str	r3, [r2, #0]
 8001fce:	4b28      	ldr	r3, [pc, #160]	; (8002070 <SystemClock_Config+0x100>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fd6:	607b      	str	r3, [r7, #4]
 8001fd8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001fda:	2305      	movs	r3, #5
 8001fdc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001fde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fe2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fe8:	2302      	movs	r3, #2
 8001fea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001fec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ff0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8001ff2:	2306      	movs	r3, #6
 8001ff4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001ff6:	23a8      	movs	r3, #168	; 0xa8
 8001ff8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001ffe:	2307      	movs	r3, #7
 8002000:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002002:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002006:	4618      	mov	r0, r3
 8002008:	f003 f988 	bl	800531c <HAL_RCC_OscConfig>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002012:	f000 fc0d 	bl	8002830 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002016:	230f      	movs	r3, #15
 8002018:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800201a:	2302      	movs	r3, #2
 800201c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800201e:	2300      	movs	r3, #0
 8002020:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002022:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002026:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002028:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800202c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800202e:	f107 031c 	add.w	r3, r7, #28
 8002032:	2105      	movs	r1, #5
 8002034:	4618      	mov	r0, r3
 8002036:	f003 fbe1 	bl	80057fc <HAL_RCC_ClockConfig>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002040:	f000 fbf6 	bl	8002830 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002044:	2302      	movs	r3, #2
 8002046:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002048:	f44f 7380 	mov.w	r3, #256	; 0x100
 800204c:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800204e:	f107 030c 	add.w	r3, r7, #12
 8002052:	4618      	mov	r0, r3
 8002054:	f003 fd9e 	bl	8005b94 <HAL_RCCEx_PeriphCLKConfig>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800205e:	f000 fbe7 	bl	8002830 <Error_Handler>
  }
}
 8002062:	bf00      	nop
 8002064:	3760      	adds	r7, #96	; 0x60
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	40023800 	.word	0x40023800
 8002070:	40007000 	.word	0x40007000

08002074 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002078:	4b12      	ldr	r3, [pc, #72]	; (80020c4 <MX_I2C1_Init+0x50>)
 800207a:	4a13      	ldr	r2, [pc, #76]	; (80020c8 <MX_I2C1_Init+0x54>)
 800207c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800207e:	4b11      	ldr	r3, [pc, #68]	; (80020c4 <MX_I2C1_Init+0x50>)
 8002080:	4a12      	ldr	r2, [pc, #72]	; (80020cc <MX_I2C1_Init+0x58>)
 8002082:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002084:	4b0f      	ldr	r3, [pc, #60]	; (80020c4 <MX_I2C1_Init+0x50>)
 8002086:	2200      	movs	r2, #0
 8002088:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800208a:	4b0e      	ldr	r3, [pc, #56]	; (80020c4 <MX_I2C1_Init+0x50>)
 800208c:	2200      	movs	r2, #0
 800208e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002090:	4b0c      	ldr	r3, [pc, #48]	; (80020c4 <MX_I2C1_Init+0x50>)
 8002092:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002096:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002098:	4b0a      	ldr	r3, [pc, #40]	; (80020c4 <MX_I2C1_Init+0x50>)
 800209a:	2200      	movs	r2, #0
 800209c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800209e:	4b09      	ldr	r3, [pc, #36]	; (80020c4 <MX_I2C1_Init+0x50>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020a4:	4b07      	ldr	r3, [pc, #28]	; (80020c4 <MX_I2C1_Init+0x50>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020aa:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <MX_I2C1_Init+0x50>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020b0:	4804      	ldr	r0, [pc, #16]	; (80020c4 <MX_I2C1_Init+0x50>)
 80020b2:	f001 fe71 	bl	8003d98 <HAL_I2C_Init>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80020bc:	f000 fbb8 	bl	8002830 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80020c0:	bf00      	nop
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	20000cec 	.word	0x20000cec
 80020c8:	40005400 	.word	0x40005400
 80020cc:	000186a0 	.word	0x000186a0

080020d0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80020d6:	1d3b      	adds	r3, r7, #4
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	605a      	str	r2, [r3, #4]
 80020de:	609a      	str	r2, [r3, #8]
 80020e0:	60da      	str	r2, [r3, #12]
 80020e2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80020e4:	2300      	movs	r3, #0
 80020e6:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80020e8:	4b24      	ldr	r3, [pc, #144]	; (800217c <MX_RTC_Init+0xac>)
 80020ea:	4a25      	ldr	r2, [pc, #148]	; (8002180 <MX_RTC_Init+0xb0>)
 80020ec:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80020ee:	4b23      	ldr	r3, [pc, #140]	; (800217c <MX_RTC_Init+0xac>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80020f4:	4b21      	ldr	r3, [pc, #132]	; (800217c <MX_RTC_Init+0xac>)
 80020f6:	227f      	movs	r2, #127	; 0x7f
 80020f8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80020fa:	4b20      	ldr	r3, [pc, #128]	; (800217c <MX_RTC_Init+0xac>)
 80020fc:	22ff      	movs	r2, #255	; 0xff
 80020fe:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002100:	4b1e      	ldr	r3, [pc, #120]	; (800217c <MX_RTC_Init+0xac>)
 8002102:	2200      	movs	r2, #0
 8002104:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002106:	4b1d      	ldr	r3, [pc, #116]	; (800217c <MX_RTC_Init+0xac>)
 8002108:	2200      	movs	r2, #0
 800210a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800210c:	4b1b      	ldr	r3, [pc, #108]	; (800217c <MX_RTC_Init+0xac>)
 800210e:	2200      	movs	r2, #0
 8002110:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002112:	481a      	ldr	r0, [pc, #104]	; (800217c <MX_RTC_Init+0xac>)
 8002114:	f003 fe20 	bl	8005d58 <HAL_RTC_Init>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800211e:	f000 fb87 	bl	8002830 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8002122:	2300      	movs	r3, #0
 8002124:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8002126:	2300      	movs	r3, #0
 8002128:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800212a:	2300      	movs	r3, #0
 800212c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800212e:	2300      	movs	r3, #0
 8002130:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002132:	2300      	movs	r3, #0
 8002134:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002136:	1d3b      	adds	r3, r7, #4
 8002138:	2201      	movs	r2, #1
 800213a:	4619      	mov	r1, r3
 800213c:	480f      	ldr	r0, [pc, #60]	; (800217c <MX_RTC_Init+0xac>)
 800213e:	f003 fe9c 	bl	8005e7a <HAL_RTC_SetTime>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8002148:	f000 fb72 	bl	8002830 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800214c:	2301      	movs	r3, #1
 800214e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002150:	2301      	movs	r3, #1
 8002152:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8002154:	2301      	movs	r3, #1
 8002156:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x20;
 8002158:	2320      	movs	r3, #32
 800215a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800215c:	463b      	mov	r3, r7
 800215e:	2201      	movs	r2, #1
 8002160:	4619      	mov	r1, r3
 8002162:	4806      	ldr	r0, [pc, #24]	; (800217c <MX_RTC_Init+0xac>)
 8002164:	f003 ff46 	bl	8005ff4 <HAL_RTC_SetDate>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800216e:	f000 fb5f 	bl	8002830 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002172:	bf00      	nop
 8002174:	3718      	adds	r7, #24
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	20000dc0 	.word	0x20000dc0
 8002180:	40002800 	.word	0x40002800

08002184 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8002188:	4b0c      	ldr	r3, [pc, #48]	; (80021bc <MX_SDIO_SD_Init+0x38>)
 800218a:	4a0d      	ldr	r2, [pc, #52]	; (80021c0 <MX_SDIO_SD_Init+0x3c>)
 800218c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800218e:	4b0b      	ldr	r3, [pc, #44]	; (80021bc <MX_SDIO_SD_Init+0x38>)
 8002190:	2200      	movs	r2, #0
 8002192:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002194:	4b09      	ldr	r3, [pc, #36]	; (80021bc <MX_SDIO_SD_Init+0x38>)
 8002196:	2200      	movs	r2, #0
 8002198:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800219a:	4b08      	ldr	r3, [pc, #32]	; (80021bc <MX_SDIO_SD_Init+0x38>)
 800219c:	2200      	movs	r2, #0
 800219e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80021a0:	4b06      	ldr	r3, [pc, #24]	; (80021bc <MX_SDIO_SD_Init+0x38>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80021a6:	4b05      	ldr	r3, [pc, #20]	; (80021bc <MX_SDIO_SD_Init+0x38>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80021ac:	4b03      	ldr	r3, [pc, #12]	; (80021bc <MX_SDIO_SD_Init+0x38>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80021b2:	bf00      	nop
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	20000e40 	.word	0x20000e40
 80021c0:	40012c00 	.word	0x40012c00

080021c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80021c8:	4b17      	ldr	r3, [pc, #92]	; (8002228 <MX_SPI1_Init+0x64>)
 80021ca:	4a18      	ldr	r2, [pc, #96]	; (800222c <MX_SPI1_Init+0x68>)
 80021cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80021ce:	4b16      	ldr	r3, [pc, #88]	; (8002228 <MX_SPI1_Init+0x64>)
 80021d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80021d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80021d6:	4b14      	ldr	r3, [pc, #80]	; (8002228 <MX_SPI1_Init+0x64>)
 80021d8:	2200      	movs	r2, #0
 80021da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80021dc:	4b12      	ldr	r3, [pc, #72]	; (8002228 <MX_SPI1_Init+0x64>)
 80021de:	2200      	movs	r2, #0
 80021e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021e2:	4b11      	ldr	r3, [pc, #68]	; (8002228 <MX_SPI1_Init+0x64>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021e8:	4b0f      	ldr	r3, [pc, #60]	; (8002228 <MX_SPI1_Init+0x64>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80021ee:	4b0e      	ldr	r3, [pc, #56]	; (8002228 <MX_SPI1_Init+0x64>)
 80021f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021f6:	4b0c      	ldr	r3, [pc, #48]	; (8002228 <MX_SPI1_Init+0x64>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021fc:	4b0a      	ldr	r3, [pc, #40]	; (8002228 <MX_SPI1_Init+0x64>)
 80021fe:	2200      	movs	r2, #0
 8002200:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002202:	4b09      	ldr	r3, [pc, #36]	; (8002228 <MX_SPI1_Init+0x64>)
 8002204:	2200      	movs	r2, #0
 8002206:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002208:	4b07      	ldr	r3, [pc, #28]	; (8002228 <MX_SPI1_Init+0x64>)
 800220a:	2200      	movs	r2, #0
 800220c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800220e:	4b06      	ldr	r3, [pc, #24]	; (8002228 <MX_SPI1_Init+0x64>)
 8002210:	220a      	movs	r2, #10
 8002212:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002214:	4804      	ldr	r0, [pc, #16]	; (8002228 <MX_SPI1_Init+0x64>)
 8002216:	f005 fb23 	bl	8007860 <HAL_SPI_Init>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002220:	f000 fb06 	bl	8002830 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002224:	bf00      	nop
 8002226:	bd80      	pop	{r7, pc}
 8002228:	20000ec4 	.word	0x20000ec4
 800222c:	40013000 	.word	0x40013000

08002230 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b08e      	sub	sp, #56	; 0x38
 8002234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002236:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800223a:	2200      	movs	r2, #0
 800223c:	601a      	str	r2, [r3, #0]
 800223e:	605a      	str	r2, [r3, #4]
 8002240:	609a      	str	r2, [r3, #8]
 8002242:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002244:	f107 0320 	add.w	r3, r7, #32
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800224e:	1d3b      	adds	r3, r7, #4
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	605a      	str	r2, [r3, #4]
 8002256:	609a      	str	r2, [r3, #8]
 8002258:	60da      	str	r2, [r3, #12]
 800225a:	611a      	str	r2, [r3, #16]
 800225c:	615a      	str	r2, [r3, #20]
 800225e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002260:	4b2c      	ldr	r3, [pc, #176]	; (8002314 <MX_TIM2_Init+0xe4>)
 8002262:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002266:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002268:	4b2a      	ldr	r3, [pc, #168]	; (8002314 <MX_TIM2_Init+0xe4>)
 800226a:	2200      	movs	r2, #0
 800226c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 800226e:	4b29      	ldr	r3, [pc, #164]	; (8002314 <MX_TIM2_Init+0xe4>)
 8002270:	2240      	movs	r2, #64	; 0x40
 8002272:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8002274:	4b27      	ldr	r3, [pc, #156]	; (8002314 <MX_TIM2_Init+0xe4>)
 8002276:	2200      	movs	r2, #0
 8002278:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800227a:	4b26      	ldr	r3, [pc, #152]	; (8002314 <MX_TIM2_Init+0xe4>)
 800227c:	2200      	movs	r2, #0
 800227e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002280:	4b24      	ldr	r3, [pc, #144]	; (8002314 <MX_TIM2_Init+0xe4>)
 8002282:	2200      	movs	r2, #0
 8002284:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002286:	4823      	ldr	r0, [pc, #140]	; (8002314 <MX_TIM2_Init+0xe4>)
 8002288:	f005 fede 	bl	8008048 <HAL_TIM_Base_Init>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8002292:	f000 facd 	bl	8002830 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002296:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800229a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800229c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022a0:	4619      	mov	r1, r3
 80022a2:	481c      	ldr	r0, [pc, #112]	; (8002314 <MX_TIM2_Init+0xe4>)
 80022a4:	f006 f960 	bl	8008568 <HAL_TIM_ConfigClockSource>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80022ae:	f000 fabf 	bl	8002830 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80022b2:	4818      	ldr	r0, [pc, #96]	; (8002314 <MX_TIM2_Init+0xe4>)
 80022b4:	f005 ff17 	bl	80080e6 <HAL_TIM_PWM_Init>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80022be:	f000 fab7 	bl	8002830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022c2:	2300      	movs	r3, #0
 80022c4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022c6:	2300      	movs	r3, #0
 80022c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022ca:	f107 0320 	add.w	r3, r7, #32
 80022ce:	4619      	mov	r1, r3
 80022d0:	4810      	ldr	r0, [pc, #64]	; (8002314 <MX_TIM2_Init+0xe4>)
 80022d2:	f006 fd39 	bl	8008d48 <HAL_TIMEx_MasterConfigSynchronization>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80022dc:	f000 faa8 	bl	8002830 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80022e0:	2370      	movs	r3, #112	; 0x70
 80022e2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80022e4:	2300      	movs	r3, #0
 80022e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022e8:	2300      	movs	r3, #0
 80022ea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022ec:	2300      	movs	r3, #0
 80022ee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80022f0:	1d3b      	adds	r3, r7, #4
 80022f2:	220c      	movs	r2, #12
 80022f4:	4619      	mov	r1, r3
 80022f6:	4807      	ldr	r0, [pc, #28]	; (8002314 <MX_TIM2_Init+0xe4>)
 80022f8:	f006 f870 	bl	80083dc <HAL_TIM_PWM_ConfigChannel>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8002302:	f000 fa95 	bl	8002830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002306:	4803      	ldr	r0, [pc, #12]	; (8002314 <MX_TIM2_Init+0xe4>)
 8002308:	f000 fcd0 	bl	8002cac <HAL_TIM_MspPostInit>

}
 800230c:	bf00      	nop
 800230e:	3738      	adds	r7, #56	; 0x38
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	20000f1c 	.word	0x20000f1c

08002318 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b08e      	sub	sp, #56	; 0x38
 800231c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800231e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002322:	2200      	movs	r2, #0
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	605a      	str	r2, [r3, #4]
 8002328:	609a      	str	r2, [r3, #8]
 800232a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800232c:	f107 0320 	add.w	r3, r7, #32
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002336:	1d3b      	adds	r3, r7, #4
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	605a      	str	r2, [r3, #4]
 800233e:	609a      	str	r2, [r3, #8]
 8002340:	60da      	str	r2, [r3, #12]
 8002342:	611a      	str	r2, [r3, #16]
 8002344:	615a      	str	r2, [r3, #20]
 8002346:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002348:	4b2c      	ldr	r3, [pc, #176]	; (80023fc <MX_TIM3_Init+0xe4>)
 800234a:	4a2d      	ldr	r2, [pc, #180]	; (8002400 <MX_TIM3_Init+0xe8>)
 800234c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800234e:	4b2b      	ldr	r3, [pc, #172]	; (80023fc <MX_TIM3_Init+0xe4>)
 8002350:	2200      	movs	r2, #0
 8002352:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 8002354:	4b29      	ldr	r3, [pc, #164]	; (80023fc <MX_TIM3_Init+0xe4>)
 8002356:	2240      	movs	r2, #64	; 0x40
 8002358:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 800235a:	4b28      	ldr	r3, [pc, #160]	; (80023fc <MX_TIM3_Init+0xe4>)
 800235c:	2200      	movs	r2, #0
 800235e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002360:	4b26      	ldr	r3, [pc, #152]	; (80023fc <MX_TIM3_Init+0xe4>)
 8002362:	2200      	movs	r2, #0
 8002364:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002366:	4b25      	ldr	r3, [pc, #148]	; (80023fc <MX_TIM3_Init+0xe4>)
 8002368:	2200      	movs	r2, #0
 800236a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800236c:	4823      	ldr	r0, [pc, #140]	; (80023fc <MX_TIM3_Init+0xe4>)
 800236e:	f005 fe6b 	bl	8008048 <HAL_TIM_Base_Init>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8002378:	f000 fa5a 	bl	8002830 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800237c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002380:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002382:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002386:	4619      	mov	r1, r3
 8002388:	481c      	ldr	r0, [pc, #112]	; (80023fc <MX_TIM3_Init+0xe4>)
 800238a:	f006 f8ed 	bl	8008568 <HAL_TIM_ConfigClockSource>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8002394:	f000 fa4c 	bl	8002830 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002398:	4818      	ldr	r0, [pc, #96]	; (80023fc <MX_TIM3_Init+0xe4>)
 800239a:	f005 fea4 	bl	80080e6 <HAL_TIM_PWM_Init>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80023a4:	f000 fa44 	bl	8002830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023a8:	2300      	movs	r3, #0
 80023aa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023ac:	2300      	movs	r3, #0
 80023ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023b0:	f107 0320 	add.w	r3, r7, #32
 80023b4:	4619      	mov	r1, r3
 80023b6:	4811      	ldr	r0, [pc, #68]	; (80023fc <MX_TIM3_Init+0xe4>)
 80023b8:	f006 fcc6 	bl	8008d48 <HAL_TIMEx_MasterConfigSynchronization>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80023c2:	f000 fa35 	bl	8002830 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023c6:	2360      	movs	r3, #96	; 0x60
 80023c8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80023ca:	2300      	movs	r3, #0
 80023cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023ce:	2300      	movs	r3, #0
 80023d0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023d2:	2300      	movs	r3, #0
 80023d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80023d6:	1d3b      	adds	r3, r7, #4
 80023d8:	2208      	movs	r2, #8
 80023da:	4619      	mov	r1, r3
 80023dc:	4807      	ldr	r0, [pc, #28]	; (80023fc <MX_TIM3_Init+0xe4>)
 80023de:	f005 fffd 	bl	80083dc <HAL_TIM_PWM_ConfigChannel>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80023e8:	f000 fa22 	bl	8002830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80023ec:	4803      	ldr	r0, [pc, #12]	; (80023fc <MX_TIM3_Init+0xe4>)
 80023ee:	f000 fc5d 	bl	8002cac <HAL_TIM_MspPostInit>

}
 80023f2:	bf00      	nop
 80023f4:	3738      	adds	r7, #56	; 0x38
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	20000d80 	.word	0x20000d80
 8002400:	40000400 	.word	0x40000400

08002404 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b086      	sub	sp, #24
 8002408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800240a:	f107 0308 	add.w	r3, r7, #8
 800240e:	2200      	movs	r2, #0
 8002410:	601a      	str	r2, [r3, #0]
 8002412:	605a      	str	r2, [r3, #4]
 8002414:	609a      	str	r2, [r3, #8]
 8002416:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002418:	463b      	mov	r3, r7
 800241a:	2200      	movs	r2, #0
 800241c:	601a      	str	r2, [r3, #0]
 800241e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002420:	4b1d      	ldr	r3, [pc, #116]	; (8002498 <MX_TIM4_Init+0x94>)
 8002422:	4a1e      	ldr	r2, [pc, #120]	; (800249c <MX_TIM4_Init+0x98>)
 8002424:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 41999;
 8002426:	4b1c      	ldr	r3, [pc, #112]	; (8002498 <MX_TIM4_Init+0x94>)
 8002428:	f24a 420f 	movw	r2, #41999	; 0xa40f
 800242c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800242e:	4b1a      	ldr	r3, [pc, #104]	; (8002498 <MX_TIM4_Init+0x94>)
 8002430:	2200      	movs	r2, #0
 8002432:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8002434:	4b18      	ldr	r3, [pc, #96]	; (8002498 <MX_TIM4_Init+0x94>)
 8002436:	2264      	movs	r2, #100	; 0x64
 8002438:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800243a:	4b17      	ldr	r3, [pc, #92]	; (8002498 <MX_TIM4_Init+0x94>)
 800243c:	2200      	movs	r2, #0
 800243e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002440:	4b15      	ldr	r3, [pc, #84]	; (8002498 <MX_TIM4_Init+0x94>)
 8002442:	2200      	movs	r2, #0
 8002444:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002446:	4814      	ldr	r0, [pc, #80]	; (8002498 <MX_TIM4_Init+0x94>)
 8002448:	f005 fdfe 	bl	8008048 <HAL_TIM_Base_Init>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002452:	f000 f9ed 	bl	8002830 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002456:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800245a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800245c:	f107 0308 	add.w	r3, r7, #8
 8002460:	4619      	mov	r1, r3
 8002462:	480d      	ldr	r0, [pc, #52]	; (8002498 <MX_TIM4_Init+0x94>)
 8002464:	f006 f880 	bl	8008568 <HAL_TIM_ConfigClockSource>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800246e:	f000 f9df 	bl	8002830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002472:	2300      	movs	r3, #0
 8002474:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002476:	2300      	movs	r3, #0
 8002478:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800247a:	463b      	mov	r3, r7
 800247c:	4619      	mov	r1, r3
 800247e:	4806      	ldr	r0, [pc, #24]	; (8002498 <MX_TIM4_Init+0x94>)
 8002480:	f006 fc62 	bl	8008d48 <HAL_TIMEx_MasterConfigSynchronization>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800248a:	f000 f9d1 	bl	8002830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800248e:	bf00      	nop
 8002490:	3718      	adds	r7, #24
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	20000c6c 	.word	0x20000c6c
 800249c:	40000800 	.word	0x40000800

080024a0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024a6:	f107 0308 	add.w	r3, r7, #8
 80024aa:	2200      	movs	r2, #0
 80024ac:	601a      	str	r2, [r3, #0]
 80024ae:	605a      	str	r2, [r3, #4]
 80024b0:	609a      	str	r2, [r3, #8]
 80024b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024b4:	463b      	mov	r3, r7
 80024b6:	2200      	movs	r2, #0
 80024b8:	601a      	str	r2, [r3, #0]
 80024ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80024bc:	4b1d      	ldr	r3, [pc, #116]	; (8002534 <MX_TIM5_Init+0x94>)
 80024be:	4a1e      	ldr	r2, [pc, #120]	; (8002538 <MX_TIM5_Init+0x98>)
 80024c0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 41999;
 80024c2:	4b1c      	ldr	r3, [pc, #112]	; (8002534 <MX_TIM5_Init+0x94>)
 80024c4:	f24a 420f 	movw	r2, #41999	; 0xa40f
 80024c8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024ca:	4b1a      	ldr	r3, [pc, #104]	; (8002534 <MX_TIM5_Init+0x94>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 80024d0:	4b18      	ldr	r3, [pc, #96]	; (8002534 <MX_TIM5_Init+0x94>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024d6:	4b17      	ldr	r3, [pc, #92]	; (8002534 <MX_TIM5_Init+0x94>)
 80024d8:	2200      	movs	r2, #0
 80024da:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024dc:	4b15      	ldr	r3, [pc, #84]	; (8002534 <MX_TIM5_Init+0x94>)
 80024de:	2200      	movs	r2, #0
 80024e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80024e2:	4814      	ldr	r0, [pc, #80]	; (8002534 <MX_TIM5_Init+0x94>)
 80024e4:	f005 fdb0 	bl	8008048 <HAL_TIM_Base_Init>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80024ee:	f000 f99f 	bl	8002830 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80024f8:	f107 0308 	add.w	r3, r7, #8
 80024fc:	4619      	mov	r1, r3
 80024fe:	480d      	ldr	r0, [pc, #52]	; (8002534 <MX_TIM5_Init+0x94>)
 8002500:	f006 f832 	bl	8008568 <HAL_TIM_ConfigClockSource>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800250a:	f000 f991 	bl	8002830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800250e:	2300      	movs	r3, #0
 8002510:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002512:	2300      	movs	r3, #0
 8002514:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002516:	463b      	mov	r3, r7
 8002518:	4619      	mov	r1, r3
 800251a:	4806      	ldr	r0, [pc, #24]	; (8002534 <MX_TIM5_Init+0x94>)
 800251c:	f006 fc14 	bl	8008d48 <HAL_TIMEx_MasterConfigSynchronization>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8002526:	f000 f983 	bl	8002830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800252a:	bf00      	nop
 800252c:	3718      	adds	r7, #24
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	20000d40 	.word	0x20000d40
 8002538:	40000c00 	.word	0x40000c00

0800253c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002540:	4b11      	ldr	r3, [pc, #68]	; (8002588 <MX_USART3_UART_Init+0x4c>)
 8002542:	4a12      	ldr	r2, [pc, #72]	; (800258c <MX_USART3_UART_Init+0x50>)
 8002544:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002546:	4b10      	ldr	r3, [pc, #64]	; (8002588 <MX_USART3_UART_Init+0x4c>)
 8002548:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800254c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800254e:	4b0e      	ldr	r3, [pc, #56]	; (8002588 <MX_USART3_UART_Init+0x4c>)
 8002550:	2200      	movs	r2, #0
 8002552:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002554:	4b0c      	ldr	r3, [pc, #48]	; (8002588 <MX_USART3_UART_Init+0x4c>)
 8002556:	2200      	movs	r2, #0
 8002558:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800255a:	4b0b      	ldr	r3, [pc, #44]	; (8002588 <MX_USART3_UART_Init+0x4c>)
 800255c:	2200      	movs	r2, #0
 800255e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002560:	4b09      	ldr	r3, [pc, #36]	; (8002588 <MX_USART3_UART_Init+0x4c>)
 8002562:	220c      	movs	r2, #12
 8002564:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002566:	4b08      	ldr	r3, [pc, #32]	; (8002588 <MX_USART3_UART_Init+0x4c>)
 8002568:	2200      	movs	r2, #0
 800256a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800256c:	4b06      	ldr	r3, [pc, #24]	; (8002588 <MX_USART3_UART_Init+0x4c>)
 800256e:	2200      	movs	r2, #0
 8002570:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002572:	4805      	ldr	r0, [pc, #20]	; (8002588 <MX_USART3_UART_Init+0x4c>)
 8002574:	f006 fc78 	bl	8008e68 <HAL_UART_Init>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800257e:	f000 f957 	bl	8002830 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002582:	bf00      	nop
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	20000cac 	.word	0x20000cac
 800258c:	40004800 	.word	0x40004800

08002590 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002596:	2300      	movs	r3, #0
 8002598:	607b      	str	r3, [r7, #4]
 800259a:	4b10      	ldr	r3, [pc, #64]	; (80025dc <MX_DMA_Init+0x4c>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	4a0f      	ldr	r2, [pc, #60]	; (80025dc <MX_DMA_Init+0x4c>)
 80025a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025a4:	6313      	str	r3, [r2, #48]	; 0x30
 80025a6:	4b0d      	ldr	r3, [pc, #52]	; (80025dc <MX_DMA_Init+0x4c>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ae:	607b      	str	r3, [r7, #4]
 80025b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80025b2:	2200      	movs	r2, #0
 80025b4:	2100      	movs	r1, #0
 80025b6:	203b      	movs	r0, #59	; 0x3b
 80025b8:	f000 fe37 	bl	800322a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80025bc:	203b      	movs	r0, #59	; 0x3b
 80025be:	f000 fe50 	bl	8003262 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80025c2:	2200      	movs	r2, #0
 80025c4:	2100      	movs	r1, #0
 80025c6:	2045      	movs	r0, #69	; 0x45
 80025c8:	f000 fe2f 	bl	800322a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80025cc:	2045      	movs	r0, #69	; 0x45
 80025ce:	f000 fe48 	bl	8003262 <HAL_NVIC_EnableIRQ>

}
 80025d2:	bf00      	nop
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	40023800 	.word	0x40023800

080025e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b08a      	sub	sp, #40	; 0x28
 80025e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e6:	f107 0314 	add.w	r3, r7, #20
 80025ea:	2200      	movs	r2, #0
 80025ec:	601a      	str	r2, [r3, #0]
 80025ee:	605a      	str	r2, [r3, #4]
 80025f0:	609a      	str	r2, [r3, #8]
 80025f2:	60da      	str	r2, [r3, #12]
 80025f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025f6:	2300      	movs	r3, #0
 80025f8:	613b      	str	r3, [r7, #16]
 80025fa:	4b6e      	ldr	r3, [pc, #440]	; (80027b4 <MX_GPIO_Init+0x1d4>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	4a6d      	ldr	r2, [pc, #436]	; (80027b4 <MX_GPIO_Init+0x1d4>)
 8002600:	f043 0304 	orr.w	r3, r3, #4
 8002604:	6313      	str	r3, [r2, #48]	; 0x30
 8002606:	4b6b      	ldr	r3, [pc, #428]	; (80027b4 <MX_GPIO_Init+0x1d4>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260a:	f003 0304 	and.w	r3, r3, #4
 800260e:	613b      	str	r3, [r7, #16]
 8002610:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002612:	2300      	movs	r3, #0
 8002614:	60fb      	str	r3, [r7, #12]
 8002616:	4b67      	ldr	r3, [pc, #412]	; (80027b4 <MX_GPIO_Init+0x1d4>)
 8002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261a:	4a66      	ldr	r2, [pc, #408]	; (80027b4 <MX_GPIO_Init+0x1d4>)
 800261c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002620:	6313      	str	r3, [r2, #48]	; 0x30
 8002622:	4b64      	ldr	r3, [pc, #400]	; (80027b4 <MX_GPIO_Init+0x1d4>)
 8002624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800262a:	60fb      	str	r3, [r7, #12]
 800262c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800262e:	2300      	movs	r3, #0
 8002630:	60bb      	str	r3, [r7, #8]
 8002632:	4b60      	ldr	r3, [pc, #384]	; (80027b4 <MX_GPIO_Init+0x1d4>)
 8002634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002636:	4a5f      	ldr	r2, [pc, #380]	; (80027b4 <MX_GPIO_Init+0x1d4>)
 8002638:	f043 0301 	orr.w	r3, r3, #1
 800263c:	6313      	str	r3, [r2, #48]	; 0x30
 800263e:	4b5d      	ldr	r3, [pc, #372]	; (80027b4 <MX_GPIO_Init+0x1d4>)
 8002640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	60bb      	str	r3, [r7, #8]
 8002648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800264a:	2300      	movs	r3, #0
 800264c:	607b      	str	r3, [r7, #4]
 800264e:	4b59      	ldr	r3, [pc, #356]	; (80027b4 <MX_GPIO_Init+0x1d4>)
 8002650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002652:	4a58      	ldr	r2, [pc, #352]	; (80027b4 <MX_GPIO_Init+0x1d4>)
 8002654:	f043 0302 	orr.w	r3, r3, #2
 8002658:	6313      	str	r3, [r2, #48]	; 0x30
 800265a:	4b56      	ldr	r3, [pc, #344]	; (80027b4 <MX_GPIO_Init+0x1d4>)
 800265c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	607b      	str	r3, [r7, #4]
 8002664:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002666:	2300      	movs	r3, #0
 8002668:	603b      	str	r3, [r7, #0]
 800266a:	4b52      	ldr	r3, [pc, #328]	; (80027b4 <MX_GPIO_Init+0x1d4>)
 800266c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266e:	4a51      	ldr	r2, [pc, #324]	; (80027b4 <MX_GPIO_Init+0x1d4>)
 8002670:	f043 0308 	orr.w	r3, r3, #8
 8002674:	6313      	str	r3, [r2, #48]	; 0x30
 8002676:	4b4f      	ldr	r3, [pc, #316]	; (80027b4 <MX_GPIO_Init+0x1d4>)
 8002678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267a:	f003 0308 	and.w	r3, r3, #8
 800267e:	603b      	str	r3, [r7, #0]
 8002680:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, P1_Pin|P4_Pin|P2_Pin|P5_Pin 
 8002682:	2200      	movs	r2, #0
 8002684:	21ef      	movs	r1, #239	; 0xef
 8002686:	484c      	ldr	r0, [pc, #304]	; (80027b8 <MX_GPIO_Init+0x1d8>)
 8002688:	f001 fb54 	bl	8003d34 <HAL_GPIO_WritePin>
                          |LR_RESET_Pin|LEDB_Pin|LEDA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PH_L_Pin|EN_L_Pin|PH_R_Pin|P7_Pin, GPIO_PIN_RESET);
 800268c:	2200      	movs	r2, #0
 800268e:	2117      	movs	r1, #23
 8002690:	484a      	ldr	r0, [pc, #296]	; (80027bc <MX_GPIO_Init+0x1dc>)
 8002692:	f001 fb4f 	bl	8003d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, P3_Pin|LEDD_Pin|LEDC_Pin|LR_NSS_Pin, GPIO_PIN_RESET);
 8002696:	2200      	movs	r2, #0
 8002698:	f243 2102 	movw	r1, #12802	; 0x3202
 800269c:	4848      	ldr	r0, [pc, #288]	; (80027c0 <MX_GPIO_Init+0x1e0>)
 800269e:	f001 fb49 	bl	8003d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : P1_Pin P4_Pin P2_Pin P5_Pin 
                           LR_RESET_Pin */
  GPIO_InitStruct.Pin = P1_Pin|P4_Pin|P2_Pin|P5_Pin 
 80026a2:	232f      	movs	r3, #47	; 0x2f
 80026a4:	617b      	str	r3, [r7, #20]
                          |LR_RESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026a6:	2301      	movs	r3, #1
 80026a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026aa:	2300      	movs	r3, #0
 80026ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ae:	2300      	movs	r3, #0
 80026b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026b2:	f107 0314 	add.w	r3, r7, #20
 80026b6:	4619      	mov	r1, r3
 80026b8:	483f      	ldr	r0, [pc, #252]	; (80027b8 <MX_GPIO_Init+0x1d8>)
 80026ba:	f001 f989 	bl	80039d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH_L_Pin EN_L_Pin PH_R_Pin */
  GPIO_InitStruct.Pin = PH_L_Pin|EN_L_Pin|PH_R_Pin;
 80026be:	2307      	movs	r3, #7
 80026c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026c2:	2301      	movs	r3, #1
 80026c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80026c6:	2302      	movs	r3, #2
 80026c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ca:	2300      	movs	r3, #0
 80026cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ce:	f107 0314 	add.w	r3, r7, #20
 80026d2:	4619      	mov	r1, r3
 80026d4:	4839      	ldr	r0, [pc, #228]	; (80027bc <MX_GPIO_Init+0x1dc>)
 80026d6:	f001 f97b 	bl	80039d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : P7_Pin */
  GPIO_InitStruct.Pin = P7_Pin;
 80026da:	2310      	movs	r3, #16
 80026dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026de:	2301      	movs	r3, #1
 80026e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e2:	2300      	movs	r3, #0
 80026e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e6:	2300      	movs	r3, #0
 80026e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(P7_GPIO_Port, &GPIO_InitStruct);
 80026ea:	f107 0314 	add.w	r3, r7, #20
 80026ee:	4619      	mov	r1, r3
 80026f0:	4832      	ldr	r0, [pc, #200]	; (80027bc <MX_GPIO_Init+0x1dc>)
 80026f2:	f001 f96d 	bl	80039d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LR_DIO0_Pin */
  GPIO_InitStruct.Pin = LR_DIO0_Pin;
 80026f6:	2340      	movs	r3, #64	; 0x40
 80026f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80026fa:	4b32      	ldr	r3, [pc, #200]	; (80027c4 <MX_GPIO_Init+0x1e4>)
 80026fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80026fe:	2302      	movs	r3, #2
 8002700:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LR_DIO0_GPIO_Port, &GPIO_InitStruct);
 8002702:	f107 0314 	add.w	r3, r7, #20
 8002706:	4619      	mov	r1, r3
 8002708:	482c      	ldr	r0, [pc, #176]	; (80027bc <MX_GPIO_Init+0x1dc>)
 800270a:	f001 f961 	bl	80039d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : P3_Pin LR_NSS_Pin */
  GPIO_InitStruct.Pin = P3_Pin|LR_NSS_Pin;
 800270e:	f240 2302 	movw	r3, #514	; 0x202
 8002712:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002714:	2301      	movs	r3, #1
 8002716:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002718:	2300      	movs	r3, #0
 800271a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800271c:	2300      	movs	r3, #0
 800271e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002720:	f107 0314 	add.w	r3, r7, #20
 8002724:	4619      	mov	r1, r3
 8002726:	4826      	ldr	r0, [pc, #152]	; (80027c0 <MX_GPIO_Init+0x1e0>)
 8002728:	f001 f952 	bl	80039d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDD_Pin LEDC_Pin */
  GPIO_InitStruct.Pin = LEDD_Pin|LEDC_Pin;
 800272c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002730:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002732:	2301      	movs	r3, #1
 8002734:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002736:	2302      	movs	r3, #2
 8002738:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800273a:	2300      	movs	r3, #0
 800273c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800273e:	f107 0314 	add.w	r3, r7, #20
 8002742:	4619      	mov	r1, r3
 8002744:	481e      	ldr	r0, [pc, #120]	; (80027c0 <MX_GPIO_Init+0x1e0>)
 8002746:	f001 f943 	bl	80039d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDB_Pin LEDA_Pin */
  GPIO_InitStruct.Pin = LEDB_Pin|LEDA_Pin;
 800274a:	23c0      	movs	r3, #192	; 0xc0
 800274c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800274e:	2301      	movs	r3, #1
 8002750:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002752:	2302      	movs	r3, #2
 8002754:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002756:	2300      	movs	r3, #0
 8002758:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800275a:	f107 0314 	add.w	r3, r7, #20
 800275e:	4619      	mov	r1, r3
 8002760:	4815      	ldr	r0, [pc, #84]	; (80027b8 <MX_GPIO_Init+0x1d8>)
 8002762:	f001 f935 	bl	80039d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_SW_Pin */
  GPIO_InitStruct.Pin = SDIO_SW_Pin;
 8002766:	f44f 7380 	mov.w	r3, #256	; 0x100
 800276a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800276c:	2300      	movs	r3, #0
 800276e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002770:	2300      	movs	r3, #0
 8002772:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDIO_SW_GPIO_Port, &GPIO_InitStruct);
 8002774:	f107 0314 	add.w	r3, r7, #20
 8002778:	4619      	mov	r1, r3
 800277a:	4810      	ldr	r0, [pc, #64]	; (80027bc <MX_GPIO_Init+0x1dc>)
 800277c:	f001 f928 	bl	80039d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_USR_Pin */
  GPIO_InitStruct.Pin = BTN_USR_Pin;
 8002780:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002784:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002786:	2300      	movs	r3, #0
 8002788:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800278a:	2301      	movs	r3, #1
 800278c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_USR_GPIO_Port, &GPIO_InitStruct);
 800278e:	f107 0314 	add.w	r3, r7, #20
 8002792:	4619      	mov	r1, r3
 8002794:	4809      	ldr	r0, [pc, #36]	; (80027bc <MX_GPIO_Init+0x1dc>)
 8002796:	f001 f91b 	bl	80039d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800279a:	2200      	movs	r2, #0
 800279c:	2100      	movs	r1, #0
 800279e:	2017      	movs	r0, #23
 80027a0:	f000 fd43 	bl	800322a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80027a4:	2017      	movs	r0, #23
 80027a6:	f000 fd5c 	bl	8003262 <HAL_NVIC_EnableIRQ>

}
 80027aa:	bf00      	nop
 80027ac:	3728      	adds	r7, #40	; 0x28
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	40023800 	.word	0x40023800
 80027b8:	40020800 	.word	0x40020800
 80027bc:	40020000 	.word	0x40020000
 80027c0:	40020400 	.word	0x40020400
 80027c4:	10110000 	.word	0x10110000

080027c8 <Get_TIM2_Instance>:
/* USER CODE BEGIN 4 */

I2C_HandleTypeDef* Get_I2C1_Instance() { return &hi2c1; }
SPI_HandleTypeDef* Get_SPI1_Instance() { return &hspi1; }
RTC_HandleTypeDef* Get_RTC_Instance() { return &hrtc; }
TIM_HandleTypeDef* Get_TIM2_Instance() { return &htim2; }
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	4b02      	ldr	r3, [pc, #8]	; (80027d8 <Get_TIM2_Instance+0x10>)
 80027ce:	4618      	mov	r0, r3
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr
 80027d8:	20000f1c 	.word	0x20000f1c

080027dc <Get_TIM3_Instance>:

//todelete
TIM_HandleTypeDef* Get_TIM3_Instance() { return &htim3; }
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
 80027e0:	4b02      	ldr	r3, [pc, #8]	; (80027ec <Get_TIM3_Instance+0x10>)
 80027e2:	4618      	mov	r0, r3
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr
 80027ec:	20000d80 	.word	0x20000d80

080027f0 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	4603      	mov	r3, r0
 80027f8:	80fb      	strh	r3, [r7, #6]
	//DIO0 Interrupt function
	if (GPIO_Pin == LR_DIO0_Pin)
 80027fa:	88fb      	ldrh	r3, [r7, #6]
 80027fc:	2b40      	cmp	r3, #64	; 0x40
 80027fe:	d101      	bne.n	8002804 <HAL_GPIO_EXTI_Callback+0x14>
	{
		dio0_IRQ();
 8002800:	f7ff f9e8 	bl	8001bd4 <dio0_IRQ>
	}
}
 8002804:	bf00      	nop
 8002806:	3708      	adds	r7, #8
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
	// motor interrupt in on TIM3
	if (htim->Instance == TIM3)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a04      	ldr	r2, [pc, #16]	; (800282c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d101      	bne.n	8002822 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		motorTimeout();
 800281e:	f7ff fb61 	bl	8001ee4 <motorTimeout>
	}

}
 8002822:	bf00      	nop
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	40000400 	.word	0x40000400

08002830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002834:	bf00      	nop
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
	...

08002840 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002846:	2300      	movs	r3, #0
 8002848:	607b      	str	r3, [r7, #4]
 800284a:	4b10      	ldr	r3, [pc, #64]	; (800288c <HAL_MspInit+0x4c>)
 800284c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284e:	4a0f      	ldr	r2, [pc, #60]	; (800288c <HAL_MspInit+0x4c>)
 8002850:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002854:	6453      	str	r3, [r2, #68]	; 0x44
 8002856:	4b0d      	ldr	r3, [pc, #52]	; (800288c <HAL_MspInit+0x4c>)
 8002858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800285e:	607b      	str	r3, [r7, #4]
 8002860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002862:	2300      	movs	r3, #0
 8002864:	603b      	str	r3, [r7, #0]
 8002866:	4b09      	ldr	r3, [pc, #36]	; (800288c <HAL_MspInit+0x4c>)
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	4a08      	ldr	r2, [pc, #32]	; (800288c <HAL_MspInit+0x4c>)
 800286c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002870:	6413      	str	r3, [r2, #64]	; 0x40
 8002872:	4b06      	ldr	r3, [pc, #24]	; (800288c <HAL_MspInit+0x4c>)
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800287a:	603b      	str	r3, [r7, #0]
 800287c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	40023800 	.word	0x40023800

08002890 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b08a      	sub	sp, #40	; 0x28
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002898:	f107 0314 	add.w	r3, r7, #20
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	605a      	str	r2, [r3, #4]
 80028a2:	609a      	str	r2, [r3, #8]
 80028a4:	60da      	str	r2, [r3, #12]
 80028a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a19      	ldr	r2, [pc, #100]	; (8002914 <HAL_I2C_MspInit+0x84>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d12b      	bne.n	800290a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028b2:	2300      	movs	r3, #0
 80028b4:	613b      	str	r3, [r7, #16]
 80028b6:	4b18      	ldr	r3, [pc, #96]	; (8002918 <HAL_I2C_MspInit+0x88>)
 80028b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ba:	4a17      	ldr	r2, [pc, #92]	; (8002918 <HAL_I2C_MspInit+0x88>)
 80028bc:	f043 0302 	orr.w	r3, r3, #2
 80028c0:	6313      	str	r3, [r2, #48]	; 0x30
 80028c2:	4b15      	ldr	r3, [pc, #84]	; (8002918 <HAL_I2C_MspInit+0x88>)
 80028c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	613b      	str	r3, [r7, #16]
 80028cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 80028ce:	23c0      	movs	r3, #192	; 0xc0
 80028d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028d2:	2312      	movs	r3, #18
 80028d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d6:	2300      	movs	r3, #0
 80028d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028da:	2303      	movs	r3, #3
 80028dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80028de:	2304      	movs	r3, #4
 80028e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028e2:	f107 0314 	add.w	r3, r7, #20
 80028e6:	4619      	mov	r1, r3
 80028e8:	480c      	ldr	r0, [pc, #48]	; (800291c <HAL_I2C_MspInit+0x8c>)
 80028ea:	f001 f871 	bl	80039d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028ee:	2300      	movs	r3, #0
 80028f0:	60fb      	str	r3, [r7, #12]
 80028f2:	4b09      	ldr	r3, [pc, #36]	; (8002918 <HAL_I2C_MspInit+0x88>)
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	4a08      	ldr	r2, [pc, #32]	; (8002918 <HAL_I2C_MspInit+0x88>)
 80028f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80028fc:	6413      	str	r3, [r2, #64]	; 0x40
 80028fe:	4b06      	ldr	r3, [pc, #24]	; (8002918 <HAL_I2C_MspInit+0x88>)
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002906:	60fb      	str	r3, [r7, #12]
 8002908:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800290a:	bf00      	nop
 800290c:	3728      	adds	r7, #40	; 0x28
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	40005400 	.word	0x40005400
 8002918:	40023800 	.word	0x40023800
 800291c:	40020400 	.word	0x40020400

08002920 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a05      	ldr	r2, [pc, #20]	; (8002944 <HAL_RTC_MspInit+0x24>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d102      	bne.n	8002938 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002932:	4b05      	ldr	r3, [pc, #20]	; (8002948 <HAL_RTC_MspInit+0x28>)
 8002934:	2201      	movs	r2, #1
 8002936:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr
 8002944:	40002800 	.word	0x40002800
 8002948:	42470e3c 	.word	0x42470e3c

0800294c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b08a      	sub	sp, #40	; 0x28
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002954:	f107 0314 	add.w	r3, r7, #20
 8002958:	2200      	movs	r2, #0
 800295a:	601a      	str	r2, [r3, #0]
 800295c:	605a      	str	r2, [r3, #4]
 800295e:	609a      	str	r2, [r3, #8]
 8002960:	60da      	str	r2, [r3, #12]
 8002962:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a70      	ldr	r2, [pc, #448]	; (8002b2c <HAL_SD_MspInit+0x1e0>)
 800296a:	4293      	cmp	r3, r2
 800296c:	f040 80da 	bne.w	8002b24 <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8002970:	2300      	movs	r3, #0
 8002972:	613b      	str	r3, [r7, #16]
 8002974:	4b6e      	ldr	r3, [pc, #440]	; (8002b30 <HAL_SD_MspInit+0x1e4>)
 8002976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002978:	4a6d      	ldr	r2, [pc, #436]	; (8002b30 <HAL_SD_MspInit+0x1e4>)
 800297a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800297e:	6453      	str	r3, [r2, #68]	; 0x44
 8002980:	4b6b      	ldr	r3, [pc, #428]	; (8002b30 <HAL_SD_MspInit+0x1e4>)
 8002982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002984:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002988:	613b      	str	r3, [r7, #16]
 800298a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800298c:	2300      	movs	r3, #0
 800298e:	60fb      	str	r3, [r7, #12]
 8002990:	4b67      	ldr	r3, [pc, #412]	; (8002b30 <HAL_SD_MspInit+0x1e4>)
 8002992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002994:	4a66      	ldr	r2, [pc, #408]	; (8002b30 <HAL_SD_MspInit+0x1e4>)
 8002996:	f043 0304 	orr.w	r3, r3, #4
 800299a:	6313      	str	r3, [r2, #48]	; 0x30
 800299c:	4b64      	ldr	r3, [pc, #400]	; (8002b30 <HAL_SD_MspInit+0x1e4>)
 800299e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a0:	f003 0304 	and.w	r3, r3, #4
 80029a4:	60fb      	str	r3, [r7, #12]
 80029a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029a8:	2300      	movs	r3, #0
 80029aa:	60bb      	str	r3, [r7, #8]
 80029ac:	4b60      	ldr	r3, [pc, #384]	; (8002b30 <HAL_SD_MspInit+0x1e4>)
 80029ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b0:	4a5f      	ldr	r2, [pc, #380]	; (8002b30 <HAL_SD_MspInit+0x1e4>)
 80029b2:	f043 0308 	orr.w	r3, r3, #8
 80029b6:	6313      	str	r3, [r2, #48]	; 0x30
 80029b8:	4b5d      	ldr	r3, [pc, #372]	; (8002b30 <HAL_SD_MspInit+0x1e4>)
 80029ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029bc:	f003 0308 	and.w	r3, r3, #8
 80029c0:	60bb      	str	r3, [r7, #8]
 80029c2:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80029c4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80029c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ca:	2302      	movs	r3, #2
 80029cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029ce:	2301      	movs	r3, #1
 80029d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029d2:	2303      	movs	r3, #3
 80029d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80029d6:	230c      	movs	r3, #12
 80029d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029da:	f107 0314 	add.w	r3, r7, #20
 80029de:	4619      	mov	r1, r3
 80029e0:	4854      	ldr	r0, [pc, #336]	; (8002b34 <HAL_SD_MspInit+0x1e8>)
 80029e2:	f000 fff5 	bl	80039d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80029e6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80029ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ec:	2302      	movs	r3, #2
 80029ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f0:	2300      	movs	r3, #0
 80029f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029f4:	2303      	movs	r3, #3
 80029f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80029f8:	230c      	movs	r3, #12
 80029fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029fc:	f107 0314 	add.w	r3, r7, #20
 8002a00:	4619      	mov	r1, r3
 8002a02:	484c      	ldr	r0, [pc, #304]	; (8002b34 <HAL_SD_MspInit+0x1e8>)
 8002a04:	f000 ffe4 	bl	80039d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a08:	2304      	movs	r3, #4
 8002a0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a10:	2301      	movs	r3, #1
 8002a12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a14:	2303      	movs	r3, #3
 8002a16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002a18:	230c      	movs	r3, #12
 8002a1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a1c:	f107 0314 	add.w	r3, r7, #20
 8002a20:	4619      	mov	r1, r3
 8002a22:	4845      	ldr	r0, [pc, #276]	; (8002b38 <HAL_SD_MspInit+0x1ec>)
 8002a24:	f000 ffd4 	bl	80039d0 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8002a28:	4b44      	ldr	r3, [pc, #272]	; (8002b3c <HAL_SD_MspInit+0x1f0>)
 8002a2a:	4a45      	ldr	r2, [pc, #276]	; (8002b40 <HAL_SD_MspInit+0x1f4>)
 8002a2c:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8002a2e:	4b43      	ldr	r3, [pc, #268]	; (8002b3c <HAL_SD_MspInit+0x1f0>)
 8002a30:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a34:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a36:	4b41      	ldr	r3, [pc, #260]	; (8002b3c <HAL_SD_MspInit+0x1f0>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a3c:	4b3f      	ldr	r3, [pc, #252]	; (8002b3c <HAL_SD_MspInit+0x1f0>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a42:	4b3e      	ldr	r3, [pc, #248]	; (8002b3c <HAL_SD_MspInit+0x1f0>)
 8002a44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a48:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002a4a:	4b3c      	ldr	r3, [pc, #240]	; (8002b3c <HAL_SD_MspInit+0x1f0>)
 8002a4c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a50:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002a52:	4b3a      	ldr	r3, [pc, #232]	; (8002b3c <HAL_SD_MspInit+0x1f0>)
 8002a54:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a58:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8002a5a:	4b38      	ldr	r3, [pc, #224]	; (8002b3c <HAL_SD_MspInit+0x1f0>)
 8002a5c:	2220      	movs	r2, #32
 8002a5e:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a60:	4b36      	ldr	r3, [pc, #216]	; (8002b3c <HAL_SD_MspInit+0x1f0>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002a66:	4b35      	ldr	r3, [pc, #212]	; (8002b3c <HAL_SD_MspInit+0x1f0>)
 8002a68:	2204      	movs	r2, #4
 8002a6a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002a6c:	4b33      	ldr	r3, [pc, #204]	; (8002b3c <HAL_SD_MspInit+0x1f0>)
 8002a6e:	2203      	movs	r2, #3
 8002a70:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8002a72:	4b32      	ldr	r3, [pc, #200]	; (8002b3c <HAL_SD_MspInit+0x1f0>)
 8002a74:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002a78:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002a7a:	4b30      	ldr	r3, [pc, #192]	; (8002b3c <HAL_SD_MspInit+0x1f0>)
 8002a7c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002a80:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8002a82:	482e      	ldr	r0, [pc, #184]	; (8002b3c <HAL_SD_MspInit+0x1f0>)
 8002a84:	f000 fc08 	bl	8003298 <HAL_DMA_Init>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 8002a8e:	f7ff fecf 	bl	8002830 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a29      	ldr	r2, [pc, #164]	; (8002b3c <HAL_SD_MspInit+0x1f0>)
 8002a96:	641a      	str	r2, [r3, #64]	; 0x40
 8002a98:	4a28      	ldr	r2, [pc, #160]	; (8002b3c <HAL_SD_MspInit+0x1f0>)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8002a9e:	4b29      	ldr	r3, [pc, #164]	; (8002b44 <HAL_SD_MspInit+0x1f8>)
 8002aa0:	4a29      	ldr	r2, [pc, #164]	; (8002b48 <HAL_SD_MspInit+0x1fc>)
 8002aa2:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8002aa4:	4b27      	ldr	r3, [pc, #156]	; (8002b44 <HAL_SD_MspInit+0x1f8>)
 8002aa6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002aaa:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002aac:	4b25      	ldr	r3, [pc, #148]	; (8002b44 <HAL_SD_MspInit+0x1f8>)
 8002aae:	2240      	movs	r2, #64	; 0x40
 8002ab0:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ab2:	4b24      	ldr	r3, [pc, #144]	; (8002b44 <HAL_SD_MspInit+0x1f8>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ab8:	4b22      	ldr	r3, [pc, #136]	; (8002b44 <HAL_SD_MspInit+0x1f8>)
 8002aba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002abe:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002ac0:	4b20      	ldr	r3, [pc, #128]	; (8002b44 <HAL_SD_MspInit+0x1f8>)
 8002ac2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ac6:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002ac8:	4b1e      	ldr	r3, [pc, #120]	; (8002b44 <HAL_SD_MspInit+0x1f8>)
 8002aca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ace:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8002ad0:	4b1c      	ldr	r3, [pc, #112]	; (8002b44 <HAL_SD_MspInit+0x1f8>)
 8002ad2:	2220      	movs	r2, #32
 8002ad4:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002ad6:	4b1b      	ldr	r3, [pc, #108]	; (8002b44 <HAL_SD_MspInit+0x1f8>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002adc:	4b19      	ldr	r3, [pc, #100]	; (8002b44 <HAL_SD_MspInit+0x1f8>)
 8002ade:	2204      	movs	r2, #4
 8002ae0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002ae2:	4b18      	ldr	r3, [pc, #96]	; (8002b44 <HAL_SD_MspInit+0x1f8>)
 8002ae4:	2203      	movs	r2, #3
 8002ae6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8002ae8:	4b16      	ldr	r3, [pc, #88]	; (8002b44 <HAL_SD_MspInit+0x1f8>)
 8002aea:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002aee:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002af0:	4b14      	ldr	r3, [pc, #80]	; (8002b44 <HAL_SD_MspInit+0x1f8>)
 8002af2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002af6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8002af8:	4812      	ldr	r0, [pc, #72]	; (8002b44 <HAL_SD_MspInit+0x1f8>)
 8002afa:	f000 fbcd 	bl	8003298 <HAL_DMA_Init>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 8002b04:	f7ff fe94 	bl	8002830 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a0e      	ldr	r2, [pc, #56]	; (8002b44 <HAL_SD_MspInit+0x1f8>)
 8002b0c:	63da      	str	r2, [r3, #60]	; 0x3c
 8002b0e:	4a0d      	ldr	r2, [pc, #52]	; (8002b44 <HAL_SD_MspInit+0x1f8>)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8002b14:	2200      	movs	r2, #0
 8002b16:	2100      	movs	r1, #0
 8002b18:	2031      	movs	r0, #49	; 0x31
 8002b1a:	f000 fb86 	bl	800322a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8002b1e:	2031      	movs	r0, #49	; 0x31
 8002b20:	f000 fb9f 	bl	8003262 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8002b24:	bf00      	nop
 8002b26:	3728      	adds	r7, #40	; 0x28
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	40012c00 	.word	0x40012c00
 8002b30:	40023800 	.word	0x40023800
 8002b34:	40020800 	.word	0x40020800
 8002b38:	40020c00 	.word	0x40020c00
 8002b3c:	20000c0c 	.word	0x20000c0c
 8002b40:	40026458 	.word	0x40026458
 8002b44:	20000de0 	.word	0x20000de0
 8002b48:	400264a0 	.word	0x400264a0

08002b4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b08a      	sub	sp, #40	; 0x28
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b54:	f107 0314 	add.w	r3, r7, #20
 8002b58:	2200      	movs	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]
 8002b5c:	605a      	str	r2, [r3, #4]
 8002b5e:	609a      	str	r2, [r3, #8]
 8002b60:	60da      	str	r2, [r3, #12]
 8002b62:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a19      	ldr	r2, [pc, #100]	; (8002bd0 <HAL_SPI_MspInit+0x84>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d12b      	bne.n	8002bc6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b6e:	2300      	movs	r3, #0
 8002b70:	613b      	str	r3, [r7, #16]
 8002b72:	4b18      	ldr	r3, [pc, #96]	; (8002bd4 <HAL_SPI_MspInit+0x88>)
 8002b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b76:	4a17      	ldr	r2, [pc, #92]	; (8002bd4 <HAL_SPI_MspInit+0x88>)
 8002b78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b7c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b7e:	4b15      	ldr	r3, [pc, #84]	; (8002bd4 <HAL_SPI_MspInit+0x88>)
 8002b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b86:	613b      	str	r3, [r7, #16]
 8002b88:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	60fb      	str	r3, [r7, #12]
 8002b8e:	4b11      	ldr	r3, [pc, #68]	; (8002bd4 <HAL_SPI_MspInit+0x88>)
 8002b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b92:	4a10      	ldr	r2, [pc, #64]	; (8002bd4 <HAL_SPI_MspInit+0x88>)
 8002b94:	f043 0302 	orr.w	r3, r3, #2
 8002b98:	6313      	str	r3, [r2, #48]	; 0x30
 8002b9a:	4b0e      	ldr	r3, [pc, #56]	; (8002bd4 <HAL_SPI_MspInit+0x88>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	60fb      	str	r3, [r7, #12]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = LR_SCK_Pin|LR_MISO_Pin|LR_MOSI_Pin;
 8002ba6:	2338      	movs	r3, #56	; 0x38
 8002ba8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002baa:	2302      	movs	r3, #2
 8002bac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002bb6:	2305      	movs	r3, #5
 8002bb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bba:	f107 0314 	add.w	r3, r7, #20
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	4805      	ldr	r0, [pc, #20]	; (8002bd8 <HAL_SPI_MspInit+0x8c>)
 8002bc2:	f000 ff05 	bl	80039d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002bc6:	bf00      	nop
 8002bc8:	3728      	adds	r7, #40	; 0x28
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	40013000 	.word	0x40013000
 8002bd4:	40023800 	.word	0x40023800
 8002bd8:	40020400 	.word	0x40020400

08002bdc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b086      	sub	sp, #24
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bec:	d10e      	bne.n	8002c0c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002bee:	2300      	movs	r3, #0
 8002bf0:	617b      	str	r3, [r7, #20]
 8002bf2:	4b2a      	ldr	r3, [pc, #168]	; (8002c9c <HAL_TIM_Base_MspInit+0xc0>)
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	4a29      	ldr	r2, [pc, #164]	; (8002c9c <HAL_TIM_Base_MspInit+0xc0>)
 8002bf8:	f043 0301 	orr.w	r3, r3, #1
 8002bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8002bfe:	4b27      	ldr	r3, [pc, #156]	; (8002c9c <HAL_TIM_Base_MspInit+0xc0>)
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	617b      	str	r3, [r7, #20]
 8002c08:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002c0a:	e042      	b.n	8002c92 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a23      	ldr	r2, [pc, #140]	; (8002ca0 <HAL_TIM_Base_MspInit+0xc4>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d116      	bne.n	8002c44 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c16:	2300      	movs	r3, #0
 8002c18:	613b      	str	r3, [r7, #16]
 8002c1a:	4b20      	ldr	r3, [pc, #128]	; (8002c9c <HAL_TIM_Base_MspInit+0xc0>)
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	4a1f      	ldr	r2, [pc, #124]	; (8002c9c <HAL_TIM_Base_MspInit+0xc0>)
 8002c20:	f043 0302 	orr.w	r3, r3, #2
 8002c24:	6413      	str	r3, [r2, #64]	; 0x40
 8002c26:	4b1d      	ldr	r3, [pc, #116]	; (8002c9c <HAL_TIM_Base_MspInit+0xc0>)
 8002c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	613b      	str	r3, [r7, #16]
 8002c30:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002c32:	2200      	movs	r2, #0
 8002c34:	2100      	movs	r1, #0
 8002c36:	201d      	movs	r0, #29
 8002c38:	f000 faf7 	bl	800322a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002c3c:	201d      	movs	r0, #29
 8002c3e:	f000 fb10 	bl	8003262 <HAL_NVIC_EnableIRQ>
}
 8002c42:	e026      	b.n	8002c92 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM4)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a16      	ldr	r2, [pc, #88]	; (8002ca4 <HAL_TIM_Base_MspInit+0xc8>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d10e      	bne.n	8002c6c <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002c4e:	2300      	movs	r3, #0
 8002c50:	60fb      	str	r3, [r7, #12]
 8002c52:	4b12      	ldr	r3, [pc, #72]	; (8002c9c <HAL_TIM_Base_MspInit+0xc0>)
 8002c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c56:	4a11      	ldr	r2, [pc, #68]	; (8002c9c <HAL_TIM_Base_MspInit+0xc0>)
 8002c58:	f043 0304 	orr.w	r3, r3, #4
 8002c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c5e:	4b0f      	ldr	r3, [pc, #60]	; (8002c9c <HAL_TIM_Base_MspInit+0xc0>)
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	f003 0304 	and.w	r3, r3, #4
 8002c66:	60fb      	str	r3, [r7, #12]
 8002c68:	68fb      	ldr	r3, [r7, #12]
}
 8002c6a:	e012      	b.n	8002c92 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM5)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a0d      	ldr	r2, [pc, #52]	; (8002ca8 <HAL_TIM_Base_MspInit+0xcc>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d10d      	bne.n	8002c92 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002c76:	2300      	movs	r3, #0
 8002c78:	60bb      	str	r3, [r7, #8]
 8002c7a:	4b08      	ldr	r3, [pc, #32]	; (8002c9c <HAL_TIM_Base_MspInit+0xc0>)
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	4a07      	ldr	r2, [pc, #28]	; (8002c9c <HAL_TIM_Base_MspInit+0xc0>)
 8002c80:	f043 0308 	orr.w	r3, r3, #8
 8002c84:	6413      	str	r3, [r2, #64]	; 0x40
 8002c86:	4b05      	ldr	r3, [pc, #20]	; (8002c9c <HAL_TIM_Base_MspInit+0xc0>)
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	f003 0308 	and.w	r3, r3, #8
 8002c8e:	60bb      	str	r3, [r7, #8]
 8002c90:	68bb      	ldr	r3, [r7, #8]
}
 8002c92:	bf00      	nop
 8002c94:	3718      	adds	r7, #24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	40000400 	.word	0x40000400
 8002ca4:	40000800 	.word	0x40000800
 8002ca8:	40000c00 	.word	0x40000c00

08002cac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b08a      	sub	sp, #40	; 0x28
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb4:	f107 0314 	add.w	r3, r7, #20
 8002cb8:	2200      	movs	r2, #0
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	605a      	str	r2, [r3, #4]
 8002cbe:	609a      	str	r2, [r3, #8]
 8002cc0:	60da      	str	r2, [r3, #12]
 8002cc2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ccc:	d11e      	bne.n	8002d0c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cce:	2300      	movs	r3, #0
 8002cd0:	613b      	str	r3, [r7, #16]
 8002cd2:	4b22      	ldr	r3, [pc, #136]	; (8002d5c <HAL_TIM_MspPostInit+0xb0>)
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd6:	4a21      	ldr	r2, [pc, #132]	; (8002d5c <HAL_TIM_MspPostInit+0xb0>)
 8002cd8:	f043 0301 	orr.w	r3, r3, #1
 8002cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cde:	4b1f      	ldr	r3, [pc, #124]	; (8002d5c <HAL_TIM_MspPostInit+0xb0>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	613b      	str	r3, [r7, #16]
 8002ce8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA3     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = EN_R_Pin;
 8002cea:	2308      	movs	r3, #8
 8002cec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cee:	2302      	movs	r3, #2
 8002cf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(EN_R_GPIO_Port, &GPIO_InitStruct);
 8002cfe:	f107 0314 	add.w	r3, r7, #20
 8002d02:	4619      	mov	r1, r3
 8002d04:	4816      	ldr	r0, [pc, #88]	; (8002d60 <HAL_TIM_MspPostInit+0xb4>)
 8002d06:	f000 fe63 	bl	80039d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002d0a:	e022      	b.n	8002d52 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM3)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a14      	ldr	r2, [pc, #80]	; (8002d64 <HAL_TIM_MspPostInit+0xb8>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d11d      	bne.n	8002d52 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d16:	2300      	movs	r3, #0
 8002d18:	60fb      	str	r3, [r7, #12]
 8002d1a:	4b10      	ldr	r3, [pc, #64]	; (8002d5c <HAL_TIM_MspPostInit+0xb0>)
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1e:	4a0f      	ldr	r2, [pc, #60]	; (8002d5c <HAL_TIM_MspPostInit+0xb0>)
 8002d20:	f043 0302 	orr.w	r3, r3, #2
 8002d24:	6313      	str	r3, [r2, #48]	; 0x30
 8002d26:	4b0d      	ldr	r3, [pc, #52]	; (8002d5c <HAL_TIM_MspPostInit+0xb0>)
 8002d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	60fb      	str	r3, [r7, #12]
 8002d30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = P6_Pin;
 8002d32:	2301      	movs	r3, #1
 8002d34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d36:	2302      	movs	r3, #2
 8002d38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d42:	2302      	movs	r3, #2
 8002d44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(P6_GPIO_Port, &GPIO_InitStruct);
 8002d46:	f107 0314 	add.w	r3, r7, #20
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	4806      	ldr	r0, [pc, #24]	; (8002d68 <HAL_TIM_MspPostInit+0xbc>)
 8002d4e:	f000 fe3f 	bl	80039d0 <HAL_GPIO_Init>
}
 8002d52:	bf00      	nop
 8002d54:	3728      	adds	r7, #40	; 0x28
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	40023800 	.word	0x40023800
 8002d60:	40020000 	.word	0x40020000
 8002d64:	40000400 	.word	0x40000400
 8002d68:	40020400 	.word	0x40020400

08002d6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b08a      	sub	sp, #40	; 0x28
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d74:	f107 0314 	add.w	r3, r7, #20
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	605a      	str	r2, [r3, #4]
 8002d7e:	609a      	str	r2, [r3, #8]
 8002d80:	60da      	str	r2, [r3, #12]
 8002d82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a19      	ldr	r2, [pc, #100]	; (8002df0 <HAL_UART_MspInit+0x84>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d12c      	bne.n	8002de8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002d8e:	2300      	movs	r3, #0
 8002d90:	613b      	str	r3, [r7, #16]
 8002d92:	4b18      	ldr	r3, [pc, #96]	; (8002df4 <HAL_UART_MspInit+0x88>)
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	4a17      	ldr	r2, [pc, #92]	; (8002df4 <HAL_UART_MspInit+0x88>)
 8002d98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d9e:	4b15      	ldr	r3, [pc, #84]	; (8002df4 <HAL_UART_MspInit+0x88>)
 8002da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002da6:	613b      	str	r3, [r7, #16]
 8002da8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002daa:	2300      	movs	r3, #0
 8002dac:	60fb      	str	r3, [r7, #12]
 8002dae:	4b11      	ldr	r3, [pc, #68]	; (8002df4 <HAL_UART_MspInit+0x88>)
 8002db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db2:	4a10      	ldr	r2, [pc, #64]	; (8002df4 <HAL_UART_MspInit+0x88>)
 8002db4:	f043 0302 	orr.w	r3, r3, #2
 8002db8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dba:	4b0e      	ldr	r3, [pc, #56]	; (8002df4 <HAL_UART_MspInit+0x88>)
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	60fb      	str	r3, [r7, #12]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPS_RX_Pin|GPS_TX_Pin;
 8002dc6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002dca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dcc:	2302      	movs	r3, #2
 8002dce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002dd8:	2307      	movs	r3, #7
 8002dda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ddc:	f107 0314 	add.w	r3, r7, #20
 8002de0:	4619      	mov	r1, r3
 8002de2:	4805      	ldr	r0, [pc, #20]	; (8002df8 <HAL_UART_MspInit+0x8c>)
 8002de4:	f000 fdf4 	bl	80039d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002de8:	bf00      	nop
 8002dea:	3728      	adds	r7, #40	; 0x28
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40004800 	.word	0x40004800
 8002df4:	40023800 	.word	0x40023800
 8002df8:	40020400 	.word	0x40020400

08002dfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002e00:	bf00      	nop
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr

08002e0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e0e:	e7fe      	b.n	8002e0e <HardFault_Handler+0x4>

08002e10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e14:	e7fe      	b.n	8002e14 <MemManage_Handler+0x4>

08002e16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e16:	b480      	push	{r7}
 8002e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e1a:	e7fe      	b.n	8002e1a <BusFault_Handler+0x4>

08002e1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e20:	e7fe      	b.n	8002e20 <UsageFault_Handler+0x4>

08002e22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e22:	b480      	push	{r7}
 8002e24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e26:	bf00      	nop
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e34:	bf00      	nop
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e42:	bf00      	nop
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e50:	f000 f8ce 	bl	8002ff0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e54:	bf00      	nop
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002e5c:	2040      	movs	r0, #64	; 0x40
 8002e5e:	f000 ff83 	bl	8003d68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002e62:	bf00      	nop
 8002e64:	bd80      	pop	{r7, pc}
	...

08002e68 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002e6c:	4802      	ldr	r0, [pc, #8]	; (8002e78 <TIM3_IRQHandler+0x10>)
 8002e6e:	f005 f9ad 	bl	80081cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002e72:	bf00      	nop
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	20000d80 	.word	0x20000d80

08002e7c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8002e80:	4802      	ldr	r0, [pc, #8]	; (8002e8c <SDIO_IRQHandler+0x10>)
 8002e82:	f003 fc3b 	bl	80066fc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8002e86:	bf00      	nop
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	20000e40 	.word	0x20000e40

08002e90 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8002e94:	4802      	ldr	r0, [pc, #8]	; (8002ea0 <DMA2_Stream3_IRQHandler+0x10>)
 8002e96:	f000 fb27 	bl	80034e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002e9a:	bf00      	nop
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	20000c0c 	.word	0x20000c0c

08002ea4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002ea8:	4802      	ldr	r0, [pc, #8]	; (8002eb4 <OTG_FS_IRQHandler+0x10>)
 8002eaa:	f001 f9fd 	bl	80042a8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002eae:	bf00      	nop
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	20002864 	.word	0x20002864

08002eb8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8002ebc:	4802      	ldr	r0, [pc, #8]	; (8002ec8 <DMA2_Stream6_IRQHandler+0x10>)
 8002ebe:	f000 fb13 	bl	80034e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002ec2:	bf00      	nop
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	20000de0 	.word	0x20000de0

08002ecc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ed0:	4b08      	ldr	r3, [pc, #32]	; (8002ef4 <SystemInit+0x28>)
 8002ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed6:	4a07      	ldr	r2, [pc, #28]	; (8002ef4 <SystemInit+0x28>)
 8002ed8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002edc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002ee0:	4b04      	ldr	r3, [pc, #16]	; (8002ef4 <SystemInit+0x28>)
 8002ee2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ee6:	609a      	str	r2, [r3, #8]
#endif
}
 8002ee8:	bf00      	nop
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	e000ed00 	.word	0xe000ed00

08002ef8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002ef8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f30 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002efc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002efe:	e003      	b.n	8002f08 <LoopCopyDataInit>

08002f00 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002f00:	4b0c      	ldr	r3, [pc, #48]	; (8002f34 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002f02:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002f04:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002f06:	3104      	adds	r1, #4

08002f08 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002f08:	480b      	ldr	r0, [pc, #44]	; (8002f38 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002f0a:	4b0c      	ldr	r3, [pc, #48]	; (8002f3c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002f0c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002f0e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002f10:	d3f6      	bcc.n	8002f00 <CopyDataInit>
  ldr  r2, =_sbss
 8002f12:	4a0b      	ldr	r2, [pc, #44]	; (8002f40 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002f14:	e002      	b.n	8002f1c <LoopFillZerobss>

08002f16 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002f16:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002f18:	f842 3b04 	str.w	r3, [r2], #4

08002f1c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002f1c:	4b09      	ldr	r3, [pc, #36]	; (8002f44 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002f1e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002f20:	d3f9      	bcc.n	8002f16 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002f22:	f7ff ffd3 	bl	8002ecc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f26:	f00a ff1f 	bl	800dd68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f2a:	f7fe ffe7 	bl	8001efc <main>
  bx  lr    
 8002f2e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002f30:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002f34:	08012300 	.word	0x08012300
  ldr  r0, =_sdata
 8002f38:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002f3c:	20000354 	.word	0x20000354
  ldr  r2, =_sbss
 8002f40:	20000354 	.word	0x20000354
  ldr  r3, = _ebss
 8002f44:	20002c70 	.word	0x20002c70

08002f48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f48:	e7fe      	b.n	8002f48 <ADC_IRQHandler>
	...

08002f4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f50:	4b0e      	ldr	r3, [pc, #56]	; (8002f8c <HAL_Init+0x40>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a0d      	ldr	r2, [pc, #52]	; (8002f8c <HAL_Init+0x40>)
 8002f56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f5c:	4b0b      	ldr	r3, [pc, #44]	; (8002f8c <HAL_Init+0x40>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a0a      	ldr	r2, [pc, #40]	; (8002f8c <HAL_Init+0x40>)
 8002f62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f68:	4b08      	ldr	r3, [pc, #32]	; (8002f8c <HAL_Init+0x40>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a07      	ldr	r2, [pc, #28]	; (8002f8c <HAL_Init+0x40>)
 8002f6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f74:	2003      	movs	r0, #3
 8002f76:	f000 f94d 	bl	8003214 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f7a:	2000      	movs	r0, #0
 8002f7c:	f000 f808 	bl	8002f90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f80:	f7ff fc5e 	bl	8002840 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	40023c00 	.word	0x40023c00

08002f90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f98:	4b12      	ldr	r3, [pc, #72]	; (8002fe4 <HAL_InitTick+0x54>)
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	4b12      	ldr	r3, [pc, #72]	; (8002fe8 <HAL_InitTick+0x58>)
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f000 f965 	bl	800327e <HAL_SYSTICK_Config>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e00e      	b.n	8002fdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2b0f      	cmp	r3, #15
 8002fc2:	d80a      	bhi.n	8002fda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	6879      	ldr	r1, [r7, #4]
 8002fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fcc:	f000 f92d 	bl	800322a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fd0:	4a06      	ldr	r2, [pc, #24]	; (8002fec <HAL_InitTick+0x5c>)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	e000      	b.n	8002fdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3708      	adds	r7, #8
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	20000008 	.word	0x20000008
 8002fe8:	20000010 	.word	0x20000010
 8002fec:	2000000c 	.word	0x2000000c

08002ff0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ff4:	4b06      	ldr	r3, [pc, #24]	; (8003010 <HAL_IncTick+0x20>)
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	4b06      	ldr	r3, [pc, #24]	; (8003014 <HAL_IncTick+0x24>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4413      	add	r3, r2
 8003000:	4a04      	ldr	r2, [pc, #16]	; (8003014 <HAL_IncTick+0x24>)
 8003002:	6013      	str	r3, [r2, #0]
}
 8003004:	bf00      	nop
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	20000010 	.word	0x20000010
 8003014:	20000f5c 	.word	0x20000f5c

08003018 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
  return uwTick;
 800301c:	4b03      	ldr	r3, [pc, #12]	; (800302c <HAL_GetTick+0x14>)
 800301e:	681b      	ldr	r3, [r3, #0]
}
 8003020:	4618      	mov	r0, r3
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	20000f5c 	.word	0x20000f5c

08003030 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003038:	f7ff ffee 	bl	8003018 <HAL_GetTick>
 800303c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003048:	d005      	beq.n	8003056 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800304a:	4b09      	ldr	r3, [pc, #36]	; (8003070 <HAL_Delay+0x40>)
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	461a      	mov	r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	4413      	add	r3, r2
 8003054:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003056:	bf00      	nop
 8003058:	f7ff ffde 	bl	8003018 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	429a      	cmp	r2, r3
 8003066:	d8f7      	bhi.n	8003058 <HAL_Delay+0x28>
  {
  }
}
 8003068:	bf00      	nop
 800306a:	3710      	adds	r7, #16
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	20000010 	.word	0x20000010

08003074 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003074:	b480      	push	{r7}
 8003076:	b085      	sub	sp, #20
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f003 0307 	and.w	r3, r3, #7
 8003082:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003084:	4b0c      	ldr	r3, [pc, #48]	; (80030b8 <__NVIC_SetPriorityGrouping+0x44>)
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800308a:	68ba      	ldr	r2, [r7, #8]
 800308c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003090:	4013      	ands	r3, r2
 8003092:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800309c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030a6:	4a04      	ldr	r2, [pc, #16]	; (80030b8 <__NVIC_SetPriorityGrouping+0x44>)
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	60d3      	str	r3, [r2, #12]
}
 80030ac:	bf00      	nop
 80030ae:	3714      	adds	r7, #20
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr
 80030b8:	e000ed00 	.word	0xe000ed00

080030bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030c0:	4b04      	ldr	r3, [pc, #16]	; (80030d4 <__NVIC_GetPriorityGrouping+0x18>)
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	0a1b      	lsrs	r3, r3, #8
 80030c6:	f003 0307 	and.w	r3, r3, #7
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	e000ed00 	.word	0xe000ed00

080030d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	4603      	mov	r3, r0
 80030e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	db0b      	blt.n	8003102 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030ea:	79fb      	ldrb	r3, [r7, #7]
 80030ec:	f003 021f 	and.w	r2, r3, #31
 80030f0:	4907      	ldr	r1, [pc, #28]	; (8003110 <__NVIC_EnableIRQ+0x38>)
 80030f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f6:	095b      	lsrs	r3, r3, #5
 80030f8:	2001      	movs	r0, #1
 80030fa:	fa00 f202 	lsl.w	r2, r0, r2
 80030fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003102:	bf00      	nop
 8003104:	370c      	adds	r7, #12
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	e000e100 	.word	0xe000e100

08003114 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	4603      	mov	r3, r0
 800311c:	6039      	str	r1, [r7, #0]
 800311e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003124:	2b00      	cmp	r3, #0
 8003126:	db0a      	blt.n	800313e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	b2da      	uxtb	r2, r3
 800312c:	490c      	ldr	r1, [pc, #48]	; (8003160 <__NVIC_SetPriority+0x4c>)
 800312e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003132:	0112      	lsls	r2, r2, #4
 8003134:	b2d2      	uxtb	r2, r2
 8003136:	440b      	add	r3, r1
 8003138:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800313c:	e00a      	b.n	8003154 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	b2da      	uxtb	r2, r3
 8003142:	4908      	ldr	r1, [pc, #32]	; (8003164 <__NVIC_SetPriority+0x50>)
 8003144:	79fb      	ldrb	r3, [r7, #7]
 8003146:	f003 030f 	and.w	r3, r3, #15
 800314a:	3b04      	subs	r3, #4
 800314c:	0112      	lsls	r2, r2, #4
 800314e:	b2d2      	uxtb	r2, r2
 8003150:	440b      	add	r3, r1
 8003152:	761a      	strb	r2, [r3, #24]
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr
 8003160:	e000e100 	.word	0xe000e100
 8003164:	e000ed00 	.word	0xe000ed00

08003168 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003168:	b480      	push	{r7}
 800316a:	b089      	sub	sp, #36	; 0x24
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f003 0307 	and.w	r3, r3, #7
 800317a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	f1c3 0307 	rsb	r3, r3, #7
 8003182:	2b04      	cmp	r3, #4
 8003184:	bf28      	it	cs
 8003186:	2304      	movcs	r3, #4
 8003188:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	3304      	adds	r3, #4
 800318e:	2b06      	cmp	r3, #6
 8003190:	d902      	bls.n	8003198 <NVIC_EncodePriority+0x30>
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	3b03      	subs	r3, #3
 8003196:	e000      	b.n	800319a <NVIC_EncodePriority+0x32>
 8003198:	2300      	movs	r3, #0
 800319a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800319c:	f04f 32ff 	mov.w	r2, #4294967295
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	fa02 f303 	lsl.w	r3, r2, r3
 80031a6:	43da      	mvns	r2, r3
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	401a      	ands	r2, r3
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031b0:	f04f 31ff 	mov.w	r1, #4294967295
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	fa01 f303 	lsl.w	r3, r1, r3
 80031ba:	43d9      	mvns	r1, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031c0:	4313      	orrs	r3, r2
         );
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3724      	adds	r7, #36	; 0x24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
	...

080031d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	3b01      	subs	r3, #1
 80031dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031e0:	d301      	bcc.n	80031e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031e2:	2301      	movs	r3, #1
 80031e4:	e00f      	b.n	8003206 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031e6:	4a0a      	ldr	r2, [pc, #40]	; (8003210 <SysTick_Config+0x40>)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	3b01      	subs	r3, #1
 80031ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031ee:	210f      	movs	r1, #15
 80031f0:	f04f 30ff 	mov.w	r0, #4294967295
 80031f4:	f7ff ff8e 	bl	8003114 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031f8:	4b05      	ldr	r3, [pc, #20]	; (8003210 <SysTick_Config+0x40>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031fe:	4b04      	ldr	r3, [pc, #16]	; (8003210 <SysTick_Config+0x40>)
 8003200:	2207      	movs	r2, #7
 8003202:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3708      	adds	r7, #8
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	e000e010 	.word	0xe000e010

08003214 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f7ff ff29 	bl	8003074 <__NVIC_SetPriorityGrouping>
}
 8003222:	bf00      	nop
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800322a:	b580      	push	{r7, lr}
 800322c:	b086      	sub	sp, #24
 800322e:	af00      	add	r7, sp, #0
 8003230:	4603      	mov	r3, r0
 8003232:	60b9      	str	r1, [r7, #8]
 8003234:	607a      	str	r2, [r7, #4]
 8003236:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003238:	2300      	movs	r3, #0
 800323a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800323c:	f7ff ff3e 	bl	80030bc <__NVIC_GetPriorityGrouping>
 8003240:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	68b9      	ldr	r1, [r7, #8]
 8003246:	6978      	ldr	r0, [r7, #20]
 8003248:	f7ff ff8e 	bl	8003168 <NVIC_EncodePriority>
 800324c:	4602      	mov	r2, r0
 800324e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003252:	4611      	mov	r1, r2
 8003254:	4618      	mov	r0, r3
 8003256:	f7ff ff5d 	bl	8003114 <__NVIC_SetPriority>
}
 800325a:	bf00      	nop
 800325c:	3718      	adds	r7, #24
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}

08003262 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003262:	b580      	push	{r7, lr}
 8003264:	b082      	sub	sp, #8
 8003266:	af00      	add	r7, sp, #0
 8003268:	4603      	mov	r3, r0
 800326a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800326c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff ff31 	bl	80030d8 <__NVIC_EnableIRQ>
}
 8003276:	bf00      	nop
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}

0800327e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800327e:	b580      	push	{r7, lr}
 8003280:	b082      	sub	sp, #8
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f7ff ffa2 	bl	80031d0 <SysTick_Config>
 800328c:	4603      	mov	r3, r0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
	...

08003298 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b086      	sub	sp, #24
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80032a0:	2300      	movs	r3, #0
 80032a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80032a4:	f7ff feb8 	bl	8003018 <HAL_GetTick>
 80032a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d101      	bne.n	80032b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e099      	b.n	80033e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2202      	movs	r2, #2
 80032c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f022 0201 	bic.w	r2, r2, #1
 80032d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032d4:	e00f      	b.n	80032f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032d6:	f7ff fe9f 	bl	8003018 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	2b05      	cmp	r3, #5
 80032e2:	d908      	bls.n	80032f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2220      	movs	r2, #32
 80032e8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2203      	movs	r2, #3
 80032ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e078      	b.n	80033e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1e8      	bne.n	80032d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800330c:	697a      	ldr	r2, [r7, #20]
 800330e:	4b38      	ldr	r3, [pc, #224]	; (80033f0 <HAL_DMA_Init+0x158>)
 8003310:	4013      	ands	r3, r2
 8003312:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685a      	ldr	r2, [r3, #4]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003322:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800332e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800333a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a1b      	ldr	r3, [r3, #32]
 8003340:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003342:	697a      	ldr	r2, [r7, #20]
 8003344:	4313      	orrs	r3, r2
 8003346:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334c:	2b04      	cmp	r3, #4
 800334e:	d107      	bne.n	8003360 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003358:	4313      	orrs	r3, r2
 800335a:	697a      	ldr	r2, [r7, #20]
 800335c:	4313      	orrs	r3, r2
 800335e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	697a      	ldr	r2, [r7, #20]
 8003366:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	f023 0307 	bic.w	r3, r3, #7
 8003376:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337c:	697a      	ldr	r2, [r7, #20]
 800337e:	4313      	orrs	r3, r2
 8003380:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003386:	2b04      	cmp	r3, #4
 8003388:	d117      	bne.n	80033ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	4313      	orrs	r3, r2
 8003392:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00e      	beq.n	80033ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f000 fa9d 	bl	80038dc <DMA_CheckFifoParam>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d008      	beq.n	80033ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2240      	movs	r2, #64	; 0x40
 80033ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2201      	movs	r2, #1
 80033b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80033b6:	2301      	movs	r3, #1
 80033b8:	e016      	b.n	80033e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 fa54 	bl	8003870 <DMA_CalcBaseAndBitshift>
 80033c8:	4603      	mov	r3, r0
 80033ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d0:	223f      	movs	r2, #63	; 0x3f
 80033d2:	409a      	lsls	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3718      	adds	r7, #24
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	f010803f 	.word	0xf010803f

080033f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
 8003400:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003402:	2300      	movs	r3, #0
 8003404:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800340a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003412:	2b01      	cmp	r3, #1
 8003414:	d101      	bne.n	800341a <HAL_DMA_Start_IT+0x26>
 8003416:	2302      	movs	r3, #2
 8003418:	e040      	b.n	800349c <HAL_DMA_Start_IT+0xa8>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2201      	movs	r2, #1
 800341e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b01      	cmp	r3, #1
 800342c:	d12f      	bne.n	800348e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2202      	movs	r2, #2
 8003432:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	68b9      	ldr	r1, [r7, #8]
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f000 f9e6 	bl	8003814 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800344c:	223f      	movs	r2, #63	; 0x3f
 800344e:	409a      	lsls	r2, r3
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f042 0216 	orr.w	r2, r2, #22
 8003462:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003468:	2b00      	cmp	r3, #0
 800346a:	d007      	beq.n	800347c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f042 0208 	orr.w	r2, r2, #8
 800347a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f042 0201 	orr.w	r2, r2, #1
 800348a:	601a      	str	r2, [r3, #0]
 800348c:	e005      	b.n	800349a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003496:	2302      	movs	r3, #2
 8003498:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800349a:	7dfb      	ldrb	r3, [r7, #23]
}
 800349c:	4618      	mov	r0, r3
 800349e:	3718      	adds	r7, #24
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d004      	beq.n	80034c2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2280      	movs	r2, #128	; 0x80
 80034bc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e00c      	b.n	80034dc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2205      	movs	r2, #5
 80034c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f022 0201 	bic.w	r2, r2, #1
 80034d8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b086      	sub	sp, #24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80034f0:	2300      	movs	r3, #0
 80034f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80034f4:	4b92      	ldr	r3, [pc, #584]	; (8003740 <HAL_DMA_IRQHandler+0x258>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a92      	ldr	r2, [pc, #584]	; (8003744 <HAL_DMA_IRQHandler+0x25c>)
 80034fa:	fba2 2303 	umull	r2, r3, r2, r3
 80034fe:	0a9b      	lsrs	r3, r3, #10
 8003500:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003506:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003512:	2208      	movs	r2, #8
 8003514:	409a      	lsls	r2, r3
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	4013      	ands	r3, r2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d01a      	beq.n	8003554 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0304 	and.w	r3, r3, #4
 8003528:	2b00      	cmp	r3, #0
 800352a:	d013      	beq.n	8003554 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f022 0204 	bic.w	r2, r2, #4
 800353a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003540:	2208      	movs	r2, #8
 8003542:	409a      	lsls	r2, r3
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800354c:	f043 0201 	orr.w	r2, r3, #1
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003558:	2201      	movs	r2, #1
 800355a:	409a      	lsls	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	4013      	ands	r3, r2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d012      	beq.n	800358a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00b      	beq.n	800358a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003576:	2201      	movs	r2, #1
 8003578:	409a      	lsls	r2, r3
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003582:	f043 0202 	orr.w	r2, r3, #2
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800358e:	2204      	movs	r2, #4
 8003590:	409a      	lsls	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	4013      	ands	r3, r2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d012      	beq.n	80035c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00b      	beq.n	80035c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ac:	2204      	movs	r2, #4
 80035ae:	409a      	lsls	r2, r3
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b8:	f043 0204 	orr.w	r2, r3, #4
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c4:	2210      	movs	r2, #16
 80035c6:	409a      	lsls	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	4013      	ands	r3, r2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d043      	beq.n	8003658 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0308 	and.w	r3, r3, #8
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d03c      	beq.n	8003658 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035e2:	2210      	movs	r2, #16
 80035e4:	409a      	lsls	r2, r3
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d018      	beq.n	800362a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d108      	bne.n	8003618 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360a:	2b00      	cmp	r3, #0
 800360c:	d024      	beq.n	8003658 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	4798      	blx	r3
 8003616:	e01f      	b.n	8003658 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800361c:	2b00      	cmp	r3, #0
 800361e:	d01b      	beq.n	8003658 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	4798      	blx	r3
 8003628:	e016      	b.n	8003658 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003634:	2b00      	cmp	r3, #0
 8003636:	d107      	bne.n	8003648 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f022 0208 	bic.w	r2, r2, #8
 8003646:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364c:	2b00      	cmp	r3, #0
 800364e:	d003      	beq.n	8003658 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800365c:	2220      	movs	r2, #32
 800365e:	409a      	lsls	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	4013      	ands	r3, r2
 8003664:	2b00      	cmp	r3, #0
 8003666:	f000 808e 	beq.w	8003786 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0310 	and.w	r3, r3, #16
 8003674:	2b00      	cmp	r3, #0
 8003676:	f000 8086 	beq.w	8003786 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800367e:	2220      	movs	r2, #32
 8003680:	409a      	lsls	r2, r3
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b05      	cmp	r3, #5
 8003690:	d136      	bne.n	8003700 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f022 0216 	bic.w	r2, r2, #22
 80036a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	695a      	ldr	r2, [r3, #20]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036b0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d103      	bne.n	80036c2 <HAL_DMA_IRQHandler+0x1da>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d007      	beq.n	80036d2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 0208 	bic.w	r2, r2, #8
 80036d0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d6:	223f      	movs	r2, #63	; 0x3f
 80036d8:	409a      	lsls	r2, r3
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d07d      	beq.n	80037f2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	4798      	blx	r3
        }
        return;
 80036fe:	e078      	b.n	80037f2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d01c      	beq.n	8003748 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d108      	bne.n	800372e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003720:	2b00      	cmp	r3, #0
 8003722:	d030      	beq.n	8003786 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	4798      	blx	r3
 800372c:	e02b      	b.n	8003786 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003732:	2b00      	cmp	r3, #0
 8003734:	d027      	beq.n	8003786 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	4798      	blx	r3
 800373e:	e022      	b.n	8003786 <HAL_DMA_IRQHandler+0x29e>
 8003740:	20000008 	.word	0x20000008
 8003744:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003752:	2b00      	cmp	r3, #0
 8003754:	d10f      	bne.n	8003776 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f022 0210 	bic.w	r2, r2, #16
 8003764:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800378a:	2b00      	cmp	r3, #0
 800378c:	d032      	beq.n	80037f4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b00      	cmp	r3, #0
 8003798:	d022      	beq.n	80037e0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2205      	movs	r2, #5
 800379e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f022 0201 	bic.w	r2, r2, #1
 80037b0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	3301      	adds	r3, #1
 80037b6:	60bb      	str	r3, [r7, #8]
 80037b8:	697a      	ldr	r2, [r7, #20]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d307      	bcc.n	80037ce <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0301 	and.w	r3, r3, #1
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d1f2      	bne.n	80037b2 <HAL_DMA_IRQHandler+0x2ca>
 80037cc:	e000      	b.n	80037d0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80037ce:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d005      	beq.n	80037f4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	4798      	blx	r3
 80037f0:	e000      	b.n	80037f4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80037f2:	bf00      	nop
    }
  }
}
 80037f4:	3718      	adds	r7, #24
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop

080037fc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003808:	4618      	mov	r0, r3
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003814:	b480      	push	{r7}
 8003816:	b085      	sub	sp, #20
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]
 8003820:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003830:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	683a      	ldr	r2, [r7, #0]
 8003838:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	2b40      	cmp	r3, #64	; 0x40
 8003840:	d108      	bne.n	8003854 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68ba      	ldr	r2, [r7, #8]
 8003850:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003852:	e007      	b.n	8003864 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	60da      	str	r2, [r3, #12]
}
 8003864:	bf00      	nop
 8003866:	3714      	adds	r7, #20
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	b2db      	uxtb	r3, r3
 800387e:	3b10      	subs	r3, #16
 8003880:	4a14      	ldr	r2, [pc, #80]	; (80038d4 <DMA_CalcBaseAndBitshift+0x64>)
 8003882:	fba2 2303 	umull	r2, r3, r2, r3
 8003886:	091b      	lsrs	r3, r3, #4
 8003888:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800388a:	4a13      	ldr	r2, [pc, #76]	; (80038d8 <DMA_CalcBaseAndBitshift+0x68>)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	4413      	add	r3, r2
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	461a      	mov	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2b03      	cmp	r3, #3
 800389c:	d909      	bls.n	80038b2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80038a6:	f023 0303 	bic.w	r3, r3, #3
 80038aa:	1d1a      	adds	r2, r3, #4
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	659a      	str	r2, [r3, #88]	; 0x58
 80038b0:	e007      	b.n	80038c2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80038ba:	f023 0303 	bic.w	r3, r3, #3
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3714      	adds	r7, #20
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	aaaaaaab 	.word	0xaaaaaaab
 80038d8:	08012020 	.word	0x08012020

080038dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80038dc:	b480      	push	{r7}
 80038de:	b085      	sub	sp, #20
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038e4:	2300      	movs	r3, #0
 80038e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d11f      	bne.n	8003936 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	2b03      	cmp	r3, #3
 80038fa:	d855      	bhi.n	80039a8 <DMA_CheckFifoParam+0xcc>
 80038fc:	a201      	add	r2, pc, #4	; (adr r2, 8003904 <DMA_CheckFifoParam+0x28>)
 80038fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003902:	bf00      	nop
 8003904:	08003915 	.word	0x08003915
 8003908:	08003927 	.word	0x08003927
 800390c:	08003915 	.word	0x08003915
 8003910:	080039a9 	.word	0x080039a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003918:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d045      	beq.n	80039ac <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003924:	e042      	b.n	80039ac <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800392e:	d13f      	bne.n	80039b0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003934:	e03c      	b.n	80039b0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800393e:	d121      	bne.n	8003984 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	2b03      	cmp	r3, #3
 8003944:	d836      	bhi.n	80039b4 <DMA_CheckFifoParam+0xd8>
 8003946:	a201      	add	r2, pc, #4	; (adr r2, 800394c <DMA_CheckFifoParam+0x70>)
 8003948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800394c:	0800395d 	.word	0x0800395d
 8003950:	08003963 	.word	0x08003963
 8003954:	0800395d 	.word	0x0800395d
 8003958:	08003975 	.word	0x08003975
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	73fb      	strb	r3, [r7, #15]
      break;
 8003960:	e02f      	b.n	80039c2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003966:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d024      	beq.n	80039b8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003972:	e021      	b.n	80039b8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003978:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800397c:	d11e      	bne.n	80039bc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003982:	e01b      	b.n	80039bc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	2b02      	cmp	r3, #2
 8003988:	d902      	bls.n	8003990 <DMA_CheckFifoParam+0xb4>
 800398a:	2b03      	cmp	r3, #3
 800398c:	d003      	beq.n	8003996 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800398e:	e018      	b.n	80039c2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	73fb      	strb	r3, [r7, #15]
      break;
 8003994:	e015      	b.n	80039c2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00e      	beq.n	80039c0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	73fb      	strb	r3, [r7, #15]
      break;
 80039a6:	e00b      	b.n	80039c0 <DMA_CheckFifoParam+0xe4>
      break;
 80039a8:	bf00      	nop
 80039aa:	e00a      	b.n	80039c2 <DMA_CheckFifoParam+0xe6>
      break;
 80039ac:	bf00      	nop
 80039ae:	e008      	b.n	80039c2 <DMA_CheckFifoParam+0xe6>
      break;
 80039b0:	bf00      	nop
 80039b2:	e006      	b.n	80039c2 <DMA_CheckFifoParam+0xe6>
      break;
 80039b4:	bf00      	nop
 80039b6:	e004      	b.n	80039c2 <DMA_CheckFifoParam+0xe6>
      break;
 80039b8:	bf00      	nop
 80039ba:	e002      	b.n	80039c2 <DMA_CheckFifoParam+0xe6>
      break;   
 80039bc:	bf00      	nop
 80039be:	e000      	b.n	80039c2 <DMA_CheckFifoParam+0xe6>
      break;
 80039c0:	bf00      	nop
    }
  } 
  
  return status; 
 80039c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3714      	adds	r7, #20
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b089      	sub	sp, #36	; 0x24
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039da:	2300      	movs	r3, #0
 80039dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80039de:	2300      	movs	r3, #0
 80039e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80039e2:	2300      	movs	r3, #0
 80039e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039e6:	2300      	movs	r3, #0
 80039e8:	61fb      	str	r3, [r7, #28]
 80039ea:	e16b      	b.n	8003cc4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039ec:	2201      	movs	r2, #1
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	fa02 f303 	lsl.w	r3, r2, r3
 80039f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	4013      	ands	r3, r2
 80039fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	f040 815a 	bne.w	8003cbe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d00b      	beq.n	8003a2a <HAL_GPIO_Init+0x5a>
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d007      	beq.n	8003a2a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a1e:	2b11      	cmp	r3, #17
 8003a20:	d003      	beq.n	8003a2a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	2b12      	cmp	r3, #18
 8003a28:	d130      	bne.n	8003a8c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	2203      	movs	r2, #3
 8003a36:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3a:	43db      	mvns	r3, r3
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	4013      	ands	r3, r2
 8003a40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	68da      	ldr	r2, [r3, #12]
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4e:	69ba      	ldr	r2, [r7, #24]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	69ba      	ldr	r2, [r7, #24]
 8003a58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a60:	2201      	movs	r2, #1
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	fa02 f303 	lsl.w	r3, r2, r3
 8003a68:	43db      	mvns	r3, r3
 8003a6a:	69ba      	ldr	r2, [r7, #24]
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	091b      	lsrs	r3, r3, #4
 8003a76:	f003 0201 	and.w	r2, r3, #1
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	005b      	lsls	r3, r3, #1
 8003a96:	2203      	movs	r2, #3
 8003a98:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9c:	43db      	mvns	r3, r3
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	689a      	ldr	r2, [r3, #8]
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	005b      	lsls	r3, r3, #1
 8003aac:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab0:	69ba      	ldr	r2, [r7, #24]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	69ba      	ldr	r2, [r7, #24]
 8003aba:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d003      	beq.n	8003acc <HAL_GPIO_Init+0xfc>
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	2b12      	cmp	r3, #18
 8003aca:	d123      	bne.n	8003b14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	08da      	lsrs	r2, r3, #3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	3208      	adds	r2, #8
 8003ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	f003 0307 	and.w	r3, r3, #7
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	220f      	movs	r2, #15
 8003ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae8:	43db      	mvns	r3, r3
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	4013      	ands	r3, r2
 8003aee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	691a      	ldr	r2, [r3, #16]
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	f003 0307 	and.w	r3, r3, #7
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	fa02 f303 	lsl.w	r3, r2, r3
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	08da      	lsrs	r2, r3, #3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	3208      	adds	r2, #8
 8003b0e:	69b9      	ldr	r1, [r7, #24]
 8003b10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	005b      	lsls	r3, r3, #1
 8003b1e:	2203      	movs	r2, #3
 8003b20:	fa02 f303 	lsl.w	r3, r2, r3
 8003b24:	43db      	mvns	r3, r3
 8003b26:	69ba      	ldr	r2, [r7, #24]
 8003b28:	4013      	ands	r3, r2
 8003b2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f003 0203 	and.w	r2, r3, #3
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	005b      	lsls	r3, r3, #1
 8003b38:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	69ba      	ldr	r2, [r7, #24]
 8003b46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f000 80b4 	beq.w	8003cbe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b56:	2300      	movs	r3, #0
 8003b58:	60fb      	str	r3, [r7, #12]
 8003b5a:	4b5f      	ldr	r3, [pc, #380]	; (8003cd8 <HAL_GPIO_Init+0x308>)
 8003b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5e:	4a5e      	ldr	r2, [pc, #376]	; (8003cd8 <HAL_GPIO_Init+0x308>)
 8003b60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b64:	6453      	str	r3, [r2, #68]	; 0x44
 8003b66:	4b5c      	ldr	r3, [pc, #368]	; (8003cd8 <HAL_GPIO_Init+0x308>)
 8003b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b6e:	60fb      	str	r3, [r7, #12]
 8003b70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b72:	4a5a      	ldr	r2, [pc, #360]	; (8003cdc <HAL_GPIO_Init+0x30c>)
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	089b      	lsrs	r3, r3, #2
 8003b78:	3302      	adds	r3, #2
 8003b7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	f003 0303 	and.w	r3, r3, #3
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	220f      	movs	r2, #15
 8003b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8e:	43db      	mvns	r3, r3
 8003b90:	69ba      	ldr	r2, [r7, #24]
 8003b92:	4013      	ands	r3, r2
 8003b94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a51      	ldr	r2, [pc, #324]	; (8003ce0 <HAL_GPIO_Init+0x310>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d02b      	beq.n	8003bf6 <HAL_GPIO_Init+0x226>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a50      	ldr	r2, [pc, #320]	; (8003ce4 <HAL_GPIO_Init+0x314>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d025      	beq.n	8003bf2 <HAL_GPIO_Init+0x222>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a4f      	ldr	r2, [pc, #316]	; (8003ce8 <HAL_GPIO_Init+0x318>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d01f      	beq.n	8003bee <HAL_GPIO_Init+0x21e>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a4e      	ldr	r2, [pc, #312]	; (8003cec <HAL_GPIO_Init+0x31c>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d019      	beq.n	8003bea <HAL_GPIO_Init+0x21a>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a4d      	ldr	r2, [pc, #308]	; (8003cf0 <HAL_GPIO_Init+0x320>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d013      	beq.n	8003be6 <HAL_GPIO_Init+0x216>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a4c      	ldr	r2, [pc, #304]	; (8003cf4 <HAL_GPIO_Init+0x324>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d00d      	beq.n	8003be2 <HAL_GPIO_Init+0x212>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a4b      	ldr	r2, [pc, #300]	; (8003cf8 <HAL_GPIO_Init+0x328>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d007      	beq.n	8003bde <HAL_GPIO_Init+0x20e>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a4a      	ldr	r2, [pc, #296]	; (8003cfc <HAL_GPIO_Init+0x32c>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d101      	bne.n	8003bda <HAL_GPIO_Init+0x20a>
 8003bd6:	2307      	movs	r3, #7
 8003bd8:	e00e      	b.n	8003bf8 <HAL_GPIO_Init+0x228>
 8003bda:	2308      	movs	r3, #8
 8003bdc:	e00c      	b.n	8003bf8 <HAL_GPIO_Init+0x228>
 8003bde:	2306      	movs	r3, #6
 8003be0:	e00a      	b.n	8003bf8 <HAL_GPIO_Init+0x228>
 8003be2:	2305      	movs	r3, #5
 8003be4:	e008      	b.n	8003bf8 <HAL_GPIO_Init+0x228>
 8003be6:	2304      	movs	r3, #4
 8003be8:	e006      	b.n	8003bf8 <HAL_GPIO_Init+0x228>
 8003bea:	2303      	movs	r3, #3
 8003bec:	e004      	b.n	8003bf8 <HAL_GPIO_Init+0x228>
 8003bee:	2302      	movs	r3, #2
 8003bf0:	e002      	b.n	8003bf8 <HAL_GPIO_Init+0x228>
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e000      	b.n	8003bf8 <HAL_GPIO_Init+0x228>
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	69fa      	ldr	r2, [r7, #28]
 8003bfa:	f002 0203 	and.w	r2, r2, #3
 8003bfe:	0092      	lsls	r2, r2, #2
 8003c00:	4093      	lsls	r3, r2
 8003c02:	69ba      	ldr	r2, [r7, #24]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c08:	4934      	ldr	r1, [pc, #208]	; (8003cdc <HAL_GPIO_Init+0x30c>)
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	089b      	lsrs	r3, r3, #2
 8003c0e:	3302      	adds	r3, #2
 8003c10:	69ba      	ldr	r2, [r7, #24]
 8003c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c16:	4b3a      	ldr	r3, [pc, #232]	; (8003d00 <HAL_GPIO_Init+0x330>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	43db      	mvns	r3, r3
 8003c20:	69ba      	ldr	r2, [r7, #24]
 8003c22:	4013      	ands	r3, r2
 8003c24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d003      	beq.n	8003c3a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003c32:	69ba      	ldr	r2, [r7, #24]
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c3a:	4a31      	ldr	r2, [pc, #196]	; (8003d00 <HAL_GPIO_Init+0x330>)
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003c40:	4b2f      	ldr	r3, [pc, #188]	; (8003d00 <HAL_GPIO_Init+0x330>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	43db      	mvns	r3, r3
 8003c4a:	69ba      	ldr	r2, [r7, #24]
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d003      	beq.n	8003c64 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c64:	4a26      	ldr	r2, [pc, #152]	; (8003d00 <HAL_GPIO_Init+0x330>)
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c6a:	4b25      	ldr	r3, [pc, #148]	; (8003d00 <HAL_GPIO_Init+0x330>)
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	43db      	mvns	r3, r3
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	4013      	ands	r3, r2
 8003c78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d003      	beq.n	8003c8e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003c86:	69ba      	ldr	r2, [r7, #24]
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c8e:	4a1c      	ldr	r2, [pc, #112]	; (8003d00 <HAL_GPIO_Init+0x330>)
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c94:	4b1a      	ldr	r3, [pc, #104]	; (8003d00 <HAL_GPIO_Init+0x330>)
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	43db      	mvns	r3, r3
 8003c9e:	69ba      	ldr	r2, [r7, #24]
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d003      	beq.n	8003cb8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003cb0:	69ba      	ldr	r2, [r7, #24]
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003cb8:	4a11      	ldr	r2, [pc, #68]	; (8003d00 <HAL_GPIO_Init+0x330>)
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	61fb      	str	r3, [r7, #28]
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	2b0f      	cmp	r3, #15
 8003cc8:	f67f ae90 	bls.w	80039ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ccc:	bf00      	nop
 8003cce:	3724      	adds	r7, #36	; 0x24
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr
 8003cd8:	40023800 	.word	0x40023800
 8003cdc:	40013800 	.word	0x40013800
 8003ce0:	40020000 	.word	0x40020000
 8003ce4:	40020400 	.word	0x40020400
 8003ce8:	40020800 	.word	0x40020800
 8003cec:	40020c00 	.word	0x40020c00
 8003cf0:	40021000 	.word	0x40021000
 8003cf4:	40021400 	.word	0x40021400
 8003cf8:	40021800 	.word	0x40021800
 8003cfc:	40021c00 	.word	0x40021c00
 8003d00:	40013c00 	.word	0x40013c00

08003d04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b085      	sub	sp, #20
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	691a      	ldr	r2, [r3, #16]
 8003d14:	887b      	ldrh	r3, [r7, #2]
 8003d16:	4013      	ands	r3, r2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d002      	beq.n	8003d22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	73fb      	strb	r3, [r7, #15]
 8003d20:	e001      	b.n	8003d26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d22:	2300      	movs	r3, #0
 8003d24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3714      	adds	r7, #20
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	807b      	strh	r3, [r7, #2]
 8003d40:	4613      	mov	r3, r2
 8003d42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d44:	787b      	ldrb	r3, [r7, #1]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d003      	beq.n	8003d52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d4a:	887a      	ldrh	r2, [r7, #2]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d50:	e003      	b.n	8003d5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d52:	887b      	ldrh	r3, [r7, #2]
 8003d54:	041a      	lsls	r2, r3, #16
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	619a      	str	r2, [r3, #24]
}
 8003d5a:	bf00      	nop
 8003d5c:	370c      	adds	r7, #12
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
	...

08003d68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	4603      	mov	r3, r0
 8003d70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003d72:	4b08      	ldr	r3, [pc, #32]	; (8003d94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d74:	695a      	ldr	r2, [r3, #20]
 8003d76:	88fb      	ldrh	r3, [r7, #6]
 8003d78:	4013      	ands	r3, r2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d006      	beq.n	8003d8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d7e:	4a05      	ldr	r2, [pc, #20]	; (8003d94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d80:	88fb      	ldrh	r3, [r7, #6]
 8003d82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d84:	88fb      	ldrh	r3, [r7, #6]
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7fe fd32 	bl	80027f0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003d8c:	bf00      	nop
 8003d8e:	3708      	adds	r7, #8
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	40013c00 	.word	0x40013c00

08003d98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e11f      	b.n	8003fea <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d106      	bne.n	8003dc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f7fe fd66 	bl	8002890 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2224      	movs	r2, #36	; 0x24
 8003dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f022 0201 	bic.w	r2, r2, #1
 8003dda:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003dea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003dfa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003dfc:	f001 fea2 	bl	8005b44 <HAL_RCC_GetPCLK1Freq>
 8003e00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	4a7b      	ldr	r2, [pc, #492]	; (8003ff4 <HAL_I2C_Init+0x25c>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d807      	bhi.n	8003e1c <HAL_I2C_Init+0x84>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	4a7a      	ldr	r2, [pc, #488]	; (8003ff8 <HAL_I2C_Init+0x260>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	bf94      	ite	ls
 8003e14:	2301      	movls	r3, #1
 8003e16:	2300      	movhi	r3, #0
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	e006      	b.n	8003e2a <HAL_I2C_Init+0x92>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	4a77      	ldr	r2, [pc, #476]	; (8003ffc <HAL_I2C_Init+0x264>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	bf94      	ite	ls
 8003e24:	2301      	movls	r3, #1
 8003e26:	2300      	movhi	r3, #0
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e0db      	b.n	8003fea <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	4a72      	ldr	r2, [pc, #456]	; (8004000 <HAL_I2C_Init+0x268>)
 8003e36:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3a:	0c9b      	lsrs	r3, r3, #18
 8003e3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68ba      	ldr	r2, [r7, #8]
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	6a1b      	ldr	r3, [r3, #32]
 8003e58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	4a64      	ldr	r2, [pc, #400]	; (8003ff4 <HAL_I2C_Init+0x25c>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d802      	bhi.n	8003e6c <HAL_I2C_Init+0xd4>
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	3301      	adds	r3, #1
 8003e6a:	e009      	b.n	8003e80 <HAL_I2C_Init+0xe8>
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e72:	fb02 f303 	mul.w	r3, r2, r3
 8003e76:	4a63      	ldr	r2, [pc, #396]	; (8004004 <HAL_I2C_Init+0x26c>)
 8003e78:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7c:	099b      	lsrs	r3, r3, #6
 8003e7e:	3301      	adds	r3, #1
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	6812      	ldr	r2, [r2, #0]
 8003e84:	430b      	orrs	r3, r1
 8003e86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	69db      	ldr	r3, [r3, #28]
 8003e8e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003e92:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	4956      	ldr	r1, [pc, #344]	; (8003ff4 <HAL_I2C_Init+0x25c>)
 8003e9c:	428b      	cmp	r3, r1
 8003e9e:	d80d      	bhi.n	8003ebc <HAL_I2C_Init+0x124>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	1e59      	subs	r1, r3, #1
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	005b      	lsls	r3, r3, #1
 8003eaa:	fbb1 f3f3 	udiv	r3, r1, r3
 8003eae:	3301      	adds	r3, #1
 8003eb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eb4:	2b04      	cmp	r3, #4
 8003eb6:	bf38      	it	cc
 8003eb8:	2304      	movcc	r3, #4
 8003eba:	e04f      	b.n	8003f5c <HAL_I2C_Init+0x1c4>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d111      	bne.n	8003ee8 <HAL_I2C_Init+0x150>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	1e58      	subs	r0, r3, #1
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6859      	ldr	r1, [r3, #4]
 8003ecc:	460b      	mov	r3, r1
 8003ece:	005b      	lsls	r3, r3, #1
 8003ed0:	440b      	add	r3, r1
 8003ed2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	bf0c      	ite	eq
 8003ee0:	2301      	moveq	r3, #1
 8003ee2:	2300      	movne	r3, #0
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	e012      	b.n	8003f0e <HAL_I2C_Init+0x176>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	1e58      	subs	r0, r3, #1
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6859      	ldr	r1, [r3, #4]
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	440b      	add	r3, r1
 8003ef6:	0099      	lsls	r1, r3, #2
 8003ef8:	440b      	add	r3, r1
 8003efa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003efe:	3301      	adds	r3, #1
 8003f00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	bf0c      	ite	eq
 8003f08:	2301      	moveq	r3, #1
 8003f0a:	2300      	movne	r3, #0
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d001      	beq.n	8003f16 <HAL_I2C_Init+0x17e>
 8003f12:	2301      	movs	r3, #1
 8003f14:	e022      	b.n	8003f5c <HAL_I2C_Init+0x1c4>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10e      	bne.n	8003f3c <HAL_I2C_Init+0x1a4>
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	1e58      	subs	r0, r3, #1
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6859      	ldr	r1, [r3, #4]
 8003f26:	460b      	mov	r3, r1
 8003f28:	005b      	lsls	r3, r3, #1
 8003f2a:	440b      	add	r3, r1
 8003f2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f30:	3301      	adds	r3, #1
 8003f32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f3a:	e00f      	b.n	8003f5c <HAL_I2C_Init+0x1c4>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	1e58      	subs	r0, r3, #1
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6859      	ldr	r1, [r3, #4]
 8003f44:	460b      	mov	r3, r1
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	440b      	add	r3, r1
 8003f4a:	0099      	lsls	r1, r3, #2
 8003f4c:	440b      	add	r3, r1
 8003f4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f52:	3301      	adds	r3, #1
 8003f54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f5c:	6879      	ldr	r1, [r7, #4]
 8003f5e:	6809      	ldr	r1, [r1, #0]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	69da      	ldr	r2, [r3, #28]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a1b      	ldr	r3, [r3, #32]
 8003f76:	431a      	orrs	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	430a      	orrs	r2, r1
 8003f7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003f8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	6911      	ldr	r1, [r2, #16]
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	68d2      	ldr	r2, [r2, #12]
 8003f96:	4311      	orrs	r1, r2
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	6812      	ldr	r2, [r2, #0]
 8003f9c:	430b      	orrs	r3, r1
 8003f9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	695a      	ldr	r2, [r3, #20]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	430a      	orrs	r2, r1
 8003fba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f042 0201 	orr.w	r2, r2, #1
 8003fca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2220      	movs	r2, #32
 8003fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3710      	adds	r7, #16
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	000186a0 	.word	0x000186a0
 8003ff8:	001e847f 	.word	0x001e847f
 8003ffc:	003d08ff 	.word	0x003d08ff
 8004000:	431bde83 	.word	0x431bde83
 8004004:	10624dd3 	.word	0x10624dd3

08004008 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800400a:	b08f      	sub	sp, #60	; 0x3c
 800400c:	af0a      	add	r7, sp, #40	; 0x28
 800400e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d101      	bne.n	800401a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e10f      	b.n	800423a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004026:	b2db      	uxtb	r3, r3
 8004028:	2b00      	cmp	r3, #0
 800402a:	d106      	bne.n	800403a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f009 fb97 	bl	800d768 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2203      	movs	r2, #3
 800403e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800404a:	2b00      	cmp	r3, #0
 800404c:	d102      	bne.n	8004054 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4618      	mov	r0, r3
 800405a:	f006 f948 	bl	800a2ee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	603b      	str	r3, [r7, #0]
 8004064:	687e      	ldr	r6, [r7, #4]
 8004066:	466d      	mov	r5, sp
 8004068:	f106 0410 	add.w	r4, r6, #16
 800406c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800406e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004070:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004072:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004074:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004078:	e885 0003 	stmia.w	r5, {r0, r1}
 800407c:	1d33      	adds	r3, r6, #4
 800407e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004080:	6838      	ldr	r0, [r7, #0]
 8004082:	f006 f81f 	bl	800a0c4 <USB_CoreInit>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d005      	beq.n	8004098 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2202      	movs	r2, #2
 8004090:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e0d0      	b.n	800423a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2100      	movs	r1, #0
 800409e:	4618      	mov	r0, r3
 80040a0:	f006 f936 	bl	800a310 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040a4:	2300      	movs	r3, #0
 80040a6:	73fb      	strb	r3, [r7, #15]
 80040a8:	e04a      	b.n	8004140 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80040aa:	7bfa      	ldrb	r2, [r7, #15]
 80040ac:	6879      	ldr	r1, [r7, #4]
 80040ae:	4613      	mov	r3, r2
 80040b0:	00db      	lsls	r3, r3, #3
 80040b2:	1a9b      	subs	r3, r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	440b      	add	r3, r1
 80040b8:	333d      	adds	r3, #61	; 0x3d
 80040ba:	2201      	movs	r2, #1
 80040bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80040be:	7bfa      	ldrb	r2, [r7, #15]
 80040c0:	6879      	ldr	r1, [r7, #4]
 80040c2:	4613      	mov	r3, r2
 80040c4:	00db      	lsls	r3, r3, #3
 80040c6:	1a9b      	subs	r3, r3, r2
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	440b      	add	r3, r1
 80040cc:	333c      	adds	r3, #60	; 0x3c
 80040ce:	7bfa      	ldrb	r2, [r7, #15]
 80040d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80040d2:	7bfa      	ldrb	r2, [r7, #15]
 80040d4:	7bfb      	ldrb	r3, [r7, #15]
 80040d6:	b298      	uxth	r0, r3
 80040d8:	6879      	ldr	r1, [r7, #4]
 80040da:	4613      	mov	r3, r2
 80040dc:	00db      	lsls	r3, r3, #3
 80040de:	1a9b      	subs	r3, r3, r2
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	440b      	add	r3, r1
 80040e4:	3342      	adds	r3, #66	; 0x42
 80040e6:	4602      	mov	r2, r0
 80040e8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80040ea:	7bfa      	ldrb	r2, [r7, #15]
 80040ec:	6879      	ldr	r1, [r7, #4]
 80040ee:	4613      	mov	r3, r2
 80040f0:	00db      	lsls	r3, r3, #3
 80040f2:	1a9b      	subs	r3, r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	440b      	add	r3, r1
 80040f8:	333f      	adds	r3, #63	; 0x3f
 80040fa:	2200      	movs	r2, #0
 80040fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80040fe:	7bfa      	ldrb	r2, [r7, #15]
 8004100:	6879      	ldr	r1, [r7, #4]
 8004102:	4613      	mov	r3, r2
 8004104:	00db      	lsls	r3, r3, #3
 8004106:	1a9b      	subs	r3, r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	440b      	add	r3, r1
 800410c:	3344      	adds	r3, #68	; 0x44
 800410e:	2200      	movs	r2, #0
 8004110:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004112:	7bfa      	ldrb	r2, [r7, #15]
 8004114:	6879      	ldr	r1, [r7, #4]
 8004116:	4613      	mov	r3, r2
 8004118:	00db      	lsls	r3, r3, #3
 800411a:	1a9b      	subs	r3, r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	440b      	add	r3, r1
 8004120:	3348      	adds	r3, #72	; 0x48
 8004122:	2200      	movs	r2, #0
 8004124:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004126:	7bfa      	ldrb	r2, [r7, #15]
 8004128:	6879      	ldr	r1, [r7, #4]
 800412a:	4613      	mov	r3, r2
 800412c:	00db      	lsls	r3, r3, #3
 800412e:	1a9b      	subs	r3, r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	440b      	add	r3, r1
 8004134:	3350      	adds	r3, #80	; 0x50
 8004136:	2200      	movs	r2, #0
 8004138:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800413a:	7bfb      	ldrb	r3, [r7, #15]
 800413c:	3301      	adds	r3, #1
 800413e:	73fb      	strb	r3, [r7, #15]
 8004140:	7bfa      	ldrb	r2, [r7, #15]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	429a      	cmp	r2, r3
 8004148:	d3af      	bcc.n	80040aa <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800414a:	2300      	movs	r3, #0
 800414c:	73fb      	strb	r3, [r7, #15]
 800414e:	e044      	b.n	80041da <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004150:	7bfa      	ldrb	r2, [r7, #15]
 8004152:	6879      	ldr	r1, [r7, #4]
 8004154:	4613      	mov	r3, r2
 8004156:	00db      	lsls	r3, r3, #3
 8004158:	1a9b      	subs	r3, r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	440b      	add	r3, r1
 800415e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004162:	2200      	movs	r2, #0
 8004164:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004166:	7bfa      	ldrb	r2, [r7, #15]
 8004168:	6879      	ldr	r1, [r7, #4]
 800416a:	4613      	mov	r3, r2
 800416c:	00db      	lsls	r3, r3, #3
 800416e:	1a9b      	subs	r3, r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	440b      	add	r3, r1
 8004174:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004178:	7bfa      	ldrb	r2, [r7, #15]
 800417a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800417c:	7bfa      	ldrb	r2, [r7, #15]
 800417e:	6879      	ldr	r1, [r7, #4]
 8004180:	4613      	mov	r3, r2
 8004182:	00db      	lsls	r3, r3, #3
 8004184:	1a9b      	subs	r3, r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	440b      	add	r3, r1
 800418a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800418e:	2200      	movs	r2, #0
 8004190:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004192:	7bfa      	ldrb	r2, [r7, #15]
 8004194:	6879      	ldr	r1, [r7, #4]
 8004196:	4613      	mov	r3, r2
 8004198:	00db      	lsls	r3, r3, #3
 800419a:	1a9b      	subs	r3, r3, r2
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	440b      	add	r3, r1
 80041a0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80041a4:	2200      	movs	r2, #0
 80041a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80041a8:	7bfa      	ldrb	r2, [r7, #15]
 80041aa:	6879      	ldr	r1, [r7, #4]
 80041ac:	4613      	mov	r3, r2
 80041ae:	00db      	lsls	r3, r3, #3
 80041b0:	1a9b      	subs	r3, r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	440b      	add	r3, r1
 80041b6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80041ba:	2200      	movs	r2, #0
 80041bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80041be:	7bfa      	ldrb	r2, [r7, #15]
 80041c0:	6879      	ldr	r1, [r7, #4]
 80041c2:	4613      	mov	r3, r2
 80041c4:	00db      	lsls	r3, r3, #3
 80041c6:	1a9b      	subs	r3, r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	440b      	add	r3, r1
 80041cc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80041d0:	2200      	movs	r2, #0
 80041d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041d4:	7bfb      	ldrb	r3, [r7, #15]
 80041d6:	3301      	adds	r3, #1
 80041d8:	73fb      	strb	r3, [r7, #15]
 80041da:	7bfa      	ldrb	r2, [r7, #15]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d3b5      	bcc.n	8004150 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	603b      	str	r3, [r7, #0]
 80041ea:	687e      	ldr	r6, [r7, #4]
 80041ec:	466d      	mov	r5, sp
 80041ee:	f106 0410 	add.w	r4, r6, #16
 80041f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80041fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8004202:	1d33      	adds	r3, r6, #4
 8004204:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004206:	6838      	ldr	r0, [r7, #0]
 8004208:	f006 f8ac 	bl	800a364 <USB_DevInit>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d005      	beq.n	800421e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2202      	movs	r2, #2
 8004216:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e00d      	b.n	800423a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2201      	movs	r2, #1
 800422a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4618      	mov	r0, r3
 8004234:	f007 f8a1 	bl	800b37a <USB_DevDisconnect>

  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3714      	adds	r7, #20
 800423e:	46bd      	mov	sp, r7
 8004240:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004242 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004242:	b580      	push	{r7, lr}
 8004244:	b084      	sub	sp, #16
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004256:	2b01      	cmp	r3, #1
 8004258:	d101      	bne.n	800425e <HAL_PCD_Start+0x1c>
 800425a:	2302      	movs	r3, #2
 800425c:	e020      	b.n	80042a0 <HAL_PCD_Start+0x5e>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2201      	movs	r2, #1
 8004262:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800426a:	2b01      	cmp	r3, #1
 800426c:	d109      	bne.n	8004282 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004272:	2b01      	cmp	r3, #1
 8004274:	d005      	beq.n	8004282 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4618      	mov	r0, r3
 8004288:	f007 f85f 	bl	800b34a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4618      	mov	r0, r3
 8004292:	f006 f81b 	bl	800a2cc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800429e:	2300      	movs	r3, #0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3710      	adds	r7, #16
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80042a8:	b590      	push	{r4, r7, lr}
 80042aa:	b08d      	sub	sp, #52	; 0x34
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042b6:	6a3b      	ldr	r3, [r7, #32]
 80042b8:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4618      	mov	r0, r3
 80042c0:	f007 f906 	bl	800b4d0 <USB_GetMode>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	f040 838e 	bne.w	80049e8 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4618      	mov	r0, r3
 80042d2:	f007 f86a 	bl	800b3aa <USB_ReadInterrupts>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f000 8384 	beq.w	80049e6 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4618      	mov	r0, r3
 80042e4:	f007 f861 	bl	800b3aa <USB_ReadInterrupts>
 80042e8:	4603      	mov	r3, r0
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d107      	bne.n	8004302 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	695a      	ldr	r2, [r3, #20]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f002 0202 	and.w	r2, r2, #2
 8004300:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4618      	mov	r0, r3
 8004308:	f007 f84f 	bl	800b3aa <USB_ReadInterrupts>
 800430c:	4603      	mov	r3, r0
 800430e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004312:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004316:	d17b      	bne.n	8004410 <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8004318:	2300      	movs	r3, #0
 800431a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4618      	mov	r0, r3
 8004322:	f007 f855 	bl	800b3d0 <USB_ReadDevAllOutEpInterrupt>
 8004326:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004328:	e06f      	b.n	800440a <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 800432a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432c:	f003 0301 	and.w	r3, r3, #1
 8004330:	2b00      	cmp	r3, #0
 8004332:	d064      	beq.n	80043fe <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800433a:	b2d2      	uxtb	r2, r2
 800433c:	4611      	mov	r1, r2
 800433e:	4618      	mov	r0, r3
 8004340:	f007 f87a 	bl	800b438 <USB_ReadDevOutEPInterrupt>
 8004344:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	f003 0301 	and.w	r3, r3, #1
 800434c:	2b00      	cmp	r3, #0
 800434e:	d00c      	beq.n	800436a <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004352:	015a      	lsls	r2, r3, #5
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	4413      	add	r3, r2
 8004358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800435c:	461a      	mov	r2, r3
 800435e:	2301      	movs	r3, #1
 8004360:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004362:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f000 fe0d 	bl	8004f84 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	f003 0308 	and.w	r3, r3, #8
 8004370:	2b00      	cmp	r3, #0
 8004372:	d00c      	beq.n	800438e <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004374:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 ff0c 	bl	8005194 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800437c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437e:	015a      	lsls	r2, r3, #5
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	4413      	add	r3, r2
 8004384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004388:	461a      	mov	r2, r3
 800438a:	2308      	movs	r3, #8
 800438c:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	f003 0310 	and.w	r3, r3, #16
 8004394:	2b00      	cmp	r3, #0
 8004396:	d008      	beq.n	80043aa <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439a:	015a      	lsls	r2, r3, #5
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	4413      	add	r3, r2
 80043a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043a4:	461a      	mov	r2, r3
 80043a6:	2310      	movs	r3, #16
 80043a8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	f003 0320 	and.w	r3, r3, #32
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d015      	beq.n	80043e0 <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d108      	bne.n	80043ce <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6818      	ldr	r0, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80043c6:	461a      	mov	r2, r3
 80043c8:	2101      	movs	r1, #1
 80043ca:	f007 f8c5 	bl	800b558 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80043ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d0:	015a      	lsls	r2, r3, #5
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	4413      	add	r3, r2
 80043d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043da:	461a      	mov	r2, r3
 80043dc:	2320      	movs	r3, #32
 80043de:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d009      	beq.n	80043fe <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80043ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ec:	015a      	lsls	r2, r3, #5
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	4413      	add	r3, r2
 80043f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043f6:	461a      	mov	r2, r3
 80043f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80043fc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80043fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004400:	3301      	adds	r3, #1
 8004402:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004406:	085b      	lsrs	r3, r3, #1
 8004408:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800440a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800440c:	2b00      	cmp	r3, #0
 800440e:	d18c      	bne.n	800432a <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4618      	mov	r0, r3
 8004416:	f006 ffc8 	bl	800b3aa <USB_ReadInterrupts>
 800441a:	4603      	mov	r3, r0
 800441c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004420:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004424:	f040 80c4 	bne.w	80045b0 <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4618      	mov	r0, r3
 800442e:	f006 ffe9 	bl	800b404 <USB_ReadDevAllInEpInterrupt>
 8004432:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004434:	2300      	movs	r3, #0
 8004436:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004438:	e0b6      	b.n	80045a8 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800443a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800443c:	f003 0301 	and.w	r3, r3, #1
 8004440:	2b00      	cmp	r3, #0
 8004442:	f000 80ab 	beq.w	800459c <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800444c:	b2d2      	uxtb	r2, r2
 800444e:	4611      	mov	r1, r2
 8004450:	4618      	mov	r0, r3
 8004452:	f007 f80f 	bl	800b474 <USB_ReadDevInEPInterrupt>
 8004456:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	2b00      	cmp	r3, #0
 8004460:	d05b      	beq.n	800451a <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004464:	f003 030f 	and.w	r3, r3, #15
 8004468:	2201      	movs	r2, #1
 800446a:	fa02 f303 	lsl.w	r3, r2, r3
 800446e:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004476:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	43db      	mvns	r3, r3
 800447c:	69f9      	ldr	r1, [r7, #28]
 800447e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004482:	4013      	ands	r3, r2
 8004484:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004488:	015a      	lsls	r2, r3, #5
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	4413      	add	r3, r2
 800448e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004492:	461a      	mov	r2, r3
 8004494:	2301      	movs	r3, #1
 8004496:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d11b      	bne.n	80044d8 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80044a0:	6879      	ldr	r1, [r7, #4]
 80044a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044a4:	4613      	mov	r3, r2
 80044a6:	00db      	lsls	r3, r3, #3
 80044a8:	1a9b      	subs	r3, r3, r2
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	440b      	add	r3, r1
 80044ae:	3348      	adds	r3, #72	; 0x48
 80044b0:	6819      	ldr	r1, [r3, #0]
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044b6:	4613      	mov	r3, r2
 80044b8:	00db      	lsls	r3, r3, #3
 80044ba:	1a9b      	subs	r3, r3, r2
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	4403      	add	r3, r0
 80044c0:	3344      	adds	r3, #68	; 0x44
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4419      	add	r1, r3
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ca:	4613      	mov	r3, r2
 80044cc:	00db      	lsls	r3, r3, #3
 80044ce:	1a9b      	subs	r3, r3, r2
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	4403      	add	r3, r0
 80044d4:	3348      	adds	r3, #72	; 0x48
 80044d6:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80044d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	4619      	mov	r1, r3
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f009 f9c3 	bl	800d86a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d116      	bne.n	800451a <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80044ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d113      	bne.n	800451a <HAL_PCD_IRQHandler+0x272>
 80044f2:	6879      	ldr	r1, [r7, #4]
 80044f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044f6:	4613      	mov	r3, r2
 80044f8:	00db      	lsls	r3, r3, #3
 80044fa:	1a9b      	subs	r3, r3, r2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	440b      	add	r3, r1
 8004500:	3350      	adds	r3, #80	; 0x50
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d108      	bne.n	800451a <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6818      	ldr	r0, [r3, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004512:	461a      	mov	r2, r3
 8004514:	2101      	movs	r1, #1
 8004516:	f007 f81f 	bl	800b558 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	f003 0308 	and.w	r3, r3, #8
 8004520:	2b00      	cmp	r3, #0
 8004522:	d008      	beq.n	8004536 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004526:	015a      	lsls	r2, r3, #5
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	4413      	add	r3, r2
 800452c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004530:	461a      	mov	r2, r3
 8004532:	2308      	movs	r3, #8
 8004534:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	f003 0310 	and.w	r3, r3, #16
 800453c:	2b00      	cmp	r3, #0
 800453e:	d008      	beq.n	8004552 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004542:	015a      	lsls	r2, r3, #5
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	4413      	add	r3, r2
 8004548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800454c:	461a      	mov	r2, r3
 800454e:	2310      	movs	r3, #16
 8004550:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004558:	2b00      	cmp	r3, #0
 800455a:	d008      	beq.n	800456e <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800455c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455e:	015a      	lsls	r2, r3, #5
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	4413      	add	r3, r2
 8004564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004568:	461a      	mov	r2, r3
 800456a:	2340      	movs	r3, #64	; 0x40
 800456c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	f003 0302 	and.w	r3, r3, #2
 8004574:	2b00      	cmp	r3, #0
 8004576:	d008      	beq.n	800458a <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457a:	015a      	lsls	r2, r3, #5
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	4413      	add	r3, r2
 8004580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004584:	461a      	mov	r2, r3
 8004586:	2302      	movs	r3, #2
 8004588:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004590:	2b00      	cmp	r3, #0
 8004592:	d003      	beq.n	800459c <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004594:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 fc67 	bl	8004e6a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800459c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459e:	3301      	adds	r3, #1
 80045a0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80045a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a4:	085b      	lsrs	r3, r3, #1
 80045a6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80045a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	f47f af45 	bne.w	800443a <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4618      	mov	r0, r3
 80045b6:	f006 fef8 	bl	800b3aa <USB_ReadInterrupts>
 80045ba:	4603      	mov	r3, r0
 80045bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045c4:	d122      	bne.n	800460c <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	69fa      	ldr	r2, [r7, #28]
 80045d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045d4:	f023 0301 	bic.w	r3, r3, #1
 80045d8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d108      	bne.n	80045f6 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80045ec:	2100      	movs	r1, #0
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 fe88 	bl	8005304 <HAL_PCDEx_LPM_Callback>
 80045f4:	e002      	b.n	80045fc <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f009 f9ae 	bl	800d958 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	695a      	ldr	r2, [r3, #20]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800460a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4618      	mov	r0, r3
 8004612:	f006 feca 	bl	800b3aa <USB_ReadInterrupts>
 8004616:	4603      	mov	r3, r0
 8004618:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800461c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004620:	d112      	bne.n	8004648 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f003 0301 	and.w	r3, r3, #1
 800462e:	2b01      	cmp	r3, #1
 8004630:	d102      	bne.n	8004638 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f009 f96a 	bl	800d90c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	695a      	ldr	r2, [r3, #20]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004646:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4618      	mov	r0, r3
 800464e:	f006 feac 	bl	800b3aa <USB_ReadInterrupts>
 8004652:	4603      	mov	r3, r0
 8004654:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800465c:	f040 80a7 	bne.w	80047ae <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	69fa      	ldr	r2, [r7, #28]
 800466a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800466e:	f023 0301 	bic.w	r3, r3, #1
 8004672:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2110      	movs	r1, #16
 800467a:	4618      	mov	r0, r3
 800467c:	f005 ffe4 	bl	800a648 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004680:	2300      	movs	r3, #0
 8004682:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004684:	e036      	b.n	80046f4 <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004688:	015a      	lsls	r2, r3, #5
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	4413      	add	r3, r2
 800468e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004692:	461a      	mov	r2, r3
 8004694:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004698:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800469a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800469c:	015a      	lsls	r2, r3, #5
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	4413      	add	r3, r2
 80046a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046aa:	0151      	lsls	r1, r2, #5
 80046ac:	69fa      	ldr	r2, [r7, #28]
 80046ae:	440a      	add	r2, r1
 80046b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80046b8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80046ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046bc:	015a      	lsls	r2, r3, #5
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	4413      	add	r3, r2
 80046c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046c6:	461a      	mov	r2, r3
 80046c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80046cc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80046ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d0:	015a      	lsls	r2, r3, #5
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	4413      	add	r3, r2
 80046d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046de:	0151      	lsls	r1, r2, #5
 80046e0:	69fa      	ldr	r2, [r7, #28]
 80046e2:	440a      	add	r2, r1
 80046e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046e8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80046ec:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f0:	3301      	adds	r3, #1
 80046f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d3c3      	bcc.n	8004686 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004704:	69db      	ldr	r3, [r3, #28]
 8004706:	69fa      	ldr	r2, [r7, #28]
 8004708:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800470c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004710:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004716:	2b00      	cmp	r3, #0
 8004718:	d016      	beq.n	8004748 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004720:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004724:	69fa      	ldr	r2, [r7, #28]
 8004726:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800472a:	f043 030b 	orr.w	r3, r3, #11
 800472e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800473a:	69fa      	ldr	r2, [r7, #28]
 800473c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004740:	f043 030b 	orr.w	r3, r3, #11
 8004744:	6453      	str	r3, [r2, #68]	; 0x44
 8004746:	e015      	b.n	8004774 <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800474e:	695b      	ldr	r3, [r3, #20]
 8004750:	69fa      	ldr	r2, [r7, #28]
 8004752:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004756:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800475a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800475e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	69fa      	ldr	r2, [r7, #28]
 800476a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800476e:	f043 030b 	orr.w	r3, r3, #11
 8004772:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	69fa      	ldr	r2, [r7, #28]
 800477e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004782:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004786:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6818      	ldr	r0, [r3, #0]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	691b      	ldr	r3, [r3, #16]
 8004790:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004798:	461a      	mov	r2, r3
 800479a:	f006 fedd 	bl	800b558 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	695a      	ldr	r2, [r3, #20]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80047ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f006 fdf9 	bl	800b3aa <USB_ReadInterrupts>
 80047b8:	4603      	mov	r3, r0
 80047ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047c2:	d124      	bne.n	800480e <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4618      	mov	r0, r3
 80047ca:	f006 fe8f 	bl	800b4ec <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4618      	mov	r0, r3
 80047d4:	f005 ff99 	bl	800a70a <USB_GetDevSpeed>
 80047d8:	4603      	mov	r3, r0
 80047da:	461a      	mov	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681c      	ldr	r4, [r3, #0]
 80047e4:	f001 f9a2 	bl	8005b2c <HAL_RCC_GetHCLKFreq>
 80047e8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	461a      	mov	r2, r3
 80047f2:	4620      	mov	r0, r4
 80047f4:	f005 fcc8 	bl	800a188 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f009 f85e 	bl	800d8ba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	695a      	ldr	r2, [r3, #20]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800480c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4618      	mov	r0, r3
 8004814:	f006 fdc9 	bl	800b3aa <USB_ReadInterrupts>
 8004818:	4603      	mov	r3, r0
 800481a:	f003 0310 	and.w	r3, r3, #16
 800481e:	2b10      	cmp	r3, #16
 8004820:	d161      	bne.n	80048e6 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	699a      	ldr	r2, [r3, #24]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f022 0210 	bic.w	r2, r2, #16
 8004830:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004832:	6a3b      	ldr	r3, [r7, #32]
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	f003 020f 	and.w	r2, r3, #15
 800483e:	4613      	mov	r3, r2
 8004840:	00db      	lsls	r3, r3, #3
 8004842:	1a9b      	subs	r3, r3, r2
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	4413      	add	r3, r2
 800484e:	3304      	adds	r3, #4
 8004850:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	0c5b      	lsrs	r3, r3, #17
 8004856:	f003 030f 	and.w	r3, r3, #15
 800485a:	2b02      	cmp	r3, #2
 800485c:	d124      	bne.n	80048a8 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004864:	4013      	ands	r3, r2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d035      	beq.n	80048d6 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	091b      	lsrs	r3, r3, #4
 8004872:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004874:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004878:	b29b      	uxth	r3, r3
 800487a:	461a      	mov	r2, r3
 800487c:	6a38      	ldr	r0, [r7, #32]
 800487e:	f006 fc41 	bl	800b104 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	68da      	ldr	r2, [r3, #12]
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	091b      	lsrs	r3, r3, #4
 800488a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800488e:	441a      	add	r2, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	699a      	ldr	r2, [r3, #24]
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	091b      	lsrs	r3, r3, #4
 800489c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048a0:	441a      	add	r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	619a      	str	r2, [r3, #24]
 80048a6:	e016      	b.n	80048d6 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	0c5b      	lsrs	r3, r3, #17
 80048ac:	f003 030f 	and.w	r3, r3, #15
 80048b0:	2b06      	cmp	r3, #6
 80048b2:	d110      	bne.n	80048d6 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80048ba:	2208      	movs	r2, #8
 80048bc:	4619      	mov	r1, r3
 80048be:	6a38      	ldr	r0, [r7, #32]
 80048c0:	f006 fc20 	bl	800b104 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	699a      	ldr	r2, [r3, #24]
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	091b      	lsrs	r3, r3, #4
 80048cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048d0:	441a      	add	r2, r3
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	699a      	ldr	r2, [r3, #24]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f042 0210 	orr.w	r2, r2, #16
 80048e4:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f006 fd5d 	bl	800b3aa <USB_ReadInterrupts>
 80048f0:	4603      	mov	r3, r0
 80048f2:	f003 0308 	and.w	r3, r3, #8
 80048f6:	2b08      	cmp	r3, #8
 80048f8:	d10a      	bne.n	8004910 <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f008 ffcf 	bl	800d89e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	695a      	ldr	r2, [r3, #20]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f002 0208 	and.w	r2, r2, #8
 800490e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4618      	mov	r0, r3
 8004916:	f006 fd48 	bl	800b3aa <USB_ReadInterrupts>
 800491a:	4603      	mov	r3, r0
 800491c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004920:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004924:	d10f      	bne.n	8004946 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004926:	2300      	movs	r3, #0
 8004928:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800492a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492c:	b2db      	uxtb	r3, r3
 800492e:	4619      	mov	r1, r3
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f009 f831 	bl	800d998 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	695a      	ldr	r2, [r3, #20]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004944:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4618      	mov	r0, r3
 800494c:	f006 fd2d 	bl	800b3aa <USB_ReadInterrupts>
 8004950:	4603      	mov	r3, r0
 8004952:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004956:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800495a:	d10f      	bne.n	800497c <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800495c:	2300      	movs	r3, #0
 800495e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004962:	b2db      	uxtb	r3, r3
 8004964:	4619      	mov	r1, r3
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f009 f804 	bl	800d974 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	695a      	ldr	r2, [r3, #20]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800497a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4618      	mov	r0, r3
 8004982:	f006 fd12 	bl	800b3aa <USB_ReadInterrupts>
 8004986:	4603      	mov	r3, r0
 8004988:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800498c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004990:	d10a      	bne.n	80049a8 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f009 f812 	bl	800d9bc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	695a      	ldr	r2, [r3, #20]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80049a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4618      	mov	r0, r3
 80049ae:	f006 fcfc 	bl	800b3aa <USB_ReadInterrupts>
 80049b2:	4603      	mov	r3, r0
 80049b4:	f003 0304 	and.w	r3, r3, #4
 80049b8:	2b04      	cmp	r3, #4
 80049ba:	d115      	bne.n	80049e8 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	f003 0304 	and.w	r3, r3, #4
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d002      	beq.n	80049d4 <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f009 f802 	bl	800d9d8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	6859      	ldr	r1, [r3, #4]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	693a      	ldr	r2, [r7, #16]
 80049e0:	430a      	orrs	r2, r1
 80049e2:	605a      	str	r2, [r3, #4]
 80049e4:	e000      	b.n	80049e8 <HAL_PCD_IRQHandler+0x740>
      return;
 80049e6:	bf00      	nop
    }
  }
}
 80049e8:	3734      	adds	r7, #52	; 0x34
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd90      	pop	{r4, r7, pc}

080049ee <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b082      	sub	sp, #8
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
 80049f6:	460b      	mov	r3, r1
 80049f8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d101      	bne.n	8004a08 <HAL_PCD_SetAddress+0x1a>
 8004a04:	2302      	movs	r3, #2
 8004a06:	e013      	b.n	8004a30 <HAL_PCD_SetAddress+0x42>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	78fa      	ldrb	r2, [r7, #3]
 8004a14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	78fa      	ldrb	r2, [r7, #3]
 8004a1e:	4611      	mov	r1, r2
 8004a20:	4618      	mov	r0, r3
 8004a22:	f006 fc6c 	bl	800b2fe <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3708      	adds	r7, #8
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	4608      	mov	r0, r1
 8004a42:	4611      	mov	r1, r2
 8004a44:	461a      	mov	r2, r3
 8004a46:	4603      	mov	r3, r0
 8004a48:	70fb      	strb	r3, [r7, #3]
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	803b      	strh	r3, [r7, #0]
 8004a4e:	4613      	mov	r3, r2
 8004a50:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004a52:	2300      	movs	r3, #0
 8004a54:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004a56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	da0f      	bge.n	8004a7e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a5e:	78fb      	ldrb	r3, [r7, #3]
 8004a60:	f003 020f 	and.w	r2, r3, #15
 8004a64:	4613      	mov	r3, r2
 8004a66:	00db      	lsls	r3, r3, #3
 8004a68:	1a9b      	subs	r3, r3, r2
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	3338      	adds	r3, #56	; 0x38
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	4413      	add	r3, r2
 8004a72:	3304      	adds	r3, #4
 8004a74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	705a      	strb	r2, [r3, #1]
 8004a7c:	e00f      	b.n	8004a9e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a7e:	78fb      	ldrb	r3, [r7, #3]
 8004a80:	f003 020f 	and.w	r2, r3, #15
 8004a84:	4613      	mov	r3, r2
 8004a86:	00db      	lsls	r3, r3, #3
 8004a88:	1a9b      	subs	r3, r3, r2
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	4413      	add	r3, r2
 8004a94:	3304      	adds	r3, #4
 8004a96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004a9e:	78fb      	ldrb	r3, [r7, #3]
 8004aa0:	f003 030f 	and.w	r3, r3, #15
 8004aa4:	b2da      	uxtb	r2, r3
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004aaa:	883a      	ldrh	r2, [r7, #0]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	78ba      	ldrb	r2, [r7, #2]
 8004ab4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	785b      	ldrb	r3, [r3, #1]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d004      	beq.n	8004ac8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	b29a      	uxth	r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004ac8:	78bb      	ldrb	r3, [r7, #2]
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d102      	bne.n	8004ad4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d101      	bne.n	8004ae2 <HAL_PCD_EP_Open+0xaa>
 8004ade:	2302      	movs	r3, #2
 8004ae0:	e00e      	b.n	8004b00 <HAL_PCD_EP_Open+0xc8>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68f9      	ldr	r1, [r7, #12]
 8004af0:	4618      	mov	r0, r3
 8004af2:	f005 fe2f 	bl	800a754 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004afe:	7afb      	ldrb	r3, [r7, #11]
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3710      	adds	r7, #16
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	460b      	mov	r3, r1
 8004b12:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004b14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	da0f      	bge.n	8004b3c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b1c:	78fb      	ldrb	r3, [r7, #3]
 8004b1e:	f003 020f 	and.w	r2, r3, #15
 8004b22:	4613      	mov	r3, r2
 8004b24:	00db      	lsls	r3, r3, #3
 8004b26:	1a9b      	subs	r3, r3, r2
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	3338      	adds	r3, #56	; 0x38
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	4413      	add	r3, r2
 8004b30:	3304      	adds	r3, #4
 8004b32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2201      	movs	r2, #1
 8004b38:	705a      	strb	r2, [r3, #1]
 8004b3a:	e00f      	b.n	8004b5c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b3c:	78fb      	ldrb	r3, [r7, #3]
 8004b3e:	f003 020f 	and.w	r2, r3, #15
 8004b42:	4613      	mov	r3, r2
 8004b44:	00db      	lsls	r3, r3, #3
 8004b46:	1a9b      	subs	r3, r3, r2
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	4413      	add	r3, r2
 8004b52:	3304      	adds	r3, #4
 8004b54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004b5c:	78fb      	ldrb	r3, [r7, #3]
 8004b5e:	f003 030f 	and.w	r3, r3, #15
 8004b62:	b2da      	uxtb	r2, r3
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d101      	bne.n	8004b76 <HAL_PCD_EP_Close+0x6e>
 8004b72:	2302      	movs	r3, #2
 8004b74:	e00e      	b.n	8004b94 <HAL_PCD_EP_Close+0x8c>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68f9      	ldr	r1, [r7, #12]
 8004b84:	4618      	mov	r0, r3
 8004b86:	f005 fe6d 	bl	800a864 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3710      	adds	r7, #16
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b086      	sub	sp, #24
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	607a      	str	r2, [r7, #4]
 8004ba6:	603b      	str	r3, [r7, #0]
 8004ba8:	460b      	mov	r3, r1
 8004baa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004bac:	7afb      	ldrb	r3, [r7, #11]
 8004bae:	f003 020f 	and.w	r2, r3, #15
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	00db      	lsls	r3, r3, #3
 8004bb6:	1a9b      	subs	r3, r3, r2
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004bbe:	68fa      	ldr	r2, [r7, #12]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	3304      	adds	r3, #4
 8004bc4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	683a      	ldr	r2, [r7, #0]
 8004bd0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004bde:	7afb      	ldrb	r3, [r7, #11]
 8004be0:	f003 030f 	and.w	r3, r3, #15
 8004be4:	b2da      	uxtb	r2, r3
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d102      	bne.n	8004bf8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004bf8:	7afb      	ldrb	r3, [r7, #11]
 8004bfa:	f003 030f 	and.w	r3, r3, #15
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d109      	bne.n	8004c16 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6818      	ldr	r0, [r3, #0]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	6979      	ldr	r1, [r7, #20]
 8004c10:	f006 f8f0 	bl	800adf4 <USB_EP0StartXfer>
 8004c14:	e008      	b.n	8004c28 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6818      	ldr	r0, [r3, #0]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	461a      	mov	r2, r3
 8004c22:	6979      	ldr	r1, [r7, #20]
 8004c24:	f005 fea2 	bl	800a96c <USB_EPStartXfer>
  }

  return HAL_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3718      	adds	r7, #24
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}

08004c32 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c32:	b480      	push	{r7}
 8004c34:	b083      	sub	sp, #12
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004c3e:	78fb      	ldrb	r3, [r7, #3]
 8004c40:	f003 020f 	and.w	r2, r3, #15
 8004c44:	6879      	ldr	r1, [r7, #4]
 8004c46:	4613      	mov	r3, r2
 8004c48:	00db      	lsls	r3, r3, #3
 8004c4a:	1a9b      	subs	r3, r3, r2
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	440b      	add	r3, r1
 8004c50:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004c54:	681b      	ldr	r3, [r3, #0]
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	370c      	adds	r7, #12
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr

08004c62 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b086      	sub	sp, #24
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	60f8      	str	r0, [r7, #12]
 8004c6a:	607a      	str	r2, [r7, #4]
 8004c6c:	603b      	str	r3, [r7, #0]
 8004c6e:	460b      	mov	r3, r1
 8004c70:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c72:	7afb      	ldrb	r3, [r7, #11]
 8004c74:	f003 020f 	and.w	r2, r3, #15
 8004c78:	4613      	mov	r3, r2
 8004c7a:	00db      	lsls	r3, r3, #3
 8004c7c:	1a9b      	subs	r3, r3, r2
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	3338      	adds	r3, #56	; 0x38
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	4413      	add	r3, r2
 8004c86:	3304      	adds	r3, #4
 8004c88:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	683a      	ldr	r2, [r7, #0]
 8004c94:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ca2:	7afb      	ldrb	r3, [r7, #11]
 8004ca4:	f003 030f 	and.w	r3, r3, #15
 8004ca8:	b2da      	uxtb	r2, r3
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d102      	bne.n	8004cbc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004cbc:	7afb      	ldrb	r3, [r7, #11]
 8004cbe:	f003 030f 	and.w	r3, r3, #15
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d109      	bne.n	8004cda <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6818      	ldr	r0, [r3, #0]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	6979      	ldr	r1, [r7, #20]
 8004cd4:	f006 f88e 	bl	800adf4 <USB_EP0StartXfer>
 8004cd8:	e008      	b.n	8004cec <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6818      	ldr	r0, [r3, #0]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	6979      	ldr	r1, [r7, #20]
 8004ce8:	f005 fe40 	bl	800a96c <USB_EPStartXfer>
  }

  return HAL_OK;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3718      	adds	r7, #24
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}

08004cf6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	b084      	sub	sp, #16
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
 8004cfe:	460b      	mov	r3, r1
 8004d00:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004d02:	78fb      	ldrb	r3, [r7, #3]
 8004d04:	f003 020f 	and.w	r2, r3, #15
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d901      	bls.n	8004d14 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e050      	b.n	8004db6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004d14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	da0f      	bge.n	8004d3c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d1c:	78fb      	ldrb	r3, [r7, #3]
 8004d1e:	f003 020f 	and.w	r2, r3, #15
 8004d22:	4613      	mov	r3, r2
 8004d24:	00db      	lsls	r3, r3, #3
 8004d26:	1a9b      	subs	r3, r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	3338      	adds	r3, #56	; 0x38
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	4413      	add	r3, r2
 8004d30:	3304      	adds	r3, #4
 8004d32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2201      	movs	r2, #1
 8004d38:	705a      	strb	r2, [r3, #1]
 8004d3a:	e00d      	b.n	8004d58 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004d3c:	78fa      	ldrb	r2, [r7, #3]
 8004d3e:	4613      	mov	r3, r2
 8004d40:	00db      	lsls	r3, r3, #3
 8004d42:	1a9b      	subs	r3, r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	3304      	adds	r3, #4
 8004d50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d5e:	78fb      	ldrb	r3, [r7, #3]
 8004d60:	f003 030f 	and.w	r3, r3, #15
 8004d64:	b2da      	uxtb	r2, r3
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d101      	bne.n	8004d78 <HAL_PCD_EP_SetStall+0x82>
 8004d74:	2302      	movs	r3, #2
 8004d76:	e01e      	b.n	8004db6 <HAL_PCD_EP_SetStall+0xc0>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68f9      	ldr	r1, [r7, #12]
 8004d86:	4618      	mov	r0, r3
 8004d88:	f006 f9e5 	bl	800b156 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004d8c:	78fb      	ldrb	r3, [r7, #3]
 8004d8e:	f003 030f 	and.w	r3, r3, #15
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d10a      	bne.n	8004dac <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6818      	ldr	r0, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	b2d9      	uxtb	r1, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004da6:	461a      	mov	r2, r3
 8004da8:	f006 fbd6 	bl	800b558 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b084      	sub	sp, #16
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
 8004dc6:	460b      	mov	r3, r1
 8004dc8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004dca:	78fb      	ldrb	r3, [r7, #3]
 8004dcc:	f003 020f 	and.w	r2, r3, #15
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d901      	bls.n	8004ddc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e042      	b.n	8004e62 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004ddc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	da0f      	bge.n	8004e04 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004de4:	78fb      	ldrb	r3, [r7, #3]
 8004de6:	f003 020f 	and.w	r2, r3, #15
 8004dea:	4613      	mov	r3, r2
 8004dec:	00db      	lsls	r3, r3, #3
 8004dee:	1a9b      	subs	r3, r3, r2
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	3338      	adds	r3, #56	; 0x38
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	4413      	add	r3, r2
 8004df8:	3304      	adds	r3, #4
 8004dfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	705a      	strb	r2, [r3, #1]
 8004e02:	e00f      	b.n	8004e24 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e04:	78fb      	ldrb	r3, [r7, #3]
 8004e06:	f003 020f 	and.w	r2, r3, #15
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	00db      	lsls	r3, r3, #3
 8004e0e:	1a9b      	subs	r3, r3, r2
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	4413      	add	r3, r2
 8004e1a:	3304      	adds	r3, #4
 8004e1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2200      	movs	r2, #0
 8004e22:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2200      	movs	r2, #0
 8004e28:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e2a:	78fb      	ldrb	r3, [r7, #3]
 8004e2c:	f003 030f 	and.w	r3, r3, #15
 8004e30:	b2da      	uxtb	r2, r3
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d101      	bne.n	8004e44 <HAL_PCD_EP_ClrStall+0x86>
 8004e40:	2302      	movs	r3, #2
 8004e42:	e00e      	b.n	8004e62 <HAL_PCD_EP_ClrStall+0xa4>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68f9      	ldr	r1, [r7, #12]
 8004e52:	4618      	mov	r0, r3
 8004e54:	f006 f9ed 	bl	800b232 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e6a:	b580      	push	{r7, lr}
 8004e6c:	b08a      	sub	sp, #40	; 0x28
 8004e6e:	af02      	add	r7, sp, #8
 8004e70:	6078      	str	r0, [r7, #4]
 8004e72:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004e7e:	683a      	ldr	r2, [r7, #0]
 8004e80:	4613      	mov	r3, r2
 8004e82:	00db      	lsls	r3, r3, #3
 8004e84:	1a9b      	subs	r3, r3, r2
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	3338      	adds	r3, #56	; 0x38
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	3304      	adds	r3, #4
 8004e90:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	699a      	ldr	r2, [r3, #24]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	695b      	ldr	r3, [r3, #20]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d901      	bls.n	8004ea2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e06c      	b.n	8004f7c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	695a      	ldr	r2, [r3, #20]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	69fa      	ldr	r2, [r7, #28]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d902      	bls.n	8004ebe <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	3303      	adds	r3, #3
 8004ec2:	089b      	lsrs	r3, r3, #2
 8004ec4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004ec6:	e02b      	b.n	8004f20 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	695a      	ldr	r2, [r3, #20]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	699b      	ldr	r3, [r3, #24]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	69fa      	ldr	r2, [r7, #28]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d902      	bls.n	8004ee4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	3303      	adds	r3, #3
 8004ee8:	089b      	lsrs	r3, r3, #2
 8004eea:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	68d9      	ldr	r1, [r3, #12]
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	b2da      	uxtb	r2, r3
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	9300      	str	r3, [sp, #0]
 8004f00:	4603      	mov	r3, r0
 8004f02:	6978      	ldr	r0, [r7, #20]
 8004f04:	f006 f8c9 	bl	800b09a <USB_WritePacket>

    ep->xfer_buff  += len;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	68da      	ldr	r2, [r3, #12]
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	441a      	add	r2, r3
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	699a      	ldr	r2, [r3, #24]
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	441a      	add	r2, r3
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	015a      	lsls	r2, r3, #5
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	4413      	add	r3, r2
 8004f28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f2c:	699b      	ldr	r3, [r3, #24]
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	69ba      	ldr	r2, [r7, #24]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d809      	bhi.n	8004f4a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	699a      	ldr	r2, [r3, #24]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d203      	bcs.n	8004f4a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d1be      	bne.n	8004ec8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	695a      	ldr	r2, [r3, #20]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	699b      	ldr	r3, [r3, #24]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d811      	bhi.n	8004f7a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	f003 030f 	and.w	r3, r3, #15
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f62:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	43db      	mvns	r3, r3
 8004f70:	6939      	ldr	r1, [r7, #16]
 8004f72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f76:	4013      	ands	r3, r2
 8004f78:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3720      	adds	r7, #32
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b086      	sub	sp, #24
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	333c      	adds	r3, #60	; 0x3c
 8004f9c:	3304      	adds	r3, #4
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	015a      	lsls	r2, r3, #5
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	4413      	add	r3, r2
 8004faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	f040 80b3 	bne.w	8005122 <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	f003 0308 	and.w	r3, r3, #8
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d028      	beq.n	8005018 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	4a70      	ldr	r2, [pc, #448]	; (800518c <PCD_EP_OutXfrComplete_int+0x208>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d90e      	bls.n	8004fec <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d009      	beq.n	8004fec <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	015a      	lsls	r2, r3, #5
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	4413      	add	r3, r2
 8004fe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fea:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f008 fc0f 	bl	800d810 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6818      	ldr	r0, [r3, #0]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	2101      	movs	r1, #1
 8005000:	f006 faaa 	bl	800b558 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	015a      	lsls	r2, r3, #5
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	4413      	add	r3, r2
 800500c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005010:	461a      	mov	r2, r3
 8005012:	2308      	movs	r3, #8
 8005014:	6093      	str	r3, [r2, #8]
 8005016:	e0b3      	b.n	8005180 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	f003 0320 	and.w	r3, r3, #32
 800501e:	2b00      	cmp	r3, #0
 8005020:	d009      	beq.n	8005036 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	015a      	lsls	r2, r3, #5
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	4413      	add	r3, r2
 800502a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800502e:	461a      	mov	r2, r3
 8005030:	2320      	movs	r3, #32
 8005032:	6093      	str	r3, [r2, #8]
 8005034:	e0a4      	b.n	8005180 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800503c:	2b00      	cmp	r3, #0
 800503e:	f040 809f 	bne.w	8005180 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	4a51      	ldr	r2, [pc, #324]	; (800518c <PCD_EP_OutXfrComplete_int+0x208>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d90f      	bls.n	800506a <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005050:	2b00      	cmp	r3, #0
 8005052:	d00a      	beq.n	800506a <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	015a      	lsls	r2, r3, #5
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	4413      	add	r3, r2
 800505c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005060:	461a      	mov	r2, r3
 8005062:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005066:	6093      	str	r3, [r2, #8]
 8005068:	e08a      	b.n	8005180 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800506a:	6879      	ldr	r1, [r7, #4]
 800506c:	683a      	ldr	r2, [r7, #0]
 800506e:	4613      	mov	r3, r2
 8005070:	00db      	lsls	r3, r3, #3
 8005072:	1a9b      	subs	r3, r3, r2
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	440b      	add	r3, r1
 8005078:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800507c:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	0159      	lsls	r1, r3, #5
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	440b      	add	r3, r1
 8005086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800508a:	691b      	ldr	r3, [r3, #16]
 800508c:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8005090:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	683a      	ldr	r2, [r7, #0]
 8005096:	4613      	mov	r3, r2
 8005098:	00db      	lsls	r3, r3, #3
 800509a:	1a9b      	subs	r3, r3, r2
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	4403      	add	r3, r0
 80050a0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80050a4:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80050a6:	6879      	ldr	r1, [r7, #4]
 80050a8:	683a      	ldr	r2, [r7, #0]
 80050aa:	4613      	mov	r3, r2
 80050ac:	00db      	lsls	r3, r3, #3
 80050ae:	1a9b      	subs	r3, r3, r2
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	440b      	add	r3, r1
 80050b4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80050b8:	6819      	ldr	r1, [r3, #0]
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	683a      	ldr	r2, [r7, #0]
 80050be:	4613      	mov	r3, r2
 80050c0:	00db      	lsls	r3, r3, #3
 80050c2:	1a9b      	subs	r3, r3, r2
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	4403      	add	r3, r0
 80050c8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4419      	add	r1, r3
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	683a      	ldr	r2, [r7, #0]
 80050d4:	4613      	mov	r3, r2
 80050d6:	00db      	lsls	r3, r3, #3
 80050d8:	1a9b      	subs	r3, r3, r2
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	4403      	add	r3, r0
 80050de:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80050e2:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	4619      	mov	r1, r3
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f008 fba2 	bl	800d834 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d144      	bne.n	8005180 <PCD_EP_OutXfrComplete_int+0x1fc>
 80050f6:	6879      	ldr	r1, [r7, #4]
 80050f8:	683a      	ldr	r2, [r7, #0]
 80050fa:	4613      	mov	r3, r2
 80050fc:	00db      	lsls	r3, r3, #3
 80050fe:	1a9b      	subs	r3, r3, r2
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	440b      	add	r3, r1
 8005104:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d138      	bne.n	8005180 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6818      	ldr	r0, [r3, #0]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005118:	461a      	mov	r2, r3
 800511a:	2101      	movs	r1, #1
 800511c:	f006 fa1c 	bl	800b558 <USB_EP0_OutStart>
 8005120:	e02e      	b.n	8005180 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	4a1a      	ldr	r2, [pc, #104]	; (8005190 <PCD_EP_OutXfrComplete_int+0x20c>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d124      	bne.n	8005174 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d00a      	beq.n	800514a <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	015a      	lsls	r2, r3, #5
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	4413      	add	r3, r2
 800513c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005140:	461a      	mov	r2, r3
 8005142:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005146:	6093      	str	r3, [r2, #8]
 8005148:	e01a      	b.n	8005180 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	f003 0320 	and.w	r3, r3, #32
 8005150:	2b00      	cmp	r3, #0
 8005152:	d008      	beq.n	8005166 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	015a      	lsls	r2, r3, #5
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	4413      	add	r3, r2
 800515c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005160:	461a      	mov	r2, r3
 8005162:	2320      	movs	r3, #32
 8005164:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	b2db      	uxtb	r3, r3
 800516a:	4619      	mov	r1, r3
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f008 fb61 	bl	800d834 <HAL_PCD_DataOutStageCallback>
 8005172:	e005      	b.n	8005180 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	b2db      	uxtb	r3, r3
 8005178:	4619      	mov	r1, r3
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f008 fb5a 	bl	800d834 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3718      	adds	r7, #24
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	4f54300a 	.word	0x4f54300a
 8005190:	4f54310a 	.word	0x4f54310a

08005194 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b086      	sub	sp, #24
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	333c      	adds	r3, #60	; 0x3c
 80051ac:	3304      	adds	r3, #4
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	015a      	lsls	r2, r3, #5
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	4413      	add	r3, r2
 80051ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d113      	bne.n	80051f2 <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	4a1f      	ldr	r2, [pc, #124]	; (800524c <PCD_EP_OutSetupPacket_int+0xb8>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d922      	bls.n	8005218 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d01d      	beq.n	8005218 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	015a      	lsls	r2, r3, #5
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	4413      	add	r3, r2
 80051e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e8:	461a      	mov	r2, r3
 80051ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051ee:	6093      	str	r3, [r2, #8]
 80051f0:	e012      	b.n	8005218 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	4a16      	ldr	r2, [pc, #88]	; (8005250 <PCD_EP_OutSetupPacket_int+0xbc>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d10e      	bne.n	8005218 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8005200:	2b00      	cmp	r3, #0
 8005202:	d009      	beq.n	8005218 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	015a      	lsls	r2, r3, #5
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	4413      	add	r3, r2
 800520c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005210:	461a      	mov	r2, r3
 8005212:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005216:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f008 faf9 	bl	800d810 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	4a0a      	ldr	r2, [pc, #40]	; (800524c <PCD_EP_OutSetupPacket_int+0xb8>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d90c      	bls.n	8005240 <PCD_EP_OutSetupPacket_int+0xac>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	2b01      	cmp	r3, #1
 800522c:	d108      	bne.n	8005240 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6818      	ldr	r0, [r3, #0]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005238:	461a      	mov	r2, r3
 800523a:	2101      	movs	r1, #1
 800523c:	f006 f98c 	bl	800b558 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005240:	2300      	movs	r3, #0
}
 8005242:	4618      	mov	r0, r3
 8005244:	3718      	adds	r7, #24
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	4f54300a 	.word	0x4f54300a
 8005250:	4f54310a 	.word	0x4f54310a

08005254 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005254:	b480      	push	{r7}
 8005256:	b085      	sub	sp, #20
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	460b      	mov	r3, r1
 800525e:	70fb      	strb	r3, [r7, #3]
 8005260:	4613      	mov	r3, r2
 8005262:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800526c:	78fb      	ldrb	r3, [r7, #3]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d107      	bne.n	8005282 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005272:	883b      	ldrh	r3, [r7, #0]
 8005274:	0419      	lsls	r1, r3, #16
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68ba      	ldr	r2, [r7, #8]
 800527c:	430a      	orrs	r2, r1
 800527e:	629a      	str	r2, [r3, #40]	; 0x28
 8005280:	e028      	b.n	80052d4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005288:	0c1b      	lsrs	r3, r3, #16
 800528a:	68ba      	ldr	r2, [r7, #8]
 800528c:	4413      	add	r3, r2
 800528e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005290:	2300      	movs	r3, #0
 8005292:	73fb      	strb	r3, [r7, #15]
 8005294:	e00d      	b.n	80052b2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	7bfb      	ldrb	r3, [r7, #15]
 800529c:	3340      	adds	r3, #64	; 0x40
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	4413      	add	r3, r2
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	0c1b      	lsrs	r3, r3, #16
 80052a6:	68ba      	ldr	r2, [r7, #8]
 80052a8:	4413      	add	r3, r2
 80052aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80052ac:	7bfb      	ldrb	r3, [r7, #15]
 80052ae:	3301      	adds	r3, #1
 80052b0:	73fb      	strb	r3, [r7, #15]
 80052b2:	7bfa      	ldrb	r2, [r7, #15]
 80052b4:	78fb      	ldrb	r3, [r7, #3]
 80052b6:	3b01      	subs	r3, #1
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d3ec      	bcc.n	8005296 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80052bc:	883b      	ldrh	r3, [r7, #0]
 80052be:	0418      	lsls	r0, r3, #16
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6819      	ldr	r1, [r3, #0]
 80052c4:	78fb      	ldrb	r3, [r7, #3]
 80052c6:	3b01      	subs	r3, #1
 80052c8:	68ba      	ldr	r2, [r7, #8]
 80052ca:	4302      	orrs	r2, r0
 80052cc:	3340      	adds	r3, #64	; 0x40
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	440b      	add	r3, r1
 80052d2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3714      	adds	r7, #20
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr

080052e2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80052e2:	b480      	push	{r7}
 80052e4:	b083      	sub	sp, #12
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
 80052ea:	460b      	mov	r3, r1
 80052ec:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	887a      	ldrh	r2, [r7, #2]
 80052f4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	460b      	mov	r3, r1
 800530e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005310:	bf00      	nop
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b086      	sub	sp, #24
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d101      	bne.n	800532e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e25b      	b.n	80057e6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0301 	and.w	r3, r3, #1
 8005336:	2b00      	cmp	r3, #0
 8005338:	d075      	beq.n	8005426 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800533a:	4ba3      	ldr	r3, [pc, #652]	; (80055c8 <HAL_RCC_OscConfig+0x2ac>)
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	f003 030c 	and.w	r3, r3, #12
 8005342:	2b04      	cmp	r3, #4
 8005344:	d00c      	beq.n	8005360 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005346:	4ba0      	ldr	r3, [pc, #640]	; (80055c8 <HAL_RCC_OscConfig+0x2ac>)
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800534e:	2b08      	cmp	r3, #8
 8005350:	d112      	bne.n	8005378 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005352:	4b9d      	ldr	r3, [pc, #628]	; (80055c8 <HAL_RCC_OscConfig+0x2ac>)
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800535a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800535e:	d10b      	bne.n	8005378 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005360:	4b99      	ldr	r3, [pc, #612]	; (80055c8 <HAL_RCC_OscConfig+0x2ac>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d05b      	beq.n	8005424 <HAL_RCC_OscConfig+0x108>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d157      	bne.n	8005424 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e236      	b.n	80057e6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005380:	d106      	bne.n	8005390 <HAL_RCC_OscConfig+0x74>
 8005382:	4b91      	ldr	r3, [pc, #580]	; (80055c8 <HAL_RCC_OscConfig+0x2ac>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a90      	ldr	r2, [pc, #576]	; (80055c8 <HAL_RCC_OscConfig+0x2ac>)
 8005388:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800538c:	6013      	str	r3, [r2, #0]
 800538e:	e01d      	b.n	80053cc <HAL_RCC_OscConfig+0xb0>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005398:	d10c      	bne.n	80053b4 <HAL_RCC_OscConfig+0x98>
 800539a:	4b8b      	ldr	r3, [pc, #556]	; (80055c8 <HAL_RCC_OscConfig+0x2ac>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a8a      	ldr	r2, [pc, #552]	; (80055c8 <HAL_RCC_OscConfig+0x2ac>)
 80053a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053a4:	6013      	str	r3, [r2, #0]
 80053a6:	4b88      	ldr	r3, [pc, #544]	; (80055c8 <HAL_RCC_OscConfig+0x2ac>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a87      	ldr	r2, [pc, #540]	; (80055c8 <HAL_RCC_OscConfig+0x2ac>)
 80053ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053b0:	6013      	str	r3, [r2, #0]
 80053b2:	e00b      	b.n	80053cc <HAL_RCC_OscConfig+0xb0>
 80053b4:	4b84      	ldr	r3, [pc, #528]	; (80055c8 <HAL_RCC_OscConfig+0x2ac>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a83      	ldr	r2, [pc, #524]	; (80055c8 <HAL_RCC_OscConfig+0x2ac>)
 80053ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053be:	6013      	str	r3, [r2, #0]
 80053c0:	4b81      	ldr	r3, [pc, #516]	; (80055c8 <HAL_RCC_OscConfig+0x2ac>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a80      	ldr	r2, [pc, #512]	; (80055c8 <HAL_RCC_OscConfig+0x2ac>)
 80053c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d013      	beq.n	80053fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053d4:	f7fd fe20 	bl	8003018 <HAL_GetTick>
 80053d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053da:	e008      	b.n	80053ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053dc:	f7fd fe1c 	bl	8003018 <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	2b64      	cmp	r3, #100	; 0x64
 80053e8:	d901      	bls.n	80053ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e1fb      	b.n	80057e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053ee:	4b76      	ldr	r3, [pc, #472]	; (80055c8 <HAL_RCC_OscConfig+0x2ac>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d0f0      	beq.n	80053dc <HAL_RCC_OscConfig+0xc0>
 80053fa:	e014      	b.n	8005426 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053fc:	f7fd fe0c 	bl	8003018 <HAL_GetTick>
 8005400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005402:	e008      	b.n	8005416 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005404:	f7fd fe08 	bl	8003018 <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	2b64      	cmp	r3, #100	; 0x64
 8005410:	d901      	bls.n	8005416 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e1e7      	b.n	80057e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005416:	4b6c      	ldr	r3, [pc, #432]	; (80055c8 <HAL_RCC_OscConfig+0x2ac>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d1f0      	bne.n	8005404 <HAL_RCC_OscConfig+0xe8>
 8005422:	e000      	b.n	8005426 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005424:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0302 	and.w	r3, r3, #2
 800542e:	2b00      	cmp	r3, #0
 8005430:	d063      	beq.n	80054fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005432:	4b65      	ldr	r3, [pc, #404]	; (80055c8 <HAL_RCC_OscConfig+0x2ac>)
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f003 030c 	and.w	r3, r3, #12
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00b      	beq.n	8005456 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800543e:	4b62      	ldr	r3, [pc, #392]	; (80055c8 <HAL_RCC_OscConfig+0x2ac>)
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005446:	2b08      	cmp	r3, #8
 8005448:	d11c      	bne.n	8005484 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800544a:	4b5f      	ldr	r3, [pc, #380]	; (80055c8 <HAL_RCC_OscConfig+0x2ac>)
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005452:	2b00      	cmp	r3, #0
 8005454:	d116      	bne.n	8005484 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005456:	4b5c      	ldr	r3, [pc, #368]	; (80055c8 <HAL_RCC_OscConfig+0x2ac>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0302 	and.w	r3, r3, #2
 800545e:	2b00      	cmp	r3, #0
 8005460:	d005      	beq.n	800546e <HAL_RCC_OscConfig+0x152>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	2b01      	cmp	r3, #1
 8005468:	d001      	beq.n	800546e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e1bb      	b.n	80057e6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800546e:	4b56      	ldr	r3, [pc, #344]	; (80055c8 <HAL_RCC_OscConfig+0x2ac>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	00db      	lsls	r3, r3, #3
 800547c:	4952      	ldr	r1, [pc, #328]	; (80055c8 <HAL_RCC_OscConfig+0x2ac>)
 800547e:	4313      	orrs	r3, r2
 8005480:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005482:	e03a      	b.n	80054fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d020      	beq.n	80054ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800548c:	4b4f      	ldr	r3, [pc, #316]	; (80055cc <HAL_RCC_OscConfig+0x2b0>)
 800548e:	2201      	movs	r2, #1
 8005490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005492:	f7fd fdc1 	bl	8003018 <HAL_GetTick>
 8005496:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005498:	e008      	b.n	80054ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800549a:	f7fd fdbd 	bl	8003018 <HAL_GetTick>
 800549e:	4602      	mov	r2, r0
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	2b02      	cmp	r3, #2
 80054a6:	d901      	bls.n	80054ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e19c      	b.n	80057e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054ac:	4b46      	ldr	r3, [pc, #280]	; (80055c8 <HAL_RCC_OscConfig+0x2ac>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 0302 	and.w	r3, r3, #2
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d0f0      	beq.n	800549a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054b8:	4b43      	ldr	r3, [pc, #268]	; (80055c8 <HAL_RCC_OscConfig+0x2ac>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	691b      	ldr	r3, [r3, #16]
 80054c4:	00db      	lsls	r3, r3, #3
 80054c6:	4940      	ldr	r1, [pc, #256]	; (80055c8 <HAL_RCC_OscConfig+0x2ac>)
 80054c8:	4313      	orrs	r3, r2
 80054ca:	600b      	str	r3, [r1, #0]
 80054cc:	e015      	b.n	80054fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054ce:	4b3f      	ldr	r3, [pc, #252]	; (80055cc <HAL_RCC_OscConfig+0x2b0>)
 80054d0:	2200      	movs	r2, #0
 80054d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054d4:	f7fd fda0 	bl	8003018 <HAL_GetTick>
 80054d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054da:	e008      	b.n	80054ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054dc:	f7fd fd9c 	bl	8003018 <HAL_GetTick>
 80054e0:	4602      	mov	r2, r0
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d901      	bls.n	80054ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80054ea:	2303      	movs	r3, #3
 80054ec:	e17b      	b.n	80057e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054ee:	4b36      	ldr	r3, [pc, #216]	; (80055c8 <HAL_RCC_OscConfig+0x2ac>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 0302 	and.w	r3, r3, #2
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d1f0      	bne.n	80054dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0308 	and.w	r3, r3, #8
 8005502:	2b00      	cmp	r3, #0
 8005504:	d030      	beq.n	8005568 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	695b      	ldr	r3, [r3, #20]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d016      	beq.n	800553c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800550e:	4b30      	ldr	r3, [pc, #192]	; (80055d0 <HAL_RCC_OscConfig+0x2b4>)
 8005510:	2201      	movs	r2, #1
 8005512:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005514:	f7fd fd80 	bl	8003018 <HAL_GetTick>
 8005518:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800551a:	e008      	b.n	800552e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800551c:	f7fd fd7c 	bl	8003018 <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	2b02      	cmp	r3, #2
 8005528:	d901      	bls.n	800552e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	e15b      	b.n	80057e6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800552e:	4b26      	ldr	r3, [pc, #152]	; (80055c8 <HAL_RCC_OscConfig+0x2ac>)
 8005530:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005532:	f003 0302 	and.w	r3, r3, #2
 8005536:	2b00      	cmp	r3, #0
 8005538:	d0f0      	beq.n	800551c <HAL_RCC_OscConfig+0x200>
 800553a:	e015      	b.n	8005568 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800553c:	4b24      	ldr	r3, [pc, #144]	; (80055d0 <HAL_RCC_OscConfig+0x2b4>)
 800553e:	2200      	movs	r2, #0
 8005540:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005542:	f7fd fd69 	bl	8003018 <HAL_GetTick>
 8005546:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005548:	e008      	b.n	800555c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800554a:	f7fd fd65 	bl	8003018 <HAL_GetTick>
 800554e:	4602      	mov	r2, r0
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	2b02      	cmp	r3, #2
 8005556:	d901      	bls.n	800555c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005558:	2303      	movs	r3, #3
 800555a:	e144      	b.n	80057e6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800555c:	4b1a      	ldr	r3, [pc, #104]	; (80055c8 <HAL_RCC_OscConfig+0x2ac>)
 800555e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005560:	f003 0302 	and.w	r3, r3, #2
 8005564:	2b00      	cmp	r3, #0
 8005566:	d1f0      	bne.n	800554a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0304 	and.w	r3, r3, #4
 8005570:	2b00      	cmp	r3, #0
 8005572:	f000 80a0 	beq.w	80056b6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005576:	2300      	movs	r3, #0
 8005578:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800557a:	4b13      	ldr	r3, [pc, #76]	; (80055c8 <HAL_RCC_OscConfig+0x2ac>)
 800557c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d10f      	bne.n	80055a6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005586:	2300      	movs	r3, #0
 8005588:	60bb      	str	r3, [r7, #8]
 800558a:	4b0f      	ldr	r3, [pc, #60]	; (80055c8 <HAL_RCC_OscConfig+0x2ac>)
 800558c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558e:	4a0e      	ldr	r2, [pc, #56]	; (80055c8 <HAL_RCC_OscConfig+0x2ac>)
 8005590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005594:	6413      	str	r3, [r2, #64]	; 0x40
 8005596:	4b0c      	ldr	r3, [pc, #48]	; (80055c8 <HAL_RCC_OscConfig+0x2ac>)
 8005598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800559e:	60bb      	str	r3, [r7, #8]
 80055a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055a2:	2301      	movs	r3, #1
 80055a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055a6:	4b0b      	ldr	r3, [pc, #44]	; (80055d4 <HAL_RCC_OscConfig+0x2b8>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d121      	bne.n	80055f6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055b2:	4b08      	ldr	r3, [pc, #32]	; (80055d4 <HAL_RCC_OscConfig+0x2b8>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a07      	ldr	r2, [pc, #28]	; (80055d4 <HAL_RCC_OscConfig+0x2b8>)
 80055b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055be:	f7fd fd2b 	bl	8003018 <HAL_GetTick>
 80055c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055c4:	e011      	b.n	80055ea <HAL_RCC_OscConfig+0x2ce>
 80055c6:	bf00      	nop
 80055c8:	40023800 	.word	0x40023800
 80055cc:	42470000 	.word	0x42470000
 80055d0:	42470e80 	.word	0x42470e80
 80055d4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055d8:	f7fd fd1e 	bl	8003018 <HAL_GetTick>
 80055dc:	4602      	mov	r2, r0
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	d901      	bls.n	80055ea <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	e0fd      	b.n	80057e6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055ea:	4b81      	ldr	r3, [pc, #516]	; (80057f0 <HAL_RCC_OscConfig+0x4d4>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d0f0      	beq.n	80055d8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d106      	bne.n	800560c <HAL_RCC_OscConfig+0x2f0>
 80055fe:	4b7d      	ldr	r3, [pc, #500]	; (80057f4 <HAL_RCC_OscConfig+0x4d8>)
 8005600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005602:	4a7c      	ldr	r2, [pc, #496]	; (80057f4 <HAL_RCC_OscConfig+0x4d8>)
 8005604:	f043 0301 	orr.w	r3, r3, #1
 8005608:	6713      	str	r3, [r2, #112]	; 0x70
 800560a:	e01c      	b.n	8005646 <HAL_RCC_OscConfig+0x32a>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	2b05      	cmp	r3, #5
 8005612:	d10c      	bne.n	800562e <HAL_RCC_OscConfig+0x312>
 8005614:	4b77      	ldr	r3, [pc, #476]	; (80057f4 <HAL_RCC_OscConfig+0x4d8>)
 8005616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005618:	4a76      	ldr	r2, [pc, #472]	; (80057f4 <HAL_RCC_OscConfig+0x4d8>)
 800561a:	f043 0304 	orr.w	r3, r3, #4
 800561e:	6713      	str	r3, [r2, #112]	; 0x70
 8005620:	4b74      	ldr	r3, [pc, #464]	; (80057f4 <HAL_RCC_OscConfig+0x4d8>)
 8005622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005624:	4a73      	ldr	r2, [pc, #460]	; (80057f4 <HAL_RCC_OscConfig+0x4d8>)
 8005626:	f043 0301 	orr.w	r3, r3, #1
 800562a:	6713      	str	r3, [r2, #112]	; 0x70
 800562c:	e00b      	b.n	8005646 <HAL_RCC_OscConfig+0x32a>
 800562e:	4b71      	ldr	r3, [pc, #452]	; (80057f4 <HAL_RCC_OscConfig+0x4d8>)
 8005630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005632:	4a70      	ldr	r2, [pc, #448]	; (80057f4 <HAL_RCC_OscConfig+0x4d8>)
 8005634:	f023 0301 	bic.w	r3, r3, #1
 8005638:	6713      	str	r3, [r2, #112]	; 0x70
 800563a:	4b6e      	ldr	r3, [pc, #440]	; (80057f4 <HAL_RCC_OscConfig+0x4d8>)
 800563c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800563e:	4a6d      	ldr	r2, [pc, #436]	; (80057f4 <HAL_RCC_OscConfig+0x4d8>)
 8005640:	f023 0304 	bic.w	r3, r3, #4
 8005644:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d015      	beq.n	800567a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800564e:	f7fd fce3 	bl	8003018 <HAL_GetTick>
 8005652:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005654:	e00a      	b.n	800566c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005656:	f7fd fcdf 	bl	8003018 <HAL_GetTick>
 800565a:	4602      	mov	r2, r0
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	f241 3288 	movw	r2, #5000	; 0x1388
 8005664:	4293      	cmp	r3, r2
 8005666:	d901      	bls.n	800566c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	e0bc      	b.n	80057e6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800566c:	4b61      	ldr	r3, [pc, #388]	; (80057f4 <HAL_RCC_OscConfig+0x4d8>)
 800566e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005670:	f003 0302 	and.w	r3, r3, #2
 8005674:	2b00      	cmp	r3, #0
 8005676:	d0ee      	beq.n	8005656 <HAL_RCC_OscConfig+0x33a>
 8005678:	e014      	b.n	80056a4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800567a:	f7fd fccd 	bl	8003018 <HAL_GetTick>
 800567e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005680:	e00a      	b.n	8005698 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005682:	f7fd fcc9 	bl	8003018 <HAL_GetTick>
 8005686:	4602      	mov	r2, r0
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005690:	4293      	cmp	r3, r2
 8005692:	d901      	bls.n	8005698 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e0a6      	b.n	80057e6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005698:	4b56      	ldr	r3, [pc, #344]	; (80057f4 <HAL_RCC_OscConfig+0x4d8>)
 800569a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800569c:	f003 0302 	and.w	r3, r3, #2
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d1ee      	bne.n	8005682 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056a4:	7dfb      	ldrb	r3, [r7, #23]
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d105      	bne.n	80056b6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056aa:	4b52      	ldr	r3, [pc, #328]	; (80057f4 <HAL_RCC_OscConfig+0x4d8>)
 80056ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ae:	4a51      	ldr	r2, [pc, #324]	; (80057f4 <HAL_RCC_OscConfig+0x4d8>)
 80056b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056b4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	699b      	ldr	r3, [r3, #24]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	f000 8092 	beq.w	80057e4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80056c0:	4b4c      	ldr	r3, [pc, #304]	; (80057f4 <HAL_RCC_OscConfig+0x4d8>)
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	f003 030c 	and.w	r3, r3, #12
 80056c8:	2b08      	cmp	r3, #8
 80056ca:	d05c      	beq.n	8005786 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	699b      	ldr	r3, [r3, #24]
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	d141      	bne.n	8005758 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056d4:	4b48      	ldr	r3, [pc, #288]	; (80057f8 <HAL_RCC_OscConfig+0x4dc>)
 80056d6:	2200      	movs	r2, #0
 80056d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056da:	f7fd fc9d 	bl	8003018 <HAL_GetTick>
 80056de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056e0:	e008      	b.n	80056f4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056e2:	f7fd fc99 	bl	8003018 <HAL_GetTick>
 80056e6:	4602      	mov	r2, r0
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	2b02      	cmp	r3, #2
 80056ee:	d901      	bls.n	80056f4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80056f0:	2303      	movs	r3, #3
 80056f2:	e078      	b.n	80057e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056f4:	4b3f      	ldr	r3, [pc, #252]	; (80057f4 <HAL_RCC_OscConfig+0x4d8>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d1f0      	bne.n	80056e2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	69da      	ldr	r2, [r3, #28]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a1b      	ldr	r3, [r3, #32]
 8005708:	431a      	orrs	r2, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570e:	019b      	lsls	r3, r3, #6
 8005710:	431a      	orrs	r2, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005716:	085b      	lsrs	r3, r3, #1
 8005718:	3b01      	subs	r3, #1
 800571a:	041b      	lsls	r3, r3, #16
 800571c:	431a      	orrs	r2, r3
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005722:	061b      	lsls	r3, r3, #24
 8005724:	4933      	ldr	r1, [pc, #204]	; (80057f4 <HAL_RCC_OscConfig+0x4d8>)
 8005726:	4313      	orrs	r3, r2
 8005728:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800572a:	4b33      	ldr	r3, [pc, #204]	; (80057f8 <HAL_RCC_OscConfig+0x4dc>)
 800572c:	2201      	movs	r2, #1
 800572e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005730:	f7fd fc72 	bl	8003018 <HAL_GetTick>
 8005734:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005736:	e008      	b.n	800574a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005738:	f7fd fc6e 	bl	8003018 <HAL_GetTick>
 800573c:	4602      	mov	r2, r0
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	2b02      	cmp	r3, #2
 8005744:	d901      	bls.n	800574a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	e04d      	b.n	80057e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800574a:	4b2a      	ldr	r3, [pc, #168]	; (80057f4 <HAL_RCC_OscConfig+0x4d8>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005752:	2b00      	cmp	r3, #0
 8005754:	d0f0      	beq.n	8005738 <HAL_RCC_OscConfig+0x41c>
 8005756:	e045      	b.n	80057e4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005758:	4b27      	ldr	r3, [pc, #156]	; (80057f8 <HAL_RCC_OscConfig+0x4dc>)
 800575a:	2200      	movs	r2, #0
 800575c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800575e:	f7fd fc5b 	bl	8003018 <HAL_GetTick>
 8005762:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005764:	e008      	b.n	8005778 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005766:	f7fd fc57 	bl	8003018 <HAL_GetTick>
 800576a:	4602      	mov	r2, r0
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	2b02      	cmp	r3, #2
 8005772:	d901      	bls.n	8005778 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005774:	2303      	movs	r3, #3
 8005776:	e036      	b.n	80057e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005778:	4b1e      	ldr	r3, [pc, #120]	; (80057f4 <HAL_RCC_OscConfig+0x4d8>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005780:	2b00      	cmp	r3, #0
 8005782:	d1f0      	bne.n	8005766 <HAL_RCC_OscConfig+0x44a>
 8005784:	e02e      	b.n	80057e4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	699b      	ldr	r3, [r3, #24]
 800578a:	2b01      	cmp	r3, #1
 800578c:	d101      	bne.n	8005792 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e029      	b.n	80057e6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005792:	4b18      	ldr	r3, [pc, #96]	; (80057f4 <HAL_RCC_OscConfig+0x4d8>)
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	69db      	ldr	r3, [r3, #28]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d11c      	bne.n	80057e0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d115      	bne.n	80057e0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80057ba:	4013      	ands	r3, r2
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d10d      	bne.n	80057e0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d106      	bne.n	80057e0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80057dc:	429a      	cmp	r2, r3
 80057de:	d001      	beq.n	80057e4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e000      	b.n	80057e6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3718      	adds	r7, #24
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	40007000 	.word	0x40007000
 80057f4:	40023800 	.word	0x40023800
 80057f8:	42470060 	.word	0x42470060

080057fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d101      	bne.n	8005810 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e0cc      	b.n	80059aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005810:	4b68      	ldr	r3, [pc, #416]	; (80059b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 030f 	and.w	r3, r3, #15
 8005818:	683a      	ldr	r2, [r7, #0]
 800581a:	429a      	cmp	r2, r3
 800581c:	d90c      	bls.n	8005838 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800581e:	4b65      	ldr	r3, [pc, #404]	; (80059b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005820:	683a      	ldr	r2, [r7, #0]
 8005822:	b2d2      	uxtb	r2, r2
 8005824:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005826:	4b63      	ldr	r3, [pc, #396]	; (80059b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 030f 	and.w	r3, r3, #15
 800582e:	683a      	ldr	r2, [r7, #0]
 8005830:	429a      	cmp	r2, r3
 8005832:	d001      	beq.n	8005838 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e0b8      	b.n	80059aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 0302 	and.w	r3, r3, #2
 8005840:	2b00      	cmp	r3, #0
 8005842:	d020      	beq.n	8005886 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 0304 	and.w	r3, r3, #4
 800584c:	2b00      	cmp	r3, #0
 800584e:	d005      	beq.n	800585c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005850:	4b59      	ldr	r3, [pc, #356]	; (80059b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	4a58      	ldr	r2, [pc, #352]	; (80059b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005856:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800585a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 0308 	and.w	r3, r3, #8
 8005864:	2b00      	cmp	r3, #0
 8005866:	d005      	beq.n	8005874 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005868:	4b53      	ldr	r3, [pc, #332]	; (80059b8 <HAL_RCC_ClockConfig+0x1bc>)
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	4a52      	ldr	r2, [pc, #328]	; (80059b8 <HAL_RCC_ClockConfig+0x1bc>)
 800586e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005872:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005874:	4b50      	ldr	r3, [pc, #320]	; (80059b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	494d      	ldr	r1, [pc, #308]	; (80059b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005882:	4313      	orrs	r3, r2
 8005884:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 0301 	and.w	r3, r3, #1
 800588e:	2b00      	cmp	r3, #0
 8005890:	d044      	beq.n	800591c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	2b01      	cmp	r3, #1
 8005898:	d107      	bne.n	80058aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800589a:	4b47      	ldr	r3, [pc, #284]	; (80059b8 <HAL_RCC_ClockConfig+0x1bc>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d119      	bne.n	80058da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e07f      	b.n	80059aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d003      	beq.n	80058ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058b6:	2b03      	cmp	r3, #3
 80058b8:	d107      	bne.n	80058ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058ba:	4b3f      	ldr	r3, [pc, #252]	; (80059b8 <HAL_RCC_ClockConfig+0x1bc>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d109      	bne.n	80058da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e06f      	b.n	80059aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058ca:	4b3b      	ldr	r3, [pc, #236]	; (80059b8 <HAL_RCC_ClockConfig+0x1bc>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 0302 	and.w	r3, r3, #2
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d101      	bne.n	80058da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e067      	b.n	80059aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058da:	4b37      	ldr	r3, [pc, #220]	; (80059b8 <HAL_RCC_ClockConfig+0x1bc>)
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	f023 0203 	bic.w	r2, r3, #3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	4934      	ldr	r1, [pc, #208]	; (80059b8 <HAL_RCC_ClockConfig+0x1bc>)
 80058e8:	4313      	orrs	r3, r2
 80058ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80058ec:	f7fd fb94 	bl	8003018 <HAL_GetTick>
 80058f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058f2:	e00a      	b.n	800590a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058f4:	f7fd fb90 	bl	8003018 <HAL_GetTick>
 80058f8:	4602      	mov	r2, r0
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005902:	4293      	cmp	r3, r2
 8005904:	d901      	bls.n	800590a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	e04f      	b.n	80059aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800590a:	4b2b      	ldr	r3, [pc, #172]	; (80059b8 <HAL_RCC_ClockConfig+0x1bc>)
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	f003 020c 	and.w	r2, r3, #12
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	429a      	cmp	r2, r3
 800591a:	d1eb      	bne.n	80058f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800591c:	4b25      	ldr	r3, [pc, #148]	; (80059b4 <HAL_RCC_ClockConfig+0x1b8>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 030f 	and.w	r3, r3, #15
 8005924:	683a      	ldr	r2, [r7, #0]
 8005926:	429a      	cmp	r2, r3
 8005928:	d20c      	bcs.n	8005944 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800592a:	4b22      	ldr	r3, [pc, #136]	; (80059b4 <HAL_RCC_ClockConfig+0x1b8>)
 800592c:	683a      	ldr	r2, [r7, #0]
 800592e:	b2d2      	uxtb	r2, r2
 8005930:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005932:	4b20      	ldr	r3, [pc, #128]	; (80059b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 030f 	and.w	r3, r3, #15
 800593a:	683a      	ldr	r2, [r7, #0]
 800593c:	429a      	cmp	r2, r3
 800593e:	d001      	beq.n	8005944 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	e032      	b.n	80059aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f003 0304 	and.w	r3, r3, #4
 800594c:	2b00      	cmp	r3, #0
 800594e:	d008      	beq.n	8005962 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005950:	4b19      	ldr	r3, [pc, #100]	; (80059b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	4916      	ldr	r1, [pc, #88]	; (80059b8 <HAL_RCC_ClockConfig+0x1bc>)
 800595e:	4313      	orrs	r3, r2
 8005960:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 0308 	and.w	r3, r3, #8
 800596a:	2b00      	cmp	r3, #0
 800596c:	d009      	beq.n	8005982 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800596e:	4b12      	ldr	r3, [pc, #72]	; (80059b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	00db      	lsls	r3, r3, #3
 800597c:	490e      	ldr	r1, [pc, #56]	; (80059b8 <HAL_RCC_ClockConfig+0x1bc>)
 800597e:	4313      	orrs	r3, r2
 8005980:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005982:	f000 f821 	bl	80059c8 <HAL_RCC_GetSysClockFreq>
 8005986:	4601      	mov	r1, r0
 8005988:	4b0b      	ldr	r3, [pc, #44]	; (80059b8 <HAL_RCC_ClockConfig+0x1bc>)
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	091b      	lsrs	r3, r3, #4
 800598e:	f003 030f 	and.w	r3, r3, #15
 8005992:	4a0a      	ldr	r2, [pc, #40]	; (80059bc <HAL_RCC_ClockConfig+0x1c0>)
 8005994:	5cd3      	ldrb	r3, [r2, r3]
 8005996:	fa21 f303 	lsr.w	r3, r1, r3
 800599a:	4a09      	ldr	r2, [pc, #36]	; (80059c0 <HAL_RCC_ClockConfig+0x1c4>)
 800599c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800599e:	4b09      	ldr	r3, [pc, #36]	; (80059c4 <HAL_RCC_ClockConfig+0x1c8>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4618      	mov	r0, r3
 80059a4:	f7fd faf4 	bl	8002f90 <HAL_InitTick>

  return HAL_OK;
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3710      	adds	r7, #16
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	40023c00 	.word	0x40023c00
 80059b8:	40023800 	.word	0x40023800
 80059bc:	08012008 	.word	0x08012008
 80059c0:	20000008 	.word	0x20000008
 80059c4:	2000000c 	.word	0x2000000c

080059c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059ca:	b085      	sub	sp, #20
 80059cc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80059ce:	2300      	movs	r3, #0
 80059d0:	607b      	str	r3, [r7, #4]
 80059d2:	2300      	movs	r3, #0
 80059d4:	60fb      	str	r3, [r7, #12]
 80059d6:	2300      	movs	r3, #0
 80059d8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80059da:	2300      	movs	r3, #0
 80059dc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80059de:	4b50      	ldr	r3, [pc, #320]	; (8005b20 <HAL_RCC_GetSysClockFreq+0x158>)
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	f003 030c 	and.w	r3, r3, #12
 80059e6:	2b04      	cmp	r3, #4
 80059e8:	d007      	beq.n	80059fa <HAL_RCC_GetSysClockFreq+0x32>
 80059ea:	2b08      	cmp	r3, #8
 80059ec:	d008      	beq.n	8005a00 <HAL_RCC_GetSysClockFreq+0x38>
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	f040 808d 	bne.w	8005b0e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80059f4:	4b4b      	ldr	r3, [pc, #300]	; (8005b24 <HAL_RCC_GetSysClockFreq+0x15c>)
 80059f6:	60bb      	str	r3, [r7, #8]
       break;
 80059f8:	e08c      	b.n	8005b14 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80059fa:	4b4b      	ldr	r3, [pc, #300]	; (8005b28 <HAL_RCC_GetSysClockFreq+0x160>)
 80059fc:	60bb      	str	r3, [r7, #8]
      break;
 80059fe:	e089      	b.n	8005b14 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a00:	4b47      	ldr	r3, [pc, #284]	; (8005b20 <HAL_RCC_GetSysClockFreq+0x158>)
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a08:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a0a:	4b45      	ldr	r3, [pc, #276]	; (8005b20 <HAL_RCC_GetSysClockFreq+0x158>)
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d023      	beq.n	8005a5e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a16:	4b42      	ldr	r3, [pc, #264]	; (8005b20 <HAL_RCC_GetSysClockFreq+0x158>)
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	099b      	lsrs	r3, r3, #6
 8005a1c:	f04f 0400 	mov.w	r4, #0
 8005a20:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005a24:	f04f 0200 	mov.w	r2, #0
 8005a28:	ea03 0501 	and.w	r5, r3, r1
 8005a2c:	ea04 0602 	and.w	r6, r4, r2
 8005a30:	4a3d      	ldr	r2, [pc, #244]	; (8005b28 <HAL_RCC_GetSysClockFreq+0x160>)
 8005a32:	fb02 f106 	mul.w	r1, r2, r6
 8005a36:	2200      	movs	r2, #0
 8005a38:	fb02 f205 	mul.w	r2, r2, r5
 8005a3c:	440a      	add	r2, r1
 8005a3e:	493a      	ldr	r1, [pc, #232]	; (8005b28 <HAL_RCC_GetSysClockFreq+0x160>)
 8005a40:	fba5 0101 	umull	r0, r1, r5, r1
 8005a44:	1853      	adds	r3, r2, r1
 8005a46:	4619      	mov	r1, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f04f 0400 	mov.w	r4, #0
 8005a4e:	461a      	mov	r2, r3
 8005a50:	4623      	mov	r3, r4
 8005a52:	f7fb f919 	bl	8000c88 <__aeabi_uldivmod>
 8005a56:	4603      	mov	r3, r0
 8005a58:	460c      	mov	r4, r1
 8005a5a:	60fb      	str	r3, [r7, #12]
 8005a5c:	e049      	b.n	8005af2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a5e:	4b30      	ldr	r3, [pc, #192]	; (8005b20 <HAL_RCC_GetSysClockFreq+0x158>)
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	099b      	lsrs	r3, r3, #6
 8005a64:	f04f 0400 	mov.w	r4, #0
 8005a68:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005a6c:	f04f 0200 	mov.w	r2, #0
 8005a70:	ea03 0501 	and.w	r5, r3, r1
 8005a74:	ea04 0602 	and.w	r6, r4, r2
 8005a78:	4629      	mov	r1, r5
 8005a7a:	4632      	mov	r2, r6
 8005a7c:	f04f 0300 	mov.w	r3, #0
 8005a80:	f04f 0400 	mov.w	r4, #0
 8005a84:	0154      	lsls	r4, r2, #5
 8005a86:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005a8a:	014b      	lsls	r3, r1, #5
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	4622      	mov	r2, r4
 8005a90:	1b49      	subs	r1, r1, r5
 8005a92:	eb62 0206 	sbc.w	r2, r2, r6
 8005a96:	f04f 0300 	mov.w	r3, #0
 8005a9a:	f04f 0400 	mov.w	r4, #0
 8005a9e:	0194      	lsls	r4, r2, #6
 8005aa0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005aa4:	018b      	lsls	r3, r1, #6
 8005aa6:	1a5b      	subs	r3, r3, r1
 8005aa8:	eb64 0402 	sbc.w	r4, r4, r2
 8005aac:	f04f 0100 	mov.w	r1, #0
 8005ab0:	f04f 0200 	mov.w	r2, #0
 8005ab4:	00e2      	lsls	r2, r4, #3
 8005ab6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005aba:	00d9      	lsls	r1, r3, #3
 8005abc:	460b      	mov	r3, r1
 8005abe:	4614      	mov	r4, r2
 8005ac0:	195b      	adds	r3, r3, r5
 8005ac2:	eb44 0406 	adc.w	r4, r4, r6
 8005ac6:	f04f 0100 	mov.w	r1, #0
 8005aca:	f04f 0200 	mov.w	r2, #0
 8005ace:	02a2      	lsls	r2, r4, #10
 8005ad0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005ad4:	0299      	lsls	r1, r3, #10
 8005ad6:	460b      	mov	r3, r1
 8005ad8:	4614      	mov	r4, r2
 8005ada:	4618      	mov	r0, r3
 8005adc:	4621      	mov	r1, r4
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f04f 0400 	mov.w	r4, #0
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	4623      	mov	r3, r4
 8005ae8:	f7fb f8ce 	bl	8000c88 <__aeabi_uldivmod>
 8005aec:	4603      	mov	r3, r0
 8005aee:	460c      	mov	r4, r1
 8005af0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005af2:	4b0b      	ldr	r3, [pc, #44]	; (8005b20 <HAL_RCC_GetSysClockFreq+0x158>)
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	0c1b      	lsrs	r3, r3, #16
 8005af8:	f003 0303 	and.w	r3, r3, #3
 8005afc:	3301      	adds	r3, #1
 8005afe:	005b      	lsls	r3, r3, #1
 8005b00:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b0a:	60bb      	str	r3, [r7, #8]
      break;
 8005b0c:	e002      	b.n	8005b14 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b0e:	4b05      	ldr	r3, [pc, #20]	; (8005b24 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005b10:	60bb      	str	r3, [r7, #8]
      break;
 8005b12:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b14:	68bb      	ldr	r3, [r7, #8]
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3714      	adds	r7, #20
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b1e:	bf00      	nop
 8005b20:	40023800 	.word	0x40023800
 8005b24:	00f42400 	.word	0x00f42400
 8005b28:	00b71b00 	.word	0x00b71b00

08005b2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b30:	4b03      	ldr	r3, [pc, #12]	; (8005b40 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b32:	681b      	ldr	r3, [r3, #0]
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	20000008 	.word	0x20000008

08005b44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005b48:	f7ff fff0 	bl	8005b2c <HAL_RCC_GetHCLKFreq>
 8005b4c:	4601      	mov	r1, r0
 8005b4e:	4b05      	ldr	r3, [pc, #20]	; (8005b64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	0a9b      	lsrs	r3, r3, #10
 8005b54:	f003 0307 	and.w	r3, r3, #7
 8005b58:	4a03      	ldr	r2, [pc, #12]	; (8005b68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b5a:	5cd3      	ldrb	r3, [r2, r3]
 8005b5c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	40023800 	.word	0x40023800
 8005b68:	08012018 	.word	0x08012018

08005b6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005b70:	f7ff ffdc 	bl	8005b2c <HAL_RCC_GetHCLKFreq>
 8005b74:	4601      	mov	r1, r0
 8005b76:	4b05      	ldr	r3, [pc, #20]	; (8005b8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	0b5b      	lsrs	r3, r3, #13
 8005b7c:	f003 0307 	and.w	r3, r3, #7
 8005b80:	4a03      	ldr	r2, [pc, #12]	; (8005b90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b82:	5cd3      	ldrb	r3, [r2, r3]
 8005b84:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	40023800 	.word	0x40023800
 8005b90:	08012018 	.word	0x08012018

08005b94 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b086      	sub	sp, #24
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 0301 	and.w	r3, r3, #1
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d105      	bne.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d035      	beq.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005bbc:	4b62      	ldr	r3, [pc, #392]	; (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005bc2:	f7fd fa29 	bl	8003018 <HAL_GetTick>
 8005bc6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005bc8:	e008      	b.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005bca:	f7fd fa25 	bl	8003018 <HAL_GetTick>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	d901      	bls.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	e0b0      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005bdc:	4b5b      	ldr	r3, [pc, #364]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d1f0      	bne.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	019a      	lsls	r2, r3, #6
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	071b      	lsls	r3, r3, #28
 8005bf4:	4955      	ldr	r1, [pc, #340]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005bfc:	4b52      	ldr	r3, [pc, #328]	; (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005bfe:	2201      	movs	r2, #1
 8005c00:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c02:	f7fd fa09 	bl	8003018 <HAL_GetTick>
 8005c06:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c08:	e008      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005c0a:	f7fd fa05 	bl	8003018 <HAL_GetTick>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	2b02      	cmp	r3, #2
 8005c16:	d901      	bls.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	e090      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c1c:	4b4b      	ldr	r3, [pc, #300]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d0f0      	beq.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 0302 	and.w	r3, r3, #2
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	f000 8083 	beq.w	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c36:	2300      	movs	r3, #0
 8005c38:	60fb      	str	r3, [r7, #12]
 8005c3a:	4b44      	ldr	r3, [pc, #272]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3e:	4a43      	ldr	r2, [pc, #268]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c44:	6413      	str	r3, [r2, #64]	; 0x40
 8005c46:	4b41      	ldr	r3, [pc, #260]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c4e:	60fb      	str	r3, [r7, #12]
 8005c50:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005c52:	4b3f      	ldr	r3, [pc, #252]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a3e      	ldr	r2, [pc, #248]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c5c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005c5e:	f7fd f9db 	bl	8003018 <HAL_GetTick>
 8005c62:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005c64:	e008      	b.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005c66:	f7fd f9d7 	bl	8003018 <HAL_GetTick>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	1ad3      	subs	r3, r2, r3
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	d901      	bls.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005c74:	2303      	movs	r3, #3
 8005c76:	e062      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005c78:	4b35      	ldr	r3, [pc, #212]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d0f0      	beq.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005c84:	4b31      	ldr	r3, [pc, #196]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c8c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d02f      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c9c:	693a      	ldr	r2, [r7, #16]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d028      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ca2:	4b2a      	ldr	r3, [pc, #168]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ca6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005caa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005cac:	4b29      	ldr	r3, [pc, #164]	; (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005cae:	2201      	movs	r2, #1
 8005cb0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005cb2:	4b28      	ldr	r3, [pc, #160]	; (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005cb8:	4a24      	ldr	r2, [pc, #144]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005cbe:	4b23      	ldr	r3, [pc, #140]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cc2:	f003 0301 	and.w	r3, r3, #1
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d114      	bne.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005cca:	f7fd f9a5 	bl	8003018 <HAL_GetTick>
 8005cce:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cd0:	e00a      	b.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cd2:	f7fd f9a1 	bl	8003018 <HAL_GetTick>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	1ad3      	subs	r3, r2, r3
 8005cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d901      	bls.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	e02a      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ce8:	4b18      	ldr	r3, [pc, #96]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cec:	f003 0302 	and.w	r3, r3, #2
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d0ee      	beq.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cfc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d00:	d10d      	bne.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005d02:	4b12      	ldr	r3, [pc, #72]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005d12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d16:	490d      	ldr	r1, [pc, #52]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	608b      	str	r3, [r1, #8]
 8005d1c:	e005      	b.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005d1e:	4b0b      	ldr	r3, [pc, #44]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	4a0a      	ldr	r2, [pc, #40]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d24:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005d28:	6093      	str	r3, [r2, #8]
 8005d2a:	4b08      	ldr	r3, [pc, #32]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d2c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d36:	4905      	ldr	r1, [pc, #20]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3718      	adds	r7, #24
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	42470068 	.word	0x42470068
 8005d4c:	40023800 	.word	0x40023800
 8005d50:	40007000 	.word	0x40007000
 8005d54:	42470e40 	.word	0x42470e40

08005d58 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b082      	sub	sp, #8
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d101      	bne.n	8005d6a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e083      	b.n	8005e72 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	7f5b      	ldrb	r3, [r3, #29]
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d105      	bne.n	8005d80 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f7fc fdd0 	bl	8002920 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2202      	movs	r2, #2
 8005d84:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	22ca      	movs	r2, #202	; 0xca
 8005d8c:	625a      	str	r2, [r3, #36]	; 0x24
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2253      	movs	r2, #83	; 0x53
 8005d94:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 f9fb 	bl	8006192 <RTC_EnterInitMode>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d008      	beq.n	8005db4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	22ff      	movs	r2, #255	; 0xff
 8005da8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2204      	movs	r2, #4
 8005dae:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	e05e      	b.n	8005e72 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	6812      	ldr	r2, [r2, #0]
 8005dbe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005dc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dc6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	6899      	ldr	r1, [r3, #8]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	685a      	ldr	r2, [r3, #4]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	431a      	orrs	r2, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	695b      	ldr	r3, [r3, #20]
 8005ddc:	431a      	orrs	r2, r3
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	430a      	orrs	r2, r1
 8005de4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	68d2      	ldr	r2, [r2, #12]
 8005dee:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	6919      	ldr	r1, [r3, #16]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	041a      	lsls	r2, r3, #16
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	430a      	orrs	r2, r1
 8005e02:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	68da      	ldr	r2, [r3, #12]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e12:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	f003 0320 	and.w	r3, r3, #32
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d10e      	bne.n	8005e40 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 f98d 	bl	8006142 <HAL_RTC_WaitForSynchro>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d008      	beq.n	8005e40 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	22ff      	movs	r2, #255	; 0xff
 8005e34:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2204      	movs	r2, #4
 8005e3a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e018      	b.n	8005e72 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005e4e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	699a      	ldr	r2, [r3, #24]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	430a      	orrs	r2, r1
 8005e60:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	22ff      	movs	r2, #255	; 0xff
 8005e68:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005e70:	2300      	movs	r3, #0
  }
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3708      	adds	r7, #8
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}

08005e7a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005e7a:	b590      	push	{r4, r7, lr}
 8005e7c:	b087      	sub	sp, #28
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	60f8      	str	r0, [r7, #12]
 8005e82:	60b9      	str	r1, [r7, #8]
 8005e84:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005e86:	2300      	movs	r3, #0
 8005e88:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	7f1b      	ldrb	r3, [r3, #28]
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d101      	bne.n	8005e96 <HAL_RTC_SetTime+0x1c>
 8005e92:	2302      	movs	r3, #2
 8005e94:	e0aa      	b.n	8005fec <HAL_RTC_SetTime+0x172>
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2202      	movs	r2, #2
 8005ea0:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d126      	bne.n	8005ef6 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d102      	bne.n	8005ebc <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f000 f992 	bl	80061ea <RTC_ByteToBcd2>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	785b      	ldrb	r3, [r3, #1]
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f000 f98b 	bl	80061ea <RTC_ByteToBcd2>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005ed8:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	789b      	ldrb	r3, [r3, #2]
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f000 f983 	bl	80061ea <RTC_ByteToBcd2>
 8005ee4:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005ee6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	78db      	ldrb	r3, [r3, #3]
 8005eee:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	617b      	str	r3, [r7, #20]
 8005ef4:	e018      	b.n	8005f28 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d102      	bne.n	8005f0a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	2200      	movs	r2, #0
 8005f08:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	785b      	ldrb	r3, [r3, #1]
 8005f14:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005f16:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005f18:	68ba      	ldr	r2, [r7, #8]
 8005f1a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005f1c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	78db      	ldrb	r3, [r3, #3]
 8005f22:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005f24:	4313      	orrs	r3, r2
 8005f26:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	22ca      	movs	r2, #202	; 0xca
 8005f2e:	625a      	str	r2, [r3, #36]	; 0x24
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2253      	movs	r2, #83	; 0x53
 8005f36:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005f38:	68f8      	ldr	r0, [r7, #12]
 8005f3a:	f000 f92a 	bl	8006192 <RTC_EnterInitMode>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d00b      	beq.n	8005f5c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	22ff      	movs	r2, #255	; 0xff
 8005f4a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2204      	movs	r2, #4
 8005f50:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2200      	movs	r2, #0
 8005f56:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e047      	b.n	8005fec <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005f66:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005f6a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	689a      	ldr	r2, [r3, #8]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005f7a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	6899      	ldr	r1, [r3, #8]
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	68da      	ldr	r2, [r3, #12]
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	431a      	orrs	r2, r3
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	430a      	orrs	r2, r1
 8005f92:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68da      	ldr	r2, [r3, #12]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005fa2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	f003 0320 	and.w	r3, r3, #32
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d111      	bne.n	8005fd6 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005fb2:	68f8      	ldr	r0, [r7, #12]
 8005fb4:	f000 f8c5 	bl	8006142 <HAL_RTC_WaitForSynchro>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d00b      	beq.n	8005fd6 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	22ff      	movs	r2, #255	; 0xff
 8005fc4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2204      	movs	r2, #4
 8005fca:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e00a      	b.n	8005fec <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	22ff      	movs	r2, #255	; 0xff
 8005fdc:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8005fea:	2300      	movs	r3, #0
  }
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	371c      	adds	r7, #28
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd90      	pop	{r4, r7, pc}

08005ff4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005ff4:	b590      	push	{r4, r7, lr}
 8005ff6:	b087      	sub	sp, #28
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006000:	2300      	movs	r3, #0
 8006002:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	7f1b      	ldrb	r3, [r3, #28]
 8006008:	2b01      	cmp	r3, #1
 800600a:	d101      	bne.n	8006010 <HAL_RTC_SetDate+0x1c>
 800600c:	2302      	movs	r3, #2
 800600e:	e094      	b.n	800613a <HAL_RTC_SetDate+0x146>
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2201      	movs	r2, #1
 8006014:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2202      	movs	r2, #2
 800601a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d10e      	bne.n	8006040 <HAL_RTC_SetDate+0x4c>
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	785b      	ldrb	r3, [r3, #1]
 8006026:	f003 0310 	and.w	r3, r3, #16
 800602a:	2b00      	cmp	r3, #0
 800602c:	d008      	beq.n	8006040 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	785b      	ldrb	r3, [r3, #1]
 8006032:	f023 0310 	bic.w	r3, r3, #16
 8006036:	b2db      	uxtb	r3, r3
 8006038:	330a      	adds	r3, #10
 800603a:	b2da      	uxtb	r2, r3
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d11c      	bne.n	8006080 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	78db      	ldrb	r3, [r3, #3]
 800604a:	4618      	mov	r0, r3
 800604c:	f000 f8cd 	bl	80061ea <RTC_ByteToBcd2>
 8006050:	4603      	mov	r3, r0
 8006052:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	785b      	ldrb	r3, [r3, #1]
 8006058:	4618      	mov	r0, r3
 800605a:	f000 f8c6 	bl	80061ea <RTC_ByteToBcd2>
 800605e:	4603      	mov	r3, r0
 8006060:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006062:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	789b      	ldrb	r3, [r3, #2]
 8006068:	4618      	mov	r0, r3
 800606a:	f000 f8be 	bl	80061ea <RTC_ByteToBcd2>
 800606e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006070:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800607a:	4313      	orrs	r3, r2
 800607c:	617b      	str	r3, [r7, #20]
 800607e:	e00e      	b.n	800609e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	78db      	ldrb	r3, [r3, #3]
 8006084:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	785b      	ldrb	r3, [r3, #1]
 800608a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800608c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800608e:	68ba      	ldr	r2, [r7, #8]
 8006090:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8006092:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800609a:	4313      	orrs	r3, r2
 800609c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	22ca      	movs	r2, #202	; 0xca
 80060a4:	625a      	str	r2, [r3, #36]	; 0x24
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2253      	movs	r2, #83	; 0x53
 80060ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80060ae:	68f8      	ldr	r0, [r7, #12]
 80060b0:	f000 f86f 	bl	8006192 <RTC_EnterInitMode>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d00b      	beq.n	80060d2 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	22ff      	movs	r2, #255	; 0xff
 80060c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2204      	movs	r2, #4
 80060c6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2200      	movs	r2, #0
 80060cc:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	e033      	b.n	800613a <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80060dc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80060e0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68da      	ldr	r2, [r3, #12]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060f0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	f003 0320 	and.w	r3, r3, #32
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d111      	bne.n	8006124 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006100:	68f8      	ldr	r0, [r7, #12]
 8006102:	f000 f81e 	bl	8006142 <HAL_RTC_WaitForSynchro>
 8006106:	4603      	mov	r3, r0
 8006108:	2b00      	cmp	r3, #0
 800610a:	d00b      	beq.n	8006124 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	22ff      	movs	r2, #255	; 0xff
 8006112:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2204      	movs	r2, #4
 8006118:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2200      	movs	r2, #0
 800611e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e00a      	b.n	800613a <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	22ff      	movs	r2, #255	; 0xff
 800612a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2201      	movs	r2, #1
 8006130:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2200      	movs	r2, #0
 8006136:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8006138:	2300      	movs	r3, #0
  }
}
 800613a:	4618      	mov	r0, r3
 800613c:	371c      	adds	r7, #28
 800613e:	46bd      	mov	sp, r7
 8006140:	bd90      	pop	{r4, r7, pc}

08006142 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006142:	b580      	push	{r7, lr}
 8006144:	b084      	sub	sp, #16
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800614a:	2300      	movs	r3, #0
 800614c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	68da      	ldr	r2, [r3, #12]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800615c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800615e:	f7fc ff5b 	bl	8003018 <HAL_GetTick>
 8006162:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006164:	e009      	b.n	800617a <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006166:	f7fc ff57 	bl	8003018 <HAL_GetTick>
 800616a:	4602      	mov	r2, r0
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	1ad3      	subs	r3, r2, r3
 8006170:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006174:	d901      	bls.n	800617a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006176:	2303      	movs	r3, #3
 8006178:	e007      	b.n	800618a <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	f003 0320 	and.w	r3, r3, #32
 8006184:	2b00      	cmp	r3, #0
 8006186:	d0ee      	beq.n	8006166 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	3710      	adds	r7, #16
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}

08006192 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006192:	b580      	push	{r7, lr}
 8006194:	b084      	sub	sp, #16
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800619a:	2300      	movs	r3, #0
 800619c:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d119      	bne.n	80061e0 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f04f 32ff 	mov.w	r2, #4294967295
 80061b4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80061b6:	f7fc ff2f 	bl	8003018 <HAL_GetTick>
 80061ba:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80061bc:	e009      	b.n	80061d2 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80061be:	f7fc ff2b 	bl	8003018 <HAL_GetTick>
 80061c2:	4602      	mov	r2, r0
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	1ad3      	subs	r3, r2, r3
 80061c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061cc:	d901      	bls.n	80061d2 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80061ce:	2303      	movs	r3, #3
 80061d0:	e007      	b.n	80061e2 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d0ee      	beq.n	80061be <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3710      	adds	r7, #16
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}

080061ea <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80061ea:	b480      	push	{r7}
 80061ec:	b085      	sub	sp, #20
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	4603      	mov	r3, r0
 80061f2:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80061f4:	2300      	movs	r3, #0
 80061f6:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80061f8:	e005      	b.n	8006206 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	3301      	adds	r3, #1
 80061fe:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8006200:	79fb      	ldrb	r3, [r7, #7]
 8006202:	3b0a      	subs	r3, #10
 8006204:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8006206:	79fb      	ldrb	r3, [r7, #7]
 8006208:	2b09      	cmp	r3, #9
 800620a:	d8f6      	bhi.n	80061fa <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	b2db      	uxtb	r3, r3
 8006210:	011b      	lsls	r3, r3, #4
 8006212:	b2da      	uxtb	r2, r3
 8006214:	79fb      	ldrb	r3, [r7, #7]
 8006216:	4313      	orrs	r3, r2
 8006218:	b2db      	uxtb	r3, r3
}
 800621a:	4618      	mov	r0, r3
 800621c:	3714      	adds	r7, #20
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr

08006226 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006226:	b580      	push	{r7, lr}
 8006228:	b082      	sub	sp, #8
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d101      	bne.n	8006238 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	e022      	b.n	800627e <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800623e:	b2db      	uxtb	r3, r3
 8006240:	2b00      	cmp	r3, #0
 8006242:	d105      	bne.n	8006250 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f7fc fb7e 	bl	800294c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2203      	movs	r2, #3
 8006254:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 f815 	bl	8006288 <HAL_SD_InitCard>
 800625e:	4603      	mov	r3, r0
 8006260:	2b00      	cmp	r3, #0
 8006262:	d001      	beq.n	8006268 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	e00a      	b.n	800627e <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	4618      	mov	r0, r3
 8006280:	3708      	adds	r7, #8
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
	...

08006288 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006288:	b5b0      	push	{r4, r5, r7, lr}
 800628a:	b08e      	sub	sp, #56	; 0x38
 800628c:	af04      	add	r7, sp, #16
 800628e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8006290:	2300      	movs	r3, #0
 8006292:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8006294:	2300      	movs	r3, #0
 8006296:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006298:	2300      	movs	r3, #0
 800629a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800629c:	2300      	movs	r3, #0
 800629e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80062a0:	2300      	movs	r3, #0
 80062a2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80062a4:	2376      	movs	r3, #118	; 0x76
 80062a6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681d      	ldr	r5, [r3, #0]
 80062ac:	466c      	mov	r4, sp
 80062ae:	f107 0314 	add.w	r3, r7, #20
 80062b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80062b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80062ba:	f107 0308 	add.w	r3, r7, #8
 80062be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80062c0:	4628      	mov	r0, r5
 80062c2:	f003 f99b 	bl	80095fc <SDIO_Init>
 80062c6:	4603      	mov	r3, r0
 80062c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80062cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d001      	beq.n	80062d8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	e031      	b.n	800633c <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80062d8:	4b1a      	ldr	r3, [pc, #104]	; (8006344 <HAL_SD_InitCard+0xbc>)
 80062da:	2200      	movs	r2, #0
 80062dc:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4618      	mov	r0, r3
 80062e4:	f003 f9d3 	bl	800968e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80062e8:	4b16      	ldr	r3, [pc, #88]	; (8006344 <HAL_SD_InitCard+0xbc>)
 80062ea:	2201      	movs	r2, #1
 80062ec:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 fffa 	bl	80072e8 <SD_PowerON>
 80062f4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80062f6:	6a3b      	ldr	r3, [r7, #32]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d00b      	beq.n	8006314 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006308:	6a3b      	ldr	r3, [r7, #32]
 800630a:	431a      	orrs	r2, r3
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	e013      	b.n	800633c <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 ff19 	bl	800714c <SD_InitCard>
 800631a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800631c:	6a3b      	ldr	r3, [r7, #32]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00b      	beq.n	800633a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2201      	movs	r2, #1
 8006326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800632e:	6a3b      	ldr	r3, [r7, #32]
 8006330:	431a      	orrs	r2, r3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	e000      	b.n	800633c <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800633a:	2300      	movs	r3, #0
}
 800633c:	4618      	mov	r0, r3
 800633e:	3728      	adds	r7, #40	; 0x28
 8006340:	46bd      	mov	sp, r7
 8006342:	bdb0      	pop	{r4, r5, r7, pc}
 8006344:	422580a0 	.word	0x422580a0

08006348 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b08c      	sub	sp, #48	; 0x30
 800634c:	af00      	add	r7, sp, #0
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	60b9      	str	r1, [r7, #8]
 8006352:	607a      	str	r2, [r7, #4]
 8006354:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d107      	bne.n	8006370 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006364:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	e0c9      	b.n	8006504 <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006376:	b2db      	uxtb	r3, r3
 8006378:	2b01      	cmp	r3, #1
 800637a:	f040 80c2 	bne.w	8006502 <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2200      	movs	r2, #0
 8006382:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006384:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	441a      	add	r2, r3
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800638e:	429a      	cmp	r2, r3
 8006390:	d907      	bls.n	80063a2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006396:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e0b0      	b.n	8006504 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2203      	movs	r2, #3
 80063a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	2200      	movs	r2, #0
 80063b0:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	6812      	ldr	r2, [r2, #0]
 80063bc:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 80063c0:	f043 0302 	orr.w	r3, r3, #2
 80063c4:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ca:	4a50      	ldr	r2, [pc, #320]	; (800650c <HAL_SD_ReadBlocks_DMA+0x1c4>)
 80063cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d2:	4a4f      	ldr	r2, [pc, #316]	; (8006510 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 80063d4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063da:	2200      	movs	r2, #0
 80063dc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	3380      	adds	r3, #128	; 0x80
 80063e8:	4619      	mov	r1, r3
 80063ea:	68ba      	ldr	r2, [r7, #8]
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	025b      	lsls	r3, r3, #9
 80063f0:	089b      	lsrs	r3, r3, #2
 80063f2:	f7fc ffff 	bl	80033f4 <HAL_DMA_Start_IT>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d017      	beq.n	800642c <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800640a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a40      	ldr	r2, [pc, #256]	; (8006514 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8006412:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006418:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2201      	movs	r2, #1
 8006424:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	e06b      	b.n	8006504 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800642c:	4b3a      	ldr	r3, [pc, #232]	; (8006518 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 800642e:	2201      	movs	r2, #1
 8006430:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006436:	2b01      	cmp	r3, #1
 8006438:	d002      	beq.n	8006440 <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 800643a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643c:	025b      	lsls	r3, r3, #9
 800643e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006448:	4618      	mov	r0, r3
 800644a:	f003 f9b3 	bl	80097b4 <SDMMC_CmdBlockLength>
 800644e:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8006450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006452:	2b00      	cmp	r3, #0
 8006454:	d00f      	beq.n	8006476 <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a2e      	ldr	r2, [pc, #184]	; (8006514 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800645c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006464:	431a      	orrs	r2, r3
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2201      	movs	r2, #1
 800646e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	e046      	b.n	8006504 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006476:	f04f 33ff 	mov.w	r3, #4294967295
 800647a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	025b      	lsls	r3, r3, #9
 8006480:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006482:	2390      	movs	r3, #144	; 0x90
 8006484:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006486:	2302      	movs	r3, #2
 8006488:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800648a:	2300      	movs	r3, #0
 800648c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800648e:	2301      	movs	r3, #1
 8006490:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f107 0210 	add.w	r2, r7, #16
 800649a:	4611      	mov	r1, r2
 800649c:	4618      	mov	r0, r3
 800649e:	f003 f95d 	bl	800975c <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d90a      	bls.n	80064be <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2282      	movs	r2, #130	; 0x82
 80064ac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064b4:	4618      	mov	r0, r3
 80064b6:	f003 f9c1 	bl	800983c <SDMMC_CmdReadMultiBlock>
 80064ba:	62f8      	str	r0, [r7, #44]	; 0x2c
 80064bc:	e009      	b.n	80064d2 <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2281      	movs	r2, #129	; 0x81
 80064c2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064ca:	4618      	mov	r0, r3
 80064cc:	f003 f994 	bl	80097f8 <SDMMC_CmdReadSingleBlock>
 80064d0:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80064d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d012      	beq.n	80064fe <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a0d      	ldr	r2, [pc, #52]	; (8006514 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 80064de:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e6:	431a      	orrs	r2, r3
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2200      	movs	r2, #0
 80064f8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e002      	b.n	8006504 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 80064fe:	2300      	movs	r3, #0
 8006500:	e000      	b.n	8006504 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 8006502:	2302      	movs	r3, #2
  }
}
 8006504:	4618      	mov	r0, r3
 8006506:	3730      	adds	r7, #48	; 0x30
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}
 800650c:	08006f5b 	.word	0x08006f5b
 8006510:	08006fcd 	.word	0x08006fcd
 8006514:	004005ff 	.word	0x004005ff
 8006518:	4225858c 	.word	0x4225858c

0800651c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b08c      	sub	sp, #48	; 0x30
 8006520:	af00      	add	r7, sp, #0
 8006522:	60f8      	str	r0, [r7, #12]
 8006524:	60b9      	str	r1, [r7, #8]
 8006526:	607a      	str	r2, [r7, #4]
 8006528:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d107      	bne.n	8006544 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006538:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	e0ce      	b.n	80066e2 <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800654a:	b2db      	uxtb	r3, r3
 800654c:	2b01      	cmp	r3, #1
 800654e:	f040 80c7 	bne.w	80066e0 <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2200      	movs	r2, #0
 8006556:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006558:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	441a      	add	r2, r3
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006562:	429a      	cmp	r2, r3
 8006564:	d907      	bls.n	8006576 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800656a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e0b5      	b.n	80066e2 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2203      	movs	r2, #3
 800657a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2200      	movs	r2, #0
 8006584:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800658c:	68fa      	ldr	r2, [r7, #12]
 800658e:	6812      	ldr	r2, [r2, #0]
 8006590:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8006594:	f043 0302 	orr.w	r3, r3, #2
 8006598:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800659e:	4a53      	ldr	r2, [pc, #332]	; (80066ec <HAL_SD_WriteBlocks_DMA+0x1d0>)
 80065a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065a6:	4a52      	ldr	r2, [pc, #328]	; (80066f0 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 80065a8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ae:	2200      	movs	r2, #0
 80065b0:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d002      	beq.n	80065c0 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 80065ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065bc:	025b      	lsls	r3, r3, #9
 80065be:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80065c8:	4618      	mov	r0, r3
 80065ca:	f003 f8f3 	bl	80097b4 <SDMMC_CmdBlockLength>
 80065ce:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 80065d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d00f      	beq.n	80065f6 <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a46      	ldr	r2, [pc, #280]	; (80066f4 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80065dc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e4:	431a      	orrs	r2, r3
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2201      	movs	r2, #1
 80065ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e075      	b.n	80066e2 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d90a      	bls.n	8006612 <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	22a0      	movs	r2, #160	; 0xa0
 8006600:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006608:	4618      	mov	r0, r3
 800660a:	f003 f95b 	bl	80098c4 <SDMMC_CmdWriteMultiBlock>
 800660e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006610:	e009      	b.n	8006626 <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2290      	movs	r2, #144	; 0x90
 8006616:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800661e:	4618      	mov	r0, r3
 8006620:	f003 f92e 	bl	8009880 <SDMMC_CmdWriteSingleBlock>
 8006624:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006628:	2b00      	cmp	r3, #0
 800662a:	d012      	beq.n	8006652 <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a30      	ldr	r2, [pc, #192]	; (80066f4 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8006632:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663a:	431a      	orrs	r2, r3
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2200      	movs	r2, #0
 800664c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	e047      	b.n	80066e2 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8006652:	4b29      	ldr	r3, [pc, #164]	; (80066f8 <HAL_SD_WriteBlocks_DMA+0x1dc>)
 8006654:	2201      	movs	r2, #1
 8006656:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800665c:	68b9      	ldr	r1, [r7, #8]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	3380      	adds	r3, #128	; 0x80
 8006664:	461a      	mov	r2, r3
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	025b      	lsls	r3, r3, #9
 800666a:	089b      	lsrs	r3, r3, #2
 800666c:	f7fc fec2 	bl	80033f4 <HAL_DMA_Start_IT>
 8006670:	4603      	mov	r3, r0
 8006672:	2b00      	cmp	r3, #0
 8006674:	d01c      	beq.n	80066b0 <HAL_SD_WriteBlocks_DMA+0x194>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	6812      	ldr	r2, [r2, #0]
 8006680:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8006684:	f023 0302 	bic.w	r3, r3, #2
 8006688:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a19      	ldr	r2, [pc, #100]	; (80066f4 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8006690:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006696:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2201      	movs	r2, #1
 80066a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2200      	movs	r2, #0
 80066aa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	e018      	b.n	80066e2 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80066b0:	f04f 33ff 	mov.w	r3, #4294967295
 80066b4:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	025b      	lsls	r3, r3, #9
 80066ba:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80066bc:	2390      	movs	r3, #144	; 0x90
 80066be:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80066c0:	2300      	movs	r3, #0
 80066c2:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80066c4:	2300      	movs	r3, #0
 80066c6:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80066c8:	2301      	movs	r3, #1
 80066ca:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f107 0210 	add.w	r2, r7, #16
 80066d4:	4611      	mov	r1, r2
 80066d6:	4618      	mov	r0, r3
 80066d8:	f003 f840 	bl	800975c <SDIO_ConfigData>

      return HAL_OK;
 80066dc:	2300      	movs	r3, #0
 80066de:	e000      	b.n	80066e2 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 80066e0:	2302      	movs	r3, #2
  }
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3730      	adds	r7, #48	; 0x30
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	bf00      	nop
 80066ec:	08006f31 	.word	0x08006f31
 80066f0:	08006fcd 	.word	0x08006fcd
 80066f4:	004005ff 	.word	0x004005ff
 80066f8:	4225858c 	.word	0x4225858c

080066fc <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b084      	sub	sp, #16
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006708:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006710:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006714:	2b00      	cmp	r3, #0
 8006716:	d008      	beq.n	800672a <HAL_SD_IRQHandler+0x2e>
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f003 0308 	and.w	r3, r3, #8
 800671e:	2b00      	cmp	r3, #0
 8006720:	d003      	beq.n	800672a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 fff6 	bl	8007714 <SD_Read_IT>
 8006728:	e165      	b.n	80069f6 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006734:	2b00      	cmp	r3, #0
 8006736:	f000 808f 	beq.w	8006858 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006742:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	6812      	ldr	r2, [r2, #0]
 800674e:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8006752:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8006756:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f022 0201 	bic.w	r2, r2, #1
 8006766:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f003 0308 	and.w	r3, r3, #8
 800676e:	2b00      	cmp	r3, #0
 8006770:	d039      	beq.n	80067e6 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f003 0302 	and.w	r3, r3, #2
 8006778:	2b00      	cmp	r3, #0
 800677a:	d104      	bne.n	8006786 <HAL_SD_IRQHandler+0x8a>
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f003 0320 	and.w	r3, r3, #32
 8006782:	2b00      	cmp	r3, #0
 8006784:	d011      	beq.n	80067aa <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4618      	mov	r0, r3
 800678c:	f003 f8bc 	bl	8009908 <SDMMC_CmdStopTransfer>
 8006790:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d008      	beq.n	80067aa <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	431a      	orrs	r2, r3
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f000 f943 	bl	8006a30 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f240 523a 	movw	r2, #1338	; 0x53a
 80067b2:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f003 0301 	and.w	r3, r3, #1
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d104      	bne.n	80067d6 <HAL_SD_IRQHandler+0xda>
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f003 0302 	and.w	r3, r3, #2
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d003      	beq.n	80067de <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 f920 	bl	8006a1c <HAL_SD_RxCpltCallback>
 80067dc:	e10b      	b.n	80069f6 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 f912 	bl	8006a08 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80067e4:	e107      	b.n	80069f6 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	f000 8102 	beq.w	80069f6 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f003 0320 	and.w	r3, r3, #32
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d011      	beq.n	8006820 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4618      	mov	r0, r3
 8006802:	f003 f881 	bl	8009908 <SDMMC_CmdStopTransfer>
 8006806:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d008      	beq.n	8006820 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	431a      	orrs	r2, r3
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f000 f908 	bl	8006a30 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f003 0301 	and.w	r3, r3, #1
 8006826:	2b00      	cmp	r3, #0
 8006828:	f040 80e5 	bne.w	80069f6 <HAL_SD_IRQHandler+0x2fa>
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f003 0302 	and.w	r3, r3, #2
 8006832:	2b00      	cmp	r3, #0
 8006834:	f040 80df 	bne.w	80069f6 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f022 0208 	bic.w	r2, r2, #8
 8006846:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2201      	movs	r2, #1
 800684c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f000 f8d9 	bl	8006a08 <HAL_SD_TxCpltCallback>
}
 8006856:	e0ce      	b.n	80069f6 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800685e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006862:	2b00      	cmp	r3, #0
 8006864:	d008      	beq.n	8006878 <HAL_SD_IRQHandler+0x17c>
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f003 0308 	and.w	r3, r3, #8
 800686c:	2b00      	cmp	r3, #0
 800686e:	d003      	beq.n	8006878 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f000 ffa0 	bl	80077b6 <SD_Write_IT>
 8006876:	e0be      	b.n	80069f6 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800687e:	f240 233a 	movw	r3, #570	; 0x23a
 8006882:	4013      	ands	r3, r2
 8006884:	2b00      	cmp	r3, #0
 8006886:	f000 80b6 	beq.w	80069f6 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006890:	f003 0302 	and.w	r3, r3, #2
 8006894:	2b00      	cmp	r3, #0
 8006896:	d005      	beq.n	80068a4 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800689c:	f043 0202 	orr.w	r2, r3, #2
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068aa:	f003 0308 	and.w	r3, r3, #8
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d005      	beq.n	80068be <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068b6:	f043 0208 	orr.w	r2, r3, #8
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068c4:	f003 0320 	and.w	r3, r3, #32
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d005      	beq.n	80068d8 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d0:	f043 0220 	orr.w	r2, r3, #32
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068de:	f003 0310 	and.w	r3, r3, #16
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d005      	beq.n	80068f2 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ea:	f043 0210 	orr.w	r2, r3, #16
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d005      	beq.n	800690c <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006904:	f043 0208 	orr.w	r2, r3, #8
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f240 723a 	movw	r2, #1850	; 0x73a
 8006914:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	6812      	ldr	r2, [r2, #0]
 8006920:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8006924:	f023 0302 	bic.w	r3, r3, #2
 8006928:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4618      	mov	r0, r3
 8006930:	f002 ffea 	bl	8009908 <SDMMC_CmdStopTransfer>
 8006934:	4602      	mov	r2, r0
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800693a:	431a      	orrs	r2, r3
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f003 0308 	and.w	r3, r3, #8
 8006946:	2b00      	cmp	r3, #0
 8006948:	d00a      	beq.n	8006960 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2201      	movs	r2, #1
 800694e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2200      	movs	r2, #0
 8006956:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f000 f869 	bl	8006a30 <HAL_SD_ErrorCallback>
}
 800695e:	e04a      	b.n	80069f6 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006966:	2b00      	cmp	r3, #0
 8006968:	d045      	beq.n	80069f6 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f003 0310 	and.w	r3, r3, #16
 8006970:	2b00      	cmp	r3, #0
 8006972:	d104      	bne.n	800697e <HAL_SD_IRQHandler+0x282>
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f003 0320 	and.w	r3, r3, #32
 800697a:	2b00      	cmp	r3, #0
 800697c:	d011      	beq.n	80069a2 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006982:	4a1f      	ldr	r2, [pc, #124]	; (8006a00 <HAL_SD_IRQHandler+0x304>)
 8006984:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800698a:	4618      	mov	r0, r3
 800698c:	f7fc fd8a 	bl	80034a4 <HAL_DMA_Abort_IT>
 8006990:	4603      	mov	r3, r0
 8006992:	2b00      	cmp	r3, #0
 8006994:	d02f      	beq.n	80069f6 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800699a:	4618      	mov	r0, r3
 800699c:	f000 fb68 	bl	8007070 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80069a0:	e029      	b.n	80069f6 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f003 0301 	and.w	r3, r3, #1
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d104      	bne.n	80069b6 <HAL_SD_IRQHandler+0x2ba>
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f003 0302 	and.w	r3, r3, #2
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d011      	beq.n	80069da <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ba:	4a12      	ldr	r2, [pc, #72]	; (8006a04 <HAL_SD_IRQHandler+0x308>)
 80069bc:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c2:	4618      	mov	r0, r3
 80069c4:	f7fc fd6e 	bl	80034a4 <HAL_DMA_Abort_IT>
 80069c8:	4603      	mov	r3, r0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d013      	beq.n	80069f6 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d2:	4618      	mov	r0, r3
 80069d4:	f000 fb83 	bl	80070de <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80069d8:	e00d      	b.n	80069f6 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2200      	movs	r2, #0
 80069de:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 f828 	bl	8006a44 <HAL_SD_AbortCallback>
}
 80069f4:	e7ff      	b.n	80069f6 <HAL_SD_IRQHandler+0x2fa>
 80069f6:	bf00      	nop
 80069f8:	3710      	adds	r7, #16
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	bf00      	nop
 8006a00:	08007071 	.word	0x08007071
 8006a04:	080070df 	.word	0x080070df

08006a08 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: Pointer to SD handle
  * @retval None
  */
__weak void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_TxCpltCallback can be implemented in the user file
   */
}
 8006a10:	bf00      	nop
 8006a12:	370c      	adds	r7, #12
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_RxCpltCallback can be implemented in the user file
   */
}
 8006a24:	bf00      	nop
 8006a26:	370c      	adds	r7, #12
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr

08006a30 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b083      	sub	sp, #12
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006a38:	bf00      	nop
 8006a3a:	370c      	adds	r7, #12
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_AbortCallback can be implemented in the user file
   */
}
 8006a4c:	bf00      	nop
 8006a4e:	370c      	adds	r7, #12
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a66:	0f9b      	lsrs	r3, r3, #30
 8006a68:	b2da      	uxtb	r2, r3
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a72:	0e9b      	lsrs	r3, r3, #26
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	f003 030f 	and.w	r3, r3, #15
 8006a7a:	b2da      	uxtb	r2, r3
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a84:	0e1b      	lsrs	r3, r3, #24
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	f003 0303 	and.w	r3, r3, #3
 8006a8c:	b2da      	uxtb	r2, r3
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a96:	0c1b      	lsrs	r3, r3, #16
 8006a98:	b2da      	uxtb	r2, r3
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006aa2:	0a1b      	lsrs	r3, r3, #8
 8006aa4:	b2da      	uxtb	r2, r3
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006aae:	b2da      	uxtb	r2, r3
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ab8:	0d1b      	lsrs	r3, r3, #20
 8006aba:	b29a      	uxth	r2, r3
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ac4:	0c1b      	lsrs	r3, r3, #16
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	f003 030f 	and.w	r3, r3, #15
 8006acc:	b2da      	uxtb	r2, r3
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ad6:	0bdb      	lsrs	r3, r3, #15
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	f003 0301 	and.w	r3, r3, #1
 8006ade:	b2da      	uxtb	r2, r3
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ae8:	0b9b      	lsrs	r3, r3, #14
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	f003 0301 	and.w	r3, r3, #1
 8006af0:	b2da      	uxtb	r2, r3
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006afa:	0b5b      	lsrs	r3, r3, #13
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	f003 0301 	and.w	r3, r3, #1
 8006b02:	b2da      	uxtb	r2, r3
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b0c:	0b1b      	lsrs	r3, r3, #12
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	f003 0301 	and.w	r3, r3, #1
 8006b14:	b2da      	uxtb	r2, r3
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d163      	bne.n	8006bf0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b2c:	009a      	lsls	r2, r3, #2
 8006b2e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006b32:	4013      	ands	r3, r2
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006b38:	0f92      	lsrs	r2, r2, #30
 8006b3a:	431a      	orrs	r2, r3
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b44:	0edb      	lsrs	r3, r3, #27
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	f003 0307 	and.w	r3, r3, #7
 8006b4c:	b2da      	uxtb	r2, r3
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b56:	0e1b      	lsrs	r3, r3, #24
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	f003 0307 	and.w	r3, r3, #7
 8006b5e:	b2da      	uxtb	r2, r3
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b68:	0d5b      	lsrs	r3, r3, #21
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	f003 0307 	and.w	r3, r3, #7
 8006b70:	b2da      	uxtb	r2, r3
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b7a:	0c9b      	lsrs	r3, r3, #18
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	f003 0307 	and.w	r3, r3, #7
 8006b82:	b2da      	uxtb	r2, r3
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b8c:	0bdb      	lsrs	r3, r3, #15
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	f003 0307 	and.w	r3, r3, #7
 8006b94:	b2da      	uxtb	r2, r3
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	691b      	ldr	r3, [r3, #16]
 8006b9e:	1c5a      	adds	r2, r3, #1
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	7e1b      	ldrb	r3, [r3, #24]
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	f003 0307 	and.w	r3, r3, #7
 8006bae:	3302      	adds	r3, #2
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006bba:	fb02 f203 	mul.w	r2, r2, r3
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	7a1b      	ldrb	r3, [r3, #8]
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	f003 030f 	and.w	r3, r3, #15
 8006bcc:	2201      	movs	r2, #1
 8006bce:	409a      	lsls	r2, r3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006bdc:	0a52      	lsrs	r2, r2, #9
 8006bde:	fb02 f203 	mul.w	r2, r2, r3
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bec:	661a      	str	r2, [r3, #96]	; 0x60
 8006bee:	e031      	b.n	8006c54 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d11d      	bne.n	8006c34 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bfc:	041b      	lsls	r3, r3, #16
 8006bfe:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c06:	0c1b      	lsrs	r3, r3, #16
 8006c08:	431a      	orrs	r2, r3
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	691b      	ldr	r3, [r3, #16]
 8006c12:	3301      	adds	r3, #1
 8006c14:	029a      	lsls	r2, r3, #10
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c28:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	661a      	str	r2, [r3, #96]	; 0x60
 8006c32:	e00f      	b.n	8006c54 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a58      	ldr	r2, [pc, #352]	; (8006d9c <HAL_SD_GetCardCSD+0x344>)
 8006c3a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c40:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	e09d      	b.n	8006d90 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c58:	0b9b      	lsrs	r3, r3, #14
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	f003 0301 	and.w	r3, r3, #1
 8006c60:	b2da      	uxtb	r2, r3
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c6a:	09db      	lsrs	r3, r3, #7
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c72:	b2da      	uxtb	r2, r3
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c82:	b2da      	uxtb	r2, r3
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c8c:	0fdb      	lsrs	r3, r3, #31
 8006c8e:	b2da      	uxtb	r2, r3
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c98:	0f5b      	lsrs	r3, r3, #29
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	f003 0303 	and.w	r3, r3, #3
 8006ca0:	b2da      	uxtb	r2, r3
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006caa:	0e9b      	lsrs	r3, r3, #26
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	f003 0307 	and.w	r3, r3, #7
 8006cb2:	b2da      	uxtb	r2, r3
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cbc:	0d9b      	lsrs	r3, r3, #22
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	f003 030f 	and.w	r3, r3, #15
 8006cc4:	b2da      	uxtb	r2, r3
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cce:	0d5b      	lsrs	r3, r3, #21
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	f003 0301 	and.w	r3, r3, #1
 8006cd6:	b2da      	uxtb	r2, r3
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cea:	0c1b      	lsrs	r3, r3, #16
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	f003 0301 	and.w	r3, r3, #1
 8006cf2:	b2da      	uxtb	r2, r3
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cfe:	0bdb      	lsrs	r3, r3, #15
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	f003 0301 	and.w	r3, r3, #1
 8006d06:	b2da      	uxtb	r2, r3
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d12:	0b9b      	lsrs	r3, r3, #14
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	f003 0301 	and.w	r3, r3, #1
 8006d1a:	b2da      	uxtb	r2, r3
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d26:	0b5b      	lsrs	r3, r3, #13
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	f003 0301 	and.w	r3, r3, #1
 8006d2e:	b2da      	uxtb	r2, r3
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d3a:	0b1b      	lsrs	r3, r3, #12
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	f003 0301 	and.w	r3, r3, #1
 8006d42:	b2da      	uxtb	r2, r3
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d4e:	0a9b      	lsrs	r3, r3, #10
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	f003 0303 	and.w	r3, r3, #3
 8006d56:	b2da      	uxtb	r2, r3
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d62:	0a1b      	lsrs	r3, r3, #8
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	f003 0303 	and.w	r3, r3, #3
 8006d6a:	b2da      	uxtb	r2, r3
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d76:	085b      	lsrs	r3, r3, #1
 8006d78:	b2db      	uxtb	r3, r3
 8006d7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d7e:	b2da      	uxtb	r2, r3
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006d8e:	2300      	movs	r3, #0
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	370c      	adds	r7, #12
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr
 8006d9c:	004005ff 	.word	0x004005ff

08006da0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b083      	sub	sp, #12
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006dea:	2300      	movs	r3, #0
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006df8:	b5b0      	push	{r4, r5, r7, lr}
 8006dfa:	b08e      	sub	sp, #56	; 0x38
 8006dfc:	af04      	add	r7, sp, #16
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2203      	movs	r2, #3
 8006e06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e0e:	2b03      	cmp	r3, #3
 8006e10:	d02e      	beq.n	8006e70 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e18:	d106      	bne.n	8006e28 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e1e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	639a      	str	r2, [r3, #56]	; 0x38
 8006e26:	e029      	b.n	8006e7c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e2e:	d10a      	bne.n	8006e46 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 fb0f 	bl	8007454 <SD_WideBus_Enable>
 8006e36:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3e:	431a      	orrs	r2, r3
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	639a      	str	r2, [r3, #56]	; 0x38
 8006e44:	e01a      	b.n	8006e7c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d10a      	bne.n	8006e62 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f000 fb4c 	bl	80074ea <SD_WideBus_Disable>
 8006e52:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5a:	431a      	orrs	r2, r3
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	639a      	str	r2, [r3, #56]	; 0x38
 8006e60:	e00c      	b.n	8006e7c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e66:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	639a      	str	r2, [r3, #56]	; 0x38
 8006e6e:	e005      	b.n	8006e7c <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e74:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d009      	beq.n	8006e98 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a18      	ldr	r2, [pc, #96]	; (8006eec <HAL_SD_ConfigWideBusOperation+0xf4>)
 8006e8a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	e024      	b.n	8006ee2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	695b      	ldr	r3, [r3, #20]
 8006eb2:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	699b      	ldr	r3, [r3, #24]
 8006eb8:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681d      	ldr	r5, [r3, #0]
 8006ebe:	466c      	mov	r4, sp
 8006ec0:	f107 0318 	add.w	r3, r7, #24
 8006ec4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006ec8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006ecc:	f107 030c 	add.w	r3, r7, #12
 8006ed0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006ed2:	4628      	mov	r0, r5
 8006ed4:	f002 fb92 	bl	80095fc <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2201      	movs	r2, #1
 8006edc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006ee0:	2300      	movs	r3, #0
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3728      	adds	r7, #40	; 0x28
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bdb0      	pop	{r4, r5, r7, pc}
 8006eea:	bf00      	nop
 8006eec:	004005ff 	.word	0x004005ff

08006ef0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b086      	sub	sp, #24
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006efc:	f107 030c 	add.w	r3, r7, #12
 8006f00:	4619      	mov	r1, r3
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 fa7e 	bl	8007404 <SD_SendStatus>
 8006f08:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d005      	beq.n	8006f1c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	431a      	orrs	r2, r3
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	0a5b      	lsrs	r3, r3, #9
 8006f20:	f003 030f 	and.w	r3, r3, #15
 8006f24:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006f26:	693b      	ldr	r3, [r7, #16]
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3718      	adds	r7, #24
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b085      	sub	sp, #20
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f3c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f4c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006f4e:	bf00      	nop
 8006f50:	3714      	adds	r7, #20
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr

08006f5a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006f5a:	b580      	push	{r7, lr}
 8006f5c:	b084      	sub	sp, #16
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f66:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f6c:	2b82      	cmp	r3, #130	; 0x82
 8006f6e:	d111      	bne.n	8006f94 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4618      	mov	r0, r3
 8006f76:	f002 fcc7 	bl	8009908 <SDMMC_CmdStopTransfer>
 8006f7a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d008      	beq.n	8006f94 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	431a      	orrs	r2, r3
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8006f8e:	68f8      	ldr	r0, [r7, #12]
 8006f90:	f7ff fd4e 	bl	8006a30 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f022 0208 	bic.w	r2, r2, #8
 8006fa2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f240 523a 	movw	r2, #1338	; 0x53a
 8006fac:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8006fbc:	68f8      	ldr	r0, [r7, #12]
 8006fbe:	f7ff fd2d 	bl	8006a1c <HAL_SD_RxCpltCallback>
#endif
}
 8006fc2:	bf00      	nop
 8006fc4:	3710      	adds	r7, #16
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
	...

08006fcc <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b086      	sub	sp, #24
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd8:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f7fc fc0e 	bl	80037fc <HAL_DMA_GetError>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	2b02      	cmp	r3, #2
 8006fe4:	d03e      	beq.n	8007064 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fec:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ff4:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d002      	beq.n	8007002 <SD_DMAError+0x36>
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d12d      	bne.n	800705e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a19      	ldr	r2, [pc, #100]	; (800706c <SD_DMAError+0xa0>)
 8007008:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007018:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800701e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8007026:	6978      	ldr	r0, [r7, #20]
 8007028:	f7ff ff62 	bl	8006ef0 <HAL_SD_GetCardState>
 800702c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	2b06      	cmp	r3, #6
 8007032:	d002      	beq.n	800703a <SD_DMAError+0x6e>
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	2b05      	cmp	r3, #5
 8007038:	d10a      	bne.n	8007050 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4618      	mov	r0, r3
 8007040:	f002 fc62 	bl	8009908 <SDMMC_CmdStopTransfer>
 8007044:	4602      	mov	r2, r0
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800704a:	431a      	orrs	r2, r3
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	2200      	movs	r2, #0
 800705c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800705e:	6978      	ldr	r0, [r7, #20]
 8007060:	f7ff fce6 	bl	8006a30 <HAL_SD_ErrorCallback>
#endif
  }
}
 8007064:	bf00      	nop
 8007066:	3718      	adds	r7, #24
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}
 800706c:	004005ff 	.word	0x004005ff

08007070 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b084      	sub	sp, #16
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800707c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f240 523a 	movw	r2, #1338	; 0x53a
 8007086:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007088:	68f8      	ldr	r0, [r7, #12]
 800708a:	f7ff ff31 	bl	8006ef0 <HAL_SD_GetCardState>
 800708e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2200      	movs	r2, #0
 800709c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	2b06      	cmp	r3, #6
 80070a2:	d002      	beq.n	80070aa <SD_DMATxAbort+0x3a>
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	2b05      	cmp	r3, #5
 80070a8:	d10a      	bne.n	80070c0 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4618      	mov	r0, r3
 80070b0:	f002 fc2a 	bl	8009908 <SDMMC_CmdStopTransfer>
 80070b4:	4602      	mov	r2, r0
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ba:	431a      	orrs	r2, r3
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d103      	bne.n	80070d0 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	f7ff fcbb 	bl	8006a44 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80070ce:	e002      	b.n	80070d6 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80070d0:	68f8      	ldr	r0, [r7, #12]
 80070d2:	f7ff fcad 	bl	8006a30 <HAL_SD_ErrorCallback>
}
 80070d6:	bf00      	nop
 80070d8:	3710      	adds	r7, #16
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}

080070de <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80070de:	b580      	push	{r7, lr}
 80070e0:	b084      	sub	sp, #16
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ea:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f240 523a 	movw	r2, #1338	; 0x53a
 80070f4:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80070f6:	68f8      	ldr	r0, [r7, #12]
 80070f8:	f7ff fefa 	bl	8006ef0 <HAL_SD_GetCardState>
 80070fc:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2201      	movs	r2, #1
 8007102:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2200      	movs	r2, #0
 800710a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	2b06      	cmp	r3, #6
 8007110:	d002      	beq.n	8007118 <SD_DMARxAbort+0x3a>
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	2b05      	cmp	r3, #5
 8007116:	d10a      	bne.n	800712e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4618      	mov	r0, r3
 800711e:	f002 fbf3 	bl	8009908 <SDMMC_CmdStopTransfer>
 8007122:	4602      	mov	r2, r0
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007128:	431a      	orrs	r2, r3
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007132:	2b00      	cmp	r3, #0
 8007134:	d103      	bne.n	800713e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007136:	68f8      	ldr	r0, [r7, #12]
 8007138:	f7ff fc84 	bl	8006a44 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800713c:	e002      	b.n	8007144 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800713e:	68f8      	ldr	r0, [r7, #12]
 8007140:	f7ff fc76 	bl	8006a30 <HAL_SD_ErrorCallback>
}
 8007144:	bf00      	nop
 8007146:	3710      	adds	r7, #16
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800714c:	b5b0      	push	{r4, r5, r7, lr}
 800714e:	b094      	sub	sp, #80	; 0x50
 8007150:	af04      	add	r7, sp, #16
 8007152:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007154:	2301      	movs	r3, #1
 8007156:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4618      	mov	r0, r3
 800715e:	f002 faa5 	bl	80096ac <SDIO_GetPowerState>
 8007162:	4603      	mov	r3, r0
 8007164:	2b00      	cmp	r3, #0
 8007166:	d102      	bne.n	800716e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007168:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800716c:	e0b7      	b.n	80072de <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007172:	2b03      	cmp	r3, #3
 8007174:	d02f      	beq.n	80071d6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4618      	mov	r0, r3
 800717c:	f002 fcce 	bl	8009b1c <SDMMC_CmdSendCID>
 8007180:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007184:	2b00      	cmp	r3, #0
 8007186:	d001      	beq.n	800718c <SD_InitCard+0x40>
    {
      return errorstate;
 8007188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800718a:	e0a8      	b.n	80072de <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	2100      	movs	r1, #0
 8007192:	4618      	mov	r0, r3
 8007194:	f002 facf 	bl	8009736 <SDIO_GetResponse>
 8007198:	4602      	mov	r2, r0
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	2104      	movs	r1, #4
 80071a4:	4618      	mov	r0, r3
 80071a6:	f002 fac6 	bl	8009736 <SDIO_GetResponse>
 80071aa:	4602      	mov	r2, r0
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	2108      	movs	r1, #8
 80071b6:	4618      	mov	r0, r3
 80071b8:	f002 fabd 	bl	8009736 <SDIO_GetResponse>
 80071bc:	4602      	mov	r2, r0
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	210c      	movs	r1, #12
 80071c8:	4618      	mov	r0, r3
 80071ca:	f002 fab4 	bl	8009736 <SDIO_GetResponse>
 80071ce:	4602      	mov	r2, r0
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071da:	2b03      	cmp	r3, #3
 80071dc:	d00d      	beq.n	80071fa <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f107 020e 	add.w	r2, r7, #14
 80071e6:	4611      	mov	r1, r2
 80071e8:	4618      	mov	r0, r3
 80071ea:	f002 fcd4 	bl	8009b96 <SDMMC_CmdSetRelAdd>
 80071ee:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80071f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d001      	beq.n	80071fa <SD_InitCard+0xae>
    {
      return errorstate;
 80071f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071f8:	e071      	b.n	80072de <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071fe:	2b03      	cmp	r3, #3
 8007200:	d036      	beq.n	8007270 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007202:	89fb      	ldrh	r3, [r7, #14]
 8007204:	461a      	mov	r2, r3
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007212:	041b      	lsls	r3, r3, #16
 8007214:	4619      	mov	r1, r3
 8007216:	4610      	mov	r0, r2
 8007218:	f002 fc9e 	bl	8009b58 <SDMMC_CmdSendCSD>
 800721c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800721e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007220:	2b00      	cmp	r3, #0
 8007222:	d001      	beq.n	8007228 <SD_InitCard+0xdc>
    {
      return errorstate;
 8007224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007226:	e05a      	b.n	80072de <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	2100      	movs	r1, #0
 800722e:	4618      	mov	r0, r3
 8007230:	f002 fa81 	bl	8009736 <SDIO_GetResponse>
 8007234:	4602      	mov	r2, r0
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	2104      	movs	r1, #4
 8007240:	4618      	mov	r0, r3
 8007242:	f002 fa78 	bl	8009736 <SDIO_GetResponse>
 8007246:	4602      	mov	r2, r0
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	2108      	movs	r1, #8
 8007252:	4618      	mov	r0, r3
 8007254:	f002 fa6f 	bl	8009736 <SDIO_GetResponse>
 8007258:	4602      	mov	r2, r0
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	210c      	movs	r1, #12
 8007264:	4618      	mov	r0, r3
 8007266:	f002 fa66 	bl	8009736 <SDIO_GetResponse>
 800726a:	4602      	mov	r2, r0
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	2104      	movs	r1, #4
 8007276:	4618      	mov	r0, r3
 8007278:	f002 fa5d 	bl	8009736 <SDIO_GetResponse>
 800727c:	4603      	mov	r3, r0
 800727e:	0d1a      	lsrs	r2, r3, #20
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007284:	f107 0310 	add.w	r3, r7, #16
 8007288:	4619      	mov	r1, r3
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f7ff fbe4 	bl	8006a58 <HAL_SD_GetCardCSD>
 8007290:	4603      	mov	r3, r0
 8007292:	2b00      	cmp	r3, #0
 8007294:	d002      	beq.n	800729c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007296:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800729a:	e020      	b.n	80072de <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6819      	ldr	r1, [r3, #0]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072a4:	041b      	lsls	r3, r3, #16
 80072a6:	f04f 0400 	mov.w	r4, #0
 80072aa:	461a      	mov	r2, r3
 80072ac:	4623      	mov	r3, r4
 80072ae:	4608      	mov	r0, r1
 80072b0:	f002 fb4c 	bl	800994c <SDMMC_CmdSelDesel>
 80072b4:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80072b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d001      	beq.n	80072c0 <SD_InitCard+0x174>
  {
    return errorstate;
 80072bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072be:	e00e      	b.n	80072de <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681d      	ldr	r5, [r3, #0]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	466c      	mov	r4, sp
 80072c8:	f103 0210 	add.w	r2, r3, #16
 80072cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80072ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80072d2:	3304      	adds	r3, #4
 80072d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80072d6:	4628      	mov	r0, r5
 80072d8:	f002 f990 	bl	80095fc <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80072dc:	2300      	movs	r3, #0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3740      	adds	r7, #64	; 0x40
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080072e8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b086      	sub	sp, #24
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80072f0:	2300      	movs	r3, #0
 80072f2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80072f4:	2300      	movs	r3, #0
 80072f6:	617b      	str	r3, [r7, #20]
 80072f8:	2300      	movs	r3, #0
 80072fa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4618      	mov	r0, r3
 8007302:	f002 fb46 	bl	8009992 <SDMMC_CmdGoIdleState>
 8007306:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d001      	beq.n	8007312 <SD_PowerON+0x2a>
  {
    return errorstate;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	e072      	b.n	80073f8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4618      	mov	r0, r3
 8007318:	f002 fb59 	bl	80099ce <SDMMC_CmdOperCond>
 800731c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d00d      	beq.n	8007340 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2200      	movs	r2, #0
 8007328:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4618      	mov	r0, r3
 8007330:	f002 fb2f 	bl	8009992 <SDMMC_CmdGoIdleState>
 8007334:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d004      	beq.n	8007346 <SD_PowerON+0x5e>
    {
      return errorstate;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	e05b      	b.n	80073f8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2201      	movs	r2, #1
 8007344:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800734a:	2b01      	cmp	r3, #1
 800734c:	d137      	bne.n	80073be <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	2100      	movs	r1, #0
 8007354:	4618      	mov	r0, r3
 8007356:	f002 fb59 	bl	8009a0c <SDMMC_CmdAppCommand>
 800735a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d02d      	beq.n	80073be <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007362:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007366:	e047      	b.n	80073f8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	2100      	movs	r1, #0
 800736e:	4618      	mov	r0, r3
 8007370:	f002 fb4c 	bl	8009a0c <SDMMC_CmdAppCommand>
 8007374:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d001      	beq.n	8007380 <SD_PowerON+0x98>
    {
      return errorstate;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	e03b      	b.n	80073f8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	491e      	ldr	r1, [pc, #120]	; (8007400 <SD_PowerON+0x118>)
 8007386:	4618      	mov	r0, r3
 8007388:	f002 fb62 	bl	8009a50 <SDMMC_CmdAppOperCommand>
 800738c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d002      	beq.n	800739a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007394:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007398:	e02e      	b.n	80073f8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	2100      	movs	r1, #0
 80073a0:	4618      	mov	r0, r3
 80073a2:	f002 f9c8 	bl	8009736 <SDIO_GetResponse>
 80073a6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	0fdb      	lsrs	r3, r3, #31
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d101      	bne.n	80073b4 <SD_PowerON+0xcc>
 80073b0:	2301      	movs	r3, #1
 80073b2:	e000      	b.n	80073b6 <SD_PowerON+0xce>
 80073b4:	2300      	movs	r3, #0
 80073b6:	613b      	str	r3, [r7, #16]

    count++;
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	3301      	adds	r3, #1
 80073bc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d802      	bhi.n	80073ce <SD_PowerON+0xe6>
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d0cc      	beq.n	8007368 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d902      	bls.n	80073de <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80073d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80073dc:	e00c      	b.n	80073f8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d003      	beq.n	80073f0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2201      	movs	r2, #1
 80073ec:	645a      	str	r2, [r3, #68]	; 0x44
 80073ee:	e002      	b.n	80073f6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80073f6:	2300      	movs	r3, #0
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3718      	adds	r7, #24
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}
 8007400:	c1100000 	.word	0xc1100000

08007404 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d102      	bne.n	800741a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007414:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007418:	e018      	b.n	800744c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007422:	041b      	lsls	r3, r3, #16
 8007424:	4619      	mov	r1, r3
 8007426:	4610      	mov	r0, r2
 8007428:	f002 fbd6 	bl	8009bd8 <SDMMC_CmdSendStatus>
 800742c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d001      	beq.n	8007438 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	e009      	b.n	800744c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	2100      	movs	r1, #0
 800743e:	4618      	mov	r0, r3
 8007440:	f002 f979 	bl	8009736 <SDIO_GetResponse>
 8007444:	4602      	mov	r2, r0
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800744a:	2300      	movs	r3, #0
}
 800744c:	4618      	mov	r0, r3
 800744e:	3710      	adds	r7, #16
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b086      	sub	sp, #24
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800745c:	2300      	movs	r3, #0
 800745e:	60fb      	str	r3, [r7, #12]
 8007460:	2300      	movs	r3, #0
 8007462:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	2100      	movs	r1, #0
 800746a:	4618      	mov	r0, r3
 800746c:	f002 f963 	bl	8009736 <SDIO_GetResponse>
 8007470:	4603      	mov	r3, r0
 8007472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007476:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800747a:	d102      	bne.n	8007482 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800747c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007480:	e02f      	b.n	80074e2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007482:	f107 030c 	add.w	r3, r7, #12
 8007486:	4619      	mov	r1, r3
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 f879 	bl	8007580 <SD_FindSCR>
 800748e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d001      	beq.n	800749a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	e023      	b.n	80074e2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d01c      	beq.n	80074de <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074ac:	041b      	lsls	r3, r3, #16
 80074ae:	4619      	mov	r1, r3
 80074b0:	4610      	mov	r0, r2
 80074b2:	f002 faab 	bl	8009a0c <SDMMC_CmdAppCommand>
 80074b6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d001      	beq.n	80074c2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	e00f      	b.n	80074e2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	2102      	movs	r1, #2
 80074c8:	4618      	mov	r0, r3
 80074ca:	f002 fae4 	bl	8009a96 <SDMMC_CmdBusWidth>
 80074ce:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d001      	beq.n	80074da <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	e003      	b.n	80074e2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80074da:	2300      	movs	r3, #0
 80074dc:	e001      	b.n	80074e2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80074de:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3718      	adds	r7, #24
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}

080074ea <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80074ea:	b580      	push	{r7, lr}
 80074ec:	b086      	sub	sp, #24
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80074f2:	2300      	movs	r3, #0
 80074f4:	60fb      	str	r3, [r7, #12]
 80074f6:	2300      	movs	r3, #0
 80074f8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	2100      	movs	r1, #0
 8007500:	4618      	mov	r0, r3
 8007502:	f002 f918 	bl	8009736 <SDIO_GetResponse>
 8007506:	4603      	mov	r3, r0
 8007508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800750c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007510:	d102      	bne.n	8007518 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007512:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007516:	e02f      	b.n	8007578 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007518:	f107 030c 	add.w	r3, r7, #12
 800751c:	4619      	mov	r1, r3
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 f82e 	bl	8007580 <SD_FindSCR>
 8007524:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d001      	beq.n	8007530 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	e023      	b.n	8007578 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007536:	2b00      	cmp	r3, #0
 8007538:	d01c      	beq.n	8007574 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007542:	041b      	lsls	r3, r3, #16
 8007544:	4619      	mov	r1, r3
 8007546:	4610      	mov	r0, r2
 8007548:	f002 fa60 	bl	8009a0c <SDMMC_CmdAppCommand>
 800754c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d001      	beq.n	8007558 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	e00f      	b.n	8007578 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	2100      	movs	r1, #0
 800755e:	4618      	mov	r0, r3
 8007560:	f002 fa99 	bl	8009a96 <SDMMC_CmdBusWidth>
 8007564:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d001      	beq.n	8007570 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	e003      	b.n	8007578 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007570:	2300      	movs	r3, #0
 8007572:	e001      	b.n	8007578 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007574:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007578:	4618      	mov	r0, r3
 800757a:	3718      	adds	r7, #24
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007580:	b590      	push	{r4, r7, lr}
 8007582:	b08f      	sub	sp, #60	; 0x3c
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800758a:	f7fb fd45 	bl	8003018 <HAL_GetTick>
 800758e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007590:	2300      	movs	r3, #0
 8007592:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8007594:	2300      	movs	r3, #0
 8007596:	60bb      	str	r3, [r7, #8]
 8007598:	2300      	movs	r3, #0
 800759a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	2108      	movs	r1, #8
 80075a6:	4618      	mov	r0, r3
 80075a8:	f002 f904 	bl	80097b4 <SDMMC_CmdBlockLength>
 80075ac:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80075ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d001      	beq.n	80075b8 <SD_FindSCR+0x38>
  {
    return errorstate;
 80075b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b6:	e0a9      	b.n	800770c <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075c0:	041b      	lsls	r3, r3, #16
 80075c2:	4619      	mov	r1, r3
 80075c4:	4610      	mov	r0, r2
 80075c6:	f002 fa21 	bl	8009a0c <SDMMC_CmdAppCommand>
 80075ca:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80075cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d001      	beq.n	80075d6 <SD_FindSCR+0x56>
  {
    return errorstate;
 80075d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d4:	e09a      	b.n	800770c <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80075d6:	f04f 33ff 	mov.w	r3, #4294967295
 80075da:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80075dc:	2308      	movs	r3, #8
 80075de:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80075e0:	2330      	movs	r3, #48	; 0x30
 80075e2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80075e4:	2302      	movs	r3, #2
 80075e6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80075e8:	2300      	movs	r3, #0
 80075ea:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80075ec:	2301      	movs	r3, #1
 80075ee:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f107 0210 	add.w	r2, r7, #16
 80075f8:	4611      	mov	r1, r2
 80075fa:	4618      	mov	r0, r3
 80075fc:	f002 f8ae 	bl	800975c <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4618      	mov	r0, r3
 8007606:	f002 fa68 	bl	8009ada <SDMMC_CmdSendSCR>
 800760a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800760c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800760e:	2b00      	cmp	r3, #0
 8007610:	d022      	beq.n	8007658 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8007612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007614:	e07a      	b.n	800770c <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800761c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007620:	2b00      	cmp	r3, #0
 8007622:	d00e      	beq.n	8007642 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6819      	ldr	r1, [r3, #0]
 8007628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800762a:	009b      	lsls	r3, r3, #2
 800762c:	f107 0208 	add.w	r2, r7, #8
 8007630:	18d4      	adds	r4, r2, r3
 8007632:	4608      	mov	r0, r1
 8007634:	f002 f80d 	bl	8009652 <SDIO_ReadFIFO>
 8007638:	4603      	mov	r3, r0
 800763a:	6023      	str	r3, [r4, #0]
      index++;
 800763c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800763e:	3301      	adds	r3, #1
 8007640:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007642:	f7fb fce9 	bl	8003018 <HAL_GetTick>
 8007646:	4602      	mov	r2, r0
 8007648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800764a:	1ad3      	subs	r3, r2, r3
 800764c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007650:	d102      	bne.n	8007658 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007652:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007656:	e059      	b.n	800770c <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800765e:	f240 432a 	movw	r3, #1066	; 0x42a
 8007662:	4013      	ands	r3, r2
 8007664:	2b00      	cmp	r3, #0
 8007666:	d0d6      	beq.n	8007616 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800766e:	f003 0308 	and.w	r3, r3, #8
 8007672:	2b00      	cmp	r3, #0
 8007674:	d005      	beq.n	8007682 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	2208      	movs	r2, #8
 800767c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800767e:	2308      	movs	r3, #8
 8007680:	e044      	b.n	800770c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007688:	f003 0302 	and.w	r3, r3, #2
 800768c:	2b00      	cmp	r3, #0
 800768e:	d005      	beq.n	800769c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2202      	movs	r2, #2
 8007696:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007698:	2302      	movs	r3, #2
 800769a:	e037      	b.n	800770c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076a2:	f003 0320 	and.w	r3, r3, #32
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d005      	beq.n	80076b6 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	2220      	movs	r2, #32
 80076b0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80076b2:	2320      	movs	r3, #32
 80076b4:	e02a      	b.n	800770c <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f240 523a 	movw	r2, #1338	; 0x53a
 80076be:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	061a      	lsls	r2, r3, #24
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	021b      	lsls	r3, r3, #8
 80076c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80076cc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	0a1b      	lsrs	r3, r3, #8
 80076d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80076d6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	0e1b      	lsrs	r3, r3, #24
 80076dc:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80076de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e0:	601a      	str	r2, [r3, #0]
    scr++;
 80076e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e4:	3304      	adds	r3, #4
 80076e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	061a      	lsls	r2, r3, #24
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	021b      	lsls	r3, r3, #8
 80076f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80076f4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	0a1b      	lsrs	r3, r3, #8
 80076fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80076fe:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	0e1b      	lsrs	r3, r3, #24
 8007704:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007708:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800770a:	2300      	movs	r3, #0
}
 800770c:	4618      	mov	r0, r3
 800770e:	373c      	adds	r7, #60	; 0x3c
 8007710:	46bd      	mov	sp, r7
 8007712:	bd90      	pop	{r4, r7, pc}

08007714 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b086      	sub	sp, #24
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007720:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007726:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d03f      	beq.n	80077ae <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800772e:	2300      	movs	r3, #0
 8007730:	617b      	str	r3, [r7, #20]
 8007732:	e033      	b.n	800779c <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4618      	mov	r0, r3
 800773a:	f001 ff8a 	bl	8009652 <SDIO_ReadFIFO>
 800773e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	b2da      	uxtb	r2, r3
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	3301      	adds	r3, #1
 800774c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	3b01      	subs	r3, #1
 8007752:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	0a1b      	lsrs	r3, r3, #8
 8007758:	b2da      	uxtb	r2, r3
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	3301      	adds	r3, #1
 8007762:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	3b01      	subs	r3, #1
 8007768:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	0c1b      	lsrs	r3, r3, #16
 800776e:	b2da      	uxtb	r2, r3
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	3301      	adds	r3, #1
 8007778:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	3b01      	subs	r3, #1
 800777e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	0e1b      	lsrs	r3, r3, #24
 8007784:	b2da      	uxtb	r2, r3
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	701a      	strb	r2, [r3, #0]
      tmp++;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	3301      	adds	r3, #1
 800778e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	3b01      	subs	r3, #1
 8007794:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	3301      	adds	r3, #1
 800779a:	617b      	str	r3, [r7, #20]
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	2b07      	cmp	r3, #7
 80077a0:	d9c8      	bls.n	8007734 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	68fa      	ldr	r2, [r7, #12]
 80077a6:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	693a      	ldr	r2, [r7, #16]
 80077ac:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80077ae:	bf00      	nop
 80077b0:	3718      	adds	r7, #24
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}

080077b6 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80077b6:	b580      	push	{r7, lr}
 80077b8:	b086      	sub	sp, #24
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6a1b      	ldr	r3, [r3, #32]
 80077c2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d043      	beq.n	8007858 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80077d0:	2300      	movs	r3, #0
 80077d2:	617b      	str	r3, [r7, #20]
 80077d4:	e037      	b.n	8007846 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	60bb      	str	r3, [r7, #8]
      tmp++;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	3301      	adds	r3, #1
 80077e0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	3b01      	subs	r3, #1
 80077e6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	021a      	lsls	r2, r3, #8
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	4313      	orrs	r3, r2
 80077f2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	3301      	adds	r3, #1
 80077f8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	3b01      	subs	r3, #1
 80077fe:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	041a      	lsls	r2, r3, #16
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	4313      	orrs	r3, r2
 800780a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	3301      	adds	r3, #1
 8007810:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	3b01      	subs	r3, #1
 8007816:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	061a      	lsls	r2, r3, #24
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	4313      	orrs	r3, r2
 8007822:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	3301      	adds	r3, #1
 8007828:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	3b01      	subs	r3, #1
 800782e:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f107 0208 	add.w	r2, r7, #8
 8007838:	4611      	mov	r1, r2
 800783a:	4618      	mov	r0, r3
 800783c:	f001 ff16 	bl	800966c <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	3301      	adds	r3, #1
 8007844:	617b      	str	r3, [r7, #20]
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	2b07      	cmp	r3, #7
 800784a:	d9c4      	bls.n	80077d6 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	68fa      	ldr	r2, [r7, #12]
 8007850:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	693a      	ldr	r2, [r7, #16]
 8007856:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8007858:	bf00      	nop
 800785a:	3718      	adds	r7, #24
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b082      	sub	sp, #8
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d101      	bne.n	8007872 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800786e:	2301      	movs	r3, #1
 8007870:	e056      	b.n	8007920 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800787e:	b2db      	uxtb	r3, r3
 8007880:	2b00      	cmp	r3, #0
 8007882:	d106      	bne.n	8007892 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2200      	movs	r2, #0
 8007888:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f7fb f95d 	bl	8002b4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2202      	movs	r2, #2
 8007896:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	681a      	ldr	r2, [r3, #0]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078a8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	685a      	ldr	r2, [r3, #4]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	689b      	ldr	r3, [r3, #8]
 80078b2:	431a      	orrs	r2, r3
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	68db      	ldr	r3, [r3, #12]
 80078b8:	431a      	orrs	r2, r3
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	691b      	ldr	r3, [r3, #16]
 80078be:	431a      	orrs	r2, r3
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	695b      	ldr	r3, [r3, #20]
 80078c4:	431a      	orrs	r2, r3
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	699b      	ldr	r3, [r3, #24]
 80078ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078ce:	431a      	orrs	r2, r3
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	69db      	ldr	r3, [r3, #28]
 80078d4:	431a      	orrs	r2, r3
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6a1b      	ldr	r3, [r3, #32]
 80078da:	ea42 0103 	orr.w	r1, r2, r3
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	430a      	orrs	r2, r1
 80078e8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	699b      	ldr	r3, [r3, #24]
 80078ee:	0c1b      	lsrs	r3, r3, #16
 80078f0:	f003 0104 	and.w	r1, r3, #4
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	430a      	orrs	r2, r1
 80078fe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	69da      	ldr	r2, [r3, #28]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800790e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2200      	movs	r2, #0
 8007914:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2201      	movs	r2, #1
 800791a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800791e:	2300      	movs	r3, #0
}
 8007920:	4618      	mov	r0, r3
 8007922:	3708      	adds	r7, #8
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}

08007928 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b088      	sub	sp, #32
 800792c:	af00      	add	r7, sp, #0
 800792e:	60f8      	str	r0, [r7, #12]
 8007930:	60b9      	str	r1, [r7, #8]
 8007932:	603b      	str	r3, [r7, #0]
 8007934:	4613      	mov	r3, r2
 8007936:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007938:	2300      	movs	r3, #0
 800793a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007942:	2b01      	cmp	r3, #1
 8007944:	d101      	bne.n	800794a <HAL_SPI_Transmit+0x22>
 8007946:	2302      	movs	r3, #2
 8007948:	e11e      	b.n	8007b88 <HAL_SPI_Transmit+0x260>
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2201      	movs	r2, #1
 800794e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007952:	f7fb fb61 	bl	8003018 <HAL_GetTick>
 8007956:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007958:	88fb      	ldrh	r3, [r7, #6]
 800795a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007962:	b2db      	uxtb	r3, r3
 8007964:	2b01      	cmp	r3, #1
 8007966:	d002      	beq.n	800796e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007968:	2302      	movs	r3, #2
 800796a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800796c:	e103      	b.n	8007b76 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d002      	beq.n	800797a <HAL_SPI_Transmit+0x52>
 8007974:	88fb      	ldrh	r3, [r7, #6]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d102      	bne.n	8007980 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800797a:	2301      	movs	r3, #1
 800797c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800797e:	e0fa      	b.n	8007b76 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2203      	movs	r2, #3
 8007984:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2200      	movs	r2, #0
 800798c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	68ba      	ldr	r2, [r7, #8]
 8007992:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	88fa      	ldrh	r2, [r7, #6]
 8007998:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	88fa      	ldrh	r2, [r7, #6]
 800799e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2200      	movs	r2, #0
 80079a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2200      	movs	r2, #0
 80079aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2200      	movs	r2, #0
 80079b0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2200      	movs	r2, #0
 80079b6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2200      	movs	r2, #0
 80079bc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079c6:	d107      	bne.n	80079d8 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80079d6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079e2:	2b40      	cmp	r3, #64	; 0x40
 80079e4:	d007      	beq.n	80079f6 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	68db      	ldr	r3, [r3, #12]
 80079fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079fe:	d14b      	bne.n	8007a98 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d002      	beq.n	8007a0e <HAL_SPI_Transmit+0xe6>
 8007a08:	8afb      	ldrh	r3, [r7, #22]
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d13e      	bne.n	8007a8c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a12:	881a      	ldrh	r2, [r3, #0]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a1e:	1c9a      	adds	r2, r3, #2
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	3b01      	subs	r3, #1
 8007a2c:	b29a      	uxth	r2, r3
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007a32:	e02b      	b.n	8007a8c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	f003 0302 	and.w	r3, r3, #2
 8007a3e:	2b02      	cmp	r3, #2
 8007a40:	d112      	bne.n	8007a68 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a46:	881a      	ldrh	r2, [r3, #0]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a52:	1c9a      	adds	r2, r3, #2
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	3b01      	subs	r3, #1
 8007a60:	b29a      	uxth	r2, r3
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	86da      	strh	r2, [r3, #54]	; 0x36
 8007a66:	e011      	b.n	8007a8c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a68:	f7fb fad6 	bl	8003018 <HAL_GetTick>
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	69bb      	ldr	r3, [r7, #24]
 8007a70:	1ad3      	subs	r3, r2, r3
 8007a72:	683a      	ldr	r2, [r7, #0]
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d803      	bhi.n	8007a80 <HAL_SPI_Transmit+0x158>
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a7e:	d102      	bne.n	8007a86 <HAL_SPI_Transmit+0x15e>
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d102      	bne.n	8007a8c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8007a86:	2303      	movs	r3, #3
 8007a88:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007a8a:	e074      	b.n	8007b76 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d1ce      	bne.n	8007a34 <HAL_SPI_Transmit+0x10c>
 8007a96:	e04c      	b.n	8007b32 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d002      	beq.n	8007aa6 <HAL_SPI_Transmit+0x17e>
 8007aa0:	8afb      	ldrh	r3, [r7, #22]
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d140      	bne.n	8007b28 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	330c      	adds	r3, #12
 8007ab0:	7812      	ldrb	r2, [r2, #0]
 8007ab2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ab8:	1c5a      	adds	r2, r3, #1
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	3b01      	subs	r3, #1
 8007ac6:	b29a      	uxth	r2, r3
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007acc:	e02c      	b.n	8007b28 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	f003 0302 	and.w	r3, r3, #2
 8007ad8:	2b02      	cmp	r3, #2
 8007ada:	d113      	bne.n	8007b04 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	330c      	adds	r3, #12
 8007ae6:	7812      	ldrb	r2, [r2, #0]
 8007ae8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aee:	1c5a      	adds	r2, r3, #1
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	3b01      	subs	r3, #1
 8007afc:	b29a      	uxth	r2, r3
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	86da      	strh	r2, [r3, #54]	; 0x36
 8007b02:	e011      	b.n	8007b28 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b04:	f7fb fa88 	bl	8003018 <HAL_GetTick>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	69bb      	ldr	r3, [r7, #24]
 8007b0c:	1ad3      	subs	r3, r2, r3
 8007b0e:	683a      	ldr	r2, [r7, #0]
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d803      	bhi.n	8007b1c <HAL_SPI_Transmit+0x1f4>
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b1a:	d102      	bne.n	8007b22 <HAL_SPI_Transmit+0x1fa>
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d102      	bne.n	8007b28 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8007b22:	2303      	movs	r3, #3
 8007b24:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007b26:	e026      	b.n	8007b76 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d1cd      	bne.n	8007ace <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b32:	69ba      	ldr	r2, [r7, #24]
 8007b34:	6839      	ldr	r1, [r7, #0]
 8007b36:	68f8      	ldr	r0, [r7, #12]
 8007b38:	f000 fa44 	bl	8007fc4 <SPI_EndRxTxTransaction>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d002      	beq.n	8007b48 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2220      	movs	r2, #32
 8007b46:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d10a      	bne.n	8007b66 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b50:	2300      	movs	r3, #0
 8007b52:	613b      	str	r3, [r7, #16]
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	68db      	ldr	r3, [r3, #12]
 8007b5a:	613b      	str	r3, [r7, #16]
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	613b      	str	r3, [r7, #16]
 8007b64:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d002      	beq.n	8007b74 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	77fb      	strb	r3, [r7, #31]
 8007b72:	e000      	b.n	8007b76 <HAL_SPI_Transmit+0x24e>
  }

error:
 8007b74:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2201      	movs	r2, #1
 8007b7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2200      	movs	r2, #0
 8007b82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007b86:	7ffb      	ldrb	r3, [r7, #31]
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3720      	adds	r7, #32
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b08c      	sub	sp, #48	; 0x30
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	60f8      	str	r0, [r7, #12]
 8007b98:	60b9      	str	r1, [r7, #8]
 8007b9a:	607a      	str	r2, [r7, #4]
 8007b9c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d101      	bne.n	8007bb6 <HAL_SPI_TransmitReceive+0x26>
 8007bb2:	2302      	movs	r3, #2
 8007bb4:	e18a      	b.n	8007ecc <HAL_SPI_TransmitReceive+0x33c>
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2201      	movs	r2, #1
 8007bba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007bbe:	f7fb fa2b 	bl	8003018 <HAL_GetTick>
 8007bc2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007bca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007bd4:	887b      	ldrh	r3, [r7, #2]
 8007bd6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007bd8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007bdc:	2b01      	cmp	r3, #1
 8007bde:	d00f      	beq.n	8007c00 <HAL_SPI_TransmitReceive+0x70>
 8007be0:	69fb      	ldr	r3, [r7, #28]
 8007be2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007be6:	d107      	bne.n	8007bf8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	689b      	ldr	r3, [r3, #8]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d103      	bne.n	8007bf8 <HAL_SPI_TransmitReceive+0x68>
 8007bf0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007bf4:	2b04      	cmp	r3, #4
 8007bf6:	d003      	beq.n	8007c00 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007bf8:	2302      	movs	r3, #2
 8007bfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007bfe:	e15b      	b.n	8007eb8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d005      	beq.n	8007c12 <HAL_SPI_TransmitReceive+0x82>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d002      	beq.n	8007c12 <HAL_SPI_TransmitReceive+0x82>
 8007c0c:	887b      	ldrh	r3, [r7, #2]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d103      	bne.n	8007c1a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007c12:	2301      	movs	r3, #1
 8007c14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007c18:	e14e      	b.n	8007eb8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c20:	b2db      	uxtb	r3, r3
 8007c22:	2b04      	cmp	r3, #4
 8007c24:	d003      	beq.n	8007c2e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2205      	movs	r2, #5
 8007c2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2200      	movs	r2, #0
 8007c32:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	887a      	ldrh	r2, [r7, #2]
 8007c3e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	887a      	ldrh	r2, [r7, #2]
 8007c44:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	68ba      	ldr	r2, [r7, #8]
 8007c4a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	887a      	ldrh	r2, [r7, #2]
 8007c50:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	887a      	ldrh	r2, [r7, #2]
 8007c56:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2200      	movs	r2, #0
 8007c62:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c6e:	2b40      	cmp	r3, #64	; 0x40
 8007c70:	d007      	beq.n	8007c82 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	681a      	ldr	r2, [r3, #0]
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c80:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	68db      	ldr	r3, [r3, #12]
 8007c86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c8a:	d178      	bne.n	8007d7e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d002      	beq.n	8007c9a <HAL_SPI_TransmitReceive+0x10a>
 8007c94:	8b7b      	ldrh	r3, [r7, #26]
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d166      	bne.n	8007d68 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c9e:	881a      	ldrh	r2, [r3, #0]
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007caa:	1c9a      	adds	r2, r3, #2
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	3b01      	subs	r3, #1
 8007cb8:	b29a      	uxth	r2, r3
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007cbe:	e053      	b.n	8007d68 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	689b      	ldr	r3, [r3, #8]
 8007cc6:	f003 0302 	and.w	r3, r3, #2
 8007cca:	2b02      	cmp	r3, #2
 8007ccc:	d11b      	bne.n	8007d06 <HAL_SPI_TransmitReceive+0x176>
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d016      	beq.n	8007d06 <HAL_SPI_TransmitReceive+0x176>
 8007cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	d113      	bne.n	8007d06 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ce2:	881a      	ldrh	r2, [r3, #0]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cee:	1c9a      	adds	r2, r3, #2
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	3b01      	subs	r3, #1
 8007cfc:	b29a      	uxth	r2, r3
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007d02:	2300      	movs	r3, #0
 8007d04:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	f003 0301 	and.w	r3, r3, #1
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d119      	bne.n	8007d48 <HAL_SPI_TransmitReceive+0x1b8>
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d014      	beq.n	8007d48 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	68da      	ldr	r2, [r3, #12]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d28:	b292      	uxth	r2, r2
 8007d2a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d30:	1c9a      	adds	r2, r3, #2
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	3b01      	subs	r3, #1
 8007d3e:	b29a      	uxth	r2, r3
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007d44:	2301      	movs	r3, #1
 8007d46:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007d48:	f7fb f966 	bl	8003018 <HAL_GetTick>
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d50:	1ad3      	subs	r3, r2, r3
 8007d52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d807      	bhi.n	8007d68 <HAL_SPI_TransmitReceive+0x1d8>
 8007d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d5e:	d003      	beq.n	8007d68 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007d60:	2303      	movs	r3, #3
 8007d62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007d66:	e0a7      	b.n	8007eb8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d1a6      	bne.n	8007cc0 <HAL_SPI_TransmitReceive+0x130>
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d1a1      	bne.n	8007cc0 <HAL_SPI_TransmitReceive+0x130>
 8007d7c:	e07c      	b.n	8007e78 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d002      	beq.n	8007d8c <HAL_SPI_TransmitReceive+0x1fc>
 8007d86:	8b7b      	ldrh	r3, [r7, #26]
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d16b      	bne.n	8007e64 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	330c      	adds	r3, #12
 8007d96:	7812      	ldrb	r2, [r2, #0]
 8007d98:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d9e:	1c5a      	adds	r2, r3, #1
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	3b01      	subs	r3, #1
 8007dac:	b29a      	uxth	r2, r3
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007db2:	e057      	b.n	8007e64 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	f003 0302 	and.w	r3, r3, #2
 8007dbe:	2b02      	cmp	r3, #2
 8007dc0:	d11c      	bne.n	8007dfc <HAL_SPI_TransmitReceive+0x26c>
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d017      	beq.n	8007dfc <HAL_SPI_TransmitReceive+0x26c>
 8007dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dce:	2b01      	cmp	r3, #1
 8007dd0:	d114      	bne.n	8007dfc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	330c      	adds	r3, #12
 8007ddc:	7812      	ldrb	r2, [r2, #0]
 8007dde:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007de4:	1c5a      	adds	r2, r3, #1
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	3b01      	subs	r3, #1
 8007df2:	b29a      	uxth	r2, r3
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	f003 0301 	and.w	r3, r3, #1
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	d119      	bne.n	8007e3e <HAL_SPI_TransmitReceive+0x2ae>
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d014      	beq.n	8007e3e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	68da      	ldr	r2, [r3, #12]
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e1e:	b2d2      	uxtb	r2, r2
 8007e20:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e26:	1c5a      	adds	r2, r3, #1
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e30:	b29b      	uxth	r3, r3
 8007e32:	3b01      	subs	r3, #1
 8007e34:	b29a      	uxth	r2, r3
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007e3e:	f7fb f8eb 	bl	8003018 <HAL_GetTick>
 8007e42:	4602      	mov	r2, r0
 8007e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e46:	1ad3      	subs	r3, r2, r3
 8007e48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	d803      	bhi.n	8007e56 <HAL_SPI_TransmitReceive+0x2c6>
 8007e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e54:	d102      	bne.n	8007e5c <HAL_SPI_TransmitReceive+0x2cc>
 8007e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d103      	bne.n	8007e64 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007e5c:	2303      	movs	r3, #3
 8007e5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007e62:	e029      	b.n	8007eb8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e68:	b29b      	uxth	r3, r3
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d1a2      	bne.n	8007db4 <HAL_SPI_TransmitReceive+0x224>
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d19d      	bne.n	8007db4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e7a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007e7c:	68f8      	ldr	r0, [r7, #12]
 8007e7e:	f000 f8a1 	bl	8007fc4 <SPI_EndRxTxTransaction>
 8007e82:	4603      	mov	r3, r0
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d006      	beq.n	8007e96 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2220      	movs	r2, #32
 8007e92:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007e94:	e010      	b.n	8007eb8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d10b      	bne.n	8007eb6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	617b      	str	r3, [r7, #20]
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	68db      	ldr	r3, [r3, #12]
 8007ea8:	617b      	str	r3, [r7, #20]
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	689b      	ldr	r3, [r3, #8]
 8007eb0:	617b      	str	r3, [r7, #20]
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	e000      	b.n	8007eb8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007eb6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2201      	movs	r2, #1
 8007ebc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007ec8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3730      	adds	r7, #48	; 0x30
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007ee2:	b2db      	uxtb	r3, r3
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	370c      	adds	r7, #12
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr

08007ef0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b084      	sub	sp, #16
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	60f8      	str	r0, [r7, #12]
 8007ef8:	60b9      	str	r1, [r7, #8]
 8007efa:	603b      	str	r3, [r7, #0]
 8007efc:	4613      	mov	r3, r2
 8007efe:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f00:	e04c      	b.n	8007f9c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f08:	d048      	beq.n	8007f9c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007f0a:	f7fb f885 	bl	8003018 <HAL_GetTick>
 8007f0e:	4602      	mov	r2, r0
 8007f10:	69bb      	ldr	r3, [r7, #24]
 8007f12:	1ad3      	subs	r3, r2, r3
 8007f14:	683a      	ldr	r2, [r7, #0]
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d902      	bls.n	8007f20 <SPI_WaitFlagStateUntilTimeout+0x30>
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d13d      	bne.n	8007f9c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	685a      	ldr	r2, [r3, #4]
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007f2e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f38:	d111      	bne.n	8007f5e <SPI_WaitFlagStateUntilTimeout+0x6e>
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	689b      	ldr	r3, [r3, #8]
 8007f3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f42:	d004      	beq.n	8007f4e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	689b      	ldr	r3, [r3, #8]
 8007f48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f4c:	d107      	bne.n	8007f5e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	681a      	ldr	r2, [r3, #0]
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f5c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f66:	d10f      	bne.n	8007f88 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f76:	601a      	str	r2, [r3, #0]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	681a      	ldr	r2, [r3, #0]
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f86:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2200      	movs	r2, #0
 8007f94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007f98:	2303      	movs	r3, #3
 8007f9a:	e00f      	b.n	8007fbc <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	689a      	ldr	r2, [r3, #8]
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	4013      	ands	r3, r2
 8007fa6:	68ba      	ldr	r2, [r7, #8]
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	bf0c      	ite	eq
 8007fac:	2301      	moveq	r3, #1
 8007fae:	2300      	movne	r3, #0
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	79fb      	ldrb	r3, [r7, #7]
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d1a3      	bne.n	8007f02 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007fba:	2300      	movs	r3, #0
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3710      	adds	r7, #16
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b088      	sub	sp, #32
 8007fc8:	af02      	add	r7, sp, #8
 8007fca:	60f8      	str	r0, [r7, #12]
 8007fcc:	60b9      	str	r1, [r7, #8]
 8007fce:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007fd0:	4b1b      	ldr	r3, [pc, #108]	; (8008040 <SPI_EndRxTxTransaction+0x7c>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a1b      	ldr	r2, [pc, #108]	; (8008044 <SPI_EndRxTxTransaction+0x80>)
 8007fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8007fda:	0d5b      	lsrs	r3, r3, #21
 8007fdc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007fe0:	fb02 f303 	mul.w	r3, r2, r3
 8007fe4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007fee:	d112      	bne.n	8008016 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	9300      	str	r3, [sp, #0]
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	2180      	movs	r1, #128	; 0x80
 8007ffa:	68f8      	ldr	r0, [r7, #12]
 8007ffc:	f7ff ff78 	bl	8007ef0 <SPI_WaitFlagStateUntilTimeout>
 8008000:	4603      	mov	r3, r0
 8008002:	2b00      	cmp	r3, #0
 8008004:	d016      	beq.n	8008034 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800800a:	f043 0220 	orr.w	r2, r3, #32
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008012:	2303      	movs	r3, #3
 8008014:	e00f      	b.n	8008036 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d00a      	beq.n	8008032 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	3b01      	subs	r3, #1
 8008020:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	689b      	ldr	r3, [r3, #8]
 8008028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800802c:	2b80      	cmp	r3, #128	; 0x80
 800802e:	d0f2      	beq.n	8008016 <SPI_EndRxTxTransaction+0x52>
 8008030:	e000      	b.n	8008034 <SPI_EndRxTxTransaction+0x70>
        break;
 8008032:	bf00      	nop
  }

  return HAL_OK;
 8008034:	2300      	movs	r3, #0
}
 8008036:	4618      	mov	r0, r3
 8008038:	3718      	adds	r7, #24
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
 800803e:	bf00      	nop
 8008040:	20000008 	.word	0x20000008
 8008044:	165e9f81 	.word	0x165e9f81

08008048 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b082      	sub	sp, #8
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d101      	bne.n	800805a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008056:	2301      	movs	r3, #1
 8008058:	e01d      	b.n	8008096 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008060:	b2db      	uxtb	r3, r3
 8008062:	2b00      	cmp	r3, #0
 8008064:	d106      	bne.n	8008074 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2200      	movs	r2, #0
 800806a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f7fa fdb4 	bl	8002bdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2202      	movs	r2, #2
 8008078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681a      	ldr	r2, [r3, #0]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	3304      	adds	r3, #4
 8008084:	4619      	mov	r1, r3
 8008086:	4610      	mov	r0, r2
 8008088:	f000 fb4e 	bl	8008728 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2201      	movs	r2, #1
 8008090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008094:	2300      	movs	r3, #0
}
 8008096:	4618      	mov	r0, r3
 8008098:	3708      	adds	r7, #8
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}

0800809e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800809e:	b480      	push	{r7}
 80080a0:	b085      	sub	sp, #20
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	68da      	ldr	r2, [r3, #12]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f042 0201 	orr.w	r2, r2, #1
 80080b4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	f003 0307 	and.w	r3, r3, #7
 80080c0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	2b06      	cmp	r3, #6
 80080c6:	d007      	beq.n	80080d8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	681a      	ldr	r2, [r3, #0]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f042 0201 	orr.w	r2, r2, #1
 80080d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80080d8:	2300      	movs	r3, #0
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3714      	adds	r7, #20
 80080de:	46bd      	mov	sp, r7
 80080e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e4:	4770      	bx	lr

080080e6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80080e6:	b580      	push	{r7, lr}
 80080e8:	b082      	sub	sp, #8
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d101      	bne.n	80080f8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80080f4:	2301      	movs	r3, #1
 80080f6:	e01d      	b.n	8008134 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080fe:	b2db      	uxtb	r3, r3
 8008100:	2b00      	cmp	r3, #0
 8008102:	d106      	bne.n	8008112 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2200      	movs	r2, #0
 8008108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f000 f815 	bl	800813c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2202      	movs	r2, #2
 8008116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	3304      	adds	r3, #4
 8008122:	4619      	mov	r1, r3
 8008124:	4610      	mov	r0, r2
 8008126:	f000 faff 	bl	8008728 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2201      	movs	r2, #1
 800812e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008132:	2300      	movs	r3, #0
}
 8008134:	4618      	mov	r0, r3
 8008136:	3708      	adds	r7, #8
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}

0800813c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800813c:	b480      	push	{r7}
 800813e:	b083      	sub	sp, #12
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008144:	bf00      	nop
 8008146:	370c      	adds	r7, #12
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr

08008150 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b084      	sub	sp, #16
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	2201      	movs	r2, #1
 8008160:	6839      	ldr	r1, [r7, #0]
 8008162:	4618      	mov	r0, r3
 8008164:	f000 fdca 	bl	8008cfc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a15      	ldr	r2, [pc, #84]	; (80081c4 <HAL_TIM_PWM_Start+0x74>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d004      	beq.n	800817c <HAL_TIM_PWM_Start+0x2c>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a14      	ldr	r2, [pc, #80]	; (80081c8 <HAL_TIM_PWM_Start+0x78>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d101      	bne.n	8008180 <HAL_TIM_PWM_Start+0x30>
 800817c:	2301      	movs	r3, #1
 800817e:	e000      	b.n	8008182 <HAL_TIM_PWM_Start+0x32>
 8008180:	2300      	movs	r3, #0
 8008182:	2b00      	cmp	r3, #0
 8008184:	d007      	beq.n	8008196 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008194:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	f003 0307 	and.w	r3, r3, #7
 80081a0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2b06      	cmp	r3, #6
 80081a6:	d007      	beq.n	80081b8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	681a      	ldr	r2, [r3, #0]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f042 0201 	orr.w	r2, r2, #1
 80081b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80081b8:	2300      	movs	r3, #0
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3710      	adds	r7, #16
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
 80081c2:	bf00      	nop
 80081c4:	40010000 	.word	0x40010000
 80081c8:	40010400 	.word	0x40010400

080081cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b082      	sub	sp, #8
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	691b      	ldr	r3, [r3, #16]
 80081da:	f003 0302 	and.w	r3, r3, #2
 80081de:	2b02      	cmp	r3, #2
 80081e0:	d122      	bne.n	8008228 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	68db      	ldr	r3, [r3, #12]
 80081e8:	f003 0302 	and.w	r3, r3, #2
 80081ec:	2b02      	cmp	r3, #2
 80081ee:	d11b      	bne.n	8008228 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f06f 0202 	mvn.w	r2, #2
 80081f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2201      	movs	r2, #1
 80081fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	699b      	ldr	r3, [r3, #24]
 8008206:	f003 0303 	and.w	r3, r3, #3
 800820a:	2b00      	cmp	r3, #0
 800820c:	d003      	beq.n	8008216 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f000 fa6b 	bl	80086ea <HAL_TIM_IC_CaptureCallback>
 8008214:	e005      	b.n	8008222 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 fa5d 	bl	80086d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f000 fa6e 	bl	80086fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	691b      	ldr	r3, [r3, #16]
 800822e:	f003 0304 	and.w	r3, r3, #4
 8008232:	2b04      	cmp	r3, #4
 8008234:	d122      	bne.n	800827c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	68db      	ldr	r3, [r3, #12]
 800823c:	f003 0304 	and.w	r3, r3, #4
 8008240:	2b04      	cmp	r3, #4
 8008242:	d11b      	bne.n	800827c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f06f 0204 	mvn.w	r2, #4
 800824c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2202      	movs	r2, #2
 8008252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	699b      	ldr	r3, [r3, #24]
 800825a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800825e:	2b00      	cmp	r3, #0
 8008260:	d003      	beq.n	800826a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 fa41 	bl	80086ea <HAL_TIM_IC_CaptureCallback>
 8008268:	e005      	b.n	8008276 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 fa33 	bl	80086d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 fa44 	bl	80086fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2200      	movs	r2, #0
 800827a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	691b      	ldr	r3, [r3, #16]
 8008282:	f003 0308 	and.w	r3, r3, #8
 8008286:	2b08      	cmp	r3, #8
 8008288:	d122      	bne.n	80082d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	68db      	ldr	r3, [r3, #12]
 8008290:	f003 0308 	and.w	r3, r3, #8
 8008294:	2b08      	cmp	r3, #8
 8008296:	d11b      	bne.n	80082d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f06f 0208 	mvn.w	r2, #8
 80082a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2204      	movs	r2, #4
 80082a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	69db      	ldr	r3, [r3, #28]
 80082ae:	f003 0303 	and.w	r3, r3, #3
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d003      	beq.n	80082be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 fa17 	bl	80086ea <HAL_TIM_IC_CaptureCallback>
 80082bc:	e005      	b.n	80082ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 fa09 	bl	80086d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f000 fa1a 	bl	80086fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2200      	movs	r2, #0
 80082ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	691b      	ldr	r3, [r3, #16]
 80082d6:	f003 0310 	and.w	r3, r3, #16
 80082da:	2b10      	cmp	r3, #16
 80082dc:	d122      	bne.n	8008324 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	68db      	ldr	r3, [r3, #12]
 80082e4:	f003 0310 	and.w	r3, r3, #16
 80082e8:	2b10      	cmp	r3, #16
 80082ea:	d11b      	bne.n	8008324 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f06f 0210 	mvn.w	r2, #16
 80082f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2208      	movs	r2, #8
 80082fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	69db      	ldr	r3, [r3, #28]
 8008302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008306:	2b00      	cmp	r3, #0
 8008308:	d003      	beq.n	8008312 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 f9ed 	bl	80086ea <HAL_TIM_IC_CaptureCallback>
 8008310:	e005      	b.n	800831e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f000 f9df 	bl	80086d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f000 f9f0 	bl	80086fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2200      	movs	r2, #0
 8008322:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	691b      	ldr	r3, [r3, #16]
 800832a:	f003 0301 	and.w	r3, r3, #1
 800832e:	2b01      	cmp	r3, #1
 8008330:	d10e      	bne.n	8008350 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	68db      	ldr	r3, [r3, #12]
 8008338:	f003 0301 	and.w	r3, r3, #1
 800833c:	2b01      	cmp	r3, #1
 800833e:	d107      	bne.n	8008350 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f06f 0201 	mvn.w	r2, #1
 8008348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f7fa fa5e 	bl	800280c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	691b      	ldr	r3, [r3, #16]
 8008356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800835a:	2b80      	cmp	r3, #128	; 0x80
 800835c:	d10e      	bne.n	800837c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	68db      	ldr	r3, [r3, #12]
 8008364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008368:	2b80      	cmp	r3, #128	; 0x80
 800836a:	d107      	bne.n	800837c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f000 fd6c 	bl	8008e54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	691b      	ldr	r3, [r3, #16]
 8008382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008386:	2b40      	cmp	r3, #64	; 0x40
 8008388:	d10e      	bne.n	80083a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	68db      	ldr	r3, [r3, #12]
 8008390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008394:	2b40      	cmp	r3, #64	; 0x40
 8008396:	d107      	bne.n	80083a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80083a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 f9b5 	bl	8008712 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	691b      	ldr	r3, [r3, #16]
 80083ae:	f003 0320 	and.w	r3, r3, #32
 80083b2:	2b20      	cmp	r3, #32
 80083b4:	d10e      	bne.n	80083d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	68db      	ldr	r3, [r3, #12]
 80083bc:	f003 0320 	and.w	r3, r3, #32
 80083c0:	2b20      	cmp	r3, #32
 80083c2:	d107      	bne.n	80083d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f06f 0220 	mvn.w	r2, #32
 80083cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 fd36 	bl	8008e40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80083d4:	bf00      	nop
 80083d6:	3708      	adds	r7, #8
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b084      	sub	sp, #16
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	60f8      	str	r0, [r7, #12]
 80083e4:	60b9      	str	r1, [r7, #8]
 80083e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083ee:	2b01      	cmp	r3, #1
 80083f0:	d101      	bne.n	80083f6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80083f2:	2302      	movs	r3, #2
 80083f4:	e0b4      	b.n	8008560 <HAL_TIM_PWM_ConfigChannel+0x184>
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	2201      	movs	r2, #1
 80083fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2202      	movs	r2, #2
 8008402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2b0c      	cmp	r3, #12
 800840a:	f200 809f 	bhi.w	800854c <HAL_TIM_PWM_ConfigChannel+0x170>
 800840e:	a201      	add	r2, pc, #4	; (adr r2, 8008414 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8008410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008414:	08008449 	.word	0x08008449
 8008418:	0800854d 	.word	0x0800854d
 800841c:	0800854d 	.word	0x0800854d
 8008420:	0800854d 	.word	0x0800854d
 8008424:	08008489 	.word	0x08008489
 8008428:	0800854d 	.word	0x0800854d
 800842c:	0800854d 	.word	0x0800854d
 8008430:	0800854d 	.word	0x0800854d
 8008434:	080084cb 	.word	0x080084cb
 8008438:	0800854d 	.word	0x0800854d
 800843c:	0800854d 	.word	0x0800854d
 8008440:	0800854d 	.word	0x0800854d
 8008444:	0800850b 	.word	0x0800850b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	68b9      	ldr	r1, [r7, #8]
 800844e:	4618      	mov	r0, r3
 8008450:	f000 fa0a 	bl	8008868 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	699a      	ldr	r2, [r3, #24]
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f042 0208 	orr.w	r2, r2, #8
 8008462:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	699a      	ldr	r2, [r3, #24]
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f022 0204 	bic.w	r2, r2, #4
 8008472:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	6999      	ldr	r1, [r3, #24]
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	691a      	ldr	r2, [r3, #16]
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	430a      	orrs	r2, r1
 8008484:	619a      	str	r2, [r3, #24]
      break;
 8008486:	e062      	b.n	800854e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	68b9      	ldr	r1, [r7, #8]
 800848e:	4618      	mov	r0, r3
 8008490:	f000 fa5a 	bl	8008948 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	699a      	ldr	r2, [r3, #24]
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	699a      	ldr	r2, [r3, #24]
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	6999      	ldr	r1, [r3, #24]
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	691b      	ldr	r3, [r3, #16]
 80084be:	021a      	lsls	r2, r3, #8
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	430a      	orrs	r2, r1
 80084c6:	619a      	str	r2, [r3, #24]
      break;
 80084c8:	e041      	b.n	800854e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	68b9      	ldr	r1, [r7, #8]
 80084d0:	4618      	mov	r0, r3
 80084d2:	f000 faaf 	bl	8008a34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	69da      	ldr	r2, [r3, #28]
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f042 0208 	orr.w	r2, r2, #8
 80084e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	69da      	ldr	r2, [r3, #28]
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f022 0204 	bic.w	r2, r2, #4
 80084f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	69d9      	ldr	r1, [r3, #28]
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	691a      	ldr	r2, [r3, #16]
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	430a      	orrs	r2, r1
 8008506:	61da      	str	r2, [r3, #28]
      break;
 8008508:	e021      	b.n	800854e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	68b9      	ldr	r1, [r7, #8]
 8008510:	4618      	mov	r0, r3
 8008512:	f000 fb03 	bl	8008b1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	69da      	ldr	r2, [r3, #28]
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008524:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	69da      	ldr	r2, [r3, #28]
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008534:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	69d9      	ldr	r1, [r3, #28]
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	691b      	ldr	r3, [r3, #16]
 8008540:	021a      	lsls	r2, r3, #8
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	430a      	orrs	r2, r1
 8008548:	61da      	str	r2, [r3, #28]
      break;
 800854a:	e000      	b.n	800854e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800854c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2201      	movs	r2, #1
 8008552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2200      	movs	r2, #0
 800855a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800855e:	2300      	movs	r3, #0
}
 8008560:	4618      	mov	r0, r3
 8008562:	3710      	adds	r7, #16
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}

08008568 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b084      	sub	sp, #16
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008578:	2b01      	cmp	r3, #1
 800857a:	d101      	bne.n	8008580 <HAL_TIM_ConfigClockSource+0x18>
 800857c:	2302      	movs	r3, #2
 800857e:	e0a6      	b.n	80086ce <HAL_TIM_ConfigClockSource+0x166>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2201      	movs	r2, #1
 8008584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2202      	movs	r2, #2
 800858c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	689b      	ldr	r3, [r3, #8]
 8008596:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800859e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80085a6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	68fa      	ldr	r2, [r7, #12]
 80085ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	2b40      	cmp	r3, #64	; 0x40
 80085b6:	d067      	beq.n	8008688 <HAL_TIM_ConfigClockSource+0x120>
 80085b8:	2b40      	cmp	r3, #64	; 0x40
 80085ba:	d80b      	bhi.n	80085d4 <HAL_TIM_ConfigClockSource+0x6c>
 80085bc:	2b10      	cmp	r3, #16
 80085be:	d073      	beq.n	80086a8 <HAL_TIM_ConfigClockSource+0x140>
 80085c0:	2b10      	cmp	r3, #16
 80085c2:	d802      	bhi.n	80085ca <HAL_TIM_ConfigClockSource+0x62>
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d06f      	beq.n	80086a8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80085c8:	e078      	b.n	80086bc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80085ca:	2b20      	cmp	r3, #32
 80085cc:	d06c      	beq.n	80086a8 <HAL_TIM_ConfigClockSource+0x140>
 80085ce:	2b30      	cmp	r3, #48	; 0x30
 80085d0:	d06a      	beq.n	80086a8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80085d2:	e073      	b.n	80086bc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80085d4:	2b70      	cmp	r3, #112	; 0x70
 80085d6:	d00d      	beq.n	80085f4 <HAL_TIM_ConfigClockSource+0x8c>
 80085d8:	2b70      	cmp	r3, #112	; 0x70
 80085da:	d804      	bhi.n	80085e6 <HAL_TIM_ConfigClockSource+0x7e>
 80085dc:	2b50      	cmp	r3, #80	; 0x50
 80085de:	d033      	beq.n	8008648 <HAL_TIM_ConfigClockSource+0xe0>
 80085e0:	2b60      	cmp	r3, #96	; 0x60
 80085e2:	d041      	beq.n	8008668 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80085e4:	e06a      	b.n	80086bc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80085e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085ea:	d066      	beq.n	80086ba <HAL_TIM_ConfigClockSource+0x152>
 80085ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085f0:	d017      	beq.n	8008622 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80085f2:	e063      	b.n	80086bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6818      	ldr	r0, [r3, #0]
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	6899      	ldr	r1, [r3, #8]
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	685a      	ldr	r2, [r3, #4]
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	68db      	ldr	r3, [r3, #12]
 8008604:	f000 fb5a 	bl	8008cbc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	689b      	ldr	r3, [r3, #8]
 800860e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008616:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	68fa      	ldr	r2, [r7, #12]
 800861e:	609a      	str	r2, [r3, #8]
      break;
 8008620:	e04c      	b.n	80086bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6818      	ldr	r0, [r3, #0]
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	6899      	ldr	r1, [r3, #8]
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	685a      	ldr	r2, [r3, #4]
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	68db      	ldr	r3, [r3, #12]
 8008632:	f000 fb43 	bl	8008cbc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	689a      	ldr	r2, [r3, #8]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008644:	609a      	str	r2, [r3, #8]
      break;
 8008646:	e039      	b.n	80086bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6818      	ldr	r0, [r3, #0]
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	6859      	ldr	r1, [r3, #4]
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	68db      	ldr	r3, [r3, #12]
 8008654:	461a      	mov	r2, r3
 8008656:	f000 fab7 	bl	8008bc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	2150      	movs	r1, #80	; 0x50
 8008660:	4618      	mov	r0, r3
 8008662:	f000 fb10 	bl	8008c86 <TIM_ITRx_SetConfig>
      break;
 8008666:	e029      	b.n	80086bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6818      	ldr	r0, [r3, #0]
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	6859      	ldr	r1, [r3, #4]
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	68db      	ldr	r3, [r3, #12]
 8008674:	461a      	mov	r2, r3
 8008676:	f000 fad6 	bl	8008c26 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	2160      	movs	r1, #96	; 0x60
 8008680:	4618      	mov	r0, r3
 8008682:	f000 fb00 	bl	8008c86 <TIM_ITRx_SetConfig>
      break;
 8008686:	e019      	b.n	80086bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6818      	ldr	r0, [r3, #0]
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	6859      	ldr	r1, [r3, #4]
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	68db      	ldr	r3, [r3, #12]
 8008694:	461a      	mov	r2, r3
 8008696:	f000 fa97 	bl	8008bc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	2140      	movs	r1, #64	; 0x40
 80086a0:	4618      	mov	r0, r3
 80086a2:	f000 faf0 	bl	8008c86 <TIM_ITRx_SetConfig>
      break;
 80086a6:	e009      	b.n	80086bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681a      	ldr	r2, [r3, #0]
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4619      	mov	r1, r3
 80086b2:	4610      	mov	r0, r2
 80086b4:	f000 fae7 	bl	8008c86 <TIM_ITRx_SetConfig>
      break;
 80086b8:	e000      	b.n	80086bc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80086ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2201      	movs	r2, #1
 80086c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2200      	movs	r2, #0
 80086c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80086cc:	2300      	movs	r3, #0
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3710      	adds	r7, #16
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}

080086d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80086d6:	b480      	push	{r7}
 80086d8:	b083      	sub	sp, #12
 80086da:	af00      	add	r7, sp, #0
 80086dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80086de:	bf00      	nop
 80086e0:	370c      	adds	r7, #12
 80086e2:	46bd      	mov	sp, r7
 80086e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e8:	4770      	bx	lr

080086ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80086ea:	b480      	push	{r7}
 80086ec:	b083      	sub	sp, #12
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80086f2:	bf00      	nop
 80086f4:	370c      	adds	r7, #12
 80086f6:	46bd      	mov	sp, r7
 80086f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fc:	4770      	bx	lr

080086fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80086fe:	b480      	push	{r7}
 8008700:	b083      	sub	sp, #12
 8008702:	af00      	add	r7, sp, #0
 8008704:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008706:	bf00      	nop
 8008708:	370c      	adds	r7, #12
 800870a:	46bd      	mov	sp, r7
 800870c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008710:	4770      	bx	lr

08008712 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008712:	b480      	push	{r7}
 8008714:	b083      	sub	sp, #12
 8008716:	af00      	add	r7, sp, #0
 8008718:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800871a:	bf00      	nop
 800871c:	370c      	adds	r7, #12
 800871e:	46bd      	mov	sp, r7
 8008720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008724:	4770      	bx	lr
	...

08008728 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008728:	b480      	push	{r7}
 800872a:	b085      	sub	sp, #20
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	4a40      	ldr	r2, [pc, #256]	; (800883c <TIM_Base_SetConfig+0x114>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d013      	beq.n	8008768 <TIM_Base_SetConfig+0x40>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008746:	d00f      	beq.n	8008768 <TIM_Base_SetConfig+0x40>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	4a3d      	ldr	r2, [pc, #244]	; (8008840 <TIM_Base_SetConfig+0x118>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d00b      	beq.n	8008768 <TIM_Base_SetConfig+0x40>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	4a3c      	ldr	r2, [pc, #240]	; (8008844 <TIM_Base_SetConfig+0x11c>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d007      	beq.n	8008768 <TIM_Base_SetConfig+0x40>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	4a3b      	ldr	r2, [pc, #236]	; (8008848 <TIM_Base_SetConfig+0x120>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d003      	beq.n	8008768 <TIM_Base_SetConfig+0x40>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	4a3a      	ldr	r2, [pc, #232]	; (800884c <TIM_Base_SetConfig+0x124>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d108      	bne.n	800877a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800876e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	68fa      	ldr	r2, [r7, #12]
 8008776:	4313      	orrs	r3, r2
 8008778:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	4a2f      	ldr	r2, [pc, #188]	; (800883c <TIM_Base_SetConfig+0x114>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d02b      	beq.n	80087da <TIM_Base_SetConfig+0xb2>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008788:	d027      	beq.n	80087da <TIM_Base_SetConfig+0xb2>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	4a2c      	ldr	r2, [pc, #176]	; (8008840 <TIM_Base_SetConfig+0x118>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d023      	beq.n	80087da <TIM_Base_SetConfig+0xb2>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	4a2b      	ldr	r2, [pc, #172]	; (8008844 <TIM_Base_SetConfig+0x11c>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d01f      	beq.n	80087da <TIM_Base_SetConfig+0xb2>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	4a2a      	ldr	r2, [pc, #168]	; (8008848 <TIM_Base_SetConfig+0x120>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d01b      	beq.n	80087da <TIM_Base_SetConfig+0xb2>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	4a29      	ldr	r2, [pc, #164]	; (800884c <TIM_Base_SetConfig+0x124>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d017      	beq.n	80087da <TIM_Base_SetConfig+0xb2>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	4a28      	ldr	r2, [pc, #160]	; (8008850 <TIM_Base_SetConfig+0x128>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d013      	beq.n	80087da <TIM_Base_SetConfig+0xb2>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	4a27      	ldr	r2, [pc, #156]	; (8008854 <TIM_Base_SetConfig+0x12c>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d00f      	beq.n	80087da <TIM_Base_SetConfig+0xb2>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	4a26      	ldr	r2, [pc, #152]	; (8008858 <TIM_Base_SetConfig+0x130>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d00b      	beq.n	80087da <TIM_Base_SetConfig+0xb2>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	4a25      	ldr	r2, [pc, #148]	; (800885c <TIM_Base_SetConfig+0x134>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d007      	beq.n	80087da <TIM_Base_SetConfig+0xb2>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	4a24      	ldr	r2, [pc, #144]	; (8008860 <TIM_Base_SetConfig+0x138>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d003      	beq.n	80087da <TIM_Base_SetConfig+0xb2>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	4a23      	ldr	r2, [pc, #140]	; (8008864 <TIM_Base_SetConfig+0x13c>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d108      	bne.n	80087ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	68db      	ldr	r3, [r3, #12]
 80087e6:	68fa      	ldr	r2, [r7, #12]
 80087e8:	4313      	orrs	r3, r2
 80087ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	695b      	ldr	r3, [r3, #20]
 80087f6:	4313      	orrs	r3, r2
 80087f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	68fa      	ldr	r2, [r7, #12]
 80087fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	689a      	ldr	r2, [r3, #8]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	681a      	ldr	r2, [r3, #0]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	4a0a      	ldr	r2, [pc, #40]	; (800883c <TIM_Base_SetConfig+0x114>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d003      	beq.n	8008820 <TIM_Base_SetConfig+0xf8>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	4a0c      	ldr	r2, [pc, #48]	; (800884c <TIM_Base_SetConfig+0x124>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d103      	bne.n	8008828 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	691a      	ldr	r2, [r3, #16]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2201      	movs	r2, #1
 800882c:	615a      	str	r2, [r3, #20]
}
 800882e:	bf00      	nop
 8008830:	3714      	adds	r7, #20
 8008832:	46bd      	mov	sp, r7
 8008834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008838:	4770      	bx	lr
 800883a:	bf00      	nop
 800883c:	40010000 	.word	0x40010000
 8008840:	40000400 	.word	0x40000400
 8008844:	40000800 	.word	0x40000800
 8008848:	40000c00 	.word	0x40000c00
 800884c:	40010400 	.word	0x40010400
 8008850:	40014000 	.word	0x40014000
 8008854:	40014400 	.word	0x40014400
 8008858:	40014800 	.word	0x40014800
 800885c:	40001800 	.word	0x40001800
 8008860:	40001c00 	.word	0x40001c00
 8008864:	40002000 	.word	0x40002000

08008868 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008868:	b480      	push	{r7}
 800886a:	b087      	sub	sp, #28
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6a1b      	ldr	r3, [r3, #32]
 8008876:	f023 0201 	bic.w	r2, r3, #1
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6a1b      	ldr	r3, [r3, #32]
 8008882:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	699b      	ldr	r3, [r3, #24]
 800888e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008896:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f023 0303 	bic.w	r3, r3, #3
 800889e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	68fa      	ldr	r2, [r7, #12]
 80088a6:	4313      	orrs	r3, r2
 80088a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	f023 0302 	bic.w	r3, r3, #2
 80088b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	689b      	ldr	r3, [r3, #8]
 80088b6:	697a      	ldr	r2, [r7, #20]
 80088b8:	4313      	orrs	r3, r2
 80088ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	4a20      	ldr	r2, [pc, #128]	; (8008940 <TIM_OC1_SetConfig+0xd8>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d003      	beq.n	80088cc <TIM_OC1_SetConfig+0x64>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	4a1f      	ldr	r2, [pc, #124]	; (8008944 <TIM_OC1_SetConfig+0xdc>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d10c      	bne.n	80088e6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	f023 0308 	bic.w	r3, r3, #8
 80088d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	68db      	ldr	r3, [r3, #12]
 80088d8:	697a      	ldr	r2, [r7, #20]
 80088da:	4313      	orrs	r3, r2
 80088dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	f023 0304 	bic.w	r3, r3, #4
 80088e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	4a15      	ldr	r2, [pc, #84]	; (8008940 <TIM_OC1_SetConfig+0xd8>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d003      	beq.n	80088f6 <TIM_OC1_SetConfig+0x8e>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	4a14      	ldr	r2, [pc, #80]	; (8008944 <TIM_OC1_SetConfig+0xdc>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d111      	bne.n	800891a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008904:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	695b      	ldr	r3, [r3, #20]
 800890a:	693a      	ldr	r2, [r7, #16]
 800890c:	4313      	orrs	r3, r2
 800890e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	699b      	ldr	r3, [r3, #24]
 8008914:	693a      	ldr	r2, [r7, #16]
 8008916:	4313      	orrs	r3, r2
 8008918:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	693a      	ldr	r2, [r7, #16]
 800891e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	68fa      	ldr	r2, [r7, #12]
 8008924:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	685a      	ldr	r2, [r3, #4]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	697a      	ldr	r2, [r7, #20]
 8008932:	621a      	str	r2, [r3, #32]
}
 8008934:	bf00      	nop
 8008936:	371c      	adds	r7, #28
 8008938:	46bd      	mov	sp, r7
 800893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893e:	4770      	bx	lr
 8008940:	40010000 	.word	0x40010000
 8008944:	40010400 	.word	0x40010400

08008948 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008948:	b480      	push	{r7}
 800894a:	b087      	sub	sp, #28
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6a1b      	ldr	r3, [r3, #32]
 8008956:	f023 0210 	bic.w	r2, r3, #16
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6a1b      	ldr	r3, [r3, #32]
 8008962:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	699b      	ldr	r3, [r3, #24]
 800896e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008976:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800897e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	021b      	lsls	r3, r3, #8
 8008986:	68fa      	ldr	r2, [r7, #12]
 8008988:	4313      	orrs	r3, r2
 800898a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	f023 0320 	bic.w	r3, r3, #32
 8008992:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	689b      	ldr	r3, [r3, #8]
 8008998:	011b      	lsls	r3, r3, #4
 800899a:	697a      	ldr	r2, [r7, #20]
 800899c:	4313      	orrs	r3, r2
 800899e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	4a22      	ldr	r2, [pc, #136]	; (8008a2c <TIM_OC2_SetConfig+0xe4>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d003      	beq.n	80089b0 <TIM_OC2_SetConfig+0x68>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	4a21      	ldr	r2, [pc, #132]	; (8008a30 <TIM_OC2_SetConfig+0xe8>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d10d      	bne.n	80089cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	68db      	ldr	r3, [r3, #12]
 80089bc:	011b      	lsls	r3, r3, #4
 80089be:	697a      	ldr	r2, [r7, #20]
 80089c0:	4313      	orrs	r3, r2
 80089c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	4a17      	ldr	r2, [pc, #92]	; (8008a2c <TIM_OC2_SetConfig+0xe4>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d003      	beq.n	80089dc <TIM_OC2_SetConfig+0x94>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	4a16      	ldr	r2, [pc, #88]	; (8008a30 <TIM_OC2_SetConfig+0xe8>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d113      	bne.n	8008a04 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80089dc:	693b      	ldr	r3, [r7, #16]
 80089de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80089e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80089ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	695b      	ldr	r3, [r3, #20]
 80089f0:	009b      	lsls	r3, r3, #2
 80089f2:	693a      	ldr	r2, [r7, #16]
 80089f4:	4313      	orrs	r3, r2
 80089f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	699b      	ldr	r3, [r3, #24]
 80089fc:	009b      	lsls	r3, r3, #2
 80089fe:	693a      	ldr	r2, [r7, #16]
 8008a00:	4313      	orrs	r3, r2
 8008a02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	693a      	ldr	r2, [r7, #16]
 8008a08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	68fa      	ldr	r2, [r7, #12]
 8008a0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	685a      	ldr	r2, [r3, #4]
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	697a      	ldr	r2, [r7, #20]
 8008a1c:	621a      	str	r2, [r3, #32]
}
 8008a1e:	bf00      	nop
 8008a20:	371c      	adds	r7, #28
 8008a22:	46bd      	mov	sp, r7
 8008a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a28:	4770      	bx	lr
 8008a2a:	bf00      	nop
 8008a2c:	40010000 	.word	0x40010000
 8008a30:	40010400 	.word	0x40010400

08008a34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b087      	sub	sp, #28
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6a1b      	ldr	r3, [r3, #32]
 8008a42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6a1b      	ldr	r3, [r3, #32]
 8008a4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	69db      	ldr	r3, [r3, #28]
 8008a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	f023 0303 	bic.w	r3, r3, #3
 8008a6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	68fa      	ldr	r2, [r7, #12]
 8008a72:	4313      	orrs	r3, r2
 8008a74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008a7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	689b      	ldr	r3, [r3, #8]
 8008a82:	021b      	lsls	r3, r3, #8
 8008a84:	697a      	ldr	r2, [r7, #20]
 8008a86:	4313      	orrs	r3, r2
 8008a88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	4a21      	ldr	r2, [pc, #132]	; (8008b14 <TIM_OC3_SetConfig+0xe0>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d003      	beq.n	8008a9a <TIM_OC3_SetConfig+0x66>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	4a20      	ldr	r2, [pc, #128]	; (8008b18 <TIM_OC3_SetConfig+0xe4>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d10d      	bne.n	8008ab6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008aa0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	68db      	ldr	r3, [r3, #12]
 8008aa6:	021b      	lsls	r3, r3, #8
 8008aa8:	697a      	ldr	r2, [r7, #20]
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008ab4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	4a16      	ldr	r2, [pc, #88]	; (8008b14 <TIM_OC3_SetConfig+0xe0>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d003      	beq.n	8008ac6 <TIM_OC3_SetConfig+0x92>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	4a15      	ldr	r2, [pc, #84]	; (8008b18 <TIM_OC3_SetConfig+0xe4>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d113      	bne.n	8008aee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008acc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008ad4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	695b      	ldr	r3, [r3, #20]
 8008ada:	011b      	lsls	r3, r3, #4
 8008adc:	693a      	ldr	r2, [r7, #16]
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	699b      	ldr	r3, [r3, #24]
 8008ae6:	011b      	lsls	r3, r3, #4
 8008ae8:	693a      	ldr	r2, [r7, #16]
 8008aea:	4313      	orrs	r3, r2
 8008aec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	693a      	ldr	r2, [r7, #16]
 8008af2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	68fa      	ldr	r2, [r7, #12]
 8008af8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	685a      	ldr	r2, [r3, #4]
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	697a      	ldr	r2, [r7, #20]
 8008b06:	621a      	str	r2, [r3, #32]
}
 8008b08:	bf00      	nop
 8008b0a:	371c      	adds	r7, #28
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr
 8008b14:	40010000 	.word	0x40010000
 8008b18:	40010400 	.word	0x40010400

08008b1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b087      	sub	sp, #28
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6a1b      	ldr	r3, [r3, #32]
 8008b2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6a1b      	ldr	r3, [r3, #32]
 8008b36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	69db      	ldr	r3, [r3, #28]
 8008b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	021b      	lsls	r3, r3, #8
 8008b5a:	68fa      	ldr	r2, [r7, #12]
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	689b      	ldr	r3, [r3, #8]
 8008b6c:	031b      	lsls	r3, r3, #12
 8008b6e:	693a      	ldr	r2, [r7, #16]
 8008b70:	4313      	orrs	r3, r2
 8008b72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	4a12      	ldr	r2, [pc, #72]	; (8008bc0 <TIM_OC4_SetConfig+0xa4>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d003      	beq.n	8008b84 <TIM_OC4_SetConfig+0x68>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	4a11      	ldr	r2, [pc, #68]	; (8008bc4 <TIM_OC4_SetConfig+0xa8>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d109      	bne.n	8008b98 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	695b      	ldr	r3, [r3, #20]
 8008b90:	019b      	lsls	r3, r3, #6
 8008b92:	697a      	ldr	r2, [r7, #20]
 8008b94:	4313      	orrs	r3, r2
 8008b96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	697a      	ldr	r2, [r7, #20]
 8008b9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	68fa      	ldr	r2, [r7, #12]
 8008ba2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	685a      	ldr	r2, [r3, #4]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	693a      	ldr	r2, [r7, #16]
 8008bb0:	621a      	str	r2, [r3, #32]
}
 8008bb2:	bf00      	nop
 8008bb4:	371c      	adds	r7, #28
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbc:	4770      	bx	lr
 8008bbe:	bf00      	nop
 8008bc0:	40010000 	.word	0x40010000
 8008bc4:	40010400 	.word	0x40010400

08008bc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b087      	sub	sp, #28
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	60f8      	str	r0, [r7, #12]
 8008bd0:	60b9      	str	r1, [r7, #8]
 8008bd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	6a1b      	ldr	r3, [r3, #32]
 8008bd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	6a1b      	ldr	r3, [r3, #32]
 8008bde:	f023 0201 	bic.w	r2, r3, #1
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	699b      	ldr	r3, [r3, #24]
 8008bea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008bf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	011b      	lsls	r3, r3, #4
 8008bf8:	693a      	ldr	r2, [r7, #16]
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	f023 030a 	bic.w	r3, r3, #10
 8008c04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008c06:	697a      	ldr	r2, [r7, #20]
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	693a      	ldr	r2, [r7, #16]
 8008c12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	697a      	ldr	r2, [r7, #20]
 8008c18:	621a      	str	r2, [r3, #32]
}
 8008c1a:	bf00      	nop
 8008c1c:	371c      	adds	r7, #28
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c24:	4770      	bx	lr

08008c26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c26:	b480      	push	{r7}
 8008c28:	b087      	sub	sp, #28
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	60f8      	str	r0, [r7, #12]
 8008c2e:	60b9      	str	r1, [r7, #8]
 8008c30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	6a1b      	ldr	r3, [r3, #32]
 8008c36:	f023 0210 	bic.w	r2, r3, #16
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	699b      	ldr	r3, [r3, #24]
 8008c42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	6a1b      	ldr	r3, [r3, #32]
 8008c48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008c50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	031b      	lsls	r3, r3, #12
 8008c56:	697a      	ldr	r2, [r7, #20]
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008c62:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	011b      	lsls	r3, r3, #4
 8008c68:	693a      	ldr	r2, [r7, #16]
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	697a      	ldr	r2, [r7, #20]
 8008c72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	693a      	ldr	r2, [r7, #16]
 8008c78:	621a      	str	r2, [r3, #32]
}
 8008c7a:	bf00      	nop
 8008c7c:	371c      	adds	r7, #28
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c84:	4770      	bx	lr

08008c86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008c86:	b480      	push	{r7}
 8008c88:	b085      	sub	sp, #20
 8008c8a:	af00      	add	r7, sp, #0
 8008c8c:	6078      	str	r0, [r7, #4]
 8008c8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	689b      	ldr	r3, [r3, #8]
 8008c94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008c9e:	683a      	ldr	r2, [r7, #0]
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	f043 0307 	orr.w	r3, r3, #7
 8008ca8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	68fa      	ldr	r2, [r7, #12]
 8008cae:	609a      	str	r2, [r3, #8]
}
 8008cb0:	bf00      	nop
 8008cb2:	3714      	adds	r7, #20
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cba:	4770      	bx	lr

08008cbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b087      	sub	sp, #28
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	60f8      	str	r0, [r7, #12]
 8008cc4:	60b9      	str	r1, [r7, #8]
 8008cc6:	607a      	str	r2, [r7, #4]
 8008cc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	689b      	ldr	r3, [r3, #8]
 8008cce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008cd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	021a      	lsls	r2, r3, #8
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	431a      	orrs	r2, r3
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	697a      	ldr	r2, [r7, #20]
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	697a      	ldr	r2, [r7, #20]
 8008cee:	609a      	str	r2, [r3, #8]
}
 8008cf0:	bf00      	nop
 8008cf2:	371c      	adds	r7, #28
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr

08008cfc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b087      	sub	sp, #28
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	60f8      	str	r0, [r7, #12]
 8008d04:	60b9      	str	r1, [r7, #8]
 8008d06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	f003 031f 	and.w	r3, r3, #31
 8008d0e:	2201      	movs	r2, #1
 8008d10:	fa02 f303 	lsl.w	r3, r2, r3
 8008d14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	6a1a      	ldr	r2, [r3, #32]
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	43db      	mvns	r3, r3
 8008d1e:	401a      	ands	r2, r3
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	6a1a      	ldr	r2, [r3, #32]
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	f003 031f 	and.w	r3, r3, #31
 8008d2e:	6879      	ldr	r1, [r7, #4]
 8008d30:	fa01 f303 	lsl.w	r3, r1, r3
 8008d34:	431a      	orrs	r2, r3
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	621a      	str	r2, [r3, #32]
}
 8008d3a:	bf00      	nop
 8008d3c:	371c      	adds	r7, #28
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d44:	4770      	bx	lr
	...

08008d48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b085      	sub	sp, #20
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d58:	2b01      	cmp	r3, #1
 8008d5a:	d101      	bne.n	8008d60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008d5c:	2302      	movs	r3, #2
 8008d5e:	e05a      	b.n	8008e16 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2201      	movs	r2, #1
 8008d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2202      	movs	r2, #2
 8008d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	689b      	ldr	r3, [r3, #8]
 8008d7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	68fa      	ldr	r2, [r7, #12]
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	68fa      	ldr	r2, [r7, #12]
 8008d98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4a21      	ldr	r2, [pc, #132]	; (8008e24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d022      	beq.n	8008dea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dac:	d01d      	beq.n	8008dea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	4a1d      	ldr	r2, [pc, #116]	; (8008e28 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d018      	beq.n	8008dea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4a1b      	ldr	r2, [pc, #108]	; (8008e2c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d013      	beq.n	8008dea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4a1a      	ldr	r2, [pc, #104]	; (8008e30 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d00e      	beq.n	8008dea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4a18      	ldr	r2, [pc, #96]	; (8008e34 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d009      	beq.n	8008dea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4a17      	ldr	r2, [pc, #92]	; (8008e38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d004      	beq.n	8008dea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	4a15      	ldr	r2, [pc, #84]	; (8008e3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d10c      	bne.n	8008e04 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008df0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	685b      	ldr	r3, [r3, #4]
 8008df6:	68ba      	ldr	r2, [r7, #8]
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	68ba      	ldr	r2, [r7, #8]
 8008e02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2201      	movs	r2, #1
 8008e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e14:	2300      	movs	r3, #0
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3714      	adds	r7, #20
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e20:	4770      	bx	lr
 8008e22:	bf00      	nop
 8008e24:	40010000 	.word	0x40010000
 8008e28:	40000400 	.word	0x40000400
 8008e2c:	40000800 	.word	0x40000800
 8008e30:	40000c00 	.word	0x40000c00
 8008e34:	40010400 	.word	0x40010400
 8008e38:	40014000 	.word	0x40014000
 8008e3c:	40001800 	.word	0x40001800

08008e40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b083      	sub	sp, #12
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008e48:	bf00      	nop
 8008e4a:	370c      	adds	r7, #12
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e52:	4770      	bx	lr

08008e54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b083      	sub	sp, #12
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008e5c:	bf00      	nop
 8008e5e:	370c      	adds	r7, #12
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr

08008e68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b082      	sub	sp, #8
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d101      	bne.n	8008e7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008e76:	2301      	movs	r3, #1
 8008e78:	e03f      	b.n	8008efa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008e80:	b2db      	uxtb	r3, r3
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d106      	bne.n	8008e94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f7f9 ff6c 	bl	8002d6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2224      	movs	r2, #36	; 0x24
 8008e98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	68da      	ldr	r2, [r3, #12]
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008eaa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f000 f829 	bl	8008f04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	691a      	ldr	r2, [r3, #16]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008ec0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	695a      	ldr	r2, [r3, #20]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008ed0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	68da      	ldr	r2, [r3, #12]
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008ee0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2220      	movs	r2, #32
 8008eec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2220      	movs	r2, #32
 8008ef4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008ef8:	2300      	movs	r3, #0
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3708      	adds	r7, #8
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}
	...

08008f04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f08:	b085      	sub	sp, #20
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	691b      	ldr	r3, [r3, #16]
 8008f14:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	68da      	ldr	r2, [r3, #12]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	430a      	orrs	r2, r1
 8008f22:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	689a      	ldr	r2, [r3, #8]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	691b      	ldr	r3, [r3, #16]
 8008f2c:	431a      	orrs	r2, r3
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	695b      	ldr	r3, [r3, #20]
 8008f32:	431a      	orrs	r2, r3
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	69db      	ldr	r3, [r3, #28]
 8008f38:	4313      	orrs	r3, r2
 8008f3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	68db      	ldr	r3, [r3, #12]
 8008f42:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008f46:	f023 030c 	bic.w	r3, r3, #12
 8008f4a:	687a      	ldr	r2, [r7, #4]
 8008f4c:	6812      	ldr	r2, [r2, #0]
 8008f4e:	68f9      	ldr	r1, [r7, #12]
 8008f50:	430b      	orrs	r3, r1
 8008f52:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	695b      	ldr	r3, [r3, #20]
 8008f5a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	699a      	ldr	r2, [r3, #24]
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	430a      	orrs	r2, r1
 8008f68:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	69db      	ldr	r3, [r3, #28]
 8008f6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f72:	f040 818b 	bne.w	800928c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4ac1      	ldr	r2, [pc, #772]	; (8009280 <UART_SetConfig+0x37c>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d005      	beq.n	8008f8c <UART_SetConfig+0x88>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4abf      	ldr	r2, [pc, #764]	; (8009284 <UART_SetConfig+0x380>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	f040 80bd 	bne.w	8009106 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008f8c:	f7fc fdee 	bl	8005b6c <HAL_RCC_GetPCLK2Freq>
 8008f90:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	461d      	mov	r5, r3
 8008f96:	f04f 0600 	mov.w	r6, #0
 8008f9a:	46a8      	mov	r8, r5
 8008f9c:	46b1      	mov	r9, r6
 8008f9e:	eb18 0308 	adds.w	r3, r8, r8
 8008fa2:	eb49 0409 	adc.w	r4, r9, r9
 8008fa6:	4698      	mov	r8, r3
 8008fa8:	46a1      	mov	r9, r4
 8008faa:	eb18 0805 	adds.w	r8, r8, r5
 8008fae:	eb49 0906 	adc.w	r9, r9, r6
 8008fb2:	f04f 0100 	mov.w	r1, #0
 8008fb6:	f04f 0200 	mov.w	r2, #0
 8008fba:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008fbe:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008fc2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008fc6:	4688      	mov	r8, r1
 8008fc8:	4691      	mov	r9, r2
 8008fca:	eb18 0005 	adds.w	r0, r8, r5
 8008fce:	eb49 0106 	adc.w	r1, r9, r6
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	685b      	ldr	r3, [r3, #4]
 8008fd6:	461d      	mov	r5, r3
 8008fd8:	f04f 0600 	mov.w	r6, #0
 8008fdc:	196b      	adds	r3, r5, r5
 8008fde:	eb46 0406 	adc.w	r4, r6, r6
 8008fe2:	461a      	mov	r2, r3
 8008fe4:	4623      	mov	r3, r4
 8008fe6:	f7f7 fe4f 	bl	8000c88 <__aeabi_uldivmod>
 8008fea:	4603      	mov	r3, r0
 8008fec:	460c      	mov	r4, r1
 8008fee:	461a      	mov	r2, r3
 8008ff0:	4ba5      	ldr	r3, [pc, #660]	; (8009288 <UART_SetConfig+0x384>)
 8008ff2:	fba3 2302 	umull	r2, r3, r3, r2
 8008ff6:	095b      	lsrs	r3, r3, #5
 8008ff8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	461d      	mov	r5, r3
 8009000:	f04f 0600 	mov.w	r6, #0
 8009004:	46a9      	mov	r9, r5
 8009006:	46b2      	mov	sl, r6
 8009008:	eb19 0309 	adds.w	r3, r9, r9
 800900c:	eb4a 040a 	adc.w	r4, sl, sl
 8009010:	4699      	mov	r9, r3
 8009012:	46a2      	mov	sl, r4
 8009014:	eb19 0905 	adds.w	r9, r9, r5
 8009018:	eb4a 0a06 	adc.w	sl, sl, r6
 800901c:	f04f 0100 	mov.w	r1, #0
 8009020:	f04f 0200 	mov.w	r2, #0
 8009024:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009028:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800902c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009030:	4689      	mov	r9, r1
 8009032:	4692      	mov	sl, r2
 8009034:	eb19 0005 	adds.w	r0, r9, r5
 8009038:	eb4a 0106 	adc.w	r1, sl, r6
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	461d      	mov	r5, r3
 8009042:	f04f 0600 	mov.w	r6, #0
 8009046:	196b      	adds	r3, r5, r5
 8009048:	eb46 0406 	adc.w	r4, r6, r6
 800904c:	461a      	mov	r2, r3
 800904e:	4623      	mov	r3, r4
 8009050:	f7f7 fe1a 	bl	8000c88 <__aeabi_uldivmod>
 8009054:	4603      	mov	r3, r0
 8009056:	460c      	mov	r4, r1
 8009058:	461a      	mov	r2, r3
 800905a:	4b8b      	ldr	r3, [pc, #556]	; (8009288 <UART_SetConfig+0x384>)
 800905c:	fba3 1302 	umull	r1, r3, r3, r2
 8009060:	095b      	lsrs	r3, r3, #5
 8009062:	2164      	movs	r1, #100	; 0x64
 8009064:	fb01 f303 	mul.w	r3, r1, r3
 8009068:	1ad3      	subs	r3, r2, r3
 800906a:	00db      	lsls	r3, r3, #3
 800906c:	3332      	adds	r3, #50	; 0x32
 800906e:	4a86      	ldr	r2, [pc, #536]	; (8009288 <UART_SetConfig+0x384>)
 8009070:	fba2 2303 	umull	r2, r3, r2, r3
 8009074:	095b      	lsrs	r3, r3, #5
 8009076:	005b      	lsls	r3, r3, #1
 8009078:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800907c:	4498      	add	r8, r3
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	461d      	mov	r5, r3
 8009082:	f04f 0600 	mov.w	r6, #0
 8009086:	46a9      	mov	r9, r5
 8009088:	46b2      	mov	sl, r6
 800908a:	eb19 0309 	adds.w	r3, r9, r9
 800908e:	eb4a 040a 	adc.w	r4, sl, sl
 8009092:	4699      	mov	r9, r3
 8009094:	46a2      	mov	sl, r4
 8009096:	eb19 0905 	adds.w	r9, r9, r5
 800909a:	eb4a 0a06 	adc.w	sl, sl, r6
 800909e:	f04f 0100 	mov.w	r1, #0
 80090a2:	f04f 0200 	mov.w	r2, #0
 80090a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80090aa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80090ae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80090b2:	4689      	mov	r9, r1
 80090b4:	4692      	mov	sl, r2
 80090b6:	eb19 0005 	adds.w	r0, r9, r5
 80090ba:	eb4a 0106 	adc.w	r1, sl, r6
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	685b      	ldr	r3, [r3, #4]
 80090c2:	461d      	mov	r5, r3
 80090c4:	f04f 0600 	mov.w	r6, #0
 80090c8:	196b      	adds	r3, r5, r5
 80090ca:	eb46 0406 	adc.w	r4, r6, r6
 80090ce:	461a      	mov	r2, r3
 80090d0:	4623      	mov	r3, r4
 80090d2:	f7f7 fdd9 	bl	8000c88 <__aeabi_uldivmod>
 80090d6:	4603      	mov	r3, r0
 80090d8:	460c      	mov	r4, r1
 80090da:	461a      	mov	r2, r3
 80090dc:	4b6a      	ldr	r3, [pc, #424]	; (8009288 <UART_SetConfig+0x384>)
 80090de:	fba3 1302 	umull	r1, r3, r3, r2
 80090e2:	095b      	lsrs	r3, r3, #5
 80090e4:	2164      	movs	r1, #100	; 0x64
 80090e6:	fb01 f303 	mul.w	r3, r1, r3
 80090ea:	1ad3      	subs	r3, r2, r3
 80090ec:	00db      	lsls	r3, r3, #3
 80090ee:	3332      	adds	r3, #50	; 0x32
 80090f0:	4a65      	ldr	r2, [pc, #404]	; (8009288 <UART_SetConfig+0x384>)
 80090f2:	fba2 2303 	umull	r2, r3, r2, r3
 80090f6:	095b      	lsrs	r3, r3, #5
 80090f8:	f003 0207 	and.w	r2, r3, #7
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	4442      	add	r2, r8
 8009102:	609a      	str	r2, [r3, #8]
 8009104:	e26f      	b.n	80095e6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009106:	f7fc fd1d 	bl	8005b44 <HAL_RCC_GetPCLK1Freq>
 800910a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	461d      	mov	r5, r3
 8009110:	f04f 0600 	mov.w	r6, #0
 8009114:	46a8      	mov	r8, r5
 8009116:	46b1      	mov	r9, r6
 8009118:	eb18 0308 	adds.w	r3, r8, r8
 800911c:	eb49 0409 	adc.w	r4, r9, r9
 8009120:	4698      	mov	r8, r3
 8009122:	46a1      	mov	r9, r4
 8009124:	eb18 0805 	adds.w	r8, r8, r5
 8009128:	eb49 0906 	adc.w	r9, r9, r6
 800912c:	f04f 0100 	mov.w	r1, #0
 8009130:	f04f 0200 	mov.w	r2, #0
 8009134:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009138:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800913c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009140:	4688      	mov	r8, r1
 8009142:	4691      	mov	r9, r2
 8009144:	eb18 0005 	adds.w	r0, r8, r5
 8009148:	eb49 0106 	adc.w	r1, r9, r6
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	685b      	ldr	r3, [r3, #4]
 8009150:	461d      	mov	r5, r3
 8009152:	f04f 0600 	mov.w	r6, #0
 8009156:	196b      	adds	r3, r5, r5
 8009158:	eb46 0406 	adc.w	r4, r6, r6
 800915c:	461a      	mov	r2, r3
 800915e:	4623      	mov	r3, r4
 8009160:	f7f7 fd92 	bl	8000c88 <__aeabi_uldivmod>
 8009164:	4603      	mov	r3, r0
 8009166:	460c      	mov	r4, r1
 8009168:	461a      	mov	r2, r3
 800916a:	4b47      	ldr	r3, [pc, #284]	; (8009288 <UART_SetConfig+0x384>)
 800916c:	fba3 2302 	umull	r2, r3, r3, r2
 8009170:	095b      	lsrs	r3, r3, #5
 8009172:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	461d      	mov	r5, r3
 800917a:	f04f 0600 	mov.w	r6, #0
 800917e:	46a9      	mov	r9, r5
 8009180:	46b2      	mov	sl, r6
 8009182:	eb19 0309 	adds.w	r3, r9, r9
 8009186:	eb4a 040a 	adc.w	r4, sl, sl
 800918a:	4699      	mov	r9, r3
 800918c:	46a2      	mov	sl, r4
 800918e:	eb19 0905 	adds.w	r9, r9, r5
 8009192:	eb4a 0a06 	adc.w	sl, sl, r6
 8009196:	f04f 0100 	mov.w	r1, #0
 800919a:	f04f 0200 	mov.w	r2, #0
 800919e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80091a2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80091a6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80091aa:	4689      	mov	r9, r1
 80091ac:	4692      	mov	sl, r2
 80091ae:	eb19 0005 	adds.w	r0, r9, r5
 80091b2:	eb4a 0106 	adc.w	r1, sl, r6
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	685b      	ldr	r3, [r3, #4]
 80091ba:	461d      	mov	r5, r3
 80091bc:	f04f 0600 	mov.w	r6, #0
 80091c0:	196b      	adds	r3, r5, r5
 80091c2:	eb46 0406 	adc.w	r4, r6, r6
 80091c6:	461a      	mov	r2, r3
 80091c8:	4623      	mov	r3, r4
 80091ca:	f7f7 fd5d 	bl	8000c88 <__aeabi_uldivmod>
 80091ce:	4603      	mov	r3, r0
 80091d0:	460c      	mov	r4, r1
 80091d2:	461a      	mov	r2, r3
 80091d4:	4b2c      	ldr	r3, [pc, #176]	; (8009288 <UART_SetConfig+0x384>)
 80091d6:	fba3 1302 	umull	r1, r3, r3, r2
 80091da:	095b      	lsrs	r3, r3, #5
 80091dc:	2164      	movs	r1, #100	; 0x64
 80091de:	fb01 f303 	mul.w	r3, r1, r3
 80091e2:	1ad3      	subs	r3, r2, r3
 80091e4:	00db      	lsls	r3, r3, #3
 80091e6:	3332      	adds	r3, #50	; 0x32
 80091e8:	4a27      	ldr	r2, [pc, #156]	; (8009288 <UART_SetConfig+0x384>)
 80091ea:	fba2 2303 	umull	r2, r3, r2, r3
 80091ee:	095b      	lsrs	r3, r3, #5
 80091f0:	005b      	lsls	r3, r3, #1
 80091f2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80091f6:	4498      	add	r8, r3
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	461d      	mov	r5, r3
 80091fc:	f04f 0600 	mov.w	r6, #0
 8009200:	46a9      	mov	r9, r5
 8009202:	46b2      	mov	sl, r6
 8009204:	eb19 0309 	adds.w	r3, r9, r9
 8009208:	eb4a 040a 	adc.w	r4, sl, sl
 800920c:	4699      	mov	r9, r3
 800920e:	46a2      	mov	sl, r4
 8009210:	eb19 0905 	adds.w	r9, r9, r5
 8009214:	eb4a 0a06 	adc.w	sl, sl, r6
 8009218:	f04f 0100 	mov.w	r1, #0
 800921c:	f04f 0200 	mov.w	r2, #0
 8009220:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009224:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009228:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800922c:	4689      	mov	r9, r1
 800922e:	4692      	mov	sl, r2
 8009230:	eb19 0005 	adds.w	r0, r9, r5
 8009234:	eb4a 0106 	adc.w	r1, sl, r6
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	685b      	ldr	r3, [r3, #4]
 800923c:	461d      	mov	r5, r3
 800923e:	f04f 0600 	mov.w	r6, #0
 8009242:	196b      	adds	r3, r5, r5
 8009244:	eb46 0406 	adc.w	r4, r6, r6
 8009248:	461a      	mov	r2, r3
 800924a:	4623      	mov	r3, r4
 800924c:	f7f7 fd1c 	bl	8000c88 <__aeabi_uldivmod>
 8009250:	4603      	mov	r3, r0
 8009252:	460c      	mov	r4, r1
 8009254:	461a      	mov	r2, r3
 8009256:	4b0c      	ldr	r3, [pc, #48]	; (8009288 <UART_SetConfig+0x384>)
 8009258:	fba3 1302 	umull	r1, r3, r3, r2
 800925c:	095b      	lsrs	r3, r3, #5
 800925e:	2164      	movs	r1, #100	; 0x64
 8009260:	fb01 f303 	mul.w	r3, r1, r3
 8009264:	1ad3      	subs	r3, r2, r3
 8009266:	00db      	lsls	r3, r3, #3
 8009268:	3332      	adds	r3, #50	; 0x32
 800926a:	4a07      	ldr	r2, [pc, #28]	; (8009288 <UART_SetConfig+0x384>)
 800926c:	fba2 2303 	umull	r2, r3, r2, r3
 8009270:	095b      	lsrs	r3, r3, #5
 8009272:	f003 0207 	and.w	r2, r3, #7
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	4442      	add	r2, r8
 800927c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800927e:	e1b2      	b.n	80095e6 <UART_SetConfig+0x6e2>
 8009280:	40011000 	.word	0x40011000
 8009284:	40011400 	.word	0x40011400
 8009288:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	4ad7      	ldr	r2, [pc, #860]	; (80095f0 <UART_SetConfig+0x6ec>)
 8009292:	4293      	cmp	r3, r2
 8009294:	d005      	beq.n	80092a2 <UART_SetConfig+0x39e>
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	4ad6      	ldr	r2, [pc, #856]	; (80095f4 <UART_SetConfig+0x6f0>)
 800929c:	4293      	cmp	r3, r2
 800929e:	f040 80d1 	bne.w	8009444 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80092a2:	f7fc fc63 	bl	8005b6c <HAL_RCC_GetPCLK2Freq>
 80092a6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	469a      	mov	sl, r3
 80092ac:	f04f 0b00 	mov.w	fp, #0
 80092b0:	46d0      	mov	r8, sl
 80092b2:	46d9      	mov	r9, fp
 80092b4:	eb18 0308 	adds.w	r3, r8, r8
 80092b8:	eb49 0409 	adc.w	r4, r9, r9
 80092bc:	4698      	mov	r8, r3
 80092be:	46a1      	mov	r9, r4
 80092c0:	eb18 080a 	adds.w	r8, r8, sl
 80092c4:	eb49 090b 	adc.w	r9, r9, fp
 80092c8:	f04f 0100 	mov.w	r1, #0
 80092cc:	f04f 0200 	mov.w	r2, #0
 80092d0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80092d4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80092d8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80092dc:	4688      	mov	r8, r1
 80092de:	4691      	mov	r9, r2
 80092e0:	eb1a 0508 	adds.w	r5, sl, r8
 80092e4:	eb4b 0609 	adc.w	r6, fp, r9
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	4619      	mov	r1, r3
 80092ee:	f04f 0200 	mov.w	r2, #0
 80092f2:	f04f 0300 	mov.w	r3, #0
 80092f6:	f04f 0400 	mov.w	r4, #0
 80092fa:	0094      	lsls	r4, r2, #2
 80092fc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009300:	008b      	lsls	r3, r1, #2
 8009302:	461a      	mov	r2, r3
 8009304:	4623      	mov	r3, r4
 8009306:	4628      	mov	r0, r5
 8009308:	4631      	mov	r1, r6
 800930a:	f7f7 fcbd 	bl	8000c88 <__aeabi_uldivmod>
 800930e:	4603      	mov	r3, r0
 8009310:	460c      	mov	r4, r1
 8009312:	461a      	mov	r2, r3
 8009314:	4bb8      	ldr	r3, [pc, #736]	; (80095f8 <UART_SetConfig+0x6f4>)
 8009316:	fba3 2302 	umull	r2, r3, r3, r2
 800931a:	095b      	lsrs	r3, r3, #5
 800931c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	469b      	mov	fp, r3
 8009324:	f04f 0c00 	mov.w	ip, #0
 8009328:	46d9      	mov	r9, fp
 800932a:	46e2      	mov	sl, ip
 800932c:	eb19 0309 	adds.w	r3, r9, r9
 8009330:	eb4a 040a 	adc.w	r4, sl, sl
 8009334:	4699      	mov	r9, r3
 8009336:	46a2      	mov	sl, r4
 8009338:	eb19 090b 	adds.w	r9, r9, fp
 800933c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009340:	f04f 0100 	mov.w	r1, #0
 8009344:	f04f 0200 	mov.w	r2, #0
 8009348:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800934c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009350:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009354:	4689      	mov	r9, r1
 8009356:	4692      	mov	sl, r2
 8009358:	eb1b 0509 	adds.w	r5, fp, r9
 800935c:	eb4c 060a 	adc.w	r6, ip, sl
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	685b      	ldr	r3, [r3, #4]
 8009364:	4619      	mov	r1, r3
 8009366:	f04f 0200 	mov.w	r2, #0
 800936a:	f04f 0300 	mov.w	r3, #0
 800936e:	f04f 0400 	mov.w	r4, #0
 8009372:	0094      	lsls	r4, r2, #2
 8009374:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009378:	008b      	lsls	r3, r1, #2
 800937a:	461a      	mov	r2, r3
 800937c:	4623      	mov	r3, r4
 800937e:	4628      	mov	r0, r5
 8009380:	4631      	mov	r1, r6
 8009382:	f7f7 fc81 	bl	8000c88 <__aeabi_uldivmod>
 8009386:	4603      	mov	r3, r0
 8009388:	460c      	mov	r4, r1
 800938a:	461a      	mov	r2, r3
 800938c:	4b9a      	ldr	r3, [pc, #616]	; (80095f8 <UART_SetConfig+0x6f4>)
 800938e:	fba3 1302 	umull	r1, r3, r3, r2
 8009392:	095b      	lsrs	r3, r3, #5
 8009394:	2164      	movs	r1, #100	; 0x64
 8009396:	fb01 f303 	mul.w	r3, r1, r3
 800939a:	1ad3      	subs	r3, r2, r3
 800939c:	011b      	lsls	r3, r3, #4
 800939e:	3332      	adds	r3, #50	; 0x32
 80093a0:	4a95      	ldr	r2, [pc, #596]	; (80095f8 <UART_SetConfig+0x6f4>)
 80093a2:	fba2 2303 	umull	r2, r3, r2, r3
 80093a6:	095b      	lsrs	r3, r3, #5
 80093a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80093ac:	4498      	add	r8, r3
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	469b      	mov	fp, r3
 80093b2:	f04f 0c00 	mov.w	ip, #0
 80093b6:	46d9      	mov	r9, fp
 80093b8:	46e2      	mov	sl, ip
 80093ba:	eb19 0309 	adds.w	r3, r9, r9
 80093be:	eb4a 040a 	adc.w	r4, sl, sl
 80093c2:	4699      	mov	r9, r3
 80093c4:	46a2      	mov	sl, r4
 80093c6:	eb19 090b 	adds.w	r9, r9, fp
 80093ca:	eb4a 0a0c 	adc.w	sl, sl, ip
 80093ce:	f04f 0100 	mov.w	r1, #0
 80093d2:	f04f 0200 	mov.w	r2, #0
 80093d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80093da:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80093de:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80093e2:	4689      	mov	r9, r1
 80093e4:	4692      	mov	sl, r2
 80093e6:	eb1b 0509 	adds.w	r5, fp, r9
 80093ea:	eb4c 060a 	adc.w	r6, ip, sl
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	685b      	ldr	r3, [r3, #4]
 80093f2:	4619      	mov	r1, r3
 80093f4:	f04f 0200 	mov.w	r2, #0
 80093f8:	f04f 0300 	mov.w	r3, #0
 80093fc:	f04f 0400 	mov.w	r4, #0
 8009400:	0094      	lsls	r4, r2, #2
 8009402:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009406:	008b      	lsls	r3, r1, #2
 8009408:	461a      	mov	r2, r3
 800940a:	4623      	mov	r3, r4
 800940c:	4628      	mov	r0, r5
 800940e:	4631      	mov	r1, r6
 8009410:	f7f7 fc3a 	bl	8000c88 <__aeabi_uldivmod>
 8009414:	4603      	mov	r3, r0
 8009416:	460c      	mov	r4, r1
 8009418:	461a      	mov	r2, r3
 800941a:	4b77      	ldr	r3, [pc, #476]	; (80095f8 <UART_SetConfig+0x6f4>)
 800941c:	fba3 1302 	umull	r1, r3, r3, r2
 8009420:	095b      	lsrs	r3, r3, #5
 8009422:	2164      	movs	r1, #100	; 0x64
 8009424:	fb01 f303 	mul.w	r3, r1, r3
 8009428:	1ad3      	subs	r3, r2, r3
 800942a:	011b      	lsls	r3, r3, #4
 800942c:	3332      	adds	r3, #50	; 0x32
 800942e:	4a72      	ldr	r2, [pc, #456]	; (80095f8 <UART_SetConfig+0x6f4>)
 8009430:	fba2 2303 	umull	r2, r3, r2, r3
 8009434:	095b      	lsrs	r3, r3, #5
 8009436:	f003 020f 	and.w	r2, r3, #15
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	4442      	add	r2, r8
 8009440:	609a      	str	r2, [r3, #8]
 8009442:	e0d0      	b.n	80095e6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8009444:	f7fc fb7e 	bl	8005b44 <HAL_RCC_GetPCLK1Freq>
 8009448:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	469a      	mov	sl, r3
 800944e:	f04f 0b00 	mov.w	fp, #0
 8009452:	46d0      	mov	r8, sl
 8009454:	46d9      	mov	r9, fp
 8009456:	eb18 0308 	adds.w	r3, r8, r8
 800945a:	eb49 0409 	adc.w	r4, r9, r9
 800945e:	4698      	mov	r8, r3
 8009460:	46a1      	mov	r9, r4
 8009462:	eb18 080a 	adds.w	r8, r8, sl
 8009466:	eb49 090b 	adc.w	r9, r9, fp
 800946a:	f04f 0100 	mov.w	r1, #0
 800946e:	f04f 0200 	mov.w	r2, #0
 8009472:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009476:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800947a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800947e:	4688      	mov	r8, r1
 8009480:	4691      	mov	r9, r2
 8009482:	eb1a 0508 	adds.w	r5, sl, r8
 8009486:	eb4b 0609 	adc.w	r6, fp, r9
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	685b      	ldr	r3, [r3, #4]
 800948e:	4619      	mov	r1, r3
 8009490:	f04f 0200 	mov.w	r2, #0
 8009494:	f04f 0300 	mov.w	r3, #0
 8009498:	f04f 0400 	mov.w	r4, #0
 800949c:	0094      	lsls	r4, r2, #2
 800949e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80094a2:	008b      	lsls	r3, r1, #2
 80094a4:	461a      	mov	r2, r3
 80094a6:	4623      	mov	r3, r4
 80094a8:	4628      	mov	r0, r5
 80094aa:	4631      	mov	r1, r6
 80094ac:	f7f7 fbec 	bl	8000c88 <__aeabi_uldivmod>
 80094b0:	4603      	mov	r3, r0
 80094b2:	460c      	mov	r4, r1
 80094b4:	461a      	mov	r2, r3
 80094b6:	4b50      	ldr	r3, [pc, #320]	; (80095f8 <UART_SetConfig+0x6f4>)
 80094b8:	fba3 2302 	umull	r2, r3, r3, r2
 80094bc:	095b      	lsrs	r3, r3, #5
 80094be:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	469b      	mov	fp, r3
 80094c6:	f04f 0c00 	mov.w	ip, #0
 80094ca:	46d9      	mov	r9, fp
 80094cc:	46e2      	mov	sl, ip
 80094ce:	eb19 0309 	adds.w	r3, r9, r9
 80094d2:	eb4a 040a 	adc.w	r4, sl, sl
 80094d6:	4699      	mov	r9, r3
 80094d8:	46a2      	mov	sl, r4
 80094da:	eb19 090b 	adds.w	r9, r9, fp
 80094de:	eb4a 0a0c 	adc.w	sl, sl, ip
 80094e2:	f04f 0100 	mov.w	r1, #0
 80094e6:	f04f 0200 	mov.w	r2, #0
 80094ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80094ee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80094f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80094f6:	4689      	mov	r9, r1
 80094f8:	4692      	mov	sl, r2
 80094fa:	eb1b 0509 	adds.w	r5, fp, r9
 80094fe:	eb4c 060a 	adc.w	r6, ip, sl
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	685b      	ldr	r3, [r3, #4]
 8009506:	4619      	mov	r1, r3
 8009508:	f04f 0200 	mov.w	r2, #0
 800950c:	f04f 0300 	mov.w	r3, #0
 8009510:	f04f 0400 	mov.w	r4, #0
 8009514:	0094      	lsls	r4, r2, #2
 8009516:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800951a:	008b      	lsls	r3, r1, #2
 800951c:	461a      	mov	r2, r3
 800951e:	4623      	mov	r3, r4
 8009520:	4628      	mov	r0, r5
 8009522:	4631      	mov	r1, r6
 8009524:	f7f7 fbb0 	bl	8000c88 <__aeabi_uldivmod>
 8009528:	4603      	mov	r3, r0
 800952a:	460c      	mov	r4, r1
 800952c:	461a      	mov	r2, r3
 800952e:	4b32      	ldr	r3, [pc, #200]	; (80095f8 <UART_SetConfig+0x6f4>)
 8009530:	fba3 1302 	umull	r1, r3, r3, r2
 8009534:	095b      	lsrs	r3, r3, #5
 8009536:	2164      	movs	r1, #100	; 0x64
 8009538:	fb01 f303 	mul.w	r3, r1, r3
 800953c:	1ad3      	subs	r3, r2, r3
 800953e:	011b      	lsls	r3, r3, #4
 8009540:	3332      	adds	r3, #50	; 0x32
 8009542:	4a2d      	ldr	r2, [pc, #180]	; (80095f8 <UART_SetConfig+0x6f4>)
 8009544:	fba2 2303 	umull	r2, r3, r2, r3
 8009548:	095b      	lsrs	r3, r3, #5
 800954a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800954e:	4498      	add	r8, r3
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	469b      	mov	fp, r3
 8009554:	f04f 0c00 	mov.w	ip, #0
 8009558:	46d9      	mov	r9, fp
 800955a:	46e2      	mov	sl, ip
 800955c:	eb19 0309 	adds.w	r3, r9, r9
 8009560:	eb4a 040a 	adc.w	r4, sl, sl
 8009564:	4699      	mov	r9, r3
 8009566:	46a2      	mov	sl, r4
 8009568:	eb19 090b 	adds.w	r9, r9, fp
 800956c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009570:	f04f 0100 	mov.w	r1, #0
 8009574:	f04f 0200 	mov.w	r2, #0
 8009578:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800957c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009580:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009584:	4689      	mov	r9, r1
 8009586:	4692      	mov	sl, r2
 8009588:	eb1b 0509 	adds.w	r5, fp, r9
 800958c:	eb4c 060a 	adc.w	r6, ip, sl
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	685b      	ldr	r3, [r3, #4]
 8009594:	4619      	mov	r1, r3
 8009596:	f04f 0200 	mov.w	r2, #0
 800959a:	f04f 0300 	mov.w	r3, #0
 800959e:	f04f 0400 	mov.w	r4, #0
 80095a2:	0094      	lsls	r4, r2, #2
 80095a4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80095a8:	008b      	lsls	r3, r1, #2
 80095aa:	461a      	mov	r2, r3
 80095ac:	4623      	mov	r3, r4
 80095ae:	4628      	mov	r0, r5
 80095b0:	4631      	mov	r1, r6
 80095b2:	f7f7 fb69 	bl	8000c88 <__aeabi_uldivmod>
 80095b6:	4603      	mov	r3, r0
 80095b8:	460c      	mov	r4, r1
 80095ba:	461a      	mov	r2, r3
 80095bc:	4b0e      	ldr	r3, [pc, #56]	; (80095f8 <UART_SetConfig+0x6f4>)
 80095be:	fba3 1302 	umull	r1, r3, r3, r2
 80095c2:	095b      	lsrs	r3, r3, #5
 80095c4:	2164      	movs	r1, #100	; 0x64
 80095c6:	fb01 f303 	mul.w	r3, r1, r3
 80095ca:	1ad3      	subs	r3, r2, r3
 80095cc:	011b      	lsls	r3, r3, #4
 80095ce:	3332      	adds	r3, #50	; 0x32
 80095d0:	4a09      	ldr	r2, [pc, #36]	; (80095f8 <UART_SetConfig+0x6f4>)
 80095d2:	fba2 2303 	umull	r2, r3, r2, r3
 80095d6:	095b      	lsrs	r3, r3, #5
 80095d8:	f003 020f 	and.w	r2, r3, #15
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	4442      	add	r2, r8
 80095e2:	609a      	str	r2, [r3, #8]
}
 80095e4:	e7ff      	b.n	80095e6 <UART_SetConfig+0x6e2>
 80095e6:	bf00      	nop
 80095e8:	3714      	adds	r7, #20
 80095ea:	46bd      	mov	sp, r7
 80095ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095f0:	40011000 	.word	0x40011000
 80095f4:	40011400 	.word	0x40011400
 80095f8:	51eb851f 	.word	0x51eb851f

080095fc <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80095fc:	b084      	sub	sp, #16
 80095fe:	b480      	push	{r7}
 8009600:	b085      	sub	sp, #20
 8009602:	af00      	add	r7, sp, #0
 8009604:	6078      	str	r0, [r7, #4]
 8009606:	f107 001c 	add.w	r0, r7, #28
 800960a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800960e:	2300      	movs	r3, #0
 8009610:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8009612:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009614:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009616:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800961a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800961c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800961e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8009622:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8009626:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009628:	68fa      	ldr	r2, [r7, #12]
 800962a:	4313      	orrs	r3, r2
 800962c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	685b      	ldr	r3, [r3, #4]
 8009632:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8009636:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800963a:	68fa      	ldr	r2, [r7, #12]
 800963c:	431a      	orrs	r2, r3
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009642:	2300      	movs	r3, #0
}
 8009644:	4618      	mov	r0, r3
 8009646:	3714      	adds	r7, #20
 8009648:	46bd      	mov	sp, r7
 800964a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964e:	b004      	add	sp, #16
 8009650:	4770      	bx	lr

08009652 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8009652:	b480      	push	{r7}
 8009654:	b083      	sub	sp, #12
 8009656:	af00      	add	r7, sp, #0
 8009658:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009660:	4618      	mov	r0, r3
 8009662:	370c      	adds	r7, #12
 8009664:	46bd      	mov	sp, r7
 8009666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966a:	4770      	bx	lr

0800966c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800966c:	b480      	push	{r7}
 800966e:	b083      	sub	sp, #12
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	681a      	ldr	r2, [r3, #0]
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009680:	2300      	movs	r3, #0
}
 8009682:	4618      	mov	r0, r3
 8009684:	370c      	adds	r7, #12
 8009686:	46bd      	mov	sp, r7
 8009688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968c:	4770      	bx	lr

0800968e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800968e:	b580      	push	{r7, lr}
 8009690:	b082      	sub	sp, #8
 8009692:	af00      	add	r7, sp, #0
 8009694:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2203      	movs	r2, #3
 800969a:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800969c:	2002      	movs	r0, #2
 800969e:	f7f9 fcc7 	bl	8003030 <HAL_Delay>
  
  return HAL_OK;
 80096a2:	2300      	movs	r3, #0
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	3708      	adds	r7, #8
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}

080096ac <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80096ac:	b480      	push	{r7}
 80096ae:	b083      	sub	sp, #12
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f003 0303 	and.w	r3, r3, #3
}
 80096bc:	4618      	mov	r0, r3
 80096be:	370c      	adds	r7, #12
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr

080096c8 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b085      	sub	sp, #20
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
 80096d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80096d2:	2300      	movs	r3, #0
 80096d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	681a      	ldr	r2, [r3, #0]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80096e6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80096ec:	431a      	orrs	r2, r3
                       Command->CPSM);
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80096f2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80096f4:	68fa      	ldr	r2, [r7, #12]
 80096f6:	4313      	orrs	r3, r2
 80096f8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	68db      	ldr	r3, [r3, #12]
 80096fe:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8009702:	f023 030f 	bic.w	r3, r3, #15
 8009706:	68fa      	ldr	r2, [r7, #12]
 8009708:	431a      	orrs	r2, r3
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800970e:	2300      	movs	r3, #0
}
 8009710:	4618      	mov	r0, r3
 8009712:	3714      	adds	r7, #20
 8009714:	46bd      	mov	sp, r7
 8009716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971a:	4770      	bx	lr

0800971c <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800971c:	b480      	push	{r7}
 800971e:	b083      	sub	sp, #12
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	691b      	ldr	r3, [r3, #16]
 8009728:	b2db      	uxtb	r3, r3
}
 800972a:	4618      	mov	r0, r3
 800972c:	370c      	adds	r7, #12
 800972e:	46bd      	mov	sp, r7
 8009730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009734:	4770      	bx	lr

08009736 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8009736:	b480      	push	{r7}
 8009738:	b085      	sub	sp, #20
 800973a:	af00      	add	r7, sp, #0
 800973c:	6078      	str	r0, [r7, #4]
 800973e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	3314      	adds	r3, #20
 8009744:	461a      	mov	r2, r3
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	4413      	add	r3, r2
 800974a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
}  
 8009750:	4618      	mov	r0, r3
 8009752:	3714      	adds	r7, #20
 8009754:	46bd      	mov	sp, r7
 8009756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975a:	4770      	bx	lr

0800975c <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800975c:	b480      	push	{r7}
 800975e:	b085      	sub	sp, #20
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
 8009764:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009766:	2300      	movs	r3, #0
 8009768:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	681a      	ldr	r2, [r3, #0]
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	685a      	ldr	r2, [r3, #4]
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009782:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009788:	431a      	orrs	r2, r3
                       Data->DPSM);
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800978e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009790:	68fa      	ldr	r2, [r7, #12]
 8009792:	4313      	orrs	r3, r2
 8009794:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800979a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	431a      	orrs	r2, r3
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80097a6:	2300      	movs	r3, #0

}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3714      	adds	r7, #20
 80097ac:	46bd      	mov	sp, r7
 80097ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b2:	4770      	bx	lr

080097b4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b088      	sub	sp, #32
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80097c2:	2310      	movs	r3, #16
 80097c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80097c6:	2340      	movs	r3, #64	; 0x40
 80097c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80097ca:	2300      	movs	r3, #0
 80097cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80097ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097d2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80097d4:	f107 0308 	add.w	r3, r7, #8
 80097d8:	4619      	mov	r1, r3
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f7ff ff74 	bl	80096c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80097e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80097e4:	2110      	movs	r1, #16
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f000 fa40 	bl	8009c6c <SDMMC_GetCmdResp1>
 80097ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80097ee:	69fb      	ldr	r3, [r7, #28]
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	3720      	adds	r7, #32
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}

080097f8 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b088      	sub	sp, #32
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009806:	2311      	movs	r3, #17
 8009808:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800980a:	2340      	movs	r3, #64	; 0x40
 800980c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800980e:	2300      	movs	r3, #0
 8009810:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009812:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009816:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009818:	f107 0308 	add.w	r3, r7, #8
 800981c:	4619      	mov	r1, r3
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f7ff ff52 	bl	80096c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009824:	f241 3288 	movw	r2, #5000	; 0x1388
 8009828:	2111      	movs	r1, #17
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f000 fa1e 	bl	8009c6c <SDMMC_GetCmdResp1>
 8009830:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009832:	69fb      	ldr	r3, [r7, #28]
}
 8009834:	4618      	mov	r0, r3
 8009836:	3720      	adds	r7, #32
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}

0800983c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b088      	sub	sp, #32
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
 8009844:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800984a:	2312      	movs	r3, #18
 800984c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800984e:	2340      	movs	r3, #64	; 0x40
 8009850:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009852:	2300      	movs	r3, #0
 8009854:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009856:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800985a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800985c:	f107 0308 	add.w	r3, r7, #8
 8009860:	4619      	mov	r1, r3
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f7ff ff30 	bl	80096c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009868:	f241 3288 	movw	r2, #5000	; 0x1388
 800986c:	2112      	movs	r1, #18
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f000 f9fc 	bl	8009c6c <SDMMC_GetCmdResp1>
 8009874:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009876:	69fb      	ldr	r3, [r7, #28]
}
 8009878:	4618      	mov	r0, r3
 800987a:	3720      	adds	r7, #32
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}

08009880 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b088      	sub	sp, #32
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
 8009888:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800988e:	2318      	movs	r3, #24
 8009890:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009892:	2340      	movs	r3, #64	; 0x40
 8009894:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009896:	2300      	movs	r3, #0
 8009898:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800989a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800989e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80098a0:	f107 0308 	add.w	r3, r7, #8
 80098a4:	4619      	mov	r1, r3
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f7ff ff0e 	bl	80096c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80098ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80098b0:	2118      	movs	r1, #24
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f000 f9da 	bl	8009c6c <SDMMC_GetCmdResp1>
 80098b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80098ba:	69fb      	ldr	r3, [r7, #28]
}
 80098bc:	4618      	mov	r0, r3
 80098be:	3720      	adds	r7, #32
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}

080098c4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b088      	sub	sp, #32
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
 80098cc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80098d2:	2319      	movs	r3, #25
 80098d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80098d6:	2340      	movs	r3, #64	; 0x40
 80098d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80098da:	2300      	movs	r3, #0
 80098dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80098de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80098e4:	f107 0308 	add.w	r3, r7, #8
 80098e8:	4619      	mov	r1, r3
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f7ff feec 	bl	80096c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80098f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80098f4:	2119      	movs	r1, #25
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f000 f9b8 	bl	8009c6c <SDMMC_GetCmdResp1>
 80098fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80098fe:	69fb      	ldr	r3, [r7, #28]
}
 8009900:	4618      	mov	r0, r3
 8009902:	3720      	adds	r7, #32
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}

08009908 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b088      	sub	sp, #32
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009910:	2300      	movs	r3, #0
 8009912:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009914:	230c      	movs	r3, #12
 8009916:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009918:	2340      	movs	r3, #64	; 0x40
 800991a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800991c:	2300      	movs	r3, #0
 800991e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009920:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009924:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009926:	f107 0308 	add.w	r3, r7, #8
 800992a:	4619      	mov	r1, r3
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f7ff fecb 	bl	80096c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8009932:	4a05      	ldr	r2, [pc, #20]	; (8009948 <SDMMC_CmdStopTransfer+0x40>)
 8009934:	210c      	movs	r1, #12
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f000 f998 	bl	8009c6c <SDMMC_GetCmdResp1>
 800993c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800993e:	69fb      	ldr	r3, [r7, #28]
}
 8009940:	4618      	mov	r0, r3
 8009942:	3720      	adds	r7, #32
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}
 8009948:	05f5e100 	.word	0x05f5e100

0800994c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b08a      	sub	sp, #40	; 0x28
 8009950:	af00      	add	r7, sp, #0
 8009952:	60f8      	str	r0, [r7, #12]
 8009954:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800995c:	2307      	movs	r3, #7
 800995e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009960:	2340      	movs	r3, #64	; 0x40
 8009962:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009964:	2300      	movs	r3, #0
 8009966:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009968:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800996c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800996e:	f107 0310 	add.w	r3, r7, #16
 8009972:	4619      	mov	r1, r3
 8009974:	68f8      	ldr	r0, [r7, #12]
 8009976:	f7ff fea7 	bl	80096c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800997a:	f241 3288 	movw	r2, #5000	; 0x1388
 800997e:	2107      	movs	r1, #7
 8009980:	68f8      	ldr	r0, [r7, #12]
 8009982:	f000 f973 	bl	8009c6c <SDMMC_GetCmdResp1>
 8009986:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8009988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800998a:	4618      	mov	r0, r3
 800998c:	3728      	adds	r7, #40	; 0x28
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}

08009992 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8009992:	b580      	push	{r7, lr}
 8009994:	b088      	sub	sp, #32
 8009996:	af00      	add	r7, sp, #0
 8009998:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800999a:	2300      	movs	r3, #0
 800999c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800999e:	2300      	movs	r3, #0
 80099a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80099a2:	2300      	movs	r3, #0
 80099a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80099a6:	2300      	movs	r3, #0
 80099a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80099aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80099b0:	f107 0308 	add.w	r3, r7, #8
 80099b4:	4619      	mov	r1, r3
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f7ff fe86 	bl	80096c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f000 f92d 	bl	8009c1c <SDMMC_GetCmdError>
 80099c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80099c4:	69fb      	ldr	r3, [r7, #28]
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3720      	adds	r7, #32
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}

080099ce <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80099ce:	b580      	push	{r7, lr}
 80099d0:	b088      	sub	sp, #32
 80099d2:	af00      	add	r7, sp, #0
 80099d4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80099d6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80099da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80099dc:	2308      	movs	r3, #8
 80099de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80099e0:	2340      	movs	r3, #64	; 0x40
 80099e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80099e4:	2300      	movs	r3, #0
 80099e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80099e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099ec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80099ee:	f107 0308 	add.w	r3, r7, #8
 80099f2:	4619      	mov	r1, r3
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f7ff fe67 	bl	80096c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f000 fb16 	bl	800a02c <SDMMC_GetCmdResp7>
 8009a00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a02:	69fb      	ldr	r3, [r7, #28]
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	3720      	adds	r7, #32
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}

08009a0c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b088      	sub	sp, #32
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
 8009a14:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009a1a:	2337      	movs	r3, #55	; 0x37
 8009a1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009a1e:	2340      	movs	r3, #64	; 0x40
 8009a20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009a22:	2300      	movs	r3, #0
 8009a24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009a26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a2a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009a2c:	f107 0308 	add.w	r3, r7, #8
 8009a30:	4619      	mov	r1, r3
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f7ff fe48 	bl	80096c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8009a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a3c:	2137      	movs	r1, #55	; 0x37
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f000 f914 	bl	8009c6c <SDMMC_GetCmdResp1>
 8009a44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a46:	69fb      	ldr	r3, [r7, #28]
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	3720      	adds	r7, #32
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd80      	pop	{r7, pc}

08009a50 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b088      	sub	sp, #32
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
 8009a58:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009a60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009a64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009a66:	2329      	movs	r3, #41	; 0x29
 8009a68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009a6a:	2340      	movs	r3, #64	; 0x40
 8009a6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009a72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a76:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009a78:	f107 0308 	add.w	r3, r7, #8
 8009a7c:	4619      	mov	r1, r3
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f7ff fe22 	bl	80096c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f000 fa23 	bl	8009ed0 <SDMMC_GetCmdResp3>
 8009a8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a8c:	69fb      	ldr	r3, [r7, #28]
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3720      	adds	r7, #32
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}

08009a96 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8009a96:	b580      	push	{r7, lr}
 8009a98:	b088      	sub	sp, #32
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	6078      	str	r0, [r7, #4]
 8009a9e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009aa4:	2306      	movs	r3, #6
 8009aa6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009aa8:	2340      	movs	r3, #64	; 0x40
 8009aaa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009aac:	2300      	movs	r3, #0
 8009aae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009ab0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ab4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009ab6:	f107 0308 	add.w	r3, r7, #8
 8009aba:	4619      	mov	r1, r3
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f7ff fe03 	bl	80096c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8009ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ac6:	2106      	movs	r1, #6
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f000 f8cf 	bl	8009c6c <SDMMC_GetCmdResp1>
 8009ace:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ad0:	69fb      	ldr	r3, [r7, #28]
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3720      	adds	r7, #32
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}

08009ada <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8009ada:	b580      	push	{r7, lr}
 8009adc:	b088      	sub	sp, #32
 8009ade:	af00      	add	r7, sp, #0
 8009ae0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009ae6:	2333      	movs	r3, #51	; 0x33
 8009ae8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009aea:	2340      	movs	r3, #64	; 0x40
 8009aec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009aee:	2300      	movs	r3, #0
 8009af0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009af2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009af6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009af8:	f107 0308 	add.w	r3, r7, #8
 8009afc:	4619      	mov	r1, r3
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f7ff fde2 	bl	80096c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8009b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b08:	2133      	movs	r1, #51	; 0x33
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f000 f8ae 	bl	8009c6c <SDMMC_GetCmdResp1>
 8009b10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b12:	69fb      	ldr	r3, [r7, #28]
}
 8009b14:	4618      	mov	r0, r3
 8009b16:	3720      	adds	r7, #32
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}

08009b1c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b088      	sub	sp, #32
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009b24:	2300      	movs	r3, #0
 8009b26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009b28:	2302      	movs	r3, #2
 8009b2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009b2c:	23c0      	movs	r3, #192	; 0xc0
 8009b2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009b30:	2300      	movs	r3, #0
 8009b32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009b34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b38:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009b3a:	f107 0308 	add.w	r3, r7, #8
 8009b3e:	4619      	mov	r1, r3
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f7ff fdc1 	bl	80096c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f000 f97c 	bl	8009e44 <SDMMC_GetCmdResp2>
 8009b4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b4e:	69fb      	ldr	r3, [r7, #28]
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	3720      	adds	r7, #32
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}

08009b58 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b088      	sub	sp, #32
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
 8009b60:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009b66:	2309      	movs	r3, #9
 8009b68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009b6a:	23c0      	movs	r3, #192	; 0xc0
 8009b6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009b72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b76:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009b78:	f107 0308 	add.w	r3, r7, #8
 8009b7c:	4619      	mov	r1, r3
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f7ff fda2 	bl	80096c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f000 f95d 	bl	8009e44 <SDMMC_GetCmdResp2>
 8009b8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b8c:	69fb      	ldr	r3, [r7, #28]
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3720      	adds	r7, #32
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}

08009b96 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8009b96:	b580      	push	{r7, lr}
 8009b98:	b088      	sub	sp, #32
 8009b9a:	af00      	add	r7, sp, #0
 8009b9c:	6078      	str	r0, [r7, #4]
 8009b9e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009ba4:	2303      	movs	r3, #3
 8009ba6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009ba8:	2340      	movs	r3, #64	; 0x40
 8009baa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009bac:	2300      	movs	r3, #0
 8009bae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009bb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009bb4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009bb6:	f107 0308 	add.w	r3, r7, #8
 8009bba:	4619      	mov	r1, r3
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f7ff fd83 	bl	80096c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009bc2:	683a      	ldr	r2, [r7, #0]
 8009bc4:	2103      	movs	r1, #3
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f000 f9bc 	bl	8009f44 <SDMMC_GetCmdResp6>
 8009bcc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009bce:	69fb      	ldr	r3, [r7, #28]
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	3720      	adds	r7, #32
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}

08009bd8 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b088      	sub	sp, #32
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
 8009be0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009be6:	230d      	movs	r3, #13
 8009be8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009bea:	2340      	movs	r3, #64	; 0x40
 8009bec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009bf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009bf6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009bf8:	f107 0308 	add.w	r3, r7, #8
 8009bfc:	4619      	mov	r1, r3
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f7ff fd62 	bl	80096c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8009c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c08:	210d      	movs	r1, #13
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f000 f82e 	bl	8009c6c <SDMMC_GetCmdResp1>
 8009c10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c12:	69fb      	ldr	r3, [r7, #28]
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	3720      	adds	r7, #32
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}

08009c1c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8009c1c:	b490      	push	{r4, r7}
 8009c1e:	b082      	sub	sp, #8
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009c24:	4b0f      	ldr	r3, [pc, #60]	; (8009c64 <SDMMC_GetCmdError+0x48>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	4a0f      	ldr	r2, [pc, #60]	; (8009c68 <SDMMC_GetCmdError+0x4c>)
 8009c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8009c2e:	0a5b      	lsrs	r3, r3, #9
 8009c30:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c34:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009c38:	4623      	mov	r3, r4
 8009c3a:	1e5c      	subs	r4, r3, #1
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d102      	bne.n	8009c46 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009c40:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009c44:	e009      	b.n	8009c5a <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d0f2      	beq.n	8009c38 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	22c5      	movs	r2, #197	; 0xc5
 8009c56:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8009c58:	2300      	movs	r3, #0
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3708      	adds	r7, #8
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bc90      	pop	{r4, r7}
 8009c62:	4770      	bx	lr
 8009c64:	20000008 	.word	0x20000008
 8009c68:	10624dd3 	.word	0x10624dd3

08009c6c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009c6c:	b590      	push	{r4, r7, lr}
 8009c6e:	b087      	sub	sp, #28
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	60f8      	str	r0, [r7, #12]
 8009c74:	460b      	mov	r3, r1
 8009c76:	607a      	str	r2, [r7, #4]
 8009c78:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009c7a:	4b6f      	ldr	r3, [pc, #444]	; (8009e38 <SDMMC_GetCmdResp1+0x1cc>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4a6f      	ldr	r2, [pc, #444]	; (8009e3c <SDMMC_GetCmdResp1+0x1d0>)
 8009c80:	fba2 2303 	umull	r2, r3, r2, r3
 8009c84:	0a5b      	lsrs	r3, r3, #9
 8009c86:	687a      	ldr	r2, [r7, #4]
 8009c88:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009c8c:	4623      	mov	r3, r4
 8009c8e:	1e5c      	subs	r4, r3, #1
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d102      	bne.n	8009c9a <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009c94:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009c98:	e0c9      	b.n	8009e2e <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c9e:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009ca0:	697b      	ldr	r3, [r7, #20]
 8009ca2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d0f0      	beq.n	8009c8c <SDMMC_GetCmdResp1+0x20>
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d1eb      	bne.n	8009c8c <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cb8:	f003 0304 	and.w	r3, r3, #4
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d004      	beq.n	8009cca <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	2204      	movs	r2, #4
 8009cc4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009cc6:	2304      	movs	r3, #4
 8009cc8:	e0b1      	b.n	8009e2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cce:	f003 0301 	and.w	r3, r3, #1
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d004      	beq.n	8009ce0 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2201      	movs	r2, #1
 8009cda:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009cdc:	2301      	movs	r3, #1
 8009cde:	e0a6      	b.n	8009e2e <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	22c5      	movs	r2, #197	; 0xc5
 8009ce4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009ce6:	68f8      	ldr	r0, [r7, #12]
 8009ce8:	f7ff fd18 	bl	800971c <SDIO_GetCommandResponse>
 8009cec:	4603      	mov	r3, r0
 8009cee:	461a      	mov	r2, r3
 8009cf0:	7afb      	ldrb	r3, [r7, #11]
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d001      	beq.n	8009cfa <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	e099      	b.n	8009e2e <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009cfa:	2100      	movs	r1, #0
 8009cfc:	68f8      	ldr	r0, [r7, #12]
 8009cfe:	f7ff fd1a 	bl	8009736 <SDIO_GetResponse>
 8009d02:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009d04:	693a      	ldr	r2, [r7, #16]
 8009d06:	4b4e      	ldr	r3, [pc, #312]	; (8009e40 <SDMMC_GetCmdResp1+0x1d4>)
 8009d08:	4013      	ands	r3, r2
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d101      	bne.n	8009d12 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	e08d      	b.n	8009e2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009d12:	693b      	ldr	r3, [r7, #16]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	da02      	bge.n	8009d1e <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009d18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009d1c:	e087      	b.n	8009e2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009d1e:	693b      	ldr	r3, [r7, #16]
 8009d20:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d001      	beq.n	8009d2c <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009d28:	2340      	movs	r3, #64	; 0x40
 8009d2a:	e080      	b.n	8009e2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009d2c:	693b      	ldr	r3, [r7, #16]
 8009d2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d001      	beq.n	8009d3a <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009d36:	2380      	movs	r3, #128	; 0x80
 8009d38:	e079      	b.n	8009e2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009d3a:	693b      	ldr	r3, [r7, #16]
 8009d3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d002      	beq.n	8009d4a <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009d44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d48:	e071      	b.n	8009e2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009d4a:	693b      	ldr	r3, [r7, #16]
 8009d4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d002      	beq.n	8009d5a <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009d54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d58:	e069      	b.n	8009e2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d002      	beq.n	8009d6a <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009d64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d68:	e061      	b.n	8009e2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d002      	beq.n	8009d7a <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009d74:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009d78:	e059      	b.n	8009e2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009d7a:	693b      	ldr	r3, [r7, #16]
 8009d7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d002      	beq.n	8009d8a <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009d84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d88:	e051      	b.n	8009e2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009d8a:	693b      	ldr	r3, [r7, #16]
 8009d8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d002      	beq.n	8009d9a <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009d94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009d98:	e049      	b.n	8009e2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009d9a:	693b      	ldr	r3, [r7, #16]
 8009d9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d002      	beq.n	8009daa <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009da4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009da8:	e041      	b.n	8009e2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d002      	beq.n	8009dba <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8009db4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009db8:	e039      	b.n	8009e2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009dba:	693b      	ldr	r3, [r7, #16]
 8009dbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d002      	beq.n	8009dca <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009dc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009dc8:	e031      	b.n	8009e2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009dca:	693b      	ldr	r3, [r7, #16]
 8009dcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d002      	beq.n	8009dda <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009dd4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009dd8:	e029      	b.n	8009e2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009dda:	693b      	ldr	r3, [r7, #16]
 8009ddc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d002      	beq.n	8009dea <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009de4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009de8:	e021      	b.n	8009e2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009dea:	693b      	ldr	r3, [r7, #16]
 8009dec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d002      	beq.n	8009dfa <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009df4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009df8:	e019      	b.n	8009e2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009dfa:	693b      	ldr	r3, [r7, #16]
 8009dfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d002      	beq.n	8009e0a <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009e04:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009e08:	e011      	b.n	8009e2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009e0a:	693b      	ldr	r3, [r7, #16]
 8009e0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d002      	beq.n	8009e1a <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009e14:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009e18:	e009      	b.n	8009e2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	f003 0308 	and.w	r3, r3, #8
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d002      	beq.n	8009e2a <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009e24:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009e28:	e001      	b.n	8009e2e <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009e2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	371c      	adds	r7, #28
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd90      	pop	{r4, r7, pc}
 8009e36:	bf00      	nop
 8009e38:	20000008 	.word	0x20000008
 8009e3c:	10624dd3 	.word	0x10624dd3
 8009e40:	fdffe008 	.word	0xfdffe008

08009e44 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8009e44:	b490      	push	{r4, r7}
 8009e46:	b084      	sub	sp, #16
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009e4c:	4b1e      	ldr	r3, [pc, #120]	; (8009ec8 <SDMMC_GetCmdResp2+0x84>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	4a1e      	ldr	r2, [pc, #120]	; (8009ecc <SDMMC_GetCmdResp2+0x88>)
 8009e52:	fba2 2303 	umull	r2, r3, r2, r3
 8009e56:	0a5b      	lsrs	r3, r3, #9
 8009e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e5c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009e60:	4623      	mov	r3, r4
 8009e62:	1e5c      	subs	r4, r3, #1
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d102      	bne.n	8009e6e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009e68:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009e6c:	e026      	b.n	8009ebc <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e72:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d0f0      	beq.n	8009e60 <SDMMC_GetCmdResp2+0x1c>
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d1eb      	bne.n	8009e60 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e8c:	f003 0304 	and.w	r3, r3, #4
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d004      	beq.n	8009e9e <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2204      	movs	r2, #4
 8009e98:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009e9a:	2304      	movs	r3, #4
 8009e9c:	e00e      	b.n	8009ebc <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ea2:	f003 0301 	and.w	r3, r3, #1
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d004      	beq.n	8009eb4 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2201      	movs	r2, #1
 8009eae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	e003      	b.n	8009ebc <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	22c5      	movs	r2, #197	; 0xc5
 8009eb8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009eba:	2300      	movs	r3, #0
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	3710      	adds	r7, #16
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bc90      	pop	{r4, r7}
 8009ec4:	4770      	bx	lr
 8009ec6:	bf00      	nop
 8009ec8:	20000008 	.word	0x20000008
 8009ecc:	10624dd3 	.word	0x10624dd3

08009ed0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8009ed0:	b490      	push	{r4, r7}
 8009ed2:	b084      	sub	sp, #16
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009ed8:	4b18      	ldr	r3, [pc, #96]	; (8009f3c <SDMMC_GetCmdResp3+0x6c>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	4a18      	ldr	r2, [pc, #96]	; (8009f40 <SDMMC_GetCmdResp3+0x70>)
 8009ede:	fba2 2303 	umull	r2, r3, r2, r3
 8009ee2:	0a5b      	lsrs	r3, r3, #9
 8009ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ee8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009eec:	4623      	mov	r3, r4
 8009eee:	1e5c      	subs	r4, r3, #1
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d102      	bne.n	8009efa <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009ef4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009ef8:	e01b      	b.n	8009f32 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009efe:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d0f0      	beq.n	8009eec <SDMMC_GetCmdResp3+0x1c>
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d1eb      	bne.n	8009eec <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f18:	f003 0304 	and.w	r3, r3, #4
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d004      	beq.n	8009f2a <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2204      	movs	r2, #4
 8009f24:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009f26:	2304      	movs	r3, #4
 8009f28:	e003      	b.n	8009f32 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	22c5      	movs	r2, #197	; 0xc5
 8009f2e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009f30:	2300      	movs	r3, #0
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	3710      	adds	r7, #16
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bc90      	pop	{r4, r7}
 8009f3a:	4770      	bx	lr
 8009f3c:	20000008 	.word	0x20000008
 8009f40:	10624dd3 	.word	0x10624dd3

08009f44 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009f44:	b590      	push	{r4, r7, lr}
 8009f46:	b087      	sub	sp, #28
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	60f8      	str	r0, [r7, #12]
 8009f4c:	460b      	mov	r3, r1
 8009f4e:	607a      	str	r2, [r7, #4]
 8009f50:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009f52:	4b34      	ldr	r3, [pc, #208]	; (800a024 <SDMMC_GetCmdResp6+0xe0>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	4a34      	ldr	r2, [pc, #208]	; (800a028 <SDMMC_GetCmdResp6+0xe4>)
 8009f58:	fba2 2303 	umull	r2, r3, r2, r3
 8009f5c:	0a5b      	lsrs	r3, r3, #9
 8009f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f62:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009f66:	4623      	mov	r3, r4
 8009f68:	1e5c      	subs	r4, r3, #1
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d102      	bne.n	8009f74 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009f6e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009f72:	e052      	b.n	800a01a <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f78:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d0f0      	beq.n	8009f66 <SDMMC_GetCmdResp6+0x22>
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d1eb      	bne.n	8009f66 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f92:	f003 0304 	and.w	r3, r3, #4
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d004      	beq.n	8009fa4 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	2204      	movs	r2, #4
 8009f9e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009fa0:	2304      	movs	r3, #4
 8009fa2:	e03a      	b.n	800a01a <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fa8:	f003 0301 	and.w	r3, r3, #1
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d004      	beq.n	8009fba <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	e02f      	b.n	800a01a <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009fba:	68f8      	ldr	r0, [r7, #12]
 8009fbc:	f7ff fbae 	bl	800971c <SDIO_GetCommandResponse>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	461a      	mov	r2, r3
 8009fc4:	7afb      	ldrb	r3, [r7, #11]
 8009fc6:	4293      	cmp	r3, r2
 8009fc8:	d001      	beq.n	8009fce <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009fca:	2301      	movs	r3, #1
 8009fcc:	e025      	b.n	800a01a <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	22c5      	movs	r2, #197	; 0xc5
 8009fd2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009fd4:	2100      	movs	r1, #0
 8009fd6:	68f8      	ldr	r0, [r7, #12]
 8009fd8:	f7ff fbad 	bl	8009736 <SDIO_GetResponse>
 8009fdc:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009fde:	693b      	ldr	r3, [r7, #16]
 8009fe0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d106      	bne.n	8009ff6 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009fe8:	693b      	ldr	r3, [r7, #16]
 8009fea:	0c1b      	lsrs	r3, r3, #16
 8009fec:	b29a      	uxth	r2, r3
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	e011      	b.n	800a01a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d002      	beq.n	800a006 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a000:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a004:	e009      	b.n	800a01a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d002      	beq.n	800a016 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a010:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a014:	e001      	b.n	800a01a <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a016:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a01a:	4618      	mov	r0, r3
 800a01c:	371c      	adds	r7, #28
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd90      	pop	{r4, r7, pc}
 800a022:	bf00      	nop
 800a024:	20000008 	.word	0x20000008
 800a028:	10624dd3 	.word	0x10624dd3

0800a02c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800a02c:	b490      	push	{r4, r7}
 800a02e:	b084      	sub	sp, #16
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a034:	4b21      	ldr	r3, [pc, #132]	; (800a0bc <SDMMC_GetCmdResp7+0x90>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	4a21      	ldr	r2, [pc, #132]	; (800a0c0 <SDMMC_GetCmdResp7+0x94>)
 800a03a:	fba2 2303 	umull	r2, r3, r2, r3
 800a03e:	0a5b      	lsrs	r3, r3, #9
 800a040:	f241 3288 	movw	r2, #5000	; 0x1388
 800a044:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a048:	4623      	mov	r3, r4
 800a04a:	1e5c      	subs	r4, r3, #1
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d102      	bne.n	800a056 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a050:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a054:	e02c      	b.n	800a0b0 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a05a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a062:	2b00      	cmp	r3, #0
 800a064:	d0f0      	beq.n	800a048 <SDMMC_GetCmdResp7+0x1c>
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d1eb      	bne.n	800a048 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a074:	f003 0304 	and.w	r3, r3, #4
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d004      	beq.n	800a086 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2204      	movs	r2, #4
 800a080:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a082:	2304      	movs	r3, #4
 800a084:	e014      	b.n	800a0b0 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a08a:	f003 0301 	and.w	r3, r3, #1
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d004      	beq.n	800a09c <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2201      	movs	r2, #1
 800a096:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a098:	2301      	movs	r3, #1
 800a09a:	e009      	b.n	800a0b0 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d002      	beq.n	800a0ae <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2240      	movs	r2, #64	; 0x40
 800a0ac:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a0ae:	2300      	movs	r3, #0
  
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	3710      	adds	r7, #16
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bc90      	pop	{r4, r7}
 800a0b8:	4770      	bx	lr
 800a0ba:	bf00      	nop
 800a0bc:	20000008 	.word	0x20000008
 800a0c0:	10624dd3 	.word	0x10624dd3

0800a0c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a0c4:	b084      	sub	sp, #16
 800a0c6:	b580      	push	{r7, lr}
 800a0c8:	b084      	sub	sp, #16
 800a0ca:	af00      	add	r7, sp, #0
 800a0cc:	6078      	str	r0, [r7, #4]
 800a0ce:	f107 001c 	add.w	r0, r7, #28
 800a0d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d8:	2b01      	cmp	r3, #1
 800a0da:	d122      	bne.n	800a122 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	68db      	ldr	r3, [r3, #12]
 800a0ec:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a0f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0f4:	687a      	ldr	r2, [r7, #4]
 800a0f6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	68db      	ldr	r3, [r3, #12]
 800a0fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a104:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a106:	2b01      	cmp	r3, #1
 800a108:	d105      	bne.n	800a116 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	68db      	ldr	r3, [r3, #12]
 800a10e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f001 fa7c 	bl	800b614 <USB_CoreReset>
 800a11c:	4603      	mov	r3, r0
 800a11e:	73fb      	strb	r3, [r7, #15]
 800a120:	e01a      	b.n	800a158 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	68db      	ldr	r3, [r3, #12]
 800a126:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f001 fa70 	bl	800b614 <USB_CoreReset>
 800a134:	4603      	mov	r3, r0
 800a136:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a138:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d106      	bne.n	800a14c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a142:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	639a      	str	r2, [r3, #56]	; 0x38
 800a14a:	e005      	b.n	800a158 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a150:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a15a:	2b01      	cmp	r3, #1
 800a15c:	d10b      	bne.n	800a176 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	689b      	ldr	r3, [r3, #8]
 800a162:	f043 0206 	orr.w	r2, r3, #6
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	689b      	ldr	r3, [r3, #8]
 800a16e:	f043 0220 	orr.w	r2, r3, #32
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a176:	7bfb      	ldrb	r3, [r7, #15]
}
 800a178:	4618      	mov	r0, r3
 800a17a:	3710      	adds	r7, #16
 800a17c:	46bd      	mov	sp, r7
 800a17e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a182:	b004      	add	sp, #16
 800a184:	4770      	bx	lr
	...

0800a188 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a188:	b480      	push	{r7}
 800a18a:	b087      	sub	sp, #28
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	60f8      	str	r0, [r7, #12]
 800a190:	60b9      	str	r1, [r7, #8]
 800a192:	4613      	mov	r3, r2
 800a194:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a196:	79fb      	ldrb	r3, [r7, #7]
 800a198:	2b02      	cmp	r3, #2
 800a19a:	d165      	bne.n	800a268 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	4a41      	ldr	r2, [pc, #260]	; (800a2a4 <USB_SetTurnaroundTime+0x11c>)
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	d906      	bls.n	800a1b2 <USB_SetTurnaroundTime+0x2a>
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	4a40      	ldr	r2, [pc, #256]	; (800a2a8 <USB_SetTurnaroundTime+0x120>)
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	d802      	bhi.n	800a1b2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a1ac:	230f      	movs	r3, #15
 800a1ae:	617b      	str	r3, [r7, #20]
 800a1b0:	e062      	b.n	800a278 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	4a3c      	ldr	r2, [pc, #240]	; (800a2a8 <USB_SetTurnaroundTime+0x120>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d906      	bls.n	800a1c8 <USB_SetTurnaroundTime+0x40>
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	4a3b      	ldr	r2, [pc, #236]	; (800a2ac <USB_SetTurnaroundTime+0x124>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d802      	bhi.n	800a1c8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a1c2:	230e      	movs	r3, #14
 800a1c4:	617b      	str	r3, [r7, #20]
 800a1c6:	e057      	b.n	800a278 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	4a38      	ldr	r2, [pc, #224]	; (800a2ac <USB_SetTurnaroundTime+0x124>)
 800a1cc:	4293      	cmp	r3, r2
 800a1ce:	d906      	bls.n	800a1de <USB_SetTurnaroundTime+0x56>
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	4a37      	ldr	r2, [pc, #220]	; (800a2b0 <USB_SetTurnaroundTime+0x128>)
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	d802      	bhi.n	800a1de <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a1d8:	230d      	movs	r3, #13
 800a1da:	617b      	str	r3, [r7, #20]
 800a1dc:	e04c      	b.n	800a278 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	4a33      	ldr	r2, [pc, #204]	; (800a2b0 <USB_SetTurnaroundTime+0x128>)
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	d906      	bls.n	800a1f4 <USB_SetTurnaroundTime+0x6c>
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	4a32      	ldr	r2, [pc, #200]	; (800a2b4 <USB_SetTurnaroundTime+0x12c>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d802      	bhi.n	800a1f4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a1ee:	230c      	movs	r3, #12
 800a1f0:	617b      	str	r3, [r7, #20]
 800a1f2:	e041      	b.n	800a278 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	4a2f      	ldr	r2, [pc, #188]	; (800a2b4 <USB_SetTurnaroundTime+0x12c>)
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d906      	bls.n	800a20a <USB_SetTurnaroundTime+0x82>
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	4a2e      	ldr	r2, [pc, #184]	; (800a2b8 <USB_SetTurnaroundTime+0x130>)
 800a200:	4293      	cmp	r3, r2
 800a202:	d802      	bhi.n	800a20a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a204:	230b      	movs	r3, #11
 800a206:	617b      	str	r3, [r7, #20]
 800a208:	e036      	b.n	800a278 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	4a2a      	ldr	r2, [pc, #168]	; (800a2b8 <USB_SetTurnaroundTime+0x130>)
 800a20e:	4293      	cmp	r3, r2
 800a210:	d906      	bls.n	800a220 <USB_SetTurnaroundTime+0x98>
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	4a29      	ldr	r2, [pc, #164]	; (800a2bc <USB_SetTurnaroundTime+0x134>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d802      	bhi.n	800a220 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a21a:	230a      	movs	r3, #10
 800a21c:	617b      	str	r3, [r7, #20]
 800a21e:	e02b      	b.n	800a278 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	4a26      	ldr	r2, [pc, #152]	; (800a2bc <USB_SetTurnaroundTime+0x134>)
 800a224:	4293      	cmp	r3, r2
 800a226:	d906      	bls.n	800a236 <USB_SetTurnaroundTime+0xae>
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	4a25      	ldr	r2, [pc, #148]	; (800a2c0 <USB_SetTurnaroundTime+0x138>)
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d802      	bhi.n	800a236 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a230:	2309      	movs	r3, #9
 800a232:	617b      	str	r3, [r7, #20]
 800a234:	e020      	b.n	800a278 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	4a21      	ldr	r2, [pc, #132]	; (800a2c0 <USB_SetTurnaroundTime+0x138>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d906      	bls.n	800a24c <USB_SetTurnaroundTime+0xc4>
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	4a20      	ldr	r2, [pc, #128]	; (800a2c4 <USB_SetTurnaroundTime+0x13c>)
 800a242:	4293      	cmp	r3, r2
 800a244:	d802      	bhi.n	800a24c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a246:	2308      	movs	r3, #8
 800a248:	617b      	str	r3, [r7, #20]
 800a24a:	e015      	b.n	800a278 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	4a1d      	ldr	r2, [pc, #116]	; (800a2c4 <USB_SetTurnaroundTime+0x13c>)
 800a250:	4293      	cmp	r3, r2
 800a252:	d906      	bls.n	800a262 <USB_SetTurnaroundTime+0xda>
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	4a1c      	ldr	r2, [pc, #112]	; (800a2c8 <USB_SetTurnaroundTime+0x140>)
 800a258:	4293      	cmp	r3, r2
 800a25a:	d802      	bhi.n	800a262 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a25c:	2307      	movs	r3, #7
 800a25e:	617b      	str	r3, [r7, #20]
 800a260:	e00a      	b.n	800a278 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a262:	2306      	movs	r3, #6
 800a264:	617b      	str	r3, [r7, #20]
 800a266:	e007      	b.n	800a278 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a268:	79fb      	ldrb	r3, [r7, #7]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d102      	bne.n	800a274 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a26e:	2309      	movs	r3, #9
 800a270:	617b      	str	r3, [r7, #20]
 800a272:	e001      	b.n	800a278 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a274:	2309      	movs	r3, #9
 800a276:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	68db      	ldr	r3, [r3, #12]
 800a27c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	68da      	ldr	r2, [r3, #12]
 800a288:	697b      	ldr	r3, [r7, #20]
 800a28a:	029b      	lsls	r3, r3, #10
 800a28c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a290:	431a      	orrs	r2, r3
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a296:	2300      	movs	r3, #0
}
 800a298:	4618      	mov	r0, r3
 800a29a:	371c      	adds	r7, #28
 800a29c:	46bd      	mov	sp, r7
 800a29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a2:	4770      	bx	lr
 800a2a4:	00d8acbf 	.word	0x00d8acbf
 800a2a8:	00e4e1bf 	.word	0x00e4e1bf
 800a2ac:	00f423ff 	.word	0x00f423ff
 800a2b0:	0106737f 	.word	0x0106737f
 800a2b4:	011a499f 	.word	0x011a499f
 800a2b8:	01312cff 	.word	0x01312cff
 800a2bc:	014ca43f 	.word	0x014ca43f
 800a2c0:	016e35ff 	.word	0x016e35ff
 800a2c4:	01a6ab1f 	.word	0x01a6ab1f
 800a2c8:	01e847ff 	.word	0x01e847ff

0800a2cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b083      	sub	sp, #12
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	689b      	ldr	r3, [r3, #8]
 800a2d8:	f043 0201 	orr.w	r2, r3, #1
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a2e0:	2300      	movs	r3, #0
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	370c      	adds	r7, #12
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ec:	4770      	bx	lr

0800a2ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a2ee:	b480      	push	{r7}
 800a2f0:	b083      	sub	sp, #12
 800a2f2:	af00      	add	r7, sp, #0
 800a2f4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	689b      	ldr	r3, [r3, #8]
 800a2fa:	f023 0201 	bic.w	r2, r3, #1
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a302:	2300      	movs	r3, #0
}
 800a304:	4618      	mov	r0, r3
 800a306:	370c      	adds	r7, #12
 800a308:	46bd      	mov	sp, r7
 800a30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30e:	4770      	bx	lr

0800a310 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b082      	sub	sp, #8
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
 800a318:	460b      	mov	r3, r1
 800a31a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	68db      	ldr	r3, [r3, #12]
 800a320:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a328:	78fb      	ldrb	r3, [r7, #3]
 800a32a:	2b01      	cmp	r3, #1
 800a32c:	d106      	bne.n	800a33c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	68db      	ldr	r3, [r3, #12]
 800a332:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	60da      	str	r2, [r3, #12]
 800a33a:	e00b      	b.n	800a354 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800a33c:	78fb      	ldrb	r3, [r7, #3]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d106      	bne.n	800a350 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	68db      	ldr	r3, [r3, #12]
 800a346:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	60da      	str	r2, [r3, #12]
 800a34e:	e001      	b.n	800a354 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800a350:	2301      	movs	r3, #1
 800a352:	e003      	b.n	800a35c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800a354:	2032      	movs	r0, #50	; 0x32
 800a356:	f7f8 fe6b 	bl	8003030 <HAL_Delay>

  return HAL_OK;
 800a35a:	2300      	movs	r3, #0
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	3708      	adds	r7, #8
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}

0800a364 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a364:	b084      	sub	sp, #16
 800a366:	b580      	push	{r7, lr}
 800a368:	b086      	sub	sp, #24
 800a36a:	af00      	add	r7, sp, #0
 800a36c:	6078      	str	r0, [r7, #4]
 800a36e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a372:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a376:	2300      	movs	r3, #0
 800a378:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a37e:	2300      	movs	r3, #0
 800a380:	613b      	str	r3, [r7, #16]
 800a382:	e009      	b.n	800a398 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a384:	687a      	ldr	r2, [r7, #4]
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	3340      	adds	r3, #64	; 0x40
 800a38a:	009b      	lsls	r3, r3, #2
 800a38c:	4413      	add	r3, r2
 800a38e:	2200      	movs	r2, #0
 800a390:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	3301      	adds	r3, #1
 800a396:	613b      	str	r3, [r7, #16]
 800a398:	693b      	ldr	r3, [r7, #16]
 800a39a:	2b0e      	cmp	r3, #14
 800a39c:	d9f2      	bls.n	800a384 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a39e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d112      	bne.n	800a3ca <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3a8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3b4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3c0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	639a      	str	r2, [r3, #56]	; 0x38
 800a3c8:	e00b      	b.n	800a3e2 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3da:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a3e8:	461a      	mov	r2, r3
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3f4:	4619      	mov	r1, r3
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3fc:	461a      	mov	r2, r3
 800a3fe:	680b      	ldr	r3, [r1, #0]
 800a400:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a404:	2b01      	cmp	r3, #1
 800a406:	d10c      	bne.n	800a422 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d104      	bne.n	800a418 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a40e:	2100      	movs	r1, #0
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	f000 f961 	bl	800a6d8 <USB_SetDevSpeed>
 800a416:	e008      	b.n	800a42a <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a418:	2101      	movs	r1, #1
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f000 f95c 	bl	800a6d8 <USB_SetDevSpeed>
 800a420:	e003      	b.n	800a42a <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a422:	2103      	movs	r1, #3
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f000 f957 	bl	800a6d8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a42a:	2110      	movs	r1, #16
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f000 f90b 	bl	800a648 <USB_FlushTxFifo>
 800a432:	4603      	mov	r3, r0
 800a434:	2b00      	cmp	r3, #0
 800a436:	d001      	beq.n	800a43c <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 800a438:	2301      	movs	r3, #1
 800a43a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	f000 f929 	bl	800a694 <USB_FlushRxFifo>
 800a442:	4603      	mov	r3, r0
 800a444:	2b00      	cmp	r3, #0
 800a446:	d001      	beq.n	800a44c <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 800a448:	2301      	movs	r3, #1
 800a44a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a452:	461a      	mov	r2, r3
 800a454:	2300      	movs	r3, #0
 800a456:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a45e:	461a      	mov	r2, r3
 800a460:	2300      	movs	r3, #0
 800a462:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a46a:	461a      	mov	r2, r3
 800a46c:	2300      	movs	r3, #0
 800a46e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a470:	2300      	movs	r3, #0
 800a472:	613b      	str	r3, [r7, #16]
 800a474:	e043      	b.n	800a4fe <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a476:	693b      	ldr	r3, [r7, #16]
 800a478:	015a      	lsls	r2, r3, #5
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	4413      	add	r3, r2
 800a47e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a488:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a48c:	d118      	bne.n	800a4c0 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 800a48e:	693b      	ldr	r3, [r7, #16]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d10a      	bne.n	800a4aa <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a494:	693b      	ldr	r3, [r7, #16]
 800a496:	015a      	lsls	r2, r3, #5
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	4413      	add	r3, r2
 800a49c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4a0:	461a      	mov	r2, r3
 800a4a2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a4a6:	6013      	str	r3, [r2, #0]
 800a4a8:	e013      	b.n	800a4d2 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	015a      	lsls	r2, r3, #5
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	4413      	add	r3, r2
 800a4b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4b6:	461a      	mov	r2, r3
 800a4b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a4bc:	6013      	str	r3, [r2, #0]
 800a4be:	e008      	b.n	800a4d2 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	015a      	lsls	r2, r3, #5
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	4413      	add	r3, r2
 800a4c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4cc:	461a      	mov	r2, r3
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a4d2:	693b      	ldr	r3, [r7, #16]
 800a4d4:	015a      	lsls	r2, r3, #5
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	4413      	add	r3, r2
 800a4da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4de:	461a      	mov	r2, r3
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	015a      	lsls	r2, r3, #5
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	4413      	add	r3, r2
 800a4ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4f0:	461a      	mov	r2, r3
 800a4f2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a4f6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	3301      	adds	r3, #1
 800a4fc:	613b      	str	r3, [r7, #16]
 800a4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a500:	693a      	ldr	r2, [r7, #16]
 800a502:	429a      	cmp	r2, r3
 800a504:	d3b7      	bcc.n	800a476 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a506:	2300      	movs	r3, #0
 800a508:	613b      	str	r3, [r7, #16]
 800a50a:	e043      	b.n	800a594 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a50c:	693b      	ldr	r3, [r7, #16]
 800a50e:	015a      	lsls	r2, r3, #5
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	4413      	add	r3, r2
 800a514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a51e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a522:	d118      	bne.n	800a556 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 800a524:	693b      	ldr	r3, [r7, #16]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d10a      	bne.n	800a540 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a52a:	693b      	ldr	r3, [r7, #16]
 800a52c:	015a      	lsls	r2, r3, #5
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	4413      	add	r3, r2
 800a532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a536:	461a      	mov	r2, r3
 800a538:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a53c:	6013      	str	r3, [r2, #0]
 800a53e:	e013      	b.n	800a568 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a540:	693b      	ldr	r3, [r7, #16]
 800a542:	015a      	lsls	r2, r3, #5
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	4413      	add	r3, r2
 800a548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a54c:	461a      	mov	r2, r3
 800a54e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a552:	6013      	str	r3, [r2, #0]
 800a554:	e008      	b.n	800a568 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a556:	693b      	ldr	r3, [r7, #16]
 800a558:	015a      	lsls	r2, r3, #5
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	4413      	add	r3, r2
 800a55e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a562:	461a      	mov	r2, r3
 800a564:	2300      	movs	r3, #0
 800a566:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	015a      	lsls	r2, r3, #5
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	4413      	add	r3, r2
 800a570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a574:	461a      	mov	r2, r3
 800a576:	2300      	movs	r3, #0
 800a578:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a57a:	693b      	ldr	r3, [r7, #16]
 800a57c:	015a      	lsls	r2, r3, #5
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	4413      	add	r3, r2
 800a582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a586:	461a      	mov	r2, r3
 800a588:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a58c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a58e:	693b      	ldr	r3, [r7, #16]
 800a590:	3301      	adds	r3, #1
 800a592:	613b      	str	r3, [r7, #16]
 800a594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a596:	693a      	ldr	r2, [r7, #16]
 800a598:	429a      	cmp	r2, r3
 800a59a:	d3b7      	bcc.n	800a50c <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5a2:	691b      	ldr	r3, [r3, #16]
 800a5a4:	68fa      	ldr	r2, [r7, #12]
 800a5a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a5aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a5ae:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 800a5b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5b2:	2b01      	cmp	r3, #1
 800a5b4:	d111      	bne.n	800a5da <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5bc:	461a      	mov	r2, r3
 800a5be:	4b20      	ldr	r3, [pc, #128]	; (800a640 <USB_DevInit+0x2dc>)
 800a5c0:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5ca:	68fa      	ldr	r2, [r7, #12]
 800a5cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a5d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a5d4:	f043 0303 	orr.w	r3, r3, #3
 800a5d8:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a5e6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a5e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d105      	bne.n	800a5fa <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	699b      	ldr	r3, [r3, #24]
 800a5f2:	f043 0210 	orr.w	r2, r3, #16
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	699a      	ldr	r2, [r3, #24]
 800a5fe:	4b11      	ldr	r3, [pc, #68]	; (800a644 <USB_DevInit+0x2e0>)
 800a600:	4313      	orrs	r3, r2
 800a602:	687a      	ldr	r2, [r7, #4]
 800a604:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d005      	beq.n	800a618 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	699b      	ldr	r3, [r3, #24]
 800a610:	f043 0208 	orr.w	r2, r3, #8
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a618:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a61a:	2b01      	cmp	r3, #1
 800a61c:	d107      	bne.n	800a62e <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	699b      	ldr	r3, [r3, #24]
 800a622:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a626:	f043 0304 	orr.w	r3, r3, #4
 800a62a:	687a      	ldr	r2, [r7, #4]
 800a62c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a62e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a630:	4618      	mov	r0, r3
 800a632:	3718      	adds	r7, #24
 800a634:	46bd      	mov	sp, r7
 800a636:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a63a:	b004      	add	sp, #16
 800a63c:	4770      	bx	lr
 800a63e:	bf00      	nop
 800a640:	00800100 	.word	0x00800100
 800a644:	803c3800 	.word	0x803c3800

0800a648 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a648:	b480      	push	{r7}
 800a64a:	b085      	sub	sp, #20
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
 800a650:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a652:	2300      	movs	r3, #0
 800a654:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	019b      	lsls	r3, r3, #6
 800a65a:	f043 0220 	orr.w	r2, r3, #32
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	3301      	adds	r3, #1
 800a666:	60fb      	str	r3, [r7, #12]
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	4a09      	ldr	r2, [pc, #36]	; (800a690 <USB_FlushTxFifo+0x48>)
 800a66c:	4293      	cmp	r3, r2
 800a66e:	d901      	bls.n	800a674 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a670:	2303      	movs	r3, #3
 800a672:	e006      	b.n	800a682 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	691b      	ldr	r3, [r3, #16]
 800a678:	f003 0320 	and.w	r3, r3, #32
 800a67c:	2b20      	cmp	r3, #32
 800a67e:	d0f0      	beq.n	800a662 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a680:	2300      	movs	r3, #0
}
 800a682:	4618      	mov	r0, r3
 800a684:	3714      	adds	r7, #20
 800a686:	46bd      	mov	sp, r7
 800a688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68c:	4770      	bx	lr
 800a68e:	bf00      	nop
 800a690:	00030d40 	.word	0x00030d40

0800a694 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a694:	b480      	push	{r7}
 800a696:	b085      	sub	sp, #20
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800a69c:	2300      	movs	r3, #0
 800a69e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2210      	movs	r2, #16
 800a6a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	3301      	adds	r3, #1
 800a6aa:	60fb      	str	r3, [r7, #12]
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	4a09      	ldr	r2, [pc, #36]	; (800a6d4 <USB_FlushRxFifo+0x40>)
 800a6b0:	4293      	cmp	r3, r2
 800a6b2:	d901      	bls.n	800a6b8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800a6b4:	2303      	movs	r3, #3
 800a6b6:	e006      	b.n	800a6c6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	691b      	ldr	r3, [r3, #16]
 800a6bc:	f003 0310 	and.w	r3, r3, #16
 800a6c0:	2b10      	cmp	r3, #16
 800a6c2:	d0f0      	beq.n	800a6a6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a6c4:	2300      	movs	r3, #0
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	3714      	adds	r7, #20
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d0:	4770      	bx	lr
 800a6d2:	bf00      	nop
 800a6d4:	00030d40 	.word	0x00030d40

0800a6d8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b085      	sub	sp, #20
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
 800a6e0:	460b      	mov	r3, r1
 800a6e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6ee:	681a      	ldr	r2, [r3, #0]
 800a6f0:	78fb      	ldrb	r3, [r7, #3]
 800a6f2:	68f9      	ldr	r1, [r7, #12]
 800a6f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a6f8:	4313      	orrs	r3, r2
 800a6fa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a6fc:	2300      	movs	r3, #0
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	3714      	adds	r7, #20
 800a702:	46bd      	mov	sp, r7
 800a704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a708:	4770      	bx	lr

0800a70a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a70a:	b480      	push	{r7}
 800a70c:	b087      	sub	sp, #28
 800a70e:	af00      	add	r7, sp, #0
 800a710:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a716:	693b      	ldr	r3, [r7, #16]
 800a718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a71c:	689b      	ldr	r3, [r3, #8]
 800a71e:	f003 0306 	and.w	r3, r3, #6
 800a722:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d102      	bne.n	800a730 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a72a:	2300      	movs	r3, #0
 800a72c:	75fb      	strb	r3, [r7, #23]
 800a72e:	e00a      	b.n	800a746 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	2b02      	cmp	r3, #2
 800a734:	d002      	beq.n	800a73c <USB_GetDevSpeed+0x32>
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	2b06      	cmp	r3, #6
 800a73a:	d102      	bne.n	800a742 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a73c:	2302      	movs	r3, #2
 800a73e:	75fb      	strb	r3, [r7, #23]
 800a740:	e001      	b.n	800a746 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a742:	230f      	movs	r3, #15
 800a744:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a746:	7dfb      	ldrb	r3, [r7, #23]
}
 800a748:	4618      	mov	r0, r3
 800a74a:	371c      	adds	r7, #28
 800a74c:	46bd      	mov	sp, r7
 800a74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a752:	4770      	bx	lr

0800a754 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a754:	b480      	push	{r7}
 800a756:	b085      	sub	sp, #20
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
 800a75c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	781b      	ldrb	r3, [r3, #0]
 800a766:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	785b      	ldrb	r3, [r3, #1]
 800a76c:	2b01      	cmp	r3, #1
 800a76e:	d13a      	bne.n	800a7e6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a776:	69da      	ldr	r2, [r3, #28]
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	781b      	ldrb	r3, [r3, #0]
 800a77c:	f003 030f 	and.w	r3, r3, #15
 800a780:	2101      	movs	r1, #1
 800a782:	fa01 f303 	lsl.w	r3, r1, r3
 800a786:	b29b      	uxth	r3, r3
 800a788:	68f9      	ldr	r1, [r7, #12]
 800a78a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a78e:	4313      	orrs	r3, r2
 800a790:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a792:	68bb      	ldr	r3, [r7, #8]
 800a794:	015a      	lsls	r2, r3, #5
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	4413      	add	r3, r2
 800a79a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d155      	bne.n	800a854 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	015a      	lsls	r2, r3, #5
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	4413      	add	r3, r2
 800a7b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7b4:	681a      	ldr	r2, [r3, #0]
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	689b      	ldr	r3, [r3, #8]
 800a7ba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	78db      	ldrb	r3, [r3, #3]
 800a7c2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a7c4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	059b      	lsls	r3, r3, #22
 800a7ca:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a7cc:	4313      	orrs	r3, r2
 800a7ce:	68ba      	ldr	r2, [r7, #8]
 800a7d0:	0151      	lsls	r1, r2, #5
 800a7d2:	68fa      	ldr	r2, [r7, #12]
 800a7d4:	440a      	add	r2, r1
 800a7d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a7de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a7e2:	6013      	str	r3, [r2, #0]
 800a7e4:	e036      	b.n	800a854 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7ec:	69da      	ldr	r2, [r3, #28]
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	781b      	ldrb	r3, [r3, #0]
 800a7f2:	f003 030f 	and.w	r3, r3, #15
 800a7f6:	2101      	movs	r1, #1
 800a7f8:	fa01 f303 	lsl.w	r3, r1, r3
 800a7fc:	041b      	lsls	r3, r3, #16
 800a7fe:	68f9      	ldr	r1, [r7, #12]
 800a800:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a804:	4313      	orrs	r3, r2
 800a806:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	015a      	lsls	r2, r3, #5
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	4413      	add	r3, r2
 800a810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d11a      	bne.n	800a854 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	015a      	lsls	r2, r3, #5
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	4413      	add	r3, r2
 800a826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a82a:	681a      	ldr	r2, [r3, #0]
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	689b      	ldr	r3, [r3, #8]
 800a830:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	78db      	ldrb	r3, [r3, #3]
 800a838:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a83a:	430b      	orrs	r3, r1
 800a83c:	4313      	orrs	r3, r2
 800a83e:	68ba      	ldr	r2, [r7, #8]
 800a840:	0151      	lsls	r1, r2, #5
 800a842:	68fa      	ldr	r2, [r7, #12]
 800a844:	440a      	add	r2, r1
 800a846:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a84a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a84e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a852:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a854:	2300      	movs	r3, #0
}
 800a856:	4618      	mov	r0, r3
 800a858:	3714      	adds	r7, #20
 800a85a:	46bd      	mov	sp, r7
 800a85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a860:	4770      	bx	lr
	...

0800a864 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a864:	b480      	push	{r7}
 800a866:	b085      	sub	sp, #20
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
 800a86c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	781b      	ldrb	r3, [r3, #0]
 800a876:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	785b      	ldrb	r3, [r3, #1]
 800a87c:	2b01      	cmp	r3, #1
 800a87e:	d135      	bne.n	800a8ec <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a886:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	781b      	ldrb	r3, [r3, #0]
 800a88c:	f003 030f 	and.w	r3, r3, #15
 800a890:	2101      	movs	r1, #1
 800a892:	fa01 f303 	lsl.w	r3, r1, r3
 800a896:	b29b      	uxth	r3, r3
 800a898:	43db      	mvns	r3, r3
 800a89a:	68f9      	ldr	r1, [r7, #12]
 800a89c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a8a0:	4013      	ands	r3, r2
 800a8a2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8aa:	69da      	ldr	r2, [r3, #28]
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	781b      	ldrb	r3, [r3, #0]
 800a8b0:	f003 030f 	and.w	r3, r3, #15
 800a8b4:	2101      	movs	r1, #1
 800a8b6:	fa01 f303 	lsl.w	r3, r1, r3
 800a8ba:	b29b      	uxth	r3, r3
 800a8bc:	43db      	mvns	r3, r3
 800a8be:	68f9      	ldr	r1, [r7, #12]
 800a8c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a8c4:	4013      	ands	r3, r2
 800a8c6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	015a      	lsls	r2, r3, #5
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	4413      	add	r3, r2
 800a8d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8d4:	681a      	ldr	r2, [r3, #0]
 800a8d6:	68bb      	ldr	r3, [r7, #8]
 800a8d8:	0159      	lsls	r1, r3, #5
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	440b      	add	r3, r1
 800a8de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8e2:	4619      	mov	r1, r3
 800a8e4:	4b1f      	ldr	r3, [pc, #124]	; (800a964 <USB_DeactivateEndpoint+0x100>)
 800a8e6:	4013      	ands	r3, r2
 800a8e8:	600b      	str	r3, [r1, #0]
 800a8ea:	e034      	b.n	800a956 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	781b      	ldrb	r3, [r3, #0]
 800a8f8:	f003 030f 	and.w	r3, r3, #15
 800a8fc:	2101      	movs	r1, #1
 800a8fe:	fa01 f303 	lsl.w	r3, r1, r3
 800a902:	041b      	lsls	r3, r3, #16
 800a904:	43db      	mvns	r3, r3
 800a906:	68f9      	ldr	r1, [r7, #12]
 800a908:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a90c:	4013      	ands	r3, r2
 800a90e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a916:	69da      	ldr	r2, [r3, #28]
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	781b      	ldrb	r3, [r3, #0]
 800a91c:	f003 030f 	and.w	r3, r3, #15
 800a920:	2101      	movs	r1, #1
 800a922:	fa01 f303 	lsl.w	r3, r1, r3
 800a926:	041b      	lsls	r3, r3, #16
 800a928:	43db      	mvns	r3, r3
 800a92a:	68f9      	ldr	r1, [r7, #12]
 800a92c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a930:	4013      	ands	r3, r2
 800a932:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	015a      	lsls	r2, r3, #5
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	4413      	add	r3, r2
 800a93c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a940:	681a      	ldr	r2, [r3, #0]
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	0159      	lsls	r1, r3, #5
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	440b      	add	r3, r1
 800a94a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a94e:	4619      	mov	r1, r3
 800a950:	4b05      	ldr	r3, [pc, #20]	; (800a968 <USB_DeactivateEndpoint+0x104>)
 800a952:	4013      	ands	r3, r2
 800a954:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a956:	2300      	movs	r3, #0
}
 800a958:	4618      	mov	r0, r3
 800a95a:	3714      	adds	r7, #20
 800a95c:	46bd      	mov	sp, r7
 800a95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a962:	4770      	bx	lr
 800a964:	ec337800 	.word	0xec337800
 800a968:	eff37800 	.word	0xeff37800

0800a96c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b08a      	sub	sp, #40	; 0x28
 800a970:	af02      	add	r7, sp, #8
 800a972:	60f8      	str	r0, [r7, #12]
 800a974:	60b9      	str	r1, [r7, #8]
 800a976:	4613      	mov	r3, r2
 800a978:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	781b      	ldrb	r3, [r3, #0]
 800a982:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	785b      	ldrb	r3, [r3, #1]
 800a988:	2b01      	cmp	r3, #1
 800a98a:	f040 815c 	bne.w	800ac46 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	695b      	ldr	r3, [r3, #20]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d132      	bne.n	800a9fc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a996:	69bb      	ldr	r3, [r7, #24]
 800a998:	015a      	lsls	r2, r3, #5
 800a99a:	69fb      	ldr	r3, [r7, #28]
 800a99c:	4413      	add	r3, r2
 800a99e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9a2:	691b      	ldr	r3, [r3, #16]
 800a9a4:	69ba      	ldr	r2, [r7, #24]
 800a9a6:	0151      	lsls	r1, r2, #5
 800a9a8:	69fa      	ldr	r2, [r7, #28]
 800a9aa:	440a      	add	r2, r1
 800a9ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a9b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a9b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a9ba:	69bb      	ldr	r3, [r7, #24]
 800a9bc:	015a      	lsls	r2, r3, #5
 800a9be:	69fb      	ldr	r3, [r7, #28]
 800a9c0:	4413      	add	r3, r2
 800a9c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9c6:	691b      	ldr	r3, [r3, #16]
 800a9c8:	69ba      	ldr	r2, [r7, #24]
 800a9ca:	0151      	lsls	r1, r2, #5
 800a9cc:	69fa      	ldr	r2, [r7, #28]
 800a9ce:	440a      	add	r2, r1
 800a9d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a9d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a9da:	69bb      	ldr	r3, [r7, #24]
 800a9dc:	015a      	lsls	r2, r3, #5
 800a9de:	69fb      	ldr	r3, [r7, #28]
 800a9e0:	4413      	add	r3, r2
 800a9e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9e6:	691b      	ldr	r3, [r3, #16]
 800a9e8:	69ba      	ldr	r2, [r7, #24]
 800a9ea:	0151      	lsls	r1, r2, #5
 800a9ec:	69fa      	ldr	r2, [r7, #28]
 800a9ee:	440a      	add	r2, r1
 800a9f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9f4:	0cdb      	lsrs	r3, r3, #19
 800a9f6:	04db      	lsls	r3, r3, #19
 800a9f8:	6113      	str	r3, [r2, #16]
 800a9fa:	e074      	b.n	800aae6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a9fc:	69bb      	ldr	r3, [r7, #24]
 800a9fe:	015a      	lsls	r2, r3, #5
 800aa00:	69fb      	ldr	r3, [r7, #28]
 800aa02:	4413      	add	r3, r2
 800aa04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa08:	691b      	ldr	r3, [r3, #16]
 800aa0a:	69ba      	ldr	r2, [r7, #24]
 800aa0c:	0151      	lsls	r1, r2, #5
 800aa0e:	69fa      	ldr	r2, [r7, #28]
 800aa10:	440a      	add	r2, r1
 800aa12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa16:	0cdb      	lsrs	r3, r3, #19
 800aa18:	04db      	lsls	r3, r3, #19
 800aa1a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aa1c:	69bb      	ldr	r3, [r7, #24]
 800aa1e:	015a      	lsls	r2, r3, #5
 800aa20:	69fb      	ldr	r3, [r7, #28]
 800aa22:	4413      	add	r3, r2
 800aa24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa28:	691b      	ldr	r3, [r3, #16]
 800aa2a:	69ba      	ldr	r2, [r7, #24]
 800aa2c:	0151      	lsls	r1, r2, #5
 800aa2e:	69fa      	ldr	r2, [r7, #28]
 800aa30:	440a      	add	r2, r1
 800aa32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa36:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800aa3a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800aa3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800aa40:	69bb      	ldr	r3, [r7, #24]
 800aa42:	015a      	lsls	r2, r3, #5
 800aa44:	69fb      	ldr	r3, [r7, #28]
 800aa46:	4413      	add	r3, r2
 800aa48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa4c:	691a      	ldr	r2, [r3, #16]
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	6959      	ldr	r1, [r3, #20]
 800aa52:	68bb      	ldr	r3, [r7, #8]
 800aa54:	689b      	ldr	r3, [r3, #8]
 800aa56:	440b      	add	r3, r1
 800aa58:	1e59      	subs	r1, r3, #1
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	689b      	ldr	r3, [r3, #8]
 800aa5e:	fbb1 f3f3 	udiv	r3, r1, r3
 800aa62:	04d9      	lsls	r1, r3, #19
 800aa64:	4b9d      	ldr	r3, [pc, #628]	; (800acdc <USB_EPStartXfer+0x370>)
 800aa66:	400b      	ands	r3, r1
 800aa68:	69b9      	ldr	r1, [r7, #24]
 800aa6a:	0148      	lsls	r0, r1, #5
 800aa6c:	69f9      	ldr	r1, [r7, #28]
 800aa6e:	4401      	add	r1, r0
 800aa70:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800aa74:	4313      	orrs	r3, r2
 800aa76:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800aa78:	69bb      	ldr	r3, [r7, #24]
 800aa7a:	015a      	lsls	r2, r3, #5
 800aa7c:	69fb      	ldr	r3, [r7, #28]
 800aa7e:	4413      	add	r3, r2
 800aa80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa84:	691a      	ldr	r2, [r3, #16]
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	695b      	ldr	r3, [r3, #20]
 800aa8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aa8e:	69b9      	ldr	r1, [r7, #24]
 800aa90:	0148      	lsls	r0, r1, #5
 800aa92:	69f9      	ldr	r1, [r7, #28]
 800aa94:	4401      	add	r1, r0
 800aa96:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800aa9a:	4313      	orrs	r3, r2
 800aa9c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	78db      	ldrb	r3, [r3, #3]
 800aaa2:	2b01      	cmp	r3, #1
 800aaa4:	d11f      	bne.n	800aae6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800aaa6:	69bb      	ldr	r3, [r7, #24]
 800aaa8:	015a      	lsls	r2, r3, #5
 800aaaa:	69fb      	ldr	r3, [r7, #28]
 800aaac:	4413      	add	r3, r2
 800aaae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aab2:	691b      	ldr	r3, [r3, #16]
 800aab4:	69ba      	ldr	r2, [r7, #24]
 800aab6:	0151      	lsls	r1, r2, #5
 800aab8:	69fa      	ldr	r2, [r7, #28]
 800aaba:	440a      	add	r2, r1
 800aabc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aac0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800aac4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800aac6:	69bb      	ldr	r3, [r7, #24]
 800aac8:	015a      	lsls	r2, r3, #5
 800aaca:	69fb      	ldr	r3, [r7, #28]
 800aacc:	4413      	add	r3, r2
 800aace:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aad2:	691b      	ldr	r3, [r3, #16]
 800aad4:	69ba      	ldr	r2, [r7, #24]
 800aad6:	0151      	lsls	r1, r2, #5
 800aad8:	69fa      	ldr	r2, [r7, #28]
 800aada:	440a      	add	r2, r1
 800aadc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aae0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800aae4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800aae6:	79fb      	ldrb	r3, [r7, #7]
 800aae8:	2b01      	cmp	r3, #1
 800aaea:	d14b      	bne.n	800ab84 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	691b      	ldr	r3, [r3, #16]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d009      	beq.n	800ab08 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800aaf4:	69bb      	ldr	r3, [r7, #24]
 800aaf6:	015a      	lsls	r2, r3, #5
 800aaf8:	69fb      	ldr	r3, [r7, #28]
 800aafa:	4413      	add	r3, r2
 800aafc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab00:	461a      	mov	r2, r3
 800ab02:	68bb      	ldr	r3, [r7, #8]
 800ab04:	691b      	ldr	r3, [r3, #16]
 800ab06:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	78db      	ldrb	r3, [r3, #3]
 800ab0c:	2b01      	cmp	r3, #1
 800ab0e:	d128      	bne.n	800ab62 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ab10:	69fb      	ldr	r3, [r7, #28]
 800ab12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab16:	689b      	ldr	r3, [r3, #8]
 800ab18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d110      	bne.n	800ab42 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ab20:	69bb      	ldr	r3, [r7, #24]
 800ab22:	015a      	lsls	r2, r3, #5
 800ab24:	69fb      	ldr	r3, [r7, #28]
 800ab26:	4413      	add	r3, r2
 800ab28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	69ba      	ldr	r2, [r7, #24]
 800ab30:	0151      	lsls	r1, r2, #5
 800ab32:	69fa      	ldr	r2, [r7, #28]
 800ab34:	440a      	add	r2, r1
 800ab36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab3a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ab3e:	6013      	str	r3, [r2, #0]
 800ab40:	e00f      	b.n	800ab62 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ab42:	69bb      	ldr	r3, [r7, #24]
 800ab44:	015a      	lsls	r2, r3, #5
 800ab46:	69fb      	ldr	r3, [r7, #28]
 800ab48:	4413      	add	r3, r2
 800ab4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	69ba      	ldr	r2, [r7, #24]
 800ab52:	0151      	lsls	r1, r2, #5
 800ab54:	69fa      	ldr	r2, [r7, #28]
 800ab56:	440a      	add	r2, r1
 800ab58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab60:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ab62:	69bb      	ldr	r3, [r7, #24]
 800ab64:	015a      	lsls	r2, r3, #5
 800ab66:	69fb      	ldr	r3, [r7, #28]
 800ab68:	4413      	add	r3, r2
 800ab6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	69ba      	ldr	r2, [r7, #24]
 800ab72:	0151      	lsls	r1, r2, #5
 800ab74:	69fa      	ldr	r2, [r7, #28]
 800ab76:	440a      	add	r2, r1
 800ab78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab7c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ab80:	6013      	str	r3, [r2, #0]
 800ab82:	e12f      	b.n	800ade4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ab84:	69bb      	ldr	r3, [r7, #24]
 800ab86:	015a      	lsls	r2, r3, #5
 800ab88:	69fb      	ldr	r3, [r7, #28]
 800ab8a:	4413      	add	r3, r2
 800ab8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	69ba      	ldr	r2, [r7, #24]
 800ab94:	0151      	lsls	r1, r2, #5
 800ab96:	69fa      	ldr	r2, [r7, #28]
 800ab98:	440a      	add	r2, r1
 800ab9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab9e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800aba2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800aba4:	68bb      	ldr	r3, [r7, #8]
 800aba6:	78db      	ldrb	r3, [r3, #3]
 800aba8:	2b01      	cmp	r3, #1
 800abaa:	d015      	beq.n	800abd8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	695b      	ldr	r3, [r3, #20]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	f000 8117 	beq.w	800ade4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800abb6:	69fb      	ldr	r3, [r7, #28]
 800abb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	781b      	ldrb	r3, [r3, #0]
 800abc2:	f003 030f 	and.w	r3, r3, #15
 800abc6:	2101      	movs	r1, #1
 800abc8:	fa01 f303 	lsl.w	r3, r1, r3
 800abcc:	69f9      	ldr	r1, [r7, #28]
 800abce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800abd2:	4313      	orrs	r3, r2
 800abd4:	634b      	str	r3, [r1, #52]	; 0x34
 800abd6:	e105      	b.n	800ade4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800abd8:	69fb      	ldr	r3, [r7, #28]
 800abda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abde:	689b      	ldr	r3, [r3, #8]
 800abe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d110      	bne.n	800ac0a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800abe8:	69bb      	ldr	r3, [r7, #24]
 800abea:	015a      	lsls	r2, r3, #5
 800abec:	69fb      	ldr	r3, [r7, #28]
 800abee:	4413      	add	r3, r2
 800abf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	69ba      	ldr	r2, [r7, #24]
 800abf8:	0151      	lsls	r1, r2, #5
 800abfa:	69fa      	ldr	r2, [r7, #28]
 800abfc:	440a      	add	r2, r1
 800abfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac02:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ac06:	6013      	str	r3, [r2, #0]
 800ac08:	e00f      	b.n	800ac2a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ac0a:	69bb      	ldr	r3, [r7, #24]
 800ac0c:	015a      	lsls	r2, r3, #5
 800ac0e:	69fb      	ldr	r3, [r7, #28]
 800ac10:	4413      	add	r3, r2
 800ac12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	69ba      	ldr	r2, [r7, #24]
 800ac1a:	0151      	lsls	r1, r2, #5
 800ac1c:	69fa      	ldr	r2, [r7, #28]
 800ac1e:	440a      	add	r2, r1
 800ac20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac28:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	68d9      	ldr	r1, [r3, #12]
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	781a      	ldrb	r2, [r3, #0]
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	695b      	ldr	r3, [r3, #20]
 800ac36:	b298      	uxth	r0, r3
 800ac38:	79fb      	ldrb	r3, [r7, #7]
 800ac3a:	9300      	str	r3, [sp, #0]
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	68f8      	ldr	r0, [r7, #12]
 800ac40:	f000 fa2b 	bl	800b09a <USB_WritePacket>
 800ac44:	e0ce      	b.n	800ade4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ac46:	69bb      	ldr	r3, [r7, #24]
 800ac48:	015a      	lsls	r2, r3, #5
 800ac4a:	69fb      	ldr	r3, [r7, #28]
 800ac4c:	4413      	add	r3, r2
 800ac4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac52:	691b      	ldr	r3, [r3, #16]
 800ac54:	69ba      	ldr	r2, [r7, #24]
 800ac56:	0151      	lsls	r1, r2, #5
 800ac58:	69fa      	ldr	r2, [r7, #28]
 800ac5a:	440a      	add	r2, r1
 800ac5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac60:	0cdb      	lsrs	r3, r3, #19
 800ac62:	04db      	lsls	r3, r3, #19
 800ac64:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ac66:	69bb      	ldr	r3, [r7, #24]
 800ac68:	015a      	lsls	r2, r3, #5
 800ac6a:	69fb      	ldr	r3, [r7, #28]
 800ac6c:	4413      	add	r3, r2
 800ac6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac72:	691b      	ldr	r3, [r3, #16]
 800ac74:	69ba      	ldr	r2, [r7, #24]
 800ac76:	0151      	lsls	r1, r2, #5
 800ac78:	69fa      	ldr	r2, [r7, #28]
 800ac7a:	440a      	add	r2, r1
 800ac7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac80:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ac84:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ac88:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800ac8a:	68bb      	ldr	r3, [r7, #8]
 800ac8c:	695b      	ldr	r3, [r3, #20]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d126      	bne.n	800ace0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ac92:	69bb      	ldr	r3, [r7, #24]
 800ac94:	015a      	lsls	r2, r3, #5
 800ac96:	69fb      	ldr	r3, [r7, #28]
 800ac98:	4413      	add	r3, r2
 800ac9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac9e:	691a      	ldr	r2, [r3, #16]
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	689b      	ldr	r3, [r3, #8]
 800aca4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aca8:	69b9      	ldr	r1, [r7, #24]
 800acaa:	0148      	lsls	r0, r1, #5
 800acac:	69f9      	ldr	r1, [r7, #28]
 800acae:	4401      	add	r1, r0
 800acb0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800acb4:	4313      	orrs	r3, r2
 800acb6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800acb8:	69bb      	ldr	r3, [r7, #24]
 800acba:	015a      	lsls	r2, r3, #5
 800acbc:	69fb      	ldr	r3, [r7, #28]
 800acbe:	4413      	add	r3, r2
 800acc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acc4:	691b      	ldr	r3, [r3, #16]
 800acc6:	69ba      	ldr	r2, [r7, #24]
 800acc8:	0151      	lsls	r1, r2, #5
 800acca:	69fa      	ldr	r2, [r7, #28]
 800accc:	440a      	add	r2, r1
 800acce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800acd2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800acd6:	6113      	str	r3, [r2, #16]
 800acd8:	e036      	b.n	800ad48 <USB_EPStartXfer+0x3dc>
 800acda:	bf00      	nop
 800acdc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	695a      	ldr	r2, [r3, #20]
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	689b      	ldr	r3, [r3, #8]
 800ace8:	4413      	add	r3, r2
 800acea:	1e5a      	subs	r2, r3, #1
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	689b      	ldr	r3, [r3, #8]
 800acf0:	fbb2 f3f3 	udiv	r3, r2, r3
 800acf4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800acf6:	69bb      	ldr	r3, [r7, #24]
 800acf8:	015a      	lsls	r2, r3, #5
 800acfa:	69fb      	ldr	r3, [r7, #28]
 800acfc:	4413      	add	r3, r2
 800acfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad02:	691a      	ldr	r2, [r3, #16]
 800ad04:	8afb      	ldrh	r3, [r7, #22]
 800ad06:	04d9      	lsls	r1, r3, #19
 800ad08:	4b39      	ldr	r3, [pc, #228]	; (800adf0 <USB_EPStartXfer+0x484>)
 800ad0a:	400b      	ands	r3, r1
 800ad0c:	69b9      	ldr	r1, [r7, #24]
 800ad0e:	0148      	lsls	r0, r1, #5
 800ad10:	69f9      	ldr	r1, [r7, #28]
 800ad12:	4401      	add	r1, r0
 800ad14:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ad18:	4313      	orrs	r3, r2
 800ad1a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800ad1c:	69bb      	ldr	r3, [r7, #24]
 800ad1e:	015a      	lsls	r2, r3, #5
 800ad20:	69fb      	ldr	r3, [r7, #28]
 800ad22:	4413      	add	r3, r2
 800ad24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad28:	691a      	ldr	r2, [r3, #16]
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	689b      	ldr	r3, [r3, #8]
 800ad2e:	8af9      	ldrh	r1, [r7, #22]
 800ad30:	fb01 f303 	mul.w	r3, r1, r3
 800ad34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ad38:	69b9      	ldr	r1, [r7, #24]
 800ad3a:	0148      	lsls	r0, r1, #5
 800ad3c:	69f9      	ldr	r1, [r7, #28]
 800ad3e:	4401      	add	r1, r0
 800ad40:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ad44:	4313      	orrs	r3, r2
 800ad46:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ad48:	79fb      	ldrb	r3, [r7, #7]
 800ad4a:	2b01      	cmp	r3, #1
 800ad4c:	d10d      	bne.n	800ad6a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	68db      	ldr	r3, [r3, #12]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d009      	beq.n	800ad6a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	68d9      	ldr	r1, [r3, #12]
 800ad5a:	69bb      	ldr	r3, [r7, #24]
 800ad5c:	015a      	lsls	r2, r3, #5
 800ad5e:	69fb      	ldr	r3, [r7, #28]
 800ad60:	4413      	add	r3, r2
 800ad62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad66:	460a      	mov	r2, r1
 800ad68:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ad6a:	68bb      	ldr	r3, [r7, #8]
 800ad6c:	78db      	ldrb	r3, [r3, #3]
 800ad6e:	2b01      	cmp	r3, #1
 800ad70:	d128      	bne.n	800adc4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ad72:	69fb      	ldr	r3, [r7, #28]
 800ad74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad78:	689b      	ldr	r3, [r3, #8]
 800ad7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d110      	bne.n	800ada4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ad82:	69bb      	ldr	r3, [r7, #24]
 800ad84:	015a      	lsls	r2, r3, #5
 800ad86:	69fb      	ldr	r3, [r7, #28]
 800ad88:	4413      	add	r3, r2
 800ad8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	69ba      	ldr	r2, [r7, #24]
 800ad92:	0151      	lsls	r1, r2, #5
 800ad94:	69fa      	ldr	r2, [r7, #28]
 800ad96:	440a      	add	r2, r1
 800ad98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad9c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ada0:	6013      	str	r3, [r2, #0]
 800ada2:	e00f      	b.n	800adc4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ada4:	69bb      	ldr	r3, [r7, #24]
 800ada6:	015a      	lsls	r2, r3, #5
 800ada8:	69fb      	ldr	r3, [r7, #28]
 800adaa:	4413      	add	r3, r2
 800adac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	69ba      	ldr	r2, [r7, #24]
 800adb4:	0151      	lsls	r1, r2, #5
 800adb6:	69fa      	ldr	r2, [r7, #28]
 800adb8:	440a      	add	r2, r1
 800adba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800adbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800adc2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800adc4:	69bb      	ldr	r3, [r7, #24]
 800adc6:	015a      	lsls	r2, r3, #5
 800adc8:	69fb      	ldr	r3, [r7, #28]
 800adca:	4413      	add	r3, r2
 800adcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	69ba      	ldr	r2, [r7, #24]
 800add4:	0151      	lsls	r1, r2, #5
 800add6:	69fa      	ldr	r2, [r7, #28]
 800add8:	440a      	add	r2, r1
 800adda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800adde:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ade2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ade4:	2300      	movs	r3, #0
}
 800ade6:	4618      	mov	r0, r3
 800ade8:	3720      	adds	r7, #32
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}
 800adee:	bf00      	nop
 800adf0:	1ff80000 	.word	0x1ff80000

0800adf4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800adf4:	b480      	push	{r7}
 800adf6:	b087      	sub	sp, #28
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	60f8      	str	r0, [r7, #12]
 800adfc:	60b9      	str	r1, [r7, #8]
 800adfe:	4613      	mov	r3, r2
 800ae00:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	781b      	ldrb	r3, [r3, #0]
 800ae0a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	785b      	ldrb	r3, [r3, #1]
 800ae10:	2b01      	cmp	r3, #1
 800ae12:	f040 80cd 	bne.w	800afb0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ae16:	68bb      	ldr	r3, [r7, #8]
 800ae18:	695b      	ldr	r3, [r3, #20]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d132      	bne.n	800ae84 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ae1e:	693b      	ldr	r3, [r7, #16]
 800ae20:	015a      	lsls	r2, r3, #5
 800ae22:	697b      	ldr	r3, [r7, #20]
 800ae24:	4413      	add	r3, r2
 800ae26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae2a:	691b      	ldr	r3, [r3, #16]
 800ae2c:	693a      	ldr	r2, [r7, #16]
 800ae2e:	0151      	lsls	r1, r2, #5
 800ae30:	697a      	ldr	r2, [r7, #20]
 800ae32:	440a      	add	r2, r1
 800ae34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae38:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ae3c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ae40:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ae42:	693b      	ldr	r3, [r7, #16]
 800ae44:	015a      	lsls	r2, r3, #5
 800ae46:	697b      	ldr	r3, [r7, #20]
 800ae48:	4413      	add	r3, r2
 800ae4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae4e:	691b      	ldr	r3, [r3, #16]
 800ae50:	693a      	ldr	r2, [r7, #16]
 800ae52:	0151      	lsls	r1, r2, #5
 800ae54:	697a      	ldr	r2, [r7, #20]
 800ae56:	440a      	add	r2, r1
 800ae58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ae60:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	015a      	lsls	r2, r3, #5
 800ae66:	697b      	ldr	r3, [r7, #20]
 800ae68:	4413      	add	r3, r2
 800ae6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae6e:	691b      	ldr	r3, [r3, #16]
 800ae70:	693a      	ldr	r2, [r7, #16]
 800ae72:	0151      	lsls	r1, r2, #5
 800ae74:	697a      	ldr	r2, [r7, #20]
 800ae76:	440a      	add	r2, r1
 800ae78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae7c:	0cdb      	lsrs	r3, r3, #19
 800ae7e:	04db      	lsls	r3, r3, #19
 800ae80:	6113      	str	r3, [r2, #16]
 800ae82:	e04e      	b.n	800af22 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ae84:	693b      	ldr	r3, [r7, #16]
 800ae86:	015a      	lsls	r2, r3, #5
 800ae88:	697b      	ldr	r3, [r7, #20]
 800ae8a:	4413      	add	r3, r2
 800ae8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae90:	691b      	ldr	r3, [r3, #16]
 800ae92:	693a      	ldr	r2, [r7, #16]
 800ae94:	0151      	lsls	r1, r2, #5
 800ae96:	697a      	ldr	r2, [r7, #20]
 800ae98:	440a      	add	r2, r1
 800ae9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae9e:	0cdb      	lsrs	r3, r3, #19
 800aea0:	04db      	lsls	r3, r3, #19
 800aea2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aea4:	693b      	ldr	r3, [r7, #16]
 800aea6:	015a      	lsls	r2, r3, #5
 800aea8:	697b      	ldr	r3, [r7, #20]
 800aeaa:	4413      	add	r3, r2
 800aeac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aeb0:	691b      	ldr	r3, [r3, #16]
 800aeb2:	693a      	ldr	r2, [r7, #16]
 800aeb4:	0151      	lsls	r1, r2, #5
 800aeb6:	697a      	ldr	r2, [r7, #20]
 800aeb8:	440a      	add	r2, r1
 800aeba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aebe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800aec2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800aec6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	695a      	ldr	r2, [r3, #20]
 800aecc:	68bb      	ldr	r3, [r7, #8]
 800aece:	689b      	ldr	r3, [r3, #8]
 800aed0:	429a      	cmp	r2, r3
 800aed2:	d903      	bls.n	800aedc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800aed4:	68bb      	ldr	r3, [r7, #8]
 800aed6:	689a      	ldr	r2, [r3, #8]
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800aedc:	693b      	ldr	r3, [r7, #16]
 800aede:	015a      	lsls	r2, r3, #5
 800aee0:	697b      	ldr	r3, [r7, #20]
 800aee2:	4413      	add	r3, r2
 800aee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aee8:	691b      	ldr	r3, [r3, #16]
 800aeea:	693a      	ldr	r2, [r7, #16]
 800aeec:	0151      	lsls	r1, r2, #5
 800aeee:	697a      	ldr	r2, [r7, #20]
 800aef0:	440a      	add	r2, r1
 800aef2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aef6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aefa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800aefc:	693b      	ldr	r3, [r7, #16]
 800aefe:	015a      	lsls	r2, r3, #5
 800af00:	697b      	ldr	r3, [r7, #20]
 800af02:	4413      	add	r3, r2
 800af04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af08:	691a      	ldr	r2, [r3, #16]
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	695b      	ldr	r3, [r3, #20]
 800af0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800af12:	6939      	ldr	r1, [r7, #16]
 800af14:	0148      	lsls	r0, r1, #5
 800af16:	6979      	ldr	r1, [r7, #20]
 800af18:	4401      	add	r1, r0
 800af1a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800af1e:	4313      	orrs	r3, r2
 800af20:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800af22:	79fb      	ldrb	r3, [r7, #7]
 800af24:	2b01      	cmp	r3, #1
 800af26:	d11e      	bne.n	800af66 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	691b      	ldr	r3, [r3, #16]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d009      	beq.n	800af44 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800af30:	693b      	ldr	r3, [r7, #16]
 800af32:	015a      	lsls	r2, r3, #5
 800af34:	697b      	ldr	r3, [r7, #20]
 800af36:	4413      	add	r3, r2
 800af38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af3c:	461a      	mov	r2, r3
 800af3e:	68bb      	ldr	r3, [r7, #8]
 800af40:	691b      	ldr	r3, [r3, #16]
 800af42:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800af44:	693b      	ldr	r3, [r7, #16]
 800af46:	015a      	lsls	r2, r3, #5
 800af48:	697b      	ldr	r3, [r7, #20]
 800af4a:	4413      	add	r3, r2
 800af4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	693a      	ldr	r2, [r7, #16]
 800af54:	0151      	lsls	r1, r2, #5
 800af56:	697a      	ldr	r2, [r7, #20]
 800af58:	440a      	add	r2, r1
 800af5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af5e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800af62:	6013      	str	r3, [r2, #0]
 800af64:	e092      	b.n	800b08c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800af66:	693b      	ldr	r3, [r7, #16]
 800af68:	015a      	lsls	r2, r3, #5
 800af6a:	697b      	ldr	r3, [r7, #20]
 800af6c:	4413      	add	r3, r2
 800af6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	693a      	ldr	r2, [r7, #16]
 800af76:	0151      	lsls	r1, r2, #5
 800af78:	697a      	ldr	r2, [r7, #20]
 800af7a:	440a      	add	r2, r1
 800af7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af80:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800af84:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	695b      	ldr	r3, [r3, #20]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d07e      	beq.n	800b08c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	781b      	ldrb	r3, [r3, #0]
 800af9a:	f003 030f 	and.w	r3, r3, #15
 800af9e:	2101      	movs	r1, #1
 800afa0:	fa01 f303 	lsl.w	r3, r1, r3
 800afa4:	6979      	ldr	r1, [r7, #20]
 800afa6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800afaa:	4313      	orrs	r3, r2
 800afac:	634b      	str	r3, [r1, #52]	; 0x34
 800afae:	e06d      	b.n	800b08c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800afb0:	693b      	ldr	r3, [r7, #16]
 800afb2:	015a      	lsls	r2, r3, #5
 800afb4:	697b      	ldr	r3, [r7, #20]
 800afb6:	4413      	add	r3, r2
 800afb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afbc:	691b      	ldr	r3, [r3, #16]
 800afbe:	693a      	ldr	r2, [r7, #16]
 800afc0:	0151      	lsls	r1, r2, #5
 800afc2:	697a      	ldr	r2, [r7, #20]
 800afc4:	440a      	add	r2, r1
 800afc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800afca:	0cdb      	lsrs	r3, r3, #19
 800afcc:	04db      	lsls	r3, r3, #19
 800afce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800afd0:	693b      	ldr	r3, [r7, #16]
 800afd2:	015a      	lsls	r2, r3, #5
 800afd4:	697b      	ldr	r3, [r7, #20]
 800afd6:	4413      	add	r3, r2
 800afd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afdc:	691b      	ldr	r3, [r3, #16]
 800afde:	693a      	ldr	r2, [r7, #16]
 800afe0:	0151      	lsls	r1, r2, #5
 800afe2:	697a      	ldr	r2, [r7, #20]
 800afe4:	440a      	add	r2, r1
 800afe6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800afea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800afee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800aff2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	695b      	ldr	r3, [r3, #20]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d003      	beq.n	800b004 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	689a      	ldr	r2, [r3, #8]
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b004:	693b      	ldr	r3, [r7, #16]
 800b006:	015a      	lsls	r2, r3, #5
 800b008:	697b      	ldr	r3, [r7, #20]
 800b00a:	4413      	add	r3, r2
 800b00c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b010:	691b      	ldr	r3, [r3, #16]
 800b012:	693a      	ldr	r2, [r7, #16]
 800b014:	0151      	lsls	r1, r2, #5
 800b016:	697a      	ldr	r2, [r7, #20]
 800b018:	440a      	add	r2, r1
 800b01a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b01e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b022:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800b024:	693b      	ldr	r3, [r7, #16]
 800b026:	015a      	lsls	r2, r3, #5
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	4413      	add	r3, r2
 800b02c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b030:	691a      	ldr	r2, [r3, #16]
 800b032:	68bb      	ldr	r3, [r7, #8]
 800b034:	689b      	ldr	r3, [r3, #8]
 800b036:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b03a:	6939      	ldr	r1, [r7, #16]
 800b03c:	0148      	lsls	r0, r1, #5
 800b03e:	6979      	ldr	r1, [r7, #20]
 800b040:	4401      	add	r1, r0
 800b042:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b046:	4313      	orrs	r3, r2
 800b048:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800b04a:	79fb      	ldrb	r3, [r7, #7]
 800b04c:	2b01      	cmp	r3, #1
 800b04e:	d10d      	bne.n	800b06c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	68db      	ldr	r3, [r3, #12]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d009      	beq.n	800b06c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	68d9      	ldr	r1, [r3, #12]
 800b05c:	693b      	ldr	r3, [r7, #16]
 800b05e:	015a      	lsls	r2, r3, #5
 800b060:	697b      	ldr	r3, [r7, #20]
 800b062:	4413      	add	r3, r2
 800b064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b068:	460a      	mov	r2, r1
 800b06a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b06c:	693b      	ldr	r3, [r7, #16]
 800b06e:	015a      	lsls	r2, r3, #5
 800b070:	697b      	ldr	r3, [r7, #20]
 800b072:	4413      	add	r3, r2
 800b074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	693a      	ldr	r2, [r7, #16]
 800b07c:	0151      	lsls	r1, r2, #5
 800b07e:	697a      	ldr	r2, [r7, #20]
 800b080:	440a      	add	r2, r1
 800b082:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b086:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b08a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b08c:	2300      	movs	r3, #0
}
 800b08e:	4618      	mov	r0, r3
 800b090:	371c      	adds	r7, #28
 800b092:	46bd      	mov	sp, r7
 800b094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b098:	4770      	bx	lr

0800b09a <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b09a:	b480      	push	{r7}
 800b09c:	b089      	sub	sp, #36	; 0x24
 800b09e:	af00      	add	r7, sp, #0
 800b0a0:	60f8      	str	r0, [r7, #12]
 800b0a2:	60b9      	str	r1, [r7, #8]
 800b0a4:	4611      	mov	r1, r2
 800b0a6:	461a      	mov	r2, r3
 800b0a8:	460b      	mov	r3, r1
 800b0aa:	71fb      	strb	r3, [r7, #7]
 800b0ac:	4613      	mov	r3, r2
 800b0ae:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800b0b8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d11a      	bne.n	800b0f6 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b0c0:	88bb      	ldrh	r3, [r7, #4]
 800b0c2:	3303      	adds	r3, #3
 800b0c4:	089b      	lsrs	r3, r3, #2
 800b0c6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	61bb      	str	r3, [r7, #24]
 800b0cc:	e00f      	b.n	800b0ee <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b0ce:	79fb      	ldrb	r3, [r7, #7]
 800b0d0:	031a      	lsls	r2, r3, #12
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	4413      	add	r3, r2
 800b0d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0da:	461a      	mov	r2, r3
 800b0dc:	69fb      	ldr	r3, [r7, #28]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b0e2:	69fb      	ldr	r3, [r7, #28]
 800b0e4:	3304      	adds	r3, #4
 800b0e6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b0e8:	69bb      	ldr	r3, [r7, #24]
 800b0ea:	3301      	adds	r3, #1
 800b0ec:	61bb      	str	r3, [r7, #24]
 800b0ee:	69ba      	ldr	r2, [r7, #24]
 800b0f0:	693b      	ldr	r3, [r7, #16]
 800b0f2:	429a      	cmp	r2, r3
 800b0f4:	d3eb      	bcc.n	800b0ce <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b0f6:	2300      	movs	r3, #0
}
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	3724      	adds	r7, #36	; 0x24
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b102:	4770      	bx	lr

0800b104 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b104:	b480      	push	{r7}
 800b106:	b089      	sub	sp, #36	; 0x24
 800b108:	af00      	add	r7, sp, #0
 800b10a:	60f8      	str	r0, [r7, #12]
 800b10c:	60b9      	str	r1, [r7, #8]
 800b10e:	4613      	mov	r3, r2
 800b110:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800b11a:	88fb      	ldrh	r3, [r7, #6]
 800b11c:	3303      	adds	r3, #3
 800b11e:	089b      	lsrs	r3, r3, #2
 800b120:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800b122:	2300      	movs	r3, #0
 800b124:	61bb      	str	r3, [r7, #24]
 800b126:	e00b      	b.n	800b140 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b128:	697b      	ldr	r3, [r7, #20]
 800b12a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b12e:	681a      	ldr	r2, [r3, #0]
 800b130:	69fb      	ldr	r3, [r7, #28]
 800b132:	601a      	str	r2, [r3, #0]
    pDest++;
 800b134:	69fb      	ldr	r3, [r7, #28]
 800b136:	3304      	adds	r3, #4
 800b138:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800b13a:	69bb      	ldr	r3, [r7, #24]
 800b13c:	3301      	adds	r3, #1
 800b13e:	61bb      	str	r3, [r7, #24]
 800b140:	69ba      	ldr	r2, [r7, #24]
 800b142:	693b      	ldr	r3, [r7, #16]
 800b144:	429a      	cmp	r2, r3
 800b146:	d3ef      	bcc.n	800b128 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800b148:	69fb      	ldr	r3, [r7, #28]
}
 800b14a:	4618      	mov	r0, r3
 800b14c:	3724      	adds	r7, #36	; 0x24
 800b14e:	46bd      	mov	sp, r7
 800b150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b154:	4770      	bx	lr

0800b156 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b156:	b480      	push	{r7}
 800b158:	b085      	sub	sp, #20
 800b15a:	af00      	add	r7, sp, #0
 800b15c:	6078      	str	r0, [r7, #4]
 800b15e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	781b      	ldrb	r3, [r3, #0]
 800b168:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	785b      	ldrb	r3, [r3, #1]
 800b16e:	2b01      	cmp	r3, #1
 800b170:	d12c      	bne.n	800b1cc <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b172:	68bb      	ldr	r3, [r7, #8]
 800b174:	015a      	lsls	r2, r3, #5
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	4413      	add	r3, r2
 800b17a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	2b00      	cmp	r3, #0
 800b182:	db12      	blt.n	800b1aa <USB_EPSetStall+0x54>
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d00f      	beq.n	800b1aa <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b18a:	68bb      	ldr	r3, [r7, #8]
 800b18c:	015a      	lsls	r2, r3, #5
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	4413      	add	r3, r2
 800b192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	68ba      	ldr	r2, [r7, #8]
 800b19a:	0151      	lsls	r1, r2, #5
 800b19c:	68fa      	ldr	r2, [r7, #12]
 800b19e:	440a      	add	r2, r1
 800b1a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b1a8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	015a      	lsls	r2, r3, #5
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	4413      	add	r3, r2
 800b1b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	68ba      	ldr	r2, [r7, #8]
 800b1ba:	0151      	lsls	r1, r2, #5
 800b1bc:	68fa      	ldr	r2, [r7, #12]
 800b1be:	440a      	add	r2, r1
 800b1c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b1c8:	6013      	str	r3, [r2, #0]
 800b1ca:	e02b      	b.n	800b224 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	015a      	lsls	r2, r3, #5
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	4413      	add	r3, r2
 800b1d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	db12      	blt.n	800b204 <USB_EPSetStall+0xae>
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d00f      	beq.n	800b204 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	015a      	lsls	r2, r3, #5
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	4413      	add	r3, r2
 800b1ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	68ba      	ldr	r2, [r7, #8]
 800b1f4:	0151      	lsls	r1, r2, #5
 800b1f6:	68fa      	ldr	r2, [r7, #12]
 800b1f8:	440a      	add	r2, r1
 800b1fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b1fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b202:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b204:	68bb      	ldr	r3, [r7, #8]
 800b206:	015a      	lsls	r2, r3, #5
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	4413      	add	r3, r2
 800b20c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	68ba      	ldr	r2, [r7, #8]
 800b214:	0151      	lsls	r1, r2, #5
 800b216:	68fa      	ldr	r2, [r7, #12]
 800b218:	440a      	add	r2, r1
 800b21a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b21e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b222:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b224:	2300      	movs	r3, #0
}
 800b226:	4618      	mov	r0, r3
 800b228:	3714      	adds	r7, #20
 800b22a:	46bd      	mov	sp, r7
 800b22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b230:	4770      	bx	lr

0800b232 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b232:	b480      	push	{r7}
 800b234:	b085      	sub	sp, #20
 800b236:	af00      	add	r7, sp, #0
 800b238:	6078      	str	r0, [r7, #4]
 800b23a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	781b      	ldrb	r3, [r3, #0]
 800b244:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	785b      	ldrb	r3, [r3, #1]
 800b24a:	2b01      	cmp	r3, #1
 800b24c:	d128      	bne.n	800b2a0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b24e:	68bb      	ldr	r3, [r7, #8]
 800b250:	015a      	lsls	r2, r3, #5
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	4413      	add	r3, r2
 800b256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	68ba      	ldr	r2, [r7, #8]
 800b25e:	0151      	lsls	r1, r2, #5
 800b260:	68fa      	ldr	r2, [r7, #12]
 800b262:	440a      	add	r2, r1
 800b264:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b268:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b26c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	78db      	ldrb	r3, [r3, #3]
 800b272:	2b03      	cmp	r3, #3
 800b274:	d003      	beq.n	800b27e <USB_EPClearStall+0x4c>
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	78db      	ldrb	r3, [r3, #3]
 800b27a:	2b02      	cmp	r3, #2
 800b27c:	d138      	bne.n	800b2f0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	015a      	lsls	r2, r3, #5
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	4413      	add	r3, r2
 800b286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	68ba      	ldr	r2, [r7, #8]
 800b28e:	0151      	lsls	r1, r2, #5
 800b290:	68fa      	ldr	r2, [r7, #12]
 800b292:	440a      	add	r2, r1
 800b294:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b29c:	6013      	str	r3, [r2, #0]
 800b29e:	e027      	b.n	800b2f0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	015a      	lsls	r2, r3, #5
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	4413      	add	r3, r2
 800b2a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	68ba      	ldr	r2, [r7, #8]
 800b2b0:	0151      	lsls	r1, r2, #5
 800b2b2:	68fa      	ldr	r2, [r7, #12]
 800b2b4:	440a      	add	r2, r1
 800b2b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b2ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b2be:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	78db      	ldrb	r3, [r3, #3]
 800b2c4:	2b03      	cmp	r3, #3
 800b2c6:	d003      	beq.n	800b2d0 <USB_EPClearStall+0x9e>
 800b2c8:	683b      	ldr	r3, [r7, #0]
 800b2ca:	78db      	ldrb	r3, [r3, #3]
 800b2cc:	2b02      	cmp	r3, #2
 800b2ce:	d10f      	bne.n	800b2f0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	015a      	lsls	r2, r3, #5
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	4413      	add	r3, r2
 800b2d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	68ba      	ldr	r2, [r7, #8]
 800b2e0:	0151      	lsls	r1, r2, #5
 800b2e2:	68fa      	ldr	r2, [r7, #12]
 800b2e4:	440a      	add	r2, r1
 800b2e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b2ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b2ee:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b2f0:	2300      	movs	r3, #0
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	3714      	adds	r7, #20
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fc:	4770      	bx	lr

0800b2fe <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b2fe:	b480      	push	{r7}
 800b300:	b085      	sub	sp, #20
 800b302:	af00      	add	r7, sp, #0
 800b304:	6078      	str	r0, [r7, #4]
 800b306:	460b      	mov	r3, r1
 800b308:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	68fa      	ldr	r2, [r7, #12]
 800b318:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b31c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b320:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b328:	681a      	ldr	r2, [r3, #0]
 800b32a:	78fb      	ldrb	r3, [r7, #3]
 800b32c:	011b      	lsls	r3, r3, #4
 800b32e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b332:	68f9      	ldr	r1, [r7, #12]
 800b334:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b338:	4313      	orrs	r3, r2
 800b33a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b33c:	2300      	movs	r3, #0
}
 800b33e:	4618      	mov	r0, r3
 800b340:	3714      	adds	r7, #20
 800b342:	46bd      	mov	sp, r7
 800b344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b348:	4770      	bx	lr

0800b34a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b34a:	b580      	push	{r7, lr}
 800b34c:	b084      	sub	sp, #16
 800b34e:	af00      	add	r7, sp, #0
 800b350:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b35c:	685b      	ldr	r3, [r3, #4]
 800b35e:	68fa      	ldr	r2, [r7, #12]
 800b360:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b364:	f023 0302 	bic.w	r3, r3, #2
 800b368:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800b36a:	2003      	movs	r0, #3
 800b36c:	f7f7 fe60 	bl	8003030 <HAL_Delay>

  return HAL_OK;
 800b370:	2300      	movs	r3, #0
}
 800b372:	4618      	mov	r0, r3
 800b374:	3710      	adds	r7, #16
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}

0800b37a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b37a:	b580      	push	{r7, lr}
 800b37c:	b084      	sub	sp, #16
 800b37e:	af00      	add	r7, sp, #0
 800b380:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b38c:	685b      	ldr	r3, [r3, #4]
 800b38e:	68fa      	ldr	r2, [r7, #12]
 800b390:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b394:	f043 0302 	orr.w	r3, r3, #2
 800b398:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800b39a:	2003      	movs	r0, #3
 800b39c:	f7f7 fe48 	bl	8003030 <HAL_Delay>

  return HAL_OK;
 800b3a0:	2300      	movs	r3, #0
}
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	3710      	adds	r7, #16
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bd80      	pop	{r7, pc}

0800b3aa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b3aa:	b480      	push	{r7}
 800b3ac:	b085      	sub	sp, #20
 800b3ae:	af00      	add	r7, sp, #0
 800b3b0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	695b      	ldr	r3, [r3, #20]
 800b3b6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	699b      	ldr	r3, [r3, #24]
 800b3bc:	68fa      	ldr	r2, [r7, #12]
 800b3be:	4013      	ands	r3, r2
 800b3c0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
}
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	3714      	adds	r7, #20
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ce:	4770      	bx	lr

0800b3d0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b3d0:	b480      	push	{r7}
 800b3d2:	b085      	sub	sp, #20
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3e2:	699b      	ldr	r3, [r3, #24]
 800b3e4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3ec:	69db      	ldr	r3, [r3, #28]
 800b3ee:	68ba      	ldr	r2, [r7, #8]
 800b3f0:	4013      	ands	r3, r2
 800b3f2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	0c1b      	lsrs	r3, r3, #16
}
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	3714      	adds	r7, #20
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b402:	4770      	bx	lr

0800b404 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b404:	b480      	push	{r7}
 800b406:	b085      	sub	sp, #20
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b416:	699b      	ldr	r3, [r3, #24]
 800b418:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b420:	69db      	ldr	r3, [r3, #28]
 800b422:	68ba      	ldr	r2, [r7, #8]
 800b424:	4013      	ands	r3, r2
 800b426:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b428:	68bb      	ldr	r3, [r7, #8]
 800b42a:	b29b      	uxth	r3, r3
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	3714      	adds	r7, #20
 800b430:	46bd      	mov	sp, r7
 800b432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b436:	4770      	bx	lr

0800b438 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b438:	b480      	push	{r7}
 800b43a:	b085      	sub	sp, #20
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
 800b440:	460b      	mov	r3, r1
 800b442:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b448:	78fb      	ldrb	r3, [r7, #3]
 800b44a:	015a      	lsls	r2, r3, #5
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	4413      	add	r3, r2
 800b450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b454:	689b      	ldr	r3, [r3, #8]
 800b456:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b45e:	695b      	ldr	r3, [r3, #20]
 800b460:	68ba      	ldr	r2, [r7, #8]
 800b462:	4013      	ands	r3, r2
 800b464:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b466:	68bb      	ldr	r3, [r7, #8]
}
 800b468:	4618      	mov	r0, r3
 800b46a:	3714      	adds	r7, #20
 800b46c:	46bd      	mov	sp, r7
 800b46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b472:	4770      	bx	lr

0800b474 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b474:	b480      	push	{r7}
 800b476:	b087      	sub	sp, #28
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
 800b47c:	460b      	mov	r3, r1
 800b47e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b484:	697b      	ldr	r3, [r7, #20]
 800b486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b48a:	691b      	ldr	r3, [r3, #16]
 800b48c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b48e:	697b      	ldr	r3, [r7, #20]
 800b490:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b496:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b498:	78fb      	ldrb	r3, [r7, #3]
 800b49a:	f003 030f 	and.w	r3, r3, #15
 800b49e:	68fa      	ldr	r2, [r7, #12]
 800b4a0:	fa22 f303 	lsr.w	r3, r2, r3
 800b4a4:	01db      	lsls	r3, r3, #7
 800b4a6:	b2db      	uxtb	r3, r3
 800b4a8:	693a      	ldr	r2, [r7, #16]
 800b4aa:	4313      	orrs	r3, r2
 800b4ac:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b4ae:	78fb      	ldrb	r3, [r7, #3]
 800b4b0:	015a      	lsls	r2, r3, #5
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	4413      	add	r3, r2
 800b4b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4ba:	689b      	ldr	r3, [r3, #8]
 800b4bc:	693a      	ldr	r2, [r7, #16]
 800b4be:	4013      	ands	r3, r2
 800b4c0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b4c2:	68bb      	ldr	r3, [r7, #8]
}
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	371c      	adds	r7, #28
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ce:	4770      	bx	lr

0800b4d0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b4d0:	b480      	push	{r7}
 800b4d2:	b083      	sub	sp, #12
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	695b      	ldr	r3, [r3, #20]
 800b4dc:	f003 0301 	and.w	r3, r3, #1
}
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	370c      	adds	r7, #12
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ea:	4770      	bx	lr

0800b4ec <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b085      	sub	sp, #20
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	68fa      	ldr	r2, [r7, #12]
 800b502:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b506:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b50a:	f023 0307 	bic.w	r3, r3, #7
 800b50e:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b516:	689b      	ldr	r3, [r3, #8]
 800b518:	f003 0306 	and.w	r3, r3, #6
 800b51c:	2b04      	cmp	r3, #4
 800b51e:	d109      	bne.n	800b534 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	68fa      	ldr	r2, [r7, #12]
 800b52a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b52e:	f043 0303 	orr.w	r3, r3, #3
 800b532:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b53a:	685b      	ldr	r3, [r3, #4]
 800b53c:	68fa      	ldr	r2, [r7, #12]
 800b53e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b542:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b546:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b548:	2300      	movs	r3, #0
}
 800b54a:	4618      	mov	r0, r3
 800b54c:	3714      	adds	r7, #20
 800b54e:	46bd      	mov	sp, r7
 800b550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b554:	4770      	bx	lr
	...

0800b558 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800b558:	b480      	push	{r7}
 800b55a:	b087      	sub	sp, #28
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	60f8      	str	r0, [r7, #12]
 800b560:	460b      	mov	r3, r1
 800b562:	607a      	str	r2, [r7, #4]
 800b564:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	333c      	adds	r3, #60	; 0x3c
 800b56e:	3304      	adds	r3, #4
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b574:	693b      	ldr	r3, [r7, #16]
 800b576:	4a26      	ldr	r2, [pc, #152]	; (800b610 <USB_EP0_OutStart+0xb8>)
 800b578:	4293      	cmp	r3, r2
 800b57a:	d90a      	bls.n	800b592 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b57c:	697b      	ldr	r3, [r7, #20]
 800b57e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b588:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b58c:	d101      	bne.n	800b592 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b58e:	2300      	movs	r3, #0
 800b590:	e037      	b.n	800b602 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b592:	697b      	ldr	r3, [r7, #20]
 800b594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b598:	461a      	mov	r2, r3
 800b59a:	2300      	movs	r3, #0
 800b59c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b59e:	697b      	ldr	r3, [r7, #20]
 800b5a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5a4:	691b      	ldr	r3, [r3, #16]
 800b5a6:	697a      	ldr	r2, [r7, #20]
 800b5a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b5ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b5b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b5b2:	697b      	ldr	r3, [r7, #20]
 800b5b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5b8:	691b      	ldr	r3, [r3, #16]
 800b5ba:	697a      	ldr	r2, [r7, #20]
 800b5bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b5c0:	f043 0318 	orr.w	r3, r3, #24
 800b5c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b5c6:	697b      	ldr	r3, [r7, #20]
 800b5c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5cc:	691b      	ldr	r3, [r3, #16]
 800b5ce:	697a      	ldr	r2, [r7, #20]
 800b5d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b5d4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b5d8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b5da:	7afb      	ldrb	r3, [r7, #11]
 800b5dc:	2b01      	cmp	r3, #1
 800b5de:	d10f      	bne.n	800b600 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b5e0:	697b      	ldr	r3, [r7, #20]
 800b5e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5e6:	461a      	mov	r2, r3
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b5ec:	697b      	ldr	r3, [r7, #20]
 800b5ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	697a      	ldr	r2, [r7, #20]
 800b5f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b5fa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800b5fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b600:	2300      	movs	r3, #0
}
 800b602:	4618      	mov	r0, r3
 800b604:	371c      	adds	r7, #28
 800b606:	46bd      	mov	sp, r7
 800b608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60c:	4770      	bx	lr
 800b60e:	bf00      	nop
 800b610:	4f54300a 	.word	0x4f54300a

0800b614 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b614:	b480      	push	{r7}
 800b616:	b085      	sub	sp, #20
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b61c:	2300      	movs	r3, #0
 800b61e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	3301      	adds	r3, #1
 800b624:	60fb      	str	r3, [r7, #12]
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	4a13      	ldr	r2, [pc, #76]	; (800b678 <USB_CoreReset+0x64>)
 800b62a:	4293      	cmp	r3, r2
 800b62c:	d901      	bls.n	800b632 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b62e:	2303      	movs	r3, #3
 800b630:	e01b      	b.n	800b66a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	691b      	ldr	r3, [r3, #16]
 800b636:	2b00      	cmp	r3, #0
 800b638:	daf2      	bge.n	800b620 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b63a:	2300      	movs	r3, #0
 800b63c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	691b      	ldr	r3, [r3, #16]
 800b642:	f043 0201 	orr.w	r2, r3, #1
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	3301      	adds	r3, #1
 800b64e:	60fb      	str	r3, [r7, #12]
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	4a09      	ldr	r2, [pc, #36]	; (800b678 <USB_CoreReset+0x64>)
 800b654:	4293      	cmp	r3, r2
 800b656:	d901      	bls.n	800b65c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b658:	2303      	movs	r3, #3
 800b65a:	e006      	b.n	800b66a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	691b      	ldr	r3, [r3, #16]
 800b660:	f003 0301 	and.w	r3, r3, #1
 800b664:	2b01      	cmp	r3, #1
 800b666:	d0f0      	beq.n	800b64a <USB_CoreReset+0x36>

  return HAL_OK;
 800b668:	2300      	movs	r3, #0
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3714      	adds	r7, #20
 800b66e:	46bd      	mov	sp, r7
 800b670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b674:	4770      	bx	lr
 800b676:	bf00      	nop
 800b678:	00030d40 	.word	0x00030d40

0800b67c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b680:	4904      	ldr	r1, [pc, #16]	; (800b694 <MX_FATFS_Init+0x18>)
 800b682:	4805      	ldr	r0, [pc, #20]	; (800b698 <MX_FATFS_Init+0x1c>)
 800b684:	f001 fe36 	bl	800d2f4 <FATFS_LinkDriver>
 800b688:	4603      	mov	r3, r0
 800b68a:	461a      	mov	r2, r3
 800b68c:	4b03      	ldr	r3, [pc, #12]	; (800b69c <MX_FATFS_Init+0x20>)
 800b68e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800b690:	bf00      	nop
 800b692:	bd80      	pop	{r7, pc}
 800b694:	20000f64 	.word	0x20000f64
 800b698:	08012028 	.word	0x08012028
 800b69c:	20000f60 	.word	0x20000f60

0800b6a0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b082      	sub	sp, #8
 800b6a4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b6aa:	f000 f871 	bl	800b790 <BSP_SD_IsDetected>
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	2b01      	cmp	r3, #1
 800b6b2:	d001      	beq.n	800b6b8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800b6b4:	2301      	movs	r3, #1
 800b6b6:	e012      	b.n	800b6de <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800b6b8:	480b      	ldr	r0, [pc, #44]	; (800b6e8 <BSP_SD_Init+0x48>)
 800b6ba:	f7fa fdb4 	bl	8006226 <HAL_SD_Init>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800b6c2:	79fb      	ldrb	r3, [r7, #7]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d109      	bne.n	800b6dc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800b6c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b6cc:	4806      	ldr	r0, [pc, #24]	; (800b6e8 <BSP_SD_Init+0x48>)
 800b6ce:	f7fb fb93 	bl	8006df8 <HAL_SD_ConfigWideBusOperation>
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d001      	beq.n	800b6dc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800b6d8:	2301      	movs	r3, #1
 800b6da:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800b6dc:	79fb      	ldrb	r3, [r7, #7]
}
 800b6de:	4618      	mov	r0, r3
 800b6e0:	3708      	adds	r7, #8
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}
 800b6e6:	bf00      	nop
 800b6e8:	20000e40 	.word	0x20000e40

0800b6ec <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b086      	sub	sp, #24
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	60f8      	str	r0, [r7, #12]
 800b6f4:	60b9      	str	r1, [r7, #8]
 800b6f6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	68ba      	ldr	r2, [r7, #8]
 800b700:	68f9      	ldr	r1, [r7, #12]
 800b702:	4806      	ldr	r0, [pc, #24]	; (800b71c <BSP_SD_ReadBlocks_DMA+0x30>)
 800b704:	f7fa fe20 	bl	8006348 <HAL_SD_ReadBlocks_DMA>
 800b708:	4603      	mov	r3, r0
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d001      	beq.n	800b712 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b70e:	2301      	movs	r3, #1
 800b710:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800b712:	7dfb      	ldrb	r3, [r7, #23]
}
 800b714:	4618      	mov	r0, r3
 800b716:	3718      	adds	r7, #24
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd80      	pop	{r7, pc}
 800b71c:	20000e40 	.word	0x20000e40

0800b720 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b086      	sub	sp, #24
 800b724:	af00      	add	r7, sp, #0
 800b726:	60f8      	str	r0, [r7, #12]
 800b728:	60b9      	str	r1, [r7, #8]
 800b72a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b72c:	2300      	movs	r3, #0
 800b72e:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	68ba      	ldr	r2, [r7, #8]
 800b734:	68f9      	ldr	r1, [r7, #12]
 800b736:	4806      	ldr	r0, [pc, #24]	; (800b750 <BSP_SD_WriteBlocks_DMA+0x30>)
 800b738:	f7fa fef0 	bl	800651c <HAL_SD_WriteBlocks_DMA>
 800b73c:	4603      	mov	r3, r0
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d001      	beq.n	800b746 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b742:	2301      	movs	r3, #1
 800b744:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800b746:	7dfb      	ldrb	r3, [r7, #23]
}
 800b748:	4618      	mov	r0, r3
 800b74a:	3718      	adds	r7, #24
 800b74c:	46bd      	mov	sp, r7
 800b74e:	bd80      	pop	{r7, pc}
 800b750:	20000e40 	.word	0x20000e40

0800b754 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b758:	4805      	ldr	r0, [pc, #20]	; (800b770 <BSP_SD_GetCardState+0x1c>)
 800b75a:	f7fb fbc9 	bl	8006ef0 <HAL_SD_GetCardState>
 800b75e:	4603      	mov	r3, r0
 800b760:	2b04      	cmp	r3, #4
 800b762:	bf14      	ite	ne
 800b764:	2301      	movne	r3, #1
 800b766:	2300      	moveq	r3, #0
 800b768:	b2db      	uxtb	r3, r3
}
 800b76a:	4618      	mov	r0, r3
 800b76c:	bd80      	pop	{r7, pc}
 800b76e:	bf00      	nop
 800b770:	20000e40 	.word	0x20000e40

0800b774 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b082      	sub	sp, #8
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800b77c:	6879      	ldr	r1, [r7, #4]
 800b77e:	4803      	ldr	r0, [pc, #12]	; (800b78c <BSP_SD_GetCardInfo+0x18>)
 800b780:	f7fb fb0e 	bl	8006da0 <HAL_SD_GetCardInfo>
}
 800b784:	bf00      	nop
 800b786:	3708      	adds	r7, #8
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}
 800b78c:	20000e40 	.word	0x20000e40

0800b790 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b082      	sub	sp, #8
 800b794:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b796:	2301      	movs	r3, #1
 800b798:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800b79a:	f000 f80b 	bl	800b7b4 <BSP_PlatformIsDetected>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d101      	bne.n	800b7a8 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800b7a8:	79fb      	ldrb	r3, [r7, #7]
 800b7aa:	b2db      	uxtb	r3, r3
}
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	3708      	adds	r7, #8
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}

0800b7b4 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b082      	sub	sp, #8
 800b7b8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800b7ba:	2301      	movs	r3, #1
 800b7bc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800b7be:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b7c2:	4806      	ldr	r0, [pc, #24]	; (800b7dc <BSP_PlatformIsDetected+0x28>)
 800b7c4:	f7f8 fa9e 	bl	8003d04 <HAL_GPIO_ReadPin>
 800b7c8:	4603      	mov	r3, r0
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d001      	beq.n	800b7d2 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800b7d2:	79fb      	ldrb	r3, [r7, #7]
}  
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	3708      	adds	r7, #8
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	bd80      	pop	{r7, pc}
 800b7dc:	40020000 	.word	0x40020000

0800b7e0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b084      	sub	sp, #16
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800b7e8:	f7f7 fc16 	bl	8003018 <HAL_GetTick>
 800b7ec:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800b7ee:	e006      	b.n	800b7fe <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b7f0:	f7ff ffb0 	bl	800b754 <BSP_SD_GetCardState>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d101      	bne.n	800b7fe <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	e009      	b.n	800b812 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800b7fe:	f7f7 fc0b 	bl	8003018 <HAL_GetTick>
 800b802:	4602      	mov	r2, r0
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	1ad3      	subs	r3, r2, r3
 800b808:	687a      	ldr	r2, [r7, #4]
 800b80a:	429a      	cmp	r2, r3
 800b80c:	d8f0      	bhi.n	800b7f0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800b80e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b812:	4618      	mov	r0, r3
 800b814:	3710      	adds	r7, #16
 800b816:	46bd      	mov	sp, r7
 800b818:	bd80      	pop	{r7, pc}
	...

0800b81c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b082      	sub	sp, #8
 800b820:	af00      	add	r7, sp, #0
 800b822:	4603      	mov	r3, r0
 800b824:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b826:	4b0b      	ldr	r3, [pc, #44]	; (800b854 <SD_CheckStatus+0x38>)
 800b828:	2201      	movs	r2, #1
 800b82a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800b82c:	f7ff ff92 	bl	800b754 <BSP_SD_GetCardState>
 800b830:	4603      	mov	r3, r0
 800b832:	2b00      	cmp	r3, #0
 800b834:	d107      	bne.n	800b846 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b836:	4b07      	ldr	r3, [pc, #28]	; (800b854 <SD_CheckStatus+0x38>)
 800b838:	781b      	ldrb	r3, [r3, #0]
 800b83a:	b2db      	uxtb	r3, r3
 800b83c:	f023 0301 	bic.w	r3, r3, #1
 800b840:	b2da      	uxtb	r2, r3
 800b842:	4b04      	ldr	r3, [pc, #16]	; (800b854 <SD_CheckStatus+0x38>)
 800b844:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b846:	4b03      	ldr	r3, [pc, #12]	; (800b854 <SD_CheckStatus+0x38>)
 800b848:	781b      	ldrb	r3, [r3, #0]
 800b84a:	b2db      	uxtb	r3, r3
}
 800b84c:	4618      	mov	r0, r3
 800b84e:	3708      	adds	r7, #8
 800b850:	46bd      	mov	sp, r7
 800b852:	bd80      	pop	{r7, pc}
 800b854:	20000011 	.word	0x20000011

0800b858 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b082      	sub	sp, #8
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	4603      	mov	r3, r0
 800b860:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800b862:	f7ff ff1d 	bl	800b6a0 <BSP_SD_Init>
 800b866:	4603      	mov	r3, r0
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d107      	bne.n	800b87c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800b86c:	79fb      	ldrb	r3, [r7, #7]
 800b86e:	4618      	mov	r0, r3
 800b870:	f7ff ffd4 	bl	800b81c <SD_CheckStatus>
 800b874:	4603      	mov	r3, r0
 800b876:	461a      	mov	r2, r3
 800b878:	4b04      	ldr	r3, [pc, #16]	; (800b88c <SD_initialize+0x34>)
 800b87a:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 800b87c:	4b03      	ldr	r3, [pc, #12]	; (800b88c <SD_initialize+0x34>)
 800b87e:	781b      	ldrb	r3, [r3, #0]
 800b880:	b2db      	uxtb	r3, r3
}
 800b882:	4618      	mov	r0, r3
 800b884:	3708      	adds	r7, #8
 800b886:	46bd      	mov	sp, r7
 800b888:	bd80      	pop	{r7, pc}
 800b88a:	bf00      	nop
 800b88c:	20000011 	.word	0x20000011

0800b890 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b082      	sub	sp, #8
 800b894:	af00      	add	r7, sp, #0
 800b896:	4603      	mov	r3, r0
 800b898:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b89a:	79fb      	ldrb	r3, [r7, #7]
 800b89c:	4618      	mov	r0, r3
 800b89e:	f7ff ffbd 	bl	800b81c <SD_CheckStatus>
 800b8a2:	4603      	mov	r3, r0
}
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	3708      	adds	r7, #8
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bd80      	pop	{r7, pc}

0800b8ac <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b088      	sub	sp, #32
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	60b9      	str	r1, [r7, #8]
 800b8b4:	607a      	str	r2, [r7, #4]
 800b8b6:	603b      	str	r3, [r7, #0]
 800b8b8:	4603      	mov	r3, r0
 800b8ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b8bc:	2301      	movs	r3, #1
 800b8be:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b8c0:	f247 5030 	movw	r0, #30000	; 0x7530
 800b8c4:	f7ff ff8c 	bl	800b7e0 <SD_CheckStatusWithTimeout>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	da01      	bge.n	800b8d2 <SD_read+0x26>
  {
    return res;
 800b8ce:	7ffb      	ldrb	r3, [r7, #31]
 800b8d0:	e08b      	b.n	800b9ea <SD_read+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800b8d2:	68bb      	ldr	r3, [r7, #8]
 800b8d4:	f003 0303 	and.w	r3, r3, #3
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	f040 8085 	bne.w	800b9e8 <SD_read+0x13c>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800b8de:	683a      	ldr	r2, [r7, #0]
 800b8e0:	6879      	ldr	r1, [r7, #4]
 800b8e2:	68b8      	ldr	r0, [r7, #8]
 800b8e4:	f7ff ff02 	bl	800b6ec <BSP_SD_ReadBlocks_DMA>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d133      	bne.n	800b956 <SD_read+0xaa>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800b8ee:	4b41      	ldr	r3, [pc, #260]	; (800b9f4 <SD_read+0x148>)
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800b8f4:	f7f7 fb90 	bl	8003018 <HAL_GetTick>
 800b8f8:	6178      	str	r0, [r7, #20]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b8fa:	bf00      	nop
 800b8fc:	4b3d      	ldr	r3, [pc, #244]	; (800b9f4 <SD_read+0x148>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d108      	bne.n	800b916 <SD_read+0x6a>
 800b904:	f7f7 fb88 	bl	8003018 <HAL_GetTick>
 800b908:	4602      	mov	r2, r0
 800b90a:	697b      	ldr	r3, [r7, #20]
 800b90c:	1ad3      	subs	r3, r2, r3
 800b90e:	f247 522f 	movw	r2, #29999	; 0x752f
 800b912:	4293      	cmp	r3, r2
 800b914:	d9f2      	bls.n	800b8fc <SD_read+0x50>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800b916:	4b37      	ldr	r3, [pc, #220]	; (800b9f4 <SD_read+0x148>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d102      	bne.n	800b924 <SD_read+0x78>
      {
        res = RES_ERROR;
 800b91e:	2301      	movs	r3, #1
 800b920:	77fb      	strb	r3, [r7, #31]
 800b922:	e061      	b.n	800b9e8 <SD_read+0x13c>
      }
      else
      {
        ReadStatus = 0;
 800b924:	4b33      	ldr	r3, [pc, #204]	; (800b9f4 <SD_read+0x148>)
 800b926:	2200      	movs	r2, #0
 800b928:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800b92a:	f7f7 fb75 	bl	8003018 <HAL_GetTick>
 800b92e:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b930:	e007      	b.n	800b942 <SD_read+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b932:	f7ff ff0f 	bl	800b754 <BSP_SD_GetCardState>
 800b936:	4603      	mov	r3, r0
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d102      	bne.n	800b942 <SD_read+0x96>
          {
            res = RES_OK;
 800b93c:	2300      	movs	r3, #0
 800b93e:	77fb      	strb	r3, [r7, #31]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800b940:	e052      	b.n	800b9e8 <SD_read+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b942:	f7f7 fb69 	bl	8003018 <HAL_GetTick>
 800b946:	4602      	mov	r2, r0
 800b948:	697b      	ldr	r3, [r7, #20]
 800b94a:	1ad3      	subs	r3, r2, r3
 800b94c:	f247 522f 	movw	r2, #29999	; 0x752f
 800b950:	4293      	cmp	r3, r2
 800b952:	d9ee      	bls.n	800b932 <SD_read+0x86>
 800b954:	e048      	b.n	800b9e8 <SD_read+0x13c>
#if defined(ENABLE_SCRATCH_BUFFER)
    else {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 800b956:	2300      	movs	r3, #0
 800b958:	61bb      	str	r3, [r7, #24]
 800b95a:	e034      	b.n	800b9c6 <SD_read+0x11a>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	1c5a      	adds	r2, r3, #1
 800b960:	607a      	str	r2, [r7, #4]
 800b962:	2201      	movs	r2, #1
 800b964:	4619      	mov	r1, r3
 800b966:	4824      	ldr	r0, [pc, #144]	; (800b9f8 <SD_read+0x14c>)
 800b968:	f7ff fec0 	bl	800b6ec <BSP_SD_ReadBlocks_DMA>
 800b96c:	4603      	mov	r3, r0
 800b96e:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 800b970:	7fbb      	ldrb	r3, [r7, #30]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d12c      	bne.n	800b9d0 <SD_read+0x124>
          /* wait until the read is successful or a timeout occurs */

          ReadStatus = 0;
 800b976:	4b1f      	ldr	r3, [pc, #124]	; (800b9f4 <SD_read+0x148>)
 800b978:	2200      	movs	r2, #0
 800b97a:	601a      	str	r2, [r3, #0]
          timeout = HAL_GetTick();
 800b97c:	f7f7 fb4c 	bl	8003018 <HAL_GetTick>
 800b980:	6178      	str	r0, [r7, #20]
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b982:	bf00      	nop
 800b984:	4b1b      	ldr	r3, [pc, #108]	; (800b9f4 <SD_read+0x148>)
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d108      	bne.n	800b99e <SD_read+0xf2>
 800b98c:	f7f7 fb44 	bl	8003018 <HAL_GetTick>
 800b990:	4602      	mov	r2, r0
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	1ad3      	subs	r3, r2, r3
 800b996:	f247 522f 	movw	r2, #29999	; 0x752f
 800b99a:	4293      	cmp	r3, r2
 800b99c:	d9f2      	bls.n	800b984 <SD_read+0xd8>
          {
          }
          if (ReadStatus == 0)
 800b99e:	4b15      	ldr	r3, [pc, #84]	; (800b9f4 <SD_read+0x148>)
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d016      	beq.n	800b9d4 <SD_read+0x128>
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	4a13      	ldr	r2, [pc, #76]	; (800b9f8 <SD_read+0x14c>)
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	4611      	mov	r1, r2
 800b9ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b9b2:	461a      	mov	r2, r3
 800b9b4:	f002 fa0c 	bl	800ddd0 <memcpy>
          buff += BLOCKSIZE;
 800b9b8:	68bb      	ldr	r3, [r7, #8]
 800b9ba:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b9be:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 800b9c0:	69bb      	ldr	r3, [r7, #24]
 800b9c2:	3301      	adds	r3, #1
 800b9c4:	61bb      	str	r3, [r7, #24]
 800b9c6:	69bb      	ldr	r3, [r7, #24]
 800b9c8:	683a      	ldr	r2, [r7, #0]
 800b9ca:	429a      	cmp	r2, r3
 800b9cc:	d8c6      	bhi.n	800b95c <SD_read+0xb0>
 800b9ce:	e002      	b.n	800b9d6 <SD_read+0x12a>
        }
        else
        {
          break;
 800b9d0:	bf00      	nop
 800b9d2:	e000      	b.n	800b9d6 <SD_read+0x12a>
            break;
 800b9d4:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 800b9d6:	69bb      	ldr	r3, [r7, #24]
 800b9d8:	683a      	ldr	r2, [r7, #0]
 800b9da:	429a      	cmp	r2, r3
 800b9dc:	d104      	bne.n	800b9e8 <SD_read+0x13c>
 800b9de:	7fbb      	ldrb	r3, [r7, #30]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d101      	bne.n	800b9e8 <SD_read+0x13c>
        res = RES_OK;
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	77fb      	strb	r3, [r7, #31]
    }
#endif
  }

  return res;
 800b9e8:	7ffb      	ldrb	r3, [r7, #31]
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	3720      	adds	r7, #32
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}
 800b9f2:	bf00      	nop
 800b9f4:	20000980 	.word	0x20000980
 800b9f8:	2000077c 	.word	0x2000077c

0800b9fc <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b088      	sub	sp, #32
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	60b9      	str	r1, [r7, #8]
 800ba04:	607a      	str	r2, [r7, #4]
 800ba06:	603b      	str	r3, [r7, #0]
 800ba08:	4603      	mov	r3, r0
 800ba0a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ba0c:	2301      	movs	r3, #1
 800ba0e:	77fb      	strb	r3, [r7, #31]
  uint32_t timeout;
  uint8_t ret;
  int i;

   WriteStatus = 0;
 800ba10:	4b4c      	ldr	r3, [pc, #304]	; (800bb44 <SD_write+0x148>)
 800ba12:	2200      	movs	r2, #0
 800ba14:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ba16:	f247 5030 	movw	r0, #30000	; 0x7530
 800ba1a:	f7ff fee1 	bl	800b7e0 <SD_CheckStatusWithTimeout>
 800ba1e:	4603      	mov	r3, r0
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	da01      	bge.n	800ba28 <SD_write+0x2c>
  {
    return res;
 800ba24:	7ffb      	ldrb	r3, [r7, #31]
 800ba26:	e088      	b.n	800bb3a <SD_write+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	f003 0303 	and.w	r3, r3, #3
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	f040 8082 	bne.w	800bb38 <SD_write+0x13c>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800ba34:	683a      	ldr	r2, [r7, #0]
 800ba36:	6879      	ldr	r1, [r7, #4]
 800ba38:	68b8      	ldr	r0, [r7, #8]
 800ba3a:	f7ff fe71 	bl	800b720 <BSP_SD_WriteBlocks_DMA>
 800ba3e:	4603      	mov	r3, r0
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d130      	bne.n	800baa6 <SD_write+0xaa>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800ba44:	f7f7 fae8 	bl	8003018 <HAL_GetTick>
 800ba48:	6178      	str	r0, [r7, #20]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800ba4a:	bf00      	nop
 800ba4c:	4b3d      	ldr	r3, [pc, #244]	; (800bb44 <SD_write+0x148>)
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d108      	bne.n	800ba66 <SD_write+0x6a>
 800ba54:	f7f7 fae0 	bl	8003018 <HAL_GetTick>
 800ba58:	4602      	mov	r2, r0
 800ba5a:	697b      	ldr	r3, [r7, #20]
 800ba5c:	1ad3      	subs	r3, r2, r3
 800ba5e:	f247 522f 	movw	r2, #29999	; 0x752f
 800ba62:	4293      	cmp	r3, r2
 800ba64:	d9f2      	bls.n	800ba4c <SD_write+0x50>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800ba66:	4b37      	ldr	r3, [pc, #220]	; (800bb44 <SD_write+0x148>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d102      	bne.n	800ba74 <SD_write+0x78>
      {
        res = RES_ERROR;
 800ba6e:	2301      	movs	r3, #1
 800ba70:	77fb      	strb	r3, [r7, #31]
 800ba72:	e061      	b.n	800bb38 <SD_write+0x13c>
      }
      else
      {
        WriteStatus = 0;
 800ba74:	4b33      	ldr	r3, [pc, #204]	; (800bb44 <SD_write+0x148>)
 800ba76:	2200      	movs	r2, #0
 800ba78:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800ba7a:	f7f7 facd 	bl	8003018 <HAL_GetTick>
 800ba7e:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ba80:	e007      	b.n	800ba92 <SD_write+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ba82:	f7ff fe67 	bl	800b754 <BSP_SD_GetCardState>
 800ba86:	4603      	mov	r3, r0
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d102      	bne.n	800ba92 <SD_write+0x96>
          {
            res = RES_OK;
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	77fb      	strb	r3, [r7, #31]
            break;
 800ba90:	e052      	b.n	800bb38 <SD_write+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ba92:	f7f7 fac1 	bl	8003018 <HAL_GetTick>
 800ba96:	4602      	mov	r2, r0
 800ba98:	697b      	ldr	r3, [r7, #20]
 800ba9a:	1ad3      	subs	r3, r2, r3
 800ba9c:	f247 522f 	movw	r2, #29999	; 0x752f
 800baa0:	4293      	cmp	r3, r2
 800baa2:	d9ee      	bls.n	800ba82 <SD_write+0x86>
 800baa4:	e048      	b.n	800bb38 <SD_write+0x13c>
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 800baa6:	2300      	movs	r3, #0
 800baa8:	61bb      	str	r3, [r7, #24]
 800baaa:	e034      	b.n	800bb16 <SD_write+0x11a>
      {
        WriteStatus = 0;
 800baac:	4b25      	ldr	r3, [pc, #148]	; (800bb44 <SD_write+0x148>)
 800baae:	2200      	movs	r2, #0
 800bab0:	601a      	str	r2, [r3, #0]
        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	1c5a      	adds	r2, r3, #1
 800bab6:	607a      	str	r2, [r7, #4]
 800bab8:	2201      	movs	r2, #1
 800baba:	4619      	mov	r1, r3
 800babc:	4822      	ldr	r0, [pc, #136]	; (800bb48 <SD_write+0x14c>)
 800babe:	f7ff fe2f 	bl	800b720 <BSP_SD_WriteBlocks_DMA>
 800bac2:	4603      	mov	r3, r0
 800bac4:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 800bac6:	7fbb      	ldrb	r3, [r7, #30]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d129      	bne.n	800bb20 <SD_write+0x124>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 800bacc:	f7f7 faa4 	bl	8003018 <HAL_GetTick>
 800bad0:	6178      	str	r0, [r7, #20]
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800bad2:	bf00      	nop
 800bad4:	4b1b      	ldr	r3, [pc, #108]	; (800bb44 <SD_write+0x148>)
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d108      	bne.n	800baee <SD_write+0xf2>
 800badc:	f7f7 fa9c 	bl	8003018 <HAL_GetTick>
 800bae0:	4602      	mov	r2, r0
 800bae2:	697b      	ldr	r3, [r7, #20]
 800bae4:	1ad3      	subs	r3, r2, r3
 800bae6:	f247 522f 	movw	r2, #29999	; 0x752f
 800baea:	4293      	cmp	r3, r2
 800baec:	d9f2      	bls.n	800bad4 <SD_write+0xd8>
          {
          }
          if (WriteStatus == 0)
 800baee:	4b15      	ldr	r3, [pc, #84]	; (800bb44 <SD_write+0x148>)
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d016      	beq.n	800bb24 <SD_write+0x128>
          {
            break;
          }

          memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 800baf6:	68bb      	ldr	r3, [r7, #8]
 800baf8:	4a13      	ldr	r2, [pc, #76]	; (800bb48 <SD_write+0x14c>)
 800bafa:	4618      	mov	r0, r3
 800bafc:	4611      	mov	r1, r2
 800bafe:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bb02:	461a      	mov	r2, r3
 800bb04:	f002 f964 	bl	800ddd0 <memcpy>
          buff += BLOCKSIZE;
 800bb08:	68bb      	ldr	r3, [r7, #8]
 800bb0a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800bb0e:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++)
 800bb10:	69bb      	ldr	r3, [r7, #24]
 800bb12:	3301      	adds	r3, #1
 800bb14:	61bb      	str	r3, [r7, #24]
 800bb16:	69bb      	ldr	r3, [r7, #24]
 800bb18:	683a      	ldr	r2, [r7, #0]
 800bb1a:	429a      	cmp	r2, r3
 800bb1c:	d8c6      	bhi.n	800baac <SD_write+0xb0>
 800bb1e:	e002      	b.n	800bb26 <SD_write+0x12a>
        }
        else
        {
          break;
 800bb20:	bf00      	nop
 800bb22:	e000      	b.n	800bb26 <SD_write+0x12a>
            break;
 800bb24:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 800bb26:	69bb      	ldr	r3, [r7, #24]
 800bb28:	683a      	ldr	r2, [r7, #0]
 800bb2a:	429a      	cmp	r2, r3
 800bb2c:	d104      	bne.n	800bb38 <SD_write+0x13c>
 800bb2e:	7fbb      	ldrb	r3, [r7, #30]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d101      	bne.n	800bb38 <SD_write+0x13c>
        res = RES_OK;
 800bb34:	2300      	movs	r3, #0
 800bb36:	77fb      	strb	r3, [r7, #31]
    }

  }
  return res;
 800bb38:	7ffb      	ldrb	r3, [r7, #31]
}
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	3720      	adds	r7, #32
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	bd80      	pop	{r7, pc}
 800bb42:	bf00      	nop
 800bb44:	2000097c 	.word	0x2000097c
 800bb48:	2000077c 	.word	0x2000077c

0800bb4c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b08c      	sub	sp, #48	; 0x30
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	4603      	mov	r3, r0
 800bb54:	603a      	str	r2, [r7, #0]
 800bb56:	71fb      	strb	r3, [r7, #7]
 800bb58:	460b      	mov	r3, r1
 800bb5a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800bb5c:	2301      	movs	r3, #1
 800bb5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800bb62:	4b25      	ldr	r3, [pc, #148]	; (800bbf8 <SD_ioctl+0xac>)
 800bb64:	781b      	ldrb	r3, [r3, #0]
 800bb66:	b2db      	uxtb	r3, r3
 800bb68:	f003 0301 	and.w	r3, r3, #1
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d001      	beq.n	800bb74 <SD_ioctl+0x28>
 800bb70:	2303      	movs	r3, #3
 800bb72:	e03c      	b.n	800bbee <SD_ioctl+0xa2>

  switch (cmd)
 800bb74:	79bb      	ldrb	r3, [r7, #6]
 800bb76:	2b03      	cmp	r3, #3
 800bb78:	d834      	bhi.n	800bbe4 <SD_ioctl+0x98>
 800bb7a:	a201      	add	r2, pc, #4	; (adr r2, 800bb80 <SD_ioctl+0x34>)
 800bb7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb80:	0800bb91 	.word	0x0800bb91
 800bb84:	0800bb99 	.word	0x0800bb99
 800bb88:	0800bbb1 	.word	0x0800bbb1
 800bb8c:	0800bbcb 	.word	0x0800bbcb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800bb90:	2300      	movs	r3, #0
 800bb92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bb96:	e028      	b.n	800bbea <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800bb98:	f107 030c 	add.w	r3, r7, #12
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	f7ff fde9 	bl	800b774 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800bba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bba8:	2300      	movs	r3, #0
 800bbaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bbae:	e01c      	b.n	800bbea <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800bbb0:	f107 030c 	add.w	r3, r7, #12
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	f7ff fddd 	bl	800b774 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800bbba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbbc:	b29a      	uxth	r2, r3
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bbc8:	e00f      	b.n	800bbea <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800bbca:	f107 030c 	add.w	r3, r7, #12
 800bbce:	4618      	mov	r0, r3
 800bbd0:	f7ff fdd0 	bl	800b774 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800bbd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbd6:	0a5a      	lsrs	r2, r3, #9
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bbdc:	2300      	movs	r3, #0
 800bbde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bbe2:	e002      	b.n	800bbea <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800bbe4:	2304      	movs	r3, #4
 800bbe6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800bbea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800bbee:	4618      	mov	r0, r3
 800bbf0:	3730      	adds	r7, #48	; 0x30
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}
 800bbf6:	bf00      	nop
 800bbf8:	20000011 	.word	0x20000011

0800bbfc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b084      	sub	sp, #16
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
 800bc04:	460b      	mov	r3, r1
 800bc06:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800bc08:	2300      	movs	r3, #0
 800bc0a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	7c1b      	ldrb	r3, [r3, #16]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d115      	bne.n	800bc40 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bc14:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bc18:	2202      	movs	r2, #2
 800bc1a:	2181      	movs	r1, #129	; 0x81
 800bc1c:	6878      	ldr	r0, [r7, #4]
 800bc1e:	f001 ff50 	bl	800dac2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	2201      	movs	r2, #1
 800bc26:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bc28:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bc2c:	2202      	movs	r2, #2
 800bc2e:	2101      	movs	r1, #1
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	f001 ff46 	bl	800dac2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	2201      	movs	r2, #1
 800bc3a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800bc3e:	e012      	b.n	800bc66 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bc40:	2340      	movs	r3, #64	; 0x40
 800bc42:	2202      	movs	r2, #2
 800bc44:	2181      	movs	r1, #129	; 0x81
 800bc46:	6878      	ldr	r0, [r7, #4]
 800bc48:	f001 ff3b 	bl	800dac2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2201      	movs	r2, #1
 800bc50:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bc52:	2340      	movs	r3, #64	; 0x40
 800bc54:	2202      	movs	r2, #2
 800bc56:	2101      	movs	r1, #1
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	f001 ff32 	bl	800dac2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2201      	movs	r2, #1
 800bc62:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bc66:	2308      	movs	r3, #8
 800bc68:	2203      	movs	r2, #3
 800bc6a:	2182      	movs	r1, #130	; 0x82
 800bc6c:	6878      	ldr	r0, [r7, #4]
 800bc6e:	f001 ff28 	bl	800dac2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2201      	movs	r2, #1
 800bc76:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800bc78:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800bc7c:	f002 f898 	bl	800ddb0 <malloc>
 800bc80:	4603      	mov	r3, r0
 800bc82:	461a      	mov	r2, r3
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d102      	bne.n	800bc9a <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 800bc94:	2301      	movs	r3, #1
 800bc96:	73fb      	strb	r3, [r7, #15]
 800bc98:	e026      	b.n	800bce8 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bca0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	2200      	movs	r2, #0
 800bcb0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800bcb4:	68bb      	ldr	r3, [r7, #8]
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	7c1b      	ldrb	r3, [r3, #16]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d109      	bne.n	800bcd8 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bcc4:	68bb      	ldr	r3, [r7, #8]
 800bcc6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bcca:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bcce:	2101      	movs	r1, #1
 800bcd0:	6878      	ldr	r0, [r7, #4]
 800bcd2:	f001 ffe7 	bl	800dca4 <USBD_LL_PrepareReceive>
 800bcd6:	e007      	b.n	800bce8 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bcd8:	68bb      	ldr	r3, [r7, #8]
 800bcda:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bcde:	2340      	movs	r3, #64	; 0x40
 800bce0:	2101      	movs	r1, #1
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	f001 ffde 	bl	800dca4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800bce8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcea:	4618      	mov	r0, r3
 800bcec:	3710      	adds	r7, #16
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	bd80      	pop	{r7, pc}

0800bcf2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bcf2:	b580      	push	{r7, lr}
 800bcf4:	b084      	sub	sp, #16
 800bcf6:	af00      	add	r7, sp, #0
 800bcf8:	6078      	str	r0, [r7, #4]
 800bcfa:	460b      	mov	r3, r1
 800bcfc:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800bcfe:	2300      	movs	r3, #0
 800bd00:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800bd02:	2181      	movs	r1, #129	; 0x81
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	f001 ff02 	bl	800db0e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800bd10:	2101      	movs	r1, #1
 800bd12:	6878      	ldr	r0, [r7, #4]
 800bd14:	f001 fefb 	bl	800db0e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800bd20:	2182      	movs	r1, #130	; 0x82
 800bd22:	6878      	ldr	r0, [r7, #4]
 800bd24:	f001 fef3 	bl	800db0e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d00e      	beq.n	800bd56 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bd3e:	685b      	ldr	r3, [r3, #4]
 800bd40:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f002 f839 	bl	800ddc0 <free>
    pdev->pClassData = NULL;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2200      	movs	r2, #0
 800bd52:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800bd56:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd58:	4618      	mov	r0, r3
 800bd5a:	3710      	adds	r7, #16
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bd80      	pop	{r7, pc}

0800bd60 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b086      	sub	sp, #24
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
 800bd68:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bd70:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800bd72:	2300      	movs	r3, #0
 800bd74:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800bd76:	2300      	movs	r3, #0
 800bd78:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	781b      	ldrb	r3, [r3, #0]
 800bd82:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d039      	beq.n	800bdfe <USBD_CDC_Setup+0x9e>
 800bd8a:	2b20      	cmp	r3, #32
 800bd8c:	d17c      	bne.n	800be88 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	88db      	ldrh	r3, [r3, #6]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d029      	beq.n	800bdea <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	781b      	ldrb	r3, [r3, #0]
 800bd9a:	b25b      	sxtb	r3, r3
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	da11      	bge.n	800bdc4 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bda6:	689b      	ldr	r3, [r3, #8]
 800bda8:	683a      	ldr	r2, [r7, #0]
 800bdaa:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800bdac:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bdae:	683a      	ldr	r2, [r7, #0]
 800bdb0:	88d2      	ldrh	r2, [r2, #6]
 800bdb2:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800bdb4:	6939      	ldr	r1, [r7, #16]
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	88db      	ldrh	r3, [r3, #6]
 800bdba:	461a      	mov	r2, r3
 800bdbc:	6878      	ldr	r0, [r7, #4]
 800bdbe:	f001 f9c9 	bl	800d154 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800bdc2:	e068      	b.n	800be96 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 800bdc4:	683b      	ldr	r3, [r7, #0]
 800bdc6:	785a      	ldrb	r2, [r3, #1]
 800bdc8:	693b      	ldr	r3, [r7, #16]
 800bdca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	88db      	ldrh	r3, [r3, #6]
 800bdd2:	b2da      	uxtb	r2, r3
 800bdd4:	693b      	ldr	r3, [r7, #16]
 800bdd6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800bdda:	6939      	ldr	r1, [r7, #16]
 800bddc:	683b      	ldr	r3, [r7, #0]
 800bdde:	88db      	ldrh	r3, [r3, #6]
 800bde0:	461a      	mov	r2, r3
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	f001 f9e4 	bl	800d1b0 <USBD_CtlPrepareRx>
    break;
 800bde8:	e055      	b.n	800be96 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bdf0:	689b      	ldr	r3, [r3, #8]
 800bdf2:	683a      	ldr	r2, [r7, #0]
 800bdf4:	7850      	ldrb	r0, [r2, #1]
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	6839      	ldr	r1, [r7, #0]
 800bdfa:	4798      	blx	r3
    break;
 800bdfc:	e04b      	b.n	800be96 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	785b      	ldrb	r3, [r3, #1]
 800be02:	2b0a      	cmp	r3, #10
 800be04:	d017      	beq.n	800be36 <USBD_CDC_Setup+0xd6>
 800be06:	2b0b      	cmp	r3, #11
 800be08:	d029      	beq.n	800be5e <USBD_CDC_Setup+0xfe>
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d133      	bne.n	800be76 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800be14:	2b03      	cmp	r3, #3
 800be16:	d107      	bne.n	800be28 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800be18:	f107 030c 	add.w	r3, r7, #12
 800be1c:	2202      	movs	r2, #2
 800be1e:	4619      	mov	r1, r3
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	f001 f997 	bl	800d154 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800be26:	e02e      	b.n	800be86 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800be28:	6839      	ldr	r1, [r7, #0]
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	f001 f927 	bl	800d07e <USBD_CtlError>
			  ret = USBD_FAIL;
 800be30:	2302      	movs	r3, #2
 800be32:	75fb      	strb	r3, [r7, #23]
      break;
 800be34:	e027      	b.n	800be86 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800be3c:	2b03      	cmp	r3, #3
 800be3e:	d107      	bne.n	800be50 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800be40:	f107 030f 	add.w	r3, r7, #15
 800be44:	2201      	movs	r2, #1
 800be46:	4619      	mov	r1, r3
 800be48:	6878      	ldr	r0, [r7, #4]
 800be4a:	f001 f983 	bl	800d154 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800be4e:	e01a      	b.n	800be86 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800be50:	6839      	ldr	r1, [r7, #0]
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	f001 f913 	bl	800d07e <USBD_CtlError>
			  ret = USBD_FAIL;
 800be58:	2302      	movs	r3, #2
 800be5a:	75fb      	strb	r3, [r7, #23]
      break;
 800be5c:	e013      	b.n	800be86 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800be64:	2b03      	cmp	r3, #3
 800be66:	d00d      	beq.n	800be84 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 800be68:	6839      	ldr	r1, [r7, #0]
 800be6a:	6878      	ldr	r0, [r7, #4]
 800be6c:	f001 f907 	bl	800d07e <USBD_CtlError>
			  ret = USBD_FAIL;
 800be70:	2302      	movs	r3, #2
 800be72:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800be74:	e006      	b.n	800be84 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 800be76:	6839      	ldr	r1, [r7, #0]
 800be78:	6878      	ldr	r0, [r7, #4]
 800be7a:	f001 f900 	bl	800d07e <USBD_CtlError>
      ret = USBD_FAIL;
 800be7e:	2302      	movs	r3, #2
 800be80:	75fb      	strb	r3, [r7, #23]
      break;
 800be82:	e000      	b.n	800be86 <USBD_CDC_Setup+0x126>
      break;
 800be84:	bf00      	nop
    }
    break;
 800be86:	e006      	b.n	800be96 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 800be88:	6839      	ldr	r1, [r7, #0]
 800be8a:	6878      	ldr	r0, [r7, #4]
 800be8c:	f001 f8f7 	bl	800d07e <USBD_CtlError>
    ret = USBD_FAIL;
 800be90:	2302      	movs	r3, #2
 800be92:	75fb      	strb	r3, [r7, #23]
    break;
 800be94:	bf00      	nop
  }

  return ret;
 800be96:	7dfb      	ldrb	r3, [r7, #23]
}
 800be98:	4618      	mov	r0, r3
 800be9a:	3718      	adds	r7, #24
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bd80      	pop	{r7, pc}

0800bea0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b084      	sub	sp, #16
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
 800bea8:	460b      	mov	r3, r1
 800beaa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800beb2:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800beba:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d03a      	beq.n	800bf3c <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800bec6:	78fa      	ldrb	r2, [r7, #3]
 800bec8:	6879      	ldr	r1, [r7, #4]
 800beca:	4613      	mov	r3, r2
 800becc:	009b      	lsls	r3, r3, #2
 800bece:	4413      	add	r3, r2
 800bed0:	009b      	lsls	r3, r3, #2
 800bed2:	440b      	add	r3, r1
 800bed4:	331c      	adds	r3, #28
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d029      	beq.n	800bf30 <USBD_CDC_DataIn+0x90>
 800bedc:	78fa      	ldrb	r2, [r7, #3]
 800bede:	6879      	ldr	r1, [r7, #4]
 800bee0:	4613      	mov	r3, r2
 800bee2:	009b      	lsls	r3, r3, #2
 800bee4:	4413      	add	r3, r2
 800bee6:	009b      	lsls	r3, r3, #2
 800bee8:	440b      	add	r3, r1
 800beea:	331c      	adds	r3, #28
 800beec:	681a      	ldr	r2, [r3, #0]
 800beee:	78f9      	ldrb	r1, [r7, #3]
 800bef0:	68b8      	ldr	r0, [r7, #8]
 800bef2:	460b      	mov	r3, r1
 800bef4:	00db      	lsls	r3, r3, #3
 800bef6:	1a5b      	subs	r3, r3, r1
 800bef8:	009b      	lsls	r3, r3, #2
 800befa:	4403      	add	r3, r0
 800befc:	3344      	adds	r3, #68	; 0x44
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	fbb2 f1f3 	udiv	r1, r2, r3
 800bf04:	fb03 f301 	mul.w	r3, r3, r1
 800bf08:	1ad3      	subs	r3, r2, r3
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d110      	bne.n	800bf30 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800bf0e:	78fa      	ldrb	r2, [r7, #3]
 800bf10:	6879      	ldr	r1, [r7, #4]
 800bf12:	4613      	mov	r3, r2
 800bf14:	009b      	lsls	r3, r3, #2
 800bf16:	4413      	add	r3, r2
 800bf18:	009b      	lsls	r3, r3, #2
 800bf1a:	440b      	add	r3, r1
 800bf1c:	331c      	adds	r3, #28
 800bf1e:	2200      	movs	r2, #0
 800bf20:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800bf22:	78f9      	ldrb	r1, [r7, #3]
 800bf24:	2300      	movs	r3, #0
 800bf26:	2200      	movs	r2, #0
 800bf28:	6878      	ldr	r0, [r7, #4]
 800bf2a:	f001 fe98 	bl	800dc5e <USBD_LL_Transmit>
 800bf2e:	e003      	b.n	800bf38 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	2200      	movs	r2, #0
 800bf34:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800bf38:	2300      	movs	r3, #0
 800bf3a:	e000      	b.n	800bf3e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800bf3c:	2302      	movs	r3, #2
  }
}
 800bf3e:	4618      	mov	r0, r3
 800bf40:	3710      	adds	r7, #16
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd80      	pop	{r7, pc}

0800bf46 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bf46:	b580      	push	{r7, lr}
 800bf48:	b084      	sub	sp, #16
 800bf4a:	af00      	add	r7, sp, #0
 800bf4c:	6078      	str	r0, [r7, #4]
 800bf4e:	460b      	mov	r3, r1
 800bf50:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bf58:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800bf5a:	78fb      	ldrb	r3, [r7, #3]
 800bf5c:	4619      	mov	r1, r3
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	f001 fec3 	bl	800dcea <USBD_LL_GetRxDataSize>
 800bf64:	4602      	mov	r2, r0
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d00d      	beq.n	800bf92 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bf7c:	68db      	ldr	r3, [r3, #12]
 800bf7e:	68fa      	ldr	r2, [r7, #12]
 800bf80:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800bf84:	68fa      	ldr	r2, [r7, #12]
 800bf86:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800bf8a:	4611      	mov	r1, r2
 800bf8c:	4798      	blx	r3

    return USBD_OK;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	e000      	b.n	800bf94 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800bf92:	2302      	movs	r3, #2
  }
}
 800bf94:	4618      	mov	r0, r3
 800bf96:	3710      	adds	r7, #16
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	bd80      	pop	{r7, pc}

0800bf9c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b084      	sub	sp, #16
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bfaa:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d015      	beq.n	800bfe2 <USBD_CDC_EP0_RxReady+0x46>
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800bfbc:	2bff      	cmp	r3, #255	; 0xff
 800bfbe:	d010      	beq.n	800bfe2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bfc6:	689b      	ldr	r3, [r3, #8]
 800bfc8:	68fa      	ldr	r2, [r7, #12]
 800bfca:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800bfce:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800bfd0:	68fa      	ldr	r2, [r7, #12]
 800bfd2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bfd6:	b292      	uxth	r2, r2
 800bfd8:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	22ff      	movs	r2, #255	; 0xff
 800bfde:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800bfe2:	2300      	movs	r3, #0
}
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	3710      	adds	r7, #16
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bd80      	pop	{r7, pc}

0800bfec <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800bfec:	b480      	push	{r7}
 800bfee:	b083      	sub	sp, #12
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2243      	movs	r2, #67	; 0x43
 800bff8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800bffa:	4b03      	ldr	r3, [pc, #12]	; (800c008 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800bffc:	4618      	mov	r0, r3
 800bffe:	370c      	adds	r7, #12
 800c000:	46bd      	mov	sp, r7
 800c002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c006:	4770      	bx	lr
 800c008:	2000009c 	.word	0x2000009c

0800c00c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800c00c:	b480      	push	{r7}
 800c00e:	b083      	sub	sp, #12
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	2243      	movs	r2, #67	; 0x43
 800c018:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800c01a:	4b03      	ldr	r3, [pc, #12]	; (800c028 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800c01c:	4618      	mov	r0, r3
 800c01e:	370c      	adds	r7, #12
 800c020:	46bd      	mov	sp, r7
 800c022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c026:	4770      	bx	lr
 800c028:	20000058 	.word	0x20000058

0800c02c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800c02c:	b480      	push	{r7}
 800c02e:	b083      	sub	sp, #12
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2243      	movs	r2, #67	; 0x43
 800c038:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800c03a:	4b03      	ldr	r3, [pc, #12]	; (800c048 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c03c:	4618      	mov	r0, r3
 800c03e:	370c      	adds	r7, #12
 800c040:	46bd      	mov	sp, r7
 800c042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c046:	4770      	bx	lr
 800c048:	200000e0 	.word	0x200000e0

0800c04c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800c04c:	b480      	push	{r7}
 800c04e:	b083      	sub	sp, #12
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	220a      	movs	r2, #10
 800c058:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800c05a:	4b03      	ldr	r3, [pc, #12]	; (800c068 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c05c:	4618      	mov	r0, r3
 800c05e:	370c      	adds	r7, #12
 800c060:	46bd      	mov	sp, r7
 800c062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c066:	4770      	bx	lr
 800c068:	20000014 	.word	0x20000014

0800c06c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800c06c:	b480      	push	{r7}
 800c06e:	b085      	sub	sp, #20
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
 800c074:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800c076:	2302      	movs	r3, #2
 800c078:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d005      	beq.n	800c08c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	683a      	ldr	r2, [r7, #0]
 800c084:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 800c088:	2300      	movs	r3, #0
 800c08a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c08c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c08e:	4618      	mov	r0, r3
 800c090:	3714      	adds	r7, #20
 800c092:	46bd      	mov	sp, r7
 800c094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c098:	4770      	bx	lr

0800c09a <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800c09a:	b480      	push	{r7}
 800c09c:	b087      	sub	sp, #28
 800c09e:	af00      	add	r7, sp, #0
 800c0a0:	60f8      	str	r0, [r7, #12]
 800c0a2:	60b9      	str	r1, [r7, #8]
 800c0a4:	4613      	mov	r3, r2
 800c0a6:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c0ae:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800c0b0:	697b      	ldr	r3, [r7, #20]
 800c0b2:	68ba      	ldr	r2, [r7, #8]
 800c0b4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c0b8:	88fa      	ldrh	r2, [r7, #6]
 800c0ba:	697b      	ldr	r3, [r7, #20]
 800c0bc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800c0c0:	2300      	movs	r3, #0
}
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	371c      	adds	r7, #28
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0cc:	4770      	bx	lr

0800c0ce <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800c0ce:	b480      	push	{r7}
 800c0d0:	b085      	sub	sp, #20
 800c0d2:	af00      	add	r7, sp, #0
 800c0d4:	6078      	str	r0, [r7, #4]
 800c0d6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c0de:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	683a      	ldr	r2, [r7, #0]
 800c0e4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800c0e8:	2300      	movs	r3, #0
}
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	3714      	adds	r7, #20
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f4:	4770      	bx	lr

0800c0f6 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c0f6:	b580      	push	{r7, lr}
 800c0f8:	b084      	sub	sp, #16
 800c0fa:	af00      	add	r7, sp, #0
 800c0fc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c104:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d01c      	beq.n	800c14a <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c116:	2b00      	cmp	r3, #0
 800c118:	d115      	bne.n	800c146 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	2201      	movs	r2, #1
 800c11e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800c138:	b29b      	uxth	r3, r3
 800c13a:	2181      	movs	r1, #129	; 0x81
 800c13c:	6878      	ldr	r0, [r7, #4]
 800c13e:	f001 fd8e 	bl	800dc5e <USBD_LL_Transmit>

      return USBD_OK;
 800c142:	2300      	movs	r3, #0
 800c144:	e002      	b.n	800c14c <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800c146:	2301      	movs	r3, #1
 800c148:	e000      	b.n	800c14c <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800c14a:	2302      	movs	r3, #2
  }
}
 800c14c:	4618      	mov	r0, r3
 800c14e:	3710      	adds	r7, #16
 800c150:	46bd      	mov	sp, r7
 800c152:	bd80      	pop	{r7, pc}

0800c154 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b084      	sub	sp, #16
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c162:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d017      	beq.n	800c19e <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	7c1b      	ldrb	r3, [r3, #16]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d109      	bne.n	800c18a <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c17c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c180:	2101      	movs	r1, #1
 800c182:	6878      	ldr	r0, [r7, #4]
 800c184:	f001 fd8e 	bl	800dca4 <USBD_LL_PrepareReceive>
 800c188:	e007      	b.n	800c19a <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c190:	2340      	movs	r3, #64	; 0x40
 800c192:	2101      	movs	r1, #1
 800c194:	6878      	ldr	r0, [r7, #4]
 800c196:	f001 fd85 	bl	800dca4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800c19a:	2300      	movs	r3, #0
 800c19c:	e000      	b.n	800c1a0 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800c19e:	2302      	movs	r3, #2
  }
}
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	3710      	adds	r7, #16
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	bd80      	pop	{r7, pc}

0800c1a8 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b084      	sub	sp, #16
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	60f8      	str	r0, [r7, #12]
 800c1b0:	60b9      	str	r1, [r7, #8]
 800c1b2:	4613      	mov	r3, r2
 800c1b4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d101      	bne.n	800c1c0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c1bc:	2302      	movs	r3, #2
 800c1be:	e01a      	b.n	800c1f6 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d003      	beq.n	800c1d2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800c1d2:	68bb      	ldr	r3, [r7, #8]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d003      	beq.n	800c1e0 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	68ba      	ldr	r2, [r7, #8]
 800c1dc:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	2201      	movs	r2, #1
 800c1e4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	79fa      	ldrb	r2, [r7, #7]
 800c1ec:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800c1ee:	68f8      	ldr	r0, [r7, #12]
 800c1f0:	f001 fc00 	bl	800d9f4 <USBD_LL_Init>

  return USBD_OK;
 800c1f4:	2300      	movs	r3, #0
}
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	3710      	adds	r7, #16
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bd80      	pop	{r7, pc}

0800c1fe <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c1fe:	b480      	push	{r7}
 800c200:	b085      	sub	sp, #20
 800c202:	af00      	add	r7, sp, #0
 800c204:	6078      	str	r0, [r7, #4]
 800c206:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800c208:	2300      	movs	r3, #0
 800c20a:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800c20c:	683b      	ldr	r3, [r7, #0]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d006      	beq.n	800c220 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	683a      	ldr	r2, [r7, #0]
 800c216:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800c21a:	2300      	movs	r3, #0
 800c21c:	73fb      	strb	r3, [r7, #15]
 800c21e:	e001      	b.n	800c224 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800c220:	2302      	movs	r3, #2
 800c222:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c224:	7bfb      	ldrb	r3, [r7, #15]
}
 800c226:	4618      	mov	r0, r3
 800c228:	3714      	adds	r7, #20
 800c22a:	46bd      	mov	sp, r7
 800c22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c230:	4770      	bx	lr

0800c232 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800c232:	b580      	push	{r7, lr}
 800c234:	b082      	sub	sp, #8
 800c236:	af00      	add	r7, sp, #0
 800c238:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f001 fc26 	bl	800da8c <USBD_LL_Start>

  return USBD_OK;
 800c240:	2300      	movs	r3, #0
}
 800c242:	4618      	mov	r0, r3
 800c244:	3708      	adds	r7, #8
 800c246:	46bd      	mov	sp, r7
 800c248:	bd80      	pop	{r7, pc}

0800c24a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800c24a:	b480      	push	{r7}
 800c24c:	b083      	sub	sp, #12
 800c24e:	af00      	add	r7, sp, #0
 800c250:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c252:	2300      	movs	r3, #0
}
 800c254:	4618      	mov	r0, r3
 800c256:	370c      	adds	r7, #12
 800c258:	46bd      	mov	sp, r7
 800c25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25e:	4770      	bx	lr

0800c260 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b084      	sub	sp, #16
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
 800c268:	460b      	mov	r3, r1
 800c26a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800c26c:	2302      	movs	r3, #2
 800c26e:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c276:	2b00      	cmp	r3, #0
 800c278:	d00c      	beq.n	800c294 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	78fa      	ldrb	r2, [r7, #3]
 800c284:	4611      	mov	r1, r2
 800c286:	6878      	ldr	r0, [r7, #4]
 800c288:	4798      	blx	r3
 800c28a:	4603      	mov	r3, r0
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d101      	bne.n	800c294 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800c290:	2300      	movs	r3, #0
 800c292:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800c294:	7bfb      	ldrb	r3, [r7, #15]
}
 800c296:	4618      	mov	r0, r3
 800c298:	3710      	adds	r7, #16
 800c29a:	46bd      	mov	sp, r7
 800c29c:	bd80      	pop	{r7, pc}

0800c29e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800c29e:	b580      	push	{r7, lr}
 800c2a0:	b082      	sub	sp, #8
 800c2a2:	af00      	add	r7, sp, #0
 800c2a4:	6078      	str	r0, [r7, #4]
 800c2a6:	460b      	mov	r3, r1
 800c2a8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c2b0:	685b      	ldr	r3, [r3, #4]
 800c2b2:	78fa      	ldrb	r2, [r7, #3]
 800c2b4:	4611      	mov	r1, r2
 800c2b6:	6878      	ldr	r0, [r7, #4]
 800c2b8:	4798      	blx	r3
  return USBD_OK;
 800c2ba:	2300      	movs	r3, #0
}
 800c2bc:	4618      	mov	r0, r3
 800c2be:	3708      	adds	r7, #8
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	bd80      	pop	{r7, pc}

0800c2c4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b082      	sub	sp, #8
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
 800c2cc:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800c2d4:	6839      	ldr	r1, [r7, #0]
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	f000 fe94 	bl	800d004 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2201      	movs	r2, #1
 800c2e0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800c2ea:	461a      	mov	r2, r3
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800c2f8:	f003 031f 	and.w	r3, r3, #31
 800c2fc:	2b01      	cmp	r3, #1
 800c2fe:	d00c      	beq.n	800c31a <USBD_LL_SetupStage+0x56>
 800c300:	2b01      	cmp	r3, #1
 800c302:	d302      	bcc.n	800c30a <USBD_LL_SetupStage+0x46>
 800c304:	2b02      	cmp	r3, #2
 800c306:	d010      	beq.n	800c32a <USBD_LL_SetupStage+0x66>
 800c308:	e017      	b.n	800c33a <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800c310:	4619      	mov	r1, r3
 800c312:	6878      	ldr	r0, [r7, #4]
 800c314:	f000 fa04 	bl	800c720 <USBD_StdDevReq>
    break;
 800c318:	e01a      	b.n	800c350 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800c320:	4619      	mov	r1, r3
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f000 fa66 	bl	800c7f4 <USBD_StdItfReq>
    break;
 800c328:	e012      	b.n	800c350 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800c330:	4619      	mov	r1, r3
 800c332:	6878      	ldr	r0, [r7, #4]
 800c334:	f000 faa4 	bl	800c880 <USBD_StdEPReq>
    break;
 800c338:	e00a      	b.n	800c350 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800c340:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c344:	b2db      	uxtb	r3, r3
 800c346:	4619      	mov	r1, r3
 800c348:	6878      	ldr	r0, [r7, #4]
 800c34a:	f001 fbff 	bl	800db4c <USBD_LL_StallEP>
    break;
 800c34e:	bf00      	nop
  }

  return USBD_OK;
 800c350:	2300      	movs	r3, #0
}
 800c352:	4618      	mov	r0, r3
 800c354:	3708      	adds	r7, #8
 800c356:	46bd      	mov	sp, r7
 800c358:	bd80      	pop	{r7, pc}

0800c35a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c35a:	b580      	push	{r7, lr}
 800c35c:	b086      	sub	sp, #24
 800c35e:	af00      	add	r7, sp, #0
 800c360:	60f8      	str	r0, [r7, #12]
 800c362:	460b      	mov	r3, r1
 800c364:	607a      	str	r2, [r7, #4]
 800c366:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800c368:	7afb      	ldrb	r3, [r7, #11]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d14b      	bne.n	800c406 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800c374:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800c37c:	2b03      	cmp	r3, #3
 800c37e:	d134      	bne.n	800c3ea <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800c380:	697b      	ldr	r3, [r7, #20]
 800c382:	68da      	ldr	r2, [r3, #12]
 800c384:	697b      	ldr	r3, [r7, #20]
 800c386:	691b      	ldr	r3, [r3, #16]
 800c388:	429a      	cmp	r2, r3
 800c38a:	d919      	bls.n	800c3c0 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800c38c:	697b      	ldr	r3, [r7, #20]
 800c38e:	68da      	ldr	r2, [r3, #12]
 800c390:	697b      	ldr	r3, [r7, #20]
 800c392:	691b      	ldr	r3, [r3, #16]
 800c394:	1ad2      	subs	r2, r2, r3
 800c396:	697b      	ldr	r3, [r7, #20]
 800c398:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c39a:	697b      	ldr	r3, [r7, #20]
 800c39c:	68da      	ldr	r2, [r3, #12]
 800c39e:	697b      	ldr	r3, [r7, #20]
 800c3a0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800c3a2:	429a      	cmp	r2, r3
 800c3a4:	d203      	bcs.n	800c3ae <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c3a6:	697b      	ldr	r3, [r7, #20]
 800c3a8:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800c3aa:	b29b      	uxth	r3, r3
 800c3ac:	e002      	b.n	800c3b4 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c3ae:	697b      	ldr	r3, [r7, #20]
 800c3b0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800c3b2:	b29b      	uxth	r3, r3
 800c3b4:	461a      	mov	r2, r3
 800c3b6:	6879      	ldr	r1, [r7, #4]
 800c3b8:	68f8      	ldr	r0, [r7, #12]
 800c3ba:	f000 ff17 	bl	800d1ec <USBD_CtlContinueRx>
 800c3be:	e038      	b.n	800c432 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c3c6:	691b      	ldr	r3, [r3, #16]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d00a      	beq.n	800c3e2 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800c3d2:	2b03      	cmp	r3, #3
 800c3d4:	d105      	bne.n	800c3e2 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c3dc:	691b      	ldr	r3, [r3, #16]
 800c3de:	68f8      	ldr	r0, [r7, #12]
 800c3e0:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800c3e2:	68f8      	ldr	r0, [r7, #12]
 800c3e4:	f000 ff14 	bl	800d210 <USBD_CtlSendStatus>
 800c3e8:	e023      	b.n	800c432 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800c3f0:	2b05      	cmp	r3, #5
 800c3f2:	d11e      	bne.n	800c432 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800c3fc:	2100      	movs	r1, #0
 800c3fe:	68f8      	ldr	r0, [r7, #12]
 800c400:	f001 fba4 	bl	800db4c <USBD_LL_StallEP>
 800c404:	e015      	b.n	800c432 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c40c:	699b      	ldr	r3, [r3, #24]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d00d      	beq.n	800c42e <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800c418:	2b03      	cmp	r3, #3
 800c41a:	d108      	bne.n	800c42e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c422:	699b      	ldr	r3, [r3, #24]
 800c424:	7afa      	ldrb	r2, [r7, #11]
 800c426:	4611      	mov	r1, r2
 800c428:	68f8      	ldr	r0, [r7, #12]
 800c42a:	4798      	blx	r3
 800c42c:	e001      	b.n	800c432 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c42e:	2302      	movs	r3, #2
 800c430:	e000      	b.n	800c434 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800c432:	2300      	movs	r3, #0
}
 800c434:	4618      	mov	r0, r3
 800c436:	3718      	adds	r7, #24
 800c438:	46bd      	mov	sp, r7
 800c43a:	bd80      	pop	{r7, pc}

0800c43c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b086      	sub	sp, #24
 800c440:	af00      	add	r7, sp, #0
 800c442:	60f8      	str	r0, [r7, #12]
 800c444:	460b      	mov	r3, r1
 800c446:	607a      	str	r2, [r7, #4]
 800c448:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800c44a:	7afb      	ldrb	r3, [r7, #11]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d17f      	bne.n	800c550 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	3314      	adds	r3, #20
 800c454:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800c45c:	2b02      	cmp	r3, #2
 800c45e:	d15c      	bne.n	800c51a <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800c460:	697b      	ldr	r3, [r7, #20]
 800c462:	68da      	ldr	r2, [r3, #12]
 800c464:	697b      	ldr	r3, [r7, #20]
 800c466:	691b      	ldr	r3, [r3, #16]
 800c468:	429a      	cmp	r2, r3
 800c46a:	d915      	bls.n	800c498 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800c46c:	697b      	ldr	r3, [r7, #20]
 800c46e:	68da      	ldr	r2, [r3, #12]
 800c470:	697b      	ldr	r3, [r7, #20]
 800c472:	691b      	ldr	r3, [r3, #16]
 800c474:	1ad2      	subs	r2, r2, r3
 800c476:	697b      	ldr	r3, [r7, #20]
 800c478:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800c47a:	697b      	ldr	r3, [r7, #20]
 800c47c:	68db      	ldr	r3, [r3, #12]
 800c47e:	b29b      	uxth	r3, r3
 800c480:	461a      	mov	r2, r3
 800c482:	6879      	ldr	r1, [r7, #4]
 800c484:	68f8      	ldr	r0, [r7, #12]
 800c486:	f000 fe81 	bl	800d18c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800c48a:	2300      	movs	r3, #0
 800c48c:	2200      	movs	r2, #0
 800c48e:	2100      	movs	r1, #0
 800c490:	68f8      	ldr	r0, [r7, #12]
 800c492:	f001 fc07 	bl	800dca4 <USBD_LL_PrepareReceive>
 800c496:	e04e      	b.n	800c536 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800c498:	697b      	ldr	r3, [r7, #20]
 800c49a:	689b      	ldr	r3, [r3, #8]
 800c49c:	697a      	ldr	r2, [r7, #20]
 800c49e:	6912      	ldr	r2, [r2, #16]
 800c4a0:	fbb3 f1f2 	udiv	r1, r3, r2
 800c4a4:	fb02 f201 	mul.w	r2, r2, r1
 800c4a8:	1a9b      	subs	r3, r3, r2
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d11c      	bne.n	800c4e8 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800c4ae:	697b      	ldr	r3, [r7, #20]
 800c4b0:	689a      	ldr	r2, [r3, #8]
 800c4b2:	697b      	ldr	r3, [r7, #20]
 800c4b4:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800c4b6:	429a      	cmp	r2, r3
 800c4b8:	d316      	bcc.n	800c4e8 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800c4ba:	697b      	ldr	r3, [r7, #20]
 800c4bc:	689a      	ldr	r2, [r3, #8]
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800c4c4:	429a      	cmp	r2, r3
 800c4c6:	d20f      	bcs.n	800c4e8 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	2100      	movs	r1, #0
 800c4cc:	68f8      	ldr	r0, [r7, #12]
 800c4ce:	f000 fe5d 	bl	800d18c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800c4da:	2300      	movs	r3, #0
 800c4dc:	2200      	movs	r2, #0
 800c4de:	2100      	movs	r1, #0
 800c4e0:	68f8      	ldr	r0, [r7, #12]
 800c4e2:	f001 fbdf 	bl	800dca4 <USBD_LL_PrepareReceive>
 800c4e6:	e026      	b.n	800c536 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c4ee:	68db      	ldr	r3, [r3, #12]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d00a      	beq.n	800c50a <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800c4fa:	2b03      	cmp	r3, #3
 800c4fc:	d105      	bne.n	800c50a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c504:	68db      	ldr	r3, [r3, #12]
 800c506:	68f8      	ldr	r0, [r7, #12]
 800c508:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800c50a:	2180      	movs	r1, #128	; 0x80
 800c50c:	68f8      	ldr	r0, [r7, #12]
 800c50e:	f001 fb1d 	bl	800db4c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800c512:	68f8      	ldr	r0, [r7, #12]
 800c514:	f000 fe8f 	bl	800d236 <USBD_CtlReceiveStatus>
 800c518:	e00d      	b.n	800c536 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800c520:	2b04      	cmp	r3, #4
 800c522:	d004      	beq.n	800c52e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d103      	bne.n	800c536 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800c52e:	2180      	movs	r1, #128	; 0x80
 800c530:	68f8      	ldr	r0, [r7, #12]
 800c532:	f001 fb0b 	bl	800db4c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800c53c:	2b01      	cmp	r3, #1
 800c53e:	d11d      	bne.n	800c57c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800c540:	68f8      	ldr	r0, [r7, #12]
 800c542:	f7ff fe82 	bl	800c24a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	2200      	movs	r2, #0
 800c54a:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800c54e:	e015      	b.n	800c57c <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c556:	695b      	ldr	r3, [r3, #20]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d00d      	beq.n	800c578 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800c562:	2b03      	cmp	r3, #3
 800c564:	d108      	bne.n	800c578 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c56c:	695b      	ldr	r3, [r3, #20]
 800c56e:	7afa      	ldrb	r2, [r7, #11]
 800c570:	4611      	mov	r1, r2
 800c572:	68f8      	ldr	r0, [r7, #12]
 800c574:	4798      	blx	r3
 800c576:	e001      	b.n	800c57c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c578:	2302      	movs	r3, #2
 800c57a:	e000      	b.n	800c57e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800c57c:	2300      	movs	r3, #0
}
 800c57e:	4618      	mov	r0, r3
 800c580:	3718      	adds	r7, #24
 800c582:	46bd      	mov	sp, r7
 800c584:	bd80      	pop	{r7, pc}

0800c586 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800c586:	b580      	push	{r7, lr}
 800c588:	b082      	sub	sp, #8
 800c58a:	af00      	add	r7, sp, #0
 800c58c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c58e:	2340      	movs	r3, #64	; 0x40
 800c590:	2200      	movs	r2, #0
 800c592:	2100      	movs	r1, #0
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	f001 fa94 	bl	800dac2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	2201      	movs	r2, #1
 800c59e:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	2240      	movs	r2, #64	; 0x40
 800c5a6:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c5aa:	2340      	movs	r3, #64	; 0x40
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	2180      	movs	r1, #128	; 0x80
 800c5b0:	6878      	ldr	r0, [r7, #4]
 800c5b2:	f001 fa86 	bl	800dac2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	2201      	movs	r2, #1
 800c5ba:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2240      	movs	r2, #64	; 0x40
 800c5c0:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	2201      	movs	r2, #1
 800c5c6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2200      	movs	r2, #0
 800c5dc:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d009      	beq.n	800c5fe <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c5f0:	685b      	ldr	r3, [r3, #4]
 800c5f2:	687a      	ldr	r2, [r7, #4]
 800c5f4:	6852      	ldr	r2, [r2, #4]
 800c5f6:	b2d2      	uxtb	r2, r2
 800c5f8:	4611      	mov	r1, r2
 800c5fa:	6878      	ldr	r0, [r7, #4]
 800c5fc:	4798      	blx	r3
  }

  return USBD_OK;
 800c5fe:	2300      	movs	r3, #0
}
 800c600:	4618      	mov	r0, r3
 800c602:	3708      	adds	r7, #8
 800c604:	46bd      	mov	sp, r7
 800c606:	bd80      	pop	{r7, pc}

0800c608 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800c608:	b480      	push	{r7}
 800c60a:	b083      	sub	sp, #12
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]
 800c610:	460b      	mov	r3, r1
 800c612:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	78fa      	ldrb	r2, [r7, #3]
 800c618:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800c61a:	2300      	movs	r3, #0
}
 800c61c:	4618      	mov	r0, r3
 800c61e:	370c      	adds	r7, #12
 800c620:	46bd      	mov	sp, r7
 800c622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c626:	4770      	bx	lr

0800c628 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800c628:	b480      	push	{r7}
 800c62a:	b083      	sub	sp, #12
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2204      	movs	r2, #4
 800c640:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800c644:	2300      	movs	r3, #0
}
 800c646:	4618      	mov	r0, r3
 800c648:	370c      	adds	r7, #12
 800c64a:	46bd      	mov	sp, r7
 800c64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c650:	4770      	bx	lr

0800c652 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800c652:	b480      	push	{r7}
 800c654:	b083      	sub	sp, #12
 800c656:	af00      	add	r7, sp, #0
 800c658:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800c666:	2300      	movs	r3, #0
}
 800c668:	4618      	mov	r0, r3
 800c66a:	370c      	adds	r7, #12
 800c66c:	46bd      	mov	sp, r7
 800c66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c672:	4770      	bx	lr

0800c674 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b082      	sub	sp, #8
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c682:	2b03      	cmp	r3, #3
 800c684:	d10b      	bne.n	800c69e <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c68c:	69db      	ldr	r3, [r3, #28]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d005      	beq.n	800c69e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c698:	69db      	ldr	r3, [r3, #28]
 800c69a:	6878      	ldr	r0, [r7, #4]
 800c69c:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800c69e:	2300      	movs	r3, #0
}
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	3708      	adds	r7, #8
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	bd80      	pop	{r7, pc}

0800c6a8 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800c6a8:	b480      	push	{r7}
 800c6aa:	b083      	sub	sp, #12
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
 800c6b0:	460b      	mov	r3, r1
 800c6b2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800c6b4:	2300      	movs	r3, #0
}
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	370c      	adds	r7, #12
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c0:	4770      	bx	lr

0800c6c2 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800c6c2:	b480      	push	{r7}
 800c6c4:	b083      	sub	sp, #12
 800c6c6:	af00      	add	r7, sp, #0
 800c6c8:	6078      	str	r0, [r7, #4]
 800c6ca:	460b      	mov	r3, r1
 800c6cc:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800c6ce:	2300      	movs	r3, #0
}
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	370c      	adds	r7, #12
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6da:	4770      	bx	lr

0800c6dc <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 800c6dc:	b480      	push	{r7}
 800c6de:	b083      	sub	sp, #12
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c6e4:	2300      	movs	r3, #0
}
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	370c      	adds	r7, #12
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f0:	4770      	bx	lr

0800c6f2 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 800c6f2:	b580      	push	{r7, lr}
 800c6f4:	b082      	sub	sp, #8
 800c6f6:	af00      	add	r7, sp, #0
 800c6f8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	2201      	movs	r2, #1
 800c6fe:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c708:	685b      	ldr	r3, [r3, #4]
 800c70a:	687a      	ldr	r2, [r7, #4]
 800c70c:	6852      	ldr	r2, [r2, #4]
 800c70e:	b2d2      	uxtb	r2, r2
 800c710:	4611      	mov	r1, r2
 800c712:	6878      	ldr	r0, [r7, #4]
 800c714:	4798      	blx	r3

  return USBD_OK;
 800c716:	2300      	movs	r3, #0
}
 800c718:	4618      	mov	r0, r3
 800c71a:	3708      	adds	r7, #8
 800c71c:	46bd      	mov	sp, r7
 800c71e:	bd80      	pop	{r7, pc}

0800c720 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800c720:	b580      	push	{r7, lr}
 800c722:	b084      	sub	sp, #16
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
 800c728:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c72a:	2300      	movs	r3, #0
 800c72c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c72e:	683b      	ldr	r3, [r7, #0]
 800c730:	781b      	ldrb	r3, [r3, #0]
 800c732:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c736:	2b20      	cmp	r3, #32
 800c738:	d004      	beq.n	800c744 <USBD_StdDevReq+0x24>
 800c73a:	2b40      	cmp	r3, #64	; 0x40
 800c73c:	d002      	beq.n	800c744 <USBD_StdDevReq+0x24>
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d008      	beq.n	800c754 <USBD_StdDevReq+0x34>
 800c742:	e04c      	b.n	800c7de <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c74a:	689b      	ldr	r3, [r3, #8]
 800c74c:	6839      	ldr	r1, [r7, #0]
 800c74e:	6878      	ldr	r0, [r7, #4]
 800c750:	4798      	blx	r3
    break;
 800c752:	e049      	b.n	800c7e8 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800c754:	683b      	ldr	r3, [r7, #0]
 800c756:	785b      	ldrb	r3, [r3, #1]
 800c758:	2b09      	cmp	r3, #9
 800c75a:	d83a      	bhi.n	800c7d2 <USBD_StdDevReq+0xb2>
 800c75c:	a201      	add	r2, pc, #4	; (adr r2, 800c764 <USBD_StdDevReq+0x44>)
 800c75e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c762:	bf00      	nop
 800c764:	0800c7b5 	.word	0x0800c7b5
 800c768:	0800c7c9 	.word	0x0800c7c9
 800c76c:	0800c7d3 	.word	0x0800c7d3
 800c770:	0800c7bf 	.word	0x0800c7bf
 800c774:	0800c7d3 	.word	0x0800c7d3
 800c778:	0800c797 	.word	0x0800c797
 800c77c:	0800c78d 	.word	0x0800c78d
 800c780:	0800c7d3 	.word	0x0800c7d3
 800c784:	0800c7ab 	.word	0x0800c7ab
 800c788:	0800c7a1 	.word	0x0800c7a1
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800c78c:	6839      	ldr	r1, [r7, #0]
 800c78e:	6878      	ldr	r0, [r7, #4]
 800c790:	f000 f9d2 	bl	800cb38 <USBD_GetDescriptor>
      break;
 800c794:	e022      	b.n	800c7dc <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800c796:	6839      	ldr	r1, [r7, #0]
 800c798:	6878      	ldr	r0, [r7, #4]
 800c79a:	f000 fac7 	bl	800cd2c <USBD_SetAddress>
      break;
 800c79e:	e01d      	b.n	800c7dc <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800c7a0:	6839      	ldr	r1, [r7, #0]
 800c7a2:	6878      	ldr	r0, [r7, #4]
 800c7a4:	f000 fb04 	bl	800cdb0 <USBD_SetConfig>
      break;
 800c7a8:	e018      	b.n	800c7dc <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800c7aa:	6839      	ldr	r1, [r7, #0]
 800c7ac:	6878      	ldr	r0, [r7, #4]
 800c7ae:	f000 fb8d 	bl	800cecc <USBD_GetConfig>
      break;
 800c7b2:	e013      	b.n	800c7dc <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800c7b4:	6839      	ldr	r1, [r7, #0]
 800c7b6:	6878      	ldr	r0, [r7, #4]
 800c7b8:	f000 fbbc 	bl	800cf34 <USBD_GetStatus>
      break;
 800c7bc:	e00e      	b.n	800c7dc <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800c7be:	6839      	ldr	r1, [r7, #0]
 800c7c0:	6878      	ldr	r0, [r7, #4]
 800c7c2:	f000 fbea 	bl	800cf9a <USBD_SetFeature>
      break;
 800c7c6:	e009      	b.n	800c7dc <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800c7c8:	6839      	ldr	r1, [r7, #0]
 800c7ca:	6878      	ldr	r0, [r7, #4]
 800c7cc:	f000 fbf9 	bl	800cfc2 <USBD_ClrFeature>
      break;
 800c7d0:	e004      	b.n	800c7dc <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800c7d2:	6839      	ldr	r1, [r7, #0]
 800c7d4:	6878      	ldr	r0, [r7, #4]
 800c7d6:	f000 fc52 	bl	800d07e <USBD_CtlError>
      break;
 800c7da:	bf00      	nop
    }
    break;
 800c7dc:	e004      	b.n	800c7e8 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800c7de:	6839      	ldr	r1, [r7, #0]
 800c7e0:	6878      	ldr	r0, [r7, #4]
 800c7e2:	f000 fc4c 	bl	800d07e <USBD_CtlError>
    break;
 800c7e6:	bf00      	nop
  }

  return ret;
 800c7e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	3710      	adds	r7, #16
 800c7ee:	46bd      	mov	sp, r7
 800c7f0:	bd80      	pop	{r7, pc}
 800c7f2:	bf00      	nop

0800c7f4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b084      	sub	sp, #16
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
 800c7fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c7fe:	2300      	movs	r3, #0
 800c800:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c802:	683b      	ldr	r3, [r7, #0]
 800c804:	781b      	ldrb	r3, [r3, #0]
 800c806:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c80a:	2b20      	cmp	r3, #32
 800c80c:	d003      	beq.n	800c816 <USBD_StdItfReq+0x22>
 800c80e:	2b40      	cmp	r3, #64	; 0x40
 800c810:	d001      	beq.n	800c816 <USBD_StdItfReq+0x22>
 800c812:	2b00      	cmp	r3, #0
 800c814:	d12a      	bne.n	800c86c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c81c:	3b01      	subs	r3, #1
 800c81e:	2b02      	cmp	r3, #2
 800c820:	d81d      	bhi.n	800c85e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	889b      	ldrh	r3, [r3, #4]
 800c826:	b2db      	uxtb	r3, r3
 800c828:	2b01      	cmp	r3, #1
 800c82a:	d813      	bhi.n	800c854 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c832:	689b      	ldr	r3, [r3, #8]
 800c834:	6839      	ldr	r1, [r7, #0]
 800c836:	6878      	ldr	r0, [r7, #4]
 800c838:	4798      	blx	r3
 800c83a:	4603      	mov	r3, r0
 800c83c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	88db      	ldrh	r3, [r3, #6]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d110      	bne.n	800c868 <USBD_StdItfReq+0x74>
 800c846:	7bfb      	ldrb	r3, [r7, #15]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d10d      	bne.n	800c868 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 800c84c:	6878      	ldr	r0, [r7, #4]
 800c84e:	f000 fcdf 	bl	800d210 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800c852:	e009      	b.n	800c868 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800c854:	6839      	ldr	r1, [r7, #0]
 800c856:	6878      	ldr	r0, [r7, #4]
 800c858:	f000 fc11 	bl	800d07e <USBD_CtlError>
      break;
 800c85c:	e004      	b.n	800c868 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800c85e:	6839      	ldr	r1, [r7, #0]
 800c860:	6878      	ldr	r0, [r7, #4]
 800c862:	f000 fc0c 	bl	800d07e <USBD_CtlError>
      break;
 800c866:	e000      	b.n	800c86a <USBD_StdItfReq+0x76>
      break;
 800c868:	bf00      	nop
    }
    break;
 800c86a:	e004      	b.n	800c876 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800c86c:	6839      	ldr	r1, [r7, #0]
 800c86e:	6878      	ldr	r0, [r7, #4]
 800c870:	f000 fc05 	bl	800d07e <USBD_CtlError>
    break;
 800c874:	bf00      	nop
  }

  return USBD_OK;
 800c876:	2300      	movs	r3, #0
}
 800c878:	4618      	mov	r0, r3
 800c87a:	3710      	adds	r7, #16
 800c87c:	46bd      	mov	sp, r7
 800c87e:	bd80      	pop	{r7, pc}

0800c880 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b084      	sub	sp, #16
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
 800c888:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c88a:	2300      	movs	r3, #0
 800c88c:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	889b      	ldrh	r3, [r3, #4]
 800c892:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c894:	683b      	ldr	r3, [r7, #0]
 800c896:	781b      	ldrb	r3, [r3, #0]
 800c898:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c89c:	2b20      	cmp	r3, #32
 800c89e:	d004      	beq.n	800c8aa <USBD_StdEPReq+0x2a>
 800c8a0:	2b40      	cmp	r3, #64	; 0x40
 800c8a2:	d002      	beq.n	800c8aa <USBD_StdEPReq+0x2a>
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d008      	beq.n	800c8ba <USBD_StdEPReq+0x3a>
 800c8a8:	e13b      	b.n	800cb22 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c8b0:	689b      	ldr	r3, [r3, #8]
 800c8b2:	6839      	ldr	r1, [r7, #0]
 800c8b4:	6878      	ldr	r0, [r7, #4]
 800c8b6:	4798      	blx	r3
    break;
 800c8b8:	e138      	b.n	800cb2c <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800c8ba:	683b      	ldr	r3, [r7, #0]
 800c8bc:	781b      	ldrb	r3, [r3, #0]
 800c8be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c8c2:	2b20      	cmp	r3, #32
 800c8c4:	d10a      	bne.n	800c8dc <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c8cc:	689b      	ldr	r3, [r3, #8]
 800c8ce:	6839      	ldr	r1, [r7, #0]
 800c8d0:	6878      	ldr	r0, [r7, #4]
 800c8d2:	4798      	blx	r3
 800c8d4:	4603      	mov	r3, r0
 800c8d6:	73fb      	strb	r3, [r7, #15]

      return ret;
 800c8d8:	7bfb      	ldrb	r3, [r7, #15]
 800c8da:	e128      	b.n	800cb2e <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	785b      	ldrb	r3, [r3, #1]
 800c8e0:	2b01      	cmp	r3, #1
 800c8e2:	d03e      	beq.n	800c962 <USBD_StdEPReq+0xe2>
 800c8e4:	2b03      	cmp	r3, #3
 800c8e6:	d002      	beq.n	800c8ee <USBD_StdEPReq+0x6e>
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d070      	beq.n	800c9ce <USBD_StdEPReq+0x14e>
 800c8ec:	e113      	b.n	800cb16 <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c8f4:	2b02      	cmp	r3, #2
 800c8f6:	d002      	beq.n	800c8fe <USBD_StdEPReq+0x7e>
 800c8f8:	2b03      	cmp	r3, #3
 800c8fa:	d015      	beq.n	800c928 <USBD_StdEPReq+0xa8>
 800c8fc:	e02b      	b.n	800c956 <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c8fe:	7bbb      	ldrb	r3, [r7, #14]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d00c      	beq.n	800c91e <USBD_StdEPReq+0x9e>
 800c904:	7bbb      	ldrb	r3, [r7, #14]
 800c906:	2b80      	cmp	r3, #128	; 0x80
 800c908:	d009      	beq.n	800c91e <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800c90a:	7bbb      	ldrb	r3, [r7, #14]
 800c90c:	4619      	mov	r1, r3
 800c90e:	6878      	ldr	r0, [r7, #4]
 800c910:	f001 f91c 	bl	800db4c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800c914:	2180      	movs	r1, #128	; 0x80
 800c916:	6878      	ldr	r0, [r7, #4]
 800c918:	f001 f918 	bl	800db4c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c91c:	e020      	b.n	800c960 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 800c91e:	6839      	ldr	r1, [r7, #0]
 800c920:	6878      	ldr	r0, [r7, #4]
 800c922:	f000 fbac 	bl	800d07e <USBD_CtlError>
        break;
 800c926:	e01b      	b.n	800c960 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	885b      	ldrh	r3, [r3, #2]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d10e      	bne.n	800c94e <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c930:	7bbb      	ldrb	r3, [r7, #14]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d00b      	beq.n	800c94e <USBD_StdEPReq+0xce>
 800c936:	7bbb      	ldrb	r3, [r7, #14]
 800c938:	2b80      	cmp	r3, #128	; 0x80
 800c93a:	d008      	beq.n	800c94e <USBD_StdEPReq+0xce>
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	88db      	ldrh	r3, [r3, #6]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d104      	bne.n	800c94e <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800c944:	7bbb      	ldrb	r3, [r7, #14]
 800c946:	4619      	mov	r1, r3
 800c948:	6878      	ldr	r0, [r7, #4]
 800c94a:	f001 f8ff 	bl	800db4c <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	f000 fc5e 	bl	800d210 <USBD_CtlSendStatus>

        break;
 800c954:	e004      	b.n	800c960 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 800c956:	6839      	ldr	r1, [r7, #0]
 800c958:	6878      	ldr	r0, [r7, #4]
 800c95a:	f000 fb90 	bl	800d07e <USBD_CtlError>
        break;
 800c95e:	bf00      	nop
      }
      break;
 800c960:	e0de      	b.n	800cb20 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c968:	2b02      	cmp	r3, #2
 800c96a:	d002      	beq.n	800c972 <USBD_StdEPReq+0xf2>
 800c96c:	2b03      	cmp	r3, #3
 800c96e:	d015      	beq.n	800c99c <USBD_StdEPReq+0x11c>
 800c970:	e026      	b.n	800c9c0 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c972:	7bbb      	ldrb	r3, [r7, #14]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d00c      	beq.n	800c992 <USBD_StdEPReq+0x112>
 800c978:	7bbb      	ldrb	r3, [r7, #14]
 800c97a:	2b80      	cmp	r3, #128	; 0x80
 800c97c:	d009      	beq.n	800c992 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800c97e:	7bbb      	ldrb	r3, [r7, #14]
 800c980:	4619      	mov	r1, r3
 800c982:	6878      	ldr	r0, [r7, #4]
 800c984:	f001 f8e2 	bl	800db4c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800c988:	2180      	movs	r1, #128	; 0x80
 800c98a:	6878      	ldr	r0, [r7, #4]
 800c98c:	f001 f8de 	bl	800db4c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c990:	e01c      	b.n	800c9cc <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800c992:	6839      	ldr	r1, [r7, #0]
 800c994:	6878      	ldr	r0, [r7, #4]
 800c996:	f000 fb72 	bl	800d07e <USBD_CtlError>
        break;
 800c99a:	e017      	b.n	800c9cc <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c99c:	683b      	ldr	r3, [r7, #0]
 800c99e:	885b      	ldrh	r3, [r3, #2]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d112      	bne.n	800c9ca <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800c9a4:	7bbb      	ldrb	r3, [r7, #14]
 800c9a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d004      	beq.n	800c9b8 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800c9ae:	7bbb      	ldrb	r3, [r7, #14]
 800c9b0:	4619      	mov	r1, r3
 800c9b2:	6878      	ldr	r0, [r7, #4]
 800c9b4:	f001 f8e9 	bl	800db8a <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800c9b8:	6878      	ldr	r0, [r7, #4]
 800c9ba:	f000 fc29 	bl	800d210 <USBD_CtlSendStatus>
        }
        break;
 800c9be:	e004      	b.n	800c9ca <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800c9c0:	6839      	ldr	r1, [r7, #0]
 800c9c2:	6878      	ldr	r0, [r7, #4]
 800c9c4:	f000 fb5b 	bl	800d07e <USBD_CtlError>
        break;
 800c9c8:	e000      	b.n	800c9cc <USBD_StdEPReq+0x14c>
        break;
 800c9ca:	bf00      	nop
      }
      break;
 800c9cc:	e0a8      	b.n	800cb20 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c9d4:	2b02      	cmp	r3, #2
 800c9d6:	d002      	beq.n	800c9de <USBD_StdEPReq+0x15e>
 800c9d8:	2b03      	cmp	r3, #3
 800c9da:	d031      	beq.n	800ca40 <USBD_StdEPReq+0x1c0>
 800c9dc:	e095      	b.n	800cb0a <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c9de:	7bbb      	ldrb	r3, [r7, #14]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d007      	beq.n	800c9f4 <USBD_StdEPReq+0x174>
 800c9e4:	7bbb      	ldrb	r3, [r7, #14]
 800c9e6:	2b80      	cmp	r3, #128	; 0x80
 800c9e8:	d004      	beq.n	800c9f4 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800c9ea:	6839      	ldr	r1, [r7, #0]
 800c9ec:	6878      	ldr	r0, [r7, #4]
 800c9ee:	f000 fb46 	bl	800d07e <USBD_CtlError>
          break;
 800c9f2:	e08f      	b.n	800cb14 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800c9f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	da0b      	bge.n	800ca14 <USBD_StdEPReq+0x194>
 800c9fc:	7bbb      	ldrb	r3, [r7, #14]
 800c9fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ca02:	4613      	mov	r3, r2
 800ca04:	009b      	lsls	r3, r3, #2
 800ca06:	4413      	add	r3, r2
 800ca08:	009b      	lsls	r3, r3, #2
 800ca0a:	3310      	adds	r3, #16
 800ca0c:	687a      	ldr	r2, [r7, #4]
 800ca0e:	4413      	add	r3, r2
 800ca10:	3304      	adds	r3, #4
 800ca12:	e00a      	b.n	800ca2a <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 800ca14:	7bbb      	ldrb	r3, [r7, #14]
 800ca16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800ca1a:	4613      	mov	r3, r2
 800ca1c:	009b      	lsls	r3, r3, #2
 800ca1e:	4413      	add	r3, r2
 800ca20:	009b      	lsls	r3, r3, #2
 800ca22:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800ca26:	687a      	ldr	r2, [r7, #4]
 800ca28:	4413      	add	r3, r2
 800ca2a:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800ca2c:	68bb      	ldr	r3, [r7, #8]
 800ca2e:	2200      	movs	r2, #0
 800ca30:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ca32:	68bb      	ldr	r3, [r7, #8]
 800ca34:	2202      	movs	r2, #2
 800ca36:	4619      	mov	r1, r3
 800ca38:	6878      	ldr	r0, [r7, #4]
 800ca3a:	f000 fb8b 	bl	800d154 <USBD_CtlSendData>
          break;
 800ca3e:	e069      	b.n	800cb14 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800ca40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	da11      	bge.n	800ca6c <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ca48:	7bbb      	ldrb	r3, [r7, #14]
 800ca4a:	f003 020f 	and.w	r2, r3, #15
 800ca4e:	6879      	ldr	r1, [r7, #4]
 800ca50:	4613      	mov	r3, r2
 800ca52:	009b      	lsls	r3, r3, #2
 800ca54:	4413      	add	r3, r2
 800ca56:	009b      	lsls	r3, r3, #2
 800ca58:	440b      	add	r3, r1
 800ca5a:	3318      	adds	r3, #24
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d117      	bne.n	800ca92 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800ca62:	6839      	ldr	r1, [r7, #0]
 800ca64:	6878      	ldr	r0, [r7, #4]
 800ca66:	f000 fb0a 	bl	800d07e <USBD_CtlError>
            break;
 800ca6a:	e053      	b.n	800cb14 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ca6c:	7bbb      	ldrb	r3, [r7, #14]
 800ca6e:	f003 020f 	and.w	r2, r3, #15
 800ca72:	6879      	ldr	r1, [r7, #4]
 800ca74:	4613      	mov	r3, r2
 800ca76:	009b      	lsls	r3, r3, #2
 800ca78:	4413      	add	r3, r2
 800ca7a:	009b      	lsls	r3, r3, #2
 800ca7c:	440b      	add	r3, r1
 800ca7e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d104      	bne.n	800ca92 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800ca88:	6839      	ldr	r1, [r7, #0]
 800ca8a:	6878      	ldr	r0, [r7, #4]
 800ca8c:	f000 faf7 	bl	800d07e <USBD_CtlError>
            break;
 800ca90:	e040      	b.n	800cb14 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800ca92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	da0b      	bge.n	800cab2 <USBD_StdEPReq+0x232>
 800ca9a:	7bbb      	ldrb	r3, [r7, #14]
 800ca9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800caa0:	4613      	mov	r3, r2
 800caa2:	009b      	lsls	r3, r3, #2
 800caa4:	4413      	add	r3, r2
 800caa6:	009b      	lsls	r3, r3, #2
 800caa8:	3310      	adds	r3, #16
 800caaa:	687a      	ldr	r2, [r7, #4]
 800caac:	4413      	add	r3, r2
 800caae:	3304      	adds	r3, #4
 800cab0:	e00a      	b.n	800cac8 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 800cab2:	7bbb      	ldrb	r3, [r7, #14]
 800cab4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800cab8:	4613      	mov	r3, r2
 800caba:	009b      	lsls	r3, r3, #2
 800cabc:	4413      	add	r3, r2
 800cabe:	009b      	lsls	r3, r3, #2
 800cac0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800cac4:	687a      	ldr	r2, [r7, #4]
 800cac6:	4413      	add	r3, r2
 800cac8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800caca:	7bbb      	ldrb	r3, [r7, #14]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d002      	beq.n	800cad6 <USBD_StdEPReq+0x256>
 800cad0:	7bbb      	ldrb	r3, [r7, #14]
 800cad2:	2b80      	cmp	r3, #128	; 0x80
 800cad4:	d103      	bne.n	800cade <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 800cad6:	68bb      	ldr	r3, [r7, #8]
 800cad8:	2200      	movs	r2, #0
 800cada:	601a      	str	r2, [r3, #0]
 800cadc:	e00e      	b.n	800cafc <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800cade:	7bbb      	ldrb	r3, [r7, #14]
 800cae0:	4619      	mov	r1, r3
 800cae2:	6878      	ldr	r0, [r7, #4]
 800cae4:	f001 f870 	bl	800dbc8 <USBD_LL_IsStallEP>
 800cae8:	4603      	mov	r3, r0
 800caea:	2b00      	cmp	r3, #0
 800caec:	d003      	beq.n	800caf6 <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 800caee:	68bb      	ldr	r3, [r7, #8]
 800caf0:	2201      	movs	r2, #1
 800caf2:	601a      	str	r2, [r3, #0]
 800caf4:	e002      	b.n	800cafc <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 800caf6:	68bb      	ldr	r3, [r7, #8]
 800caf8:	2200      	movs	r2, #0
 800cafa:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800cafc:	68bb      	ldr	r3, [r7, #8]
 800cafe:	2202      	movs	r2, #2
 800cb00:	4619      	mov	r1, r3
 800cb02:	6878      	ldr	r0, [r7, #4]
 800cb04:	f000 fb26 	bl	800d154 <USBD_CtlSendData>
          break;
 800cb08:	e004      	b.n	800cb14 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 800cb0a:	6839      	ldr	r1, [r7, #0]
 800cb0c:	6878      	ldr	r0, [r7, #4]
 800cb0e:	f000 fab6 	bl	800d07e <USBD_CtlError>
        break;
 800cb12:	bf00      	nop
      }
      break;
 800cb14:	e004      	b.n	800cb20 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 800cb16:	6839      	ldr	r1, [r7, #0]
 800cb18:	6878      	ldr	r0, [r7, #4]
 800cb1a:	f000 fab0 	bl	800d07e <USBD_CtlError>
      break;
 800cb1e:	bf00      	nop
    }
    break;
 800cb20:	e004      	b.n	800cb2c <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 800cb22:	6839      	ldr	r1, [r7, #0]
 800cb24:	6878      	ldr	r0, [r7, #4]
 800cb26:	f000 faaa 	bl	800d07e <USBD_CtlError>
    break;
 800cb2a:	bf00      	nop
  }

  return ret;
 800cb2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb2e:	4618      	mov	r0, r3
 800cb30:	3710      	adds	r7, #16
 800cb32:	46bd      	mov	sp, r7
 800cb34:	bd80      	pop	{r7, pc}
	...

0800cb38 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b084      	sub	sp, #16
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
 800cb40:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	885b      	ldrh	r3, [r3, #2]
 800cb46:	0a1b      	lsrs	r3, r3, #8
 800cb48:	b29b      	uxth	r3, r3
 800cb4a:	3b01      	subs	r3, #1
 800cb4c:	2b06      	cmp	r3, #6
 800cb4e:	f200 80c9 	bhi.w	800cce4 <USBD_GetDescriptor+0x1ac>
 800cb52:	a201      	add	r2, pc, #4	; (adr r2, 800cb58 <USBD_GetDescriptor+0x20>)
 800cb54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb58:	0800cb75 	.word	0x0800cb75
 800cb5c:	0800cb8d 	.word	0x0800cb8d
 800cb60:	0800cbcd 	.word	0x0800cbcd
 800cb64:	0800cce5 	.word	0x0800cce5
 800cb68:	0800cce5 	.word	0x0800cce5
 800cb6c:	0800cc91 	.word	0x0800cc91
 800cb70:	0800ccb7 	.word	0x0800ccb7
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	687a      	ldr	r2, [r7, #4]
 800cb7e:	7c12      	ldrb	r2, [r2, #16]
 800cb80:	f107 010a 	add.w	r1, r7, #10
 800cb84:	4610      	mov	r0, r2
 800cb86:	4798      	blx	r3
 800cb88:	60f8      	str	r0, [r7, #12]
    break;
 800cb8a:	e0b0      	b.n	800ccee <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	7c1b      	ldrb	r3, [r3, #16]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d10d      	bne.n	800cbb0 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cb9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb9c:	f107 020a 	add.w	r2, r7, #10
 800cba0:	4610      	mov	r0, r2
 800cba2:	4798      	blx	r3
 800cba4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	3301      	adds	r3, #1
 800cbaa:	2202      	movs	r2, #2
 800cbac:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800cbae:	e09e      	b.n	800ccee <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cbb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbb8:	f107 020a 	add.w	r2, r7, #10
 800cbbc:	4610      	mov	r0, r2
 800cbbe:	4798      	blx	r3
 800cbc0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	3301      	adds	r3, #1
 800cbc6:	2202      	movs	r2, #2
 800cbc8:	701a      	strb	r2, [r3, #0]
    break;
 800cbca:	e090      	b.n	800ccee <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800cbcc:	683b      	ldr	r3, [r7, #0]
 800cbce:	885b      	ldrh	r3, [r3, #2]
 800cbd0:	b2db      	uxtb	r3, r3
 800cbd2:	2b05      	cmp	r3, #5
 800cbd4:	d856      	bhi.n	800cc84 <USBD_GetDescriptor+0x14c>
 800cbd6:	a201      	add	r2, pc, #4	; (adr r2, 800cbdc <USBD_GetDescriptor+0xa4>)
 800cbd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbdc:	0800cbf5 	.word	0x0800cbf5
 800cbe0:	0800cc0d 	.word	0x0800cc0d
 800cbe4:	0800cc25 	.word	0x0800cc25
 800cbe8:	0800cc3d 	.word	0x0800cc3d
 800cbec:	0800cc55 	.word	0x0800cc55
 800cbf0:	0800cc6d 	.word	0x0800cc6d
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800cbfa:	685b      	ldr	r3, [r3, #4]
 800cbfc:	687a      	ldr	r2, [r7, #4]
 800cbfe:	7c12      	ldrb	r2, [r2, #16]
 800cc00:	f107 010a 	add.w	r1, r7, #10
 800cc04:	4610      	mov	r0, r2
 800cc06:	4798      	blx	r3
 800cc08:	60f8      	str	r0, [r7, #12]
      break;
 800cc0a:	e040      	b.n	800cc8e <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800cc12:	689b      	ldr	r3, [r3, #8]
 800cc14:	687a      	ldr	r2, [r7, #4]
 800cc16:	7c12      	ldrb	r2, [r2, #16]
 800cc18:	f107 010a 	add.w	r1, r7, #10
 800cc1c:	4610      	mov	r0, r2
 800cc1e:	4798      	blx	r3
 800cc20:	60f8      	str	r0, [r7, #12]
      break;
 800cc22:	e034      	b.n	800cc8e <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800cc2a:	68db      	ldr	r3, [r3, #12]
 800cc2c:	687a      	ldr	r2, [r7, #4]
 800cc2e:	7c12      	ldrb	r2, [r2, #16]
 800cc30:	f107 010a 	add.w	r1, r7, #10
 800cc34:	4610      	mov	r0, r2
 800cc36:	4798      	blx	r3
 800cc38:	60f8      	str	r0, [r7, #12]
      break;
 800cc3a:	e028      	b.n	800cc8e <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800cc42:	691b      	ldr	r3, [r3, #16]
 800cc44:	687a      	ldr	r2, [r7, #4]
 800cc46:	7c12      	ldrb	r2, [r2, #16]
 800cc48:	f107 010a 	add.w	r1, r7, #10
 800cc4c:	4610      	mov	r0, r2
 800cc4e:	4798      	blx	r3
 800cc50:	60f8      	str	r0, [r7, #12]
      break;
 800cc52:	e01c      	b.n	800cc8e <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800cc5a:	695b      	ldr	r3, [r3, #20]
 800cc5c:	687a      	ldr	r2, [r7, #4]
 800cc5e:	7c12      	ldrb	r2, [r2, #16]
 800cc60:	f107 010a 	add.w	r1, r7, #10
 800cc64:	4610      	mov	r0, r2
 800cc66:	4798      	blx	r3
 800cc68:	60f8      	str	r0, [r7, #12]
      break;
 800cc6a:	e010      	b.n	800cc8e <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800cc72:	699b      	ldr	r3, [r3, #24]
 800cc74:	687a      	ldr	r2, [r7, #4]
 800cc76:	7c12      	ldrb	r2, [r2, #16]
 800cc78:	f107 010a 	add.w	r1, r7, #10
 800cc7c:	4610      	mov	r0, r2
 800cc7e:	4798      	blx	r3
 800cc80:	60f8      	str	r0, [r7, #12]
      break;
 800cc82:	e004      	b.n	800cc8e <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800cc84:	6839      	ldr	r1, [r7, #0]
 800cc86:	6878      	ldr	r0, [r7, #4]
 800cc88:	f000 f9f9 	bl	800d07e <USBD_CtlError>
      return;
 800cc8c:	e04b      	b.n	800cd26 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800cc8e:	e02e      	b.n	800ccee <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	7c1b      	ldrb	r3, [r3, #16]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d109      	bne.n	800ccac <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cc9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cca0:	f107 020a 	add.w	r2, r7, #10
 800cca4:	4610      	mov	r0, r2
 800cca6:	4798      	blx	r3
 800cca8:	60f8      	str	r0, [r7, #12]
      break;
 800ccaa:	e020      	b.n	800ccee <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800ccac:	6839      	ldr	r1, [r7, #0]
 800ccae:	6878      	ldr	r0, [r7, #4]
 800ccb0:	f000 f9e5 	bl	800d07e <USBD_CtlError>
      return;
 800ccb4:	e037      	b.n	800cd26 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	7c1b      	ldrb	r3, [r3, #16]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d10d      	bne.n	800ccda <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ccc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccc6:	f107 020a 	add.w	r2, r7, #10
 800ccca:	4610      	mov	r0, r2
 800cccc:	4798      	blx	r3
 800ccce:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	3301      	adds	r3, #1
 800ccd4:	2207      	movs	r2, #7
 800ccd6:	701a      	strb	r2, [r3, #0]
      break;
 800ccd8:	e009      	b.n	800ccee <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800ccda:	6839      	ldr	r1, [r7, #0]
 800ccdc:	6878      	ldr	r0, [r7, #4]
 800ccde:	f000 f9ce 	bl	800d07e <USBD_CtlError>
      return;
 800cce2:	e020      	b.n	800cd26 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 800cce4:	6839      	ldr	r1, [r7, #0]
 800cce6:	6878      	ldr	r0, [r7, #4]
 800cce8:	f000 f9c9 	bl	800d07e <USBD_CtlError>
    return;
 800ccec:	e01b      	b.n	800cd26 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800ccee:	897b      	ldrh	r3, [r7, #10]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d011      	beq.n	800cd18 <USBD_GetDescriptor+0x1e0>
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	88db      	ldrh	r3, [r3, #6]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d00d      	beq.n	800cd18 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 800ccfc:	683b      	ldr	r3, [r7, #0]
 800ccfe:	88da      	ldrh	r2, [r3, #6]
 800cd00:	897b      	ldrh	r3, [r7, #10]
 800cd02:	4293      	cmp	r3, r2
 800cd04:	bf28      	it	cs
 800cd06:	4613      	movcs	r3, r2
 800cd08:	b29b      	uxth	r3, r3
 800cd0a:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800cd0c:	897b      	ldrh	r3, [r7, #10]
 800cd0e:	461a      	mov	r2, r3
 800cd10:	68f9      	ldr	r1, [r7, #12]
 800cd12:	6878      	ldr	r0, [r7, #4]
 800cd14:	f000 fa1e 	bl	800d154 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 800cd18:	683b      	ldr	r3, [r7, #0]
 800cd1a:	88db      	ldrh	r3, [r3, #6]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d102      	bne.n	800cd26 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800cd20:	6878      	ldr	r0, [r7, #4]
 800cd22:	f000 fa75 	bl	800d210 <USBD_CtlSendStatus>
  }
}
 800cd26:	3710      	adds	r7, #16
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	bd80      	pop	{r7, pc}

0800cd2c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b084      	sub	sp, #16
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
 800cd34:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cd36:	683b      	ldr	r3, [r7, #0]
 800cd38:	889b      	ldrh	r3, [r3, #4]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d130      	bne.n	800cda0 <USBD_SetAddress+0x74>
 800cd3e:	683b      	ldr	r3, [r7, #0]
 800cd40:	88db      	ldrh	r3, [r3, #6]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d12c      	bne.n	800cda0 <USBD_SetAddress+0x74>
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	885b      	ldrh	r3, [r3, #2]
 800cd4a:	2b7f      	cmp	r3, #127	; 0x7f
 800cd4c:	d828      	bhi.n	800cda0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cd4e:	683b      	ldr	r3, [r7, #0]
 800cd50:	885b      	ldrh	r3, [r3, #2]
 800cd52:	b2db      	uxtb	r3, r3
 800cd54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd58:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800cd60:	2b03      	cmp	r3, #3
 800cd62:	d104      	bne.n	800cd6e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800cd64:	6839      	ldr	r1, [r7, #0]
 800cd66:	6878      	ldr	r0, [r7, #4]
 800cd68:	f000 f989 	bl	800d07e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd6c:	e01c      	b.n	800cda8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	7bfa      	ldrb	r2, [r7, #15]
 800cd72:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cd76:	7bfb      	ldrb	r3, [r7, #15]
 800cd78:	4619      	mov	r1, r3
 800cd7a:	6878      	ldr	r0, [r7, #4]
 800cd7c:	f000 ff50 	bl	800dc20 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800cd80:	6878      	ldr	r0, [r7, #4]
 800cd82:	f000 fa45 	bl	800d210 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cd86:	7bfb      	ldrb	r3, [r7, #15]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d004      	beq.n	800cd96 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2202      	movs	r2, #2
 800cd90:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd94:	e008      	b.n	800cda8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	2201      	movs	r2, #1
 800cd9a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd9e:	e003      	b.n	800cda8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cda0:	6839      	ldr	r1, [r7, #0]
 800cda2:	6878      	ldr	r0, [r7, #4]
 800cda4:	f000 f96b 	bl	800d07e <USBD_CtlError>
  }
}
 800cda8:	bf00      	nop
 800cdaa:	3710      	adds	r7, #16
 800cdac:	46bd      	mov	sp, r7
 800cdae:	bd80      	pop	{r7, pc}

0800cdb0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b082      	sub	sp, #8
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
 800cdb8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cdba:	683b      	ldr	r3, [r7, #0]
 800cdbc:	885b      	ldrh	r3, [r3, #2]
 800cdbe:	b2da      	uxtb	r2, r3
 800cdc0:	4b41      	ldr	r3, [pc, #260]	; (800cec8 <USBD_SetConfig+0x118>)
 800cdc2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cdc4:	4b40      	ldr	r3, [pc, #256]	; (800cec8 <USBD_SetConfig+0x118>)
 800cdc6:	781b      	ldrb	r3, [r3, #0]
 800cdc8:	2b01      	cmp	r3, #1
 800cdca:	d904      	bls.n	800cdd6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800cdcc:	6839      	ldr	r1, [r7, #0]
 800cdce:	6878      	ldr	r0, [r7, #4]
 800cdd0:	f000 f955 	bl	800d07e <USBD_CtlError>
 800cdd4:	e075      	b.n	800cec2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800cddc:	2b02      	cmp	r3, #2
 800cdde:	d002      	beq.n	800cde6 <USBD_SetConfig+0x36>
 800cde0:	2b03      	cmp	r3, #3
 800cde2:	d023      	beq.n	800ce2c <USBD_SetConfig+0x7c>
 800cde4:	e062      	b.n	800ceac <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800cde6:	4b38      	ldr	r3, [pc, #224]	; (800cec8 <USBD_SetConfig+0x118>)
 800cde8:	781b      	ldrb	r3, [r3, #0]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d01a      	beq.n	800ce24 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800cdee:	4b36      	ldr	r3, [pc, #216]	; (800cec8 <USBD_SetConfig+0x118>)
 800cdf0:	781b      	ldrb	r3, [r3, #0]
 800cdf2:	461a      	mov	r2, r3
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	2203      	movs	r2, #3
 800cdfc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ce00:	4b31      	ldr	r3, [pc, #196]	; (800cec8 <USBD_SetConfig+0x118>)
 800ce02:	781b      	ldrb	r3, [r3, #0]
 800ce04:	4619      	mov	r1, r3
 800ce06:	6878      	ldr	r0, [r7, #4]
 800ce08:	f7ff fa2a 	bl	800c260 <USBD_SetClassConfig>
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	2b02      	cmp	r3, #2
 800ce10:	d104      	bne.n	800ce1c <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800ce12:	6839      	ldr	r1, [r7, #0]
 800ce14:	6878      	ldr	r0, [r7, #4]
 800ce16:	f000 f932 	bl	800d07e <USBD_CtlError>
          return;
 800ce1a:	e052      	b.n	800cec2 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800ce1c:	6878      	ldr	r0, [r7, #4]
 800ce1e:	f000 f9f7 	bl	800d210 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800ce22:	e04e      	b.n	800cec2 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800ce24:	6878      	ldr	r0, [r7, #4]
 800ce26:	f000 f9f3 	bl	800d210 <USBD_CtlSendStatus>
      break;
 800ce2a:	e04a      	b.n	800cec2 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ce2c:	4b26      	ldr	r3, [pc, #152]	; (800cec8 <USBD_SetConfig+0x118>)
 800ce2e:	781b      	ldrb	r3, [r3, #0]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d112      	bne.n	800ce5a <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	2202      	movs	r2, #2
 800ce38:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800ce3c:	4b22      	ldr	r3, [pc, #136]	; (800cec8 <USBD_SetConfig+0x118>)
 800ce3e:	781b      	ldrb	r3, [r3, #0]
 800ce40:	461a      	mov	r2, r3
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800ce46:	4b20      	ldr	r3, [pc, #128]	; (800cec8 <USBD_SetConfig+0x118>)
 800ce48:	781b      	ldrb	r3, [r3, #0]
 800ce4a:	4619      	mov	r1, r3
 800ce4c:	6878      	ldr	r0, [r7, #4]
 800ce4e:	f7ff fa26 	bl	800c29e <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800ce52:	6878      	ldr	r0, [r7, #4]
 800ce54:	f000 f9dc 	bl	800d210 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800ce58:	e033      	b.n	800cec2 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800ce5a:	4b1b      	ldr	r3, [pc, #108]	; (800cec8 <USBD_SetConfig+0x118>)
 800ce5c:	781b      	ldrb	r3, [r3, #0]
 800ce5e:	461a      	mov	r2, r3
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	685b      	ldr	r3, [r3, #4]
 800ce64:	429a      	cmp	r2, r3
 800ce66:	d01d      	beq.n	800cea4 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	685b      	ldr	r3, [r3, #4]
 800ce6c:	b2db      	uxtb	r3, r3
 800ce6e:	4619      	mov	r1, r3
 800ce70:	6878      	ldr	r0, [r7, #4]
 800ce72:	f7ff fa14 	bl	800c29e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ce76:	4b14      	ldr	r3, [pc, #80]	; (800cec8 <USBD_SetConfig+0x118>)
 800ce78:	781b      	ldrb	r3, [r3, #0]
 800ce7a:	461a      	mov	r2, r3
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ce80:	4b11      	ldr	r3, [pc, #68]	; (800cec8 <USBD_SetConfig+0x118>)
 800ce82:	781b      	ldrb	r3, [r3, #0]
 800ce84:	4619      	mov	r1, r3
 800ce86:	6878      	ldr	r0, [r7, #4]
 800ce88:	f7ff f9ea 	bl	800c260 <USBD_SetClassConfig>
 800ce8c:	4603      	mov	r3, r0
 800ce8e:	2b02      	cmp	r3, #2
 800ce90:	d104      	bne.n	800ce9c <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800ce92:	6839      	ldr	r1, [r7, #0]
 800ce94:	6878      	ldr	r0, [r7, #4]
 800ce96:	f000 f8f2 	bl	800d07e <USBD_CtlError>
          return;
 800ce9a:	e012      	b.n	800cec2 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800ce9c:	6878      	ldr	r0, [r7, #4]
 800ce9e:	f000 f9b7 	bl	800d210 <USBD_CtlSendStatus>
      break;
 800cea2:	e00e      	b.n	800cec2 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800cea4:	6878      	ldr	r0, [r7, #4]
 800cea6:	f000 f9b3 	bl	800d210 <USBD_CtlSendStatus>
      break;
 800ceaa:	e00a      	b.n	800cec2 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800ceac:	6839      	ldr	r1, [r7, #0]
 800ceae:	6878      	ldr	r0, [r7, #4]
 800ceb0:	f000 f8e5 	bl	800d07e <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800ceb4:	4b04      	ldr	r3, [pc, #16]	; (800cec8 <USBD_SetConfig+0x118>)
 800ceb6:	781b      	ldrb	r3, [r3, #0]
 800ceb8:	4619      	mov	r1, r3
 800ceba:	6878      	ldr	r0, [r7, #4]
 800cebc:	f7ff f9ef 	bl	800c29e <USBD_ClrClassConfig>
      break;
 800cec0:	bf00      	nop
    }
  }
}
 800cec2:	3708      	adds	r7, #8
 800cec4:	46bd      	mov	sp, r7
 800cec6:	bd80      	pop	{r7, pc}
 800cec8:	20000984 	.word	0x20000984

0800cecc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b082      	sub	sp, #8
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
 800ced4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	88db      	ldrh	r3, [r3, #6]
 800ceda:	2b01      	cmp	r3, #1
 800cedc:	d004      	beq.n	800cee8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800cede:	6839      	ldr	r1, [r7, #0]
 800cee0:	6878      	ldr	r0, [r7, #4]
 800cee2:	f000 f8cc 	bl	800d07e <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800cee6:	e021      	b.n	800cf2c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ceee:	2b01      	cmp	r3, #1
 800cef0:	db17      	blt.n	800cf22 <USBD_GetConfig+0x56>
 800cef2:	2b02      	cmp	r3, #2
 800cef4:	dd02      	ble.n	800cefc <USBD_GetConfig+0x30>
 800cef6:	2b03      	cmp	r3, #3
 800cef8:	d00b      	beq.n	800cf12 <USBD_GetConfig+0x46>
 800cefa:	e012      	b.n	800cf22 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2200      	movs	r2, #0
 800cf00:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	3308      	adds	r3, #8
 800cf06:	2201      	movs	r2, #1
 800cf08:	4619      	mov	r1, r3
 800cf0a:	6878      	ldr	r0, [r7, #4]
 800cf0c:	f000 f922 	bl	800d154 <USBD_CtlSendData>
      break;
 800cf10:	e00c      	b.n	800cf2c <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	3304      	adds	r3, #4
 800cf16:	2201      	movs	r2, #1
 800cf18:	4619      	mov	r1, r3
 800cf1a:	6878      	ldr	r0, [r7, #4]
 800cf1c:	f000 f91a 	bl	800d154 <USBD_CtlSendData>
      break;
 800cf20:	e004      	b.n	800cf2c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 800cf22:	6839      	ldr	r1, [r7, #0]
 800cf24:	6878      	ldr	r0, [r7, #4]
 800cf26:	f000 f8aa 	bl	800d07e <USBD_CtlError>
      break;
 800cf2a:	bf00      	nop
}
 800cf2c:	bf00      	nop
 800cf2e:	3708      	adds	r7, #8
 800cf30:	46bd      	mov	sp, r7
 800cf32:	bd80      	pop	{r7, pc}

0800cf34 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b082      	sub	sp, #8
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
 800cf3c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800cf44:	3b01      	subs	r3, #1
 800cf46:	2b02      	cmp	r3, #2
 800cf48:	d81e      	bhi.n	800cf88 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800cf4a:	683b      	ldr	r3, [r7, #0]
 800cf4c:	88db      	ldrh	r3, [r3, #6]
 800cf4e:	2b02      	cmp	r3, #2
 800cf50:	d004      	beq.n	800cf5c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800cf52:	6839      	ldr	r1, [r7, #0]
 800cf54:	6878      	ldr	r0, [r7, #4]
 800cf56:	f000 f892 	bl	800d07e <USBD_CtlError>
      break;
 800cf5a:	e01a      	b.n	800cf92 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	2201      	movs	r2, #1
 800cf60:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d005      	beq.n	800cf78 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	68db      	ldr	r3, [r3, #12]
 800cf70:	f043 0202 	orr.w	r2, r3, #2
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	330c      	adds	r3, #12
 800cf7c:	2202      	movs	r2, #2
 800cf7e:	4619      	mov	r1, r3
 800cf80:	6878      	ldr	r0, [r7, #4]
 800cf82:	f000 f8e7 	bl	800d154 <USBD_CtlSendData>
    break;
 800cf86:	e004      	b.n	800cf92 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800cf88:	6839      	ldr	r1, [r7, #0]
 800cf8a:	6878      	ldr	r0, [r7, #4]
 800cf8c:	f000 f877 	bl	800d07e <USBD_CtlError>
    break;
 800cf90:	bf00      	nop
  }
}
 800cf92:	bf00      	nop
 800cf94:	3708      	adds	r7, #8
 800cf96:	46bd      	mov	sp, r7
 800cf98:	bd80      	pop	{r7, pc}

0800cf9a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800cf9a:	b580      	push	{r7, lr}
 800cf9c:	b082      	sub	sp, #8
 800cf9e:	af00      	add	r7, sp, #0
 800cfa0:	6078      	str	r0, [r7, #4]
 800cfa2:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cfa4:	683b      	ldr	r3, [r7, #0]
 800cfa6:	885b      	ldrh	r3, [r3, #2]
 800cfa8:	2b01      	cmp	r3, #1
 800cfaa:	d106      	bne.n	800cfba <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	2201      	movs	r2, #1
 800cfb0:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800cfb4:	6878      	ldr	r0, [r7, #4]
 800cfb6:	f000 f92b 	bl	800d210 <USBD_CtlSendStatus>
  }

}
 800cfba:	bf00      	nop
 800cfbc:	3708      	adds	r7, #8
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	bd80      	pop	{r7, pc}

0800cfc2 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800cfc2:	b580      	push	{r7, lr}
 800cfc4:	b082      	sub	sp, #8
 800cfc6:	af00      	add	r7, sp, #0
 800cfc8:	6078      	str	r0, [r7, #4]
 800cfca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800cfd2:	3b01      	subs	r3, #1
 800cfd4:	2b02      	cmp	r3, #2
 800cfd6:	d80b      	bhi.n	800cff0 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cfd8:	683b      	ldr	r3, [r7, #0]
 800cfda:	885b      	ldrh	r3, [r3, #2]
 800cfdc:	2b01      	cmp	r3, #1
 800cfde:	d10c      	bne.n	800cffa <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800cfe8:	6878      	ldr	r0, [r7, #4]
 800cfea:	f000 f911 	bl	800d210 <USBD_CtlSendStatus>
    }
    break;
 800cfee:	e004      	b.n	800cffa <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800cff0:	6839      	ldr	r1, [r7, #0]
 800cff2:	6878      	ldr	r0, [r7, #4]
 800cff4:	f000 f843 	bl	800d07e <USBD_CtlError>
    break;
 800cff8:	e000      	b.n	800cffc <USBD_ClrFeature+0x3a>
    break;
 800cffa:	bf00      	nop
  }
}
 800cffc:	bf00      	nop
 800cffe:	3708      	adds	r7, #8
 800d000:	46bd      	mov	sp, r7
 800d002:	bd80      	pop	{r7, pc}

0800d004 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d004:	b480      	push	{r7}
 800d006:	b083      	sub	sp, #12
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
 800d00c:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800d00e:	683b      	ldr	r3, [r7, #0]
 800d010:	781a      	ldrb	r2, [r3, #0]
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	785a      	ldrb	r2, [r3, #1]
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800d01e:	683b      	ldr	r3, [r7, #0]
 800d020:	3302      	adds	r3, #2
 800d022:	781b      	ldrb	r3, [r3, #0]
 800d024:	b29a      	uxth	r2, r3
 800d026:	683b      	ldr	r3, [r7, #0]
 800d028:	3303      	adds	r3, #3
 800d02a:	781b      	ldrb	r3, [r3, #0]
 800d02c:	b29b      	uxth	r3, r3
 800d02e:	021b      	lsls	r3, r3, #8
 800d030:	b29b      	uxth	r3, r3
 800d032:	4413      	add	r3, r2
 800d034:	b29a      	uxth	r2, r3
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800d03a:	683b      	ldr	r3, [r7, #0]
 800d03c:	3304      	adds	r3, #4
 800d03e:	781b      	ldrb	r3, [r3, #0]
 800d040:	b29a      	uxth	r2, r3
 800d042:	683b      	ldr	r3, [r7, #0]
 800d044:	3305      	adds	r3, #5
 800d046:	781b      	ldrb	r3, [r3, #0]
 800d048:	b29b      	uxth	r3, r3
 800d04a:	021b      	lsls	r3, r3, #8
 800d04c:	b29b      	uxth	r3, r3
 800d04e:	4413      	add	r3, r2
 800d050:	b29a      	uxth	r2, r3
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	3306      	adds	r3, #6
 800d05a:	781b      	ldrb	r3, [r3, #0]
 800d05c:	b29a      	uxth	r2, r3
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	3307      	adds	r3, #7
 800d062:	781b      	ldrb	r3, [r3, #0]
 800d064:	b29b      	uxth	r3, r3
 800d066:	021b      	lsls	r3, r3, #8
 800d068:	b29b      	uxth	r3, r3
 800d06a:	4413      	add	r3, r2
 800d06c:	b29a      	uxth	r2, r3
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	80da      	strh	r2, [r3, #6]

}
 800d072:	bf00      	nop
 800d074:	370c      	adds	r7, #12
 800d076:	46bd      	mov	sp, r7
 800d078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07c:	4770      	bx	lr

0800d07e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800d07e:	b580      	push	{r7, lr}
 800d080:	b082      	sub	sp, #8
 800d082:	af00      	add	r7, sp, #0
 800d084:	6078      	str	r0, [r7, #4]
 800d086:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800d088:	2180      	movs	r1, #128	; 0x80
 800d08a:	6878      	ldr	r0, [r7, #4]
 800d08c:	f000 fd5e 	bl	800db4c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800d090:	2100      	movs	r1, #0
 800d092:	6878      	ldr	r0, [r7, #4]
 800d094:	f000 fd5a 	bl	800db4c <USBD_LL_StallEP>
}
 800d098:	bf00      	nop
 800d09a:	3708      	adds	r7, #8
 800d09c:	46bd      	mov	sp, r7
 800d09e:	bd80      	pop	{r7, pc}

0800d0a0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b086      	sub	sp, #24
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	60f8      	str	r0, [r7, #12]
 800d0a8:	60b9      	str	r1, [r7, #8]
 800d0aa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d032      	beq.n	800d11c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800d0b6:	68f8      	ldr	r0, [r7, #12]
 800d0b8:	f000 f834 	bl	800d124 <USBD_GetLen>
 800d0bc:	4603      	mov	r3, r0
 800d0be:	3301      	adds	r3, #1
 800d0c0:	b29b      	uxth	r3, r3
 800d0c2:	005b      	lsls	r3, r3, #1
 800d0c4:	b29a      	uxth	r2, r3
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800d0ca:	7dfb      	ldrb	r3, [r7, #23]
 800d0cc:	1c5a      	adds	r2, r3, #1
 800d0ce:	75fa      	strb	r2, [r7, #23]
 800d0d0:	461a      	mov	r2, r3
 800d0d2:	68bb      	ldr	r3, [r7, #8]
 800d0d4:	4413      	add	r3, r2
 800d0d6:	687a      	ldr	r2, [r7, #4]
 800d0d8:	7812      	ldrb	r2, [r2, #0]
 800d0da:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800d0dc:	7dfb      	ldrb	r3, [r7, #23]
 800d0de:	1c5a      	adds	r2, r3, #1
 800d0e0:	75fa      	strb	r2, [r7, #23]
 800d0e2:	461a      	mov	r2, r3
 800d0e4:	68bb      	ldr	r3, [r7, #8]
 800d0e6:	4413      	add	r3, r2
 800d0e8:	2203      	movs	r2, #3
 800d0ea:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800d0ec:	e012      	b.n	800d114 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	1c5a      	adds	r2, r3, #1
 800d0f2:	60fa      	str	r2, [r7, #12]
 800d0f4:	7dfa      	ldrb	r2, [r7, #23]
 800d0f6:	1c51      	adds	r1, r2, #1
 800d0f8:	75f9      	strb	r1, [r7, #23]
 800d0fa:	4611      	mov	r1, r2
 800d0fc:	68ba      	ldr	r2, [r7, #8]
 800d0fe:	440a      	add	r2, r1
 800d100:	781b      	ldrb	r3, [r3, #0]
 800d102:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800d104:	7dfb      	ldrb	r3, [r7, #23]
 800d106:	1c5a      	adds	r2, r3, #1
 800d108:	75fa      	strb	r2, [r7, #23]
 800d10a:	461a      	mov	r2, r3
 800d10c:	68bb      	ldr	r3, [r7, #8]
 800d10e:	4413      	add	r3, r2
 800d110:	2200      	movs	r2, #0
 800d112:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	781b      	ldrb	r3, [r3, #0]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d1e8      	bne.n	800d0ee <USBD_GetString+0x4e>
    }
  }
}
 800d11c:	bf00      	nop
 800d11e:	3718      	adds	r7, #24
 800d120:	46bd      	mov	sp, r7
 800d122:	bd80      	pop	{r7, pc}

0800d124 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d124:	b480      	push	{r7}
 800d126:	b085      	sub	sp, #20
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800d12c:	2300      	movs	r3, #0
 800d12e:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800d130:	e005      	b.n	800d13e <USBD_GetLen+0x1a>
    {
        len++;
 800d132:	7bfb      	ldrb	r3, [r7, #15]
 800d134:	3301      	adds	r3, #1
 800d136:	73fb      	strb	r3, [r7, #15]
        buf++;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	3301      	adds	r3, #1
 800d13c:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	781b      	ldrb	r3, [r3, #0]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d1f5      	bne.n	800d132 <USBD_GetLen+0xe>
    }

    return len;
 800d146:	7bfb      	ldrb	r3, [r7, #15]
}
 800d148:	4618      	mov	r0, r3
 800d14a:	3714      	adds	r7, #20
 800d14c:	46bd      	mov	sp, r7
 800d14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d152:	4770      	bx	lr

0800d154 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800d154:	b580      	push	{r7, lr}
 800d156:	b084      	sub	sp, #16
 800d158:	af00      	add	r7, sp, #0
 800d15a:	60f8      	str	r0, [r7, #12]
 800d15c:	60b9      	str	r1, [r7, #8]
 800d15e:	4613      	mov	r3, r2
 800d160:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	2202      	movs	r2, #2
 800d166:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800d16a:	88fa      	ldrh	r2, [r7, #6]
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800d170:	88fa      	ldrh	r2, [r7, #6]
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800d176:	88fb      	ldrh	r3, [r7, #6]
 800d178:	68ba      	ldr	r2, [r7, #8]
 800d17a:	2100      	movs	r1, #0
 800d17c:	68f8      	ldr	r0, [r7, #12]
 800d17e:	f000 fd6e 	bl	800dc5e <USBD_LL_Transmit>

  return USBD_OK;
 800d182:	2300      	movs	r3, #0
}
 800d184:	4618      	mov	r0, r3
 800d186:	3710      	adds	r7, #16
 800d188:	46bd      	mov	sp, r7
 800d18a:	bd80      	pop	{r7, pc}

0800d18c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b084      	sub	sp, #16
 800d190:	af00      	add	r7, sp, #0
 800d192:	60f8      	str	r0, [r7, #12]
 800d194:	60b9      	str	r1, [r7, #8]
 800d196:	4613      	mov	r3, r2
 800d198:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800d19a:	88fb      	ldrh	r3, [r7, #6]
 800d19c:	68ba      	ldr	r2, [r7, #8]
 800d19e:	2100      	movs	r1, #0
 800d1a0:	68f8      	ldr	r0, [r7, #12]
 800d1a2:	f000 fd5c 	bl	800dc5e <USBD_LL_Transmit>

  return USBD_OK;
 800d1a6:	2300      	movs	r3, #0
}
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	3710      	adds	r7, #16
 800d1ac:	46bd      	mov	sp, r7
 800d1ae:	bd80      	pop	{r7, pc}

0800d1b0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b084      	sub	sp, #16
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	60f8      	str	r0, [r7, #12]
 800d1b8:	60b9      	str	r1, [r7, #8]
 800d1ba:	4613      	mov	r3, r2
 800d1bc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	2203      	movs	r2, #3
 800d1c2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800d1c6:	88fa      	ldrh	r2, [r7, #6]
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800d1ce:	88fa      	ldrh	r2, [r7, #6]
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800d1d6:	88fb      	ldrh	r3, [r7, #6]
 800d1d8:	68ba      	ldr	r2, [r7, #8]
 800d1da:	2100      	movs	r1, #0
 800d1dc:	68f8      	ldr	r0, [r7, #12]
 800d1de:	f000 fd61 	bl	800dca4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d1e2:	2300      	movs	r3, #0
}
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	3710      	adds	r7, #16
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	bd80      	pop	{r7, pc}

0800d1ec <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b084      	sub	sp, #16
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	60f8      	str	r0, [r7, #12]
 800d1f4:	60b9      	str	r1, [r7, #8]
 800d1f6:	4613      	mov	r3, r2
 800d1f8:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d1fa:	88fb      	ldrh	r3, [r7, #6]
 800d1fc:	68ba      	ldr	r2, [r7, #8]
 800d1fe:	2100      	movs	r1, #0
 800d200:	68f8      	ldr	r0, [r7, #12]
 800d202:	f000 fd4f 	bl	800dca4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d206:	2300      	movs	r3, #0
}
 800d208:	4618      	mov	r0, r3
 800d20a:	3710      	adds	r7, #16
 800d20c:	46bd      	mov	sp, r7
 800d20e:	bd80      	pop	{r7, pc}

0800d210 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800d210:	b580      	push	{r7, lr}
 800d212:	b082      	sub	sp, #8
 800d214:	af00      	add	r7, sp, #0
 800d216:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	2204      	movs	r2, #4
 800d21c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d220:	2300      	movs	r3, #0
 800d222:	2200      	movs	r2, #0
 800d224:	2100      	movs	r1, #0
 800d226:	6878      	ldr	r0, [r7, #4]
 800d228:	f000 fd19 	bl	800dc5e <USBD_LL_Transmit>

  return USBD_OK;
 800d22c:	2300      	movs	r3, #0
}
 800d22e:	4618      	mov	r0, r3
 800d230:	3708      	adds	r7, #8
 800d232:	46bd      	mov	sp, r7
 800d234:	bd80      	pop	{r7, pc}

0800d236 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800d236:	b580      	push	{r7, lr}
 800d238:	b082      	sub	sp, #8
 800d23a:	af00      	add	r7, sp, #0
 800d23c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	2205      	movs	r2, #5
 800d242:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800d246:	2300      	movs	r3, #0
 800d248:	2200      	movs	r2, #0
 800d24a:	2100      	movs	r1, #0
 800d24c:	6878      	ldr	r0, [r7, #4]
 800d24e:	f000 fd29 	bl	800dca4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d252:	2300      	movs	r3, #0
}
 800d254:	4618      	mov	r0, r3
 800d256:	3708      	adds	r7, #8
 800d258:	46bd      	mov	sp, r7
 800d25a:	bd80      	pop	{r7, pc}

0800d25c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d25c:	b480      	push	{r7}
 800d25e:	b087      	sub	sp, #28
 800d260:	af00      	add	r7, sp, #0
 800d262:	60f8      	str	r0, [r7, #12]
 800d264:	60b9      	str	r1, [r7, #8]
 800d266:	4613      	mov	r3, r2
 800d268:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d26a:	2301      	movs	r3, #1
 800d26c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d26e:	2300      	movs	r3, #0
 800d270:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d272:	4b1f      	ldr	r3, [pc, #124]	; (800d2f0 <FATFS_LinkDriverEx+0x94>)
 800d274:	7a5b      	ldrb	r3, [r3, #9]
 800d276:	b2db      	uxtb	r3, r3
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d131      	bne.n	800d2e0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d27c:	4b1c      	ldr	r3, [pc, #112]	; (800d2f0 <FATFS_LinkDriverEx+0x94>)
 800d27e:	7a5b      	ldrb	r3, [r3, #9]
 800d280:	b2db      	uxtb	r3, r3
 800d282:	461a      	mov	r2, r3
 800d284:	4b1a      	ldr	r3, [pc, #104]	; (800d2f0 <FATFS_LinkDriverEx+0x94>)
 800d286:	2100      	movs	r1, #0
 800d288:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d28a:	4b19      	ldr	r3, [pc, #100]	; (800d2f0 <FATFS_LinkDriverEx+0x94>)
 800d28c:	7a5b      	ldrb	r3, [r3, #9]
 800d28e:	b2db      	uxtb	r3, r3
 800d290:	4a17      	ldr	r2, [pc, #92]	; (800d2f0 <FATFS_LinkDriverEx+0x94>)
 800d292:	009b      	lsls	r3, r3, #2
 800d294:	4413      	add	r3, r2
 800d296:	68fa      	ldr	r2, [r7, #12]
 800d298:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d29a:	4b15      	ldr	r3, [pc, #84]	; (800d2f0 <FATFS_LinkDriverEx+0x94>)
 800d29c:	7a5b      	ldrb	r3, [r3, #9]
 800d29e:	b2db      	uxtb	r3, r3
 800d2a0:	461a      	mov	r2, r3
 800d2a2:	4b13      	ldr	r3, [pc, #76]	; (800d2f0 <FATFS_LinkDriverEx+0x94>)
 800d2a4:	4413      	add	r3, r2
 800d2a6:	79fa      	ldrb	r2, [r7, #7]
 800d2a8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d2aa:	4b11      	ldr	r3, [pc, #68]	; (800d2f0 <FATFS_LinkDriverEx+0x94>)
 800d2ac:	7a5b      	ldrb	r3, [r3, #9]
 800d2ae:	b2db      	uxtb	r3, r3
 800d2b0:	1c5a      	adds	r2, r3, #1
 800d2b2:	b2d1      	uxtb	r1, r2
 800d2b4:	4a0e      	ldr	r2, [pc, #56]	; (800d2f0 <FATFS_LinkDriverEx+0x94>)
 800d2b6:	7251      	strb	r1, [r2, #9]
 800d2b8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d2ba:	7dbb      	ldrb	r3, [r7, #22]
 800d2bc:	3330      	adds	r3, #48	; 0x30
 800d2be:	b2da      	uxtb	r2, r3
 800d2c0:	68bb      	ldr	r3, [r7, #8]
 800d2c2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d2c4:	68bb      	ldr	r3, [r7, #8]
 800d2c6:	3301      	adds	r3, #1
 800d2c8:	223a      	movs	r2, #58	; 0x3a
 800d2ca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d2cc:	68bb      	ldr	r3, [r7, #8]
 800d2ce:	3302      	adds	r3, #2
 800d2d0:	222f      	movs	r2, #47	; 0x2f
 800d2d2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d2d4:	68bb      	ldr	r3, [r7, #8]
 800d2d6:	3303      	adds	r3, #3
 800d2d8:	2200      	movs	r2, #0
 800d2da:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d2dc:	2300      	movs	r3, #0
 800d2de:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d2e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	371c      	adds	r7, #28
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ec:	4770      	bx	lr
 800d2ee:	bf00      	nop
 800d2f0:	20000988 	.word	0x20000988

0800d2f4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b082      	sub	sp, #8
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
 800d2fc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d2fe:	2200      	movs	r2, #0
 800d300:	6839      	ldr	r1, [r7, #0]
 800d302:	6878      	ldr	r0, [r7, #4]
 800d304:	f7ff ffaa 	bl	800d25c <FATFS_LinkDriverEx>
 800d308:	4603      	mov	r3, r0
}
 800d30a:	4618      	mov	r0, r3
 800d30c:	3708      	adds	r7, #8
 800d30e:	46bd      	mov	sp, r7
 800d310:	bd80      	pop	{r7, pc}
	...

0800d314 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d314:	b580      	push	{r7, lr}
 800d316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d318:	2200      	movs	r2, #0
 800d31a:	4912      	ldr	r1, [pc, #72]	; (800d364 <MX_USB_DEVICE_Init+0x50>)
 800d31c:	4812      	ldr	r0, [pc, #72]	; (800d368 <MX_USB_DEVICE_Init+0x54>)
 800d31e:	f7fe ff43 	bl	800c1a8 <USBD_Init>
 800d322:	4603      	mov	r3, r0
 800d324:	2b00      	cmp	r3, #0
 800d326:	d001      	beq.n	800d32c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d328:	f7f5 fa82 	bl	8002830 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d32c:	490f      	ldr	r1, [pc, #60]	; (800d36c <MX_USB_DEVICE_Init+0x58>)
 800d32e:	480e      	ldr	r0, [pc, #56]	; (800d368 <MX_USB_DEVICE_Init+0x54>)
 800d330:	f7fe ff65 	bl	800c1fe <USBD_RegisterClass>
 800d334:	4603      	mov	r3, r0
 800d336:	2b00      	cmp	r3, #0
 800d338:	d001      	beq.n	800d33e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d33a:	f7f5 fa79 	bl	8002830 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d33e:	490c      	ldr	r1, [pc, #48]	; (800d370 <MX_USB_DEVICE_Init+0x5c>)
 800d340:	4809      	ldr	r0, [pc, #36]	; (800d368 <MX_USB_DEVICE_Init+0x54>)
 800d342:	f7fe fe93 	bl	800c06c <USBD_CDC_RegisterInterface>
 800d346:	4603      	mov	r3, r0
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d001      	beq.n	800d350 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d34c:	f7f5 fa70 	bl	8002830 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d350:	4805      	ldr	r0, [pc, #20]	; (800d368 <MX_USB_DEVICE_Init+0x54>)
 800d352:	f7fe ff6e 	bl	800c232 <USBD_Start>
 800d356:	4603      	mov	r3, r0
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d001      	beq.n	800d360 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d35c:	f7f5 fa68 	bl	8002830 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d360:	bf00      	nop
 800d362:	bd80      	pop	{r7, pc}
 800d364:	20000134 	.word	0x20000134
 800d368:	200013c8 	.word	0x200013c8
 800d36c:	20000020 	.word	0x20000020
 800d370:	20000124 	.word	0x20000124

0800d374 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d374:	b580      	push	{r7, lr}
 800d376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d378:	2200      	movs	r2, #0
 800d37a:	4905      	ldr	r1, [pc, #20]	; (800d390 <CDC_Init_FS+0x1c>)
 800d37c:	4805      	ldr	r0, [pc, #20]	; (800d394 <CDC_Init_FS+0x20>)
 800d37e:	f7fe fe8c 	bl	800c09a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d382:	4905      	ldr	r1, [pc, #20]	; (800d398 <CDC_Init_FS+0x24>)
 800d384:	4803      	ldr	r0, [pc, #12]	; (800d394 <CDC_Init_FS+0x20>)
 800d386:	f7fe fea2 	bl	800c0ce <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d38a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d38c:	4618      	mov	r0, r3
 800d38e:	bd80      	pop	{r7, pc}
 800d390:	20001e64 	.word	0x20001e64
 800d394:	200013c8 	.word	0x200013c8
 800d398:	20001664 	.word	0x20001664

0800d39c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d39c:	b480      	push	{r7}
 800d39e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d3a0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3aa:	4770      	bx	lr

0800d3ac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d3ac:	b480      	push	{r7}
 800d3ae:	b085      	sub	sp, #20
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	4603      	mov	r3, r0
 800d3b4:	6039      	str	r1, [r7, #0]
 800d3b6:	71fb      	strb	r3, [r7, #7]
 800d3b8:	4613      	mov	r3, r2
 800d3ba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint8_t tempbuf[7] = {0,0,0,0,0,0,0};
 800d3bc:	f107 0308 	add.w	r3, r7, #8
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	601a      	str	r2, [r3, #0]
 800d3c4:	f8c3 2003 	str.w	r2, [r3, #3]
  switch(cmd)
 800d3c8:	79fb      	ldrb	r3, [r7, #7]
 800d3ca:	2b23      	cmp	r3, #35	; 0x23
 800d3cc:	d87c      	bhi.n	800d4c8 <CDC_Control_FS+0x11c>
 800d3ce:	a201      	add	r2, pc, #4	; (adr r2, 800d3d4 <CDC_Control_FS+0x28>)
 800d3d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3d4:	0800d4c9 	.word	0x0800d4c9
 800d3d8:	0800d4c9 	.word	0x0800d4c9
 800d3dc:	0800d4c9 	.word	0x0800d4c9
 800d3e0:	0800d4c9 	.word	0x0800d4c9
 800d3e4:	0800d4c9 	.word	0x0800d4c9
 800d3e8:	0800d4c9 	.word	0x0800d4c9
 800d3ec:	0800d4c9 	.word	0x0800d4c9
 800d3f0:	0800d4c9 	.word	0x0800d4c9
 800d3f4:	0800d4c9 	.word	0x0800d4c9
 800d3f8:	0800d4c9 	.word	0x0800d4c9
 800d3fc:	0800d4c9 	.word	0x0800d4c9
 800d400:	0800d4c9 	.word	0x0800d4c9
 800d404:	0800d4c9 	.word	0x0800d4c9
 800d408:	0800d4c9 	.word	0x0800d4c9
 800d40c:	0800d4c9 	.word	0x0800d4c9
 800d410:	0800d4c9 	.word	0x0800d4c9
 800d414:	0800d4c9 	.word	0x0800d4c9
 800d418:	0800d4c9 	.word	0x0800d4c9
 800d41c:	0800d4c9 	.word	0x0800d4c9
 800d420:	0800d4c9 	.word	0x0800d4c9
 800d424:	0800d4c9 	.word	0x0800d4c9
 800d428:	0800d4c9 	.word	0x0800d4c9
 800d42c:	0800d4c9 	.word	0x0800d4c9
 800d430:	0800d4c9 	.word	0x0800d4c9
 800d434:	0800d4c9 	.word	0x0800d4c9
 800d438:	0800d4c9 	.word	0x0800d4c9
 800d43c:	0800d4c9 	.word	0x0800d4c9
 800d440:	0800d4c9 	.word	0x0800d4c9
 800d444:	0800d4c9 	.word	0x0800d4c9
 800d448:	0800d4c9 	.word	0x0800d4c9
 800d44c:	0800d4c9 	.word	0x0800d4c9
 800d450:	0800d4c9 	.word	0x0800d4c9
 800d454:	0800d465 	.word	0x0800d465
 800d458:	0800d491 	.word	0x0800d491
 800d45c:	0800d4c9 	.word	0x0800d4c9
 800d460:	0800d4c9 	.word	0x0800d4c9
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      	tempbuf[0] = pbuf[0];
 800d464:	683b      	ldr	r3, [r7, #0]
 800d466:	781b      	ldrb	r3, [r3, #0]
 800d468:	723b      	strb	r3, [r7, #8]
      	tempbuf[1] = pbuf[1];
 800d46a:	683b      	ldr	r3, [r7, #0]
 800d46c:	785b      	ldrb	r3, [r3, #1]
 800d46e:	727b      	strb	r3, [r7, #9]
      	tempbuf[2] = pbuf[2];
 800d470:	683b      	ldr	r3, [r7, #0]
 800d472:	789b      	ldrb	r3, [r3, #2]
 800d474:	72bb      	strb	r3, [r7, #10]
      	tempbuf[3] = pbuf[3];
 800d476:	683b      	ldr	r3, [r7, #0]
 800d478:	78db      	ldrb	r3, [r3, #3]
 800d47a:	72fb      	strb	r3, [r7, #11]
      	tempbuf[4] = pbuf[4];
 800d47c:	683b      	ldr	r3, [r7, #0]
 800d47e:	791b      	ldrb	r3, [r3, #4]
 800d480:	733b      	strb	r3, [r7, #12]
      	tempbuf[5] = pbuf[5];
 800d482:	683b      	ldr	r3, [r7, #0]
 800d484:	795b      	ldrb	r3, [r3, #5]
 800d486:	737b      	strb	r3, [r7, #13]
      	tempbuf[6] = pbuf[6];
 800d488:	683b      	ldr	r3, [r7, #0]
 800d48a:	799b      	ldrb	r3, [r3, #6]
 800d48c:	73bb      	strb	r3, [r7, #14]
      	break;
 800d48e:	e01c      	b.n	800d4ca <CDC_Control_FS+0x11e>

    case CDC_GET_LINE_CODING:
      	pbuf[0] = tempbuf[0];
 800d490:	7a3a      	ldrb	r2, [r7, #8]
 800d492:	683b      	ldr	r3, [r7, #0]
 800d494:	701a      	strb	r2, [r3, #0]
      	pbuf[1] = tempbuf[1];
 800d496:	683b      	ldr	r3, [r7, #0]
 800d498:	3301      	adds	r3, #1
 800d49a:	7a7a      	ldrb	r2, [r7, #9]
 800d49c:	701a      	strb	r2, [r3, #0]
      	pbuf[2] = tempbuf[2];
 800d49e:	683b      	ldr	r3, [r7, #0]
 800d4a0:	3302      	adds	r3, #2
 800d4a2:	7aba      	ldrb	r2, [r7, #10]
 800d4a4:	701a      	strb	r2, [r3, #0]
      	pbuf[3] = tempbuf[3];
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	3303      	adds	r3, #3
 800d4aa:	7afa      	ldrb	r2, [r7, #11]
 800d4ac:	701a      	strb	r2, [r3, #0]
      	pbuf[4] = tempbuf[4];
 800d4ae:	683b      	ldr	r3, [r7, #0]
 800d4b0:	3304      	adds	r3, #4
 800d4b2:	7b3a      	ldrb	r2, [r7, #12]
 800d4b4:	701a      	strb	r2, [r3, #0]
      	pbuf[5] = tempbuf[5];
 800d4b6:	683b      	ldr	r3, [r7, #0]
 800d4b8:	3305      	adds	r3, #5
 800d4ba:	7b7a      	ldrb	r2, [r7, #13]
 800d4bc:	701a      	strb	r2, [r3, #0]
      	pbuf[6] = tempbuf[6];
 800d4be:	683b      	ldr	r3, [r7, #0]
 800d4c0:	3306      	adds	r3, #6
 800d4c2:	7bba      	ldrb	r2, [r7, #14]
 800d4c4:	701a      	strb	r2, [r3, #0]
      	break;
 800d4c6:	e000      	b.n	800d4ca <CDC_Control_FS+0x11e>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d4c8:	bf00      	nop
  }

  return (USBD_OK);
 800d4ca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	3714      	adds	r7, #20
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d6:	4770      	bx	lr

0800d4d8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b082      	sub	sp, #8
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
 800d4e0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d4e2:	6879      	ldr	r1, [r7, #4]
 800d4e4:	4805      	ldr	r0, [pc, #20]	; (800d4fc <CDC_Receive_FS+0x24>)
 800d4e6:	f7fe fdf2 	bl	800c0ce <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d4ea:	4804      	ldr	r0, [pc, #16]	; (800d4fc <CDC_Receive_FS+0x24>)
 800d4ec:	f7fe fe32 	bl	800c154 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d4f0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	3708      	adds	r7, #8
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	bd80      	pop	{r7, pc}
 800d4fa:	bf00      	nop
 800d4fc:	200013c8 	.word	0x200013c8

0800d500 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d500:	b580      	push	{r7, lr}
 800d502:	b084      	sub	sp, #16
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
 800d508:	460b      	mov	r3, r1
 800d50a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d50c:	2300      	movs	r3, #0
 800d50e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d510:	4b0d      	ldr	r3, [pc, #52]	; (800d548 <CDC_Transmit_FS+0x48>)
 800d512:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d516:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d518:	68bb      	ldr	r3, [r7, #8]
 800d51a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d001      	beq.n	800d526 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d522:	2301      	movs	r3, #1
 800d524:	e00b      	b.n	800d53e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d526:	887b      	ldrh	r3, [r7, #2]
 800d528:	461a      	mov	r2, r3
 800d52a:	6879      	ldr	r1, [r7, #4]
 800d52c:	4806      	ldr	r0, [pc, #24]	; (800d548 <CDC_Transmit_FS+0x48>)
 800d52e:	f7fe fdb4 	bl	800c09a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d532:	4805      	ldr	r0, [pc, #20]	; (800d548 <CDC_Transmit_FS+0x48>)
 800d534:	f7fe fddf 	bl	800c0f6 <USBD_CDC_TransmitPacket>
 800d538:	4603      	mov	r3, r0
 800d53a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d53c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d53e:	4618      	mov	r0, r3
 800d540:	3710      	adds	r7, #16
 800d542:	46bd      	mov	sp, r7
 800d544:	bd80      	pop	{r7, pc}
 800d546:	bf00      	nop
 800d548:	200013c8 	.word	0x200013c8

0800d54c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d54c:	b480      	push	{r7}
 800d54e:	b083      	sub	sp, #12
 800d550:	af00      	add	r7, sp, #0
 800d552:	4603      	mov	r3, r0
 800d554:	6039      	str	r1, [r7, #0]
 800d556:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d558:	683b      	ldr	r3, [r7, #0]
 800d55a:	2212      	movs	r2, #18
 800d55c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d55e:	4b03      	ldr	r3, [pc, #12]	; (800d56c <USBD_FS_DeviceDescriptor+0x20>)
}
 800d560:	4618      	mov	r0, r3
 800d562:	370c      	adds	r7, #12
 800d564:	46bd      	mov	sp, r7
 800d566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56a:	4770      	bx	lr
 800d56c:	20000150 	.word	0x20000150

0800d570 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d570:	b480      	push	{r7}
 800d572:	b083      	sub	sp, #12
 800d574:	af00      	add	r7, sp, #0
 800d576:	4603      	mov	r3, r0
 800d578:	6039      	str	r1, [r7, #0]
 800d57a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d57c:	683b      	ldr	r3, [r7, #0]
 800d57e:	2204      	movs	r2, #4
 800d580:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d582:	4b03      	ldr	r3, [pc, #12]	; (800d590 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d584:	4618      	mov	r0, r3
 800d586:	370c      	adds	r7, #12
 800d588:	46bd      	mov	sp, r7
 800d58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58e:	4770      	bx	lr
 800d590:	20000164 	.word	0x20000164

0800d594 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b082      	sub	sp, #8
 800d598:	af00      	add	r7, sp, #0
 800d59a:	4603      	mov	r3, r0
 800d59c:	6039      	str	r1, [r7, #0]
 800d59e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d5a0:	79fb      	ldrb	r3, [r7, #7]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d105      	bne.n	800d5b2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d5a6:	683a      	ldr	r2, [r7, #0]
 800d5a8:	4907      	ldr	r1, [pc, #28]	; (800d5c8 <USBD_FS_ProductStrDescriptor+0x34>)
 800d5aa:	4808      	ldr	r0, [pc, #32]	; (800d5cc <USBD_FS_ProductStrDescriptor+0x38>)
 800d5ac:	f7ff fd78 	bl	800d0a0 <USBD_GetString>
 800d5b0:	e004      	b.n	800d5bc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d5b2:	683a      	ldr	r2, [r7, #0]
 800d5b4:	4904      	ldr	r1, [pc, #16]	; (800d5c8 <USBD_FS_ProductStrDescriptor+0x34>)
 800d5b6:	4805      	ldr	r0, [pc, #20]	; (800d5cc <USBD_FS_ProductStrDescriptor+0x38>)
 800d5b8:	f7ff fd72 	bl	800d0a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d5bc:	4b02      	ldr	r3, [pc, #8]	; (800d5c8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d5be:	4618      	mov	r0, r3
 800d5c0:	3708      	adds	r7, #8
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	bd80      	pop	{r7, pc}
 800d5c6:	bf00      	nop
 800d5c8:	20002664 	.word	0x20002664
 800d5cc:	08011fcc 	.word	0x08011fcc

0800d5d0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b082      	sub	sp, #8
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	6039      	str	r1, [r7, #0]
 800d5da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d5dc:	683a      	ldr	r2, [r7, #0]
 800d5de:	4904      	ldr	r1, [pc, #16]	; (800d5f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d5e0:	4804      	ldr	r0, [pc, #16]	; (800d5f4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d5e2:	f7ff fd5d 	bl	800d0a0 <USBD_GetString>
  return USBD_StrDesc;
 800d5e6:	4b02      	ldr	r3, [pc, #8]	; (800d5f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	3708      	adds	r7, #8
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	bd80      	pop	{r7, pc}
 800d5f0:	20002664 	.word	0x20002664
 800d5f4:	08011fd8 	.word	0x08011fd8

0800d5f8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b082      	sub	sp, #8
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	4603      	mov	r3, r0
 800d600:	6039      	str	r1, [r7, #0]
 800d602:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d604:	683b      	ldr	r3, [r7, #0]
 800d606:	221a      	movs	r2, #26
 800d608:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d60a:	f000 f843 	bl	800d694 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d60e:	4b02      	ldr	r3, [pc, #8]	; (800d618 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d610:	4618      	mov	r0, r3
 800d612:	3708      	adds	r7, #8
 800d614:	46bd      	mov	sp, r7
 800d616:	bd80      	pop	{r7, pc}
 800d618:	20000168 	.word	0x20000168

0800d61c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b082      	sub	sp, #8
 800d620:	af00      	add	r7, sp, #0
 800d622:	4603      	mov	r3, r0
 800d624:	6039      	str	r1, [r7, #0]
 800d626:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d628:	79fb      	ldrb	r3, [r7, #7]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d105      	bne.n	800d63a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d62e:	683a      	ldr	r2, [r7, #0]
 800d630:	4907      	ldr	r1, [pc, #28]	; (800d650 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d632:	4808      	ldr	r0, [pc, #32]	; (800d654 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d634:	f7ff fd34 	bl	800d0a0 <USBD_GetString>
 800d638:	e004      	b.n	800d644 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d63a:	683a      	ldr	r2, [r7, #0]
 800d63c:	4904      	ldr	r1, [pc, #16]	; (800d650 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d63e:	4805      	ldr	r0, [pc, #20]	; (800d654 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d640:	f7ff fd2e 	bl	800d0a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d644:	4b02      	ldr	r3, [pc, #8]	; (800d650 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d646:	4618      	mov	r0, r3
 800d648:	3708      	adds	r7, #8
 800d64a:	46bd      	mov	sp, r7
 800d64c:	bd80      	pop	{r7, pc}
 800d64e:	bf00      	nop
 800d650:	20002664 	.word	0x20002664
 800d654:	08011fec 	.word	0x08011fec

0800d658 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d658:	b580      	push	{r7, lr}
 800d65a:	b082      	sub	sp, #8
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	4603      	mov	r3, r0
 800d660:	6039      	str	r1, [r7, #0]
 800d662:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d664:	79fb      	ldrb	r3, [r7, #7]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d105      	bne.n	800d676 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d66a:	683a      	ldr	r2, [r7, #0]
 800d66c:	4907      	ldr	r1, [pc, #28]	; (800d68c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d66e:	4808      	ldr	r0, [pc, #32]	; (800d690 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d670:	f7ff fd16 	bl	800d0a0 <USBD_GetString>
 800d674:	e004      	b.n	800d680 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d676:	683a      	ldr	r2, [r7, #0]
 800d678:	4904      	ldr	r1, [pc, #16]	; (800d68c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d67a:	4805      	ldr	r0, [pc, #20]	; (800d690 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d67c:	f7ff fd10 	bl	800d0a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d680:	4b02      	ldr	r3, [pc, #8]	; (800d68c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d682:	4618      	mov	r0, r3
 800d684:	3708      	adds	r7, #8
 800d686:	46bd      	mov	sp, r7
 800d688:	bd80      	pop	{r7, pc}
 800d68a:	bf00      	nop
 800d68c:	20002664 	.word	0x20002664
 800d690:	08011ff8 	.word	0x08011ff8

0800d694 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d694:	b580      	push	{r7, lr}
 800d696:	b084      	sub	sp, #16
 800d698:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d69a:	4b0f      	ldr	r3, [pc, #60]	; (800d6d8 <Get_SerialNum+0x44>)
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d6a0:	4b0e      	ldr	r3, [pc, #56]	; (800d6dc <Get_SerialNum+0x48>)
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d6a6:	4b0e      	ldr	r3, [pc, #56]	; (800d6e0 <Get_SerialNum+0x4c>)
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d6ac:	68fa      	ldr	r2, [r7, #12]
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	4413      	add	r3, r2
 800d6b2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d009      	beq.n	800d6ce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d6ba:	2208      	movs	r2, #8
 800d6bc:	4909      	ldr	r1, [pc, #36]	; (800d6e4 <Get_SerialNum+0x50>)
 800d6be:	68f8      	ldr	r0, [r7, #12]
 800d6c0:	f000 f814 	bl	800d6ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d6c4:	2204      	movs	r2, #4
 800d6c6:	4908      	ldr	r1, [pc, #32]	; (800d6e8 <Get_SerialNum+0x54>)
 800d6c8:	68b8      	ldr	r0, [r7, #8]
 800d6ca:	f000 f80f 	bl	800d6ec <IntToUnicode>
  }
}
 800d6ce:	bf00      	nop
 800d6d0:	3710      	adds	r7, #16
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	bd80      	pop	{r7, pc}
 800d6d6:	bf00      	nop
 800d6d8:	1fff7a10 	.word	0x1fff7a10
 800d6dc:	1fff7a14 	.word	0x1fff7a14
 800d6e0:	1fff7a18 	.word	0x1fff7a18
 800d6e4:	2000016a 	.word	0x2000016a
 800d6e8:	2000017a 	.word	0x2000017a

0800d6ec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d6ec:	b480      	push	{r7}
 800d6ee:	b087      	sub	sp, #28
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	60f8      	str	r0, [r7, #12]
 800d6f4:	60b9      	str	r1, [r7, #8]
 800d6f6:	4613      	mov	r3, r2
 800d6f8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d6fe:	2300      	movs	r3, #0
 800d700:	75fb      	strb	r3, [r7, #23]
 800d702:	e027      	b.n	800d754 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	0f1b      	lsrs	r3, r3, #28
 800d708:	2b09      	cmp	r3, #9
 800d70a:	d80b      	bhi.n	800d724 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	0f1b      	lsrs	r3, r3, #28
 800d710:	b2da      	uxtb	r2, r3
 800d712:	7dfb      	ldrb	r3, [r7, #23]
 800d714:	005b      	lsls	r3, r3, #1
 800d716:	4619      	mov	r1, r3
 800d718:	68bb      	ldr	r3, [r7, #8]
 800d71a:	440b      	add	r3, r1
 800d71c:	3230      	adds	r2, #48	; 0x30
 800d71e:	b2d2      	uxtb	r2, r2
 800d720:	701a      	strb	r2, [r3, #0]
 800d722:	e00a      	b.n	800d73a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	0f1b      	lsrs	r3, r3, #28
 800d728:	b2da      	uxtb	r2, r3
 800d72a:	7dfb      	ldrb	r3, [r7, #23]
 800d72c:	005b      	lsls	r3, r3, #1
 800d72e:	4619      	mov	r1, r3
 800d730:	68bb      	ldr	r3, [r7, #8]
 800d732:	440b      	add	r3, r1
 800d734:	3237      	adds	r2, #55	; 0x37
 800d736:	b2d2      	uxtb	r2, r2
 800d738:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	011b      	lsls	r3, r3, #4
 800d73e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d740:	7dfb      	ldrb	r3, [r7, #23]
 800d742:	005b      	lsls	r3, r3, #1
 800d744:	3301      	adds	r3, #1
 800d746:	68ba      	ldr	r2, [r7, #8]
 800d748:	4413      	add	r3, r2
 800d74a:	2200      	movs	r2, #0
 800d74c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d74e:	7dfb      	ldrb	r3, [r7, #23]
 800d750:	3301      	adds	r3, #1
 800d752:	75fb      	strb	r3, [r7, #23]
 800d754:	7dfa      	ldrb	r2, [r7, #23]
 800d756:	79fb      	ldrb	r3, [r7, #7]
 800d758:	429a      	cmp	r2, r3
 800d75a:	d3d3      	bcc.n	800d704 <IntToUnicode+0x18>
  }
}
 800d75c:	bf00      	nop
 800d75e:	371c      	adds	r7, #28
 800d760:	46bd      	mov	sp, r7
 800d762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d766:	4770      	bx	lr

0800d768 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b08a      	sub	sp, #40	; 0x28
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d770:	f107 0314 	add.w	r3, r7, #20
 800d774:	2200      	movs	r2, #0
 800d776:	601a      	str	r2, [r3, #0]
 800d778:	605a      	str	r2, [r3, #4]
 800d77a:	609a      	str	r2, [r3, #8]
 800d77c:	60da      	str	r2, [r3, #12]
 800d77e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d788:	d13a      	bne.n	800d800 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d78a:	2300      	movs	r3, #0
 800d78c:	613b      	str	r3, [r7, #16]
 800d78e:	4b1e      	ldr	r3, [pc, #120]	; (800d808 <HAL_PCD_MspInit+0xa0>)
 800d790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d792:	4a1d      	ldr	r2, [pc, #116]	; (800d808 <HAL_PCD_MspInit+0xa0>)
 800d794:	f043 0301 	orr.w	r3, r3, #1
 800d798:	6313      	str	r3, [r2, #48]	; 0x30
 800d79a:	4b1b      	ldr	r3, [pc, #108]	; (800d808 <HAL_PCD_MspInit+0xa0>)
 800d79c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d79e:	f003 0301 	and.w	r3, r3, #1
 800d7a2:	613b      	str	r3, [r7, #16]
 800d7a4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d7a6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d7aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d7ac:	2302      	movs	r3, #2
 800d7ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d7b4:	2303      	movs	r3, #3
 800d7b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d7b8:	230a      	movs	r3, #10
 800d7ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d7bc:	f107 0314 	add.w	r3, r7, #20
 800d7c0:	4619      	mov	r1, r3
 800d7c2:	4812      	ldr	r0, [pc, #72]	; (800d80c <HAL_PCD_MspInit+0xa4>)
 800d7c4:	f7f6 f904 	bl	80039d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d7c8:	4b0f      	ldr	r3, [pc, #60]	; (800d808 <HAL_PCD_MspInit+0xa0>)
 800d7ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7cc:	4a0e      	ldr	r2, [pc, #56]	; (800d808 <HAL_PCD_MspInit+0xa0>)
 800d7ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d7d2:	6353      	str	r3, [r2, #52]	; 0x34
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	60fb      	str	r3, [r7, #12]
 800d7d8:	4b0b      	ldr	r3, [pc, #44]	; (800d808 <HAL_PCD_MspInit+0xa0>)
 800d7da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d7dc:	4a0a      	ldr	r2, [pc, #40]	; (800d808 <HAL_PCD_MspInit+0xa0>)
 800d7de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d7e2:	6453      	str	r3, [r2, #68]	; 0x44
 800d7e4:	4b08      	ldr	r3, [pc, #32]	; (800d808 <HAL_PCD_MspInit+0xa0>)
 800d7e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d7e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d7ec:	60fb      	str	r3, [r7, #12]
 800d7ee:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	2100      	movs	r1, #0
 800d7f4:	2043      	movs	r0, #67	; 0x43
 800d7f6:	f7f5 fd18 	bl	800322a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d7fa:	2043      	movs	r0, #67	; 0x43
 800d7fc:	f7f5 fd31 	bl	8003262 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d800:	bf00      	nop
 800d802:	3728      	adds	r7, #40	; 0x28
 800d804:	46bd      	mov	sp, r7
 800d806:	bd80      	pop	{r7, pc}
 800d808:	40023800 	.word	0x40023800
 800d80c:	40020000 	.word	0x40020000

0800d810 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d810:	b580      	push	{r7, lr}
 800d812:	b082      	sub	sp, #8
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d824:	4619      	mov	r1, r3
 800d826:	4610      	mov	r0, r2
 800d828:	f7fe fd4c 	bl	800c2c4 <USBD_LL_SetupStage>
}
 800d82c:	bf00      	nop
 800d82e:	3708      	adds	r7, #8
 800d830:	46bd      	mov	sp, r7
 800d832:	bd80      	pop	{r7, pc}

0800d834 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b082      	sub	sp, #8
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
 800d83c:	460b      	mov	r3, r1
 800d83e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800d846:	78fa      	ldrb	r2, [r7, #3]
 800d848:	6879      	ldr	r1, [r7, #4]
 800d84a:	4613      	mov	r3, r2
 800d84c:	00db      	lsls	r3, r3, #3
 800d84e:	1a9b      	subs	r3, r3, r2
 800d850:	009b      	lsls	r3, r3, #2
 800d852:	440b      	add	r3, r1
 800d854:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d858:	681a      	ldr	r2, [r3, #0]
 800d85a:	78fb      	ldrb	r3, [r7, #3]
 800d85c:	4619      	mov	r1, r3
 800d85e:	f7fe fd7c 	bl	800c35a <USBD_LL_DataOutStage>
}
 800d862:	bf00      	nop
 800d864:	3708      	adds	r7, #8
 800d866:	46bd      	mov	sp, r7
 800d868:	bd80      	pop	{r7, pc}

0800d86a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d86a:	b580      	push	{r7, lr}
 800d86c:	b082      	sub	sp, #8
 800d86e:	af00      	add	r7, sp, #0
 800d870:	6078      	str	r0, [r7, #4]
 800d872:	460b      	mov	r3, r1
 800d874:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800d87c:	78fa      	ldrb	r2, [r7, #3]
 800d87e:	6879      	ldr	r1, [r7, #4]
 800d880:	4613      	mov	r3, r2
 800d882:	00db      	lsls	r3, r3, #3
 800d884:	1a9b      	subs	r3, r3, r2
 800d886:	009b      	lsls	r3, r3, #2
 800d888:	440b      	add	r3, r1
 800d88a:	3348      	adds	r3, #72	; 0x48
 800d88c:	681a      	ldr	r2, [r3, #0]
 800d88e:	78fb      	ldrb	r3, [r7, #3]
 800d890:	4619      	mov	r1, r3
 800d892:	f7fe fdd3 	bl	800c43c <USBD_LL_DataInStage>
}
 800d896:	bf00      	nop
 800d898:	3708      	adds	r7, #8
 800d89a:	46bd      	mov	sp, r7
 800d89c:	bd80      	pop	{r7, pc}

0800d89e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d89e:	b580      	push	{r7, lr}
 800d8a0:	b082      	sub	sp, #8
 800d8a2:	af00      	add	r7, sp, #0
 800d8a4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	f7fe fee1 	bl	800c674 <USBD_LL_SOF>
}
 800d8b2:	bf00      	nop
 800d8b4:	3708      	adds	r7, #8
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	bd80      	pop	{r7, pc}

0800d8ba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800d8ba:	b580      	push	{r7, lr}
 800d8bc:	b084      	sub	sp, #16
 800d8be:	af00      	add	r7, sp, #0
 800d8c0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d8c2:	2301      	movs	r3, #1
 800d8c4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	68db      	ldr	r3, [r3, #12]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d102      	bne.n	800d8d4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	73fb      	strb	r3, [r7, #15]
 800d8d2:	e008      	b.n	800d8e6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	68db      	ldr	r3, [r3, #12]
 800d8d8:	2b02      	cmp	r3, #2
 800d8da:	d102      	bne.n	800d8e2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d8dc:	2301      	movs	r3, #1
 800d8de:	73fb      	strb	r3, [r7, #15]
 800d8e0:	e001      	b.n	800d8e6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d8e2:	f7f4 ffa5 	bl	8002830 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d8ec:	7bfa      	ldrb	r2, [r7, #15]
 800d8ee:	4611      	mov	r1, r2
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	f7fe fe89 	bl	800c608 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	f7fe fe42 	bl	800c586 <USBD_LL_Reset>
}
 800d902:	bf00      	nop
 800d904:	3710      	adds	r7, #16
 800d906:	46bd      	mov	sp, r7
 800d908:	bd80      	pop	{r7, pc}
	...

0800d90c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b082      	sub	sp, #8
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d91a:	4618      	mov	r0, r3
 800d91c:	f7fe fe84 	bl	800c628 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	687a      	ldr	r2, [r7, #4]
 800d92c:	6812      	ldr	r2, [r2, #0]
 800d92e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d932:	f043 0301 	orr.w	r3, r3, #1
 800d936:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	6a1b      	ldr	r3, [r3, #32]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d005      	beq.n	800d94c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d940:	4b04      	ldr	r3, [pc, #16]	; (800d954 <HAL_PCD_SuspendCallback+0x48>)
 800d942:	691b      	ldr	r3, [r3, #16]
 800d944:	4a03      	ldr	r2, [pc, #12]	; (800d954 <HAL_PCD_SuspendCallback+0x48>)
 800d946:	f043 0306 	orr.w	r3, r3, #6
 800d94a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d94c:	bf00      	nop
 800d94e:	3708      	adds	r7, #8
 800d950:	46bd      	mov	sp, r7
 800d952:	bd80      	pop	{r7, pc}
 800d954:	e000ed00 	.word	0xe000ed00

0800d958 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b082      	sub	sp, #8
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d966:	4618      	mov	r0, r3
 800d968:	f7fe fe73 	bl	800c652 <USBD_LL_Resume>
}
 800d96c:	bf00      	nop
 800d96e:	3708      	adds	r7, #8
 800d970:	46bd      	mov	sp, r7
 800d972:	bd80      	pop	{r7, pc}

0800d974 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d974:	b580      	push	{r7, lr}
 800d976:	b082      	sub	sp, #8
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]
 800d97c:	460b      	mov	r3, r1
 800d97e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d986:	78fa      	ldrb	r2, [r7, #3]
 800d988:	4611      	mov	r1, r2
 800d98a:	4618      	mov	r0, r3
 800d98c:	f7fe fe99 	bl	800c6c2 <USBD_LL_IsoOUTIncomplete>
}
 800d990:	bf00      	nop
 800d992:	3708      	adds	r7, #8
 800d994:	46bd      	mov	sp, r7
 800d996:	bd80      	pop	{r7, pc}

0800d998 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b082      	sub	sp, #8
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
 800d9a0:	460b      	mov	r3, r1
 800d9a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d9aa:	78fa      	ldrb	r2, [r7, #3]
 800d9ac:	4611      	mov	r1, r2
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	f7fe fe7a 	bl	800c6a8 <USBD_LL_IsoINIncomplete>
}
 800d9b4:	bf00      	nop
 800d9b6:	3708      	adds	r7, #8
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	bd80      	pop	{r7, pc}

0800d9bc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b082      	sub	sp, #8
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	f7fe fe86 	bl	800c6dc <USBD_LL_DevConnected>
}
 800d9d0:	bf00      	nop
 800d9d2:	3708      	adds	r7, #8
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	bd80      	pop	{r7, pc}

0800d9d8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b082      	sub	sp, #8
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	f7fe fe83 	bl	800c6f2 <USBD_LL_DevDisconnected>
}
 800d9ec:	bf00      	nop
 800d9ee:	3708      	adds	r7, #8
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	bd80      	pop	{r7, pc}

0800d9f4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b082      	sub	sp, #8
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	781b      	ldrb	r3, [r3, #0]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d13c      	bne.n	800da7e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800da04:	4a20      	ldr	r2, [pc, #128]	; (800da88 <USBD_LL_Init+0x94>)
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	4a1e      	ldr	r2, [pc, #120]	; (800da88 <USBD_LL_Init+0x94>)
 800da10:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800da14:	4b1c      	ldr	r3, [pc, #112]	; (800da88 <USBD_LL_Init+0x94>)
 800da16:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800da1a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800da1c:	4b1a      	ldr	r3, [pc, #104]	; (800da88 <USBD_LL_Init+0x94>)
 800da1e:	2204      	movs	r2, #4
 800da20:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800da22:	4b19      	ldr	r3, [pc, #100]	; (800da88 <USBD_LL_Init+0x94>)
 800da24:	2202      	movs	r2, #2
 800da26:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800da28:	4b17      	ldr	r3, [pc, #92]	; (800da88 <USBD_LL_Init+0x94>)
 800da2a:	2200      	movs	r2, #0
 800da2c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800da2e:	4b16      	ldr	r3, [pc, #88]	; (800da88 <USBD_LL_Init+0x94>)
 800da30:	2202      	movs	r2, #2
 800da32:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800da34:	4b14      	ldr	r3, [pc, #80]	; (800da88 <USBD_LL_Init+0x94>)
 800da36:	2200      	movs	r2, #0
 800da38:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800da3a:	4b13      	ldr	r3, [pc, #76]	; (800da88 <USBD_LL_Init+0x94>)
 800da3c:	2200      	movs	r2, #0
 800da3e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800da40:	4b11      	ldr	r3, [pc, #68]	; (800da88 <USBD_LL_Init+0x94>)
 800da42:	2200      	movs	r2, #0
 800da44:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800da46:	4b10      	ldr	r3, [pc, #64]	; (800da88 <USBD_LL_Init+0x94>)
 800da48:	2200      	movs	r2, #0
 800da4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800da4c:	4b0e      	ldr	r3, [pc, #56]	; (800da88 <USBD_LL_Init+0x94>)
 800da4e:	2200      	movs	r2, #0
 800da50:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800da52:	480d      	ldr	r0, [pc, #52]	; (800da88 <USBD_LL_Init+0x94>)
 800da54:	f7f6 fad8 	bl	8004008 <HAL_PCD_Init>
 800da58:	4603      	mov	r3, r0
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d001      	beq.n	800da62 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800da5e:	f7f4 fee7 	bl	8002830 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800da62:	2180      	movs	r1, #128	; 0x80
 800da64:	4808      	ldr	r0, [pc, #32]	; (800da88 <USBD_LL_Init+0x94>)
 800da66:	f7f7 fc3c 	bl	80052e2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800da6a:	2240      	movs	r2, #64	; 0x40
 800da6c:	2100      	movs	r1, #0
 800da6e:	4806      	ldr	r0, [pc, #24]	; (800da88 <USBD_LL_Init+0x94>)
 800da70:	f7f7 fbf0 	bl	8005254 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800da74:	2280      	movs	r2, #128	; 0x80
 800da76:	2101      	movs	r1, #1
 800da78:	4803      	ldr	r0, [pc, #12]	; (800da88 <USBD_LL_Init+0x94>)
 800da7a:	f7f7 fbeb 	bl	8005254 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800da7e:	2300      	movs	r3, #0
}
 800da80:	4618      	mov	r0, r3
 800da82:	3708      	adds	r7, #8
 800da84:	46bd      	mov	sp, r7
 800da86:	bd80      	pop	{r7, pc}
 800da88:	20002864 	.word	0x20002864

0800da8c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b084      	sub	sp, #16
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da94:	2300      	movs	r3, #0
 800da96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da98:	2300      	movs	r3, #0
 800da9a:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800daa2:	4618      	mov	r0, r3
 800daa4:	f7f6 fbcd 	bl	8004242 <HAL_PCD_Start>
 800daa8:	4603      	mov	r3, r0
 800daaa:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 800daac:	7bfb      	ldrb	r3, [r7, #15]
 800daae:	4618      	mov	r0, r3
 800dab0:	f000 f92e 	bl	800dd10 <USBD_Get_USB_Status>
 800dab4:	4603      	mov	r3, r0
 800dab6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800dab8:	7bbb      	ldrb	r3, [r7, #14]
}
 800daba:	4618      	mov	r0, r3
 800dabc:	3710      	adds	r7, #16
 800dabe:	46bd      	mov	sp, r7
 800dac0:	bd80      	pop	{r7, pc}

0800dac2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800dac2:	b580      	push	{r7, lr}
 800dac4:	b084      	sub	sp, #16
 800dac6:	af00      	add	r7, sp, #0
 800dac8:	6078      	str	r0, [r7, #4]
 800daca:	4608      	mov	r0, r1
 800dacc:	4611      	mov	r1, r2
 800dace:	461a      	mov	r2, r3
 800dad0:	4603      	mov	r3, r0
 800dad2:	70fb      	strb	r3, [r7, #3]
 800dad4:	460b      	mov	r3, r1
 800dad6:	70bb      	strb	r3, [r7, #2]
 800dad8:	4613      	mov	r3, r2
 800dada:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dadc:	2300      	movs	r3, #0
 800dade:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dae0:	2300      	movs	r3, #0
 800dae2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800daea:	78bb      	ldrb	r3, [r7, #2]
 800daec:	883a      	ldrh	r2, [r7, #0]
 800daee:	78f9      	ldrb	r1, [r7, #3]
 800daf0:	f7f6 ffa2 	bl	8004a38 <HAL_PCD_EP_Open>
 800daf4:	4603      	mov	r3, r0
 800daf6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800daf8:	7bfb      	ldrb	r3, [r7, #15]
 800dafa:	4618      	mov	r0, r3
 800dafc:	f000 f908 	bl	800dd10 <USBD_Get_USB_Status>
 800db00:	4603      	mov	r3, r0
 800db02:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800db04:	7bbb      	ldrb	r3, [r7, #14]
}
 800db06:	4618      	mov	r0, r3
 800db08:	3710      	adds	r7, #16
 800db0a:	46bd      	mov	sp, r7
 800db0c:	bd80      	pop	{r7, pc}

0800db0e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db0e:	b580      	push	{r7, lr}
 800db10:	b084      	sub	sp, #16
 800db12:	af00      	add	r7, sp, #0
 800db14:	6078      	str	r0, [r7, #4]
 800db16:	460b      	mov	r3, r1
 800db18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db1a:	2300      	movs	r3, #0
 800db1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db1e:	2300      	movs	r3, #0
 800db20:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800db28:	78fa      	ldrb	r2, [r7, #3]
 800db2a:	4611      	mov	r1, r2
 800db2c:	4618      	mov	r0, r3
 800db2e:	f7f6 ffeb 	bl	8004b08 <HAL_PCD_EP_Close>
 800db32:	4603      	mov	r3, r0
 800db34:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800db36:	7bfb      	ldrb	r3, [r7, #15]
 800db38:	4618      	mov	r0, r3
 800db3a:	f000 f8e9 	bl	800dd10 <USBD_Get_USB_Status>
 800db3e:	4603      	mov	r3, r0
 800db40:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800db42:	7bbb      	ldrb	r3, [r7, #14]
}
 800db44:	4618      	mov	r0, r3
 800db46:	3710      	adds	r7, #16
 800db48:	46bd      	mov	sp, r7
 800db4a:	bd80      	pop	{r7, pc}

0800db4c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b084      	sub	sp, #16
 800db50:	af00      	add	r7, sp, #0
 800db52:	6078      	str	r0, [r7, #4]
 800db54:	460b      	mov	r3, r1
 800db56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db58:	2300      	movs	r3, #0
 800db5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db5c:	2300      	movs	r3, #0
 800db5e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800db66:	78fa      	ldrb	r2, [r7, #3]
 800db68:	4611      	mov	r1, r2
 800db6a:	4618      	mov	r0, r3
 800db6c:	f7f7 f8c3 	bl	8004cf6 <HAL_PCD_EP_SetStall>
 800db70:	4603      	mov	r3, r0
 800db72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db74:	7bfb      	ldrb	r3, [r7, #15]
 800db76:	4618      	mov	r0, r3
 800db78:	f000 f8ca 	bl	800dd10 <USBD_Get_USB_Status>
 800db7c:	4603      	mov	r3, r0
 800db7e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800db80:	7bbb      	ldrb	r3, [r7, #14]
}
 800db82:	4618      	mov	r0, r3
 800db84:	3710      	adds	r7, #16
 800db86:	46bd      	mov	sp, r7
 800db88:	bd80      	pop	{r7, pc}

0800db8a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db8a:	b580      	push	{r7, lr}
 800db8c:	b084      	sub	sp, #16
 800db8e:	af00      	add	r7, sp, #0
 800db90:	6078      	str	r0, [r7, #4]
 800db92:	460b      	mov	r3, r1
 800db94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db96:	2300      	movs	r3, #0
 800db98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db9a:	2300      	movs	r3, #0
 800db9c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800dba4:	78fa      	ldrb	r2, [r7, #3]
 800dba6:	4611      	mov	r1, r2
 800dba8:	4618      	mov	r0, r3
 800dbaa:	f7f7 f908 	bl	8004dbe <HAL_PCD_EP_ClrStall>
 800dbae:	4603      	mov	r3, r0
 800dbb0:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800dbb2:	7bfb      	ldrb	r3, [r7, #15]
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	f000 f8ab 	bl	800dd10 <USBD_Get_USB_Status>
 800dbba:	4603      	mov	r3, r0
 800dbbc:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800dbbe:	7bbb      	ldrb	r3, [r7, #14]
}
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	3710      	adds	r7, #16
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	bd80      	pop	{r7, pc}

0800dbc8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dbc8:	b480      	push	{r7}
 800dbca:	b085      	sub	sp, #20
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	6078      	str	r0, [r7, #4]
 800dbd0:	460b      	mov	r3, r1
 800dbd2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800dbda:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800dbdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	da0b      	bge.n	800dbfc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800dbe4:	78fb      	ldrb	r3, [r7, #3]
 800dbe6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dbea:	68f9      	ldr	r1, [r7, #12]
 800dbec:	4613      	mov	r3, r2
 800dbee:	00db      	lsls	r3, r3, #3
 800dbf0:	1a9b      	subs	r3, r3, r2
 800dbf2:	009b      	lsls	r3, r3, #2
 800dbf4:	440b      	add	r3, r1
 800dbf6:	333e      	adds	r3, #62	; 0x3e
 800dbf8:	781b      	ldrb	r3, [r3, #0]
 800dbfa:	e00b      	b.n	800dc14 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800dbfc:	78fb      	ldrb	r3, [r7, #3]
 800dbfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dc02:	68f9      	ldr	r1, [r7, #12]
 800dc04:	4613      	mov	r3, r2
 800dc06:	00db      	lsls	r3, r3, #3
 800dc08:	1a9b      	subs	r3, r3, r2
 800dc0a:	009b      	lsls	r3, r3, #2
 800dc0c:	440b      	add	r3, r1
 800dc0e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800dc12:	781b      	ldrb	r3, [r3, #0]
  }
}
 800dc14:	4618      	mov	r0, r3
 800dc16:	3714      	adds	r7, #20
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1e:	4770      	bx	lr

0800dc20 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b084      	sub	sp, #16
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
 800dc28:	460b      	mov	r3, r1
 800dc2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc30:	2300      	movs	r3, #0
 800dc32:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800dc3a:	78fa      	ldrb	r2, [r7, #3]
 800dc3c:	4611      	mov	r1, r2
 800dc3e:	4618      	mov	r0, r3
 800dc40:	f7f6 fed5 	bl	80049ee <HAL_PCD_SetAddress>
 800dc44:	4603      	mov	r3, r0
 800dc46:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc48:	7bfb      	ldrb	r3, [r7, #15]
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	f000 f860 	bl	800dd10 <USBD_Get_USB_Status>
 800dc50:	4603      	mov	r3, r0
 800dc52:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800dc54:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc56:	4618      	mov	r0, r3
 800dc58:	3710      	adds	r7, #16
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	bd80      	pop	{r7, pc}

0800dc5e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800dc5e:	b580      	push	{r7, lr}
 800dc60:	b086      	sub	sp, #24
 800dc62:	af00      	add	r7, sp, #0
 800dc64:	60f8      	str	r0, [r7, #12]
 800dc66:	607a      	str	r2, [r7, #4]
 800dc68:	461a      	mov	r2, r3
 800dc6a:	460b      	mov	r3, r1
 800dc6c:	72fb      	strb	r3, [r7, #11]
 800dc6e:	4613      	mov	r3, r2
 800dc70:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc72:	2300      	movs	r3, #0
 800dc74:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc76:	2300      	movs	r3, #0
 800dc78:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800dc80:	893b      	ldrh	r3, [r7, #8]
 800dc82:	7af9      	ldrb	r1, [r7, #11]
 800dc84:	687a      	ldr	r2, [r7, #4]
 800dc86:	f7f6 ffec 	bl	8004c62 <HAL_PCD_EP_Transmit>
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800dc8e:	7dfb      	ldrb	r3, [r7, #23]
 800dc90:	4618      	mov	r0, r3
 800dc92:	f000 f83d 	bl	800dd10 <USBD_Get_USB_Status>
 800dc96:	4603      	mov	r3, r0
 800dc98:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800dc9a:	7dbb      	ldrb	r3, [r7, #22]
}
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	3718      	adds	r7, #24
 800dca0:	46bd      	mov	sp, r7
 800dca2:	bd80      	pop	{r7, pc}

0800dca4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b086      	sub	sp, #24
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	60f8      	str	r0, [r7, #12]
 800dcac:	607a      	str	r2, [r7, #4]
 800dcae:	461a      	mov	r2, r3
 800dcb0:	460b      	mov	r3, r1
 800dcb2:	72fb      	strb	r3, [r7, #11]
 800dcb4:	4613      	mov	r3, r2
 800dcb6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dcb8:	2300      	movs	r3, #0
 800dcba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800dcc6:	893b      	ldrh	r3, [r7, #8]
 800dcc8:	7af9      	ldrb	r1, [r7, #11]
 800dcca:	687a      	ldr	r2, [r7, #4]
 800dccc:	f7f6 ff66 	bl	8004b9c <HAL_PCD_EP_Receive>
 800dcd0:	4603      	mov	r3, r0
 800dcd2:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800dcd4:	7dfb      	ldrb	r3, [r7, #23]
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	f000 f81a 	bl	800dd10 <USBD_Get_USB_Status>
 800dcdc:	4603      	mov	r3, r0
 800dcde:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 800dce0:	7dbb      	ldrb	r3, [r7, #22]
}
 800dce2:	4618      	mov	r0, r3
 800dce4:	3718      	adds	r7, #24
 800dce6:	46bd      	mov	sp, r7
 800dce8:	bd80      	pop	{r7, pc}

0800dcea <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dcea:	b580      	push	{r7, lr}
 800dcec:	b082      	sub	sp, #8
 800dcee:	af00      	add	r7, sp, #0
 800dcf0:	6078      	str	r0, [r7, #4]
 800dcf2:	460b      	mov	r3, r1
 800dcf4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800dcfc:	78fa      	ldrb	r2, [r7, #3]
 800dcfe:	4611      	mov	r1, r2
 800dd00:	4618      	mov	r0, r3
 800dd02:	f7f6 ff96 	bl	8004c32 <HAL_PCD_EP_GetRxCount>
 800dd06:	4603      	mov	r3, r0
}
 800dd08:	4618      	mov	r0, r3
 800dd0a:	3708      	adds	r7, #8
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	bd80      	pop	{r7, pc}

0800dd10 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dd10:	b480      	push	{r7}
 800dd12:	b085      	sub	sp, #20
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	4603      	mov	r3, r0
 800dd18:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800dd1e:	79fb      	ldrb	r3, [r7, #7]
 800dd20:	2b03      	cmp	r3, #3
 800dd22:	d817      	bhi.n	800dd54 <USBD_Get_USB_Status+0x44>
 800dd24:	a201      	add	r2, pc, #4	; (adr r2, 800dd2c <USBD_Get_USB_Status+0x1c>)
 800dd26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd2a:	bf00      	nop
 800dd2c:	0800dd3d 	.word	0x0800dd3d
 800dd30:	0800dd43 	.word	0x0800dd43
 800dd34:	0800dd49 	.word	0x0800dd49
 800dd38:	0800dd4f 	.word	0x0800dd4f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	73fb      	strb	r3, [r7, #15]
    break;
 800dd40:	e00b      	b.n	800dd5a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dd42:	2302      	movs	r3, #2
 800dd44:	73fb      	strb	r3, [r7, #15]
    break;
 800dd46:	e008      	b.n	800dd5a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dd48:	2301      	movs	r3, #1
 800dd4a:	73fb      	strb	r3, [r7, #15]
    break;
 800dd4c:	e005      	b.n	800dd5a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dd4e:	2302      	movs	r3, #2
 800dd50:	73fb      	strb	r3, [r7, #15]
    break;
 800dd52:	e002      	b.n	800dd5a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800dd54:	2302      	movs	r3, #2
 800dd56:	73fb      	strb	r3, [r7, #15]
    break;
 800dd58:	bf00      	nop
  }
  return usb_status;
 800dd5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	3714      	adds	r7, #20
 800dd60:	46bd      	mov	sp, r7
 800dd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd66:	4770      	bx	lr

0800dd68 <__libc_init_array>:
 800dd68:	b570      	push	{r4, r5, r6, lr}
 800dd6a:	4e0d      	ldr	r6, [pc, #52]	; (800dda0 <__libc_init_array+0x38>)
 800dd6c:	4c0d      	ldr	r4, [pc, #52]	; (800dda4 <__libc_init_array+0x3c>)
 800dd6e:	1ba4      	subs	r4, r4, r6
 800dd70:	10a4      	asrs	r4, r4, #2
 800dd72:	2500      	movs	r5, #0
 800dd74:	42a5      	cmp	r5, r4
 800dd76:	d109      	bne.n	800dd8c <__libc_init_array+0x24>
 800dd78:	4e0b      	ldr	r6, [pc, #44]	; (800dda8 <__libc_init_array+0x40>)
 800dd7a:	4c0c      	ldr	r4, [pc, #48]	; (800ddac <__libc_init_array+0x44>)
 800dd7c:	f003 fd6e 	bl	801185c <_init>
 800dd80:	1ba4      	subs	r4, r4, r6
 800dd82:	10a4      	asrs	r4, r4, #2
 800dd84:	2500      	movs	r5, #0
 800dd86:	42a5      	cmp	r5, r4
 800dd88:	d105      	bne.n	800dd96 <__libc_init_array+0x2e>
 800dd8a:	bd70      	pop	{r4, r5, r6, pc}
 800dd8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800dd90:	4798      	blx	r3
 800dd92:	3501      	adds	r5, #1
 800dd94:	e7ee      	b.n	800dd74 <__libc_init_array+0xc>
 800dd96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800dd9a:	4798      	blx	r3
 800dd9c:	3501      	adds	r5, #1
 800dd9e:	e7f2      	b.n	800dd86 <__libc_init_array+0x1e>
 800dda0:	080122f8 	.word	0x080122f8
 800dda4:	080122f8 	.word	0x080122f8
 800dda8:	080122f8 	.word	0x080122f8
 800ddac:	080122fc 	.word	0x080122fc

0800ddb0 <malloc>:
 800ddb0:	4b02      	ldr	r3, [pc, #8]	; (800ddbc <malloc+0xc>)
 800ddb2:	4601      	mov	r1, r0
 800ddb4:	6818      	ldr	r0, [r3, #0]
 800ddb6:	f000 b86d 	b.w	800de94 <_malloc_r>
 800ddba:	bf00      	nop
 800ddbc:	20000184 	.word	0x20000184

0800ddc0 <free>:
 800ddc0:	4b02      	ldr	r3, [pc, #8]	; (800ddcc <free+0xc>)
 800ddc2:	4601      	mov	r1, r0
 800ddc4:	6818      	ldr	r0, [r3, #0]
 800ddc6:	f000 b817 	b.w	800ddf8 <_free_r>
 800ddca:	bf00      	nop
 800ddcc:	20000184 	.word	0x20000184

0800ddd0 <memcpy>:
 800ddd0:	b510      	push	{r4, lr}
 800ddd2:	1e43      	subs	r3, r0, #1
 800ddd4:	440a      	add	r2, r1
 800ddd6:	4291      	cmp	r1, r2
 800ddd8:	d100      	bne.n	800dddc <memcpy+0xc>
 800ddda:	bd10      	pop	{r4, pc}
 800dddc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dde0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dde4:	e7f7      	b.n	800ddd6 <memcpy+0x6>

0800dde6 <memset>:
 800dde6:	4402      	add	r2, r0
 800dde8:	4603      	mov	r3, r0
 800ddea:	4293      	cmp	r3, r2
 800ddec:	d100      	bne.n	800ddf0 <memset+0xa>
 800ddee:	4770      	bx	lr
 800ddf0:	f803 1b01 	strb.w	r1, [r3], #1
 800ddf4:	e7f9      	b.n	800ddea <memset+0x4>
	...

0800ddf8 <_free_r>:
 800ddf8:	b538      	push	{r3, r4, r5, lr}
 800ddfa:	4605      	mov	r5, r0
 800ddfc:	2900      	cmp	r1, #0
 800ddfe:	d045      	beq.n	800de8c <_free_r+0x94>
 800de00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de04:	1f0c      	subs	r4, r1, #4
 800de06:	2b00      	cmp	r3, #0
 800de08:	bfb8      	it	lt
 800de0a:	18e4      	addlt	r4, r4, r3
 800de0c:	f002 ff50 	bl	8010cb0 <__malloc_lock>
 800de10:	4a1f      	ldr	r2, [pc, #124]	; (800de90 <_free_r+0x98>)
 800de12:	6813      	ldr	r3, [r2, #0]
 800de14:	4610      	mov	r0, r2
 800de16:	b933      	cbnz	r3, 800de26 <_free_r+0x2e>
 800de18:	6063      	str	r3, [r4, #4]
 800de1a:	6014      	str	r4, [r2, #0]
 800de1c:	4628      	mov	r0, r5
 800de1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de22:	f002 bf46 	b.w	8010cb2 <__malloc_unlock>
 800de26:	42a3      	cmp	r3, r4
 800de28:	d90c      	bls.n	800de44 <_free_r+0x4c>
 800de2a:	6821      	ldr	r1, [r4, #0]
 800de2c:	1862      	adds	r2, r4, r1
 800de2e:	4293      	cmp	r3, r2
 800de30:	bf04      	itt	eq
 800de32:	681a      	ldreq	r2, [r3, #0]
 800de34:	685b      	ldreq	r3, [r3, #4]
 800de36:	6063      	str	r3, [r4, #4]
 800de38:	bf04      	itt	eq
 800de3a:	1852      	addeq	r2, r2, r1
 800de3c:	6022      	streq	r2, [r4, #0]
 800de3e:	6004      	str	r4, [r0, #0]
 800de40:	e7ec      	b.n	800de1c <_free_r+0x24>
 800de42:	4613      	mov	r3, r2
 800de44:	685a      	ldr	r2, [r3, #4]
 800de46:	b10a      	cbz	r2, 800de4c <_free_r+0x54>
 800de48:	42a2      	cmp	r2, r4
 800de4a:	d9fa      	bls.n	800de42 <_free_r+0x4a>
 800de4c:	6819      	ldr	r1, [r3, #0]
 800de4e:	1858      	adds	r0, r3, r1
 800de50:	42a0      	cmp	r0, r4
 800de52:	d10b      	bne.n	800de6c <_free_r+0x74>
 800de54:	6820      	ldr	r0, [r4, #0]
 800de56:	4401      	add	r1, r0
 800de58:	1858      	adds	r0, r3, r1
 800de5a:	4282      	cmp	r2, r0
 800de5c:	6019      	str	r1, [r3, #0]
 800de5e:	d1dd      	bne.n	800de1c <_free_r+0x24>
 800de60:	6810      	ldr	r0, [r2, #0]
 800de62:	6852      	ldr	r2, [r2, #4]
 800de64:	605a      	str	r2, [r3, #4]
 800de66:	4401      	add	r1, r0
 800de68:	6019      	str	r1, [r3, #0]
 800de6a:	e7d7      	b.n	800de1c <_free_r+0x24>
 800de6c:	d902      	bls.n	800de74 <_free_r+0x7c>
 800de6e:	230c      	movs	r3, #12
 800de70:	602b      	str	r3, [r5, #0]
 800de72:	e7d3      	b.n	800de1c <_free_r+0x24>
 800de74:	6820      	ldr	r0, [r4, #0]
 800de76:	1821      	adds	r1, r4, r0
 800de78:	428a      	cmp	r2, r1
 800de7a:	bf04      	itt	eq
 800de7c:	6811      	ldreq	r1, [r2, #0]
 800de7e:	6852      	ldreq	r2, [r2, #4]
 800de80:	6062      	str	r2, [r4, #4]
 800de82:	bf04      	itt	eq
 800de84:	1809      	addeq	r1, r1, r0
 800de86:	6021      	streq	r1, [r4, #0]
 800de88:	605c      	str	r4, [r3, #4]
 800de8a:	e7c7      	b.n	800de1c <_free_r+0x24>
 800de8c:	bd38      	pop	{r3, r4, r5, pc}
 800de8e:	bf00      	nop
 800de90:	20000994 	.word	0x20000994

0800de94 <_malloc_r>:
 800de94:	b570      	push	{r4, r5, r6, lr}
 800de96:	1ccd      	adds	r5, r1, #3
 800de98:	f025 0503 	bic.w	r5, r5, #3
 800de9c:	3508      	adds	r5, #8
 800de9e:	2d0c      	cmp	r5, #12
 800dea0:	bf38      	it	cc
 800dea2:	250c      	movcc	r5, #12
 800dea4:	2d00      	cmp	r5, #0
 800dea6:	4606      	mov	r6, r0
 800dea8:	db01      	blt.n	800deae <_malloc_r+0x1a>
 800deaa:	42a9      	cmp	r1, r5
 800deac:	d903      	bls.n	800deb6 <_malloc_r+0x22>
 800deae:	230c      	movs	r3, #12
 800deb0:	6033      	str	r3, [r6, #0]
 800deb2:	2000      	movs	r0, #0
 800deb4:	bd70      	pop	{r4, r5, r6, pc}
 800deb6:	f002 fefb 	bl	8010cb0 <__malloc_lock>
 800deba:	4a21      	ldr	r2, [pc, #132]	; (800df40 <_malloc_r+0xac>)
 800debc:	6814      	ldr	r4, [r2, #0]
 800debe:	4621      	mov	r1, r4
 800dec0:	b991      	cbnz	r1, 800dee8 <_malloc_r+0x54>
 800dec2:	4c20      	ldr	r4, [pc, #128]	; (800df44 <_malloc_r+0xb0>)
 800dec4:	6823      	ldr	r3, [r4, #0]
 800dec6:	b91b      	cbnz	r3, 800ded0 <_malloc_r+0x3c>
 800dec8:	4630      	mov	r0, r6
 800deca:	f000 fe7b 	bl	800ebc4 <_sbrk_r>
 800dece:	6020      	str	r0, [r4, #0]
 800ded0:	4629      	mov	r1, r5
 800ded2:	4630      	mov	r0, r6
 800ded4:	f000 fe76 	bl	800ebc4 <_sbrk_r>
 800ded8:	1c43      	adds	r3, r0, #1
 800deda:	d124      	bne.n	800df26 <_malloc_r+0x92>
 800dedc:	230c      	movs	r3, #12
 800dede:	6033      	str	r3, [r6, #0]
 800dee0:	4630      	mov	r0, r6
 800dee2:	f002 fee6 	bl	8010cb2 <__malloc_unlock>
 800dee6:	e7e4      	b.n	800deb2 <_malloc_r+0x1e>
 800dee8:	680b      	ldr	r3, [r1, #0]
 800deea:	1b5b      	subs	r3, r3, r5
 800deec:	d418      	bmi.n	800df20 <_malloc_r+0x8c>
 800deee:	2b0b      	cmp	r3, #11
 800def0:	d90f      	bls.n	800df12 <_malloc_r+0x7e>
 800def2:	600b      	str	r3, [r1, #0]
 800def4:	50cd      	str	r5, [r1, r3]
 800def6:	18cc      	adds	r4, r1, r3
 800def8:	4630      	mov	r0, r6
 800defa:	f002 feda 	bl	8010cb2 <__malloc_unlock>
 800defe:	f104 000b 	add.w	r0, r4, #11
 800df02:	1d23      	adds	r3, r4, #4
 800df04:	f020 0007 	bic.w	r0, r0, #7
 800df08:	1ac3      	subs	r3, r0, r3
 800df0a:	d0d3      	beq.n	800deb4 <_malloc_r+0x20>
 800df0c:	425a      	negs	r2, r3
 800df0e:	50e2      	str	r2, [r4, r3]
 800df10:	e7d0      	b.n	800deb4 <_malloc_r+0x20>
 800df12:	428c      	cmp	r4, r1
 800df14:	684b      	ldr	r3, [r1, #4]
 800df16:	bf16      	itet	ne
 800df18:	6063      	strne	r3, [r4, #4]
 800df1a:	6013      	streq	r3, [r2, #0]
 800df1c:	460c      	movne	r4, r1
 800df1e:	e7eb      	b.n	800def8 <_malloc_r+0x64>
 800df20:	460c      	mov	r4, r1
 800df22:	6849      	ldr	r1, [r1, #4]
 800df24:	e7cc      	b.n	800dec0 <_malloc_r+0x2c>
 800df26:	1cc4      	adds	r4, r0, #3
 800df28:	f024 0403 	bic.w	r4, r4, #3
 800df2c:	42a0      	cmp	r0, r4
 800df2e:	d005      	beq.n	800df3c <_malloc_r+0xa8>
 800df30:	1a21      	subs	r1, r4, r0
 800df32:	4630      	mov	r0, r6
 800df34:	f000 fe46 	bl	800ebc4 <_sbrk_r>
 800df38:	3001      	adds	r0, #1
 800df3a:	d0cf      	beq.n	800dedc <_malloc_r+0x48>
 800df3c:	6025      	str	r5, [r4, #0]
 800df3e:	e7db      	b.n	800def8 <_malloc_r+0x64>
 800df40:	20000994 	.word	0x20000994
 800df44:	20000998 	.word	0x20000998

0800df48 <__cvt>:
 800df48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800df4c:	ec55 4b10 	vmov	r4, r5, d0
 800df50:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800df52:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800df56:	2d00      	cmp	r5, #0
 800df58:	460e      	mov	r6, r1
 800df5a:	4691      	mov	r9, r2
 800df5c:	4619      	mov	r1, r3
 800df5e:	bfb8      	it	lt
 800df60:	4622      	movlt	r2, r4
 800df62:	462b      	mov	r3, r5
 800df64:	f027 0720 	bic.w	r7, r7, #32
 800df68:	bfbb      	ittet	lt
 800df6a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800df6e:	461d      	movlt	r5, r3
 800df70:	2300      	movge	r3, #0
 800df72:	232d      	movlt	r3, #45	; 0x2d
 800df74:	bfb8      	it	lt
 800df76:	4614      	movlt	r4, r2
 800df78:	2f46      	cmp	r7, #70	; 0x46
 800df7a:	700b      	strb	r3, [r1, #0]
 800df7c:	d004      	beq.n	800df88 <__cvt+0x40>
 800df7e:	2f45      	cmp	r7, #69	; 0x45
 800df80:	d100      	bne.n	800df84 <__cvt+0x3c>
 800df82:	3601      	adds	r6, #1
 800df84:	2102      	movs	r1, #2
 800df86:	e000      	b.n	800df8a <__cvt+0x42>
 800df88:	2103      	movs	r1, #3
 800df8a:	ab03      	add	r3, sp, #12
 800df8c:	9301      	str	r3, [sp, #4]
 800df8e:	ab02      	add	r3, sp, #8
 800df90:	9300      	str	r3, [sp, #0]
 800df92:	4632      	mov	r2, r6
 800df94:	4653      	mov	r3, sl
 800df96:	ec45 4b10 	vmov	d0, r4, r5
 800df9a:	f001 fd85 	bl	800faa8 <_dtoa_r>
 800df9e:	2f47      	cmp	r7, #71	; 0x47
 800dfa0:	4680      	mov	r8, r0
 800dfa2:	d102      	bne.n	800dfaa <__cvt+0x62>
 800dfa4:	f019 0f01 	tst.w	r9, #1
 800dfa8:	d026      	beq.n	800dff8 <__cvt+0xb0>
 800dfaa:	2f46      	cmp	r7, #70	; 0x46
 800dfac:	eb08 0906 	add.w	r9, r8, r6
 800dfb0:	d111      	bne.n	800dfd6 <__cvt+0x8e>
 800dfb2:	f898 3000 	ldrb.w	r3, [r8]
 800dfb6:	2b30      	cmp	r3, #48	; 0x30
 800dfb8:	d10a      	bne.n	800dfd0 <__cvt+0x88>
 800dfba:	2200      	movs	r2, #0
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	4620      	mov	r0, r4
 800dfc0:	4629      	mov	r1, r5
 800dfc2:	f7f2 fd81 	bl	8000ac8 <__aeabi_dcmpeq>
 800dfc6:	b918      	cbnz	r0, 800dfd0 <__cvt+0x88>
 800dfc8:	f1c6 0601 	rsb	r6, r6, #1
 800dfcc:	f8ca 6000 	str.w	r6, [sl]
 800dfd0:	f8da 3000 	ldr.w	r3, [sl]
 800dfd4:	4499      	add	r9, r3
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	2300      	movs	r3, #0
 800dfda:	4620      	mov	r0, r4
 800dfdc:	4629      	mov	r1, r5
 800dfde:	f7f2 fd73 	bl	8000ac8 <__aeabi_dcmpeq>
 800dfe2:	b938      	cbnz	r0, 800dff4 <__cvt+0xac>
 800dfe4:	2230      	movs	r2, #48	; 0x30
 800dfe6:	9b03      	ldr	r3, [sp, #12]
 800dfe8:	454b      	cmp	r3, r9
 800dfea:	d205      	bcs.n	800dff8 <__cvt+0xb0>
 800dfec:	1c59      	adds	r1, r3, #1
 800dfee:	9103      	str	r1, [sp, #12]
 800dff0:	701a      	strb	r2, [r3, #0]
 800dff2:	e7f8      	b.n	800dfe6 <__cvt+0x9e>
 800dff4:	f8cd 900c 	str.w	r9, [sp, #12]
 800dff8:	9b03      	ldr	r3, [sp, #12]
 800dffa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dffc:	eba3 0308 	sub.w	r3, r3, r8
 800e000:	4640      	mov	r0, r8
 800e002:	6013      	str	r3, [r2, #0]
 800e004:	b004      	add	sp, #16
 800e006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800e00a <__exponent>:
 800e00a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e00c:	2900      	cmp	r1, #0
 800e00e:	4604      	mov	r4, r0
 800e010:	bfba      	itte	lt
 800e012:	4249      	neglt	r1, r1
 800e014:	232d      	movlt	r3, #45	; 0x2d
 800e016:	232b      	movge	r3, #43	; 0x2b
 800e018:	2909      	cmp	r1, #9
 800e01a:	f804 2b02 	strb.w	r2, [r4], #2
 800e01e:	7043      	strb	r3, [r0, #1]
 800e020:	dd20      	ble.n	800e064 <__exponent+0x5a>
 800e022:	f10d 0307 	add.w	r3, sp, #7
 800e026:	461f      	mov	r7, r3
 800e028:	260a      	movs	r6, #10
 800e02a:	fb91 f5f6 	sdiv	r5, r1, r6
 800e02e:	fb06 1115 	mls	r1, r6, r5, r1
 800e032:	3130      	adds	r1, #48	; 0x30
 800e034:	2d09      	cmp	r5, #9
 800e036:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e03a:	f103 32ff 	add.w	r2, r3, #4294967295
 800e03e:	4629      	mov	r1, r5
 800e040:	dc09      	bgt.n	800e056 <__exponent+0x4c>
 800e042:	3130      	adds	r1, #48	; 0x30
 800e044:	3b02      	subs	r3, #2
 800e046:	f802 1c01 	strb.w	r1, [r2, #-1]
 800e04a:	42bb      	cmp	r3, r7
 800e04c:	4622      	mov	r2, r4
 800e04e:	d304      	bcc.n	800e05a <__exponent+0x50>
 800e050:	1a10      	subs	r0, r2, r0
 800e052:	b003      	add	sp, #12
 800e054:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e056:	4613      	mov	r3, r2
 800e058:	e7e7      	b.n	800e02a <__exponent+0x20>
 800e05a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e05e:	f804 2b01 	strb.w	r2, [r4], #1
 800e062:	e7f2      	b.n	800e04a <__exponent+0x40>
 800e064:	2330      	movs	r3, #48	; 0x30
 800e066:	4419      	add	r1, r3
 800e068:	7083      	strb	r3, [r0, #2]
 800e06a:	1d02      	adds	r2, r0, #4
 800e06c:	70c1      	strb	r1, [r0, #3]
 800e06e:	e7ef      	b.n	800e050 <__exponent+0x46>

0800e070 <_printf_float>:
 800e070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e074:	b08d      	sub	sp, #52	; 0x34
 800e076:	460c      	mov	r4, r1
 800e078:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800e07c:	4616      	mov	r6, r2
 800e07e:	461f      	mov	r7, r3
 800e080:	4605      	mov	r5, r0
 800e082:	f002 fdf5 	bl	8010c70 <_localeconv_r>
 800e086:	6803      	ldr	r3, [r0, #0]
 800e088:	9304      	str	r3, [sp, #16]
 800e08a:	4618      	mov	r0, r3
 800e08c:	f7f2 f8a0 	bl	80001d0 <strlen>
 800e090:	2300      	movs	r3, #0
 800e092:	930a      	str	r3, [sp, #40]	; 0x28
 800e094:	f8d8 3000 	ldr.w	r3, [r8]
 800e098:	9005      	str	r0, [sp, #20]
 800e09a:	3307      	adds	r3, #7
 800e09c:	f023 0307 	bic.w	r3, r3, #7
 800e0a0:	f103 0208 	add.w	r2, r3, #8
 800e0a4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e0a8:	f8d4 b000 	ldr.w	fp, [r4]
 800e0ac:	f8c8 2000 	str.w	r2, [r8]
 800e0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0b4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e0b8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e0bc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e0c0:	9307      	str	r3, [sp, #28]
 800e0c2:	f8cd 8018 	str.w	r8, [sp, #24]
 800e0c6:	f04f 32ff 	mov.w	r2, #4294967295
 800e0ca:	4ba7      	ldr	r3, [pc, #668]	; (800e368 <_printf_float+0x2f8>)
 800e0cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e0d0:	f7f2 fd2c 	bl	8000b2c <__aeabi_dcmpun>
 800e0d4:	bb70      	cbnz	r0, 800e134 <_printf_float+0xc4>
 800e0d6:	f04f 32ff 	mov.w	r2, #4294967295
 800e0da:	4ba3      	ldr	r3, [pc, #652]	; (800e368 <_printf_float+0x2f8>)
 800e0dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e0e0:	f7f2 fd06 	bl	8000af0 <__aeabi_dcmple>
 800e0e4:	bb30      	cbnz	r0, 800e134 <_printf_float+0xc4>
 800e0e6:	2200      	movs	r2, #0
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	4640      	mov	r0, r8
 800e0ec:	4649      	mov	r1, r9
 800e0ee:	f7f2 fcf5 	bl	8000adc <__aeabi_dcmplt>
 800e0f2:	b110      	cbz	r0, 800e0fa <_printf_float+0x8a>
 800e0f4:	232d      	movs	r3, #45	; 0x2d
 800e0f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e0fa:	4a9c      	ldr	r2, [pc, #624]	; (800e36c <_printf_float+0x2fc>)
 800e0fc:	4b9c      	ldr	r3, [pc, #624]	; (800e370 <_printf_float+0x300>)
 800e0fe:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800e102:	bf8c      	ite	hi
 800e104:	4690      	movhi	r8, r2
 800e106:	4698      	movls	r8, r3
 800e108:	2303      	movs	r3, #3
 800e10a:	f02b 0204 	bic.w	r2, fp, #4
 800e10e:	6123      	str	r3, [r4, #16]
 800e110:	6022      	str	r2, [r4, #0]
 800e112:	f04f 0900 	mov.w	r9, #0
 800e116:	9700      	str	r7, [sp, #0]
 800e118:	4633      	mov	r3, r6
 800e11a:	aa0b      	add	r2, sp, #44	; 0x2c
 800e11c:	4621      	mov	r1, r4
 800e11e:	4628      	mov	r0, r5
 800e120:	f000 f9e6 	bl	800e4f0 <_printf_common>
 800e124:	3001      	adds	r0, #1
 800e126:	f040 808d 	bne.w	800e244 <_printf_float+0x1d4>
 800e12a:	f04f 30ff 	mov.w	r0, #4294967295
 800e12e:	b00d      	add	sp, #52	; 0x34
 800e130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e134:	4642      	mov	r2, r8
 800e136:	464b      	mov	r3, r9
 800e138:	4640      	mov	r0, r8
 800e13a:	4649      	mov	r1, r9
 800e13c:	f7f2 fcf6 	bl	8000b2c <__aeabi_dcmpun>
 800e140:	b110      	cbz	r0, 800e148 <_printf_float+0xd8>
 800e142:	4a8c      	ldr	r2, [pc, #560]	; (800e374 <_printf_float+0x304>)
 800e144:	4b8c      	ldr	r3, [pc, #560]	; (800e378 <_printf_float+0x308>)
 800e146:	e7da      	b.n	800e0fe <_printf_float+0x8e>
 800e148:	6861      	ldr	r1, [r4, #4]
 800e14a:	1c4b      	adds	r3, r1, #1
 800e14c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800e150:	a80a      	add	r0, sp, #40	; 0x28
 800e152:	d13e      	bne.n	800e1d2 <_printf_float+0x162>
 800e154:	2306      	movs	r3, #6
 800e156:	6063      	str	r3, [r4, #4]
 800e158:	2300      	movs	r3, #0
 800e15a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800e15e:	ab09      	add	r3, sp, #36	; 0x24
 800e160:	9300      	str	r3, [sp, #0]
 800e162:	ec49 8b10 	vmov	d0, r8, r9
 800e166:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e16a:	6022      	str	r2, [r4, #0]
 800e16c:	f8cd a004 	str.w	sl, [sp, #4]
 800e170:	6861      	ldr	r1, [r4, #4]
 800e172:	4628      	mov	r0, r5
 800e174:	f7ff fee8 	bl	800df48 <__cvt>
 800e178:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800e17c:	2b47      	cmp	r3, #71	; 0x47
 800e17e:	4680      	mov	r8, r0
 800e180:	d109      	bne.n	800e196 <_printf_float+0x126>
 800e182:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e184:	1cd8      	adds	r0, r3, #3
 800e186:	db02      	blt.n	800e18e <_printf_float+0x11e>
 800e188:	6862      	ldr	r2, [r4, #4]
 800e18a:	4293      	cmp	r3, r2
 800e18c:	dd47      	ble.n	800e21e <_printf_float+0x1ae>
 800e18e:	f1aa 0a02 	sub.w	sl, sl, #2
 800e192:	fa5f fa8a 	uxtb.w	sl, sl
 800e196:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800e19a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e19c:	d824      	bhi.n	800e1e8 <_printf_float+0x178>
 800e19e:	3901      	subs	r1, #1
 800e1a0:	4652      	mov	r2, sl
 800e1a2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e1a6:	9109      	str	r1, [sp, #36]	; 0x24
 800e1a8:	f7ff ff2f 	bl	800e00a <__exponent>
 800e1ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e1ae:	1813      	adds	r3, r2, r0
 800e1b0:	2a01      	cmp	r2, #1
 800e1b2:	4681      	mov	r9, r0
 800e1b4:	6123      	str	r3, [r4, #16]
 800e1b6:	dc02      	bgt.n	800e1be <_printf_float+0x14e>
 800e1b8:	6822      	ldr	r2, [r4, #0]
 800e1ba:	07d1      	lsls	r1, r2, #31
 800e1bc:	d501      	bpl.n	800e1c2 <_printf_float+0x152>
 800e1be:	3301      	adds	r3, #1
 800e1c0:	6123      	str	r3, [r4, #16]
 800e1c2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d0a5      	beq.n	800e116 <_printf_float+0xa6>
 800e1ca:	232d      	movs	r3, #45	; 0x2d
 800e1cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e1d0:	e7a1      	b.n	800e116 <_printf_float+0xa6>
 800e1d2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800e1d6:	f000 8177 	beq.w	800e4c8 <_printf_float+0x458>
 800e1da:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800e1de:	d1bb      	bne.n	800e158 <_printf_float+0xe8>
 800e1e0:	2900      	cmp	r1, #0
 800e1e2:	d1b9      	bne.n	800e158 <_printf_float+0xe8>
 800e1e4:	2301      	movs	r3, #1
 800e1e6:	e7b6      	b.n	800e156 <_printf_float+0xe6>
 800e1e8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800e1ec:	d119      	bne.n	800e222 <_printf_float+0x1b2>
 800e1ee:	2900      	cmp	r1, #0
 800e1f0:	6863      	ldr	r3, [r4, #4]
 800e1f2:	dd0c      	ble.n	800e20e <_printf_float+0x19e>
 800e1f4:	6121      	str	r1, [r4, #16]
 800e1f6:	b913      	cbnz	r3, 800e1fe <_printf_float+0x18e>
 800e1f8:	6822      	ldr	r2, [r4, #0]
 800e1fa:	07d2      	lsls	r2, r2, #31
 800e1fc:	d502      	bpl.n	800e204 <_printf_float+0x194>
 800e1fe:	3301      	adds	r3, #1
 800e200:	440b      	add	r3, r1
 800e202:	6123      	str	r3, [r4, #16]
 800e204:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e206:	65a3      	str	r3, [r4, #88]	; 0x58
 800e208:	f04f 0900 	mov.w	r9, #0
 800e20c:	e7d9      	b.n	800e1c2 <_printf_float+0x152>
 800e20e:	b913      	cbnz	r3, 800e216 <_printf_float+0x1a6>
 800e210:	6822      	ldr	r2, [r4, #0]
 800e212:	07d0      	lsls	r0, r2, #31
 800e214:	d501      	bpl.n	800e21a <_printf_float+0x1aa>
 800e216:	3302      	adds	r3, #2
 800e218:	e7f3      	b.n	800e202 <_printf_float+0x192>
 800e21a:	2301      	movs	r3, #1
 800e21c:	e7f1      	b.n	800e202 <_printf_float+0x192>
 800e21e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800e222:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e226:	4293      	cmp	r3, r2
 800e228:	db05      	blt.n	800e236 <_printf_float+0x1c6>
 800e22a:	6822      	ldr	r2, [r4, #0]
 800e22c:	6123      	str	r3, [r4, #16]
 800e22e:	07d1      	lsls	r1, r2, #31
 800e230:	d5e8      	bpl.n	800e204 <_printf_float+0x194>
 800e232:	3301      	adds	r3, #1
 800e234:	e7e5      	b.n	800e202 <_printf_float+0x192>
 800e236:	2b00      	cmp	r3, #0
 800e238:	bfd4      	ite	le
 800e23a:	f1c3 0302 	rsble	r3, r3, #2
 800e23e:	2301      	movgt	r3, #1
 800e240:	4413      	add	r3, r2
 800e242:	e7de      	b.n	800e202 <_printf_float+0x192>
 800e244:	6823      	ldr	r3, [r4, #0]
 800e246:	055a      	lsls	r2, r3, #21
 800e248:	d407      	bmi.n	800e25a <_printf_float+0x1ea>
 800e24a:	6923      	ldr	r3, [r4, #16]
 800e24c:	4642      	mov	r2, r8
 800e24e:	4631      	mov	r1, r6
 800e250:	4628      	mov	r0, r5
 800e252:	47b8      	blx	r7
 800e254:	3001      	adds	r0, #1
 800e256:	d12b      	bne.n	800e2b0 <_printf_float+0x240>
 800e258:	e767      	b.n	800e12a <_printf_float+0xba>
 800e25a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800e25e:	f240 80dc 	bls.w	800e41a <_printf_float+0x3aa>
 800e262:	2200      	movs	r2, #0
 800e264:	2300      	movs	r3, #0
 800e266:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e26a:	f7f2 fc2d 	bl	8000ac8 <__aeabi_dcmpeq>
 800e26e:	2800      	cmp	r0, #0
 800e270:	d033      	beq.n	800e2da <_printf_float+0x26a>
 800e272:	2301      	movs	r3, #1
 800e274:	4a41      	ldr	r2, [pc, #260]	; (800e37c <_printf_float+0x30c>)
 800e276:	4631      	mov	r1, r6
 800e278:	4628      	mov	r0, r5
 800e27a:	47b8      	blx	r7
 800e27c:	3001      	adds	r0, #1
 800e27e:	f43f af54 	beq.w	800e12a <_printf_float+0xba>
 800e282:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e286:	429a      	cmp	r2, r3
 800e288:	db02      	blt.n	800e290 <_printf_float+0x220>
 800e28a:	6823      	ldr	r3, [r4, #0]
 800e28c:	07d8      	lsls	r0, r3, #31
 800e28e:	d50f      	bpl.n	800e2b0 <_printf_float+0x240>
 800e290:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e294:	4631      	mov	r1, r6
 800e296:	4628      	mov	r0, r5
 800e298:	47b8      	blx	r7
 800e29a:	3001      	adds	r0, #1
 800e29c:	f43f af45 	beq.w	800e12a <_printf_float+0xba>
 800e2a0:	f04f 0800 	mov.w	r8, #0
 800e2a4:	f104 091a 	add.w	r9, r4, #26
 800e2a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e2aa:	3b01      	subs	r3, #1
 800e2ac:	4543      	cmp	r3, r8
 800e2ae:	dc09      	bgt.n	800e2c4 <_printf_float+0x254>
 800e2b0:	6823      	ldr	r3, [r4, #0]
 800e2b2:	079b      	lsls	r3, r3, #30
 800e2b4:	f100 8103 	bmi.w	800e4be <_printf_float+0x44e>
 800e2b8:	68e0      	ldr	r0, [r4, #12]
 800e2ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e2bc:	4298      	cmp	r0, r3
 800e2be:	bfb8      	it	lt
 800e2c0:	4618      	movlt	r0, r3
 800e2c2:	e734      	b.n	800e12e <_printf_float+0xbe>
 800e2c4:	2301      	movs	r3, #1
 800e2c6:	464a      	mov	r2, r9
 800e2c8:	4631      	mov	r1, r6
 800e2ca:	4628      	mov	r0, r5
 800e2cc:	47b8      	blx	r7
 800e2ce:	3001      	adds	r0, #1
 800e2d0:	f43f af2b 	beq.w	800e12a <_printf_float+0xba>
 800e2d4:	f108 0801 	add.w	r8, r8, #1
 800e2d8:	e7e6      	b.n	800e2a8 <_printf_float+0x238>
 800e2da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	dc2b      	bgt.n	800e338 <_printf_float+0x2c8>
 800e2e0:	2301      	movs	r3, #1
 800e2e2:	4a26      	ldr	r2, [pc, #152]	; (800e37c <_printf_float+0x30c>)
 800e2e4:	4631      	mov	r1, r6
 800e2e6:	4628      	mov	r0, r5
 800e2e8:	47b8      	blx	r7
 800e2ea:	3001      	adds	r0, #1
 800e2ec:	f43f af1d 	beq.w	800e12a <_printf_float+0xba>
 800e2f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2f2:	b923      	cbnz	r3, 800e2fe <_printf_float+0x28e>
 800e2f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e2f6:	b913      	cbnz	r3, 800e2fe <_printf_float+0x28e>
 800e2f8:	6823      	ldr	r3, [r4, #0]
 800e2fa:	07d9      	lsls	r1, r3, #31
 800e2fc:	d5d8      	bpl.n	800e2b0 <_printf_float+0x240>
 800e2fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e302:	4631      	mov	r1, r6
 800e304:	4628      	mov	r0, r5
 800e306:	47b8      	blx	r7
 800e308:	3001      	adds	r0, #1
 800e30a:	f43f af0e 	beq.w	800e12a <_printf_float+0xba>
 800e30e:	f04f 0900 	mov.w	r9, #0
 800e312:	f104 0a1a 	add.w	sl, r4, #26
 800e316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e318:	425b      	negs	r3, r3
 800e31a:	454b      	cmp	r3, r9
 800e31c:	dc01      	bgt.n	800e322 <_printf_float+0x2b2>
 800e31e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e320:	e794      	b.n	800e24c <_printf_float+0x1dc>
 800e322:	2301      	movs	r3, #1
 800e324:	4652      	mov	r2, sl
 800e326:	4631      	mov	r1, r6
 800e328:	4628      	mov	r0, r5
 800e32a:	47b8      	blx	r7
 800e32c:	3001      	adds	r0, #1
 800e32e:	f43f aefc 	beq.w	800e12a <_printf_float+0xba>
 800e332:	f109 0901 	add.w	r9, r9, #1
 800e336:	e7ee      	b.n	800e316 <_printf_float+0x2a6>
 800e338:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e33a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e33c:	429a      	cmp	r2, r3
 800e33e:	bfa8      	it	ge
 800e340:	461a      	movge	r2, r3
 800e342:	2a00      	cmp	r2, #0
 800e344:	4691      	mov	r9, r2
 800e346:	dd07      	ble.n	800e358 <_printf_float+0x2e8>
 800e348:	4613      	mov	r3, r2
 800e34a:	4631      	mov	r1, r6
 800e34c:	4642      	mov	r2, r8
 800e34e:	4628      	mov	r0, r5
 800e350:	47b8      	blx	r7
 800e352:	3001      	adds	r0, #1
 800e354:	f43f aee9 	beq.w	800e12a <_printf_float+0xba>
 800e358:	f104 031a 	add.w	r3, r4, #26
 800e35c:	f04f 0b00 	mov.w	fp, #0
 800e360:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e364:	9306      	str	r3, [sp, #24]
 800e366:	e015      	b.n	800e394 <_printf_float+0x324>
 800e368:	7fefffff 	.word	0x7fefffff
 800e36c:	08012040 	.word	0x08012040
 800e370:	0801203c 	.word	0x0801203c
 800e374:	08012048 	.word	0x08012048
 800e378:	08012044 	.word	0x08012044
 800e37c:	0801204c 	.word	0x0801204c
 800e380:	2301      	movs	r3, #1
 800e382:	9a06      	ldr	r2, [sp, #24]
 800e384:	4631      	mov	r1, r6
 800e386:	4628      	mov	r0, r5
 800e388:	47b8      	blx	r7
 800e38a:	3001      	adds	r0, #1
 800e38c:	f43f aecd 	beq.w	800e12a <_printf_float+0xba>
 800e390:	f10b 0b01 	add.w	fp, fp, #1
 800e394:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800e398:	ebaa 0309 	sub.w	r3, sl, r9
 800e39c:	455b      	cmp	r3, fp
 800e39e:	dcef      	bgt.n	800e380 <_printf_float+0x310>
 800e3a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e3a4:	429a      	cmp	r2, r3
 800e3a6:	44d0      	add	r8, sl
 800e3a8:	db15      	blt.n	800e3d6 <_printf_float+0x366>
 800e3aa:	6823      	ldr	r3, [r4, #0]
 800e3ac:	07da      	lsls	r2, r3, #31
 800e3ae:	d412      	bmi.n	800e3d6 <_printf_float+0x366>
 800e3b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e3b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e3b4:	eba3 020a 	sub.w	r2, r3, sl
 800e3b8:	eba3 0a01 	sub.w	sl, r3, r1
 800e3bc:	4592      	cmp	sl, r2
 800e3be:	bfa8      	it	ge
 800e3c0:	4692      	movge	sl, r2
 800e3c2:	f1ba 0f00 	cmp.w	sl, #0
 800e3c6:	dc0e      	bgt.n	800e3e6 <_printf_float+0x376>
 800e3c8:	f04f 0800 	mov.w	r8, #0
 800e3cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e3d0:	f104 091a 	add.w	r9, r4, #26
 800e3d4:	e019      	b.n	800e40a <_printf_float+0x39a>
 800e3d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e3da:	4631      	mov	r1, r6
 800e3dc:	4628      	mov	r0, r5
 800e3de:	47b8      	blx	r7
 800e3e0:	3001      	adds	r0, #1
 800e3e2:	d1e5      	bne.n	800e3b0 <_printf_float+0x340>
 800e3e4:	e6a1      	b.n	800e12a <_printf_float+0xba>
 800e3e6:	4653      	mov	r3, sl
 800e3e8:	4642      	mov	r2, r8
 800e3ea:	4631      	mov	r1, r6
 800e3ec:	4628      	mov	r0, r5
 800e3ee:	47b8      	blx	r7
 800e3f0:	3001      	adds	r0, #1
 800e3f2:	d1e9      	bne.n	800e3c8 <_printf_float+0x358>
 800e3f4:	e699      	b.n	800e12a <_printf_float+0xba>
 800e3f6:	2301      	movs	r3, #1
 800e3f8:	464a      	mov	r2, r9
 800e3fa:	4631      	mov	r1, r6
 800e3fc:	4628      	mov	r0, r5
 800e3fe:	47b8      	blx	r7
 800e400:	3001      	adds	r0, #1
 800e402:	f43f ae92 	beq.w	800e12a <_printf_float+0xba>
 800e406:	f108 0801 	add.w	r8, r8, #1
 800e40a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e40e:	1a9b      	subs	r3, r3, r2
 800e410:	eba3 030a 	sub.w	r3, r3, sl
 800e414:	4543      	cmp	r3, r8
 800e416:	dcee      	bgt.n	800e3f6 <_printf_float+0x386>
 800e418:	e74a      	b.n	800e2b0 <_printf_float+0x240>
 800e41a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e41c:	2a01      	cmp	r2, #1
 800e41e:	dc01      	bgt.n	800e424 <_printf_float+0x3b4>
 800e420:	07db      	lsls	r3, r3, #31
 800e422:	d53a      	bpl.n	800e49a <_printf_float+0x42a>
 800e424:	2301      	movs	r3, #1
 800e426:	4642      	mov	r2, r8
 800e428:	4631      	mov	r1, r6
 800e42a:	4628      	mov	r0, r5
 800e42c:	47b8      	blx	r7
 800e42e:	3001      	adds	r0, #1
 800e430:	f43f ae7b 	beq.w	800e12a <_printf_float+0xba>
 800e434:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e438:	4631      	mov	r1, r6
 800e43a:	4628      	mov	r0, r5
 800e43c:	47b8      	blx	r7
 800e43e:	3001      	adds	r0, #1
 800e440:	f108 0801 	add.w	r8, r8, #1
 800e444:	f43f ae71 	beq.w	800e12a <_printf_float+0xba>
 800e448:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e44a:	2200      	movs	r2, #0
 800e44c:	f103 3aff 	add.w	sl, r3, #4294967295
 800e450:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e454:	2300      	movs	r3, #0
 800e456:	f7f2 fb37 	bl	8000ac8 <__aeabi_dcmpeq>
 800e45a:	b9c8      	cbnz	r0, 800e490 <_printf_float+0x420>
 800e45c:	4653      	mov	r3, sl
 800e45e:	4642      	mov	r2, r8
 800e460:	4631      	mov	r1, r6
 800e462:	4628      	mov	r0, r5
 800e464:	47b8      	blx	r7
 800e466:	3001      	adds	r0, #1
 800e468:	d10e      	bne.n	800e488 <_printf_float+0x418>
 800e46a:	e65e      	b.n	800e12a <_printf_float+0xba>
 800e46c:	2301      	movs	r3, #1
 800e46e:	4652      	mov	r2, sl
 800e470:	4631      	mov	r1, r6
 800e472:	4628      	mov	r0, r5
 800e474:	47b8      	blx	r7
 800e476:	3001      	adds	r0, #1
 800e478:	f43f ae57 	beq.w	800e12a <_printf_float+0xba>
 800e47c:	f108 0801 	add.w	r8, r8, #1
 800e480:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e482:	3b01      	subs	r3, #1
 800e484:	4543      	cmp	r3, r8
 800e486:	dcf1      	bgt.n	800e46c <_printf_float+0x3fc>
 800e488:	464b      	mov	r3, r9
 800e48a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e48e:	e6de      	b.n	800e24e <_printf_float+0x1de>
 800e490:	f04f 0800 	mov.w	r8, #0
 800e494:	f104 0a1a 	add.w	sl, r4, #26
 800e498:	e7f2      	b.n	800e480 <_printf_float+0x410>
 800e49a:	2301      	movs	r3, #1
 800e49c:	e7df      	b.n	800e45e <_printf_float+0x3ee>
 800e49e:	2301      	movs	r3, #1
 800e4a0:	464a      	mov	r2, r9
 800e4a2:	4631      	mov	r1, r6
 800e4a4:	4628      	mov	r0, r5
 800e4a6:	47b8      	blx	r7
 800e4a8:	3001      	adds	r0, #1
 800e4aa:	f43f ae3e 	beq.w	800e12a <_printf_float+0xba>
 800e4ae:	f108 0801 	add.w	r8, r8, #1
 800e4b2:	68e3      	ldr	r3, [r4, #12]
 800e4b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e4b6:	1a9b      	subs	r3, r3, r2
 800e4b8:	4543      	cmp	r3, r8
 800e4ba:	dcf0      	bgt.n	800e49e <_printf_float+0x42e>
 800e4bc:	e6fc      	b.n	800e2b8 <_printf_float+0x248>
 800e4be:	f04f 0800 	mov.w	r8, #0
 800e4c2:	f104 0919 	add.w	r9, r4, #25
 800e4c6:	e7f4      	b.n	800e4b2 <_printf_float+0x442>
 800e4c8:	2900      	cmp	r1, #0
 800e4ca:	f43f ae8b 	beq.w	800e1e4 <_printf_float+0x174>
 800e4ce:	2300      	movs	r3, #0
 800e4d0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800e4d4:	ab09      	add	r3, sp, #36	; 0x24
 800e4d6:	9300      	str	r3, [sp, #0]
 800e4d8:	ec49 8b10 	vmov	d0, r8, r9
 800e4dc:	6022      	str	r2, [r4, #0]
 800e4de:	f8cd a004 	str.w	sl, [sp, #4]
 800e4e2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e4e6:	4628      	mov	r0, r5
 800e4e8:	f7ff fd2e 	bl	800df48 <__cvt>
 800e4ec:	4680      	mov	r8, r0
 800e4ee:	e648      	b.n	800e182 <_printf_float+0x112>

0800e4f0 <_printf_common>:
 800e4f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4f4:	4691      	mov	r9, r2
 800e4f6:	461f      	mov	r7, r3
 800e4f8:	688a      	ldr	r2, [r1, #8]
 800e4fa:	690b      	ldr	r3, [r1, #16]
 800e4fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e500:	4293      	cmp	r3, r2
 800e502:	bfb8      	it	lt
 800e504:	4613      	movlt	r3, r2
 800e506:	f8c9 3000 	str.w	r3, [r9]
 800e50a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e50e:	4606      	mov	r6, r0
 800e510:	460c      	mov	r4, r1
 800e512:	b112      	cbz	r2, 800e51a <_printf_common+0x2a>
 800e514:	3301      	adds	r3, #1
 800e516:	f8c9 3000 	str.w	r3, [r9]
 800e51a:	6823      	ldr	r3, [r4, #0]
 800e51c:	0699      	lsls	r1, r3, #26
 800e51e:	bf42      	ittt	mi
 800e520:	f8d9 3000 	ldrmi.w	r3, [r9]
 800e524:	3302      	addmi	r3, #2
 800e526:	f8c9 3000 	strmi.w	r3, [r9]
 800e52a:	6825      	ldr	r5, [r4, #0]
 800e52c:	f015 0506 	ands.w	r5, r5, #6
 800e530:	d107      	bne.n	800e542 <_printf_common+0x52>
 800e532:	f104 0a19 	add.w	sl, r4, #25
 800e536:	68e3      	ldr	r3, [r4, #12]
 800e538:	f8d9 2000 	ldr.w	r2, [r9]
 800e53c:	1a9b      	subs	r3, r3, r2
 800e53e:	42ab      	cmp	r3, r5
 800e540:	dc28      	bgt.n	800e594 <_printf_common+0xa4>
 800e542:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800e546:	6822      	ldr	r2, [r4, #0]
 800e548:	3300      	adds	r3, #0
 800e54a:	bf18      	it	ne
 800e54c:	2301      	movne	r3, #1
 800e54e:	0692      	lsls	r2, r2, #26
 800e550:	d42d      	bmi.n	800e5ae <_printf_common+0xbe>
 800e552:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e556:	4639      	mov	r1, r7
 800e558:	4630      	mov	r0, r6
 800e55a:	47c0      	blx	r8
 800e55c:	3001      	adds	r0, #1
 800e55e:	d020      	beq.n	800e5a2 <_printf_common+0xb2>
 800e560:	6823      	ldr	r3, [r4, #0]
 800e562:	68e5      	ldr	r5, [r4, #12]
 800e564:	f8d9 2000 	ldr.w	r2, [r9]
 800e568:	f003 0306 	and.w	r3, r3, #6
 800e56c:	2b04      	cmp	r3, #4
 800e56e:	bf08      	it	eq
 800e570:	1aad      	subeq	r5, r5, r2
 800e572:	68a3      	ldr	r3, [r4, #8]
 800e574:	6922      	ldr	r2, [r4, #16]
 800e576:	bf0c      	ite	eq
 800e578:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e57c:	2500      	movne	r5, #0
 800e57e:	4293      	cmp	r3, r2
 800e580:	bfc4      	itt	gt
 800e582:	1a9b      	subgt	r3, r3, r2
 800e584:	18ed      	addgt	r5, r5, r3
 800e586:	f04f 0900 	mov.w	r9, #0
 800e58a:	341a      	adds	r4, #26
 800e58c:	454d      	cmp	r5, r9
 800e58e:	d11a      	bne.n	800e5c6 <_printf_common+0xd6>
 800e590:	2000      	movs	r0, #0
 800e592:	e008      	b.n	800e5a6 <_printf_common+0xb6>
 800e594:	2301      	movs	r3, #1
 800e596:	4652      	mov	r2, sl
 800e598:	4639      	mov	r1, r7
 800e59a:	4630      	mov	r0, r6
 800e59c:	47c0      	blx	r8
 800e59e:	3001      	adds	r0, #1
 800e5a0:	d103      	bne.n	800e5aa <_printf_common+0xba>
 800e5a2:	f04f 30ff 	mov.w	r0, #4294967295
 800e5a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5aa:	3501      	adds	r5, #1
 800e5ac:	e7c3      	b.n	800e536 <_printf_common+0x46>
 800e5ae:	18e1      	adds	r1, r4, r3
 800e5b0:	1c5a      	adds	r2, r3, #1
 800e5b2:	2030      	movs	r0, #48	; 0x30
 800e5b4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e5b8:	4422      	add	r2, r4
 800e5ba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e5be:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e5c2:	3302      	adds	r3, #2
 800e5c4:	e7c5      	b.n	800e552 <_printf_common+0x62>
 800e5c6:	2301      	movs	r3, #1
 800e5c8:	4622      	mov	r2, r4
 800e5ca:	4639      	mov	r1, r7
 800e5cc:	4630      	mov	r0, r6
 800e5ce:	47c0      	blx	r8
 800e5d0:	3001      	adds	r0, #1
 800e5d2:	d0e6      	beq.n	800e5a2 <_printf_common+0xb2>
 800e5d4:	f109 0901 	add.w	r9, r9, #1
 800e5d8:	e7d8      	b.n	800e58c <_printf_common+0x9c>
	...

0800e5dc <_printf_i>:
 800e5dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e5e0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800e5e4:	460c      	mov	r4, r1
 800e5e6:	7e09      	ldrb	r1, [r1, #24]
 800e5e8:	b085      	sub	sp, #20
 800e5ea:	296e      	cmp	r1, #110	; 0x6e
 800e5ec:	4617      	mov	r7, r2
 800e5ee:	4606      	mov	r6, r0
 800e5f0:	4698      	mov	r8, r3
 800e5f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e5f4:	f000 80b3 	beq.w	800e75e <_printf_i+0x182>
 800e5f8:	d822      	bhi.n	800e640 <_printf_i+0x64>
 800e5fa:	2963      	cmp	r1, #99	; 0x63
 800e5fc:	d036      	beq.n	800e66c <_printf_i+0x90>
 800e5fe:	d80a      	bhi.n	800e616 <_printf_i+0x3a>
 800e600:	2900      	cmp	r1, #0
 800e602:	f000 80b9 	beq.w	800e778 <_printf_i+0x19c>
 800e606:	2958      	cmp	r1, #88	; 0x58
 800e608:	f000 8083 	beq.w	800e712 <_printf_i+0x136>
 800e60c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e610:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800e614:	e032      	b.n	800e67c <_printf_i+0xa0>
 800e616:	2964      	cmp	r1, #100	; 0x64
 800e618:	d001      	beq.n	800e61e <_printf_i+0x42>
 800e61a:	2969      	cmp	r1, #105	; 0x69
 800e61c:	d1f6      	bne.n	800e60c <_printf_i+0x30>
 800e61e:	6820      	ldr	r0, [r4, #0]
 800e620:	6813      	ldr	r3, [r2, #0]
 800e622:	0605      	lsls	r5, r0, #24
 800e624:	f103 0104 	add.w	r1, r3, #4
 800e628:	d52a      	bpl.n	800e680 <_printf_i+0xa4>
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	6011      	str	r1, [r2, #0]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	da03      	bge.n	800e63a <_printf_i+0x5e>
 800e632:	222d      	movs	r2, #45	; 0x2d
 800e634:	425b      	negs	r3, r3
 800e636:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800e63a:	486f      	ldr	r0, [pc, #444]	; (800e7f8 <_printf_i+0x21c>)
 800e63c:	220a      	movs	r2, #10
 800e63e:	e039      	b.n	800e6b4 <_printf_i+0xd8>
 800e640:	2973      	cmp	r1, #115	; 0x73
 800e642:	f000 809d 	beq.w	800e780 <_printf_i+0x1a4>
 800e646:	d808      	bhi.n	800e65a <_printf_i+0x7e>
 800e648:	296f      	cmp	r1, #111	; 0x6f
 800e64a:	d020      	beq.n	800e68e <_printf_i+0xb2>
 800e64c:	2970      	cmp	r1, #112	; 0x70
 800e64e:	d1dd      	bne.n	800e60c <_printf_i+0x30>
 800e650:	6823      	ldr	r3, [r4, #0]
 800e652:	f043 0320 	orr.w	r3, r3, #32
 800e656:	6023      	str	r3, [r4, #0]
 800e658:	e003      	b.n	800e662 <_printf_i+0x86>
 800e65a:	2975      	cmp	r1, #117	; 0x75
 800e65c:	d017      	beq.n	800e68e <_printf_i+0xb2>
 800e65e:	2978      	cmp	r1, #120	; 0x78
 800e660:	d1d4      	bne.n	800e60c <_printf_i+0x30>
 800e662:	2378      	movs	r3, #120	; 0x78
 800e664:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e668:	4864      	ldr	r0, [pc, #400]	; (800e7fc <_printf_i+0x220>)
 800e66a:	e055      	b.n	800e718 <_printf_i+0x13c>
 800e66c:	6813      	ldr	r3, [r2, #0]
 800e66e:	1d19      	adds	r1, r3, #4
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	6011      	str	r1, [r2, #0]
 800e674:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e678:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e67c:	2301      	movs	r3, #1
 800e67e:	e08c      	b.n	800e79a <_printf_i+0x1be>
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	6011      	str	r1, [r2, #0]
 800e684:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e688:	bf18      	it	ne
 800e68a:	b21b      	sxthne	r3, r3
 800e68c:	e7cf      	b.n	800e62e <_printf_i+0x52>
 800e68e:	6813      	ldr	r3, [r2, #0]
 800e690:	6825      	ldr	r5, [r4, #0]
 800e692:	1d18      	adds	r0, r3, #4
 800e694:	6010      	str	r0, [r2, #0]
 800e696:	0628      	lsls	r0, r5, #24
 800e698:	d501      	bpl.n	800e69e <_printf_i+0xc2>
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	e002      	b.n	800e6a4 <_printf_i+0xc8>
 800e69e:	0668      	lsls	r0, r5, #25
 800e6a0:	d5fb      	bpl.n	800e69a <_printf_i+0xbe>
 800e6a2:	881b      	ldrh	r3, [r3, #0]
 800e6a4:	4854      	ldr	r0, [pc, #336]	; (800e7f8 <_printf_i+0x21c>)
 800e6a6:	296f      	cmp	r1, #111	; 0x6f
 800e6a8:	bf14      	ite	ne
 800e6aa:	220a      	movne	r2, #10
 800e6ac:	2208      	moveq	r2, #8
 800e6ae:	2100      	movs	r1, #0
 800e6b0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e6b4:	6865      	ldr	r5, [r4, #4]
 800e6b6:	60a5      	str	r5, [r4, #8]
 800e6b8:	2d00      	cmp	r5, #0
 800e6ba:	f2c0 8095 	blt.w	800e7e8 <_printf_i+0x20c>
 800e6be:	6821      	ldr	r1, [r4, #0]
 800e6c0:	f021 0104 	bic.w	r1, r1, #4
 800e6c4:	6021      	str	r1, [r4, #0]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d13d      	bne.n	800e746 <_printf_i+0x16a>
 800e6ca:	2d00      	cmp	r5, #0
 800e6cc:	f040 808e 	bne.w	800e7ec <_printf_i+0x210>
 800e6d0:	4665      	mov	r5, ip
 800e6d2:	2a08      	cmp	r2, #8
 800e6d4:	d10b      	bne.n	800e6ee <_printf_i+0x112>
 800e6d6:	6823      	ldr	r3, [r4, #0]
 800e6d8:	07db      	lsls	r3, r3, #31
 800e6da:	d508      	bpl.n	800e6ee <_printf_i+0x112>
 800e6dc:	6923      	ldr	r3, [r4, #16]
 800e6de:	6862      	ldr	r2, [r4, #4]
 800e6e0:	429a      	cmp	r2, r3
 800e6e2:	bfde      	ittt	le
 800e6e4:	2330      	movle	r3, #48	; 0x30
 800e6e6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e6ea:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e6ee:	ebac 0305 	sub.w	r3, ip, r5
 800e6f2:	6123      	str	r3, [r4, #16]
 800e6f4:	f8cd 8000 	str.w	r8, [sp]
 800e6f8:	463b      	mov	r3, r7
 800e6fa:	aa03      	add	r2, sp, #12
 800e6fc:	4621      	mov	r1, r4
 800e6fe:	4630      	mov	r0, r6
 800e700:	f7ff fef6 	bl	800e4f0 <_printf_common>
 800e704:	3001      	adds	r0, #1
 800e706:	d14d      	bne.n	800e7a4 <_printf_i+0x1c8>
 800e708:	f04f 30ff 	mov.w	r0, #4294967295
 800e70c:	b005      	add	sp, #20
 800e70e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e712:	4839      	ldr	r0, [pc, #228]	; (800e7f8 <_printf_i+0x21c>)
 800e714:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800e718:	6813      	ldr	r3, [r2, #0]
 800e71a:	6821      	ldr	r1, [r4, #0]
 800e71c:	1d1d      	adds	r5, r3, #4
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	6015      	str	r5, [r2, #0]
 800e722:	060a      	lsls	r2, r1, #24
 800e724:	d50b      	bpl.n	800e73e <_printf_i+0x162>
 800e726:	07ca      	lsls	r2, r1, #31
 800e728:	bf44      	itt	mi
 800e72a:	f041 0120 	orrmi.w	r1, r1, #32
 800e72e:	6021      	strmi	r1, [r4, #0]
 800e730:	b91b      	cbnz	r3, 800e73a <_printf_i+0x15e>
 800e732:	6822      	ldr	r2, [r4, #0]
 800e734:	f022 0220 	bic.w	r2, r2, #32
 800e738:	6022      	str	r2, [r4, #0]
 800e73a:	2210      	movs	r2, #16
 800e73c:	e7b7      	b.n	800e6ae <_printf_i+0xd2>
 800e73e:	064d      	lsls	r5, r1, #25
 800e740:	bf48      	it	mi
 800e742:	b29b      	uxthmi	r3, r3
 800e744:	e7ef      	b.n	800e726 <_printf_i+0x14a>
 800e746:	4665      	mov	r5, ip
 800e748:	fbb3 f1f2 	udiv	r1, r3, r2
 800e74c:	fb02 3311 	mls	r3, r2, r1, r3
 800e750:	5cc3      	ldrb	r3, [r0, r3]
 800e752:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800e756:	460b      	mov	r3, r1
 800e758:	2900      	cmp	r1, #0
 800e75a:	d1f5      	bne.n	800e748 <_printf_i+0x16c>
 800e75c:	e7b9      	b.n	800e6d2 <_printf_i+0xf6>
 800e75e:	6813      	ldr	r3, [r2, #0]
 800e760:	6825      	ldr	r5, [r4, #0]
 800e762:	6961      	ldr	r1, [r4, #20]
 800e764:	1d18      	adds	r0, r3, #4
 800e766:	6010      	str	r0, [r2, #0]
 800e768:	0628      	lsls	r0, r5, #24
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	d501      	bpl.n	800e772 <_printf_i+0x196>
 800e76e:	6019      	str	r1, [r3, #0]
 800e770:	e002      	b.n	800e778 <_printf_i+0x19c>
 800e772:	066a      	lsls	r2, r5, #25
 800e774:	d5fb      	bpl.n	800e76e <_printf_i+0x192>
 800e776:	8019      	strh	r1, [r3, #0]
 800e778:	2300      	movs	r3, #0
 800e77a:	6123      	str	r3, [r4, #16]
 800e77c:	4665      	mov	r5, ip
 800e77e:	e7b9      	b.n	800e6f4 <_printf_i+0x118>
 800e780:	6813      	ldr	r3, [r2, #0]
 800e782:	1d19      	adds	r1, r3, #4
 800e784:	6011      	str	r1, [r2, #0]
 800e786:	681d      	ldr	r5, [r3, #0]
 800e788:	6862      	ldr	r2, [r4, #4]
 800e78a:	2100      	movs	r1, #0
 800e78c:	4628      	mov	r0, r5
 800e78e:	f7f1 fd27 	bl	80001e0 <memchr>
 800e792:	b108      	cbz	r0, 800e798 <_printf_i+0x1bc>
 800e794:	1b40      	subs	r0, r0, r5
 800e796:	6060      	str	r0, [r4, #4]
 800e798:	6863      	ldr	r3, [r4, #4]
 800e79a:	6123      	str	r3, [r4, #16]
 800e79c:	2300      	movs	r3, #0
 800e79e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e7a2:	e7a7      	b.n	800e6f4 <_printf_i+0x118>
 800e7a4:	6923      	ldr	r3, [r4, #16]
 800e7a6:	462a      	mov	r2, r5
 800e7a8:	4639      	mov	r1, r7
 800e7aa:	4630      	mov	r0, r6
 800e7ac:	47c0      	blx	r8
 800e7ae:	3001      	adds	r0, #1
 800e7b0:	d0aa      	beq.n	800e708 <_printf_i+0x12c>
 800e7b2:	6823      	ldr	r3, [r4, #0]
 800e7b4:	079b      	lsls	r3, r3, #30
 800e7b6:	d413      	bmi.n	800e7e0 <_printf_i+0x204>
 800e7b8:	68e0      	ldr	r0, [r4, #12]
 800e7ba:	9b03      	ldr	r3, [sp, #12]
 800e7bc:	4298      	cmp	r0, r3
 800e7be:	bfb8      	it	lt
 800e7c0:	4618      	movlt	r0, r3
 800e7c2:	e7a3      	b.n	800e70c <_printf_i+0x130>
 800e7c4:	2301      	movs	r3, #1
 800e7c6:	464a      	mov	r2, r9
 800e7c8:	4639      	mov	r1, r7
 800e7ca:	4630      	mov	r0, r6
 800e7cc:	47c0      	blx	r8
 800e7ce:	3001      	adds	r0, #1
 800e7d0:	d09a      	beq.n	800e708 <_printf_i+0x12c>
 800e7d2:	3501      	adds	r5, #1
 800e7d4:	68e3      	ldr	r3, [r4, #12]
 800e7d6:	9a03      	ldr	r2, [sp, #12]
 800e7d8:	1a9b      	subs	r3, r3, r2
 800e7da:	42ab      	cmp	r3, r5
 800e7dc:	dcf2      	bgt.n	800e7c4 <_printf_i+0x1e8>
 800e7de:	e7eb      	b.n	800e7b8 <_printf_i+0x1dc>
 800e7e0:	2500      	movs	r5, #0
 800e7e2:	f104 0919 	add.w	r9, r4, #25
 800e7e6:	e7f5      	b.n	800e7d4 <_printf_i+0x1f8>
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d1ac      	bne.n	800e746 <_printf_i+0x16a>
 800e7ec:	7803      	ldrb	r3, [r0, #0]
 800e7ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e7f2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e7f6:	e76c      	b.n	800e6d2 <_printf_i+0xf6>
 800e7f8:	0801204e 	.word	0x0801204e
 800e7fc:	0801205f 	.word	0x0801205f

0800e800 <_scanf_float>:
 800e800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e804:	469a      	mov	sl, r3
 800e806:	688b      	ldr	r3, [r1, #8]
 800e808:	4616      	mov	r6, r2
 800e80a:	1e5a      	subs	r2, r3, #1
 800e80c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e810:	b087      	sub	sp, #28
 800e812:	bf83      	ittte	hi
 800e814:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800e818:	189b      	addhi	r3, r3, r2
 800e81a:	9301      	strhi	r3, [sp, #4]
 800e81c:	2300      	movls	r3, #0
 800e81e:	bf86      	itte	hi
 800e820:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e824:	608b      	strhi	r3, [r1, #8]
 800e826:	9301      	strls	r3, [sp, #4]
 800e828:	680b      	ldr	r3, [r1, #0]
 800e82a:	4688      	mov	r8, r1
 800e82c:	f04f 0b00 	mov.w	fp, #0
 800e830:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800e834:	f848 3b1c 	str.w	r3, [r8], #28
 800e838:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800e83c:	4607      	mov	r7, r0
 800e83e:	460c      	mov	r4, r1
 800e840:	4645      	mov	r5, r8
 800e842:	465a      	mov	r2, fp
 800e844:	46d9      	mov	r9, fp
 800e846:	f8cd b008 	str.w	fp, [sp, #8]
 800e84a:	68a1      	ldr	r1, [r4, #8]
 800e84c:	b181      	cbz	r1, 800e870 <_scanf_float+0x70>
 800e84e:	6833      	ldr	r3, [r6, #0]
 800e850:	781b      	ldrb	r3, [r3, #0]
 800e852:	2b49      	cmp	r3, #73	; 0x49
 800e854:	d071      	beq.n	800e93a <_scanf_float+0x13a>
 800e856:	d84d      	bhi.n	800e8f4 <_scanf_float+0xf4>
 800e858:	2b39      	cmp	r3, #57	; 0x39
 800e85a:	d840      	bhi.n	800e8de <_scanf_float+0xde>
 800e85c:	2b31      	cmp	r3, #49	; 0x31
 800e85e:	f080 8088 	bcs.w	800e972 <_scanf_float+0x172>
 800e862:	2b2d      	cmp	r3, #45	; 0x2d
 800e864:	f000 8090 	beq.w	800e988 <_scanf_float+0x188>
 800e868:	d815      	bhi.n	800e896 <_scanf_float+0x96>
 800e86a:	2b2b      	cmp	r3, #43	; 0x2b
 800e86c:	f000 808c 	beq.w	800e988 <_scanf_float+0x188>
 800e870:	f1b9 0f00 	cmp.w	r9, #0
 800e874:	d003      	beq.n	800e87e <_scanf_float+0x7e>
 800e876:	6823      	ldr	r3, [r4, #0]
 800e878:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e87c:	6023      	str	r3, [r4, #0]
 800e87e:	3a01      	subs	r2, #1
 800e880:	2a01      	cmp	r2, #1
 800e882:	f200 80ea 	bhi.w	800ea5a <_scanf_float+0x25a>
 800e886:	4545      	cmp	r5, r8
 800e888:	f200 80dc 	bhi.w	800ea44 <_scanf_float+0x244>
 800e88c:	2601      	movs	r6, #1
 800e88e:	4630      	mov	r0, r6
 800e890:	b007      	add	sp, #28
 800e892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e896:	2b2e      	cmp	r3, #46	; 0x2e
 800e898:	f000 809f 	beq.w	800e9da <_scanf_float+0x1da>
 800e89c:	2b30      	cmp	r3, #48	; 0x30
 800e89e:	d1e7      	bne.n	800e870 <_scanf_float+0x70>
 800e8a0:	6820      	ldr	r0, [r4, #0]
 800e8a2:	f410 7f80 	tst.w	r0, #256	; 0x100
 800e8a6:	d064      	beq.n	800e972 <_scanf_float+0x172>
 800e8a8:	9b01      	ldr	r3, [sp, #4]
 800e8aa:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800e8ae:	6020      	str	r0, [r4, #0]
 800e8b0:	f109 0901 	add.w	r9, r9, #1
 800e8b4:	b11b      	cbz	r3, 800e8be <_scanf_float+0xbe>
 800e8b6:	3b01      	subs	r3, #1
 800e8b8:	3101      	adds	r1, #1
 800e8ba:	9301      	str	r3, [sp, #4]
 800e8bc:	60a1      	str	r1, [r4, #8]
 800e8be:	68a3      	ldr	r3, [r4, #8]
 800e8c0:	3b01      	subs	r3, #1
 800e8c2:	60a3      	str	r3, [r4, #8]
 800e8c4:	6923      	ldr	r3, [r4, #16]
 800e8c6:	3301      	adds	r3, #1
 800e8c8:	6123      	str	r3, [r4, #16]
 800e8ca:	6873      	ldr	r3, [r6, #4]
 800e8cc:	3b01      	subs	r3, #1
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	6073      	str	r3, [r6, #4]
 800e8d2:	f340 80ac 	ble.w	800ea2e <_scanf_float+0x22e>
 800e8d6:	6833      	ldr	r3, [r6, #0]
 800e8d8:	3301      	adds	r3, #1
 800e8da:	6033      	str	r3, [r6, #0]
 800e8dc:	e7b5      	b.n	800e84a <_scanf_float+0x4a>
 800e8de:	2b45      	cmp	r3, #69	; 0x45
 800e8e0:	f000 8085 	beq.w	800e9ee <_scanf_float+0x1ee>
 800e8e4:	2b46      	cmp	r3, #70	; 0x46
 800e8e6:	d06a      	beq.n	800e9be <_scanf_float+0x1be>
 800e8e8:	2b41      	cmp	r3, #65	; 0x41
 800e8ea:	d1c1      	bne.n	800e870 <_scanf_float+0x70>
 800e8ec:	2a01      	cmp	r2, #1
 800e8ee:	d1bf      	bne.n	800e870 <_scanf_float+0x70>
 800e8f0:	2202      	movs	r2, #2
 800e8f2:	e046      	b.n	800e982 <_scanf_float+0x182>
 800e8f4:	2b65      	cmp	r3, #101	; 0x65
 800e8f6:	d07a      	beq.n	800e9ee <_scanf_float+0x1ee>
 800e8f8:	d818      	bhi.n	800e92c <_scanf_float+0x12c>
 800e8fa:	2b54      	cmp	r3, #84	; 0x54
 800e8fc:	d066      	beq.n	800e9cc <_scanf_float+0x1cc>
 800e8fe:	d811      	bhi.n	800e924 <_scanf_float+0x124>
 800e900:	2b4e      	cmp	r3, #78	; 0x4e
 800e902:	d1b5      	bne.n	800e870 <_scanf_float+0x70>
 800e904:	2a00      	cmp	r2, #0
 800e906:	d146      	bne.n	800e996 <_scanf_float+0x196>
 800e908:	f1b9 0f00 	cmp.w	r9, #0
 800e90c:	d145      	bne.n	800e99a <_scanf_float+0x19a>
 800e90e:	6821      	ldr	r1, [r4, #0]
 800e910:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800e914:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800e918:	d13f      	bne.n	800e99a <_scanf_float+0x19a>
 800e91a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800e91e:	6021      	str	r1, [r4, #0]
 800e920:	2201      	movs	r2, #1
 800e922:	e02e      	b.n	800e982 <_scanf_float+0x182>
 800e924:	2b59      	cmp	r3, #89	; 0x59
 800e926:	d01e      	beq.n	800e966 <_scanf_float+0x166>
 800e928:	2b61      	cmp	r3, #97	; 0x61
 800e92a:	e7de      	b.n	800e8ea <_scanf_float+0xea>
 800e92c:	2b6e      	cmp	r3, #110	; 0x6e
 800e92e:	d0e9      	beq.n	800e904 <_scanf_float+0x104>
 800e930:	d815      	bhi.n	800e95e <_scanf_float+0x15e>
 800e932:	2b66      	cmp	r3, #102	; 0x66
 800e934:	d043      	beq.n	800e9be <_scanf_float+0x1be>
 800e936:	2b69      	cmp	r3, #105	; 0x69
 800e938:	d19a      	bne.n	800e870 <_scanf_float+0x70>
 800e93a:	f1bb 0f00 	cmp.w	fp, #0
 800e93e:	d138      	bne.n	800e9b2 <_scanf_float+0x1b2>
 800e940:	f1b9 0f00 	cmp.w	r9, #0
 800e944:	d197      	bne.n	800e876 <_scanf_float+0x76>
 800e946:	6821      	ldr	r1, [r4, #0]
 800e948:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800e94c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800e950:	d195      	bne.n	800e87e <_scanf_float+0x7e>
 800e952:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800e956:	6021      	str	r1, [r4, #0]
 800e958:	f04f 0b01 	mov.w	fp, #1
 800e95c:	e011      	b.n	800e982 <_scanf_float+0x182>
 800e95e:	2b74      	cmp	r3, #116	; 0x74
 800e960:	d034      	beq.n	800e9cc <_scanf_float+0x1cc>
 800e962:	2b79      	cmp	r3, #121	; 0x79
 800e964:	d184      	bne.n	800e870 <_scanf_float+0x70>
 800e966:	f1bb 0f07 	cmp.w	fp, #7
 800e96a:	d181      	bne.n	800e870 <_scanf_float+0x70>
 800e96c:	f04f 0b08 	mov.w	fp, #8
 800e970:	e007      	b.n	800e982 <_scanf_float+0x182>
 800e972:	eb12 0f0b 	cmn.w	r2, fp
 800e976:	f47f af7b 	bne.w	800e870 <_scanf_float+0x70>
 800e97a:	6821      	ldr	r1, [r4, #0]
 800e97c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800e980:	6021      	str	r1, [r4, #0]
 800e982:	702b      	strb	r3, [r5, #0]
 800e984:	3501      	adds	r5, #1
 800e986:	e79a      	b.n	800e8be <_scanf_float+0xbe>
 800e988:	6821      	ldr	r1, [r4, #0]
 800e98a:	0608      	lsls	r0, r1, #24
 800e98c:	f57f af70 	bpl.w	800e870 <_scanf_float+0x70>
 800e990:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800e994:	e7f4      	b.n	800e980 <_scanf_float+0x180>
 800e996:	2a02      	cmp	r2, #2
 800e998:	d047      	beq.n	800ea2a <_scanf_float+0x22a>
 800e99a:	f1bb 0f01 	cmp.w	fp, #1
 800e99e:	d003      	beq.n	800e9a8 <_scanf_float+0x1a8>
 800e9a0:	f1bb 0f04 	cmp.w	fp, #4
 800e9a4:	f47f af64 	bne.w	800e870 <_scanf_float+0x70>
 800e9a8:	f10b 0b01 	add.w	fp, fp, #1
 800e9ac:	fa5f fb8b 	uxtb.w	fp, fp
 800e9b0:	e7e7      	b.n	800e982 <_scanf_float+0x182>
 800e9b2:	f1bb 0f03 	cmp.w	fp, #3
 800e9b6:	d0f7      	beq.n	800e9a8 <_scanf_float+0x1a8>
 800e9b8:	f1bb 0f05 	cmp.w	fp, #5
 800e9bc:	e7f2      	b.n	800e9a4 <_scanf_float+0x1a4>
 800e9be:	f1bb 0f02 	cmp.w	fp, #2
 800e9c2:	f47f af55 	bne.w	800e870 <_scanf_float+0x70>
 800e9c6:	f04f 0b03 	mov.w	fp, #3
 800e9ca:	e7da      	b.n	800e982 <_scanf_float+0x182>
 800e9cc:	f1bb 0f06 	cmp.w	fp, #6
 800e9d0:	f47f af4e 	bne.w	800e870 <_scanf_float+0x70>
 800e9d4:	f04f 0b07 	mov.w	fp, #7
 800e9d8:	e7d3      	b.n	800e982 <_scanf_float+0x182>
 800e9da:	6821      	ldr	r1, [r4, #0]
 800e9dc:	0588      	lsls	r0, r1, #22
 800e9de:	f57f af47 	bpl.w	800e870 <_scanf_float+0x70>
 800e9e2:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800e9e6:	6021      	str	r1, [r4, #0]
 800e9e8:	f8cd 9008 	str.w	r9, [sp, #8]
 800e9ec:	e7c9      	b.n	800e982 <_scanf_float+0x182>
 800e9ee:	6821      	ldr	r1, [r4, #0]
 800e9f0:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800e9f4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800e9f8:	d006      	beq.n	800ea08 <_scanf_float+0x208>
 800e9fa:	0548      	lsls	r0, r1, #21
 800e9fc:	f57f af38 	bpl.w	800e870 <_scanf_float+0x70>
 800ea00:	f1b9 0f00 	cmp.w	r9, #0
 800ea04:	f43f af3b 	beq.w	800e87e <_scanf_float+0x7e>
 800ea08:	0588      	lsls	r0, r1, #22
 800ea0a:	bf58      	it	pl
 800ea0c:	9802      	ldrpl	r0, [sp, #8]
 800ea0e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800ea12:	bf58      	it	pl
 800ea14:	eba9 0000 	subpl.w	r0, r9, r0
 800ea18:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800ea1c:	bf58      	it	pl
 800ea1e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800ea22:	6021      	str	r1, [r4, #0]
 800ea24:	f04f 0900 	mov.w	r9, #0
 800ea28:	e7ab      	b.n	800e982 <_scanf_float+0x182>
 800ea2a:	2203      	movs	r2, #3
 800ea2c:	e7a9      	b.n	800e982 <_scanf_float+0x182>
 800ea2e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ea32:	9205      	str	r2, [sp, #20]
 800ea34:	4631      	mov	r1, r6
 800ea36:	4638      	mov	r0, r7
 800ea38:	4798      	blx	r3
 800ea3a:	9a05      	ldr	r2, [sp, #20]
 800ea3c:	2800      	cmp	r0, #0
 800ea3e:	f43f af04 	beq.w	800e84a <_scanf_float+0x4a>
 800ea42:	e715      	b.n	800e870 <_scanf_float+0x70>
 800ea44:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ea48:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800ea4c:	4632      	mov	r2, r6
 800ea4e:	4638      	mov	r0, r7
 800ea50:	4798      	blx	r3
 800ea52:	6923      	ldr	r3, [r4, #16]
 800ea54:	3b01      	subs	r3, #1
 800ea56:	6123      	str	r3, [r4, #16]
 800ea58:	e715      	b.n	800e886 <_scanf_float+0x86>
 800ea5a:	f10b 33ff 	add.w	r3, fp, #4294967295
 800ea5e:	2b06      	cmp	r3, #6
 800ea60:	d80a      	bhi.n	800ea78 <_scanf_float+0x278>
 800ea62:	f1bb 0f02 	cmp.w	fp, #2
 800ea66:	d968      	bls.n	800eb3a <_scanf_float+0x33a>
 800ea68:	f1ab 0b03 	sub.w	fp, fp, #3
 800ea6c:	fa5f fb8b 	uxtb.w	fp, fp
 800ea70:	eba5 0b0b 	sub.w	fp, r5, fp
 800ea74:	455d      	cmp	r5, fp
 800ea76:	d14b      	bne.n	800eb10 <_scanf_float+0x310>
 800ea78:	6823      	ldr	r3, [r4, #0]
 800ea7a:	05da      	lsls	r2, r3, #23
 800ea7c:	d51f      	bpl.n	800eabe <_scanf_float+0x2be>
 800ea7e:	055b      	lsls	r3, r3, #21
 800ea80:	d468      	bmi.n	800eb54 <_scanf_float+0x354>
 800ea82:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ea86:	6923      	ldr	r3, [r4, #16]
 800ea88:	2965      	cmp	r1, #101	; 0x65
 800ea8a:	f103 33ff 	add.w	r3, r3, #4294967295
 800ea8e:	f105 3bff 	add.w	fp, r5, #4294967295
 800ea92:	6123      	str	r3, [r4, #16]
 800ea94:	d00d      	beq.n	800eab2 <_scanf_float+0x2b2>
 800ea96:	2945      	cmp	r1, #69	; 0x45
 800ea98:	d00b      	beq.n	800eab2 <_scanf_float+0x2b2>
 800ea9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ea9e:	4632      	mov	r2, r6
 800eaa0:	4638      	mov	r0, r7
 800eaa2:	4798      	blx	r3
 800eaa4:	6923      	ldr	r3, [r4, #16]
 800eaa6:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800eaaa:	3b01      	subs	r3, #1
 800eaac:	f1a5 0b02 	sub.w	fp, r5, #2
 800eab0:	6123      	str	r3, [r4, #16]
 800eab2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800eab6:	4632      	mov	r2, r6
 800eab8:	4638      	mov	r0, r7
 800eaba:	4798      	blx	r3
 800eabc:	465d      	mov	r5, fp
 800eabe:	6826      	ldr	r6, [r4, #0]
 800eac0:	f016 0610 	ands.w	r6, r6, #16
 800eac4:	d17a      	bne.n	800ebbc <_scanf_float+0x3bc>
 800eac6:	702e      	strb	r6, [r5, #0]
 800eac8:	6823      	ldr	r3, [r4, #0]
 800eaca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800eace:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ead2:	d142      	bne.n	800eb5a <_scanf_float+0x35a>
 800ead4:	9b02      	ldr	r3, [sp, #8]
 800ead6:	eba9 0303 	sub.w	r3, r9, r3
 800eada:	425a      	negs	r2, r3
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d149      	bne.n	800eb74 <_scanf_float+0x374>
 800eae0:	2200      	movs	r2, #0
 800eae2:	4641      	mov	r1, r8
 800eae4:	4638      	mov	r0, r7
 800eae6:	f000 feb3 	bl	800f850 <_strtod_r>
 800eaea:	6825      	ldr	r5, [r4, #0]
 800eaec:	f8da 3000 	ldr.w	r3, [sl]
 800eaf0:	f015 0f02 	tst.w	r5, #2
 800eaf4:	f103 0204 	add.w	r2, r3, #4
 800eaf8:	ec59 8b10 	vmov	r8, r9, d0
 800eafc:	f8ca 2000 	str.w	r2, [sl]
 800eb00:	d043      	beq.n	800eb8a <_scanf_float+0x38a>
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	e9c3 8900 	strd	r8, r9, [r3]
 800eb08:	68e3      	ldr	r3, [r4, #12]
 800eb0a:	3301      	adds	r3, #1
 800eb0c:	60e3      	str	r3, [r4, #12]
 800eb0e:	e6be      	b.n	800e88e <_scanf_float+0x8e>
 800eb10:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800eb14:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800eb18:	4632      	mov	r2, r6
 800eb1a:	4638      	mov	r0, r7
 800eb1c:	4798      	blx	r3
 800eb1e:	6923      	ldr	r3, [r4, #16]
 800eb20:	3b01      	subs	r3, #1
 800eb22:	6123      	str	r3, [r4, #16]
 800eb24:	e7a6      	b.n	800ea74 <_scanf_float+0x274>
 800eb26:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800eb2a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800eb2e:	4632      	mov	r2, r6
 800eb30:	4638      	mov	r0, r7
 800eb32:	4798      	blx	r3
 800eb34:	6923      	ldr	r3, [r4, #16]
 800eb36:	3b01      	subs	r3, #1
 800eb38:	6123      	str	r3, [r4, #16]
 800eb3a:	4545      	cmp	r5, r8
 800eb3c:	d8f3      	bhi.n	800eb26 <_scanf_float+0x326>
 800eb3e:	e6a5      	b.n	800e88c <_scanf_float+0x8c>
 800eb40:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800eb44:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800eb48:	4632      	mov	r2, r6
 800eb4a:	4638      	mov	r0, r7
 800eb4c:	4798      	blx	r3
 800eb4e:	6923      	ldr	r3, [r4, #16]
 800eb50:	3b01      	subs	r3, #1
 800eb52:	6123      	str	r3, [r4, #16]
 800eb54:	4545      	cmp	r5, r8
 800eb56:	d8f3      	bhi.n	800eb40 <_scanf_float+0x340>
 800eb58:	e698      	b.n	800e88c <_scanf_float+0x8c>
 800eb5a:	9b03      	ldr	r3, [sp, #12]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d0bf      	beq.n	800eae0 <_scanf_float+0x2e0>
 800eb60:	9904      	ldr	r1, [sp, #16]
 800eb62:	230a      	movs	r3, #10
 800eb64:	4632      	mov	r2, r6
 800eb66:	3101      	adds	r1, #1
 800eb68:	4638      	mov	r0, r7
 800eb6a:	f000 fefd 	bl	800f968 <_strtol_r>
 800eb6e:	9b03      	ldr	r3, [sp, #12]
 800eb70:	9d04      	ldr	r5, [sp, #16]
 800eb72:	1ac2      	subs	r2, r0, r3
 800eb74:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800eb78:	429d      	cmp	r5, r3
 800eb7a:	bf28      	it	cs
 800eb7c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800eb80:	490f      	ldr	r1, [pc, #60]	; (800ebc0 <_scanf_float+0x3c0>)
 800eb82:	4628      	mov	r0, r5
 800eb84:	f000 f834 	bl	800ebf0 <siprintf>
 800eb88:	e7aa      	b.n	800eae0 <_scanf_float+0x2e0>
 800eb8a:	f015 0504 	ands.w	r5, r5, #4
 800eb8e:	d1b8      	bne.n	800eb02 <_scanf_float+0x302>
 800eb90:	681f      	ldr	r7, [r3, #0]
 800eb92:	ee10 2a10 	vmov	r2, s0
 800eb96:	464b      	mov	r3, r9
 800eb98:	ee10 0a10 	vmov	r0, s0
 800eb9c:	4649      	mov	r1, r9
 800eb9e:	f7f1 ffc5 	bl	8000b2c <__aeabi_dcmpun>
 800eba2:	b128      	cbz	r0, 800ebb0 <_scanf_float+0x3b0>
 800eba4:	4628      	mov	r0, r5
 800eba6:	f000 f81d 	bl	800ebe4 <nanf>
 800ebaa:	ed87 0a00 	vstr	s0, [r7]
 800ebae:	e7ab      	b.n	800eb08 <_scanf_float+0x308>
 800ebb0:	4640      	mov	r0, r8
 800ebb2:	4649      	mov	r1, r9
 800ebb4:	f7f2 f818 	bl	8000be8 <__aeabi_d2f>
 800ebb8:	6038      	str	r0, [r7, #0]
 800ebba:	e7a5      	b.n	800eb08 <_scanf_float+0x308>
 800ebbc:	2600      	movs	r6, #0
 800ebbe:	e666      	b.n	800e88e <_scanf_float+0x8e>
 800ebc0:	08012070 	.word	0x08012070

0800ebc4 <_sbrk_r>:
 800ebc4:	b538      	push	{r3, r4, r5, lr}
 800ebc6:	4c06      	ldr	r4, [pc, #24]	; (800ebe0 <_sbrk_r+0x1c>)
 800ebc8:	2300      	movs	r3, #0
 800ebca:	4605      	mov	r5, r0
 800ebcc:	4608      	mov	r0, r1
 800ebce:	6023      	str	r3, [r4, #0]
 800ebd0:	f002 fe36 	bl	8011840 <_sbrk>
 800ebd4:	1c43      	adds	r3, r0, #1
 800ebd6:	d102      	bne.n	800ebde <_sbrk_r+0x1a>
 800ebd8:	6823      	ldr	r3, [r4, #0]
 800ebda:	b103      	cbz	r3, 800ebde <_sbrk_r+0x1a>
 800ebdc:	602b      	str	r3, [r5, #0]
 800ebde:	bd38      	pop	{r3, r4, r5, pc}
 800ebe0:	20002c6c 	.word	0x20002c6c

0800ebe4 <nanf>:
 800ebe4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ebec <nanf+0x8>
 800ebe8:	4770      	bx	lr
 800ebea:	bf00      	nop
 800ebec:	7fc00000 	.word	0x7fc00000

0800ebf0 <siprintf>:
 800ebf0:	b40e      	push	{r1, r2, r3}
 800ebf2:	b500      	push	{lr}
 800ebf4:	b09c      	sub	sp, #112	; 0x70
 800ebf6:	ab1d      	add	r3, sp, #116	; 0x74
 800ebf8:	9002      	str	r0, [sp, #8]
 800ebfa:	9006      	str	r0, [sp, #24]
 800ebfc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ec00:	4809      	ldr	r0, [pc, #36]	; (800ec28 <siprintf+0x38>)
 800ec02:	9107      	str	r1, [sp, #28]
 800ec04:	9104      	str	r1, [sp, #16]
 800ec06:	4909      	ldr	r1, [pc, #36]	; (800ec2c <siprintf+0x3c>)
 800ec08:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec0c:	9105      	str	r1, [sp, #20]
 800ec0e:	6800      	ldr	r0, [r0, #0]
 800ec10:	9301      	str	r3, [sp, #4]
 800ec12:	a902      	add	r1, sp, #8
 800ec14:	f002 fcb6 	bl	8011584 <_svfiprintf_r>
 800ec18:	9b02      	ldr	r3, [sp, #8]
 800ec1a:	2200      	movs	r2, #0
 800ec1c:	701a      	strb	r2, [r3, #0]
 800ec1e:	b01c      	add	sp, #112	; 0x70
 800ec20:	f85d eb04 	ldr.w	lr, [sp], #4
 800ec24:	b003      	add	sp, #12
 800ec26:	4770      	bx	lr
 800ec28:	20000184 	.word	0x20000184
 800ec2c:	ffff0208 	.word	0xffff0208

0800ec30 <sulp>:
 800ec30:	b570      	push	{r4, r5, r6, lr}
 800ec32:	4604      	mov	r4, r0
 800ec34:	460d      	mov	r5, r1
 800ec36:	ec45 4b10 	vmov	d0, r4, r5
 800ec3a:	4616      	mov	r6, r2
 800ec3c:	f002 fb06 	bl	801124c <__ulp>
 800ec40:	ec51 0b10 	vmov	r0, r1, d0
 800ec44:	b17e      	cbz	r6, 800ec66 <sulp+0x36>
 800ec46:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ec4a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	dd09      	ble.n	800ec66 <sulp+0x36>
 800ec52:	051b      	lsls	r3, r3, #20
 800ec54:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ec58:	2400      	movs	r4, #0
 800ec5a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ec5e:	4622      	mov	r2, r4
 800ec60:	462b      	mov	r3, r5
 800ec62:	f7f1 fcc9 	bl	80005f8 <__aeabi_dmul>
 800ec66:	bd70      	pop	{r4, r5, r6, pc}

0800ec68 <_strtod_l>:
 800ec68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec6c:	461f      	mov	r7, r3
 800ec6e:	b0a1      	sub	sp, #132	; 0x84
 800ec70:	2300      	movs	r3, #0
 800ec72:	4681      	mov	r9, r0
 800ec74:	4638      	mov	r0, r7
 800ec76:	460e      	mov	r6, r1
 800ec78:	9217      	str	r2, [sp, #92]	; 0x5c
 800ec7a:	931c      	str	r3, [sp, #112]	; 0x70
 800ec7c:	f001 fff5 	bl	8010c6a <__localeconv_l>
 800ec80:	4680      	mov	r8, r0
 800ec82:	6800      	ldr	r0, [r0, #0]
 800ec84:	f7f1 faa4 	bl	80001d0 <strlen>
 800ec88:	f04f 0a00 	mov.w	sl, #0
 800ec8c:	4604      	mov	r4, r0
 800ec8e:	f04f 0b00 	mov.w	fp, #0
 800ec92:	961b      	str	r6, [sp, #108]	; 0x6c
 800ec94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ec96:	781a      	ldrb	r2, [r3, #0]
 800ec98:	2a0d      	cmp	r2, #13
 800ec9a:	d832      	bhi.n	800ed02 <_strtod_l+0x9a>
 800ec9c:	2a09      	cmp	r2, #9
 800ec9e:	d236      	bcs.n	800ed0e <_strtod_l+0xa6>
 800eca0:	2a00      	cmp	r2, #0
 800eca2:	d03e      	beq.n	800ed22 <_strtod_l+0xba>
 800eca4:	2300      	movs	r3, #0
 800eca6:	930d      	str	r3, [sp, #52]	; 0x34
 800eca8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800ecaa:	782b      	ldrb	r3, [r5, #0]
 800ecac:	2b30      	cmp	r3, #48	; 0x30
 800ecae:	f040 80ac 	bne.w	800ee0a <_strtod_l+0x1a2>
 800ecb2:	786b      	ldrb	r3, [r5, #1]
 800ecb4:	2b58      	cmp	r3, #88	; 0x58
 800ecb6:	d001      	beq.n	800ecbc <_strtod_l+0x54>
 800ecb8:	2b78      	cmp	r3, #120	; 0x78
 800ecba:	d167      	bne.n	800ed8c <_strtod_l+0x124>
 800ecbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ecbe:	9301      	str	r3, [sp, #4]
 800ecc0:	ab1c      	add	r3, sp, #112	; 0x70
 800ecc2:	9300      	str	r3, [sp, #0]
 800ecc4:	9702      	str	r7, [sp, #8]
 800ecc6:	ab1d      	add	r3, sp, #116	; 0x74
 800ecc8:	4a88      	ldr	r2, [pc, #544]	; (800eeec <_strtod_l+0x284>)
 800ecca:	a91b      	add	r1, sp, #108	; 0x6c
 800eccc:	4648      	mov	r0, r9
 800ecce:	f001 fcf2 	bl	80106b6 <__gethex>
 800ecd2:	f010 0407 	ands.w	r4, r0, #7
 800ecd6:	4606      	mov	r6, r0
 800ecd8:	d005      	beq.n	800ece6 <_strtod_l+0x7e>
 800ecda:	2c06      	cmp	r4, #6
 800ecdc:	d12b      	bne.n	800ed36 <_strtod_l+0xce>
 800ecde:	3501      	adds	r5, #1
 800ece0:	2300      	movs	r3, #0
 800ece2:	951b      	str	r5, [sp, #108]	; 0x6c
 800ece4:	930d      	str	r3, [sp, #52]	; 0x34
 800ece6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	f040 859a 	bne.w	800f822 <_strtod_l+0xbba>
 800ecee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ecf0:	b1e3      	cbz	r3, 800ed2c <_strtod_l+0xc4>
 800ecf2:	4652      	mov	r2, sl
 800ecf4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ecf8:	ec43 2b10 	vmov	d0, r2, r3
 800ecfc:	b021      	add	sp, #132	; 0x84
 800ecfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed02:	2a2b      	cmp	r2, #43	; 0x2b
 800ed04:	d015      	beq.n	800ed32 <_strtod_l+0xca>
 800ed06:	2a2d      	cmp	r2, #45	; 0x2d
 800ed08:	d004      	beq.n	800ed14 <_strtod_l+0xac>
 800ed0a:	2a20      	cmp	r2, #32
 800ed0c:	d1ca      	bne.n	800eca4 <_strtod_l+0x3c>
 800ed0e:	3301      	adds	r3, #1
 800ed10:	931b      	str	r3, [sp, #108]	; 0x6c
 800ed12:	e7bf      	b.n	800ec94 <_strtod_l+0x2c>
 800ed14:	2201      	movs	r2, #1
 800ed16:	920d      	str	r2, [sp, #52]	; 0x34
 800ed18:	1c5a      	adds	r2, r3, #1
 800ed1a:	921b      	str	r2, [sp, #108]	; 0x6c
 800ed1c:	785b      	ldrb	r3, [r3, #1]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d1c2      	bne.n	800eca8 <_strtod_l+0x40>
 800ed22:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ed24:	961b      	str	r6, [sp, #108]	; 0x6c
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	f040 8579 	bne.w	800f81e <_strtod_l+0xbb6>
 800ed2c:	4652      	mov	r2, sl
 800ed2e:	465b      	mov	r3, fp
 800ed30:	e7e2      	b.n	800ecf8 <_strtod_l+0x90>
 800ed32:	2200      	movs	r2, #0
 800ed34:	e7ef      	b.n	800ed16 <_strtod_l+0xae>
 800ed36:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ed38:	b13a      	cbz	r2, 800ed4a <_strtod_l+0xe2>
 800ed3a:	2135      	movs	r1, #53	; 0x35
 800ed3c:	a81e      	add	r0, sp, #120	; 0x78
 800ed3e:	f002 fb7d 	bl	801143c <__copybits>
 800ed42:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ed44:	4648      	mov	r0, r9
 800ed46:	f001 ffe9 	bl	8010d1c <_Bfree>
 800ed4a:	3c01      	subs	r4, #1
 800ed4c:	2c04      	cmp	r4, #4
 800ed4e:	d806      	bhi.n	800ed5e <_strtod_l+0xf6>
 800ed50:	e8df f004 	tbb	[pc, r4]
 800ed54:	1714030a 	.word	0x1714030a
 800ed58:	0a          	.byte	0x0a
 800ed59:	00          	.byte	0x00
 800ed5a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800ed5e:	0730      	lsls	r0, r6, #28
 800ed60:	d5c1      	bpl.n	800ece6 <_strtod_l+0x7e>
 800ed62:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800ed66:	e7be      	b.n	800ece6 <_strtod_l+0x7e>
 800ed68:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800ed6c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800ed6e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ed72:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ed76:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ed7a:	e7f0      	b.n	800ed5e <_strtod_l+0xf6>
 800ed7c:	f8df b170 	ldr.w	fp, [pc, #368]	; 800eef0 <_strtod_l+0x288>
 800ed80:	e7ed      	b.n	800ed5e <_strtod_l+0xf6>
 800ed82:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800ed86:	f04f 3aff 	mov.w	sl, #4294967295
 800ed8a:	e7e8      	b.n	800ed5e <_strtod_l+0xf6>
 800ed8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ed8e:	1c5a      	adds	r2, r3, #1
 800ed90:	921b      	str	r2, [sp, #108]	; 0x6c
 800ed92:	785b      	ldrb	r3, [r3, #1]
 800ed94:	2b30      	cmp	r3, #48	; 0x30
 800ed96:	d0f9      	beq.n	800ed8c <_strtod_l+0x124>
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d0a4      	beq.n	800ece6 <_strtod_l+0x7e>
 800ed9c:	2301      	movs	r3, #1
 800ed9e:	2500      	movs	r5, #0
 800eda0:	9306      	str	r3, [sp, #24]
 800eda2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800eda4:	9308      	str	r3, [sp, #32]
 800eda6:	9507      	str	r5, [sp, #28]
 800eda8:	9505      	str	r5, [sp, #20]
 800edaa:	220a      	movs	r2, #10
 800edac:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800edae:	7807      	ldrb	r7, [r0, #0]
 800edb0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800edb4:	b2d9      	uxtb	r1, r3
 800edb6:	2909      	cmp	r1, #9
 800edb8:	d929      	bls.n	800ee0e <_strtod_l+0x1a6>
 800edba:	4622      	mov	r2, r4
 800edbc:	f8d8 1000 	ldr.w	r1, [r8]
 800edc0:	f002 fcd8 	bl	8011774 <strncmp>
 800edc4:	2800      	cmp	r0, #0
 800edc6:	d031      	beq.n	800ee2c <_strtod_l+0x1c4>
 800edc8:	2000      	movs	r0, #0
 800edca:	9c05      	ldr	r4, [sp, #20]
 800edcc:	9004      	str	r0, [sp, #16]
 800edce:	463b      	mov	r3, r7
 800edd0:	4602      	mov	r2, r0
 800edd2:	2b65      	cmp	r3, #101	; 0x65
 800edd4:	d001      	beq.n	800edda <_strtod_l+0x172>
 800edd6:	2b45      	cmp	r3, #69	; 0x45
 800edd8:	d114      	bne.n	800ee04 <_strtod_l+0x19c>
 800edda:	b924      	cbnz	r4, 800ede6 <_strtod_l+0x17e>
 800eddc:	b910      	cbnz	r0, 800ede4 <_strtod_l+0x17c>
 800edde:	9b06      	ldr	r3, [sp, #24]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d09e      	beq.n	800ed22 <_strtod_l+0xba>
 800ede4:	2400      	movs	r4, #0
 800ede6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800ede8:	1c73      	adds	r3, r6, #1
 800edea:	931b      	str	r3, [sp, #108]	; 0x6c
 800edec:	7873      	ldrb	r3, [r6, #1]
 800edee:	2b2b      	cmp	r3, #43	; 0x2b
 800edf0:	d078      	beq.n	800eee4 <_strtod_l+0x27c>
 800edf2:	2b2d      	cmp	r3, #45	; 0x2d
 800edf4:	d070      	beq.n	800eed8 <_strtod_l+0x270>
 800edf6:	f04f 0c00 	mov.w	ip, #0
 800edfa:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800edfe:	2f09      	cmp	r7, #9
 800ee00:	d97c      	bls.n	800eefc <_strtod_l+0x294>
 800ee02:	961b      	str	r6, [sp, #108]	; 0x6c
 800ee04:	f04f 0e00 	mov.w	lr, #0
 800ee08:	e09a      	b.n	800ef40 <_strtod_l+0x2d8>
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	e7c7      	b.n	800ed9e <_strtod_l+0x136>
 800ee0e:	9905      	ldr	r1, [sp, #20]
 800ee10:	2908      	cmp	r1, #8
 800ee12:	bfdd      	ittte	le
 800ee14:	9907      	ldrle	r1, [sp, #28]
 800ee16:	fb02 3301 	mlale	r3, r2, r1, r3
 800ee1a:	9307      	strle	r3, [sp, #28]
 800ee1c:	fb02 3505 	mlagt	r5, r2, r5, r3
 800ee20:	9b05      	ldr	r3, [sp, #20]
 800ee22:	3001      	adds	r0, #1
 800ee24:	3301      	adds	r3, #1
 800ee26:	9305      	str	r3, [sp, #20]
 800ee28:	901b      	str	r0, [sp, #108]	; 0x6c
 800ee2a:	e7bf      	b.n	800edac <_strtod_l+0x144>
 800ee2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ee2e:	191a      	adds	r2, r3, r4
 800ee30:	921b      	str	r2, [sp, #108]	; 0x6c
 800ee32:	9a05      	ldr	r2, [sp, #20]
 800ee34:	5d1b      	ldrb	r3, [r3, r4]
 800ee36:	2a00      	cmp	r2, #0
 800ee38:	d037      	beq.n	800eeaa <_strtod_l+0x242>
 800ee3a:	9c05      	ldr	r4, [sp, #20]
 800ee3c:	4602      	mov	r2, r0
 800ee3e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800ee42:	2909      	cmp	r1, #9
 800ee44:	d913      	bls.n	800ee6e <_strtod_l+0x206>
 800ee46:	2101      	movs	r1, #1
 800ee48:	9104      	str	r1, [sp, #16]
 800ee4a:	e7c2      	b.n	800edd2 <_strtod_l+0x16a>
 800ee4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ee4e:	1c5a      	adds	r2, r3, #1
 800ee50:	921b      	str	r2, [sp, #108]	; 0x6c
 800ee52:	785b      	ldrb	r3, [r3, #1]
 800ee54:	3001      	adds	r0, #1
 800ee56:	2b30      	cmp	r3, #48	; 0x30
 800ee58:	d0f8      	beq.n	800ee4c <_strtod_l+0x1e4>
 800ee5a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800ee5e:	2a08      	cmp	r2, #8
 800ee60:	f200 84e4 	bhi.w	800f82c <_strtod_l+0xbc4>
 800ee64:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800ee66:	9208      	str	r2, [sp, #32]
 800ee68:	4602      	mov	r2, r0
 800ee6a:	2000      	movs	r0, #0
 800ee6c:	4604      	mov	r4, r0
 800ee6e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800ee72:	f100 0101 	add.w	r1, r0, #1
 800ee76:	d012      	beq.n	800ee9e <_strtod_l+0x236>
 800ee78:	440a      	add	r2, r1
 800ee7a:	eb00 0c04 	add.w	ip, r0, r4
 800ee7e:	4621      	mov	r1, r4
 800ee80:	270a      	movs	r7, #10
 800ee82:	458c      	cmp	ip, r1
 800ee84:	d113      	bne.n	800eeae <_strtod_l+0x246>
 800ee86:	1821      	adds	r1, r4, r0
 800ee88:	2908      	cmp	r1, #8
 800ee8a:	f104 0401 	add.w	r4, r4, #1
 800ee8e:	4404      	add	r4, r0
 800ee90:	dc19      	bgt.n	800eec6 <_strtod_l+0x25e>
 800ee92:	9b07      	ldr	r3, [sp, #28]
 800ee94:	210a      	movs	r1, #10
 800ee96:	fb01 e303 	mla	r3, r1, r3, lr
 800ee9a:	9307      	str	r3, [sp, #28]
 800ee9c:	2100      	movs	r1, #0
 800ee9e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800eea0:	1c58      	adds	r0, r3, #1
 800eea2:	901b      	str	r0, [sp, #108]	; 0x6c
 800eea4:	785b      	ldrb	r3, [r3, #1]
 800eea6:	4608      	mov	r0, r1
 800eea8:	e7c9      	b.n	800ee3e <_strtod_l+0x1d6>
 800eeaa:	9805      	ldr	r0, [sp, #20]
 800eeac:	e7d3      	b.n	800ee56 <_strtod_l+0x1ee>
 800eeae:	2908      	cmp	r1, #8
 800eeb0:	f101 0101 	add.w	r1, r1, #1
 800eeb4:	dc03      	bgt.n	800eebe <_strtod_l+0x256>
 800eeb6:	9b07      	ldr	r3, [sp, #28]
 800eeb8:	437b      	muls	r3, r7
 800eeba:	9307      	str	r3, [sp, #28]
 800eebc:	e7e1      	b.n	800ee82 <_strtod_l+0x21a>
 800eebe:	2910      	cmp	r1, #16
 800eec0:	bfd8      	it	le
 800eec2:	437d      	mulle	r5, r7
 800eec4:	e7dd      	b.n	800ee82 <_strtod_l+0x21a>
 800eec6:	2c10      	cmp	r4, #16
 800eec8:	bfdc      	itt	le
 800eeca:	210a      	movle	r1, #10
 800eecc:	fb01 e505 	mlale	r5, r1, r5, lr
 800eed0:	e7e4      	b.n	800ee9c <_strtod_l+0x234>
 800eed2:	2301      	movs	r3, #1
 800eed4:	9304      	str	r3, [sp, #16]
 800eed6:	e781      	b.n	800eddc <_strtod_l+0x174>
 800eed8:	f04f 0c01 	mov.w	ip, #1
 800eedc:	1cb3      	adds	r3, r6, #2
 800eede:	931b      	str	r3, [sp, #108]	; 0x6c
 800eee0:	78b3      	ldrb	r3, [r6, #2]
 800eee2:	e78a      	b.n	800edfa <_strtod_l+0x192>
 800eee4:	f04f 0c00 	mov.w	ip, #0
 800eee8:	e7f8      	b.n	800eedc <_strtod_l+0x274>
 800eeea:	bf00      	nop
 800eeec:	08012078 	.word	0x08012078
 800eef0:	7ff00000 	.word	0x7ff00000
 800eef4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800eef6:	1c5f      	adds	r7, r3, #1
 800eef8:	971b      	str	r7, [sp, #108]	; 0x6c
 800eefa:	785b      	ldrb	r3, [r3, #1]
 800eefc:	2b30      	cmp	r3, #48	; 0x30
 800eefe:	d0f9      	beq.n	800eef4 <_strtod_l+0x28c>
 800ef00:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800ef04:	2f08      	cmp	r7, #8
 800ef06:	f63f af7d 	bhi.w	800ee04 <_strtod_l+0x19c>
 800ef0a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800ef0e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ef10:	930a      	str	r3, [sp, #40]	; 0x28
 800ef12:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ef14:	1c5f      	adds	r7, r3, #1
 800ef16:	971b      	str	r7, [sp, #108]	; 0x6c
 800ef18:	785b      	ldrb	r3, [r3, #1]
 800ef1a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800ef1e:	f1b8 0f09 	cmp.w	r8, #9
 800ef22:	d937      	bls.n	800ef94 <_strtod_l+0x32c>
 800ef24:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ef26:	1a7f      	subs	r7, r7, r1
 800ef28:	2f08      	cmp	r7, #8
 800ef2a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800ef2e:	dc37      	bgt.n	800efa0 <_strtod_l+0x338>
 800ef30:	45be      	cmp	lr, r7
 800ef32:	bfa8      	it	ge
 800ef34:	46be      	movge	lr, r7
 800ef36:	f1bc 0f00 	cmp.w	ip, #0
 800ef3a:	d001      	beq.n	800ef40 <_strtod_l+0x2d8>
 800ef3c:	f1ce 0e00 	rsb	lr, lr, #0
 800ef40:	2c00      	cmp	r4, #0
 800ef42:	d151      	bne.n	800efe8 <_strtod_l+0x380>
 800ef44:	2800      	cmp	r0, #0
 800ef46:	f47f aece 	bne.w	800ece6 <_strtod_l+0x7e>
 800ef4a:	9a06      	ldr	r2, [sp, #24]
 800ef4c:	2a00      	cmp	r2, #0
 800ef4e:	f47f aeca 	bne.w	800ece6 <_strtod_l+0x7e>
 800ef52:	9a04      	ldr	r2, [sp, #16]
 800ef54:	2a00      	cmp	r2, #0
 800ef56:	f47f aee4 	bne.w	800ed22 <_strtod_l+0xba>
 800ef5a:	2b4e      	cmp	r3, #78	; 0x4e
 800ef5c:	d027      	beq.n	800efae <_strtod_l+0x346>
 800ef5e:	dc21      	bgt.n	800efa4 <_strtod_l+0x33c>
 800ef60:	2b49      	cmp	r3, #73	; 0x49
 800ef62:	f47f aede 	bne.w	800ed22 <_strtod_l+0xba>
 800ef66:	49a0      	ldr	r1, [pc, #640]	; (800f1e8 <_strtod_l+0x580>)
 800ef68:	a81b      	add	r0, sp, #108	; 0x6c
 800ef6a:	f001 fdd7 	bl	8010b1c <__match>
 800ef6e:	2800      	cmp	r0, #0
 800ef70:	f43f aed7 	beq.w	800ed22 <_strtod_l+0xba>
 800ef74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ef76:	499d      	ldr	r1, [pc, #628]	; (800f1ec <_strtod_l+0x584>)
 800ef78:	3b01      	subs	r3, #1
 800ef7a:	a81b      	add	r0, sp, #108	; 0x6c
 800ef7c:	931b      	str	r3, [sp, #108]	; 0x6c
 800ef7e:	f001 fdcd 	bl	8010b1c <__match>
 800ef82:	b910      	cbnz	r0, 800ef8a <_strtod_l+0x322>
 800ef84:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ef86:	3301      	adds	r3, #1
 800ef88:	931b      	str	r3, [sp, #108]	; 0x6c
 800ef8a:	f8df b274 	ldr.w	fp, [pc, #628]	; 800f200 <_strtod_l+0x598>
 800ef8e:	f04f 0a00 	mov.w	sl, #0
 800ef92:	e6a8      	b.n	800ece6 <_strtod_l+0x7e>
 800ef94:	210a      	movs	r1, #10
 800ef96:	fb01 3e0e 	mla	lr, r1, lr, r3
 800ef9a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800ef9e:	e7b8      	b.n	800ef12 <_strtod_l+0x2aa>
 800efa0:	46be      	mov	lr, r7
 800efa2:	e7c8      	b.n	800ef36 <_strtod_l+0x2ce>
 800efa4:	2b69      	cmp	r3, #105	; 0x69
 800efa6:	d0de      	beq.n	800ef66 <_strtod_l+0x2fe>
 800efa8:	2b6e      	cmp	r3, #110	; 0x6e
 800efaa:	f47f aeba 	bne.w	800ed22 <_strtod_l+0xba>
 800efae:	4990      	ldr	r1, [pc, #576]	; (800f1f0 <_strtod_l+0x588>)
 800efb0:	a81b      	add	r0, sp, #108	; 0x6c
 800efb2:	f001 fdb3 	bl	8010b1c <__match>
 800efb6:	2800      	cmp	r0, #0
 800efb8:	f43f aeb3 	beq.w	800ed22 <_strtod_l+0xba>
 800efbc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800efbe:	781b      	ldrb	r3, [r3, #0]
 800efc0:	2b28      	cmp	r3, #40	; 0x28
 800efc2:	d10e      	bne.n	800efe2 <_strtod_l+0x37a>
 800efc4:	aa1e      	add	r2, sp, #120	; 0x78
 800efc6:	498b      	ldr	r1, [pc, #556]	; (800f1f4 <_strtod_l+0x58c>)
 800efc8:	a81b      	add	r0, sp, #108	; 0x6c
 800efca:	f001 fdbb 	bl	8010b44 <__hexnan>
 800efce:	2805      	cmp	r0, #5
 800efd0:	d107      	bne.n	800efe2 <_strtod_l+0x37a>
 800efd2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800efd4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800efd8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800efdc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800efe0:	e681      	b.n	800ece6 <_strtod_l+0x7e>
 800efe2:	f8df b224 	ldr.w	fp, [pc, #548]	; 800f208 <_strtod_l+0x5a0>
 800efe6:	e7d2      	b.n	800ef8e <_strtod_l+0x326>
 800efe8:	ebae 0302 	sub.w	r3, lr, r2
 800efec:	9306      	str	r3, [sp, #24]
 800efee:	9b05      	ldr	r3, [sp, #20]
 800eff0:	9807      	ldr	r0, [sp, #28]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	bf08      	it	eq
 800eff6:	4623      	moveq	r3, r4
 800eff8:	2c10      	cmp	r4, #16
 800effa:	9305      	str	r3, [sp, #20]
 800effc:	46a0      	mov	r8, r4
 800effe:	bfa8      	it	ge
 800f000:	f04f 0810 	movge.w	r8, #16
 800f004:	f7f1 fa7e 	bl	8000504 <__aeabi_ui2d>
 800f008:	2c09      	cmp	r4, #9
 800f00a:	4682      	mov	sl, r0
 800f00c:	468b      	mov	fp, r1
 800f00e:	dc13      	bgt.n	800f038 <_strtod_l+0x3d0>
 800f010:	9b06      	ldr	r3, [sp, #24]
 800f012:	2b00      	cmp	r3, #0
 800f014:	f43f ae67 	beq.w	800ece6 <_strtod_l+0x7e>
 800f018:	9b06      	ldr	r3, [sp, #24]
 800f01a:	dd7a      	ble.n	800f112 <_strtod_l+0x4aa>
 800f01c:	2b16      	cmp	r3, #22
 800f01e:	dc61      	bgt.n	800f0e4 <_strtod_l+0x47c>
 800f020:	4a75      	ldr	r2, [pc, #468]	; (800f1f8 <_strtod_l+0x590>)
 800f022:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800f026:	e9de 0100 	ldrd	r0, r1, [lr]
 800f02a:	4652      	mov	r2, sl
 800f02c:	465b      	mov	r3, fp
 800f02e:	f7f1 fae3 	bl	80005f8 <__aeabi_dmul>
 800f032:	4682      	mov	sl, r0
 800f034:	468b      	mov	fp, r1
 800f036:	e656      	b.n	800ece6 <_strtod_l+0x7e>
 800f038:	4b6f      	ldr	r3, [pc, #444]	; (800f1f8 <_strtod_l+0x590>)
 800f03a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f03e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800f042:	f7f1 fad9 	bl	80005f8 <__aeabi_dmul>
 800f046:	4606      	mov	r6, r0
 800f048:	4628      	mov	r0, r5
 800f04a:	460f      	mov	r7, r1
 800f04c:	f7f1 fa5a 	bl	8000504 <__aeabi_ui2d>
 800f050:	4602      	mov	r2, r0
 800f052:	460b      	mov	r3, r1
 800f054:	4630      	mov	r0, r6
 800f056:	4639      	mov	r1, r7
 800f058:	f7f1 f918 	bl	800028c <__adddf3>
 800f05c:	2c0f      	cmp	r4, #15
 800f05e:	4682      	mov	sl, r0
 800f060:	468b      	mov	fp, r1
 800f062:	ddd5      	ble.n	800f010 <_strtod_l+0x3a8>
 800f064:	9b06      	ldr	r3, [sp, #24]
 800f066:	eba4 0808 	sub.w	r8, r4, r8
 800f06a:	4498      	add	r8, r3
 800f06c:	f1b8 0f00 	cmp.w	r8, #0
 800f070:	f340 8096 	ble.w	800f1a0 <_strtod_l+0x538>
 800f074:	f018 030f 	ands.w	r3, r8, #15
 800f078:	d00a      	beq.n	800f090 <_strtod_l+0x428>
 800f07a:	495f      	ldr	r1, [pc, #380]	; (800f1f8 <_strtod_l+0x590>)
 800f07c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f080:	4652      	mov	r2, sl
 800f082:	465b      	mov	r3, fp
 800f084:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f088:	f7f1 fab6 	bl	80005f8 <__aeabi_dmul>
 800f08c:	4682      	mov	sl, r0
 800f08e:	468b      	mov	fp, r1
 800f090:	f038 080f 	bics.w	r8, r8, #15
 800f094:	d073      	beq.n	800f17e <_strtod_l+0x516>
 800f096:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800f09a:	dd47      	ble.n	800f12c <_strtod_l+0x4c4>
 800f09c:	2400      	movs	r4, #0
 800f09e:	46a0      	mov	r8, r4
 800f0a0:	9407      	str	r4, [sp, #28]
 800f0a2:	9405      	str	r4, [sp, #20]
 800f0a4:	2322      	movs	r3, #34	; 0x22
 800f0a6:	f8df b158 	ldr.w	fp, [pc, #344]	; 800f200 <_strtod_l+0x598>
 800f0aa:	f8c9 3000 	str.w	r3, [r9]
 800f0ae:	f04f 0a00 	mov.w	sl, #0
 800f0b2:	9b07      	ldr	r3, [sp, #28]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	f43f ae16 	beq.w	800ece6 <_strtod_l+0x7e>
 800f0ba:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f0bc:	4648      	mov	r0, r9
 800f0be:	f001 fe2d 	bl	8010d1c <_Bfree>
 800f0c2:	9905      	ldr	r1, [sp, #20]
 800f0c4:	4648      	mov	r0, r9
 800f0c6:	f001 fe29 	bl	8010d1c <_Bfree>
 800f0ca:	4641      	mov	r1, r8
 800f0cc:	4648      	mov	r0, r9
 800f0ce:	f001 fe25 	bl	8010d1c <_Bfree>
 800f0d2:	9907      	ldr	r1, [sp, #28]
 800f0d4:	4648      	mov	r0, r9
 800f0d6:	f001 fe21 	bl	8010d1c <_Bfree>
 800f0da:	4621      	mov	r1, r4
 800f0dc:	4648      	mov	r0, r9
 800f0de:	f001 fe1d 	bl	8010d1c <_Bfree>
 800f0e2:	e600      	b.n	800ece6 <_strtod_l+0x7e>
 800f0e4:	9a06      	ldr	r2, [sp, #24]
 800f0e6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800f0ea:	4293      	cmp	r3, r2
 800f0ec:	dbba      	blt.n	800f064 <_strtod_l+0x3fc>
 800f0ee:	4d42      	ldr	r5, [pc, #264]	; (800f1f8 <_strtod_l+0x590>)
 800f0f0:	f1c4 040f 	rsb	r4, r4, #15
 800f0f4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800f0f8:	4652      	mov	r2, sl
 800f0fa:	465b      	mov	r3, fp
 800f0fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f100:	f7f1 fa7a 	bl	80005f8 <__aeabi_dmul>
 800f104:	9b06      	ldr	r3, [sp, #24]
 800f106:	1b1c      	subs	r4, r3, r4
 800f108:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800f10c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f110:	e78d      	b.n	800f02e <_strtod_l+0x3c6>
 800f112:	f113 0f16 	cmn.w	r3, #22
 800f116:	dba5      	blt.n	800f064 <_strtod_l+0x3fc>
 800f118:	4a37      	ldr	r2, [pc, #220]	; (800f1f8 <_strtod_l+0x590>)
 800f11a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800f11e:	e9d2 2300 	ldrd	r2, r3, [r2]
 800f122:	4650      	mov	r0, sl
 800f124:	4659      	mov	r1, fp
 800f126:	f7f1 fb91 	bl	800084c <__aeabi_ddiv>
 800f12a:	e782      	b.n	800f032 <_strtod_l+0x3ca>
 800f12c:	2300      	movs	r3, #0
 800f12e:	4e33      	ldr	r6, [pc, #204]	; (800f1fc <_strtod_l+0x594>)
 800f130:	ea4f 1828 	mov.w	r8, r8, asr #4
 800f134:	4650      	mov	r0, sl
 800f136:	4659      	mov	r1, fp
 800f138:	461d      	mov	r5, r3
 800f13a:	f1b8 0f01 	cmp.w	r8, #1
 800f13e:	dc21      	bgt.n	800f184 <_strtod_l+0x51c>
 800f140:	b10b      	cbz	r3, 800f146 <_strtod_l+0x4de>
 800f142:	4682      	mov	sl, r0
 800f144:	468b      	mov	fp, r1
 800f146:	4b2d      	ldr	r3, [pc, #180]	; (800f1fc <_strtod_l+0x594>)
 800f148:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800f14c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800f150:	4652      	mov	r2, sl
 800f152:	465b      	mov	r3, fp
 800f154:	e9d5 0100 	ldrd	r0, r1, [r5]
 800f158:	f7f1 fa4e 	bl	80005f8 <__aeabi_dmul>
 800f15c:	4b28      	ldr	r3, [pc, #160]	; (800f200 <_strtod_l+0x598>)
 800f15e:	460a      	mov	r2, r1
 800f160:	400b      	ands	r3, r1
 800f162:	4928      	ldr	r1, [pc, #160]	; (800f204 <_strtod_l+0x59c>)
 800f164:	428b      	cmp	r3, r1
 800f166:	4682      	mov	sl, r0
 800f168:	d898      	bhi.n	800f09c <_strtod_l+0x434>
 800f16a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800f16e:	428b      	cmp	r3, r1
 800f170:	bf86      	itte	hi
 800f172:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800f20c <_strtod_l+0x5a4>
 800f176:	f04f 3aff 	movhi.w	sl, #4294967295
 800f17a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800f17e:	2300      	movs	r3, #0
 800f180:	9304      	str	r3, [sp, #16]
 800f182:	e077      	b.n	800f274 <_strtod_l+0x60c>
 800f184:	f018 0f01 	tst.w	r8, #1
 800f188:	d006      	beq.n	800f198 <_strtod_l+0x530>
 800f18a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800f18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f192:	f7f1 fa31 	bl	80005f8 <__aeabi_dmul>
 800f196:	2301      	movs	r3, #1
 800f198:	3501      	adds	r5, #1
 800f19a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f19e:	e7cc      	b.n	800f13a <_strtod_l+0x4d2>
 800f1a0:	d0ed      	beq.n	800f17e <_strtod_l+0x516>
 800f1a2:	f1c8 0800 	rsb	r8, r8, #0
 800f1a6:	f018 020f 	ands.w	r2, r8, #15
 800f1aa:	d00a      	beq.n	800f1c2 <_strtod_l+0x55a>
 800f1ac:	4b12      	ldr	r3, [pc, #72]	; (800f1f8 <_strtod_l+0x590>)
 800f1ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f1b2:	4650      	mov	r0, sl
 800f1b4:	4659      	mov	r1, fp
 800f1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1ba:	f7f1 fb47 	bl	800084c <__aeabi_ddiv>
 800f1be:	4682      	mov	sl, r0
 800f1c0:	468b      	mov	fp, r1
 800f1c2:	ea5f 1828 	movs.w	r8, r8, asr #4
 800f1c6:	d0da      	beq.n	800f17e <_strtod_l+0x516>
 800f1c8:	f1b8 0f1f 	cmp.w	r8, #31
 800f1cc:	dd20      	ble.n	800f210 <_strtod_l+0x5a8>
 800f1ce:	2400      	movs	r4, #0
 800f1d0:	46a0      	mov	r8, r4
 800f1d2:	9407      	str	r4, [sp, #28]
 800f1d4:	9405      	str	r4, [sp, #20]
 800f1d6:	2322      	movs	r3, #34	; 0x22
 800f1d8:	f04f 0a00 	mov.w	sl, #0
 800f1dc:	f04f 0b00 	mov.w	fp, #0
 800f1e0:	f8c9 3000 	str.w	r3, [r9]
 800f1e4:	e765      	b.n	800f0b2 <_strtod_l+0x44a>
 800f1e6:	bf00      	nop
 800f1e8:	08012041 	.word	0x08012041
 800f1ec:	080120cb 	.word	0x080120cb
 800f1f0:	08012049 	.word	0x08012049
 800f1f4:	0801208c 	.word	0x0801208c
 800f1f8:	08012108 	.word	0x08012108
 800f1fc:	080120e0 	.word	0x080120e0
 800f200:	7ff00000 	.word	0x7ff00000
 800f204:	7ca00000 	.word	0x7ca00000
 800f208:	fff80000 	.word	0xfff80000
 800f20c:	7fefffff 	.word	0x7fefffff
 800f210:	f018 0310 	ands.w	r3, r8, #16
 800f214:	bf18      	it	ne
 800f216:	236a      	movne	r3, #106	; 0x6a
 800f218:	4da0      	ldr	r5, [pc, #640]	; (800f49c <_strtod_l+0x834>)
 800f21a:	9304      	str	r3, [sp, #16]
 800f21c:	4650      	mov	r0, sl
 800f21e:	4659      	mov	r1, fp
 800f220:	2300      	movs	r3, #0
 800f222:	f1b8 0f00 	cmp.w	r8, #0
 800f226:	f300 810a 	bgt.w	800f43e <_strtod_l+0x7d6>
 800f22a:	b10b      	cbz	r3, 800f230 <_strtod_l+0x5c8>
 800f22c:	4682      	mov	sl, r0
 800f22e:	468b      	mov	fp, r1
 800f230:	9b04      	ldr	r3, [sp, #16]
 800f232:	b1bb      	cbz	r3, 800f264 <_strtod_l+0x5fc>
 800f234:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800f238:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	4659      	mov	r1, fp
 800f240:	dd10      	ble.n	800f264 <_strtod_l+0x5fc>
 800f242:	2b1f      	cmp	r3, #31
 800f244:	f340 8107 	ble.w	800f456 <_strtod_l+0x7ee>
 800f248:	2b34      	cmp	r3, #52	; 0x34
 800f24a:	bfde      	ittt	le
 800f24c:	3b20      	suble	r3, #32
 800f24e:	f04f 32ff 	movle.w	r2, #4294967295
 800f252:	fa02 f303 	lslle.w	r3, r2, r3
 800f256:	f04f 0a00 	mov.w	sl, #0
 800f25a:	bfcc      	ite	gt
 800f25c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800f260:	ea03 0b01 	andle.w	fp, r3, r1
 800f264:	2200      	movs	r2, #0
 800f266:	2300      	movs	r3, #0
 800f268:	4650      	mov	r0, sl
 800f26a:	4659      	mov	r1, fp
 800f26c:	f7f1 fc2c 	bl	8000ac8 <__aeabi_dcmpeq>
 800f270:	2800      	cmp	r0, #0
 800f272:	d1ac      	bne.n	800f1ce <_strtod_l+0x566>
 800f274:	9b07      	ldr	r3, [sp, #28]
 800f276:	9300      	str	r3, [sp, #0]
 800f278:	9a05      	ldr	r2, [sp, #20]
 800f27a:	9908      	ldr	r1, [sp, #32]
 800f27c:	4623      	mov	r3, r4
 800f27e:	4648      	mov	r0, r9
 800f280:	f001 fd9e 	bl	8010dc0 <__s2b>
 800f284:	9007      	str	r0, [sp, #28]
 800f286:	2800      	cmp	r0, #0
 800f288:	f43f af08 	beq.w	800f09c <_strtod_l+0x434>
 800f28c:	9a06      	ldr	r2, [sp, #24]
 800f28e:	9b06      	ldr	r3, [sp, #24]
 800f290:	2a00      	cmp	r2, #0
 800f292:	f1c3 0300 	rsb	r3, r3, #0
 800f296:	bfa8      	it	ge
 800f298:	2300      	movge	r3, #0
 800f29a:	930e      	str	r3, [sp, #56]	; 0x38
 800f29c:	2400      	movs	r4, #0
 800f29e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800f2a2:	9316      	str	r3, [sp, #88]	; 0x58
 800f2a4:	46a0      	mov	r8, r4
 800f2a6:	9b07      	ldr	r3, [sp, #28]
 800f2a8:	4648      	mov	r0, r9
 800f2aa:	6859      	ldr	r1, [r3, #4]
 800f2ac:	f001 fd02 	bl	8010cb4 <_Balloc>
 800f2b0:	9005      	str	r0, [sp, #20]
 800f2b2:	2800      	cmp	r0, #0
 800f2b4:	f43f aef6 	beq.w	800f0a4 <_strtod_l+0x43c>
 800f2b8:	9b07      	ldr	r3, [sp, #28]
 800f2ba:	691a      	ldr	r2, [r3, #16]
 800f2bc:	3202      	adds	r2, #2
 800f2be:	f103 010c 	add.w	r1, r3, #12
 800f2c2:	0092      	lsls	r2, r2, #2
 800f2c4:	300c      	adds	r0, #12
 800f2c6:	f7fe fd83 	bl	800ddd0 <memcpy>
 800f2ca:	aa1e      	add	r2, sp, #120	; 0x78
 800f2cc:	a91d      	add	r1, sp, #116	; 0x74
 800f2ce:	ec4b ab10 	vmov	d0, sl, fp
 800f2d2:	4648      	mov	r0, r9
 800f2d4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800f2d8:	f002 f82e 	bl	8011338 <__d2b>
 800f2dc:	901c      	str	r0, [sp, #112]	; 0x70
 800f2de:	2800      	cmp	r0, #0
 800f2e0:	f43f aee0 	beq.w	800f0a4 <_strtod_l+0x43c>
 800f2e4:	2101      	movs	r1, #1
 800f2e6:	4648      	mov	r0, r9
 800f2e8:	f001 fdf6 	bl	8010ed8 <__i2b>
 800f2ec:	4680      	mov	r8, r0
 800f2ee:	2800      	cmp	r0, #0
 800f2f0:	f43f aed8 	beq.w	800f0a4 <_strtod_l+0x43c>
 800f2f4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800f2f6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800f2f8:	2e00      	cmp	r6, #0
 800f2fa:	bfab      	itete	ge
 800f2fc:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800f2fe:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800f300:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800f302:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800f304:	bfac      	ite	ge
 800f306:	18f7      	addge	r7, r6, r3
 800f308:	1b9d      	sublt	r5, r3, r6
 800f30a:	9b04      	ldr	r3, [sp, #16]
 800f30c:	1af6      	subs	r6, r6, r3
 800f30e:	4416      	add	r6, r2
 800f310:	4b63      	ldr	r3, [pc, #396]	; (800f4a0 <_strtod_l+0x838>)
 800f312:	3e01      	subs	r6, #1
 800f314:	429e      	cmp	r6, r3
 800f316:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f31a:	f280 80af 	bge.w	800f47c <_strtod_l+0x814>
 800f31e:	1b9b      	subs	r3, r3, r6
 800f320:	2b1f      	cmp	r3, #31
 800f322:	eba2 0203 	sub.w	r2, r2, r3
 800f326:	f04f 0101 	mov.w	r1, #1
 800f32a:	f300 809b 	bgt.w	800f464 <_strtod_l+0x7fc>
 800f32e:	fa01 f303 	lsl.w	r3, r1, r3
 800f332:	930f      	str	r3, [sp, #60]	; 0x3c
 800f334:	2300      	movs	r3, #0
 800f336:	930a      	str	r3, [sp, #40]	; 0x28
 800f338:	18be      	adds	r6, r7, r2
 800f33a:	9b04      	ldr	r3, [sp, #16]
 800f33c:	42b7      	cmp	r7, r6
 800f33e:	4415      	add	r5, r2
 800f340:	441d      	add	r5, r3
 800f342:	463b      	mov	r3, r7
 800f344:	bfa8      	it	ge
 800f346:	4633      	movge	r3, r6
 800f348:	42ab      	cmp	r3, r5
 800f34a:	bfa8      	it	ge
 800f34c:	462b      	movge	r3, r5
 800f34e:	2b00      	cmp	r3, #0
 800f350:	bfc2      	ittt	gt
 800f352:	1af6      	subgt	r6, r6, r3
 800f354:	1aed      	subgt	r5, r5, r3
 800f356:	1aff      	subgt	r7, r7, r3
 800f358:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f35a:	b1bb      	cbz	r3, 800f38c <_strtod_l+0x724>
 800f35c:	4641      	mov	r1, r8
 800f35e:	461a      	mov	r2, r3
 800f360:	4648      	mov	r0, r9
 800f362:	f001 fe59 	bl	8011018 <__pow5mult>
 800f366:	4680      	mov	r8, r0
 800f368:	2800      	cmp	r0, #0
 800f36a:	f43f ae9b 	beq.w	800f0a4 <_strtod_l+0x43c>
 800f36e:	4601      	mov	r1, r0
 800f370:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800f372:	4648      	mov	r0, r9
 800f374:	f001 fdb9 	bl	8010eea <__multiply>
 800f378:	900c      	str	r0, [sp, #48]	; 0x30
 800f37a:	2800      	cmp	r0, #0
 800f37c:	f43f ae92 	beq.w	800f0a4 <_strtod_l+0x43c>
 800f380:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f382:	4648      	mov	r0, r9
 800f384:	f001 fcca 	bl	8010d1c <_Bfree>
 800f388:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f38a:	931c      	str	r3, [sp, #112]	; 0x70
 800f38c:	2e00      	cmp	r6, #0
 800f38e:	dc7a      	bgt.n	800f486 <_strtod_l+0x81e>
 800f390:	9b06      	ldr	r3, [sp, #24]
 800f392:	2b00      	cmp	r3, #0
 800f394:	dd08      	ble.n	800f3a8 <_strtod_l+0x740>
 800f396:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800f398:	9905      	ldr	r1, [sp, #20]
 800f39a:	4648      	mov	r0, r9
 800f39c:	f001 fe3c 	bl	8011018 <__pow5mult>
 800f3a0:	9005      	str	r0, [sp, #20]
 800f3a2:	2800      	cmp	r0, #0
 800f3a4:	f43f ae7e 	beq.w	800f0a4 <_strtod_l+0x43c>
 800f3a8:	2d00      	cmp	r5, #0
 800f3aa:	dd08      	ble.n	800f3be <_strtod_l+0x756>
 800f3ac:	462a      	mov	r2, r5
 800f3ae:	9905      	ldr	r1, [sp, #20]
 800f3b0:	4648      	mov	r0, r9
 800f3b2:	f001 fe7f 	bl	80110b4 <__lshift>
 800f3b6:	9005      	str	r0, [sp, #20]
 800f3b8:	2800      	cmp	r0, #0
 800f3ba:	f43f ae73 	beq.w	800f0a4 <_strtod_l+0x43c>
 800f3be:	2f00      	cmp	r7, #0
 800f3c0:	dd08      	ble.n	800f3d4 <_strtod_l+0x76c>
 800f3c2:	4641      	mov	r1, r8
 800f3c4:	463a      	mov	r2, r7
 800f3c6:	4648      	mov	r0, r9
 800f3c8:	f001 fe74 	bl	80110b4 <__lshift>
 800f3cc:	4680      	mov	r8, r0
 800f3ce:	2800      	cmp	r0, #0
 800f3d0:	f43f ae68 	beq.w	800f0a4 <_strtod_l+0x43c>
 800f3d4:	9a05      	ldr	r2, [sp, #20]
 800f3d6:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f3d8:	4648      	mov	r0, r9
 800f3da:	f001 fed9 	bl	8011190 <__mdiff>
 800f3de:	4604      	mov	r4, r0
 800f3e0:	2800      	cmp	r0, #0
 800f3e2:	f43f ae5f 	beq.w	800f0a4 <_strtod_l+0x43c>
 800f3e6:	68c3      	ldr	r3, [r0, #12]
 800f3e8:	930c      	str	r3, [sp, #48]	; 0x30
 800f3ea:	2300      	movs	r3, #0
 800f3ec:	60c3      	str	r3, [r0, #12]
 800f3ee:	4641      	mov	r1, r8
 800f3f0:	f001 feb4 	bl	801115c <__mcmp>
 800f3f4:	2800      	cmp	r0, #0
 800f3f6:	da55      	bge.n	800f4a4 <_strtod_l+0x83c>
 800f3f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f3fa:	b9e3      	cbnz	r3, 800f436 <_strtod_l+0x7ce>
 800f3fc:	f1ba 0f00 	cmp.w	sl, #0
 800f400:	d119      	bne.n	800f436 <_strtod_l+0x7ce>
 800f402:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f406:	b9b3      	cbnz	r3, 800f436 <_strtod_l+0x7ce>
 800f408:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f40c:	0d1b      	lsrs	r3, r3, #20
 800f40e:	051b      	lsls	r3, r3, #20
 800f410:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f414:	d90f      	bls.n	800f436 <_strtod_l+0x7ce>
 800f416:	6963      	ldr	r3, [r4, #20]
 800f418:	b913      	cbnz	r3, 800f420 <_strtod_l+0x7b8>
 800f41a:	6923      	ldr	r3, [r4, #16]
 800f41c:	2b01      	cmp	r3, #1
 800f41e:	dd0a      	ble.n	800f436 <_strtod_l+0x7ce>
 800f420:	4621      	mov	r1, r4
 800f422:	2201      	movs	r2, #1
 800f424:	4648      	mov	r0, r9
 800f426:	f001 fe45 	bl	80110b4 <__lshift>
 800f42a:	4641      	mov	r1, r8
 800f42c:	4604      	mov	r4, r0
 800f42e:	f001 fe95 	bl	801115c <__mcmp>
 800f432:	2800      	cmp	r0, #0
 800f434:	dc67      	bgt.n	800f506 <_strtod_l+0x89e>
 800f436:	9b04      	ldr	r3, [sp, #16]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d171      	bne.n	800f520 <_strtod_l+0x8b8>
 800f43c:	e63d      	b.n	800f0ba <_strtod_l+0x452>
 800f43e:	f018 0f01 	tst.w	r8, #1
 800f442:	d004      	beq.n	800f44e <_strtod_l+0x7e6>
 800f444:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f448:	f7f1 f8d6 	bl	80005f8 <__aeabi_dmul>
 800f44c:	2301      	movs	r3, #1
 800f44e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f452:	3508      	adds	r5, #8
 800f454:	e6e5      	b.n	800f222 <_strtod_l+0x5ba>
 800f456:	f04f 32ff 	mov.w	r2, #4294967295
 800f45a:	fa02 f303 	lsl.w	r3, r2, r3
 800f45e:	ea03 0a0a 	and.w	sl, r3, sl
 800f462:	e6ff      	b.n	800f264 <_strtod_l+0x5fc>
 800f464:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800f468:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800f46c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800f470:	36e2      	adds	r6, #226	; 0xe2
 800f472:	fa01 f306 	lsl.w	r3, r1, r6
 800f476:	930a      	str	r3, [sp, #40]	; 0x28
 800f478:	910f      	str	r1, [sp, #60]	; 0x3c
 800f47a:	e75d      	b.n	800f338 <_strtod_l+0x6d0>
 800f47c:	2300      	movs	r3, #0
 800f47e:	930a      	str	r3, [sp, #40]	; 0x28
 800f480:	2301      	movs	r3, #1
 800f482:	930f      	str	r3, [sp, #60]	; 0x3c
 800f484:	e758      	b.n	800f338 <_strtod_l+0x6d0>
 800f486:	4632      	mov	r2, r6
 800f488:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f48a:	4648      	mov	r0, r9
 800f48c:	f001 fe12 	bl	80110b4 <__lshift>
 800f490:	901c      	str	r0, [sp, #112]	; 0x70
 800f492:	2800      	cmp	r0, #0
 800f494:	f47f af7c 	bne.w	800f390 <_strtod_l+0x728>
 800f498:	e604      	b.n	800f0a4 <_strtod_l+0x43c>
 800f49a:	bf00      	nop
 800f49c:	080120a0 	.word	0x080120a0
 800f4a0:	fffffc02 	.word	0xfffffc02
 800f4a4:	465d      	mov	r5, fp
 800f4a6:	f040 8086 	bne.w	800f5b6 <_strtod_l+0x94e>
 800f4aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f4ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f4b0:	b32a      	cbz	r2, 800f4fe <_strtod_l+0x896>
 800f4b2:	4aaf      	ldr	r2, [pc, #700]	; (800f770 <_strtod_l+0xb08>)
 800f4b4:	4293      	cmp	r3, r2
 800f4b6:	d153      	bne.n	800f560 <_strtod_l+0x8f8>
 800f4b8:	9b04      	ldr	r3, [sp, #16]
 800f4ba:	4650      	mov	r0, sl
 800f4bc:	b1d3      	cbz	r3, 800f4f4 <_strtod_l+0x88c>
 800f4be:	4aad      	ldr	r2, [pc, #692]	; (800f774 <_strtod_l+0xb0c>)
 800f4c0:	402a      	ands	r2, r5
 800f4c2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800f4c6:	f04f 31ff 	mov.w	r1, #4294967295
 800f4ca:	d816      	bhi.n	800f4fa <_strtod_l+0x892>
 800f4cc:	0d12      	lsrs	r2, r2, #20
 800f4ce:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800f4d2:	fa01 f303 	lsl.w	r3, r1, r3
 800f4d6:	4298      	cmp	r0, r3
 800f4d8:	d142      	bne.n	800f560 <_strtod_l+0x8f8>
 800f4da:	4ba7      	ldr	r3, [pc, #668]	; (800f778 <_strtod_l+0xb10>)
 800f4dc:	429d      	cmp	r5, r3
 800f4de:	d102      	bne.n	800f4e6 <_strtod_l+0x87e>
 800f4e0:	3001      	adds	r0, #1
 800f4e2:	f43f addf 	beq.w	800f0a4 <_strtod_l+0x43c>
 800f4e6:	4ba3      	ldr	r3, [pc, #652]	; (800f774 <_strtod_l+0xb0c>)
 800f4e8:	402b      	ands	r3, r5
 800f4ea:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800f4ee:	f04f 0a00 	mov.w	sl, #0
 800f4f2:	e7a0      	b.n	800f436 <_strtod_l+0x7ce>
 800f4f4:	f04f 33ff 	mov.w	r3, #4294967295
 800f4f8:	e7ed      	b.n	800f4d6 <_strtod_l+0x86e>
 800f4fa:	460b      	mov	r3, r1
 800f4fc:	e7eb      	b.n	800f4d6 <_strtod_l+0x86e>
 800f4fe:	bb7b      	cbnz	r3, 800f560 <_strtod_l+0x8f8>
 800f500:	f1ba 0f00 	cmp.w	sl, #0
 800f504:	d12c      	bne.n	800f560 <_strtod_l+0x8f8>
 800f506:	9904      	ldr	r1, [sp, #16]
 800f508:	4a9a      	ldr	r2, [pc, #616]	; (800f774 <_strtod_l+0xb0c>)
 800f50a:	465b      	mov	r3, fp
 800f50c:	b1f1      	cbz	r1, 800f54c <_strtod_l+0x8e4>
 800f50e:	ea02 010b 	and.w	r1, r2, fp
 800f512:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800f516:	dc19      	bgt.n	800f54c <_strtod_l+0x8e4>
 800f518:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800f51c:	f77f ae5b 	ble.w	800f1d6 <_strtod_l+0x56e>
 800f520:	4a96      	ldr	r2, [pc, #600]	; (800f77c <_strtod_l+0xb14>)
 800f522:	2300      	movs	r3, #0
 800f524:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800f528:	4650      	mov	r0, sl
 800f52a:	4659      	mov	r1, fp
 800f52c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800f530:	f7f1 f862 	bl	80005f8 <__aeabi_dmul>
 800f534:	4682      	mov	sl, r0
 800f536:	468b      	mov	fp, r1
 800f538:	2900      	cmp	r1, #0
 800f53a:	f47f adbe 	bne.w	800f0ba <_strtod_l+0x452>
 800f53e:	2800      	cmp	r0, #0
 800f540:	f47f adbb 	bne.w	800f0ba <_strtod_l+0x452>
 800f544:	2322      	movs	r3, #34	; 0x22
 800f546:	f8c9 3000 	str.w	r3, [r9]
 800f54a:	e5b6      	b.n	800f0ba <_strtod_l+0x452>
 800f54c:	4013      	ands	r3, r2
 800f54e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f552:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f556:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f55a:	f04f 3aff 	mov.w	sl, #4294967295
 800f55e:	e76a      	b.n	800f436 <_strtod_l+0x7ce>
 800f560:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f562:	b193      	cbz	r3, 800f58a <_strtod_l+0x922>
 800f564:	422b      	tst	r3, r5
 800f566:	f43f af66 	beq.w	800f436 <_strtod_l+0x7ce>
 800f56a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f56c:	9a04      	ldr	r2, [sp, #16]
 800f56e:	4650      	mov	r0, sl
 800f570:	4659      	mov	r1, fp
 800f572:	b173      	cbz	r3, 800f592 <_strtod_l+0x92a>
 800f574:	f7ff fb5c 	bl	800ec30 <sulp>
 800f578:	4602      	mov	r2, r0
 800f57a:	460b      	mov	r3, r1
 800f57c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f580:	f7f0 fe84 	bl	800028c <__adddf3>
 800f584:	4682      	mov	sl, r0
 800f586:	468b      	mov	fp, r1
 800f588:	e755      	b.n	800f436 <_strtod_l+0x7ce>
 800f58a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f58c:	ea13 0f0a 	tst.w	r3, sl
 800f590:	e7e9      	b.n	800f566 <_strtod_l+0x8fe>
 800f592:	f7ff fb4d 	bl	800ec30 <sulp>
 800f596:	4602      	mov	r2, r0
 800f598:	460b      	mov	r3, r1
 800f59a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f59e:	f7f0 fe73 	bl	8000288 <__aeabi_dsub>
 800f5a2:	2200      	movs	r2, #0
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	4682      	mov	sl, r0
 800f5a8:	468b      	mov	fp, r1
 800f5aa:	f7f1 fa8d 	bl	8000ac8 <__aeabi_dcmpeq>
 800f5ae:	2800      	cmp	r0, #0
 800f5b0:	f47f ae11 	bne.w	800f1d6 <_strtod_l+0x56e>
 800f5b4:	e73f      	b.n	800f436 <_strtod_l+0x7ce>
 800f5b6:	4641      	mov	r1, r8
 800f5b8:	4620      	mov	r0, r4
 800f5ba:	f001 ff0c 	bl	80113d6 <__ratio>
 800f5be:	ec57 6b10 	vmov	r6, r7, d0
 800f5c2:	2200      	movs	r2, #0
 800f5c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f5c8:	ee10 0a10 	vmov	r0, s0
 800f5cc:	4639      	mov	r1, r7
 800f5ce:	f7f1 fa8f 	bl	8000af0 <__aeabi_dcmple>
 800f5d2:	2800      	cmp	r0, #0
 800f5d4:	d077      	beq.n	800f6c6 <_strtod_l+0xa5e>
 800f5d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d04a      	beq.n	800f672 <_strtod_l+0xa0a>
 800f5dc:	4b68      	ldr	r3, [pc, #416]	; (800f780 <_strtod_l+0xb18>)
 800f5de:	2200      	movs	r2, #0
 800f5e0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800f5e4:	4f66      	ldr	r7, [pc, #408]	; (800f780 <_strtod_l+0xb18>)
 800f5e6:	2600      	movs	r6, #0
 800f5e8:	4b62      	ldr	r3, [pc, #392]	; (800f774 <_strtod_l+0xb0c>)
 800f5ea:	402b      	ands	r3, r5
 800f5ec:	930f      	str	r3, [sp, #60]	; 0x3c
 800f5ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f5f0:	4b64      	ldr	r3, [pc, #400]	; (800f784 <_strtod_l+0xb1c>)
 800f5f2:	429a      	cmp	r2, r3
 800f5f4:	f040 80ce 	bne.w	800f794 <_strtod_l+0xb2c>
 800f5f8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f5fc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f600:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800f604:	ec4b ab10 	vmov	d0, sl, fp
 800f608:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800f60c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800f610:	f001 fe1c 	bl	801124c <__ulp>
 800f614:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f618:	ec53 2b10 	vmov	r2, r3, d0
 800f61c:	f7f0 ffec 	bl	80005f8 <__aeabi_dmul>
 800f620:	4652      	mov	r2, sl
 800f622:	465b      	mov	r3, fp
 800f624:	f7f0 fe32 	bl	800028c <__adddf3>
 800f628:	460b      	mov	r3, r1
 800f62a:	4952      	ldr	r1, [pc, #328]	; (800f774 <_strtod_l+0xb0c>)
 800f62c:	4a56      	ldr	r2, [pc, #344]	; (800f788 <_strtod_l+0xb20>)
 800f62e:	4019      	ands	r1, r3
 800f630:	4291      	cmp	r1, r2
 800f632:	4682      	mov	sl, r0
 800f634:	d95b      	bls.n	800f6ee <_strtod_l+0xa86>
 800f636:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f638:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800f63c:	4293      	cmp	r3, r2
 800f63e:	d103      	bne.n	800f648 <_strtod_l+0x9e0>
 800f640:	9b08      	ldr	r3, [sp, #32]
 800f642:	3301      	adds	r3, #1
 800f644:	f43f ad2e 	beq.w	800f0a4 <_strtod_l+0x43c>
 800f648:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800f778 <_strtod_l+0xb10>
 800f64c:	f04f 3aff 	mov.w	sl, #4294967295
 800f650:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f652:	4648      	mov	r0, r9
 800f654:	f001 fb62 	bl	8010d1c <_Bfree>
 800f658:	9905      	ldr	r1, [sp, #20]
 800f65a:	4648      	mov	r0, r9
 800f65c:	f001 fb5e 	bl	8010d1c <_Bfree>
 800f660:	4641      	mov	r1, r8
 800f662:	4648      	mov	r0, r9
 800f664:	f001 fb5a 	bl	8010d1c <_Bfree>
 800f668:	4621      	mov	r1, r4
 800f66a:	4648      	mov	r0, r9
 800f66c:	f001 fb56 	bl	8010d1c <_Bfree>
 800f670:	e619      	b.n	800f2a6 <_strtod_l+0x63e>
 800f672:	f1ba 0f00 	cmp.w	sl, #0
 800f676:	d11a      	bne.n	800f6ae <_strtod_l+0xa46>
 800f678:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f67c:	b9eb      	cbnz	r3, 800f6ba <_strtod_l+0xa52>
 800f67e:	2200      	movs	r2, #0
 800f680:	4b3f      	ldr	r3, [pc, #252]	; (800f780 <_strtod_l+0xb18>)
 800f682:	4630      	mov	r0, r6
 800f684:	4639      	mov	r1, r7
 800f686:	f7f1 fa29 	bl	8000adc <__aeabi_dcmplt>
 800f68a:	b9c8      	cbnz	r0, 800f6c0 <_strtod_l+0xa58>
 800f68c:	4630      	mov	r0, r6
 800f68e:	4639      	mov	r1, r7
 800f690:	2200      	movs	r2, #0
 800f692:	4b3e      	ldr	r3, [pc, #248]	; (800f78c <_strtod_l+0xb24>)
 800f694:	f7f0 ffb0 	bl	80005f8 <__aeabi_dmul>
 800f698:	4606      	mov	r6, r0
 800f69a:	460f      	mov	r7, r1
 800f69c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800f6a0:	9618      	str	r6, [sp, #96]	; 0x60
 800f6a2:	9319      	str	r3, [sp, #100]	; 0x64
 800f6a4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800f6a8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800f6ac:	e79c      	b.n	800f5e8 <_strtod_l+0x980>
 800f6ae:	f1ba 0f01 	cmp.w	sl, #1
 800f6b2:	d102      	bne.n	800f6ba <_strtod_l+0xa52>
 800f6b4:	2d00      	cmp	r5, #0
 800f6b6:	f43f ad8e 	beq.w	800f1d6 <_strtod_l+0x56e>
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	4b34      	ldr	r3, [pc, #208]	; (800f790 <_strtod_l+0xb28>)
 800f6be:	e78f      	b.n	800f5e0 <_strtod_l+0x978>
 800f6c0:	2600      	movs	r6, #0
 800f6c2:	4f32      	ldr	r7, [pc, #200]	; (800f78c <_strtod_l+0xb24>)
 800f6c4:	e7ea      	b.n	800f69c <_strtod_l+0xa34>
 800f6c6:	4b31      	ldr	r3, [pc, #196]	; (800f78c <_strtod_l+0xb24>)
 800f6c8:	4630      	mov	r0, r6
 800f6ca:	4639      	mov	r1, r7
 800f6cc:	2200      	movs	r2, #0
 800f6ce:	f7f0 ff93 	bl	80005f8 <__aeabi_dmul>
 800f6d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f6d4:	4606      	mov	r6, r0
 800f6d6:	460f      	mov	r7, r1
 800f6d8:	b933      	cbnz	r3, 800f6e8 <_strtod_l+0xa80>
 800f6da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f6de:	9010      	str	r0, [sp, #64]	; 0x40
 800f6e0:	9311      	str	r3, [sp, #68]	; 0x44
 800f6e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f6e6:	e7df      	b.n	800f6a8 <_strtod_l+0xa40>
 800f6e8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800f6ec:	e7f9      	b.n	800f6e2 <_strtod_l+0xa7a>
 800f6ee:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800f6f2:	9b04      	ldr	r3, [sp, #16]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d1ab      	bne.n	800f650 <_strtod_l+0x9e8>
 800f6f8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f6fc:	0d1b      	lsrs	r3, r3, #20
 800f6fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f700:	051b      	lsls	r3, r3, #20
 800f702:	429a      	cmp	r2, r3
 800f704:	465d      	mov	r5, fp
 800f706:	d1a3      	bne.n	800f650 <_strtod_l+0x9e8>
 800f708:	4639      	mov	r1, r7
 800f70a:	4630      	mov	r0, r6
 800f70c:	f7f1 fa24 	bl	8000b58 <__aeabi_d2iz>
 800f710:	f7f0 ff08 	bl	8000524 <__aeabi_i2d>
 800f714:	460b      	mov	r3, r1
 800f716:	4602      	mov	r2, r0
 800f718:	4639      	mov	r1, r7
 800f71a:	4630      	mov	r0, r6
 800f71c:	f7f0 fdb4 	bl	8000288 <__aeabi_dsub>
 800f720:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f722:	4606      	mov	r6, r0
 800f724:	460f      	mov	r7, r1
 800f726:	b933      	cbnz	r3, 800f736 <_strtod_l+0xace>
 800f728:	f1ba 0f00 	cmp.w	sl, #0
 800f72c:	d103      	bne.n	800f736 <_strtod_l+0xace>
 800f72e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800f732:	2d00      	cmp	r5, #0
 800f734:	d06d      	beq.n	800f812 <_strtod_l+0xbaa>
 800f736:	a30a      	add	r3, pc, #40	; (adr r3, 800f760 <_strtod_l+0xaf8>)
 800f738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f73c:	4630      	mov	r0, r6
 800f73e:	4639      	mov	r1, r7
 800f740:	f7f1 f9cc 	bl	8000adc <__aeabi_dcmplt>
 800f744:	2800      	cmp	r0, #0
 800f746:	f47f acb8 	bne.w	800f0ba <_strtod_l+0x452>
 800f74a:	a307      	add	r3, pc, #28	; (adr r3, 800f768 <_strtod_l+0xb00>)
 800f74c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f750:	4630      	mov	r0, r6
 800f752:	4639      	mov	r1, r7
 800f754:	f7f1 f9e0 	bl	8000b18 <__aeabi_dcmpgt>
 800f758:	2800      	cmp	r0, #0
 800f75a:	f43f af79 	beq.w	800f650 <_strtod_l+0x9e8>
 800f75e:	e4ac      	b.n	800f0ba <_strtod_l+0x452>
 800f760:	94a03595 	.word	0x94a03595
 800f764:	3fdfffff 	.word	0x3fdfffff
 800f768:	35afe535 	.word	0x35afe535
 800f76c:	3fe00000 	.word	0x3fe00000
 800f770:	000fffff 	.word	0x000fffff
 800f774:	7ff00000 	.word	0x7ff00000
 800f778:	7fefffff 	.word	0x7fefffff
 800f77c:	39500000 	.word	0x39500000
 800f780:	3ff00000 	.word	0x3ff00000
 800f784:	7fe00000 	.word	0x7fe00000
 800f788:	7c9fffff 	.word	0x7c9fffff
 800f78c:	3fe00000 	.word	0x3fe00000
 800f790:	bff00000 	.word	0xbff00000
 800f794:	9b04      	ldr	r3, [sp, #16]
 800f796:	b333      	cbz	r3, 800f7e6 <_strtod_l+0xb7e>
 800f798:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f79a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f79e:	d822      	bhi.n	800f7e6 <_strtod_l+0xb7e>
 800f7a0:	a327      	add	r3, pc, #156	; (adr r3, 800f840 <_strtod_l+0xbd8>)
 800f7a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7a6:	4630      	mov	r0, r6
 800f7a8:	4639      	mov	r1, r7
 800f7aa:	f7f1 f9a1 	bl	8000af0 <__aeabi_dcmple>
 800f7ae:	b1a0      	cbz	r0, 800f7da <_strtod_l+0xb72>
 800f7b0:	4639      	mov	r1, r7
 800f7b2:	4630      	mov	r0, r6
 800f7b4:	f7f1 f9f8 	bl	8000ba8 <__aeabi_d2uiz>
 800f7b8:	2800      	cmp	r0, #0
 800f7ba:	bf08      	it	eq
 800f7bc:	2001      	moveq	r0, #1
 800f7be:	f7f0 fea1 	bl	8000504 <__aeabi_ui2d>
 800f7c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f7c4:	4606      	mov	r6, r0
 800f7c6:	460f      	mov	r7, r1
 800f7c8:	bb03      	cbnz	r3, 800f80c <_strtod_l+0xba4>
 800f7ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f7ce:	9012      	str	r0, [sp, #72]	; 0x48
 800f7d0:	9313      	str	r3, [sp, #76]	; 0x4c
 800f7d2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800f7d6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800f7da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f7dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f7de:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800f7e2:	1a9b      	subs	r3, r3, r2
 800f7e4:	930b      	str	r3, [sp, #44]	; 0x2c
 800f7e6:	ed9d 0b08 	vldr	d0, [sp, #32]
 800f7ea:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800f7ee:	f001 fd2d 	bl	801124c <__ulp>
 800f7f2:	4650      	mov	r0, sl
 800f7f4:	ec53 2b10 	vmov	r2, r3, d0
 800f7f8:	4659      	mov	r1, fp
 800f7fa:	f7f0 fefd 	bl	80005f8 <__aeabi_dmul>
 800f7fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f802:	f7f0 fd43 	bl	800028c <__adddf3>
 800f806:	4682      	mov	sl, r0
 800f808:	468b      	mov	fp, r1
 800f80a:	e772      	b.n	800f6f2 <_strtod_l+0xa8a>
 800f80c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800f810:	e7df      	b.n	800f7d2 <_strtod_l+0xb6a>
 800f812:	a30d      	add	r3, pc, #52	; (adr r3, 800f848 <_strtod_l+0xbe0>)
 800f814:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f818:	f7f1 f960 	bl	8000adc <__aeabi_dcmplt>
 800f81c:	e79c      	b.n	800f758 <_strtod_l+0xaf0>
 800f81e:	2300      	movs	r3, #0
 800f820:	930d      	str	r3, [sp, #52]	; 0x34
 800f822:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f824:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f826:	6013      	str	r3, [r2, #0]
 800f828:	f7ff ba61 	b.w	800ecee <_strtod_l+0x86>
 800f82c:	2b65      	cmp	r3, #101	; 0x65
 800f82e:	f04f 0200 	mov.w	r2, #0
 800f832:	f43f ab4e 	beq.w	800eed2 <_strtod_l+0x26a>
 800f836:	2101      	movs	r1, #1
 800f838:	4614      	mov	r4, r2
 800f83a:	9104      	str	r1, [sp, #16]
 800f83c:	f7ff bacb 	b.w	800edd6 <_strtod_l+0x16e>
 800f840:	ffc00000 	.word	0xffc00000
 800f844:	41dfffff 	.word	0x41dfffff
 800f848:	94a03595 	.word	0x94a03595
 800f84c:	3fcfffff 	.word	0x3fcfffff

0800f850 <_strtod_r>:
 800f850:	4b05      	ldr	r3, [pc, #20]	; (800f868 <_strtod_r+0x18>)
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	b410      	push	{r4}
 800f856:	6a1b      	ldr	r3, [r3, #32]
 800f858:	4c04      	ldr	r4, [pc, #16]	; (800f86c <_strtod_r+0x1c>)
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	bf08      	it	eq
 800f85e:	4623      	moveq	r3, r4
 800f860:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f864:	f7ff ba00 	b.w	800ec68 <_strtod_l>
 800f868:	20000184 	.word	0x20000184
 800f86c:	200001e8 	.word	0x200001e8

0800f870 <_strtol_l.isra.0>:
 800f870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f874:	4680      	mov	r8, r0
 800f876:	4689      	mov	r9, r1
 800f878:	4692      	mov	sl, r2
 800f87a:	461e      	mov	r6, r3
 800f87c:	460f      	mov	r7, r1
 800f87e:	463d      	mov	r5, r7
 800f880:	9808      	ldr	r0, [sp, #32]
 800f882:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f886:	f001 f9ed 	bl	8010c64 <__locale_ctype_ptr_l>
 800f88a:	4420      	add	r0, r4
 800f88c:	7843      	ldrb	r3, [r0, #1]
 800f88e:	f013 0308 	ands.w	r3, r3, #8
 800f892:	d132      	bne.n	800f8fa <_strtol_l.isra.0+0x8a>
 800f894:	2c2d      	cmp	r4, #45	; 0x2d
 800f896:	d132      	bne.n	800f8fe <_strtol_l.isra.0+0x8e>
 800f898:	787c      	ldrb	r4, [r7, #1]
 800f89a:	1cbd      	adds	r5, r7, #2
 800f89c:	2201      	movs	r2, #1
 800f89e:	2e00      	cmp	r6, #0
 800f8a0:	d05d      	beq.n	800f95e <_strtol_l.isra.0+0xee>
 800f8a2:	2e10      	cmp	r6, #16
 800f8a4:	d109      	bne.n	800f8ba <_strtol_l.isra.0+0x4a>
 800f8a6:	2c30      	cmp	r4, #48	; 0x30
 800f8a8:	d107      	bne.n	800f8ba <_strtol_l.isra.0+0x4a>
 800f8aa:	782b      	ldrb	r3, [r5, #0]
 800f8ac:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f8b0:	2b58      	cmp	r3, #88	; 0x58
 800f8b2:	d14f      	bne.n	800f954 <_strtol_l.isra.0+0xe4>
 800f8b4:	786c      	ldrb	r4, [r5, #1]
 800f8b6:	2610      	movs	r6, #16
 800f8b8:	3502      	adds	r5, #2
 800f8ba:	2a00      	cmp	r2, #0
 800f8bc:	bf14      	ite	ne
 800f8be:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800f8c2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800f8c6:	2700      	movs	r7, #0
 800f8c8:	fbb1 fcf6 	udiv	ip, r1, r6
 800f8cc:	4638      	mov	r0, r7
 800f8ce:	fb06 1e1c 	mls	lr, r6, ip, r1
 800f8d2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800f8d6:	2b09      	cmp	r3, #9
 800f8d8:	d817      	bhi.n	800f90a <_strtol_l.isra.0+0x9a>
 800f8da:	461c      	mov	r4, r3
 800f8dc:	42a6      	cmp	r6, r4
 800f8de:	dd23      	ble.n	800f928 <_strtol_l.isra.0+0xb8>
 800f8e0:	1c7b      	adds	r3, r7, #1
 800f8e2:	d007      	beq.n	800f8f4 <_strtol_l.isra.0+0x84>
 800f8e4:	4584      	cmp	ip, r0
 800f8e6:	d31c      	bcc.n	800f922 <_strtol_l.isra.0+0xb2>
 800f8e8:	d101      	bne.n	800f8ee <_strtol_l.isra.0+0x7e>
 800f8ea:	45a6      	cmp	lr, r4
 800f8ec:	db19      	blt.n	800f922 <_strtol_l.isra.0+0xb2>
 800f8ee:	fb00 4006 	mla	r0, r0, r6, r4
 800f8f2:	2701      	movs	r7, #1
 800f8f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f8f8:	e7eb      	b.n	800f8d2 <_strtol_l.isra.0+0x62>
 800f8fa:	462f      	mov	r7, r5
 800f8fc:	e7bf      	b.n	800f87e <_strtol_l.isra.0+0xe>
 800f8fe:	2c2b      	cmp	r4, #43	; 0x2b
 800f900:	bf04      	itt	eq
 800f902:	1cbd      	addeq	r5, r7, #2
 800f904:	787c      	ldrbeq	r4, [r7, #1]
 800f906:	461a      	mov	r2, r3
 800f908:	e7c9      	b.n	800f89e <_strtol_l.isra.0+0x2e>
 800f90a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800f90e:	2b19      	cmp	r3, #25
 800f910:	d801      	bhi.n	800f916 <_strtol_l.isra.0+0xa6>
 800f912:	3c37      	subs	r4, #55	; 0x37
 800f914:	e7e2      	b.n	800f8dc <_strtol_l.isra.0+0x6c>
 800f916:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800f91a:	2b19      	cmp	r3, #25
 800f91c:	d804      	bhi.n	800f928 <_strtol_l.isra.0+0xb8>
 800f91e:	3c57      	subs	r4, #87	; 0x57
 800f920:	e7dc      	b.n	800f8dc <_strtol_l.isra.0+0x6c>
 800f922:	f04f 37ff 	mov.w	r7, #4294967295
 800f926:	e7e5      	b.n	800f8f4 <_strtol_l.isra.0+0x84>
 800f928:	1c7b      	adds	r3, r7, #1
 800f92a:	d108      	bne.n	800f93e <_strtol_l.isra.0+0xce>
 800f92c:	2322      	movs	r3, #34	; 0x22
 800f92e:	f8c8 3000 	str.w	r3, [r8]
 800f932:	4608      	mov	r0, r1
 800f934:	f1ba 0f00 	cmp.w	sl, #0
 800f938:	d107      	bne.n	800f94a <_strtol_l.isra.0+0xda>
 800f93a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f93e:	b102      	cbz	r2, 800f942 <_strtol_l.isra.0+0xd2>
 800f940:	4240      	negs	r0, r0
 800f942:	f1ba 0f00 	cmp.w	sl, #0
 800f946:	d0f8      	beq.n	800f93a <_strtol_l.isra.0+0xca>
 800f948:	b10f      	cbz	r7, 800f94e <_strtol_l.isra.0+0xde>
 800f94a:	f105 39ff 	add.w	r9, r5, #4294967295
 800f94e:	f8ca 9000 	str.w	r9, [sl]
 800f952:	e7f2      	b.n	800f93a <_strtol_l.isra.0+0xca>
 800f954:	2430      	movs	r4, #48	; 0x30
 800f956:	2e00      	cmp	r6, #0
 800f958:	d1af      	bne.n	800f8ba <_strtol_l.isra.0+0x4a>
 800f95a:	2608      	movs	r6, #8
 800f95c:	e7ad      	b.n	800f8ba <_strtol_l.isra.0+0x4a>
 800f95e:	2c30      	cmp	r4, #48	; 0x30
 800f960:	d0a3      	beq.n	800f8aa <_strtol_l.isra.0+0x3a>
 800f962:	260a      	movs	r6, #10
 800f964:	e7a9      	b.n	800f8ba <_strtol_l.isra.0+0x4a>
	...

0800f968 <_strtol_r>:
 800f968:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f96a:	4c06      	ldr	r4, [pc, #24]	; (800f984 <_strtol_r+0x1c>)
 800f96c:	4d06      	ldr	r5, [pc, #24]	; (800f988 <_strtol_r+0x20>)
 800f96e:	6824      	ldr	r4, [r4, #0]
 800f970:	6a24      	ldr	r4, [r4, #32]
 800f972:	2c00      	cmp	r4, #0
 800f974:	bf08      	it	eq
 800f976:	462c      	moveq	r4, r5
 800f978:	9400      	str	r4, [sp, #0]
 800f97a:	f7ff ff79 	bl	800f870 <_strtol_l.isra.0>
 800f97e:	b003      	add	sp, #12
 800f980:	bd30      	pop	{r4, r5, pc}
 800f982:	bf00      	nop
 800f984:	20000184 	.word	0x20000184
 800f988:	200001e8 	.word	0x200001e8

0800f98c <quorem>:
 800f98c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f990:	6903      	ldr	r3, [r0, #16]
 800f992:	690c      	ldr	r4, [r1, #16]
 800f994:	42a3      	cmp	r3, r4
 800f996:	4680      	mov	r8, r0
 800f998:	f2c0 8082 	blt.w	800faa0 <quorem+0x114>
 800f99c:	3c01      	subs	r4, #1
 800f99e:	f101 0714 	add.w	r7, r1, #20
 800f9a2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800f9a6:	f100 0614 	add.w	r6, r0, #20
 800f9aa:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800f9ae:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800f9b2:	eb06 030c 	add.w	r3, r6, ip
 800f9b6:	3501      	adds	r5, #1
 800f9b8:	eb07 090c 	add.w	r9, r7, ip
 800f9bc:	9301      	str	r3, [sp, #4]
 800f9be:	fbb0 f5f5 	udiv	r5, r0, r5
 800f9c2:	b395      	cbz	r5, 800fa2a <quorem+0x9e>
 800f9c4:	f04f 0a00 	mov.w	sl, #0
 800f9c8:	4638      	mov	r0, r7
 800f9ca:	46b6      	mov	lr, r6
 800f9cc:	46d3      	mov	fp, sl
 800f9ce:	f850 2b04 	ldr.w	r2, [r0], #4
 800f9d2:	b293      	uxth	r3, r2
 800f9d4:	fb05 a303 	mla	r3, r5, r3, sl
 800f9d8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f9dc:	b29b      	uxth	r3, r3
 800f9de:	ebab 0303 	sub.w	r3, fp, r3
 800f9e2:	0c12      	lsrs	r2, r2, #16
 800f9e4:	f8de b000 	ldr.w	fp, [lr]
 800f9e8:	fb05 a202 	mla	r2, r5, r2, sl
 800f9ec:	fa13 f38b 	uxtah	r3, r3, fp
 800f9f0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800f9f4:	fa1f fb82 	uxth.w	fp, r2
 800f9f8:	f8de 2000 	ldr.w	r2, [lr]
 800f9fc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800fa00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fa04:	b29b      	uxth	r3, r3
 800fa06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fa0a:	4581      	cmp	r9, r0
 800fa0c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800fa10:	f84e 3b04 	str.w	r3, [lr], #4
 800fa14:	d2db      	bcs.n	800f9ce <quorem+0x42>
 800fa16:	f856 300c 	ldr.w	r3, [r6, ip]
 800fa1a:	b933      	cbnz	r3, 800fa2a <quorem+0x9e>
 800fa1c:	9b01      	ldr	r3, [sp, #4]
 800fa1e:	3b04      	subs	r3, #4
 800fa20:	429e      	cmp	r6, r3
 800fa22:	461a      	mov	r2, r3
 800fa24:	d330      	bcc.n	800fa88 <quorem+0xfc>
 800fa26:	f8c8 4010 	str.w	r4, [r8, #16]
 800fa2a:	4640      	mov	r0, r8
 800fa2c:	f001 fb96 	bl	801115c <__mcmp>
 800fa30:	2800      	cmp	r0, #0
 800fa32:	db25      	blt.n	800fa80 <quorem+0xf4>
 800fa34:	3501      	adds	r5, #1
 800fa36:	4630      	mov	r0, r6
 800fa38:	f04f 0c00 	mov.w	ip, #0
 800fa3c:	f857 2b04 	ldr.w	r2, [r7], #4
 800fa40:	f8d0 e000 	ldr.w	lr, [r0]
 800fa44:	b293      	uxth	r3, r2
 800fa46:	ebac 0303 	sub.w	r3, ip, r3
 800fa4a:	0c12      	lsrs	r2, r2, #16
 800fa4c:	fa13 f38e 	uxtah	r3, r3, lr
 800fa50:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800fa54:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fa58:	b29b      	uxth	r3, r3
 800fa5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fa5e:	45b9      	cmp	r9, r7
 800fa60:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800fa64:	f840 3b04 	str.w	r3, [r0], #4
 800fa68:	d2e8      	bcs.n	800fa3c <quorem+0xb0>
 800fa6a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800fa6e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800fa72:	b92a      	cbnz	r2, 800fa80 <quorem+0xf4>
 800fa74:	3b04      	subs	r3, #4
 800fa76:	429e      	cmp	r6, r3
 800fa78:	461a      	mov	r2, r3
 800fa7a:	d30b      	bcc.n	800fa94 <quorem+0x108>
 800fa7c:	f8c8 4010 	str.w	r4, [r8, #16]
 800fa80:	4628      	mov	r0, r5
 800fa82:	b003      	add	sp, #12
 800fa84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa88:	6812      	ldr	r2, [r2, #0]
 800fa8a:	3b04      	subs	r3, #4
 800fa8c:	2a00      	cmp	r2, #0
 800fa8e:	d1ca      	bne.n	800fa26 <quorem+0x9a>
 800fa90:	3c01      	subs	r4, #1
 800fa92:	e7c5      	b.n	800fa20 <quorem+0x94>
 800fa94:	6812      	ldr	r2, [r2, #0]
 800fa96:	3b04      	subs	r3, #4
 800fa98:	2a00      	cmp	r2, #0
 800fa9a:	d1ef      	bne.n	800fa7c <quorem+0xf0>
 800fa9c:	3c01      	subs	r4, #1
 800fa9e:	e7ea      	b.n	800fa76 <quorem+0xea>
 800faa0:	2000      	movs	r0, #0
 800faa2:	e7ee      	b.n	800fa82 <quorem+0xf6>
 800faa4:	0000      	movs	r0, r0
	...

0800faa8 <_dtoa_r>:
 800faa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faac:	ec57 6b10 	vmov	r6, r7, d0
 800fab0:	b097      	sub	sp, #92	; 0x5c
 800fab2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fab4:	9106      	str	r1, [sp, #24]
 800fab6:	4604      	mov	r4, r0
 800fab8:	920b      	str	r2, [sp, #44]	; 0x2c
 800faba:	9312      	str	r3, [sp, #72]	; 0x48
 800fabc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fac0:	e9cd 6700 	strd	r6, r7, [sp]
 800fac4:	b93d      	cbnz	r5, 800fad6 <_dtoa_r+0x2e>
 800fac6:	2010      	movs	r0, #16
 800fac8:	f7fe f972 	bl	800ddb0 <malloc>
 800facc:	6260      	str	r0, [r4, #36]	; 0x24
 800face:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fad2:	6005      	str	r5, [r0, #0]
 800fad4:	60c5      	str	r5, [r0, #12]
 800fad6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fad8:	6819      	ldr	r1, [r3, #0]
 800fada:	b151      	cbz	r1, 800faf2 <_dtoa_r+0x4a>
 800fadc:	685a      	ldr	r2, [r3, #4]
 800fade:	604a      	str	r2, [r1, #4]
 800fae0:	2301      	movs	r3, #1
 800fae2:	4093      	lsls	r3, r2
 800fae4:	608b      	str	r3, [r1, #8]
 800fae6:	4620      	mov	r0, r4
 800fae8:	f001 f918 	bl	8010d1c <_Bfree>
 800faec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800faee:	2200      	movs	r2, #0
 800faf0:	601a      	str	r2, [r3, #0]
 800faf2:	1e3b      	subs	r3, r7, #0
 800faf4:	bfbb      	ittet	lt
 800faf6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800fafa:	9301      	strlt	r3, [sp, #4]
 800fafc:	2300      	movge	r3, #0
 800fafe:	2201      	movlt	r2, #1
 800fb00:	bfac      	ite	ge
 800fb02:	f8c8 3000 	strge.w	r3, [r8]
 800fb06:	f8c8 2000 	strlt.w	r2, [r8]
 800fb0a:	4baf      	ldr	r3, [pc, #700]	; (800fdc8 <_dtoa_r+0x320>)
 800fb0c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800fb10:	ea33 0308 	bics.w	r3, r3, r8
 800fb14:	d114      	bne.n	800fb40 <_dtoa_r+0x98>
 800fb16:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fb18:	f242 730f 	movw	r3, #9999	; 0x270f
 800fb1c:	6013      	str	r3, [r2, #0]
 800fb1e:	9b00      	ldr	r3, [sp, #0]
 800fb20:	b923      	cbnz	r3, 800fb2c <_dtoa_r+0x84>
 800fb22:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800fb26:	2800      	cmp	r0, #0
 800fb28:	f000 8542 	beq.w	80105b0 <_dtoa_r+0xb08>
 800fb2c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fb2e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800fddc <_dtoa_r+0x334>
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	f000 8544 	beq.w	80105c0 <_dtoa_r+0xb18>
 800fb38:	f10b 0303 	add.w	r3, fp, #3
 800fb3c:	f000 bd3e 	b.w	80105bc <_dtoa_r+0xb14>
 800fb40:	e9dd 6700 	ldrd	r6, r7, [sp]
 800fb44:	2200      	movs	r2, #0
 800fb46:	2300      	movs	r3, #0
 800fb48:	4630      	mov	r0, r6
 800fb4a:	4639      	mov	r1, r7
 800fb4c:	f7f0 ffbc 	bl	8000ac8 <__aeabi_dcmpeq>
 800fb50:	4681      	mov	r9, r0
 800fb52:	b168      	cbz	r0, 800fb70 <_dtoa_r+0xc8>
 800fb54:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fb56:	2301      	movs	r3, #1
 800fb58:	6013      	str	r3, [r2, #0]
 800fb5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	f000 8524 	beq.w	80105aa <_dtoa_r+0xb02>
 800fb62:	4b9a      	ldr	r3, [pc, #616]	; (800fdcc <_dtoa_r+0x324>)
 800fb64:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fb66:	f103 3bff 	add.w	fp, r3, #4294967295
 800fb6a:	6013      	str	r3, [r2, #0]
 800fb6c:	f000 bd28 	b.w	80105c0 <_dtoa_r+0xb18>
 800fb70:	aa14      	add	r2, sp, #80	; 0x50
 800fb72:	a915      	add	r1, sp, #84	; 0x54
 800fb74:	ec47 6b10 	vmov	d0, r6, r7
 800fb78:	4620      	mov	r0, r4
 800fb7a:	f001 fbdd 	bl	8011338 <__d2b>
 800fb7e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800fb82:	9004      	str	r0, [sp, #16]
 800fb84:	2d00      	cmp	r5, #0
 800fb86:	d07c      	beq.n	800fc82 <_dtoa_r+0x1da>
 800fb88:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fb8c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800fb90:	46b2      	mov	sl, r6
 800fb92:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800fb96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800fb9a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800fb9e:	2200      	movs	r2, #0
 800fba0:	4b8b      	ldr	r3, [pc, #556]	; (800fdd0 <_dtoa_r+0x328>)
 800fba2:	4650      	mov	r0, sl
 800fba4:	4659      	mov	r1, fp
 800fba6:	f7f0 fb6f 	bl	8000288 <__aeabi_dsub>
 800fbaa:	a381      	add	r3, pc, #516	; (adr r3, 800fdb0 <_dtoa_r+0x308>)
 800fbac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbb0:	f7f0 fd22 	bl	80005f8 <__aeabi_dmul>
 800fbb4:	a380      	add	r3, pc, #512	; (adr r3, 800fdb8 <_dtoa_r+0x310>)
 800fbb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbba:	f7f0 fb67 	bl	800028c <__adddf3>
 800fbbe:	4606      	mov	r6, r0
 800fbc0:	4628      	mov	r0, r5
 800fbc2:	460f      	mov	r7, r1
 800fbc4:	f7f0 fcae 	bl	8000524 <__aeabi_i2d>
 800fbc8:	a37d      	add	r3, pc, #500	; (adr r3, 800fdc0 <_dtoa_r+0x318>)
 800fbca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbce:	f7f0 fd13 	bl	80005f8 <__aeabi_dmul>
 800fbd2:	4602      	mov	r2, r0
 800fbd4:	460b      	mov	r3, r1
 800fbd6:	4630      	mov	r0, r6
 800fbd8:	4639      	mov	r1, r7
 800fbda:	f7f0 fb57 	bl	800028c <__adddf3>
 800fbde:	4606      	mov	r6, r0
 800fbe0:	460f      	mov	r7, r1
 800fbe2:	f7f0 ffb9 	bl	8000b58 <__aeabi_d2iz>
 800fbe6:	2200      	movs	r2, #0
 800fbe8:	4682      	mov	sl, r0
 800fbea:	2300      	movs	r3, #0
 800fbec:	4630      	mov	r0, r6
 800fbee:	4639      	mov	r1, r7
 800fbf0:	f7f0 ff74 	bl	8000adc <__aeabi_dcmplt>
 800fbf4:	b148      	cbz	r0, 800fc0a <_dtoa_r+0x162>
 800fbf6:	4650      	mov	r0, sl
 800fbf8:	f7f0 fc94 	bl	8000524 <__aeabi_i2d>
 800fbfc:	4632      	mov	r2, r6
 800fbfe:	463b      	mov	r3, r7
 800fc00:	f7f0 ff62 	bl	8000ac8 <__aeabi_dcmpeq>
 800fc04:	b908      	cbnz	r0, 800fc0a <_dtoa_r+0x162>
 800fc06:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fc0a:	f1ba 0f16 	cmp.w	sl, #22
 800fc0e:	d859      	bhi.n	800fcc4 <_dtoa_r+0x21c>
 800fc10:	4970      	ldr	r1, [pc, #448]	; (800fdd4 <_dtoa_r+0x32c>)
 800fc12:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800fc16:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fc1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fc1e:	f7f0 ff7b 	bl	8000b18 <__aeabi_dcmpgt>
 800fc22:	2800      	cmp	r0, #0
 800fc24:	d050      	beq.n	800fcc8 <_dtoa_r+0x220>
 800fc26:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fc2a:	2300      	movs	r3, #0
 800fc2c:	930f      	str	r3, [sp, #60]	; 0x3c
 800fc2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fc30:	1b5d      	subs	r5, r3, r5
 800fc32:	f1b5 0801 	subs.w	r8, r5, #1
 800fc36:	bf49      	itett	mi
 800fc38:	f1c5 0301 	rsbmi	r3, r5, #1
 800fc3c:	2300      	movpl	r3, #0
 800fc3e:	9305      	strmi	r3, [sp, #20]
 800fc40:	f04f 0800 	movmi.w	r8, #0
 800fc44:	bf58      	it	pl
 800fc46:	9305      	strpl	r3, [sp, #20]
 800fc48:	f1ba 0f00 	cmp.w	sl, #0
 800fc4c:	db3e      	blt.n	800fccc <_dtoa_r+0x224>
 800fc4e:	2300      	movs	r3, #0
 800fc50:	44d0      	add	r8, sl
 800fc52:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800fc56:	9307      	str	r3, [sp, #28]
 800fc58:	9b06      	ldr	r3, [sp, #24]
 800fc5a:	2b09      	cmp	r3, #9
 800fc5c:	f200 8090 	bhi.w	800fd80 <_dtoa_r+0x2d8>
 800fc60:	2b05      	cmp	r3, #5
 800fc62:	bfc4      	itt	gt
 800fc64:	3b04      	subgt	r3, #4
 800fc66:	9306      	strgt	r3, [sp, #24]
 800fc68:	9b06      	ldr	r3, [sp, #24]
 800fc6a:	f1a3 0302 	sub.w	r3, r3, #2
 800fc6e:	bfcc      	ite	gt
 800fc70:	2500      	movgt	r5, #0
 800fc72:	2501      	movle	r5, #1
 800fc74:	2b03      	cmp	r3, #3
 800fc76:	f200 808f 	bhi.w	800fd98 <_dtoa_r+0x2f0>
 800fc7a:	e8df f003 	tbb	[pc, r3]
 800fc7e:	7f7d      	.short	0x7f7d
 800fc80:	7131      	.short	0x7131
 800fc82:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800fc86:	441d      	add	r5, r3
 800fc88:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800fc8c:	2820      	cmp	r0, #32
 800fc8e:	dd13      	ble.n	800fcb8 <_dtoa_r+0x210>
 800fc90:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800fc94:	9b00      	ldr	r3, [sp, #0]
 800fc96:	fa08 f800 	lsl.w	r8, r8, r0
 800fc9a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800fc9e:	fa23 f000 	lsr.w	r0, r3, r0
 800fca2:	ea48 0000 	orr.w	r0, r8, r0
 800fca6:	f7f0 fc2d 	bl	8000504 <__aeabi_ui2d>
 800fcaa:	2301      	movs	r3, #1
 800fcac:	4682      	mov	sl, r0
 800fcae:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800fcb2:	3d01      	subs	r5, #1
 800fcb4:	9313      	str	r3, [sp, #76]	; 0x4c
 800fcb6:	e772      	b.n	800fb9e <_dtoa_r+0xf6>
 800fcb8:	9b00      	ldr	r3, [sp, #0]
 800fcba:	f1c0 0020 	rsb	r0, r0, #32
 800fcbe:	fa03 f000 	lsl.w	r0, r3, r0
 800fcc2:	e7f0      	b.n	800fca6 <_dtoa_r+0x1fe>
 800fcc4:	2301      	movs	r3, #1
 800fcc6:	e7b1      	b.n	800fc2c <_dtoa_r+0x184>
 800fcc8:	900f      	str	r0, [sp, #60]	; 0x3c
 800fcca:	e7b0      	b.n	800fc2e <_dtoa_r+0x186>
 800fccc:	9b05      	ldr	r3, [sp, #20]
 800fcce:	eba3 030a 	sub.w	r3, r3, sl
 800fcd2:	9305      	str	r3, [sp, #20]
 800fcd4:	f1ca 0300 	rsb	r3, sl, #0
 800fcd8:	9307      	str	r3, [sp, #28]
 800fcda:	2300      	movs	r3, #0
 800fcdc:	930e      	str	r3, [sp, #56]	; 0x38
 800fcde:	e7bb      	b.n	800fc58 <_dtoa_r+0x1b0>
 800fce0:	2301      	movs	r3, #1
 800fce2:	930a      	str	r3, [sp, #40]	; 0x28
 800fce4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	dd59      	ble.n	800fd9e <_dtoa_r+0x2f6>
 800fcea:	9302      	str	r3, [sp, #8]
 800fcec:	4699      	mov	r9, r3
 800fcee:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800fcf0:	2200      	movs	r2, #0
 800fcf2:	6072      	str	r2, [r6, #4]
 800fcf4:	2204      	movs	r2, #4
 800fcf6:	f102 0014 	add.w	r0, r2, #20
 800fcfa:	4298      	cmp	r0, r3
 800fcfc:	6871      	ldr	r1, [r6, #4]
 800fcfe:	d953      	bls.n	800fda8 <_dtoa_r+0x300>
 800fd00:	4620      	mov	r0, r4
 800fd02:	f000 ffd7 	bl	8010cb4 <_Balloc>
 800fd06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fd08:	6030      	str	r0, [r6, #0]
 800fd0a:	f1b9 0f0e 	cmp.w	r9, #14
 800fd0e:	f8d3 b000 	ldr.w	fp, [r3]
 800fd12:	f200 80e6 	bhi.w	800fee2 <_dtoa_r+0x43a>
 800fd16:	2d00      	cmp	r5, #0
 800fd18:	f000 80e3 	beq.w	800fee2 <_dtoa_r+0x43a>
 800fd1c:	ed9d 7b00 	vldr	d7, [sp]
 800fd20:	f1ba 0f00 	cmp.w	sl, #0
 800fd24:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800fd28:	dd74      	ble.n	800fe14 <_dtoa_r+0x36c>
 800fd2a:	4a2a      	ldr	r2, [pc, #168]	; (800fdd4 <_dtoa_r+0x32c>)
 800fd2c:	f00a 030f 	and.w	r3, sl, #15
 800fd30:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800fd34:	ed93 7b00 	vldr	d7, [r3]
 800fd38:	ea4f 162a 	mov.w	r6, sl, asr #4
 800fd3c:	06f0      	lsls	r0, r6, #27
 800fd3e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800fd42:	d565      	bpl.n	800fe10 <_dtoa_r+0x368>
 800fd44:	4b24      	ldr	r3, [pc, #144]	; (800fdd8 <_dtoa_r+0x330>)
 800fd46:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800fd4a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fd4e:	f7f0 fd7d 	bl	800084c <__aeabi_ddiv>
 800fd52:	e9cd 0100 	strd	r0, r1, [sp]
 800fd56:	f006 060f 	and.w	r6, r6, #15
 800fd5a:	2503      	movs	r5, #3
 800fd5c:	4f1e      	ldr	r7, [pc, #120]	; (800fdd8 <_dtoa_r+0x330>)
 800fd5e:	e04c      	b.n	800fdfa <_dtoa_r+0x352>
 800fd60:	2301      	movs	r3, #1
 800fd62:	930a      	str	r3, [sp, #40]	; 0x28
 800fd64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fd66:	4453      	add	r3, sl
 800fd68:	f103 0901 	add.w	r9, r3, #1
 800fd6c:	9302      	str	r3, [sp, #8]
 800fd6e:	464b      	mov	r3, r9
 800fd70:	2b01      	cmp	r3, #1
 800fd72:	bfb8      	it	lt
 800fd74:	2301      	movlt	r3, #1
 800fd76:	e7ba      	b.n	800fcee <_dtoa_r+0x246>
 800fd78:	2300      	movs	r3, #0
 800fd7a:	e7b2      	b.n	800fce2 <_dtoa_r+0x23a>
 800fd7c:	2300      	movs	r3, #0
 800fd7e:	e7f0      	b.n	800fd62 <_dtoa_r+0x2ba>
 800fd80:	2501      	movs	r5, #1
 800fd82:	2300      	movs	r3, #0
 800fd84:	9306      	str	r3, [sp, #24]
 800fd86:	950a      	str	r5, [sp, #40]	; 0x28
 800fd88:	f04f 33ff 	mov.w	r3, #4294967295
 800fd8c:	9302      	str	r3, [sp, #8]
 800fd8e:	4699      	mov	r9, r3
 800fd90:	2200      	movs	r2, #0
 800fd92:	2312      	movs	r3, #18
 800fd94:	920b      	str	r2, [sp, #44]	; 0x2c
 800fd96:	e7aa      	b.n	800fcee <_dtoa_r+0x246>
 800fd98:	2301      	movs	r3, #1
 800fd9a:	930a      	str	r3, [sp, #40]	; 0x28
 800fd9c:	e7f4      	b.n	800fd88 <_dtoa_r+0x2e0>
 800fd9e:	2301      	movs	r3, #1
 800fda0:	9302      	str	r3, [sp, #8]
 800fda2:	4699      	mov	r9, r3
 800fda4:	461a      	mov	r2, r3
 800fda6:	e7f5      	b.n	800fd94 <_dtoa_r+0x2ec>
 800fda8:	3101      	adds	r1, #1
 800fdaa:	6071      	str	r1, [r6, #4]
 800fdac:	0052      	lsls	r2, r2, #1
 800fdae:	e7a2      	b.n	800fcf6 <_dtoa_r+0x24e>
 800fdb0:	636f4361 	.word	0x636f4361
 800fdb4:	3fd287a7 	.word	0x3fd287a7
 800fdb8:	8b60c8b3 	.word	0x8b60c8b3
 800fdbc:	3fc68a28 	.word	0x3fc68a28
 800fdc0:	509f79fb 	.word	0x509f79fb
 800fdc4:	3fd34413 	.word	0x3fd34413
 800fdc8:	7ff00000 	.word	0x7ff00000
 800fdcc:	0801204d 	.word	0x0801204d
 800fdd0:	3ff80000 	.word	0x3ff80000
 800fdd4:	08012108 	.word	0x08012108
 800fdd8:	080120e0 	.word	0x080120e0
 800fddc:	080120d1 	.word	0x080120d1
 800fde0:	07f1      	lsls	r1, r6, #31
 800fde2:	d508      	bpl.n	800fdf6 <_dtoa_r+0x34e>
 800fde4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fde8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fdec:	f7f0 fc04 	bl	80005f8 <__aeabi_dmul>
 800fdf0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800fdf4:	3501      	adds	r5, #1
 800fdf6:	1076      	asrs	r6, r6, #1
 800fdf8:	3708      	adds	r7, #8
 800fdfa:	2e00      	cmp	r6, #0
 800fdfc:	d1f0      	bne.n	800fde0 <_dtoa_r+0x338>
 800fdfe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800fe02:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fe06:	f7f0 fd21 	bl	800084c <__aeabi_ddiv>
 800fe0a:	e9cd 0100 	strd	r0, r1, [sp]
 800fe0e:	e01a      	b.n	800fe46 <_dtoa_r+0x39e>
 800fe10:	2502      	movs	r5, #2
 800fe12:	e7a3      	b.n	800fd5c <_dtoa_r+0x2b4>
 800fe14:	f000 80a0 	beq.w	800ff58 <_dtoa_r+0x4b0>
 800fe18:	f1ca 0600 	rsb	r6, sl, #0
 800fe1c:	4b9f      	ldr	r3, [pc, #636]	; (801009c <_dtoa_r+0x5f4>)
 800fe1e:	4fa0      	ldr	r7, [pc, #640]	; (80100a0 <_dtoa_r+0x5f8>)
 800fe20:	f006 020f 	and.w	r2, r6, #15
 800fe24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fe28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe2c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800fe30:	f7f0 fbe2 	bl	80005f8 <__aeabi_dmul>
 800fe34:	e9cd 0100 	strd	r0, r1, [sp]
 800fe38:	1136      	asrs	r6, r6, #4
 800fe3a:	2300      	movs	r3, #0
 800fe3c:	2502      	movs	r5, #2
 800fe3e:	2e00      	cmp	r6, #0
 800fe40:	d17f      	bne.n	800ff42 <_dtoa_r+0x49a>
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d1e1      	bne.n	800fe0a <_dtoa_r+0x362>
 800fe46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	f000 8087 	beq.w	800ff5c <_dtoa_r+0x4b4>
 800fe4e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800fe52:	2200      	movs	r2, #0
 800fe54:	4b93      	ldr	r3, [pc, #588]	; (80100a4 <_dtoa_r+0x5fc>)
 800fe56:	4630      	mov	r0, r6
 800fe58:	4639      	mov	r1, r7
 800fe5a:	f7f0 fe3f 	bl	8000adc <__aeabi_dcmplt>
 800fe5e:	2800      	cmp	r0, #0
 800fe60:	d07c      	beq.n	800ff5c <_dtoa_r+0x4b4>
 800fe62:	f1b9 0f00 	cmp.w	r9, #0
 800fe66:	d079      	beq.n	800ff5c <_dtoa_r+0x4b4>
 800fe68:	9b02      	ldr	r3, [sp, #8]
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	dd35      	ble.n	800feda <_dtoa_r+0x432>
 800fe6e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800fe72:	9308      	str	r3, [sp, #32]
 800fe74:	4639      	mov	r1, r7
 800fe76:	2200      	movs	r2, #0
 800fe78:	4b8b      	ldr	r3, [pc, #556]	; (80100a8 <_dtoa_r+0x600>)
 800fe7a:	4630      	mov	r0, r6
 800fe7c:	f7f0 fbbc 	bl	80005f8 <__aeabi_dmul>
 800fe80:	e9cd 0100 	strd	r0, r1, [sp]
 800fe84:	9f02      	ldr	r7, [sp, #8]
 800fe86:	3501      	adds	r5, #1
 800fe88:	4628      	mov	r0, r5
 800fe8a:	f7f0 fb4b 	bl	8000524 <__aeabi_i2d>
 800fe8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fe92:	f7f0 fbb1 	bl	80005f8 <__aeabi_dmul>
 800fe96:	2200      	movs	r2, #0
 800fe98:	4b84      	ldr	r3, [pc, #528]	; (80100ac <_dtoa_r+0x604>)
 800fe9a:	f7f0 f9f7 	bl	800028c <__adddf3>
 800fe9e:	4605      	mov	r5, r0
 800fea0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800fea4:	2f00      	cmp	r7, #0
 800fea6:	d15d      	bne.n	800ff64 <_dtoa_r+0x4bc>
 800fea8:	2200      	movs	r2, #0
 800feaa:	4b81      	ldr	r3, [pc, #516]	; (80100b0 <_dtoa_r+0x608>)
 800feac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800feb0:	f7f0 f9ea 	bl	8000288 <__aeabi_dsub>
 800feb4:	462a      	mov	r2, r5
 800feb6:	4633      	mov	r3, r6
 800feb8:	e9cd 0100 	strd	r0, r1, [sp]
 800febc:	f7f0 fe2c 	bl	8000b18 <__aeabi_dcmpgt>
 800fec0:	2800      	cmp	r0, #0
 800fec2:	f040 8288 	bne.w	80103d6 <_dtoa_r+0x92e>
 800fec6:	462a      	mov	r2, r5
 800fec8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800fecc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fed0:	f7f0 fe04 	bl	8000adc <__aeabi_dcmplt>
 800fed4:	2800      	cmp	r0, #0
 800fed6:	f040 827c 	bne.w	80103d2 <_dtoa_r+0x92a>
 800feda:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800fede:	e9cd 2300 	strd	r2, r3, [sp]
 800fee2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	f2c0 8150 	blt.w	801018a <_dtoa_r+0x6e2>
 800feea:	f1ba 0f0e 	cmp.w	sl, #14
 800feee:	f300 814c 	bgt.w	801018a <_dtoa_r+0x6e2>
 800fef2:	4b6a      	ldr	r3, [pc, #424]	; (801009c <_dtoa_r+0x5f4>)
 800fef4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800fef8:	ed93 7b00 	vldr	d7, [r3]
 800fefc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ff04:	f280 80d8 	bge.w	80100b8 <_dtoa_r+0x610>
 800ff08:	f1b9 0f00 	cmp.w	r9, #0
 800ff0c:	f300 80d4 	bgt.w	80100b8 <_dtoa_r+0x610>
 800ff10:	f040 825e 	bne.w	80103d0 <_dtoa_r+0x928>
 800ff14:	2200      	movs	r2, #0
 800ff16:	4b66      	ldr	r3, [pc, #408]	; (80100b0 <_dtoa_r+0x608>)
 800ff18:	ec51 0b17 	vmov	r0, r1, d7
 800ff1c:	f7f0 fb6c 	bl	80005f8 <__aeabi_dmul>
 800ff20:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ff24:	f7f0 fdee 	bl	8000b04 <__aeabi_dcmpge>
 800ff28:	464f      	mov	r7, r9
 800ff2a:	464e      	mov	r6, r9
 800ff2c:	2800      	cmp	r0, #0
 800ff2e:	f040 8234 	bne.w	801039a <_dtoa_r+0x8f2>
 800ff32:	2331      	movs	r3, #49	; 0x31
 800ff34:	f10b 0501 	add.w	r5, fp, #1
 800ff38:	f88b 3000 	strb.w	r3, [fp]
 800ff3c:	f10a 0a01 	add.w	sl, sl, #1
 800ff40:	e22f      	b.n	80103a2 <_dtoa_r+0x8fa>
 800ff42:	07f2      	lsls	r2, r6, #31
 800ff44:	d505      	bpl.n	800ff52 <_dtoa_r+0x4aa>
 800ff46:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ff4a:	f7f0 fb55 	bl	80005f8 <__aeabi_dmul>
 800ff4e:	3501      	adds	r5, #1
 800ff50:	2301      	movs	r3, #1
 800ff52:	1076      	asrs	r6, r6, #1
 800ff54:	3708      	adds	r7, #8
 800ff56:	e772      	b.n	800fe3e <_dtoa_r+0x396>
 800ff58:	2502      	movs	r5, #2
 800ff5a:	e774      	b.n	800fe46 <_dtoa_r+0x39e>
 800ff5c:	f8cd a020 	str.w	sl, [sp, #32]
 800ff60:	464f      	mov	r7, r9
 800ff62:	e791      	b.n	800fe88 <_dtoa_r+0x3e0>
 800ff64:	4b4d      	ldr	r3, [pc, #308]	; (801009c <_dtoa_r+0x5f4>)
 800ff66:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ff6a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800ff6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d047      	beq.n	8010004 <_dtoa_r+0x55c>
 800ff74:	4602      	mov	r2, r0
 800ff76:	460b      	mov	r3, r1
 800ff78:	2000      	movs	r0, #0
 800ff7a:	494e      	ldr	r1, [pc, #312]	; (80100b4 <_dtoa_r+0x60c>)
 800ff7c:	f7f0 fc66 	bl	800084c <__aeabi_ddiv>
 800ff80:	462a      	mov	r2, r5
 800ff82:	4633      	mov	r3, r6
 800ff84:	f7f0 f980 	bl	8000288 <__aeabi_dsub>
 800ff88:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ff8c:	465d      	mov	r5, fp
 800ff8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ff92:	f7f0 fde1 	bl	8000b58 <__aeabi_d2iz>
 800ff96:	4606      	mov	r6, r0
 800ff98:	f7f0 fac4 	bl	8000524 <__aeabi_i2d>
 800ff9c:	4602      	mov	r2, r0
 800ff9e:	460b      	mov	r3, r1
 800ffa0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ffa4:	f7f0 f970 	bl	8000288 <__aeabi_dsub>
 800ffa8:	3630      	adds	r6, #48	; 0x30
 800ffaa:	f805 6b01 	strb.w	r6, [r5], #1
 800ffae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ffb2:	e9cd 0100 	strd	r0, r1, [sp]
 800ffb6:	f7f0 fd91 	bl	8000adc <__aeabi_dcmplt>
 800ffba:	2800      	cmp	r0, #0
 800ffbc:	d163      	bne.n	8010086 <_dtoa_r+0x5de>
 800ffbe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ffc2:	2000      	movs	r0, #0
 800ffc4:	4937      	ldr	r1, [pc, #220]	; (80100a4 <_dtoa_r+0x5fc>)
 800ffc6:	f7f0 f95f 	bl	8000288 <__aeabi_dsub>
 800ffca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ffce:	f7f0 fd85 	bl	8000adc <__aeabi_dcmplt>
 800ffd2:	2800      	cmp	r0, #0
 800ffd4:	f040 80b7 	bne.w	8010146 <_dtoa_r+0x69e>
 800ffd8:	eba5 030b 	sub.w	r3, r5, fp
 800ffdc:	429f      	cmp	r7, r3
 800ffde:	f77f af7c 	ble.w	800feda <_dtoa_r+0x432>
 800ffe2:	2200      	movs	r2, #0
 800ffe4:	4b30      	ldr	r3, [pc, #192]	; (80100a8 <_dtoa_r+0x600>)
 800ffe6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ffea:	f7f0 fb05 	bl	80005f8 <__aeabi_dmul>
 800ffee:	2200      	movs	r2, #0
 800fff0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800fff4:	4b2c      	ldr	r3, [pc, #176]	; (80100a8 <_dtoa_r+0x600>)
 800fff6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fffa:	f7f0 fafd 	bl	80005f8 <__aeabi_dmul>
 800fffe:	e9cd 0100 	strd	r0, r1, [sp]
 8010002:	e7c4      	b.n	800ff8e <_dtoa_r+0x4e6>
 8010004:	462a      	mov	r2, r5
 8010006:	4633      	mov	r3, r6
 8010008:	f7f0 faf6 	bl	80005f8 <__aeabi_dmul>
 801000c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010010:	eb0b 0507 	add.w	r5, fp, r7
 8010014:	465e      	mov	r6, fp
 8010016:	e9dd 0100 	ldrd	r0, r1, [sp]
 801001a:	f7f0 fd9d 	bl	8000b58 <__aeabi_d2iz>
 801001e:	4607      	mov	r7, r0
 8010020:	f7f0 fa80 	bl	8000524 <__aeabi_i2d>
 8010024:	3730      	adds	r7, #48	; 0x30
 8010026:	4602      	mov	r2, r0
 8010028:	460b      	mov	r3, r1
 801002a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801002e:	f7f0 f92b 	bl	8000288 <__aeabi_dsub>
 8010032:	f806 7b01 	strb.w	r7, [r6], #1
 8010036:	42ae      	cmp	r6, r5
 8010038:	e9cd 0100 	strd	r0, r1, [sp]
 801003c:	f04f 0200 	mov.w	r2, #0
 8010040:	d126      	bne.n	8010090 <_dtoa_r+0x5e8>
 8010042:	4b1c      	ldr	r3, [pc, #112]	; (80100b4 <_dtoa_r+0x60c>)
 8010044:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010048:	f7f0 f920 	bl	800028c <__adddf3>
 801004c:	4602      	mov	r2, r0
 801004e:	460b      	mov	r3, r1
 8010050:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010054:	f7f0 fd60 	bl	8000b18 <__aeabi_dcmpgt>
 8010058:	2800      	cmp	r0, #0
 801005a:	d174      	bne.n	8010146 <_dtoa_r+0x69e>
 801005c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010060:	2000      	movs	r0, #0
 8010062:	4914      	ldr	r1, [pc, #80]	; (80100b4 <_dtoa_r+0x60c>)
 8010064:	f7f0 f910 	bl	8000288 <__aeabi_dsub>
 8010068:	4602      	mov	r2, r0
 801006a:	460b      	mov	r3, r1
 801006c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010070:	f7f0 fd34 	bl	8000adc <__aeabi_dcmplt>
 8010074:	2800      	cmp	r0, #0
 8010076:	f43f af30 	beq.w	800feda <_dtoa_r+0x432>
 801007a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801007e:	2b30      	cmp	r3, #48	; 0x30
 8010080:	f105 32ff 	add.w	r2, r5, #4294967295
 8010084:	d002      	beq.n	801008c <_dtoa_r+0x5e4>
 8010086:	f8dd a020 	ldr.w	sl, [sp, #32]
 801008a:	e04a      	b.n	8010122 <_dtoa_r+0x67a>
 801008c:	4615      	mov	r5, r2
 801008e:	e7f4      	b.n	801007a <_dtoa_r+0x5d2>
 8010090:	4b05      	ldr	r3, [pc, #20]	; (80100a8 <_dtoa_r+0x600>)
 8010092:	f7f0 fab1 	bl	80005f8 <__aeabi_dmul>
 8010096:	e9cd 0100 	strd	r0, r1, [sp]
 801009a:	e7bc      	b.n	8010016 <_dtoa_r+0x56e>
 801009c:	08012108 	.word	0x08012108
 80100a0:	080120e0 	.word	0x080120e0
 80100a4:	3ff00000 	.word	0x3ff00000
 80100a8:	40240000 	.word	0x40240000
 80100ac:	401c0000 	.word	0x401c0000
 80100b0:	40140000 	.word	0x40140000
 80100b4:	3fe00000 	.word	0x3fe00000
 80100b8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80100bc:	465d      	mov	r5, fp
 80100be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80100c2:	4630      	mov	r0, r6
 80100c4:	4639      	mov	r1, r7
 80100c6:	f7f0 fbc1 	bl	800084c <__aeabi_ddiv>
 80100ca:	f7f0 fd45 	bl	8000b58 <__aeabi_d2iz>
 80100ce:	4680      	mov	r8, r0
 80100d0:	f7f0 fa28 	bl	8000524 <__aeabi_i2d>
 80100d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80100d8:	f7f0 fa8e 	bl	80005f8 <__aeabi_dmul>
 80100dc:	4602      	mov	r2, r0
 80100de:	460b      	mov	r3, r1
 80100e0:	4630      	mov	r0, r6
 80100e2:	4639      	mov	r1, r7
 80100e4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80100e8:	f7f0 f8ce 	bl	8000288 <__aeabi_dsub>
 80100ec:	f805 6b01 	strb.w	r6, [r5], #1
 80100f0:	eba5 060b 	sub.w	r6, r5, fp
 80100f4:	45b1      	cmp	r9, r6
 80100f6:	4602      	mov	r2, r0
 80100f8:	460b      	mov	r3, r1
 80100fa:	d139      	bne.n	8010170 <_dtoa_r+0x6c8>
 80100fc:	f7f0 f8c6 	bl	800028c <__adddf3>
 8010100:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010104:	4606      	mov	r6, r0
 8010106:	460f      	mov	r7, r1
 8010108:	f7f0 fd06 	bl	8000b18 <__aeabi_dcmpgt>
 801010c:	b9c8      	cbnz	r0, 8010142 <_dtoa_r+0x69a>
 801010e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010112:	4630      	mov	r0, r6
 8010114:	4639      	mov	r1, r7
 8010116:	f7f0 fcd7 	bl	8000ac8 <__aeabi_dcmpeq>
 801011a:	b110      	cbz	r0, 8010122 <_dtoa_r+0x67a>
 801011c:	f018 0f01 	tst.w	r8, #1
 8010120:	d10f      	bne.n	8010142 <_dtoa_r+0x69a>
 8010122:	9904      	ldr	r1, [sp, #16]
 8010124:	4620      	mov	r0, r4
 8010126:	f000 fdf9 	bl	8010d1c <_Bfree>
 801012a:	2300      	movs	r3, #0
 801012c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801012e:	702b      	strb	r3, [r5, #0]
 8010130:	f10a 0301 	add.w	r3, sl, #1
 8010134:	6013      	str	r3, [r2, #0]
 8010136:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010138:	2b00      	cmp	r3, #0
 801013a:	f000 8241 	beq.w	80105c0 <_dtoa_r+0xb18>
 801013e:	601d      	str	r5, [r3, #0]
 8010140:	e23e      	b.n	80105c0 <_dtoa_r+0xb18>
 8010142:	f8cd a020 	str.w	sl, [sp, #32]
 8010146:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801014a:	2a39      	cmp	r2, #57	; 0x39
 801014c:	f105 33ff 	add.w	r3, r5, #4294967295
 8010150:	d108      	bne.n	8010164 <_dtoa_r+0x6bc>
 8010152:	459b      	cmp	fp, r3
 8010154:	d10a      	bne.n	801016c <_dtoa_r+0x6c4>
 8010156:	9b08      	ldr	r3, [sp, #32]
 8010158:	3301      	adds	r3, #1
 801015a:	9308      	str	r3, [sp, #32]
 801015c:	2330      	movs	r3, #48	; 0x30
 801015e:	f88b 3000 	strb.w	r3, [fp]
 8010162:	465b      	mov	r3, fp
 8010164:	781a      	ldrb	r2, [r3, #0]
 8010166:	3201      	adds	r2, #1
 8010168:	701a      	strb	r2, [r3, #0]
 801016a:	e78c      	b.n	8010086 <_dtoa_r+0x5de>
 801016c:	461d      	mov	r5, r3
 801016e:	e7ea      	b.n	8010146 <_dtoa_r+0x69e>
 8010170:	2200      	movs	r2, #0
 8010172:	4b9b      	ldr	r3, [pc, #620]	; (80103e0 <_dtoa_r+0x938>)
 8010174:	f7f0 fa40 	bl	80005f8 <__aeabi_dmul>
 8010178:	2200      	movs	r2, #0
 801017a:	2300      	movs	r3, #0
 801017c:	4606      	mov	r6, r0
 801017e:	460f      	mov	r7, r1
 8010180:	f7f0 fca2 	bl	8000ac8 <__aeabi_dcmpeq>
 8010184:	2800      	cmp	r0, #0
 8010186:	d09a      	beq.n	80100be <_dtoa_r+0x616>
 8010188:	e7cb      	b.n	8010122 <_dtoa_r+0x67a>
 801018a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801018c:	2a00      	cmp	r2, #0
 801018e:	f000 808b 	beq.w	80102a8 <_dtoa_r+0x800>
 8010192:	9a06      	ldr	r2, [sp, #24]
 8010194:	2a01      	cmp	r2, #1
 8010196:	dc6e      	bgt.n	8010276 <_dtoa_r+0x7ce>
 8010198:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801019a:	2a00      	cmp	r2, #0
 801019c:	d067      	beq.n	801026e <_dtoa_r+0x7c6>
 801019e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80101a2:	9f07      	ldr	r7, [sp, #28]
 80101a4:	9d05      	ldr	r5, [sp, #20]
 80101a6:	9a05      	ldr	r2, [sp, #20]
 80101a8:	2101      	movs	r1, #1
 80101aa:	441a      	add	r2, r3
 80101ac:	4620      	mov	r0, r4
 80101ae:	9205      	str	r2, [sp, #20]
 80101b0:	4498      	add	r8, r3
 80101b2:	f000 fe91 	bl	8010ed8 <__i2b>
 80101b6:	4606      	mov	r6, r0
 80101b8:	2d00      	cmp	r5, #0
 80101ba:	dd0c      	ble.n	80101d6 <_dtoa_r+0x72e>
 80101bc:	f1b8 0f00 	cmp.w	r8, #0
 80101c0:	dd09      	ble.n	80101d6 <_dtoa_r+0x72e>
 80101c2:	4545      	cmp	r5, r8
 80101c4:	9a05      	ldr	r2, [sp, #20]
 80101c6:	462b      	mov	r3, r5
 80101c8:	bfa8      	it	ge
 80101ca:	4643      	movge	r3, r8
 80101cc:	1ad2      	subs	r2, r2, r3
 80101ce:	9205      	str	r2, [sp, #20]
 80101d0:	1aed      	subs	r5, r5, r3
 80101d2:	eba8 0803 	sub.w	r8, r8, r3
 80101d6:	9b07      	ldr	r3, [sp, #28]
 80101d8:	b1eb      	cbz	r3, 8010216 <_dtoa_r+0x76e>
 80101da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d067      	beq.n	80102b0 <_dtoa_r+0x808>
 80101e0:	b18f      	cbz	r7, 8010206 <_dtoa_r+0x75e>
 80101e2:	4631      	mov	r1, r6
 80101e4:	463a      	mov	r2, r7
 80101e6:	4620      	mov	r0, r4
 80101e8:	f000 ff16 	bl	8011018 <__pow5mult>
 80101ec:	9a04      	ldr	r2, [sp, #16]
 80101ee:	4601      	mov	r1, r0
 80101f0:	4606      	mov	r6, r0
 80101f2:	4620      	mov	r0, r4
 80101f4:	f000 fe79 	bl	8010eea <__multiply>
 80101f8:	9904      	ldr	r1, [sp, #16]
 80101fa:	9008      	str	r0, [sp, #32]
 80101fc:	4620      	mov	r0, r4
 80101fe:	f000 fd8d 	bl	8010d1c <_Bfree>
 8010202:	9b08      	ldr	r3, [sp, #32]
 8010204:	9304      	str	r3, [sp, #16]
 8010206:	9b07      	ldr	r3, [sp, #28]
 8010208:	1bda      	subs	r2, r3, r7
 801020a:	d004      	beq.n	8010216 <_dtoa_r+0x76e>
 801020c:	9904      	ldr	r1, [sp, #16]
 801020e:	4620      	mov	r0, r4
 8010210:	f000 ff02 	bl	8011018 <__pow5mult>
 8010214:	9004      	str	r0, [sp, #16]
 8010216:	2101      	movs	r1, #1
 8010218:	4620      	mov	r0, r4
 801021a:	f000 fe5d 	bl	8010ed8 <__i2b>
 801021e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010220:	4607      	mov	r7, r0
 8010222:	2b00      	cmp	r3, #0
 8010224:	f000 81d0 	beq.w	80105c8 <_dtoa_r+0xb20>
 8010228:	461a      	mov	r2, r3
 801022a:	4601      	mov	r1, r0
 801022c:	4620      	mov	r0, r4
 801022e:	f000 fef3 	bl	8011018 <__pow5mult>
 8010232:	9b06      	ldr	r3, [sp, #24]
 8010234:	2b01      	cmp	r3, #1
 8010236:	4607      	mov	r7, r0
 8010238:	dc40      	bgt.n	80102bc <_dtoa_r+0x814>
 801023a:	9b00      	ldr	r3, [sp, #0]
 801023c:	2b00      	cmp	r3, #0
 801023e:	d139      	bne.n	80102b4 <_dtoa_r+0x80c>
 8010240:	9b01      	ldr	r3, [sp, #4]
 8010242:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010246:	2b00      	cmp	r3, #0
 8010248:	d136      	bne.n	80102b8 <_dtoa_r+0x810>
 801024a:	9b01      	ldr	r3, [sp, #4]
 801024c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010250:	0d1b      	lsrs	r3, r3, #20
 8010252:	051b      	lsls	r3, r3, #20
 8010254:	b12b      	cbz	r3, 8010262 <_dtoa_r+0x7ba>
 8010256:	9b05      	ldr	r3, [sp, #20]
 8010258:	3301      	adds	r3, #1
 801025a:	9305      	str	r3, [sp, #20]
 801025c:	f108 0801 	add.w	r8, r8, #1
 8010260:	2301      	movs	r3, #1
 8010262:	9307      	str	r3, [sp, #28]
 8010264:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010266:	2b00      	cmp	r3, #0
 8010268:	d12a      	bne.n	80102c0 <_dtoa_r+0x818>
 801026a:	2001      	movs	r0, #1
 801026c:	e030      	b.n	80102d0 <_dtoa_r+0x828>
 801026e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010270:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010274:	e795      	b.n	80101a2 <_dtoa_r+0x6fa>
 8010276:	9b07      	ldr	r3, [sp, #28]
 8010278:	f109 37ff 	add.w	r7, r9, #4294967295
 801027c:	42bb      	cmp	r3, r7
 801027e:	bfbf      	itttt	lt
 8010280:	9b07      	ldrlt	r3, [sp, #28]
 8010282:	9707      	strlt	r7, [sp, #28]
 8010284:	1afa      	sublt	r2, r7, r3
 8010286:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8010288:	bfbb      	ittet	lt
 801028a:	189b      	addlt	r3, r3, r2
 801028c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801028e:	1bdf      	subge	r7, r3, r7
 8010290:	2700      	movlt	r7, #0
 8010292:	f1b9 0f00 	cmp.w	r9, #0
 8010296:	bfb5      	itete	lt
 8010298:	9b05      	ldrlt	r3, [sp, #20]
 801029a:	9d05      	ldrge	r5, [sp, #20]
 801029c:	eba3 0509 	sublt.w	r5, r3, r9
 80102a0:	464b      	movge	r3, r9
 80102a2:	bfb8      	it	lt
 80102a4:	2300      	movlt	r3, #0
 80102a6:	e77e      	b.n	80101a6 <_dtoa_r+0x6fe>
 80102a8:	9f07      	ldr	r7, [sp, #28]
 80102aa:	9d05      	ldr	r5, [sp, #20]
 80102ac:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80102ae:	e783      	b.n	80101b8 <_dtoa_r+0x710>
 80102b0:	9a07      	ldr	r2, [sp, #28]
 80102b2:	e7ab      	b.n	801020c <_dtoa_r+0x764>
 80102b4:	2300      	movs	r3, #0
 80102b6:	e7d4      	b.n	8010262 <_dtoa_r+0x7ba>
 80102b8:	9b00      	ldr	r3, [sp, #0]
 80102ba:	e7d2      	b.n	8010262 <_dtoa_r+0x7ba>
 80102bc:	2300      	movs	r3, #0
 80102be:	9307      	str	r3, [sp, #28]
 80102c0:	693b      	ldr	r3, [r7, #16]
 80102c2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80102c6:	6918      	ldr	r0, [r3, #16]
 80102c8:	f000 fdb8 	bl	8010e3c <__hi0bits>
 80102cc:	f1c0 0020 	rsb	r0, r0, #32
 80102d0:	4440      	add	r0, r8
 80102d2:	f010 001f 	ands.w	r0, r0, #31
 80102d6:	d047      	beq.n	8010368 <_dtoa_r+0x8c0>
 80102d8:	f1c0 0320 	rsb	r3, r0, #32
 80102dc:	2b04      	cmp	r3, #4
 80102de:	dd3b      	ble.n	8010358 <_dtoa_r+0x8b0>
 80102e0:	9b05      	ldr	r3, [sp, #20]
 80102e2:	f1c0 001c 	rsb	r0, r0, #28
 80102e6:	4403      	add	r3, r0
 80102e8:	9305      	str	r3, [sp, #20]
 80102ea:	4405      	add	r5, r0
 80102ec:	4480      	add	r8, r0
 80102ee:	9b05      	ldr	r3, [sp, #20]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	dd05      	ble.n	8010300 <_dtoa_r+0x858>
 80102f4:	461a      	mov	r2, r3
 80102f6:	9904      	ldr	r1, [sp, #16]
 80102f8:	4620      	mov	r0, r4
 80102fa:	f000 fedb 	bl	80110b4 <__lshift>
 80102fe:	9004      	str	r0, [sp, #16]
 8010300:	f1b8 0f00 	cmp.w	r8, #0
 8010304:	dd05      	ble.n	8010312 <_dtoa_r+0x86a>
 8010306:	4639      	mov	r1, r7
 8010308:	4642      	mov	r2, r8
 801030a:	4620      	mov	r0, r4
 801030c:	f000 fed2 	bl	80110b4 <__lshift>
 8010310:	4607      	mov	r7, r0
 8010312:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010314:	b353      	cbz	r3, 801036c <_dtoa_r+0x8c4>
 8010316:	4639      	mov	r1, r7
 8010318:	9804      	ldr	r0, [sp, #16]
 801031a:	f000 ff1f 	bl	801115c <__mcmp>
 801031e:	2800      	cmp	r0, #0
 8010320:	da24      	bge.n	801036c <_dtoa_r+0x8c4>
 8010322:	2300      	movs	r3, #0
 8010324:	220a      	movs	r2, #10
 8010326:	9904      	ldr	r1, [sp, #16]
 8010328:	4620      	mov	r0, r4
 801032a:	f000 fd0e 	bl	8010d4a <__multadd>
 801032e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010330:	9004      	str	r0, [sp, #16]
 8010332:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010336:	2b00      	cmp	r3, #0
 8010338:	f000 814d 	beq.w	80105d6 <_dtoa_r+0xb2e>
 801033c:	2300      	movs	r3, #0
 801033e:	4631      	mov	r1, r6
 8010340:	220a      	movs	r2, #10
 8010342:	4620      	mov	r0, r4
 8010344:	f000 fd01 	bl	8010d4a <__multadd>
 8010348:	9b02      	ldr	r3, [sp, #8]
 801034a:	2b00      	cmp	r3, #0
 801034c:	4606      	mov	r6, r0
 801034e:	dc4f      	bgt.n	80103f0 <_dtoa_r+0x948>
 8010350:	9b06      	ldr	r3, [sp, #24]
 8010352:	2b02      	cmp	r3, #2
 8010354:	dd4c      	ble.n	80103f0 <_dtoa_r+0x948>
 8010356:	e011      	b.n	801037c <_dtoa_r+0x8d4>
 8010358:	d0c9      	beq.n	80102ee <_dtoa_r+0x846>
 801035a:	9a05      	ldr	r2, [sp, #20]
 801035c:	331c      	adds	r3, #28
 801035e:	441a      	add	r2, r3
 8010360:	9205      	str	r2, [sp, #20]
 8010362:	441d      	add	r5, r3
 8010364:	4498      	add	r8, r3
 8010366:	e7c2      	b.n	80102ee <_dtoa_r+0x846>
 8010368:	4603      	mov	r3, r0
 801036a:	e7f6      	b.n	801035a <_dtoa_r+0x8b2>
 801036c:	f1b9 0f00 	cmp.w	r9, #0
 8010370:	dc38      	bgt.n	80103e4 <_dtoa_r+0x93c>
 8010372:	9b06      	ldr	r3, [sp, #24]
 8010374:	2b02      	cmp	r3, #2
 8010376:	dd35      	ble.n	80103e4 <_dtoa_r+0x93c>
 8010378:	f8cd 9008 	str.w	r9, [sp, #8]
 801037c:	9b02      	ldr	r3, [sp, #8]
 801037e:	b963      	cbnz	r3, 801039a <_dtoa_r+0x8f2>
 8010380:	4639      	mov	r1, r7
 8010382:	2205      	movs	r2, #5
 8010384:	4620      	mov	r0, r4
 8010386:	f000 fce0 	bl	8010d4a <__multadd>
 801038a:	4601      	mov	r1, r0
 801038c:	4607      	mov	r7, r0
 801038e:	9804      	ldr	r0, [sp, #16]
 8010390:	f000 fee4 	bl	801115c <__mcmp>
 8010394:	2800      	cmp	r0, #0
 8010396:	f73f adcc 	bgt.w	800ff32 <_dtoa_r+0x48a>
 801039a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801039c:	465d      	mov	r5, fp
 801039e:	ea6f 0a03 	mvn.w	sl, r3
 80103a2:	f04f 0900 	mov.w	r9, #0
 80103a6:	4639      	mov	r1, r7
 80103a8:	4620      	mov	r0, r4
 80103aa:	f000 fcb7 	bl	8010d1c <_Bfree>
 80103ae:	2e00      	cmp	r6, #0
 80103b0:	f43f aeb7 	beq.w	8010122 <_dtoa_r+0x67a>
 80103b4:	f1b9 0f00 	cmp.w	r9, #0
 80103b8:	d005      	beq.n	80103c6 <_dtoa_r+0x91e>
 80103ba:	45b1      	cmp	r9, r6
 80103bc:	d003      	beq.n	80103c6 <_dtoa_r+0x91e>
 80103be:	4649      	mov	r1, r9
 80103c0:	4620      	mov	r0, r4
 80103c2:	f000 fcab 	bl	8010d1c <_Bfree>
 80103c6:	4631      	mov	r1, r6
 80103c8:	4620      	mov	r0, r4
 80103ca:	f000 fca7 	bl	8010d1c <_Bfree>
 80103ce:	e6a8      	b.n	8010122 <_dtoa_r+0x67a>
 80103d0:	2700      	movs	r7, #0
 80103d2:	463e      	mov	r6, r7
 80103d4:	e7e1      	b.n	801039a <_dtoa_r+0x8f2>
 80103d6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80103da:	463e      	mov	r6, r7
 80103dc:	e5a9      	b.n	800ff32 <_dtoa_r+0x48a>
 80103de:	bf00      	nop
 80103e0:	40240000 	.word	0x40240000
 80103e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80103e6:	f8cd 9008 	str.w	r9, [sp, #8]
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	f000 80fa 	beq.w	80105e4 <_dtoa_r+0xb3c>
 80103f0:	2d00      	cmp	r5, #0
 80103f2:	dd05      	ble.n	8010400 <_dtoa_r+0x958>
 80103f4:	4631      	mov	r1, r6
 80103f6:	462a      	mov	r2, r5
 80103f8:	4620      	mov	r0, r4
 80103fa:	f000 fe5b 	bl	80110b4 <__lshift>
 80103fe:	4606      	mov	r6, r0
 8010400:	9b07      	ldr	r3, [sp, #28]
 8010402:	2b00      	cmp	r3, #0
 8010404:	d04c      	beq.n	80104a0 <_dtoa_r+0x9f8>
 8010406:	6871      	ldr	r1, [r6, #4]
 8010408:	4620      	mov	r0, r4
 801040a:	f000 fc53 	bl	8010cb4 <_Balloc>
 801040e:	6932      	ldr	r2, [r6, #16]
 8010410:	3202      	adds	r2, #2
 8010412:	4605      	mov	r5, r0
 8010414:	0092      	lsls	r2, r2, #2
 8010416:	f106 010c 	add.w	r1, r6, #12
 801041a:	300c      	adds	r0, #12
 801041c:	f7fd fcd8 	bl	800ddd0 <memcpy>
 8010420:	2201      	movs	r2, #1
 8010422:	4629      	mov	r1, r5
 8010424:	4620      	mov	r0, r4
 8010426:	f000 fe45 	bl	80110b4 <__lshift>
 801042a:	9b00      	ldr	r3, [sp, #0]
 801042c:	f8cd b014 	str.w	fp, [sp, #20]
 8010430:	f003 0301 	and.w	r3, r3, #1
 8010434:	46b1      	mov	r9, r6
 8010436:	9307      	str	r3, [sp, #28]
 8010438:	4606      	mov	r6, r0
 801043a:	4639      	mov	r1, r7
 801043c:	9804      	ldr	r0, [sp, #16]
 801043e:	f7ff faa5 	bl	800f98c <quorem>
 8010442:	4649      	mov	r1, r9
 8010444:	4605      	mov	r5, r0
 8010446:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801044a:	9804      	ldr	r0, [sp, #16]
 801044c:	f000 fe86 	bl	801115c <__mcmp>
 8010450:	4632      	mov	r2, r6
 8010452:	9000      	str	r0, [sp, #0]
 8010454:	4639      	mov	r1, r7
 8010456:	4620      	mov	r0, r4
 8010458:	f000 fe9a 	bl	8011190 <__mdiff>
 801045c:	68c3      	ldr	r3, [r0, #12]
 801045e:	4602      	mov	r2, r0
 8010460:	bb03      	cbnz	r3, 80104a4 <_dtoa_r+0x9fc>
 8010462:	4601      	mov	r1, r0
 8010464:	9008      	str	r0, [sp, #32]
 8010466:	9804      	ldr	r0, [sp, #16]
 8010468:	f000 fe78 	bl	801115c <__mcmp>
 801046c:	9a08      	ldr	r2, [sp, #32]
 801046e:	4603      	mov	r3, r0
 8010470:	4611      	mov	r1, r2
 8010472:	4620      	mov	r0, r4
 8010474:	9308      	str	r3, [sp, #32]
 8010476:	f000 fc51 	bl	8010d1c <_Bfree>
 801047a:	9b08      	ldr	r3, [sp, #32]
 801047c:	b9a3      	cbnz	r3, 80104a8 <_dtoa_r+0xa00>
 801047e:	9a06      	ldr	r2, [sp, #24]
 8010480:	b992      	cbnz	r2, 80104a8 <_dtoa_r+0xa00>
 8010482:	9a07      	ldr	r2, [sp, #28]
 8010484:	b982      	cbnz	r2, 80104a8 <_dtoa_r+0xa00>
 8010486:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801048a:	d029      	beq.n	80104e0 <_dtoa_r+0xa38>
 801048c:	9b00      	ldr	r3, [sp, #0]
 801048e:	2b00      	cmp	r3, #0
 8010490:	dd01      	ble.n	8010496 <_dtoa_r+0x9ee>
 8010492:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8010496:	9b05      	ldr	r3, [sp, #20]
 8010498:	1c5d      	adds	r5, r3, #1
 801049a:	f883 8000 	strb.w	r8, [r3]
 801049e:	e782      	b.n	80103a6 <_dtoa_r+0x8fe>
 80104a0:	4630      	mov	r0, r6
 80104a2:	e7c2      	b.n	801042a <_dtoa_r+0x982>
 80104a4:	2301      	movs	r3, #1
 80104a6:	e7e3      	b.n	8010470 <_dtoa_r+0x9c8>
 80104a8:	9a00      	ldr	r2, [sp, #0]
 80104aa:	2a00      	cmp	r2, #0
 80104ac:	db04      	blt.n	80104b8 <_dtoa_r+0xa10>
 80104ae:	d125      	bne.n	80104fc <_dtoa_r+0xa54>
 80104b0:	9a06      	ldr	r2, [sp, #24]
 80104b2:	bb1a      	cbnz	r2, 80104fc <_dtoa_r+0xa54>
 80104b4:	9a07      	ldr	r2, [sp, #28]
 80104b6:	bb0a      	cbnz	r2, 80104fc <_dtoa_r+0xa54>
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	ddec      	ble.n	8010496 <_dtoa_r+0x9ee>
 80104bc:	2201      	movs	r2, #1
 80104be:	9904      	ldr	r1, [sp, #16]
 80104c0:	4620      	mov	r0, r4
 80104c2:	f000 fdf7 	bl	80110b4 <__lshift>
 80104c6:	4639      	mov	r1, r7
 80104c8:	9004      	str	r0, [sp, #16]
 80104ca:	f000 fe47 	bl	801115c <__mcmp>
 80104ce:	2800      	cmp	r0, #0
 80104d0:	dc03      	bgt.n	80104da <_dtoa_r+0xa32>
 80104d2:	d1e0      	bne.n	8010496 <_dtoa_r+0x9ee>
 80104d4:	f018 0f01 	tst.w	r8, #1
 80104d8:	d0dd      	beq.n	8010496 <_dtoa_r+0x9ee>
 80104da:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80104de:	d1d8      	bne.n	8010492 <_dtoa_r+0x9ea>
 80104e0:	9b05      	ldr	r3, [sp, #20]
 80104e2:	9a05      	ldr	r2, [sp, #20]
 80104e4:	1c5d      	adds	r5, r3, #1
 80104e6:	2339      	movs	r3, #57	; 0x39
 80104e8:	7013      	strb	r3, [r2, #0]
 80104ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80104ee:	2b39      	cmp	r3, #57	; 0x39
 80104f0:	f105 32ff 	add.w	r2, r5, #4294967295
 80104f4:	d04f      	beq.n	8010596 <_dtoa_r+0xaee>
 80104f6:	3301      	adds	r3, #1
 80104f8:	7013      	strb	r3, [r2, #0]
 80104fa:	e754      	b.n	80103a6 <_dtoa_r+0x8fe>
 80104fc:	9a05      	ldr	r2, [sp, #20]
 80104fe:	2b00      	cmp	r3, #0
 8010500:	f102 0501 	add.w	r5, r2, #1
 8010504:	dd06      	ble.n	8010514 <_dtoa_r+0xa6c>
 8010506:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801050a:	d0e9      	beq.n	80104e0 <_dtoa_r+0xa38>
 801050c:	f108 0801 	add.w	r8, r8, #1
 8010510:	9b05      	ldr	r3, [sp, #20]
 8010512:	e7c2      	b.n	801049a <_dtoa_r+0x9f2>
 8010514:	9a02      	ldr	r2, [sp, #8]
 8010516:	f805 8c01 	strb.w	r8, [r5, #-1]
 801051a:	eba5 030b 	sub.w	r3, r5, fp
 801051e:	4293      	cmp	r3, r2
 8010520:	d021      	beq.n	8010566 <_dtoa_r+0xabe>
 8010522:	2300      	movs	r3, #0
 8010524:	220a      	movs	r2, #10
 8010526:	9904      	ldr	r1, [sp, #16]
 8010528:	4620      	mov	r0, r4
 801052a:	f000 fc0e 	bl	8010d4a <__multadd>
 801052e:	45b1      	cmp	r9, r6
 8010530:	9004      	str	r0, [sp, #16]
 8010532:	f04f 0300 	mov.w	r3, #0
 8010536:	f04f 020a 	mov.w	r2, #10
 801053a:	4649      	mov	r1, r9
 801053c:	4620      	mov	r0, r4
 801053e:	d105      	bne.n	801054c <_dtoa_r+0xaa4>
 8010540:	f000 fc03 	bl	8010d4a <__multadd>
 8010544:	4681      	mov	r9, r0
 8010546:	4606      	mov	r6, r0
 8010548:	9505      	str	r5, [sp, #20]
 801054a:	e776      	b.n	801043a <_dtoa_r+0x992>
 801054c:	f000 fbfd 	bl	8010d4a <__multadd>
 8010550:	4631      	mov	r1, r6
 8010552:	4681      	mov	r9, r0
 8010554:	2300      	movs	r3, #0
 8010556:	220a      	movs	r2, #10
 8010558:	4620      	mov	r0, r4
 801055a:	f000 fbf6 	bl	8010d4a <__multadd>
 801055e:	4606      	mov	r6, r0
 8010560:	e7f2      	b.n	8010548 <_dtoa_r+0xaa0>
 8010562:	f04f 0900 	mov.w	r9, #0
 8010566:	2201      	movs	r2, #1
 8010568:	9904      	ldr	r1, [sp, #16]
 801056a:	4620      	mov	r0, r4
 801056c:	f000 fda2 	bl	80110b4 <__lshift>
 8010570:	4639      	mov	r1, r7
 8010572:	9004      	str	r0, [sp, #16]
 8010574:	f000 fdf2 	bl	801115c <__mcmp>
 8010578:	2800      	cmp	r0, #0
 801057a:	dcb6      	bgt.n	80104ea <_dtoa_r+0xa42>
 801057c:	d102      	bne.n	8010584 <_dtoa_r+0xadc>
 801057e:	f018 0f01 	tst.w	r8, #1
 8010582:	d1b2      	bne.n	80104ea <_dtoa_r+0xa42>
 8010584:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010588:	2b30      	cmp	r3, #48	; 0x30
 801058a:	f105 32ff 	add.w	r2, r5, #4294967295
 801058e:	f47f af0a 	bne.w	80103a6 <_dtoa_r+0x8fe>
 8010592:	4615      	mov	r5, r2
 8010594:	e7f6      	b.n	8010584 <_dtoa_r+0xadc>
 8010596:	4593      	cmp	fp, r2
 8010598:	d105      	bne.n	80105a6 <_dtoa_r+0xafe>
 801059a:	2331      	movs	r3, #49	; 0x31
 801059c:	f10a 0a01 	add.w	sl, sl, #1
 80105a0:	f88b 3000 	strb.w	r3, [fp]
 80105a4:	e6ff      	b.n	80103a6 <_dtoa_r+0x8fe>
 80105a6:	4615      	mov	r5, r2
 80105a8:	e79f      	b.n	80104ea <_dtoa_r+0xa42>
 80105aa:	f8df b064 	ldr.w	fp, [pc, #100]	; 8010610 <_dtoa_r+0xb68>
 80105ae:	e007      	b.n	80105c0 <_dtoa_r+0xb18>
 80105b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80105b2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8010614 <_dtoa_r+0xb6c>
 80105b6:	b11b      	cbz	r3, 80105c0 <_dtoa_r+0xb18>
 80105b8:	f10b 0308 	add.w	r3, fp, #8
 80105bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80105be:	6013      	str	r3, [r2, #0]
 80105c0:	4658      	mov	r0, fp
 80105c2:	b017      	add	sp, #92	; 0x5c
 80105c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105c8:	9b06      	ldr	r3, [sp, #24]
 80105ca:	2b01      	cmp	r3, #1
 80105cc:	f77f ae35 	ble.w	801023a <_dtoa_r+0x792>
 80105d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80105d2:	9307      	str	r3, [sp, #28]
 80105d4:	e649      	b.n	801026a <_dtoa_r+0x7c2>
 80105d6:	9b02      	ldr	r3, [sp, #8]
 80105d8:	2b00      	cmp	r3, #0
 80105da:	dc03      	bgt.n	80105e4 <_dtoa_r+0xb3c>
 80105dc:	9b06      	ldr	r3, [sp, #24]
 80105de:	2b02      	cmp	r3, #2
 80105e0:	f73f aecc 	bgt.w	801037c <_dtoa_r+0x8d4>
 80105e4:	465d      	mov	r5, fp
 80105e6:	4639      	mov	r1, r7
 80105e8:	9804      	ldr	r0, [sp, #16]
 80105ea:	f7ff f9cf 	bl	800f98c <quorem>
 80105ee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80105f2:	f805 8b01 	strb.w	r8, [r5], #1
 80105f6:	9a02      	ldr	r2, [sp, #8]
 80105f8:	eba5 030b 	sub.w	r3, r5, fp
 80105fc:	429a      	cmp	r2, r3
 80105fe:	ddb0      	ble.n	8010562 <_dtoa_r+0xaba>
 8010600:	2300      	movs	r3, #0
 8010602:	220a      	movs	r2, #10
 8010604:	9904      	ldr	r1, [sp, #16]
 8010606:	4620      	mov	r0, r4
 8010608:	f000 fb9f 	bl	8010d4a <__multadd>
 801060c:	9004      	str	r0, [sp, #16]
 801060e:	e7ea      	b.n	80105e6 <_dtoa_r+0xb3e>
 8010610:	0801204c 	.word	0x0801204c
 8010614:	080120c8 	.word	0x080120c8

08010618 <rshift>:
 8010618:	b5f0      	push	{r4, r5, r6, r7, lr}
 801061a:	6906      	ldr	r6, [r0, #16]
 801061c:	114b      	asrs	r3, r1, #5
 801061e:	429e      	cmp	r6, r3
 8010620:	f100 0414 	add.w	r4, r0, #20
 8010624:	dd30      	ble.n	8010688 <rshift+0x70>
 8010626:	f011 011f 	ands.w	r1, r1, #31
 801062a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801062e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8010632:	d108      	bne.n	8010646 <rshift+0x2e>
 8010634:	4621      	mov	r1, r4
 8010636:	42b2      	cmp	r2, r6
 8010638:	460b      	mov	r3, r1
 801063a:	d211      	bcs.n	8010660 <rshift+0x48>
 801063c:	f852 3b04 	ldr.w	r3, [r2], #4
 8010640:	f841 3b04 	str.w	r3, [r1], #4
 8010644:	e7f7      	b.n	8010636 <rshift+0x1e>
 8010646:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 801064a:	f1c1 0c20 	rsb	ip, r1, #32
 801064e:	40cd      	lsrs	r5, r1
 8010650:	3204      	adds	r2, #4
 8010652:	4623      	mov	r3, r4
 8010654:	42b2      	cmp	r2, r6
 8010656:	4617      	mov	r7, r2
 8010658:	d30c      	bcc.n	8010674 <rshift+0x5c>
 801065a:	601d      	str	r5, [r3, #0]
 801065c:	b105      	cbz	r5, 8010660 <rshift+0x48>
 801065e:	3304      	adds	r3, #4
 8010660:	1b1a      	subs	r2, r3, r4
 8010662:	42a3      	cmp	r3, r4
 8010664:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010668:	bf08      	it	eq
 801066a:	2300      	moveq	r3, #0
 801066c:	6102      	str	r2, [r0, #16]
 801066e:	bf08      	it	eq
 8010670:	6143      	streq	r3, [r0, #20]
 8010672:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010674:	683f      	ldr	r7, [r7, #0]
 8010676:	fa07 f70c 	lsl.w	r7, r7, ip
 801067a:	433d      	orrs	r5, r7
 801067c:	f843 5b04 	str.w	r5, [r3], #4
 8010680:	f852 5b04 	ldr.w	r5, [r2], #4
 8010684:	40cd      	lsrs	r5, r1
 8010686:	e7e5      	b.n	8010654 <rshift+0x3c>
 8010688:	4623      	mov	r3, r4
 801068a:	e7e9      	b.n	8010660 <rshift+0x48>

0801068c <__hexdig_fun>:
 801068c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010690:	2b09      	cmp	r3, #9
 8010692:	d802      	bhi.n	801069a <__hexdig_fun+0xe>
 8010694:	3820      	subs	r0, #32
 8010696:	b2c0      	uxtb	r0, r0
 8010698:	4770      	bx	lr
 801069a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801069e:	2b05      	cmp	r3, #5
 80106a0:	d801      	bhi.n	80106a6 <__hexdig_fun+0x1a>
 80106a2:	3847      	subs	r0, #71	; 0x47
 80106a4:	e7f7      	b.n	8010696 <__hexdig_fun+0xa>
 80106a6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80106aa:	2b05      	cmp	r3, #5
 80106ac:	d801      	bhi.n	80106b2 <__hexdig_fun+0x26>
 80106ae:	3827      	subs	r0, #39	; 0x27
 80106b0:	e7f1      	b.n	8010696 <__hexdig_fun+0xa>
 80106b2:	2000      	movs	r0, #0
 80106b4:	4770      	bx	lr

080106b6 <__gethex>:
 80106b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106ba:	b08b      	sub	sp, #44	; 0x2c
 80106bc:	468a      	mov	sl, r1
 80106be:	9002      	str	r0, [sp, #8]
 80106c0:	9816      	ldr	r0, [sp, #88]	; 0x58
 80106c2:	9306      	str	r3, [sp, #24]
 80106c4:	4690      	mov	r8, r2
 80106c6:	f000 fad0 	bl	8010c6a <__localeconv_l>
 80106ca:	6803      	ldr	r3, [r0, #0]
 80106cc:	9303      	str	r3, [sp, #12]
 80106ce:	4618      	mov	r0, r3
 80106d0:	f7ef fd7e 	bl	80001d0 <strlen>
 80106d4:	9b03      	ldr	r3, [sp, #12]
 80106d6:	9001      	str	r0, [sp, #4]
 80106d8:	4403      	add	r3, r0
 80106da:	f04f 0b00 	mov.w	fp, #0
 80106de:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80106e2:	9307      	str	r3, [sp, #28]
 80106e4:	f8da 3000 	ldr.w	r3, [sl]
 80106e8:	3302      	adds	r3, #2
 80106ea:	461f      	mov	r7, r3
 80106ec:	f813 0b01 	ldrb.w	r0, [r3], #1
 80106f0:	2830      	cmp	r0, #48	; 0x30
 80106f2:	d06c      	beq.n	80107ce <__gethex+0x118>
 80106f4:	f7ff ffca 	bl	801068c <__hexdig_fun>
 80106f8:	4604      	mov	r4, r0
 80106fa:	2800      	cmp	r0, #0
 80106fc:	d16a      	bne.n	80107d4 <__gethex+0x11e>
 80106fe:	9a01      	ldr	r2, [sp, #4]
 8010700:	9903      	ldr	r1, [sp, #12]
 8010702:	4638      	mov	r0, r7
 8010704:	f001 f836 	bl	8011774 <strncmp>
 8010708:	2800      	cmp	r0, #0
 801070a:	d166      	bne.n	80107da <__gethex+0x124>
 801070c:	9b01      	ldr	r3, [sp, #4]
 801070e:	5cf8      	ldrb	r0, [r7, r3]
 8010710:	18fe      	adds	r6, r7, r3
 8010712:	f7ff ffbb 	bl	801068c <__hexdig_fun>
 8010716:	2800      	cmp	r0, #0
 8010718:	d062      	beq.n	80107e0 <__gethex+0x12a>
 801071a:	4633      	mov	r3, r6
 801071c:	7818      	ldrb	r0, [r3, #0]
 801071e:	2830      	cmp	r0, #48	; 0x30
 8010720:	461f      	mov	r7, r3
 8010722:	f103 0301 	add.w	r3, r3, #1
 8010726:	d0f9      	beq.n	801071c <__gethex+0x66>
 8010728:	f7ff ffb0 	bl	801068c <__hexdig_fun>
 801072c:	fab0 f580 	clz	r5, r0
 8010730:	096d      	lsrs	r5, r5, #5
 8010732:	4634      	mov	r4, r6
 8010734:	f04f 0b01 	mov.w	fp, #1
 8010738:	463a      	mov	r2, r7
 801073a:	4616      	mov	r6, r2
 801073c:	3201      	adds	r2, #1
 801073e:	7830      	ldrb	r0, [r6, #0]
 8010740:	f7ff ffa4 	bl	801068c <__hexdig_fun>
 8010744:	2800      	cmp	r0, #0
 8010746:	d1f8      	bne.n	801073a <__gethex+0x84>
 8010748:	9a01      	ldr	r2, [sp, #4]
 801074a:	9903      	ldr	r1, [sp, #12]
 801074c:	4630      	mov	r0, r6
 801074e:	f001 f811 	bl	8011774 <strncmp>
 8010752:	b950      	cbnz	r0, 801076a <__gethex+0xb4>
 8010754:	b954      	cbnz	r4, 801076c <__gethex+0xb6>
 8010756:	9b01      	ldr	r3, [sp, #4]
 8010758:	18f4      	adds	r4, r6, r3
 801075a:	4622      	mov	r2, r4
 801075c:	4616      	mov	r6, r2
 801075e:	3201      	adds	r2, #1
 8010760:	7830      	ldrb	r0, [r6, #0]
 8010762:	f7ff ff93 	bl	801068c <__hexdig_fun>
 8010766:	2800      	cmp	r0, #0
 8010768:	d1f8      	bne.n	801075c <__gethex+0xa6>
 801076a:	b10c      	cbz	r4, 8010770 <__gethex+0xba>
 801076c:	1ba4      	subs	r4, r4, r6
 801076e:	00a4      	lsls	r4, r4, #2
 8010770:	7833      	ldrb	r3, [r6, #0]
 8010772:	2b50      	cmp	r3, #80	; 0x50
 8010774:	d001      	beq.n	801077a <__gethex+0xc4>
 8010776:	2b70      	cmp	r3, #112	; 0x70
 8010778:	d140      	bne.n	80107fc <__gethex+0x146>
 801077a:	7873      	ldrb	r3, [r6, #1]
 801077c:	2b2b      	cmp	r3, #43	; 0x2b
 801077e:	d031      	beq.n	80107e4 <__gethex+0x12e>
 8010780:	2b2d      	cmp	r3, #45	; 0x2d
 8010782:	d033      	beq.n	80107ec <__gethex+0x136>
 8010784:	1c71      	adds	r1, r6, #1
 8010786:	f04f 0900 	mov.w	r9, #0
 801078a:	7808      	ldrb	r0, [r1, #0]
 801078c:	f7ff ff7e 	bl	801068c <__hexdig_fun>
 8010790:	1e43      	subs	r3, r0, #1
 8010792:	b2db      	uxtb	r3, r3
 8010794:	2b18      	cmp	r3, #24
 8010796:	d831      	bhi.n	80107fc <__gethex+0x146>
 8010798:	f1a0 0210 	sub.w	r2, r0, #16
 801079c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80107a0:	f7ff ff74 	bl	801068c <__hexdig_fun>
 80107a4:	1e43      	subs	r3, r0, #1
 80107a6:	b2db      	uxtb	r3, r3
 80107a8:	2b18      	cmp	r3, #24
 80107aa:	d922      	bls.n	80107f2 <__gethex+0x13c>
 80107ac:	f1b9 0f00 	cmp.w	r9, #0
 80107b0:	d000      	beq.n	80107b4 <__gethex+0xfe>
 80107b2:	4252      	negs	r2, r2
 80107b4:	4414      	add	r4, r2
 80107b6:	f8ca 1000 	str.w	r1, [sl]
 80107ba:	b30d      	cbz	r5, 8010800 <__gethex+0x14a>
 80107bc:	f1bb 0f00 	cmp.w	fp, #0
 80107c0:	bf0c      	ite	eq
 80107c2:	2706      	moveq	r7, #6
 80107c4:	2700      	movne	r7, #0
 80107c6:	4638      	mov	r0, r7
 80107c8:	b00b      	add	sp, #44	; 0x2c
 80107ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107ce:	f10b 0b01 	add.w	fp, fp, #1
 80107d2:	e78a      	b.n	80106ea <__gethex+0x34>
 80107d4:	2500      	movs	r5, #0
 80107d6:	462c      	mov	r4, r5
 80107d8:	e7ae      	b.n	8010738 <__gethex+0x82>
 80107da:	463e      	mov	r6, r7
 80107dc:	2501      	movs	r5, #1
 80107de:	e7c7      	b.n	8010770 <__gethex+0xba>
 80107e0:	4604      	mov	r4, r0
 80107e2:	e7fb      	b.n	80107dc <__gethex+0x126>
 80107e4:	f04f 0900 	mov.w	r9, #0
 80107e8:	1cb1      	adds	r1, r6, #2
 80107ea:	e7ce      	b.n	801078a <__gethex+0xd4>
 80107ec:	f04f 0901 	mov.w	r9, #1
 80107f0:	e7fa      	b.n	80107e8 <__gethex+0x132>
 80107f2:	230a      	movs	r3, #10
 80107f4:	fb03 0202 	mla	r2, r3, r2, r0
 80107f8:	3a10      	subs	r2, #16
 80107fa:	e7cf      	b.n	801079c <__gethex+0xe6>
 80107fc:	4631      	mov	r1, r6
 80107fe:	e7da      	b.n	80107b6 <__gethex+0x100>
 8010800:	1bf3      	subs	r3, r6, r7
 8010802:	3b01      	subs	r3, #1
 8010804:	4629      	mov	r1, r5
 8010806:	2b07      	cmp	r3, #7
 8010808:	dc49      	bgt.n	801089e <__gethex+0x1e8>
 801080a:	9802      	ldr	r0, [sp, #8]
 801080c:	f000 fa52 	bl	8010cb4 <_Balloc>
 8010810:	9b01      	ldr	r3, [sp, #4]
 8010812:	f100 0914 	add.w	r9, r0, #20
 8010816:	f04f 0b00 	mov.w	fp, #0
 801081a:	f1c3 0301 	rsb	r3, r3, #1
 801081e:	4605      	mov	r5, r0
 8010820:	f8cd 9010 	str.w	r9, [sp, #16]
 8010824:	46da      	mov	sl, fp
 8010826:	9308      	str	r3, [sp, #32]
 8010828:	42b7      	cmp	r7, r6
 801082a:	d33b      	bcc.n	80108a4 <__gethex+0x1ee>
 801082c:	9804      	ldr	r0, [sp, #16]
 801082e:	f840 ab04 	str.w	sl, [r0], #4
 8010832:	eba0 0009 	sub.w	r0, r0, r9
 8010836:	1080      	asrs	r0, r0, #2
 8010838:	6128      	str	r0, [r5, #16]
 801083a:	0147      	lsls	r7, r0, #5
 801083c:	4650      	mov	r0, sl
 801083e:	f000 fafd 	bl	8010e3c <__hi0bits>
 8010842:	f8d8 6000 	ldr.w	r6, [r8]
 8010846:	1a3f      	subs	r7, r7, r0
 8010848:	42b7      	cmp	r7, r6
 801084a:	dd64      	ble.n	8010916 <__gethex+0x260>
 801084c:	1bbf      	subs	r7, r7, r6
 801084e:	4639      	mov	r1, r7
 8010850:	4628      	mov	r0, r5
 8010852:	f000 fe0d 	bl	8011470 <__any_on>
 8010856:	4682      	mov	sl, r0
 8010858:	b178      	cbz	r0, 801087a <__gethex+0x1c4>
 801085a:	1e7b      	subs	r3, r7, #1
 801085c:	1159      	asrs	r1, r3, #5
 801085e:	f003 021f 	and.w	r2, r3, #31
 8010862:	f04f 0a01 	mov.w	sl, #1
 8010866:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801086a:	fa0a f202 	lsl.w	r2, sl, r2
 801086e:	420a      	tst	r2, r1
 8010870:	d003      	beq.n	801087a <__gethex+0x1c4>
 8010872:	4553      	cmp	r3, sl
 8010874:	dc46      	bgt.n	8010904 <__gethex+0x24e>
 8010876:	f04f 0a02 	mov.w	sl, #2
 801087a:	4639      	mov	r1, r7
 801087c:	4628      	mov	r0, r5
 801087e:	f7ff fecb 	bl	8010618 <rshift>
 8010882:	443c      	add	r4, r7
 8010884:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010888:	42a3      	cmp	r3, r4
 801088a:	da52      	bge.n	8010932 <__gethex+0x27c>
 801088c:	4629      	mov	r1, r5
 801088e:	9802      	ldr	r0, [sp, #8]
 8010890:	f000 fa44 	bl	8010d1c <_Bfree>
 8010894:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010896:	2300      	movs	r3, #0
 8010898:	6013      	str	r3, [r2, #0]
 801089a:	27a3      	movs	r7, #163	; 0xa3
 801089c:	e793      	b.n	80107c6 <__gethex+0x110>
 801089e:	3101      	adds	r1, #1
 80108a0:	105b      	asrs	r3, r3, #1
 80108a2:	e7b0      	b.n	8010806 <__gethex+0x150>
 80108a4:	1e73      	subs	r3, r6, #1
 80108a6:	9305      	str	r3, [sp, #20]
 80108a8:	9a07      	ldr	r2, [sp, #28]
 80108aa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80108ae:	4293      	cmp	r3, r2
 80108b0:	d018      	beq.n	80108e4 <__gethex+0x22e>
 80108b2:	f1bb 0f20 	cmp.w	fp, #32
 80108b6:	d107      	bne.n	80108c8 <__gethex+0x212>
 80108b8:	9b04      	ldr	r3, [sp, #16]
 80108ba:	f8c3 a000 	str.w	sl, [r3]
 80108be:	3304      	adds	r3, #4
 80108c0:	f04f 0a00 	mov.w	sl, #0
 80108c4:	9304      	str	r3, [sp, #16]
 80108c6:	46d3      	mov	fp, sl
 80108c8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80108cc:	f7ff fede 	bl	801068c <__hexdig_fun>
 80108d0:	f000 000f 	and.w	r0, r0, #15
 80108d4:	fa00 f00b 	lsl.w	r0, r0, fp
 80108d8:	ea4a 0a00 	orr.w	sl, sl, r0
 80108dc:	f10b 0b04 	add.w	fp, fp, #4
 80108e0:	9b05      	ldr	r3, [sp, #20]
 80108e2:	e00d      	b.n	8010900 <__gethex+0x24a>
 80108e4:	9b05      	ldr	r3, [sp, #20]
 80108e6:	9a08      	ldr	r2, [sp, #32]
 80108e8:	4413      	add	r3, r2
 80108ea:	42bb      	cmp	r3, r7
 80108ec:	d3e1      	bcc.n	80108b2 <__gethex+0x1fc>
 80108ee:	4618      	mov	r0, r3
 80108f0:	9a01      	ldr	r2, [sp, #4]
 80108f2:	9903      	ldr	r1, [sp, #12]
 80108f4:	9309      	str	r3, [sp, #36]	; 0x24
 80108f6:	f000 ff3d 	bl	8011774 <strncmp>
 80108fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80108fc:	2800      	cmp	r0, #0
 80108fe:	d1d8      	bne.n	80108b2 <__gethex+0x1fc>
 8010900:	461e      	mov	r6, r3
 8010902:	e791      	b.n	8010828 <__gethex+0x172>
 8010904:	1eb9      	subs	r1, r7, #2
 8010906:	4628      	mov	r0, r5
 8010908:	f000 fdb2 	bl	8011470 <__any_on>
 801090c:	2800      	cmp	r0, #0
 801090e:	d0b2      	beq.n	8010876 <__gethex+0x1c0>
 8010910:	f04f 0a03 	mov.w	sl, #3
 8010914:	e7b1      	b.n	801087a <__gethex+0x1c4>
 8010916:	da09      	bge.n	801092c <__gethex+0x276>
 8010918:	1bf7      	subs	r7, r6, r7
 801091a:	4629      	mov	r1, r5
 801091c:	463a      	mov	r2, r7
 801091e:	9802      	ldr	r0, [sp, #8]
 8010920:	f000 fbc8 	bl	80110b4 <__lshift>
 8010924:	1be4      	subs	r4, r4, r7
 8010926:	4605      	mov	r5, r0
 8010928:	f100 0914 	add.w	r9, r0, #20
 801092c:	f04f 0a00 	mov.w	sl, #0
 8010930:	e7a8      	b.n	8010884 <__gethex+0x1ce>
 8010932:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010936:	42a0      	cmp	r0, r4
 8010938:	dd6a      	ble.n	8010a10 <__gethex+0x35a>
 801093a:	1b04      	subs	r4, r0, r4
 801093c:	42a6      	cmp	r6, r4
 801093e:	dc2e      	bgt.n	801099e <__gethex+0x2e8>
 8010940:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010944:	2b02      	cmp	r3, #2
 8010946:	d022      	beq.n	801098e <__gethex+0x2d8>
 8010948:	2b03      	cmp	r3, #3
 801094a:	d024      	beq.n	8010996 <__gethex+0x2e0>
 801094c:	2b01      	cmp	r3, #1
 801094e:	d115      	bne.n	801097c <__gethex+0x2c6>
 8010950:	42a6      	cmp	r6, r4
 8010952:	d113      	bne.n	801097c <__gethex+0x2c6>
 8010954:	2e01      	cmp	r6, #1
 8010956:	dc0b      	bgt.n	8010970 <__gethex+0x2ba>
 8010958:	9a06      	ldr	r2, [sp, #24]
 801095a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801095e:	6013      	str	r3, [r2, #0]
 8010960:	2301      	movs	r3, #1
 8010962:	612b      	str	r3, [r5, #16]
 8010964:	f8c9 3000 	str.w	r3, [r9]
 8010968:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801096a:	2762      	movs	r7, #98	; 0x62
 801096c:	601d      	str	r5, [r3, #0]
 801096e:	e72a      	b.n	80107c6 <__gethex+0x110>
 8010970:	1e71      	subs	r1, r6, #1
 8010972:	4628      	mov	r0, r5
 8010974:	f000 fd7c 	bl	8011470 <__any_on>
 8010978:	2800      	cmp	r0, #0
 801097a:	d1ed      	bne.n	8010958 <__gethex+0x2a2>
 801097c:	4629      	mov	r1, r5
 801097e:	9802      	ldr	r0, [sp, #8]
 8010980:	f000 f9cc 	bl	8010d1c <_Bfree>
 8010984:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010986:	2300      	movs	r3, #0
 8010988:	6013      	str	r3, [r2, #0]
 801098a:	2750      	movs	r7, #80	; 0x50
 801098c:	e71b      	b.n	80107c6 <__gethex+0x110>
 801098e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010990:	2b00      	cmp	r3, #0
 8010992:	d0e1      	beq.n	8010958 <__gethex+0x2a2>
 8010994:	e7f2      	b.n	801097c <__gethex+0x2c6>
 8010996:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010998:	2b00      	cmp	r3, #0
 801099a:	d1dd      	bne.n	8010958 <__gethex+0x2a2>
 801099c:	e7ee      	b.n	801097c <__gethex+0x2c6>
 801099e:	1e67      	subs	r7, r4, #1
 80109a0:	f1ba 0f00 	cmp.w	sl, #0
 80109a4:	d131      	bne.n	8010a0a <__gethex+0x354>
 80109a6:	b127      	cbz	r7, 80109b2 <__gethex+0x2fc>
 80109a8:	4639      	mov	r1, r7
 80109aa:	4628      	mov	r0, r5
 80109ac:	f000 fd60 	bl	8011470 <__any_on>
 80109b0:	4682      	mov	sl, r0
 80109b2:	117a      	asrs	r2, r7, #5
 80109b4:	2301      	movs	r3, #1
 80109b6:	f007 071f 	and.w	r7, r7, #31
 80109ba:	fa03 f707 	lsl.w	r7, r3, r7
 80109be:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80109c2:	4621      	mov	r1, r4
 80109c4:	421f      	tst	r7, r3
 80109c6:	4628      	mov	r0, r5
 80109c8:	bf18      	it	ne
 80109ca:	f04a 0a02 	orrne.w	sl, sl, #2
 80109ce:	1b36      	subs	r6, r6, r4
 80109d0:	f7ff fe22 	bl	8010618 <rshift>
 80109d4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80109d8:	2702      	movs	r7, #2
 80109da:	f1ba 0f00 	cmp.w	sl, #0
 80109de:	d048      	beq.n	8010a72 <__gethex+0x3bc>
 80109e0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80109e4:	2b02      	cmp	r3, #2
 80109e6:	d015      	beq.n	8010a14 <__gethex+0x35e>
 80109e8:	2b03      	cmp	r3, #3
 80109ea:	d017      	beq.n	8010a1c <__gethex+0x366>
 80109ec:	2b01      	cmp	r3, #1
 80109ee:	d109      	bne.n	8010a04 <__gethex+0x34e>
 80109f0:	f01a 0f02 	tst.w	sl, #2
 80109f4:	d006      	beq.n	8010a04 <__gethex+0x34e>
 80109f6:	f8d9 3000 	ldr.w	r3, [r9]
 80109fa:	ea4a 0a03 	orr.w	sl, sl, r3
 80109fe:	f01a 0f01 	tst.w	sl, #1
 8010a02:	d10e      	bne.n	8010a22 <__gethex+0x36c>
 8010a04:	f047 0710 	orr.w	r7, r7, #16
 8010a08:	e033      	b.n	8010a72 <__gethex+0x3bc>
 8010a0a:	f04f 0a01 	mov.w	sl, #1
 8010a0e:	e7d0      	b.n	80109b2 <__gethex+0x2fc>
 8010a10:	2701      	movs	r7, #1
 8010a12:	e7e2      	b.n	80109da <__gethex+0x324>
 8010a14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010a16:	f1c3 0301 	rsb	r3, r3, #1
 8010a1a:	9315      	str	r3, [sp, #84]	; 0x54
 8010a1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d0f0      	beq.n	8010a04 <__gethex+0x34e>
 8010a22:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8010a26:	f105 0314 	add.w	r3, r5, #20
 8010a2a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8010a2e:	eb03 010a 	add.w	r1, r3, sl
 8010a32:	f04f 0c00 	mov.w	ip, #0
 8010a36:	4618      	mov	r0, r3
 8010a38:	f853 2b04 	ldr.w	r2, [r3], #4
 8010a3c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010a40:	d01c      	beq.n	8010a7c <__gethex+0x3c6>
 8010a42:	3201      	adds	r2, #1
 8010a44:	6002      	str	r2, [r0, #0]
 8010a46:	2f02      	cmp	r7, #2
 8010a48:	f105 0314 	add.w	r3, r5, #20
 8010a4c:	d138      	bne.n	8010ac0 <__gethex+0x40a>
 8010a4e:	f8d8 2000 	ldr.w	r2, [r8]
 8010a52:	3a01      	subs	r2, #1
 8010a54:	42b2      	cmp	r2, r6
 8010a56:	d10a      	bne.n	8010a6e <__gethex+0x3b8>
 8010a58:	1171      	asrs	r1, r6, #5
 8010a5a:	2201      	movs	r2, #1
 8010a5c:	f006 061f 	and.w	r6, r6, #31
 8010a60:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010a64:	fa02 f606 	lsl.w	r6, r2, r6
 8010a68:	421e      	tst	r6, r3
 8010a6a:	bf18      	it	ne
 8010a6c:	4617      	movne	r7, r2
 8010a6e:	f047 0720 	orr.w	r7, r7, #32
 8010a72:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010a74:	601d      	str	r5, [r3, #0]
 8010a76:	9b06      	ldr	r3, [sp, #24]
 8010a78:	601c      	str	r4, [r3, #0]
 8010a7a:	e6a4      	b.n	80107c6 <__gethex+0x110>
 8010a7c:	4299      	cmp	r1, r3
 8010a7e:	f843 cc04 	str.w	ip, [r3, #-4]
 8010a82:	d8d8      	bhi.n	8010a36 <__gethex+0x380>
 8010a84:	68ab      	ldr	r3, [r5, #8]
 8010a86:	4599      	cmp	r9, r3
 8010a88:	db12      	blt.n	8010ab0 <__gethex+0x3fa>
 8010a8a:	6869      	ldr	r1, [r5, #4]
 8010a8c:	9802      	ldr	r0, [sp, #8]
 8010a8e:	3101      	adds	r1, #1
 8010a90:	f000 f910 	bl	8010cb4 <_Balloc>
 8010a94:	692a      	ldr	r2, [r5, #16]
 8010a96:	3202      	adds	r2, #2
 8010a98:	f105 010c 	add.w	r1, r5, #12
 8010a9c:	4683      	mov	fp, r0
 8010a9e:	0092      	lsls	r2, r2, #2
 8010aa0:	300c      	adds	r0, #12
 8010aa2:	f7fd f995 	bl	800ddd0 <memcpy>
 8010aa6:	4629      	mov	r1, r5
 8010aa8:	9802      	ldr	r0, [sp, #8]
 8010aaa:	f000 f937 	bl	8010d1c <_Bfree>
 8010aae:	465d      	mov	r5, fp
 8010ab0:	692b      	ldr	r3, [r5, #16]
 8010ab2:	1c5a      	adds	r2, r3, #1
 8010ab4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8010ab8:	612a      	str	r2, [r5, #16]
 8010aba:	2201      	movs	r2, #1
 8010abc:	615a      	str	r2, [r3, #20]
 8010abe:	e7c2      	b.n	8010a46 <__gethex+0x390>
 8010ac0:	692a      	ldr	r2, [r5, #16]
 8010ac2:	454a      	cmp	r2, r9
 8010ac4:	dd0b      	ble.n	8010ade <__gethex+0x428>
 8010ac6:	2101      	movs	r1, #1
 8010ac8:	4628      	mov	r0, r5
 8010aca:	f7ff fda5 	bl	8010618 <rshift>
 8010ace:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010ad2:	3401      	adds	r4, #1
 8010ad4:	42a3      	cmp	r3, r4
 8010ad6:	f6ff aed9 	blt.w	801088c <__gethex+0x1d6>
 8010ada:	2701      	movs	r7, #1
 8010adc:	e7c7      	b.n	8010a6e <__gethex+0x3b8>
 8010ade:	f016 061f 	ands.w	r6, r6, #31
 8010ae2:	d0fa      	beq.n	8010ada <__gethex+0x424>
 8010ae4:	449a      	add	sl, r3
 8010ae6:	f1c6 0620 	rsb	r6, r6, #32
 8010aea:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8010aee:	f000 f9a5 	bl	8010e3c <__hi0bits>
 8010af2:	42b0      	cmp	r0, r6
 8010af4:	dbe7      	blt.n	8010ac6 <__gethex+0x410>
 8010af6:	e7f0      	b.n	8010ada <__gethex+0x424>

08010af8 <L_shift>:
 8010af8:	f1c2 0208 	rsb	r2, r2, #8
 8010afc:	0092      	lsls	r2, r2, #2
 8010afe:	b570      	push	{r4, r5, r6, lr}
 8010b00:	f1c2 0620 	rsb	r6, r2, #32
 8010b04:	6843      	ldr	r3, [r0, #4]
 8010b06:	6804      	ldr	r4, [r0, #0]
 8010b08:	fa03 f506 	lsl.w	r5, r3, r6
 8010b0c:	432c      	orrs	r4, r5
 8010b0e:	40d3      	lsrs	r3, r2
 8010b10:	6004      	str	r4, [r0, #0]
 8010b12:	f840 3f04 	str.w	r3, [r0, #4]!
 8010b16:	4288      	cmp	r0, r1
 8010b18:	d3f4      	bcc.n	8010b04 <L_shift+0xc>
 8010b1a:	bd70      	pop	{r4, r5, r6, pc}

08010b1c <__match>:
 8010b1c:	b530      	push	{r4, r5, lr}
 8010b1e:	6803      	ldr	r3, [r0, #0]
 8010b20:	3301      	adds	r3, #1
 8010b22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010b26:	b914      	cbnz	r4, 8010b2e <__match+0x12>
 8010b28:	6003      	str	r3, [r0, #0]
 8010b2a:	2001      	movs	r0, #1
 8010b2c:	bd30      	pop	{r4, r5, pc}
 8010b2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010b32:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010b36:	2d19      	cmp	r5, #25
 8010b38:	bf98      	it	ls
 8010b3a:	3220      	addls	r2, #32
 8010b3c:	42a2      	cmp	r2, r4
 8010b3e:	d0f0      	beq.n	8010b22 <__match+0x6>
 8010b40:	2000      	movs	r0, #0
 8010b42:	e7f3      	b.n	8010b2c <__match+0x10>

08010b44 <__hexnan>:
 8010b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b48:	680b      	ldr	r3, [r1, #0]
 8010b4a:	6801      	ldr	r1, [r0, #0]
 8010b4c:	115f      	asrs	r7, r3, #5
 8010b4e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8010b52:	f013 031f 	ands.w	r3, r3, #31
 8010b56:	b087      	sub	sp, #28
 8010b58:	bf18      	it	ne
 8010b5a:	3704      	addne	r7, #4
 8010b5c:	2500      	movs	r5, #0
 8010b5e:	1f3e      	subs	r6, r7, #4
 8010b60:	4682      	mov	sl, r0
 8010b62:	4690      	mov	r8, r2
 8010b64:	9301      	str	r3, [sp, #4]
 8010b66:	f847 5c04 	str.w	r5, [r7, #-4]
 8010b6a:	46b1      	mov	r9, r6
 8010b6c:	4634      	mov	r4, r6
 8010b6e:	9502      	str	r5, [sp, #8]
 8010b70:	46ab      	mov	fp, r5
 8010b72:	784a      	ldrb	r2, [r1, #1]
 8010b74:	1c4b      	adds	r3, r1, #1
 8010b76:	9303      	str	r3, [sp, #12]
 8010b78:	b342      	cbz	r2, 8010bcc <__hexnan+0x88>
 8010b7a:	4610      	mov	r0, r2
 8010b7c:	9105      	str	r1, [sp, #20]
 8010b7e:	9204      	str	r2, [sp, #16]
 8010b80:	f7ff fd84 	bl	801068c <__hexdig_fun>
 8010b84:	2800      	cmp	r0, #0
 8010b86:	d143      	bne.n	8010c10 <__hexnan+0xcc>
 8010b88:	9a04      	ldr	r2, [sp, #16]
 8010b8a:	9905      	ldr	r1, [sp, #20]
 8010b8c:	2a20      	cmp	r2, #32
 8010b8e:	d818      	bhi.n	8010bc2 <__hexnan+0x7e>
 8010b90:	9b02      	ldr	r3, [sp, #8]
 8010b92:	459b      	cmp	fp, r3
 8010b94:	dd13      	ble.n	8010bbe <__hexnan+0x7a>
 8010b96:	454c      	cmp	r4, r9
 8010b98:	d206      	bcs.n	8010ba8 <__hexnan+0x64>
 8010b9a:	2d07      	cmp	r5, #7
 8010b9c:	dc04      	bgt.n	8010ba8 <__hexnan+0x64>
 8010b9e:	462a      	mov	r2, r5
 8010ba0:	4649      	mov	r1, r9
 8010ba2:	4620      	mov	r0, r4
 8010ba4:	f7ff ffa8 	bl	8010af8 <L_shift>
 8010ba8:	4544      	cmp	r4, r8
 8010baa:	d944      	bls.n	8010c36 <__hexnan+0xf2>
 8010bac:	2300      	movs	r3, #0
 8010bae:	f1a4 0904 	sub.w	r9, r4, #4
 8010bb2:	f844 3c04 	str.w	r3, [r4, #-4]
 8010bb6:	f8cd b008 	str.w	fp, [sp, #8]
 8010bba:	464c      	mov	r4, r9
 8010bbc:	461d      	mov	r5, r3
 8010bbe:	9903      	ldr	r1, [sp, #12]
 8010bc0:	e7d7      	b.n	8010b72 <__hexnan+0x2e>
 8010bc2:	2a29      	cmp	r2, #41	; 0x29
 8010bc4:	d14a      	bne.n	8010c5c <__hexnan+0x118>
 8010bc6:	3102      	adds	r1, #2
 8010bc8:	f8ca 1000 	str.w	r1, [sl]
 8010bcc:	f1bb 0f00 	cmp.w	fp, #0
 8010bd0:	d044      	beq.n	8010c5c <__hexnan+0x118>
 8010bd2:	454c      	cmp	r4, r9
 8010bd4:	d206      	bcs.n	8010be4 <__hexnan+0xa0>
 8010bd6:	2d07      	cmp	r5, #7
 8010bd8:	dc04      	bgt.n	8010be4 <__hexnan+0xa0>
 8010bda:	462a      	mov	r2, r5
 8010bdc:	4649      	mov	r1, r9
 8010bde:	4620      	mov	r0, r4
 8010be0:	f7ff ff8a 	bl	8010af8 <L_shift>
 8010be4:	4544      	cmp	r4, r8
 8010be6:	d928      	bls.n	8010c3a <__hexnan+0xf6>
 8010be8:	4643      	mov	r3, r8
 8010bea:	f854 2b04 	ldr.w	r2, [r4], #4
 8010bee:	f843 2b04 	str.w	r2, [r3], #4
 8010bf2:	42a6      	cmp	r6, r4
 8010bf4:	d2f9      	bcs.n	8010bea <__hexnan+0xa6>
 8010bf6:	2200      	movs	r2, #0
 8010bf8:	f843 2b04 	str.w	r2, [r3], #4
 8010bfc:	429e      	cmp	r6, r3
 8010bfe:	d2fb      	bcs.n	8010bf8 <__hexnan+0xb4>
 8010c00:	6833      	ldr	r3, [r6, #0]
 8010c02:	b91b      	cbnz	r3, 8010c0c <__hexnan+0xc8>
 8010c04:	4546      	cmp	r6, r8
 8010c06:	d127      	bne.n	8010c58 <__hexnan+0x114>
 8010c08:	2301      	movs	r3, #1
 8010c0a:	6033      	str	r3, [r6, #0]
 8010c0c:	2005      	movs	r0, #5
 8010c0e:	e026      	b.n	8010c5e <__hexnan+0x11a>
 8010c10:	3501      	adds	r5, #1
 8010c12:	2d08      	cmp	r5, #8
 8010c14:	f10b 0b01 	add.w	fp, fp, #1
 8010c18:	dd06      	ble.n	8010c28 <__hexnan+0xe4>
 8010c1a:	4544      	cmp	r4, r8
 8010c1c:	d9cf      	bls.n	8010bbe <__hexnan+0x7a>
 8010c1e:	2300      	movs	r3, #0
 8010c20:	f844 3c04 	str.w	r3, [r4, #-4]
 8010c24:	2501      	movs	r5, #1
 8010c26:	3c04      	subs	r4, #4
 8010c28:	6822      	ldr	r2, [r4, #0]
 8010c2a:	f000 000f 	and.w	r0, r0, #15
 8010c2e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010c32:	6020      	str	r0, [r4, #0]
 8010c34:	e7c3      	b.n	8010bbe <__hexnan+0x7a>
 8010c36:	2508      	movs	r5, #8
 8010c38:	e7c1      	b.n	8010bbe <__hexnan+0x7a>
 8010c3a:	9b01      	ldr	r3, [sp, #4]
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d0df      	beq.n	8010c00 <__hexnan+0xbc>
 8010c40:	f04f 32ff 	mov.w	r2, #4294967295
 8010c44:	f1c3 0320 	rsb	r3, r3, #32
 8010c48:	fa22 f303 	lsr.w	r3, r2, r3
 8010c4c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8010c50:	401a      	ands	r2, r3
 8010c52:	f847 2c04 	str.w	r2, [r7, #-4]
 8010c56:	e7d3      	b.n	8010c00 <__hexnan+0xbc>
 8010c58:	3e04      	subs	r6, #4
 8010c5a:	e7d1      	b.n	8010c00 <__hexnan+0xbc>
 8010c5c:	2004      	movs	r0, #4
 8010c5e:	b007      	add	sp, #28
 8010c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010c64 <__locale_ctype_ptr_l>:
 8010c64:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8010c68:	4770      	bx	lr

08010c6a <__localeconv_l>:
 8010c6a:	30f0      	adds	r0, #240	; 0xf0
 8010c6c:	4770      	bx	lr
	...

08010c70 <_localeconv_r>:
 8010c70:	4b04      	ldr	r3, [pc, #16]	; (8010c84 <_localeconv_r+0x14>)
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	6a18      	ldr	r0, [r3, #32]
 8010c76:	4b04      	ldr	r3, [pc, #16]	; (8010c88 <_localeconv_r+0x18>)
 8010c78:	2800      	cmp	r0, #0
 8010c7a:	bf08      	it	eq
 8010c7c:	4618      	moveq	r0, r3
 8010c7e:	30f0      	adds	r0, #240	; 0xf0
 8010c80:	4770      	bx	lr
 8010c82:	bf00      	nop
 8010c84:	20000184 	.word	0x20000184
 8010c88:	200001e8 	.word	0x200001e8

08010c8c <__ascii_mbtowc>:
 8010c8c:	b082      	sub	sp, #8
 8010c8e:	b901      	cbnz	r1, 8010c92 <__ascii_mbtowc+0x6>
 8010c90:	a901      	add	r1, sp, #4
 8010c92:	b142      	cbz	r2, 8010ca6 <__ascii_mbtowc+0x1a>
 8010c94:	b14b      	cbz	r3, 8010caa <__ascii_mbtowc+0x1e>
 8010c96:	7813      	ldrb	r3, [r2, #0]
 8010c98:	600b      	str	r3, [r1, #0]
 8010c9a:	7812      	ldrb	r2, [r2, #0]
 8010c9c:	1c10      	adds	r0, r2, #0
 8010c9e:	bf18      	it	ne
 8010ca0:	2001      	movne	r0, #1
 8010ca2:	b002      	add	sp, #8
 8010ca4:	4770      	bx	lr
 8010ca6:	4610      	mov	r0, r2
 8010ca8:	e7fb      	b.n	8010ca2 <__ascii_mbtowc+0x16>
 8010caa:	f06f 0001 	mvn.w	r0, #1
 8010cae:	e7f8      	b.n	8010ca2 <__ascii_mbtowc+0x16>

08010cb0 <__malloc_lock>:
 8010cb0:	4770      	bx	lr

08010cb2 <__malloc_unlock>:
 8010cb2:	4770      	bx	lr

08010cb4 <_Balloc>:
 8010cb4:	b570      	push	{r4, r5, r6, lr}
 8010cb6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010cb8:	4604      	mov	r4, r0
 8010cba:	460e      	mov	r6, r1
 8010cbc:	b93d      	cbnz	r5, 8010cce <_Balloc+0x1a>
 8010cbe:	2010      	movs	r0, #16
 8010cc0:	f7fd f876 	bl	800ddb0 <malloc>
 8010cc4:	6260      	str	r0, [r4, #36]	; 0x24
 8010cc6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010cca:	6005      	str	r5, [r0, #0]
 8010ccc:	60c5      	str	r5, [r0, #12]
 8010cce:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8010cd0:	68eb      	ldr	r3, [r5, #12]
 8010cd2:	b183      	cbz	r3, 8010cf6 <_Balloc+0x42>
 8010cd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010cd6:	68db      	ldr	r3, [r3, #12]
 8010cd8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8010cdc:	b9b8      	cbnz	r0, 8010d0e <_Balloc+0x5a>
 8010cde:	2101      	movs	r1, #1
 8010ce0:	fa01 f506 	lsl.w	r5, r1, r6
 8010ce4:	1d6a      	adds	r2, r5, #5
 8010ce6:	0092      	lsls	r2, r2, #2
 8010ce8:	4620      	mov	r0, r4
 8010cea:	f000 fbe2 	bl	80114b2 <_calloc_r>
 8010cee:	b160      	cbz	r0, 8010d0a <_Balloc+0x56>
 8010cf0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8010cf4:	e00e      	b.n	8010d14 <_Balloc+0x60>
 8010cf6:	2221      	movs	r2, #33	; 0x21
 8010cf8:	2104      	movs	r1, #4
 8010cfa:	4620      	mov	r0, r4
 8010cfc:	f000 fbd9 	bl	80114b2 <_calloc_r>
 8010d00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010d02:	60e8      	str	r0, [r5, #12]
 8010d04:	68db      	ldr	r3, [r3, #12]
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d1e4      	bne.n	8010cd4 <_Balloc+0x20>
 8010d0a:	2000      	movs	r0, #0
 8010d0c:	bd70      	pop	{r4, r5, r6, pc}
 8010d0e:	6802      	ldr	r2, [r0, #0]
 8010d10:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8010d14:	2300      	movs	r3, #0
 8010d16:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010d1a:	e7f7      	b.n	8010d0c <_Balloc+0x58>

08010d1c <_Bfree>:
 8010d1c:	b570      	push	{r4, r5, r6, lr}
 8010d1e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8010d20:	4606      	mov	r6, r0
 8010d22:	460d      	mov	r5, r1
 8010d24:	b93c      	cbnz	r4, 8010d36 <_Bfree+0x1a>
 8010d26:	2010      	movs	r0, #16
 8010d28:	f7fd f842 	bl	800ddb0 <malloc>
 8010d2c:	6270      	str	r0, [r6, #36]	; 0x24
 8010d2e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010d32:	6004      	str	r4, [r0, #0]
 8010d34:	60c4      	str	r4, [r0, #12]
 8010d36:	b13d      	cbz	r5, 8010d48 <_Bfree+0x2c>
 8010d38:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8010d3a:	686a      	ldr	r2, [r5, #4]
 8010d3c:	68db      	ldr	r3, [r3, #12]
 8010d3e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010d42:	6029      	str	r1, [r5, #0]
 8010d44:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8010d48:	bd70      	pop	{r4, r5, r6, pc}

08010d4a <__multadd>:
 8010d4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d4e:	690d      	ldr	r5, [r1, #16]
 8010d50:	461f      	mov	r7, r3
 8010d52:	4606      	mov	r6, r0
 8010d54:	460c      	mov	r4, r1
 8010d56:	f101 0c14 	add.w	ip, r1, #20
 8010d5a:	2300      	movs	r3, #0
 8010d5c:	f8dc 0000 	ldr.w	r0, [ip]
 8010d60:	b281      	uxth	r1, r0
 8010d62:	fb02 7101 	mla	r1, r2, r1, r7
 8010d66:	0c0f      	lsrs	r7, r1, #16
 8010d68:	0c00      	lsrs	r0, r0, #16
 8010d6a:	fb02 7000 	mla	r0, r2, r0, r7
 8010d6e:	b289      	uxth	r1, r1
 8010d70:	3301      	adds	r3, #1
 8010d72:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8010d76:	429d      	cmp	r5, r3
 8010d78:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8010d7c:	f84c 1b04 	str.w	r1, [ip], #4
 8010d80:	dcec      	bgt.n	8010d5c <__multadd+0x12>
 8010d82:	b1d7      	cbz	r7, 8010dba <__multadd+0x70>
 8010d84:	68a3      	ldr	r3, [r4, #8]
 8010d86:	42ab      	cmp	r3, r5
 8010d88:	dc12      	bgt.n	8010db0 <__multadd+0x66>
 8010d8a:	6861      	ldr	r1, [r4, #4]
 8010d8c:	4630      	mov	r0, r6
 8010d8e:	3101      	adds	r1, #1
 8010d90:	f7ff ff90 	bl	8010cb4 <_Balloc>
 8010d94:	6922      	ldr	r2, [r4, #16]
 8010d96:	3202      	adds	r2, #2
 8010d98:	f104 010c 	add.w	r1, r4, #12
 8010d9c:	4680      	mov	r8, r0
 8010d9e:	0092      	lsls	r2, r2, #2
 8010da0:	300c      	adds	r0, #12
 8010da2:	f7fd f815 	bl	800ddd0 <memcpy>
 8010da6:	4621      	mov	r1, r4
 8010da8:	4630      	mov	r0, r6
 8010daa:	f7ff ffb7 	bl	8010d1c <_Bfree>
 8010dae:	4644      	mov	r4, r8
 8010db0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010db4:	3501      	adds	r5, #1
 8010db6:	615f      	str	r7, [r3, #20]
 8010db8:	6125      	str	r5, [r4, #16]
 8010dba:	4620      	mov	r0, r4
 8010dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010dc0 <__s2b>:
 8010dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010dc4:	460c      	mov	r4, r1
 8010dc6:	4615      	mov	r5, r2
 8010dc8:	461f      	mov	r7, r3
 8010dca:	2209      	movs	r2, #9
 8010dcc:	3308      	adds	r3, #8
 8010dce:	4606      	mov	r6, r0
 8010dd0:	fb93 f3f2 	sdiv	r3, r3, r2
 8010dd4:	2100      	movs	r1, #0
 8010dd6:	2201      	movs	r2, #1
 8010dd8:	429a      	cmp	r2, r3
 8010dda:	db20      	blt.n	8010e1e <__s2b+0x5e>
 8010ddc:	4630      	mov	r0, r6
 8010dde:	f7ff ff69 	bl	8010cb4 <_Balloc>
 8010de2:	9b08      	ldr	r3, [sp, #32]
 8010de4:	6143      	str	r3, [r0, #20]
 8010de6:	2d09      	cmp	r5, #9
 8010de8:	f04f 0301 	mov.w	r3, #1
 8010dec:	6103      	str	r3, [r0, #16]
 8010dee:	dd19      	ble.n	8010e24 <__s2b+0x64>
 8010df0:	f104 0809 	add.w	r8, r4, #9
 8010df4:	46c1      	mov	r9, r8
 8010df6:	442c      	add	r4, r5
 8010df8:	f819 3b01 	ldrb.w	r3, [r9], #1
 8010dfc:	4601      	mov	r1, r0
 8010dfe:	3b30      	subs	r3, #48	; 0x30
 8010e00:	220a      	movs	r2, #10
 8010e02:	4630      	mov	r0, r6
 8010e04:	f7ff ffa1 	bl	8010d4a <__multadd>
 8010e08:	45a1      	cmp	r9, r4
 8010e0a:	d1f5      	bne.n	8010df8 <__s2b+0x38>
 8010e0c:	eb08 0405 	add.w	r4, r8, r5
 8010e10:	3c08      	subs	r4, #8
 8010e12:	1b2d      	subs	r5, r5, r4
 8010e14:	1963      	adds	r3, r4, r5
 8010e16:	42bb      	cmp	r3, r7
 8010e18:	db07      	blt.n	8010e2a <__s2b+0x6a>
 8010e1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e1e:	0052      	lsls	r2, r2, #1
 8010e20:	3101      	adds	r1, #1
 8010e22:	e7d9      	b.n	8010dd8 <__s2b+0x18>
 8010e24:	340a      	adds	r4, #10
 8010e26:	2509      	movs	r5, #9
 8010e28:	e7f3      	b.n	8010e12 <__s2b+0x52>
 8010e2a:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010e2e:	4601      	mov	r1, r0
 8010e30:	3b30      	subs	r3, #48	; 0x30
 8010e32:	220a      	movs	r2, #10
 8010e34:	4630      	mov	r0, r6
 8010e36:	f7ff ff88 	bl	8010d4a <__multadd>
 8010e3a:	e7eb      	b.n	8010e14 <__s2b+0x54>

08010e3c <__hi0bits>:
 8010e3c:	0c02      	lsrs	r2, r0, #16
 8010e3e:	0412      	lsls	r2, r2, #16
 8010e40:	4603      	mov	r3, r0
 8010e42:	b9b2      	cbnz	r2, 8010e72 <__hi0bits+0x36>
 8010e44:	0403      	lsls	r3, r0, #16
 8010e46:	2010      	movs	r0, #16
 8010e48:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8010e4c:	bf04      	itt	eq
 8010e4e:	021b      	lsleq	r3, r3, #8
 8010e50:	3008      	addeq	r0, #8
 8010e52:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8010e56:	bf04      	itt	eq
 8010e58:	011b      	lsleq	r3, r3, #4
 8010e5a:	3004      	addeq	r0, #4
 8010e5c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8010e60:	bf04      	itt	eq
 8010e62:	009b      	lsleq	r3, r3, #2
 8010e64:	3002      	addeq	r0, #2
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	db06      	blt.n	8010e78 <__hi0bits+0x3c>
 8010e6a:	005b      	lsls	r3, r3, #1
 8010e6c:	d503      	bpl.n	8010e76 <__hi0bits+0x3a>
 8010e6e:	3001      	adds	r0, #1
 8010e70:	4770      	bx	lr
 8010e72:	2000      	movs	r0, #0
 8010e74:	e7e8      	b.n	8010e48 <__hi0bits+0xc>
 8010e76:	2020      	movs	r0, #32
 8010e78:	4770      	bx	lr

08010e7a <__lo0bits>:
 8010e7a:	6803      	ldr	r3, [r0, #0]
 8010e7c:	f013 0207 	ands.w	r2, r3, #7
 8010e80:	4601      	mov	r1, r0
 8010e82:	d00b      	beq.n	8010e9c <__lo0bits+0x22>
 8010e84:	07da      	lsls	r2, r3, #31
 8010e86:	d423      	bmi.n	8010ed0 <__lo0bits+0x56>
 8010e88:	0798      	lsls	r0, r3, #30
 8010e8a:	bf49      	itett	mi
 8010e8c:	085b      	lsrmi	r3, r3, #1
 8010e8e:	089b      	lsrpl	r3, r3, #2
 8010e90:	2001      	movmi	r0, #1
 8010e92:	600b      	strmi	r3, [r1, #0]
 8010e94:	bf5c      	itt	pl
 8010e96:	600b      	strpl	r3, [r1, #0]
 8010e98:	2002      	movpl	r0, #2
 8010e9a:	4770      	bx	lr
 8010e9c:	b298      	uxth	r0, r3
 8010e9e:	b9a8      	cbnz	r0, 8010ecc <__lo0bits+0x52>
 8010ea0:	0c1b      	lsrs	r3, r3, #16
 8010ea2:	2010      	movs	r0, #16
 8010ea4:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010ea8:	bf04      	itt	eq
 8010eaa:	0a1b      	lsreq	r3, r3, #8
 8010eac:	3008      	addeq	r0, #8
 8010eae:	071a      	lsls	r2, r3, #28
 8010eb0:	bf04      	itt	eq
 8010eb2:	091b      	lsreq	r3, r3, #4
 8010eb4:	3004      	addeq	r0, #4
 8010eb6:	079a      	lsls	r2, r3, #30
 8010eb8:	bf04      	itt	eq
 8010eba:	089b      	lsreq	r3, r3, #2
 8010ebc:	3002      	addeq	r0, #2
 8010ebe:	07da      	lsls	r2, r3, #31
 8010ec0:	d402      	bmi.n	8010ec8 <__lo0bits+0x4e>
 8010ec2:	085b      	lsrs	r3, r3, #1
 8010ec4:	d006      	beq.n	8010ed4 <__lo0bits+0x5a>
 8010ec6:	3001      	adds	r0, #1
 8010ec8:	600b      	str	r3, [r1, #0]
 8010eca:	4770      	bx	lr
 8010ecc:	4610      	mov	r0, r2
 8010ece:	e7e9      	b.n	8010ea4 <__lo0bits+0x2a>
 8010ed0:	2000      	movs	r0, #0
 8010ed2:	4770      	bx	lr
 8010ed4:	2020      	movs	r0, #32
 8010ed6:	4770      	bx	lr

08010ed8 <__i2b>:
 8010ed8:	b510      	push	{r4, lr}
 8010eda:	460c      	mov	r4, r1
 8010edc:	2101      	movs	r1, #1
 8010ede:	f7ff fee9 	bl	8010cb4 <_Balloc>
 8010ee2:	2201      	movs	r2, #1
 8010ee4:	6144      	str	r4, [r0, #20]
 8010ee6:	6102      	str	r2, [r0, #16]
 8010ee8:	bd10      	pop	{r4, pc}

08010eea <__multiply>:
 8010eea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010eee:	4614      	mov	r4, r2
 8010ef0:	690a      	ldr	r2, [r1, #16]
 8010ef2:	6923      	ldr	r3, [r4, #16]
 8010ef4:	429a      	cmp	r2, r3
 8010ef6:	bfb8      	it	lt
 8010ef8:	460b      	movlt	r3, r1
 8010efa:	4688      	mov	r8, r1
 8010efc:	bfbc      	itt	lt
 8010efe:	46a0      	movlt	r8, r4
 8010f00:	461c      	movlt	r4, r3
 8010f02:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010f06:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8010f0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010f0e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010f12:	eb07 0609 	add.w	r6, r7, r9
 8010f16:	42b3      	cmp	r3, r6
 8010f18:	bfb8      	it	lt
 8010f1a:	3101      	addlt	r1, #1
 8010f1c:	f7ff feca 	bl	8010cb4 <_Balloc>
 8010f20:	f100 0514 	add.w	r5, r0, #20
 8010f24:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8010f28:	462b      	mov	r3, r5
 8010f2a:	2200      	movs	r2, #0
 8010f2c:	4573      	cmp	r3, lr
 8010f2e:	d316      	bcc.n	8010f5e <__multiply+0x74>
 8010f30:	f104 0214 	add.w	r2, r4, #20
 8010f34:	f108 0114 	add.w	r1, r8, #20
 8010f38:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8010f3c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8010f40:	9300      	str	r3, [sp, #0]
 8010f42:	9b00      	ldr	r3, [sp, #0]
 8010f44:	9201      	str	r2, [sp, #4]
 8010f46:	4293      	cmp	r3, r2
 8010f48:	d80c      	bhi.n	8010f64 <__multiply+0x7a>
 8010f4a:	2e00      	cmp	r6, #0
 8010f4c:	dd03      	ble.n	8010f56 <__multiply+0x6c>
 8010f4e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d05d      	beq.n	8011012 <__multiply+0x128>
 8010f56:	6106      	str	r6, [r0, #16]
 8010f58:	b003      	add	sp, #12
 8010f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f5e:	f843 2b04 	str.w	r2, [r3], #4
 8010f62:	e7e3      	b.n	8010f2c <__multiply+0x42>
 8010f64:	f8b2 b000 	ldrh.w	fp, [r2]
 8010f68:	f1bb 0f00 	cmp.w	fp, #0
 8010f6c:	d023      	beq.n	8010fb6 <__multiply+0xcc>
 8010f6e:	4689      	mov	r9, r1
 8010f70:	46ac      	mov	ip, r5
 8010f72:	f04f 0800 	mov.w	r8, #0
 8010f76:	f859 4b04 	ldr.w	r4, [r9], #4
 8010f7a:	f8dc a000 	ldr.w	sl, [ip]
 8010f7e:	b2a3      	uxth	r3, r4
 8010f80:	fa1f fa8a 	uxth.w	sl, sl
 8010f84:	fb0b a303 	mla	r3, fp, r3, sl
 8010f88:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8010f8c:	f8dc 4000 	ldr.w	r4, [ip]
 8010f90:	4443      	add	r3, r8
 8010f92:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8010f96:	fb0b 840a 	mla	r4, fp, sl, r8
 8010f9a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8010f9e:	46e2      	mov	sl, ip
 8010fa0:	b29b      	uxth	r3, r3
 8010fa2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010fa6:	454f      	cmp	r7, r9
 8010fa8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8010fac:	f84a 3b04 	str.w	r3, [sl], #4
 8010fb0:	d82b      	bhi.n	801100a <__multiply+0x120>
 8010fb2:	f8cc 8004 	str.w	r8, [ip, #4]
 8010fb6:	9b01      	ldr	r3, [sp, #4]
 8010fb8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8010fbc:	3204      	adds	r2, #4
 8010fbe:	f1ba 0f00 	cmp.w	sl, #0
 8010fc2:	d020      	beq.n	8011006 <__multiply+0x11c>
 8010fc4:	682b      	ldr	r3, [r5, #0]
 8010fc6:	4689      	mov	r9, r1
 8010fc8:	46a8      	mov	r8, r5
 8010fca:	f04f 0b00 	mov.w	fp, #0
 8010fce:	f8b9 c000 	ldrh.w	ip, [r9]
 8010fd2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8010fd6:	fb0a 440c 	mla	r4, sl, ip, r4
 8010fda:	445c      	add	r4, fp
 8010fdc:	46c4      	mov	ip, r8
 8010fde:	b29b      	uxth	r3, r3
 8010fe0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010fe4:	f84c 3b04 	str.w	r3, [ip], #4
 8010fe8:	f859 3b04 	ldr.w	r3, [r9], #4
 8010fec:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8010ff0:	0c1b      	lsrs	r3, r3, #16
 8010ff2:	fb0a b303 	mla	r3, sl, r3, fp
 8010ff6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8010ffa:	454f      	cmp	r7, r9
 8010ffc:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8011000:	d805      	bhi.n	801100e <__multiply+0x124>
 8011002:	f8c8 3004 	str.w	r3, [r8, #4]
 8011006:	3504      	adds	r5, #4
 8011008:	e79b      	b.n	8010f42 <__multiply+0x58>
 801100a:	46d4      	mov	ip, sl
 801100c:	e7b3      	b.n	8010f76 <__multiply+0x8c>
 801100e:	46e0      	mov	r8, ip
 8011010:	e7dd      	b.n	8010fce <__multiply+0xe4>
 8011012:	3e01      	subs	r6, #1
 8011014:	e799      	b.n	8010f4a <__multiply+0x60>
	...

08011018 <__pow5mult>:
 8011018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801101c:	4615      	mov	r5, r2
 801101e:	f012 0203 	ands.w	r2, r2, #3
 8011022:	4606      	mov	r6, r0
 8011024:	460f      	mov	r7, r1
 8011026:	d007      	beq.n	8011038 <__pow5mult+0x20>
 8011028:	3a01      	subs	r2, #1
 801102a:	4c21      	ldr	r4, [pc, #132]	; (80110b0 <__pow5mult+0x98>)
 801102c:	2300      	movs	r3, #0
 801102e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011032:	f7ff fe8a 	bl	8010d4a <__multadd>
 8011036:	4607      	mov	r7, r0
 8011038:	10ad      	asrs	r5, r5, #2
 801103a:	d035      	beq.n	80110a8 <__pow5mult+0x90>
 801103c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801103e:	b93c      	cbnz	r4, 8011050 <__pow5mult+0x38>
 8011040:	2010      	movs	r0, #16
 8011042:	f7fc feb5 	bl	800ddb0 <malloc>
 8011046:	6270      	str	r0, [r6, #36]	; 0x24
 8011048:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801104c:	6004      	str	r4, [r0, #0]
 801104e:	60c4      	str	r4, [r0, #12]
 8011050:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011054:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011058:	b94c      	cbnz	r4, 801106e <__pow5mult+0x56>
 801105a:	f240 2171 	movw	r1, #625	; 0x271
 801105e:	4630      	mov	r0, r6
 8011060:	f7ff ff3a 	bl	8010ed8 <__i2b>
 8011064:	2300      	movs	r3, #0
 8011066:	f8c8 0008 	str.w	r0, [r8, #8]
 801106a:	4604      	mov	r4, r0
 801106c:	6003      	str	r3, [r0, #0]
 801106e:	f04f 0800 	mov.w	r8, #0
 8011072:	07eb      	lsls	r3, r5, #31
 8011074:	d50a      	bpl.n	801108c <__pow5mult+0x74>
 8011076:	4639      	mov	r1, r7
 8011078:	4622      	mov	r2, r4
 801107a:	4630      	mov	r0, r6
 801107c:	f7ff ff35 	bl	8010eea <__multiply>
 8011080:	4639      	mov	r1, r7
 8011082:	4681      	mov	r9, r0
 8011084:	4630      	mov	r0, r6
 8011086:	f7ff fe49 	bl	8010d1c <_Bfree>
 801108a:	464f      	mov	r7, r9
 801108c:	106d      	asrs	r5, r5, #1
 801108e:	d00b      	beq.n	80110a8 <__pow5mult+0x90>
 8011090:	6820      	ldr	r0, [r4, #0]
 8011092:	b938      	cbnz	r0, 80110a4 <__pow5mult+0x8c>
 8011094:	4622      	mov	r2, r4
 8011096:	4621      	mov	r1, r4
 8011098:	4630      	mov	r0, r6
 801109a:	f7ff ff26 	bl	8010eea <__multiply>
 801109e:	6020      	str	r0, [r4, #0]
 80110a0:	f8c0 8000 	str.w	r8, [r0]
 80110a4:	4604      	mov	r4, r0
 80110a6:	e7e4      	b.n	8011072 <__pow5mult+0x5a>
 80110a8:	4638      	mov	r0, r7
 80110aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80110ae:	bf00      	nop
 80110b0:	080121d0 	.word	0x080121d0

080110b4 <__lshift>:
 80110b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80110b8:	460c      	mov	r4, r1
 80110ba:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80110be:	6923      	ldr	r3, [r4, #16]
 80110c0:	6849      	ldr	r1, [r1, #4]
 80110c2:	eb0a 0903 	add.w	r9, sl, r3
 80110c6:	68a3      	ldr	r3, [r4, #8]
 80110c8:	4607      	mov	r7, r0
 80110ca:	4616      	mov	r6, r2
 80110cc:	f109 0501 	add.w	r5, r9, #1
 80110d0:	42ab      	cmp	r3, r5
 80110d2:	db32      	blt.n	801113a <__lshift+0x86>
 80110d4:	4638      	mov	r0, r7
 80110d6:	f7ff fded 	bl	8010cb4 <_Balloc>
 80110da:	2300      	movs	r3, #0
 80110dc:	4680      	mov	r8, r0
 80110de:	f100 0114 	add.w	r1, r0, #20
 80110e2:	461a      	mov	r2, r3
 80110e4:	4553      	cmp	r3, sl
 80110e6:	db2b      	blt.n	8011140 <__lshift+0x8c>
 80110e8:	6920      	ldr	r0, [r4, #16]
 80110ea:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80110ee:	f104 0314 	add.w	r3, r4, #20
 80110f2:	f016 021f 	ands.w	r2, r6, #31
 80110f6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80110fa:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80110fe:	d025      	beq.n	801114c <__lshift+0x98>
 8011100:	f1c2 0e20 	rsb	lr, r2, #32
 8011104:	2000      	movs	r0, #0
 8011106:	681e      	ldr	r6, [r3, #0]
 8011108:	468a      	mov	sl, r1
 801110a:	4096      	lsls	r6, r2
 801110c:	4330      	orrs	r0, r6
 801110e:	f84a 0b04 	str.w	r0, [sl], #4
 8011112:	f853 0b04 	ldr.w	r0, [r3], #4
 8011116:	459c      	cmp	ip, r3
 8011118:	fa20 f00e 	lsr.w	r0, r0, lr
 801111c:	d814      	bhi.n	8011148 <__lshift+0x94>
 801111e:	6048      	str	r0, [r1, #4]
 8011120:	b108      	cbz	r0, 8011126 <__lshift+0x72>
 8011122:	f109 0502 	add.w	r5, r9, #2
 8011126:	3d01      	subs	r5, #1
 8011128:	4638      	mov	r0, r7
 801112a:	f8c8 5010 	str.w	r5, [r8, #16]
 801112e:	4621      	mov	r1, r4
 8011130:	f7ff fdf4 	bl	8010d1c <_Bfree>
 8011134:	4640      	mov	r0, r8
 8011136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801113a:	3101      	adds	r1, #1
 801113c:	005b      	lsls	r3, r3, #1
 801113e:	e7c7      	b.n	80110d0 <__lshift+0x1c>
 8011140:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8011144:	3301      	adds	r3, #1
 8011146:	e7cd      	b.n	80110e4 <__lshift+0x30>
 8011148:	4651      	mov	r1, sl
 801114a:	e7dc      	b.n	8011106 <__lshift+0x52>
 801114c:	3904      	subs	r1, #4
 801114e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011152:	f841 2f04 	str.w	r2, [r1, #4]!
 8011156:	459c      	cmp	ip, r3
 8011158:	d8f9      	bhi.n	801114e <__lshift+0x9a>
 801115a:	e7e4      	b.n	8011126 <__lshift+0x72>

0801115c <__mcmp>:
 801115c:	6903      	ldr	r3, [r0, #16]
 801115e:	690a      	ldr	r2, [r1, #16]
 8011160:	1a9b      	subs	r3, r3, r2
 8011162:	b530      	push	{r4, r5, lr}
 8011164:	d10c      	bne.n	8011180 <__mcmp+0x24>
 8011166:	0092      	lsls	r2, r2, #2
 8011168:	3014      	adds	r0, #20
 801116a:	3114      	adds	r1, #20
 801116c:	1884      	adds	r4, r0, r2
 801116e:	4411      	add	r1, r2
 8011170:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011174:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011178:	4295      	cmp	r5, r2
 801117a:	d003      	beq.n	8011184 <__mcmp+0x28>
 801117c:	d305      	bcc.n	801118a <__mcmp+0x2e>
 801117e:	2301      	movs	r3, #1
 8011180:	4618      	mov	r0, r3
 8011182:	bd30      	pop	{r4, r5, pc}
 8011184:	42a0      	cmp	r0, r4
 8011186:	d3f3      	bcc.n	8011170 <__mcmp+0x14>
 8011188:	e7fa      	b.n	8011180 <__mcmp+0x24>
 801118a:	f04f 33ff 	mov.w	r3, #4294967295
 801118e:	e7f7      	b.n	8011180 <__mcmp+0x24>

08011190 <__mdiff>:
 8011190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011194:	460d      	mov	r5, r1
 8011196:	4607      	mov	r7, r0
 8011198:	4611      	mov	r1, r2
 801119a:	4628      	mov	r0, r5
 801119c:	4614      	mov	r4, r2
 801119e:	f7ff ffdd 	bl	801115c <__mcmp>
 80111a2:	1e06      	subs	r6, r0, #0
 80111a4:	d108      	bne.n	80111b8 <__mdiff+0x28>
 80111a6:	4631      	mov	r1, r6
 80111a8:	4638      	mov	r0, r7
 80111aa:	f7ff fd83 	bl	8010cb4 <_Balloc>
 80111ae:	2301      	movs	r3, #1
 80111b0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80111b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111b8:	bfa4      	itt	ge
 80111ba:	4623      	movge	r3, r4
 80111bc:	462c      	movge	r4, r5
 80111be:	4638      	mov	r0, r7
 80111c0:	6861      	ldr	r1, [r4, #4]
 80111c2:	bfa6      	itte	ge
 80111c4:	461d      	movge	r5, r3
 80111c6:	2600      	movge	r6, #0
 80111c8:	2601      	movlt	r6, #1
 80111ca:	f7ff fd73 	bl	8010cb4 <_Balloc>
 80111ce:	692b      	ldr	r3, [r5, #16]
 80111d0:	60c6      	str	r6, [r0, #12]
 80111d2:	6926      	ldr	r6, [r4, #16]
 80111d4:	f105 0914 	add.w	r9, r5, #20
 80111d8:	f104 0214 	add.w	r2, r4, #20
 80111dc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80111e0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80111e4:	f100 0514 	add.w	r5, r0, #20
 80111e8:	f04f 0e00 	mov.w	lr, #0
 80111ec:	f852 ab04 	ldr.w	sl, [r2], #4
 80111f0:	f859 4b04 	ldr.w	r4, [r9], #4
 80111f4:	fa1e f18a 	uxtah	r1, lr, sl
 80111f8:	b2a3      	uxth	r3, r4
 80111fa:	1ac9      	subs	r1, r1, r3
 80111fc:	0c23      	lsrs	r3, r4, #16
 80111fe:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8011202:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8011206:	b289      	uxth	r1, r1
 8011208:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801120c:	45c8      	cmp	r8, r9
 801120e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8011212:	4694      	mov	ip, r2
 8011214:	f845 3b04 	str.w	r3, [r5], #4
 8011218:	d8e8      	bhi.n	80111ec <__mdiff+0x5c>
 801121a:	45bc      	cmp	ip, r7
 801121c:	d304      	bcc.n	8011228 <__mdiff+0x98>
 801121e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8011222:	b183      	cbz	r3, 8011246 <__mdiff+0xb6>
 8011224:	6106      	str	r6, [r0, #16]
 8011226:	e7c5      	b.n	80111b4 <__mdiff+0x24>
 8011228:	f85c 1b04 	ldr.w	r1, [ip], #4
 801122c:	fa1e f381 	uxtah	r3, lr, r1
 8011230:	141a      	asrs	r2, r3, #16
 8011232:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011236:	b29b      	uxth	r3, r3
 8011238:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801123c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8011240:	f845 3b04 	str.w	r3, [r5], #4
 8011244:	e7e9      	b.n	801121a <__mdiff+0x8a>
 8011246:	3e01      	subs	r6, #1
 8011248:	e7e9      	b.n	801121e <__mdiff+0x8e>
	...

0801124c <__ulp>:
 801124c:	4b12      	ldr	r3, [pc, #72]	; (8011298 <__ulp+0x4c>)
 801124e:	ee10 2a90 	vmov	r2, s1
 8011252:	401a      	ands	r2, r3
 8011254:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8011258:	2b00      	cmp	r3, #0
 801125a:	dd04      	ble.n	8011266 <__ulp+0x1a>
 801125c:	2000      	movs	r0, #0
 801125e:	4619      	mov	r1, r3
 8011260:	ec41 0b10 	vmov	d0, r0, r1
 8011264:	4770      	bx	lr
 8011266:	425b      	negs	r3, r3
 8011268:	151b      	asrs	r3, r3, #20
 801126a:	2b13      	cmp	r3, #19
 801126c:	f04f 0000 	mov.w	r0, #0
 8011270:	f04f 0100 	mov.w	r1, #0
 8011274:	dc04      	bgt.n	8011280 <__ulp+0x34>
 8011276:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801127a:	fa42 f103 	asr.w	r1, r2, r3
 801127e:	e7ef      	b.n	8011260 <__ulp+0x14>
 8011280:	3b14      	subs	r3, #20
 8011282:	2b1e      	cmp	r3, #30
 8011284:	f04f 0201 	mov.w	r2, #1
 8011288:	bfda      	itte	le
 801128a:	f1c3 031f 	rsble	r3, r3, #31
 801128e:	fa02 f303 	lslle.w	r3, r2, r3
 8011292:	4613      	movgt	r3, r2
 8011294:	4618      	mov	r0, r3
 8011296:	e7e3      	b.n	8011260 <__ulp+0x14>
 8011298:	7ff00000 	.word	0x7ff00000

0801129c <__b2d>:
 801129c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801129e:	6905      	ldr	r5, [r0, #16]
 80112a0:	f100 0714 	add.w	r7, r0, #20
 80112a4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80112a8:	1f2e      	subs	r6, r5, #4
 80112aa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80112ae:	4620      	mov	r0, r4
 80112b0:	f7ff fdc4 	bl	8010e3c <__hi0bits>
 80112b4:	f1c0 0320 	rsb	r3, r0, #32
 80112b8:	280a      	cmp	r0, #10
 80112ba:	600b      	str	r3, [r1, #0]
 80112bc:	f8df c074 	ldr.w	ip, [pc, #116]	; 8011334 <__b2d+0x98>
 80112c0:	dc14      	bgt.n	80112ec <__b2d+0x50>
 80112c2:	f1c0 0e0b 	rsb	lr, r0, #11
 80112c6:	fa24 f10e 	lsr.w	r1, r4, lr
 80112ca:	42b7      	cmp	r7, r6
 80112cc:	ea41 030c 	orr.w	r3, r1, ip
 80112d0:	bf34      	ite	cc
 80112d2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80112d6:	2100      	movcs	r1, #0
 80112d8:	3015      	adds	r0, #21
 80112da:	fa04 f000 	lsl.w	r0, r4, r0
 80112de:	fa21 f10e 	lsr.w	r1, r1, lr
 80112e2:	ea40 0201 	orr.w	r2, r0, r1
 80112e6:	ec43 2b10 	vmov	d0, r2, r3
 80112ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80112ec:	42b7      	cmp	r7, r6
 80112ee:	bf3a      	itte	cc
 80112f0:	f1a5 0608 	subcc.w	r6, r5, #8
 80112f4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80112f8:	2100      	movcs	r1, #0
 80112fa:	380b      	subs	r0, #11
 80112fc:	d015      	beq.n	801132a <__b2d+0x8e>
 80112fe:	4084      	lsls	r4, r0
 8011300:	f1c0 0520 	rsb	r5, r0, #32
 8011304:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8011308:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 801130c:	42be      	cmp	r6, r7
 801130e:	fa21 fc05 	lsr.w	ip, r1, r5
 8011312:	ea44 030c 	orr.w	r3, r4, ip
 8011316:	bf8c      	ite	hi
 8011318:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801131c:	2400      	movls	r4, #0
 801131e:	fa01 f000 	lsl.w	r0, r1, r0
 8011322:	40ec      	lsrs	r4, r5
 8011324:	ea40 0204 	orr.w	r2, r0, r4
 8011328:	e7dd      	b.n	80112e6 <__b2d+0x4a>
 801132a:	ea44 030c 	orr.w	r3, r4, ip
 801132e:	460a      	mov	r2, r1
 8011330:	e7d9      	b.n	80112e6 <__b2d+0x4a>
 8011332:	bf00      	nop
 8011334:	3ff00000 	.word	0x3ff00000

08011338 <__d2b>:
 8011338:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801133c:	460e      	mov	r6, r1
 801133e:	2101      	movs	r1, #1
 8011340:	ec59 8b10 	vmov	r8, r9, d0
 8011344:	4615      	mov	r5, r2
 8011346:	f7ff fcb5 	bl	8010cb4 <_Balloc>
 801134a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801134e:	4607      	mov	r7, r0
 8011350:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011354:	bb34      	cbnz	r4, 80113a4 <__d2b+0x6c>
 8011356:	9301      	str	r3, [sp, #4]
 8011358:	f1b8 0300 	subs.w	r3, r8, #0
 801135c:	d027      	beq.n	80113ae <__d2b+0x76>
 801135e:	a802      	add	r0, sp, #8
 8011360:	f840 3d08 	str.w	r3, [r0, #-8]!
 8011364:	f7ff fd89 	bl	8010e7a <__lo0bits>
 8011368:	9900      	ldr	r1, [sp, #0]
 801136a:	b1f0      	cbz	r0, 80113aa <__d2b+0x72>
 801136c:	9a01      	ldr	r2, [sp, #4]
 801136e:	f1c0 0320 	rsb	r3, r0, #32
 8011372:	fa02 f303 	lsl.w	r3, r2, r3
 8011376:	430b      	orrs	r3, r1
 8011378:	40c2      	lsrs	r2, r0
 801137a:	617b      	str	r3, [r7, #20]
 801137c:	9201      	str	r2, [sp, #4]
 801137e:	9b01      	ldr	r3, [sp, #4]
 8011380:	61bb      	str	r3, [r7, #24]
 8011382:	2b00      	cmp	r3, #0
 8011384:	bf14      	ite	ne
 8011386:	2102      	movne	r1, #2
 8011388:	2101      	moveq	r1, #1
 801138a:	6139      	str	r1, [r7, #16]
 801138c:	b1c4      	cbz	r4, 80113c0 <__d2b+0x88>
 801138e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8011392:	4404      	add	r4, r0
 8011394:	6034      	str	r4, [r6, #0]
 8011396:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801139a:	6028      	str	r0, [r5, #0]
 801139c:	4638      	mov	r0, r7
 801139e:	b003      	add	sp, #12
 80113a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80113a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80113a8:	e7d5      	b.n	8011356 <__d2b+0x1e>
 80113aa:	6179      	str	r1, [r7, #20]
 80113ac:	e7e7      	b.n	801137e <__d2b+0x46>
 80113ae:	a801      	add	r0, sp, #4
 80113b0:	f7ff fd63 	bl	8010e7a <__lo0bits>
 80113b4:	9b01      	ldr	r3, [sp, #4]
 80113b6:	617b      	str	r3, [r7, #20]
 80113b8:	2101      	movs	r1, #1
 80113ba:	6139      	str	r1, [r7, #16]
 80113bc:	3020      	adds	r0, #32
 80113be:	e7e5      	b.n	801138c <__d2b+0x54>
 80113c0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80113c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80113c8:	6030      	str	r0, [r6, #0]
 80113ca:	6918      	ldr	r0, [r3, #16]
 80113cc:	f7ff fd36 	bl	8010e3c <__hi0bits>
 80113d0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80113d4:	e7e1      	b.n	801139a <__d2b+0x62>

080113d6 <__ratio>:
 80113d6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113da:	4688      	mov	r8, r1
 80113dc:	4669      	mov	r1, sp
 80113de:	4681      	mov	r9, r0
 80113e0:	f7ff ff5c 	bl	801129c <__b2d>
 80113e4:	a901      	add	r1, sp, #4
 80113e6:	4640      	mov	r0, r8
 80113e8:	ec57 6b10 	vmov	r6, r7, d0
 80113ec:	f7ff ff56 	bl	801129c <__b2d>
 80113f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80113f4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80113f8:	eba3 0c02 	sub.w	ip, r3, r2
 80113fc:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011400:	1a9b      	subs	r3, r3, r2
 8011402:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8011406:	ec5b ab10 	vmov	sl, fp, d0
 801140a:	2b00      	cmp	r3, #0
 801140c:	bfce      	itee	gt
 801140e:	463a      	movgt	r2, r7
 8011410:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011414:	465a      	movle	r2, fp
 8011416:	4659      	mov	r1, fp
 8011418:	463d      	mov	r5, r7
 801141a:	bfd4      	ite	le
 801141c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8011420:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8011424:	4630      	mov	r0, r6
 8011426:	ee10 2a10 	vmov	r2, s0
 801142a:	460b      	mov	r3, r1
 801142c:	4629      	mov	r1, r5
 801142e:	f7ef fa0d 	bl	800084c <__aeabi_ddiv>
 8011432:	ec41 0b10 	vmov	d0, r0, r1
 8011436:	b003      	add	sp, #12
 8011438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801143c <__copybits>:
 801143c:	3901      	subs	r1, #1
 801143e:	b510      	push	{r4, lr}
 8011440:	1149      	asrs	r1, r1, #5
 8011442:	6914      	ldr	r4, [r2, #16]
 8011444:	3101      	adds	r1, #1
 8011446:	f102 0314 	add.w	r3, r2, #20
 801144a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801144e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011452:	42a3      	cmp	r3, r4
 8011454:	4602      	mov	r2, r0
 8011456:	d303      	bcc.n	8011460 <__copybits+0x24>
 8011458:	2300      	movs	r3, #0
 801145a:	428a      	cmp	r2, r1
 801145c:	d305      	bcc.n	801146a <__copybits+0x2e>
 801145e:	bd10      	pop	{r4, pc}
 8011460:	f853 2b04 	ldr.w	r2, [r3], #4
 8011464:	f840 2b04 	str.w	r2, [r0], #4
 8011468:	e7f3      	b.n	8011452 <__copybits+0x16>
 801146a:	f842 3b04 	str.w	r3, [r2], #4
 801146e:	e7f4      	b.n	801145a <__copybits+0x1e>

08011470 <__any_on>:
 8011470:	f100 0214 	add.w	r2, r0, #20
 8011474:	6900      	ldr	r0, [r0, #16]
 8011476:	114b      	asrs	r3, r1, #5
 8011478:	4298      	cmp	r0, r3
 801147a:	b510      	push	{r4, lr}
 801147c:	db11      	blt.n	80114a2 <__any_on+0x32>
 801147e:	dd0a      	ble.n	8011496 <__any_on+0x26>
 8011480:	f011 011f 	ands.w	r1, r1, #31
 8011484:	d007      	beq.n	8011496 <__any_on+0x26>
 8011486:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801148a:	fa24 f001 	lsr.w	r0, r4, r1
 801148e:	fa00 f101 	lsl.w	r1, r0, r1
 8011492:	428c      	cmp	r4, r1
 8011494:	d10b      	bne.n	80114ae <__any_on+0x3e>
 8011496:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801149a:	4293      	cmp	r3, r2
 801149c:	d803      	bhi.n	80114a6 <__any_on+0x36>
 801149e:	2000      	movs	r0, #0
 80114a0:	bd10      	pop	{r4, pc}
 80114a2:	4603      	mov	r3, r0
 80114a4:	e7f7      	b.n	8011496 <__any_on+0x26>
 80114a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80114aa:	2900      	cmp	r1, #0
 80114ac:	d0f5      	beq.n	801149a <__any_on+0x2a>
 80114ae:	2001      	movs	r0, #1
 80114b0:	e7f6      	b.n	80114a0 <__any_on+0x30>

080114b2 <_calloc_r>:
 80114b2:	b538      	push	{r3, r4, r5, lr}
 80114b4:	fb02 f401 	mul.w	r4, r2, r1
 80114b8:	4621      	mov	r1, r4
 80114ba:	f7fc fceb 	bl	800de94 <_malloc_r>
 80114be:	4605      	mov	r5, r0
 80114c0:	b118      	cbz	r0, 80114ca <_calloc_r+0x18>
 80114c2:	4622      	mov	r2, r4
 80114c4:	2100      	movs	r1, #0
 80114c6:	f7fc fc8e 	bl	800dde6 <memset>
 80114ca:	4628      	mov	r0, r5
 80114cc:	bd38      	pop	{r3, r4, r5, pc}

080114ce <__ssputs_r>:
 80114ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80114d2:	688e      	ldr	r6, [r1, #8]
 80114d4:	429e      	cmp	r6, r3
 80114d6:	4682      	mov	sl, r0
 80114d8:	460c      	mov	r4, r1
 80114da:	4690      	mov	r8, r2
 80114dc:	4699      	mov	r9, r3
 80114de:	d837      	bhi.n	8011550 <__ssputs_r+0x82>
 80114e0:	898a      	ldrh	r2, [r1, #12]
 80114e2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80114e6:	d031      	beq.n	801154c <__ssputs_r+0x7e>
 80114e8:	6825      	ldr	r5, [r4, #0]
 80114ea:	6909      	ldr	r1, [r1, #16]
 80114ec:	1a6f      	subs	r7, r5, r1
 80114ee:	6965      	ldr	r5, [r4, #20]
 80114f0:	2302      	movs	r3, #2
 80114f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80114f6:	fb95 f5f3 	sdiv	r5, r5, r3
 80114fa:	f109 0301 	add.w	r3, r9, #1
 80114fe:	443b      	add	r3, r7
 8011500:	429d      	cmp	r5, r3
 8011502:	bf38      	it	cc
 8011504:	461d      	movcc	r5, r3
 8011506:	0553      	lsls	r3, r2, #21
 8011508:	d530      	bpl.n	801156c <__ssputs_r+0x9e>
 801150a:	4629      	mov	r1, r5
 801150c:	f7fc fcc2 	bl	800de94 <_malloc_r>
 8011510:	4606      	mov	r6, r0
 8011512:	b950      	cbnz	r0, 801152a <__ssputs_r+0x5c>
 8011514:	230c      	movs	r3, #12
 8011516:	f8ca 3000 	str.w	r3, [sl]
 801151a:	89a3      	ldrh	r3, [r4, #12]
 801151c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011520:	81a3      	strh	r3, [r4, #12]
 8011522:	f04f 30ff 	mov.w	r0, #4294967295
 8011526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801152a:	463a      	mov	r2, r7
 801152c:	6921      	ldr	r1, [r4, #16]
 801152e:	f7fc fc4f 	bl	800ddd0 <memcpy>
 8011532:	89a3      	ldrh	r3, [r4, #12]
 8011534:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801153c:	81a3      	strh	r3, [r4, #12]
 801153e:	6126      	str	r6, [r4, #16]
 8011540:	6165      	str	r5, [r4, #20]
 8011542:	443e      	add	r6, r7
 8011544:	1bed      	subs	r5, r5, r7
 8011546:	6026      	str	r6, [r4, #0]
 8011548:	60a5      	str	r5, [r4, #8]
 801154a:	464e      	mov	r6, r9
 801154c:	454e      	cmp	r6, r9
 801154e:	d900      	bls.n	8011552 <__ssputs_r+0x84>
 8011550:	464e      	mov	r6, r9
 8011552:	4632      	mov	r2, r6
 8011554:	4641      	mov	r1, r8
 8011556:	6820      	ldr	r0, [r4, #0]
 8011558:	f000 f92b 	bl	80117b2 <memmove>
 801155c:	68a3      	ldr	r3, [r4, #8]
 801155e:	1b9b      	subs	r3, r3, r6
 8011560:	60a3      	str	r3, [r4, #8]
 8011562:	6823      	ldr	r3, [r4, #0]
 8011564:	441e      	add	r6, r3
 8011566:	6026      	str	r6, [r4, #0]
 8011568:	2000      	movs	r0, #0
 801156a:	e7dc      	b.n	8011526 <__ssputs_r+0x58>
 801156c:	462a      	mov	r2, r5
 801156e:	f000 f939 	bl	80117e4 <_realloc_r>
 8011572:	4606      	mov	r6, r0
 8011574:	2800      	cmp	r0, #0
 8011576:	d1e2      	bne.n	801153e <__ssputs_r+0x70>
 8011578:	6921      	ldr	r1, [r4, #16]
 801157a:	4650      	mov	r0, sl
 801157c:	f7fc fc3c 	bl	800ddf8 <_free_r>
 8011580:	e7c8      	b.n	8011514 <__ssputs_r+0x46>
	...

08011584 <_svfiprintf_r>:
 8011584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011588:	461d      	mov	r5, r3
 801158a:	898b      	ldrh	r3, [r1, #12]
 801158c:	061f      	lsls	r7, r3, #24
 801158e:	b09d      	sub	sp, #116	; 0x74
 8011590:	4680      	mov	r8, r0
 8011592:	460c      	mov	r4, r1
 8011594:	4616      	mov	r6, r2
 8011596:	d50f      	bpl.n	80115b8 <_svfiprintf_r+0x34>
 8011598:	690b      	ldr	r3, [r1, #16]
 801159a:	b96b      	cbnz	r3, 80115b8 <_svfiprintf_r+0x34>
 801159c:	2140      	movs	r1, #64	; 0x40
 801159e:	f7fc fc79 	bl	800de94 <_malloc_r>
 80115a2:	6020      	str	r0, [r4, #0]
 80115a4:	6120      	str	r0, [r4, #16]
 80115a6:	b928      	cbnz	r0, 80115b4 <_svfiprintf_r+0x30>
 80115a8:	230c      	movs	r3, #12
 80115aa:	f8c8 3000 	str.w	r3, [r8]
 80115ae:	f04f 30ff 	mov.w	r0, #4294967295
 80115b2:	e0c8      	b.n	8011746 <_svfiprintf_r+0x1c2>
 80115b4:	2340      	movs	r3, #64	; 0x40
 80115b6:	6163      	str	r3, [r4, #20]
 80115b8:	2300      	movs	r3, #0
 80115ba:	9309      	str	r3, [sp, #36]	; 0x24
 80115bc:	2320      	movs	r3, #32
 80115be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80115c2:	2330      	movs	r3, #48	; 0x30
 80115c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80115c8:	9503      	str	r5, [sp, #12]
 80115ca:	f04f 0b01 	mov.w	fp, #1
 80115ce:	4637      	mov	r7, r6
 80115d0:	463d      	mov	r5, r7
 80115d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80115d6:	b10b      	cbz	r3, 80115dc <_svfiprintf_r+0x58>
 80115d8:	2b25      	cmp	r3, #37	; 0x25
 80115da:	d13e      	bne.n	801165a <_svfiprintf_r+0xd6>
 80115dc:	ebb7 0a06 	subs.w	sl, r7, r6
 80115e0:	d00b      	beq.n	80115fa <_svfiprintf_r+0x76>
 80115e2:	4653      	mov	r3, sl
 80115e4:	4632      	mov	r2, r6
 80115e6:	4621      	mov	r1, r4
 80115e8:	4640      	mov	r0, r8
 80115ea:	f7ff ff70 	bl	80114ce <__ssputs_r>
 80115ee:	3001      	adds	r0, #1
 80115f0:	f000 80a4 	beq.w	801173c <_svfiprintf_r+0x1b8>
 80115f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80115f6:	4453      	add	r3, sl
 80115f8:	9309      	str	r3, [sp, #36]	; 0x24
 80115fa:	783b      	ldrb	r3, [r7, #0]
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	f000 809d 	beq.w	801173c <_svfiprintf_r+0x1b8>
 8011602:	2300      	movs	r3, #0
 8011604:	f04f 32ff 	mov.w	r2, #4294967295
 8011608:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801160c:	9304      	str	r3, [sp, #16]
 801160e:	9307      	str	r3, [sp, #28]
 8011610:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011614:	931a      	str	r3, [sp, #104]	; 0x68
 8011616:	462f      	mov	r7, r5
 8011618:	2205      	movs	r2, #5
 801161a:	f817 1b01 	ldrb.w	r1, [r7], #1
 801161e:	4850      	ldr	r0, [pc, #320]	; (8011760 <_svfiprintf_r+0x1dc>)
 8011620:	f7ee fdde 	bl	80001e0 <memchr>
 8011624:	9b04      	ldr	r3, [sp, #16]
 8011626:	b9d0      	cbnz	r0, 801165e <_svfiprintf_r+0xda>
 8011628:	06d9      	lsls	r1, r3, #27
 801162a:	bf44      	itt	mi
 801162c:	2220      	movmi	r2, #32
 801162e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011632:	071a      	lsls	r2, r3, #28
 8011634:	bf44      	itt	mi
 8011636:	222b      	movmi	r2, #43	; 0x2b
 8011638:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801163c:	782a      	ldrb	r2, [r5, #0]
 801163e:	2a2a      	cmp	r2, #42	; 0x2a
 8011640:	d015      	beq.n	801166e <_svfiprintf_r+0xea>
 8011642:	9a07      	ldr	r2, [sp, #28]
 8011644:	462f      	mov	r7, r5
 8011646:	2000      	movs	r0, #0
 8011648:	250a      	movs	r5, #10
 801164a:	4639      	mov	r1, r7
 801164c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011650:	3b30      	subs	r3, #48	; 0x30
 8011652:	2b09      	cmp	r3, #9
 8011654:	d94d      	bls.n	80116f2 <_svfiprintf_r+0x16e>
 8011656:	b1b8      	cbz	r0, 8011688 <_svfiprintf_r+0x104>
 8011658:	e00f      	b.n	801167a <_svfiprintf_r+0xf6>
 801165a:	462f      	mov	r7, r5
 801165c:	e7b8      	b.n	80115d0 <_svfiprintf_r+0x4c>
 801165e:	4a40      	ldr	r2, [pc, #256]	; (8011760 <_svfiprintf_r+0x1dc>)
 8011660:	1a80      	subs	r0, r0, r2
 8011662:	fa0b f000 	lsl.w	r0, fp, r0
 8011666:	4318      	orrs	r0, r3
 8011668:	9004      	str	r0, [sp, #16]
 801166a:	463d      	mov	r5, r7
 801166c:	e7d3      	b.n	8011616 <_svfiprintf_r+0x92>
 801166e:	9a03      	ldr	r2, [sp, #12]
 8011670:	1d11      	adds	r1, r2, #4
 8011672:	6812      	ldr	r2, [r2, #0]
 8011674:	9103      	str	r1, [sp, #12]
 8011676:	2a00      	cmp	r2, #0
 8011678:	db01      	blt.n	801167e <_svfiprintf_r+0xfa>
 801167a:	9207      	str	r2, [sp, #28]
 801167c:	e004      	b.n	8011688 <_svfiprintf_r+0x104>
 801167e:	4252      	negs	r2, r2
 8011680:	f043 0302 	orr.w	r3, r3, #2
 8011684:	9207      	str	r2, [sp, #28]
 8011686:	9304      	str	r3, [sp, #16]
 8011688:	783b      	ldrb	r3, [r7, #0]
 801168a:	2b2e      	cmp	r3, #46	; 0x2e
 801168c:	d10c      	bne.n	80116a8 <_svfiprintf_r+0x124>
 801168e:	787b      	ldrb	r3, [r7, #1]
 8011690:	2b2a      	cmp	r3, #42	; 0x2a
 8011692:	d133      	bne.n	80116fc <_svfiprintf_r+0x178>
 8011694:	9b03      	ldr	r3, [sp, #12]
 8011696:	1d1a      	adds	r2, r3, #4
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	9203      	str	r2, [sp, #12]
 801169c:	2b00      	cmp	r3, #0
 801169e:	bfb8      	it	lt
 80116a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80116a4:	3702      	adds	r7, #2
 80116a6:	9305      	str	r3, [sp, #20]
 80116a8:	4d2e      	ldr	r5, [pc, #184]	; (8011764 <_svfiprintf_r+0x1e0>)
 80116aa:	7839      	ldrb	r1, [r7, #0]
 80116ac:	2203      	movs	r2, #3
 80116ae:	4628      	mov	r0, r5
 80116b0:	f7ee fd96 	bl	80001e0 <memchr>
 80116b4:	b138      	cbz	r0, 80116c6 <_svfiprintf_r+0x142>
 80116b6:	2340      	movs	r3, #64	; 0x40
 80116b8:	1b40      	subs	r0, r0, r5
 80116ba:	fa03 f000 	lsl.w	r0, r3, r0
 80116be:	9b04      	ldr	r3, [sp, #16]
 80116c0:	4303      	orrs	r3, r0
 80116c2:	3701      	adds	r7, #1
 80116c4:	9304      	str	r3, [sp, #16]
 80116c6:	7839      	ldrb	r1, [r7, #0]
 80116c8:	4827      	ldr	r0, [pc, #156]	; (8011768 <_svfiprintf_r+0x1e4>)
 80116ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80116ce:	2206      	movs	r2, #6
 80116d0:	1c7e      	adds	r6, r7, #1
 80116d2:	f7ee fd85 	bl	80001e0 <memchr>
 80116d6:	2800      	cmp	r0, #0
 80116d8:	d038      	beq.n	801174c <_svfiprintf_r+0x1c8>
 80116da:	4b24      	ldr	r3, [pc, #144]	; (801176c <_svfiprintf_r+0x1e8>)
 80116dc:	bb13      	cbnz	r3, 8011724 <_svfiprintf_r+0x1a0>
 80116de:	9b03      	ldr	r3, [sp, #12]
 80116e0:	3307      	adds	r3, #7
 80116e2:	f023 0307 	bic.w	r3, r3, #7
 80116e6:	3308      	adds	r3, #8
 80116e8:	9303      	str	r3, [sp, #12]
 80116ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80116ec:	444b      	add	r3, r9
 80116ee:	9309      	str	r3, [sp, #36]	; 0x24
 80116f0:	e76d      	b.n	80115ce <_svfiprintf_r+0x4a>
 80116f2:	fb05 3202 	mla	r2, r5, r2, r3
 80116f6:	2001      	movs	r0, #1
 80116f8:	460f      	mov	r7, r1
 80116fa:	e7a6      	b.n	801164a <_svfiprintf_r+0xc6>
 80116fc:	2300      	movs	r3, #0
 80116fe:	3701      	adds	r7, #1
 8011700:	9305      	str	r3, [sp, #20]
 8011702:	4619      	mov	r1, r3
 8011704:	250a      	movs	r5, #10
 8011706:	4638      	mov	r0, r7
 8011708:	f810 2b01 	ldrb.w	r2, [r0], #1
 801170c:	3a30      	subs	r2, #48	; 0x30
 801170e:	2a09      	cmp	r2, #9
 8011710:	d903      	bls.n	801171a <_svfiprintf_r+0x196>
 8011712:	2b00      	cmp	r3, #0
 8011714:	d0c8      	beq.n	80116a8 <_svfiprintf_r+0x124>
 8011716:	9105      	str	r1, [sp, #20]
 8011718:	e7c6      	b.n	80116a8 <_svfiprintf_r+0x124>
 801171a:	fb05 2101 	mla	r1, r5, r1, r2
 801171e:	2301      	movs	r3, #1
 8011720:	4607      	mov	r7, r0
 8011722:	e7f0      	b.n	8011706 <_svfiprintf_r+0x182>
 8011724:	ab03      	add	r3, sp, #12
 8011726:	9300      	str	r3, [sp, #0]
 8011728:	4622      	mov	r2, r4
 801172a:	4b11      	ldr	r3, [pc, #68]	; (8011770 <_svfiprintf_r+0x1ec>)
 801172c:	a904      	add	r1, sp, #16
 801172e:	4640      	mov	r0, r8
 8011730:	f7fc fc9e 	bl	800e070 <_printf_float>
 8011734:	f1b0 3fff 	cmp.w	r0, #4294967295
 8011738:	4681      	mov	r9, r0
 801173a:	d1d6      	bne.n	80116ea <_svfiprintf_r+0x166>
 801173c:	89a3      	ldrh	r3, [r4, #12]
 801173e:	065b      	lsls	r3, r3, #25
 8011740:	f53f af35 	bmi.w	80115ae <_svfiprintf_r+0x2a>
 8011744:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011746:	b01d      	add	sp, #116	; 0x74
 8011748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801174c:	ab03      	add	r3, sp, #12
 801174e:	9300      	str	r3, [sp, #0]
 8011750:	4622      	mov	r2, r4
 8011752:	4b07      	ldr	r3, [pc, #28]	; (8011770 <_svfiprintf_r+0x1ec>)
 8011754:	a904      	add	r1, sp, #16
 8011756:	4640      	mov	r0, r8
 8011758:	f7fc ff40 	bl	800e5dc <_printf_i>
 801175c:	e7ea      	b.n	8011734 <_svfiprintf_r+0x1b0>
 801175e:	bf00      	nop
 8011760:	080121dc 	.word	0x080121dc
 8011764:	080121e2 	.word	0x080121e2
 8011768:	080121e6 	.word	0x080121e6
 801176c:	0800e071 	.word	0x0800e071
 8011770:	080114cf 	.word	0x080114cf

08011774 <strncmp>:
 8011774:	b510      	push	{r4, lr}
 8011776:	b16a      	cbz	r2, 8011794 <strncmp+0x20>
 8011778:	3901      	subs	r1, #1
 801177a:	1884      	adds	r4, r0, r2
 801177c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8011780:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8011784:	4293      	cmp	r3, r2
 8011786:	d103      	bne.n	8011790 <strncmp+0x1c>
 8011788:	42a0      	cmp	r0, r4
 801178a:	d001      	beq.n	8011790 <strncmp+0x1c>
 801178c:	2b00      	cmp	r3, #0
 801178e:	d1f5      	bne.n	801177c <strncmp+0x8>
 8011790:	1a98      	subs	r0, r3, r2
 8011792:	bd10      	pop	{r4, pc}
 8011794:	4610      	mov	r0, r2
 8011796:	e7fc      	b.n	8011792 <strncmp+0x1e>

08011798 <__ascii_wctomb>:
 8011798:	b149      	cbz	r1, 80117ae <__ascii_wctomb+0x16>
 801179a:	2aff      	cmp	r2, #255	; 0xff
 801179c:	bf85      	ittet	hi
 801179e:	238a      	movhi	r3, #138	; 0x8a
 80117a0:	6003      	strhi	r3, [r0, #0]
 80117a2:	700a      	strbls	r2, [r1, #0]
 80117a4:	f04f 30ff 	movhi.w	r0, #4294967295
 80117a8:	bf98      	it	ls
 80117aa:	2001      	movls	r0, #1
 80117ac:	4770      	bx	lr
 80117ae:	4608      	mov	r0, r1
 80117b0:	4770      	bx	lr

080117b2 <memmove>:
 80117b2:	4288      	cmp	r0, r1
 80117b4:	b510      	push	{r4, lr}
 80117b6:	eb01 0302 	add.w	r3, r1, r2
 80117ba:	d807      	bhi.n	80117cc <memmove+0x1a>
 80117bc:	1e42      	subs	r2, r0, #1
 80117be:	4299      	cmp	r1, r3
 80117c0:	d00a      	beq.n	80117d8 <memmove+0x26>
 80117c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80117c6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80117ca:	e7f8      	b.n	80117be <memmove+0xc>
 80117cc:	4283      	cmp	r3, r0
 80117ce:	d9f5      	bls.n	80117bc <memmove+0xa>
 80117d0:	1881      	adds	r1, r0, r2
 80117d2:	1ad2      	subs	r2, r2, r3
 80117d4:	42d3      	cmn	r3, r2
 80117d6:	d100      	bne.n	80117da <memmove+0x28>
 80117d8:	bd10      	pop	{r4, pc}
 80117da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80117de:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80117e2:	e7f7      	b.n	80117d4 <memmove+0x22>

080117e4 <_realloc_r>:
 80117e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117e6:	4607      	mov	r7, r0
 80117e8:	4614      	mov	r4, r2
 80117ea:	460e      	mov	r6, r1
 80117ec:	b921      	cbnz	r1, 80117f8 <_realloc_r+0x14>
 80117ee:	4611      	mov	r1, r2
 80117f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80117f4:	f7fc bb4e 	b.w	800de94 <_malloc_r>
 80117f8:	b922      	cbnz	r2, 8011804 <_realloc_r+0x20>
 80117fa:	f7fc fafd 	bl	800ddf8 <_free_r>
 80117fe:	4625      	mov	r5, r4
 8011800:	4628      	mov	r0, r5
 8011802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011804:	f000 f814 	bl	8011830 <_malloc_usable_size_r>
 8011808:	42a0      	cmp	r0, r4
 801180a:	d20f      	bcs.n	801182c <_realloc_r+0x48>
 801180c:	4621      	mov	r1, r4
 801180e:	4638      	mov	r0, r7
 8011810:	f7fc fb40 	bl	800de94 <_malloc_r>
 8011814:	4605      	mov	r5, r0
 8011816:	2800      	cmp	r0, #0
 8011818:	d0f2      	beq.n	8011800 <_realloc_r+0x1c>
 801181a:	4631      	mov	r1, r6
 801181c:	4622      	mov	r2, r4
 801181e:	f7fc fad7 	bl	800ddd0 <memcpy>
 8011822:	4631      	mov	r1, r6
 8011824:	4638      	mov	r0, r7
 8011826:	f7fc fae7 	bl	800ddf8 <_free_r>
 801182a:	e7e9      	b.n	8011800 <_realloc_r+0x1c>
 801182c:	4635      	mov	r5, r6
 801182e:	e7e7      	b.n	8011800 <_realloc_r+0x1c>

08011830 <_malloc_usable_size_r>:
 8011830:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011834:	1f18      	subs	r0, r3, #4
 8011836:	2b00      	cmp	r3, #0
 8011838:	bfbc      	itt	lt
 801183a:	580b      	ldrlt	r3, [r1, r0]
 801183c:	18c0      	addlt	r0, r0, r3
 801183e:	4770      	bx	lr

08011840 <_sbrk>:
 8011840:	4b04      	ldr	r3, [pc, #16]	; (8011854 <_sbrk+0x14>)
 8011842:	6819      	ldr	r1, [r3, #0]
 8011844:	4602      	mov	r2, r0
 8011846:	b909      	cbnz	r1, 801184c <_sbrk+0xc>
 8011848:	4903      	ldr	r1, [pc, #12]	; (8011858 <_sbrk+0x18>)
 801184a:	6019      	str	r1, [r3, #0]
 801184c:	6818      	ldr	r0, [r3, #0]
 801184e:	4402      	add	r2, r0
 8011850:	601a      	str	r2, [r3, #0]
 8011852:	4770      	bx	lr
 8011854:	2000099c 	.word	0x2000099c
 8011858:	20002c70 	.word	0x20002c70

0801185c <_init>:
 801185c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801185e:	bf00      	nop
 8011860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011862:	bc08      	pop	{r3}
 8011864:	469e      	mov	lr, r3
 8011866:	4770      	bx	lr

08011868 <_fini>:
 8011868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801186a:	bf00      	nop
 801186c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801186e:	bc08      	pop	{r3}
 8011870:	469e      	mov	lr, r3
 8011872:	4770      	bx	lr
