
Satellite2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000135ac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b0  08013740  08013740  00023740  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013bf0  08013bf0  00030360  2**0
                  CONTENTS
  4 .ARM          00000008  08013bf0  08013bf0  00023bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013bf8  08013bf8  00030360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013bf8  08013bf8  00023bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013bfc  08013bfc  00023bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000360  20000000  08013c00  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000026bc  20000360  08013f60  00030360  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002a1c  08013f60  00032a1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030360  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d897  00000000  00000000  00030390  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000057f1  00000000  00000000  0005dc27  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002178  00000000  00000000  00063418  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001f10  00000000  00000000  00065590  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000a3ec  00000000  00000000  000674a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00021a55  00000000  00000000  0007188c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d555d  00000000  00000000  000932e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016883e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a064  00000000  00000000  001688bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         0000009c  00000000  00000000  00172920  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000014d  00000000  00000000  001729bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000360 	.word	0x20000360
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013724 	.word	0x08013724

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000364 	.word	0x20000364
 80001cc:	08013724 	.word	0x08013724

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_ldivmod>:
 8000c88:	b97b      	cbnz	r3, 8000caa <__aeabi_ldivmod+0x22>
 8000c8a:	b972      	cbnz	r2, 8000caa <__aeabi_ldivmod+0x22>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bfbe      	ittt	lt
 8000c90:	2000      	movlt	r0, #0
 8000c92:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c96:	e006      	blt.n	8000ca6 <__aeabi_ldivmod+0x1e>
 8000c98:	bf08      	it	eq
 8000c9a:	2800      	cmpeq	r0, #0
 8000c9c:	bf1c      	itt	ne
 8000c9e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ca2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca6:	f000 b9bd 	b.w	8001024 <__aeabi_idiv0>
 8000caa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	db09      	blt.n	8000cca <__aeabi_ldivmod+0x42>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db1a      	blt.n	8000cf0 <__aeabi_ldivmod+0x68>
 8000cba:	f000 f84d 	bl	8000d58 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4770      	bx	lr
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1b      	blt.n	8000d0c <__aeabi_ldivmod+0x84>
 8000cd4:	f000 f840 	bl	8000d58 <__udivmoddi4>
 8000cd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	f000 f82f 	bl	8000d58 <__udivmoddi4>
 8000cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d02:	b004      	add	sp, #16
 8000d04:	4240      	negs	r0, r0
 8000d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0a:	4770      	bx	lr
 8000d0c:	4252      	negs	r2, r2
 8000d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d12:	f000 f821 	bl	8000d58 <__udivmoddi4>
 8000d16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1e:	b004      	add	sp, #16
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295
 8000d3c:	f000 b972 	b.w	8001024 <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f806 	bl	8000d58 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__udivmoddi4>:
 8000d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d5c:	9e08      	ldr	r6, [sp, #32]
 8000d5e:	4604      	mov	r4, r0
 8000d60:	4688      	mov	r8, r1
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d14b      	bne.n	8000dfe <__udivmoddi4+0xa6>
 8000d66:	428a      	cmp	r2, r1
 8000d68:	4615      	mov	r5, r2
 8000d6a:	d967      	bls.n	8000e3c <__udivmoddi4+0xe4>
 8000d6c:	fab2 f282 	clz	r2, r2
 8000d70:	b14a      	cbz	r2, 8000d86 <__udivmoddi4+0x2e>
 8000d72:	f1c2 0720 	rsb	r7, r2, #32
 8000d76:	fa01 f302 	lsl.w	r3, r1, r2
 8000d7a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d7e:	4095      	lsls	r5, r2
 8000d80:	ea47 0803 	orr.w	r8, r7, r3
 8000d84:	4094      	lsls	r4, r2
 8000d86:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d8a:	0c23      	lsrs	r3, r4, #16
 8000d8c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d90:	fa1f fc85 	uxth.w	ip, r5
 8000d94:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d98:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d9c:	fb07 f10c 	mul.w	r1, r7, ip
 8000da0:	4299      	cmp	r1, r3
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x60>
 8000da4:	18eb      	adds	r3, r5, r3
 8000da6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000daa:	f080 811b 	bcs.w	8000fe4 <__udivmoddi4+0x28c>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 8118 	bls.w	8000fe4 <__udivmoddi4+0x28c>
 8000db4:	3f02      	subs	r7, #2
 8000db6:	442b      	add	r3, r5
 8000db8:	1a5b      	subs	r3, r3, r1
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dc0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dcc:	45a4      	cmp	ip, r4
 8000dce:	d909      	bls.n	8000de4 <__udivmoddi4+0x8c>
 8000dd0:	192c      	adds	r4, r5, r4
 8000dd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd6:	f080 8107 	bcs.w	8000fe8 <__udivmoddi4+0x290>
 8000dda:	45a4      	cmp	ip, r4
 8000ddc:	f240 8104 	bls.w	8000fe8 <__udivmoddi4+0x290>
 8000de0:	3802      	subs	r0, #2
 8000de2:	442c      	add	r4, r5
 8000de4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000de8:	eba4 040c 	sub.w	r4, r4, ip
 8000dec:	2700      	movs	r7, #0
 8000dee:	b11e      	cbz	r6, 8000df8 <__udivmoddi4+0xa0>
 8000df0:	40d4      	lsrs	r4, r2
 8000df2:	2300      	movs	r3, #0
 8000df4:	e9c6 4300 	strd	r4, r3, [r6]
 8000df8:	4639      	mov	r1, r7
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d909      	bls.n	8000e16 <__udivmoddi4+0xbe>
 8000e02:	2e00      	cmp	r6, #0
 8000e04:	f000 80eb 	beq.w	8000fde <__udivmoddi4+0x286>
 8000e08:	2700      	movs	r7, #0
 8000e0a:	e9c6 0100 	strd	r0, r1, [r6]
 8000e0e:	4638      	mov	r0, r7
 8000e10:	4639      	mov	r1, r7
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	fab3 f783 	clz	r7, r3
 8000e1a:	2f00      	cmp	r7, #0
 8000e1c:	d147      	bne.n	8000eae <__udivmoddi4+0x156>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d302      	bcc.n	8000e28 <__udivmoddi4+0xd0>
 8000e22:	4282      	cmp	r2, r0
 8000e24:	f200 80fa 	bhi.w	800101c <__udivmoddi4+0x2c4>
 8000e28:	1a84      	subs	r4, r0, r2
 8000e2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e2e:	2001      	movs	r0, #1
 8000e30:	4698      	mov	r8, r3
 8000e32:	2e00      	cmp	r6, #0
 8000e34:	d0e0      	beq.n	8000df8 <__udivmoddi4+0xa0>
 8000e36:	e9c6 4800 	strd	r4, r8, [r6]
 8000e3a:	e7dd      	b.n	8000df8 <__udivmoddi4+0xa0>
 8000e3c:	b902      	cbnz	r2, 8000e40 <__udivmoddi4+0xe8>
 8000e3e:	deff      	udf	#255	; 0xff
 8000e40:	fab2 f282 	clz	r2, r2
 8000e44:	2a00      	cmp	r2, #0
 8000e46:	f040 808f 	bne.w	8000f68 <__udivmoddi4+0x210>
 8000e4a:	1b49      	subs	r1, r1, r5
 8000e4c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e50:	fa1f f885 	uxth.w	r8, r5
 8000e54:	2701      	movs	r7, #1
 8000e56:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e5a:	0c23      	lsrs	r3, r4, #16
 8000e5c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e64:	fb08 f10c 	mul.w	r1, r8, ip
 8000e68:	4299      	cmp	r1, r3
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x124>
 8000e6c:	18eb      	adds	r3, r5, r3
 8000e6e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x122>
 8000e74:	4299      	cmp	r1, r3
 8000e76:	f200 80cd 	bhi.w	8001014 <__udivmoddi4+0x2bc>
 8000e7a:	4684      	mov	ip, r0
 8000e7c:	1a59      	subs	r1, r3, r1
 8000e7e:	b2a3      	uxth	r3, r4
 8000e80:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e84:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e88:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e8c:	fb08 f800 	mul.w	r8, r8, r0
 8000e90:	45a0      	cmp	r8, r4
 8000e92:	d907      	bls.n	8000ea4 <__udivmoddi4+0x14c>
 8000e94:	192c      	adds	r4, r5, r4
 8000e96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e9a:	d202      	bcs.n	8000ea2 <__udivmoddi4+0x14a>
 8000e9c:	45a0      	cmp	r8, r4
 8000e9e:	f200 80b6 	bhi.w	800100e <__udivmoddi4+0x2b6>
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	eba4 0408 	sub.w	r4, r4, r8
 8000ea8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000eac:	e79f      	b.n	8000dee <__udivmoddi4+0x96>
 8000eae:	f1c7 0c20 	rsb	ip, r7, #32
 8000eb2:	40bb      	lsls	r3, r7
 8000eb4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000eb8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ebc:	fa01 f407 	lsl.w	r4, r1, r7
 8000ec0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ec4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ec8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ecc:	4325      	orrs	r5, r4
 8000ece:	fbb3 f9f8 	udiv	r9, r3, r8
 8000ed2:	0c2c      	lsrs	r4, r5, #16
 8000ed4:	fb08 3319 	mls	r3, r8, r9, r3
 8000ed8:	fa1f fa8e 	uxth.w	sl, lr
 8000edc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ee0:	fb09 f40a 	mul.w	r4, r9, sl
 8000ee4:	429c      	cmp	r4, r3
 8000ee6:	fa02 f207 	lsl.w	r2, r2, r7
 8000eea:	fa00 f107 	lsl.w	r1, r0, r7
 8000eee:	d90b      	bls.n	8000f08 <__udivmoddi4+0x1b0>
 8000ef0:	eb1e 0303 	adds.w	r3, lr, r3
 8000ef4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ef8:	f080 8087 	bcs.w	800100a <__udivmoddi4+0x2b2>
 8000efc:	429c      	cmp	r4, r3
 8000efe:	f240 8084 	bls.w	800100a <__udivmoddi4+0x2b2>
 8000f02:	f1a9 0902 	sub.w	r9, r9, #2
 8000f06:	4473      	add	r3, lr
 8000f08:	1b1b      	subs	r3, r3, r4
 8000f0a:	b2ad      	uxth	r5, r5
 8000f0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f10:	fb08 3310 	mls	r3, r8, r0, r3
 8000f14:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000f18:	fb00 fa0a 	mul.w	sl, r0, sl
 8000f1c:	45a2      	cmp	sl, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x1da>
 8000f20:	eb1e 0404 	adds.w	r4, lr, r4
 8000f24:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f28:	d26b      	bcs.n	8001002 <__udivmoddi4+0x2aa>
 8000f2a:	45a2      	cmp	sl, r4
 8000f2c:	d969      	bls.n	8001002 <__udivmoddi4+0x2aa>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	4474      	add	r4, lr
 8000f32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f36:	fba0 8902 	umull	r8, r9, r0, r2
 8000f3a:	eba4 040a 	sub.w	r4, r4, sl
 8000f3e:	454c      	cmp	r4, r9
 8000f40:	46c2      	mov	sl, r8
 8000f42:	464b      	mov	r3, r9
 8000f44:	d354      	bcc.n	8000ff0 <__udivmoddi4+0x298>
 8000f46:	d051      	beq.n	8000fec <__udivmoddi4+0x294>
 8000f48:	2e00      	cmp	r6, #0
 8000f4a:	d069      	beq.n	8001020 <__udivmoddi4+0x2c8>
 8000f4c:	ebb1 050a 	subs.w	r5, r1, sl
 8000f50:	eb64 0403 	sbc.w	r4, r4, r3
 8000f54:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f58:	40fd      	lsrs	r5, r7
 8000f5a:	40fc      	lsrs	r4, r7
 8000f5c:	ea4c 0505 	orr.w	r5, ip, r5
 8000f60:	e9c6 5400 	strd	r5, r4, [r6]
 8000f64:	2700      	movs	r7, #0
 8000f66:	e747      	b.n	8000df8 <__udivmoddi4+0xa0>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f70:	4095      	lsls	r5, r2
 8000f72:	fa01 f002 	lsl.w	r0, r1, r2
 8000f76:	fa21 f303 	lsr.w	r3, r1, r3
 8000f7a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f7e:	4338      	orrs	r0, r7
 8000f80:	0c01      	lsrs	r1, r0, #16
 8000f82:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f86:	fa1f f885 	uxth.w	r8, r5
 8000f8a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f92:	fb07 f308 	mul.w	r3, r7, r8
 8000f96:	428b      	cmp	r3, r1
 8000f98:	fa04 f402 	lsl.w	r4, r4, r2
 8000f9c:	d907      	bls.n	8000fae <__udivmoddi4+0x256>
 8000f9e:	1869      	adds	r1, r5, r1
 8000fa0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000fa4:	d22f      	bcs.n	8001006 <__udivmoddi4+0x2ae>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d92d      	bls.n	8001006 <__udivmoddi4+0x2ae>
 8000faa:	3f02      	subs	r7, #2
 8000fac:	4429      	add	r1, r5
 8000fae:	1acb      	subs	r3, r1, r3
 8000fb0:	b281      	uxth	r1, r0
 8000fb2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000fb6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fbe:	fb00 f308 	mul.w	r3, r0, r8
 8000fc2:	428b      	cmp	r3, r1
 8000fc4:	d907      	bls.n	8000fd6 <__udivmoddi4+0x27e>
 8000fc6:	1869      	adds	r1, r5, r1
 8000fc8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000fcc:	d217      	bcs.n	8000ffe <__udivmoddi4+0x2a6>
 8000fce:	428b      	cmp	r3, r1
 8000fd0:	d915      	bls.n	8000ffe <__udivmoddi4+0x2a6>
 8000fd2:	3802      	subs	r0, #2
 8000fd4:	4429      	add	r1, r5
 8000fd6:	1ac9      	subs	r1, r1, r3
 8000fd8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000fdc:	e73b      	b.n	8000e56 <__udivmoddi4+0xfe>
 8000fde:	4637      	mov	r7, r6
 8000fe0:	4630      	mov	r0, r6
 8000fe2:	e709      	b.n	8000df8 <__udivmoddi4+0xa0>
 8000fe4:	4607      	mov	r7, r0
 8000fe6:	e6e7      	b.n	8000db8 <__udivmoddi4+0x60>
 8000fe8:	4618      	mov	r0, r3
 8000fea:	e6fb      	b.n	8000de4 <__udivmoddi4+0x8c>
 8000fec:	4541      	cmp	r1, r8
 8000fee:	d2ab      	bcs.n	8000f48 <__udivmoddi4+0x1f0>
 8000ff0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ff4:	eb69 020e 	sbc.w	r2, r9, lr
 8000ff8:	3801      	subs	r0, #1
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	e7a4      	b.n	8000f48 <__udivmoddi4+0x1f0>
 8000ffe:	4660      	mov	r0, ip
 8001000:	e7e9      	b.n	8000fd6 <__udivmoddi4+0x27e>
 8001002:	4618      	mov	r0, r3
 8001004:	e795      	b.n	8000f32 <__udivmoddi4+0x1da>
 8001006:	4667      	mov	r7, ip
 8001008:	e7d1      	b.n	8000fae <__udivmoddi4+0x256>
 800100a:	4681      	mov	r9, r0
 800100c:	e77c      	b.n	8000f08 <__udivmoddi4+0x1b0>
 800100e:	3802      	subs	r0, #2
 8001010:	442c      	add	r4, r5
 8001012:	e747      	b.n	8000ea4 <__udivmoddi4+0x14c>
 8001014:	f1ac 0c02 	sub.w	ip, ip, #2
 8001018:	442b      	add	r3, r5
 800101a:	e72f      	b.n	8000e7c <__udivmoddi4+0x124>
 800101c:	4638      	mov	r0, r7
 800101e:	e708      	b.n	8000e32 <__udivmoddi4+0xda>
 8001020:	4637      	mov	r7, r6
 8001022:	e6e9      	b.n	8000df8 <__udivmoddi4+0xa0>

08001024 <__aeabi_idiv0>:
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <SD_init>:
    return f_utime(path, &info);
}


FRESULT SD_init()
{
 8001028:	b580      	push	{r7, lr}
 800102a:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 800102e:	af00      	add	r7, sp, #0
	if (BSP_SD_Init() != MSD_OK) return FR_NOT_READY;
 8001030:	f00b f938 	bl	800c2a4 <BSP_SD_Init>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <SD_init+0x16>
 800103a:	2303      	movs	r3, #3
 800103c:	e026      	b.n	800108c <SD_init+0x64>

	if (FATFS_UnLinkDriver(SDPath) != 0) return FR_NOT_READY;
 800103e:	4816      	ldr	r0, [pc, #88]	; (8001098 <SD_init+0x70>)
 8001040:	f00d fc20 	bl	800e884 <FATFS_UnLinkDriver>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <SD_init+0x26>
 800104a:	2303      	movs	r3, #3
 800104c:	e01e      	b.n	800108c <SD_init+0x64>

	if (FATFS_LinkDriver(&SD_Driver, SDPath) != 0) return FR_NOT_READY;
 800104e:	4912      	ldr	r1, [pc, #72]	; (8001098 <SD_init+0x70>)
 8001050:	4812      	ldr	r0, [pc, #72]	; (800109c <SD_init+0x74>)
 8001052:	f00d fbcf 	bl	800e7f4 <FATFS_LinkDriver>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <SD_init+0x38>
 800105c:	2303      	movs	r3, #3
 800105e:	e015      	b.n	800108c <SD_init+0x64>

	FATFS fs;
	FRESULT mountStatus = f_mount(&fs, SDPath, 0);
 8001060:	1d3b      	adds	r3, r7, #4
 8001062:	2200      	movs	r2, #0
 8001064:	490c      	ldr	r1, [pc, #48]	; (8001098 <SD_init+0x70>)
 8001066:	4618      	mov	r0, r3
 8001068:	f00d fb32 	bl	800e6d0 <f_mount>
 800106c:	4603      	mov	r3, r0
 800106e:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
	if (mountStatus != FR_OK)
 8001072:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8001076:	2b00      	cmp	r3, #0
 8001078:	d007      	beq.n	800108a <SD_init+0x62>
	{
		f_mount(0, SDPath, 0);
 800107a:	2200      	movs	r2, #0
 800107c:	4906      	ldr	r1, [pc, #24]	; (8001098 <SD_init+0x70>)
 800107e:	2000      	movs	r0, #0
 8001080:	f00d fb26 	bl	800e6d0 <f_mount>
		return mountStatus;
 8001084:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8001088:	e000      	b.n	800108c <SD_init+0x64>
	}

	return FR_OK;
 800108a:	2300      	movs	r3, #0
}
 800108c:	4618      	mov	r0, r3
 800108e:	f507 770e 	add.w	r7, r7, #568	; 0x238
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000d10 	.word	0x20000d10
 800109c:	080138bc 	.word	0x080138bc

080010a0 <SX1278_write>:
#include "stm32f4xx_hal_spi.h"

//#### SPI communication with SX1278 ####

void SX1278_write(SPI_HandleTypeDef* spi, uint8_t data)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	460b      	mov	r3, r1
 80010aa:	70fb      	strb	r3, [r7, #3]
	// writes byte [data] on SPI bus
	HAL_SPI_Transmit(spi, &data, 1, 1000);
 80010ac:	1cf9      	adds	r1, r7, #3
 80010ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010b2:	2201      	movs	r2, #1
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f007 fc05 	bl	80088c4 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(spi) != HAL_SPI_STATE_READY);
 80010ba:	bf00      	nop
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f007 fed7 	bl	8008e70 <HAL_SPI_GetState>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d1f9      	bne.n	80010bc <SX1278_write+0x1c>
}
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <SX1278_command>:
void SX1278_command(SX1278* inst, uint8_t addr, uint8_t cmd)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	460b      	mov	r3, r1
 80010da:	70fb      	strb	r3, [r7, #3]
 80010dc:	4613      	mov	r3, r2
 80010de:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	69d8      	ldr	r0, [r3, #28]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	8a5b      	ldrh	r3, [r3, #18]
 80010e8:	2200      	movs	r2, #0
 80010ea:	4619      	mov	r1, r3
 80010ec:	f002 ff5e 	bl	8003fac <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr | 0x80);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6a1a      	ldr	r2, [r3, #32]
 80010f4:	78fb      	ldrb	r3, [r7, #3]
 80010f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	4619      	mov	r1, r3
 80010fe:	4610      	mov	r0, r2
 8001100:	f7ff ffce 	bl	80010a0 <SX1278_write>
	SX1278_write(inst->spi, cmd);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6a1b      	ldr	r3, [r3, #32]
 8001108:	78ba      	ldrb	r2, [r7, #2]
 800110a:	4611      	mov	r1, r2
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff ffc7 	bl	80010a0 <SX1278_write>

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	69d8      	ldr	r0, [r3, #28]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	8a5b      	ldrh	r3, [r3, #18]
 800111a:	2201      	movs	r2, #1
 800111c:	4619      	mov	r1, r3
 800111e:	f002 ff45 	bl	8003fac <HAL_GPIO_WritePin>
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <SX1278_command_burst>:
void SX1278_command_burst(SX1278* inst, uint8_t addr, uint8_t* buff, uint8_t len)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b086      	sub	sp, #24
 800112e:	af00      	add	r7, sp, #0
 8001130:	60f8      	str	r0, [r7, #12]
 8001132:	607a      	str	r2, [r7, #4]
 8001134:	461a      	mov	r2, r3
 8001136:	460b      	mov	r3, r1
 8001138:	72fb      	strb	r3, [r7, #11]
 800113a:	4613      	mov	r3, r2
 800113c:	72bb      	strb	r3, [r7, #10]
	uint8_t i;

	if (len <= 1) return;
 800113e:	7abb      	ldrb	r3, [r7, #10]
 8001140:	2b01      	cmp	r3, #1
 8001142:	d92d      	bls.n	80011a0 <SX1278_command_burst+0x76>

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	69d8      	ldr	r0, [r3, #28]
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	8a5b      	ldrh	r3, [r3, #18]
 800114c:	2200      	movs	r2, #0
 800114e:	4619      	mov	r1, r3
 8001150:	f002 ff2c 	bl	8003fac <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr | 0x80);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	6a1a      	ldr	r2, [r3, #32]
 8001158:	7afb      	ldrb	r3, [r7, #11]
 800115a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800115e:	b2db      	uxtb	r3, r3
 8001160:	4619      	mov	r1, r3
 8001162:	4610      	mov	r0, r2
 8001164:	f7ff ff9c 	bl	80010a0 <SX1278_write>
	for (i = 0; i < len; i++)
 8001168:	2300      	movs	r3, #0
 800116a:	75fb      	strb	r3, [r7, #23]
 800116c:	e00b      	b.n	8001186 <SX1278_command_burst+0x5c>
	{
		SX1278_write(inst->spi, *(buff + i));	//explanation: *(buff + i) = buff[i]
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	6a18      	ldr	r0, [r3, #32]
 8001172:	7dfb      	ldrb	r3, [r7, #23]
 8001174:	687a      	ldr	r2, [r7, #4]
 8001176:	4413      	add	r3, r2
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	4619      	mov	r1, r3
 800117c:	f7ff ff90 	bl	80010a0 <SX1278_write>
	for (i = 0; i < len; i++)
 8001180:	7dfb      	ldrb	r3, [r7, #23]
 8001182:	3301      	adds	r3, #1
 8001184:	75fb      	strb	r3, [r7, #23]
 8001186:	7dfa      	ldrb	r2, [r7, #23]
 8001188:	7abb      	ldrb	r3, [r7, #10]
 800118a:	429a      	cmp	r2, r3
 800118c:	d3ef      	bcc.n	800116e <SX1278_command_burst+0x44>
	}

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	69d8      	ldr	r0, [r3, #28]
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	8a5b      	ldrh	r3, [r3, #18]
 8001196:	2201      	movs	r2, #1
 8001198:	4619      	mov	r1, r3
 800119a:	f002 ff07 	bl	8003fac <HAL_GPIO_WritePin>
 800119e:	e000      	b.n	80011a2 <SX1278_command_burst+0x78>
	if (len <= 1) return;
 80011a0:	bf00      	nop
}
 80011a2:	3718      	adds	r7, #24
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <SX1278_read>:

uint8_t SX1278_read(SPI_HandleTypeDef* spi)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af02      	add	r7, sp, #8
 80011ae:	6078      	str	r0, [r7, #4]
	// reads byte from SPI bus
	uint8_t txByte = 0x00;
 80011b0:	2300      	movs	r3, #0
 80011b2:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 80011b4:	2300      	movs	r3, #0
 80011b6:	73bb      	strb	r3, [r7, #14]

	HAL_SPI_TransmitReceive(spi, &txByte, &rxByte, 1, 1000);
 80011b8:	f107 020e 	add.w	r2, r7, #14
 80011bc:	f107 010f 	add.w	r1, r7, #15
 80011c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011c4:	9300      	str	r3, [sp, #0]
 80011c6:	2301      	movs	r3, #1
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f007 fcaf 	bl	8008b2c <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(spi) != HAL_SPI_STATE_READY);
 80011ce:	bf00      	nop
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f007 fe4d 	bl	8008e70 <HAL_SPI_GetState>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d1f9      	bne.n	80011d0 <SX1278_read+0x28>

	return rxByte;
 80011dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <SX1278_read_address>:
uint8_t SX1278_read_address(SX1278* inst, uint8_t addr)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b084      	sub	sp, #16
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
 80011ee:	460b      	mov	r3, r1
 80011f0:	70fb      	strb	r3, [r7, #3]
	uint8_t recv;

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	69d8      	ldr	r0, [r3, #28]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	8a5b      	ldrh	r3, [r3, #18]
 80011fa:	2200      	movs	r2, #0
 80011fc:	4619      	mov	r1, r3
 80011fe:	f002 fed5 	bl	8003fac <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6a1b      	ldr	r3, [r3, #32]
 8001206:	78fa      	ldrb	r2, [r7, #3]
 8001208:	4611      	mov	r1, r2
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff ff48 	bl	80010a0 <SX1278_write>
	recv = SX1278_read(inst->spi);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6a1b      	ldr	r3, [r3, #32]
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff ffc7 	bl	80011a8 <SX1278_read>
 800121a:	4603      	mov	r3, r0
 800121c:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	69d8      	ldr	r0, [r3, #28]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	8a5b      	ldrh	r3, [r3, #18]
 8001226:	2201      	movs	r2, #1
 8001228:	4619      	mov	r1, r3
 800122a:	f002 febf 	bl	8003fac <HAL_GPIO_WritePin>

	return recv;
 800122e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3710      	adds	r7, #16
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <SX1278_read_burst>:
void SX1278_read_burst(SX1278* inst, uint8_t addr, uint8_t* buff, uint8_t len)
{
 8001238:	b590      	push	{r4, r7, lr}
 800123a:	b087      	sub	sp, #28
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	607a      	str	r2, [r7, #4]
 8001242:	461a      	mov	r2, r3
 8001244:	460b      	mov	r3, r1
 8001246:	72fb      	strb	r3, [r7, #11]
 8001248:	4613      	mov	r3, r2
 800124a:	72bb      	strb	r3, [r7, #10]
	uint8_t i;

	if (len <= 1) return;
 800124c:	7abb      	ldrb	r3, [r7, #10]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d92b      	bls.n	80012aa <SX1278_read_burst+0x72>

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	69d8      	ldr	r0, [r3, #28]
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	8a5b      	ldrh	r3, [r3, #18]
 800125a:	2200      	movs	r2, #0
 800125c:	4619      	mov	r1, r3
 800125e:	f002 fea5 	bl	8003fac <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr);
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	6a1b      	ldr	r3, [r3, #32]
 8001266:	7afa      	ldrb	r2, [r7, #11]
 8001268:	4611      	mov	r1, r2
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff ff18 	bl	80010a0 <SX1278_write>
	for (i = 0; i < len; i++)
 8001270:	2300      	movs	r3, #0
 8001272:	75fb      	strb	r3, [r7, #23]
 8001274:	e00c      	b.n	8001290 <SX1278_read_burst+0x58>
	{
		*(buff + i) = SX1278_read(inst->spi);	//explanation: *(buff + i) = buff[i]
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	6a19      	ldr	r1, [r3, #32]
 800127a:	7dfb      	ldrb	r3, [r7, #23]
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	18d4      	adds	r4, r2, r3
 8001280:	4608      	mov	r0, r1
 8001282:	f7ff ff91 	bl	80011a8 <SX1278_read>
 8001286:	4603      	mov	r3, r0
 8001288:	7023      	strb	r3, [r4, #0]
	for (i = 0; i < len; i++)
 800128a:	7dfb      	ldrb	r3, [r7, #23]
 800128c:	3301      	adds	r3, #1
 800128e:	75fb      	strb	r3, [r7, #23]
 8001290:	7dfa      	ldrb	r2, [r7, #23]
 8001292:	7abb      	ldrb	r3, [r7, #10]
 8001294:	429a      	cmp	r2, r3
 8001296:	d3ee      	bcc.n	8001276 <SX1278_read_burst+0x3e>
	}

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	69d8      	ldr	r0, [r3, #28]
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	8a5b      	ldrh	r3, [r3, #18]
 80012a0:	2201      	movs	r2, #1
 80012a2:	4619      	mov	r1, r3
 80012a4:	f002 fe82 	bl	8003fac <HAL_GPIO_WritePin>
 80012a8:	e000      	b.n	80012ac <SX1278_read_burst+0x74>
	if (len <= 1) return;
 80012aa:	bf00      	nop
}
 80012ac:	371c      	adds	r7, #28
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd90      	pop	{r4, r7, pc}

080012b2 <SX1278_init>:

//#### SX1278 usage functions ####

bool SX1278_init(SX1278* inst)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b086      	sub	sp, #24
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
	//default pin configuration
	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	69d8      	ldr	r0, [r3, #28]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	8a5b      	ldrh	r3, [r3, #18]
 80012c2:	2201      	movs	r2, #1
 80012c4:	4619      	mov	r1, r3
 80012c6:	f002 fe71 	bl	8003fac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(inst->reset_port, inst->reset, GPIO_PIN_SET);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6958      	ldr	r0, [r3, #20]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	89db      	ldrh	r3, [r3, #14]
 80012d2:	2201      	movs	r2, #1
 80012d4:	4619      	mov	r1, r3
 80012d6:	f002 fe69 	bl	8003fac <HAL_GPIO_WritePin>

	//unable to establish the connection with module
	if (SX1278_read_address(inst, REG_LR_VERSION) != 0x12) return false;
 80012da:	2142      	movs	r1, #66	; 0x42
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff ff82 	bl	80011e6 <SX1278_read_address>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b12      	cmp	r3, #18
 80012e6:	d001      	beq.n	80012ec <SX1278_init+0x3a>
 80012e8:	2300      	movs	r3, #0
 80012ea:	e0f0      	b.n	80014ce <SX1278_init+0x21c>

	//changes must be performed in a Sleep mode
	SX1278_sleep(inst);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f000 fa4d 	bl	800178c <SX1278_sleep>

	//HAL_Delay(15);

	//0x88 = 1_00_0_1_000 = Lora, FSK, (r), LowFreq, Sleep
	SX1278_command(inst, LR_RegOpMode, 0x88);
 80012f2:	2288      	movs	r2, #136	; 0x88
 80012f4:	2101      	movs	r1, #1
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f7ff feea 	bl	80010d0 <SX1278_command>

	//Setting three frequency bytes
	//####################################
	//[!!!!] heavy low level shit going out there, must check if correct
	//####################################
	float step_in_mhz = 32/pow(2, 19);
 80012fc:	f04f 5362 	mov.w	r3, #947912704	; 0x38800000
 8001300:	617b      	str	r3, [r7, #20]
	float multiplier = inst->config.frequency/step_in_mhz;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	edd3 6a00 	vldr	s13, [r3]
 8001308:	ed97 7a05 	vldr	s14, [r7, #20]
 800130c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001310:	edc7 7a02 	vstr	s15, [r7, #8]
	uint8_t* multiplier_addr = &multiplier;
 8001314:	f107 0308 	add.w	r3, r7, #8
 8001318:	613b      	str	r3, [r7, #16]
	SX1278_command(inst, LR_RegFrMsb, *multiplier_addr);
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	461a      	mov	r2, r3
 8001320:	2106      	movs	r1, #6
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff fed4 	bl	80010d0 <SX1278_command>
	SX1278_command(inst, LR_RegFrMid, *(multiplier_addr + 1));
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	3301      	adds	r3, #1
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	461a      	mov	r2, r3
 8001330:	2107      	movs	r1, #7
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f7ff fecc 	bl	80010d0 <SX1278_command>
	SX1278_command(inst, LR_RegFrLsb, *(multiplier_addr + 2));
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	3302      	adds	r3, #2
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	461a      	mov	r2, r3
 8001340:	2108      	movs	r1, #8
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f7ff fec4 	bl	80010d0 <SX1278_command>

	SX1278_command(inst, LR_RegPaConfig, inst->config.power);				//Setting transmit power
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	791b      	ldrb	r3, [r3, #4]
 800134c:	461a      	mov	r2, r3
 800134e:	2109      	movs	r1, #9
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff febd 	bl	80010d0 <SX1278_command>
	SX1278_command(inst, LR_RegOcp, 0x2B);			// [was 0x0B] Over current protection set to 100mA
 8001356:	222b      	movs	r2, #43	; 0x2b
 8001358:	210b      	movs	r1, #11
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7ff feb8 	bl	80010d0 <SX1278_command>
	SX1278_command(inst, LR_RegLna, 0x23);			// LNA settings: G1 - max gain, Boost on
 8001360:	2223      	movs	r2, #35	; 0x23
 8001362:	210c      	movs	r1, #12
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f7ff feb3 	bl	80010d0 <SX1278_command>
	SX1278_command(inst, REG_LR_PADAC, 0x87);		//high power setting +20dBm
 800136a:	2287      	movs	r2, #135	; 0x87
 800136c:	214d      	movs	r1, #77	; 0x4d
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f7ff feae 	bl	80010d0 <SX1278_command>
	SX1278_command(inst, LR_RegHopPeriod, 0x00);	//frequency hopping off
 8001374:	2200      	movs	r2, #0
 8001376:	2124      	movs	r1, #36	; 0x24
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f7ff fea9 	bl	80010d0 <SX1278_command>

	if (inst->config.spreadingFactor == SX1278_SF_6)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	795b      	ldrb	r3, [r3, #5]
 8001382:	2b06      	cmp	r3, #6
 8001384:	d140      	bne.n	8001408 <SX1278_init+0x156>
	{
		uint8_t tmp;
		//implicit CRC enable
		SX1278_command(inst, LR_RegModemConfig1, ((inst->config.bandWidth << 4) + (inst->config.codingRate << 1) + 0x01));
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	79db      	ldrb	r3, [r3, #7]
 800138a:	011b      	lsls	r3, r3, #4
 800138c:	b2da      	uxtb	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	799b      	ldrb	r3, [r3, #6]
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	b2db      	uxtb	r3, r3
 8001396:	4413      	add	r3, r2
 8001398:	b2db      	uxtb	r3, r3
 800139a:	3301      	adds	r3, #1
 800139c:	b2db      	uxtb	r3, r3
 800139e:	461a      	mov	r2, r3
 80013a0:	211d      	movs	r1, #29
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff fe94 	bl	80010d0 <SX1278_command>
		SX1278_command(inst, LR_RegModemConfig2, ((inst->config.spreadingFactor << 4) + (inst->config.crc << 2) + (uint8_t)(inst->config.rxTimeoutSymb >> 8)));
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	795b      	ldrb	r3, [r3, #5]
 80013ac:	011b      	lsls	r3, r3, #4
 80013ae:	b2da      	uxtb	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	7a1b      	ldrb	r3, [r3, #8]
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	4413      	add	r3, r2
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	895b      	ldrh	r3, [r3, #10]
 80013c0:	0a1b      	lsrs	r3, r3, #8
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	4413      	add	r3, r2
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	461a      	mov	r2, r3
 80013cc:	211e      	movs	r1, #30
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f7ff fe7e 	bl	80010d0 <SX1278_command>
		tmp = SX1278_read_address(inst, 0x31);
 80013d4:	2131      	movs	r1, #49	; 0x31
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f7ff ff05 	bl	80011e6 <SX1278_read_address>
 80013dc:	4603      	mov	r3, r0
 80013de:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
 80013e2:	f023 0307 	bic.w	r3, r3, #7
 80013e6:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 80013e8:	7bfb      	ldrb	r3, [r7, #15]
 80013ea:	f043 0305 	orr.w	r3, r3, #5
 80013ee:	73fb      	strb	r3, [r7, #15]
		SX1278_command(inst, 0x31, tmp);
 80013f0:	7bfb      	ldrb	r3, [r7, #15]
 80013f2:	461a      	mov	r2, r3
 80013f4:	2131      	movs	r1, #49	; 0x31
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff fe6a 	bl	80010d0 <SX1278_command>
		SX1278_command(inst, 0x37, 0x0C);
 80013fc:	220c      	movs	r2, #12
 80013fe:	2137      	movs	r1, #55	; 0x37
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f7ff fe65 	bl	80010d0 <SX1278_command>
 8001406:	e024      	b.n	8001452 <SX1278_init+0x1a0>
	}
	else
	{
		//explicit CRC enable
		SX1278_command(inst, LR_RegModemConfig1, ((inst->config.bandWidth << 4) + (inst->config.codingRate << 1) + 0x00));
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	79db      	ldrb	r3, [r3, #7]
 800140c:	011b      	lsls	r3, r3, #4
 800140e:	b2da      	uxtb	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	799b      	ldrb	r3, [r3, #6]
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	b2db      	uxtb	r3, r3
 8001418:	4413      	add	r3, r2
 800141a:	b2db      	uxtb	r3, r3
 800141c:	461a      	mov	r2, r3
 800141e:	211d      	movs	r1, #29
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f7ff fe55 	bl	80010d0 <SX1278_command>
		//SFactor &  LNA gain set by the internal AGC loop
		SX1278_command(inst, LR_RegModemConfig2, ((inst->config.spreadingFactor << 4) + (inst->config.crc << 2) + (uint8_t)(inst->config.rxTimeoutSymb >> 8)));
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	795b      	ldrb	r3, [r3, #5]
 800142a:	011b      	lsls	r3, r3, #4
 800142c:	b2da      	uxtb	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	7a1b      	ldrb	r3, [r3, #8]
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	b2db      	uxtb	r3, r3
 8001436:	4413      	add	r3, r2
 8001438:	b2da      	uxtb	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	895b      	ldrh	r3, [r3, #10]
 800143e:	0a1b      	lsrs	r3, r3, #8
 8001440:	b29b      	uxth	r3, r3
 8001442:	b2db      	uxtb	r3, r3
 8001444:	4413      	add	r3, r2
 8001446:	b2db      	uxtb	r3, r3
 8001448:	461a      	mov	r2, r3
 800144a:	211e      	movs	r1, #30
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f7ff fe3f 	bl	80010d0 <SX1278_command>
	}

	SX1278_command(inst, LR_RegSymbTimeoutLsb, (uint8_t)(inst->config.rxTimeoutSymb & 0x00FF));	//recievier timeout value [timeout = symbtimeout*ts]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	895b      	ldrh	r3, [r3, #10]
 8001456:	b2db      	uxtb	r3, r3
 8001458:	461a      	mov	r2, r3
 800145a:	211f      	movs	r1, #31
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f7ff fe37 	bl	80010d0 <SX1278_command>
	SX1278_command(inst, LR_RegPreambleMsb, 0x00);		//Setting the preable length?
 8001462:	2200      	movs	r2, #0
 8001464:	2120      	movs	r1, #32
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f7ff fe32 	bl	80010d0 <SX1278_command>
	SX1278_command(inst, LR_RegPreambleLsb, 12);		//8+4=12byte Preamble
 800146c:	220c      	movs	r2, #12
 800146e:	2121      	movs	r1, #33	; 0x21
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f7ff fe2d 	bl	80010d0 <SX1278_command>
	SX1278_command(inst, REG_LR_DIOMAPPING2, 0x01);		//RegDioMapping2 DIO5=00, DIO4=01
 8001476:	2201      	movs	r2, #1
 8001478:	2141      	movs	r1, #65	; 0x41
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7ff fe28 	bl	80010d0 <SX1278_command>

	inst->newPacket = true;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2201      	movs	r2, #1
 8001484:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	inst->rxTimeout = false;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2200      	movs	r2, #0
 800148c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	inst->rxDone = false;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	inst->crcError = false;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	inst->rssi = 1;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2201      	movs	r2, #1
 80014a4:	62da      	str	r2, [r3, #44]	; 0x2c
	inst->newPacket = false;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2200      	movs	r2, #0
 80014aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	inst->pendingIRQ = false;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	inst->txLen = 0;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	inst->rxLen = 0;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	SX1278_standby(inst);
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f000 f970 	bl	80017ac <SX1278_standby>

	return true;
 80014cc:	2301      	movs	r3, #1
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3718      	adds	r7, #24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <SX1278_transmit>:

bool SX1278_transmit(SX1278* inst, uint8_t* txBuffer, uint8_t length)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b084      	sub	sp, #16
 80014da:	af00      	add	r7, sp, #0
 80014dc:	60f8      	str	r0, [r7, #12]
 80014de:	60b9      	str	r1, [r7, #8]
 80014e0:	4613      	mov	r3, r2
 80014e2:	71fb      	strb	r3, [r7, #7]
	// check if the module is ready for the transmission
	if (inst->mode == STANDBY)
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	7b1b      	ldrb	r3, [r3, #12]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d127      	bne.n	800153c <SX1278_transmit+0x66>
	{
		SX1278_tx_mode(inst);
 80014ec:	68f8      	ldr	r0, [r7, #12]
 80014ee:	f000 f8f4 	bl	80016da <SX1278_tx_mode>
		SX1278_tx_input(inst, txBuffer, length);
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	461a      	mov	r2, r3
 80014f6:	68b9      	ldr	r1, [r7, #8]
 80014f8:	68f8      	ldr	r0, [r7, #12]
 80014fa:	f000 f852 	bl	80015a2 <SX1278_tx_input>
		SX1278_tx_push(inst);
 80014fe:	68f8      	ldr	r0, [r7, #12]
 8001500:	f000 f86a 	bl	80015d8 <SX1278_tx_push>

		if (inst->useDio0IRQ)
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800150a:	2b00      	cmp	r3, #0
 800150c:	d005      	beq.n	800151a <SX1278_transmit+0x44>
		{
			//waiting for interrupt
			inst->pendingIRQ = true;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2201      	movs	r2, #1
 8001512:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			while (HAL_GPIO_ReadPin(inst->dio0_port, inst->dio0) == GPIO_PIN_RESET);

			return SX1278_tx_finish(inst);
		}

		return true;
 8001516:	2301      	movs	r3, #1
 8001518:	e011      	b.n	800153e <SX1278_transmit+0x68>
			while (HAL_GPIO_ReadPin(inst->dio0_port, inst->dio0) == GPIO_PIN_RESET);
 800151a:	bf00      	nop
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	699a      	ldr	r2, [r3, #24]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	8a1b      	ldrh	r3, [r3, #16]
 8001524:	4619      	mov	r1, r3
 8001526:	4610      	mov	r0, r2
 8001528:	f002 fd28 	bl	8003f7c <HAL_GPIO_ReadPin>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d0f4      	beq.n	800151c <SX1278_transmit+0x46>
			return SX1278_tx_finish(inst);
 8001532:	68f8      	ldr	r0, [r7, #12]
 8001534:	f000 f85d 	bl	80015f2 <SX1278_tx_finish>
 8001538:	4603      	mov	r3, r0
 800153a:	e000      	b.n	800153e <SX1278_transmit+0x68>
	}
	else return false;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <SX1278_receive>:

bool SX1278_receive(SX1278* inst)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b082      	sub	sp, #8
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
	// [!!] writes data to the inst->rxBuffer
	if (inst->mode == STANDBY)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	7b1b      	ldrb	r3, [r3, #12]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d120      	bne.n	8001598 <SX1278_receive+0x52>
	{
		SX1278_rx_mode(inst);
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f000 f8e7 	bl	800172a <SX1278_rx_mode>

		if (inst->useDio0IRQ)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001562:	2b00      	cmp	r3, #0
 8001564:	d005      	beq.n	8001572 <SX1278_receive+0x2c>
		{
			//waiting for interrupt
			inst->pendingIRQ = true;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2201      	movs	r2, #1
 800156a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

			SX1278_rx_get_packet(inst);
			return inst->newPacket;
		}

		return true;
 800156e:	2301      	movs	r3, #1
 8001570:	e013      	b.n	800159a <SX1278_receive+0x54>
			while (HAL_GPIO_ReadPin(inst->dio0_port, inst->dio0) == GPIO_PIN_RESET);
 8001572:	bf00      	nop
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	699a      	ldr	r2, [r3, #24]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	8a1b      	ldrh	r3, [r3, #16]
 800157c:	4619      	mov	r1, r3
 800157e:	4610      	mov	r0, r2
 8001580:	f002 fcfc 	bl	8003f7c <HAL_GPIO_ReadPin>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d0f4      	beq.n	8001574 <SX1278_receive+0x2e>
			SX1278_rx_get_packet(inst);
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f000 f856 	bl	800163c <SX1278_rx_get_packet>
			return inst->newPacket;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001596:	e000      	b.n	800159a <SX1278_receive+0x54>
	}
	else return false;
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <SX1278_tx_input>:

//#### Data send / receive routines ####

void SX1278_tx_input(SX1278* inst, uint8_t* txBuffer, uint8_t length)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b084      	sub	sp, #16
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	60f8      	str	r0, [r7, #12]
 80015aa:	60b9      	str	r1, [r7, #8]
 80015ac:	4613      	mov	r3, r2
 80015ae:	71fb      	strb	r3, [r7, #7]
	SX1278_command(inst, LR_RegPayloadLength, length);	//(this register must difine when the data long of one byte in SF is 6)
 80015b0:	79fb      	ldrb	r3, [r7, #7]
 80015b2:	461a      	mov	r2, r3
 80015b4:	2122      	movs	r1, #34	; 0x22
 80015b6:	68f8      	ldr	r0, [r7, #12]
 80015b8:	f7ff fd8a 	bl	80010d0 <SX1278_command>
	SX1278_command_burst(inst, 0x00, txBuffer, length);
 80015bc:	79fb      	ldrb	r3, [r7, #7]
 80015be:	68ba      	ldr	r2, [r7, #8]
 80015c0:	2100      	movs	r1, #0
 80015c2:	68f8      	ldr	r0, [r7, #12]
 80015c4:	f7ff fdb1 	bl	800112a <SX1278_command_burst>

	inst->txLen = length;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	79fa      	ldrb	r2, [r7, #7]
 80015cc:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 80015d0:	bf00      	nop
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <SX1278_tx_push>:
void SX1278_tx_push(SX1278* inst)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
	//set module to TX mode and transmit
	SX1278_command(inst, LR_RegOpMode, 0x8b);
 80015e0:	228b      	movs	r2, #139	; 0x8b
 80015e2:	2101      	movs	r1, #1
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f7ff fd73 	bl	80010d0 <SX1278_command>
}
 80015ea:	bf00      	nop
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <SX1278_tx_finish>:
bool SX1278_tx_finish(SX1278* inst)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b082      	sub	sp, #8
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
	inst->irqStatus = SX1278_read_address(inst, LR_RegIrqFlags);
 80015fa:	2112      	movs	r1, #18
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f7ff fdf2 	bl	80011e6 <SX1278_read_address>
 8001602:	4603      	mov	r3, r0
 8001604:	461a      	mov	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	inst->txDone = ((inst->irqStatus & IRQ_LR_TXDONE) > 0x00);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001612:	f003 0308 	and.w	r3, r3, #8
 8001616:	2b00      	cmp	r3, #0
 8001618:	bfcc      	ite	gt
 800161a:	2301      	movgt	r3, #1
 800161c:	2300      	movle	r3, #0
 800161e:	b2da      	uxtb	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	SX1278_clearLoRaIrq(inst);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f000 f935 	bl	8001896 <SX1278_clearLoRaIrq>
	SX1278_standby(inst);
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f000 f8bd 	bl	80017ac <SX1278_standby>
	return true;
 8001632:	2301      	movs	r3, #1
}
 8001634:	4618      	mov	r0, r3
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <SX1278_rx_get_packet>:

bool SX1278_rx_get_packet(SX1278* inst)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	uint8_t addr;
	uint8_t packet_size;

	SX1278_update_IRQ_status(inst);
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f000 f8ee 	bl	8001826 <SX1278_update_IRQ_status>

	memset(inst->rxBuffer, 0x00, SX1278_MAX_PACKET);	//clear rxBuffer
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	3335      	adds	r3, #53	; 0x35
 800164e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001652:	2100      	movs	r1, #0
 8001654:	4618      	mov	r0, r3
 8001656:	f00d fe54 	bl	800f302 <memset>

	addr = SX1278_read_address(inst, LR_RegFifoRxCurrentaddr);	//get last packet address
 800165a:	2110      	movs	r1, #16
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f7ff fdc2 	bl	80011e6 <SX1278_read_address>
 8001662:	4603      	mov	r3, r0
 8001664:	73bb      	strb	r3, [r7, #14]
	SX1278_command(inst, LR_RegFifoAddrPtr, addr);				//set fifo pointer to this address
 8001666:	7bbb      	ldrb	r3, [r7, #14]
 8001668:	461a      	mov	r2, r3
 800166a:	210d      	movs	r1, #13
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f7ff fd2f 	bl	80010d0 <SX1278_command>

	//When SpreadingFactor = 6, use Implicit Header mode (Excluding internal packet length)
	if (inst->config.spreadingFactor == SX1278_SF_6)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	795b      	ldrb	r3, [r3, #5]
 8001676:	2b06      	cmp	r3, #6
 8001678:	d104      	bne.n	8001684 <SX1278_rx_get_packet+0x48>
	{
		// ??? not sure what to put here
		packet_size = inst->txLen;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001680:	73fb      	strb	r3, [r7, #15]
 8001682:	e005      	b.n	8001690 <SX1278_rx_get_packet+0x54>
	}
	else
	{
		packet_size = SX1278_read_address(inst, LR_RegRxNbBytes); //get the number of received bytes
 8001684:	2113      	movs	r1, #19
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f7ff fdad 	bl	80011e6 <SX1278_read_address>
 800168c:	4603      	mov	r3, r0
 800168e:	73fb      	strb	r3, [r7, #15]
	}

	SX1278_read_burst(inst, 0x00, inst->rxBuffer, packet_size);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f103 0235 	add.w	r2, r3, #53	; 0x35
 8001696:	7bfb      	ldrb	r3, [r7, #15]
 8001698:	2100      	movs	r1, #0
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f7ff fdcc 	bl	8001238 <SX1278_read_burst>

	inst->newPacket = (inst->rxTimeout || (inst->crcError && LR_VALIDATE_CRCERROR));
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	inst->rssi = SX1278_getRSSI(inst);
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f000 f8ff 	bl	80018b0 <SX1278_getRSSI>
 80016b2:	4602      	mov	r2, r0
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	62da      	str	r2, [r3, #44]	; 0x2c
	inst->rxLen = packet_size;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	7bfa      	ldrb	r2, [r7, #15]
 80016bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	SX1278_clearLoRaIrq(inst);
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f000 f8e8 	bl	8001896 <SX1278_clearLoRaIrq>
	SX1278_standby(inst);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f000 f870 	bl	80017ac <SX1278_standby>

	return inst->newPacket;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <SX1278_tx_mode>:

//#### Functions to change SX1278 operation mode ####

void SX1278_tx_mode(SX1278* inst)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b084      	sub	sp, #16
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
	uint8_t addr;

	SX1278_clearLoRaIrq(inst);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f000 f8d7 	bl	8001896 <SX1278_clearLoRaIrq>
	SX1278_command(inst, REG_LR_DIOMAPPING1, 0x41);	//DIO0=01, DIO1=00, DIO2=00, DIO3=01
 80016e8:	2241      	movs	r2, #65	; 0x41
 80016ea:	2140      	movs	r1, #64	; 0x40
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff fcef 	bl	80010d0 <SX1278_command>
	SX1278_command(inst, LR_RegIrqFlagsMask, 0xF7);	//Open TxDone interrupt
 80016f2:	22f7      	movs	r2, #247	; 0xf7
 80016f4:	2111      	movs	r1, #17
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f7ff fcea 	bl	80010d0 <SX1278_command>

	addr = SX1278_read_address(inst, LR_RegFifoTxBaseAddr);	//read tx_fifo beginning adress in memory
 80016fc:	210e      	movs	r1, #14
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f7ff fd71 	bl	80011e6 <SX1278_read_address>
 8001704:	4603      	mov	r3, r0
 8001706:	73fb      	strb	r3, [r7, #15]
	SX1278_command(inst, LR_RegFifoAddrPtr, addr);			//set fifo pointer there
 8001708:	7bfb      	ldrb	r3, [r7, #15]
 800170a:	461a      	mov	r2, r3
 800170c:	210d      	movs	r1, #13
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f7ff fcde 	bl	80010d0 <SX1278_command>

	inst->txLen = 0;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	inst->mode = TX;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2202      	movs	r2, #2
 8001720:	731a      	strb	r2, [r3, #12]
}
 8001722:	bf00      	nop
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <SX1278_rx_mode>:

void SX1278_rx_mode(SX1278* inst)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b084      	sub	sp, #16
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
	uint8_t addr;

	SX1278_clearLoRaIrq(inst);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f000 f8af 	bl	8001896 <SX1278_clearLoRaIrq>
	SX1278_command(inst, REG_LR_DIOMAPPING1, 0x01);	//DIO=00, DIO1=00,DIO2=00, DIO3=01
 8001738:	2201      	movs	r2, #1
 800173a:	2140      	movs	r1, #64	; 0x40
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7ff fcc7 	bl	80010d0 <SX1278_command>
	SX1278_command(inst, LR_RegIrqFlagsMask, 0x1F);	//Open RxDone, RxTimeout, crcError interrupt
 8001742:	221f      	movs	r2, #31
 8001744:	2111      	movs	r1, #17
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff fcc2 	bl	80010d0 <SX1278_command>

	addr = SX1278_read_address(inst, LR_RegFifoRxBaseAddr);	//read rx_fifo beginning adress in memory
 800174c:	210f      	movs	r1, #15
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7ff fd49 	bl	80011e6 <SX1278_read_address>
 8001754:	4603      	mov	r3, r0
 8001756:	73fb      	strb	r3, [r7, #15]
	SX1278_command(inst, LR_RegFifoAddrPtr, addr);			//set fifo pointer there
 8001758:	7bfb      	ldrb	r3, [r7, #15]
 800175a:	461a      	mov	r2, r3
 800175c:	210d      	movs	r1, #13
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f7ff fcb6 	bl	80010d0 <SX1278_command>

	SX1278_command(inst, LR_RegOpMode, 0x8d);				//0x8d = 1_00_0_1_101 = Lora, FSK, (r), Low Frequency mode, Rx mode
 8001764:	228d      	movs	r2, #141	; 0x8d
 8001766:	2101      	movs	r1, #1
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f7ff fcb1 	bl	80010d0 <SX1278_command>

	inst->crcError = false;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	inst->rxLen = 0;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	inst->mode = RX;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2203      	movs	r2, #3
 8001782:	731a      	strb	r2, [r3, #12]
}
 8001784:	bf00      	nop
 8001786:	3710      	adds	r7, #16
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <SX1278_sleep>:

void SX1278_sleep(SX1278* inst)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
	SX1278_command(inst, LR_RegOpMode, 0x08);
 8001794:	2208      	movs	r2, #8
 8001796:	2101      	movs	r1, #1
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f7ff fc99 	bl	80010d0 <SX1278_command>
	inst->mode = SLEEP;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	731a      	strb	r2, [r3, #12]
}
 80017a4:	bf00      	nop
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <SX1278_standby>:

void SX1278_standby(SX1278* inst)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
	SX1278_command(inst, LR_RegOpMode, 0x09);
 80017b4:	2209      	movs	r2, #9
 80017b6:	2101      	movs	r1, #1
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f7ff fc89 	bl	80010d0 <SX1278_command>
	inst->mode = STANDBY;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2201      	movs	r2, #1
 80017c2:	731a      	strb	r2, [r3, #12]
}
 80017c4:	bf00      	nop
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <SX1278_dio0_IRQ>:
}

//#### Interrupt methods ####

bool SX1278_dio0_IRQ(SX1278* inst)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
	//function to call when dio0 rises, used only when waiting for the DIO0 interrupt
	//finishes transmit and receive routines
	if (inst->useDio0IRQ && inst->pendingIRQ)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d01e      	beq.n	800181c <SX1278_dio0_IRQ+0x50>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d019      	beq.n	800181c <SX1278_dio0_IRQ+0x50>
	{
		if (inst->mode == TX)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	7b1b      	ldrb	r3, [r3, #12]
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d104      	bne.n	80017fa <SX1278_dio0_IRQ+0x2e>
		{
			return SX1278_tx_finish(inst);
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f7ff fefe 	bl	80015f2 <SX1278_tx_finish>
 80017f6:	4603      	mov	r3, r0
 80017f8:	e011      	b.n	800181e <SX1278_dio0_IRQ+0x52>
		}
		else if (inst->mode == RX)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	7b1b      	ldrb	r3, [r3, #12]
 80017fe:	2b03      	cmp	r3, #3
 8001800:	d104      	bne.n	800180c <SX1278_dio0_IRQ+0x40>
		{
			return SX1278_rx_get_packet(inst);
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f7ff ff1a 	bl	800163c <SX1278_rx_get_packet>
 8001808:	4603      	mov	r3, r0
 800180a:	e008      	b.n	800181e <SX1278_dio0_IRQ+0x52>
		}
		else
		{
			SX1278_clearLoRaIrq(inst);
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f000 f842 	bl	8001896 <SX1278_clearLoRaIrq>
			SX1278_standby(inst);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f7ff ffca 	bl	80017ac <SX1278_standby>
			return false;
 8001818:	2300      	movs	r3, #0
 800181a:	e000      	b.n	800181e <SX1278_dio0_IRQ+0x52>
		}

		inst->pendingIRQ = false;
		return true;
	}
	else return false;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <SX1278_update_IRQ_status>:

void SX1278_update_IRQ_status(SX1278* inst)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b082      	sub	sp, #8
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
	inst->irqStatus = SX1278_read_address(inst, LR_RegIrqFlags);
 800182e:	2112      	movs	r1, #18
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f7ff fcd8 	bl	80011e6 <SX1278_read_address>
 8001836:	4603      	mov	r3, r0
 8001838:	461a      	mov	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	inst->rxTimeout = ((inst->irqStatus & IRQ_LR_RXTIMEOUT) > 0x00);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800184a:	2b00      	cmp	r3, #0
 800184c:	bfcc      	ite	gt
 800184e:	2301      	movgt	r3, #1
 8001850:	2300      	movle	r3, #0
 8001852:	b2da      	uxtb	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	inst->rxDone = 	  ((inst->irqStatus & IRQ_LR_RXDONE) > 0x00);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001864:	2b00      	cmp	r3, #0
 8001866:	bfcc      	ite	gt
 8001868:	2301      	movgt	r3, #1
 800186a:	2300      	movle	r3, #0
 800186c:	b2da      	uxtb	r2, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	inst->crcError =  ((inst->irqStatus & IRQ_LR_CRCERROR) > 0x00);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800187a:	f003 0320 	and.w	r3, r3, #32
 800187e:	2b00      	cmp	r3, #0
 8001880:	bfcc      	ite	gt
 8001882:	2301      	movgt	r3, #1
 8001884:	2300      	movle	r3, #0
 8001886:	b2da      	uxtb	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278* inst)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b082      	sub	sp, #8
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
	SX1278_command(inst, LR_RegIrqFlags, 0xFF);
 800189e:	22ff      	movs	r2, #255	; 0xff
 80018a0:	2112      	movs	r1, #18
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f7ff fc14 	bl	80010d0 <SX1278_command>
}
 80018a8:	bf00      	nop
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <SX1278_getRSSI>:

int SX1278_getRSSI(SX1278* inst)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  return (-164 + SX1278_read_address(inst, LR_RegPktRssiValue));
 80018b8:	211a      	movs	r1, #26
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f7ff fc93 	bl	80011e6 <SX1278_read_address>
 80018c0:	4603      	mov	r3, r0
 80018c2:	3ba4      	subs	r3, #164	; 0xa4
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <read_data>:
#include "bmp280.h"

static inline int read_data(BMP280 *inst, uint8_t addr, uint8_t *value, uint8_t len) {
 80018cc:	b590      	push	{r4, r7, lr}
 80018ce:	b08b      	sub	sp, #44	; 0x2c
 80018d0:	af04      	add	r7, sp, #16
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	607a      	str	r2, [r7, #4]
 80018d6:	461a      	mov	r2, r3
 80018d8:	460b      	mov	r3, r1
 80018da:	72fb      	strb	r3, [r7, #11]
 80018dc:	4613      	mov	r3, r2
 80018de:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (inst->addr << 1);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	889b      	ldrh	r3, [r3, #4]
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(inst->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK) return 0;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	6818      	ldr	r0, [r3, #0]
 80018ec:	7afb      	ldrb	r3, [r7, #11]
 80018ee:	b29c      	uxth	r4, r3
 80018f0:	7abb      	ldrb	r3, [r7, #10]
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	8af9      	ldrh	r1, [r7, #22]
 80018f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018fa:	9202      	str	r2, [sp, #8]
 80018fc:	9301      	str	r3, [sp, #4]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	9300      	str	r3, [sp, #0]
 8001902:	2301      	movs	r3, #1
 8001904:	4622      	mov	r2, r4
 8001906:	f002 fdcf 	bl	80044a8 <HAL_I2C_Mem_Read>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d101      	bne.n	8001914 <read_data+0x48>
 8001910:	2300      	movs	r3, #0
 8001912:	e000      	b.n	8001916 <read_data+0x4a>
	else return 1;
 8001914:	2301      	movs	r3, #1
}
 8001916:	4618      	mov	r0, r3
 8001918:	371c      	adds	r7, #28
 800191a:	46bd      	mov	sp, r7
 800191c:	bd90      	pop	{r4, r7, pc}

0800191e <write_register8>:

static int write_register8(BMP280 *inst, uint8_t addr, uint8_t value) {
 800191e:	b580      	push	{r7, lr}
 8001920:	b088      	sub	sp, #32
 8001922:	af04      	add	r7, sp, #16
 8001924:	6078      	str	r0, [r7, #4]
 8001926:	460b      	mov	r3, r1
 8001928:	70fb      	strb	r3, [r7, #3]
 800192a:	4613      	mov	r3, r2
 800192c:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (inst->addr << 1);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	889b      	ldrh	r3, [r3, #4]
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(inst->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK) return false;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6818      	ldr	r0, [r3, #0]
 800193a:	78fb      	ldrb	r3, [r7, #3]
 800193c:	b29a      	uxth	r2, r3
 800193e:	89f9      	ldrh	r1, [r7, #14]
 8001940:	f242 7310 	movw	r3, #10000	; 0x2710
 8001944:	9302      	str	r3, [sp, #8]
 8001946:	2301      	movs	r3, #1
 8001948:	9301      	str	r3, [sp, #4]
 800194a:	1cbb      	adds	r3, r7, #2
 800194c:	9300      	str	r3, [sp, #0]
 800194e:	2301      	movs	r3, #1
 8001950:	f002 fcb0 	bl	80042b4 <HAL_I2C_Mem_Write>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <write_register8+0x40>
 800195a:	2300      	movs	r3, #0
 800195c:	e000      	b.n	8001960 <write_register8+0x42>
	else return true;
 800195e:	2301      	movs	r3, #1
}
 8001960:	4618      	mov	r0, r3
 8001962:	3710      	adds	r7, #16
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <read_register16>:

static bool read_register16(BMP280 *inst, uint8_t addr, uint16_t *value) {
 8001968:	b580      	push	{r7, lr}
 800196a:	b08a      	sub	sp, #40	; 0x28
 800196c:	af04      	add	r7, sp, #16
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	460b      	mov	r3, r1
 8001972:	607a      	str	r2, [r7, #4]
 8001974:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (inst->addr << 1);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	889b      	ldrh	r3, [r3, #4]
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(inst->i2c, tx_buff, addr, 1, rx_buff, 2, 5000) == HAL_OK)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	6818      	ldr	r0, [r3, #0]
 8001982:	7afb      	ldrb	r3, [r7, #11]
 8001984:	b29a      	uxth	r2, r3
 8001986:	8af9      	ldrh	r1, [r7, #22]
 8001988:	f241 3388 	movw	r3, #5000	; 0x1388
 800198c:	9302      	str	r3, [sp, #8]
 800198e:	2302      	movs	r3, #2
 8001990:	9301      	str	r3, [sp, #4]
 8001992:	f107 0314 	add.w	r3, r7, #20
 8001996:	9300      	str	r3, [sp, #0]
 8001998:	2301      	movs	r3, #1
 800199a:	f002 fd85 	bl	80044a8 <HAL_I2C_Mem_Read>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d10b      	bne.n	80019bc <read_register16+0x54>
	{
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 80019a4:	7d7b      	ldrb	r3, [r7, #21]
 80019a6:	021b      	lsls	r3, r3, #8
 80019a8:	b21a      	sxth	r2, r3
 80019aa:	7d3b      	ldrb	r3, [r7, #20]
 80019ac:	b21b      	sxth	r3, r3
 80019ae:	4313      	orrs	r3, r2
 80019b0:	b21b      	sxth	r3, r3
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	801a      	strh	r2, [r3, #0]
		return true;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e000      	b.n	80019be <read_register16+0x56>
	}
	else return false;
 80019bc:	2300      	movs	r3, #0

}
 80019be:	4618      	mov	r0, r3
 80019c0:	3718      	adds	r7, #24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <read_calibration_data>:

static bool read_calibration_data(BMP280 *inst)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b082      	sub	sp, #8
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
	return (read_register16(inst, 0x88, &inst->dig_T1)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	330c      	adds	r3, #12
 80019d2:	461a      	mov	r2, r3
 80019d4:	2188      	movs	r1, #136	; 0x88
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f7ff ffc6 	bl	8001968 <read_register16>
 80019dc:	4603      	mov	r3, r0
	&& read_register16(inst, 0x94, (uint16_t *) &inst->dig_P4)
	&& read_register16(inst, 0x96, (uint16_t *) &inst->dig_P5)
	&& read_register16(inst, 0x98, (uint16_t *) &inst->dig_P6)
	&& read_register16(inst, 0x9a, (uint16_t *) &inst->dig_P7)
	&& read_register16(inst, 0x9c, (uint16_t *) &inst->dig_P8)
	&& read_register16(inst, 0x9e, (uint16_t *) &inst->dig_P9));
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d06f      	beq.n	8001ac2 <read_calibration_data+0xfc>
	&& read_register16(inst, 0x8a, (uint16_t *) &inst->dig_T2)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	330e      	adds	r3, #14
 80019e6:	461a      	mov	r2, r3
 80019e8:	218a      	movs	r1, #138	; 0x8a
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7ff ffbc 	bl	8001968 <read_register16>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d065      	beq.n	8001ac2 <read_calibration_data+0xfc>
	&& read_register16(inst, 0x8c, (uint16_t *) &inst->dig_T3)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	3310      	adds	r3, #16
 80019fa:	461a      	mov	r2, r3
 80019fc:	218c      	movs	r1, #140	; 0x8c
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7ff ffb2 	bl	8001968 <read_register16>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d05b      	beq.n	8001ac2 <read_calibration_data+0xfc>
	&& read_register16(inst, 0x8e, &inst->dig_P1)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	3312      	adds	r3, #18
 8001a0e:	461a      	mov	r2, r3
 8001a10:	218e      	movs	r1, #142	; 0x8e
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7ff ffa8 	bl	8001968 <read_register16>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d051      	beq.n	8001ac2 <read_calibration_data+0xfc>
	&& read_register16(inst, 0x90, (uint16_t *) &inst->dig_P2)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	3314      	adds	r3, #20
 8001a22:	461a      	mov	r2, r3
 8001a24:	2190      	movs	r1, #144	; 0x90
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7ff ff9e 	bl	8001968 <read_register16>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d047      	beq.n	8001ac2 <read_calibration_data+0xfc>
	&& read_register16(inst, 0x92, (uint16_t *) &inst->dig_P3)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	3316      	adds	r3, #22
 8001a36:	461a      	mov	r2, r3
 8001a38:	2192      	movs	r1, #146	; 0x92
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7ff ff94 	bl	8001968 <read_register16>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d03d      	beq.n	8001ac2 <read_calibration_data+0xfc>
	&& read_register16(inst, 0x94, (uint16_t *) &inst->dig_P4)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	3318      	adds	r3, #24
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	2194      	movs	r1, #148	; 0x94
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f7ff ff8a 	bl	8001968 <read_register16>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d033      	beq.n	8001ac2 <read_calibration_data+0xfc>
	&& read_register16(inst, 0x96, (uint16_t *) &inst->dig_P5)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	331a      	adds	r3, #26
 8001a5e:	461a      	mov	r2, r3
 8001a60:	2196      	movs	r1, #150	; 0x96
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f7ff ff80 	bl	8001968 <read_register16>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d029      	beq.n	8001ac2 <read_calibration_data+0xfc>
	&& read_register16(inst, 0x98, (uint16_t *) &inst->dig_P6)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	331c      	adds	r3, #28
 8001a72:	461a      	mov	r2, r3
 8001a74:	2198      	movs	r1, #152	; 0x98
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7ff ff76 	bl	8001968 <read_register16>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d01f      	beq.n	8001ac2 <read_calibration_data+0xfc>
	&& read_register16(inst, 0x9a, (uint16_t *) &inst->dig_P7)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	331e      	adds	r3, #30
 8001a86:	461a      	mov	r2, r3
 8001a88:	219a      	movs	r1, #154	; 0x9a
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f7ff ff6c 	bl	8001968 <read_register16>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d015      	beq.n	8001ac2 <read_calibration_data+0xfc>
	&& read_register16(inst, 0x9c, (uint16_t *) &inst->dig_P8)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	3320      	adds	r3, #32
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	219c      	movs	r1, #156	; 0x9c
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7ff ff62 	bl	8001968 <read_register16>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d00b      	beq.n	8001ac2 <read_calibration_data+0xfc>
	&& read_register16(inst, 0x9e, (uint16_t *) &inst->dig_P9));
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	3322      	adds	r3, #34	; 0x22
 8001aae:	461a      	mov	r2, r3
 8001ab0:	219e      	movs	r1, #158	; 0x9e
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f7ff ff58 	bl	8001968 <read_register16>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <read_calibration_data+0xfc>
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e000      	b.n	8001ac4 <read_calibration_data+0xfe>
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	f003 0301 	and.w	r3, r3, #1
 8001ac8:	b2db      	uxtb	r3, r3
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <bmp280_init>:

bool bmp280_init(BMP280 *inst, BMP280_config *params)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b084      	sub	sp, #16
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
 8001ada:	6039      	str	r1, [r7, #0]
	if (inst->addr != BMP280_I2C_ADDRESS_0 && inst->addr != BMP280_I2C_ADDRESS_1) return false;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	889b      	ldrh	r3, [r3, #4]
 8001ae0:	2b76      	cmp	r3, #118	; 0x76
 8001ae2:	d005      	beq.n	8001af0 <bmp280_init+0x1e>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	889b      	ldrh	r3, [r3, #4]
 8001ae8:	2b77      	cmp	r3, #119	; 0x77
 8001aea:	d001      	beq.n	8001af0 <bmp280_init+0x1e>
 8001aec:	2300      	movs	r3, #0
 8001aee:	e06f      	b.n	8001bd0 <bmp280_init+0xfe>
	if (read_data(inst, BMP280_REG_ID, &inst->id, 1)) return false;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	1d9a      	adds	r2, r3, #6
 8001af4:	2301      	movs	r3, #1
 8001af6:	21d0      	movs	r1, #208	; 0xd0
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f7ff fee7 	bl	80018cc <read_data>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <bmp280_init+0x36>
 8001b04:	2300      	movs	r3, #0
 8001b06:	e063      	b.n	8001bd0 <bmp280_init+0xfe>
	if (inst->id != BMP280_CHIP_ID) return false;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	799b      	ldrb	r3, [r3, #6]
 8001b0c:	2b58      	cmp	r3, #88	; 0x58
 8001b0e:	d001      	beq.n	8001b14 <bmp280_init+0x42>
 8001b10:	2300      	movs	r3, #0
 8001b12:	e05d      	b.n	8001bd0 <bmp280_init+0xfe>

	// Soft reset.
	if (write_register8(inst, BMP280_REG_RESET, BMP280_RESET_VALUE)) return false;
 8001b14:	22b6      	movs	r2, #182	; 0xb6
 8001b16:	21e0      	movs	r1, #224	; 0xe0
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f7ff ff00 	bl	800191e <write_register8>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <bmp280_init+0x56>
 8001b24:	2300      	movs	r3, #0
 8001b26:	e053      	b.n	8001bd0 <bmp280_init+0xfe>

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(inst, BMP280_REG_STATUS, &status, 1) && (status & 1) == 0) break;
 8001b28:	f107 020d 	add.w	r2, r7, #13
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	21f3      	movs	r1, #243	; 0xf3
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f7ff fecb 	bl	80018cc <read_data>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d1f5      	bne.n	8001b28 <bmp280_init+0x56>
 8001b3c:	7b7b      	ldrb	r3, [r7, #13]
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1f0      	bne.n	8001b28 <bmp280_init+0x56>
	}

	if (!read_calibration_data(inst)) return false;
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff ff3d 	bl	80019c6 <read_calibration_data>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	f083 0301 	eor.w	r3, r3, #1
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d100      	bne.n	8001b5a <bmp280_init+0x88>
 8001b58:	e001      	b.n	8001b5e <bmp280_init+0x8c>
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	e038      	b.n	8001bd0 <bmp280_init+0xfe>

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	791b      	ldrb	r3, [r3, #4]
 8001b62:	015b      	lsls	r3, r3, #5
 8001b64:	b25a      	sxtb	r2, r3
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	785b      	ldrb	r3, [r3, #1]
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	b25b      	sxtb	r3, r3
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	b25b      	sxtb	r3, r3
 8001b72:	73fb      	strb	r3, [r7, #15]
	if (write_register8(inst, BMP280_REG_CONFIG, config)) return false;
 8001b74:	7bfb      	ldrb	r3, [r7, #15]
 8001b76:	461a      	mov	r2, r3
 8001b78:	21f5      	movs	r1, #245	; 0xf5
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f7ff fecf 	bl	800191e <write_register8>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <bmp280_init+0xb8>
 8001b86:	2300      	movs	r3, #0
 8001b88:	e022      	b.n	8001bd0 <bmp280_init+0xfe>

	if (params->mode == BMP280_MODE_FORCED) {
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d102      	bne.n	8001b98 <bmp280_init+0xc6>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	2200      	movs	r2, #0
 8001b96:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5) | (params->oversampling_pressure << 2) | (params->mode);
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	78db      	ldrb	r3, [r3, #3]
 8001b9c:	015b      	lsls	r3, r3, #5
 8001b9e:	b25a      	sxtb	r2, r3
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	789b      	ldrb	r3, [r3, #2]
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	b25b      	sxtb	r3, r3
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	b25a      	sxtb	r2, r3
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	b25b      	sxtb	r3, r3
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	b25b      	sxtb	r3, r3
 8001bb6:	73bb      	strb	r3, [r7, #14]

	if (write_register8(inst, BMP280_REG_CTRL, ctrl)) return false;
 8001bb8:	7bbb      	ldrb	r3, [r7, #14]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	21f4      	movs	r1, #244	; 0xf4
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f7ff fead 	bl	800191e <write_register8>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <bmp280_init+0xfc>
 8001bca:	2300      	movs	r3, #0
 8001bcc:	e000      	b.n	8001bd0 <bmp280_init+0xfe>

	return true;
 8001bce:	2301      	movs	r3, #1
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280 *inst, int32_t adc_temp,
		int32_t *fine_temp) {
 8001bd8:	b480      	push	{r7}
 8001bda:	b087      	sub	sp, #28
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) inst->dig_T1 << 1)))
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	10da      	asrs	r2, r3, #3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	899b      	ldrh	r3, [r3, #12]
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	1ad3      	subs	r3, r2, r3
			* (int32_t) inst->dig_T2) >> 11;
 8001bf0:	68fa      	ldr	r2, [r7, #12]
 8001bf2:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8001bf6:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) inst->dig_T1 << 1)))
 8001bfa:	12db      	asrs	r3, r3, #11
 8001bfc:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) inst->dig_T1)
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	111b      	asrs	r3, r3, #4
 8001c02:	68fa      	ldr	r2, [r7, #12]
 8001c04:	8992      	ldrh	r2, [r2, #12]
 8001c06:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) inst->dig_T1)) >> 12)
 8001c08:	68ba      	ldr	r2, [r7, #8]
 8001c0a:	1112      	asrs	r2, r2, #4
 8001c0c:	68f9      	ldr	r1, [r7, #12]
 8001c0e:	8989      	ldrh	r1, [r1, #12]
 8001c10:	1a52      	subs	r2, r2, r1
 8001c12:	fb02 f303 	mul.w	r3, r2, r3
 8001c16:	131b      	asrs	r3, r3, #12
			* (int32_t) inst->dig_T3) >> 14;
 8001c18:	68fa      	ldr	r2, [r7, #12]
 8001c1a:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8001c1e:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) inst->dig_T1)
 8001c22:	139b      	asrs	r3, r3, #14
 8001c24:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8001c26:	697a      	ldr	r2, [r7, #20]
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	441a      	add	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	4613      	mov	r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4413      	add	r3, r2
 8001c3a:	3380      	adds	r3, #128	; 0x80
 8001c3c:	121b      	asrs	r3, r3, #8
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	371c      	adds	r7, #28
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr

08001c4a <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280 *inst, int32_t adc_press,
		int32_t fine_temp) {
 8001c4a:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8001c4e:	b08a      	sub	sp, #40	; 0x28
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001c60:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 8001c64:	f142 34ff 	adc.w	r4, r2, #4294967295
 8001c68:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = var1 * var1 * (int64_t) inst->dig_P6;
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6e:	6a3a      	ldr	r2, [r7, #32]
 8001c70:	fb02 f203 	mul.w	r2, r2, r3
 8001c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c76:	6a39      	ldr	r1, [r7, #32]
 8001c78:	fb01 f303 	mul.w	r3, r1, r3
 8001c7c:	441a      	add	r2, r3
 8001c7e:	6a39      	ldr	r1, [r7, #32]
 8001c80:	6a3b      	ldr	r3, [r7, #32]
 8001c82:	fba1 3403 	umull	r3, r4, r1, r3
 8001c86:	4422      	add	r2, r4
 8001c88:	4614      	mov	r4, r2
 8001c8a:	68fa      	ldr	r2, [r7, #12]
 8001c8c:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8001c90:	b211      	sxth	r1, r2
 8001c92:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001c96:	fb01 f504 	mul.w	r5, r1, r4
 8001c9a:	fb03 f002 	mul.w	r0, r3, r2
 8001c9e:	4428      	add	r0, r5
 8001ca0:	fba3 3401 	umull	r3, r4, r3, r1
 8001ca4:	1902      	adds	r2, r0, r4
 8001ca6:	4614      	mov	r4, r2
 8001ca8:	e9c7 3406 	strd	r3, r4, [r7, #24]
 8001cac:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + ((var1 * (int64_t) inst->dig_P5) << 17);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001cb6:	b21b      	sxth	r3, r3
 8001cb8:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001cbc:	6a3a      	ldr	r2, [r7, #32]
 8001cbe:	fb04 f102 	mul.w	r1, r4, r2
 8001cc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cc4:	fb03 f202 	mul.w	r2, r3, r2
 8001cc8:	1888      	adds	r0, r1, r2
 8001cca:	6a3a      	ldr	r2, [r7, #32]
 8001ccc:	fba2 1203 	umull	r1, r2, r2, r3
 8001cd0:	1883      	adds	r3, r0, r2
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	f04f 0500 	mov.w	r5, #0
 8001cd8:	f04f 0600 	mov.w	r6, #0
 8001cdc:	0456      	lsls	r6, r2, #17
 8001cde:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 8001ce2:	044d      	lsls	r5, r1, #17
 8001ce4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001ce8:	186b      	adds	r3, r5, r1
 8001cea:	eb46 0402 	adc.w	r4, r6, r2
 8001cee:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + (((int64_t) inst->dig_P4) << 35);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001cf8:	b219      	sxth	r1, r3
 8001cfa:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001cfe:	f04f 0500 	mov.w	r5, #0
 8001d02:	f04f 0600 	mov.w	r6, #0
 8001d06:	00ce      	lsls	r6, r1, #3
 8001d08:	2500      	movs	r5, #0
 8001d0a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001d0e:	186b      	adds	r3, r5, r1
 8001d10:	eb46 0402 	adc.w	r4, r6, r2
 8001d14:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var1 = ((var1 * var1 * (int64_t) inst->dig_P3) >> 8)
 8001d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1a:	6a3a      	ldr	r2, [r7, #32]
 8001d1c:	fb02 f203 	mul.w	r2, r2, r3
 8001d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d22:	6a39      	ldr	r1, [r7, #32]
 8001d24:	fb01 f303 	mul.w	r3, r1, r3
 8001d28:	441a      	add	r2, r3
 8001d2a:	6a39      	ldr	r1, [r7, #32]
 8001d2c:	6a3b      	ldr	r3, [r7, #32]
 8001d2e:	fba1 3403 	umull	r3, r4, r1, r3
 8001d32:	4422      	add	r2, r4
 8001d34:	4614      	mov	r4, r2
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	f9b2 2016 	ldrsh.w	r2, [r2, #22]
 8001d3c:	b211      	sxth	r1, r2
 8001d3e:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001d42:	fb01 f504 	mul.w	r5, r1, r4
 8001d46:	fb03 f002 	mul.w	r0, r3, r2
 8001d4a:	4428      	add	r0, r5
 8001d4c:	fba3 3401 	umull	r3, r4, r3, r1
 8001d50:	1902      	adds	r2, r0, r4
 8001d52:	4614      	mov	r4, r2
 8001d54:	f04f 0100 	mov.w	r1, #0
 8001d58:	f04f 0200 	mov.w	r2, #0
 8001d5c:	0a19      	lsrs	r1, r3, #8
 8001d5e:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 8001d62:	1222      	asrs	r2, r4, #8
			+ ((var1 * (int64_t) inst->dig_P2) << 12);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001d6a:	b21b      	sxth	r3, r3
 8001d6c:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001d70:	6a38      	ldr	r0, [r7, #32]
 8001d72:	fb04 f500 	mul.w	r5, r4, r0
 8001d76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001d78:	fb03 f000 	mul.w	r0, r3, r0
 8001d7c:	4428      	add	r0, r5
 8001d7e:	6a3d      	ldr	r5, [r7, #32]
 8001d80:	fba5 5603 	umull	r5, r6, r5, r3
 8001d84:	1983      	adds	r3, r0, r6
 8001d86:	461e      	mov	r6, r3
 8001d88:	f04f 0b00 	mov.w	fp, #0
 8001d8c:	f04f 0c00 	mov.w	ip, #0
 8001d90:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 8001d94:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 8001d98:	ea4f 3b05 	mov.w	fp, r5, lsl #12
	var1 = ((var1 * var1 * (int64_t) inst->dig_P3) >> 8)
 8001d9c:	eb1b 0301 	adds.w	r3, fp, r1
 8001da0:	eb4c 0402 	adc.w	r4, ip, r2
 8001da4:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) inst->dig_P1) >> 33;
 8001da8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001dac:	1c19      	adds	r1, r3, #0
 8001dae:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	8a5b      	ldrh	r3, [r3, #18]
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	f04f 0400 	mov.w	r4, #0
 8001dbc:	fb03 f502 	mul.w	r5, r3, r2
 8001dc0:	fb01 f004 	mul.w	r0, r1, r4
 8001dc4:	4428      	add	r0, r5
 8001dc6:	fba1 3403 	umull	r3, r4, r1, r3
 8001dca:	1902      	adds	r2, r0, r4
 8001dcc:	4614      	mov	r4, r2
 8001dce:	f04f 0100 	mov.w	r1, #0
 8001dd2:	f04f 0200 	mov.w	r2, #0
 8001dd6:	1061      	asrs	r1, r4, #1
 8001dd8:	17e2      	asrs	r2, r4, #31
 8001dda:	e9c7 1208 	strd	r1, r2, [r7, #32]

	if (var1 == 0) {
 8001dde:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001de2:	4323      	orrs	r3, r4
 8001de4:	d101      	bne.n	8001dea <compensate_pressure+0x1a0>
		return 0;  // avoid exception caused by division by zero
 8001de6:	2300      	movs	r3, #0
 8001de8:	e0d4      	b.n	8001f94 <compensate_pressure+0x34a>
	}

	p = 1048576 - adc_press;
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001df0:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001df4:	e9c7 3404 	strd	r3, r4, [r7, #16]
	p = (((p << 31) - var2) * 3125) / var1;
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	ea4f 0963 	mov.w	r9, r3, asr #1
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	ea4f 78c3 	mov.w	r8, r3, lsl #31
 8001e04:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001e08:	4645      	mov	r5, r8
 8001e0a:	464e      	mov	r6, r9
 8001e0c:	1aed      	subs	r5, r5, r3
 8001e0e:	eb66 0604 	sbc.w	r6, r6, r4
 8001e12:	46a8      	mov	r8, r5
 8001e14:	46b1      	mov	r9, r6
 8001e16:	eb18 0308 	adds.w	r3, r8, r8
 8001e1a:	eb49 0409 	adc.w	r4, r9, r9
 8001e1e:	4698      	mov	r8, r3
 8001e20:	46a1      	mov	r9, r4
 8001e22:	eb18 0805 	adds.w	r8, r8, r5
 8001e26:	eb49 0906 	adc.w	r9, r9, r6
 8001e2a:	f04f 0100 	mov.w	r1, #0
 8001e2e:	f04f 0200 	mov.w	r2, #0
 8001e32:	ea4f 1289 	mov.w	r2, r9, lsl #6
 8001e36:	ea42 6298 	orr.w	r2, r2, r8, lsr #26
 8001e3a:	ea4f 1188 	mov.w	r1, r8, lsl #6
 8001e3e:	eb18 0801 	adds.w	r8, r8, r1
 8001e42:	eb49 0902 	adc.w	r9, r9, r2
 8001e46:	f04f 0100 	mov.w	r1, #0
 8001e4a:	f04f 0200 	mov.w	r2, #0
 8001e4e:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8001e52:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 8001e56:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8001e5a:	4688      	mov	r8, r1
 8001e5c:	4691      	mov	r9, r2
 8001e5e:	eb18 0805 	adds.w	r8, r8, r5
 8001e62:	eb49 0906 	adc.w	r9, r9, r6
 8001e66:	f04f 0100 	mov.w	r1, #0
 8001e6a:	f04f 0200 	mov.w	r2, #0
 8001e6e:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8001e72:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 8001e76:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8001e7a:	4688      	mov	r8, r1
 8001e7c:	4691      	mov	r9, r2
 8001e7e:	eb18 0005 	adds.w	r0, r8, r5
 8001e82:	eb49 0106 	adc.w	r1, r9, r6
 8001e86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e8a:	f7fe fefd 	bl	8000c88 <__aeabi_ldivmod>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	460c      	mov	r4, r1
 8001e92:	e9c7 3404 	strd	r3, r4, [r7, #16]
	var1 = ((int64_t) inst->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001e9c:	b219      	sxth	r1, r3
 8001e9e:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001ea2:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 8001ea6:	f04f 0300 	mov.w	r3, #0
 8001eaa:	f04f 0400 	mov.w	r4, #0
 8001eae:	0b6b      	lsrs	r3, r5, #13
 8001eb0:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8001eb4:	1374      	asrs	r4, r6, #13
 8001eb6:	fb03 f502 	mul.w	r5, r3, r2
 8001eba:	fb01 f004 	mul.w	r0, r1, r4
 8001ebe:	4428      	add	r0, r5
 8001ec0:	fba1 1203 	umull	r1, r2, r1, r3
 8001ec4:	1883      	adds	r3, r0, r2
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 8001ecc:	f04f 0300 	mov.w	r3, #0
 8001ed0:	f04f 0400 	mov.w	r4, #0
 8001ed4:	0b6b      	lsrs	r3, r5, #13
 8001ed6:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8001eda:	1374      	asrs	r4, r6, #13
 8001edc:	fb03 f502 	mul.w	r5, r3, r2
 8001ee0:	fb01 f004 	mul.w	r0, r1, r4
 8001ee4:	4428      	add	r0, r5
 8001ee6:	fba1 1203 	umull	r1, r2, r1, r3
 8001eea:	1883      	adds	r3, r0, r2
 8001eec:	461a      	mov	r2, r3
 8001eee:	f04f 0300 	mov.w	r3, #0
 8001ef2:	f04f 0400 	mov.w	r4, #0
 8001ef6:	0e4b      	lsrs	r3, r1, #25
 8001ef8:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8001efc:	1654      	asrs	r4, r2, #25
 8001efe:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = ((int64_t) inst->dig_P8 * p) >> 19;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001f08:	b21b      	sxth	r3, r3
 8001f0a:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	fb04 f102 	mul.w	r1, r4, r2
 8001f14:	697a      	ldr	r2, [r7, #20]
 8001f16:	fb03 f202 	mul.w	r2, r3, r2
 8001f1a:	1888      	adds	r0, r1, r2
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	fba2 1203 	umull	r1, r2, r2, r3
 8001f22:	1883      	adds	r3, r0, r2
 8001f24:	461a      	mov	r2, r3
 8001f26:	f04f 0300 	mov.w	r3, #0
 8001f2a:	f04f 0400 	mov.w	r4, #0
 8001f2e:	0ccb      	lsrs	r3, r1, #19
 8001f30:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8001f34:	14d4      	asrs	r4, r2, #19
 8001f36:	e9c7 3406 	strd	r3, r4, [r7, #24]

	p = ((p + var1 + var2) >> 8) + ((int64_t) inst->dig_P7 << 4);
 8001f3a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001f3e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001f42:	eb11 0803 	adds.w	r8, r1, r3
 8001f46:	eb42 0904 	adc.w	r9, r2, r4
 8001f4a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001f4e:	eb13 0508 	adds.w	r5, r3, r8
 8001f52:	eb44 0609 	adc.w	r6, r4, r9
 8001f56:	f04f 0100 	mov.w	r1, #0
 8001f5a:	f04f 0200 	mov.w	r2, #0
 8001f5e:	0a29      	lsrs	r1, r5, #8
 8001f60:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 8001f64:	1232      	asrs	r2, r6, #8
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001f6c:	b21d      	sxth	r5, r3
 8001f6e:	ea4f 76e5 	mov.w	r6, r5, asr #31
 8001f72:	f04f 0800 	mov.w	r8, #0
 8001f76:	f04f 0900 	mov.w	r9, #0
 8001f7a:	ea4f 1906 	mov.w	r9, r6, lsl #4
 8001f7e:	ea49 7915 	orr.w	r9, r9, r5, lsr #28
 8001f82:	ea4f 1805 	mov.w	r8, r5, lsl #4
 8001f86:	eb18 0301 	adds.w	r3, r8, r1
 8001f8a:	eb49 0402 	adc.w	r4, r9, r2
 8001f8e:	e9c7 3404 	strd	r3, r4, [r7, #16]
	return p;
 8001f92:	693b      	ldr	r3, [r7, #16]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3728      	adds	r7, #40	; 0x28
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}

08001f9e <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280 *inst, int32_t *temperature, uint32_t *pressure) {
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b08a      	sub	sp, #40	; 0x28
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	60f8      	str	r0, [r7, #12]
 8001fa6:	60b9      	str	r1, [r7, #8]
 8001fa8:	607a      	str	r2, [r7, #4]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[6];

	// Need to read in one sequence to ensure they match.
	size_t size = 6;
 8001faa:	2306      	movs	r3, #6
 8001fac:	627b      	str	r3, [r7, #36]	; 0x24
	if (read_data(inst, 0xf7, data, size)) return false;
 8001fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	f107 0214 	add.w	r2, r7, #20
 8001fb6:	21f7      	movs	r1, #247	; 0xf7
 8001fb8:	68f8      	ldr	r0, [r7, #12]
 8001fba:	f7ff fc87 	bl	80018cc <read_data>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <bmp280_read_fixed+0x2a>
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	e027      	b.n	8002018 <bmp280_read_fixed+0x7a>

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001fc8:	7d3b      	ldrb	r3, [r7, #20]
 8001fca:	031a      	lsls	r2, r3, #12
 8001fcc:	7d7b      	ldrb	r3, [r7, #21]
 8001fce:	011b      	lsls	r3, r3, #4
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	7dba      	ldrb	r2, [r7, #22]
 8001fd4:	0912      	lsrs	r2, r2, #4
 8001fd6:	b2d2      	uxtb	r2, r2
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	623b      	str	r3, [r7, #32]
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001fdc:	7dfb      	ldrb	r3, [r7, #23]
 8001fde:	031a      	lsls	r2, r3, #12
 8001fe0:	7e3b      	ldrb	r3, [r7, #24]
 8001fe2:	011b      	lsls	r3, r3, #4
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	7e7a      	ldrb	r2, [r7, #25]
 8001fe8:	0912      	lsrs	r2, r2, #4
 8001fea:	b2d2      	uxtb	r2, r2
 8001fec:	4313      	orrs	r3, r2
 8001fee:	61fb      	str	r3, [r7, #28]

	int32_t fine_temp;
	*temperature = compensate_temperature(inst, adc_temp, &fine_temp);
 8001ff0:	f107 0310 	add.w	r3, r7, #16
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	69f9      	ldr	r1, [r7, #28]
 8001ff8:	68f8      	ldr	r0, [r7, #12]
 8001ffa:	f7ff fded 	bl	8001bd8 <compensate_temperature>
 8001ffe:	4602      	mov	r2, r0
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(inst, adc_pressure, fine_temp);
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	461a      	mov	r2, r3
 8002008:	6a39      	ldr	r1, [r7, #32]
 800200a:	68f8      	ldr	r0, [r7, #12]
 800200c:	f7ff fe1d 	bl	8001c4a <compensate_pressure>
 8002010:	4602      	mov	r2, r0
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	601a      	str	r2, [r3, #0]

	return true;
 8002016:	2301      	movs	r3, #1
}
 8002018:	4618      	mov	r0, r3
 800201a:	3728      	adds	r7, #40	; 0x28
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <bmp280_read_float>:

bool bmp280_read_float(BMP280 *inst, float *temperature, float *pressure)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	if (bmp280_read_fixed(inst, &fixed_temperature, &fixed_pressure))
 800202c:	f107 0210 	add.w	r2, r7, #16
 8002030:	f107 0314 	add.w	r3, r7, #20
 8002034:	4619      	mov	r1, r3
 8002036:	68f8      	ldr	r0, [r7, #12]
 8002038:	f7ff ffb1 	bl	8001f9e <bmp280_read_fixed>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d019      	beq.n	8002076 <bmp280_read_float+0x56>
	{
		*temperature = (float) fixed_temperature / 100;
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	ee07 3a90 	vmov	s15, r3
 8002048:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800204c:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8002080 <bmp280_read_float+0x60>
 8002050:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	ee07 3a90 	vmov	s15, r3
 8002060:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002064:	eddf 6a07 	vldr	s13, [pc, #28]	; 8002084 <bmp280_read_float+0x64>
 8002068:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	edc3 7a00 	vstr	s15, [r3]

		return true;
 8002072:	2301      	movs	r3, #1
 8002074:	e000      	b.n	8002078 <bmp280_read_float+0x58>
	}

	return false;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	3718      	adds	r7, #24
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	42c80000 	.word	0x42c80000
 8002084:	43800000 	.word	0x43800000

08002088 <print>:
static void setup();
static void loop();

static char printBuffer[512];
static inline void print(char* str)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
	CDC_Transmit_FS((uint8_t*) str, strlen(str));
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f7fe f89d 	bl	80001d0 <strlen>
 8002096:	4603      	mov	r3, r0
 8002098:	b29b      	uxth	r3, r3
 800209a:	4619      	mov	r1, r3
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f00c fcbd 	bl	800ea1c <CDC_Transmit_FS>
};
 80020a2:	bf00      	nop
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
	...

080020ac <println>:
static inline void println(char* str)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
	CDC_Transmit_FS((uint8_t*) str, strlen(str));
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f7fe f88b 	bl	80001d0 <strlen>
 80020ba:	4603      	mov	r3, r0
 80020bc:	b29b      	uxth	r3, r3
 80020be:	4619      	mov	r1, r3
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f00c fcab 	bl	800ea1c <CDC_Transmit_FS>
	CDC_Transmit_FS((uint8_t*) "\n\r", 2);
 80020c6:	2102      	movs	r1, #2
 80020c8:	4803      	ldr	r0, [pc, #12]	; (80020d8 <println+0x2c>)
 80020ca:	f00c fca7 	bl	800ea1c <CDC_Transmit_FS>
};
 80020ce:	bf00      	nop
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	08013740 	.word	0x08013740

080020dc <setup>:
bool nextTX;
int message;
uint8_t message_length;

void setup()
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
	HAL_Delay(500);
 80020e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80020e4:	f001 f8e0 	bl	80032a8 <HAL_Delay>

	if (bmp280_begin())
 80020e8:	f000 f8f4 	bl	80022d4 <bmp280_begin>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00f      	beq.n	8002112 <setup+0x36>
	{
		bmp280_read_float(&bmp280, &temperature, &pressure);
 80020f2:	4a1a      	ldr	r2, [pc, #104]	; (800215c <setup+0x80>)
 80020f4:	491a      	ldr	r1, [pc, #104]	; (8002160 <setup+0x84>)
 80020f6:	481b      	ldr	r0, [pc, #108]	; (8002164 <setup+0x88>)
 80020f8:	f7ff ff92 	bl	8002020 <bmp280_read_float>
		println("BMP280 init successful!");
 80020fc:	481a      	ldr	r0, [pc, #104]	; (8002168 <setup+0x8c>)
 80020fe:	f7ff ffd5 	bl	80020ac <println>
		HAL_GPIO_TogglePin(LEDA_GPIO_Port, LEDA_Pin);
 8002102:	2180      	movs	r1, #128	; 0x80
 8002104:	4819      	ldr	r0, [pc, #100]	; (800216c <setup+0x90>)
 8002106:	f001 ff6a 	bl	8003fde <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 800210a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800210e:	f001 f8cb 	bl	80032a8 <HAL_Delay>
	}

	if (radio_begin())
 8002112:	f000 f91b 	bl	800234c <radio_begin>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d00c      	beq.n	8002136 <setup+0x5a>
	{
		radio_procedure();	//starts radio loop, now radio wokrs dependend on DIO0 interrupt in ping-pong mode
 800211c:	f000 f89a 	bl	8002254 <radio_procedure>
		println("Radio init successful!");
 8002120:	4813      	ldr	r0, [pc, #76]	; (8002170 <setup+0x94>)
 8002122:	f7ff ffc3 	bl	80020ac <println>
		HAL_GPIO_TogglePin(LEDB_GPIO_Port, LEDB_Pin);
 8002126:	2140      	movs	r1, #64	; 0x40
 8002128:	4810      	ldr	r0, [pc, #64]	; (800216c <setup+0x90>)
 800212a:	f001 ff58 	bl	8003fde <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 800212e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002132:	f001 f8b9 	bl	80032a8 <HAL_Delay>
	}

	if (SD_init())
 8002136:	f7fe ff77 	bl	8001028 <SD_init>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d00b      	beq.n	8002158 <setup+0x7c>
	{
		println("SD init successful!");
 8002140:	480c      	ldr	r0, [pc, #48]	; (8002174 <setup+0x98>)
 8002142:	f7ff ffb3 	bl	80020ac <println>
		HAL_GPIO_TogglePin(LEDC_GPIO_Port, LEDC_Pin);
 8002146:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800214a:	480b      	ldr	r0, [pc, #44]	; (8002178 <setup+0x9c>)
 800214c:	f001 ff47 	bl	8003fde <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8002150:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002154:	f001 f8a8 	bl	80032a8 <HAL_Delay>
	}
}
 8002158:	bf00      	nop
 800215a:	bd80      	pop	{r7, pc}
 800215c:	200007d4 	.word	0x200007d4
 8002160:	200007cc 	.word	0x200007cc
 8002164:	20000a14 	.word	0x20000a14
 8002168:	08013744 	.word	0x08013744
 800216c:	40020800 	.word	0x40020800
 8002170:	0801375c 	.word	0x0801375c
 8002174:	08013774 	.word	0x08013774
 8002178:	40020400 	.word	0x40020400

0800217c <loop>:

void loop()
{
 800217c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800217e:	b083      	sub	sp, #12
 8002180:	af02      	add	r7, sp, #8
	if (bmp280_read_float(&bmp280, &temperature, &pressure))
 8002182:	4a29      	ldr	r2, [pc, #164]	; (8002228 <loop+0xac>)
 8002184:	4929      	ldr	r1, [pc, #164]	; (800222c <loop+0xb0>)
 8002186:	482a      	ldr	r0, [pc, #168]	; (8002230 <loop+0xb4>)
 8002188:	f7ff ff4a 	bl	8002020 <bmp280_read_float>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d018      	beq.n	80021c4 <loop+0x48>
	{
		sprintf(printBuffer, "Pressure: %.2f Pa, Temperature: %.2f C\r\n", pressure, temperature);
 8002192:	4b25      	ldr	r3, [pc, #148]	; (8002228 <loop+0xac>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f7fe f9d6 	bl	8000548 <__aeabi_f2d>
 800219c:	4605      	mov	r5, r0
 800219e:	460e      	mov	r6, r1
 80021a0:	4b22      	ldr	r3, [pc, #136]	; (800222c <loop+0xb0>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7fe f9cf 	bl	8000548 <__aeabi_f2d>
 80021aa:	4603      	mov	r3, r0
 80021ac:	460c      	mov	r4, r1
 80021ae:	e9cd 3400 	strd	r3, r4, [sp]
 80021b2:	462a      	mov	r2, r5
 80021b4:	4633      	mov	r3, r6
 80021b6:	491f      	ldr	r1, [pc, #124]	; (8002234 <loop+0xb8>)
 80021b8:	481f      	ldr	r0, [pc, #124]	; (8002238 <loop+0xbc>)
 80021ba:	f00d ffbf 	bl	801013c <siprintf>
		print(printBuffer);
 80021be:	481e      	ldr	r0, [pc, #120]	; (8002238 <loop+0xbc>)
 80021c0:	f7ff ff62 	bl	8002088 <print>
		//HAL_Delay(50);
	}
	if (radio.newPacket)
 80021c4:	4b1d      	ldr	r3, [pc, #116]	; (800223c <loop+0xc0>)
 80021c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d015      	beq.n	80021fa <loop+0x7e>
	{
		sprintf(printBuffer, "Received (%d @ %d):\t%s\r\n", radio.rxLen, radio.rssi, radio.rxBuffer);
 80021ce:	4b1b      	ldr	r3, [pc, #108]	; (800223c <loop+0xc0>)
 80021d0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80021d4:	4619      	mov	r1, r3
 80021d6:	4b19      	ldr	r3, [pc, #100]	; (800223c <loop+0xc0>)
 80021d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021da:	4b19      	ldr	r3, [pc, #100]	; (8002240 <loop+0xc4>)
 80021dc:	9300      	str	r3, [sp, #0]
 80021de:	4613      	mov	r3, r2
 80021e0:	460a      	mov	r2, r1
 80021e2:	4918      	ldr	r1, [pc, #96]	; (8002244 <loop+0xc8>)
 80021e4:	4814      	ldr	r0, [pc, #80]	; (8002238 <loop+0xbc>)
 80021e6:	f00d ffa9 	bl	801013c <siprintf>
		print(printBuffer);
 80021ea:	4813      	ldr	r0, [pc, #76]	; (8002238 <loop+0xbc>)
 80021ec:	f7ff ff4c 	bl	8002088 <print>
		radio.newPacket = false;
 80021f0:	4b12      	ldr	r3, [pc, #72]	; (800223c <loop+0xc0>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	{
		printf("Send: %s\r\n", sendBuffer);
		message += 1;
		radio.txDone = false;
	}
}
 80021f8:	e011      	b.n	800221e <loop+0xa2>
	else if (radio.txDone)
 80021fa:	4b10      	ldr	r3, [pc, #64]	; (800223c <loop+0xc0>)
 80021fc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002200:	2b00      	cmp	r3, #0
 8002202:	d00c      	beq.n	800221e <loop+0xa2>
		printf("Send: %s\r\n", sendBuffer);
 8002204:	4910      	ldr	r1, [pc, #64]	; (8002248 <loop+0xcc>)
 8002206:	4811      	ldr	r0, [pc, #68]	; (800224c <loop+0xd0>)
 8002208:	f00d ff6a 	bl	80100e0 <iprintf>
		message += 1;
 800220c:	4b10      	ldr	r3, [pc, #64]	; (8002250 <loop+0xd4>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	3301      	adds	r3, #1
 8002212:	4a0f      	ldr	r2, [pc, #60]	; (8002250 <loop+0xd4>)
 8002214:	6013      	str	r3, [r2, #0]
		radio.txDone = false;
 8002216:	4b09      	ldr	r3, [pc, #36]	; (800223c <loop+0xc0>)
 8002218:	2200      	movs	r2, #0
 800221a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 800221e:	bf00      	nop
 8002220:	3704      	adds	r7, #4
 8002222:	46bd      	mov	sp, r7
 8002224:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002226:	bf00      	nop
 8002228:	200007d4 	.word	0x200007d4
 800222c:	200007cc 	.word	0x200007cc
 8002230:	20000a14 	.word	0x20000a14
 8002234:	08013788 	.word	0x08013788
 8002238:	2000037c 	.word	0x2000037c
 800223c:	200007d8 	.word	0x200007d8
 8002240:	2000080d 	.word	0x2000080d
 8002244:	080137b4 	.word	0x080137b4
 8002248:	20000910 	.word	0x20000910
 800224c:	080137d0 	.word	0x080137d0
 8002250:	200007d0 	.word	0x200007d0

08002254 <radio_procedure>:

void radio_procedure()
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
	if (nextTX)
 8002258:	4b16      	ldr	r3, [pc, #88]	; (80022b4 <radio_procedure+0x60>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d01e      	beq.n	800229e <radio_procedure+0x4a>
	{
		memset(sendBuffer, 0x00, SX1278_MAX_PACKET);
 8002260:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002264:	2100      	movs	r1, #0
 8002266:	4814      	ldr	r0, [pc, #80]	; (80022b8 <radio_procedure+0x64>)
 8002268:	f00d f84b 	bl	800f302 <memset>
		message_length = sprintf(sendBuffer, "Hello %d", message);
 800226c:	4b13      	ldr	r3, [pc, #76]	; (80022bc <radio_procedure+0x68>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	461a      	mov	r2, r3
 8002272:	4913      	ldr	r1, [pc, #76]	; (80022c0 <radio_procedure+0x6c>)
 8002274:	4810      	ldr	r0, [pc, #64]	; (80022b8 <radio_procedure+0x64>)
 8002276:	f00d ff61 	bl	801013c <siprintf>
 800227a:	4603      	mov	r3, r0
 800227c:	b2da      	uxtb	r2, r3
 800227e:	4b11      	ldr	r3, [pc, #68]	; (80022c4 <radio_procedure+0x70>)
 8002280:	701a      	strb	r2, [r3, #0]
		SX1278_transmit(&radio, sendBuffer, message_length);
 8002282:	4b10      	ldr	r3, [pc, #64]	; (80022c4 <radio_procedure+0x70>)
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	461a      	mov	r2, r3
 8002288:	490b      	ldr	r1, [pc, #44]	; (80022b8 <radio_procedure+0x64>)
 800228a:	480f      	ldr	r0, [pc, #60]	; (80022c8 <radio_procedure+0x74>)
 800228c:	f7ff f923 	bl	80014d6 <SX1278_transmit>
		print("Sending...\n");
 8002290:	480e      	ldr	r0, [pc, #56]	; (80022cc <radio_procedure+0x78>)
 8002292:	f7ff fef9 	bl	8002088 <print>
		nextTX = false;
 8002296:	4b07      	ldr	r3, [pc, #28]	; (80022b4 <radio_procedure+0x60>)
 8002298:	2200      	movs	r2, #0
 800229a:	701a      	strb	r2, [r3, #0]
	{
		SX1278_receive(&radio);
		print("Receiving...\n");
		nextTX = true;
	}
}
 800229c:	e008      	b.n	80022b0 <radio_procedure+0x5c>
		SX1278_receive(&radio);
 800229e:	480a      	ldr	r0, [pc, #40]	; (80022c8 <radio_procedure+0x74>)
 80022a0:	f7ff f951 	bl	8001546 <SX1278_receive>
		print("Receiving...\n");
 80022a4:	480a      	ldr	r0, [pc, #40]	; (80022d0 <radio_procedure+0x7c>)
 80022a6:	f7ff feef 	bl	8002088 <print>
		nextTX = true;
 80022aa:	4b02      	ldr	r3, [pc, #8]	; (80022b4 <radio_procedure+0x60>)
 80022ac:	2201      	movs	r2, #1
 80022ae:	701a      	strb	r2, [r3, #0]
}
 80022b0:	bf00      	nop
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	20000a10 	.word	0x20000a10
 80022b8:	20000910 	.word	0x20000910
 80022bc:	200007d0 	.word	0x200007d0
 80022c0:	080137dc 	.word	0x080137dc
 80022c4:	200007c8 	.word	0x200007c8
 80022c8:	200007d8 	.word	0x200007d8
 80022cc:	080137e8 	.word	0x080137e8
 80022d0:	080137f4 	.word	0x080137f4

080022d4 <bmp280_begin>:

bool bmp280_begin()
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
	bmp280.params = bmp280_default_config;
 80022d8:	4b16      	ldr	r3, [pc, #88]	; (8002334 <bmp280_begin+0x60>)
 80022da:	4a17      	ldr	r2, [pc, #92]	; (8002338 <bmp280_begin+0x64>)
 80022dc:	3307      	adds	r3, #7
 80022de:	6810      	ldr	r0, [r2, #0]
 80022e0:	6018      	str	r0, [r3, #0]
 80022e2:	7912      	ldrb	r2, [r2, #4]
 80022e4:	711a      	strb	r2, [r3, #4]
	bmp280.addr = BMP280_I2C_ADDRESS_0;
 80022e6:	4b13      	ldr	r3, [pc, #76]	; (8002334 <bmp280_begin+0x60>)
 80022e8:	2276      	movs	r2, #118	; 0x76
 80022ea:	809a      	strh	r2, [r3, #4]
	bmp280.i2c = Get_I2C1_Instance();
 80022ec:	f000 fc1e 	bl	8002b2c <Get_I2C1_Instance>
 80022f0:	4602      	mov	r2, r0
 80022f2:	4b10      	ldr	r3, [pc, #64]	; (8002334 <bmp280_begin+0x60>)
 80022f4:	601a      	str	r2, [r3, #0]

	while (!bmp280_init(&bmp280, &bmp280.params)) {
 80022f6:	bf00      	nop
 80022f8:	4910      	ldr	r1, [pc, #64]	; (800233c <bmp280_begin+0x68>)
 80022fa:	480e      	ldr	r0, [pc, #56]	; (8002334 <bmp280_begin+0x60>)
 80022fc:	f7ff fbe9 	bl	8001ad2 <bmp280_init>
 8002300:	4603      	mov	r3, r0
 8002302:	f083 0301 	eor.w	r3, r3, #1
 8002306:	b2db      	uxtb	r3, r3
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00d      	beq.n	8002328 <bmp280_begin+0x54>
		print("BMP280 initialization failed\n");
 800230c:	480c      	ldr	r0, [pc, #48]	; (8002340 <bmp280_begin+0x6c>)
 800230e:	f7ff febb 	bl	8002088 <print>

		HAL_GPIO_TogglePin(LEDC_GPIO_Port, LEDC_Pin);
 8002312:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002316:	480b      	ldr	r0, [pc, #44]	; (8002344 <bmp280_begin+0x70>)
 8002318:	f001 fe61 	bl	8003fde <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 800231c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002320:	f000 ffc2 	bl	80032a8 <HAL_Delay>
		return false;
 8002324:	2300      	movs	r3, #0
 8002326:	e003      	b.n	8002330 <bmp280_begin+0x5c>
	}

	print("BMP280 found!\n");
 8002328:	4807      	ldr	r0, [pc, #28]	; (8002348 <bmp280_begin+0x74>)
 800232a:	f7ff fead 	bl	8002088 <print>
	return true;
 800232e:	2301      	movs	r3, #1
}
 8002330:	4618      	mov	r0, r3
 8002332:	bd80      	pop	{r7, pc}
 8002334:	20000a14 	.word	0x20000a14
 8002338:	20000000 	.word	0x20000000
 800233c:	20000a1b 	.word	0x20000a1b
 8002340:	08013804 	.word	0x08013804
 8002344:	40020400 	.word	0x40020400
 8002348:	08013824 	.word	0x08013824

0800234c <radio_begin>:


bool radio_begin()
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
	radio.reset = LR_RESET_Pin;
 8002350:	4b1d      	ldr	r3, [pc, #116]	; (80023c8 <radio_begin+0x7c>)
 8002352:	2220      	movs	r2, #32
 8002354:	81da      	strh	r2, [r3, #14]
	radio.dio0 = LR_DIO0_Pin;
 8002356:	4b1c      	ldr	r3, [pc, #112]	; (80023c8 <radio_begin+0x7c>)
 8002358:	2240      	movs	r2, #64	; 0x40
 800235a:	821a      	strh	r2, [r3, #16]
	radio.nss = LR_NSS_Pin;
 800235c:	4b1a      	ldr	r3, [pc, #104]	; (80023c8 <radio_begin+0x7c>)
 800235e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002362:	825a      	strh	r2, [r3, #18]
	radio.reset_port = LR_RESET_GPIO_Port;
 8002364:	4b18      	ldr	r3, [pc, #96]	; (80023c8 <radio_begin+0x7c>)
 8002366:	4a19      	ldr	r2, [pc, #100]	; (80023cc <radio_begin+0x80>)
 8002368:	615a      	str	r2, [r3, #20]
	radio.dio0_port = LR_DIO0_GPIO_Port;
 800236a:	4b17      	ldr	r3, [pc, #92]	; (80023c8 <radio_begin+0x7c>)
 800236c:	4a18      	ldr	r2, [pc, #96]	; (80023d0 <radio_begin+0x84>)
 800236e:	619a      	str	r2, [r3, #24]
	radio.nss_port = LR_NSS_GPIO_Port;
 8002370:	4b15      	ldr	r3, [pc, #84]	; (80023c8 <radio_begin+0x7c>)
 8002372:	4a18      	ldr	r2, [pc, #96]	; (80023d4 <radio_begin+0x88>)
 8002374:	61da      	str	r2, [r3, #28]
	radio.spi = Get_SPI1_Instance();
 8002376:	f000 fbe3 	bl	8002b40 <Get_SPI1_Instance>
 800237a:	4602      	mov	r2, r0
 800237c:	4b12      	ldr	r3, [pc, #72]	; (80023c8 <radio_begin+0x7c>)
 800237e:	621a      	str	r2, [r3, #32]

	radio.config = sx1278_default_config;
 8002380:	4b11      	ldr	r3, [pc, #68]	; (80023c8 <radio_begin+0x7c>)
 8002382:	4a15      	ldr	r2, [pc, #84]	; (80023d8 <radio_begin+0x8c>)
 8002384:	ca07      	ldmia	r2, {r0, r1, r2}
 8002386:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	radio.useDio0IRQ = true;
 800238a:	4b0f      	ldr	r3, [pc, #60]	; (80023c8 <radio_begin+0x7c>)
 800238c:	2201      	movs	r2, #1
 800238e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

	while (!SX1278_init(&radio))
 8002392:	bf00      	nop
 8002394:	480c      	ldr	r0, [pc, #48]	; (80023c8 <radio_begin+0x7c>)
 8002396:	f7fe ff8c 	bl	80012b2 <SX1278_init>
 800239a:	4603      	mov	r3, r0
 800239c:	f083 0301 	eor.w	r3, r3, #1
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d00d      	beq.n	80023c2 <radio_begin+0x76>
	{
		print("SX1278 initialization failed\n");
 80023a6:	480d      	ldr	r0, [pc, #52]	; (80023dc <radio_begin+0x90>)
 80023a8:	f7ff fe6e 	bl	8002088 <print>

		HAL_GPIO_TogglePin(LEDC_GPIO_Port, LEDC_Pin);
 80023ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023b0:	4808      	ldr	r0, [pc, #32]	; (80023d4 <radio_begin+0x88>)
 80023b2:	f001 fe14 	bl	8003fde <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 80023b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80023ba:	f000 ff75 	bl	80032a8 <HAL_Delay>

		return false;
 80023be:	2300      	movs	r3, #0
 80023c0:	e000      	b.n	80023c4 <radio_begin+0x78>
	}

	return true;
 80023c2:	2301      	movs	r3, #1
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	200007d8 	.word	0x200007d8
 80023cc:	40020800 	.word	0x40020800
 80023d0:	40020000 	.word	0x40020000
 80023d4:	40020400 	.word	0x40020400
 80023d8:	20000008 	.word	0x20000008
 80023dc:	08013834 	.word	0x08013834

080023e0 <dio0_IRQ>:

void dio0_IRQ()
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
	if (radio.pendingIRQ)
 80023e4:	4b05      	ldr	r3, [pc, #20]	; (80023fc <dio0_IRQ+0x1c>)
 80023e6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d004      	beq.n	80023f8 <dio0_IRQ+0x18>
	{
		SX1278_dio0_IRQ(&radio);
 80023ee:	4803      	ldr	r0, [pc, #12]	; (80023fc <dio0_IRQ+0x1c>)
 80023f0:	f7ff f9ec 	bl	80017cc <SX1278_dio0_IRQ>
		radio_procedure();
 80023f4:	f7ff ff2e 	bl	8002254 <radio_procedure>
	}
}
 80023f8:	bf00      	nop
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	200007d8 	.word	0x200007d8

08002400 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002404:	f000 fede 	bl	80031c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002408:	f000 f81c 	bl	8002444 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800240c:	f000 fa9a 	bl	8002944 <MX_GPIO_Init>
  MX_DMA_Init();
 8002410:	f000 fa70 	bl	80028f4 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 8002414:	f000 f920 	bl	8002658 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8002418:	f009 ff32 	bl	800c280 <MX_FATFS_Init>
  MX_I2C1_Init();
 800241c:	f000 f894 	bl	8002548 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8002420:	f00c fa3e 	bl	800e8a0 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8002424:	f000 f938 	bl	8002698 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8002428:	f000 fa3a 	bl	80028a0 <MX_USART3_UART_Init>
  MX_RTC_Init();
 800242c:	f000 f8ba 	bl	80025a4 <MX_RTC_Init>
  MX_TIM3_Init();
 8002430:	f000 f9e8 	bl	8002804 <MX_TIM3_Init>
  MX_TIM2_Init();
 8002434:	f000 f966 	bl	8002704 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  setup();
 8002438:	f7ff fe50 	bl	80020dc <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	loop();
 800243c:	f7ff fe9e 	bl	800217c <loop>
 8002440:	e7fc      	b.n	800243c <main+0x3c>
	...

08002444 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b098      	sub	sp, #96	; 0x60
 8002448:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800244a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800244e:	2230      	movs	r2, #48	; 0x30
 8002450:	2100      	movs	r1, #0
 8002452:	4618      	mov	r0, r3
 8002454:	f00c ff55 	bl	800f302 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002458:	f107 031c 	add.w	r3, r7, #28
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	605a      	str	r2, [r3, #4]
 8002462:	609a      	str	r2, [r3, #8]
 8002464:	60da      	str	r2, [r3, #12]
 8002466:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002468:	f107 030c 	add.w	r3, r7, #12
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	605a      	str	r2, [r3, #4]
 8002472:	609a      	str	r2, [r3, #8]
 8002474:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002476:	2300      	movs	r3, #0
 8002478:	60bb      	str	r3, [r7, #8]
 800247a:	4b31      	ldr	r3, [pc, #196]	; (8002540 <SystemClock_Config+0xfc>)
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	4a30      	ldr	r2, [pc, #192]	; (8002540 <SystemClock_Config+0xfc>)
 8002480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002484:	6413      	str	r3, [r2, #64]	; 0x40
 8002486:	4b2e      	ldr	r3, [pc, #184]	; (8002540 <SystemClock_Config+0xfc>)
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248e:	60bb      	str	r3, [r7, #8]
 8002490:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002492:	2300      	movs	r3, #0
 8002494:	607b      	str	r3, [r7, #4]
 8002496:	4b2b      	ldr	r3, [pc, #172]	; (8002544 <SystemClock_Config+0x100>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a2a      	ldr	r2, [pc, #168]	; (8002544 <SystemClock_Config+0x100>)
 800249c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024a0:	6013      	str	r3, [r2, #0]
 80024a2:	4b28      	ldr	r3, [pc, #160]	; (8002544 <SystemClock_Config+0x100>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024aa:	607b      	str	r3, [r7, #4]
 80024ac:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80024ae:	2305      	movs	r3, #5
 80024b0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80024b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80024b8:	2301      	movs	r3, #1
 80024ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024bc:	2302      	movs	r3, #2
 80024be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80024c0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80024c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80024c6:	2306      	movs	r3, #6
 80024c8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 80024ca:	23a8      	movs	r3, #168	; 0xa8
 80024cc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80024ce:	2302      	movs	r3, #2
 80024d0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80024d2:	2307      	movs	r3, #7
 80024d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80024da:	4618      	mov	r0, r3
 80024dc:	f003 feec 	bl	80062b8 <HAL_RCC_OscConfig>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80024e6:	f000 fb43 	bl	8002b70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024ea:	230f      	movs	r3, #15
 80024ec:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024ee:	2302      	movs	r3, #2
 80024f0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024f2:	2300      	movs	r3, #0
 80024f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80024f6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80024fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80024fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002500:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002502:	f107 031c 	add.w	r3, r7, #28
 8002506:	2105      	movs	r1, #5
 8002508:	4618      	mov	r0, r3
 800250a:	f004 f945 	bl	8006798 <HAL_RCC_ClockConfig>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002514:	f000 fb2c 	bl	8002b70 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002518:	2302      	movs	r3, #2
 800251a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800251c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002520:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002522:	f107 030c 	add.w	r3, r7, #12
 8002526:	4618      	mov	r0, r3
 8002528:	f004 fb02 	bl	8006b30 <HAL_RCCEx_PeriphCLKConfig>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8002532:	f000 fb1d 	bl	8002b70 <Error_Handler>
  }
}
 8002536:	bf00      	nop
 8002538:	3760      	adds	r7, #96	; 0x60
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40023800 	.word	0x40023800
 8002544:	40007000 	.word	0x40007000

08002548 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800254c:	4b12      	ldr	r3, [pc, #72]	; (8002598 <MX_I2C1_Init+0x50>)
 800254e:	4a13      	ldr	r2, [pc, #76]	; (800259c <MX_I2C1_Init+0x54>)
 8002550:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002552:	4b11      	ldr	r3, [pc, #68]	; (8002598 <MX_I2C1_Init+0x50>)
 8002554:	4a12      	ldr	r2, [pc, #72]	; (80025a0 <MX_I2C1_Init+0x58>)
 8002556:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002558:	4b0f      	ldr	r3, [pc, #60]	; (8002598 <MX_I2C1_Init+0x50>)
 800255a:	2200      	movs	r2, #0
 800255c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800255e:	4b0e      	ldr	r3, [pc, #56]	; (8002598 <MX_I2C1_Init+0x50>)
 8002560:	2200      	movs	r2, #0
 8002562:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002564:	4b0c      	ldr	r3, [pc, #48]	; (8002598 <MX_I2C1_Init+0x50>)
 8002566:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800256a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800256c:	4b0a      	ldr	r3, [pc, #40]	; (8002598 <MX_I2C1_Init+0x50>)
 800256e:	2200      	movs	r2, #0
 8002570:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002572:	4b09      	ldr	r3, [pc, #36]	; (8002598 <MX_I2C1_Init+0x50>)
 8002574:	2200      	movs	r2, #0
 8002576:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002578:	4b07      	ldr	r3, [pc, #28]	; (8002598 <MX_I2C1_Init+0x50>)
 800257a:	2200      	movs	r2, #0
 800257c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800257e:	4b06      	ldr	r3, [pc, #24]	; (8002598 <MX_I2C1_Init+0x50>)
 8002580:	2200      	movs	r2, #0
 8002582:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002584:	4804      	ldr	r0, [pc, #16]	; (8002598 <MX_I2C1_Init+0x50>)
 8002586:	f001 fd5d 	bl	8004044 <HAL_I2C_Init>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002590:	f000 faee 	bl	8002b70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002594:	bf00      	nop
 8002596:	bd80      	pop	{r7, pc}
 8002598:	20000ad8 	.word	0x20000ad8
 800259c:	40005400 	.word	0x40005400
 80025a0:	000186a0 	.word	0x000186a0

080025a4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80025aa:	1d3b      	adds	r3, r7, #4
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	605a      	str	r2, [r3, #4]
 80025b2:	609a      	str	r2, [r3, #8]
 80025b4:	60da      	str	r2, [r3, #12]
 80025b6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80025b8:	2300      	movs	r3, #0
 80025ba:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80025bc:	4b24      	ldr	r3, [pc, #144]	; (8002650 <MX_RTC_Init+0xac>)
 80025be:	4a25      	ldr	r2, [pc, #148]	; (8002654 <MX_RTC_Init+0xb0>)
 80025c0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80025c2:	4b23      	ldr	r3, [pc, #140]	; (8002650 <MX_RTC_Init+0xac>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80025c8:	4b21      	ldr	r3, [pc, #132]	; (8002650 <MX_RTC_Init+0xac>)
 80025ca:	227f      	movs	r2, #127	; 0x7f
 80025cc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80025ce:	4b20      	ldr	r3, [pc, #128]	; (8002650 <MX_RTC_Init+0xac>)
 80025d0:	22ff      	movs	r2, #255	; 0xff
 80025d2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80025d4:	4b1e      	ldr	r3, [pc, #120]	; (8002650 <MX_RTC_Init+0xac>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80025da:	4b1d      	ldr	r3, [pc, #116]	; (8002650 <MX_RTC_Init+0xac>)
 80025dc:	2200      	movs	r2, #0
 80025de:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80025e0:	4b1b      	ldr	r3, [pc, #108]	; (8002650 <MX_RTC_Init+0xac>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80025e6:	481a      	ldr	r0, [pc, #104]	; (8002650 <MX_RTC_Init+0xac>)
 80025e8:	f004 fb84 	bl	8006cf4 <HAL_RTC_Init>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80025f2:	f000 fabd 	bl	8002b70 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 80025f6:	2300      	movs	r3, #0
 80025f8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80025fa:	2300      	movs	r3, #0
 80025fc:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80025fe:	2300      	movs	r3, #0
 8002600:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002602:	2300      	movs	r3, #0
 8002604:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002606:	2300      	movs	r3, #0
 8002608:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800260a:	1d3b      	adds	r3, r7, #4
 800260c:	2201      	movs	r2, #1
 800260e:	4619      	mov	r1, r3
 8002610:	480f      	ldr	r0, [pc, #60]	; (8002650 <MX_RTC_Init+0xac>)
 8002612:	f004 fc00 	bl	8006e16 <HAL_RTC_SetTime>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 800261c:	f000 faa8 	bl	8002b70 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002620:	2301      	movs	r3, #1
 8002622:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002624:	2301      	movs	r3, #1
 8002626:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8002628:	2301      	movs	r3, #1
 800262a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x20;
 800262c:	2320      	movs	r3, #32
 800262e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002630:	463b      	mov	r3, r7
 8002632:	2201      	movs	r2, #1
 8002634:	4619      	mov	r1, r3
 8002636:	4806      	ldr	r0, [pc, #24]	; (8002650 <MX_RTC_Init+0xac>)
 8002638:	f004 fcaa 	bl	8006f90 <HAL_RTC_SetDate>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8002642:	f000 fa95 	bl	8002b70 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002646:	bf00      	nop
 8002648:	3718      	adds	r7, #24
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	20000b6c 	.word	0x20000b6c
 8002654:	40002800 	.word	0x40002800

08002658 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800265c:	4b0c      	ldr	r3, [pc, #48]	; (8002690 <MX_SDIO_SD_Init+0x38>)
 800265e:	4a0d      	ldr	r2, [pc, #52]	; (8002694 <MX_SDIO_SD_Init+0x3c>)
 8002660:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002662:	4b0b      	ldr	r3, [pc, #44]	; (8002690 <MX_SDIO_SD_Init+0x38>)
 8002664:	2200      	movs	r2, #0
 8002666:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002668:	4b09      	ldr	r3, [pc, #36]	; (8002690 <MX_SDIO_SD_Init+0x38>)
 800266a:	2200      	movs	r2, #0
 800266c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800266e:	4b08      	ldr	r3, [pc, #32]	; (8002690 <MX_SDIO_SD_Init+0x38>)
 8002670:	2200      	movs	r2, #0
 8002672:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8002674:	4b06      	ldr	r3, [pc, #24]	; (8002690 <MX_SDIO_SD_Init+0x38>)
 8002676:	2200      	movs	r2, #0
 8002678:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800267a:	4b05      	ldr	r3, [pc, #20]	; (8002690 <MX_SDIO_SD_Init+0x38>)
 800267c:	2200      	movs	r2, #0
 800267e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8002680:	4b03      	ldr	r3, [pc, #12]	; (8002690 <MX_SDIO_SD_Init+0x38>)
 8002682:	2200      	movs	r2, #0
 8002684:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8002686:	bf00      	nop
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	20000bec 	.word	0x20000bec
 8002694:	40012c00 	.word	0x40012c00

08002698 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800269c:	4b17      	ldr	r3, [pc, #92]	; (80026fc <MX_SPI1_Init+0x64>)
 800269e:	4a18      	ldr	r2, [pc, #96]	; (8002700 <MX_SPI1_Init+0x68>)
 80026a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80026a2:	4b16      	ldr	r3, [pc, #88]	; (80026fc <MX_SPI1_Init+0x64>)
 80026a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80026a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80026aa:	4b14      	ldr	r3, [pc, #80]	; (80026fc <MX_SPI1_Init+0x64>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80026b0:	4b12      	ldr	r3, [pc, #72]	; (80026fc <MX_SPI1_Init+0x64>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80026b6:	4b11      	ldr	r3, [pc, #68]	; (80026fc <MX_SPI1_Init+0x64>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80026bc:	4b0f      	ldr	r3, [pc, #60]	; (80026fc <MX_SPI1_Init+0x64>)
 80026be:	2200      	movs	r2, #0
 80026c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80026c2:	4b0e      	ldr	r3, [pc, #56]	; (80026fc <MX_SPI1_Init+0x64>)
 80026c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026ca:	4b0c      	ldr	r3, [pc, #48]	; (80026fc <MX_SPI1_Init+0x64>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80026d0:	4b0a      	ldr	r3, [pc, #40]	; (80026fc <MX_SPI1_Init+0x64>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80026d6:	4b09      	ldr	r3, [pc, #36]	; (80026fc <MX_SPI1_Init+0x64>)
 80026d8:	2200      	movs	r2, #0
 80026da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026dc:	4b07      	ldr	r3, [pc, #28]	; (80026fc <MX_SPI1_Init+0x64>)
 80026de:	2200      	movs	r2, #0
 80026e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80026e2:	4b06      	ldr	r3, [pc, #24]	; (80026fc <MX_SPI1_Init+0x64>)
 80026e4:	220a      	movs	r2, #10
 80026e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80026e8:	4804      	ldr	r0, [pc, #16]	; (80026fc <MX_SPI1_Init+0x64>)
 80026ea:	f006 f887 	bl	80087fc <HAL_SPI_Init>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80026f4:	f000 fa3c 	bl	8002b70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80026f8:	bf00      	nop
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	20000c70 	.word	0x20000c70
 8002700:	40013000 	.word	0x40013000

08002704 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b08e      	sub	sp, #56	; 0x38
 8002708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800270a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800270e:	2200      	movs	r2, #0
 8002710:	601a      	str	r2, [r3, #0]
 8002712:	605a      	str	r2, [r3, #4]
 8002714:	609a      	str	r2, [r3, #8]
 8002716:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002718:	f107 0320 	add.w	r3, r7, #32
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002722:	1d3b      	adds	r3, r7, #4
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]
 8002728:	605a      	str	r2, [r3, #4]
 800272a:	609a      	str	r2, [r3, #8]
 800272c:	60da      	str	r2, [r3, #12]
 800272e:	611a      	str	r2, [r3, #16]
 8002730:	615a      	str	r2, [r3, #20]
 8002732:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002734:	4b32      	ldr	r3, [pc, #200]	; (8002800 <MX_TIM2_Init+0xfc>)
 8002736:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800273a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41999;
 800273c:	4b30      	ldr	r3, [pc, #192]	; (8002800 <MX_TIM2_Init+0xfc>)
 800273e:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8002742:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002744:	4b2e      	ldr	r3, [pc, #184]	; (8002800 <MX_TIM2_Init+0xfc>)
 8002746:	2200      	movs	r2, #0
 8002748:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 800274a:	4b2d      	ldr	r3, [pc, #180]	; (8002800 <MX_TIM2_Init+0xfc>)
 800274c:	2200      	movs	r2, #0
 800274e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002750:	4b2b      	ldr	r3, [pc, #172]	; (8002800 <MX_TIM2_Init+0xfc>)
 8002752:	2200      	movs	r2, #0
 8002754:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002756:	4b2a      	ldr	r3, [pc, #168]	; (8002800 <MX_TIM2_Init+0xfc>)
 8002758:	2200      	movs	r2, #0
 800275a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800275c:	4828      	ldr	r0, [pc, #160]	; (8002800 <MX_TIM2_Init+0xfc>)
 800275e:	f006 fc41 	bl	8008fe4 <HAL_TIM_Base_Init>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002768:	f000 fa02 	bl	8002b70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800276c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002770:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002772:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002776:	4619      	mov	r1, r3
 8002778:	4821      	ldr	r0, [pc, #132]	; (8002800 <MX_TIM2_Init+0xfc>)
 800277a:	f006 fd59 	bl	8009230 <HAL_TIM_ConfigClockSource>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002784:	f000 f9f4 	bl	8002b70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002788:	481d      	ldr	r0, [pc, #116]	; (8002800 <MX_TIM2_Init+0xfc>)
 800278a:	f006 fc56 	bl	800903a <HAL_TIM_PWM_Init>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002794:	f000 f9ec 	bl	8002b70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002798:	2300      	movs	r3, #0
 800279a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800279c:	2300      	movs	r3, #0
 800279e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80027a0:	f107 0320 	add.w	r3, r7, #32
 80027a4:	4619      	mov	r1, r3
 80027a6:	4816      	ldr	r0, [pc, #88]	; (8002800 <MX_TIM2_Init+0xfc>)
 80027a8:	f007 f8e4 	bl	8009974 <HAL_TIMEx_MasterConfigSynchronization>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80027b2:	f000 f9dd 	bl	8002b70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027b6:	2360      	movs	r3, #96	; 0x60
 80027b8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80027ba:	2300      	movs	r3, #0
 80027bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027be:	2300      	movs	r3, #0
 80027c0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027c2:	2300      	movs	r3, #0
 80027c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80027c6:	1d3b      	adds	r3, r7, #4
 80027c8:	2204      	movs	r2, #4
 80027ca:	4619      	mov	r1, r3
 80027cc:	480c      	ldr	r0, [pc, #48]	; (8002800 <MX_TIM2_Init+0xfc>)
 80027ce:	f006 fc69 	bl	80090a4 <HAL_TIM_PWM_ConfigChannel>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80027d8:	f000 f9ca 	bl	8002b70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80027dc:	1d3b      	adds	r3, r7, #4
 80027de:	220c      	movs	r2, #12
 80027e0:	4619      	mov	r1, r3
 80027e2:	4807      	ldr	r0, [pc, #28]	; (8002800 <MX_TIM2_Init+0xfc>)
 80027e4:	f006 fc5e 	bl	80090a4 <HAL_TIM_PWM_ConfigChannel>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80027ee:	f000 f9bf 	bl	8002b70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80027f2:	4803      	ldr	r0, [pc, #12]	; (8002800 <MX_TIM2_Init+0xfc>)
 80027f4:	f000 fbc8 	bl	8002f88 <HAL_TIM_MspPostInit>

}
 80027f8:	bf00      	nop
 80027fa:	3738      	adds	r7, #56	; 0x38
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	20000cc8 	.word	0x20000cc8

08002804 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800280a:	f107 0308 	add.w	r3, r7, #8
 800280e:	2200      	movs	r2, #0
 8002810:	601a      	str	r2, [r3, #0]
 8002812:	605a      	str	r2, [r3, #4]
 8002814:	609a      	str	r2, [r3, #8]
 8002816:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002818:	463b      	mov	r3, r7
 800281a:	2200      	movs	r2, #0
 800281c:	601a      	str	r2, [r3, #0]
 800281e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002820:	4b1d      	ldr	r3, [pc, #116]	; (8002898 <MX_TIM3_Init+0x94>)
 8002822:	4a1e      	ldr	r2, [pc, #120]	; (800289c <MX_TIM3_Init+0x98>)
 8002824:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 41999;
 8002826:	4b1c      	ldr	r3, [pc, #112]	; (8002898 <MX_TIM3_Init+0x94>)
 8002828:	f24a 420f 	movw	r2, #41999	; 0xa40f
 800282c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800282e:	4b1a      	ldr	r3, [pc, #104]	; (8002898 <MX_TIM3_Init+0x94>)
 8002830:	2200      	movs	r2, #0
 8002832:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8002834:	4b18      	ldr	r3, [pc, #96]	; (8002898 <MX_TIM3_Init+0x94>)
 8002836:	2200      	movs	r2, #0
 8002838:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800283a:	4b17      	ldr	r3, [pc, #92]	; (8002898 <MX_TIM3_Init+0x94>)
 800283c:	2200      	movs	r2, #0
 800283e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002840:	4b15      	ldr	r3, [pc, #84]	; (8002898 <MX_TIM3_Init+0x94>)
 8002842:	2200      	movs	r2, #0
 8002844:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002846:	4814      	ldr	r0, [pc, #80]	; (8002898 <MX_TIM3_Init+0x94>)
 8002848:	f006 fbcc 	bl	8008fe4 <HAL_TIM_Base_Init>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002852:	f000 f98d 	bl	8002b70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002856:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800285a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800285c:	f107 0308 	add.w	r3, r7, #8
 8002860:	4619      	mov	r1, r3
 8002862:	480d      	ldr	r0, [pc, #52]	; (8002898 <MX_TIM3_Init+0x94>)
 8002864:	f006 fce4 	bl	8009230 <HAL_TIM_ConfigClockSource>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800286e:	f000 f97f 	bl	8002b70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002872:	2300      	movs	r3, #0
 8002874:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002876:	2300      	movs	r3, #0
 8002878:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800287a:	463b      	mov	r3, r7
 800287c:	4619      	mov	r1, r3
 800287e:	4806      	ldr	r0, [pc, #24]	; (8002898 <MX_TIM3_Init+0x94>)
 8002880:	f007 f878 	bl	8009974 <HAL_TIMEx_MasterConfigSynchronization>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800288a:	f000 f971 	bl	8002b70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800288e:	bf00      	nop
 8002890:	3718      	adds	r7, #24
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	20000b2c 	.word	0x20000b2c
 800289c:	40000400 	.word	0x40000400

080028a0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80028a4:	4b11      	ldr	r3, [pc, #68]	; (80028ec <MX_USART3_UART_Init+0x4c>)
 80028a6:	4a12      	ldr	r2, [pc, #72]	; (80028f0 <MX_USART3_UART_Init+0x50>)
 80028a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80028aa:	4b10      	ldr	r3, [pc, #64]	; (80028ec <MX_USART3_UART_Init+0x4c>)
 80028ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80028b2:	4b0e      	ldr	r3, [pc, #56]	; (80028ec <MX_USART3_UART_Init+0x4c>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80028b8:	4b0c      	ldr	r3, [pc, #48]	; (80028ec <MX_USART3_UART_Init+0x4c>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80028be:	4b0b      	ldr	r3, [pc, #44]	; (80028ec <MX_USART3_UART_Init+0x4c>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80028c4:	4b09      	ldr	r3, [pc, #36]	; (80028ec <MX_USART3_UART_Init+0x4c>)
 80028c6:	220c      	movs	r2, #12
 80028c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028ca:	4b08      	ldr	r3, [pc, #32]	; (80028ec <MX_USART3_UART_Init+0x4c>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80028d0:	4b06      	ldr	r3, [pc, #24]	; (80028ec <MX_USART3_UART_Init+0x4c>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80028d6:	4805      	ldr	r0, [pc, #20]	; (80028ec <MX_USART3_UART_Init+0x4c>)
 80028d8:	f007 f8c8 	bl	8009a6c <HAL_UART_Init>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80028e2:	f000 f945 	bl	8002b70 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80028e6:	bf00      	nop
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	20000a98 	.word	0x20000a98
 80028f0:	40004800 	.word	0x40004800

080028f4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80028fa:	2300      	movs	r3, #0
 80028fc:	607b      	str	r3, [r7, #4]
 80028fe:	4b10      	ldr	r3, [pc, #64]	; (8002940 <MX_DMA_Init+0x4c>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002902:	4a0f      	ldr	r2, [pc, #60]	; (8002940 <MX_DMA_Init+0x4c>)
 8002904:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002908:	6313      	str	r3, [r2, #48]	; 0x30
 800290a:	4b0d      	ldr	r3, [pc, #52]	; (8002940 <MX_DMA_Init+0x4c>)
 800290c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002912:	607b      	str	r3, [r7, #4]
 8002914:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8002916:	2200      	movs	r2, #0
 8002918:	2100      	movs	r1, #0
 800291a:	203b      	movs	r0, #59	; 0x3b
 800291c:	f000 fdc1 	bl	80034a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002920:	203b      	movs	r0, #59	; 0x3b
 8002922:	f000 fdda 	bl	80034da <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8002926:	2200      	movs	r2, #0
 8002928:	2100      	movs	r1, #0
 800292a:	2045      	movs	r0, #69	; 0x45
 800292c:	f000 fdb9 	bl	80034a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002930:	2045      	movs	r0, #69	; 0x45
 8002932:	f000 fdd2 	bl	80034da <HAL_NVIC_EnableIRQ>

}
 8002936:	bf00      	nop
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	40023800 	.word	0x40023800

08002944 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b08a      	sub	sp, #40	; 0x28
 8002948:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800294a:	f107 0314 	add.w	r3, r7, #20
 800294e:	2200      	movs	r2, #0
 8002950:	601a      	str	r2, [r3, #0]
 8002952:	605a      	str	r2, [r3, #4]
 8002954:	609a      	str	r2, [r3, #8]
 8002956:	60da      	str	r2, [r3, #12]
 8002958:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800295a:	2300      	movs	r3, #0
 800295c:	613b      	str	r3, [r7, #16]
 800295e:	4b6e      	ldr	r3, [pc, #440]	; (8002b18 <MX_GPIO_Init+0x1d4>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	4a6d      	ldr	r2, [pc, #436]	; (8002b18 <MX_GPIO_Init+0x1d4>)
 8002964:	f043 0304 	orr.w	r3, r3, #4
 8002968:	6313      	str	r3, [r2, #48]	; 0x30
 800296a:	4b6b      	ldr	r3, [pc, #428]	; (8002b18 <MX_GPIO_Init+0x1d4>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296e:	f003 0304 	and.w	r3, r3, #4
 8002972:	613b      	str	r3, [r7, #16]
 8002974:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002976:	2300      	movs	r3, #0
 8002978:	60fb      	str	r3, [r7, #12]
 800297a:	4b67      	ldr	r3, [pc, #412]	; (8002b18 <MX_GPIO_Init+0x1d4>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	4a66      	ldr	r2, [pc, #408]	; (8002b18 <MX_GPIO_Init+0x1d4>)
 8002980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002984:	6313      	str	r3, [r2, #48]	; 0x30
 8002986:	4b64      	ldr	r3, [pc, #400]	; (8002b18 <MX_GPIO_Init+0x1d4>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800298e:	60fb      	str	r3, [r7, #12]
 8002990:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002992:	2300      	movs	r3, #0
 8002994:	60bb      	str	r3, [r7, #8]
 8002996:	4b60      	ldr	r3, [pc, #384]	; (8002b18 <MX_GPIO_Init+0x1d4>)
 8002998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299a:	4a5f      	ldr	r2, [pc, #380]	; (8002b18 <MX_GPIO_Init+0x1d4>)
 800299c:	f043 0301 	orr.w	r3, r3, #1
 80029a0:	6313      	str	r3, [r2, #48]	; 0x30
 80029a2:	4b5d      	ldr	r3, [pc, #372]	; (8002b18 <MX_GPIO_Init+0x1d4>)
 80029a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	60bb      	str	r3, [r7, #8]
 80029ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ae:	2300      	movs	r3, #0
 80029b0:	607b      	str	r3, [r7, #4]
 80029b2:	4b59      	ldr	r3, [pc, #356]	; (8002b18 <MX_GPIO_Init+0x1d4>)
 80029b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b6:	4a58      	ldr	r2, [pc, #352]	; (8002b18 <MX_GPIO_Init+0x1d4>)
 80029b8:	f043 0302 	orr.w	r3, r3, #2
 80029bc:	6313      	str	r3, [r2, #48]	; 0x30
 80029be:	4b56      	ldr	r3, [pc, #344]	; (8002b18 <MX_GPIO_Init+0x1d4>)
 80029c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	607b      	str	r3, [r7, #4]
 80029c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80029ca:	2300      	movs	r3, #0
 80029cc:	603b      	str	r3, [r7, #0]
 80029ce:	4b52      	ldr	r3, [pc, #328]	; (8002b18 <MX_GPIO_Init+0x1d4>)
 80029d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d2:	4a51      	ldr	r2, [pc, #324]	; (8002b18 <MX_GPIO_Init+0x1d4>)
 80029d4:	f043 0308 	orr.w	r3, r3, #8
 80029d8:	6313      	str	r3, [r2, #48]	; 0x30
 80029da:	4b4f      	ldr	r3, [pc, #316]	; (8002b18 <MX_GPIO_Init+0x1d4>)
 80029dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029de:	f003 0308 	and.w	r3, r3, #8
 80029e2:	603b      	str	r3, [r7, #0]
 80029e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, P1_Pin|P4_Pin|P2_Pin|P5_Pin 
 80029e6:	2200      	movs	r2, #0
 80029e8:	21ef      	movs	r1, #239	; 0xef
 80029ea:	484c      	ldr	r0, [pc, #304]	; (8002b1c <MX_GPIO_Init+0x1d8>)
 80029ec:	f001 fade 	bl	8003fac <HAL_GPIO_WritePin>
                          |LR_RESET_Pin|LEDB_Pin|LEDA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PH_L_Pin|PH_R_Pin|P7_Pin, GPIO_PIN_RESET);
 80029f0:	2200      	movs	r2, #0
 80029f2:	2115      	movs	r1, #21
 80029f4:	484a      	ldr	r0, [pc, #296]	; (8002b20 <MX_GPIO_Init+0x1dc>)
 80029f6:	f001 fad9 	bl	8003fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, P6_Pin|P3_Pin|LEDD_Pin|LEDC_Pin 
 80029fa:	2200      	movs	r2, #0
 80029fc:	f243 2103 	movw	r1, #12803	; 0x3203
 8002a00:	4848      	ldr	r0, [pc, #288]	; (8002b24 <MX_GPIO_Init+0x1e0>)
 8002a02:	f001 fad3 	bl	8003fac <HAL_GPIO_WritePin>
                          |LR_NSS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : P1_Pin P4_Pin P2_Pin P5_Pin 
                           LR_RESET_Pin */
  GPIO_InitStruct.Pin = P1_Pin|P4_Pin|P2_Pin|P5_Pin 
 8002a06:	232f      	movs	r3, #47	; 0x2f
 8002a08:	617b      	str	r3, [r7, #20]
                          |LR_RESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a12:	2300      	movs	r3, #0
 8002a14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a16:	f107 0314 	add.w	r3, r7, #20
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	483f      	ldr	r0, [pc, #252]	; (8002b1c <MX_GPIO_Init+0x1d8>)
 8002a1e:	f001 f913 	bl	8003c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH_L_Pin PH_R_Pin */
  GPIO_InitStruct.Pin = PH_L_Pin|PH_R_Pin;
 8002a22:	2305      	movs	r3, #5
 8002a24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a26:	2301      	movs	r3, #1
 8002a28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a32:	f107 0314 	add.w	r3, r7, #20
 8002a36:	4619      	mov	r1, r3
 8002a38:	4839      	ldr	r0, [pc, #228]	; (8002b20 <MX_GPIO_Init+0x1dc>)
 8002a3a:	f001 f905 	bl	8003c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : P7_Pin */
  GPIO_InitStruct.Pin = P7_Pin;
 8002a3e:	2310      	movs	r3, #16
 8002a40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a42:	2301      	movs	r3, #1
 8002a44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a46:	2300      	movs	r3, #0
 8002a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(P7_GPIO_Port, &GPIO_InitStruct);
 8002a4e:	f107 0314 	add.w	r3, r7, #20
 8002a52:	4619      	mov	r1, r3
 8002a54:	4832      	ldr	r0, [pc, #200]	; (8002b20 <MX_GPIO_Init+0x1dc>)
 8002a56:	f001 f8f7 	bl	8003c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LR_DIO0_Pin */
  GPIO_InitStruct.Pin = LR_DIO0_Pin;
 8002a5a:	2340      	movs	r3, #64	; 0x40
 8002a5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a5e:	4b32      	ldr	r3, [pc, #200]	; (8002b28 <MX_GPIO_Init+0x1e4>)
 8002a60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a62:	2302      	movs	r3, #2
 8002a64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LR_DIO0_GPIO_Port, &GPIO_InitStruct);
 8002a66:	f107 0314 	add.w	r3, r7, #20
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	482c      	ldr	r0, [pc, #176]	; (8002b20 <MX_GPIO_Init+0x1dc>)
 8002a6e:	f001 f8eb 	bl	8003c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : P6_Pin P3_Pin LR_NSS_Pin */
  GPIO_InitStruct.Pin = P6_Pin|P3_Pin|LR_NSS_Pin;
 8002a72:	f240 2303 	movw	r3, #515	; 0x203
 8002a76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a80:	2300      	movs	r3, #0
 8002a82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a84:	f107 0314 	add.w	r3, r7, #20
 8002a88:	4619      	mov	r1, r3
 8002a8a:	4826      	ldr	r0, [pc, #152]	; (8002b24 <MX_GPIO_Init+0x1e0>)
 8002a8c:	f001 f8dc 	bl	8003c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDD_Pin LEDC_Pin */
  GPIO_InitStruct.Pin = LEDD_Pin|LEDC_Pin;
 8002a90:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002a94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a96:	2301      	movs	r3, #1
 8002a98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aa2:	f107 0314 	add.w	r3, r7, #20
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	481e      	ldr	r0, [pc, #120]	; (8002b24 <MX_GPIO_Init+0x1e0>)
 8002aaa:	f001 f8cd 	bl	8003c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDB_Pin LEDA_Pin */
  GPIO_InitStruct.Pin = LEDB_Pin|LEDA_Pin;
 8002aae:	23c0      	movs	r3, #192	; 0xc0
 8002ab0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aba:	2300      	movs	r3, #0
 8002abc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002abe:	f107 0314 	add.w	r3, r7, #20
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	4815      	ldr	r0, [pc, #84]	; (8002b1c <MX_GPIO_Init+0x1d8>)
 8002ac6:	f001 f8bf 	bl	8003c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_SW_Pin */
  GPIO_InitStruct.Pin = SDIO_SW_Pin;
 8002aca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ace:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDIO_SW_GPIO_Port, &GPIO_InitStruct);
 8002ad8:	f107 0314 	add.w	r3, r7, #20
 8002adc:	4619      	mov	r1, r3
 8002ade:	4810      	ldr	r0, [pc, #64]	; (8002b20 <MX_GPIO_Init+0x1dc>)
 8002ae0:	f001 f8b2 	bl	8003c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_USR_Pin */
  GPIO_InitStruct.Pin = BTN_USR_Pin;
 8002ae4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ae8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002aea:	2300      	movs	r3, #0
 8002aec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002aee:	2301      	movs	r3, #1
 8002af0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_USR_GPIO_Port, &GPIO_InitStruct);
 8002af2:	f107 0314 	add.w	r3, r7, #20
 8002af6:	4619      	mov	r1, r3
 8002af8:	4809      	ldr	r0, [pc, #36]	; (8002b20 <MX_GPIO_Init+0x1dc>)
 8002afa:	f001 f8a5 	bl	8003c48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002afe:	2200      	movs	r2, #0
 8002b00:	2100      	movs	r1, #0
 8002b02:	2017      	movs	r0, #23
 8002b04:	f000 fccd 	bl	80034a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002b08:	2017      	movs	r0, #23
 8002b0a:	f000 fce6 	bl	80034da <HAL_NVIC_EnableIRQ>

}
 8002b0e:	bf00      	nop
 8002b10:	3728      	adds	r7, #40	; 0x28
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	40020800 	.word	0x40020800
 8002b20:	40020000 	.word	0x40020000
 8002b24:	40020400 	.word	0x40020400
 8002b28:	10110000 	.word	0x10110000

08002b2c <Get_I2C1_Instance>:

/* USER CODE BEGIN 4 */

I2C_HandleTypeDef* Get_I2C1_Instance() { return &hi2c1; }
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	4b02      	ldr	r3, [pc, #8]	; (8002b3c <Get_I2C1_Instance+0x10>)
 8002b32:	4618      	mov	r0, r3
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	20000ad8 	.word	0x20000ad8

08002b40 <Get_SPI1_Instance>:
SPI_HandleTypeDef* Get_SPI1_Instance() { return &hspi1; }
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	4b02      	ldr	r3, [pc, #8]	; (8002b50 <Get_SPI1_Instance+0x10>)
 8002b46:	4618      	mov	r0, r3
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	20000c70 	.word	0x20000c70

08002b54 <HAL_GPIO_EXTI_Callback>:
RTC_HandleTypeDef* Get_RTC_Instance() { return &hrtc; }
TIM_HandleTypeDef* Get_TIM2_Instance() { return &htim2; }

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	80fb      	strh	r3, [r7, #6]
	//DIO0 Interrupt function
	if (GPIO_Pin == LR_DIO0_Pin)
 8002b5e:	88fb      	ldrh	r3, [r7, #6]
 8002b60:	2b40      	cmp	r3, #64	; 0x40
 8002b62:	d101      	bne.n	8002b68 <HAL_GPIO_EXTI_Callback+0x14>
	{
		dio0_IRQ();
 8002b64:	f7ff fc3c 	bl	80023e0 <dio0_IRQ>
	}
}
 8002b68:	bf00      	nop
 8002b6a:	3708      	adds	r7, #8
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002b74:	bf00      	nop
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
	...

08002b80 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b86:	2300      	movs	r3, #0
 8002b88:	607b      	str	r3, [r7, #4]
 8002b8a:	4b10      	ldr	r3, [pc, #64]	; (8002bcc <HAL_MspInit+0x4c>)
 8002b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8e:	4a0f      	ldr	r2, [pc, #60]	; (8002bcc <HAL_MspInit+0x4c>)
 8002b90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b94:	6453      	str	r3, [r2, #68]	; 0x44
 8002b96:	4b0d      	ldr	r3, [pc, #52]	; (8002bcc <HAL_MspInit+0x4c>)
 8002b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b9e:	607b      	str	r3, [r7, #4]
 8002ba0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	603b      	str	r3, [r7, #0]
 8002ba6:	4b09      	ldr	r3, [pc, #36]	; (8002bcc <HAL_MspInit+0x4c>)
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	4a08      	ldr	r2, [pc, #32]	; (8002bcc <HAL_MspInit+0x4c>)
 8002bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8002bb2:	4b06      	ldr	r3, [pc, #24]	; (8002bcc <HAL_MspInit+0x4c>)
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bba:	603b      	str	r3, [r7, #0]
 8002bbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bbe:	bf00      	nop
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	40023800 	.word	0x40023800

08002bd0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b08a      	sub	sp, #40	; 0x28
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd8:	f107 0314 	add.w	r3, r7, #20
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]
 8002be0:	605a      	str	r2, [r3, #4]
 8002be2:	609a      	str	r2, [r3, #8]
 8002be4:	60da      	str	r2, [r3, #12]
 8002be6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a19      	ldr	r2, [pc, #100]	; (8002c54 <HAL_I2C_MspInit+0x84>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d12b      	bne.n	8002c4a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	613b      	str	r3, [r7, #16]
 8002bf6:	4b18      	ldr	r3, [pc, #96]	; (8002c58 <HAL_I2C_MspInit+0x88>)
 8002bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfa:	4a17      	ldr	r2, [pc, #92]	; (8002c58 <HAL_I2C_MspInit+0x88>)
 8002bfc:	f043 0302 	orr.w	r3, r3, #2
 8002c00:	6313      	str	r3, [r2, #48]	; 0x30
 8002c02:	4b15      	ldr	r3, [pc, #84]	; (8002c58 <HAL_I2C_MspInit+0x88>)
 8002c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	613b      	str	r3, [r7, #16]
 8002c0c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 8002c0e:	23c0      	movs	r3, #192	; 0xc0
 8002c10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c12:	2312      	movs	r3, #18
 8002c14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c16:	2300      	movs	r3, #0
 8002c18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c1e:	2304      	movs	r3, #4
 8002c20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c22:	f107 0314 	add.w	r3, r7, #20
 8002c26:	4619      	mov	r1, r3
 8002c28:	480c      	ldr	r0, [pc, #48]	; (8002c5c <HAL_I2C_MspInit+0x8c>)
 8002c2a:	f001 f80d 	bl	8003c48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c2e:	2300      	movs	r3, #0
 8002c30:	60fb      	str	r3, [r7, #12]
 8002c32:	4b09      	ldr	r3, [pc, #36]	; (8002c58 <HAL_I2C_MspInit+0x88>)
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	4a08      	ldr	r2, [pc, #32]	; (8002c58 <HAL_I2C_MspInit+0x88>)
 8002c38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c3e:	4b06      	ldr	r3, [pc, #24]	; (8002c58 <HAL_I2C_MspInit+0x88>)
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c46:	60fb      	str	r3, [r7, #12]
 8002c48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002c4a:	bf00      	nop
 8002c4c:	3728      	adds	r7, #40	; 0x28
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	40005400 	.word	0x40005400
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	40020400 	.word	0x40020400

08002c60 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a05      	ldr	r2, [pc, #20]	; (8002c84 <HAL_RTC_MspInit+0x24>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d102      	bne.n	8002c78 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002c72:	4b05      	ldr	r3, [pc, #20]	; (8002c88 <HAL_RTC_MspInit+0x28>)
 8002c74:	2201      	movs	r2, #1
 8002c76:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr
 8002c84:	40002800 	.word	0x40002800
 8002c88:	42470e3c 	.word	0x42470e3c

08002c8c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b08a      	sub	sp, #40	; 0x28
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c94:	f107 0314 	add.w	r3, r7, #20
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	605a      	str	r2, [r3, #4]
 8002c9e:	609a      	str	r2, [r3, #8]
 8002ca0:	60da      	str	r2, [r3, #12]
 8002ca2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a70      	ldr	r2, [pc, #448]	; (8002e6c <HAL_SD_MspInit+0x1e0>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	f040 80da 	bne.w	8002e64 <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	613b      	str	r3, [r7, #16]
 8002cb4:	4b6e      	ldr	r3, [pc, #440]	; (8002e70 <HAL_SD_MspInit+0x1e4>)
 8002cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb8:	4a6d      	ldr	r2, [pc, #436]	; (8002e70 <HAL_SD_MspInit+0x1e4>)
 8002cba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002cbe:	6453      	str	r3, [r2, #68]	; 0x44
 8002cc0:	4b6b      	ldr	r3, [pc, #428]	; (8002e70 <HAL_SD_MspInit+0x1e4>)
 8002cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cc8:	613b      	str	r3, [r7, #16]
 8002cca:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ccc:	2300      	movs	r3, #0
 8002cce:	60fb      	str	r3, [r7, #12]
 8002cd0:	4b67      	ldr	r3, [pc, #412]	; (8002e70 <HAL_SD_MspInit+0x1e4>)
 8002cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd4:	4a66      	ldr	r2, [pc, #408]	; (8002e70 <HAL_SD_MspInit+0x1e4>)
 8002cd6:	f043 0304 	orr.w	r3, r3, #4
 8002cda:	6313      	str	r3, [r2, #48]	; 0x30
 8002cdc:	4b64      	ldr	r3, [pc, #400]	; (8002e70 <HAL_SD_MspInit+0x1e4>)
 8002cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce0:	f003 0304 	and.w	r3, r3, #4
 8002ce4:	60fb      	str	r3, [r7, #12]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ce8:	2300      	movs	r3, #0
 8002cea:	60bb      	str	r3, [r7, #8]
 8002cec:	4b60      	ldr	r3, [pc, #384]	; (8002e70 <HAL_SD_MspInit+0x1e4>)
 8002cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf0:	4a5f      	ldr	r2, [pc, #380]	; (8002e70 <HAL_SD_MspInit+0x1e4>)
 8002cf2:	f043 0308 	orr.w	r3, r3, #8
 8002cf6:	6313      	str	r3, [r2, #48]	; 0x30
 8002cf8:	4b5d      	ldr	r3, [pc, #372]	; (8002e70 <HAL_SD_MspInit+0x1e4>)
 8002cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfc:	f003 0308 	and.w	r3, r3, #8
 8002d00:	60bb      	str	r3, [r7, #8]
 8002d02:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002d04:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002d08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d12:	2303      	movs	r3, #3
 8002d14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002d16:	230c      	movs	r3, #12
 8002d18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d1a:	f107 0314 	add.w	r3, r7, #20
 8002d1e:	4619      	mov	r1, r3
 8002d20:	4854      	ldr	r0, [pc, #336]	; (8002e74 <HAL_SD_MspInit+0x1e8>)
 8002d22:	f000 ff91 	bl	8003c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002d26:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002d2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d30:	2300      	movs	r3, #0
 8002d32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d34:	2303      	movs	r3, #3
 8002d36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002d38:	230c      	movs	r3, #12
 8002d3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d3c:	f107 0314 	add.w	r3, r7, #20
 8002d40:	4619      	mov	r1, r3
 8002d42:	484c      	ldr	r0, [pc, #304]	; (8002e74 <HAL_SD_MspInit+0x1e8>)
 8002d44:	f000 ff80 	bl	8003c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002d48:	2304      	movs	r3, #4
 8002d4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d50:	2301      	movs	r3, #1
 8002d52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d54:	2303      	movs	r3, #3
 8002d56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002d58:	230c      	movs	r3, #12
 8002d5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d5c:	f107 0314 	add.w	r3, r7, #20
 8002d60:	4619      	mov	r1, r3
 8002d62:	4845      	ldr	r0, [pc, #276]	; (8002e78 <HAL_SD_MspInit+0x1ec>)
 8002d64:	f000 ff70 	bl	8003c48 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8002d68:	4b44      	ldr	r3, [pc, #272]	; (8002e7c <HAL_SD_MspInit+0x1f0>)
 8002d6a:	4a45      	ldr	r2, [pc, #276]	; (8002e80 <HAL_SD_MspInit+0x1f4>)
 8002d6c:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8002d6e:	4b43      	ldr	r3, [pc, #268]	; (8002e7c <HAL_SD_MspInit+0x1f0>)
 8002d70:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d74:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d76:	4b41      	ldr	r3, [pc, #260]	; (8002e7c <HAL_SD_MspInit+0x1f0>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d7c:	4b3f      	ldr	r3, [pc, #252]	; (8002e7c <HAL_SD_MspInit+0x1f0>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d82:	4b3e      	ldr	r3, [pc, #248]	; (8002e7c <HAL_SD_MspInit+0x1f0>)
 8002d84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d88:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002d8a:	4b3c      	ldr	r3, [pc, #240]	; (8002e7c <HAL_SD_MspInit+0x1f0>)
 8002d8c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d90:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002d92:	4b3a      	ldr	r3, [pc, #232]	; (8002e7c <HAL_SD_MspInit+0x1f0>)
 8002d94:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d98:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8002d9a:	4b38      	ldr	r3, [pc, #224]	; (8002e7c <HAL_SD_MspInit+0x1f0>)
 8002d9c:	2220      	movs	r2, #32
 8002d9e:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002da0:	4b36      	ldr	r3, [pc, #216]	; (8002e7c <HAL_SD_MspInit+0x1f0>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002da6:	4b35      	ldr	r3, [pc, #212]	; (8002e7c <HAL_SD_MspInit+0x1f0>)
 8002da8:	2204      	movs	r2, #4
 8002daa:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002dac:	4b33      	ldr	r3, [pc, #204]	; (8002e7c <HAL_SD_MspInit+0x1f0>)
 8002dae:	2203      	movs	r2, #3
 8002db0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8002db2:	4b32      	ldr	r3, [pc, #200]	; (8002e7c <HAL_SD_MspInit+0x1f0>)
 8002db4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002db8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002dba:	4b30      	ldr	r3, [pc, #192]	; (8002e7c <HAL_SD_MspInit+0x1f0>)
 8002dbc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002dc0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8002dc2:	482e      	ldr	r0, [pc, #184]	; (8002e7c <HAL_SD_MspInit+0x1f0>)
 8002dc4:	f000 fba4 	bl	8003510 <HAL_DMA_Init>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 8002dce:	f7ff fecf 	bl	8002b70 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a29      	ldr	r2, [pc, #164]	; (8002e7c <HAL_SD_MspInit+0x1f0>)
 8002dd6:	641a      	str	r2, [r3, #64]	; 0x40
 8002dd8:	4a28      	ldr	r2, [pc, #160]	; (8002e7c <HAL_SD_MspInit+0x1f0>)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8002dde:	4b29      	ldr	r3, [pc, #164]	; (8002e84 <HAL_SD_MspInit+0x1f8>)
 8002de0:	4a29      	ldr	r2, [pc, #164]	; (8002e88 <HAL_SD_MspInit+0x1fc>)
 8002de2:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8002de4:	4b27      	ldr	r3, [pc, #156]	; (8002e84 <HAL_SD_MspInit+0x1f8>)
 8002de6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002dea:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002dec:	4b25      	ldr	r3, [pc, #148]	; (8002e84 <HAL_SD_MspInit+0x1f8>)
 8002dee:	2240      	movs	r2, #64	; 0x40
 8002df0:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002df2:	4b24      	ldr	r3, [pc, #144]	; (8002e84 <HAL_SD_MspInit+0x1f8>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002df8:	4b22      	ldr	r3, [pc, #136]	; (8002e84 <HAL_SD_MspInit+0x1f8>)
 8002dfa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dfe:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002e00:	4b20      	ldr	r3, [pc, #128]	; (8002e84 <HAL_SD_MspInit+0x1f8>)
 8002e02:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e06:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002e08:	4b1e      	ldr	r3, [pc, #120]	; (8002e84 <HAL_SD_MspInit+0x1f8>)
 8002e0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e0e:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8002e10:	4b1c      	ldr	r3, [pc, #112]	; (8002e84 <HAL_SD_MspInit+0x1f8>)
 8002e12:	2220      	movs	r2, #32
 8002e14:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002e16:	4b1b      	ldr	r3, [pc, #108]	; (8002e84 <HAL_SD_MspInit+0x1f8>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002e1c:	4b19      	ldr	r3, [pc, #100]	; (8002e84 <HAL_SD_MspInit+0x1f8>)
 8002e1e:	2204      	movs	r2, #4
 8002e20:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002e22:	4b18      	ldr	r3, [pc, #96]	; (8002e84 <HAL_SD_MspInit+0x1f8>)
 8002e24:	2203      	movs	r2, #3
 8002e26:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8002e28:	4b16      	ldr	r3, [pc, #88]	; (8002e84 <HAL_SD_MspInit+0x1f8>)
 8002e2a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002e2e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002e30:	4b14      	ldr	r3, [pc, #80]	; (8002e84 <HAL_SD_MspInit+0x1f8>)
 8002e32:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002e36:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8002e38:	4812      	ldr	r0, [pc, #72]	; (8002e84 <HAL_SD_MspInit+0x1f8>)
 8002e3a:	f000 fb69 	bl	8003510 <HAL_DMA_Init>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 8002e44:	f7ff fe94 	bl	8002b70 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4a0e      	ldr	r2, [pc, #56]	; (8002e84 <HAL_SD_MspInit+0x1f8>)
 8002e4c:	63da      	str	r2, [r3, #60]	; 0x3c
 8002e4e:	4a0d      	ldr	r2, [pc, #52]	; (8002e84 <HAL_SD_MspInit+0x1f8>)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8002e54:	2200      	movs	r2, #0
 8002e56:	2100      	movs	r1, #0
 8002e58:	2031      	movs	r0, #49	; 0x31
 8002e5a:	f000 fb22 	bl	80034a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8002e5e:	2031      	movs	r0, #49	; 0x31
 8002e60:	f000 fb3b 	bl	80034da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8002e64:	bf00      	nop
 8002e66:	3728      	adds	r7, #40	; 0x28
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	40012c00 	.word	0x40012c00
 8002e70:	40023800 	.word	0x40023800
 8002e74:	40020800 	.word	0x40020800
 8002e78:	40020c00 	.word	0x40020c00
 8002e7c:	20000a38 	.word	0x20000a38
 8002e80:	40026458 	.word	0x40026458
 8002e84:	20000b8c 	.word	0x20000b8c
 8002e88:	400264a0 	.word	0x400264a0

08002e8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b08a      	sub	sp, #40	; 0x28
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e94:	f107 0314 	add.w	r3, r7, #20
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	605a      	str	r2, [r3, #4]
 8002e9e:	609a      	str	r2, [r3, #8]
 8002ea0:	60da      	str	r2, [r3, #12]
 8002ea2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a19      	ldr	r2, [pc, #100]	; (8002f10 <HAL_SPI_MspInit+0x84>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d12b      	bne.n	8002f06 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002eae:	2300      	movs	r3, #0
 8002eb0:	613b      	str	r3, [r7, #16]
 8002eb2:	4b18      	ldr	r3, [pc, #96]	; (8002f14 <HAL_SPI_MspInit+0x88>)
 8002eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb6:	4a17      	ldr	r2, [pc, #92]	; (8002f14 <HAL_SPI_MspInit+0x88>)
 8002eb8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ebc:	6453      	str	r3, [r2, #68]	; 0x44
 8002ebe:	4b15      	ldr	r3, [pc, #84]	; (8002f14 <HAL_SPI_MspInit+0x88>)
 8002ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ec6:	613b      	str	r3, [r7, #16]
 8002ec8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eca:	2300      	movs	r3, #0
 8002ecc:	60fb      	str	r3, [r7, #12]
 8002ece:	4b11      	ldr	r3, [pc, #68]	; (8002f14 <HAL_SPI_MspInit+0x88>)
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed2:	4a10      	ldr	r2, [pc, #64]	; (8002f14 <HAL_SPI_MspInit+0x88>)
 8002ed4:	f043 0302 	orr.w	r3, r3, #2
 8002ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eda:	4b0e      	ldr	r3, [pc, #56]	; (8002f14 <HAL_SPI_MspInit+0x88>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	60fb      	str	r3, [r7, #12]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = LR_SCK_Pin|LR_MISO_Pin|LR_MOSI_Pin;
 8002ee6:	2338      	movs	r3, #56	; 0x38
 8002ee8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eea:	2302      	movs	r3, #2
 8002eec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ef6:	2305      	movs	r3, #5
 8002ef8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002efa:	f107 0314 	add.w	r3, r7, #20
 8002efe:	4619      	mov	r1, r3
 8002f00:	4805      	ldr	r0, [pc, #20]	; (8002f18 <HAL_SPI_MspInit+0x8c>)
 8002f02:	f000 fea1 	bl	8003c48 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002f06:	bf00      	nop
 8002f08:	3728      	adds	r7, #40	; 0x28
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	40013000 	.word	0x40013000
 8002f14:	40023800 	.word	0x40023800
 8002f18:	40020400 	.word	0x40020400

08002f1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f2c:	d10e      	bne.n	8002f4c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f2e:	2300      	movs	r3, #0
 8002f30:	60fb      	str	r3, [r7, #12]
 8002f32:	4b13      	ldr	r3, [pc, #76]	; (8002f80 <HAL_TIM_Base_MspInit+0x64>)
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	4a12      	ldr	r2, [pc, #72]	; (8002f80 <HAL_TIM_Base_MspInit+0x64>)
 8002f38:	f043 0301 	orr.w	r3, r3, #1
 8002f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f3e:	4b10      	ldr	r3, [pc, #64]	; (8002f80 <HAL_TIM_Base_MspInit+0x64>)
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	60fb      	str	r3, [r7, #12]
 8002f48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002f4a:	e012      	b.n	8002f72 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a0c      	ldr	r2, [pc, #48]	; (8002f84 <HAL_TIM_Base_MspInit+0x68>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d10d      	bne.n	8002f72 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f56:	2300      	movs	r3, #0
 8002f58:	60bb      	str	r3, [r7, #8]
 8002f5a:	4b09      	ldr	r3, [pc, #36]	; (8002f80 <HAL_TIM_Base_MspInit+0x64>)
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	4a08      	ldr	r2, [pc, #32]	; (8002f80 <HAL_TIM_Base_MspInit+0x64>)
 8002f60:	f043 0302 	orr.w	r3, r3, #2
 8002f64:	6413      	str	r3, [r2, #64]	; 0x40
 8002f66:	4b06      	ldr	r3, [pc, #24]	; (8002f80 <HAL_TIM_Base_MspInit+0x64>)
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	60bb      	str	r3, [r7, #8]
 8002f70:	68bb      	ldr	r3, [r7, #8]
}
 8002f72:	bf00      	nop
 8002f74:	3714      	adds	r7, #20
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	40023800 	.word	0x40023800
 8002f84:	40000400 	.word	0x40000400

08002f88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b088      	sub	sp, #32
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f90:	f107 030c 	add.w	r3, r7, #12
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]
 8002f98:	605a      	str	r2, [r3, #4]
 8002f9a:	609a      	str	r2, [r3, #8]
 8002f9c:	60da      	str	r2, [r3, #12]
 8002f9e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fa8:	d11d      	bne.n	8002fe6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002faa:	2300      	movs	r3, #0
 8002fac:	60bb      	str	r3, [r7, #8]
 8002fae:	4b10      	ldr	r3, [pc, #64]	; (8002ff0 <HAL_TIM_MspPostInit+0x68>)
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb2:	4a0f      	ldr	r2, [pc, #60]	; (8002ff0 <HAL_TIM_MspPostInit+0x68>)
 8002fb4:	f043 0301 	orr.w	r3, r3, #1
 8002fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8002fba:	4b0d      	ldr	r3, [pc, #52]	; (8002ff0 <HAL_TIM_MspPostInit+0x68>)
 8002fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	60bb      	str	r3, [r7, #8]
 8002fc4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA1     ------> TIM2_CH2
    PA3     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = EN_L_Pin|EN_R_Pin;
 8002fc6:	230a      	movs	r3, #10
 8002fc8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fca:	2302      	movs	r3, #2
 8002fcc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fda:	f107 030c 	add.w	r3, r7, #12
 8002fde:	4619      	mov	r1, r3
 8002fe0:	4804      	ldr	r0, [pc, #16]	; (8002ff4 <HAL_TIM_MspPostInit+0x6c>)
 8002fe2:	f000 fe31 	bl	8003c48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002fe6:	bf00      	nop
 8002fe8:	3720      	adds	r7, #32
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	40023800 	.word	0x40023800
 8002ff4:	40020000 	.word	0x40020000

08002ff8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b08a      	sub	sp, #40	; 0x28
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003000:	f107 0314 	add.w	r3, r7, #20
 8003004:	2200      	movs	r2, #0
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	605a      	str	r2, [r3, #4]
 800300a:	609a      	str	r2, [r3, #8]
 800300c:	60da      	str	r2, [r3, #12]
 800300e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a19      	ldr	r2, [pc, #100]	; (800307c <HAL_UART_MspInit+0x84>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d12c      	bne.n	8003074 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800301a:	2300      	movs	r3, #0
 800301c:	613b      	str	r3, [r7, #16]
 800301e:	4b18      	ldr	r3, [pc, #96]	; (8003080 <HAL_UART_MspInit+0x88>)
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	4a17      	ldr	r2, [pc, #92]	; (8003080 <HAL_UART_MspInit+0x88>)
 8003024:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003028:	6413      	str	r3, [r2, #64]	; 0x40
 800302a:	4b15      	ldr	r3, [pc, #84]	; (8003080 <HAL_UART_MspInit+0x88>)
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003032:	613b      	str	r3, [r7, #16]
 8003034:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003036:	2300      	movs	r3, #0
 8003038:	60fb      	str	r3, [r7, #12]
 800303a:	4b11      	ldr	r3, [pc, #68]	; (8003080 <HAL_UART_MspInit+0x88>)
 800303c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303e:	4a10      	ldr	r2, [pc, #64]	; (8003080 <HAL_UART_MspInit+0x88>)
 8003040:	f043 0302 	orr.w	r3, r3, #2
 8003044:	6313      	str	r3, [r2, #48]	; 0x30
 8003046:	4b0e      	ldr	r3, [pc, #56]	; (8003080 <HAL_UART_MspInit+0x88>)
 8003048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	60fb      	str	r3, [r7, #12]
 8003050:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPS_RX_Pin|GPS_TX_Pin;
 8003052:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003056:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003058:	2302      	movs	r3, #2
 800305a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305c:	2300      	movs	r3, #0
 800305e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003060:	2303      	movs	r3, #3
 8003062:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003064:	2307      	movs	r3, #7
 8003066:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003068:	f107 0314 	add.w	r3, r7, #20
 800306c:	4619      	mov	r1, r3
 800306e:	4805      	ldr	r0, [pc, #20]	; (8003084 <HAL_UART_MspInit+0x8c>)
 8003070:	f000 fdea 	bl	8003c48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003074:	bf00      	nop
 8003076:	3728      	adds	r7, #40	; 0x28
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	40004800 	.word	0x40004800
 8003080:	40023800 	.word	0x40023800
 8003084:	40020400 	.word	0x40020400

08003088 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800308c:	bf00      	nop
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr

08003096 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003096:	b480      	push	{r7}
 8003098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800309a:	e7fe      	b.n	800309a <HardFault_Handler+0x4>

0800309c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030a0:	e7fe      	b.n	80030a0 <MemManage_Handler+0x4>

080030a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030a2:	b480      	push	{r7}
 80030a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030a6:	e7fe      	b.n	80030a6 <BusFault_Handler+0x4>

080030a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030ac:	e7fe      	b.n	80030ac <UsageFault_Handler+0x4>

080030ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030ae:	b480      	push	{r7}
 80030b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030b2:	bf00      	nop
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030c0:	bf00      	nop
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr

080030ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030ca:	b480      	push	{r7}
 80030cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030ce:	bf00      	nop
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030dc:	f000 f8c4 	bl	8003268 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030e0:	bf00      	nop
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80030e8:	2040      	movs	r0, #64	; 0x40
 80030ea:	f000 ff93 	bl	8004014 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80030ee:	bf00      	nop
 80030f0:	bd80      	pop	{r7, pc}
	...

080030f4 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80030f8:	4802      	ldr	r0, [pc, #8]	; (8003104 <SDIO_IRQHandler+0x10>)
 80030fa:	f004 facd 	bl	8007698 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80030fe:	bf00      	nop
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	20000bec 	.word	0x20000bec

08003108 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800310c:	4802      	ldr	r0, [pc, #8]	; (8003118 <DMA2_Stream3_IRQHandler+0x10>)
 800310e:	f000 fb27 	bl	8003760 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003112:	bf00      	nop
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	20000a38 	.word	0x20000a38

0800311c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003120:	4802      	ldr	r0, [pc, #8]	; (800312c <OTG_FS_IRQHandler+0x10>)
 8003122:	f002 f88e 	bl	8005242 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003126:	bf00      	nop
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	20002610 	.word	0x20002610

08003130 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8003134:	4802      	ldr	r0, [pc, #8]	; (8003140 <DMA2_Stream6_IRQHandler+0x10>)
 8003136:	f000 fb13 	bl	8003760 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800313a:	bf00      	nop
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	20000b8c 	.word	0x20000b8c

08003144 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003148:	4b08      	ldr	r3, [pc, #32]	; (800316c <SystemInit+0x28>)
 800314a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800314e:	4a07      	ldr	r2, [pc, #28]	; (800316c <SystemInit+0x28>)
 8003150:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003154:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003158:	4b04      	ldr	r3, [pc, #16]	; (800316c <SystemInit+0x28>)
 800315a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800315e:	609a      	str	r2, [r3, #8]
#endif
}
 8003160:	bf00      	nop
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	e000ed00 	.word	0xe000ed00

08003170 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003170:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031a8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003174:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003176:	e003      	b.n	8003180 <LoopCopyDataInit>

08003178 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003178:	4b0c      	ldr	r3, [pc, #48]	; (80031ac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800317a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800317c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800317e:	3104      	adds	r1, #4

08003180 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003180:	480b      	ldr	r0, [pc, #44]	; (80031b0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003182:	4b0c      	ldr	r3, [pc, #48]	; (80031b4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003184:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003186:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003188:	d3f6      	bcc.n	8003178 <CopyDataInit>
  ldr  r2, =_sbss
 800318a:	4a0b      	ldr	r2, [pc, #44]	; (80031b8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800318c:	e002      	b.n	8003194 <LoopFillZerobss>

0800318e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800318e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003190:	f842 3b04 	str.w	r3, [r2], #4

08003194 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003194:	4b09      	ldr	r3, [pc, #36]	; (80031bc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003196:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003198:	d3f9      	bcc.n	800318e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800319a:	f7ff ffd3 	bl	8003144 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800319e:	f00c f871 	bl	800f284 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031a2:	f7ff f92d 	bl	8002400 <main>
  bx  lr    
 80031a6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80031a8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80031ac:	08013c00 	.word	0x08013c00
  ldr  r0, =_sdata
 80031b0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80031b4:	20000360 	.word	0x20000360
  ldr  r2, =_sbss
 80031b8:	20000360 	.word	0x20000360
  ldr  r3, = _ebss
 80031bc:	20002a1c 	.word	0x20002a1c

080031c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031c0:	e7fe      	b.n	80031c0 <ADC_IRQHandler>
	...

080031c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031c8:	4b0e      	ldr	r3, [pc, #56]	; (8003204 <HAL_Init+0x40>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a0d      	ldr	r2, [pc, #52]	; (8003204 <HAL_Init+0x40>)
 80031ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80031d4:	4b0b      	ldr	r3, [pc, #44]	; (8003204 <HAL_Init+0x40>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a0a      	ldr	r2, [pc, #40]	; (8003204 <HAL_Init+0x40>)
 80031da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031e0:	4b08      	ldr	r3, [pc, #32]	; (8003204 <HAL_Init+0x40>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a07      	ldr	r2, [pc, #28]	; (8003204 <HAL_Init+0x40>)
 80031e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031ec:	2003      	movs	r0, #3
 80031ee:	f000 f94d 	bl	800348c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031f2:	2000      	movs	r0, #0
 80031f4:	f000 f808 	bl	8003208 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031f8:	f7ff fcc2 	bl	8002b80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	40023c00 	.word	0x40023c00

08003208 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003210:	4b12      	ldr	r3, [pc, #72]	; (800325c <HAL_InitTick+0x54>)
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	4b12      	ldr	r3, [pc, #72]	; (8003260 <HAL_InitTick+0x58>)
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	4619      	mov	r1, r3
 800321a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800321e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003222:	fbb2 f3f3 	udiv	r3, r2, r3
 8003226:	4618      	mov	r0, r3
 8003228:	f000 f965 	bl	80034f6 <HAL_SYSTICK_Config>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e00e      	b.n	8003254 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2b0f      	cmp	r3, #15
 800323a:	d80a      	bhi.n	8003252 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800323c:	2200      	movs	r2, #0
 800323e:	6879      	ldr	r1, [r7, #4]
 8003240:	f04f 30ff 	mov.w	r0, #4294967295
 8003244:	f000 f92d 	bl	80034a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003248:	4a06      	ldr	r2, [pc, #24]	; (8003264 <HAL_InitTick+0x5c>)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800324e:	2300      	movs	r3, #0
 8003250:	e000      	b.n	8003254 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
}
 8003254:	4618      	mov	r0, r3
 8003256:	3708      	adds	r7, #8
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	20000014 	.word	0x20000014
 8003260:	2000001c 	.word	0x2000001c
 8003264:	20000018 	.word	0x20000018

08003268 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800326c:	4b06      	ldr	r3, [pc, #24]	; (8003288 <HAL_IncTick+0x20>)
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	461a      	mov	r2, r3
 8003272:	4b06      	ldr	r3, [pc, #24]	; (800328c <HAL_IncTick+0x24>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4413      	add	r3, r2
 8003278:	4a04      	ldr	r2, [pc, #16]	; (800328c <HAL_IncTick+0x24>)
 800327a:	6013      	str	r3, [r2, #0]
}
 800327c:	bf00      	nop
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	2000001c 	.word	0x2000001c
 800328c:	20000d08 	.word	0x20000d08

08003290 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
  return uwTick;
 8003294:	4b03      	ldr	r3, [pc, #12]	; (80032a4 <HAL_GetTick+0x14>)
 8003296:	681b      	ldr	r3, [r3, #0]
}
 8003298:	4618      	mov	r0, r3
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	20000d08 	.word	0x20000d08

080032a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032b0:	f7ff ffee 	bl	8003290 <HAL_GetTick>
 80032b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c0:	d005      	beq.n	80032ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032c2:	4b09      	ldr	r3, [pc, #36]	; (80032e8 <HAL_Delay+0x40>)
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	461a      	mov	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	4413      	add	r3, r2
 80032cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80032ce:	bf00      	nop
 80032d0:	f7ff ffde 	bl	8003290 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d8f7      	bhi.n	80032d0 <HAL_Delay+0x28>
  {
  }
}
 80032e0:	bf00      	nop
 80032e2:	3710      	adds	r7, #16
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	2000001c 	.word	0x2000001c

080032ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f003 0307 	and.w	r3, r3, #7
 80032fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032fc:	4b0c      	ldr	r3, [pc, #48]	; (8003330 <__NVIC_SetPriorityGrouping+0x44>)
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003302:	68ba      	ldr	r2, [r7, #8]
 8003304:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003308:	4013      	ands	r3, r2
 800330a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003314:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003318:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800331c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800331e:	4a04      	ldr	r2, [pc, #16]	; (8003330 <__NVIC_SetPriorityGrouping+0x44>)
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	60d3      	str	r3, [r2, #12]
}
 8003324:	bf00      	nop
 8003326:	3714      	adds	r7, #20
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr
 8003330:	e000ed00 	.word	0xe000ed00

08003334 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003338:	4b04      	ldr	r3, [pc, #16]	; (800334c <__NVIC_GetPriorityGrouping+0x18>)
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	0a1b      	lsrs	r3, r3, #8
 800333e:	f003 0307 	and.w	r3, r3, #7
}
 8003342:	4618      	mov	r0, r3
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr
 800334c:	e000ed00 	.word	0xe000ed00

08003350 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	4603      	mov	r3, r0
 8003358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800335a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800335e:	2b00      	cmp	r3, #0
 8003360:	db0b      	blt.n	800337a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003362:	79fb      	ldrb	r3, [r7, #7]
 8003364:	f003 021f 	and.w	r2, r3, #31
 8003368:	4907      	ldr	r1, [pc, #28]	; (8003388 <__NVIC_EnableIRQ+0x38>)
 800336a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336e:	095b      	lsrs	r3, r3, #5
 8003370:	2001      	movs	r0, #1
 8003372:	fa00 f202 	lsl.w	r2, r0, r2
 8003376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800337a:	bf00      	nop
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	e000e100 	.word	0xe000e100

0800338c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	4603      	mov	r3, r0
 8003394:	6039      	str	r1, [r7, #0]
 8003396:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800339c:	2b00      	cmp	r3, #0
 800339e:	db0a      	blt.n	80033b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	b2da      	uxtb	r2, r3
 80033a4:	490c      	ldr	r1, [pc, #48]	; (80033d8 <__NVIC_SetPriority+0x4c>)
 80033a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033aa:	0112      	lsls	r2, r2, #4
 80033ac:	b2d2      	uxtb	r2, r2
 80033ae:	440b      	add	r3, r1
 80033b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033b4:	e00a      	b.n	80033cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	b2da      	uxtb	r2, r3
 80033ba:	4908      	ldr	r1, [pc, #32]	; (80033dc <__NVIC_SetPriority+0x50>)
 80033bc:	79fb      	ldrb	r3, [r7, #7]
 80033be:	f003 030f 	and.w	r3, r3, #15
 80033c2:	3b04      	subs	r3, #4
 80033c4:	0112      	lsls	r2, r2, #4
 80033c6:	b2d2      	uxtb	r2, r2
 80033c8:	440b      	add	r3, r1
 80033ca:	761a      	strb	r2, [r3, #24]
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr
 80033d8:	e000e100 	.word	0xe000e100
 80033dc:	e000ed00 	.word	0xe000ed00

080033e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b089      	sub	sp, #36	; 0x24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f003 0307 	and.w	r3, r3, #7
 80033f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	f1c3 0307 	rsb	r3, r3, #7
 80033fa:	2b04      	cmp	r3, #4
 80033fc:	bf28      	it	cs
 80033fe:	2304      	movcs	r3, #4
 8003400:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	3304      	adds	r3, #4
 8003406:	2b06      	cmp	r3, #6
 8003408:	d902      	bls.n	8003410 <NVIC_EncodePriority+0x30>
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	3b03      	subs	r3, #3
 800340e:	e000      	b.n	8003412 <NVIC_EncodePriority+0x32>
 8003410:	2300      	movs	r3, #0
 8003412:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003414:	f04f 32ff 	mov.w	r2, #4294967295
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	fa02 f303 	lsl.w	r3, r2, r3
 800341e:	43da      	mvns	r2, r3
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	401a      	ands	r2, r3
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003428:	f04f 31ff 	mov.w	r1, #4294967295
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	fa01 f303 	lsl.w	r3, r1, r3
 8003432:	43d9      	mvns	r1, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003438:	4313      	orrs	r3, r2
         );
}
 800343a:	4618      	mov	r0, r3
 800343c:	3724      	adds	r7, #36	; 0x24
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
	...

08003448 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	3b01      	subs	r3, #1
 8003454:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003458:	d301      	bcc.n	800345e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800345a:	2301      	movs	r3, #1
 800345c:	e00f      	b.n	800347e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800345e:	4a0a      	ldr	r2, [pc, #40]	; (8003488 <SysTick_Config+0x40>)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3b01      	subs	r3, #1
 8003464:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003466:	210f      	movs	r1, #15
 8003468:	f04f 30ff 	mov.w	r0, #4294967295
 800346c:	f7ff ff8e 	bl	800338c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003470:	4b05      	ldr	r3, [pc, #20]	; (8003488 <SysTick_Config+0x40>)
 8003472:	2200      	movs	r2, #0
 8003474:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003476:	4b04      	ldr	r3, [pc, #16]	; (8003488 <SysTick_Config+0x40>)
 8003478:	2207      	movs	r2, #7
 800347a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3708      	adds	r7, #8
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	e000e010 	.word	0xe000e010

0800348c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f7ff ff29 	bl	80032ec <__NVIC_SetPriorityGrouping>
}
 800349a:	bf00      	nop
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b086      	sub	sp, #24
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	4603      	mov	r3, r0
 80034aa:	60b9      	str	r1, [r7, #8]
 80034ac:	607a      	str	r2, [r7, #4]
 80034ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034b0:	2300      	movs	r3, #0
 80034b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034b4:	f7ff ff3e 	bl	8003334 <__NVIC_GetPriorityGrouping>
 80034b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	68b9      	ldr	r1, [r7, #8]
 80034be:	6978      	ldr	r0, [r7, #20]
 80034c0:	f7ff ff8e 	bl	80033e0 <NVIC_EncodePriority>
 80034c4:	4602      	mov	r2, r0
 80034c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034ca:	4611      	mov	r1, r2
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff ff5d 	bl	800338c <__NVIC_SetPriority>
}
 80034d2:	bf00      	nop
 80034d4:	3718      	adds	r7, #24
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b082      	sub	sp, #8
 80034de:	af00      	add	r7, sp, #0
 80034e0:	4603      	mov	r3, r0
 80034e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7ff ff31 	bl	8003350 <__NVIC_EnableIRQ>
}
 80034ee:	bf00      	nop
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b082      	sub	sp, #8
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7ff ffa2 	bl	8003448 <SysTick_Config>
 8003504:	4603      	mov	r3, r0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
	...

08003510 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b086      	sub	sp, #24
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003518:	2300      	movs	r3, #0
 800351a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800351c:	f7ff feb8 	bl	8003290 <HAL_GetTick>
 8003520:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d101      	bne.n	800352c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e099      	b.n	8003660 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2202      	movs	r2, #2
 8003538:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 0201 	bic.w	r2, r2, #1
 800354a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800354c:	e00f      	b.n	800356e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800354e:	f7ff fe9f 	bl	8003290 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b05      	cmp	r3, #5
 800355a:	d908      	bls.n	800356e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2220      	movs	r2, #32
 8003560:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2203      	movs	r2, #3
 8003566:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e078      	b.n	8003660 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0301 	and.w	r3, r3, #1
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1e8      	bne.n	800354e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003584:	697a      	ldr	r2, [r7, #20]
 8003586:	4b38      	ldr	r3, [pc, #224]	; (8003668 <HAL_DMA_Init+0x158>)
 8003588:	4013      	ands	r3, r2
 800358a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685a      	ldr	r2, [r3, #4]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800359a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	4313      	orrs	r3, r2
 80035be:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c4:	2b04      	cmp	r3, #4
 80035c6:	d107      	bne.n	80035d8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d0:	4313      	orrs	r3, r2
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	697a      	ldr	r2, [r7, #20]
 80035de:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	f023 0307 	bic.w	r3, r3, #7
 80035ee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f4:	697a      	ldr	r2, [r7, #20]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fe:	2b04      	cmp	r3, #4
 8003600:	d117      	bne.n	8003632 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	4313      	orrs	r3, r2
 800360a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003610:	2b00      	cmp	r3, #0
 8003612:	d00e      	beq.n	8003632 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 fa9d 	bl	8003b54 <DMA_CheckFifoParam>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d008      	beq.n	8003632 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2240      	movs	r2, #64	; 0x40
 8003624:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2201      	movs	r2, #1
 800362a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800362e:	2301      	movs	r3, #1
 8003630:	e016      	b.n	8003660 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	697a      	ldr	r2, [r7, #20]
 8003638:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 fa54 	bl	8003ae8 <DMA_CalcBaseAndBitshift>
 8003640:	4603      	mov	r3, r0
 8003642:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003648:	223f      	movs	r2, #63	; 0x3f
 800364a:	409a      	lsls	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2201      	movs	r2, #1
 800365a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3718      	adds	r7, #24
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	f010803f 	.word	0xf010803f

0800366c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b086      	sub	sp, #24
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]
 8003678:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800367a:	2300      	movs	r3, #0
 800367c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003682:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800368a:	2b01      	cmp	r3, #1
 800368c:	d101      	bne.n	8003692 <HAL_DMA_Start_IT+0x26>
 800368e:	2302      	movs	r3, #2
 8003690:	e040      	b.n	8003714 <HAL_DMA_Start_IT+0xa8>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2201      	movs	r2, #1
 8003696:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d12f      	bne.n	8003706 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2202      	movs	r2, #2
 80036aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	68b9      	ldr	r1, [r7, #8]
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f000 f9e6 	bl	8003a8c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c4:	223f      	movs	r2, #63	; 0x3f
 80036c6:	409a      	lsls	r2, r3
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f042 0216 	orr.w	r2, r2, #22
 80036da:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d007      	beq.n	80036f4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f042 0208 	orr.w	r2, r2, #8
 80036f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f042 0201 	orr.w	r2, r2, #1
 8003702:	601a      	str	r2, [r3, #0]
 8003704:	e005      	b.n	8003712 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800370e:	2302      	movs	r3, #2
 8003710:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003712:	7dfb      	ldrb	r3, [r7, #23]
}
 8003714:	4618      	mov	r0, r3
 8003716:	3718      	adds	r7, #24
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800372a:	b2db      	uxtb	r3, r3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d004      	beq.n	800373a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2280      	movs	r2, #128	; 0x80
 8003734:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e00c      	b.n	8003754 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2205      	movs	r2, #5
 800373e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 0201 	bic.w	r2, r2, #1
 8003750:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003752:	2300      	movs	r3, #0
}
 8003754:	4618      	mov	r0, r3
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b086      	sub	sp, #24
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003768:	2300      	movs	r3, #0
 800376a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800376c:	4b92      	ldr	r3, [pc, #584]	; (80039b8 <HAL_DMA_IRQHandler+0x258>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a92      	ldr	r2, [pc, #584]	; (80039bc <HAL_DMA_IRQHandler+0x25c>)
 8003772:	fba2 2303 	umull	r2, r3, r2, r3
 8003776:	0a9b      	lsrs	r3, r3, #10
 8003778:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800377e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800378a:	2208      	movs	r2, #8
 800378c:	409a      	lsls	r2, r3
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	4013      	ands	r3, r2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d01a      	beq.n	80037cc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0304 	and.w	r3, r3, #4
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d013      	beq.n	80037cc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 0204 	bic.w	r2, r2, #4
 80037b2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037b8:	2208      	movs	r2, #8
 80037ba:	409a      	lsls	r2, r3
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c4:	f043 0201 	orr.w	r2, r3, #1
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d0:	2201      	movs	r2, #1
 80037d2:	409a      	lsls	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	4013      	ands	r3, r2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d012      	beq.n	8003802 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00b      	beq.n	8003802 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ee:	2201      	movs	r2, #1
 80037f0:	409a      	lsls	r2, r3
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037fa:	f043 0202 	orr.w	r2, r3, #2
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003806:	2204      	movs	r2, #4
 8003808:	409a      	lsls	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	4013      	ands	r3, r2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d012      	beq.n	8003838 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0302 	and.w	r3, r3, #2
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00b      	beq.n	8003838 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003824:	2204      	movs	r2, #4
 8003826:	409a      	lsls	r2, r3
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003830:	f043 0204 	orr.w	r2, r3, #4
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800383c:	2210      	movs	r2, #16
 800383e:	409a      	lsls	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	4013      	ands	r3, r2
 8003844:	2b00      	cmp	r3, #0
 8003846:	d043      	beq.n	80038d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0308 	and.w	r3, r3, #8
 8003852:	2b00      	cmp	r3, #0
 8003854:	d03c      	beq.n	80038d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800385a:	2210      	movs	r2, #16
 800385c:	409a      	lsls	r2, r3
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d018      	beq.n	80038a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d108      	bne.n	8003890 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003882:	2b00      	cmp	r3, #0
 8003884:	d024      	beq.n	80038d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	4798      	blx	r3
 800388e:	e01f      	b.n	80038d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003894:	2b00      	cmp	r3, #0
 8003896:	d01b      	beq.n	80038d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	4798      	blx	r3
 80038a0:	e016      	b.n	80038d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d107      	bne.n	80038c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f022 0208 	bic.w	r2, r2, #8
 80038be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d003      	beq.n	80038d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d4:	2220      	movs	r2, #32
 80038d6:	409a      	lsls	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	4013      	ands	r3, r2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f000 808e 	beq.w	80039fe <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0310 	and.w	r3, r3, #16
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f000 8086 	beq.w	80039fe <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f6:	2220      	movs	r2, #32
 80038f8:	409a      	lsls	r2, r3
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b05      	cmp	r3, #5
 8003908:	d136      	bne.n	8003978 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f022 0216 	bic.w	r2, r2, #22
 8003918:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	695a      	ldr	r2, [r3, #20]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003928:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392e:	2b00      	cmp	r3, #0
 8003930:	d103      	bne.n	800393a <HAL_DMA_IRQHandler+0x1da>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003936:	2b00      	cmp	r3, #0
 8003938:	d007      	beq.n	800394a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f022 0208 	bic.w	r2, r2, #8
 8003948:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800394e:	223f      	movs	r2, #63	; 0x3f
 8003950:	409a      	lsls	r2, r3
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800396a:	2b00      	cmp	r3, #0
 800396c:	d07d      	beq.n	8003a6a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	4798      	blx	r3
        }
        return;
 8003976:	e078      	b.n	8003a6a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d01c      	beq.n	80039c0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d108      	bne.n	80039a6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003998:	2b00      	cmp	r3, #0
 800399a:	d030      	beq.n	80039fe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	4798      	blx	r3
 80039a4:	e02b      	b.n	80039fe <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d027      	beq.n	80039fe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	4798      	blx	r3
 80039b6:	e022      	b.n	80039fe <HAL_DMA_IRQHandler+0x29e>
 80039b8:	20000014 	.word	0x20000014
 80039bc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d10f      	bne.n	80039ee <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f022 0210 	bic.w	r2, r2, #16
 80039dc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2201      	movs	r2, #1
 80039ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d003      	beq.n	80039fe <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d032      	beq.n	8003a6c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d022      	beq.n	8003a58 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2205      	movs	r2, #5
 8003a16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 0201 	bic.w	r2, r2, #1
 8003a28:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	60bb      	str	r3, [r7, #8]
 8003a30:	697a      	ldr	r2, [r7, #20]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d307      	bcc.n	8003a46 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d1f2      	bne.n	8003a2a <HAL_DMA_IRQHandler+0x2ca>
 8003a44:	e000      	b.n	8003a48 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003a46:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d005      	beq.n	8003a6c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	4798      	blx	r3
 8003a68:	e000      	b.n	8003a6c <HAL_DMA_IRQHandler+0x30c>
        return;
 8003a6a:	bf00      	nop
    }
  }
}
 8003a6c:	3718      	adds	r7, #24
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop

08003a74 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	607a      	str	r2, [r7, #4]
 8003a98:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003aa8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	683a      	ldr	r2, [r7, #0]
 8003ab0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	2b40      	cmp	r3, #64	; 0x40
 8003ab8:	d108      	bne.n	8003acc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68ba      	ldr	r2, [r7, #8]
 8003ac8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003aca:	e007      	b.n	8003adc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68ba      	ldr	r2, [r7, #8]
 8003ad2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	60da      	str	r2, [r3, #12]
}
 8003adc:	bf00      	nop
 8003ade:	3714      	adds	r7, #20
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	3b10      	subs	r3, #16
 8003af8:	4a14      	ldr	r2, [pc, #80]	; (8003b4c <DMA_CalcBaseAndBitshift+0x64>)
 8003afa:	fba2 2303 	umull	r2, r3, r2, r3
 8003afe:	091b      	lsrs	r3, r3, #4
 8003b00:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003b02:	4a13      	ldr	r2, [pc, #76]	; (8003b50 <DMA_CalcBaseAndBitshift+0x68>)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	4413      	add	r3, r2
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2b03      	cmp	r3, #3
 8003b14:	d909      	bls.n	8003b2a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b1e:	f023 0303 	bic.w	r3, r3, #3
 8003b22:	1d1a      	adds	r2, r3, #4
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	659a      	str	r2, [r3, #88]	; 0x58
 8003b28:	e007      	b.n	8003b3a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b32:	f023 0303 	bic.w	r3, r3, #3
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3714      	adds	r7, #20
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	aaaaaaab 	.word	0xaaaaaaab
 8003b50:	080138b4 	.word	0x080138b4

08003b54 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b085      	sub	sp, #20
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b64:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d11f      	bne.n	8003bae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	2b03      	cmp	r3, #3
 8003b72:	d855      	bhi.n	8003c20 <DMA_CheckFifoParam+0xcc>
 8003b74:	a201      	add	r2, pc, #4	; (adr r2, 8003b7c <DMA_CheckFifoParam+0x28>)
 8003b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b7a:	bf00      	nop
 8003b7c:	08003b8d 	.word	0x08003b8d
 8003b80:	08003b9f 	.word	0x08003b9f
 8003b84:	08003b8d 	.word	0x08003b8d
 8003b88:	08003c21 	.word	0x08003c21
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d045      	beq.n	8003c24 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b9c:	e042      	b.n	8003c24 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ba6:	d13f      	bne.n	8003c28 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bac:	e03c      	b.n	8003c28 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bb6:	d121      	bne.n	8003bfc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	2b03      	cmp	r3, #3
 8003bbc:	d836      	bhi.n	8003c2c <DMA_CheckFifoParam+0xd8>
 8003bbe:	a201      	add	r2, pc, #4	; (adr r2, 8003bc4 <DMA_CheckFifoParam+0x70>)
 8003bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc4:	08003bd5 	.word	0x08003bd5
 8003bc8:	08003bdb 	.word	0x08003bdb
 8003bcc:	08003bd5 	.word	0x08003bd5
 8003bd0:	08003bed 	.word	0x08003bed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	73fb      	strb	r3, [r7, #15]
      break;
 8003bd8:	e02f      	b.n	8003c3a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d024      	beq.n	8003c30 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bea:	e021      	b.n	8003c30 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003bf4:	d11e      	bne.n	8003c34 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003bfa:	e01b      	b.n	8003c34 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d902      	bls.n	8003c08 <DMA_CheckFifoParam+0xb4>
 8003c02:	2b03      	cmp	r3, #3
 8003c04:	d003      	beq.n	8003c0e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003c06:	e018      	b.n	8003c3a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c0c:	e015      	b.n	8003c3a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00e      	beq.n	8003c38 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	73fb      	strb	r3, [r7, #15]
      break;
 8003c1e:	e00b      	b.n	8003c38 <DMA_CheckFifoParam+0xe4>
      break;
 8003c20:	bf00      	nop
 8003c22:	e00a      	b.n	8003c3a <DMA_CheckFifoParam+0xe6>
      break;
 8003c24:	bf00      	nop
 8003c26:	e008      	b.n	8003c3a <DMA_CheckFifoParam+0xe6>
      break;
 8003c28:	bf00      	nop
 8003c2a:	e006      	b.n	8003c3a <DMA_CheckFifoParam+0xe6>
      break;
 8003c2c:	bf00      	nop
 8003c2e:	e004      	b.n	8003c3a <DMA_CheckFifoParam+0xe6>
      break;
 8003c30:	bf00      	nop
 8003c32:	e002      	b.n	8003c3a <DMA_CheckFifoParam+0xe6>
      break;   
 8003c34:	bf00      	nop
 8003c36:	e000      	b.n	8003c3a <DMA_CheckFifoParam+0xe6>
      break;
 8003c38:	bf00      	nop
    }
  } 
  
  return status; 
 8003c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3714      	adds	r7, #20
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b089      	sub	sp, #36	; 0x24
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c52:	2300      	movs	r3, #0
 8003c54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c56:	2300      	movs	r3, #0
 8003c58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c5e:	2300      	movs	r3, #0
 8003c60:	61fb      	str	r3, [r7, #28]
 8003c62:	e16b      	b.n	8003f3c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c64:	2201      	movs	r2, #1
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	697a      	ldr	r2, [r7, #20]
 8003c74:	4013      	ands	r3, r2
 8003c76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c78:	693a      	ldr	r2, [r7, #16]
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	f040 815a 	bne.w	8003f36 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d00b      	beq.n	8003ca2 <HAL_GPIO_Init+0x5a>
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d007      	beq.n	8003ca2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c96:	2b11      	cmp	r3, #17
 8003c98:	d003      	beq.n	8003ca2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	2b12      	cmp	r3, #18
 8003ca0:	d130      	bne.n	8003d04 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	005b      	lsls	r3, r3, #1
 8003cac:	2203      	movs	r2, #3
 8003cae:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb2:	43db      	mvns	r3, r3
 8003cb4:	69ba      	ldr	r2, [r7, #24]
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	68da      	ldr	r2, [r3, #12]
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	005b      	lsls	r3, r3, #1
 8003cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc6:	69ba      	ldr	r2, [r7, #24]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	69ba      	ldr	r2, [r7, #24]
 8003cd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003cd8:	2201      	movs	r2, #1
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce0:	43db      	mvns	r3, r3
 8003ce2:	69ba      	ldr	r2, [r7, #24]
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	091b      	lsrs	r3, r3, #4
 8003cee:	f003 0201 	and.w	r2, r3, #1
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf8:	69ba      	ldr	r2, [r7, #24]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	005b      	lsls	r3, r3, #1
 8003d0e:	2203      	movs	r2, #3
 8003d10:	fa02 f303 	lsl.w	r3, r2, r3
 8003d14:	43db      	mvns	r3, r3
 8003d16:	69ba      	ldr	r2, [r7, #24]
 8003d18:	4013      	ands	r3, r2
 8003d1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	689a      	ldr	r2, [r3, #8]
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	005b      	lsls	r3, r3, #1
 8003d24:	fa02 f303 	lsl.w	r3, r2, r3
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d003      	beq.n	8003d44 <HAL_GPIO_Init+0xfc>
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	2b12      	cmp	r3, #18
 8003d42:	d123      	bne.n	8003d8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	08da      	lsrs	r2, r3, #3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	3208      	adds	r2, #8
 8003d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	f003 0307 	and.w	r3, r3, #7
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	220f      	movs	r2, #15
 8003d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d60:	43db      	mvns	r3, r3
 8003d62:	69ba      	ldr	r2, [r7, #24]
 8003d64:	4013      	ands	r3, r2
 8003d66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	691a      	ldr	r2, [r3, #16]
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	f003 0307 	and.w	r3, r3, #7
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	fa02 f303 	lsl.w	r3, r2, r3
 8003d78:	69ba      	ldr	r2, [r7, #24]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	08da      	lsrs	r2, r3, #3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	3208      	adds	r2, #8
 8003d86:	69b9      	ldr	r1, [r7, #24]
 8003d88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	2203      	movs	r2, #3
 8003d98:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9c:	43db      	mvns	r3, r3
 8003d9e:	69ba      	ldr	r2, [r7, #24]
 8003da0:	4013      	ands	r3, r2
 8003da2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f003 0203 	and.w	r2, r3, #3
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	005b      	lsls	r3, r3, #1
 8003db0:	fa02 f303 	lsl.w	r3, r2, r3
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	69ba      	ldr	r2, [r7, #24]
 8003dbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f000 80b4 	beq.w	8003f36 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dce:	2300      	movs	r3, #0
 8003dd0:	60fb      	str	r3, [r7, #12]
 8003dd2:	4b5f      	ldr	r3, [pc, #380]	; (8003f50 <HAL_GPIO_Init+0x308>)
 8003dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd6:	4a5e      	ldr	r2, [pc, #376]	; (8003f50 <HAL_GPIO_Init+0x308>)
 8003dd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8003dde:	4b5c      	ldr	r3, [pc, #368]	; (8003f50 <HAL_GPIO_Init+0x308>)
 8003de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003de6:	60fb      	str	r3, [r7, #12]
 8003de8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003dea:	4a5a      	ldr	r2, [pc, #360]	; (8003f54 <HAL_GPIO_Init+0x30c>)
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	089b      	lsrs	r3, r3, #2
 8003df0:	3302      	adds	r3, #2
 8003df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	f003 0303 	and.w	r3, r3, #3
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	220f      	movs	r2, #15
 8003e02:	fa02 f303 	lsl.w	r3, r2, r3
 8003e06:	43db      	mvns	r3, r3
 8003e08:	69ba      	ldr	r2, [r7, #24]
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a51      	ldr	r2, [pc, #324]	; (8003f58 <HAL_GPIO_Init+0x310>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d02b      	beq.n	8003e6e <HAL_GPIO_Init+0x226>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a50      	ldr	r2, [pc, #320]	; (8003f5c <HAL_GPIO_Init+0x314>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d025      	beq.n	8003e6a <HAL_GPIO_Init+0x222>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a4f      	ldr	r2, [pc, #316]	; (8003f60 <HAL_GPIO_Init+0x318>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d01f      	beq.n	8003e66 <HAL_GPIO_Init+0x21e>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a4e      	ldr	r2, [pc, #312]	; (8003f64 <HAL_GPIO_Init+0x31c>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d019      	beq.n	8003e62 <HAL_GPIO_Init+0x21a>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a4d      	ldr	r2, [pc, #308]	; (8003f68 <HAL_GPIO_Init+0x320>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d013      	beq.n	8003e5e <HAL_GPIO_Init+0x216>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a4c      	ldr	r2, [pc, #304]	; (8003f6c <HAL_GPIO_Init+0x324>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d00d      	beq.n	8003e5a <HAL_GPIO_Init+0x212>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a4b      	ldr	r2, [pc, #300]	; (8003f70 <HAL_GPIO_Init+0x328>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d007      	beq.n	8003e56 <HAL_GPIO_Init+0x20e>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a4a      	ldr	r2, [pc, #296]	; (8003f74 <HAL_GPIO_Init+0x32c>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d101      	bne.n	8003e52 <HAL_GPIO_Init+0x20a>
 8003e4e:	2307      	movs	r3, #7
 8003e50:	e00e      	b.n	8003e70 <HAL_GPIO_Init+0x228>
 8003e52:	2308      	movs	r3, #8
 8003e54:	e00c      	b.n	8003e70 <HAL_GPIO_Init+0x228>
 8003e56:	2306      	movs	r3, #6
 8003e58:	e00a      	b.n	8003e70 <HAL_GPIO_Init+0x228>
 8003e5a:	2305      	movs	r3, #5
 8003e5c:	e008      	b.n	8003e70 <HAL_GPIO_Init+0x228>
 8003e5e:	2304      	movs	r3, #4
 8003e60:	e006      	b.n	8003e70 <HAL_GPIO_Init+0x228>
 8003e62:	2303      	movs	r3, #3
 8003e64:	e004      	b.n	8003e70 <HAL_GPIO_Init+0x228>
 8003e66:	2302      	movs	r3, #2
 8003e68:	e002      	b.n	8003e70 <HAL_GPIO_Init+0x228>
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e000      	b.n	8003e70 <HAL_GPIO_Init+0x228>
 8003e6e:	2300      	movs	r3, #0
 8003e70:	69fa      	ldr	r2, [r7, #28]
 8003e72:	f002 0203 	and.w	r2, r2, #3
 8003e76:	0092      	lsls	r2, r2, #2
 8003e78:	4093      	lsls	r3, r2
 8003e7a:	69ba      	ldr	r2, [r7, #24]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e80:	4934      	ldr	r1, [pc, #208]	; (8003f54 <HAL_GPIO_Init+0x30c>)
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	089b      	lsrs	r3, r3, #2
 8003e86:	3302      	adds	r3, #2
 8003e88:	69ba      	ldr	r2, [r7, #24]
 8003e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e8e:	4b3a      	ldr	r3, [pc, #232]	; (8003f78 <HAL_GPIO_Init+0x330>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	43db      	mvns	r3, r3
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d003      	beq.n	8003eb2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003eaa:	69ba      	ldr	r2, [r7, #24]
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003eb2:	4a31      	ldr	r2, [pc, #196]	; (8003f78 <HAL_GPIO_Init+0x330>)
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003eb8:	4b2f      	ldr	r3, [pc, #188]	; (8003f78 <HAL_GPIO_Init+0x330>)
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	43db      	mvns	r3, r3
 8003ec2:	69ba      	ldr	r2, [r7, #24]
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d003      	beq.n	8003edc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003ed4:	69ba      	ldr	r2, [r7, #24]
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003edc:	4a26      	ldr	r2, [pc, #152]	; (8003f78 <HAL_GPIO_Init+0x330>)
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ee2:	4b25      	ldr	r3, [pc, #148]	; (8003f78 <HAL_GPIO_Init+0x330>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	43db      	mvns	r3, r3
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	4013      	ands	r3, r2
 8003ef0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d003      	beq.n	8003f06 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003efe:	69ba      	ldr	r2, [r7, #24]
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f06:	4a1c      	ldr	r2, [pc, #112]	; (8003f78 <HAL_GPIO_Init+0x330>)
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f0c:	4b1a      	ldr	r3, [pc, #104]	; (8003f78 <HAL_GPIO_Init+0x330>)
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	43db      	mvns	r3, r3
 8003f16:	69ba      	ldr	r2, [r7, #24]
 8003f18:	4013      	ands	r3, r2
 8003f1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d003      	beq.n	8003f30 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003f28:	69ba      	ldr	r2, [r7, #24]
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f30:	4a11      	ldr	r2, [pc, #68]	; (8003f78 <HAL_GPIO_Init+0x330>)
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	3301      	adds	r3, #1
 8003f3a:	61fb      	str	r3, [r7, #28]
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	2b0f      	cmp	r3, #15
 8003f40:	f67f ae90 	bls.w	8003c64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f44:	bf00      	nop
 8003f46:	3724      	adds	r7, #36	; 0x24
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr
 8003f50:	40023800 	.word	0x40023800
 8003f54:	40013800 	.word	0x40013800
 8003f58:	40020000 	.word	0x40020000
 8003f5c:	40020400 	.word	0x40020400
 8003f60:	40020800 	.word	0x40020800
 8003f64:	40020c00 	.word	0x40020c00
 8003f68:	40021000 	.word	0x40021000
 8003f6c:	40021400 	.word	0x40021400
 8003f70:	40021800 	.word	0x40021800
 8003f74:	40021c00 	.word	0x40021c00
 8003f78:	40013c00 	.word	0x40013c00

08003f7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	460b      	mov	r3, r1
 8003f86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	691a      	ldr	r2, [r3, #16]
 8003f8c:	887b      	ldrh	r3, [r7, #2]
 8003f8e:	4013      	ands	r3, r2
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d002      	beq.n	8003f9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f94:	2301      	movs	r3, #1
 8003f96:	73fb      	strb	r3, [r7, #15]
 8003f98:	e001      	b.n	8003f9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3714      	adds	r7, #20
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	807b      	strh	r3, [r7, #2]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fbc:	787b      	ldrb	r3, [r7, #1]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d003      	beq.n	8003fca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fc2:	887a      	ldrh	r2, [r7, #2]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003fc8:	e003      	b.n	8003fd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003fca:	887b      	ldrh	r3, [r7, #2]
 8003fcc:	041a      	lsls	r2, r3, #16
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	619a      	str	r2, [r3, #24]
}
 8003fd2:	bf00      	nop
 8003fd4:	370c      	adds	r7, #12
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr

08003fde <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003fde:	b480      	push	{r7}
 8003fe0:	b083      	sub	sp, #12
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	695a      	ldr	r2, [r3, #20]
 8003fee:	887b      	ldrh	r3, [r7, #2]
 8003ff0:	401a      	ands	r2, r3
 8003ff2:	887b      	ldrh	r3, [r7, #2]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d104      	bne.n	8004002 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003ff8:	887b      	ldrh	r3, [r7, #2]
 8003ffa:	041a      	lsls	r2, r3, #16
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004000:	e002      	b.n	8004008 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8004002:	887a      	ldrh	r2, [r7, #2]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	619a      	str	r2, [r3, #24]
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	4603      	mov	r3, r0
 800401c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800401e:	4b08      	ldr	r3, [pc, #32]	; (8004040 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004020:	695a      	ldr	r2, [r3, #20]
 8004022:	88fb      	ldrh	r3, [r7, #6]
 8004024:	4013      	ands	r3, r2
 8004026:	2b00      	cmp	r3, #0
 8004028:	d006      	beq.n	8004038 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800402a:	4a05      	ldr	r2, [pc, #20]	; (8004040 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800402c:	88fb      	ldrh	r3, [r7, #6]
 800402e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004030:	88fb      	ldrh	r3, [r7, #6]
 8004032:	4618      	mov	r0, r3
 8004034:	f7fe fd8e 	bl	8002b54 <HAL_GPIO_EXTI_Callback>
  }
}
 8004038:	bf00      	nop
 800403a:	3708      	adds	r7, #8
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	40013c00 	.word	0x40013c00

08004044 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d101      	bne.n	8004056 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e11f      	b.n	8004296 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b00      	cmp	r3, #0
 8004060:	d106      	bne.n	8004070 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f7fe fdb0 	bl	8002bd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2224      	movs	r2, #36	; 0x24
 8004074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f022 0201 	bic.w	r2, r2, #1
 8004086:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004096:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80040a8:	f002 fd1a 	bl	8006ae0 <HAL_RCC_GetPCLK1Freq>
 80040ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	4a7b      	ldr	r2, [pc, #492]	; (80042a0 <HAL_I2C_Init+0x25c>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d807      	bhi.n	80040c8 <HAL_I2C_Init+0x84>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	4a7a      	ldr	r2, [pc, #488]	; (80042a4 <HAL_I2C_Init+0x260>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	bf94      	ite	ls
 80040c0:	2301      	movls	r3, #1
 80040c2:	2300      	movhi	r3, #0
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	e006      	b.n	80040d6 <HAL_I2C_Init+0x92>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	4a77      	ldr	r2, [pc, #476]	; (80042a8 <HAL_I2C_Init+0x264>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	bf94      	ite	ls
 80040d0:	2301      	movls	r3, #1
 80040d2:	2300      	movhi	r3, #0
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d001      	beq.n	80040de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e0db      	b.n	8004296 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	4a72      	ldr	r2, [pc, #456]	; (80042ac <HAL_I2C_Init+0x268>)
 80040e2:	fba2 2303 	umull	r2, r3, r2, r3
 80040e6:	0c9b      	lsrs	r3, r3, #18
 80040e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68ba      	ldr	r2, [r7, #8]
 80040fa:	430a      	orrs	r2, r1
 80040fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	6a1b      	ldr	r3, [r3, #32]
 8004104:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	4a64      	ldr	r2, [pc, #400]	; (80042a0 <HAL_I2C_Init+0x25c>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d802      	bhi.n	8004118 <HAL_I2C_Init+0xd4>
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	3301      	adds	r3, #1
 8004116:	e009      	b.n	800412c <HAL_I2C_Init+0xe8>
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800411e:	fb02 f303 	mul.w	r3, r2, r3
 8004122:	4a63      	ldr	r2, [pc, #396]	; (80042b0 <HAL_I2C_Init+0x26c>)
 8004124:	fba2 2303 	umull	r2, r3, r2, r3
 8004128:	099b      	lsrs	r3, r3, #6
 800412a:	3301      	adds	r3, #1
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	6812      	ldr	r2, [r2, #0]
 8004130:	430b      	orrs	r3, r1
 8004132:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	69db      	ldr	r3, [r3, #28]
 800413a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800413e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	4956      	ldr	r1, [pc, #344]	; (80042a0 <HAL_I2C_Init+0x25c>)
 8004148:	428b      	cmp	r3, r1
 800414a:	d80d      	bhi.n	8004168 <HAL_I2C_Init+0x124>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	1e59      	subs	r1, r3, #1
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	005b      	lsls	r3, r3, #1
 8004156:	fbb1 f3f3 	udiv	r3, r1, r3
 800415a:	3301      	adds	r3, #1
 800415c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004160:	2b04      	cmp	r3, #4
 8004162:	bf38      	it	cc
 8004164:	2304      	movcc	r3, #4
 8004166:	e04f      	b.n	8004208 <HAL_I2C_Init+0x1c4>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d111      	bne.n	8004194 <HAL_I2C_Init+0x150>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	1e58      	subs	r0, r3, #1
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6859      	ldr	r1, [r3, #4]
 8004178:	460b      	mov	r3, r1
 800417a:	005b      	lsls	r3, r3, #1
 800417c:	440b      	add	r3, r1
 800417e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004182:	3301      	adds	r3, #1
 8004184:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004188:	2b00      	cmp	r3, #0
 800418a:	bf0c      	ite	eq
 800418c:	2301      	moveq	r3, #1
 800418e:	2300      	movne	r3, #0
 8004190:	b2db      	uxtb	r3, r3
 8004192:	e012      	b.n	80041ba <HAL_I2C_Init+0x176>
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	1e58      	subs	r0, r3, #1
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6859      	ldr	r1, [r3, #4]
 800419c:	460b      	mov	r3, r1
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	440b      	add	r3, r1
 80041a2:	0099      	lsls	r1, r3, #2
 80041a4:	440b      	add	r3, r1
 80041a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80041aa:	3301      	adds	r3, #1
 80041ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	bf0c      	ite	eq
 80041b4:	2301      	moveq	r3, #1
 80041b6:	2300      	movne	r3, #0
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d001      	beq.n	80041c2 <HAL_I2C_Init+0x17e>
 80041be:	2301      	movs	r3, #1
 80041c0:	e022      	b.n	8004208 <HAL_I2C_Init+0x1c4>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d10e      	bne.n	80041e8 <HAL_I2C_Init+0x1a4>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	1e58      	subs	r0, r3, #1
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6859      	ldr	r1, [r3, #4]
 80041d2:	460b      	mov	r3, r1
 80041d4:	005b      	lsls	r3, r3, #1
 80041d6:	440b      	add	r3, r1
 80041d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80041dc:	3301      	adds	r3, #1
 80041de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041e6:	e00f      	b.n	8004208 <HAL_I2C_Init+0x1c4>
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	1e58      	subs	r0, r3, #1
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6859      	ldr	r1, [r3, #4]
 80041f0:	460b      	mov	r3, r1
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	440b      	add	r3, r1
 80041f6:	0099      	lsls	r1, r3, #2
 80041f8:	440b      	add	r3, r1
 80041fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80041fe:	3301      	adds	r3, #1
 8004200:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004204:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004208:	6879      	ldr	r1, [r7, #4]
 800420a:	6809      	ldr	r1, [r1, #0]
 800420c:	4313      	orrs	r3, r2
 800420e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	69da      	ldr	r2, [r3, #28]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a1b      	ldr	r3, [r3, #32]
 8004222:	431a      	orrs	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	430a      	orrs	r2, r1
 800422a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004236:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	6911      	ldr	r1, [r2, #16]
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	68d2      	ldr	r2, [r2, #12]
 8004242:	4311      	orrs	r1, r2
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	6812      	ldr	r2, [r2, #0]
 8004248:	430b      	orrs	r3, r1
 800424a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	695a      	ldr	r2, [r3, #20]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	431a      	orrs	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	430a      	orrs	r2, r1
 8004266:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f042 0201 	orr.w	r2, r2, #1
 8004276:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2220      	movs	r2, #32
 8004282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	000186a0 	.word	0x000186a0
 80042a4:	001e847f 	.word	0x001e847f
 80042a8:	003d08ff 	.word	0x003d08ff
 80042ac:	431bde83 	.word	0x431bde83
 80042b0:	10624dd3 	.word	0x10624dd3

080042b4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b088      	sub	sp, #32
 80042b8:	af02      	add	r7, sp, #8
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	4608      	mov	r0, r1
 80042be:	4611      	mov	r1, r2
 80042c0:	461a      	mov	r2, r3
 80042c2:	4603      	mov	r3, r0
 80042c4:	817b      	strh	r3, [r7, #10]
 80042c6:	460b      	mov	r3, r1
 80042c8:	813b      	strh	r3, [r7, #8]
 80042ca:	4613      	mov	r3, r2
 80042cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80042ce:	f7fe ffdf 	bl	8003290 <HAL_GetTick>
 80042d2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	2b20      	cmp	r3, #32
 80042de:	f040 80d9 	bne.w	8004494 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	9300      	str	r3, [sp, #0]
 80042e6:	2319      	movs	r3, #25
 80042e8:	2201      	movs	r2, #1
 80042ea:	496d      	ldr	r1, [pc, #436]	; (80044a0 <HAL_I2C_Mem_Write+0x1ec>)
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f000 fc7b 	bl	8004be8 <I2C_WaitOnFlagUntilTimeout>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d001      	beq.n	80042fc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80042f8:	2302      	movs	r3, #2
 80042fa:	e0cc      	b.n	8004496 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004302:	2b01      	cmp	r3, #1
 8004304:	d101      	bne.n	800430a <HAL_I2C_Mem_Write+0x56>
 8004306:	2302      	movs	r3, #2
 8004308:	e0c5      	b.n	8004496 <HAL_I2C_Mem_Write+0x1e2>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2201      	movs	r2, #1
 800430e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0301 	and.w	r3, r3, #1
 800431c:	2b01      	cmp	r3, #1
 800431e:	d007      	beq.n	8004330 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f042 0201 	orr.w	r2, r2, #1
 800432e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800433e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2221      	movs	r2, #33	; 0x21
 8004344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2240      	movs	r2, #64	; 0x40
 800434c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6a3a      	ldr	r2, [r7, #32]
 800435a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004360:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004366:	b29a      	uxth	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	4a4d      	ldr	r2, [pc, #308]	; (80044a4 <HAL_I2C_Mem_Write+0x1f0>)
 8004370:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004372:	88f8      	ldrh	r0, [r7, #6]
 8004374:	893a      	ldrh	r2, [r7, #8]
 8004376:	8979      	ldrh	r1, [r7, #10]
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	9301      	str	r3, [sp, #4]
 800437c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800437e:	9300      	str	r3, [sp, #0]
 8004380:	4603      	mov	r3, r0
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	f000 fab6 	bl	80048f4 <I2C_RequestMemoryWrite>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d052      	beq.n	8004434 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e081      	b.n	8004496 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	f000 fcfc 	bl	8004d94 <I2C_WaitOnTXEFlagUntilTimeout>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00d      	beq.n	80043be <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a6:	2b04      	cmp	r3, #4
 80043a8:	d107      	bne.n	80043ba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e06b      	b.n	8004496 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c2:	781a      	ldrb	r2, [r3, #0]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ce:	1c5a      	adds	r2, r3, #1
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043d8:	3b01      	subs	r3, #1
 80043da:	b29a      	uxth	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	3b01      	subs	r3, #1
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	695b      	ldr	r3, [r3, #20]
 80043f4:	f003 0304 	and.w	r3, r3, #4
 80043f8:	2b04      	cmp	r3, #4
 80043fa:	d11b      	bne.n	8004434 <HAL_I2C_Mem_Write+0x180>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004400:	2b00      	cmp	r3, #0
 8004402:	d017      	beq.n	8004434 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004408:	781a      	ldrb	r2, [r3, #0]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004414:	1c5a      	adds	r2, r3, #1
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800441e:	3b01      	subs	r3, #1
 8004420:	b29a      	uxth	r2, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800442a:	b29b      	uxth	r3, r3
 800442c:	3b01      	subs	r3, #1
 800442e:	b29a      	uxth	r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1aa      	bne.n	8004392 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800443c:	697a      	ldr	r2, [r7, #20]
 800443e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004440:	68f8      	ldr	r0, [r7, #12]
 8004442:	f000 fce8 	bl	8004e16 <I2C_WaitOnBTFFlagUntilTimeout>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d00d      	beq.n	8004468 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004450:	2b04      	cmp	r3, #4
 8004452:	d107      	bne.n	8004464 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004462:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e016      	b.n	8004496 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004476:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2220      	movs	r2, #32
 800447c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004490:	2300      	movs	r3, #0
 8004492:	e000      	b.n	8004496 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004494:	2302      	movs	r3, #2
  }
}
 8004496:	4618      	mov	r0, r3
 8004498:	3718      	adds	r7, #24
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	00100002 	.word	0x00100002
 80044a4:	ffff0000 	.word	0xffff0000

080044a8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b08c      	sub	sp, #48	; 0x30
 80044ac:	af02      	add	r7, sp, #8
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	4608      	mov	r0, r1
 80044b2:	4611      	mov	r1, r2
 80044b4:	461a      	mov	r2, r3
 80044b6:	4603      	mov	r3, r0
 80044b8:	817b      	strh	r3, [r7, #10]
 80044ba:	460b      	mov	r3, r1
 80044bc:	813b      	strh	r3, [r7, #8]
 80044be:	4613      	mov	r3, r2
 80044c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80044c2:	f7fe fee5 	bl	8003290 <HAL_GetTick>
 80044c6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	2b20      	cmp	r3, #32
 80044d2:	f040 8208 	bne.w	80048e6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d8:	9300      	str	r3, [sp, #0]
 80044da:	2319      	movs	r3, #25
 80044dc:	2201      	movs	r2, #1
 80044de:	497b      	ldr	r1, [pc, #492]	; (80046cc <HAL_I2C_Mem_Read+0x224>)
 80044e0:	68f8      	ldr	r0, [r7, #12]
 80044e2:	f000 fb81 	bl	8004be8 <I2C_WaitOnFlagUntilTimeout>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d001      	beq.n	80044f0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80044ec:	2302      	movs	r3, #2
 80044ee:	e1fb      	b.n	80048e8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d101      	bne.n	80044fe <HAL_I2C_Mem_Read+0x56>
 80044fa:	2302      	movs	r3, #2
 80044fc:	e1f4      	b.n	80048e8 <HAL_I2C_Mem_Read+0x440>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2201      	movs	r2, #1
 8004502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0301 	and.w	r3, r3, #1
 8004510:	2b01      	cmp	r3, #1
 8004512:	d007      	beq.n	8004524 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f042 0201 	orr.w	r2, r2, #1
 8004522:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004532:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2222      	movs	r2, #34	; 0x22
 8004538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2240      	movs	r2, #64	; 0x40
 8004540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800454e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004554:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800455a:	b29a      	uxth	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	4a5b      	ldr	r2, [pc, #364]	; (80046d0 <HAL_I2C_Mem_Read+0x228>)
 8004564:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004566:	88f8      	ldrh	r0, [r7, #6]
 8004568:	893a      	ldrh	r2, [r7, #8]
 800456a:	8979      	ldrh	r1, [r7, #10]
 800456c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456e:	9301      	str	r3, [sp, #4]
 8004570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004572:	9300      	str	r3, [sp, #0]
 8004574:	4603      	mov	r3, r0
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	f000 fa50 	bl	8004a1c <I2C_RequestMemoryRead>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e1b0      	b.n	80048e8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800458a:	2b00      	cmp	r3, #0
 800458c:	d113      	bne.n	80045b6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800458e:	2300      	movs	r3, #0
 8004590:	623b      	str	r3, [r7, #32]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	695b      	ldr	r3, [r3, #20]
 8004598:	623b      	str	r3, [r7, #32]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	623b      	str	r3, [r7, #32]
 80045a2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045b2:	601a      	str	r2, [r3, #0]
 80045b4:	e184      	b.n	80048c0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d11b      	bne.n	80045f6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045ce:	2300      	movs	r3, #0
 80045d0:	61fb      	str	r3, [r7, #28]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	61fb      	str	r3, [r7, #28]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	61fb      	str	r3, [r7, #28]
 80045e2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045f2:	601a      	str	r2, [r3, #0]
 80045f4:	e164      	b.n	80048c0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d11b      	bne.n	8004636 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800460c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800461c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800461e:	2300      	movs	r3, #0
 8004620:	61bb      	str	r3, [r7, #24]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	695b      	ldr	r3, [r3, #20]
 8004628:	61bb      	str	r3, [r7, #24]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	61bb      	str	r3, [r7, #24]
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	e144      	b.n	80048c0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004636:	2300      	movs	r3, #0
 8004638:	617b      	str	r3, [r7, #20]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	695b      	ldr	r3, [r3, #20]
 8004640:	617b      	str	r3, [r7, #20]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	617b      	str	r3, [r7, #20]
 800464a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800464c:	e138      	b.n	80048c0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004652:	2b03      	cmp	r3, #3
 8004654:	f200 80f1 	bhi.w	800483a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800465c:	2b01      	cmp	r3, #1
 800465e:	d123      	bne.n	80046a8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004662:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f000 fc17 	bl	8004e98 <I2C_WaitOnRXNEFlagUntilTimeout>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d001      	beq.n	8004674 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e139      	b.n	80048e8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	691a      	ldr	r2, [r3, #16]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467e:	b2d2      	uxtb	r2, r2
 8004680:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004686:	1c5a      	adds	r2, r3, #1
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004690:	3b01      	subs	r3, #1
 8004692:	b29a      	uxth	r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800469c:	b29b      	uxth	r3, r3
 800469e:	3b01      	subs	r3, #1
 80046a0:	b29a      	uxth	r2, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80046a6:	e10b      	b.n	80048c0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d14e      	bne.n	800474e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b2:	9300      	str	r3, [sp, #0]
 80046b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046b6:	2200      	movs	r2, #0
 80046b8:	4906      	ldr	r1, [pc, #24]	; (80046d4 <HAL_I2C_Mem_Read+0x22c>)
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	f000 fa94 	bl	8004be8 <I2C_WaitOnFlagUntilTimeout>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d008      	beq.n	80046d8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e10e      	b.n	80048e8 <HAL_I2C_Mem_Read+0x440>
 80046ca:	bf00      	nop
 80046cc:	00100002 	.word	0x00100002
 80046d0:	ffff0000 	.word	0xffff0000
 80046d4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	691a      	ldr	r2, [r3, #16]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f2:	b2d2      	uxtb	r2, r2
 80046f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fa:	1c5a      	adds	r2, r3, #1
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004704:	3b01      	subs	r3, #1
 8004706:	b29a      	uxth	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004710:	b29b      	uxth	r3, r3
 8004712:	3b01      	subs	r3, #1
 8004714:	b29a      	uxth	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	691a      	ldr	r2, [r3, #16]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004724:	b2d2      	uxtb	r2, r2
 8004726:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472c:	1c5a      	adds	r2, r3, #1
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004736:	3b01      	subs	r3, #1
 8004738:	b29a      	uxth	r2, r3
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004742:	b29b      	uxth	r3, r3
 8004744:	3b01      	subs	r3, #1
 8004746:	b29a      	uxth	r2, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800474c:	e0b8      	b.n	80048c0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800474e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004750:	9300      	str	r3, [sp, #0]
 8004752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004754:	2200      	movs	r2, #0
 8004756:	4966      	ldr	r1, [pc, #408]	; (80048f0 <HAL_I2C_Mem_Read+0x448>)
 8004758:	68f8      	ldr	r0, [r7, #12]
 800475a:	f000 fa45 	bl	8004be8 <I2C_WaitOnFlagUntilTimeout>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d001      	beq.n	8004768 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e0bf      	b.n	80048e8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004776:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	691a      	ldr	r2, [r3, #16]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004782:	b2d2      	uxtb	r2, r2
 8004784:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478a:	1c5a      	adds	r2, r3, #1
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004794:	3b01      	subs	r3, #1
 8004796:	b29a      	uxth	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	3b01      	subs	r3, #1
 80047a4:	b29a      	uxth	r2, r3
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80047aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ac:	9300      	str	r3, [sp, #0]
 80047ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b0:	2200      	movs	r2, #0
 80047b2:	494f      	ldr	r1, [pc, #316]	; (80048f0 <HAL_I2C_Mem_Read+0x448>)
 80047b4:	68f8      	ldr	r0, [r7, #12]
 80047b6:	f000 fa17 	bl	8004be8 <I2C_WaitOnFlagUntilTimeout>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d001      	beq.n	80047c4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e091      	b.n	80048e8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	691a      	ldr	r2, [r3, #16]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047de:	b2d2      	uxtb	r2, r2
 80047e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e6:	1c5a      	adds	r2, r3, #1
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047f0:	3b01      	subs	r3, #1
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	3b01      	subs	r3, #1
 8004800:	b29a      	uxth	r2, r3
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	691a      	ldr	r2, [r3, #16]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004810:	b2d2      	uxtb	r2, r2
 8004812:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004818:	1c5a      	adds	r2, r3, #1
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004822:	3b01      	subs	r3, #1
 8004824:	b29a      	uxth	r2, r3
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800482e:	b29b      	uxth	r3, r3
 8004830:	3b01      	subs	r3, #1
 8004832:	b29a      	uxth	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004838:	e042      	b.n	80048c0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800483a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800483c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800483e:	68f8      	ldr	r0, [r7, #12]
 8004840:	f000 fb2a 	bl	8004e98 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d001      	beq.n	800484e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e04c      	b.n	80048e8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	691a      	ldr	r2, [r3, #16]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004858:	b2d2      	uxtb	r2, r2
 800485a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004860:	1c5a      	adds	r2, r3, #1
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800486a:	3b01      	subs	r3, #1
 800486c:	b29a      	uxth	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004876:	b29b      	uxth	r3, r3
 8004878:	3b01      	subs	r3, #1
 800487a:	b29a      	uxth	r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	695b      	ldr	r3, [r3, #20]
 8004886:	f003 0304 	and.w	r3, r3, #4
 800488a:	2b04      	cmp	r3, #4
 800488c:	d118      	bne.n	80048c0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	691a      	ldr	r2, [r3, #16]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004898:	b2d2      	uxtb	r2, r2
 800489a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a0:	1c5a      	adds	r2, r3, #1
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048aa:	3b01      	subs	r3, #1
 80048ac:	b29a      	uxth	r2, r3
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	3b01      	subs	r3, #1
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f47f aec2 	bne.w	800464e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2220      	movs	r2, #32
 80048ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80048e2:	2300      	movs	r3, #0
 80048e4:	e000      	b.n	80048e8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80048e6:	2302      	movs	r3, #2
  }
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3728      	adds	r7, #40	; 0x28
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	00010004 	.word	0x00010004

080048f4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b088      	sub	sp, #32
 80048f8:	af02      	add	r7, sp, #8
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	4608      	mov	r0, r1
 80048fe:	4611      	mov	r1, r2
 8004900:	461a      	mov	r2, r3
 8004902:	4603      	mov	r3, r0
 8004904:	817b      	strh	r3, [r7, #10]
 8004906:	460b      	mov	r3, r1
 8004908:	813b      	strh	r3, [r7, #8]
 800490a:	4613      	mov	r3, r2
 800490c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800491c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800491e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004920:	9300      	str	r3, [sp, #0]
 8004922:	6a3b      	ldr	r3, [r7, #32]
 8004924:	2200      	movs	r2, #0
 8004926:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800492a:	68f8      	ldr	r0, [r7, #12]
 800492c:	f000 f95c 	bl	8004be8 <I2C_WaitOnFlagUntilTimeout>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d00c      	beq.n	8004950 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004940:	2b00      	cmp	r3, #0
 8004942:	d003      	beq.n	800494c <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f44f 7200 	mov.w	r2, #512	; 0x200
 800494a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800494c:	2303      	movs	r3, #3
 800494e:	e05f      	b.n	8004a10 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004950:	897b      	ldrh	r3, [r7, #10]
 8004952:	b2db      	uxtb	r3, r3
 8004954:	461a      	mov	r2, r3
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800495e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004962:	6a3a      	ldr	r2, [r7, #32]
 8004964:	492c      	ldr	r1, [pc, #176]	; (8004a18 <I2C_RequestMemoryWrite+0x124>)
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f000 f995 	bl	8004c96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d001      	beq.n	8004976 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e04c      	b.n	8004a10 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004976:	2300      	movs	r3, #0
 8004978:	617b      	str	r3, [r7, #20]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	695b      	ldr	r3, [r3, #20]
 8004980:	617b      	str	r3, [r7, #20]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	617b      	str	r3, [r7, #20]
 800498a:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800498c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800498e:	6a39      	ldr	r1, [r7, #32]
 8004990:	68f8      	ldr	r0, [r7, #12]
 8004992:	f000 f9ff 	bl	8004d94 <I2C_WaitOnTXEFlagUntilTimeout>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d00d      	beq.n	80049b8 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a0:	2b04      	cmp	r3, #4
 80049a2:	d107      	bne.n	80049b4 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049b2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e02b      	b.n	8004a10 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80049b8:	88fb      	ldrh	r3, [r7, #6]
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d105      	bne.n	80049ca <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80049be:	893b      	ldrh	r3, [r7, #8]
 80049c0:	b2da      	uxtb	r2, r3
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	611a      	str	r2, [r3, #16]
 80049c8:	e021      	b.n	8004a0e <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80049ca:	893b      	ldrh	r3, [r7, #8]
 80049cc:	0a1b      	lsrs	r3, r3, #8
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	b2da      	uxtb	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049da:	6a39      	ldr	r1, [r7, #32]
 80049dc:	68f8      	ldr	r0, [r7, #12]
 80049de:	f000 f9d9 	bl	8004d94 <I2C_WaitOnTXEFlagUntilTimeout>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d00d      	beq.n	8004a04 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ec:	2b04      	cmp	r3, #4
 80049ee:	d107      	bne.n	8004a00 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049fe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e005      	b.n	8004a10 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a04:	893b      	ldrh	r3, [r7, #8]
 8004a06:	b2da      	uxtb	r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3718      	adds	r7, #24
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	00010002 	.word	0x00010002

08004a1c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b088      	sub	sp, #32
 8004a20:	af02      	add	r7, sp, #8
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	4608      	mov	r0, r1
 8004a26:	4611      	mov	r1, r2
 8004a28:	461a      	mov	r2, r3
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	817b      	strh	r3, [r7, #10]
 8004a2e:	460b      	mov	r3, r1
 8004a30:	813b      	strh	r3, [r7, #8]
 8004a32:	4613      	mov	r3, r2
 8004a34:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a44:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a54:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a58:	9300      	str	r3, [sp, #0]
 8004a5a:	6a3b      	ldr	r3, [r7, #32]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a62:	68f8      	ldr	r0, [r7, #12]
 8004a64:	f000 f8c0 	bl	8004be8 <I2C_WaitOnFlagUntilTimeout>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00c      	beq.n	8004a88 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d003      	beq.n	8004a84 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a84:	2303      	movs	r3, #3
 8004a86:	e0a9      	b.n	8004bdc <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a88:	897b      	ldrh	r3, [r7, #10]
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a96:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9a:	6a3a      	ldr	r2, [r7, #32]
 8004a9c:	4951      	ldr	r1, [pc, #324]	; (8004be4 <I2C_RequestMemoryRead+0x1c8>)
 8004a9e:	68f8      	ldr	r0, [r7, #12]
 8004aa0:	f000 f8f9 	bl	8004c96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d001      	beq.n	8004aae <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e096      	b.n	8004bdc <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aae:	2300      	movs	r3, #0
 8004ab0:	617b      	str	r3, [r7, #20]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	695b      	ldr	r3, [r3, #20]
 8004ab8:	617b      	str	r3, [r7, #20]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	617b      	str	r3, [r7, #20]
 8004ac2:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ac6:	6a39      	ldr	r1, [r7, #32]
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	f000 f963 	bl	8004d94 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d00d      	beq.n	8004af0 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad8:	2b04      	cmp	r3, #4
 8004ada:	d107      	bne.n	8004aec <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aea:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e075      	b.n	8004bdc <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004af0:	88fb      	ldrh	r3, [r7, #6]
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d105      	bne.n	8004b02 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004af6:	893b      	ldrh	r3, [r7, #8]
 8004af8:	b2da      	uxtb	r2, r3
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	611a      	str	r2, [r3, #16]
 8004b00:	e021      	b.n	8004b46 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b02:	893b      	ldrh	r3, [r7, #8]
 8004b04:	0a1b      	lsrs	r3, r3, #8
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	b2da      	uxtb	r2, r3
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b12:	6a39      	ldr	r1, [r7, #32]
 8004b14:	68f8      	ldr	r0, [r7, #12]
 8004b16:	f000 f93d 	bl	8004d94 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d00d      	beq.n	8004b3c <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b24:	2b04      	cmp	r3, #4
 8004b26:	d107      	bne.n	8004b38 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b36:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e04f      	b.n	8004bdc <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b3c:	893b      	ldrh	r3, [r7, #8]
 8004b3e:	b2da      	uxtb	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b48:	6a39      	ldr	r1, [r7, #32]
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	f000 f922 	bl	8004d94 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00d      	beq.n	8004b72 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5a:	2b04      	cmp	r3, #4
 8004b5c:	d107      	bne.n	8004b6e <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b6c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e034      	b.n	8004bdc <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b80:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b84:	9300      	str	r3, [sp, #0]
 8004b86:	6a3b      	ldr	r3, [r7, #32]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f000 f82a 	bl	8004be8 <I2C_WaitOnFlagUntilTimeout>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00c      	beq.n	8004bb4 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d003      	beq.n	8004bb0 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e013      	b.n	8004bdc <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004bb4:	897b      	ldrh	r3, [r7, #10]
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	f043 0301 	orr.w	r3, r3, #1
 8004bbc:	b2da      	uxtb	r2, r3
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc6:	6a3a      	ldr	r2, [r7, #32]
 8004bc8:	4906      	ldr	r1, [pc, #24]	; (8004be4 <I2C_RequestMemoryRead+0x1c8>)
 8004bca:	68f8      	ldr	r0, [r7, #12]
 8004bcc:	f000 f863 	bl	8004c96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d001      	beq.n	8004bda <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e000      	b.n	8004bdc <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3718      	adds	r7, #24
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	00010002 	.word	0x00010002

08004be8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	603b      	str	r3, [r7, #0]
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bf8:	e025      	b.n	8004c46 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c00:	d021      	beq.n	8004c46 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c02:	f7fe fb45 	bl	8003290 <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	683a      	ldr	r2, [r7, #0]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d302      	bcc.n	8004c18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d116      	bne.n	8004c46 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2220      	movs	r2, #32
 8004c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c32:	f043 0220 	orr.w	r2, r3, #32
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e023      	b.n	8004c8e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	0c1b      	lsrs	r3, r3, #16
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d10d      	bne.n	8004c6c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	695b      	ldr	r3, [r3, #20]
 8004c56:	43da      	mvns	r2, r3
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	bf0c      	ite	eq
 8004c62:	2301      	moveq	r3, #1
 8004c64:	2300      	movne	r3, #0
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	461a      	mov	r2, r3
 8004c6a:	e00c      	b.n	8004c86 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	43da      	mvns	r2, r3
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	4013      	ands	r3, r2
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	bf0c      	ite	eq
 8004c7e:	2301      	moveq	r3, #1
 8004c80:	2300      	movne	r3, #0
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	461a      	mov	r2, r3
 8004c86:	79fb      	ldrb	r3, [r7, #7]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d0b6      	beq.n	8004bfa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3710      	adds	r7, #16
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004c96:	b580      	push	{r7, lr}
 8004c98:	b084      	sub	sp, #16
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	60f8      	str	r0, [r7, #12]
 8004c9e:	60b9      	str	r1, [r7, #8]
 8004ca0:	607a      	str	r2, [r7, #4]
 8004ca2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ca4:	e051      	b.n	8004d4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	695b      	ldr	r3, [r3, #20]
 8004cac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cb4:	d123      	bne.n	8004cfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cc4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004cce:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2220      	movs	r2, #32
 8004cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cea:	f043 0204 	orr.w	r2, r3, #4
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e046      	b.n	8004d8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d04:	d021      	beq.n	8004d4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d06:	f7fe fac3 	bl	8003290 <HAL_GetTick>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d302      	bcc.n	8004d1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d116      	bne.n	8004d4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2220      	movs	r2, #32
 8004d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d36:	f043 0220 	orr.w	r2, r3, #32
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e020      	b.n	8004d8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	0c1b      	lsrs	r3, r3, #16
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d10c      	bne.n	8004d6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	43da      	mvns	r2, r3
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	4013      	ands	r3, r2
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	bf14      	ite	ne
 8004d66:	2301      	movne	r3, #1
 8004d68:	2300      	moveq	r3, #0
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	e00b      	b.n	8004d86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	43da      	mvns	r2, r3
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	4013      	ands	r3, r2
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	bf14      	ite	ne
 8004d80:	2301      	movne	r3, #1
 8004d82:	2300      	moveq	r3, #0
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d18d      	bne.n	8004ca6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3710      	adds	r7, #16
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004da0:	e02d      	b.n	8004dfe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004da2:	68f8      	ldr	r0, [r7, #12]
 8004da4:	f000 f8ce 	bl	8004f44 <I2C_IsAcknowledgeFailed>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d001      	beq.n	8004db2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e02d      	b.n	8004e0e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db8:	d021      	beq.n	8004dfe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dba:	f7fe fa69 	bl	8003290 <HAL_GetTick>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	68ba      	ldr	r2, [r7, #8]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d302      	bcc.n	8004dd0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d116      	bne.n	8004dfe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2220      	movs	r2, #32
 8004dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dea:	f043 0220 	orr.w	r2, r3, #32
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e007      	b.n	8004e0e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	695b      	ldr	r3, [r3, #20]
 8004e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e08:	2b80      	cmp	r3, #128	; 0x80
 8004e0a:	d1ca      	bne.n	8004da2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}

08004e16 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e16:	b580      	push	{r7, lr}
 8004e18:	b084      	sub	sp, #16
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	60f8      	str	r0, [r7, #12]
 8004e1e:	60b9      	str	r1, [r7, #8]
 8004e20:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e22:	e02d      	b.n	8004e80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e24:	68f8      	ldr	r0, [r7, #12]
 8004e26:	f000 f88d 	bl	8004f44 <I2C_IsAcknowledgeFailed>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d001      	beq.n	8004e34 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e02d      	b.n	8004e90 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e3a:	d021      	beq.n	8004e80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e3c:	f7fe fa28 	bl	8003290 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	68ba      	ldr	r2, [r7, #8]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d302      	bcc.n	8004e52 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d116      	bne.n	8004e80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2200      	movs	r2, #0
 8004e56:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2220      	movs	r2, #32
 8004e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6c:	f043 0220 	orr.w	r2, r3, #32
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e007      	b.n	8004e90 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	f003 0304 	and.w	r3, r3, #4
 8004e8a:	2b04      	cmp	r3, #4
 8004e8c:	d1ca      	bne.n	8004e24 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3710      	adds	r7, #16
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ea4:	e042      	b.n	8004f2c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	695b      	ldr	r3, [r3, #20]
 8004eac:	f003 0310 	and.w	r3, r3, #16
 8004eb0:	2b10      	cmp	r3, #16
 8004eb2:	d119      	bne.n	8004ee8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f06f 0210 	mvn.w	r2, #16
 8004ebc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2220      	movs	r2, #32
 8004ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e029      	b.n	8004f3c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ee8:	f7fe f9d2 	bl	8003290 <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	68ba      	ldr	r2, [r7, #8]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d302      	bcc.n	8004efe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d116      	bne.n	8004f2c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2200      	movs	r2, #0
 8004f02:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2220      	movs	r2, #32
 8004f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f18:	f043 0220 	orr.w	r2, r3, #32
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e007      	b.n	8004f3c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	695b      	ldr	r3, [r3, #20]
 8004f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f36:	2b40      	cmp	r3, #64	; 0x40
 8004f38:	d1b5      	bne.n	8004ea6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004f3a:	2300      	movs	r3, #0
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3710      	adds	r7, #16
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	695b      	ldr	r3, [r3, #20]
 8004f52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f5a:	d11b      	bne.n	8004f94 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f64:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2220      	movs	r2, #32
 8004f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f80:	f043 0204 	orr.w	r2, r3, #4
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e000      	b.n	8004f96 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	370c      	adds	r7, #12
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr

08004fa2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004fa2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fa4:	b08f      	sub	sp, #60	; 0x3c
 8004fa6:	af0a      	add	r7, sp, #40	; 0x28
 8004fa8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d101      	bne.n	8004fb4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e10f      	b.n	80051d4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d106      	bne.n	8004fd4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f009 fe58 	bl	800ec84 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2203      	movs	r2, #3
 8004fd8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d102      	bne.n	8004fee <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f005 ff7d 	bl	800aef2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	603b      	str	r3, [r7, #0]
 8004ffe:	687e      	ldr	r6, [r7, #4]
 8005000:	466d      	mov	r5, sp
 8005002:	f106 0410 	add.w	r4, r6, #16
 8005006:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005008:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800500a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800500c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800500e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005012:	e885 0003 	stmia.w	r5, {r0, r1}
 8005016:	1d33      	adds	r3, r6, #4
 8005018:	cb0e      	ldmia	r3, {r1, r2, r3}
 800501a:	6838      	ldr	r0, [r7, #0]
 800501c:	f005 fe54 	bl	800acc8 <USB_CoreInit>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d005      	beq.n	8005032 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2202      	movs	r2, #2
 800502a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e0d0      	b.n	80051d4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	2100      	movs	r1, #0
 8005038:	4618      	mov	r0, r3
 800503a:	f005 ff6b 	bl	800af14 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800503e:	2300      	movs	r3, #0
 8005040:	73fb      	strb	r3, [r7, #15]
 8005042:	e04a      	b.n	80050da <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005044:	7bfa      	ldrb	r2, [r7, #15]
 8005046:	6879      	ldr	r1, [r7, #4]
 8005048:	4613      	mov	r3, r2
 800504a:	00db      	lsls	r3, r3, #3
 800504c:	1a9b      	subs	r3, r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	440b      	add	r3, r1
 8005052:	333d      	adds	r3, #61	; 0x3d
 8005054:	2201      	movs	r2, #1
 8005056:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005058:	7bfa      	ldrb	r2, [r7, #15]
 800505a:	6879      	ldr	r1, [r7, #4]
 800505c:	4613      	mov	r3, r2
 800505e:	00db      	lsls	r3, r3, #3
 8005060:	1a9b      	subs	r3, r3, r2
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	440b      	add	r3, r1
 8005066:	333c      	adds	r3, #60	; 0x3c
 8005068:	7bfa      	ldrb	r2, [r7, #15]
 800506a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800506c:	7bfa      	ldrb	r2, [r7, #15]
 800506e:	7bfb      	ldrb	r3, [r7, #15]
 8005070:	b298      	uxth	r0, r3
 8005072:	6879      	ldr	r1, [r7, #4]
 8005074:	4613      	mov	r3, r2
 8005076:	00db      	lsls	r3, r3, #3
 8005078:	1a9b      	subs	r3, r3, r2
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	440b      	add	r3, r1
 800507e:	3342      	adds	r3, #66	; 0x42
 8005080:	4602      	mov	r2, r0
 8005082:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005084:	7bfa      	ldrb	r2, [r7, #15]
 8005086:	6879      	ldr	r1, [r7, #4]
 8005088:	4613      	mov	r3, r2
 800508a:	00db      	lsls	r3, r3, #3
 800508c:	1a9b      	subs	r3, r3, r2
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	440b      	add	r3, r1
 8005092:	333f      	adds	r3, #63	; 0x3f
 8005094:	2200      	movs	r2, #0
 8005096:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005098:	7bfa      	ldrb	r2, [r7, #15]
 800509a:	6879      	ldr	r1, [r7, #4]
 800509c:	4613      	mov	r3, r2
 800509e:	00db      	lsls	r3, r3, #3
 80050a0:	1a9b      	subs	r3, r3, r2
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	440b      	add	r3, r1
 80050a6:	3344      	adds	r3, #68	; 0x44
 80050a8:	2200      	movs	r2, #0
 80050aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80050ac:	7bfa      	ldrb	r2, [r7, #15]
 80050ae:	6879      	ldr	r1, [r7, #4]
 80050b0:	4613      	mov	r3, r2
 80050b2:	00db      	lsls	r3, r3, #3
 80050b4:	1a9b      	subs	r3, r3, r2
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	440b      	add	r3, r1
 80050ba:	3348      	adds	r3, #72	; 0x48
 80050bc:	2200      	movs	r2, #0
 80050be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80050c0:	7bfa      	ldrb	r2, [r7, #15]
 80050c2:	6879      	ldr	r1, [r7, #4]
 80050c4:	4613      	mov	r3, r2
 80050c6:	00db      	lsls	r3, r3, #3
 80050c8:	1a9b      	subs	r3, r3, r2
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	440b      	add	r3, r1
 80050ce:	3350      	adds	r3, #80	; 0x50
 80050d0:	2200      	movs	r2, #0
 80050d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050d4:	7bfb      	ldrb	r3, [r7, #15]
 80050d6:	3301      	adds	r3, #1
 80050d8:	73fb      	strb	r3, [r7, #15]
 80050da:	7bfa      	ldrb	r2, [r7, #15]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d3af      	bcc.n	8005044 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050e4:	2300      	movs	r3, #0
 80050e6:	73fb      	strb	r3, [r7, #15]
 80050e8:	e044      	b.n	8005174 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80050ea:	7bfa      	ldrb	r2, [r7, #15]
 80050ec:	6879      	ldr	r1, [r7, #4]
 80050ee:	4613      	mov	r3, r2
 80050f0:	00db      	lsls	r3, r3, #3
 80050f2:	1a9b      	subs	r3, r3, r2
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	440b      	add	r3, r1
 80050f8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80050fc:	2200      	movs	r2, #0
 80050fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005100:	7bfa      	ldrb	r2, [r7, #15]
 8005102:	6879      	ldr	r1, [r7, #4]
 8005104:	4613      	mov	r3, r2
 8005106:	00db      	lsls	r3, r3, #3
 8005108:	1a9b      	subs	r3, r3, r2
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	440b      	add	r3, r1
 800510e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005112:	7bfa      	ldrb	r2, [r7, #15]
 8005114:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005116:	7bfa      	ldrb	r2, [r7, #15]
 8005118:	6879      	ldr	r1, [r7, #4]
 800511a:	4613      	mov	r3, r2
 800511c:	00db      	lsls	r3, r3, #3
 800511e:	1a9b      	subs	r3, r3, r2
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	440b      	add	r3, r1
 8005124:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005128:	2200      	movs	r2, #0
 800512a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800512c:	7bfa      	ldrb	r2, [r7, #15]
 800512e:	6879      	ldr	r1, [r7, #4]
 8005130:	4613      	mov	r3, r2
 8005132:	00db      	lsls	r3, r3, #3
 8005134:	1a9b      	subs	r3, r3, r2
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	440b      	add	r3, r1
 800513a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800513e:	2200      	movs	r2, #0
 8005140:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005142:	7bfa      	ldrb	r2, [r7, #15]
 8005144:	6879      	ldr	r1, [r7, #4]
 8005146:	4613      	mov	r3, r2
 8005148:	00db      	lsls	r3, r3, #3
 800514a:	1a9b      	subs	r3, r3, r2
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	440b      	add	r3, r1
 8005150:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005154:	2200      	movs	r2, #0
 8005156:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005158:	7bfa      	ldrb	r2, [r7, #15]
 800515a:	6879      	ldr	r1, [r7, #4]
 800515c:	4613      	mov	r3, r2
 800515e:	00db      	lsls	r3, r3, #3
 8005160:	1a9b      	subs	r3, r3, r2
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	440b      	add	r3, r1
 8005166:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800516a:	2200      	movs	r2, #0
 800516c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800516e:	7bfb      	ldrb	r3, [r7, #15]
 8005170:	3301      	adds	r3, #1
 8005172:	73fb      	strb	r3, [r7, #15]
 8005174:	7bfa      	ldrb	r2, [r7, #15]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	429a      	cmp	r2, r3
 800517c:	d3b5      	bcc.n	80050ea <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	603b      	str	r3, [r7, #0]
 8005184:	687e      	ldr	r6, [r7, #4]
 8005186:	466d      	mov	r5, sp
 8005188:	f106 0410 	add.w	r4, r6, #16
 800518c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800518e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005190:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005192:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005194:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005198:	e885 0003 	stmia.w	r5, {r0, r1}
 800519c:	1d33      	adds	r3, r6, #4
 800519e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80051a0:	6838      	ldr	r0, [r7, #0]
 80051a2:	f005 fee1 	bl	800af68 <USB_DevInit>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d005      	beq.n	80051b8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2202      	movs	r2, #2
 80051b0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e00d      	b.n	80051d4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4618      	mov	r0, r3
 80051ce:	f006 fed6 	bl	800bf7e <USB_DevDisconnect>

  return HAL_OK;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3714      	adds	r7, #20
 80051d8:	46bd      	mov	sp, r7
 80051da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080051dc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d101      	bne.n	80051f8 <HAL_PCD_Start+0x1c>
 80051f4:	2302      	movs	r3, #2
 80051f6:	e020      	b.n	800523a <HAL_PCD_Start+0x5e>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005204:	2b01      	cmp	r3, #1
 8005206:	d109      	bne.n	800521c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800520c:	2b01      	cmp	r3, #1
 800520e:	d005      	beq.n	800521c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005214:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4618      	mov	r0, r3
 8005222:	f006 fe94 	bl	800bf4e <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4618      	mov	r0, r3
 800522c:	f005 fe50 	bl	800aed0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	3710      	adds	r7, #16
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}

08005242 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005242:	b590      	push	{r4, r7, lr}
 8005244:	b08d      	sub	sp, #52	; 0x34
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005250:	6a3b      	ldr	r3, [r7, #32]
 8005252:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4618      	mov	r0, r3
 800525a:	f006 ff3b 	bl	800c0d4 <USB_GetMode>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	f040 838e 	bne.w	8005982 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4618      	mov	r0, r3
 800526c:	f006 fe9f 	bl	800bfae <USB_ReadInterrupts>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	f000 8384 	beq.w	8005980 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4618      	mov	r0, r3
 800527e:	f006 fe96 	bl	800bfae <USB_ReadInterrupts>
 8005282:	4603      	mov	r3, r0
 8005284:	f003 0302 	and.w	r3, r3, #2
 8005288:	2b02      	cmp	r3, #2
 800528a:	d107      	bne.n	800529c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	695a      	ldr	r2, [r3, #20]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f002 0202 	and.w	r2, r2, #2
 800529a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4618      	mov	r0, r3
 80052a2:	f006 fe84 	bl	800bfae <USB_ReadInterrupts>
 80052a6:	4603      	mov	r3, r0
 80052a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052ac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80052b0:	d17b      	bne.n	80053aa <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 80052b2:	2300      	movs	r3, #0
 80052b4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4618      	mov	r0, r3
 80052bc:	f006 fe8a 	bl	800bfd4 <USB_ReadDevAllOutEpInterrupt>
 80052c0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80052c2:	e06f      	b.n	80053a4 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 80052c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c6:	f003 0301 	and.w	r3, r3, #1
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d064      	beq.n	8005398 <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052d4:	b2d2      	uxtb	r2, r2
 80052d6:	4611      	mov	r1, r2
 80052d8:	4618      	mov	r0, r3
 80052da:	f006 feaf 	bl	800c03c <USB_ReadDevOutEPInterrupt>
 80052de:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	f003 0301 	and.w	r3, r3, #1
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00c      	beq.n	8005304 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80052ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ec:	015a      	lsls	r2, r3, #5
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	4413      	add	r3, r2
 80052f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052f6:	461a      	mov	r2, r3
 80052f8:	2301      	movs	r3, #1
 80052fa:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80052fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 fe0e 	bl	8005f20 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	f003 0308 	and.w	r3, r3, #8
 800530a:	2b00      	cmp	r3, #0
 800530c:	d00c      	beq.n	8005328 <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800530e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f000 ff0d 	bl	8006130 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005318:	015a      	lsls	r2, r3, #5
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	4413      	add	r3, r2
 800531e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005322:	461a      	mov	r2, r3
 8005324:	2308      	movs	r3, #8
 8005326:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	f003 0310 	and.w	r3, r3, #16
 800532e:	2b00      	cmp	r3, #0
 8005330:	d008      	beq.n	8005344 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005334:	015a      	lsls	r2, r3, #5
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	4413      	add	r3, r2
 800533a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800533e:	461a      	mov	r2, r3
 8005340:	2310      	movs	r3, #16
 8005342:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	f003 0320 	and.w	r3, r3, #32
 800534a:	2b00      	cmp	r3, #0
 800534c:	d015      	beq.n	800537a <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	2b01      	cmp	r3, #1
 8005354:	d108      	bne.n	8005368 <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6818      	ldr	r0, [r3, #0]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005360:	461a      	mov	r2, r3
 8005362:	2101      	movs	r1, #1
 8005364:	f006 fefa 	bl	800c15c <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536a:	015a      	lsls	r2, r3, #5
 800536c:	69fb      	ldr	r3, [r7, #28]
 800536e:	4413      	add	r3, r2
 8005370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005374:	461a      	mov	r2, r3
 8005376:	2320      	movs	r3, #32
 8005378:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005380:	2b00      	cmp	r3, #0
 8005382:	d009      	beq.n	8005398 <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005386:	015a      	lsls	r2, r3, #5
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	4413      	add	r3, r2
 800538c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005390:	461a      	mov	r2, r3
 8005392:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005396:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539a:	3301      	adds	r3, #1
 800539c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800539e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a0:	085b      	lsrs	r3, r3, #1
 80053a2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80053a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d18c      	bne.n	80052c4 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4618      	mov	r0, r3
 80053b0:	f006 fdfd 	bl	800bfae <USB_ReadInterrupts>
 80053b4:	4603      	mov	r3, r0
 80053b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80053be:	f040 80c4 	bne.w	800554a <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4618      	mov	r0, r3
 80053c8:	f006 fe1e 	bl	800c008 <USB_ReadDevAllInEpInterrupt>
 80053cc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80053ce:	2300      	movs	r3, #0
 80053d0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80053d2:	e0b6      	b.n	8005542 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80053d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d6:	f003 0301 	and.w	r3, r3, #1
 80053da:	2b00      	cmp	r3, #0
 80053dc:	f000 80ab 	beq.w	8005536 <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053e6:	b2d2      	uxtb	r2, r2
 80053e8:	4611      	mov	r1, r2
 80053ea:	4618      	mov	r0, r3
 80053ec:	f006 fe44 	bl	800c078 <USB_ReadDevInEPInterrupt>
 80053f0:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80053f2:	69bb      	ldr	r3, [r7, #24]
 80053f4:	f003 0301 	and.w	r3, r3, #1
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d05b      	beq.n	80054b4 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80053fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fe:	f003 030f 	and.w	r3, r3, #15
 8005402:	2201      	movs	r2, #1
 8005404:	fa02 f303 	lsl.w	r3, r2, r3
 8005408:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005410:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	43db      	mvns	r3, r3
 8005416:	69f9      	ldr	r1, [r7, #28]
 8005418:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800541c:	4013      	ands	r3, r2
 800541e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005422:	015a      	lsls	r2, r3, #5
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	4413      	add	r3, r2
 8005428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800542c:	461a      	mov	r2, r3
 800542e:	2301      	movs	r3, #1
 8005430:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	2b01      	cmp	r3, #1
 8005438:	d11b      	bne.n	8005472 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800543a:	6879      	ldr	r1, [r7, #4]
 800543c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800543e:	4613      	mov	r3, r2
 8005440:	00db      	lsls	r3, r3, #3
 8005442:	1a9b      	subs	r3, r3, r2
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	440b      	add	r3, r1
 8005448:	3348      	adds	r3, #72	; 0x48
 800544a:	6819      	ldr	r1, [r3, #0]
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005450:	4613      	mov	r3, r2
 8005452:	00db      	lsls	r3, r3, #3
 8005454:	1a9b      	subs	r3, r3, r2
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	4403      	add	r3, r0
 800545a:	3344      	adds	r3, #68	; 0x44
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4419      	add	r1, r3
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005464:	4613      	mov	r3, r2
 8005466:	00db      	lsls	r3, r3, #3
 8005468:	1a9b      	subs	r3, r3, r2
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	4403      	add	r3, r0
 800546e:	3348      	adds	r3, #72	; 0x48
 8005470:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005474:	b2db      	uxtb	r3, r3
 8005476:	4619      	mov	r1, r3
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f009 fc84 	bl	800ed86 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d116      	bne.n	80054b4 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005488:	2b00      	cmp	r3, #0
 800548a:	d113      	bne.n	80054b4 <HAL_PCD_IRQHandler+0x272>
 800548c:	6879      	ldr	r1, [r7, #4]
 800548e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005490:	4613      	mov	r3, r2
 8005492:	00db      	lsls	r3, r3, #3
 8005494:	1a9b      	subs	r3, r3, r2
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	440b      	add	r3, r1
 800549a:	3350      	adds	r3, #80	; 0x50
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d108      	bne.n	80054b4 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6818      	ldr	r0, [r3, #0]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80054ac:	461a      	mov	r2, r3
 80054ae:	2101      	movs	r1, #1
 80054b0:	f006 fe54 	bl	800c15c <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	f003 0308 	and.w	r3, r3, #8
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d008      	beq.n	80054d0 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80054be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c0:	015a      	lsls	r2, r3, #5
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	4413      	add	r3, r2
 80054c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ca:	461a      	mov	r2, r3
 80054cc:	2308      	movs	r3, #8
 80054ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	f003 0310 	and.w	r3, r3, #16
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d008      	beq.n	80054ec <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80054da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054dc:	015a      	lsls	r2, r3, #5
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	4413      	add	r3, r2
 80054e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054e6:	461a      	mov	r2, r3
 80054e8:	2310      	movs	r3, #16
 80054ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d008      	beq.n	8005508 <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80054f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f8:	015a      	lsls	r2, r3, #5
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	4413      	add	r3, r2
 80054fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005502:	461a      	mov	r2, r3
 8005504:	2340      	movs	r3, #64	; 0x40
 8005506:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	f003 0302 	and.w	r3, r3, #2
 800550e:	2b00      	cmp	r3, #0
 8005510:	d008      	beq.n	8005524 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005514:	015a      	lsls	r2, r3, #5
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	4413      	add	r3, r2
 800551a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800551e:	461a      	mov	r2, r3
 8005520:	2302      	movs	r3, #2
 8005522:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005524:	69bb      	ldr	r3, [r7, #24]
 8005526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800552a:	2b00      	cmp	r3, #0
 800552c:	d003      	beq.n	8005536 <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800552e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f000 fc67 	bl	8005e04 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005538:	3301      	adds	r3, #1
 800553a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800553c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800553e:	085b      	lsrs	r3, r3, #1
 8005540:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005544:	2b00      	cmp	r3, #0
 8005546:	f47f af45 	bne.w	80053d4 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4618      	mov	r0, r3
 8005550:	f006 fd2d 	bl	800bfae <USB_ReadInterrupts>
 8005554:	4603      	mov	r3, r0
 8005556:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800555a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800555e:	d122      	bne.n	80055a6 <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	69fa      	ldr	r2, [r7, #28]
 800556a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800556e:	f023 0301 	bic.w	r3, r3, #1
 8005572:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800557a:	2b01      	cmp	r3, #1
 800557c:	d108      	bne.n	8005590 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005586:	2100      	movs	r1, #0
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f000 fe89 	bl	80062a0 <HAL_PCDEx_LPM_Callback>
 800558e:	e002      	b.n	8005596 <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f009 fc6f 	bl	800ee74 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	695a      	ldr	r2, [r3, #20]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80055a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4618      	mov	r0, r3
 80055ac:	f006 fcff 	bl	800bfae <USB_ReadInterrupts>
 80055b0:	4603      	mov	r3, r0
 80055b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055ba:	d112      	bne.n	80055e2 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	f003 0301 	and.w	r3, r3, #1
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d102      	bne.n	80055d2 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f009 fc2b 	bl	800ee28 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	695a      	ldr	r2, [r3, #20]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80055e0:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4618      	mov	r0, r3
 80055e8:	f006 fce1 	bl	800bfae <USB_ReadInterrupts>
 80055ec:	4603      	mov	r3, r0
 80055ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055f6:	f040 80a7 	bne.w	8005748 <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	69fa      	ldr	r2, [r7, #28]
 8005604:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005608:	f023 0301 	bic.w	r3, r3, #1
 800560c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2110      	movs	r1, #16
 8005614:	4618      	mov	r0, r3
 8005616:	f005 fe19 	bl	800b24c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800561a:	2300      	movs	r3, #0
 800561c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800561e:	e036      	b.n	800568e <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005622:	015a      	lsls	r2, r3, #5
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	4413      	add	r3, r2
 8005628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800562c:	461a      	mov	r2, r3
 800562e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005632:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005636:	015a      	lsls	r2, r3, #5
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	4413      	add	r3, r2
 800563c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005644:	0151      	lsls	r1, r2, #5
 8005646:	69fa      	ldr	r2, [r7, #28]
 8005648:	440a      	add	r2, r1
 800564a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800564e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005652:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005656:	015a      	lsls	r2, r3, #5
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	4413      	add	r3, r2
 800565c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005660:	461a      	mov	r2, r3
 8005662:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005666:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800566a:	015a      	lsls	r2, r3, #5
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	4413      	add	r3, r2
 8005670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005678:	0151      	lsls	r1, r2, #5
 800567a:	69fa      	ldr	r2, [r7, #28]
 800567c:	440a      	add	r2, r1
 800567e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005682:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005686:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800568a:	3301      	adds	r3, #1
 800568c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005694:	429a      	cmp	r2, r3
 8005696:	d3c3      	bcc.n	8005620 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800569e:	69db      	ldr	r3, [r3, #28]
 80056a0:	69fa      	ldr	r2, [r7, #28]
 80056a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056a6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80056aa:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d016      	beq.n	80056e2 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056be:	69fa      	ldr	r2, [r7, #28]
 80056c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056c4:	f043 030b 	orr.w	r3, r3, #11
 80056c8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056d4:	69fa      	ldr	r2, [r7, #28]
 80056d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056da:	f043 030b 	orr.w	r3, r3, #11
 80056de:	6453      	str	r3, [r2, #68]	; 0x44
 80056e0:	e015      	b.n	800570e <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056e8:	695b      	ldr	r3, [r3, #20]
 80056ea:	69fa      	ldr	r2, [r7, #28]
 80056ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80056f4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80056f8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	69fa      	ldr	r2, [r7, #28]
 8005704:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005708:	f043 030b 	orr.w	r3, r3, #11
 800570c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	69fa      	ldr	r2, [r7, #28]
 8005718:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800571c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005720:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6818      	ldr	r0, [r3, #0]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005732:	461a      	mov	r2, r3
 8005734:	f006 fd12 	bl	800c15c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	695a      	ldr	r2, [r3, #20]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005746:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4618      	mov	r0, r3
 800574e:	f006 fc2e 	bl	800bfae <USB_ReadInterrupts>
 8005752:	4603      	mov	r3, r0
 8005754:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005758:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800575c:	d124      	bne.n	80057a8 <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4618      	mov	r0, r3
 8005764:	f006 fcc4 	bl	800c0f0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4618      	mov	r0, r3
 800576e:	f005 fdce 	bl	800b30e <USB_GetDevSpeed>
 8005772:	4603      	mov	r3, r0
 8005774:	461a      	mov	r2, r3
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681c      	ldr	r4, [r3, #0]
 800577e:	f001 f9a3 	bl	8006ac8 <HAL_RCC_GetHCLKFreq>
 8005782:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005788:	b2db      	uxtb	r3, r3
 800578a:	461a      	mov	r2, r3
 800578c:	4620      	mov	r0, r4
 800578e:	f005 fafd 	bl	800ad8c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f009 fb1f 	bl	800edd6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	695a      	ldr	r2, [r3, #20]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80057a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4618      	mov	r0, r3
 80057ae:	f006 fbfe 	bl	800bfae <USB_ReadInterrupts>
 80057b2:	4603      	mov	r3, r0
 80057b4:	f003 0310 	and.w	r3, r3, #16
 80057b8:	2b10      	cmp	r3, #16
 80057ba:	d161      	bne.n	8005880 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	699a      	ldr	r2, [r3, #24]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f022 0210 	bic.w	r2, r2, #16
 80057ca:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80057cc:	6a3b      	ldr	r3, [r7, #32]
 80057ce:	6a1b      	ldr	r3, [r3, #32]
 80057d0:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	f003 020f 	and.w	r2, r3, #15
 80057d8:	4613      	mov	r3, r2
 80057da:	00db      	lsls	r3, r3, #3
 80057dc:	1a9b      	subs	r3, r3, r2
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	4413      	add	r3, r2
 80057e8:	3304      	adds	r3, #4
 80057ea:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	0c5b      	lsrs	r3, r3, #17
 80057f0:	f003 030f 	and.w	r3, r3, #15
 80057f4:	2b02      	cmp	r3, #2
 80057f6:	d124      	bne.n	8005842 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80057f8:	693a      	ldr	r2, [r7, #16]
 80057fa:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80057fe:	4013      	ands	r3, r2
 8005800:	2b00      	cmp	r3, #0
 8005802:	d035      	beq.n	8005870 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	091b      	lsrs	r3, r3, #4
 800580c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800580e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005812:	b29b      	uxth	r3, r3
 8005814:	461a      	mov	r2, r3
 8005816:	6a38      	ldr	r0, [r7, #32]
 8005818:	f006 fa76 	bl	800bd08 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	68da      	ldr	r2, [r3, #12]
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	091b      	lsrs	r3, r3, #4
 8005824:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005828:	441a      	add	r2, r3
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	699a      	ldr	r2, [r3, #24]
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	091b      	lsrs	r3, r3, #4
 8005836:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800583a:	441a      	add	r2, r3
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	619a      	str	r2, [r3, #24]
 8005840:	e016      	b.n	8005870 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	0c5b      	lsrs	r3, r3, #17
 8005846:	f003 030f 	and.w	r3, r3, #15
 800584a:	2b06      	cmp	r3, #6
 800584c:	d110      	bne.n	8005870 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005854:	2208      	movs	r2, #8
 8005856:	4619      	mov	r1, r3
 8005858:	6a38      	ldr	r0, [r7, #32]
 800585a:	f006 fa55 	bl	800bd08 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	699a      	ldr	r2, [r3, #24]
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	091b      	lsrs	r3, r3, #4
 8005866:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800586a:	441a      	add	r2, r3
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	699a      	ldr	r2, [r3, #24]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f042 0210 	orr.w	r2, r2, #16
 800587e:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4618      	mov	r0, r3
 8005886:	f006 fb92 	bl	800bfae <USB_ReadInterrupts>
 800588a:	4603      	mov	r3, r0
 800588c:	f003 0308 	and.w	r3, r3, #8
 8005890:	2b08      	cmp	r3, #8
 8005892:	d10a      	bne.n	80058aa <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f009 fa90 	bl	800edba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	695a      	ldr	r2, [r3, #20]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f002 0208 	and.w	r2, r2, #8
 80058a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4618      	mov	r0, r3
 80058b0:	f006 fb7d 	bl	800bfae <USB_ReadInterrupts>
 80058b4:	4603      	mov	r3, r0
 80058b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058be:	d10f      	bne.n	80058e0 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80058c0:	2300      	movs	r3, #0
 80058c2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80058c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	4619      	mov	r1, r3
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f009 faf2 	bl	800eeb4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	695a      	ldr	r2, [r3, #20]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80058de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4618      	mov	r0, r3
 80058e6:	f006 fb62 	bl	800bfae <USB_ReadInterrupts>
 80058ea:	4603      	mov	r3, r0
 80058ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80058f4:	d10f      	bne.n	8005916 <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80058f6:	2300      	movs	r3, #0
 80058f8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80058fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	4619      	mov	r1, r3
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f009 fac5 	bl	800ee90 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	695a      	ldr	r2, [r3, #20]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005914:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4618      	mov	r0, r3
 800591c:	f006 fb47 	bl	800bfae <USB_ReadInterrupts>
 8005920:	4603      	mov	r3, r0
 8005922:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005926:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800592a:	d10a      	bne.n	8005942 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f009 fad3 	bl	800eed8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	695a      	ldr	r2, [r3, #20]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005940:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4618      	mov	r0, r3
 8005948:	f006 fb31 	bl	800bfae <USB_ReadInterrupts>
 800594c:	4603      	mov	r3, r0
 800594e:	f003 0304 	and.w	r3, r3, #4
 8005952:	2b04      	cmp	r3, #4
 8005954:	d115      	bne.n	8005982 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	f003 0304 	and.w	r3, r3, #4
 8005964:	2b00      	cmp	r3, #0
 8005966:	d002      	beq.n	800596e <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f009 fac3 	bl	800eef4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	6859      	ldr	r1, [r3, #4]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	693a      	ldr	r2, [r7, #16]
 800597a:	430a      	orrs	r2, r1
 800597c:	605a      	str	r2, [r3, #4]
 800597e:	e000      	b.n	8005982 <HAL_PCD_IRQHandler+0x740>
      return;
 8005980:	bf00      	nop
    }
  }
}
 8005982:	3734      	adds	r7, #52	; 0x34
 8005984:	46bd      	mov	sp, r7
 8005986:	bd90      	pop	{r4, r7, pc}

08005988 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	460b      	mov	r3, r1
 8005992:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800599a:	2b01      	cmp	r3, #1
 800599c:	d101      	bne.n	80059a2 <HAL_PCD_SetAddress+0x1a>
 800599e:	2302      	movs	r3, #2
 80059a0:	e013      	b.n	80059ca <HAL_PCD_SetAddress+0x42>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	78fa      	ldrb	r2, [r7, #3]
 80059ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	78fa      	ldrb	r2, [r7, #3]
 80059b8:	4611      	mov	r1, r2
 80059ba:	4618      	mov	r0, r3
 80059bc:	f006 faa1 	bl	800bf02 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3708      	adds	r7, #8
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80059d2:	b580      	push	{r7, lr}
 80059d4:	b084      	sub	sp, #16
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
 80059da:	4608      	mov	r0, r1
 80059dc:	4611      	mov	r1, r2
 80059de:	461a      	mov	r2, r3
 80059e0:	4603      	mov	r3, r0
 80059e2:	70fb      	strb	r3, [r7, #3]
 80059e4:	460b      	mov	r3, r1
 80059e6:	803b      	strh	r3, [r7, #0]
 80059e8:	4613      	mov	r3, r2
 80059ea:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80059ec:	2300      	movs	r3, #0
 80059ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80059f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	da0f      	bge.n	8005a18 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059f8:	78fb      	ldrb	r3, [r7, #3]
 80059fa:	f003 020f 	and.w	r2, r3, #15
 80059fe:	4613      	mov	r3, r2
 8005a00:	00db      	lsls	r3, r3, #3
 8005a02:	1a9b      	subs	r3, r3, r2
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	3338      	adds	r3, #56	; 0x38
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	3304      	adds	r3, #4
 8005a0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2201      	movs	r2, #1
 8005a14:	705a      	strb	r2, [r3, #1]
 8005a16:	e00f      	b.n	8005a38 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a18:	78fb      	ldrb	r3, [r7, #3]
 8005a1a:	f003 020f 	and.w	r2, r3, #15
 8005a1e:	4613      	mov	r3, r2
 8005a20:	00db      	lsls	r3, r3, #3
 8005a22:	1a9b      	subs	r3, r3, r2
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	3304      	adds	r3, #4
 8005a30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005a38:	78fb      	ldrb	r3, [r7, #3]
 8005a3a:	f003 030f 	and.w	r3, r3, #15
 8005a3e:	b2da      	uxtb	r2, r3
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005a44:	883a      	ldrh	r2, [r7, #0]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	78ba      	ldrb	r2, [r7, #2]
 8005a4e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	785b      	ldrb	r3, [r3, #1]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d004      	beq.n	8005a62 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	b29a      	uxth	r2, r3
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005a62:	78bb      	ldrb	r3, [r7, #2]
 8005a64:	2b02      	cmp	r3, #2
 8005a66:	d102      	bne.n	8005a6e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d101      	bne.n	8005a7c <HAL_PCD_EP_Open+0xaa>
 8005a78:	2302      	movs	r3, #2
 8005a7a:	e00e      	b.n	8005a9a <HAL_PCD_EP_Open+0xc8>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	68f9      	ldr	r1, [r7, #12]
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f005 fc64 	bl	800b358 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8005a98:	7afb      	ldrb	r3, [r7, #11]
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3710      	adds	r7, #16
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}

08005aa2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b084      	sub	sp, #16
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
 8005aaa:	460b      	mov	r3, r1
 8005aac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005aae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	da0f      	bge.n	8005ad6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ab6:	78fb      	ldrb	r3, [r7, #3]
 8005ab8:	f003 020f 	and.w	r2, r3, #15
 8005abc:	4613      	mov	r3, r2
 8005abe:	00db      	lsls	r3, r3, #3
 8005ac0:	1a9b      	subs	r3, r3, r2
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	3338      	adds	r3, #56	; 0x38
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	4413      	add	r3, r2
 8005aca:	3304      	adds	r3, #4
 8005acc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	705a      	strb	r2, [r3, #1]
 8005ad4:	e00f      	b.n	8005af6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ad6:	78fb      	ldrb	r3, [r7, #3]
 8005ad8:	f003 020f 	and.w	r2, r3, #15
 8005adc:	4613      	mov	r3, r2
 8005ade:	00db      	lsls	r3, r3, #3
 8005ae0:	1a9b      	subs	r3, r3, r2
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	4413      	add	r3, r2
 8005aec:	3304      	adds	r3, #4
 8005aee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2200      	movs	r2, #0
 8005af4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005af6:	78fb      	ldrb	r3, [r7, #3]
 8005af8:	f003 030f 	and.w	r3, r3, #15
 8005afc:	b2da      	uxtb	r2, r3
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d101      	bne.n	8005b10 <HAL_PCD_EP_Close+0x6e>
 8005b0c:	2302      	movs	r3, #2
 8005b0e:	e00e      	b.n	8005b2e <HAL_PCD_EP_Close+0x8c>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68f9      	ldr	r1, [r7, #12]
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f005 fca2 	bl	800b468 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3710      	adds	r7, #16
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}

08005b36 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005b36:	b580      	push	{r7, lr}
 8005b38:	b086      	sub	sp, #24
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	60f8      	str	r0, [r7, #12]
 8005b3e:	607a      	str	r2, [r7, #4]
 8005b40:	603b      	str	r3, [r7, #0]
 8005b42:	460b      	mov	r3, r1
 8005b44:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b46:	7afb      	ldrb	r3, [r7, #11]
 8005b48:	f003 020f 	and.w	r2, r3, #15
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	00db      	lsls	r3, r3, #3
 8005b50:	1a9b      	subs	r3, r3, r2
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	3304      	adds	r3, #4
 8005b5e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	683a      	ldr	r2, [r7, #0]
 8005b6a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	2200      	movs	r2, #0
 8005b76:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b78:	7afb      	ldrb	r3, [r7, #11]
 8005b7a:	f003 030f 	and.w	r3, r3, #15
 8005b7e:	b2da      	uxtb	r2, r3
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d102      	bne.n	8005b92 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005b92:	7afb      	ldrb	r3, [r7, #11]
 8005b94:	f003 030f 	and.w	r3, r3, #15
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d109      	bne.n	8005bb0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6818      	ldr	r0, [r3, #0]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	691b      	ldr	r3, [r3, #16]
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	6979      	ldr	r1, [r7, #20]
 8005baa:	f005 ff25 	bl	800b9f8 <USB_EP0StartXfer>
 8005bae:	e008      	b.n	8005bc2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6818      	ldr	r0, [r3, #0]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	461a      	mov	r2, r3
 8005bbc:	6979      	ldr	r1, [r7, #20]
 8005bbe:	f005 fcd7 	bl	800b570 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005bc2:	2300      	movs	r3, #0
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3718      	adds	r7, #24
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005bd8:	78fb      	ldrb	r3, [r7, #3]
 8005bda:	f003 020f 	and.w	r2, r3, #15
 8005bde:	6879      	ldr	r1, [r7, #4]
 8005be0:	4613      	mov	r3, r2
 8005be2:	00db      	lsls	r3, r3, #3
 8005be4:	1a9b      	subs	r3, r3, r2
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	440b      	add	r3, r1
 8005bea:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005bee:	681b      	ldr	r3, [r3, #0]
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	370c      	adds	r7, #12
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr

08005bfc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b086      	sub	sp, #24
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	607a      	str	r2, [r7, #4]
 8005c06:	603b      	str	r3, [r7, #0]
 8005c08:	460b      	mov	r3, r1
 8005c0a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c0c:	7afb      	ldrb	r3, [r7, #11]
 8005c0e:	f003 020f 	and.w	r2, r3, #15
 8005c12:	4613      	mov	r3, r2
 8005c14:	00db      	lsls	r3, r3, #3
 8005c16:	1a9b      	subs	r3, r3, r2
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	3338      	adds	r3, #56	; 0x38
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	4413      	add	r3, r2
 8005c20:	3304      	adds	r3, #4
 8005c22:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	683a      	ldr	r2, [r7, #0]
 8005c2e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	2200      	movs	r2, #0
 8005c34:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c3c:	7afb      	ldrb	r3, [r7, #11]
 8005c3e:	f003 030f 	and.w	r3, r3, #15
 8005c42:	b2da      	uxtb	r2, r3
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d102      	bne.n	8005c56 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005c56:	7afb      	ldrb	r3, [r7, #11]
 8005c58:	f003 030f 	and.w	r3, r3, #15
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d109      	bne.n	8005c74 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6818      	ldr	r0, [r3, #0]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	6979      	ldr	r1, [r7, #20]
 8005c6e:	f005 fec3 	bl	800b9f8 <USB_EP0StartXfer>
 8005c72:	e008      	b.n	8005c86 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6818      	ldr	r0, [r3, #0]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	461a      	mov	r2, r3
 8005c80:	6979      	ldr	r1, [r7, #20]
 8005c82:	f005 fc75 	bl	800b570 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005c86:	2300      	movs	r3, #0
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3718      	adds	r7, #24
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	460b      	mov	r3, r1
 8005c9a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005c9c:	78fb      	ldrb	r3, [r7, #3]
 8005c9e:	f003 020f 	and.w	r2, r3, #15
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d901      	bls.n	8005cae <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e050      	b.n	8005d50 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005cae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	da0f      	bge.n	8005cd6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005cb6:	78fb      	ldrb	r3, [r7, #3]
 8005cb8:	f003 020f 	and.w	r2, r3, #15
 8005cbc:	4613      	mov	r3, r2
 8005cbe:	00db      	lsls	r3, r3, #3
 8005cc0:	1a9b      	subs	r3, r3, r2
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	3338      	adds	r3, #56	; 0x38
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	4413      	add	r3, r2
 8005cca:	3304      	adds	r3, #4
 8005ccc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	705a      	strb	r2, [r3, #1]
 8005cd4:	e00d      	b.n	8005cf2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005cd6:	78fa      	ldrb	r2, [r7, #3]
 8005cd8:	4613      	mov	r3, r2
 8005cda:	00db      	lsls	r3, r3, #3
 8005cdc:	1a9b      	subs	r3, r3, r2
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	4413      	add	r3, r2
 8005ce8:	3304      	adds	r3, #4
 8005cea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005cf8:	78fb      	ldrb	r3, [r7, #3]
 8005cfa:	f003 030f 	and.w	r3, r3, #15
 8005cfe:	b2da      	uxtb	r2, r3
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d101      	bne.n	8005d12 <HAL_PCD_EP_SetStall+0x82>
 8005d0e:	2302      	movs	r3, #2
 8005d10:	e01e      	b.n	8005d50 <HAL_PCD_EP_SetStall+0xc0>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2201      	movs	r2, #1
 8005d16:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	68f9      	ldr	r1, [r7, #12]
 8005d20:	4618      	mov	r0, r3
 8005d22:	f006 f81a 	bl	800bd5a <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005d26:	78fb      	ldrb	r3, [r7, #3]
 8005d28:	f003 030f 	and.w	r3, r3, #15
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d10a      	bne.n	8005d46 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6818      	ldr	r0, [r3, #0]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	691b      	ldr	r3, [r3, #16]
 8005d38:	b2d9      	uxtb	r1, r3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005d40:	461a      	mov	r2, r3
 8005d42:	f006 fa0b 	bl	800c15c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005d4e:	2300      	movs	r3, #0
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3710      	adds	r7, #16
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	460b      	mov	r3, r1
 8005d62:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005d64:	78fb      	ldrb	r3, [r7, #3]
 8005d66:	f003 020f 	and.w	r2, r3, #15
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d901      	bls.n	8005d76 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	e042      	b.n	8005dfc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005d76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	da0f      	bge.n	8005d9e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d7e:	78fb      	ldrb	r3, [r7, #3]
 8005d80:	f003 020f 	and.w	r2, r3, #15
 8005d84:	4613      	mov	r3, r2
 8005d86:	00db      	lsls	r3, r3, #3
 8005d88:	1a9b      	subs	r3, r3, r2
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	3338      	adds	r3, #56	; 0x38
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	4413      	add	r3, r2
 8005d92:	3304      	adds	r3, #4
 8005d94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	705a      	strb	r2, [r3, #1]
 8005d9c:	e00f      	b.n	8005dbe <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d9e:	78fb      	ldrb	r3, [r7, #3]
 8005da0:	f003 020f 	and.w	r2, r3, #15
 8005da4:	4613      	mov	r3, r2
 8005da6:	00db      	lsls	r3, r3, #3
 8005da8:	1a9b      	subs	r3, r3, r2
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	4413      	add	r3, r2
 8005db4:	3304      	adds	r3, #4
 8005db6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005dc4:	78fb      	ldrb	r3, [r7, #3]
 8005dc6:	f003 030f 	and.w	r3, r3, #15
 8005dca:	b2da      	uxtb	r2, r3
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d101      	bne.n	8005dde <HAL_PCD_EP_ClrStall+0x86>
 8005dda:	2302      	movs	r3, #2
 8005ddc:	e00e      	b.n	8005dfc <HAL_PCD_EP_ClrStall+0xa4>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2201      	movs	r2, #1
 8005de2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68f9      	ldr	r1, [r7, #12]
 8005dec:	4618      	mov	r0, r3
 8005dee:	f006 f822 	bl	800be36 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005dfa:	2300      	movs	r3, #0
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3710      	adds	r7, #16
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b08a      	sub	sp, #40	; 0x28
 8005e08:	af02      	add	r7, sp, #8
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005e18:	683a      	ldr	r2, [r7, #0]
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	00db      	lsls	r3, r3, #3
 8005e1e:	1a9b      	subs	r3, r3, r2
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	3338      	adds	r3, #56	; 0x38
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	4413      	add	r3, r2
 8005e28:	3304      	adds	r3, #4
 8005e2a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	699a      	ldr	r2, [r3, #24]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	695b      	ldr	r3, [r3, #20]
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d901      	bls.n	8005e3c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e06c      	b.n	8005f16 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	695a      	ldr	r2, [r3, #20]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	699b      	ldr	r3, [r3, #24]
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	69fa      	ldr	r2, [r7, #28]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d902      	bls.n	8005e58 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	3303      	adds	r3, #3
 8005e5c:	089b      	lsrs	r3, r3, #2
 8005e5e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005e60:	e02b      	b.n	8005eba <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	695a      	ldr	r2, [r3, #20]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	699b      	ldr	r3, [r3, #24]
 8005e6a:	1ad3      	subs	r3, r2, r3
 8005e6c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	69fa      	ldr	r2, [r7, #28]
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d902      	bls.n	8005e7e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	3303      	adds	r3, #3
 8005e82:	089b      	lsrs	r3, r3, #2
 8005e84:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	68d9      	ldr	r1, [r3, #12]
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	b2da      	uxtb	r2, r3
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	9300      	str	r3, [sp, #0]
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	6978      	ldr	r0, [r7, #20]
 8005e9e:	f005 fefe 	bl	800bc9e <USB_WritePacket>

    ep->xfer_buff  += len;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	68da      	ldr	r2, [r3, #12]
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	441a      	add	r2, r3
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	699a      	ldr	r2, [r3, #24]
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	441a      	add	r2, r3
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	015a      	lsls	r2, r3, #5
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ec6:	699b      	ldr	r3, [r3, #24]
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	69ba      	ldr	r2, [r7, #24]
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d809      	bhi.n	8005ee4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	699a      	ldr	r2, [r3, #24]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d203      	bcs.n	8005ee4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	695b      	ldr	r3, [r3, #20]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d1be      	bne.n	8005e62 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	695a      	ldr	r2, [r3, #20]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	699b      	ldr	r3, [r3, #24]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d811      	bhi.n	8005f14 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	f003 030f 	and.w	r3, r3, #15
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8005efc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	43db      	mvns	r3, r3
 8005f0a:	6939      	ldr	r1, [r7, #16]
 8005f0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f10:	4013      	ands	r3, r2
 8005f12:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3720      	adds	r7, #32
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
	...

08005f20 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b086      	sub	sp, #24
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	333c      	adds	r3, #60	; 0x3c
 8005f38:	3304      	adds	r3, #4
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	015a      	lsls	r2, r3, #5
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	4413      	add	r3, r2
 8005f46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	f040 80b3 	bne.w	80060be <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	f003 0308 	and.w	r3, r3, #8
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d028      	beq.n	8005fb4 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	4a70      	ldr	r2, [pc, #448]	; (8006128 <PCD_EP_OutXfrComplete_int+0x208>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d90e      	bls.n	8005f88 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d009      	beq.n	8005f88 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	015a      	lsls	r2, r3, #5
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f80:	461a      	mov	r2, r3
 8005f82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f86:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f008 fecf 	bl	800ed2c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6818      	ldr	r0, [r3, #0]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005f98:	461a      	mov	r2, r3
 8005f9a:	2101      	movs	r1, #1
 8005f9c:	f006 f8de 	bl	800c15c <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	015a      	lsls	r2, r3, #5
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fac:	461a      	mov	r2, r3
 8005fae:	2308      	movs	r3, #8
 8005fb0:	6093      	str	r3, [r2, #8]
 8005fb2:	e0b3      	b.n	800611c <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	f003 0320 	and.w	r3, r3, #32
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d009      	beq.n	8005fd2 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	015a      	lsls	r2, r3, #5
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fca:	461a      	mov	r2, r3
 8005fcc:	2320      	movs	r3, #32
 8005fce:	6093      	str	r3, [r2, #8]
 8005fd0:	e0a4      	b.n	800611c <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	f040 809f 	bne.w	800611c <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	4a51      	ldr	r2, [pc, #324]	; (8006128 <PCD_EP_OutXfrComplete_int+0x208>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d90f      	bls.n	8006006 <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d00a      	beq.n	8006006 <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	015a      	lsls	r2, r3, #5
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006002:	6093      	str	r3, [r2, #8]
 8006004:	e08a      	b.n	800611c <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8006006:	6879      	ldr	r1, [r7, #4]
 8006008:	683a      	ldr	r2, [r7, #0]
 800600a:	4613      	mov	r3, r2
 800600c:	00db      	lsls	r3, r3, #3
 800600e:	1a9b      	subs	r3, r3, r2
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	440b      	add	r3, r1
 8006014:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006018:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	0159      	lsls	r1, r3, #5
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	440b      	add	r3, r1
 8006022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006026:	691b      	ldr	r3, [r3, #16]
 8006028:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800602c:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	683a      	ldr	r2, [r7, #0]
 8006032:	4613      	mov	r3, r2
 8006034:	00db      	lsls	r3, r3, #3
 8006036:	1a9b      	subs	r3, r3, r2
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	4403      	add	r3, r0
 800603c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006040:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8006042:	6879      	ldr	r1, [r7, #4]
 8006044:	683a      	ldr	r2, [r7, #0]
 8006046:	4613      	mov	r3, r2
 8006048:	00db      	lsls	r3, r3, #3
 800604a:	1a9b      	subs	r3, r3, r2
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	440b      	add	r3, r1
 8006050:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006054:	6819      	ldr	r1, [r3, #0]
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	683a      	ldr	r2, [r7, #0]
 800605a:	4613      	mov	r3, r2
 800605c:	00db      	lsls	r3, r3, #3
 800605e:	1a9b      	subs	r3, r3, r2
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	4403      	add	r3, r0
 8006064:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4419      	add	r1, r3
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	683a      	ldr	r2, [r7, #0]
 8006070:	4613      	mov	r3, r2
 8006072:	00db      	lsls	r3, r3, #3
 8006074:	1a9b      	subs	r3, r3, r2
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	4403      	add	r3, r0
 800607a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800607e:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	b2db      	uxtb	r3, r3
 8006084:	4619      	mov	r1, r3
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f008 fe62 	bl	800ed50 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d144      	bne.n	800611c <PCD_EP_OutXfrComplete_int+0x1fc>
 8006092:	6879      	ldr	r1, [r7, #4]
 8006094:	683a      	ldr	r2, [r7, #0]
 8006096:	4613      	mov	r3, r2
 8006098:	00db      	lsls	r3, r3, #3
 800609a:	1a9b      	subs	r3, r3, r2
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	440b      	add	r3, r1
 80060a0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d138      	bne.n	800611c <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6818      	ldr	r0, [r3, #0]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80060b4:	461a      	mov	r2, r3
 80060b6:	2101      	movs	r1, #1
 80060b8:	f006 f850 	bl	800c15c <USB_EP0_OutStart>
 80060bc:	e02e      	b.n	800611c <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	4a1a      	ldr	r2, [pc, #104]	; (800612c <PCD_EP_OutXfrComplete_int+0x20c>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d124      	bne.n	8006110 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d00a      	beq.n	80060e6 <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	015a      	lsls	r2, r3, #5
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	4413      	add	r3, r2
 80060d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060dc:	461a      	mov	r2, r3
 80060de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060e2:	6093      	str	r3, [r2, #8]
 80060e4:	e01a      	b.n	800611c <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	f003 0320 	and.w	r3, r3, #32
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d008      	beq.n	8006102 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	015a      	lsls	r2, r3, #5
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	4413      	add	r3, r2
 80060f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060fc:	461a      	mov	r2, r3
 80060fe:	2320      	movs	r3, #32
 8006100:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	b2db      	uxtb	r3, r3
 8006106:	4619      	mov	r1, r3
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f008 fe21 	bl	800ed50 <HAL_PCD_DataOutStageCallback>
 800610e:	e005      	b.n	800611c <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	b2db      	uxtb	r3, r3
 8006114:	4619      	mov	r1, r3
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f008 fe1a 	bl	800ed50 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800611c:	2300      	movs	r3, #0
}
 800611e:	4618      	mov	r0, r3
 8006120:	3718      	adds	r7, #24
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	4f54300a 	.word	0x4f54300a
 800612c:	4f54310a 	.word	0x4f54310a

08006130 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b086      	sub	sp, #24
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	333c      	adds	r3, #60	; 0x3c
 8006148:	3304      	adds	r3, #4
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	015a      	lsls	r2, r3, #5
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	4413      	add	r3, r2
 8006156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	2b01      	cmp	r3, #1
 8006164:	d113      	bne.n	800618e <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	4a1f      	ldr	r2, [pc, #124]	; (80061e8 <PCD_EP_OutSetupPacket_int+0xb8>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d922      	bls.n	80061b4 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006174:	2b00      	cmp	r3, #0
 8006176:	d01d      	beq.n	80061b4 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	015a      	lsls	r2, r3, #5
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	4413      	add	r3, r2
 8006180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006184:	461a      	mov	r2, r3
 8006186:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800618a:	6093      	str	r3, [r2, #8]
 800618c:	e012      	b.n	80061b4 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	4a16      	ldr	r2, [pc, #88]	; (80061ec <PCD_EP_OutSetupPacket_int+0xbc>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d10e      	bne.n	80061b4 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 800619c:	2b00      	cmp	r3, #0
 800619e:	d009      	beq.n	80061b4 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	015a      	lsls	r2, r3, #5
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	4413      	add	r3, r2
 80061a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ac:	461a      	mov	r2, r3
 80061ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061b2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f008 fdb9 	bl	800ed2c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	4a0a      	ldr	r2, [pc, #40]	; (80061e8 <PCD_EP_OutSetupPacket_int+0xb8>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d90c      	bls.n	80061dc <PCD_EP_OutSetupPacket_int+0xac>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d108      	bne.n	80061dc <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6818      	ldr	r0, [r3, #0]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80061d4:	461a      	mov	r2, r3
 80061d6:	2101      	movs	r1, #1
 80061d8:	f005 ffc0 	bl	800c15c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80061dc:	2300      	movs	r3, #0
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3718      	adds	r7, #24
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	4f54300a 	.word	0x4f54300a
 80061ec:	4f54310a 	.word	0x4f54310a

080061f0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b085      	sub	sp, #20
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	460b      	mov	r3, r1
 80061fa:	70fb      	strb	r3, [r7, #3]
 80061fc:	4613      	mov	r3, r2
 80061fe:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006206:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006208:	78fb      	ldrb	r3, [r7, #3]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d107      	bne.n	800621e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800620e:	883b      	ldrh	r3, [r7, #0]
 8006210:	0419      	lsls	r1, r3, #16
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68ba      	ldr	r2, [r7, #8]
 8006218:	430a      	orrs	r2, r1
 800621a:	629a      	str	r2, [r3, #40]	; 0x28
 800621c:	e028      	b.n	8006270 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006224:	0c1b      	lsrs	r3, r3, #16
 8006226:	68ba      	ldr	r2, [r7, #8]
 8006228:	4413      	add	r3, r2
 800622a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800622c:	2300      	movs	r3, #0
 800622e:	73fb      	strb	r3, [r7, #15]
 8006230:	e00d      	b.n	800624e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	7bfb      	ldrb	r3, [r7, #15]
 8006238:	3340      	adds	r3, #64	; 0x40
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	4413      	add	r3, r2
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	0c1b      	lsrs	r3, r3, #16
 8006242:	68ba      	ldr	r2, [r7, #8]
 8006244:	4413      	add	r3, r2
 8006246:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006248:	7bfb      	ldrb	r3, [r7, #15]
 800624a:	3301      	adds	r3, #1
 800624c:	73fb      	strb	r3, [r7, #15]
 800624e:	7bfa      	ldrb	r2, [r7, #15]
 8006250:	78fb      	ldrb	r3, [r7, #3]
 8006252:	3b01      	subs	r3, #1
 8006254:	429a      	cmp	r2, r3
 8006256:	d3ec      	bcc.n	8006232 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006258:	883b      	ldrh	r3, [r7, #0]
 800625a:	0418      	lsls	r0, r3, #16
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6819      	ldr	r1, [r3, #0]
 8006260:	78fb      	ldrb	r3, [r7, #3]
 8006262:	3b01      	subs	r3, #1
 8006264:	68ba      	ldr	r2, [r7, #8]
 8006266:	4302      	orrs	r2, r0
 8006268:	3340      	adds	r3, #64	; 0x40
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	440b      	add	r3, r1
 800626e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	3714      	adds	r7, #20
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr

0800627e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800627e:	b480      	push	{r7}
 8006280:	b083      	sub	sp, #12
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
 8006286:	460b      	mov	r3, r1
 8006288:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	887a      	ldrh	r2, [r7, #2]
 8006290:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006292:	2300      	movs	r3, #0
}
 8006294:	4618      	mov	r0, r3
 8006296:	370c      	adds	r7, #12
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	460b      	mov	r3, r1
 80062aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80062ac:	bf00      	nop
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b086      	sub	sp, #24
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d101      	bne.n	80062ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e25b      	b.n	8006782 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 0301 	and.w	r3, r3, #1
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d075      	beq.n	80063c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80062d6:	4ba3      	ldr	r3, [pc, #652]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	f003 030c 	and.w	r3, r3, #12
 80062de:	2b04      	cmp	r3, #4
 80062e0:	d00c      	beq.n	80062fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062e2:	4ba0      	ldr	r3, [pc, #640]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80062ea:	2b08      	cmp	r3, #8
 80062ec:	d112      	bne.n	8006314 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062ee:	4b9d      	ldr	r3, [pc, #628]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062fa:	d10b      	bne.n	8006314 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062fc:	4b99      	ldr	r3, [pc, #612]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006304:	2b00      	cmp	r3, #0
 8006306:	d05b      	beq.n	80063c0 <HAL_RCC_OscConfig+0x108>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d157      	bne.n	80063c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	e236      	b.n	8006782 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800631c:	d106      	bne.n	800632c <HAL_RCC_OscConfig+0x74>
 800631e:	4b91      	ldr	r3, [pc, #580]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a90      	ldr	r2, [pc, #576]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 8006324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006328:	6013      	str	r3, [r2, #0]
 800632a:	e01d      	b.n	8006368 <HAL_RCC_OscConfig+0xb0>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006334:	d10c      	bne.n	8006350 <HAL_RCC_OscConfig+0x98>
 8006336:	4b8b      	ldr	r3, [pc, #556]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a8a      	ldr	r2, [pc, #552]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 800633c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006340:	6013      	str	r3, [r2, #0]
 8006342:	4b88      	ldr	r3, [pc, #544]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a87      	ldr	r2, [pc, #540]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 8006348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800634c:	6013      	str	r3, [r2, #0]
 800634e:	e00b      	b.n	8006368 <HAL_RCC_OscConfig+0xb0>
 8006350:	4b84      	ldr	r3, [pc, #528]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a83      	ldr	r2, [pc, #524]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 8006356:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800635a:	6013      	str	r3, [r2, #0]
 800635c:	4b81      	ldr	r3, [pc, #516]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a80      	ldr	r2, [pc, #512]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 8006362:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006366:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d013      	beq.n	8006398 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006370:	f7fc ff8e 	bl	8003290 <HAL_GetTick>
 8006374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006376:	e008      	b.n	800638a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006378:	f7fc ff8a 	bl	8003290 <HAL_GetTick>
 800637c:	4602      	mov	r2, r0
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	1ad3      	subs	r3, r2, r3
 8006382:	2b64      	cmp	r3, #100	; 0x64
 8006384:	d901      	bls.n	800638a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006386:	2303      	movs	r3, #3
 8006388:	e1fb      	b.n	8006782 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800638a:	4b76      	ldr	r3, [pc, #472]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006392:	2b00      	cmp	r3, #0
 8006394:	d0f0      	beq.n	8006378 <HAL_RCC_OscConfig+0xc0>
 8006396:	e014      	b.n	80063c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006398:	f7fc ff7a 	bl	8003290 <HAL_GetTick>
 800639c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800639e:	e008      	b.n	80063b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063a0:	f7fc ff76 	bl	8003290 <HAL_GetTick>
 80063a4:	4602      	mov	r2, r0
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	2b64      	cmp	r3, #100	; 0x64
 80063ac:	d901      	bls.n	80063b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80063ae:	2303      	movs	r3, #3
 80063b0:	e1e7      	b.n	8006782 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063b2:	4b6c      	ldr	r3, [pc, #432]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d1f0      	bne.n	80063a0 <HAL_RCC_OscConfig+0xe8>
 80063be:	e000      	b.n	80063c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f003 0302 	and.w	r3, r3, #2
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d063      	beq.n	8006496 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80063ce:	4b65      	ldr	r3, [pc, #404]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	f003 030c 	and.w	r3, r3, #12
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00b      	beq.n	80063f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063da:	4b62      	ldr	r3, [pc, #392]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80063e2:	2b08      	cmp	r3, #8
 80063e4:	d11c      	bne.n	8006420 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063e6:	4b5f      	ldr	r3, [pc, #380]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d116      	bne.n	8006420 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063f2:	4b5c      	ldr	r3, [pc, #368]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 0302 	and.w	r3, r3, #2
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d005      	beq.n	800640a <HAL_RCC_OscConfig+0x152>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	2b01      	cmp	r3, #1
 8006404:	d001      	beq.n	800640a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e1bb      	b.n	8006782 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800640a:	4b56      	ldr	r3, [pc, #344]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	00db      	lsls	r3, r3, #3
 8006418:	4952      	ldr	r1, [pc, #328]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 800641a:	4313      	orrs	r3, r2
 800641c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800641e:	e03a      	b.n	8006496 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d020      	beq.n	800646a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006428:	4b4f      	ldr	r3, [pc, #316]	; (8006568 <HAL_RCC_OscConfig+0x2b0>)
 800642a:	2201      	movs	r2, #1
 800642c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800642e:	f7fc ff2f 	bl	8003290 <HAL_GetTick>
 8006432:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006434:	e008      	b.n	8006448 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006436:	f7fc ff2b 	bl	8003290 <HAL_GetTick>
 800643a:	4602      	mov	r2, r0
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	1ad3      	subs	r3, r2, r3
 8006440:	2b02      	cmp	r3, #2
 8006442:	d901      	bls.n	8006448 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006444:	2303      	movs	r3, #3
 8006446:	e19c      	b.n	8006782 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006448:	4b46      	ldr	r3, [pc, #280]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 0302 	and.w	r3, r3, #2
 8006450:	2b00      	cmp	r3, #0
 8006452:	d0f0      	beq.n	8006436 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006454:	4b43      	ldr	r3, [pc, #268]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	00db      	lsls	r3, r3, #3
 8006462:	4940      	ldr	r1, [pc, #256]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 8006464:	4313      	orrs	r3, r2
 8006466:	600b      	str	r3, [r1, #0]
 8006468:	e015      	b.n	8006496 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800646a:	4b3f      	ldr	r3, [pc, #252]	; (8006568 <HAL_RCC_OscConfig+0x2b0>)
 800646c:	2200      	movs	r2, #0
 800646e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006470:	f7fc ff0e 	bl	8003290 <HAL_GetTick>
 8006474:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006476:	e008      	b.n	800648a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006478:	f7fc ff0a 	bl	8003290 <HAL_GetTick>
 800647c:	4602      	mov	r2, r0
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	2b02      	cmp	r3, #2
 8006484:	d901      	bls.n	800648a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006486:	2303      	movs	r3, #3
 8006488:	e17b      	b.n	8006782 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800648a:	4b36      	ldr	r3, [pc, #216]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 0302 	and.w	r3, r3, #2
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1f0      	bne.n	8006478 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 0308 	and.w	r3, r3, #8
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d030      	beq.n	8006504 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	695b      	ldr	r3, [r3, #20]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d016      	beq.n	80064d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064aa:	4b30      	ldr	r3, [pc, #192]	; (800656c <HAL_RCC_OscConfig+0x2b4>)
 80064ac:	2201      	movs	r2, #1
 80064ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064b0:	f7fc feee 	bl	8003290 <HAL_GetTick>
 80064b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064b6:	e008      	b.n	80064ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064b8:	f7fc feea 	bl	8003290 <HAL_GetTick>
 80064bc:	4602      	mov	r2, r0
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	2b02      	cmp	r3, #2
 80064c4:	d901      	bls.n	80064ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80064c6:	2303      	movs	r3, #3
 80064c8:	e15b      	b.n	8006782 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064ca:	4b26      	ldr	r3, [pc, #152]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 80064cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064ce:	f003 0302 	and.w	r3, r3, #2
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d0f0      	beq.n	80064b8 <HAL_RCC_OscConfig+0x200>
 80064d6:	e015      	b.n	8006504 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80064d8:	4b24      	ldr	r3, [pc, #144]	; (800656c <HAL_RCC_OscConfig+0x2b4>)
 80064da:	2200      	movs	r2, #0
 80064dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064de:	f7fc fed7 	bl	8003290 <HAL_GetTick>
 80064e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064e4:	e008      	b.n	80064f8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064e6:	f7fc fed3 	bl	8003290 <HAL_GetTick>
 80064ea:	4602      	mov	r2, r0
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	d901      	bls.n	80064f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80064f4:	2303      	movs	r3, #3
 80064f6:	e144      	b.n	8006782 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064f8:	4b1a      	ldr	r3, [pc, #104]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 80064fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064fc:	f003 0302 	and.w	r3, r3, #2
 8006500:	2b00      	cmp	r3, #0
 8006502:	d1f0      	bne.n	80064e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 0304 	and.w	r3, r3, #4
 800650c:	2b00      	cmp	r3, #0
 800650e:	f000 80a0 	beq.w	8006652 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006512:	2300      	movs	r3, #0
 8006514:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006516:	4b13      	ldr	r3, [pc, #76]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 8006518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800651e:	2b00      	cmp	r3, #0
 8006520:	d10f      	bne.n	8006542 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006522:	2300      	movs	r3, #0
 8006524:	60bb      	str	r3, [r7, #8]
 8006526:	4b0f      	ldr	r3, [pc, #60]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 8006528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800652a:	4a0e      	ldr	r2, [pc, #56]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 800652c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006530:	6413      	str	r3, [r2, #64]	; 0x40
 8006532:	4b0c      	ldr	r3, [pc, #48]	; (8006564 <HAL_RCC_OscConfig+0x2ac>)
 8006534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800653a:	60bb      	str	r3, [r7, #8]
 800653c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800653e:	2301      	movs	r3, #1
 8006540:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006542:	4b0b      	ldr	r3, [pc, #44]	; (8006570 <HAL_RCC_OscConfig+0x2b8>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800654a:	2b00      	cmp	r3, #0
 800654c:	d121      	bne.n	8006592 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800654e:	4b08      	ldr	r3, [pc, #32]	; (8006570 <HAL_RCC_OscConfig+0x2b8>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a07      	ldr	r2, [pc, #28]	; (8006570 <HAL_RCC_OscConfig+0x2b8>)
 8006554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006558:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800655a:	f7fc fe99 	bl	8003290 <HAL_GetTick>
 800655e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006560:	e011      	b.n	8006586 <HAL_RCC_OscConfig+0x2ce>
 8006562:	bf00      	nop
 8006564:	40023800 	.word	0x40023800
 8006568:	42470000 	.word	0x42470000
 800656c:	42470e80 	.word	0x42470e80
 8006570:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006574:	f7fc fe8c 	bl	8003290 <HAL_GetTick>
 8006578:	4602      	mov	r2, r0
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	1ad3      	subs	r3, r2, r3
 800657e:	2b02      	cmp	r3, #2
 8006580:	d901      	bls.n	8006586 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006582:	2303      	movs	r3, #3
 8006584:	e0fd      	b.n	8006782 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006586:	4b81      	ldr	r3, [pc, #516]	; (800678c <HAL_RCC_OscConfig+0x4d4>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800658e:	2b00      	cmp	r3, #0
 8006590:	d0f0      	beq.n	8006574 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	2b01      	cmp	r3, #1
 8006598:	d106      	bne.n	80065a8 <HAL_RCC_OscConfig+0x2f0>
 800659a:	4b7d      	ldr	r3, [pc, #500]	; (8006790 <HAL_RCC_OscConfig+0x4d8>)
 800659c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800659e:	4a7c      	ldr	r2, [pc, #496]	; (8006790 <HAL_RCC_OscConfig+0x4d8>)
 80065a0:	f043 0301 	orr.w	r3, r3, #1
 80065a4:	6713      	str	r3, [r2, #112]	; 0x70
 80065a6:	e01c      	b.n	80065e2 <HAL_RCC_OscConfig+0x32a>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	2b05      	cmp	r3, #5
 80065ae:	d10c      	bne.n	80065ca <HAL_RCC_OscConfig+0x312>
 80065b0:	4b77      	ldr	r3, [pc, #476]	; (8006790 <HAL_RCC_OscConfig+0x4d8>)
 80065b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065b4:	4a76      	ldr	r2, [pc, #472]	; (8006790 <HAL_RCC_OscConfig+0x4d8>)
 80065b6:	f043 0304 	orr.w	r3, r3, #4
 80065ba:	6713      	str	r3, [r2, #112]	; 0x70
 80065bc:	4b74      	ldr	r3, [pc, #464]	; (8006790 <HAL_RCC_OscConfig+0x4d8>)
 80065be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065c0:	4a73      	ldr	r2, [pc, #460]	; (8006790 <HAL_RCC_OscConfig+0x4d8>)
 80065c2:	f043 0301 	orr.w	r3, r3, #1
 80065c6:	6713      	str	r3, [r2, #112]	; 0x70
 80065c8:	e00b      	b.n	80065e2 <HAL_RCC_OscConfig+0x32a>
 80065ca:	4b71      	ldr	r3, [pc, #452]	; (8006790 <HAL_RCC_OscConfig+0x4d8>)
 80065cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ce:	4a70      	ldr	r2, [pc, #448]	; (8006790 <HAL_RCC_OscConfig+0x4d8>)
 80065d0:	f023 0301 	bic.w	r3, r3, #1
 80065d4:	6713      	str	r3, [r2, #112]	; 0x70
 80065d6:	4b6e      	ldr	r3, [pc, #440]	; (8006790 <HAL_RCC_OscConfig+0x4d8>)
 80065d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065da:	4a6d      	ldr	r2, [pc, #436]	; (8006790 <HAL_RCC_OscConfig+0x4d8>)
 80065dc:	f023 0304 	bic.w	r3, r3, #4
 80065e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d015      	beq.n	8006616 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065ea:	f7fc fe51 	bl	8003290 <HAL_GetTick>
 80065ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065f0:	e00a      	b.n	8006608 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065f2:	f7fc fe4d 	bl	8003290 <HAL_GetTick>
 80065f6:	4602      	mov	r2, r0
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	1ad3      	subs	r3, r2, r3
 80065fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006600:	4293      	cmp	r3, r2
 8006602:	d901      	bls.n	8006608 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006604:	2303      	movs	r3, #3
 8006606:	e0bc      	b.n	8006782 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006608:	4b61      	ldr	r3, [pc, #388]	; (8006790 <HAL_RCC_OscConfig+0x4d8>)
 800660a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800660c:	f003 0302 	and.w	r3, r3, #2
 8006610:	2b00      	cmp	r3, #0
 8006612:	d0ee      	beq.n	80065f2 <HAL_RCC_OscConfig+0x33a>
 8006614:	e014      	b.n	8006640 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006616:	f7fc fe3b 	bl	8003290 <HAL_GetTick>
 800661a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800661c:	e00a      	b.n	8006634 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800661e:	f7fc fe37 	bl	8003290 <HAL_GetTick>
 8006622:	4602      	mov	r2, r0
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	1ad3      	subs	r3, r2, r3
 8006628:	f241 3288 	movw	r2, #5000	; 0x1388
 800662c:	4293      	cmp	r3, r2
 800662e:	d901      	bls.n	8006634 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006630:	2303      	movs	r3, #3
 8006632:	e0a6      	b.n	8006782 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006634:	4b56      	ldr	r3, [pc, #344]	; (8006790 <HAL_RCC_OscConfig+0x4d8>)
 8006636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006638:	f003 0302 	and.w	r3, r3, #2
 800663c:	2b00      	cmp	r3, #0
 800663e:	d1ee      	bne.n	800661e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006640:	7dfb      	ldrb	r3, [r7, #23]
 8006642:	2b01      	cmp	r3, #1
 8006644:	d105      	bne.n	8006652 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006646:	4b52      	ldr	r3, [pc, #328]	; (8006790 <HAL_RCC_OscConfig+0x4d8>)
 8006648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664a:	4a51      	ldr	r2, [pc, #324]	; (8006790 <HAL_RCC_OscConfig+0x4d8>)
 800664c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006650:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	699b      	ldr	r3, [r3, #24]
 8006656:	2b00      	cmp	r3, #0
 8006658:	f000 8092 	beq.w	8006780 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800665c:	4b4c      	ldr	r3, [pc, #304]	; (8006790 <HAL_RCC_OscConfig+0x4d8>)
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	f003 030c 	and.w	r3, r3, #12
 8006664:	2b08      	cmp	r3, #8
 8006666:	d05c      	beq.n	8006722 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	699b      	ldr	r3, [r3, #24]
 800666c:	2b02      	cmp	r3, #2
 800666e:	d141      	bne.n	80066f4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006670:	4b48      	ldr	r3, [pc, #288]	; (8006794 <HAL_RCC_OscConfig+0x4dc>)
 8006672:	2200      	movs	r2, #0
 8006674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006676:	f7fc fe0b 	bl	8003290 <HAL_GetTick>
 800667a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800667c:	e008      	b.n	8006690 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800667e:	f7fc fe07 	bl	8003290 <HAL_GetTick>
 8006682:	4602      	mov	r2, r0
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	1ad3      	subs	r3, r2, r3
 8006688:	2b02      	cmp	r3, #2
 800668a:	d901      	bls.n	8006690 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800668c:	2303      	movs	r3, #3
 800668e:	e078      	b.n	8006782 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006690:	4b3f      	ldr	r3, [pc, #252]	; (8006790 <HAL_RCC_OscConfig+0x4d8>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006698:	2b00      	cmp	r3, #0
 800669a:	d1f0      	bne.n	800667e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	69da      	ldr	r2, [r3, #28]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6a1b      	ldr	r3, [r3, #32]
 80066a4:	431a      	orrs	r2, r3
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066aa:	019b      	lsls	r3, r3, #6
 80066ac:	431a      	orrs	r2, r3
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066b2:	085b      	lsrs	r3, r3, #1
 80066b4:	3b01      	subs	r3, #1
 80066b6:	041b      	lsls	r3, r3, #16
 80066b8:	431a      	orrs	r2, r3
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066be:	061b      	lsls	r3, r3, #24
 80066c0:	4933      	ldr	r1, [pc, #204]	; (8006790 <HAL_RCC_OscConfig+0x4d8>)
 80066c2:	4313      	orrs	r3, r2
 80066c4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066c6:	4b33      	ldr	r3, [pc, #204]	; (8006794 <HAL_RCC_OscConfig+0x4dc>)
 80066c8:	2201      	movs	r2, #1
 80066ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066cc:	f7fc fde0 	bl	8003290 <HAL_GetTick>
 80066d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066d2:	e008      	b.n	80066e6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066d4:	f7fc fddc 	bl	8003290 <HAL_GetTick>
 80066d8:	4602      	mov	r2, r0
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	2b02      	cmp	r3, #2
 80066e0:	d901      	bls.n	80066e6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80066e2:	2303      	movs	r3, #3
 80066e4:	e04d      	b.n	8006782 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066e6:	4b2a      	ldr	r3, [pc, #168]	; (8006790 <HAL_RCC_OscConfig+0x4d8>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d0f0      	beq.n	80066d4 <HAL_RCC_OscConfig+0x41c>
 80066f2:	e045      	b.n	8006780 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066f4:	4b27      	ldr	r3, [pc, #156]	; (8006794 <HAL_RCC_OscConfig+0x4dc>)
 80066f6:	2200      	movs	r2, #0
 80066f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066fa:	f7fc fdc9 	bl	8003290 <HAL_GetTick>
 80066fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006700:	e008      	b.n	8006714 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006702:	f7fc fdc5 	bl	8003290 <HAL_GetTick>
 8006706:	4602      	mov	r2, r0
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	1ad3      	subs	r3, r2, r3
 800670c:	2b02      	cmp	r3, #2
 800670e:	d901      	bls.n	8006714 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006710:	2303      	movs	r3, #3
 8006712:	e036      	b.n	8006782 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006714:	4b1e      	ldr	r3, [pc, #120]	; (8006790 <HAL_RCC_OscConfig+0x4d8>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800671c:	2b00      	cmp	r3, #0
 800671e:	d1f0      	bne.n	8006702 <HAL_RCC_OscConfig+0x44a>
 8006720:	e02e      	b.n	8006780 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	699b      	ldr	r3, [r3, #24]
 8006726:	2b01      	cmp	r3, #1
 8006728:	d101      	bne.n	800672e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	e029      	b.n	8006782 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800672e:	4b18      	ldr	r3, [pc, #96]	; (8006790 <HAL_RCC_OscConfig+0x4d8>)
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	69db      	ldr	r3, [r3, #28]
 800673e:	429a      	cmp	r2, r3
 8006740:	d11c      	bne.n	800677c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800674c:	429a      	cmp	r2, r3
 800674e:	d115      	bne.n	800677c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006750:	68fa      	ldr	r2, [r7, #12]
 8006752:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006756:	4013      	ands	r3, r2
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800675c:	4293      	cmp	r3, r2
 800675e:	d10d      	bne.n	800677c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800676a:	429a      	cmp	r2, r3
 800676c:	d106      	bne.n	800677c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006778:	429a      	cmp	r2, r3
 800677a:	d001      	beq.n	8006780 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	e000      	b.n	8006782 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006780:	2300      	movs	r3, #0
}
 8006782:	4618      	mov	r0, r3
 8006784:	3718      	adds	r7, #24
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop
 800678c:	40007000 	.word	0x40007000
 8006790:	40023800 	.word	0x40023800
 8006794:	42470060 	.word	0x42470060

08006798 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b084      	sub	sp, #16
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d101      	bne.n	80067ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	e0cc      	b.n	8006946 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80067ac:	4b68      	ldr	r3, [pc, #416]	; (8006950 <HAL_RCC_ClockConfig+0x1b8>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 030f 	and.w	r3, r3, #15
 80067b4:	683a      	ldr	r2, [r7, #0]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d90c      	bls.n	80067d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067ba:	4b65      	ldr	r3, [pc, #404]	; (8006950 <HAL_RCC_ClockConfig+0x1b8>)
 80067bc:	683a      	ldr	r2, [r7, #0]
 80067be:	b2d2      	uxtb	r2, r2
 80067c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067c2:	4b63      	ldr	r3, [pc, #396]	; (8006950 <HAL_RCC_ClockConfig+0x1b8>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 030f 	and.w	r3, r3, #15
 80067ca:	683a      	ldr	r2, [r7, #0]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d001      	beq.n	80067d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	e0b8      	b.n	8006946 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 0302 	and.w	r3, r3, #2
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d020      	beq.n	8006822 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 0304 	and.w	r3, r3, #4
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d005      	beq.n	80067f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80067ec:	4b59      	ldr	r3, [pc, #356]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	4a58      	ldr	r2, [pc, #352]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 80067f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80067f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 0308 	and.w	r3, r3, #8
 8006800:	2b00      	cmp	r3, #0
 8006802:	d005      	beq.n	8006810 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006804:	4b53      	ldr	r3, [pc, #332]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	4a52      	ldr	r2, [pc, #328]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 800680a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800680e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006810:	4b50      	ldr	r3, [pc, #320]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	494d      	ldr	r1, [pc, #308]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 800681e:	4313      	orrs	r3, r2
 8006820:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f003 0301 	and.w	r3, r3, #1
 800682a:	2b00      	cmp	r3, #0
 800682c:	d044      	beq.n	80068b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	2b01      	cmp	r3, #1
 8006834:	d107      	bne.n	8006846 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006836:	4b47      	ldr	r3, [pc, #284]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800683e:	2b00      	cmp	r3, #0
 8006840:	d119      	bne.n	8006876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	e07f      	b.n	8006946 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	2b02      	cmp	r3, #2
 800684c:	d003      	beq.n	8006856 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006852:	2b03      	cmp	r3, #3
 8006854:	d107      	bne.n	8006866 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006856:	4b3f      	ldr	r3, [pc, #252]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800685e:	2b00      	cmp	r3, #0
 8006860:	d109      	bne.n	8006876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	e06f      	b.n	8006946 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006866:	4b3b      	ldr	r3, [pc, #236]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 0302 	and.w	r3, r3, #2
 800686e:	2b00      	cmp	r3, #0
 8006870:	d101      	bne.n	8006876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e067      	b.n	8006946 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006876:	4b37      	ldr	r3, [pc, #220]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	f023 0203 	bic.w	r2, r3, #3
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	4934      	ldr	r1, [pc, #208]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 8006884:	4313      	orrs	r3, r2
 8006886:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006888:	f7fc fd02 	bl	8003290 <HAL_GetTick>
 800688c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800688e:	e00a      	b.n	80068a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006890:	f7fc fcfe 	bl	8003290 <HAL_GetTick>
 8006894:	4602      	mov	r2, r0
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	1ad3      	subs	r3, r2, r3
 800689a:	f241 3288 	movw	r2, #5000	; 0x1388
 800689e:	4293      	cmp	r3, r2
 80068a0:	d901      	bls.n	80068a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80068a2:	2303      	movs	r3, #3
 80068a4:	e04f      	b.n	8006946 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068a6:	4b2b      	ldr	r3, [pc, #172]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	f003 020c 	and.w	r2, r3, #12
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d1eb      	bne.n	8006890 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80068b8:	4b25      	ldr	r3, [pc, #148]	; (8006950 <HAL_RCC_ClockConfig+0x1b8>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 030f 	and.w	r3, r3, #15
 80068c0:	683a      	ldr	r2, [r7, #0]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d20c      	bcs.n	80068e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068c6:	4b22      	ldr	r3, [pc, #136]	; (8006950 <HAL_RCC_ClockConfig+0x1b8>)
 80068c8:	683a      	ldr	r2, [r7, #0]
 80068ca:	b2d2      	uxtb	r2, r2
 80068cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068ce:	4b20      	ldr	r3, [pc, #128]	; (8006950 <HAL_RCC_ClockConfig+0x1b8>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f003 030f 	and.w	r3, r3, #15
 80068d6:	683a      	ldr	r2, [r7, #0]
 80068d8:	429a      	cmp	r2, r3
 80068da:	d001      	beq.n	80068e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	e032      	b.n	8006946 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f003 0304 	and.w	r3, r3, #4
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d008      	beq.n	80068fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80068ec:	4b19      	ldr	r3, [pc, #100]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	4916      	ldr	r1, [pc, #88]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 80068fa:	4313      	orrs	r3, r2
 80068fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 0308 	and.w	r3, r3, #8
 8006906:	2b00      	cmp	r3, #0
 8006908:	d009      	beq.n	800691e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800690a:	4b12      	ldr	r3, [pc, #72]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	00db      	lsls	r3, r3, #3
 8006918:	490e      	ldr	r1, [pc, #56]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 800691a:	4313      	orrs	r3, r2
 800691c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800691e:	f000 f821 	bl	8006964 <HAL_RCC_GetSysClockFreq>
 8006922:	4601      	mov	r1, r0
 8006924:	4b0b      	ldr	r3, [pc, #44]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	091b      	lsrs	r3, r3, #4
 800692a:	f003 030f 	and.w	r3, r3, #15
 800692e:	4a0a      	ldr	r2, [pc, #40]	; (8006958 <HAL_RCC_ClockConfig+0x1c0>)
 8006930:	5cd3      	ldrb	r3, [r2, r3]
 8006932:	fa21 f303 	lsr.w	r3, r1, r3
 8006936:	4a09      	ldr	r2, [pc, #36]	; (800695c <HAL_RCC_ClockConfig+0x1c4>)
 8006938:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800693a:	4b09      	ldr	r3, [pc, #36]	; (8006960 <HAL_RCC_ClockConfig+0x1c8>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4618      	mov	r0, r3
 8006940:	f7fc fc62 	bl	8003208 <HAL_InitTick>

  return HAL_OK;
 8006944:	2300      	movs	r3, #0
}
 8006946:	4618      	mov	r0, r3
 8006948:	3710      	adds	r7, #16
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	40023c00 	.word	0x40023c00
 8006954:	40023800 	.word	0x40023800
 8006958:	0801389c 	.word	0x0801389c
 800695c:	20000014 	.word	0x20000014
 8006960:	20000018 	.word	0x20000018

08006964 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006966:	b085      	sub	sp, #20
 8006968:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800696a:	2300      	movs	r3, #0
 800696c:	607b      	str	r3, [r7, #4]
 800696e:	2300      	movs	r3, #0
 8006970:	60fb      	str	r3, [r7, #12]
 8006972:	2300      	movs	r3, #0
 8006974:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006976:	2300      	movs	r3, #0
 8006978:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800697a:	4b50      	ldr	r3, [pc, #320]	; (8006abc <HAL_RCC_GetSysClockFreq+0x158>)
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	f003 030c 	and.w	r3, r3, #12
 8006982:	2b04      	cmp	r3, #4
 8006984:	d007      	beq.n	8006996 <HAL_RCC_GetSysClockFreq+0x32>
 8006986:	2b08      	cmp	r3, #8
 8006988:	d008      	beq.n	800699c <HAL_RCC_GetSysClockFreq+0x38>
 800698a:	2b00      	cmp	r3, #0
 800698c:	f040 808d 	bne.w	8006aaa <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006990:	4b4b      	ldr	r3, [pc, #300]	; (8006ac0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006992:	60bb      	str	r3, [r7, #8]
       break;
 8006994:	e08c      	b.n	8006ab0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006996:	4b4b      	ldr	r3, [pc, #300]	; (8006ac4 <HAL_RCC_GetSysClockFreq+0x160>)
 8006998:	60bb      	str	r3, [r7, #8]
      break;
 800699a:	e089      	b.n	8006ab0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800699c:	4b47      	ldr	r3, [pc, #284]	; (8006abc <HAL_RCC_GetSysClockFreq+0x158>)
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069a4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80069a6:	4b45      	ldr	r3, [pc, #276]	; (8006abc <HAL_RCC_GetSysClockFreq+0x158>)
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d023      	beq.n	80069fa <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069b2:	4b42      	ldr	r3, [pc, #264]	; (8006abc <HAL_RCC_GetSysClockFreq+0x158>)
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	099b      	lsrs	r3, r3, #6
 80069b8:	f04f 0400 	mov.w	r4, #0
 80069bc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80069c0:	f04f 0200 	mov.w	r2, #0
 80069c4:	ea03 0501 	and.w	r5, r3, r1
 80069c8:	ea04 0602 	and.w	r6, r4, r2
 80069cc:	4a3d      	ldr	r2, [pc, #244]	; (8006ac4 <HAL_RCC_GetSysClockFreq+0x160>)
 80069ce:	fb02 f106 	mul.w	r1, r2, r6
 80069d2:	2200      	movs	r2, #0
 80069d4:	fb02 f205 	mul.w	r2, r2, r5
 80069d8:	440a      	add	r2, r1
 80069da:	493a      	ldr	r1, [pc, #232]	; (8006ac4 <HAL_RCC_GetSysClockFreq+0x160>)
 80069dc:	fba5 0101 	umull	r0, r1, r5, r1
 80069e0:	1853      	adds	r3, r2, r1
 80069e2:	4619      	mov	r1, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f04f 0400 	mov.w	r4, #0
 80069ea:	461a      	mov	r2, r3
 80069ec:	4623      	mov	r3, r4
 80069ee:	f7fa f99b 	bl	8000d28 <__aeabi_uldivmod>
 80069f2:	4603      	mov	r3, r0
 80069f4:	460c      	mov	r4, r1
 80069f6:	60fb      	str	r3, [r7, #12]
 80069f8:	e049      	b.n	8006a8e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069fa:	4b30      	ldr	r3, [pc, #192]	; (8006abc <HAL_RCC_GetSysClockFreq+0x158>)
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	099b      	lsrs	r3, r3, #6
 8006a00:	f04f 0400 	mov.w	r4, #0
 8006a04:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006a08:	f04f 0200 	mov.w	r2, #0
 8006a0c:	ea03 0501 	and.w	r5, r3, r1
 8006a10:	ea04 0602 	and.w	r6, r4, r2
 8006a14:	4629      	mov	r1, r5
 8006a16:	4632      	mov	r2, r6
 8006a18:	f04f 0300 	mov.w	r3, #0
 8006a1c:	f04f 0400 	mov.w	r4, #0
 8006a20:	0154      	lsls	r4, r2, #5
 8006a22:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006a26:	014b      	lsls	r3, r1, #5
 8006a28:	4619      	mov	r1, r3
 8006a2a:	4622      	mov	r2, r4
 8006a2c:	1b49      	subs	r1, r1, r5
 8006a2e:	eb62 0206 	sbc.w	r2, r2, r6
 8006a32:	f04f 0300 	mov.w	r3, #0
 8006a36:	f04f 0400 	mov.w	r4, #0
 8006a3a:	0194      	lsls	r4, r2, #6
 8006a3c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006a40:	018b      	lsls	r3, r1, #6
 8006a42:	1a5b      	subs	r3, r3, r1
 8006a44:	eb64 0402 	sbc.w	r4, r4, r2
 8006a48:	f04f 0100 	mov.w	r1, #0
 8006a4c:	f04f 0200 	mov.w	r2, #0
 8006a50:	00e2      	lsls	r2, r4, #3
 8006a52:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006a56:	00d9      	lsls	r1, r3, #3
 8006a58:	460b      	mov	r3, r1
 8006a5a:	4614      	mov	r4, r2
 8006a5c:	195b      	adds	r3, r3, r5
 8006a5e:	eb44 0406 	adc.w	r4, r4, r6
 8006a62:	f04f 0100 	mov.w	r1, #0
 8006a66:	f04f 0200 	mov.w	r2, #0
 8006a6a:	02a2      	lsls	r2, r4, #10
 8006a6c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006a70:	0299      	lsls	r1, r3, #10
 8006a72:	460b      	mov	r3, r1
 8006a74:	4614      	mov	r4, r2
 8006a76:	4618      	mov	r0, r3
 8006a78:	4621      	mov	r1, r4
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f04f 0400 	mov.w	r4, #0
 8006a80:	461a      	mov	r2, r3
 8006a82:	4623      	mov	r3, r4
 8006a84:	f7fa f950 	bl	8000d28 <__aeabi_uldivmod>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	460c      	mov	r4, r1
 8006a8c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006a8e:	4b0b      	ldr	r3, [pc, #44]	; (8006abc <HAL_RCC_GetSysClockFreq+0x158>)
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	0c1b      	lsrs	r3, r3, #16
 8006a94:	f003 0303 	and.w	r3, r3, #3
 8006a98:	3301      	adds	r3, #1
 8006a9a:	005b      	lsls	r3, r3, #1
 8006a9c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006a9e:	68fa      	ldr	r2, [r7, #12]
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aa6:	60bb      	str	r3, [r7, #8]
      break;
 8006aa8:	e002      	b.n	8006ab0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006aaa:	4b05      	ldr	r3, [pc, #20]	; (8006ac0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006aac:	60bb      	str	r3, [r7, #8]
      break;
 8006aae:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ab0:	68bb      	ldr	r3, [r7, #8]
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3714      	adds	r7, #20
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006aba:	bf00      	nop
 8006abc:	40023800 	.word	0x40023800
 8006ac0:	00f42400 	.word	0x00f42400
 8006ac4:	00b71b00 	.word	0x00b71b00

08006ac8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006acc:	4b03      	ldr	r3, [pc, #12]	; (8006adc <HAL_RCC_GetHCLKFreq+0x14>)
 8006ace:	681b      	ldr	r3, [r3, #0]
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr
 8006ada:	bf00      	nop
 8006adc:	20000014 	.word	0x20000014

08006ae0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006ae4:	f7ff fff0 	bl	8006ac8 <HAL_RCC_GetHCLKFreq>
 8006ae8:	4601      	mov	r1, r0
 8006aea:	4b05      	ldr	r3, [pc, #20]	; (8006b00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	0a9b      	lsrs	r3, r3, #10
 8006af0:	f003 0307 	and.w	r3, r3, #7
 8006af4:	4a03      	ldr	r2, [pc, #12]	; (8006b04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006af6:	5cd3      	ldrb	r3, [r2, r3]
 8006af8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	bd80      	pop	{r7, pc}
 8006b00:	40023800 	.word	0x40023800
 8006b04:	080138ac 	.word	0x080138ac

08006b08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006b0c:	f7ff ffdc 	bl	8006ac8 <HAL_RCC_GetHCLKFreq>
 8006b10:	4601      	mov	r1, r0
 8006b12:	4b05      	ldr	r3, [pc, #20]	; (8006b28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	0b5b      	lsrs	r3, r3, #13
 8006b18:	f003 0307 	and.w	r3, r3, #7
 8006b1c:	4a03      	ldr	r2, [pc, #12]	; (8006b2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b1e:	5cd3      	ldrb	r3, [r2, r3]
 8006b20:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	40023800 	.word	0x40023800
 8006b2c:	080138ac 	.word	0x080138ac

08006b30 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b086      	sub	sp, #24
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 0301 	and.w	r3, r3, #1
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d105      	bne.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d035      	beq.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006b58:	4b62      	ldr	r3, [pc, #392]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006b5e:	f7fc fb97 	bl	8003290 <HAL_GetTick>
 8006b62:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006b64:	e008      	b.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006b66:	f7fc fb93 	bl	8003290 <HAL_GetTick>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	1ad3      	subs	r3, r2, r3
 8006b70:	2b02      	cmp	r3, #2
 8006b72:	d901      	bls.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b74:	2303      	movs	r3, #3
 8006b76:	e0b0      	b.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006b78:	4b5b      	ldr	r3, [pc, #364]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d1f0      	bne.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	019a      	lsls	r2, r3, #6
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	071b      	lsls	r3, r3, #28
 8006b90:	4955      	ldr	r1, [pc, #340]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b92:	4313      	orrs	r3, r2
 8006b94:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006b98:	4b52      	ldr	r3, [pc, #328]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006b9e:	f7fc fb77 	bl	8003290 <HAL_GetTick>
 8006ba2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006ba4:	e008      	b.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006ba6:	f7fc fb73 	bl	8003290 <HAL_GetTick>
 8006baa:	4602      	mov	r2, r0
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	1ad3      	subs	r3, r2, r3
 8006bb0:	2b02      	cmp	r3, #2
 8006bb2:	d901      	bls.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006bb4:	2303      	movs	r3, #3
 8006bb6:	e090      	b.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006bb8:	4b4b      	ldr	r3, [pc, #300]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d0f0      	beq.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 0302 	and.w	r3, r3, #2
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	f000 8083 	beq.w	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	60fb      	str	r3, [r7, #12]
 8006bd6:	4b44      	ldr	r3, [pc, #272]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bda:	4a43      	ldr	r2, [pc, #268]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006be0:	6413      	str	r3, [r2, #64]	; 0x40
 8006be2:	4b41      	ldr	r3, [pc, #260]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bea:	60fb      	str	r3, [r7, #12]
 8006bec:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006bee:	4b3f      	ldr	r3, [pc, #252]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a3e      	ldr	r2, [pc, #248]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bf8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006bfa:	f7fc fb49 	bl	8003290 <HAL_GetTick>
 8006bfe:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006c00:	e008      	b.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006c02:	f7fc fb45 	bl	8003290 <HAL_GetTick>
 8006c06:	4602      	mov	r2, r0
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	1ad3      	subs	r3, r2, r3
 8006c0c:	2b02      	cmp	r3, #2
 8006c0e:	d901      	bls.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006c10:	2303      	movs	r3, #3
 8006c12:	e062      	b.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006c14:	4b35      	ldr	r3, [pc, #212]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d0f0      	beq.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006c20:	4b31      	ldr	r3, [pc, #196]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c28:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d02f      	beq.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	68db      	ldr	r3, [r3, #12]
 8006c34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c38:	693a      	ldr	r2, [r7, #16]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d028      	beq.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006c3e:	4b2a      	ldr	r3, [pc, #168]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c46:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006c48:	4b29      	ldr	r3, [pc, #164]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006c4e:	4b28      	ldr	r3, [pc, #160]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006c50:	2200      	movs	r2, #0
 8006c52:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006c54:	4a24      	ldr	r2, [pc, #144]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006c5a:	4b23      	ldr	r3, [pc, #140]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c5e:	f003 0301 	and.w	r3, r3, #1
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d114      	bne.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006c66:	f7fc fb13 	bl	8003290 <HAL_GetTick>
 8006c6a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c6c:	e00a      	b.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c6e:	f7fc fb0f 	bl	8003290 <HAL_GetTick>
 8006c72:	4602      	mov	r2, r0
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	1ad3      	subs	r3, r2, r3
 8006c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d901      	bls.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006c80:	2303      	movs	r3, #3
 8006c82:	e02a      	b.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c84:	4b18      	ldr	r3, [pc, #96]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c88:	f003 0302 	and.w	r3, r3, #2
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d0ee      	beq.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c9c:	d10d      	bne.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006c9e:	4b12      	ldr	r3, [pc, #72]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006cae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cb2:	490d      	ldr	r1, [pc, #52]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	608b      	str	r3, [r1, #8]
 8006cb8:	e005      	b.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006cba:	4b0b      	ldr	r3, [pc, #44]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	4a0a      	ldr	r2, [pc, #40]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cc0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006cc4:	6093      	str	r3, [r2, #8]
 8006cc6:	4b08      	ldr	r3, [pc, #32]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cc8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	68db      	ldr	r3, [r3, #12]
 8006cce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006cd2:	4905      	ldr	r1, [pc, #20]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006cd8:	2300      	movs	r3, #0
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3718      	adds	r7, #24
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	42470068 	.word	0x42470068
 8006ce8:	40023800 	.word	0x40023800
 8006cec:	40007000 	.word	0x40007000
 8006cf0:	42470e40 	.word	0x42470e40

08006cf4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b082      	sub	sp, #8
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d101      	bne.n	8006d06 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	e083      	b.n	8006e0e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	7f5b      	ldrb	r3, [r3, #29]
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d105      	bne.n	8006d1c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f7fb ffa2 	bl	8002c60 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2202      	movs	r2, #2
 8006d20:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	22ca      	movs	r2, #202	; 0xca
 8006d28:	625a      	str	r2, [r3, #36]	; 0x24
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2253      	movs	r2, #83	; 0x53
 8006d30:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 f9fb 	bl	800712e <RTC_EnterInitMode>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d008      	beq.n	8006d50 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	22ff      	movs	r2, #255	; 0xff
 8006d44:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2204      	movs	r2, #4
 8006d4a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e05e      	b.n	8006e0e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	6812      	ldr	r2, [r2, #0]
 8006d5a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006d5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d62:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	6899      	ldr	r1, [r3, #8]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	685a      	ldr	r2, [r3, #4]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	691b      	ldr	r3, [r3, #16]
 8006d72:	431a      	orrs	r2, r3
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	695b      	ldr	r3, [r3, #20]
 8006d78:	431a      	orrs	r2, r3
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	430a      	orrs	r2, r1
 8006d80:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	68d2      	ldr	r2, [r2, #12]
 8006d8a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	6919      	ldr	r1, [r3, #16]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	041a      	lsls	r2, r3, #16
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	430a      	orrs	r2, r1
 8006d9e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	68da      	ldr	r2, [r3, #12]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006dae:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	f003 0320 	and.w	r3, r3, #32
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d10e      	bne.n	8006ddc <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 f98d 	bl	80070de <HAL_RTC_WaitForSynchro>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d008      	beq.n	8006ddc <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	22ff      	movs	r2, #255	; 0xff
 8006dd0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2204      	movs	r2, #4
 8006dd6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	e018      	b.n	8006e0e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006dea:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	699a      	ldr	r2, [r3, #24]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	430a      	orrs	r2, r1
 8006dfc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	22ff      	movs	r2, #255	; 0xff
 8006e04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2201      	movs	r2, #1
 8006e0a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8006e0c:	2300      	movs	r3, #0
  }
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3708      	adds	r7, #8
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}

08006e16 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006e16:	b590      	push	{r4, r7, lr}
 8006e18:	b087      	sub	sp, #28
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	60f8      	str	r0, [r7, #12]
 8006e1e:	60b9      	str	r1, [r7, #8]
 8006e20:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006e22:	2300      	movs	r3, #0
 8006e24:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	7f1b      	ldrb	r3, [r3, #28]
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d101      	bne.n	8006e32 <HAL_RTC_SetTime+0x1c>
 8006e2e:	2302      	movs	r3, #2
 8006e30:	e0aa      	b.n	8006f88 <HAL_RTC_SetTime+0x172>
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2201      	movs	r2, #1
 8006e36:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2202      	movs	r2, #2
 8006e3c:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d126      	bne.n	8006e92 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d102      	bne.n	8006e58 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	2200      	movs	r2, #0
 8006e56:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f000 f992 	bl	8007186 <RTC_ByteToBcd2>
 8006e62:	4603      	mov	r3, r0
 8006e64:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	785b      	ldrb	r3, [r3, #1]
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f000 f98b 	bl	8007186 <RTC_ByteToBcd2>
 8006e70:	4603      	mov	r3, r0
 8006e72:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006e74:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	789b      	ldrb	r3, [r3, #2]
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f000 f983 	bl	8007186 <RTC_ByteToBcd2>
 8006e80:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006e82:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	78db      	ldrb	r3, [r3, #3]
 8006e8a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	617b      	str	r3, [r7, #20]
 8006e90:	e018      	b.n	8006ec4 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d102      	bne.n	8006ea6 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	785b      	ldrb	r3, [r3, #1]
 8006eb0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006eb2:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8006eb4:	68ba      	ldr	r2, [r7, #8]
 8006eb6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006eb8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	78db      	ldrb	r3, [r3, #3]
 8006ebe:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	22ca      	movs	r2, #202	; 0xca
 8006eca:	625a      	str	r2, [r3, #36]	; 0x24
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2253      	movs	r2, #83	; 0x53
 8006ed2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006ed4:	68f8      	ldr	r0, [r7, #12]
 8006ed6:	f000 f92a 	bl	800712e <RTC_EnterInitMode>
 8006eda:	4603      	mov	r3, r0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d00b      	beq.n	8006ef8 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	22ff      	movs	r2, #255	; 0xff
 8006ee6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2204      	movs	r2, #4
 8006eec:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e047      	b.n	8006f88 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006f02:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006f06:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	689a      	ldr	r2, [r3, #8]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006f16:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	6899      	ldr	r1, [r3, #8]
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	68da      	ldr	r2, [r3, #12]
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	691b      	ldr	r3, [r3, #16]
 8006f26:	431a      	orrs	r2, r3
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	430a      	orrs	r2, r1
 8006f2e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	68da      	ldr	r2, [r3, #12]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f3e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	f003 0320 	and.w	r3, r3, #32
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d111      	bne.n	8006f72 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006f4e:	68f8      	ldr	r0, [r7, #12]
 8006f50:	f000 f8c5 	bl	80070de <HAL_RTC_WaitForSynchro>
 8006f54:	4603      	mov	r3, r0
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d00b      	beq.n	8006f72 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	22ff      	movs	r2, #255	; 0xff
 8006f60:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2204      	movs	r2, #4
 8006f66:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e00a      	b.n	8006f88 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	22ff      	movs	r2, #255	; 0xff
 8006f78:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2200      	movs	r2, #0
 8006f84:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8006f86:	2300      	movs	r3, #0
  }
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	371c      	adds	r7, #28
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd90      	pop	{r4, r7, pc}

08006f90 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006f90:	b590      	push	{r4, r7, lr}
 8006f92:	b087      	sub	sp, #28
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	60b9      	str	r1, [r7, #8]
 8006f9a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	7f1b      	ldrb	r3, [r3, #28]
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d101      	bne.n	8006fac <HAL_RTC_SetDate+0x1c>
 8006fa8:	2302      	movs	r3, #2
 8006faa:	e094      	b.n	80070d6 <HAL_RTC_SetDate+0x146>
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2202      	movs	r2, #2
 8006fb6:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d10e      	bne.n	8006fdc <HAL_RTC_SetDate+0x4c>
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	785b      	ldrb	r3, [r3, #1]
 8006fc2:	f003 0310 	and.w	r3, r3, #16
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d008      	beq.n	8006fdc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	785b      	ldrb	r3, [r3, #1]
 8006fce:	f023 0310 	bic.w	r3, r3, #16
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	330a      	adds	r3, #10
 8006fd6:	b2da      	uxtb	r2, r3
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d11c      	bne.n	800701c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	78db      	ldrb	r3, [r3, #3]
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f000 f8cd 	bl	8007186 <RTC_ByteToBcd2>
 8006fec:	4603      	mov	r3, r0
 8006fee:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	785b      	ldrb	r3, [r3, #1]
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f000 f8c6 	bl	8007186 <RTC_ByteToBcd2>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006ffe:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	789b      	ldrb	r3, [r3, #2]
 8007004:	4618      	mov	r0, r3
 8007006:	f000 f8be 	bl	8007186 <RTC_ByteToBcd2>
 800700a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800700c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007016:	4313      	orrs	r3, r2
 8007018:	617b      	str	r3, [r7, #20]
 800701a:	e00e      	b.n	800703a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	78db      	ldrb	r3, [r3, #3]
 8007020:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	785b      	ldrb	r3, [r3, #1]
 8007026:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007028:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800702a:	68ba      	ldr	r2, [r7, #8]
 800702c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800702e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007036:	4313      	orrs	r3, r2
 8007038:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	22ca      	movs	r2, #202	; 0xca
 8007040:	625a      	str	r2, [r3, #36]	; 0x24
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	2253      	movs	r2, #83	; 0x53
 8007048:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800704a:	68f8      	ldr	r0, [r7, #12]
 800704c:	f000 f86f 	bl	800712e <RTC_EnterInitMode>
 8007050:	4603      	mov	r3, r0
 8007052:	2b00      	cmp	r3, #0
 8007054:	d00b      	beq.n	800706e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	22ff      	movs	r2, #255	; 0xff
 800705c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2204      	movs	r2, #4
 8007062:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2200      	movs	r2, #0
 8007068:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	e033      	b.n	80070d6 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007078:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800707c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	68da      	ldr	r2, [r3, #12]
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800708c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	f003 0320 	and.w	r3, r3, #32
 8007098:	2b00      	cmp	r3, #0
 800709a:	d111      	bne.n	80070c0 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800709c:	68f8      	ldr	r0, [r7, #12]
 800709e:	f000 f81e 	bl	80070de <HAL_RTC_WaitForSynchro>
 80070a2:	4603      	mov	r3, r0
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d00b      	beq.n	80070c0 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	22ff      	movs	r2, #255	; 0xff
 80070ae:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2204      	movs	r2, #4
 80070b4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2200      	movs	r2, #0
 80070ba:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80070bc:	2301      	movs	r3, #1
 80070be:	e00a      	b.n	80070d6 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	22ff      	movs	r2, #255	; 0xff
 80070c6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2201      	movs	r2, #1
 80070cc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2200      	movs	r2, #0
 80070d2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80070d4:	2300      	movs	r3, #0
  }
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	371c      	adds	r7, #28
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd90      	pop	{r4, r7, pc}

080070de <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80070de:	b580      	push	{r7, lr}
 80070e0:	b084      	sub	sp, #16
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80070e6:	2300      	movs	r3, #0
 80070e8:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	68da      	ldr	r2, [r3, #12]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80070f8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80070fa:	f7fc f8c9 	bl	8003290 <HAL_GetTick>
 80070fe:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007100:	e009      	b.n	8007116 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007102:	f7fc f8c5 	bl	8003290 <HAL_GetTick>
 8007106:	4602      	mov	r2, r0
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	1ad3      	subs	r3, r2, r3
 800710c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007110:	d901      	bls.n	8007116 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007112:	2303      	movs	r3, #3
 8007114:	e007      	b.n	8007126 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	68db      	ldr	r3, [r3, #12]
 800711c:	f003 0320 	and.w	r3, r3, #32
 8007120:	2b00      	cmp	r3, #0
 8007122:	d0ee      	beq.n	8007102 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007124:	2300      	movs	r3, #0
}
 8007126:	4618      	mov	r0, r3
 8007128:	3710      	adds	r7, #16
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}

0800712e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800712e:	b580      	push	{r7, lr}
 8007130:	b084      	sub	sp, #16
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007136:	2300      	movs	r3, #0
 8007138:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	68db      	ldr	r3, [r3, #12]
 8007140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007144:	2b00      	cmp	r3, #0
 8007146:	d119      	bne.n	800717c <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f04f 32ff 	mov.w	r2, #4294967295
 8007150:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007152:	f7fc f89d 	bl	8003290 <HAL_GetTick>
 8007156:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007158:	e009      	b.n	800716e <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800715a:	f7fc f899 	bl	8003290 <HAL_GetTick>
 800715e:	4602      	mov	r2, r0
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	1ad3      	subs	r3, r2, r3
 8007164:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007168:	d901      	bls.n	800716e <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800716a:	2303      	movs	r3, #3
 800716c:	e007      	b.n	800717e <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	68db      	ldr	r3, [r3, #12]
 8007174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007178:	2b00      	cmp	r3, #0
 800717a:	d0ee      	beq.n	800715a <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800717c:	2300      	movs	r3, #0
}
 800717e:	4618      	mov	r0, r3
 8007180:	3710      	adds	r7, #16
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}

08007186 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007186:	b480      	push	{r7}
 8007188:	b085      	sub	sp, #20
 800718a:	af00      	add	r7, sp, #0
 800718c:	4603      	mov	r3, r0
 800718e:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007190:	2300      	movs	r3, #0
 8007192:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8007194:	e005      	b.n	80071a2 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	3301      	adds	r3, #1
 800719a:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800719c:	79fb      	ldrb	r3, [r7, #7]
 800719e:	3b0a      	subs	r3, #10
 80071a0:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80071a2:	79fb      	ldrb	r3, [r7, #7]
 80071a4:	2b09      	cmp	r3, #9
 80071a6:	d8f6      	bhi.n	8007196 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	011b      	lsls	r3, r3, #4
 80071ae:	b2da      	uxtb	r2, r3
 80071b0:	79fb      	ldrb	r3, [r7, #7]
 80071b2:	4313      	orrs	r3, r2
 80071b4:	b2db      	uxtb	r3, r3
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3714      	adds	r7, #20
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr

080071c2 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80071c2:	b580      	push	{r7, lr}
 80071c4:	b082      	sub	sp, #8
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d101      	bne.n	80071d4 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80071d0:	2301      	movs	r3, #1
 80071d2:	e022      	b.n	800721a <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d105      	bne.n	80071ec <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2200      	movs	r2, #0
 80071e4:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f7fb fd50 	bl	8002c8c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2203      	movs	r2, #3
 80071f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 f815 	bl	8007224 <HAL_SD_InitCard>
 80071fa:	4603      	mov	r3, r0
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d001      	beq.n	8007204 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007200:	2301      	movs	r3, #1
 8007202:	e00a      	b.n	800721a <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007218:	2300      	movs	r3, #0
}
 800721a:	4618      	mov	r0, r3
 800721c:	3708      	adds	r7, #8
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
	...

08007224 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007224:	b5b0      	push	{r4, r5, r7, lr}
 8007226:	b08e      	sub	sp, #56	; 0x38
 8007228:	af04      	add	r7, sp, #16
 800722a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800722c:	2300      	movs	r3, #0
 800722e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8007230:	2300      	movs	r3, #0
 8007232:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8007234:	2300      	movs	r3, #0
 8007236:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8007238:	2300      	movs	r3, #0
 800723a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800723c:	2300      	movs	r3, #0
 800723e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8007240:	2376      	movs	r3, #118	; 0x76
 8007242:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681d      	ldr	r5, [r3, #0]
 8007248:	466c      	mov	r4, sp
 800724a:	f107 0314 	add.w	r3, r7, #20
 800724e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007252:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007256:	f107 0308 	add.w	r3, r7, #8
 800725a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800725c:	4628      	mov	r0, r5
 800725e:	f002 ffcf 	bl	800a200 <SDIO_Init>
 8007262:	4603      	mov	r3, r0
 8007264:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8007268:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800726c:	2b00      	cmp	r3, #0
 800726e:	d001      	beq.n	8007274 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007270:	2301      	movs	r3, #1
 8007272:	e031      	b.n	80072d8 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8007274:	4b1a      	ldr	r3, [pc, #104]	; (80072e0 <HAL_SD_InitCard+0xbc>)
 8007276:	2200      	movs	r2, #0
 8007278:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4618      	mov	r0, r3
 8007280:	f003 f807 	bl	800a292 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8007284:	4b16      	ldr	r3, [pc, #88]	; (80072e0 <HAL_SD_InitCard+0xbc>)
 8007286:	2201      	movs	r2, #1
 8007288:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 fffa 	bl	8008284 <SD_PowerON>
 8007290:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007292:	6a3b      	ldr	r3, [r7, #32]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d00b      	beq.n	80072b0 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2201      	movs	r2, #1
 800729c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072a4:	6a3b      	ldr	r3, [r7, #32]
 80072a6:	431a      	orrs	r2, r3
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80072ac:	2301      	movs	r3, #1
 80072ae:	e013      	b.n	80072d8 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 ff19 	bl	80080e8 <SD_InitCard>
 80072b6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80072b8:	6a3b      	ldr	r3, [r7, #32]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d00b      	beq.n	80072d6 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2201      	movs	r2, #1
 80072c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072ca:	6a3b      	ldr	r3, [r7, #32]
 80072cc:	431a      	orrs	r2, r3
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	e000      	b.n	80072d8 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 80072d6:	2300      	movs	r3, #0
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3728      	adds	r7, #40	; 0x28
 80072dc:	46bd      	mov	sp, r7
 80072de:	bdb0      	pop	{r4, r5, r7, pc}
 80072e0:	422580a0 	.word	0x422580a0

080072e4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b08c      	sub	sp, #48	; 0x30
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	607a      	str	r2, [r7, #4]
 80072f0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d107      	bne.n	800730c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007300:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007308:	2301      	movs	r3, #1
 800730a:	e0c9      	b.n	80074a0 <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007312:	b2db      	uxtb	r3, r3
 8007314:	2b01      	cmp	r3, #1
 8007316:	f040 80c2 	bne.w	800749e <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2200      	movs	r2, #0
 800731e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007320:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	441a      	add	r2, r3
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800732a:	429a      	cmp	r2, r3
 800732c:	d907      	bls.n	800733e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007332:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800733a:	2301      	movs	r3, #1
 800733c:	e0b0      	b.n	80074a0 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2203      	movs	r2, #3
 8007342:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	2200      	movs	r2, #0
 800734c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007354:	68fa      	ldr	r2, [r7, #12]
 8007356:	6812      	ldr	r2, [r2, #0]
 8007358:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 800735c:	f043 0302 	orr.w	r3, r3, #2
 8007360:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007366:	4a50      	ldr	r2, [pc, #320]	; (80074a8 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 8007368:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736e:	4a4f      	ldr	r2, [pc, #316]	; (80074ac <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8007370:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007376:	2200      	movs	r2, #0
 8007378:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	3380      	adds	r3, #128	; 0x80
 8007384:	4619      	mov	r1, r3
 8007386:	68ba      	ldr	r2, [r7, #8]
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	025b      	lsls	r3, r3, #9
 800738c:	089b      	lsrs	r3, r3, #2
 800738e:	f7fc f96d 	bl	800366c <HAL_DMA_Start_IT>
 8007392:	4603      	mov	r3, r0
 8007394:	2b00      	cmp	r3, #0
 8007396:	d017      	beq.n	80073c8 <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80073a6:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a40      	ldr	r2, [pc, #256]	; (80074b0 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 80073ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073b4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2201      	movs	r2, #1
 80073c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80073c4:	2301      	movs	r3, #1
 80073c6:	e06b      	b.n	80074a0 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80073c8:	4b3a      	ldr	r3, [pc, #232]	; (80074b4 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 80073ca:	2201      	movs	r2, #1
 80073cc:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	d002      	beq.n	80073dc <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 80073d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d8:	025b      	lsls	r3, r3, #9
 80073da:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80073e4:	4618      	mov	r0, r3
 80073e6:	f002 ffe7 	bl	800a3b8 <SDMMC_CmdBlockLength>
 80073ea:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 80073ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d00f      	beq.n	8007412 <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a2e      	ldr	r2, [pc, #184]	; (80074b0 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 80073f8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007400:	431a      	orrs	r2, r3
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2201      	movs	r2, #1
 800740a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800740e:	2301      	movs	r3, #1
 8007410:	e046      	b.n	80074a0 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007412:	f04f 33ff 	mov.w	r3, #4294967295
 8007416:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	025b      	lsls	r3, r3, #9
 800741c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800741e:	2390      	movs	r3, #144	; 0x90
 8007420:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007422:	2302      	movs	r3, #2
 8007424:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007426:	2300      	movs	r3, #0
 8007428:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800742a:	2301      	movs	r3, #1
 800742c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f107 0210 	add.w	r2, r7, #16
 8007436:	4611      	mov	r1, r2
 8007438:	4618      	mov	r0, r3
 800743a:	f002 ff91 	bl	800a360 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	2b01      	cmp	r3, #1
 8007442:	d90a      	bls.n	800745a <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2282      	movs	r2, #130	; 0x82
 8007448:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007450:	4618      	mov	r0, r3
 8007452:	f002 fff5 	bl	800a440 <SDMMC_CmdReadMultiBlock>
 8007456:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007458:	e009      	b.n	800746e <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2281      	movs	r2, #129	; 0x81
 800745e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007466:	4618      	mov	r0, r3
 8007468:	f002 ffc8 	bl	800a3fc <SDMMC_CmdReadSingleBlock>
 800746c:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800746e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007470:	2b00      	cmp	r3, #0
 8007472:	d012      	beq.n	800749a <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a0d      	ldr	r2, [pc, #52]	; (80074b0 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800747a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007482:	431a      	orrs	r2, r3
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2201      	movs	r2, #1
 800748c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2200      	movs	r2, #0
 8007494:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8007496:	2301      	movs	r3, #1
 8007498:	e002      	b.n	80074a0 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 800749a:	2300      	movs	r3, #0
 800749c:	e000      	b.n	80074a0 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 800749e:	2302      	movs	r3, #2
  }
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3730      	adds	r7, #48	; 0x30
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}
 80074a8:	08007ef7 	.word	0x08007ef7
 80074ac:	08007f69 	.word	0x08007f69
 80074b0:	004005ff 	.word	0x004005ff
 80074b4:	4225858c 	.word	0x4225858c

080074b8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b08c      	sub	sp, #48	; 0x30
 80074bc:	af00      	add	r7, sp, #0
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	60b9      	str	r1, [r7, #8]
 80074c2:	607a      	str	r2, [r7, #4]
 80074c4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d107      	bne.n	80074e0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80074dc:	2301      	movs	r3, #1
 80074de:	e0ce      	b.n	800767e <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	f040 80c7 	bne.w	800767c <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2200      	movs	r2, #0
 80074f2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80074f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	441a      	add	r2, r3
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074fe:	429a      	cmp	r2, r3
 8007500:	d907      	bls.n	8007512 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007506:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800750e:	2301      	movs	r3, #1
 8007510:	e0b5      	b.n	800767e <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2203      	movs	r2, #3
 8007516:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	2200      	movs	r2, #0
 8007520:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007528:	68fa      	ldr	r2, [r7, #12]
 800752a:	6812      	ldr	r2, [r2, #0]
 800752c:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8007530:	f043 0302 	orr.w	r3, r3, #2
 8007534:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800753a:	4a53      	ldr	r2, [pc, #332]	; (8007688 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800753c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007542:	4a52      	ldr	r2, [pc, #328]	; (800768c <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8007544:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800754a:	2200      	movs	r2, #0
 800754c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007552:	2b01      	cmp	r3, #1
 8007554:	d002      	beq.n	800755c <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8007556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007558:	025b      	lsls	r3, r3, #9
 800755a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007564:	4618      	mov	r0, r3
 8007566:	f002 ff27 	bl	800a3b8 <SDMMC_CmdBlockLength>
 800756a:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800756c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800756e:	2b00      	cmp	r3, #0
 8007570:	d00f      	beq.n	8007592 <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a46      	ldr	r2, [pc, #280]	; (8007690 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8007578:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800757e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007580:	431a      	orrs	r2, r3
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2201      	movs	r2, #1
 800758a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	e075      	b.n	800767e <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	2b01      	cmp	r3, #1
 8007596:	d90a      	bls.n	80075ae <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	22a0      	movs	r2, #160	; 0xa0
 800759c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075a4:	4618      	mov	r0, r3
 80075a6:	f002 ff8f 	bl	800a4c8 <SDMMC_CmdWriteMultiBlock>
 80075aa:	62f8      	str	r0, [r7, #44]	; 0x2c
 80075ac:	e009      	b.n	80075c2 <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2290      	movs	r2, #144	; 0x90
 80075b2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075ba:	4618      	mov	r0, r3
 80075bc:	f002 ff62 	bl	800a484 <SDMMC_CmdWriteSingleBlock>
 80075c0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80075c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d012      	beq.n	80075ee <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a30      	ldr	r2, [pc, #192]	; (8007690 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80075ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d6:	431a      	orrs	r2, r3
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2201      	movs	r2, #1
 80075e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2200      	movs	r2, #0
 80075e8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80075ea:	2301      	movs	r3, #1
 80075ec:	e047      	b.n	800767e <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80075ee:	4b29      	ldr	r3, [pc, #164]	; (8007694 <HAL_SD_WriteBlocks_DMA+0x1dc>)
 80075f0:	2201      	movs	r2, #1
 80075f2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80075f8:	68b9      	ldr	r1, [r7, #8]
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	3380      	adds	r3, #128	; 0x80
 8007600:	461a      	mov	r2, r3
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	025b      	lsls	r3, r3, #9
 8007606:	089b      	lsrs	r3, r3, #2
 8007608:	f7fc f830 	bl	800366c <HAL_DMA_Start_IT>
 800760c:	4603      	mov	r3, r0
 800760e:	2b00      	cmp	r3, #0
 8007610:	d01c      	beq.n	800764c <HAL_SD_WriteBlocks_DMA+0x194>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007618:	68fa      	ldr	r2, [r7, #12]
 800761a:	6812      	ldr	r2, [r2, #0]
 800761c:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8007620:	f023 0302 	bic.w	r3, r3, #2
 8007624:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a19      	ldr	r2, [pc, #100]	; (8007690 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800762c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007632:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2201      	movs	r2, #1
 800763e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2200      	movs	r2, #0
 8007646:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007648:	2301      	movs	r3, #1
 800764a:	e018      	b.n	800767e <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800764c:	f04f 33ff 	mov.w	r3, #4294967295
 8007650:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	025b      	lsls	r3, r3, #9
 8007656:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007658:	2390      	movs	r3, #144	; 0x90
 800765a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800765c:	2300      	movs	r3, #0
 800765e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007660:	2300      	movs	r3, #0
 8007662:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8007664:	2301      	movs	r3, #1
 8007666:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f107 0210 	add.w	r2, r7, #16
 8007670:	4611      	mov	r1, r2
 8007672:	4618      	mov	r0, r3
 8007674:	f002 fe74 	bl	800a360 <SDIO_ConfigData>

      return HAL_OK;
 8007678:	2300      	movs	r3, #0
 800767a:	e000      	b.n	800767e <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 800767c:	2302      	movs	r3, #2
  }
}
 800767e:	4618      	mov	r0, r3
 8007680:	3730      	adds	r7, #48	; 0x30
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
 8007686:	bf00      	nop
 8007688:	08007ecd 	.word	0x08007ecd
 800768c:	08007f69 	.word	0x08007f69
 8007690:	004005ff 	.word	0x004005ff
 8007694:	4225858c 	.word	0x4225858c

08007698 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b084      	sub	sp, #16
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076a4:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d008      	beq.n	80076c6 <HAL_SD_IRQHandler+0x2e>
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f003 0308 	and.w	r3, r3, #8
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d003      	beq.n	80076c6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 fff6 	bl	80086b0 <SD_Read_IT>
 80076c4:	e165      	b.n	8007992 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	f000 808f 	beq.w	80077f4 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80076de:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076e6:	687a      	ldr	r2, [r7, #4]
 80076e8:	6812      	ldr	r2, [r2, #0]
 80076ea:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 80076ee:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80076f2:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f022 0201 	bic.w	r2, r2, #1
 8007702:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f003 0308 	and.w	r3, r3, #8
 800770a:	2b00      	cmp	r3, #0
 800770c:	d039      	beq.n	8007782 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f003 0302 	and.w	r3, r3, #2
 8007714:	2b00      	cmp	r3, #0
 8007716:	d104      	bne.n	8007722 <HAL_SD_IRQHandler+0x8a>
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f003 0320 	and.w	r3, r3, #32
 800771e:	2b00      	cmp	r3, #0
 8007720:	d011      	beq.n	8007746 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4618      	mov	r0, r3
 8007728:	f002 fef0 	bl	800a50c <SDMMC_CmdStopTransfer>
 800772c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d008      	beq.n	8007746 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	431a      	orrs	r2, r3
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 f943 	bl	80079cc <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f240 523a 	movw	r2, #1338	; 0x53a
 800774e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2201      	movs	r2, #1
 8007754:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2200      	movs	r2, #0
 800775c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f003 0301 	and.w	r3, r3, #1
 8007764:	2b00      	cmp	r3, #0
 8007766:	d104      	bne.n	8007772 <HAL_SD_IRQHandler+0xda>
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f003 0302 	and.w	r3, r3, #2
 800776e:	2b00      	cmp	r3, #0
 8007770:	d003      	beq.n	800777a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f000 f920 	bl	80079b8 <HAL_SD_RxCpltCallback>
 8007778:	e10b      	b.n	8007992 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 f912 	bl	80079a4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007780:	e107      	b.n	8007992 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007788:	2b00      	cmp	r3, #0
 800778a:	f000 8102 	beq.w	8007992 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f003 0320 	and.w	r3, r3, #32
 8007794:	2b00      	cmp	r3, #0
 8007796:	d011      	beq.n	80077bc <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4618      	mov	r0, r3
 800779e:	f002 feb5 	bl	800a50c <SDMMC_CmdStopTransfer>
 80077a2:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d008      	beq.n	80077bc <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	431a      	orrs	r2, r3
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 f908 	bl	80079cc <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f003 0301 	and.w	r3, r3, #1
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	f040 80e5 	bne.w	8007992 <HAL_SD_IRQHandler+0x2fa>
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f003 0302 	and.w	r3, r3, #2
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	f040 80df 	bne.w	8007992 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f022 0208 	bic.w	r2, r2, #8
 80077e2:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2201      	movs	r2, #1
 80077e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 f8d9 	bl	80079a4 <HAL_SD_TxCpltCallback>
}
 80077f2:	e0ce      	b.n	8007992 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d008      	beq.n	8007814 <HAL_SD_IRQHandler+0x17c>
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	f003 0308 	and.w	r3, r3, #8
 8007808:	2b00      	cmp	r3, #0
 800780a:	d003      	beq.n	8007814 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 ffa0 	bl	8008752 <SD_Write_IT>
 8007812:	e0be      	b.n	8007992 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800781a:	f240 233a 	movw	r3, #570	; 0x23a
 800781e:	4013      	ands	r3, r2
 8007820:	2b00      	cmp	r3, #0
 8007822:	f000 80b6 	beq.w	8007992 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800782c:	f003 0302 	and.w	r3, r3, #2
 8007830:	2b00      	cmp	r3, #0
 8007832:	d005      	beq.n	8007840 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007838:	f043 0202 	orr.w	r2, r3, #2
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007846:	f003 0308 	and.w	r3, r3, #8
 800784a:	2b00      	cmp	r3, #0
 800784c:	d005      	beq.n	800785a <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007852:	f043 0208 	orr.w	r2, r3, #8
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007860:	f003 0320 	and.w	r3, r3, #32
 8007864:	2b00      	cmp	r3, #0
 8007866:	d005      	beq.n	8007874 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800786c:	f043 0220 	orr.w	r2, r3, #32
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800787a:	f003 0310 	and.w	r3, r3, #16
 800787e:	2b00      	cmp	r3, #0
 8007880:	d005      	beq.n	800788e <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007886:	f043 0210 	orr.w	r2, r3, #16
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007894:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007898:	2b00      	cmp	r3, #0
 800789a:	d005      	beq.n	80078a8 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078a0:	f043 0208 	orr.w	r2, r3, #8
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f240 723a 	movw	r2, #1850	; 0x73a
 80078b0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078b8:	687a      	ldr	r2, [r7, #4]
 80078ba:	6812      	ldr	r2, [r2, #0]
 80078bc:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 80078c0:	f023 0302 	bic.w	r3, r3, #2
 80078c4:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4618      	mov	r0, r3
 80078cc:	f002 fe1e 	bl	800a50c <SDMMC_CmdStopTransfer>
 80078d0:	4602      	mov	r2, r0
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d6:	431a      	orrs	r2, r3
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f003 0308 	and.w	r3, r3, #8
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d00a      	beq.n	80078fc <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2201      	movs	r2, #1
 80078ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2200      	movs	r2, #0
 80078f2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 f869 	bl	80079cc <HAL_SD_ErrorCallback>
}
 80078fa:	e04a      	b.n	8007992 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007902:	2b00      	cmp	r3, #0
 8007904:	d045      	beq.n	8007992 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	f003 0310 	and.w	r3, r3, #16
 800790c:	2b00      	cmp	r3, #0
 800790e:	d104      	bne.n	800791a <HAL_SD_IRQHandler+0x282>
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f003 0320 	and.w	r3, r3, #32
 8007916:	2b00      	cmp	r3, #0
 8007918:	d011      	beq.n	800793e <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800791e:	4a1f      	ldr	r2, [pc, #124]	; (800799c <HAL_SD_IRQHandler+0x304>)
 8007920:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007926:	4618      	mov	r0, r3
 8007928:	f7fb fef8 	bl	800371c <HAL_DMA_Abort_IT>
 800792c:	4603      	mov	r3, r0
 800792e:	2b00      	cmp	r3, #0
 8007930:	d02f      	beq.n	8007992 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007936:	4618      	mov	r0, r3
 8007938:	f000 fb68 	bl	800800c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800793c:	e029      	b.n	8007992 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	f003 0301 	and.w	r3, r3, #1
 8007944:	2b00      	cmp	r3, #0
 8007946:	d104      	bne.n	8007952 <HAL_SD_IRQHandler+0x2ba>
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f003 0302 	and.w	r3, r3, #2
 800794e:	2b00      	cmp	r3, #0
 8007950:	d011      	beq.n	8007976 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007956:	4a12      	ldr	r2, [pc, #72]	; (80079a0 <HAL_SD_IRQHandler+0x308>)
 8007958:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800795e:	4618      	mov	r0, r3
 8007960:	f7fb fedc 	bl	800371c <HAL_DMA_Abort_IT>
 8007964:	4603      	mov	r3, r0
 8007966:	2b00      	cmp	r3, #0
 8007968:	d013      	beq.n	8007992 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800796e:	4618      	mov	r0, r3
 8007970:	f000 fb83 	bl	800807a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007974:	e00d      	b.n	8007992 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2200      	movs	r2, #0
 800797a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2201      	movs	r2, #1
 8007980:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2200      	movs	r2, #0
 8007988:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 f828 	bl	80079e0 <HAL_SD_AbortCallback>
}
 8007990:	e7ff      	b.n	8007992 <HAL_SD_IRQHandler+0x2fa>
 8007992:	bf00      	nop
 8007994:	3710      	adds	r7, #16
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop
 800799c:	0800800d 	.word	0x0800800d
 80079a0:	0800807b 	.word	0x0800807b

080079a4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: Pointer to SD handle
  * @retval None
  */
__weak void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b083      	sub	sp, #12
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_TxCpltCallback can be implemented in the user file
   */
}
 80079ac:	bf00      	nop
 80079ae:	370c      	adds	r7, #12
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr

080079b8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b083      	sub	sp, #12
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_RxCpltCallback can be implemented in the user file
   */
}
 80079c0:	bf00      	nop
 80079c2:	370c      	adds	r7, #12
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr

080079cc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b083      	sub	sp, #12
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80079d4:	bf00      	nop
 80079d6:	370c      	adds	r7, #12
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr

080079e0 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b083      	sub	sp, #12
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_AbortCallback can be implemented in the user file
   */
}
 80079e8:	bf00      	nop
 80079ea:	370c      	adds	r7, #12
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr

080079f4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b083      	sub	sp, #12
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a02:	0f9b      	lsrs	r3, r3, #30
 8007a04:	b2da      	uxtb	r2, r3
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a0e:	0e9b      	lsrs	r3, r3, #26
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	f003 030f 	and.w	r3, r3, #15
 8007a16:	b2da      	uxtb	r2, r3
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a20:	0e1b      	lsrs	r3, r3, #24
 8007a22:	b2db      	uxtb	r3, r3
 8007a24:	f003 0303 	and.w	r3, r3, #3
 8007a28:	b2da      	uxtb	r2, r3
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a32:	0c1b      	lsrs	r3, r3, #16
 8007a34:	b2da      	uxtb	r2, r3
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a3e:	0a1b      	lsrs	r3, r3, #8
 8007a40:	b2da      	uxtb	r2, r3
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a4a:	b2da      	uxtb	r2, r3
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a54:	0d1b      	lsrs	r3, r3, #20
 8007a56:	b29a      	uxth	r2, r3
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a60:	0c1b      	lsrs	r3, r3, #16
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	f003 030f 	and.w	r3, r3, #15
 8007a68:	b2da      	uxtb	r2, r3
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a72:	0bdb      	lsrs	r3, r3, #15
 8007a74:	b2db      	uxtb	r3, r3
 8007a76:	f003 0301 	and.w	r3, r3, #1
 8007a7a:	b2da      	uxtb	r2, r3
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a84:	0b9b      	lsrs	r3, r3, #14
 8007a86:	b2db      	uxtb	r3, r3
 8007a88:	f003 0301 	and.w	r3, r3, #1
 8007a8c:	b2da      	uxtb	r2, r3
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a96:	0b5b      	lsrs	r3, r3, #13
 8007a98:	b2db      	uxtb	r3, r3
 8007a9a:	f003 0301 	and.w	r3, r3, #1
 8007a9e:	b2da      	uxtb	r2, r3
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007aa8:	0b1b      	lsrs	r3, r3, #12
 8007aaa:	b2db      	uxtb	r3, r3
 8007aac:	f003 0301 	and.w	r3, r3, #1
 8007ab0:	b2da      	uxtb	r2, r3
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d163      	bne.n	8007b8c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ac8:	009a      	lsls	r2, r3, #2
 8007aca:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007ace:	4013      	ands	r3, r2
 8007ad0:	687a      	ldr	r2, [r7, #4]
 8007ad2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007ad4:	0f92      	lsrs	r2, r2, #30
 8007ad6:	431a      	orrs	r2, r3
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ae0:	0edb      	lsrs	r3, r3, #27
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	f003 0307 	and.w	r3, r3, #7
 8007ae8:	b2da      	uxtb	r2, r3
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007af2:	0e1b      	lsrs	r3, r3, #24
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	f003 0307 	and.w	r3, r3, #7
 8007afa:	b2da      	uxtb	r2, r3
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b04:	0d5b      	lsrs	r3, r3, #21
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	f003 0307 	and.w	r3, r3, #7
 8007b0c:	b2da      	uxtb	r2, r3
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b16:	0c9b      	lsrs	r3, r3, #18
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	f003 0307 	and.w	r3, r3, #7
 8007b1e:	b2da      	uxtb	r2, r3
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b28:	0bdb      	lsrs	r3, r3, #15
 8007b2a:	b2db      	uxtb	r3, r3
 8007b2c:	f003 0307 	and.w	r3, r3, #7
 8007b30:	b2da      	uxtb	r2, r3
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	691b      	ldr	r3, [r3, #16]
 8007b3a:	1c5a      	adds	r2, r3, #1
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	7e1b      	ldrb	r3, [r3, #24]
 8007b44:	b2db      	uxtb	r3, r3
 8007b46:	f003 0307 	and.w	r3, r3, #7
 8007b4a:	3302      	adds	r3, #2
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b52:	687a      	ldr	r2, [r7, #4]
 8007b54:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007b56:	fb02 f203 	mul.w	r2, r2, r3
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	7a1b      	ldrb	r3, [r3, #8]
 8007b62:	b2db      	uxtb	r3, r3
 8007b64:	f003 030f 	and.w	r3, r3, #15
 8007b68:	2201      	movs	r2, #1
 8007b6a:	409a      	lsls	r2, r3
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007b78:	0a52      	lsrs	r2, r2, #9
 8007b7a:	fb02 f203 	mul.w	r2, r2, r3
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b88:	661a      	str	r2, [r3, #96]	; 0x60
 8007b8a:	e031      	b.n	8007bf0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b90:	2b01      	cmp	r3, #1
 8007b92:	d11d      	bne.n	8007bd0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b98:	041b      	lsls	r3, r3, #16
 8007b9a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ba2:	0c1b      	lsrs	r3, r3, #16
 8007ba4:	431a      	orrs	r2, r3
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	691b      	ldr	r3, [r3, #16]
 8007bae:	3301      	adds	r3, #1
 8007bb0:	029a      	lsls	r2, r3, #10
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007bc4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	661a      	str	r2, [r3, #96]	; 0x60
 8007bce:	e00f      	b.n	8007bf0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a58      	ldr	r2, [pc, #352]	; (8007d38 <HAL_SD_GetCardCSD+0x344>)
 8007bd6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bdc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2201      	movs	r2, #1
 8007be8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007bec:	2301      	movs	r3, #1
 8007bee:	e09d      	b.n	8007d2c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bf4:	0b9b      	lsrs	r3, r3, #14
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	f003 0301 	and.w	r3, r3, #1
 8007bfc:	b2da      	uxtb	r2, r3
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c06:	09db      	lsrs	r3, r3, #7
 8007c08:	b2db      	uxtb	r3, r3
 8007c0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c0e:	b2da      	uxtb	r2, r3
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c18:	b2db      	uxtb	r3, r3
 8007c1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c1e:	b2da      	uxtb	r2, r3
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c28:	0fdb      	lsrs	r3, r3, #31
 8007c2a:	b2da      	uxtb	r2, r3
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c34:	0f5b      	lsrs	r3, r3, #29
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	f003 0303 	and.w	r3, r3, #3
 8007c3c:	b2da      	uxtb	r2, r3
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c46:	0e9b      	lsrs	r3, r3, #26
 8007c48:	b2db      	uxtb	r3, r3
 8007c4a:	f003 0307 	and.w	r3, r3, #7
 8007c4e:	b2da      	uxtb	r2, r3
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c58:	0d9b      	lsrs	r3, r3, #22
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	f003 030f 	and.w	r3, r3, #15
 8007c60:	b2da      	uxtb	r2, r3
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c6a:	0d5b      	lsrs	r3, r3, #21
 8007c6c:	b2db      	uxtb	r3, r3
 8007c6e:	f003 0301 	and.w	r3, r3, #1
 8007c72:	b2da      	uxtb	r2, r3
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c86:	0c1b      	lsrs	r3, r3, #16
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	f003 0301 	and.w	r3, r3, #1
 8007c8e:	b2da      	uxtb	r2, r3
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c9a:	0bdb      	lsrs	r3, r3, #15
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	f003 0301 	and.w	r3, r3, #1
 8007ca2:	b2da      	uxtb	r2, r3
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cae:	0b9b      	lsrs	r3, r3, #14
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	f003 0301 	and.w	r3, r3, #1
 8007cb6:	b2da      	uxtb	r2, r3
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cc2:	0b5b      	lsrs	r3, r3, #13
 8007cc4:	b2db      	uxtb	r3, r3
 8007cc6:	f003 0301 	and.w	r3, r3, #1
 8007cca:	b2da      	uxtb	r2, r3
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cd6:	0b1b      	lsrs	r3, r3, #12
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	f003 0301 	and.w	r3, r3, #1
 8007cde:	b2da      	uxtb	r2, r3
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cea:	0a9b      	lsrs	r3, r3, #10
 8007cec:	b2db      	uxtb	r3, r3
 8007cee:	f003 0303 	and.w	r3, r3, #3
 8007cf2:	b2da      	uxtb	r2, r3
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cfe:	0a1b      	lsrs	r3, r3, #8
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	f003 0303 	and.w	r3, r3, #3
 8007d06:	b2da      	uxtb	r2, r3
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d12:	085b      	lsrs	r3, r3, #1
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d1a:	b2da      	uxtb	r2, r3
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	2201      	movs	r2, #1
 8007d26:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8007d2a:	2300      	movs	r3, #0
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	370c      	adds	r7, #12
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	4770      	bx	lr
 8007d38:	004005ff 	.word	0x004005ff

08007d3c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b083      	sub	sp, #12
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007d86:	2300      	movs	r3, #0
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	370c      	adds	r7, #12
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr

08007d94 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007d94:	b5b0      	push	{r4, r5, r7, lr}
 8007d96:	b08e      	sub	sp, #56	; 0x38
 8007d98:	af04      	add	r7, sp, #16
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2203      	movs	r2, #3
 8007da2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007daa:	2b03      	cmp	r3, #3
 8007dac:	d02e      	beq.n	8007e0c <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007db4:	d106      	bne.n	8007dc4 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dba:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	639a      	str	r2, [r3, #56]	; 0x38
 8007dc2:	e029      	b.n	8007e18 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dca:	d10a      	bne.n	8007de2 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f000 fb0f 	bl	80083f0 <SD_WideBus_Enable>
 8007dd2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dda:	431a      	orrs	r2, r3
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	639a      	str	r2, [r3, #56]	; 0x38
 8007de0:	e01a      	b.n	8007e18 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d10a      	bne.n	8007dfe <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 fb4c 	bl	8008486 <SD_WideBus_Disable>
 8007dee:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df6:	431a      	orrs	r2, r3
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	639a      	str	r2, [r3, #56]	; 0x38
 8007dfc:	e00c      	b.n	8007e18 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e02:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	639a      	str	r2, [r3, #56]	; 0x38
 8007e0a:	e005      	b.n	8007e18 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e10:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d009      	beq.n	8007e34 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a18      	ldr	r2, [pc, #96]	; (8007e88 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8007e26:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007e30:	2301      	movs	r3, #1
 8007e32:	e024      	b.n	8007e7e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	689b      	ldr	r3, [r3, #8]
 8007e3e:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	68db      	ldr	r3, [r3, #12]
 8007e44:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	695b      	ldr	r3, [r3, #20]
 8007e4e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	699b      	ldr	r3, [r3, #24]
 8007e54:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681d      	ldr	r5, [r3, #0]
 8007e5a:	466c      	mov	r4, sp
 8007e5c:	f107 0318 	add.w	r3, r7, #24
 8007e60:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007e64:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007e68:	f107 030c 	add.w	r3, r7, #12
 8007e6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007e6e:	4628      	mov	r0, r5
 8007e70:	f002 f9c6 	bl	800a200 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2201      	movs	r2, #1
 8007e78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007e7c:	2300      	movs	r3, #0
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3728      	adds	r7, #40	; 0x28
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bdb0      	pop	{r4, r5, r7, pc}
 8007e86:	bf00      	nop
 8007e88:	004005ff 	.word	0x004005ff

08007e8c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b086      	sub	sp, #24
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007e94:	2300      	movs	r3, #0
 8007e96:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007e98:	f107 030c 	add.w	r3, r7, #12
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 fa7e 	bl	80083a0 <SD_SendStatus>
 8007ea4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d005      	beq.n	8007eb8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	431a      	orrs	r2, r3
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	0a5b      	lsrs	r3, r3, #9
 8007ebc:	f003 030f 	and.w	r3, r3, #15
 8007ec0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007ec2:	693b      	ldr	r3, [r7, #16]
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3718      	adds	r7, #24
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b085      	sub	sp, #20
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ed8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ee8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8007eea:	bf00      	nop
 8007eec:	3714      	adds	r7, #20
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr

08007ef6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007ef6:	b580      	push	{r7, lr}
 8007ef8:	b084      	sub	sp, #16
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f02:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f08:	2b82      	cmp	r3, #130	; 0x82
 8007f0a:	d111      	bne.n	8007f30 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4618      	mov	r0, r3
 8007f12:	f002 fafb 	bl	800a50c <SDMMC_CmdStopTransfer>
 8007f16:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d008      	beq.n	8007f30 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	431a      	orrs	r2, r3
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8007f2a:	68f8      	ldr	r0, [r7, #12]
 8007f2c:	f7ff fd4e 	bl	80079cc <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f022 0208 	bic.w	r2, r2, #8
 8007f3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f240 523a 	movw	r2, #1338	; 0x53a
 8007f48:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2200      	movs	r2, #0
 8007f56:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8007f58:	68f8      	ldr	r0, [r7, #12]
 8007f5a:	f7ff fd2d 	bl	80079b8 <HAL_SD_RxCpltCallback>
#endif
}
 8007f5e:	bf00      	nop
 8007f60:	3710      	adds	r7, #16
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}
	...

08007f68 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b086      	sub	sp, #24
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f74:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f7fb fd7c 	bl	8003a74 <HAL_DMA_GetError>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	2b02      	cmp	r3, #2
 8007f80:	d03e      	beq.n	8008000 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f88:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f90:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d002      	beq.n	8007f9e <SD_DMAError+0x36>
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d12d      	bne.n	8007ffa <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a19      	ldr	r2, [pc, #100]	; (8008008 <SD_DMAError+0xa0>)
 8007fa4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007fb4:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fba:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8007fc2:	6978      	ldr	r0, [r7, #20]
 8007fc4:	f7ff ff62 	bl	8007e8c <HAL_SD_GetCardState>
 8007fc8:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	2b06      	cmp	r3, #6
 8007fce:	d002      	beq.n	8007fd6 <SD_DMAError+0x6e>
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	2b05      	cmp	r3, #5
 8007fd4:	d10a      	bne.n	8007fec <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f002 fa96 	bl	800a50c <SDMMC_CmdStopTransfer>
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe6:	431a      	orrs	r2, r3
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	2201      	movs	r2, #1
 8007ff0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8007ffa:	6978      	ldr	r0, [r7, #20]
 8007ffc:	f7ff fce6 	bl	80079cc <HAL_SD_ErrorCallback>
#endif
  }
}
 8008000:	bf00      	nop
 8008002:	3718      	adds	r7, #24
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}
 8008008:	004005ff 	.word	0x004005ff

0800800c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b084      	sub	sp, #16
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008018:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f240 523a 	movw	r2, #1338	; 0x53a
 8008022:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008024:	68f8      	ldr	r0, [r7, #12]
 8008026:	f7ff ff31 	bl	8007e8c <HAL_SD_GetCardState>
 800802a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2201      	movs	r2, #1
 8008030:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2200      	movs	r2, #0
 8008038:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	2b06      	cmp	r3, #6
 800803e:	d002      	beq.n	8008046 <SD_DMATxAbort+0x3a>
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	2b05      	cmp	r3, #5
 8008044:	d10a      	bne.n	800805c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4618      	mov	r0, r3
 800804c:	f002 fa5e 	bl	800a50c <SDMMC_CmdStopTransfer>
 8008050:	4602      	mov	r2, r0
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008056:	431a      	orrs	r2, r3
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008060:	2b00      	cmp	r3, #0
 8008062:	d103      	bne.n	800806c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008064:	68f8      	ldr	r0, [r7, #12]
 8008066:	f7ff fcbb 	bl	80079e0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800806a:	e002      	b.n	8008072 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800806c:	68f8      	ldr	r0, [r7, #12]
 800806e:	f7ff fcad 	bl	80079cc <HAL_SD_ErrorCallback>
}
 8008072:	bf00      	nop
 8008074:	3710      	adds	r7, #16
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}

0800807a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800807a:	b580      	push	{r7, lr}
 800807c:	b084      	sub	sp, #16
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008086:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f240 523a 	movw	r2, #1338	; 0x53a
 8008090:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008092:	68f8      	ldr	r0, [r7, #12]
 8008094:	f7ff fefa 	bl	8007e8c <HAL_SD_GetCardState>
 8008098:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2201      	movs	r2, #1
 800809e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2200      	movs	r2, #0
 80080a6:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	2b06      	cmp	r3, #6
 80080ac:	d002      	beq.n	80080b4 <SD_DMARxAbort+0x3a>
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	2b05      	cmp	r3, #5
 80080b2:	d10a      	bne.n	80080ca <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4618      	mov	r0, r3
 80080ba:	f002 fa27 	bl	800a50c <SDMMC_CmdStopTransfer>
 80080be:	4602      	mov	r2, r0
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080c4:	431a      	orrs	r2, r3
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d103      	bne.n	80080da <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80080d2:	68f8      	ldr	r0, [r7, #12]
 80080d4:	f7ff fc84 	bl	80079e0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80080d8:	e002      	b.n	80080e0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80080da:	68f8      	ldr	r0, [r7, #12]
 80080dc:	f7ff fc76 	bl	80079cc <HAL_SD_ErrorCallback>
}
 80080e0:	bf00      	nop
 80080e2:	3710      	adds	r7, #16
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80080e8:	b5b0      	push	{r4, r5, r7, lr}
 80080ea:	b094      	sub	sp, #80	; 0x50
 80080ec:	af04      	add	r7, sp, #16
 80080ee:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80080f0:	2301      	movs	r3, #1
 80080f2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4618      	mov	r0, r3
 80080fa:	f002 f8d9 	bl	800a2b0 <SDIO_GetPowerState>
 80080fe:	4603      	mov	r3, r0
 8008100:	2b00      	cmp	r3, #0
 8008102:	d102      	bne.n	800810a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008104:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008108:	e0b7      	b.n	800827a <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800810e:	2b03      	cmp	r3, #3
 8008110:	d02f      	beq.n	8008172 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4618      	mov	r0, r3
 8008118:	f002 fb02 	bl	800a720 <SDMMC_CmdSendCID>
 800811c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800811e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008120:	2b00      	cmp	r3, #0
 8008122:	d001      	beq.n	8008128 <SD_InitCard+0x40>
    {
      return errorstate;
 8008124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008126:	e0a8      	b.n	800827a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	2100      	movs	r1, #0
 800812e:	4618      	mov	r0, r3
 8008130:	f002 f903 	bl	800a33a <SDIO_GetResponse>
 8008134:	4602      	mov	r2, r0
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	2104      	movs	r1, #4
 8008140:	4618      	mov	r0, r3
 8008142:	f002 f8fa 	bl	800a33a <SDIO_GetResponse>
 8008146:	4602      	mov	r2, r0
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	2108      	movs	r1, #8
 8008152:	4618      	mov	r0, r3
 8008154:	f002 f8f1 	bl	800a33a <SDIO_GetResponse>
 8008158:	4602      	mov	r2, r0
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	210c      	movs	r1, #12
 8008164:	4618      	mov	r0, r3
 8008166:	f002 f8e8 	bl	800a33a <SDIO_GetResponse>
 800816a:	4602      	mov	r2, r0
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008176:	2b03      	cmp	r3, #3
 8008178:	d00d      	beq.n	8008196 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f107 020e 	add.w	r2, r7, #14
 8008182:	4611      	mov	r1, r2
 8008184:	4618      	mov	r0, r3
 8008186:	f002 fb08 	bl	800a79a <SDMMC_CmdSetRelAdd>
 800818a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800818c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800818e:	2b00      	cmp	r3, #0
 8008190:	d001      	beq.n	8008196 <SD_InitCard+0xae>
    {
      return errorstate;
 8008192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008194:	e071      	b.n	800827a <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800819a:	2b03      	cmp	r3, #3
 800819c:	d036      	beq.n	800820c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800819e:	89fb      	ldrh	r3, [r7, #14]
 80081a0:	461a      	mov	r2, r3
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681a      	ldr	r2, [r3, #0]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081ae:	041b      	lsls	r3, r3, #16
 80081b0:	4619      	mov	r1, r3
 80081b2:	4610      	mov	r0, r2
 80081b4:	f002 fad2 	bl	800a75c <SDMMC_CmdSendCSD>
 80081b8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80081ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d001      	beq.n	80081c4 <SD_InitCard+0xdc>
    {
      return errorstate;
 80081c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081c2:	e05a      	b.n	800827a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	2100      	movs	r1, #0
 80081ca:	4618      	mov	r0, r3
 80081cc:	f002 f8b5 	bl	800a33a <SDIO_GetResponse>
 80081d0:	4602      	mov	r2, r0
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	2104      	movs	r1, #4
 80081dc:	4618      	mov	r0, r3
 80081de:	f002 f8ac 	bl	800a33a <SDIO_GetResponse>
 80081e2:	4602      	mov	r2, r0
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	2108      	movs	r1, #8
 80081ee:	4618      	mov	r0, r3
 80081f0:	f002 f8a3 	bl	800a33a <SDIO_GetResponse>
 80081f4:	4602      	mov	r2, r0
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	210c      	movs	r1, #12
 8008200:	4618      	mov	r0, r3
 8008202:	f002 f89a 	bl	800a33a <SDIO_GetResponse>
 8008206:	4602      	mov	r2, r0
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	2104      	movs	r1, #4
 8008212:	4618      	mov	r0, r3
 8008214:	f002 f891 	bl	800a33a <SDIO_GetResponse>
 8008218:	4603      	mov	r3, r0
 800821a:	0d1a      	lsrs	r2, r3, #20
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008220:	f107 0310 	add.w	r3, r7, #16
 8008224:	4619      	mov	r1, r3
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f7ff fbe4 	bl	80079f4 <HAL_SD_GetCardCSD>
 800822c:	4603      	mov	r3, r0
 800822e:	2b00      	cmp	r3, #0
 8008230:	d002      	beq.n	8008238 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008232:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008236:	e020      	b.n	800827a <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6819      	ldr	r1, [r3, #0]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008240:	041b      	lsls	r3, r3, #16
 8008242:	f04f 0400 	mov.w	r4, #0
 8008246:	461a      	mov	r2, r3
 8008248:	4623      	mov	r3, r4
 800824a:	4608      	mov	r0, r1
 800824c:	f002 f980 	bl	800a550 <SDMMC_CmdSelDesel>
 8008250:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008254:	2b00      	cmp	r3, #0
 8008256:	d001      	beq.n	800825c <SD_InitCard+0x174>
  {
    return errorstate;
 8008258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800825a:	e00e      	b.n	800827a <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681d      	ldr	r5, [r3, #0]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	466c      	mov	r4, sp
 8008264:	f103 0210 	add.w	r2, r3, #16
 8008268:	ca07      	ldmia	r2, {r0, r1, r2}
 800826a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800826e:	3304      	adds	r3, #4
 8008270:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008272:	4628      	mov	r0, r5
 8008274:	f001 ffc4 	bl	800a200 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008278:	2300      	movs	r3, #0
}
 800827a:	4618      	mov	r0, r3
 800827c:	3740      	adds	r7, #64	; 0x40
 800827e:	46bd      	mov	sp, r7
 8008280:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008284 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b086      	sub	sp, #24
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800828c:	2300      	movs	r3, #0
 800828e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008290:	2300      	movs	r3, #0
 8008292:	617b      	str	r3, [r7, #20]
 8008294:	2300      	movs	r3, #0
 8008296:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4618      	mov	r0, r3
 800829e:	f002 f97a 	bl	800a596 <SDMMC_CmdGoIdleState>
 80082a2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d001      	beq.n	80082ae <SD_PowerON+0x2a>
  {
    return errorstate;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	e072      	b.n	8008394 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4618      	mov	r0, r3
 80082b4:	f002 f98d 	bl	800a5d2 <SDMMC_CmdOperCond>
 80082b8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d00d      	beq.n	80082dc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4618      	mov	r0, r3
 80082cc:	f002 f963 	bl	800a596 <SDMMC_CmdGoIdleState>
 80082d0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d004      	beq.n	80082e2 <SD_PowerON+0x5e>
    {
      return errorstate;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	e05b      	b.n	8008394 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2201      	movs	r2, #1
 80082e0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	d137      	bne.n	800835a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	2100      	movs	r1, #0
 80082f0:	4618      	mov	r0, r3
 80082f2:	f002 f98d 	bl	800a610 <SDMMC_CmdAppCommand>
 80082f6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d02d      	beq.n	800835a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80082fe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008302:	e047      	b.n	8008394 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	2100      	movs	r1, #0
 800830a:	4618      	mov	r0, r3
 800830c:	f002 f980 	bl	800a610 <SDMMC_CmdAppCommand>
 8008310:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d001      	beq.n	800831c <SD_PowerON+0x98>
    {
      return errorstate;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	e03b      	b.n	8008394 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	491e      	ldr	r1, [pc, #120]	; (800839c <SD_PowerON+0x118>)
 8008322:	4618      	mov	r0, r3
 8008324:	f002 f996 	bl	800a654 <SDMMC_CmdAppOperCommand>
 8008328:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d002      	beq.n	8008336 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008330:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008334:	e02e      	b.n	8008394 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	2100      	movs	r1, #0
 800833c:	4618      	mov	r0, r3
 800833e:	f001 fffc 	bl	800a33a <SDIO_GetResponse>
 8008342:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	0fdb      	lsrs	r3, r3, #31
 8008348:	2b01      	cmp	r3, #1
 800834a:	d101      	bne.n	8008350 <SD_PowerON+0xcc>
 800834c:	2301      	movs	r3, #1
 800834e:	e000      	b.n	8008352 <SD_PowerON+0xce>
 8008350:	2300      	movs	r3, #0
 8008352:	613b      	str	r3, [r7, #16]

    count++;
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	3301      	adds	r3, #1
 8008358:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008360:	4293      	cmp	r3, r2
 8008362:	d802      	bhi.n	800836a <SD_PowerON+0xe6>
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d0cc      	beq.n	8008304 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008370:	4293      	cmp	r3, r2
 8008372:	d902      	bls.n	800837a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008374:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008378:	e00c      	b.n	8008394 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008380:	2b00      	cmp	r3, #0
 8008382:	d003      	beq.n	800838c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2201      	movs	r2, #1
 8008388:	645a      	str	r2, [r3, #68]	; 0x44
 800838a:	e002      	b.n	8008392 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2200      	movs	r2, #0
 8008390:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008392:	2300      	movs	r3, #0
}
 8008394:	4618      	mov	r0, r3
 8008396:	3718      	adds	r7, #24
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}
 800839c:	c1100000 	.word	0xc1100000

080083a0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b084      	sub	sp, #16
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d102      	bne.n	80083b6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80083b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80083b4:	e018      	b.n	80083e8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681a      	ldr	r2, [r3, #0]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083be:	041b      	lsls	r3, r3, #16
 80083c0:	4619      	mov	r1, r3
 80083c2:	4610      	mov	r0, r2
 80083c4:	f002 fa0a 	bl	800a7dc <SDMMC_CmdSendStatus>
 80083c8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d001      	beq.n	80083d4 <SD_SendStatus+0x34>
  {
    return errorstate;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	e009      	b.n	80083e8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	2100      	movs	r1, #0
 80083da:	4618      	mov	r0, r3
 80083dc:	f001 ffad 	bl	800a33a <SDIO_GetResponse>
 80083e0:	4602      	mov	r2, r0
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80083e6:	2300      	movs	r3, #0
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3710      	adds	r7, #16
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}

080083f0 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b086      	sub	sp, #24
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80083f8:	2300      	movs	r3, #0
 80083fa:	60fb      	str	r3, [r7, #12]
 80083fc:	2300      	movs	r3, #0
 80083fe:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	2100      	movs	r1, #0
 8008406:	4618      	mov	r0, r3
 8008408:	f001 ff97 	bl	800a33a <SDIO_GetResponse>
 800840c:	4603      	mov	r3, r0
 800840e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008412:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008416:	d102      	bne.n	800841e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008418:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800841c:	e02f      	b.n	800847e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800841e:	f107 030c 	add.w	r3, r7, #12
 8008422:	4619      	mov	r1, r3
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 f879 	bl	800851c <SD_FindSCR>
 800842a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d001      	beq.n	8008436 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	e023      	b.n	800847e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800843c:	2b00      	cmp	r3, #0
 800843e:	d01c      	beq.n	800847a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681a      	ldr	r2, [r3, #0]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008448:	041b      	lsls	r3, r3, #16
 800844a:	4619      	mov	r1, r3
 800844c:	4610      	mov	r0, r2
 800844e:	f002 f8df 	bl	800a610 <SDMMC_CmdAppCommand>
 8008452:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d001      	beq.n	800845e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	e00f      	b.n	800847e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	2102      	movs	r1, #2
 8008464:	4618      	mov	r0, r3
 8008466:	f002 f918 	bl	800a69a <SDMMC_CmdBusWidth>
 800846a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d001      	beq.n	8008476 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	e003      	b.n	800847e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008476:	2300      	movs	r3, #0
 8008478:	e001      	b.n	800847e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800847a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800847e:	4618      	mov	r0, r3
 8008480:	3718      	adds	r7, #24
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}

08008486 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008486:	b580      	push	{r7, lr}
 8008488:	b086      	sub	sp, #24
 800848a:	af00      	add	r7, sp, #0
 800848c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800848e:	2300      	movs	r3, #0
 8008490:	60fb      	str	r3, [r7, #12]
 8008492:	2300      	movs	r3, #0
 8008494:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	2100      	movs	r1, #0
 800849c:	4618      	mov	r0, r3
 800849e:	f001 ff4c 	bl	800a33a <SDIO_GetResponse>
 80084a2:	4603      	mov	r3, r0
 80084a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80084ac:	d102      	bne.n	80084b4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80084ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80084b2:	e02f      	b.n	8008514 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80084b4:	f107 030c 	add.w	r3, r7, #12
 80084b8:	4619      	mov	r1, r3
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 f82e 	bl	800851c <SD_FindSCR>
 80084c0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d001      	beq.n	80084cc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	e023      	b.n	8008514 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d01c      	beq.n	8008510 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681a      	ldr	r2, [r3, #0]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084de:	041b      	lsls	r3, r3, #16
 80084e0:	4619      	mov	r1, r3
 80084e2:	4610      	mov	r0, r2
 80084e4:	f002 f894 	bl	800a610 <SDMMC_CmdAppCommand>
 80084e8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d001      	beq.n	80084f4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	e00f      	b.n	8008514 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	2100      	movs	r1, #0
 80084fa:	4618      	mov	r0, r3
 80084fc:	f002 f8cd 	bl	800a69a <SDMMC_CmdBusWidth>
 8008500:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d001      	beq.n	800850c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	e003      	b.n	8008514 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800850c:	2300      	movs	r3, #0
 800850e:	e001      	b.n	8008514 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008510:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008514:	4618      	mov	r0, r3
 8008516:	3718      	adds	r7, #24
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}

0800851c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800851c:	b590      	push	{r4, r7, lr}
 800851e:	b08f      	sub	sp, #60	; 0x3c
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
 8008524:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008526:	f7fa feb3 	bl	8003290 <HAL_GetTick>
 800852a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800852c:	2300      	movs	r3, #0
 800852e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8008530:	2300      	movs	r3, #0
 8008532:	60bb      	str	r3, [r7, #8]
 8008534:	2300      	movs	r3, #0
 8008536:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	2108      	movs	r1, #8
 8008542:	4618      	mov	r0, r3
 8008544:	f001 ff38 	bl	800a3b8 <SDMMC_CmdBlockLength>
 8008548:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800854a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800854c:	2b00      	cmp	r3, #0
 800854e:	d001      	beq.n	8008554 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008552:	e0a9      	b.n	80086a8 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681a      	ldr	r2, [r3, #0]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800855c:	041b      	lsls	r3, r3, #16
 800855e:	4619      	mov	r1, r3
 8008560:	4610      	mov	r0, r2
 8008562:	f002 f855 	bl	800a610 <SDMMC_CmdAppCommand>
 8008566:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800856a:	2b00      	cmp	r3, #0
 800856c:	d001      	beq.n	8008572 <SD_FindSCR+0x56>
  {
    return errorstate;
 800856e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008570:	e09a      	b.n	80086a8 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008572:	f04f 33ff 	mov.w	r3, #4294967295
 8008576:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008578:	2308      	movs	r3, #8
 800857a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800857c:	2330      	movs	r3, #48	; 0x30
 800857e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008580:	2302      	movs	r3, #2
 8008582:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008584:	2300      	movs	r3, #0
 8008586:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8008588:	2301      	movs	r3, #1
 800858a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f107 0210 	add.w	r2, r7, #16
 8008594:	4611      	mov	r1, r2
 8008596:	4618      	mov	r0, r3
 8008598:	f001 fee2 	bl	800a360 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4618      	mov	r0, r3
 80085a2:	f002 f89c 	bl	800a6de <SDMMC_CmdSendSCR>
 80085a6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80085a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d022      	beq.n	80085f4 <SD_FindSCR+0xd8>
  {
    return errorstate;
 80085ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b0:	e07a      	b.n	80086a8 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d00e      	beq.n	80085de <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6819      	ldr	r1, [r3, #0]
 80085c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085c6:	009b      	lsls	r3, r3, #2
 80085c8:	f107 0208 	add.w	r2, r7, #8
 80085cc:	18d4      	adds	r4, r2, r3
 80085ce:	4608      	mov	r0, r1
 80085d0:	f001 fe41 	bl	800a256 <SDIO_ReadFIFO>
 80085d4:	4603      	mov	r3, r0
 80085d6:	6023      	str	r3, [r4, #0]
      index++;
 80085d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085da:	3301      	adds	r3, #1
 80085dc:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80085de:	f7fa fe57 	bl	8003290 <HAL_GetTick>
 80085e2:	4602      	mov	r2, r0
 80085e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e6:	1ad3      	subs	r3, r2, r3
 80085e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085ec:	d102      	bne.n	80085f4 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80085ee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80085f2:	e059      	b.n	80086a8 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085fa:	f240 432a 	movw	r3, #1066	; 0x42a
 80085fe:	4013      	ands	r3, r2
 8008600:	2b00      	cmp	r3, #0
 8008602:	d0d6      	beq.n	80085b2 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800860a:	f003 0308 	and.w	r3, r3, #8
 800860e:	2b00      	cmp	r3, #0
 8008610:	d005      	beq.n	800861e <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	2208      	movs	r2, #8
 8008618:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800861a:	2308      	movs	r3, #8
 800861c:	e044      	b.n	80086a8 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008624:	f003 0302 	and.w	r3, r3, #2
 8008628:	2b00      	cmp	r3, #0
 800862a:	d005      	beq.n	8008638 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	2202      	movs	r2, #2
 8008632:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008634:	2302      	movs	r3, #2
 8008636:	e037      	b.n	80086a8 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800863e:	f003 0320 	and.w	r3, r3, #32
 8008642:	2b00      	cmp	r3, #0
 8008644:	d005      	beq.n	8008652 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	2220      	movs	r2, #32
 800864c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800864e:	2320      	movs	r3, #32
 8008650:	e02a      	b.n	80086a8 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f240 523a 	movw	r2, #1338	; 0x53a
 800865a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	061a      	lsls	r2, r3, #24
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	021b      	lsls	r3, r3, #8
 8008664:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008668:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	0a1b      	lsrs	r3, r3, #8
 800866e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008672:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	0e1b      	lsrs	r3, r3, #24
 8008678:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800867a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800867c:	601a      	str	r2, [r3, #0]
    scr++;
 800867e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008680:	3304      	adds	r3, #4
 8008682:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	061a      	lsls	r2, r3, #24
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	021b      	lsls	r3, r3, #8
 800868c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008690:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	0a1b      	lsrs	r3, r3, #8
 8008696:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800869a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	0e1b      	lsrs	r3, r3, #24
 80086a0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80086a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086a4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80086a6:	2300      	movs	r3, #0
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	373c      	adds	r7, #60	; 0x3c
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd90      	pop	{r4, r7, pc}

080086b0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b086      	sub	sp, #24
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086bc:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086c2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d03f      	beq.n	800874a <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80086ca:	2300      	movs	r3, #0
 80086cc:	617b      	str	r3, [r7, #20]
 80086ce:	e033      	b.n	8008738 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4618      	mov	r0, r3
 80086d6:	f001 fdbe 	bl	800a256 <SDIO_ReadFIFO>
 80086da:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	b2da      	uxtb	r2, r3
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	3301      	adds	r3, #1
 80086e8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	3b01      	subs	r3, #1
 80086ee:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	0a1b      	lsrs	r3, r3, #8
 80086f4:	b2da      	uxtb	r2, r3
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	701a      	strb	r2, [r3, #0]
      tmp++;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	3301      	adds	r3, #1
 80086fe:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	3b01      	subs	r3, #1
 8008704:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	0c1b      	lsrs	r3, r3, #16
 800870a:	b2da      	uxtb	r2, r3
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	3301      	adds	r3, #1
 8008714:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	3b01      	subs	r3, #1
 800871a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	0e1b      	lsrs	r3, r3, #24
 8008720:	b2da      	uxtb	r2, r3
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	3301      	adds	r3, #1
 800872a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	3b01      	subs	r3, #1
 8008730:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	3301      	adds	r3, #1
 8008736:	617b      	str	r3, [r7, #20]
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	2b07      	cmp	r3, #7
 800873c:	d9c8      	bls.n	80086d0 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	68fa      	ldr	r2, [r7, #12]
 8008742:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	693a      	ldr	r2, [r7, #16]
 8008748:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800874a:	bf00      	nop
 800874c:	3718      	adds	r7, #24
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}

08008752 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8008752:	b580      	push	{r7, lr}
 8008754:	b086      	sub	sp, #24
 8008756:	af00      	add	r7, sp, #0
 8008758:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6a1b      	ldr	r3, [r3, #32]
 800875e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008764:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d043      	beq.n	80087f4 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800876c:	2300      	movs	r3, #0
 800876e:	617b      	str	r3, [r7, #20]
 8008770:	e037      	b.n	80087e2 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	781b      	ldrb	r3, [r3, #0]
 8008776:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	3301      	adds	r3, #1
 800877c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800877e:	693b      	ldr	r3, [r7, #16]
 8008780:	3b01      	subs	r3, #1
 8008782:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	781b      	ldrb	r3, [r3, #0]
 8008788:	021a      	lsls	r2, r3, #8
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	4313      	orrs	r3, r2
 800878e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	3301      	adds	r3, #1
 8008794:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	3b01      	subs	r3, #1
 800879a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	781b      	ldrb	r3, [r3, #0]
 80087a0:	041a      	lsls	r2, r3, #16
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	4313      	orrs	r3, r2
 80087a6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	3301      	adds	r3, #1
 80087ac:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	3b01      	subs	r3, #1
 80087b2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	781b      	ldrb	r3, [r3, #0]
 80087b8:	061a      	lsls	r2, r3, #24
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	4313      	orrs	r3, r2
 80087be:	60bb      	str	r3, [r7, #8]
      tmp++;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	3301      	adds	r3, #1
 80087c4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	3b01      	subs	r3, #1
 80087ca:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f107 0208 	add.w	r2, r7, #8
 80087d4:	4611      	mov	r1, r2
 80087d6:	4618      	mov	r0, r3
 80087d8:	f001 fd4a 	bl	800a270 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	3301      	adds	r3, #1
 80087e0:	617b      	str	r3, [r7, #20]
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	2b07      	cmp	r3, #7
 80087e6:	d9c4      	bls.n	8008772 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	68fa      	ldr	r2, [r7, #12]
 80087ec:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	693a      	ldr	r2, [r7, #16]
 80087f2:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80087f4:	bf00      	nop
 80087f6:	3718      	adds	r7, #24
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}

080087fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b082      	sub	sp, #8
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d101      	bne.n	800880e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800880a:	2301      	movs	r3, #1
 800880c:	e056      	b.n	80088bc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2200      	movs	r2, #0
 8008812:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800881a:	b2db      	uxtb	r3, r3
 800881c:	2b00      	cmp	r3, #0
 800881e:	d106      	bne.n	800882e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2200      	movs	r2, #0
 8008824:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f7fa fb2f 	bl	8002e8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2202      	movs	r2, #2
 8008832:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	681a      	ldr	r2, [r3, #0]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008844:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	685a      	ldr	r2, [r3, #4]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	689b      	ldr	r3, [r3, #8]
 800884e:	431a      	orrs	r2, r3
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	68db      	ldr	r3, [r3, #12]
 8008854:	431a      	orrs	r2, r3
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	691b      	ldr	r3, [r3, #16]
 800885a:	431a      	orrs	r2, r3
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	695b      	ldr	r3, [r3, #20]
 8008860:	431a      	orrs	r2, r3
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	699b      	ldr	r3, [r3, #24]
 8008866:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800886a:	431a      	orrs	r2, r3
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	69db      	ldr	r3, [r3, #28]
 8008870:	431a      	orrs	r2, r3
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6a1b      	ldr	r3, [r3, #32]
 8008876:	ea42 0103 	orr.w	r1, r2, r3
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	430a      	orrs	r2, r1
 8008884:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	699b      	ldr	r3, [r3, #24]
 800888a:	0c1b      	lsrs	r3, r3, #16
 800888c:	f003 0104 	and.w	r1, r3, #4
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	430a      	orrs	r2, r1
 800889a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	69da      	ldr	r2, [r3, #28]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80088aa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2200      	movs	r2, #0
 80088b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2201      	movs	r2, #1
 80088b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80088ba:	2300      	movs	r3, #0
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3708      	adds	r7, #8
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}

080088c4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b088      	sub	sp, #32
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	60f8      	str	r0, [r7, #12]
 80088cc:	60b9      	str	r1, [r7, #8]
 80088ce:	603b      	str	r3, [r7, #0]
 80088d0:	4613      	mov	r3, r2
 80088d2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80088d4:	2300      	movs	r3, #0
 80088d6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80088de:	2b01      	cmp	r3, #1
 80088e0:	d101      	bne.n	80088e6 <HAL_SPI_Transmit+0x22>
 80088e2:	2302      	movs	r3, #2
 80088e4:	e11e      	b.n	8008b24 <HAL_SPI_Transmit+0x260>
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2201      	movs	r2, #1
 80088ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80088ee:	f7fa fccf 	bl	8003290 <HAL_GetTick>
 80088f2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80088f4:	88fb      	ldrh	r3, [r7, #6]
 80088f6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80088fe:	b2db      	uxtb	r3, r3
 8008900:	2b01      	cmp	r3, #1
 8008902:	d002      	beq.n	800890a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008904:	2302      	movs	r3, #2
 8008906:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008908:	e103      	b.n	8008b12 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d002      	beq.n	8008916 <HAL_SPI_Transmit+0x52>
 8008910:	88fb      	ldrh	r3, [r7, #6]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d102      	bne.n	800891c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008916:	2301      	movs	r3, #1
 8008918:	77fb      	strb	r3, [r7, #31]
    goto error;
 800891a:	e0fa      	b.n	8008b12 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2203      	movs	r2, #3
 8008920:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	2200      	movs	r2, #0
 8008928:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	68ba      	ldr	r2, [r7, #8]
 800892e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	88fa      	ldrh	r2, [r7, #6]
 8008934:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	88fa      	ldrh	r2, [r7, #6]
 800893a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2200      	movs	r2, #0
 8008940:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2200      	movs	r2, #0
 8008946:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2200      	movs	r2, #0
 800894c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2200      	movs	r2, #0
 8008952:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2200      	movs	r2, #0
 8008958:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	689b      	ldr	r3, [r3, #8]
 800895e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008962:	d107      	bne.n	8008974 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	681a      	ldr	r2, [r3, #0]
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008972:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800897e:	2b40      	cmp	r3, #64	; 0x40
 8008980:	d007      	beq.n	8008992 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	681a      	ldr	r2, [r3, #0]
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008990:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	68db      	ldr	r3, [r3, #12]
 8008996:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800899a:	d14b      	bne.n	8008a34 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d002      	beq.n	80089aa <HAL_SPI_Transmit+0xe6>
 80089a4:	8afb      	ldrh	r3, [r7, #22]
 80089a6:	2b01      	cmp	r3, #1
 80089a8:	d13e      	bne.n	8008a28 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ae:	881a      	ldrh	r2, [r3, #0]
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ba:	1c9a      	adds	r2, r3, #2
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80089c4:	b29b      	uxth	r3, r3
 80089c6:	3b01      	subs	r3, #1
 80089c8:	b29a      	uxth	r2, r3
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80089ce:	e02b      	b.n	8008a28 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	689b      	ldr	r3, [r3, #8]
 80089d6:	f003 0302 	and.w	r3, r3, #2
 80089da:	2b02      	cmp	r3, #2
 80089dc:	d112      	bne.n	8008a04 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089e2:	881a      	ldrh	r2, [r3, #0]
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ee:	1c9a      	adds	r2, r3, #2
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	3b01      	subs	r3, #1
 80089fc:	b29a      	uxth	r2, r3
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	86da      	strh	r2, [r3, #54]	; 0x36
 8008a02:	e011      	b.n	8008a28 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a04:	f7fa fc44 	bl	8003290 <HAL_GetTick>
 8008a08:	4602      	mov	r2, r0
 8008a0a:	69bb      	ldr	r3, [r7, #24]
 8008a0c:	1ad3      	subs	r3, r2, r3
 8008a0e:	683a      	ldr	r2, [r7, #0]
 8008a10:	429a      	cmp	r2, r3
 8008a12:	d803      	bhi.n	8008a1c <HAL_SPI_Transmit+0x158>
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a1a:	d102      	bne.n	8008a22 <HAL_SPI_Transmit+0x15e>
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d102      	bne.n	8008a28 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8008a22:	2303      	movs	r3, #3
 8008a24:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008a26:	e074      	b.n	8008b12 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a2c:	b29b      	uxth	r3, r3
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d1ce      	bne.n	80089d0 <HAL_SPI_Transmit+0x10c>
 8008a32:	e04c      	b.n	8008ace <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	685b      	ldr	r3, [r3, #4]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d002      	beq.n	8008a42 <HAL_SPI_Transmit+0x17e>
 8008a3c:	8afb      	ldrh	r3, [r7, #22]
 8008a3e:	2b01      	cmp	r3, #1
 8008a40:	d140      	bne.n	8008ac4 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	330c      	adds	r3, #12
 8008a4c:	7812      	ldrb	r2, [r2, #0]
 8008a4e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a54:	1c5a      	adds	r2, r3, #1
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a5e:	b29b      	uxth	r3, r3
 8008a60:	3b01      	subs	r3, #1
 8008a62:	b29a      	uxth	r2, r3
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008a68:	e02c      	b.n	8008ac4 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	689b      	ldr	r3, [r3, #8]
 8008a70:	f003 0302 	and.w	r3, r3, #2
 8008a74:	2b02      	cmp	r3, #2
 8008a76:	d113      	bne.n	8008aa0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	330c      	adds	r3, #12
 8008a82:	7812      	ldrb	r2, [r2, #0]
 8008a84:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a8a:	1c5a      	adds	r2, r3, #1
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a94:	b29b      	uxth	r3, r3
 8008a96:	3b01      	subs	r3, #1
 8008a98:	b29a      	uxth	r2, r3
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	86da      	strh	r2, [r3, #54]	; 0x36
 8008a9e:	e011      	b.n	8008ac4 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008aa0:	f7fa fbf6 	bl	8003290 <HAL_GetTick>
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	69bb      	ldr	r3, [r7, #24]
 8008aa8:	1ad3      	subs	r3, r2, r3
 8008aaa:	683a      	ldr	r2, [r7, #0]
 8008aac:	429a      	cmp	r2, r3
 8008aae:	d803      	bhi.n	8008ab8 <HAL_SPI_Transmit+0x1f4>
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ab6:	d102      	bne.n	8008abe <HAL_SPI_Transmit+0x1fa>
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d102      	bne.n	8008ac4 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8008abe:	2303      	movs	r3, #3
 8008ac0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008ac2:	e026      	b.n	8008b12 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ac8:	b29b      	uxth	r3, r3
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d1cd      	bne.n	8008a6a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008ace:	69ba      	ldr	r2, [r7, #24]
 8008ad0:	6839      	ldr	r1, [r7, #0]
 8008ad2:	68f8      	ldr	r0, [r7, #12]
 8008ad4:	f000 fa44 	bl	8008f60 <SPI_EndRxTxTransaction>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d002      	beq.n	8008ae4 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	2220      	movs	r2, #32
 8008ae2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	689b      	ldr	r3, [r3, #8]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d10a      	bne.n	8008b02 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008aec:	2300      	movs	r3, #0
 8008aee:	613b      	str	r3, [r7, #16]
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	68db      	ldr	r3, [r3, #12]
 8008af6:	613b      	str	r3, [r7, #16]
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	689b      	ldr	r3, [r3, #8]
 8008afe:	613b      	str	r3, [r7, #16]
 8008b00:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d002      	beq.n	8008b10 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	77fb      	strb	r3, [r7, #31]
 8008b0e:	e000      	b.n	8008b12 <HAL_SPI_Transmit+0x24e>
  }

error:
 8008b10:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2201      	movs	r2, #1
 8008b16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008b22:	7ffb      	ldrb	r3, [r7, #31]
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3720      	adds	r7, #32
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b08c      	sub	sp, #48	; 0x30
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	60f8      	str	r0, [r7, #12]
 8008b34:	60b9      	str	r1, [r7, #8]
 8008b36:	607a      	str	r2, [r7, #4]
 8008b38:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008b4a:	2b01      	cmp	r3, #1
 8008b4c:	d101      	bne.n	8008b52 <HAL_SPI_TransmitReceive+0x26>
 8008b4e:	2302      	movs	r3, #2
 8008b50:	e18a      	b.n	8008e68 <HAL_SPI_TransmitReceive+0x33c>
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2201      	movs	r2, #1
 8008b56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008b5a:	f7fa fb99 	bl	8003290 <HAL_GetTick>
 8008b5e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008b66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008b70:	887b      	ldrh	r3, [r7, #2]
 8008b72:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008b74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008b78:	2b01      	cmp	r3, #1
 8008b7a:	d00f      	beq.n	8008b9c <HAL_SPI_TransmitReceive+0x70>
 8008b7c:	69fb      	ldr	r3, [r7, #28]
 8008b7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b82:	d107      	bne.n	8008b94 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	689b      	ldr	r3, [r3, #8]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d103      	bne.n	8008b94 <HAL_SPI_TransmitReceive+0x68>
 8008b8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008b90:	2b04      	cmp	r3, #4
 8008b92:	d003      	beq.n	8008b9c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008b94:	2302      	movs	r3, #2
 8008b96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008b9a:	e15b      	b.n	8008e54 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d005      	beq.n	8008bae <HAL_SPI_TransmitReceive+0x82>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d002      	beq.n	8008bae <HAL_SPI_TransmitReceive+0x82>
 8008ba8:	887b      	ldrh	r3, [r7, #2]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d103      	bne.n	8008bb6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008bae:	2301      	movs	r3, #1
 8008bb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008bb4:	e14e      	b.n	8008e54 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008bbc:	b2db      	uxtb	r3, r3
 8008bbe:	2b04      	cmp	r3, #4
 8008bc0:	d003      	beq.n	8008bca <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2205      	movs	r2, #5
 8008bc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	687a      	ldr	r2, [r7, #4]
 8008bd4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	887a      	ldrh	r2, [r7, #2]
 8008bda:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	887a      	ldrh	r2, [r7, #2]
 8008be0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	68ba      	ldr	r2, [r7, #8]
 8008be6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	887a      	ldrh	r2, [r7, #2]
 8008bec:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	887a      	ldrh	r2, [r7, #2]
 8008bf2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c0a:	2b40      	cmp	r3, #64	; 0x40
 8008c0c:	d007      	beq.n	8008c1e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	681a      	ldr	r2, [r3, #0]
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c1c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	68db      	ldr	r3, [r3, #12]
 8008c22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c26:	d178      	bne.n	8008d1a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d002      	beq.n	8008c36 <HAL_SPI_TransmitReceive+0x10a>
 8008c30:	8b7b      	ldrh	r3, [r7, #26]
 8008c32:	2b01      	cmp	r3, #1
 8008c34:	d166      	bne.n	8008d04 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c3a:	881a      	ldrh	r2, [r3, #0]
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c46:	1c9a      	adds	r2, r3, #2
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	3b01      	subs	r3, #1
 8008c54:	b29a      	uxth	r2, r3
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008c5a:	e053      	b.n	8008d04 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	689b      	ldr	r3, [r3, #8]
 8008c62:	f003 0302 	and.w	r3, r3, #2
 8008c66:	2b02      	cmp	r3, #2
 8008c68:	d11b      	bne.n	8008ca2 <HAL_SPI_TransmitReceive+0x176>
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c6e:	b29b      	uxth	r3, r3
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d016      	beq.n	8008ca2 <HAL_SPI_TransmitReceive+0x176>
 8008c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c76:	2b01      	cmp	r3, #1
 8008c78:	d113      	bne.n	8008ca2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c7e:	881a      	ldrh	r2, [r3, #0]
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c8a:	1c9a      	adds	r2, r3, #2
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c94:	b29b      	uxth	r3, r3
 8008c96:	3b01      	subs	r3, #1
 8008c98:	b29a      	uxth	r2, r3
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	f003 0301 	and.w	r3, r3, #1
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	d119      	bne.n	8008ce4 <HAL_SPI_TransmitReceive+0x1b8>
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cb4:	b29b      	uxth	r3, r3
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d014      	beq.n	8008ce4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	68da      	ldr	r2, [r3, #12]
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cc4:	b292      	uxth	r2, r2
 8008cc6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ccc:	1c9a      	adds	r2, r3, #2
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cd6:	b29b      	uxth	r3, r3
 8008cd8:	3b01      	subs	r3, #1
 8008cda:	b29a      	uxth	r2, r3
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008ce4:	f7fa fad4 	bl	8003290 <HAL_GetTick>
 8008ce8:	4602      	mov	r2, r0
 8008cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cec:	1ad3      	subs	r3, r2, r3
 8008cee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d807      	bhi.n	8008d04 <HAL_SPI_TransmitReceive+0x1d8>
 8008cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cfa:	d003      	beq.n	8008d04 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008cfc:	2303      	movs	r3, #3
 8008cfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008d02:	e0a7      	b.n	8008e54 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d08:	b29b      	uxth	r3, r3
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d1a6      	bne.n	8008c5c <HAL_SPI_TransmitReceive+0x130>
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d12:	b29b      	uxth	r3, r3
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d1a1      	bne.n	8008c5c <HAL_SPI_TransmitReceive+0x130>
 8008d18:	e07c      	b.n	8008e14 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d002      	beq.n	8008d28 <HAL_SPI_TransmitReceive+0x1fc>
 8008d22:	8b7b      	ldrh	r3, [r7, #26]
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	d16b      	bne.n	8008e00 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	330c      	adds	r3, #12
 8008d32:	7812      	ldrb	r2, [r2, #0]
 8008d34:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d3a:	1c5a      	adds	r2, r3, #1
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d44:	b29b      	uxth	r3, r3
 8008d46:	3b01      	subs	r3, #1
 8008d48:	b29a      	uxth	r2, r3
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d4e:	e057      	b.n	8008e00 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	689b      	ldr	r3, [r3, #8]
 8008d56:	f003 0302 	and.w	r3, r3, #2
 8008d5a:	2b02      	cmp	r3, #2
 8008d5c:	d11c      	bne.n	8008d98 <HAL_SPI_TransmitReceive+0x26c>
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d017      	beq.n	8008d98 <HAL_SPI_TransmitReceive+0x26c>
 8008d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d6a:	2b01      	cmp	r3, #1
 8008d6c:	d114      	bne.n	8008d98 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	330c      	adds	r3, #12
 8008d78:	7812      	ldrb	r2, [r2, #0]
 8008d7a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d80:	1c5a      	adds	r2, r3, #1
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d8a:	b29b      	uxth	r3, r3
 8008d8c:	3b01      	subs	r3, #1
 8008d8e:	b29a      	uxth	r2, r3
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008d94:	2300      	movs	r3, #0
 8008d96:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	689b      	ldr	r3, [r3, #8]
 8008d9e:	f003 0301 	and.w	r3, r3, #1
 8008da2:	2b01      	cmp	r3, #1
 8008da4:	d119      	bne.n	8008dda <HAL_SPI_TransmitReceive+0x2ae>
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008daa:	b29b      	uxth	r3, r3
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d014      	beq.n	8008dda <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	68da      	ldr	r2, [r3, #12]
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dba:	b2d2      	uxtb	r2, r2
 8008dbc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dc2:	1c5a      	adds	r2, r3, #1
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008dcc:	b29b      	uxth	r3, r3
 8008dce:	3b01      	subs	r3, #1
 8008dd0:	b29a      	uxth	r2, r3
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008dda:	f7fa fa59 	bl	8003290 <HAL_GetTick>
 8008dde:	4602      	mov	r2, r0
 8008de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de2:	1ad3      	subs	r3, r2, r3
 8008de4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d803      	bhi.n	8008df2 <HAL_SPI_TransmitReceive+0x2c6>
 8008dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008df0:	d102      	bne.n	8008df8 <HAL_SPI_TransmitReceive+0x2cc>
 8008df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d103      	bne.n	8008e00 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008df8:	2303      	movs	r3, #3
 8008dfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008dfe:	e029      	b.n	8008e54 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e04:	b29b      	uxth	r3, r3
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d1a2      	bne.n	8008d50 <HAL_SPI_TransmitReceive+0x224>
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e0e:	b29b      	uxth	r3, r3
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d19d      	bne.n	8008d50 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008e14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e16:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008e18:	68f8      	ldr	r0, [r7, #12]
 8008e1a:	f000 f8a1 	bl	8008f60 <SPI_EndRxTxTransaction>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d006      	beq.n	8008e32 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008e24:	2301      	movs	r3, #1
 8008e26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	2220      	movs	r2, #32
 8008e2e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008e30:	e010      	b.n	8008e54 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	689b      	ldr	r3, [r3, #8]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d10b      	bne.n	8008e52 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	617b      	str	r3, [r7, #20]
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	68db      	ldr	r3, [r3, #12]
 8008e44:	617b      	str	r3, [r7, #20]
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	689b      	ldr	r3, [r3, #8]
 8008e4c:	617b      	str	r3, [r7, #20]
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	e000      	b.n	8008e54 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008e52:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	2201      	movs	r2, #1
 8008e58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008e64:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3730      	adds	r7, #48	; 0x30
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b083      	sub	sp, #12
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008e7e:	b2db      	uxtb	r3, r3
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	370c      	adds	r7, #12
 8008e84:	46bd      	mov	sp, r7
 8008e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8a:	4770      	bx	lr

08008e8c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b084      	sub	sp, #16
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	60f8      	str	r0, [r7, #12]
 8008e94:	60b9      	str	r1, [r7, #8]
 8008e96:	603b      	str	r3, [r7, #0]
 8008e98:	4613      	mov	r3, r2
 8008e9a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008e9c:	e04c      	b.n	8008f38 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ea4:	d048      	beq.n	8008f38 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8008ea6:	f7fa f9f3 	bl	8003290 <HAL_GetTick>
 8008eaa:	4602      	mov	r2, r0
 8008eac:	69bb      	ldr	r3, [r7, #24]
 8008eae:	1ad3      	subs	r3, r2, r3
 8008eb0:	683a      	ldr	r2, [r7, #0]
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d902      	bls.n	8008ebc <SPI_WaitFlagStateUntilTimeout+0x30>
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d13d      	bne.n	8008f38 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	685a      	ldr	r2, [r3, #4]
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008eca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008ed4:	d111      	bne.n	8008efa <SPI_WaitFlagStateUntilTimeout+0x6e>
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	689b      	ldr	r3, [r3, #8]
 8008eda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ede:	d004      	beq.n	8008eea <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	689b      	ldr	r3, [r3, #8]
 8008ee4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ee8:	d107      	bne.n	8008efa <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	681a      	ldr	r2, [r3, #0]
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ef8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008efe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f02:	d10f      	bne.n	8008f24 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	681a      	ldr	r2, [r3, #0]
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008f12:	601a      	str	r2, [r3, #0]
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	681a      	ldr	r2, [r3, #0]
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008f22:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	2201      	movs	r2, #1
 8008f28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008f34:	2303      	movs	r3, #3
 8008f36:	e00f      	b.n	8008f58 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	689a      	ldr	r2, [r3, #8]
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	4013      	ands	r3, r2
 8008f42:	68ba      	ldr	r2, [r7, #8]
 8008f44:	429a      	cmp	r2, r3
 8008f46:	bf0c      	ite	eq
 8008f48:	2301      	moveq	r3, #1
 8008f4a:	2300      	movne	r3, #0
 8008f4c:	b2db      	uxtb	r3, r3
 8008f4e:	461a      	mov	r2, r3
 8008f50:	79fb      	ldrb	r3, [r7, #7]
 8008f52:	429a      	cmp	r2, r3
 8008f54:	d1a3      	bne.n	8008e9e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8008f56:	2300      	movs	r3, #0
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3710      	adds	r7, #16
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b088      	sub	sp, #32
 8008f64:	af02      	add	r7, sp, #8
 8008f66:	60f8      	str	r0, [r7, #12]
 8008f68:	60b9      	str	r1, [r7, #8]
 8008f6a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008f6c:	4b1b      	ldr	r3, [pc, #108]	; (8008fdc <SPI_EndRxTxTransaction+0x7c>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a1b      	ldr	r2, [pc, #108]	; (8008fe0 <SPI_EndRxTxTransaction+0x80>)
 8008f72:	fba2 2303 	umull	r2, r3, r2, r3
 8008f76:	0d5b      	lsrs	r3, r3, #21
 8008f78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008f7c:	fb02 f303 	mul.w	r3, r2, r3
 8008f80:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	685b      	ldr	r3, [r3, #4]
 8008f86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f8a:	d112      	bne.n	8008fb2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	9300      	str	r3, [sp, #0]
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	2200      	movs	r2, #0
 8008f94:	2180      	movs	r1, #128	; 0x80
 8008f96:	68f8      	ldr	r0, [r7, #12]
 8008f98:	f7ff ff78 	bl	8008e8c <SPI_WaitFlagStateUntilTimeout>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d016      	beq.n	8008fd0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fa6:	f043 0220 	orr.w	r2, r3, #32
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008fae:	2303      	movs	r3, #3
 8008fb0:	e00f      	b.n	8008fd2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d00a      	beq.n	8008fce <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	3b01      	subs	r3, #1
 8008fbc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	689b      	ldr	r3, [r3, #8]
 8008fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fc8:	2b80      	cmp	r3, #128	; 0x80
 8008fca:	d0f2      	beq.n	8008fb2 <SPI_EndRxTxTransaction+0x52>
 8008fcc:	e000      	b.n	8008fd0 <SPI_EndRxTxTransaction+0x70>
        break;
 8008fce:	bf00      	nop
  }

  return HAL_OK;
 8008fd0:	2300      	movs	r3, #0
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3718      	adds	r7, #24
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}
 8008fda:	bf00      	nop
 8008fdc:	20000014 	.word	0x20000014
 8008fe0:	165e9f81 	.word	0x165e9f81

08008fe4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b082      	sub	sp, #8
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d101      	bne.n	8008ff6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	e01d      	b.n	8009032 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ffc:	b2db      	uxtb	r3, r3
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d106      	bne.n	8009010 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2200      	movs	r2, #0
 8009006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f7f9 ff86 	bl	8002f1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2202      	movs	r2, #2
 8009014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681a      	ldr	r2, [r3, #0]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	3304      	adds	r3, #4
 8009020:	4619      	mov	r1, r3
 8009022:	4610      	mov	r0, r2
 8009024:	f000 f9bc 	bl	80093a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2201      	movs	r2, #1
 800902c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009030:	2300      	movs	r3, #0
}
 8009032:	4618      	mov	r0, r3
 8009034:	3708      	adds	r7, #8
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}

0800903a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800903a:	b580      	push	{r7, lr}
 800903c:	b082      	sub	sp, #8
 800903e:	af00      	add	r7, sp, #0
 8009040:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d101      	bne.n	800904c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009048:	2301      	movs	r3, #1
 800904a:	e01d      	b.n	8009088 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009052:	b2db      	uxtb	r3, r3
 8009054:	2b00      	cmp	r3, #0
 8009056:	d106      	bne.n	8009066 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2200      	movs	r2, #0
 800905c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f000 f815 	bl	8009090 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2202      	movs	r2, #2
 800906a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681a      	ldr	r2, [r3, #0]
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	3304      	adds	r3, #4
 8009076:	4619      	mov	r1, r3
 8009078:	4610      	mov	r0, r2
 800907a:	f000 f991 	bl	80093a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2201      	movs	r2, #1
 8009082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009086:	2300      	movs	r3, #0
}
 8009088:	4618      	mov	r0, r3
 800908a:	3708      	adds	r7, #8
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}

08009090 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009090:	b480      	push	{r7}
 8009092:	b083      	sub	sp, #12
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009098:	bf00      	nop
 800909a:	370c      	adds	r7, #12
 800909c:	46bd      	mov	sp, r7
 800909e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a2:	4770      	bx	lr

080090a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b084      	sub	sp, #16
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	60f8      	str	r0, [r7, #12]
 80090ac:	60b9      	str	r1, [r7, #8]
 80090ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	d101      	bne.n	80090be <HAL_TIM_PWM_ConfigChannel+0x1a>
 80090ba:	2302      	movs	r3, #2
 80090bc:	e0b4      	b.n	8009228 <HAL_TIM_PWM_ConfigChannel+0x184>
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	2201      	movs	r2, #1
 80090c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	2202      	movs	r2, #2
 80090ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2b0c      	cmp	r3, #12
 80090d2:	f200 809f 	bhi.w	8009214 <HAL_TIM_PWM_ConfigChannel+0x170>
 80090d6:	a201      	add	r2, pc, #4	; (adr r2, 80090dc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80090d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090dc:	08009111 	.word	0x08009111
 80090e0:	08009215 	.word	0x08009215
 80090e4:	08009215 	.word	0x08009215
 80090e8:	08009215 	.word	0x08009215
 80090ec:	08009151 	.word	0x08009151
 80090f0:	08009215 	.word	0x08009215
 80090f4:	08009215 	.word	0x08009215
 80090f8:	08009215 	.word	0x08009215
 80090fc:	08009193 	.word	0x08009193
 8009100:	08009215 	.word	0x08009215
 8009104:	08009215 	.word	0x08009215
 8009108:	08009215 	.word	0x08009215
 800910c:	080091d3 	.word	0x080091d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	68b9      	ldr	r1, [r7, #8]
 8009116:	4618      	mov	r0, r3
 8009118:	f000 f9e2 	bl	80094e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	699a      	ldr	r2, [r3, #24]
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f042 0208 	orr.w	r2, r2, #8
 800912a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	699a      	ldr	r2, [r3, #24]
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f022 0204 	bic.w	r2, r2, #4
 800913a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	6999      	ldr	r1, [r3, #24]
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	691a      	ldr	r2, [r3, #16]
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	430a      	orrs	r2, r1
 800914c:	619a      	str	r2, [r3, #24]
      break;
 800914e:	e062      	b.n	8009216 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	68b9      	ldr	r1, [r7, #8]
 8009156:	4618      	mov	r0, r3
 8009158:	f000 fa32 	bl	80095c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	699a      	ldr	r2, [r3, #24]
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800916a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	699a      	ldr	r2, [r3, #24]
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800917a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	6999      	ldr	r1, [r3, #24]
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	691b      	ldr	r3, [r3, #16]
 8009186:	021a      	lsls	r2, r3, #8
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	430a      	orrs	r2, r1
 800918e:	619a      	str	r2, [r3, #24]
      break;
 8009190:	e041      	b.n	8009216 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	68b9      	ldr	r1, [r7, #8]
 8009198:	4618      	mov	r0, r3
 800919a:	f000 fa87 	bl	80096ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	69da      	ldr	r2, [r3, #28]
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f042 0208 	orr.w	r2, r2, #8
 80091ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	69da      	ldr	r2, [r3, #28]
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f022 0204 	bic.w	r2, r2, #4
 80091bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	69d9      	ldr	r1, [r3, #28]
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	691a      	ldr	r2, [r3, #16]
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	430a      	orrs	r2, r1
 80091ce:	61da      	str	r2, [r3, #28]
      break;
 80091d0:	e021      	b.n	8009216 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	68b9      	ldr	r1, [r7, #8]
 80091d8:	4618      	mov	r0, r3
 80091da:	f000 fadb 	bl	8009794 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	69da      	ldr	r2, [r3, #28]
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80091ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	69da      	ldr	r2, [r3, #28]
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	69d9      	ldr	r1, [r3, #28]
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	691b      	ldr	r3, [r3, #16]
 8009208:	021a      	lsls	r2, r3, #8
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	430a      	orrs	r2, r1
 8009210:	61da      	str	r2, [r3, #28]
      break;
 8009212:	e000      	b.n	8009216 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8009214:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2201      	movs	r2, #1
 800921a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2200      	movs	r2, #0
 8009222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009226:	2300      	movs	r3, #0
}
 8009228:	4618      	mov	r0, r3
 800922a:	3710      	adds	r7, #16
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b084      	sub	sp, #16
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
 8009238:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009240:	2b01      	cmp	r3, #1
 8009242:	d101      	bne.n	8009248 <HAL_TIM_ConfigClockSource+0x18>
 8009244:	2302      	movs	r3, #2
 8009246:	e0a6      	b.n	8009396 <HAL_TIM_ConfigClockSource+0x166>
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2201      	movs	r2, #1
 800924c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2202      	movs	r2, #2
 8009254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	689b      	ldr	r3, [r3, #8]
 800925e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009266:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800926e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	68fa      	ldr	r2, [r7, #12]
 8009276:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	2b40      	cmp	r3, #64	; 0x40
 800927e:	d067      	beq.n	8009350 <HAL_TIM_ConfigClockSource+0x120>
 8009280:	2b40      	cmp	r3, #64	; 0x40
 8009282:	d80b      	bhi.n	800929c <HAL_TIM_ConfigClockSource+0x6c>
 8009284:	2b10      	cmp	r3, #16
 8009286:	d073      	beq.n	8009370 <HAL_TIM_ConfigClockSource+0x140>
 8009288:	2b10      	cmp	r3, #16
 800928a:	d802      	bhi.n	8009292 <HAL_TIM_ConfigClockSource+0x62>
 800928c:	2b00      	cmp	r3, #0
 800928e:	d06f      	beq.n	8009370 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009290:	e078      	b.n	8009384 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009292:	2b20      	cmp	r3, #32
 8009294:	d06c      	beq.n	8009370 <HAL_TIM_ConfigClockSource+0x140>
 8009296:	2b30      	cmp	r3, #48	; 0x30
 8009298:	d06a      	beq.n	8009370 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800929a:	e073      	b.n	8009384 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800929c:	2b70      	cmp	r3, #112	; 0x70
 800929e:	d00d      	beq.n	80092bc <HAL_TIM_ConfigClockSource+0x8c>
 80092a0:	2b70      	cmp	r3, #112	; 0x70
 80092a2:	d804      	bhi.n	80092ae <HAL_TIM_ConfigClockSource+0x7e>
 80092a4:	2b50      	cmp	r3, #80	; 0x50
 80092a6:	d033      	beq.n	8009310 <HAL_TIM_ConfigClockSource+0xe0>
 80092a8:	2b60      	cmp	r3, #96	; 0x60
 80092aa:	d041      	beq.n	8009330 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80092ac:	e06a      	b.n	8009384 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80092ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092b2:	d066      	beq.n	8009382 <HAL_TIM_ConfigClockSource+0x152>
 80092b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092b8:	d017      	beq.n	80092ea <HAL_TIM_ConfigClockSource+0xba>
      break;
 80092ba:	e063      	b.n	8009384 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6818      	ldr	r0, [r3, #0]
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	6899      	ldr	r1, [r3, #8]
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	685a      	ldr	r2, [r3, #4]
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	68db      	ldr	r3, [r3, #12]
 80092cc:	f000 fb32 	bl	8009934 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	689b      	ldr	r3, [r3, #8]
 80092d6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80092de:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	68fa      	ldr	r2, [r7, #12]
 80092e6:	609a      	str	r2, [r3, #8]
      break;
 80092e8:	e04c      	b.n	8009384 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6818      	ldr	r0, [r3, #0]
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	6899      	ldr	r1, [r3, #8]
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	685a      	ldr	r2, [r3, #4]
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	68db      	ldr	r3, [r3, #12]
 80092fa:	f000 fb1b 	bl	8009934 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	689a      	ldr	r2, [r3, #8]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800930c:	609a      	str	r2, [r3, #8]
      break;
 800930e:	e039      	b.n	8009384 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6818      	ldr	r0, [r3, #0]
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	6859      	ldr	r1, [r3, #4]
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	68db      	ldr	r3, [r3, #12]
 800931c:	461a      	mov	r2, r3
 800931e:	f000 fa8f 	bl	8009840 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	2150      	movs	r1, #80	; 0x50
 8009328:	4618      	mov	r0, r3
 800932a:	f000 fae8 	bl	80098fe <TIM_ITRx_SetConfig>
      break;
 800932e:	e029      	b.n	8009384 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6818      	ldr	r0, [r3, #0]
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	6859      	ldr	r1, [r3, #4]
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	68db      	ldr	r3, [r3, #12]
 800933c:	461a      	mov	r2, r3
 800933e:	f000 faae 	bl	800989e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	2160      	movs	r1, #96	; 0x60
 8009348:	4618      	mov	r0, r3
 800934a:	f000 fad8 	bl	80098fe <TIM_ITRx_SetConfig>
      break;
 800934e:	e019      	b.n	8009384 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6818      	ldr	r0, [r3, #0]
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	6859      	ldr	r1, [r3, #4]
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	68db      	ldr	r3, [r3, #12]
 800935c:	461a      	mov	r2, r3
 800935e:	f000 fa6f 	bl	8009840 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	2140      	movs	r1, #64	; 0x40
 8009368:	4618      	mov	r0, r3
 800936a:	f000 fac8 	bl	80098fe <TIM_ITRx_SetConfig>
      break;
 800936e:	e009      	b.n	8009384 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681a      	ldr	r2, [r3, #0]
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	4619      	mov	r1, r3
 800937a:	4610      	mov	r0, r2
 800937c:	f000 fabf 	bl	80098fe <TIM_ITRx_SetConfig>
      break;
 8009380:	e000      	b.n	8009384 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8009382:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2201      	movs	r2, #1
 8009388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2200      	movs	r2, #0
 8009390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009394:	2300      	movs	r3, #0
}
 8009396:	4618      	mov	r0, r3
 8009398:	3710      	adds	r7, #16
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}
	...

080093a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80093a0:	b480      	push	{r7}
 80093a2:	b085      	sub	sp, #20
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
 80093a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	4a40      	ldr	r2, [pc, #256]	; (80094b4 <TIM_Base_SetConfig+0x114>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d013      	beq.n	80093e0 <TIM_Base_SetConfig+0x40>
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093be:	d00f      	beq.n	80093e0 <TIM_Base_SetConfig+0x40>
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	4a3d      	ldr	r2, [pc, #244]	; (80094b8 <TIM_Base_SetConfig+0x118>)
 80093c4:	4293      	cmp	r3, r2
 80093c6:	d00b      	beq.n	80093e0 <TIM_Base_SetConfig+0x40>
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	4a3c      	ldr	r2, [pc, #240]	; (80094bc <TIM_Base_SetConfig+0x11c>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d007      	beq.n	80093e0 <TIM_Base_SetConfig+0x40>
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	4a3b      	ldr	r2, [pc, #236]	; (80094c0 <TIM_Base_SetConfig+0x120>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d003      	beq.n	80093e0 <TIM_Base_SetConfig+0x40>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	4a3a      	ldr	r2, [pc, #232]	; (80094c4 <TIM_Base_SetConfig+0x124>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d108      	bne.n	80093f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	685b      	ldr	r3, [r3, #4]
 80093ec:	68fa      	ldr	r2, [r7, #12]
 80093ee:	4313      	orrs	r3, r2
 80093f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	4a2f      	ldr	r2, [pc, #188]	; (80094b4 <TIM_Base_SetConfig+0x114>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d02b      	beq.n	8009452 <TIM_Base_SetConfig+0xb2>
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009400:	d027      	beq.n	8009452 <TIM_Base_SetConfig+0xb2>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	4a2c      	ldr	r2, [pc, #176]	; (80094b8 <TIM_Base_SetConfig+0x118>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d023      	beq.n	8009452 <TIM_Base_SetConfig+0xb2>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	4a2b      	ldr	r2, [pc, #172]	; (80094bc <TIM_Base_SetConfig+0x11c>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d01f      	beq.n	8009452 <TIM_Base_SetConfig+0xb2>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	4a2a      	ldr	r2, [pc, #168]	; (80094c0 <TIM_Base_SetConfig+0x120>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d01b      	beq.n	8009452 <TIM_Base_SetConfig+0xb2>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	4a29      	ldr	r2, [pc, #164]	; (80094c4 <TIM_Base_SetConfig+0x124>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d017      	beq.n	8009452 <TIM_Base_SetConfig+0xb2>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	4a28      	ldr	r2, [pc, #160]	; (80094c8 <TIM_Base_SetConfig+0x128>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d013      	beq.n	8009452 <TIM_Base_SetConfig+0xb2>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	4a27      	ldr	r2, [pc, #156]	; (80094cc <TIM_Base_SetConfig+0x12c>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d00f      	beq.n	8009452 <TIM_Base_SetConfig+0xb2>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	4a26      	ldr	r2, [pc, #152]	; (80094d0 <TIM_Base_SetConfig+0x130>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d00b      	beq.n	8009452 <TIM_Base_SetConfig+0xb2>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	4a25      	ldr	r2, [pc, #148]	; (80094d4 <TIM_Base_SetConfig+0x134>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d007      	beq.n	8009452 <TIM_Base_SetConfig+0xb2>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	4a24      	ldr	r2, [pc, #144]	; (80094d8 <TIM_Base_SetConfig+0x138>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d003      	beq.n	8009452 <TIM_Base_SetConfig+0xb2>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	4a23      	ldr	r2, [pc, #140]	; (80094dc <TIM_Base_SetConfig+0x13c>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d108      	bne.n	8009464 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009458:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	68db      	ldr	r3, [r3, #12]
 800945e:	68fa      	ldr	r2, [r7, #12]
 8009460:	4313      	orrs	r3, r2
 8009462:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	695b      	ldr	r3, [r3, #20]
 800946e:	4313      	orrs	r3, r2
 8009470:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	68fa      	ldr	r2, [r7, #12]
 8009476:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	689a      	ldr	r2, [r3, #8]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	681a      	ldr	r2, [r3, #0]
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	4a0a      	ldr	r2, [pc, #40]	; (80094b4 <TIM_Base_SetConfig+0x114>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d003      	beq.n	8009498 <TIM_Base_SetConfig+0xf8>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	4a0c      	ldr	r2, [pc, #48]	; (80094c4 <TIM_Base_SetConfig+0x124>)
 8009494:	4293      	cmp	r3, r2
 8009496:	d103      	bne.n	80094a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	691a      	ldr	r2, [r3, #16]
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2201      	movs	r2, #1
 80094a4:	615a      	str	r2, [r3, #20]
}
 80094a6:	bf00      	nop
 80094a8:	3714      	adds	r7, #20
 80094aa:	46bd      	mov	sp, r7
 80094ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b0:	4770      	bx	lr
 80094b2:	bf00      	nop
 80094b4:	40010000 	.word	0x40010000
 80094b8:	40000400 	.word	0x40000400
 80094bc:	40000800 	.word	0x40000800
 80094c0:	40000c00 	.word	0x40000c00
 80094c4:	40010400 	.word	0x40010400
 80094c8:	40014000 	.word	0x40014000
 80094cc:	40014400 	.word	0x40014400
 80094d0:	40014800 	.word	0x40014800
 80094d4:	40001800 	.word	0x40001800
 80094d8:	40001c00 	.word	0x40001c00
 80094dc:	40002000 	.word	0x40002000

080094e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b087      	sub	sp, #28
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6a1b      	ldr	r3, [r3, #32]
 80094ee:	f023 0201 	bic.w	r2, r3, #1
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6a1b      	ldr	r3, [r3, #32]
 80094fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	685b      	ldr	r3, [r3, #4]
 8009500:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	699b      	ldr	r3, [r3, #24]
 8009506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800950e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	f023 0303 	bic.w	r3, r3, #3
 8009516:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	68fa      	ldr	r2, [r7, #12]
 800951e:	4313      	orrs	r3, r2
 8009520:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	f023 0302 	bic.w	r3, r3, #2
 8009528:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	689b      	ldr	r3, [r3, #8]
 800952e:	697a      	ldr	r2, [r7, #20]
 8009530:	4313      	orrs	r3, r2
 8009532:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	4a20      	ldr	r2, [pc, #128]	; (80095b8 <TIM_OC1_SetConfig+0xd8>)
 8009538:	4293      	cmp	r3, r2
 800953a:	d003      	beq.n	8009544 <TIM_OC1_SetConfig+0x64>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	4a1f      	ldr	r2, [pc, #124]	; (80095bc <TIM_OC1_SetConfig+0xdc>)
 8009540:	4293      	cmp	r3, r2
 8009542:	d10c      	bne.n	800955e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009544:	697b      	ldr	r3, [r7, #20]
 8009546:	f023 0308 	bic.w	r3, r3, #8
 800954a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	68db      	ldr	r3, [r3, #12]
 8009550:	697a      	ldr	r2, [r7, #20]
 8009552:	4313      	orrs	r3, r2
 8009554:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	f023 0304 	bic.w	r3, r3, #4
 800955c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	4a15      	ldr	r2, [pc, #84]	; (80095b8 <TIM_OC1_SetConfig+0xd8>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d003      	beq.n	800956e <TIM_OC1_SetConfig+0x8e>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	4a14      	ldr	r2, [pc, #80]	; (80095bc <TIM_OC1_SetConfig+0xdc>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d111      	bne.n	8009592 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009574:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009576:	693b      	ldr	r3, [r7, #16]
 8009578:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800957c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	695b      	ldr	r3, [r3, #20]
 8009582:	693a      	ldr	r2, [r7, #16]
 8009584:	4313      	orrs	r3, r2
 8009586:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	699b      	ldr	r3, [r3, #24]
 800958c:	693a      	ldr	r2, [r7, #16]
 800958e:	4313      	orrs	r3, r2
 8009590:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	693a      	ldr	r2, [r7, #16]
 8009596:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	68fa      	ldr	r2, [r7, #12]
 800959c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	685a      	ldr	r2, [r3, #4]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	697a      	ldr	r2, [r7, #20]
 80095aa:	621a      	str	r2, [r3, #32]
}
 80095ac:	bf00      	nop
 80095ae:	371c      	adds	r7, #28
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr
 80095b8:	40010000 	.word	0x40010000
 80095bc:	40010400 	.word	0x40010400

080095c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b087      	sub	sp, #28
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6a1b      	ldr	r3, [r3, #32]
 80095ce:	f023 0210 	bic.w	r2, r3, #16
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6a1b      	ldr	r3, [r3, #32]
 80095da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	685b      	ldr	r3, [r3, #4]
 80095e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	699b      	ldr	r3, [r3, #24]
 80095e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	021b      	lsls	r3, r3, #8
 80095fe:	68fa      	ldr	r2, [r7, #12]
 8009600:	4313      	orrs	r3, r2
 8009602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	f023 0320 	bic.w	r3, r3, #32
 800960a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	689b      	ldr	r3, [r3, #8]
 8009610:	011b      	lsls	r3, r3, #4
 8009612:	697a      	ldr	r2, [r7, #20]
 8009614:	4313      	orrs	r3, r2
 8009616:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	4a22      	ldr	r2, [pc, #136]	; (80096a4 <TIM_OC2_SetConfig+0xe4>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d003      	beq.n	8009628 <TIM_OC2_SetConfig+0x68>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	4a21      	ldr	r2, [pc, #132]	; (80096a8 <TIM_OC2_SetConfig+0xe8>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d10d      	bne.n	8009644 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009628:	697b      	ldr	r3, [r7, #20]
 800962a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800962e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	68db      	ldr	r3, [r3, #12]
 8009634:	011b      	lsls	r3, r3, #4
 8009636:	697a      	ldr	r2, [r7, #20]
 8009638:	4313      	orrs	r3, r2
 800963a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009642:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	4a17      	ldr	r2, [pc, #92]	; (80096a4 <TIM_OC2_SetConfig+0xe4>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d003      	beq.n	8009654 <TIM_OC2_SetConfig+0x94>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	4a16      	ldr	r2, [pc, #88]	; (80096a8 <TIM_OC2_SetConfig+0xe8>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d113      	bne.n	800967c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800965a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009662:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	695b      	ldr	r3, [r3, #20]
 8009668:	009b      	lsls	r3, r3, #2
 800966a:	693a      	ldr	r2, [r7, #16]
 800966c:	4313      	orrs	r3, r2
 800966e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	699b      	ldr	r3, [r3, #24]
 8009674:	009b      	lsls	r3, r3, #2
 8009676:	693a      	ldr	r2, [r7, #16]
 8009678:	4313      	orrs	r3, r2
 800967a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	693a      	ldr	r2, [r7, #16]
 8009680:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	68fa      	ldr	r2, [r7, #12]
 8009686:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	685a      	ldr	r2, [r3, #4]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	697a      	ldr	r2, [r7, #20]
 8009694:	621a      	str	r2, [r3, #32]
}
 8009696:	bf00      	nop
 8009698:	371c      	adds	r7, #28
 800969a:	46bd      	mov	sp, r7
 800969c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a0:	4770      	bx	lr
 80096a2:	bf00      	nop
 80096a4:	40010000 	.word	0x40010000
 80096a8:	40010400 	.word	0x40010400

080096ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80096ac:	b480      	push	{r7}
 80096ae:	b087      	sub	sp, #28
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
 80096b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6a1b      	ldr	r3, [r3, #32]
 80096ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6a1b      	ldr	r3, [r3, #32]
 80096c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	685b      	ldr	r3, [r3, #4]
 80096cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	69db      	ldr	r3, [r3, #28]
 80096d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	f023 0303 	bic.w	r3, r3, #3
 80096e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	68fa      	ldr	r2, [r7, #12]
 80096ea:	4313      	orrs	r3, r2
 80096ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80096f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	689b      	ldr	r3, [r3, #8]
 80096fa:	021b      	lsls	r3, r3, #8
 80096fc:	697a      	ldr	r2, [r7, #20]
 80096fe:	4313      	orrs	r3, r2
 8009700:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	4a21      	ldr	r2, [pc, #132]	; (800978c <TIM_OC3_SetConfig+0xe0>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d003      	beq.n	8009712 <TIM_OC3_SetConfig+0x66>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	4a20      	ldr	r2, [pc, #128]	; (8009790 <TIM_OC3_SetConfig+0xe4>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d10d      	bne.n	800972e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009718:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	68db      	ldr	r3, [r3, #12]
 800971e:	021b      	lsls	r3, r3, #8
 8009720:	697a      	ldr	r2, [r7, #20]
 8009722:	4313      	orrs	r3, r2
 8009724:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800972c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	4a16      	ldr	r2, [pc, #88]	; (800978c <TIM_OC3_SetConfig+0xe0>)
 8009732:	4293      	cmp	r3, r2
 8009734:	d003      	beq.n	800973e <TIM_OC3_SetConfig+0x92>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	4a15      	ldr	r2, [pc, #84]	; (8009790 <TIM_OC3_SetConfig+0xe4>)
 800973a:	4293      	cmp	r3, r2
 800973c:	d113      	bne.n	8009766 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009744:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800974c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	695b      	ldr	r3, [r3, #20]
 8009752:	011b      	lsls	r3, r3, #4
 8009754:	693a      	ldr	r2, [r7, #16]
 8009756:	4313      	orrs	r3, r2
 8009758:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	699b      	ldr	r3, [r3, #24]
 800975e:	011b      	lsls	r3, r3, #4
 8009760:	693a      	ldr	r2, [r7, #16]
 8009762:	4313      	orrs	r3, r2
 8009764:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	693a      	ldr	r2, [r7, #16]
 800976a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	68fa      	ldr	r2, [r7, #12]
 8009770:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	685a      	ldr	r2, [r3, #4]
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	697a      	ldr	r2, [r7, #20]
 800977e:	621a      	str	r2, [r3, #32]
}
 8009780:	bf00      	nop
 8009782:	371c      	adds	r7, #28
 8009784:	46bd      	mov	sp, r7
 8009786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978a:	4770      	bx	lr
 800978c:	40010000 	.word	0x40010000
 8009790:	40010400 	.word	0x40010400

08009794 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009794:	b480      	push	{r7}
 8009796:	b087      	sub	sp, #28
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
 800979c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6a1b      	ldr	r3, [r3, #32]
 80097a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6a1b      	ldr	r3, [r3, #32]
 80097ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	69db      	ldr	r3, [r3, #28]
 80097ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	021b      	lsls	r3, r3, #8
 80097d2:	68fa      	ldr	r2, [r7, #12]
 80097d4:	4313      	orrs	r3, r2
 80097d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80097d8:	693b      	ldr	r3, [r7, #16]
 80097da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80097de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	689b      	ldr	r3, [r3, #8]
 80097e4:	031b      	lsls	r3, r3, #12
 80097e6:	693a      	ldr	r2, [r7, #16]
 80097e8:	4313      	orrs	r3, r2
 80097ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	4a12      	ldr	r2, [pc, #72]	; (8009838 <TIM_OC4_SetConfig+0xa4>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d003      	beq.n	80097fc <TIM_OC4_SetConfig+0x68>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	4a11      	ldr	r2, [pc, #68]	; (800983c <TIM_OC4_SetConfig+0xa8>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d109      	bne.n	8009810 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80097fc:	697b      	ldr	r3, [r7, #20]
 80097fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009802:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	695b      	ldr	r3, [r3, #20]
 8009808:	019b      	lsls	r3, r3, #6
 800980a:	697a      	ldr	r2, [r7, #20]
 800980c:	4313      	orrs	r3, r2
 800980e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	697a      	ldr	r2, [r7, #20]
 8009814:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	68fa      	ldr	r2, [r7, #12]
 800981a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	685a      	ldr	r2, [r3, #4]
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	693a      	ldr	r2, [r7, #16]
 8009828:	621a      	str	r2, [r3, #32]
}
 800982a:	bf00      	nop
 800982c:	371c      	adds	r7, #28
 800982e:	46bd      	mov	sp, r7
 8009830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009834:	4770      	bx	lr
 8009836:	bf00      	nop
 8009838:	40010000 	.word	0x40010000
 800983c:	40010400 	.word	0x40010400

08009840 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009840:	b480      	push	{r7}
 8009842:	b087      	sub	sp, #28
 8009844:	af00      	add	r7, sp, #0
 8009846:	60f8      	str	r0, [r7, #12]
 8009848:	60b9      	str	r1, [r7, #8]
 800984a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	6a1b      	ldr	r3, [r3, #32]
 8009850:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	6a1b      	ldr	r3, [r3, #32]
 8009856:	f023 0201 	bic.w	r2, r3, #1
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	699b      	ldr	r3, [r3, #24]
 8009862:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009864:	693b      	ldr	r3, [r7, #16]
 8009866:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800986a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	011b      	lsls	r3, r3, #4
 8009870:	693a      	ldr	r2, [r7, #16]
 8009872:	4313      	orrs	r3, r2
 8009874:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	f023 030a 	bic.w	r3, r3, #10
 800987c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800987e:	697a      	ldr	r2, [r7, #20]
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	4313      	orrs	r3, r2
 8009884:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	693a      	ldr	r2, [r7, #16]
 800988a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	697a      	ldr	r2, [r7, #20]
 8009890:	621a      	str	r2, [r3, #32]
}
 8009892:	bf00      	nop
 8009894:	371c      	adds	r7, #28
 8009896:	46bd      	mov	sp, r7
 8009898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989c:	4770      	bx	lr

0800989e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800989e:	b480      	push	{r7}
 80098a0:	b087      	sub	sp, #28
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	60f8      	str	r0, [r7, #12]
 80098a6:	60b9      	str	r1, [r7, #8]
 80098a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	6a1b      	ldr	r3, [r3, #32]
 80098ae:	f023 0210 	bic.w	r2, r3, #16
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	699b      	ldr	r3, [r3, #24]
 80098ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	6a1b      	ldr	r3, [r3, #32]
 80098c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80098c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	031b      	lsls	r3, r3, #12
 80098ce:	697a      	ldr	r2, [r7, #20]
 80098d0:	4313      	orrs	r3, r2
 80098d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80098da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	011b      	lsls	r3, r3, #4
 80098e0:	693a      	ldr	r2, [r7, #16]
 80098e2:	4313      	orrs	r3, r2
 80098e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	697a      	ldr	r2, [r7, #20]
 80098ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	693a      	ldr	r2, [r7, #16]
 80098f0:	621a      	str	r2, [r3, #32]
}
 80098f2:	bf00      	nop
 80098f4:	371c      	adds	r7, #28
 80098f6:	46bd      	mov	sp, r7
 80098f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fc:	4770      	bx	lr

080098fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80098fe:	b480      	push	{r7}
 8009900:	b085      	sub	sp, #20
 8009902:	af00      	add	r7, sp, #0
 8009904:	6078      	str	r0, [r7, #4]
 8009906:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	689b      	ldr	r3, [r3, #8]
 800990c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009914:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009916:	683a      	ldr	r2, [r7, #0]
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	4313      	orrs	r3, r2
 800991c:	f043 0307 	orr.w	r3, r3, #7
 8009920:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	68fa      	ldr	r2, [r7, #12]
 8009926:	609a      	str	r2, [r3, #8]
}
 8009928:	bf00      	nop
 800992a:	3714      	adds	r7, #20
 800992c:	46bd      	mov	sp, r7
 800992e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009932:	4770      	bx	lr

08009934 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009934:	b480      	push	{r7}
 8009936:	b087      	sub	sp, #28
 8009938:	af00      	add	r7, sp, #0
 800993a:	60f8      	str	r0, [r7, #12]
 800993c:	60b9      	str	r1, [r7, #8]
 800993e:	607a      	str	r2, [r7, #4]
 8009940:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	689b      	ldr	r3, [r3, #8]
 8009946:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009948:	697b      	ldr	r3, [r7, #20]
 800994a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800994e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	021a      	lsls	r2, r3, #8
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	431a      	orrs	r2, r3
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	4313      	orrs	r3, r2
 800995c:	697a      	ldr	r2, [r7, #20]
 800995e:	4313      	orrs	r3, r2
 8009960:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	697a      	ldr	r2, [r7, #20]
 8009966:	609a      	str	r2, [r3, #8]
}
 8009968:	bf00      	nop
 800996a:	371c      	adds	r7, #28
 800996c:	46bd      	mov	sp, r7
 800996e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009972:	4770      	bx	lr

08009974 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009974:	b480      	push	{r7}
 8009976:	b085      	sub	sp, #20
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
 800997c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009984:	2b01      	cmp	r3, #1
 8009986:	d101      	bne.n	800998c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009988:	2302      	movs	r3, #2
 800998a:	e05a      	b.n	8009a42 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2201      	movs	r2, #1
 8009990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2202      	movs	r2, #2
 8009998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	685b      	ldr	r3, [r3, #4]
 80099a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	689b      	ldr	r3, [r3, #8]
 80099aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	68fa      	ldr	r2, [r7, #12]
 80099ba:	4313      	orrs	r3, r2
 80099bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	68fa      	ldr	r2, [r7, #12]
 80099c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	4a21      	ldr	r2, [pc, #132]	; (8009a50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d022      	beq.n	8009a16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099d8:	d01d      	beq.n	8009a16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	4a1d      	ldr	r2, [pc, #116]	; (8009a54 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d018      	beq.n	8009a16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	4a1b      	ldr	r2, [pc, #108]	; (8009a58 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80099ea:	4293      	cmp	r3, r2
 80099ec:	d013      	beq.n	8009a16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	4a1a      	ldr	r2, [pc, #104]	; (8009a5c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d00e      	beq.n	8009a16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	4a18      	ldr	r2, [pc, #96]	; (8009a60 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d009      	beq.n	8009a16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	4a17      	ldr	r2, [pc, #92]	; (8009a64 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d004      	beq.n	8009a16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4a15      	ldr	r2, [pc, #84]	; (8009a68 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d10c      	bne.n	8009a30 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	685b      	ldr	r3, [r3, #4]
 8009a22:	68ba      	ldr	r2, [r7, #8]
 8009a24:	4313      	orrs	r3, r2
 8009a26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	68ba      	ldr	r2, [r7, #8]
 8009a2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2201      	movs	r2, #1
 8009a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009a40:	2300      	movs	r3, #0
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3714      	adds	r7, #20
 8009a46:	46bd      	mov	sp, r7
 8009a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4c:	4770      	bx	lr
 8009a4e:	bf00      	nop
 8009a50:	40010000 	.word	0x40010000
 8009a54:	40000400 	.word	0x40000400
 8009a58:	40000800 	.word	0x40000800
 8009a5c:	40000c00 	.word	0x40000c00
 8009a60:	40010400 	.word	0x40010400
 8009a64:	40014000 	.word	0x40014000
 8009a68:	40001800 	.word	0x40001800

08009a6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b082      	sub	sp, #8
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d101      	bne.n	8009a7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	e03f      	b.n	8009afe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009a84:	b2db      	uxtb	r3, r3
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d106      	bne.n	8009a98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f7f9 fab0 	bl	8002ff8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2224      	movs	r2, #36	; 0x24
 8009a9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	68da      	ldr	r2, [r3, #12]
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009aae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f000 f829 	bl	8009b08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	691a      	ldr	r2, [r3, #16]
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009ac4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	695a      	ldr	r2, [r3, #20]
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009ad4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	68da      	ldr	r2, [r3, #12]
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009ae4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2220      	movs	r2, #32
 8009af0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2220      	movs	r2, #32
 8009af8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8009afc:	2300      	movs	r3, #0
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3708      	adds	r7, #8
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}
	...

08009b08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b0c:	b085      	sub	sp, #20
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	691b      	ldr	r3, [r3, #16]
 8009b18:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	68da      	ldr	r2, [r3, #12]
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	430a      	orrs	r2, r1
 8009b26:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	689a      	ldr	r2, [r3, #8]
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	691b      	ldr	r3, [r3, #16]
 8009b30:	431a      	orrs	r2, r3
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	695b      	ldr	r3, [r3, #20]
 8009b36:	431a      	orrs	r2, r3
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	69db      	ldr	r3, [r3, #28]
 8009b3c:	4313      	orrs	r3, r2
 8009b3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	68db      	ldr	r3, [r3, #12]
 8009b46:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8009b4a:	f023 030c 	bic.w	r3, r3, #12
 8009b4e:	687a      	ldr	r2, [r7, #4]
 8009b50:	6812      	ldr	r2, [r2, #0]
 8009b52:	68f9      	ldr	r1, [r7, #12]
 8009b54:	430b      	orrs	r3, r1
 8009b56:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	695b      	ldr	r3, [r3, #20]
 8009b5e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	699a      	ldr	r2, [r3, #24]
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	430a      	orrs	r2, r1
 8009b6c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	69db      	ldr	r3, [r3, #28]
 8009b72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b76:	f040 818b 	bne.w	8009e90 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	4ac1      	ldr	r2, [pc, #772]	; (8009e84 <UART_SetConfig+0x37c>)
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d005      	beq.n	8009b90 <UART_SetConfig+0x88>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4abf      	ldr	r2, [pc, #764]	; (8009e88 <UART_SetConfig+0x380>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	f040 80bd 	bne.w	8009d0a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009b90:	f7fc ffba 	bl	8006b08 <HAL_RCC_GetPCLK2Freq>
 8009b94:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	461d      	mov	r5, r3
 8009b9a:	f04f 0600 	mov.w	r6, #0
 8009b9e:	46a8      	mov	r8, r5
 8009ba0:	46b1      	mov	r9, r6
 8009ba2:	eb18 0308 	adds.w	r3, r8, r8
 8009ba6:	eb49 0409 	adc.w	r4, r9, r9
 8009baa:	4698      	mov	r8, r3
 8009bac:	46a1      	mov	r9, r4
 8009bae:	eb18 0805 	adds.w	r8, r8, r5
 8009bb2:	eb49 0906 	adc.w	r9, r9, r6
 8009bb6:	f04f 0100 	mov.w	r1, #0
 8009bba:	f04f 0200 	mov.w	r2, #0
 8009bbe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009bc2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009bc6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009bca:	4688      	mov	r8, r1
 8009bcc:	4691      	mov	r9, r2
 8009bce:	eb18 0005 	adds.w	r0, r8, r5
 8009bd2:	eb49 0106 	adc.w	r1, r9, r6
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	685b      	ldr	r3, [r3, #4]
 8009bda:	461d      	mov	r5, r3
 8009bdc:	f04f 0600 	mov.w	r6, #0
 8009be0:	196b      	adds	r3, r5, r5
 8009be2:	eb46 0406 	adc.w	r4, r6, r6
 8009be6:	461a      	mov	r2, r3
 8009be8:	4623      	mov	r3, r4
 8009bea:	f7f7 f89d 	bl	8000d28 <__aeabi_uldivmod>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	460c      	mov	r4, r1
 8009bf2:	461a      	mov	r2, r3
 8009bf4:	4ba5      	ldr	r3, [pc, #660]	; (8009e8c <UART_SetConfig+0x384>)
 8009bf6:	fba3 2302 	umull	r2, r3, r3, r2
 8009bfa:	095b      	lsrs	r3, r3, #5
 8009bfc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	461d      	mov	r5, r3
 8009c04:	f04f 0600 	mov.w	r6, #0
 8009c08:	46a9      	mov	r9, r5
 8009c0a:	46b2      	mov	sl, r6
 8009c0c:	eb19 0309 	adds.w	r3, r9, r9
 8009c10:	eb4a 040a 	adc.w	r4, sl, sl
 8009c14:	4699      	mov	r9, r3
 8009c16:	46a2      	mov	sl, r4
 8009c18:	eb19 0905 	adds.w	r9, r9, r5
 8009c1c:	eb4a 0a06 	adc.w	sl, sl, r6
 8009c20:	f04f 0100 	mov.w	r1, #0
 8009c24:	f04f 0200 	mov.w	r2, #0
 8009c28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009c2c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009c30:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009c34:	4689      	mov	r9, r1
 8009c36:	4692      	mov	sl, r2
 8009c38:	eb19 0005 	adds.w	r0, r9, r5
 8009c3c:	eb4a 0106 	adc.w	r1, sl, r6
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	685b      	ldr	r3, [r3, #4]
 8009c44:	461d      	mov	r5, r3
 8009c46:	f04f 0600 	mov.w	r6, #0
 8009c4a:	196b      	adds	r3, r5, r5
 8009c4c:	eb46 0406 	adc.w	r4, r6, r6
 8009c50:	461a      	mov	r2, r3
 8009c52:	4623      	mov	r3, r4
 8009c54:	f7f7 f868 	bl	8000d28 <__aeabi_uldivmod>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	460c      	mov	r4, r1
 8009c5c:	461a      	mov	r2, r3
 8009c5e:	4b8b      	ldr	r3, [pc, #556]	; (8009e8c <UART_SetConfig+0x384>)
 8009c60:	fba3 1302 	umull	r1, r3, r3, r2
 8009c64:	095b      	lsrs	r3, r3, #5
 8009c66:	2164      	movs	r1, #100	; 0x64
 8009c68:	fb01 f303 	mul.w	r3, r1, r3
 8009c6c:	1ad3      	subs	r3, r2, r3
 8009c6e:	00db      	lsls	r3, r3, #3
 8009c70:	3332      	adds	r3, #50	; 0x32
 8009c72:	4a86      	ldr	r2, [pc, #536]	; (8009e8c <UART_SetConfig+0x384>)
 8009c74:	fba2 2303 	umull	r2, r3, r2, r3
 8009c78:	095b      	lsrs	r3, r3, #5
 8009c7a:	005b      	lsls	r3, r3, #1
 8009c7c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009c80:	4498      	add	r8, r3
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	461d      	mov	r5, r3
 8009c86:	f04f 0600 	mov.w	r6, #0
 8009c8a:	46a9      	mov	r9, r5
 8009c8c:	46b2      	mov	sl, r6
 8009c8e:	eb19 0309 	adds.w	r3, r9, r9
 8009c92:	eb4a 040a 	adc.w	r4, sl, sl
 8009c96:	4699      	mov	r9, r3
 8009c98:	46a2      	mov	sl, r4
 8009c9a:	eb19 0905 	adds.w	r9, r9, r5
 8009c9e:	eb4a 0a06 	adc.w	sl, sl, r6
 8009ca2:	f04f 0100 	mov.w	r1, #0
 8009ca6:	f04f 0200 	mov.w	r2, #0
 8009caa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009cae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009cb2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009cb6:	4689      	mov	r9, r1
 8009cb8:	4692      	mov	sl, r2
 8009cba:	eb19 0005 	adds.w	r0, r9, r5
 8009cbe:	eb4a 0106 	adc.w	r1, sl, r6
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	685b      	ldr	r3, [r3, #4]
 8009cc6:	461d      	mov	r5, r3
 8009cc8:	f04f 0600 	mov.w	r6, #0
 8009ccc:	196b      	adds	r3, r5, r5
 8009cce:	eb46 0406 	adc.w	r4, r6, r6
 8009cd2:	461a      	mov	r2, r3
 8009cd4:	4623      	mov	r3, r4
 8009cd6:	f7f7 f827 	bl	8000d28 <__aeabi_uldivmod>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	460c      	mov	r4, r1
 8009cde:	461a      	mov	r2, r3
 8009ce0:	4b6a      	ldr	r3, [pc, #424]	; (8009e8c <UART_SetConfig+0x384>)
 8009ce2:	fba3 1302 	umull	r1, r3, r3, r2
 8009ce6:	095b      	lsrs	r3, r3, #5
 8009ce8:	2164      	movs	r1, #100	; 0x64
 8009cea:	fb01 f303 	mul.w	r3, r1, r3
 8009cee:	1ad3      	subs	r3, r2, r3
 8009cf0:	00db      	lsls	r3, r3, #3
 8009cf2:	3332      	adds	r3, #50	; 0x32
 8009cf4:	4a65      	ldr	r2, [pc, #404]	; (8009e8c <UART_SetConfig+0x384>)
 8009cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8009cfa:	095b      	lsrs	r3, r3, #5
 8009cfc:	f003 0207 	and.w	r2, r3, #7
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	4442      	add	r2, r8
 8009d06:	609a      	str	r2, [r3, #8]
 8009d08:	e26f      	b.n	800a1ea <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009d0a:	f7fc fee9 	bl	8006ae0 <HAL_RCC_GetPCLK1Freq>
 8009d0e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	461d      	mov	r5, r3
 8009d14:	f04f 0600 	mov.w	r6, #0
 8009d18:	46a8      	mov	r8, r5
 8009d1a:	46b1      	mov	r9, r6
 8009d1c:	eb18 0308 	adds.w	r3, r8, r8
 8009d20:	eb49 0409 	adc.w	r4, r9, r9
 8009d24:	4698      	mov	r8, r3
 8009d26:	46a1      	mov	r9, r4
 8009d28:	eb18 0805 	adds.w	r8, r8, r5
 8009d2c:	eb49 0906 	adc.w	r9, r9, r6
 8009d30:	f04f 0100 	mov.w	r1, #0
 8009d34:	f04f 0200 	mov.w	r2, #0
 8009d38:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009d3c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009d40:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009d44:	4688      	mov	r8, r1
 8009d46:	4691      	mov	r9, r2
 8009d48:	eb18 0005 	adds.w	r0, r8, r5
 8009d4c:	eb49 0106 	adc.w	r1, r9, r6
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	685b      	ldr	r3, [r3, #4]
 8009d54:	461d      	mov	r5, r3
 8009d56:	f04f 0600 	mov.w	r6, #0
 8009d5a:	196b      	adds	r3, r5, r5
 8009d5c:	eb46 0406 	adc.w	r4, r6, r6
 8009d60:	461a      	mov	r2, r3
 8009d62:	4623      	mov	r3, r4
 8009d64:	f7f6 ffe0 	bl	8000d28 <__aeabi_uldivmod>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	460c      	mov	r4, r1
 8009d6c:	461a      	mov	r2, r3
 8009d6e:	4b47      	ldr	r3, [pc, #284]	; (8009e8c <UART_SetConfig+0x384>)
 8009d70:	fba3 2302 	umull	r2, r3, r3, r2
 8009d74:	095b      	lsrs	r3, r3, #5
 8009d76:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	461d      	mov	r5, r3
 8009d7e:	f04f 0600 	mov.w	r6, #0
 8009d82:	46a9      	mov	r9, r5
 8009d84:	46b2      	mov	sl, r6
 8009d86:	eb19 0309 	adds.w	r3, r9, r9
 8009d8a:	eb4a 040a 	adc.w	r4, sl, sl
 8009d8e:	4699      	mov	r9, r3
 8009d90:	46a2      	mov	sl, r4
 8009d92:	eb19 0905 	adds.w	r9, r9, r5
 8009d96:	eb4a 0a06 	adc.w	sl, sl, r6
 8009d9a:	f04f 0100 	mov.w	r1, #0
 8009d9e:	f04f 0200 	mov.w	r2, #0
 8009da2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009da6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009daa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009dae:	4689      	mov	r9, r1
 8009db0:	4692      	mov	sl, r2
 8009db2:	eb19 0005 	adds.w	r0, r9, r5
 8009db6:	eb4a 0106 	adc.w	r1, sl, r6
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	685b      	ldr	r3, [r3, #4]
 8009dbe:	461d      	mov	r5, r3
 8009dc0:	f04f 0600 	mov.w	r6, #0
 8009dc4:	196b      	adds	r3, r5, r5
 8009dc6:	eb46 0406 	adc.w	r4, r6, r6
 8009dca:	461a      	mov	r2, r3
 8009dcc:	4623      	mov	r3, r4
 8009dce:	f7f6 ffab 	bl	8000d28 <__aeabi_uldivmod>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	460c      	mov	r4, r1
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	4b2c      	ldr	r3, [pc, #176]	; (8009e8c <UART_SetConfig+0x384>)
 8009dda:	fba3 1302 	umull	r1, r3, r3, r2
 8009dde:	095b      	lsrs	r3, r3, #5
 8009de0:	2164      	movs	r1, #100	; 0x64
 8009de2:	fb01 f303 	mul.w	r3, r1, r3
 8009de6:	1ad3      	subs	r3, r2, r3
 8009de8:	00db      	lsls	r3, r3, #3
 8009dea:	3332      	adds	r3, #50	; 0x32
 8009dec:	4a27      	ldr	r2, [pc, #156]	; (8009e8c <UART_SetConfig+0x384>)
 8009dee:	fba2 2303 	umull	r2, r3, r2, r3
 8009df2:	095b      	lsrs	r3, r3, #5
 8009df4:	005b      	lsls	r3, r3, #1
 8009df6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009dfa:	4498      	add	r8, r3
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	461d      	mov	r5, r3
 8009e00:	f04f 0600 	mov.w	r6, #0
 8009e04:	46a9      	mov	r9, r5
 8009e06:	46b2      	mov	sl, r6
 8009e08:	eb19 0309 	adds.w	r3, r9, r9
 8009e0c:	eb4a 040a 	adc.w	r4, sl, sl
 8009e10:	4699      	mov	r9, r3
 8009e12:	46a2      	mov	sl, r4
 8009e14:	eb19 0905 	adds.w	r9, r9, r5
 8009e18:	eb4a 0a06 	adc.w	sl, sl, r6
 8009e1c:	f04f 0100 	mov.w	r1, #0
 8009e20:	f04f 0200 	mov.w	r2, #0
 8009e24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009e28:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009e2c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009e30:	4689      	mov	r9, r1
 8009e32:	4692      	mov	sl, r2
 8009e34:	eb19 0005 	adds.w	r0, r9, r5
 8009e38:	eb4a 0106 	adc.w	r1, sl, r6
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	685b      	ldr	r3, [r3, #4]
 8009e40:	461d      	mov	r5, r3
 8009e42:	f04f 0600 	mov.w	r6, #0
 8009e46:	196b      	adds	r3, r5, r5
 8009e48:	eb46 0406 	adc.w	r4, r6, r6
 8009e4c:	461a      	mov	r2, r3
 8009e4e:	4623      	mov	r3, r4
 8009e50:	f7f6 ff6a 	bl	8000d28 <__aeabi_uldivmod>
 8009e54:	4603      	mov	r3, r0
 8009e56:	460c      	mov	r4, r1
 8009e58:	461a      	mov	r2, r3
 8009e5a:	4b0c      	ldr	r3, [pc, #48]	; (8009e8c <UART_SetConfig+0x384>)
 8009e5c:	fba3 1302 	umull	r1, r3, r3, r2
 8009e60:	095b      	lsrs	r3, r3, #5
 8009e62:	2164      	movs	r1, #100	; 0x64
 8009e64:	fb01 f303 	mul.w	r3, r1, r3
 8009e68:	1ad3      	subs	r3, r2, r3
 8009e6a:	00db      	lsls	r3, r3, #3
 8009e6c:	3332      	adds	r3, #50	; 0x32
 8009e6e:	4a07      	ldr	r2, [pc, #28]	; (8009e8c <UART_SetConfig+0x384>)
 8009e70:	fba2 2303 	umull	r2, r3, r2, r3
 8009e74:	095b      	lsrs	r3, r3, #5
 8009e76:	f003 0207 	and.w	r2, r3, #7
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	4442      	add	r2, r8
 8009e80:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8009e82:	e1b2      	b.n	800a1ea <UART_SetConfig+0x6e2>
 8009e84:	40011000 	.word	0x40011000
 8009e88:	40011400 	.word	0x40011400
 8009e8c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	4ad7      	ldr	r2, [pc, #860]	; (800a1f4 <UART_SetConfig+0x6ec>)
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d005      	beq.n	8009ea6 <UART_SetConfig+0x39e>
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	4ad6      	ldr	r2, [pc, #856]	; (800a1f8 <UART_SetConfig+0x6f0>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	f040 80d1 	bne.w	800a048 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8009ea6:	f7fc fe2f 	bl	8006b08 <HAL_RCC_GetPCLK2Freq>
 8009eaa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	469a      	mov	sl, r3
 8009eb0:	f04f 0b00 	mov.w	fp, #0
 8009eb4:	46d0      	mov	r8, sl
 8009eb6:	46d9      	mov	r9, fp
 8009eb8:	eb18 0308 	adds.w	r3, r8, r8
 8009ebc:	eb49 0409 	adc.w	r4, r9, r9
 8009ec0:	4698      	mov	r8, r3
 8009ec2:	46a1      	mov	r9, r4
 8009ec4:	eb18 080a 	adds.w	r8, r8, sl
 8009ec8:	eb49 090b 	adc.w	r9, r9, fp
 8009ecc:	f04f 0100 	mov.w	r1, #0
 8009ed0:	f04f 0200 	mov.w	r2, #0
 8009ed4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009ed8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009edc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009ee0:	4688      	mov	r8, r1
 8009ee2:	4691      	mov	r9, r2
 8009ee4:	eb1a 0508 	adds.w	r5, sl, r8
 8009ee8:	eb4b 0609 	adc.w	r6, fp, r9
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	685b      	ldr	r3, [r3, #4]
 8009ef0:	4619      	mov	r1, r3
 8009ef2:	f04f 0200 	mov.w	r2, #0
 8009ef6:	f04f 0300 	mov.w	r3, #0
 8009efa:	f04f 0400 	mov.w	r4, #0
 8009efe:	0094      	lsls	r4, r2, #2
 8009f00:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009f04:	008b      	lsls	r3, r1, #2
 8009f06:	461a      	mov	r2, r3
 8009f08:	4623      	mov	r3, r4
 8009f0a:	4628      	mov	r0, r5
 8009f0c:	4631      	mov	r1, r6
 8009f0e:	f7f6 ff0b 	bl	8000d28 <__aeabi_uldivmod>
 8009f12:	4603      	mov	r3, r0
 8009f14:	460c      	mov	r4, r1
 8009f16:	461a      	mov	r2, r3
 8009f18:	4bb8      	ldr	r3, [pc, #736]	; (800a1fc <UART_SetConfig+0x6f4>)
 8009f1a:	fba3 2302 	umull	r2, r3, r3, r2
 8009f1e:	095b      	lsrs	r3, r3, #5
 8009f20:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	469b      	mov	fp, r3
 8009f28:	f04f 0c00 	mov.w	ip, #0
 8009f2c:	46d9      	mov	r9, fp
 8009f2e:	46e2      	mov	sl, ip
 8009f30:	eb19 0309 	adds.w	r3, r9, r9
 8009f34:	eb4a 040a 	adc.w	r4, sl, sl
 8009f38:	4699      	mov	r9, r3
 8009f3a:	46a2      	mov	sl, r4
 8009f3c:	eb19 090b 	adds.w	r9, r9, fp
 8009f40:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009f44:	f04f 0100 	mov.w	r1, #0
 8009f48:	f04f 0200 	mov.w	r2, #0
 8009f4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009f50:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009f54:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009f58:	4689      	mov	r9, r1
 8009f5a:	4692      	mov	sl, r2
 8009f5c:	eb1b 0509 	adds.w	r5, fp, r9
 8009f60:	eb4c 060a 	adc.w	r6, ip, sl
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	685b      	ldr	r3, [r3, #4]
 8009f68:	4619      	mov	r1, r3
 8009f6a:	f04f 0200 	mov.w	r2, #0
 8009f6e:	f04f 0300 	mov.w	r3, #0
 8009f72:	f04f 0400 	mov.w	r4, #0
 8009f76:	0094      	lsls	r4, r2, #2
 8009f78:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009f7c:	008b      	lsls	r3, r1, #2
 8009f7e:	461a      	mov	r2, r3
 8009f80:	4623      	mov	r3, r4
 8009f82:	4628      	mov	r0, r5
 8009f84:	4631      	mov	r1, r6
 8009f86:	f7f6 fecf 	bl	8000d28 <__aeabi_uldivmod>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	460c      	mov	r4, r1
 8009f8e:	461a      	mov	r2, r3
 8009f90:	4b9a      	ldr	r3, [pc, #616]	; (800a1fc <UART_SetConfig+0x6f4>)
 8009f92:	fba3 1302 	umull	r1, r3, r3, r2
 8009f96:	095b      	lsrs	r3, r3, #5
 8009f98:	2164      	movs	r1, #100	; 0x64
 8009f9a:	fb01 f303 	mul.w	r3, r1, r3
 8009f9e:	1ad3      	subs	r3, r2, r3
 8009fa0:	011b      	lsls	r3, r3, #4
 8009fa2:	3332      	adds	r3, #50	; 0x32
 8009fa4:	4a95      	ldr	r2, [pc, #596]	; (800a1fc <UART_SetConfig+0x6f4>)
 8009fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8009faa:	095b      	lsrs	r3, r3, #5
 8009fac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009fb0:	4498      	add	r8, r3
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	469b      	mov	fp, r3
 8009fb6:	f04f 0c00 	mov.w	ip, #0
 8009fba:	46d9      	mov	r9, fp
 8009fbc:	46e2      	mov	sl, ip
 8009fbe:	eb19 0309 	adds.w	r3, r9, r9
 8009fc2:	eb4a 040a 	adc.w	r4, sl, sl
 8009fc6:	4699      	mov	r9, r3
 8009fc8:	46a2      	mov	sl, r4
 8009fca:	eb19 090b 	adds.w	r9, r9, fp
 8009fce:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009fd2:	f04f 0100 	mov.w	r1, #0
 8009fd6:	f04f 0200 	mov.w	r2, #0
 8009fda:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009fde:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009fe2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009fe6:	4689      	mov	r9, r1
 8009fe8:	4692      	mov	sl, r2
 8009fea:	eb1b 0509 	adds.w	r5, fp, r9
 8009fee:	eb4c 060a 	adc.w	r6, ip, sl
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	685b      	ldr	r3, [r3, #4]
 8009ff6:	4619      	mov	r1, r3
 8009ff8:	f04f 0200 	mov.w	r2, #0
 8009ffc:	f04f 0300 	mov.w	r3, #0
 800a000:	f04f 0400 	mov.w	r4, #0
 800a004:	0094      	lsls	r4, r2, #2
 800a006:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a00a:	008b      	lsls	r3, r1, #2
 800a00c:	461a      	mov	r2, r3
 800a00e:	4623      	mov	r3, r4
 800a010:	4628      	mov	r0, r5
 800a012:	4631      	mov	r1, r6
 800a014:	f7f6 fe88 	bl	8000d28 <__aeabi_uldivmod>
 800a018:	4603      	mov	r3, r0
 800a01a:	460c      	mov	r4, r1
 800a01c:	461a      	mov	r2, r3
 800a01e:	4b77      	ldr	r3, [pc, #476]	; (800a1fc <UART_SetConfig+0x6f4>)
 800a020:	fba3 1302 	umull	r1, r3, r3, r2
 800a024:	095b      	lsrs	r3, r3, #5
 800a026:	2164      	movs	r1, #100	; 0x64
 800a028:	fb01 f303 	mul.w	r3, r1, r3
 800a02c:	1ad3      	subs	r3, r2, r3
 800a02e:	011b      	lsls	r3, r3, #4
 800a030:	3332      	adds	r3, #50	; 0x32
 800a032:	4a72      	ldr	r2, [pc, #456]	; (800a1fc <UART_SetConfig+0x6f4>)
 800a034:	fba2 2303 	umull	r2, r3, r2, r3
 800a038:	095b      	lsrs	r3, r3, #5
 800a03a:	f003 020f 	and.w	r2, r3, #15
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	4442      	add	r2, r8
 800a044:	609a      	str	r2, [r3, #8]
 800a046:	e0d0      	b.n	800a1ea <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800a048:	f7fc fd4a 	bl	8006ae0 <HAL_RCC_GetPCLK1Freq>
 800a04c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	469a      	mov	sl, r3
 800a052:	f04f 0b00 	mov.w	fp, #0
 800a056:	46d0      	mov	r8, sl
 800a058:	46d9      	mov	r9, fp
 800a05a:	eb18 0308 	adds.w	r3, r8, r8
 800a05e:	eb49 0409 	adc.w	r4, r9, r9
 800a062:	4698      	mov	r8, r3
 800a064:	46a1      	mov	r9, r4
 800a066:	eb18 080a 	adds.w	r8, r8, sl
 800a06a:	eb49 090b 	adc.w	r9, r9, fp
 800a06e:	f04f 0100 	mov.w	r1, #0
 800a072:	f04f 0200 	mov.w	r2, #0
 800a076:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a07a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a07e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a082:	4688      	mov	r8, r1
 800a084:	4691      	mov	r9, r2
 800a086:	eb1a 0508 	adds.w	r5, sl, r8
 800a08a:	eb4b 0609 	adc.w	r6, fp, r9
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	685b      	ldr	r3, [r3, #4]
 800a092:	4619      	mov	r1, r3
 800a094:	f04f 0200 	mov.w	r2, #0
 800a098:	f04f 0300 	mov.w	r3, #0
 800a09c:	f04f 0400 	mov.w	r4, #0
 800a0a0:	0094      	lsls	r4, r2, #2
 800a0a2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a0a6:	008b      	lsls	r3, r1, #2
 800a0a8:	461a      	mov	r2, r3
 800a0aa:	4623      	mov	r3, r4
 800a0ac:	4628      	mov	r0, r5
 800a0ae:	4631      	mov	r1, r6
 800a0b0:	f7f6 fe3a 	bl	8000d28 <__aeabi_uldivmod>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	460c      	mov	r4, r1
 800a0b8:	461a      	mov	r2, r3
 800a0ba:	4b50      	ldr	r3, [pc, #320]	; (800a1fc <UART_SetConfig+0x6f4>)
 800a0bc:	fba3 2302 	umull	r2, r3, r3, r2
 800a0c0:	095b      	lsrs	r3, r3, #5
 800a0c2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a0c6:	68bb      	ldr	r3, [r7, #8]
 800a0c8:	469b      	mov	fp, r3
 800a0ca:	f04f 0c00 	mov.w	ip, #0
 800a0ce:	46d9      	mov	r9, fp
 800a0d0:	46e2      	mov	sl, ip
 800a0d2:	eb19 0309 	adds.w	r3, r9, r9
 800a0d6:	eb4a 040a 	adc.w	r4, sl, sl
 800a0da:	4699      	mov	r9, r3
 800a0dc:	46a2      	mov	sl, r4
 800a0de:	eb19 090b 	adds.w	r9, r9, fp
 800a0e2:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a0e6:	f04f 0100 	mov.w	r1, #0
 800a0ea:	f04f 0200 	mov.w	r2, #0
 800a0ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a0f2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a0f6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a0fa:	4689      	mov	r9, r1
 800a0fc:	4692      	mov	sl, r2
 800a0fe:	eb1b 0509 	adds.w	r5, fp, r9
 800a102:	eb4c 060a 	adc.w	r6, ip, sl
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	685b      	ldr	r3, [r3, #4]
 800a10a:	4619      	mov	r1, r3
 800a10c:	f04f 0200 	mov.w	r2, #0
 800a110:	f04f 0300 	mov.w	r3, #0
 800a114:	f04f 0400 	mov.w	r4, #0
 800a118:	0094      	lsls	r4, r2, #2
 800a11a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a11e:	008b      	lsls	r3, r1, #2
 800a120:	461a      	mov	r2, r3
 800a122:	4623      	mov	r3, r4
 800a124:	4628      	mov	r0, r5
 800a126:	4631      	mov	r1, r6
 800a128:	f7f6 fdfe 	bl	8000d28 <__aeabi_uldivmod>
 800a12c:	4603      	mov	r3, r0
 800a12e:	460c      	mov	r4, r1
 800a130:	461a      	mov	r2, r3
 800a132:	4b32      	ldr	r3, [pc, #200]	; (800a1fc <UART_SetConfig+0x6f4>)
 800a134:	fba3 1302 	umull	r1, r3, r3, r2
 800a138:	095b      	lsrs	r3, r3, #5
 800a13a:	2164      	movs	r1, #100	; 0x64
 800a13c:	fb01 f303 	mul.w	r3, r1, r3
 800a140:	1ad3      	subs	r3, r2, r3
 800a142:	011b      	lsls	r3, r3, #4
 800a144:	3332      	adds	r3, #50	; 0x32
 800a146:	4a2d      	ldr	r2, [pc, #180]	; (800a1fc <UART_SetConfig+0x6f4>)
 800a148:	fba2 2303 	umull	r2, r3, r2, r3
 800a14c:	095b      	lsrs	r3, r3, #5
 800a14e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a152:	4498      	add	r8, r3
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	469b      	mov	fp, r3
 800a158:	f04f 0c00 	mov.w	ip, #0
 800a15c:	46d9      	mov	r9, fp
 800a15e:	46e2      	mov	sl, ip
 800a160:	eb19 0309 	adds.w	r3, r9, r9
 800a164:	eb4a 040a 	adc.w	r4, sl, sl
 800a168:	4699      	mov	r9, r3
 800a16a:	46a2      	mov	sl, r4
 800a16c:	eb19 090b 	adds.w	r9, r9, fp
 800a170:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a174:	f04f 0100 	mov.w	r1, #0
 800a178:	f04f 0200 	mov.w	r2, #0
 800a17c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a180:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a184:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a188:	4689      	mov	r9, r1
 800a18a:	4692      	mov	sl, r2
 800a18c:	eb1b 0509 	adds.w	r5, fp, r9
 800a190:	eb4c 060a 	adc.w	r6, ip, sl
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	685b      	ldr	r3, [r3, #4]
 800a198:	4619      	mov	r1, r3
 800a19a:	f04f 0200 	mov.w	r2, #0
 800a19e:	f04f 0300 	mov.w	r3, #0
 800a1a2:	f04f 0400 	mov.w	r4, #0
 800a1a6:	0094      	lsls	r4, r2, #2
 800a1a8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a1ac:	008b      	lsls	r3, r1, #2
 800a1ae:	461a      	mov	r2, r3
 800a1b0:	4623      	mov	r3, r4
 800a1b2:	4628      	mov	r0, r5
 800a1b4:	4631      	mov	r1, r6
 800a1b6:	f7f6 fdb7 	bl	8000d28 <__aeabi_uldivmod>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	460c      	mov	r4, r1
 800a1be:	461a      	mov	r2, r3
 800a1c0:	4b0e      	ldr	r3, [pc, #56]	; (800a1fc <UART_SetConfig+0x6f4>)
 800a1c2:	fba3 1302 	umull	r1, r3, r3, r2
 800a1c6:	095b      	lsrs	r3, r3, #5
 800a1c8:	2164      	movs	r1, #100	; 0x64
 800a1ca:	fb01 f303 	mul.w	r3, r1, r3
 800a1ce:	1ad3      	subs	r3, r2, r3
 800a1d0:	011b      	lsls	r3, r3, #4
 800a1d2:	3332      	adds	r3, #50	; 0x32
 800a1d4:	4a09      	ldr	r2, [pc, #36]	; (800a1fc <UART_SetConfig+0x6f4>)
 800a1d6:	fba2 2303 	umull	r2, r3, r2, r3
 800a1da:	095b      	lsrs	r3, r3, #5
 800a1dc:	f003 020f 	and.w	r2, r3, #15
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	4442      	add	r2, r8
 800a1e6:	609a      	str	r2, [r3, #8]
}
 800a1e8:	e7ff      	b.n	800a1ea <UART_SetConfig+0x6e2>
 800a1ea:	bf00      	nop
 800a1ec:	3714      	adds	r7, #20
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1f4:	40011000 	.word	0x40011000
 800a1f8:	40011400 	.word	0x40011400
 800a1fc:	51eb851f 	.word	0x51eb851f

0800a200 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800a200:	b084      	sub	sp, #16
 800a202:	b480      	push	{r7}
 800a204:	b085      	sub	sp, #20
 800a206:	af00      	add	r7, sp, #0
 800a208:	6078      	str	r0, [r7, #4]
 800a20a:	f107 001c 	add.w	r0, r7, #28
 800a20e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a212:	2300      	movs	r3, #0
 800a214:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a216:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a218:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a21a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800a21e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a220:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800a222:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800a226:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800a22a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a22c:	68fa      	ldr	r2, [r7, #12]
 800a22e:	4313      	orrs	r3, r2
 800a230:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	685b      	ldr	r3, [r3, #4]
 800a236:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800a23a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a23e:	68fa      	ldr	r2, [r7, #12]
 800a240:	431a      	orrs	r2, r3
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a246:	2300      	movs	r3, #0
}
 800a248:	4618      	mov	r0, r3
 800a24a:	3714      	adds	r7, #20
 800a24c:	46bd      	mov	sp, r7
 800a24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a252:	b004      	add	sp, #16
 800a254:	4770      	bx	lr

0800a256 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800a256:	b480      	push	{r7}
 800a258:	b083      	sub	sp, #12
 800a25a:	af00      	add	r7, sp, #0
 800a25c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a264:	4618      	mov	r0, r3
 800a266:	370c      	adds	r7, #12
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr

0800a270 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800a270:	b480      	push	{r7}
 800a272:	b083      	sub	sp, #12
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
 800a278:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	681a      	ldr	r2, [r3, #0]
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a284:	2300      	movs	r3, #0
}
 800a286:	4618      	mov	r0, r3
 800a288:	370c      	adds	r7, #12
 800a28a:	46bd      	mov	sp, r7
 800a28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a290:	4770      	bx	lr

0800a292 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800a292:	b580      	push	{r7, lr}
 800a294:	b082      	sub	sp, #8
 800a296:	af00      	add	r7, sp, #0
 800a298:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2203      	movs	r2, #3
 800a29e:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800a2a0:	2002      	movs	r0, #2
 800a2a2:	f7f9 f801 	bl	80032a8 <HAL_Delay>
  
  return HAL_OK;
 800a2a6:	2300      	movs	r3, #0
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	3708      	adds	r7, #8
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd80      	pop	{r7, pc}

0800a2b0 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800a2b0:	b480      	push	{r7}
 800a2b2:	b083      	sub	sp, #12
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f003 0303 	and.w	r3, r3, #3
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	370c      	adds	r7, #12
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ca:	4770      	bx	lr

0800a2cc <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b085      	sub	sp, #20
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
 800a2d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	681a      	ldr	r2, [r3, #0]
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a2ea:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a2f0:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a2f6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a2f8:	68fa      	ldr	r2, [r7, #12]
 800a2fa:	4313      	orrs	r3, r2
 800a2fc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	68db      	ldr	r3, [r3, #12]
 800a302:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a306:	f023 030f 	bic.w	r3, r3, #15
 800a30a:	68fa      	ldr	r2, [r7, #12]
 800a30c:	431a      	orrs	r2, r3
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800a312:	2300      	movs	r3, #0
}
 800a314:	4618      	mov	r0, r3
 800a316:	3714      	adds	r7, #20
 800a318:	46bd      	mov	sp, r7
 800a31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31e:	4770      	bx	lr

0800a320 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800a320:	b480      	push	{r7}
 800a322:	b083      	sub	sp, #12
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	691b      	ldr	r3, [r3, #16]
 800a32c:	b2db      	uxtb	r3, r3
}
 800a32e:	4618      	mov	r0, r3
 800a330:	370c      	adds	r7, #12
 800a332:	46bd      	mov	sp, r7
 800a334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a338:	4770      	bx	lr

0800a33a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800a33a:	b480      	push	{r7}
 800a33c:	b085      	sub	sp, #20
 800a33e:	af00      	add	r7, sp, #0
 800a340:	6078      	str	r0, [r7, #4]
 800a342:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	3314      	adds	r3, #20
 800a348:	461a      	mov	r2, r3
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	4413      	add	r3, r2
 800a34e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
}  
 800a354:	4618      	mov	r0, r3
 800a356:	3714      	adds	r7, #20
 800a358:	46bd      	mov	sp, r7
 800a35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35e:	4770      	bx	lr

0800a360 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800a360:	b480      	push	{r7}
 800a362:	b085      	sub	sp, #20
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
 800a368:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a36a:	2300      	movs	r3, #0
 800a36c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	681a      	ldr	r2, [r3, #0]
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	685a      	ldr	r2, [r3, #4]
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a386:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a38c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a392:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a394:	68fa      	ldr	r2, [r7, #12]
 800a396:	4313      	orrs	r3, r2
 800a398:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a39e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	431a      	orrs	r2, r3
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a3aa:	2300      	movs	r3, #0

}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3714      	adds	r7, #20
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b6:	4770      	bx	lr

0800a3b8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b088      	sub	sp, #32
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
 800a3c0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a3c6:	2310      	movs	r3, #16
 800a3c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a3ca:	2340      	movs	r3, #64	; 0x40
 800a3cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a3d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a3d8:	f107 0308 	add.w	r3, r7, #8
 800a3dc:	4619      	mov	r1, r3
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	f7ff ff74 	bl	800a2cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800a3e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3e8:	2110      	movs	r1, #16
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f000 fa40 	bl	800a870 <SDMMC_GetCmdResp1>
 800a3f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a3f2:	69fb      	ldr	r3, [r7, #28]
}
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	3720      	adds	r7, #32
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bd80      	pop	{r7, pc}

0800a3fc <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b088      	sub	sp, #32
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
 800a404:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a40a:	2311      	movs	r3, #17
 800a40c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a40e:	2340      	movs	r3, #64	; 0x40
 800a410:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a412:	2300      	movs	r3, #0
 800a414:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a416:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a41a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a41c:	f107 0308 	add.w	r3, r7, #8
 800a420:	4619      	mov	r1, r3
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f7ff ff52 	bl	800a2cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a428:	f241 3288 	movw	r2, #5000	; 0x1388
 800a42c:	2111      	movs	r1, #17
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f000 fa1e 	bl	800a870 <SDMMC_GetCmdResp1>
 800a434:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a436:	69fb      	ldr	r3, [r7, #28]
}
 800a438:	4618      	mov	r0, r3
 800a43a:	3720      	adds	r7, #32
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}

0800a440 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b088      	sub	sp, #32
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
 800a448:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a44e:	2312      	movs	r3, #18
 800a450:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a452:	2340      	movs	r3, #64	; 0x40
 800a454:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a456:	2300      	movs	r3, #0
 800a458:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a45a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a45e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a460:	f107 0308 	add.w	r3, r7, #8
 800a464:	4619      	mov	r1, r3
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f7ff ff30 	bl	800a2cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a46c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a470:	2112      	movs	r1, #18
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f000 f9fc 	bl	800a870 <SDMMC_GetCmdResp1>
 800a478:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a47a:	69fb      	ldr	r3, [r7, #28]
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3720      	adds	r7, #32
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}

0800a484 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b088      	sub	sp, #32
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
 800a48c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a492:	2318      	movs	r3, #24
 800a494:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a496:	2340      	movs	r3, #64	; 0x40
 800a498:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a49a:	2300      	movs	r3, #0
 800a49c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a49e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a4a2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a4a4:	f107 0308 	add.w	r3, r7, #8
 800a4a8:	4619      	mov	r1, r3
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f7ff ff0e 	bl	800a2cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a4b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4b4:	2118      	movs	r1, #24
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f000 f9da 	bl	800a870 <SDMMC_GetCmdResp1>
 800a4bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a4be:	69fb      	ldr	r3, [r7, #28]
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3720      	adds	r7, #32
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}

0800a4c8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b088      	sub	sp, #32
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
 800a4d0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a4d6:	2319      	movs	r3, #25
 800a4d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a4da:	2340      	movs	r3, #64	; 0x40
 800a4dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a4e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a4e6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a4e8:	f107 0308 	add.w	r3, r7, #8
 800a4ec:	4619      	mov	r1, r3
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f7ff feec 	bl	800a2cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a4f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4f8:	2119      	movs	r1, #25
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f000 f9b8 	bl	800a870 <SDMMC_GetCmdResp1>
 800a500:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a502:	69fb      	ldr	r3, [r7, #28]
}
 800a504:	4618      	mov	r0, r3
 800a506:	3720      	adds	r7, #32
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}

0800a50c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b088      	sub	sp, #32
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a514:	2300      	movs	r3, #0
 800a516:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a518:	230c      	movs	r3, #12
 800a51a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a51c:	2340      	movs	r3, #64	; 0x40
 800a51e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a520:	2300      	movs	r3, #0
 800a522:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a524:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a528:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a52a:	f107 0308 	add.w	r3, r7, #8
 800a52e:	4619      	mov	r1, r3
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f7ff fecb 	bl	800a2cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800a536:	4a05      	ldr	r2, [pc, #20]	; (800a54c <SDMMC_CmdStopTransfer+0x40>)
 800a538:	210c      	movs	r1, #12
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f000 f998 	bl	800a870 <SDMMC_GetCmdResp1>
 800a540:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a542:	69fb      	ldr	r3, [r7, #28]
}
 800a544:	4618      	mov	r0, r3
 800a546:	3720      	adds	r7, #32
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}
 800a54c:	05f5e100 	.word	0x05f5e100

0800a550 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b08a      	sub	sp, #40	; 0x28
 800a554:	af00      	add	r7, sp, #0
 800a556:	60f8      	str	r0, [r7, #12]
 800a558:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a560:	2307      	movs	r3, #7
 800a562:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a564:	2340      	movs	r3, #64	; 0x40
 800a566:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a568:	2300      	movs	r3, #0
 800a56a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a56c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a570:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a572:	f107 0310 	add.w	r3, r7, #16
 800a576:	4619      	mov	r1, r3
 800a578:	68f8      	ldr	r0, [r7, #12]
 800a57a:	f7ff fea7 	bl	800a2cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800a57e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a582:	2107      	movs	r1, #7
 800a584:	68f8      	ldr	r0, [r7, #12]
 800a586:	f000 f973 	bl	800a870 <SDMMC_GetCmdResp1>
 800a58a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800a58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3728      	adds	r7, #40	; 0x28
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}

0800a596 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800a596:	b580      	push	{r7, lr}
 800a598:	b088      	sub	sp, #32
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a5ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a5b4:	f107 0308 	add.w	r3, r7, #8
 800a5b8:	4619      	mov	r1, r3
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f7ff fe86 	bl	800a2cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f000 f92d 	bl	800a820 <SDMMC_GetCmdError>
 800a5c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a5c8:	69fb      	ldr	r3, [r7, #28]
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3720      	adds	r7, #32
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}

0800a5d2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800a5d2:	b580      	push	{r7, lr}
 800a5d4:	b088      	sub	sp, #32
 800a5d6:	af00      	add	r7, sp, #0
 800a5d8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a5da:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800a5de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a5e0:	2308      	movs	r3, #8
 800a5e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a5e4:	2340      	movs	r3, #64	; 0x40
 800a5e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a5ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a5f2:	f107 0308 	add.w	r3, r7, #8
 800a5f6:	4619      	mov	r1, r3
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f7ff fe67 	bl	800a2cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f000 fb16 	bl	800ac30 <SDMMC_GetCmdResp7>
 800a604:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a606:	69fb      	ldr	r3, [r7, #28]
}
 800a608:	4618      	mov	r0, r3
 800a60a:	3720      	adds	r7, #32
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}

0800a610 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b088      	sub	sp, #32
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
 800a618:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a61e:	2337      	movs	r3, #55	; 0x37
 800a620:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a622:	2340      	movs	r3, #64	; 0x40
 800a624:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a626:	2300      	movs	r3, #0
 800a628:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a62a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a62e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a630:	f107 0308 	add.w	r3, r7, #8
 800a634:	4619      	mov	r1, r3
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	f7ff fe48 	bl	800a2cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800a63c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a640:	2137      	movs	r1, #55	; 0x37
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	f000 f914 	bl	800a870 <SDMMC_GetCmdResp1>
 800a648:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a64a:	69fb      	ldr	r3, [r7, #28]
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3720      	adds	r7, #32
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}

0800a654 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b088      	sub	sp, #32
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
 800a65c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a668:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a66a:	2329      	movs	r3, #41	; 0x29
 800a66c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a66e:	2340      	movs	r3, #64	; 0x40
 800a670:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a672:	2300      	movs	r3, #0
 800a674:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a676:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a67a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a67c:	f107 0308 	add.w	r3, r7, #8
 800a680:	4619      	mov	r1, r3
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f7ff fe22 	bl	800a2cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f000 fa23 	bl	800aad4 <SDMMC_GetCmdResp3>
 800a68e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a690:	69fb      	ldr	r3, [r7, #28]
}
 800a692:	4618      	mov	r0, r3
 800a694:	3720      	adds	r7, #32
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}

0800a69a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800a69a:	b580      	push	{r7, lr}
 800a69c:	b088      	sub	sp, #32
 800a69e:	af00      	add	r7, sp, #0
 800a6a0:	6078      	str	r0, [r7, #4]
 800a6a2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a6a8:	2306      	movs	r3, #6
 800a6aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a6ac:	2340      	movs	r3, #64	; 0x40
 800a6ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a6b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a6ba:	f107 0308 	add.w	r3, r7, #8
 800a6be:	4619      	mov	r1, r3
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	f7ff fe03 	bl	800a2cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800a6c6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6ca:	2106      	movs	r1, #6
 800a6cc:	6878      	ldr	r0, [r7, #4]
 800a6ce:	f000 f8cf 	bl	800a870 <SDMMC_GetCmdResp1>
 800a6d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a6d4:	69fb      	ldr	r3, [r7, #28]
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	3720      	adds	r7, #32
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}

0800a6de <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800a6de:	b580      	push	{r7, lr}
 800a6e0:	b088      	sub	sp, #32
 800a6e2:	af00      	add	r7, sp, #0
 800a6e4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a6ea:	2333      	movs	r3, #51	; 0x33
 800a6ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a6ee:	2340      	movs	r3, #64	; 0x40
 800a6f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a6f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a6fc:	f107 0308 	add.w	r3, r7, #8
 800a700:	4619      	mov	r1, r3
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f7ff fde2 	bl	800a2cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800a708:	f241 3288 	movw	r2, #5000	; 0x1388
 800a70c:	2133      	movs	r1, #51	; 0x33
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f000 f8ae 	bl	800a870 <SDMMC_GetCmdResp1>
 800a714:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a716:	69fb      	ldr	r3, [r7, #28]
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3720      	adds	r7, #32
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}

0800a720 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b088      	sub	sp, #32
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a728:	2300      	movs	r3, #0
 800a72a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a72c:	2302      	movs	r3, #2
 800a72e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a730:	23c0      	movs	r3, #192	; 0xc0
 800a732:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a734:	2300      	movs	r3, #0
 800a736:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a738:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a73c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a73e:	f107 0308 	add.w	r3, r7, #8
 800a742:	4619      	mov	r1, r3
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	f7ff fdc1 	bl	800a2cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	f000 f97c 	bl	800aa48 <SDMMC_GetCmdResp2>
 800a750:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a752:	69fb      	ldr	r3, [r7, #28]
}
 800a754:	4618      	mov	r0, r3
 800a756:	3720      	adds	r7, #32
 800a758:	46bd      	mov	sp, r7
 800a75a:	bd80      	pop	{r7, pc}

0800a75c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b088      	sub	sp, #32
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
 800a764:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a76a:	2309      	movs	r3, #9
 800a76c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a76e:	23c0      	movs	r3, #192	; 0xc0
 800a770:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a772:	2300      	movs	r3, #0
 800a774:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a776:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a77a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a77c:	f107 0308 	add.w	r3, r7, #8
 800a780:	4619      	mov	r1, r3
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f7ff fda2 	bl	800a2cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f000 f95d 	bl	800aa48 <SDMMC_GetCmdResp2>
 800a78e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a790:	69fb      	ldr	r3, [r7, #28]
}
 800a792:	4618      	mov	r0, r3
 800a794:	3720      	adds	r7, #32
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}

0800a79a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800a79a:	b580      	push	{r7, lr}
 800a79c:	b088      	sub	sp, #32
 800a79e:	af00      	add	r7, sp, #0
 800a7a0:	6078      	str	r0, [r7, #4]
 800a7a2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a7a8:	2303      	movs	r3, #3
 800a7aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a7ac:	2340      	movs	r3, #64	; 0x40
 800a7ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a7b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a7ba:	f107 0308 	add.w	r3, r7, #8
 800a7be:	4619      	mov	r1, r3
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	f7ff fd83 	bl	800a2cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a7c6:	683a      	ldr	r2, [r7, #0]
 800a7c8:	2103      	movs	r1, #3
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f000 f9bc 	bl	800ab48 <SDMMC_GetCmdResp6>
 800a7d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a7d2:	69fb      	ldr	r3, [r7, #28]
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	3720      	adds	r7, #32
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bd80      	pop	{r7, pc}

0800a7dc <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b088      	sub	sp, #32
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
 800a7e4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a7ea:	230d      	movs	r3, #13
 800a7ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a7ee:	2340      	movs	r3, #64	; 0x40
 800a7f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a7f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a7fc:	f107 0308 	add.w	r3, r7, #8
 800a800:	4619      	mov	r1, r3
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f7ff fd62 	bl	800a2cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800a808:	f241 3288 	movw	r2, #5000	; 0x1388
 800a80c:	210d      	movs	r1, #13
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f000 f82e 	bl	800a870 <SDMMC_GetCmdResp1>
 800a814:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a816:	69fb      	ldr	r3, [r7, #28]
}
 800a818:	4618      	mov	r0, r3
 800a81a:	3720      	adds	r7, #32
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bd80      	pop	{r7, pc}

0800a820 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800a820:	b490      	push	{r4, r7}
 800a822:	b082      	sub	sp, #8
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a828:	4b0f      	ldr	r3, [pc, #60]	; (800a868 <SDMMC_GetCmdError+0x48>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	4a0f      	ldr	r2, [pc, #60]	; (800a86c <SDMMC_GetCmdError+0x4c>)
 800a82e:	fba2 2303 	umull	r2, r3, r2, r3
 800a832:	0a5b      	lsrs	r3, r3, #9
 800a834:	f241 3288 	movw	r2, #5000	; 0x1388
 800a838:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a83c:	4623      	mov	r3, r4
 800a83e:	1e5c      	subs	r4, r3, #1
 800a840:	2b00      	cmp	r3, #0
 800a842:	d102      	bne.n	800a84a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a844:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a848:	e009      	b.n	800a85e <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a84e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a852:	2b00      	cmp	r3, #0
 800a854:	d0f2      	beq.n	800a83c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	22c5      	movs	r2, #197	; 0xc5
 800a85a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800a85c:	2300      	movs	r3, #0
}
 800a85e:	4618      	mov	r0, r3
 800a860:	3708      	adds	r7, #8
 800a862:	46bd      	mov	sp, r7
 800a864:	bc90      	pop	{r4, r7}
 800a866:	4770      	bx	lr
 800a868:	20000014 	.word	0x20000014
 800a86c:	10624dd3 	.word	0x10624dd3

0800a870 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a870:	b590      	push	{r4, r7, lr}
 800a872:	b087      	sub	sp, #28
 800a874:	af00      	add	r7, sp, #0
 800a876:	60f8      	str	r0, [r7, #12]
 800a878:	460b      	mov	r3, r1
 800a87a:	607a      	str	r2, [r7, #4]
 800a87c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a87e:	4b6f      	ldr	r3, [pc, #444]	; (800aa3c <SDMMC_GetCmdResp1+0x1cc>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	4a6f      	ldr	r2, [pc, #444]	; (800aa40 <SDMMC_GetCmdResp1+0x1d0>)
 800a884:	fba2 2303 	umull	r2, r3, r2, r3
 800a888:	0a5b      	lsrs	r3, r3, #9
 800a88a:	687a      	ldr	r2, [r7, #4]
 800a88c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a890:	4623      	mov	r3, r4
 800a892:	1e5c      	subs	r4, r3, #1
 800a894:	2b00      	cmp	r3, #0
 800a896:	d102      	bne.n	800a89e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a898:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a89c:	e0c9      	b.n	800aa32 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8a2:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a8a4:	697b      	ldr	r3, [r7, #20]
 800a8a6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d0f0      	beq.n	800a890 <SDMMC_GetCmdResp1+0x20>
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d1eb      	bne.n	800a890 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8bc:	f003 0304 	and.w	r3, r3, #4
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d004      	beq.n	800a8ce <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	2204      	movs	r2, #4
 800a8c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a8ca:	2304      	movs	r3, #4
 800a8cc:	e0b1      	b.n	800aa32 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8d2:	f003 0301 	and.w	r3, r3, #1
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d004      	beq.n	800a8e4 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	2201      	movs	r2, #1
 800a8de:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a8e0:	2301      	movs	r3, #1
 800a8e2:	e0a6      	b.n	800aa32 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	22c5      	movs	r2, #197	; 0xc5
 800a8e8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a8ea:	68f8      	ldr	r0, [r7, #12]
 800a8ec:	f7ff fd18 	bl	800a320 <SDIO_GetCommandResponse>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	461a      	mov	r2, r3
 800a8f4:	7afb      	ldrb	r3, [r7, #11]
 800a8f6:	4293      	cmp	r3, r2
 800a8f8:	d001      	beq.n	800a8fe <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	e099      	b.n	800aa32 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a8fe:	2100      	movs	r1, #0
 800a900:	68f8      	ldr	r0, [r7, #12]
 800a902:	f7ff fd1a 	bl	800a33a <SDIO_GetResponse>
 800a906:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a908:	693a      	ldr	r2, [r7, #16]
 800a90a:	4b4e      	ldr	r3, [pc, #312]	; (800aa44 <SDMMC_GetCmdResp1+0x1d4>)
 800a90c:	4013      	ands	r3, r2
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d101      	bne.n	800a916 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800a912:	2300      	movs	r3, #0
 800a914:	e08d      	b.n	800aa32 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	da02      	bge.n	800a922 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a91c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a920:	e087      	b.n	800aa32 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a922:	693b      	ldr	r3, [r7, #16]
 800a924:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d001      	beq.n	800a930 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a92c:	2340      	movs	r3, #64	; 0x40
 800a92e:	e080      	b.n	800aa32 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a930:	693b      	ldr	r3, [r7, #16]
 800a932:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a936:	2b00      	cmp	r3, #0
 800a938:	d001      	beq.n	800a93e <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a93a:	2380      	movs	r3, #128	; 0x80
 800a93c:	e079      	b.n	800aa32 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a93e:	693b      	ldr	r3, [r7, #16]
 800a940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a944:	2b00      	cmp	r3, #0
 800a946:	d002      	beq.n	800a94e <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a948:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a94c:	e071      	b.n	800aa32 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a94e:	693b      	ldr	r3, [r7, #16]
 800a950:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a954:	2b00      	cmp	r3, #0
 800a956:	d002      	beq.n	800a95e <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a958:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a95c:	e069      	b.n	800aa32 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a95e:	693b      	ldr	r3, [r7, #16]
 800a960:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a964:	2b00      	cmp	r3, #0
 800a966:	d002      	beq.n	800a96e <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a968:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a96c:	e061      	b.n	800aa32 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a96e:	693b      	ldr	r3, [r7, #16]
 800a970:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a974:	2b00      	cmp	r3, #0
 800a976:	d002      	beq.n	800a97e <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a978:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a97c:	e059      	b.n	800aa32 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a97e:	693b      	ldr	r3, [r7, #16]
 800a980:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a984:	2b00      	cmp	r3, #0
 800a986:	d002      	beq.n	800a98e <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a98c:	e051      	b.n	800aa32 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a98e:	693b      	ldr	r3, [r7, #16]
 800a990:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a994:	2b00      	cmp	r3, #0
 800a996:	d002      	beq.n	800a99e <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a998:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a99c:	e049      	b.n	800aa32 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a99e:	693b      	ldr	r3, [r7, #16]
 800a9a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d002      	beq.n	800a9ae <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a9a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a9ac:	e041      	b.n	800aa32 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a9ae:	693b      	ldr	r3, [r7, #16]
 800a9b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d002      	beq.n	800a9be <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800a9b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a9bc:	e039      	b.n	800aa32 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a9be:	693b      	ldr	r3, [r7, #16]
 800a9c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d002      	beq.n	800a9ce <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a9c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a9cc:	e031      	b.n	800aa32 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d002      	beq.n	800a9de <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a9d8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a9dc:	e029      	b.n	800aa32 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d002      	beq.n	800a9ee <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a9e8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a9ec:	e021      	b.n	800aa32 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a9ee:	693b      	ldr	r3, [r7, #16]
 800a9f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d002      	beq.n	800a9fe <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a9f8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a9fc:	e019      	b.n	800aa32 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a9fe:	693b      	ldr	r3, [r7, #16]
 800aa00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d002      	beq.n	800aa0e <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800aa08:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800aa0c:	e011      	b.n	800aa32 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800aa0e:	693b      	ldr	r3, [r7, #16]
 800aa10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d002      	beq.n	800aa1e <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800aa18:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800aa1c:	e009      	b.n	800aa32 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	f003 0308 	and.w	r3, r3, #8
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d002      	beq.n	800aa2e <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800aa28:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800aa2c:	e001      	b.n	800aa32 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800aa2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	371c      	adds	r7, #28
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd90      	pop	{r4, r7, pc}
 800aa3a:	bf00      	nop
 800aa3c:	20000014 	.word	0x20000014
 800aa40:	10624dd3 	.word	0x10624dd3
 800aa44:	fdffe008 	.word	0xfdffe008

0800aa48 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800aa48:	b490      	push	{r4, r7}
 800aa4a:	b084      	sub	sp, #16
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800aa50:	4b1e      	ldr	r3, [pc, #120]	; (800aacc <SDMMC_GetCmdResp2+0x84>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	4a1e      	ldr	r2, [pc, #120]	; (800aad0 <SDMMC_GetCmdResp2+0x88>)
 800aa56:	fba2 2303 	umull	r2, r3, r2, r3
 800aa5a:	0a5b      	lsrs	r3, r3, #9
 800aa5c:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa60:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800aa64:	4623      	mov	r3, r4
 800aa66:	1e5c      	subs	r4, r3, #1
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d102      	bne.n	800aa72 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aa6c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aa70:	e026      	b.n	800aac0 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa76:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d0f0      	beq.n	800aa64 <SDMMC_GetCmdResp2+0x1c>
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d1eb      	bne.n	800aa64 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa90:	f003 0304 	and.w	r3, r3, #4
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d004      	beq.n	800aaa2 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2204      	movs	r2, #4
 800aa9c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aa9e:	2304      	movs	r3, #4
 800aaa0:	e00e      	b.n	800aac0 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aaa6:	f003 0301 	and.w	r3, r3, #1
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d004      	beq.n	800aab8 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2201      	movs	r2, #1
 800aab2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aab4:	2301      	movs	r3, #1
 800aab6:	e003      	b.n	800aac0 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	22c5      	movs	r2, #197	; 0xc5
 800aabc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800aabe:	2300      	movs	r3, #0
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	3710      	adds	r7, #16
 800aac4:	46bd      	mov	sp, r7
 800aac6:	bc90      	pop	{r4, r7}
 800aac8:	4770      	bx	lr
 800aaca:	bf00      	nop
 800aacc:	20000014 	.word	0x20000014
 800aad0:	10624dd3 	.word	0x10624dd3

0800aad4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800aad4:	b490      	push	{r4, r7}
 800aad6:	b084      	sub	sp, #16
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800aadc:	4b18      	ldr	r3, [pc, #96]	; (800ab40 <SDMMC_GetCmdResp3+0x6c>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	4a18      	ldr	r2, [pc, #96]	; (800ab44 <SDMMC_GetCmdResp3+0x70>)
 800aae2:	fba2 2303 	umull	r2, r3, r2, r3
 800aae6:	0a5b      	lsrs	r3, r3, #9
 800aae8:	f241 3288 	movw	r2, #5000	; 0x1388
 800aaec:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800aaf0:	4623      	mov	r3, r4
 800aaf2:	1e5c      	subs	r4, r3, #1
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d102      	bne.n	800aafe <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aaf8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aafc:	e01b      	b.n	800ab36 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab02:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d0f0      	beq.n	800aaf0 <SDMMC_GetCmdResp3+0x1c>
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d1eb      	bne.n	800aaf0 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab1c:	f003 0304 	and.w	r3, r3, #4
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d004      	beq.n	800ab2e <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2204      	movs	r2, #4
 800ab28:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ab2a:	2304      	movs	r3, #4
 800ab2c:	e003      	b.n	800ab36 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	22c5      	movs	r2, #197	; 0xc5
 800ab32:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ab34:	2300      	movs	r3, #0
}
 800ab36:	4618      	mov	r0, r3
 800ab38:	3710      	adds	r7, #16
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bc90      	pop	{r4, r7}
 800ab3e:	4770      	bx	lr
 800ab40:	20000014 	.word	0x20000014
 800ab44:	10624dd3 	.word	0x10624dd3

0800ab48 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800ab48:	b590      	push	{r4, r7, lr}
 800ab4a:	b087      	sub	sp, #28
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	60f8      	str	r0, [r7, #12]
 800ab50:	460b      	mov	r3, r1
 800ab52:	607a      	str	r2, [r7, #4]
 800ab54:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ab56:	4b34      	ldr	r3, [pc, #208]	; (800ac28 <SDMMC_GetCmdResp6+0xe0>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	4a34      	ldr	r2, [pc, #208]	; (800ac2c <SDMMC_GetCmdResp6+0xe4>)
 800ab5c:	fba2 2303 	umull	r2, r3, r2, r3
 800ab60:	0a5b      	lsrs	r3, r3, #9
 800ab62:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab66:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ab6a:	4623      	mov	r3, r4
 800ab6c:	1e5c      	subs	r4, r3, #1
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d102      	bne.n	800ab78 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ab72:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ab76:	e052      	b.n	800ac1e <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab7c:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ab7e:	697b      	ldr	r3, [r7, #20]
 800ab80:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d0f0      	beq.n	800ab6a <SDMMC_GetCmdResp6+0x22>
 800ab88:	697b      	ldr	r3, [r7, #20]
 800ab8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d1eb      	bne.n	800ab6a <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab96:	f003 0304 	and.w	r3, r3, #4
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d004      	beq.n	800aba8 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	2204      	movs	r2, #4
 800aba2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aba4:	2304      	movs	r3, #4
 800aba6:	e03a      	b.n	800ac1e <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abac:	f003 0301 	and.w	r3, r3, #1
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d004      	beq.n	800abbe <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	2201      	movs	r2, #1
 800abb8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800abba:	2301      	movs	r3, #1
 800abbc:	e02f      	b.n	800ac1e <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800abbe:	68f8      	ldr	r0, [r7, #12]
 800abc0:	f7ff fbae 	bl	800a320 <SDIO_GetCommandResponse>
 800abc4:	4603      	mov	r3, r0
 800abc6:	461a      	mov	r2, r3
 800abc8:	7afb      	ldrb	r3, [r7, #11]
 800abca:	4293      	cmp	r3, r2
 800abcc:	d001      	beq.n	800abd2 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800abce:	2301      	movs	r3, #1
 800abd0:	e025      	b.n	800ac1e <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	22c5      	movs	r2, #197	; 0xc5
 800abd6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800abd8:	2100      	movs	r1, #0
 800abda:	68f8      	ldr	r0, [r7, #12]
 800abdc:	f7ff fbad 	bl	800a33a <SDIO_GetResponse>
 800abe0:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800abe2:	693b      	ldr	r3, [r7, #16]
 800abe4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d106      	bne.n	800abfa <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800abec:	693b      	ldr	r3, [r7, #16]
 800abee:	0c1b      	lsrs	r3, r3, #16
 800abf0:	b29a      	uxth	r2, r3
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800abf6:	2300      	movs	r3, #0
 800abf8:	e011      	b.n	800ac1e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800abfa:	693b      	ldr	r3, [r7, #16]
 800abfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d002      	beq.n	800ac0a <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ac04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ac08:	e009      	b.n	800ac1e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ac0a:	693b      	ldr	r3, [r7, #16]
 800ac0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d002      	beq.n	800ac1a <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ac14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac18:	e001      	b.n	800ac1e <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ac1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	371c      	adds	r7, #28
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd90      	pop	{r4, r7, pc}
 800ac26:	bf00      	nop
 800ac28:	20000014 	.word	0x20000014
 800ac2c:	10624dd3 	.word	0x10624dd3

0800ac30 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800ac30:	b490      	push	{r4, r7}
 800ac32:	b084      	sub	sp, #16
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ac38:	4b21      	ldr	r3, [pc, #132]	; (800acc0 <SDMMC_GetCmdResp7+0x90>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	4a21      	ldr	r2, [pc, #132]	; (800acc4 <SDMMC_GetCmdResp7+0x94>)
 800ac3e:	fba2 2303 	umull	r2, r3, r2, r3
 800ac42:	0a5b      	lsrs	r3, r3, #9
 800ac44:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac48:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ac4c:	4623      	mov	r3, r4
 800ac4e:	1e5c      	subs	r4, r3, #1
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d102      	bne.n	800ac5a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ac54:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ac58:	e02c      	b.n	800acb4 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac5e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d0f0      	beq.n	800ac4c <SDMMC_GetCmdResp7+0x1c>
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d1eb      	bne.n	800ac4c <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac78:	f003 0304 	and.w	r3, r3, #4
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d004      	beq.n	800ac8a <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2204      	movs	r2, #4
 800ac84:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ac86:	2304      	movs	r3, #4
 800ac88:	e014      	b.n	800acb4 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac8e:	f003 0301 	and.w	r3, r3, #1
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d004      	beq.n	800aca0 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	2201      	movs	r2, #1
 800ac9a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ac9c:	2301      	movs	r3, #1
 800ac9e:	e009      	b.n	800acb4 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d002      	beq.n	800acb2 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2240      	movs	r2, #64	; 0x40
 800acb0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800acb2:	2300      	movs	r3, #0
  
}
 800acb4:	4618      	mov	r0, r3
 800acb6:	3710      	adds	r7, #16
 800acb8:	46bd      	mov	sp, r7
 800acba:	bc90      	pop	{r4, r7}
 800acbc:	4770      	bx	lr
 800acbe:	bf00      	nop
 800acc0:	20000014 	.word	0x20000014
 800acc4:	10624dd3 	.word	0x10624dd3

0800acc8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800acc8:	b084      	sub	sp, #16
 800acca:	b580      	push	{r7, lr}
 800accc:	b084      	sub	sp, #16
 800acce:	af00      	add	r7, sp, #0
 800acd0:	6078      	str	r0, [r7, #4]
 800acd2:	f107 001c 	add.w	r0, r7, #28
 800acd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800acda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acdc:	2b01      	cmp	r3, #1
 800acde:	d122      	bne.n	800ad26 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ace4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	68db      	ldr	r3, [r3, #12]
 800acf0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800acf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800acf8:	687a      	ldr	r2, [r7, #4]
 800acfa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	68db      	ldr	r3, [r3, #12]
 800ad00:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ad08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad0a:	2b01      	cmp	r3, #1
 800ad0c:	d105      	bne.n	800ad1a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	68db      	ldr	r3, [r3, #12]
 800ad12:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800ad1a:	6878      	ldr	r0, [r7, #4]
 800ad1c:	f001 fa7c 	bl	800c218 <USB_CoreReset>
 800ad20:	4603      	mov	r3, r0
 800ad22:	73fb      	strb	r3, [r7, #15]
 800ad24:	e01a      	b.n	800ad5c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	68db      	ldr	r3, [r3, #12]
 800ad2a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f001 fa70 	bl	800c218 <USB_CoreReset>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ad3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d106      	bne.n	800ad50 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad46:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	639a      	str	r2, [r3, #56]	; 0x38
 800ad4e:	e005      	b.n	800ad5c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ad5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad5e:	2b01      	cmp	r3, #1
 800ad60:	d10b      	bne.n	800ad7a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	689b      	ldr	r3, [r3, #8]
 800ad66:	f043 0206 	orr.w	r2, r3, #6
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	689b      	ldr	r3, [r3, #8]
 800ad72:	f043 0220 	orr.w	r2, r3, #32
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ad7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	3710      	adds	r7, #16
 800ad80:	46bd      	mov	sp, r7
 800ad82:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ad86:	b004      	add	sp, #16
 800ad88:	4770      	bx	lr
	...

0800ad8c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800ad8c:	b480      	push	{r7}
 800ad8e:	b087      	sub	sp, #28
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	60f8      	str	r0, [r7, #12]
 800ad94:	60b9      	str	r1, [r7, #8]
 800ad96:	4613      	mov	r3, r2
 800ad98:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800ad9a:	79fb      	ldrb	r3, [r7, #7]
 800ad9c:	2b02      	cmp	r3, #2
 800ad9e:	d165      	bne.n	800ae6c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	4a41      	ldr	r2, [pc, #260]	; (800aea8 <USB_SetTurnaroundTime+0x11c>)
 800ada4:	4293      	cmp	r3, r2
 800ada6:	d906      	bls.n	800adb6 <USB_SetTurnaroundTime+0x2a>
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	4a40      	ldr	r2, [pc, #256]	; (800aeac <USB_SetTurnaroundTime+0x120>)
 800adac:	4293      	cmp	r3, r2
 800adae:	d802      	bhi.n	800adb6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800adb0:	230f      	movs	r3, #15
 800adb2:	617b      	str	r3, [r7, #20]
 800adb4:	e062      	b.n	800ae7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	4a3c      	ldr	r2, [pc, #240]	; (800aeac <USB_SetTurnaroundTime+0x120>)
 800adba:	4293      	cmp	r3, r2
 800adbc:	d906      	bls.n	800adcc <USB_SetTurnaroundTime+0x40>
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	4a3b      	ldr	r2, [pc, #236]	; (800aeb0 <USB_SetTurnaroundTime+0x124>)
 800adc2:	4293      	cmp	r3, r2
 800adc4:	d802      	bhi.n	800adcc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800adc6:	230e      	movs	r3, #14
 800adc8:	617b      	str	r3, [r7, #20]
 800adca:	e057      	b.n	800ae7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	4a38      	ldr	r2, [pc, #224]	; (800aeb0 <USB_SetTurnaroundTime+0x124>)
 800add0:	4293      	cmp	r3, r2
 800add2:	d906      	bls.n	800ade2 <USB_SetTurnaroundTime+0x56>
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	4a37      	ldr	r2, [pc, #220]	; (800aeb4 <USB_SetTurnaroundTime+0x128>)
 800add8:	4293      	cmp	r3, r2
 800adda:	d802      	bhi.n	800ade2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800addc:	230d      	movs	r3, #13
 800adde:	617b      	str	r3, [r7, #20]
 800ade0:	e04c      	b.n	800ae7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	4a33      	ldr	r2, [pc, #204]	; (800aeb4 <USB_SetTurnaroundTime+0x128>)
 800ade6:	4293      	cmp	r3, r2
 800ade8:	d906      	bls.n	800adf8 <USB_SetTurnaroundTime+0x6c>
 800adea:	68bb      	ldr	r3, [r7, #8]
 800adec:	4a32      	ldr	r2, [pc, #200]	; (800aeb8 <USB_SetTurnaroundTime+0x12c>)
 800adee:	4293      	cmp	r3, r2
 800adf0:	d802      	bhi.n	800adf8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800adf2:	230c      	movs	r3, #12
 800adf4:	617b      	str	r3, [r7, #20]
 800adf6:	e041      	b.n	800ae7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	4a2f      	ldr	r2, [pc, #188]	; (800aeb8 <USB_SetTurnaroundTime+0x12c>)
 800adfc:	4293      	cmp	r3, r2
 800adfe:	d906      	bls.n	800ae0e <USB_SetTurnaroundTime+0x82>
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	4a2e      	ldr	r2, [pc, #184]	; (800aebc <USB_SetTurnaroundTime+0x130>)
 800ae04:	4293      	cmp	r3, r2
 800ae06:	d802      	bhi.n	800ae0e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800ae08:	230b      	movs	r3, #11
 800ae0a:	617b      	str	r3, [r7, #20]
 800ae0c:	e036      	b.n	800ae7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	4a2a      	ldr	r2, [pc, #168]	; (800aebc <USB_SetTurnaroundTime+0x130>)
 800ae12:	4293      	cmp	r3, r2
 800ae14:	d906      	bls.n	800ae24 <USB_SetTurnaroundTime+0x98>
 800ae16:	68bb      	ldr	r3, [r7, #8]
 800ae18:	4a29      	ldr	r2, [pc, #164]	; (800aec0 <USB_SetTurnaroundTime+0x134>)
 800ae1a:	4293      	cmp	r3, r2
 800ae1c:	d802      	bhi.n	800ae24 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800ae1e:	230a      	movs	r3, #10
 800ae20:	617b      	str	r3, [r7, #20]
 800ae22:	e02b      	b.n	800ae7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	4a26      	ldr	r2, [pc, #152]	; (800aec0 <USB_SetTurnaroundTime+0x134>)
 800ae28:	4293      	cmp	r3, r2
 800ae2a:	d906      	bls.n	800ae3a <USB_SetTurnaroundTime+0xae>
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	4a25      	ldr	r2, [pc, #148]	; (800aec4 <USB_SetTurnaroundTime+0x138>)
 800ae30:	4293      	cmp	r3, r2
 800ae32:	d802      	bhi.n	800ae3a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800ae34:	2309      	movs	r3, #9
 800ae36:	617b      	str	r3, [r7, #20]
 800ae38:	e020      	b.n	800ae7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800ae3a:	68bb      	ldr	r3, [r7, #8]
 800ae3c:	4a21      	ldr	r2, [pc, #132]	; (800aec4 <USB_SetTurnaroundTime+0x138>)
 800ae3e:	4293      	cmp	r3, r2
 800ae40:	d906      	bls.n	800ae50 <USB_SetTurnaroundTime+0xc4>
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	4a20      	ldr	r2, [pc, #128]	; (800aec8 <USB_SetTurnaroundTime+0x13c>)
 800ae46:	4293      	cmp	r3, r2
 800ae48:	d802      	bhi.n	800ae50 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800ae4a:	2308      	movs	r3, #8
 800ae4c:	617b      	str	r3, [r7, #20]
 800ae4e:	e015      	b.n	800ae7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	4a1d      	ldr	r2, [pc, #116]	; (800aec8 <USB_SetTurnaroundTime+0x13c>)
 800ae54:	4293      	cmp	r3, r2
 800ae56:	d906      	bls.n	800ae66 <USB_SetTurnaroundTime+0xda>
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	4a1c      	ldr	r2, [pc, #112]	; (800aecc <USB_SetTurnaroundTime+0x140>)
 800ae5c:	4293      	cmp	r3, r2
 800ae5e:	d802      	bhi.n	800ae66 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800ae60:	2307      	movs	r3, #7
 800ae62:	617b      	str	r3, [r7, #20]
 800ae64:	e00a      	b.n	800ae7c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800ae66:	2306      	movs	r3, #6
 800ae68:	617b      	str	r3, [r7, #20]
 800ae6a:	e007      	b.n	800ae7c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800ae6c:	79fb      	ldrb	r3, [r7, #7]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d102      	bne.n	800ae78 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800ae72:	2309      	movs	r3, #9
 800ae74:	617b      	str	r3, [r7, #20]
 800ae76:	e001      	b.n	800ae7c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800ae78:	2309      	movs	r3, #9
 800ae7a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	68db      	ldr	r3, [r3, #12]
 800ae80:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	68da      	ldr	r2, [r3, #12]
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	029b      	lsls	r3, r3, #10
 800ae90:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800ae94:	431a      	orrs	r2, r3
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ae9a:	2300      	movs	r3, #0
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	371c      	adds	r7, #28
 800aea0:	46bd      	mov	sp, r7
 800aea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea6:	4770      	bx	lr
 800aea8:	00d8acbf 	.word	0x00d8acbf
 800aeac:	00e4e1bf 	.word	0x00e4e1bf
 800aeb0:	00f423ff 	.word	0x00f423ff
 800aeb4:	0106737f 	.word	0x0106737f
 800aeb8:	011a499f 	.word	0x011a499f
 800aebc:	01312cff 	.word	0x01312cff
 800aec0:	014ca43f 	.word	0x014ca43f
 800aec4:	016e35ff 	.word	0x016e35ff
 800aec8:	01a6ab1f 	.word	0x01a6ab1f
 800aecc:	01e847ff 	.word	0x01e847ff

0800aed0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800aed0:	b480      	push	{r7}
 800aed2:	b083      	sub	sp, #12
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	689b      	ldr	r3, [r3, #8]
 800aedc:	f043 0201 	orr.w	r2, r3, #1
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800aee4:	2300      	movs	r3, #0
}
 800aee6:	4618      	mov	r0, r3
 800aee8:	370c      	adds	r7, #12
 800aeea:	46bd      	mov	sp, r7
 800aeec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef0:	4770      	bx	lr

0800aef2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800aef2:	b480      	push	{r7}
 800aef4:	b083      	sub	sp, #12
 800aef6:	af00      	add	r7, sp, #0
 800aef8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	689b      	ldr	r3, [r3, #8]
 800aefe:	f023 0201 	bic.w	r2, r3, #1
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800af06:	2300      	movs	r3, #0
}
 800af08:	4618      	mov	r0, r3
 800af0a:	370c      	adds	r7, #12
 800af0c:	46bd      	mov	sp, r7
 800af0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af12:	4770      	bx	lr

0800af14 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b082      	sub	sp, #8
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
 800af1c:	460b      	mov	r3, r1
 800af1e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	68db      	ldr	r3, [r3, #12]
 800af24:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800af2c:	78fb      	ldrb	r3, [r7, #3]
 800af2e:	2b01      	cmp	r3, #1
 800af30:	d106      	bne.n	800af40 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	68db      	ldr	r3, [r3, #12]
 800af36:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	60da      	str	r2, [r3, #12]
 800af3e:	e00b      	b.n	800af58 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800af40:	78fb      	ldrb	r3, [r7, #3]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d106      	bne.n	800af54 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	68db      	ldr	r3, [r3, #12]
 800af4a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	60da      	str	r2, [r3, #12]
 800af52:	e001      	b.n	800af58 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800af54:	2301      	movs	r3, #1
 800af56:	e003      	b.n	800af60 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800af58:	2032      	movs	r0, #50	; 0x32
 800af5a:	f7f8 f9a5 	bl	80032a8 <HAL_Delay>

  return HAL_OK;
 800af5e:	2300      	movs	r3, #0
}
 800af60:	4618      	mov	r0, r3
 800af62:	3708      	adds	r7, #8
 800af64:	46bd      	mov	sp, r7
 800af66:	bd80      	pop	{r7, pc}

0800af68 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800af68:	b084      	sub	sp, #16
 800af6a:	b580      	push	{r7, lr}
 800af6c:	b086      	sub	sp, #24
 800af6e:	af00      	add	r7, sp, #0
 800af70:	6078      	str	r0, [r7, #4]
 800af72:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800af76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800af7a:	2300      	movs	r3, #0
 800af7c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800af82:	2300      	movs	r3, #0
 800af84:	613b      	str	r3, [r7, #16]
 800af86:	e009      	b.n	800af9c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800af88:	687a      	ldr	r2, [r7, #4]
 800af8a:	693b      	ldr	r3, [r7, #16]
 800af8c:	3340      	adds	r3, #64	; 0x40
 800af8e:	009b      	lsls	r3, r3, #2
 800af90:	4413      	add	r3, r2
 800af92:	2200      	movs	r2, #0
 800af94:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800af96:	693b      	ldr	r3, [r7, #16]
 800af98:	3301      	adds	r3, #1
 800af9a:	613b      	str	r3, [r7, #16]
 800af9c:	693b      	ldr	r3, [r7, #16]
 800af9e:	2b0e      	cmp	r3, #14
 800afa0:	d9f2      	bls.n	800af88 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800afa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d112      	bne.n	800afce <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afb8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afc4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	639a      	str	r2, [r3, #56]	; 0x38
 800afcc:	e00b      	b.n	800afe6 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afde:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800afec:	461a      	mov	r2, r3
 800afee:	2300      	movs	r3, #0
 800aff0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aff8:	4619      	mov	r1, r3
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b000:	461a      	mov	r2, r3
 800b002:	680b      	ldr	r3, [r1, #0]
 800b004:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b008:	2b01      	cmp	r3, #1
 800b00a:	d10c      	bne.n	800b026 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b00c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d104      	bne.n	800b01c <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b012:	2100      	movs	r1, #0
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	f000 f961 	bl	800b2dc <USB_SetDevSpeed>
 800b01a:	e008      	b.n	800b02e <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b01c:	2101      	movs	r1, #1
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f000 f95c 	bl	800b2dc <USB_SetDevSpeed>
 800b024:	e003      	b.n	800b02e <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b026:	2103      	movs	r1, #3
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f000 f957 	bl	800b2dc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b02e:	2110      	movs	r1, #16
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f000 f90b 	bl	800b24c <USB_FlushTxFifo>
 800b036:	4603      	mov	r3, r0
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d001      	beq.n	800b040 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 800b03c:	2301      	movs	r3, #1
 800b03e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b040:	6878      	ldr	r0, [r7, #4]
 800b042:	f000 f929 	bl	800b298 <USB_FlushRxFifo>
 800b046:	4603      	mov	r3, r0
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d001      	beq.n	800b050 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 800b04c:	2301      	movs	r3, #1
 800b04e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b056:	461a      	mov	r2, r3
 800b058:	2300      	movs	r3, #0
 800b05a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b062:	461a      	mov	r2, r3
 800b064:	2300      	movs	r3, #0
 800b066:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b06e:	461a      	mov	r2, r3
 800b070:	2300      	movs	r3, #0
 800b072:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b074:	2300      	movs	r3, #0
 800b076:	613b      	str	r3, [r7, #16]
 800b078:	e043      	b.n	800b102 <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b07a:	693b      	ldr	r3, [r7, #16]
 800b07c:	015a      	lsls	r2, r3, #5
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	4413      	add	r3, r2
 800b082:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b08c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b090:	d118      	bne.n	800b0c4 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 800b092:	693b      	ldr	r3, [r7, #16]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d10a      	bne.n	800b0ae <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b098:	693b      	ldr	r3, [r7, #16]
 800b09a:	015a      	lsls	r2, r3, #5
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	4413      	add	r3, r2
 800b0a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0a4:	461a      	mov	r2, r3
 800b0a6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b0aa:	6013      	str	r3, [r2, #0]
 800b0ac:	e013      	b.n	800b0d6 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b0ae:	693b      	ldr	r3, [r7, #16]
 800b0b0:	015a      	lsls	r2, r3, #5
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	4413      	add	r3, r2
 800b0b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0ba:	461a      	mov	r2, r3
 800b0bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b0c0:	6013      	str	r3, [r2, #0]
 800b0c2:	e008      	b.n	800b0d6 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b0c4:	693b      	ldr	r3, [r7, #16]
 800b0c6:	015a      	lsls	r2, r3, #5
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	4413      	add	r3, r2
 800b0cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0d0:	461a      	mov	r2, r3
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b0d6:	693b      	ldr	r3, [r7, #16]
 800b0d8:	015a      	lsls	r2, r3, #5
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	4413      	add	r3, r2
 800b0de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0e2:	461a      	mov	r2, r3
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b0e8:	693b      	ldr	r3, [r7, #16]
 800b0ea:	015a      	lsls	r2, r3, #5
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	4413      	add	r3, r2
 800b0f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0f4:	461a      	mov	r2, r3
 800b0f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b0fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b0fc:	693b      	ldr	r3, [r7, #16]
 800b0fe:	3301      	adds	r3, #1
 800b100:	613b      	str	r3, [r7, #16]
 800b102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b104:	693a      	ldr	r2, [r7, #16]
 800b106:	429a      	cmp	r2, r3
 800b108:	d3b7      	bcc.n	800b07a <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b10a:	2300      	movs	r3, #0
 800b10c:	613b      	str	r3, [r7, #16]
 800b10e:	e043      	b.n	800b198 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b110:	693b      	ldr	r3, [r7, #16]
 800b112:	015a      	lsls	r2, r3, #5
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	4413      	add	r3, r2
 800b118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b122:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b126:	d118      	bne.n	800b15a <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 800b128:	693b      	ldr	r3, [r7, #16]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d10a      	bne.n	800b144 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b12e:	693b      	ldr	r3, [r7, #16]
 800b130:	015a      	lsls	r2, r3, #5
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	4413      	add	r3, r2
 800b136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b13a:	461a      	mov	r2, r3
 800b13c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b140:	6013      	str	r3, [r2, #0]
 800b142:	e013      	b.n	800b16c <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b144:	693b      	ldr	r3, [r7, #16]
 800b146:	015a      	lsls	r2, r3, #5
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	4413      	add	r3, r2
 800b14c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b150:	461a      	mov	r2, r3
 800b152:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b156:	6013      	str	r3, [r2, #0]
 800b158:	e008      	b.n	800b16c <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	015a      	lsls	r2, r3, #5
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	4413      	add	r3, r2
 800b162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b166:	461a      	mov	r2, r3
 800b168:	2300      	movs	r3, #0
 800b16a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b16c:	693b      	ldr	r3, [r7, #16]
 800b16e:	015a      	lsls	r2, r3, #5
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	4413      	add	r3, r2
 800b174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b178:	461a      	mov	r2, r3
 800b17a:	2300      	movs	r3, #0
 800b17c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b17e:	693b      	ldr	r3, [r7, #16]
 800b180:	015a      	lsls	r2, r3, #5
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	4413      	add	r3, r2
 800b186:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b18a:	461a      	mov	r2, r3
 800b18c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b190:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b192:	693b      	ldr	r3, [r7, #16]
 800b194:	3301      	adds	r3, #1
 800b196:	613b      	str	r3, [r7, #16]
 800b198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b19a:	693a      	ldr	r2, [r7, #16]
 800b19c:	429a      	cmp	r2, r3
 800b19e:	d3b7      	bcc.n	800b110 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1a6:	691b      	ldr	r3, [r3, #16]
 800b1a8:	68fa      	ldr	r2, [r7, #12]
 800b1aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b1ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b1b2:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 800b1b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1b6:	2b01      	cmp	r3, #1
 800b1b8:	d111      	bne.n	800b1de <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1c0:	461a      	mov	r2, r3
 800b1c2:	4b20      	ldr	r3, [pc, #128]	; (800b244 <USB_DevInit+0x2dc>)
 800b1c4:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1ce:	68fa      	ldr	r2, [r7, #12]
 800b1d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b1d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b1d8:	f043 0303 	orr.w	r3, r3, #3
 800b1dc:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b1ea:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d105      	bne.n	800b1fe <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	699b      	ldr	r3, [r3, #24]
 800b1f6:	f043 0210 	orr.w	r2, r3, #16
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	699a      	ldr	r2, [r3, #24]
 800b202:	4b11      	ldr	r3, [pc, #68]	; (800b248 <USB_DevInit+0x2e0>)
 800b204:	4313      	orrs	r3, r2
 800b206:	687a      	ldr	r2, [r7, #4]
 800b208:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b20a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d005      	beq.n	800b21c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	699b      	ldr	r3, [r3, #24]
 800b214:	f043 0208 	orr.w	r2, r3, #8
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b21c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b21e:	2b01      	cmp	r3, #1
 800b220:	d107      	bne.n	800b232 <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	699b      	ldr	r3, [r3, #24]
 800b226:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b22a:	f043 0304 	orr.w	r3, r3, #4
 800b22e:	687a      	ldr	r2, [r7, #4]
 800b230:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b232:	7dfb      	ldrb	r3, [r7, #23]
}
 800b234:	4618      	mov	r0, r3
 800b236:	3718      	adds	r7, #24
 800b238:	46bd      	mov	sp, r7
 800b23a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b23e:	b004      	add	sp, #16
 800b240:	4770      	bx	lr
 800b242:	bf00      	nop
 800b244:	00800100 	.word	0x00800100
 800b248:	803c3800 	.word	0x803c3800

0800b24c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b24c:	b480      	push	{r7}
 800b24e:	b085      	sub	sp, #20
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
 800b254:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800b256:	2300      	movs	r3, #0
 800b258:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	019b      	lsls	r3, r3, #6
 800b25e:	f043 0220 	orr.w	r2, r3, #32
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	3301      	adds	r3, #1
 800b26a:	60fb      	str	r3, [r7, #12]
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	4a09      	ldr	r2, [pc, #36]	; (800b294 <USB_FlushTxFifo+0x48>)
 800b270:	4293      	cmp	r3, r2
 800b272:	d901      	bls.n	800b278 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800b274:	2303      	movs	r3, #3
 800b276:	e006      	b.n	800b286 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	691b      	ldr	r3, [r3, #16]
 800b27c:	f003 0320 	and.w	r3, r3, #32
 800b280:	2b20      	cmp	r3, #32
 800b282:	d0f0      	beq.n	800b266 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800b284:	2300      	movs	r3, #0
}
 800b286:	4618      	mov	r0, r3
 800b288:	3714      	adds	r7, #20
 800b28a:	46bd      	mov	sp, r7
 800b28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b290:	4770      	bx	lr
 800b292:	bf00      	nop
 800b294:	00030d40 	.word	0x00030d40

0800b298 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b298:	b480      	push	{r7}
 800b29a:	b085      	sub	sp, #20
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2210      	movs	r2, #16
 800b2a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	3301      	adds	r3, #1
 800b2ae:	60fb      	str	r3, [r7, #12]
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	4a09      	ldr	r2, [pc, #36]	; (800b2d8 <USB_FlushRxFifo+0x40>)
 800b2b4:	4293      	cmp	r3, r2
 800b2b6:	d901      	bls.n	800b2bc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800b2b8:	2303      	movs	r3, #3
 800b2ba:	e006      	b.n	800b2ca <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	691b      	ldr	r3, [r3, #16]
 800b2c0:	f003 0310 	and.w	r3, r3, #16
 800b2c4:	2b10      	cmp	r3, #16
 800b2c6:	d0f0      	beq.n	800b2aa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800b2c8:	2300      	movs	r3, #0
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	3714      	adds	r7, #20
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d4:	4770      	bx	lr
 800b2d6:	bf00      	nop
 800b2d8:	00030d40 	.word	0x00030d40

0800b2dc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b2dc:	b480      	push	{r7}
 800b2de:	b085      	sub	sp, #20
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
 800b2e4:	460b      	mov	r3, r1
 800b2e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2f2:	681a      	ldr	r2, [r3, #0]
 800b2f4:	78fb      	ldrb	r3, [r7, #3]
 800b2f6:	68f9      	ldr	r1, [r7, #12]
 800b2f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b2fc:	4313      	orrs	r3, r2
 800b2fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b300:	2300      	movs	r3, #0
}
 800b302:	4618      	mov	r0, r3
 800b304:	3714      	adds	r7, #20
 800b306:	46bd      	mov	sp, r7
 800b308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30c:	4770      	bx	lr

0800b30e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b30e:	b480      	push	{r7}
 800b310:	b087      	sub	sp, #28
 800b312:	af00      	add	r7, sp, #0
 800b314:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b31a:	693b      	ldr	r3, [r7, #16]
 800b31c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b320:	689b      	ldr	r3, [r3, #8]
 800b322:	f003 0306 	and.w	r3, r3, #6
 800b326:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d102      	bne.n	800b334 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b32e:	2300      	movs	r3, #0
 800b330:	75fb      	strb	r3, [r7, #23]
 800b332:	e00a      	b.n	800b34a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	2b02      	cmp	r3, #2
 800b338:	d002      	beq.n	800b340 <USB_GetDevSpeed+0x32>
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	2b06      	cmp	r3, #6
 800b33e:	d102      	bne.n	800b346 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b340:	2302      	movs	r3, #2
 800b342:	75fb      	strb	r3, [r7, #23]
 800b344:	e001      	b.n	800b34a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b346:	230f      	movs	r3, #15
 800b348:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b34a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	371c      	adds	r7, #28
 800b350:	46bd      	mov	sp, r7
 800b352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b356:	4770      	bx	lr

0800b358 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b358:	b480      	push	{r7}
 800b35a:	b085      	sub	sp, #20
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
 800b360:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	781b      	ldrb	r3, [r3, #0]
 800b36a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	785b      	ldrb	r3, [r3, #1]
 800b370:	2b01      	cmp	r3, #1
 800b372:	d13a      	bne.n	800b3ea <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b37a:	69da      	ldr	r2, [r3, #28]
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	781b      	ldrb	r3, [r3, #0]
 800b380:	f003 030f 	and.w	r3, r3, #15
 800b384:	2101      	movs	r1, #1
 800b386:	fa01 f303 	lsl.w	r3, r1, r3
 800b38a:	b29b      	uxth	r3, r3
 800b38c:	68f9      	ldr	r1, [r7, #12]
 800b38e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b392:	4313      	orrs	r3, r2
 800b394:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b396:	68bb      	ldr	r3, [r7, #8]
 800b398:	015a      	lsls	r2, r3, #5
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	4413      	add	r3, r2
 800b39e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d155      	bne.n	800b458 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b3ac:	68bb      	ldr	r3, [r7, #8]
 800b3ae:	015a      	lsls	r2, r3, #5
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	4413      	add	r3, r2
 800b3b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3b8:	681a      	ldr	r2, [r3, #0]
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	689b      	ldr	r3, [r3, #8]
 800b3be:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	78db      	ldrb	r3, [r3, #3]
 800b3c6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b3c8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	059b      	lsls	r3, r3, #22
 800b3ce:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b3d0:	4313      	orrs	r3, r2
 800b3d2:	68ba      	ldr	r2, [r7, #8]
 800b3d4:	0151      	lsls	r1, r2, #5
 800b3d6:	68fa      	ldr	r2, [r7, #12]
 800b3d8:	440a      	add	r2, r1
 800b3da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b3e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b3e6:	6013      	str	r3, [r2, #0]
 800b3e8:	e036      	b.n	800b458 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3f0:	69da      	ldr	r2, [r3, #28]
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	781b      	ldrb	r3, [r3, #0]
 800b3f6:	f003 030f 	and.w	r3, r3, #15
 800b3fa:	2101      	movs	r1, #1
 800b3fc:	fa01 f303 	lsl.w	r3, r1, r3
 800b400:	041b      	lsls	r3, r3, #16
 800b402:	68f9      	ldr	r1, [r7, #12]
 800b404:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b408:	4313      	orrs	r3, r2
 800b40a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b40c:	68bb      	ldr	r3, [r7, #8]
 800b40e:	015a      	lsls	r2, r3, #5
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	4413      	add	r3, r2
 800b414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d11a      	bne.n	800b458 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b422:	68bb      	ldr	r3, [r7, #8]
 800b424:	015a      	lsls	r2, r3, #5
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	4413      	add	r3, r2
 800b42a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b42e:	681a      	ldr	r2, [r3, #0]
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	689b      	ldr	r3, [r3, #8]
 800b434:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	78db      	ldrb	r3, [r3, #3]
 800b43c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b43e:	430b      	orrs	r3, r1
 800b440:	4313      	orrs	r3, r2
 800b442:	68ba      	ldr	r2, [r7, #8]
 800b444:	0151      	lsls	r1, r2, #5
 800b446:	68fa      	ldr	r2, [r7, #12]
 800b448:	440a      	add	r2, r1
 800b44a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b44e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b452:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b456:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b458:	2300      	movs	r3, #0
}
 800b45a:	4618      	mov	r0, r3
 800b45c:	3714      	adds	r7, #20
 800b45e:	46bd      	mov	sp, r7
 800b460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b464:	4770      	bx	lr
	...

0800b468 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b468:	b480      	push	{r7}
 800b46a:	b085      	sub	sp, #20
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
 800b470:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	781b      	ldrb	r3, [r3, #0]
 800b47a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	785b      	ldrb	r3, [r3, #1]
 800b480:	2b01      	cmp	r3, #1
 800b482:	d135      	bne.n	800b4f0 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b48a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	781b      	ldrb	r3, [r3, #0]
 800b490:	f003 030f 	and.w	r3, r3, #15
 800b494:	2101      	movs	r1, #1
 800b496:	fa01 f303 	lsl.w	r3, r1, r3
 800b49a:	b29b      	uxth	r3, r3
 800b49c:	43db      	mvns	r3, r3
 800b49e:	68f9      	ldr	r1, [r7, #12]
 800b4a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b4a4:	4013      	ands	r3, r2
 800b4a6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4ae:	69da      	ldr	r2, [r3, #28]
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	781b      	ldrb	r3, [r3, #0]
 800b4b4:	f003 030f 	and.w	r3, r3, #15
 800b4b8:	2101      	movs	r1, #1
 800b4ba:	fa01 f303 	lsl.w	r3, r1, r3
 800b4be:	b29b      	uxth	r3, r3
 800b4c0:	43db      	mvns	r3, r3
 800b4c2:	68f9      	ldr	r1, [r7, #12]
 800b4c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b4c8:	4013      	ands	r3, r2
 800b4ca:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b4cc:	68bb      	ldr	r3, [r7, #8]
 800b4ce:	015a      	lsls	r2, r3, #5
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	4413      	add	r3, r2
 800b4d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4d8:	681a      	ldr	r2, [r3, #0]
 800b4da:	68bb      	ldr	r3, [r7, #8]
 800b4dc:	0159      	lsls	r1, r3, #5
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	440b      	add	r3, r1
 800b4e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4e6:	4619      	mov	r1, r3
 800b4e8:	4b1f      	ldr	r3, [pc, #124]	; (800b568 <USB_DeactivateEndpoint+0x100>)
 800b4ea:	4013      	ands	r3, r2
 800b4ec:	600b      	str	r3, [r1, #0]
 800b4ee:	e034      	b.n	800b55a <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	781b      	ldrb	r3, [r3, #0]
 800b4fc:	f003 030f 	and.w	r3, r3, #15
 800b500:	2101      	movs	r1, #1
 800b502:	fa01 f303 	lsl.w	r3, r1, r3
 800b506:	041b      	lsls	r3, r3, #16
 800b508:	43db      	mvns	r3, r3
 800b50a:	68f9      	ldr	r1, [r7, #12]
 800b50c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b510:	4013      	ands	r3, r2
 800b512:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b51a:	69da      	ldr	r2, [r3, #28]
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	781b      	ldrb	r3, [r3, #0]
 800b520:	f003 030f 	and.w	r3, r3, #15
 800b524:	2101      	movs	r1, #1
 800b526:	fa01 f303 	lsl.w	r3, r1, r3
 800b52a:	041b      	lsls	r3, r3, #16
 800b52c:	43db      	mvns	r3, r3
 800b52e:	68f9      	ldr	r1, [r7, #12]
 800b530:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b534:	4013      	ands	r3, r2
 800b536:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b538:	68bb      	ldr	r3, [r7, #8]
 800b53a:	015a      	lsls	r2, r3, #5
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	4413      	add	r3, r2
 800b540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b544:	681a      	ldr	r2, [r3, #0]
 800b546:	68bb      	ldr	r3, [r7, #8]
 800b548:	0159      	lsls	r1, r3, #5
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	440b      	add	r3, r1
 800b54e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b552:	4619      	mov	r1, r3
 800b554:	4b05      	ldr	r3, [pc, #20]	; (800b56c <USB_DeactivateEndpoint+0x104>)
 800b556:	4013      	ands	r3, r2
 800b558:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b55a:	2300      	movs	r3, #0
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	3714      	adds	r7, #20
 800b560:	46bd      	mov	sp, r7
 800b562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b566:	4770      	bx	lr
 800b568:	ec337800 	.word	0xec337800
 800b56c:	eff37800 	.word	0xeff37800

0800b570 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b08a      	sub	sp, #40	; 0x28
 800b574:	af02      	add	r7, sp, #8
 800b576:	60f8      	str	r0, [r7, #12]
 800b578:	60b9      	str	r1, [r7, #8]
 800b57a:	4613      	mov	r3, r2
 800b57c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	781b      	ldrb	r3, [r3, #0]
 800b586:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	785b      	ldrb	r3, [r3, #1]
 800b58c:	2b01      	cmp	r3, #1
 800b58e:	f040 815c 	bne.w	800b84a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b592:	68bb      	ldr	r3, [r7, #8]
 800b594:	695b      	ldr	r3, [r3, #20]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d132      	bne.n	800b600 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b59a:	69bb      	ldr	r3, [r7, #24]
 800b59c:	015a      	lsls	r2, r3, #5
 800b59e:	69fb      	ldr	r3, [r7, #28]
 800b5a0:	4413      	add	r3, r2
 800b5a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5a6:	691b      	ldr	r3, [r3, #16]
 800b5a8:	69ba      	ldr	r2, [r7, #24]
 800b5aa:	0151      	lsls	r1, r2, #5
 800b5ac:	69fa      	ldr	r2, [r7, #28]
 800b5ae:	440a      	add	r2, r1
 800b5b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5b4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b5b8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b5bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b5be:	69bb      	ldr	r3, [r7, #24]
 800b5c0:	015a      	lsls	r2, r3, #5
 800b5c2:	69fb      	ldr	r3, [r7, #28]
 800b5c4:	4413      	add	r3, r2
 800b5c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5ca:	691b      	ldr	r3, [r3, #16]
 800b5cc:	69ba      	ldr	r2, [r7, #24]
 800b5ce:	0151      	lsls	r1, r2, #5
 800b5d0:	69fa      	ldr	r2, [r7, #28]
 800b5d2:	440a      	add	r2, r1
 800b5d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b5dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b5de:	69bb      	ldr	r3, [r7, #24]
 800b5e0:	015a      	lsls	r2, r3, #5
 800b5e2:	69fb      	ldr	r3, [r7, #28]
 800b5e4:	4413      	add	r3, r2
 800b5e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5ea:	691b      	ldr	r3, [r3, #16]
 800b5ec:	69ba      	ldr	r2, [r7, #24]
 800b5ee:	0151      	lsls	r1, r2, #5
 800b5f0:	69fa      	ldr	r2, [r7, #28]
 800b5f2:	440a      	add	r2, r1
 800b5f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5f8:	0cdb      	lsrs	r3, r3, #19
 800b5fa:	04db      	lsls	r3, r3, #19
 800b5fc:	6113      	str	r3, [r2, #16]
 800b5fe:	e074      	b.n	800b6ea <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b600:	69bb      	ldr	r3, [r7, #24]
 800b602:	015a      	lsls	r2, r3, #5
 800b604:	69fb      	ldr	r3, [r7, #28]
 800b606:	4413      	add	r3, r2
 800b608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b60c:	691b      	ldr	r3, [r3, #16]
 800b60e:	69ba      	ldr	r2, [r7, #24]
 800b610:	0151      	lsls	r1, r2, #5
 800b612:	69fa      	ldr	r2, [r7, #28]
 800b614:	440a      	add	r2, r1
 800b616:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b61a:	0cdb      	lsrs	r3, r3, #19
 800b61c:	04db      	lsls	r3, r3, #19
 800b61e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b620:	69bb      	ldr	r3, [r7, #24]
 800b622:	015a      	lsls	r2, r3, #5
 800b624:	69fb      	ldr	r3, [r7, #28]
 800b626:	4413      	add	r3, r2
 800b628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b62c:	691b      	ldr	r3, [r3, #16]
 800b62e:	69ba      	ldr	r2, [r7, #24]
 800b630:	0151      	lsls	r1, r2, #5
 800b632:	69fa      	ldr	r2, [r7, #28]
 800b634:	440a      	add	r2, r1
 800b636:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b63a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b63e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b642:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b644:	69bb      	ldr	r3, [r7, #24]
 800b646:	015a      	lsls	r2, r3, #5
 800b648:	69fb      	ldr	r3, [r7, #28]
 800b64a:	4413      	add	r3, r2
 800b64c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b650:	691a      	ldr	r2, [r3, #16]
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	6959      	ldr	r1, [r3, #20]
 800b656:	68bb      	ldr	r3, [r7, #8]
 800b658:	689b      	ldr	r3, [r3, #8]
 800b65a:	440b      	add	r3, r1
 800b65c:	1e59      	subs	r1, r3, #1
 800b65e:	68bb      	ldr	r3, [r7, #8]
 800b660:	689b      	ldr	r3, [r3, #8]
 800b662:	fbb1 f3f3 	udiv	r3, r1, r3
 800b666:	04d9      	lsls	r1, r3, #19
 800b668:	4b9d      	ldr	r3, [pc, #628]	; (800b8e0 <USB_EPStartXfer+0x370>)
 800b66a:	400b      	ands	r3, r1
 800b66c:	69b9      	ldr	r1, [r7, #24]
 800b66e:	0148      	lsls	r0, r1, #5
 800b670:	69f9      	ldr	r1, [r7, #28]
 800b672:	4401      	add	r1, r0
 800b674:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b678:	4313      	orrs	r3, r2
 800b67a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b67c:	69bb      	ldr	r3, [r7, #24]
 800b67e:	015a      	lsls	r2, r3, #5
 800b680:	69fb      	ldr	r3, [r7, #28]
 800b682:	4413      	add	r3, r2
 800b684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b688:	691a      	ldr	r2, [r3, #16]
 800b68a:	68bb      	ldr	r3, [r7, #8]
 800b68c:	695b      	ldr	r3, [r3, #20]
 800b68e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b692:	69b9      	ldr	r1, [r7, #24]
 800b694:	0148      	lsls	r0, r1, #5
 800b696:	69f9      	ldr	r1, [r7, #28]
 800b698:	4401      	add	r1, r0
 800b69a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b69e:	4313      	orrs	r3, r2
 800b6a0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b6a2:	68bb      	ldr	r3, [r7, #8]
 800b6a4:	78db      	ldrb	r3, [r3, #3]
 800b6a6:	2b01      	cmp	r3, #1
 800b6a8:	d11f      	bne.n	800b6ea <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b6aa:	69bb      	ldr	r3, [r7, #24]
 800b6ac:	015a      	lsls	r2, r3, #5
 800b6ae:	69fb      	ldr	r3, [r7, #28]
 800b6b0:	4413      	add	r3, r2
 800b6b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6b6:	691b      	ldr	r3, [r3, #16]
 800b6b8:	69ba      	ldr	r2, [r7, #24]
 800b6ba:	0151      	lsls	r1, r2, #5
 800b6bc:	69fa      	ldr	r2, [r7, #28]
 800b6be:	440a      	add	r2, r1
 800b6c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b6c4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b6c8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b6ca:	69bb      	ldr	r3, [r7, #24]
 800b6cc:	015a      	lsls	r2, r3, #5
 800b6ce:	69fb      	ldr	r3, [r7, #28]
 800b6d0:	4413      	add	r3, r2
 800b6d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6d6:	691b      	ldr	r3, [r3, #16]
 800b6d8:	69ba      	ldr	r2, [r7, #24]
 800b6da:	0151      	lsls	r1, r2, #5
 800b6dc:	69fa      	ldr	r2, [r7, #28]
 800b6de:	440a      	add	r2, r1
 800b6e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b6e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b6e8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b6ea:	79fb      	ldrb	r3, [r7, #7]
 800b6ec:	2b01      	cmp	r3, #1
 800b6ee:	d14b      	bne.n	800b788 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b6f0:	68bb      	ldr	r3, [r7, #8]
 800b6f2:	691b      	ldr	r3, [r3, #16]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d009      	beq.n	800b70c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b6f8:	69bb      	ldr	r3, [r7, #24]
 800b6fa:	015a      	lsls	r2, r3, #5
 800b6fc:	69fb      	ldr	r3, [r7, #28]
 800b6fe:	4413      	add	r3, r2
 800b700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b704:	461a      	mov	r2, r3
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	691b      	ldr	r3, [r3, #16]
 800b70a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	78db      	ldrb	r3, [r3, #3]
 800b710:	2b01      	cmp	r3, #1
 800b712:	d128      	bne.n	800b766 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b714:	69fb      	ldr	r3, [r7, #28]
 800b716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b71a:	689b      	ldr	r3, [r3, #8]
 800b71c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b720:	2b00      	cmp	r3, #0
 800b722:	d110      	bne.n	800b746 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b724:	69bb      	ldr	r3, [r7, #24]
 800b726:	015a      	lsls	r2, r3, #5
 800b728:	69fb      	ldr	r3, [r7, #28]
 800b72a:	4413      	add	r3, r2
 800b72c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	69ba      	ldr	r2, [r7, #24]
 800b734:	0151      	lsls	r1, r2, #5
 800b736:	69fa      	ldr	r2, [r7, #28]
 800b738:	440a      	add	r2, r1
 800b73a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b73e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b742:	6013      	str	r3, [r2, #0]
 800b744:	e00f      	b.n	800b766 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b746:	69bb      	ldr	r3, [r7, #24]
 800b748:	015a      	lsls	r2, r3, #5
 800b74a:	69fb      	ldr	r3, [r7, #28]
 800b74c:	4413      	add	r3, r2
 800b74e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	69ba      	ldr	r2, [r7, #24]
 800b756:	0151      	lsls	r1, r2, #5
 800b758:	69fa      	ldr	r2, [r7, #28]
 800b75a:	440a      	add	r2, r1
 800b75c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b764:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b766:	69bb      	ldr	r3, [r7, #24]
 800b768:	015a      	lsls	r2, r3, #5
 800b76a:	69fb      	ldr	r3, [r7, #28]
 800b76c:	4413      	add	r3, r2
 800b76e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	69ba      	ldr	r2, [r7, #24]
 800b776:	0151      	lsls	r1, r2, #5
 800b778:	69fa      	ldr	r2, [r7, #28]
 800b77a:	440a      	add	r2, r1
 800b77c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b780:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b784:	6013      	str	r3, [r2, #0]
 800b786:	e12f      	b.n	800b9e8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b788:	69bb      	ldr	r3, [r7, #24]
 800b78a:	015a      	lsls	r2, r3, #5
 800b78c:	69fb      	ldr	r3, [r7, #28]
 800b78e:	4413      	add	r3, r2
 800b790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	69ba      	ldr	r2, [r7, #24]
 800b798:	0151      	lsls	r1, r2, #5
 800b79a:	69fa      	ldr	r2, [r7, #28]
 800b79c:	440a      	add	r2, r1
 800b79e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b7a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b7a6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b7a8:	68bb      	ldr	r3, [r7, #8]
 800b7aa:	78db      	ldrb	r3, [r3, #3]
 800b7ac:	2b01      	cmp	r3, #1
 800b7ae:	d015      	beq.n	800b7dc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b7b0:	68bb      	ldr	r3, [r7, #8]
 800b7b2:	695b      	ldr	r3, [r3, #20]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	f000 8117 	beq.w	800b9e8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b7ba:	69fb      	ldr	r3, [r7, #28]
 800b7bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b7c2:	68bb      	ldr	r3, [r7, #8]
 800b7c4:	781b      	ldrb	r3, [r3, #0]
 800b7c6:	f003 030f 	and.w	r3, r3, #15
 800b7ca:	2101      	movs	r1, #1
 800b7cc:	fa01 f303 	lsl.w	r3, r1, r3
 800b7d0:	69f9      	ldr	r1, [r7, #28]
 800b7d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b7d6:	4313      	orrs	r3, r2
 800b7d8:	634b      	str	r3, [r1, #52]	; 0x34
 800b7da:	e105      	b.n	800b9e8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b7dc:	69fb      	ldr	r3, [r7, #28]
 800b7de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7e2:	689b      	ldr	r3, [r3, #8]
 800b7e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d110      	bne.n	800b80e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b7ec:	69bb      	ldr	r3, [r7, #24]
 800b7ee:	015a      	lsls	r2, r3, #5
 800b7f0:	69fb      	ldr	r3, [r7, #28]
 800b7f2:	4413      	add	r3, r2
 800b7f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	69ba      	ldr	r2, [r7, #24]
 800b7fc:	0151      	lsls	r1, r2, #5
 800b7fe:	69fa      	ldr	r2, [r7, #28]
 800b800:	440a      	add	r2, r1
 800b802:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b806:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b80a:	6013      	str	r3, [r2, #0]
 800b80c:	e00f      	b.n	800b82e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b80e:	69bb      	ldr	r3, [r7, #24]
 800b810:	015a      	lsls	r2, r3, #5
 800b812:	69fb      	ldr	r3, [r7, #28]
 800b814:	4413      	add	r3, r2
 800b816:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	69ba      	ldr	r2, [r7, #24]
 800b81e:	0151      	lsls	r1, r2, #5
 800b820:	69fa      	ldr	r2, [r7, #28]
 800b822:	440a      	add	r2, r1
 800b824:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b82c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b82e:	68bb      	ldr	r3, [r7, #8]
 800b830:	68d9      	ldr	r1, [r3, #12]
 800b832:	68bb      	ldr	r3, [r7, #8]
 800b834:	781a      	ldrb	r2, [r3, #0]
 800b836:	68bb      	ldr	r3, [r7, #8]
 800b838:	695b      	ldr	r3, [r3, #20]
 800b83a:	b298      	uxth	r0, r3
 800b83c:	79fb      	ldrb	r3, [r7, #7]
 800b83e:	9300      	str	r3, [sp, #0]
 800b840:	4603      	mov	r3, r0
 800b842:	68f8      	ldr	r0, [r7, #12]
 800b844:	f000 fa2b 	bl	800bc9e <USB_WritePacket>
 800b848:	e0ce      	b.n	800b9e8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b84a:	69bb      	ldr	r3, [r7, #24]
 800b84c:	015a      	lsls	r2, r3, #5
 800b84e:	69fb      	ldr	r3, [r7, #28]
 800b850:	4413      	add	r3, r2
 800b852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b856:	691b      	ldr	r3, [r3, #16]
 800b858:	69ba      	ldr	r2, [r7, #24]
 800b85a:	0151      	lsls	r1, r2, #5
 800b85c:	69fa      	ldr	r2, [r7, #28]
 800b85e:	440a      	add	r2, r1
 800b860:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b864:	0cdb      	lsrs	r3, r3, #19
 800b866:	04db      	lsls	r3, r3, #19
 800b868:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b86a:	69bb      	ldr	r3, [r7, #24]
 800b86c:	015a      	lsls	r2, r3, #5
 800b86e:	69fb      	ldr	r3, [r7, #28]
 800b870:	4413      	add	r3, r2
 800b872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b876:	691b      	ldr	r3, [r3, #16]
 800b878:	69ba      	ldr	r2, [r7, #24]
 800b87a:	0151      	lsls	r1, r2, #5
 800b87c:	69fa      	ldr	r2, [r7, #28]
 800b87e:	440a      	add	r2, r1
 800b880:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b884:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b888:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b88c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800b88e:	68bb      	ldr	r3, [r7, #8]
 800b890:	695b      	ldr	r3, [r3, #20]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d126      	bne.n	800b8e4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b896:	69bb      	ldr	r3, [r7, #24]
 800b898:	015a      	lsls	r2, r3, #5
 800b89a:	69fb      	ldr	r3, [r7, #28]
 800b89c:	4413      	add	r3, r2
 800b89e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8a2:	691a      	ldr	r2, [r3, #16]
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	689b      	ldr	r3, [r3, #8]
 800b8a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b8ac:	69b9      	ldr	r1, [r7, #24]
 800b8ae:	0148      	lsls	r0, r1, #5
 800b8b0:	69f9      	ldr	r1, [r7, #28]
 800b8b2:	4401      	add	r1, r0
 800b8b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b8b8:	4313      	orrs	r3, r2
 800b8ba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b8bc:	69bb      	ldr	r3, [r7, #24]
 800b8be:	015a      	lsls	r2, r3, #5
 800b8c0:	69fb      	ldr	r3, [r7, #28]
 800b8c2:	4413      	add	r3, r2
 800b8c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8c8:	691b      	ldr	r3, [r3, #16]
 800b8ca:	69ba      	ldr	r2, [r7, #24]
 800b8cc:	0151      	lsls	r1, r2, #5
 800b8ce:	69fa      	ldr	r2, [r7, #28]
 800b8d0:	440a      	add	r2, r1
 800b8d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b8d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b8da:	6113      	str	r3, [r2, #16]
 800b8dc:	e036      	b.n	800b94c <USB_EPStartXfer+0x3dc>
 800b8de:	bf00      	nop
 800b8e0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b8e4:	68bb      	ldr	r3, [r7, #8]
 800b8e6:	695a      	ldr	r2, [r3, #20]
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	689b      	ldr	r3, [r3, #8]
 800b8ec:	4413      	add	r3, r2
 800b8ee:	1e5a      	subs	r2, r3, #1
 800b8f0:	68bb      	ldr	r3, [r7, #8]
 800b8f2:	689b      	ldr	r3, [r3, #8]
 800b8f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8f8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b8fa:	69bb      	ldr	r3, [r7, #24]
 800b8fc:	015a      	lsls	r2, r3, #5
 800b8fe:	69fb      	ldr	r3, [r7, #28]
 800b900:	4413      	add	r3, r2
 800b902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b906:	691a      	ldr	r2, [r3, #16]
 800b908:	8afb      	ldrh	r3, [r7, #22]
 800b90a:	04d9      	lsls	r1, r3, #19
 800b90c:	4b39      	ldr	r3, [pc, #228]	; (800b9f4 <USB_EPStartXfer+0x484>)
 800b90e:	400b      	ands	r3, r1
 800b910:	69b9      	ldr	r1, [r7, #24]
 800b912:	0148      	lsls	r0, r1, #5
 800b914:	69f9      	ldr	r1, [r7, #28]
 800b916:	4401      	add	r1, r0
 800b918:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b91c:	4313      	orrs	r3, r2
 800b91e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800b920:	69bb      	ldr	r3, [r7, #24]
 800b922:	015a      	lsls	r2, r3, #5
 800b924:	69fb      	ldr	r3, [r7, #28]
 800b926:	4413      	add	r3, r2
 800b928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b92c:	691a      	ldr	r2, [r3, #16]
 800b92e:	68bb      	ldr	r3, [r7, #8]
 800b930:	689b      	ldr	r3, [r3, #8]
 800b932:	8af9      	ldrh	r1, [r7, #22]
 800b934:	fb01 f303 	mul.w	r3, r1, r3
 800b938:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b93c:	69b9      	ldr	r1, [r7, #24]
 800b93e:	0148      	lsls	r0, r1, #5
 800b940:	69f9      	ldr	r1, [r7, #28]
 800b942:	4401      	add	r1, r0
 800b944:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b948:	4313      	orrs	r3, r2
 800b94a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b94c:	79fb      	ldrb	r3, [r7, #7]
 800b94e:	2b01      	cmp	r3, #1
 800b950:	d10d      	bne.n	800b96e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b952:	68bb      	ldr	r3, [r7, #8]
 800b954:	68db      	ldr	r3, [r3, #12]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d009      	beq.n	800b96e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b95a:	68bb      	ldr	r3, [r7, #8]
 800b95c:	68d9      	ldr	r1, [r3, #12]
 800b95e:	69bb      	ldr	r3, [r7, #24]
 800b960:	015a      	lsls	r2, r3, #5
 800b962:	69fb      	ldr	r3, [r7, #28]
 800b964:	4413      	add	r3, r2
 800b966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b96a:	460a      	mov	r2, r1
 800b96c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b96e:	68bb      	ldr	r3, [r7, #8]
 800b970:	78db      	ldrb	r3, [r3, #3]
 800b972:	2b01      	cmp	r3, #1
 800b974:	d128      	bne.n	800b9c8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b976:	69fb      	ldr	r3, [r7, #28]
 800b978:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b97c:	689b      	ldr	r3, [r3, #8]
 800b97e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b982:	2b00      	cmp	r3, #0
 800b984:	d110      	bne.n	800b9a8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b986:	69bb      	ldr	r3, [r7, #24]
 800b988:	015a      	lsls	r2, r3, #5
 800b98a:	69fb      	ldr	r3, [r7, #28]
 800b98c:	4413      	add	r3, r2
 800b98e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	69ba      	ldr	r2, [r7, #24]
 800b996:	0151      	lsls	r1, r2, #5
 800b998:	69fa      	ldr	r2, [r7, #28]
 800b99a:	440a      	add	r2, r1
 800b99c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b9a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b9a4:	6013      	str	r3, [r2, #0]
 800b9a6:	e00f      	b.n	800b9c8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b9a8:	69bb      	ldr	r3, [r7, #24]
 800b9aa:	015a      	lsls	r2, r3, #5
 800b9ac:	69fb      	ldr	r3, [r7, #28]
 800b9ae:	4413      	add	r3, r2
 800b9b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	69ba      	ldr	r2, [r7, #24]
 800b9b8:	0151      	lsls	r1, r2, #5
 800b9ba:	69fa      	ldr	r2, [r7, #28]
 800b9bc:	440a      	add	r2, r1
 800b9be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b9c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b9c6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b9c8:	69bb      	ldr	r3, [r7, #24]
 800b9ca:	015a      	lsls	r2, r3, #5
 800b9cc:	69fb      	ldr	r3, [r7, #28]
 800b9ce:	4413      	add	r3, r2
 800b9d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	69ba      	ldr	r2, [r7, #24]
 800b9d8:	0151      	lsls	r1, r2, #5
 800b9da:	69fa      	ldr	r2, [r7, #28]
 800b9dc:	440a      	add	r2, r1
 800b9de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b9e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b9e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b9e8:	2300      	movs	r3, #0
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	3720      	adds	r7, #32
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}
 800b9f2:	bf00      	nop
 800b9f4:	1ff80000 	.word	0x1ff80000

0800b9f8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b9f8:	b480      	push	{r7}
 800b9fa:	b087      	sub	sp, #28
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	60f8      	str	r0, [r7, #12]
 800ba00:	60b9      	str	r1, [r7, #8]
 800ba02:	4613      	mov	r3, r2
 800ba04:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800ba0a:	68bb      	ldr	r3, [r7, #8]
 800ba0c:	781b      	ldrb	r3, [r3, #0]
 800ba0e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ba10:	68bb      	ldr	r3, [r7, #8]
 800ba12:	785b      	ldrb	r3, [r3, #1]
 800ba14:	2b01      	cmp	r3, #1
 800ba16:	f040 80cd 	bne.w	800bbb4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	695b      	ldr	r3, [r3, #20]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d132      	bne.n	800ba88 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ba22:	693b      	ldr	r3, [r7, #16]
 800ba24:	015a      	lsls	r2, r3, #5
 800ba26:	697b      	ldr	r3, [r7, #20]
 800ba28:	4413      	add	r3, r2
 800ba2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba2e:	691b      	ldr	r3, [r3, #16]
 800ba30:	693a      	ldr	r2, [r7, #16]
 800ba32:	0151      	lsls	r1, r2, #5
 800ba34:	697a      	ldr	r2, [r7, #20]
 800ba36:	440a      	add	r2, r1
 800ba38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba3c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ba40:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ba44:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ba46:	693b      	ldr	r3, [r7, #16]
 800ba48:	015a      	lsls	r2, r3, #5
 800ba4a:	697b      	ldr	r3, [r7, #20]
 800ba4c:	4413      	add	r3, r2
 800ba4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba52:	691b      	ldr	r3, [r3, #16]
 800ba54:	693a      	ldr	r2, [r7, #16]
 800ba56:	0151      	lsls	r1, r2, #5
 800ba58:	697a      	ldr	r2, [r7, #20]
 800ba5a:	440a      	add	r2, r1
 800ba5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ba64:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ba66:	693b      	ldr	r3, [r7, #16]
 800ba68:	015a      	lsls	r2, r3, #5
 800ba6a:	697b      	ldr	r3, [r7, #20]
 800ba6c:	4413      	add	r3, r2
 800ba6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba72:	691b      	ldr	r3, [r3, #16]
 800ba74:	693a      	ldr	r2, [r7, #16]
 800ba76:	0151      	lsls	r1, r2, #5
 800ba78:	697a      	ldr	r2, [r7, #20]
 800ba7a:	440a      	add	r2, r1
 800ba7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba80:	0cdb      	lsrs	r3, r3, #19
 800ba82:	04db      	lsls	r3, r3, #19
 800ba84:	6113      	str	r3, [r2, #16]
 800ba86:	e04e      	b.n	800bb26 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ba88:	693b      	ldr	r3, [r7, #16]
 800ba8a:	015a      	lsls	r2, r3, #5
 800ba8c:	697b      	ldr	r3, [r7, #20]
 800ba8e:	4413      	add	r3, r2
 800ba90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba94:	691b      	ldr	r3, [r3, #16]
 800ba96:	693a      	ldr	r2, [r7, #16]
 800ba98:	0151      	lsls	r1, r2, #5
 800ba9a:	697a      	ldr	r2, [r7, #20]
 800ba9c:	440a      	add	r2, r1
 800ba9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800baa2:	0cdb      	lsrs	r3, r3, #19
 800baa4:	04db      	lsls	r3, r3, #19
 800baa6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800baa8:	693b      	ldr	r3, [r7, #16]
 800baaa:	015a      	lsls	r2, r3, #5
 800baac:	697b      	ldr	r3, [r7, #20]
 800baae:	4413      	add	r3, r2
 800bab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bab4:	691b      	ldr	r3, [r3, #16]
 800bab6:	693a      	ldr	r2, [r7, #16]
 800bab8:	0151      	lsls	r1, r2, #5
 800baba:	697a      	ldr	r2, [r7, #20]
 800babc:	440a      	add	r2, r1
 800babe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bac2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bac6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800baca:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	695a      	ldr	r2, [r3, #20]
 800bad0:	68bb      	ldr	r3, [r7, #8]
 800bad2:	689b      	ldr	r3, [r3, #8]
 800bad4:	429a      	cmp	r2, r3
 800bad6:	d903      	bls.n	800bae0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	689a      	ldr	r2, [r3, #8]
 800badc:	68bb      	ldr	r3, [r7, #8]
 800bade:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bae0:	693b      	ldr	r3, [r7, #16]
 800bae2:	015a      	lsls	r2, r3, #5
 800bae4:	697b      	ldr	r3, [r7, #20]
 800bae6:	4413      	add	r3, r2
 800bae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800baec:	691b      	ldr	r3, [r3, #16]
 800baee:	693a      	ldr	r2, [r7, #16]
 800baf0:	0151      	lsls	r1, r2, #5
 800baf2:	697a      	ldr	r2, [r7, #20]
 800baf4:	440a      	add	r2, r1
 800baf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bafa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bafe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800bb00:	693b      	ldr	r3, [r7, #16]
 800bb02:	015a      	lsls	r2, r3, #5
 800bb04:	697b      	ldr	r3, [r7, #20]
 800bb06:	4413      	add	r3, r2
 800bb08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb0c:	691a      	ldr	r2, [r3, #16]
 800bb0e:	68bb      	ldr	r3, [r7, #8]
 800bb10:	695b      	ldr	r3, [r3, #20]
 800bb12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bb16:	6939      	ldr	r1, [r7, #16]
 800bb18:	0148      	lsls	r0, r1, #5
 800bb1a:	6979      	ldr	r1, [r7, #20]
 800bb1c:	4401      	add	r1, r0
 800bb1e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bb22:	4313      	orrs	r3, r2
 800bb24:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800bb26:	79fb      	ldrb	r3, [r7, #7]
 800bb28:	2b01      	cmp	r3, #1
 800bb2a:	d11e      	bne.n	800bb6a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800bb2c:	68bb      	ldr	r3, [r7, #8]
 800bb2e:	691b      	ldr	r3, [r3, #16]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d009      	beq.n	800bb48 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800bb34:	693b      	ldr	r3, [r7, #16]
 800bb36:	015a      	lsls	r2, r3, #5
 800bb38:	697b      	ldr	r3, [r7, #20]
 800bb3a:	4413      	add	r3, r2
 800bb3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb40:	461a      	mov	r2, r3
 800bb42:	68bb      	ldr	r3, [r7, #8]
 800bb44:	691b      	ldr	r3, [r3, #16]
 800bb46:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bb48:	693b      	ldr	r3, [r7, #16]
 800bb4a:	015a      	lsls	r2, r3, #5
 800bb4c:	697b      	ldr	r3, [r7, #20]
 800bb4e:	4413      	add	r3, r2
 800bb50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	693a      	ldr	r2, [r7, #16]
 800bb58:	0151      	lsls	r1, r2, #5
 800bb5a:	697a      	ldr	r2, [r7, #20]
 800bb5c:	440a      	add	r2, r1
 800bb5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb62:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bb66:	6013      	str	r3, [r2, #0]
 800bb68:	e092      	b.n	800bc90 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bb6a:	693b      	ldr	r3, [r7, #16]
 800bb6c:	015a      	lsls	r2, r3, #5
 800bb6e:	697b      	ldr	r3, [r7, #20]
 800bb70:	4413      	add	r3, r2
 800bb72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	693a      	ldr	r2, [r7, #16]
 800bb7a:	0151      	lsls	r1, r2, #5
 800bb7c:	697a      	ldr	r2, [r7, #20]
 800bb7e:	440a      	add	r2, r1
 800bb80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb84:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bb88:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800bb8a:	68bb      	ldr	r3, [r7, #8]
 800bb8c:	695b      	ldr	r3, [r3, #20]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d07e      	beq.n	800bc90 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800bb92:	697b      	ldr	r3, [r7, #20]
 800bb94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	781b      	ldrb	r3, [r3, #0]
 800bb9e:	f003 030f 	and.w	r3, r3, #15
 800bba2:	2101      	movs	r1, #1
 800bba4:	fa01 f303 	lsl.w	r3, r1, r3
 800bba8:	6979      	ldr	r1, [r7, #20]
 800bbaa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bbae:	4313      	orrs	r3, r2
 800bbb0:	634b      	str	r3, [r1, #52]	; 0x34
 800bbb2:	e06d      	b.n	800bc90 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	015a      	lsls	r2, r3, #5
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	4413      	add	r3, r2
 800bbbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbc0:	691b      	ldr	r3, [r3, #16]
 800bbc2:	693a      	ldr	r2, [r7, #16]
 800bbc4:	0151      	lsls	r1, r2, #5
 800bbc6:	697a      	ldr	r2, [r7, #20]
 800bbc8:	440a      	add	r2, r1
 800bbca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bbce:	0cdb      	lsrs	r3, r3, #19
 800bbd0:	04db      	lsls	r3, r3, #19
 800bbd2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800bbd4:	693b      	ldr	r3, [r7, #16]
 800bbd6:	015a      	lsls	r2, r3, #5
 800bbd8:	697b      	ldr	r3, [r7, #20]
 800bbda:	4413      	add	r3, r2
 800bbdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbe0:	691b      	ldr	r3, [r3, #16]
 800bbe2:	693a      	ldr	r2, [r7, #16]
 800bbe4:	0151      	lsls	r1, r2, #5
 800bbe6:	697a      	ldr	r2, [r7, #20]
 800bbe8:	440a      	add	r2, r1
 800bbea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bbee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bbf2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bbf6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	695b      	ldr	r3, [r3, #20]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d003      	beq.n	800bc08 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800bc00:	68bb      	ldr	r3, [r7, #8]
 800bc02:	689a      	ldr	r2, [r3, #8]
 800bc04:	68bb      	ldr	r3, [r7, #8]
 800bc06:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bc08:	693b      	ldr	r3, [r7, #16]
 800bc0a:	015a      	lsls	r2, r3, #5
 800bc0c:	697b      	ldr	r3, [r7, #20]
 800bc0e:	4413      	add	r3, r2
 800bc10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc14:	691b      	ldr	r3, [r3, #16]
 800bc16:	693a      	ldr	r2, [r7, #16]
 800bc18:	0151      	lsls	r1, r2, #5
 800bc1a:	697a      	ldr	r2, [r7, #20]
 800bc1c:	440a      	add	r2, r1
 800bc1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bc22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bc26:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800bc28:	693b      	ldr	r3, [r7, #16]
 800bc2a:	015a      	lsls	r2, r3, #5
 800bc2c:	697b      	ldr	r3, [r7, #20]
 800bc2e:	4413      	add	r3, r2
 800bc30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc34:	691a      	ldr	r2, [r3, #16]
 800bc36:	68bb      	ldr	r3, [r7, #8]
 800bc38:	689b      	ldr	r3, [r3, #8]
 800bc3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bc3e:	6939      	ldr	r1, [r7, #16]
 800bc40:	0148      	lsls	r0, r1, #5
 800bc42:	6979      	ldr	r1, [r7, #20]
 800bc44:	4401      	add	r1, r0
 800bc46:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bc4a:	4313      	orrs	r3, r2
 800bc4c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800bc4e:	79fb      	ldrb	r3, [r7, #7]
 800bc50:	2b01      	cmp	r3, #1
 800bc52:	d10d      	bne.n	800bc70 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	68db      	ldr	r3, [r3, #12]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d009      	beq.n	800bc70 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	68d9      	ldr	r1, [r3, #12]
 800bc60:	693b      	ldr	r3, [r7, #16]
 800bc62:	015a      	lsls	r2, r3, #5
 800bc64:	697b      	ldr	r3, [r7, #20]
 800bc66:	4413      	add	r3, r2
 800bc68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc6c:	460a      	mov	r2, r1
 800bc6e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800bc70:	693b      	ldr	r3, [r7, #16]
 800bc72:	015a      	lsls	r2, r3, #5
 800bc74:	697b      	ldr	r3, [r7, #20]
 800bc76:	4413      	add	r3, r2
 800bc78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	693a      	ldr	r2, [r7, #16]
 800bc80:	0151      	lsls	r1, r2, #5
 800bc82:	697a      	ldr	r2, [r7, #20]
 800bc84:	440a      	add	r2, r1
 800bc86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bc8a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bc8e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bc90:	2300      	movs	r3, #0
}
 800bc92:	4618      	mov	r0, r3
 800bc94:	371c      	adds	r7, #28
 800bc96:	46bd      	mov	sp, r7
 800bc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9c:	4770      	bx	lr

0800bc9e <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800bc9e:	b480      	push	{r7}
 800bca0:	b089      	sub	sp, #36	; 0x24
 800bca2:	af00      	add	r7, sp, #0
 800bca4:	60f8      	str	r0, [r7, #12]
 800bca6:	60b9      	str	r1, [r7, #8]
 800bca8:	4611      	mov	r1, r2
 800bcaa:	461a      	mov	r2, r3
 800bcac:	460b      	mov	r3, r1
 800bcae:	71fb      	strb	r3, [r7, #7]
 800bcb0:	4613      	mov	r3, r2
 800bcb2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800bcbc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d11a      	bne.n	800bcfa <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800bcc4:	88bb      	ldrh	r3, [r7, #4]
 800bcc6:	3303      	adds	r3, #3
 800bcc8:	089b      	lsrs	r3, r3, #2
 800bcca:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800bccc:	2300      	movs	r3, #0
 800bcce:	61bb      	str	r3, [r7, #24]
 800bcd0:	e00f      	b.n	800bcf2 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800bcd2:	79fb      	ldrb	r3, [r7, #7]
 800bcd4:	031a      	lsls	r2, r3, #12
 800bcd6:	697b      	ldr	r3, [r7, #20]
 800bcd8:	4413      	add	r3, r2
 800bcda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bcde:	461a      	mov	r2, r3
 800bce0:	69fb      	ldr	r3, [r7, #28]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	6013      	str	r3, [r2, #0]
      pSrc++;
 800bce6:	69fb      	ldr	r3, [r7, #28]
 800bce8:	3304      	adds	r3, #4
 800bcea:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800bcec:	69bb      	ldr	r3, [r7, #24]
 800bcee:	3301      	adds	r3, #1
 800bcf0:	61bb      	str	r3, [r7, #24]
 800bcf2:	69ba      	ldr	r2, [r7, #24]
 800bcf4:	693b      	ldr	r3, [r7, #16]
 800bcf6:	429a      	cmp	r2, r3
 800bcf8:	d3eb      	bcc.n	800bcd2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800bcfa:	2300      	movs	r3, #0
}
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	3724      	adds	r7, #36	; 0x24
 800bd00:	46bd      	mov	sp, r7
 800bd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd06:	4770      	bx	lr

0800bd08 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800bd08:	b480      	push	{r7}
 800bd0a:	b089      	sub	sp, #36	; 0x24
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	60f8      	str	r0, [r7, #12]
 800bd10:	60b9      	str	r1, [r7, #8]
 800bd12:	4613      	mov	r3, r2
 800bd14:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800bd1a:	68bb      	ldr	r3, [r7, #8]
 800bd1c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800bd1e:	88fb      	ldrh	r3, [r7, #6]
 800bd20:	3303      	adds	r3, #3
 800bd22:	089b      	lsrs	r3, r3, #2
 800bd24:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800bd26:	2300      	movs	r3, #0
 800bd28:	61bb      	str	r3, [r7, #24]
 800bd2a:	e00b      	b.n	800bd44 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800bd2c:	697b      	ldr	r3, [r7, #20]
 800bd2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd32:	681a      	ldr	r2, [r3, #0]
 800bd34:	69fb      	ldr	r3, [r7, #28]
 800bd36:	601a      	str	r2, [r3, #0]
    pDest++;
 800bd38:	69fb      	ldr	r3, [r7, #28]
 800bd3a:	3304      	adds	r3, #4
 800bd3c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800bd3e:	69bb      	ldr	r3, [r7, #24]
 800bd40:	3301      	adds	r3, #1
 800bd42:	61bb      	str	r3, [r7, #24]
 800bd44:	69ba      	ldr	r2, [r7, #24]
 800bd46:	693b      	ldr	r3, [r7, #16]
 800bd48:	429a      	cmp	r2, r3
 800bd4a:	d3ef      	bcc.n	800bd2c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800bd4c:	69fb      	ldr	r3, [r7, #28]
}
 800bd4e:	4618      	mov	r0, r3
 800bd50:	3724      	adds	r7, #36	; 0x24
 800bd52:	46bd      	mov	sp, r7
 800bd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd58:	4770      	bx	lr

0800bd5a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bd5a:	b480      	push	{r7}
 800bd5c:	b085      	sub	sp, #20
 800bd5e:	af00      	add	r7, sp, #0
 800bd60:	6078      	str	r0, [r7, #4]
 800bd62:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	781b      	ldrb	r3, [r3, #0]
 800bd6c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	785b      	ldrb	r3, [r3, #1]
 800bd72:	2b01      	cmp	r3, #1
 800bd74:	d12c      	bne.n	800bdd0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	015a      	lsls	r2, r3, #5
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	4413      	add	r3, r2
 800bd7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	db12      	blt.n	800bdae <USB_EPSetStall+0x54>
 800bd88:	68bb      	ldr	r3, [r7, #8]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d00f      	beq.n	800bdae <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800bd8e:	68bb      	ldr	r3, [r7, #8]
 800bd90:	015a      	lsls	r2, r3, #5
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	4413      	add	r3, r2
 800bd96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	68ba      	ldr	r2, [r7, #8]
 800bd9e:	0151      	lsls	r1, r2, #5
 800bda0:	68fa      	ldr	r2, [r7, #12]
 800bda2:	440a      	add	r2, r1
 800bda4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bda8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bdac:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800bdae:	68bb      	ldr	r3, [r7, #8]
 800bdb0:	015a      	lsls	r2, r3, #5
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	4413      	add	r3, r2
 800bdb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	68ba      	ldr	r2, [r7, #8]
 800bdbe:	0151      	lsls	r1, r2, #5
 800bdc0:	68fa      	ldr	r2, [r7, #12]
 800bdc2:	440a      	add	r2, r1
 800bdc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bdc8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bdcc:	6013      	str	r3, [r2, #0]
 800bdce:	e02b      	b.n	800be28 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bdd0:	68bb      	ldr	r3, [r7, #8]
 800bdd2:	015a      	lsls	r2, r3, #5
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	4413      	add	r3, r2
 800bdd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	db12      	blt.n	800be08 <USB_EPSetStall+0xae>
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d00f      	beq.n	800be08 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	015a      	lsls	r2, r3, #5
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	4413      	add	r3, r2
 800bdf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	68ba      	ldr	r2, [r7, #8]
 800bdf8:	0151      	lsls	r1, r2, #5
 800bdfa:	68fa      	ldr	r2, [r7, #12]
 800bdfc:	440a      	add	r2, r1
 800bdfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be02:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800be06:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	015a      	lsls	r2, r3, #5
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	4413      	add	r3, r2
 800be10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	68ba      	ldr	r2, [r7, #8]
 800be18:	0151      	lsls	r1, r2, #5
 800be1a:	68fa      	ldr	r2, [r7, #12]
 800be1c:	440a      	add	r2, r1
 800be1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800be26:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800be28:	2300      	movs	r3, #0
}
 800be2a:	4618      	mov	r0, r3
 800be2c:	3714      	adds	r7, #20
 800be2e:	46bd      	mov	sp, r7
 800be30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be34:	4770      	bx	lr

0800be36 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800be36:	b480      	push	{r7}
 800be38:	b085      	sub	sp, #20
 800be3a:	af00      	add	r7, sp, #0
 800be3c:	6078      	str	r0, [r7, #4]
 800be3e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	781b      	ldrb	r3, [r3, #0]
 800be48:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	785b      	ldrb	r3, [r3, #1]
 800be4e:	2b01      	cmp	r3, #1
 800be50:	d128      	bne.n	800bea4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800be52:	68bb      	ldr	r3, [r7, #8]
 800be54:	015a      	lsls	r2, r3, #5
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	4413      	add	r3, r2
 800be5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	68ba      	ldr	r2, [r7, #8]
 800be62:	0151      	lsls	r1, r2, #5
 800be64:	68fa      	ldr	r2, [r7, #12]
 800be66:	440a      	add	r2, r1
 800be68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be6c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800be70:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	78db      	ldrb	r3, [r3, #3]
 800be76:	2b03      	cmp	r3, #3
 800be78:	d003      	beq.n	800be82 <USB_EPClearStall+0x4c>
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	78db      	ldrb	r3, [r3, #3]
 800be7e:	2b02      	cmp	r3, #2
 800be80:	d138      	bne.n	800bef4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800be82:	68bb      	ldr	r3, [r7, #8]
 800be84:	015a      	lsls	r2, r3, #5
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	4413      	add	r3, r2
 800be8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	68ba      	ldr	r2, [r7, #8]
 800be92:	0151      	lsls	r1, r2, #5
 800be94:	68fa      	ldr	r2, [r7, #12]
 800be96:	440a      	add	r2, r1
 800be98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bea0:	6013      	str	r3, [r2, #0]
 800bea2:	e027      	b.n	800bef4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800bea4:	68bb      	ldr	r3, [r7, #8]
 800bea6:	015a      	lsls	r2, r3, #5
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	4413      	add	r3, r2
 800beac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	68ba      	ldr	r2, [r7, #8]
 800beb4:	0151      	lsls	r1, r2, #5
 800beb6:	68fa      	ldr	r2, [r7, #12]
 800beb8:	440a      	add	r2, r1
 800beba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bebe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bec2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bec4:	683b      	ldr	r3, [r7, #0]
 800bec6:	78db      	ldrb	r3, [r3, #3]
 800bec8:	2b03      	cmp	r3, #3
 800beca:	d003      	beq.n	800bed4 <USB_EPClearStall+0x9e>
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	78db      	ldrb	r3, [r3, #3]
 800bed0:	2b02      	cmp	r3, #2
 800bed2:	d10f      	bne.n	800bef4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bed4:	68bb      	ldr	r3, [r7, #8]
 800bed6:	015a      	lsls	r2, r3, #5
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	4413      	add	r3, r2
 800bedc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	68ba      	ldr	r2, [r7, #8]
 800bee4:	0151      	lsls	r1, r2, #5
 800bee6:	68fa      	ldr	r2, [r7, #12]
 800bee8:	440a      	add	r2, r1
 800beea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800beee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bef2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800bef4:	2300      	movs	r3, #0
}
 800bef6:	4618      	mov	r0, r3
 800bef8:	3714      	adds	r7, #20
 800befa:	46bd      	mov	sp, r7
 800befc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf00:	4770      	bx	lr

0800bf02 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800bf02:	b480      	push	{r7}
 800bf04:	b085      	sub	sp, #20
 800bf06:	af00      	add	r7, sp, #0
 800bf08:	6078      	str	r0, [r7, #4]
 800bf0a:	460b      	mov	r3, r1
 800bf0c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	68fa      	ldr	r2, [r7, #12]
 800bf1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bf20:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800bf24:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf2c:	681a      	ldr	r2, [r3, #0]
 800bf2e:	78fb      	ldrb	r3, [r7, #3]
 800bf30:	011b      	lsls	r3, r3, #4
 800bf32:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800bf36:	68f9      	ldr	r1, [r7, #12]
 800bf38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bf3c:	4313      	orrs	r3, r2
 800bf3e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800bf40:	2300      	movs	r3, #0
}
 800bf42:	4618      	mov	r0, r3
 800bf44:	3714      	adds	r7, #20
 800bf46:	46bd      	mov	sp, r7
 800bf48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4c:	4770      	bx	lr

0800bf4e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bf4e:	b580      	push	{r7, lr}
 800bf50:	b084      	sub	sp, #16
 800bf52:	af00      	add	r7, sp, #0
 800bf54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf60:	685b      	ldr	r3, [r3, #4]
 800bf62:	68fa      	ldr	r2, [r7, #12]
 800bf64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bf68:	f023 0302 	bic.w	r3, r3, #2
 800bf6c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800bf6e:	2003      	movs	r0, #3
 800bf70:	f7f7 f99a 	bl	80032a8 <HAL_Delay>

  return HAL_OK;
 800bf74:	2300      	movs	r3, #0
}
 800bf76:	4618      	mov	r0, r3
 800bf78:	3710      	adds	r7, #16
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bd80      	pop	{r7, pc}

0800bf7e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bf7e:	b580      	push	{r7, lr}
 800bf80:	b084      	sub	sp, #16
 800bf82:	af00      	add	r7, sp, #0
 800bf84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf90:	685b      	ldr	r3, [r3, #4]
 800bf92:	68fa      	ldr	r2, [r7, #12]
 800bf94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bf98:	f043 0302 	orr.w	r3, r3, #2
 800bf9c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800bf9e:	2003      	movs	r0, #3
 800bfa0:	f7f7 f982 	bl	80032a8 <HAL_Delay>

  return HAL_OK;
 800bfa4:	2300      	movs	r3, #0
}
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	3710      	adds	r7, #16
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	bd80      	pop	{r7, pc}

0800bfae <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800bfae:	b480      	push	{r7}
 800bfb0:	b085      	sub	sp, #20
 800bfb2:	af00      	add	r7, sp, #0
 800bfb4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	695b      	ldr	r3, [r3, #20]
 800bfba:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	699b      	ldr	r3, [r3, #24]
 800bfc0:	68fa      	ldr	r2, [r7, #12]
 800bfc2:	4013      	ands	r3, r2
 800bfc4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800bfc6:	68fb      	ldr	r3, [r7, #12]
}
 800bfc8:	4618      	mov	r0, r3
 800bfca:	3714      	adds	r7, #20
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd2:	4770      	bx	lr

0800bfd4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bfd4:	b480      	push	{r7}
 800bfd6:	b085      	sub	sp, #20
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bfe6:	699b      	ldr	r3, [r3, #24]
 800bfe8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bff0:	69db      	ldr	r3, [r3, #28]
 800bff2:	68ba      	ldr	r2, [r7, #8]
 800bff4:	4013      	ands	r3, r2
 800bff6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800bff8:	68bb      	ldr	r3, [r7, #8]
 800bffa:	0c1b      	lsrs	r3, r3, #16
}
 800bffc:	4618      	mov	r0, r3
 800bffe:	3714      	adds	r7, #20
 800c000:	46bd      	mov	sp, r7
 800c002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c006:	4770      	bx	lr

0800c008 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c008:	b480      	push	{r7}
 800c00a:	b085      	sub	sp, #20
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c01a:	699b      	ldr	r3, [r3, #24]
 800c01c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c024:	69db      	ldr	r3, [r3, #28]
 800c026:	68ba      	ldr	r2, [r7, #8]
 800c028:	4013      	ands	r3, r2
 800c02a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c02c:	68bb      	ldr	r3, [r7, #8]
 800c02e:	b29b      	uxth	r3, r3
}
 800c030:	4618      	mov	r0, r3
 800c032:	3714      	adds	r7, #20
 800c034:	46bd      	mov	sp, r7
 800c036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03a:	4770      	bx	lr

0800c03c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c03c:	b480      	push	{r7}
 800c03e:	b085      	sub	sp, #20
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
 800c044:	460b      	mov	r3, r1
 800c046:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c04c:	78fb      	ldrb	r3, [r7, #3]
 800c04e:	015a      	lsls	r2, r3, #5
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	4413      	add	r3, r2
 800c054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c058:	689b      	ldr	r3, [r3, #8]
 800c05a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c062:	695b      	ldr	r3, [r3, #20]
 800c064:	68ba      	ldr	r2, [r7, #8]
 800c066:	4013      	ands	r3, r2
 800c068:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c06a:	68bb      	ldr	r3, [r7, #8]
}
 800c06c:	4618      	mov	r0, r3
 800c06e:	3714      	adds	r7, #20
 800c070:	46bd      	mov	sp, r7
 800c072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c076:	4770      	bx	lr

0800c078 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c078:	b480      	push	{r7}
 800c07a:	b087      	sub	sp, #28
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
 800c080:	460b      	mov	r3, r1
 800c082:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c088:	697b      	ldr	r3, [r7, #20]
 800c08a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c08e:	691b      	ldr	r3, [r3, #16]
 800c090:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c092:	697b      	ldr	r3, [r7, #20]
 800c094:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c09a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c09c:	78fb      	ldrb	r3, [r7, #3]
 800c09e:	f003 030f 	and.w	r3, r3, #15
 800c0a2:	68fa      	ldr	r2, [r7, #12]
 800c0a4:	fa22 f303 	lsr.w	r3, r2, r3
 800c0a8:	01db      	lsls	r3, r3, #7
 800c0aa:	b2db      	uxtb	r3, r3
 800c0ac:	693a      	ldr	r2, [r7, #16]
 800c0ae:	4313      	orrs	r3, r2
 800c0b0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c0b2:	78fb      	ldrb	r3, [r7, #3]
 800c0b4:	015a      	lsls	r2, r3, #5
 800c0b6:	697b      	ldr	r3, [r7, #20]
 800c0b8:	4413      	add	r3, r2
 800c0ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0be:	689b      	ldr	r3, [r3, #8]
 800c0c0:	693a      	ldr	r2, [r7, #16]
 800c0c2:	4013      	ands	r3, r2
 800c0c4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c0c6:	68bb      	ldr	r3, [r7, #8]
}
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	371c      	adds	r7, #28
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d2:	4770      	bx	lr

0800c0d4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c0d4:	b480      	push	{r7}
 800c0d6:	b083      	sub	sp, #12
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	695b      	ldr	r3, [r3, #20]
 800c0e0:	f003 0301 	and.w	r3, r3, #1
}
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	370c      	adds	r7, #12
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ee:	4770      	bx	lr

0800c0f0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800c0f0:	b480      	push	{r7}
 800c0f2:	b085      	sub	sp, #20
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	68fa      	ldr	r2, [r7, #12]
 800c106:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c10a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800c10e:	f023 0307 	bic.w	r3, r3, #7
 800c112:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c11a:	689b      	ldr	r3, [r3, #8]
 800c11c:	f003 0306 	and.w	r3, r3, #6
 800c120:	2b04      	cmp	r3, #4
 800c122:	d109      	bne.n	800c138 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	68fa      	ldr	r2, [r7, #12]
 800c12e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c132:	f043 0303 	orr.w	r3, r3, #3
 800c136:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c13e:	685b      	ldr	r3, [r3, #4]
 800c140:	68fa      	ldr	r2, [r7, #12]
 800c142:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c146:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c14a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c14c:	2300      	movs	r3, #0
}
 800c14e:	4618      	mov	r0, r3
 800c150:	3714      	adds	r7, #20
 800c152:	46bd      	mov	sp, r7
 800c154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c158:	4770      	bx	lr
	...

0800c15c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800c15c:	b480      	push	{r7}
 800c15e:	b087      	sub	sp, #28
 800c160:	af00      	add	r7, sp, #0
 800c162:	60f8      	str	r0, [r7, #12]
 800c164:	460b      	mov	r3, r1
 800c166:	607a      	str	r2, [r7, #4]
 800c168:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	333c      	adds	r3, #60	; 0x3c
 800c172:	3304      	adds	r3, #4
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c178:	693b      	ldr	r3, [r7, #16]
 800c17a:	4a26      	ldr	r2, [pc, #152]	; (800c214 <USB_EP0_OutStart+0xb8>)
 800c17c:	4293      	cmp	r3, r2
 800c17e:	d90a      	bls.n	800c196 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c180:	697b      	ldr	r3, [r7, #20]
 800c182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c18c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c190:	d101      	bne.n	800c196 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c192:	2300      	movs	r3, #0
 800c194:	e037      	b.n	800c206 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c196:	697b      	ldr	r3, [r7, #20]
 800c198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c19c:	461a      	mov	r2, r3
 800c19e:	2300      	movs	r3, #0
 800c1a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c1a2:	697b      	ldr	r3, [r7, #20]
 800c1a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1a8:	691b      	ldr	r3, [r3, #16]
 800c1aa:	697a      	ldr	r2, [r7, #20]
 800c1ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c1b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c1b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c1b6:	697b      	ldr	r3, [r7, #20]
 800c1b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1bc:	691b      	ldr	r3, [r3, #16]
 800c1be:	697a      	ldr	r2, [r7, #20]
 800c1c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c1c4:	f043 0318 	orr.w	r3, r3, #24
 800c1c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c1ca:	697b      	ldr	r3, [r7, #20]
 800c1cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1d0:	691b      	ldr	r3, [r3, #16]
 800c1d2:	697a      	ldr	r2, [r7, #20]
 800c1d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c1d8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800c1dc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c1de:	7afb      	ldrb	r3, [r7, #11]
 800c1e0:	2b01      	cmp	r3, #1
 800c1e2:	d10f      	bne.n	800c204 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c1e4:	697b      	ldr	r3, [r7, #20]
 800c1e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1ea:	461a      	mov	r2, r3
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c1f0:	697b      	ldr	r3, [r7, #20]
 800c1f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	697a      	ldr	r2, [r7, #20]
 800c1fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c1fe:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800c202:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c204:	2300      	movs	r3, #0
}
 800c206:	4618      	mov	r0, r3
 800c208:	371c      	adds	r7, #28
 800c20a:	46bd      	mov	sp, r7
 800c20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c210:	4770      	bx	lr
 800c212:	bf00      	nop
 800c214:	4f54300a 	.word	0x4f54300a

0800c218 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c218:	b480      	push	{r7}
 800c21a:	b085      	sub	sp, #20
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800c220:	2300      	movs	r3, #0
 800c222:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	3301      	adds	r3, #1
 800c228:	60fb      	str	r3, [r7, #12]
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	4a13      	ldr	r2, [pc, #76]	; (800c27c <USB_CoreReset+0x64>)
 800c22e:	4293      	cmp	r3, r2
 800c230:	d901      	bls.n	800c236 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c232:	2303      	movs	r3, #3
 800c234:	e01b      	b.n	800c26e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	691b      	ldr	r3, [r3, #16]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	daf2      	bge.n	800c224 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c23e:	2300      	movs	r3, #0
 800c240:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	691b      	ldr	r3, [r3, #16]
 800c246:	f043 0201 	orr.w	r2, r3, #1
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	3301      	adds	r3, #1
 800c252:	60fb      	str	r3, [r7, #12]
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	4a09      	ldr	r2, [pc, #36]	; (800c27c <USB_CoreReset+0x64>)
 800c258:	4293      	cmp	r3, r2
 800c25a:	d901      	bls.n	800c260 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c25c:	2303      	movs	r3, #3
 800c25e:	e006      	b.n	800c26e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	691b      	ldr	r3, [r3, #16]
 800c264:	f003 0301 	and.w	r3, r3, #1
 800c268:	2b01      	cmp	r3, #1
 800c26a:	d0f0      	beq.n	800c24e <USB_CoreReset+0x36>

  return HAL_OK;
 800c26c:	2300      	movs	r3, #0
}
 800c26e:	4618      	mov	r0, r3
 800c270:	3714      	adds	r7, #20
 800c272:	46bd      	mov	sp, r7
 800c274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c278:	4770      	bx	lr
 800c27a:	bf00      	nop
 800c27c:	00030d40 	.word	0x00030d40

0800c280 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800c280:	b580      	push	{r7, lr}
 800c282:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c284:	4904      	ldr	r1, [pc, #16]	; (800c298 <MX_FATFS_Init+0x18>)
 800c286:	4805      	ldr	r0, [pc, #20]	; (800c29c <MX_FATFS_Init+0x1c>)
 800c288:	f002 fab4 	bl	800e7f4 <FATFS_LinkDriver>
 800c28c:	4603      	mov	r3, r0
 800c28e:	461a      	mov	r2, r3
 800c290:	4b03      	ldr	r3, [pc, #12]	; (800c2a0 <MX_FATFS_Init+0x20>)
 800c292:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800c294:	bf00      	nop
 800c296:	bd80      	pop	{r7, pc}
 800c298:	20000d10 	.word	0x20000d10
 800c29c:	080138bc 	.word	0x080138bc
 800c2a0:	20000d0c 	.word	0x20000d0c

0800c2a4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b082      	sub	sp, #8
 800c2a8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c2ae:	f000 f871 	bl	800c394 <BSP_SD_IsDetected>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	2b01      	cmp	r3, #1
 800c2b6:	d001      	beq.n	800c2bc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800c2b8:	2301      	movs	r3, #1
 800c2ba:	e012      	b.n	800c2e2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800c2bc:	480b      	ldr	r0, [pc, #44]	; (800c2ec <BSP_SD_Init+0x48>)
 800c2be:	f7fa ff80 	bl	80071c2 <HAL_SD_Init>
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800c2c6:	79fb      	ldrb	r3, [r7, #7]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d109      	bne.n	800c2e0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800c2cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c2d0:	4806      	ldr	r0, [pc, #24]	; (800c2ec <BSP_SD_Init+0x48>)
 800c2d2:	f7fb fd5f 	bl	8007d94 <HAL_SD_ConfigWideBusOperation>
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d001      	beq.n	800c2e0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800c2dc:	2301      	movs	r3, #1
 800c2de:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800c2e0:	79fb      	ldrb	r3, [r7, #7]
}
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	3708      	adds	r7, #8
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	bd80      	pop	{r7, pc}
 800c2ea:	bf00      	nop
 800c2ec:	20000bec 	.word	0x20000bec

0800c2f0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b086      	sub	sp, #24
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	60f8      	str	r0, [r7, #12]
 800c2f8:	60b9      	str	r1, [r7, #8]
 800c2fa:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	68ba      	ldr	r2, [r7, #8]
 800c304:	68f9      	ldr	r1, [r7, #12]
 800c306:	4806      	ldr	r0, [pc, #24]	; (800c320 <BSP_SD_ReadBlocks_DMA+0x30>)
 800c308:	f7fa ffec 	bl	80072e4 <HAL_SD_ReadBlocks_DMA>
 800c30c:	4603      	mov	r3, r0
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d001      	beq.n	800c316 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c312:	2301      	movs	r3, #1
 800c314:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800c316:	7dfb      	ldrb	r3, [r7, #23]
}
 800c318:	4618      	mov	r0, r3
 800c31a:	3718      	adds	r7, #24
 800c31c:	46bd      	mov	sp, r7
 800c31e:	bd80      	pop	{r7, pc}
 800c320:	20000bec 	.word	0x20000bec

0800c324 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800c324:	b580      	push	{r7, lr}
 800c326:	b086      	sub	sp, #24
 800c328:	af00      	add	r7, sp, #0
 800c32a:	60f8      	str	r0, [r7, #12]
 800c32c:	60b9      	str	r1, [r7, #8]
 800c32e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c330:	2300      	movs	r3, #0
 800c332:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	68ba      	ldr	r2, [r7, #8]
 800c338:	68f9      	ldr	r1, [r7, #12]
 800c33a:	4806      	ldr	r0, [pc, #24]	; (800c354 <BSP_SD_WriteBlocks_DMA+0x30>)
 800c33c:	f7fb f8bc 	bl	80074b8 <HAL_SD_WriteBlocks_DMA>
 800c340:	4603      	mov	r3, r0
 800c342:	2b00      	cmp	r3, #0
 800c344:	d001      	beq.n	800c34a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c346:	2301      	movs	r3, #1
 800c348:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800c34a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c34c:	4618      	mov	r0, r3
 800c34e:	3718      	adds	r7, #24
 800c350:	46bd      	mov	sp, r7
 800c352:	bd80      	pop	{r7, pc}
 800c354:	20000bec 	.word	0x20000bec

0800c358 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c35c:	4805      	ldr	r0, [pc, #20]	; (800c374 <BSP_SD_GetCardState+0x1c>)
 800c35e:	f7fb fd95 	bl	8007e8c <HAL_SD_GetCardState>
 800c362:	4603      	mov	r3, r0
 800c364:	2b04      	cmp	r3, #4
 800c366:	bf14      	ite	ne
 800c368:	2301      	movne	r3, #1
 800c36a:	2300      	moveq	r3, #0
 800c36c:	b2db      	uxtb	r3, r3
}
 800c36e:	4618      	mov	r0, r3
 800c370:	bd80      	pop	{r7, pc}
 800c372:	bf00      	nop
 800c374:	20000bec 	.word	0x20000bec

0800c378 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b082      	sub	sp, #8
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800c380:	6879      	ldr	r1, [r7, #4]
 800c382:	4803      	ldr	r0, [pc, #12]	; (800c390 <BSP_SD_GetCardInfo+0x18>)
 800c384:	f7fb fcda 	bl	8007d3c <HAL_SD_GetCardInfo>
}
 800c388:	bf00      	nop
 800c38a:	3708      	adds	r7, #8
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}
 800c390:	20000bec 	.word	0x20000bec

0800c394 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b082      	sub	sp, #8
 800c398:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c39a:	2301      	movs	r3, #1
 800c39c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800c39e:	f000 f80b 	bl	800c3b8 <BSP_PlatformIsDetected>
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d101      	bne.n	800c3ac <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800c3ac:	79fb      	ldrb	r3, [r7, #7]
 800c3ae:	b2db      	uxtb	r3, r3
}
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	3708      	adds	r7, #8
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	bd80      	pop	{r7, pc}

0800c3b8 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b082      	sub	sp, #8
 800c3bc:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800c3be:	2301      	movs	r3, #1
 800c3c0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800c3c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c3c6:	4806      	ldr	r0, [pc, #24]	; (800c3e0 <BSP_PlatformIsDetected+0x28>)
 800c3c8:	f7f7 fdd8 	bl	8003f7c <HAL_GPIO_ReadPin>
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d001      	beq.n	800c3d6 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800c3d6:	79fb      	ldrb	r3, [r7, #7]
}  
 800c3d8:	4618      	mov	r0, r3
 800c3da:	3708      	adds	r7, #8
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}
 800c3e0:	40020000 	.word	0x40020000

0800c3e4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b084      	sub	sp, #16
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800c3ec:	f7f6 ff50 	bl	8003290 <HAL_GetTick>
 800c3f0:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800c3f2:	e006      	b.n	800c402 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c3f4:	f7ff ffb0 	bl	800c358 <BSP_SD_GetCardState>
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d101      	bne.n	800c402 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800c3fe:	2300      	movs	r3, #0
 800c400:	e009      	b.n	800c416 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800c402:	f7f6 ff45 	bl	8003290 <HAL_GetTick>
 800c406:	4602      	mov	r2, r0
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	1ad3      	subs	r3, r2, r3
 800c40c:	687a      	ldr	r2, [r7, #4]
 800c40e:	429a      	cmp	r2, r3
 800c410:	d8f0      	bhi.n	800c3f4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800c412:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c416:	4618      	mov	r0, r3
 800c418:	3710      	adds	r7, #16
 800c41a:	46bd      	mov	sp, r7
 800c41c:	bd80      	pop	{r7, pc}
	...

0800c420 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b082      	sub	sp, #8
 800c424:	af00      	add	r7, sp, #0
 800c426:	4603      	mov	r3, r0
 800c428:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c42a:	4b0b      	ldr	r3, [pc, #44]	; (800c458 <SD_CheckStatus+0x38>)
 800c42c:	2201      	movs	r2, #1
 800c42e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800c430:	f7ff ff92 	bl	800c358 <BSP_SD_GetCardState>
 800c434:	4603      	mov	r3, r0
 800c436:	2b00      	cmp	r3, #0
 800c438:	d107      	bne.n	800c44a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c43a:	4b07      	ldr	r3, [pc, #28]	; (800c458 <SD_CheckStatus+0x38>)
 800c43c:	781b      	ldrb	r3, [r3, #0]
 800c43e:	b2db      	uxtb	r3, r3
 800c440:	f023 0301 	bic.w	r3, r3, #1
 800c444:	b2da      	uxtb	r2, r3
 800c446:	4b04      	ldr	r3, [pc, #16]	; (800c458 <SD_CheckStatus+0x38>)
 800c448:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c44a:	4b03      	ldr	r3, [pc, #12]	; (800c458 <SD_CheckStatus+0x38>)
 800c44c:	781b      	ldrb	r3, [r3, #0]
 800c44e:	b2db      	uxtb	r3, r3
}
 800c450:	4618      	mov	r0, r3
 800c452:	3708      	adds	r7, #8
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}
 800c458:	2000001d 	.word	0x2000001d

0800c45c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b082      	sub	sp, #8
 800c460:	af00      	add	r7, sp, #0
 800c462:	4603      	mov	r3, r0
 800c464:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800c466:	f7ff ff1d 	bl	800c2a4 <BSP_SD_Init>
 800c46a:	4603      	mov	r3, r0
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d107      	bne.n	800c480 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800c470:	79fb      	ldrb	r3, [r7, #7]
 800c472:	4618      	mov	r0, r3
 800c474:	f7ff ffd4 	bl	800c420 <SD_CheckStatus>
 800c478:	4603      	mov	r3, r0
 800c47a:	461a      	mov	r2, r3
 800c47c:	4b04      	ldr	r3, [pc, #16]	; (800c490 <SD_initialize+0x34>)
 800c47e:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 800c480:	4b03      	ldr	r3, [pc, #12]	; (800c490 <SD_initialize+0x34>)
 800c482:	781b      	ldrb	r3, [r3, #0]
 800c484:	b2db      	uxtb	r3, r3
}
 800c486:	4618      	mov	r0, r3
 800c488:	3708      	adds	r7, #8
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd80      	pop	{r7, pc}
 800c48e:	bf00      	nop
 800c490:	2000001d 	.word	0x2000001d

0800c494 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b082      	sub	sp, #8
 800c498:	af00      	add	r7, sp, #0
 800c49a:	4603      	mov	r3, r0
 800c49c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c49e:	79fb      	ldrb	r3, [r7, #7]
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	f7ff ffbd 	bl	800c420 <SD_CheckStatus>
 800c4a6:	4603      	mov	r3, r0
}
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	3708      	adds	r7, #8
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bd80      	pop	{r7, pc}

0800c4b0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b088      	sub	sp, #32
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	60b9      	str	r1, [r7, #8]
 800c4b8:	607a      	str	r2, [r7, #4]
 800c4ba:	603b      	str	r3, [r7, #0]
 800c4bc:	4603      	mov	r3, r0
 800c4be:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c4c0:	2301      	movs	r3, #1
 800c4c2:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c4c4:	f247 5030 	movw	r0, #30000	; 0x7530
 800c4c8:	f7ff ff8c 	bl	800c3e4 <SD_CheckStatusWithTimeout>
 800c4cc:	4603      	mov	r3, r0
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	da01      	bge.n	800c4d6 <SD_read+0x26>
  {
    return res;
 800c4d2:	7ffb      	ldrb	r3, [r7, #31]
 800c4d4:	e08b      	b.n	800c5ee <SD_read+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800c4d6:	68bb      	ldr	r3, [r7, #8]
 800c4d8:	f003 0303 	and.w	r3, r3, #3
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	f040 8085 	bne.w	800c5ec <SD_read+0x13c>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800c4e2:	683a      	ldr	r2, [r7, #0]
 800c4e4:	6879      	ldr	r1, [r7, #4]
 800c4e6:	68b8      	ldr	r0, [r7, #8]
 800c4e8:	f7ff ff02 	bl	800c2f0 <BSP_SD_ReadBlocks_DMA>
 800c4ec:	4603      	mov	r3, r0
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d133      	bne.n	800c55a <SD_read+0xaa>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800c4f2:	4b41      	ldr	r3, [pc, #260]	; (800c5f8 <SD_read+0x148>)
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800c4f8:	f7f6 feca 	bl	8003290 <HAL_GetTick>
 800c4fc:	6178      	str	r0, [r7, #20]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800c4fe:	bf00      	nop
 800c500:	4b3d      	ldr	r3, [pc, #244]	; (800c5f8 <SD_read+0x148>)
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d108      	bne.n	800c51a <SD_read+0x6a>
 800c508:	f7f6 fec2 	bl	8003290 <HAL_GetTick>
 800c50c:	4602      	mov	r2, r0
 800c50e:	697b      	ldr	r3, [r7, #20]
 800c510:	1ad3      	subs	r3, r2, r3
 800c512:	f247 522f 	movw	r2, #29999	; 0x752f
 800c516:	4293      	cmp	r3, r2
 800c518:	d9f2      	bls.n	800c500 <SD_read+0x50>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800c51a:	4b37      	ldr	r3, [pc, #220]	; (800c5f8 <SD_read+0x148>)
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d102      	bne.n	800c528 <SD_read+0x78>
      {
        res = RES_ERROR;
 800c522:	2301      	movs	r3, #1
 800c524:	77fb      	strb	r3, [r7, #31]
 800c526:	e061      	b.n	800c5ec <SD_read+0x13c>
      }
      else
      {
        ReadStatus = 0;
 800c528:	4b33      	ldr	r3, [pc, #204]	; (800c5f8 <SD_read+0x148>)
 800c52a:	2200      	movs	r2, #0
 800c52c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800c52e:	f7f6 feaf 	bl	8003290 <HAL_GetTick>
 800c532:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c534:	e007      	b.n	800c546 <SD_read+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c536:	f7ff ff0f 	bl	800c358 <BSP_SD_GetCardState>
 800c53a:	4603      	mov	r3, r0
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d102      	bne.n	800c546 <SD_read+0x96>
          {
            res = RES_OK;
 800c540:	2300      	movs	r3, #0
 800c542:	77fb      	strb	r3, [r7, #31]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800c544:	e052      	b.n	800c5ec <SD_read+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c546:	f7f6 fea3 	bl	8003290 <HAL_GetTick>
 800c54a:	4602      	mov	r2, r0
 800c54c:	697b      	ldr	r3, [r7, #20]
 800c54e:	1ad3      	subs	r3, r2, r3
 800c550:	f247 522f 	movw	r2, #29999	; 0x752f
 800c554:	4293      	cmp	r3, r2
 800c556:	d9ee      	bls.n	800c536 <SD_read+0x86>
 800c558:	e048      	b.n	800c5ec <SD_read+0x13c>
#if defined(ENABLE_SCRATCH_BUFFER)
    else {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 800c55a:	2300      	movs	r3, #0
 800c55c:	61bb      	str	r3, [r7, #24]
 800c55e:	e034      	b.n	800c5ca <SD_read+0x11a>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	1c5a      	adds	r2, r3, #1
 800c564:	607a      	str	r2, [r7, #4]
 800c566:	2201      	movs	r2, #1
 800c568:	4619      	mov	r1, r3
 800c56a:	4824      	ldr	r0, [pc, #144]	; (800c5fc <SD_read+0x14c>)
 800c56c:	f7ff fec0 	bl	800c2f0 <BSP_SD_ReadBlocks_DMA>
 800c570:	4603      	mov	r3, r0
 800c572:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 800c574:	7fbb      	ldrb	r3, [r7, #30]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d12c      	bne.n	800c5d4 <SD_read+0x124>
          /* wait until the read is successful or a timeout occurs */

          ReadStatus = 0;
 800c57a:	4b1f      	ldr	r3, [pc, #124]	; (800c5f8 <SD_read+0x148>)
 800c57c:	2200      	movs	r2, #0
 800c57e:	601a      	str	r2, [r3, #0]
          timeout = HAL_GetTick();
 800c580:	f7f6 fe86 	bl	8003290 <HAL_GetTick>
 800c584:	6178      	str	r0, [r7, #20]
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800c586:	bf00      	nop
 800c588:	4b1b      	ldr	r3, [pc, #108]	; (800c5f8 <SD_read+0x148>)
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d108      	bne.n	800c5a2 <SD_read+0xf2>
 800c590:	f7f6 fe7e 	bl	8003290 <HAL_GetTick>
 800c594:	4602      	mov	r2, r0
 800c596:	697b      	ldr	r3, [r7, #20]
 800c598:	1ad3      	subs	r3, r2, r3
 800c59a:	f247 522f 	movw	r2, #29999	; 0x752f
 800c59e:	4293      	cmp	r3, r2
 800c5a0:	d9f2      	bls.n	800c588 <SD_read+0xd8>
          {
          }
          if (ReadStatus == 0)
 800c5a2:	4b15      	ldr	r3, [pc, #84]	; (800c5f8 <SD_read+0x148>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d016      	beq.n	800c5d8 <SD_read+0x128>
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 800c5aa:	68bb      	ldr	r3, [r7, #8]
 800c5ac:	4a13      	ldr	r2, [pc, #76]	; (800c5fc <SD_read+0x14c>)
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	4611      	mov	r1, r2
 800c5b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c5b6:	461a      	mov	r2, r3
 800c5b8:	f002 fe98 	bl	800f2ec <memcpy>
          buff += BLOCKSIZE;
 800c5bc:	68bb      	ldr	r3, [r7, #8]
 800c5be:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c5c2:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 800c5c4:	69bb      	ldr	r3, [r7, #24]
 800c5c6:	3301      	adds	r3, #1
 800c5c8:	61bb      	str	r3, [r7, #24]
 800c5ca:	69bb      	ldr	r3, [r7, #24]
 800c5cc:	683a      	ldr	r2, [r7, #0]
 800c5ce:	429a      	cmp	r2, r3
 800c5d0:	d8c6      	bhi.n	800c560 <SD_read+0xb0>
 800c5d2:	e002      	b.n	800c5da <SD_read+0x12a>
        }
        else
        {
          break;
 800c5d4:	bf00      	nop
 800c5d6:	e000      	b.n	800c5da <SD_read+0x12a>
            break;
 800c5d8:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 800c5da:	69bb      	ldr	r3, [r7, #24]
 800c5dc:	683a      	ldr	r2, [r7, #0]
 800c5de:	429a      	cmp	r2, r3
 800c5e0:	d104      	bne.n	800c5ec <SD_read+0x13c>
 800c5e2:	7fbb      	ldrb	r3, [r7, #30]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d101      	bne.n	800c5ec <SD_read+0x13c>
        res = RES_OK;
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	77fb      	strb	r3, [r7, #31]
    }
#endif
  }

  return res;
 800c5ec:	7ffb      	ldrb	r3, [r7, #31]
}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	3720      	adds	r7, #32
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bd80      	pop	{r7, pc}
 800c5f6:	bf00      	nop
 800c5f8:	20000780 	.word	0x20000780
 800c5fc:	2000057c 	.word	0x2000057c

0800c600 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b088      	sub	sp, #32
 800c604:	af00      	add	r7, sp, #0
 800c606:	60b9      	str	r1, [r7, #8]
 800c608:	607a      	str	r2, [r7, #4]
 800c60a:	603b      	str	r3, [r7, #0]
 800c60c:	4603      	mov	r3, r0
 800c60e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c610:	2301      	movs	r3, #1
 800c612:	77fb      	strb	r3, [r7, #31]
  uint32_t timeout;
  uint8_t ret;
  int i;

   WriteStatus = 0;
 800c614:	4b4c      	ldr	r3, [pc, #304]	; (800c748 <SD_write+0x148>)
 800c616:	2200      	movs	r2, #0
 800c618:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c61a:	f247 5030 	movw	r0, #30000	; 0x7530
 800c61e:	f7ff fee1 	bl	800c3e4 <SD_CheckStatusWithTimeout>
 800c622:	4603      	mov	r3, r0
 800c624:	2b00      	cmp	r3, #0
 800c626:	da01      	bge.n	800c62c <SD_write+0x2c>
  {
    return res;
 800c628:	7ffb      	ldrb	r3, [r7, #31]
 800c62a:	e088      	b.n	800c73e <SD_write+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800c62c:	68bb      	ldr	r3, [r7, #8]
 800c62e:	f003 0303 	and.w	r3, r3, #3
 800c632:	2b00      	cmp	r3, #0
 800c634:	f040 8082 	bne.w	800c73c <SD_write+0x13c>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800c638:	683a      	ldr	r2, [r7, #0]
 800c63a:	6879      	ldr	r1, [r7, #4]
 800c63c:	68b8      	ldr	r0, [r7, #8]
 800c63e:	f7ff fe71 	bl	800c324 <BSP_SD_WriteBlocks_DMA>
 800c642:	4603      	mov	r3, r0
 800c644:	2b00      	cmp	r3, #0
 800c646:	d130      	bne.n	800c6aa <SD_write+0xaa>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800c648:	f7f6 fe22 	bl	8003290 <HAL_GetTick>
 800c64c:	6178      	str	r0, [r7, #20]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800c64e:	bf00      	nop
 800c650:	4b3d      	ldr	r3, [pc, #244]	; (800c748 <SD_write+0x148>)
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d108      	bne.n	800c66a <SD_write+0x6a>
 800c658:	f7f6 fe1a 	bl	8003290 <HAL_GetTick>
 800c65c:	4602      	mov	r2, r0
 800c65e:	697b      	ldr	r3, [r7, #20]
 800c660:	1ad3      	subs	r3, r2, r3
 800c662:	f247 522f 	movw	r2, #29999	; 0x752f
 800c666:	4293      	cmp	r3, r2
 800c668:	d9f2      	bls.n	800c650 <SD_write+0x50>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800c66a:	4b37      	ldr	r3, [pc, #220]	; (800c748 <SD_write+0x148>)
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d102      	bne.n	800c678 <SD_write+0x78>
      {
        res = RES_ERROR;
 800c672:	2301      	movs	r3, #1
 800c674:	77fb      	strb	r3, [r7, #31]
 800c676:	e061      	b.n	800c73c <SD_write+0x13c>
      }
      else
      {
        WriteStatus = 0;
 800c678:	4b33      	ldr	r3, [pc, #204]	; (800c748 <SD_write+0x148>)
 800c67a:	2200      	movs	r2, #0
 800c67c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800c67e:	f7f6 fe07 	bl	8003290 <HAL_GetTick>
 800c682:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c684:	e007      	b.n	800c696 <SD_write+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c686:	f7ff fe67 	bl	800c358 <BSP_SD_GetCardState>
 800c68a:	4603      	mov	r3, r0
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d102      	bne.n	800c696 <SD_write+0x96>
          {
            res = RES_OK;
 800c690:	2300      	movs	r3, #0
 800c692:	77fb      	strb	r3, [r7, #31]
            break;
 800c694:	e052      	b.n	800c73c <SD_write+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c696:	f7f6 fdfb 	bl	8003290 <HAL_GetTick>
 800c69a:	4602      	mov	r2, r0
 800c69c:	697b      	ldr	r3, [r7, #20]
 800c69e:	1ad3      	subs	r3, r2, r3
 800c6a0:	f247 522f 	movw	r2, #29999	; 0x752f
 800c6a4:	4293      	cmp	r3, r2
 800c6a6:	d9ee      	bls.n	800c686 <SD_write+0x86>
 800c6a8:	e048      	b.n	800c73c <SD_write+0x13c>
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	61bb      	str	r3, [r7, #24]
 800c6ae:	e034      	b.n	800c71a <SD_write+0x11a>
      {
        WriteStatus = 0;
 800c6b0:	4b25      	ldr	r3, [pc, #148]	; (800c748 <SD_write+0x148>)
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	601a      	str	r2, [r3, #0]
        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	1c5a      	adds	r2, r3, #1
 800c6ba:	607a      	str	r2, [r7, #4]
 800c6bc:	2201      	movs	r2, #1
 800c6be:	4619      	mov	r1, r3
 800c6c0:	4822      	ldr	r0, [pc, #136]	; (800c74c <SD_write+0x14c>)
 800c6c2:	f7ff fe2f 	bl	800c324 <BSP_SD_WriteBlocks_DMA>
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 800c6ca:	7fbb      	ldrb	r3, [r7, #30]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d129      	bne.n	800c724 <SD_write+0x124>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 800c6d0:	f7f6 fdde 	bl	8003290 <HAL_GetTick>
 800c6d4:	6178      	str	r0, [r7, #20]
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800c6d6:	bf00      	nop
 800c6d8:	4b1b      	ldr	r3, [pc, #108]	; (800c748 <SD_write+0x148>)
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d108      	bne.n	800c6f2 <SD_write+0xf2>
 800c6e0:	f7f6 fdd6 	bl	8003290 <HAL_GetTick>
 800c6e4:	4602      	mov	r2, r0
 800c6e6:	697b      	ldr	r3, [r7, #20]
 800c6e8:	1ad3      	subs	r3, r2, r3
 800c6ea:	f247 522f 	movw	r2, #29999	; 0x752f
 800c6ee:	4293      	cmp	r3, r2
 800c6f0:	d9f2      	bls.n	800c6d8 <SD_write+0xd8>
          {
          }
          if (WriteStatus == 0)
 800c6f2:	4b15      	ldr	r3, [pc, #84]	; (800c748 <SD_write+0x148>)
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d016      	beq.n	800c728 <SD_write+0x128>
          {
            break;
          }

          memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 800c6fa:	68bb      	ldr	r3, [r7, #8]
 800c6fc:	4a13      	ldr	r2, [pc, #76]	; (800c74c <SD_write+0x14c>)
 800c6fe:	4618      	mov	r0, r3
 800c700:	4611      	mov	r1, r2
 800c702:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c706:	461a      	mov	r2, r3
 800c708:	f002 fdf0 	bl	800f2ec <memcpy>
          buff += BLOCKSIZE;
 800c70c:	68bb      	ldr	r3, [r7, #8]
 800c70e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c712:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++)
 800c714:	69bb      	ldr	r3, [r7, #24]
 800c716:	3301      	adds	r3, #1
 800c718:	61bb      	str	r3, [r7, #24]
 800c71a:	69bb      	ldr	r3, [r7, #24]
 800c71c:	683a      	ldr	r2, [r7, #0]
 800c71e:	429a      	cmp	r2, r3
 800c720:	d8c6      	bhi.n	800c6b0 <SD_write+0xb0>
 800c722:	e002      	b.n	800c72a <SD_write+0x12a>
        }
        else
        {
          break;
 800c724:	bf00      	nop
 800c726:	e000      	b.n	800c72a <SD_write+0x12a>
            break;
 800c728:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 800c72a:	69bb      	ldr	r3, [r7, #24]
 800c72c:	683a      	ldr	r2, [r7, #0]
 800c72e:	429a      	cmp	r2, r3
 800c730:	d104      	bne.n	800c73c <SD_write+0x13c>
 800c732:	7fbb      	ldrb	r3, [r7, #30]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d101      	bne.n	800c73c <SD_write+0x13c>
        res = RES_OK;
 800c738:	2300      	movs	r3, #0
 800c73a:	77fb      	strb	r3, [r7, #31]
    }

  }
  return res;
 800c73c:	7ffb      	ldrb	r3, [r7, #31]
}
 800c73e:	4618      	mov	r0, r3
 800c740:	3720      	adds	r7, #32
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}
 800c746:	bf00      	nop
 800c748:	2000077c 	.word	0x2000077c
 800c74c:	2000057c 	.word	0x2000057c

0800c750 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b08c      	sub	sp, #48	; 0x30
 800c754:	af00      	add	r7, sp, #0
 800c756:	4603      	mov	r3, r0
 800c758:	603a      	str	r2, [r7, #0]
 800c75a:	71fb      	strb	r3, [r7, #7]
 800c75c:	460b      	mov	r3, r1
 800c75e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c760:	2301      	movs	r3, #1
 800c762:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c766:	4b25      	ldr	r3, [pc, #148]	; (800c7fc <SD_ioctl+0xac>)
 800c768:	781b      	ldrb	r3, [r3, #0]
 800c76a:	b2db      	uxtb	r3, r3
 800c76c:	f003 0301 	and.w	r3, r3, #1
 800c770:	2b00      	cmp	r3, #0
 800c772:	d001      	beq.n	800c778 <SD_ioctl+0x28>
 800c774:	2303      	movs	r3, #3
 800c776:	e03c      	b.n	800c7f2 <SD_ioctl+0xa2>

  switch (cmd)
 800c778:	79bb      	ldrb	r3, [r7, #6]
 800c77a:	2b03      	cmp	r3, #3
 800c77c:	d834      	bhi.n	800c7e8 <SD_ioctl+0x98>
 800c77e:	a201      	add	r2, pc, #4	; (adr r2, 800c784 <SD_ioctl+0x34>)
 800c780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c784:	0800c795 	.word	0x0800c795
 800c788:	0800c79d 	.word	0x0800c79d
 800c78c:	0800c7b5 	.word	0x0800c7b5
 800c790:	0800c7cf 	.word	0x0800c7cf
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c794:	2300      	movs	r3, #0
 800c796:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c79a:	e028      	b.n	800c7ee <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c79c:	f107 030c 	add.w	r3, r7, #12
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	f7ff fde9 	bl	800c378 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c7a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7a8:	683b      	ldr	r3, [r7, #0]
 800c7aa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c7b2:	e01c      	b.n	800c7ee <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c7b4:	f107 030c 	add.w	r3, r7, #12
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f7ff fddd 	bl	800c378 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7c0:	b29a      	uxth	r2, r3
 800c7c2:	683b      	ldr	r3, [r7, #0]
 800c7c4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c7cc:	e00f      	b.n	800c7ee <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c7ce:	f107 030c 	add.w	r3, r7, #12
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	f7ff fdd0 	bl	800c378 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c7d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7da:	0a5a      	lsrs	r2, r3, #9
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c7e6:	e002      	b.n	800c7ee <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c7e8:	2304      	movs	r3, #4
 800c7ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800c7ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	3730      	adds	r7, #48	; 0x30
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	bd80      	pop	{r7, pc}
 800c7fa:	bf00      	nop
 800c7fc:	2000001d 	.word	0x2000001d

0800c800 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c800:	b580      	push	{r7, lr}
 800c802:	b084      	sub	sp, #16
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
 800c808:	460b      	mov	r3, r1
 800c80a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800c80c:	2300      	movs	r3, #0
 800c80e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	7c1b      	ldrb	r3, [r3, #16]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d115      	bne.n	800c844 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c818:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c81c:	2202      	movs	r2, #2
 800c81e:	2181      	movs	r1, #129	; 0x81
 800c820:	6878      	ldr	r0, [r7, #4]
 800c822:	f002 fbdc 	bl	800efde <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	2201      	movs	r2, #1
 800c82a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c82c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c830:	2202      	movs	r2, #2
 800c832:	2101      	movs	r1, #1
 800c834:	6878      	ldr	r0, [r7, #4]
 800c836:	f002 fbd2 	bl	800efde <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	2201      	movs	r2, #1
 800c83e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800c842:	e012      	b.n	800c86a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c844:	2340      	movs	r3, #64	; 0x40
 800c846:	2202      	movs	r2, #2
 800c848:	2181      	movs	r1, #129	; 0x81
 800c84a:	6878      	ldr	r0, [r7, #4]
 800c84c:	f002 fbc7 	bl	800efde <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2201      	movs	r2, #1
 800c854:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c856:	2340      	movs	r3, #64	; 0x40
 800c858:	2202      	movs	r2, #2
 800c85a:	2101      	movs	r1, #1
 800c85c:	6878      	ldr	r0, [r7, #4]
 800c85e:	f002 fbbe 	bl	800efde <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	2201      	movs	r2, #1
 800c866:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c86a:	2308      	movs	r3, #8
 800c86c:	2203      	movs	r2, #3
 800c86e:	2182      	movs	r1, #130	; 0x82
 800c870:	6878      	ldr	r0, [r7, #4]
 800c872:	f002 fbb4 	bl	800efde <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	2201      	movs	r2, #1
 800c87a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800c87c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c880:	f002 fd24 	bl	800f2cc <malloc>
 800c884:	4603      	mov	r3, r0
 800c886:	461a      	mov	r2, r3
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c894:	2b00      	cmp	r3, #0
 800c896:	d102      	bne.n	800c89e <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 800c898:	2301      	movs	r3, #1
 800c89a:	73fb      	strb	r3, [r7, #15]
 800c89c:	e026      	b.n	800c8ec <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c8a4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800c8b0:	68bb      	ldr	r3, [r7, #8]
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800c8b8:	68bb      	ldr	r3, [r7, #8]
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	7c1b      	ldrb	r3, [r3, #16]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d109      	bne.n	800c8dc <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c8c8:	68bb      	ldr	r3, [r7, #8]
 800c8ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c8ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c8d2:	2101      	movs	r1, #1
 800c8d4:	6878      	ldr	r0, [r7, #4]
 800c8d6:	f002 fc73 	bl	800f1c0 <USBD_LL_PrepareReceive>
 800c8da:	e007      	b.n	800c8ec <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c8dc:	68bb      	ldr	r3, [r7, #8]
 800c8de:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c8e2:	2340      	movs	r3, #64	; 0x40
 800c8e4:	2101      	movs	r1, #1
 800c8e6:	6878      	ldr	r0, [r7, #4]
 800c8e8:	f002 fc6a 	bl	800f1c0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800c8ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	3710      	adds	r7, #16
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	bd80      	pop	{r7, pc}

0800c8f6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c8f6:	b580      	push	{r7, lr}
 800c8f8:	b084      	sub	sp, #16
 800c8fa:	af00      	add	r7, sp, #0
 800c8fc:	6078      	str	r0, [r7, #4]
 800c8fe:	460b      	mov	r3, r1
 800c900:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800c902:	2300      	movs	r3, #0
 800c904:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800c906:	2181      	movs	r1, #129	; 0x81
 800c908:	6878      	ldr	r0, [r7, #4]
 800c90a:	f002 fb8e 	bl	800f02a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	2200      	movs	r2, #0
 800c912:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800c914:	2101      	movs	r1, #1
 800c916:	6878      	ldr	r0, [r7, #4]
 800c918:	f002 fb87 	bl	800f02a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	2200      	movs	r2, #0
 800c920:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800c924:	2182      	movs	r1, #130	; 0x82
 800c926:	6878      	ldr	r0, [r7, #4]
 800c928:	f002 fb7f 	bl	800f02a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	2200      	movs	r2, #0
 800c930:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d00e      	beq.n	800c95a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c942:	685b      	ldr	r3, [r3, #4]
 800c944:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c94c:	4618      	mov	r0, r3
 800c94e:	f002 fcc5 	bl	800f2dc <free>
    pdev->pClassData = NULL;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	2200      	movs	r2, #0
 800c956:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800c95a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c95c:	4618      	mov	r0, r3
 800c95e:	3710      	adds	r7, #16
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}

0800c964 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b086      	sub	sp, #24
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
 800c96c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c974:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800c976:	2300      	movs	r3, #0
 800c978:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800c97a:	2300      	movs	r3, #0
 800c97c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800c97e:	2300      	movs	r3, #0
 800c980:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c982:	683b      	ldr	r3, [r7, #0]
 800c984:	781b      	ldrb	r3, [r3, #0]
 800c986:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d039      	beq.n	800ca02 <USBD_CDC_Setup+0x9e>
 800c98e:	2b20      	cmp	r3, #32
 800c990:	d17c      	bne.n	800ca8c <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	88db      	ldrh	r3, [r3, #6]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d029      	beq.n	800c9ee <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	781b      	ldrb	r3, [r3, #0]
 800c99e:	b25b      	sxtb	r3, r3
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	da11      	bge.n	800c9c8 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c9aa:	689b      	ldr	r3, [r3, #8]
 800c9ac:	683a      	ldr	r2, [r7, #0]
 800c9ae:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800c9b0:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c9b2:	683a      	ldr	r2, [r7, #0]
 800c9b4:	88d2      	ldrh	r2, [r2, #6]
 800c9b6:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800c9b8:	6939      	ldr	r1, [r7, #16]
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	88db      	ldrh	r3, [r3, #6]
 800c9be:	461a      	mov	r2, r3
 800c9c0:	6878      	ldr	r0, [r7, #4]
 800c9c2:	f001 f9c9 	bl	800dd58 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800c9c6:	e068      	b.n	800ca9a <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	785a      	ldrb	r2, [r3, #1]
 800c9cc:	693b      	ldr	r3, [r7, #16]
 800c9ce:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800c9d2:	683b      	ldr	r3, [r7, #0]
 800c9d4:	88db      	ldrh	r3, [r3, #6]
 800c9d6:	b2da      	uxtb	r2, r3
 800c9d8:	693b      	ldr	r3, [r7, #16]
 800c9da:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800c9de:	6939      	ldr	r1, [r7, #16]
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	88db      	ldrh	r3, [r3, #6]
 800c9e4:	461a      	mov	r2, r3
 800c9e6:	6878      	ldr	r0, [r7, #4]
 800c9e8:	f001 f9e4 	bl	800ddb4 <USBD_CtlPrepareRx>
    break;
 800c9ec:	e055      	b.n	800ca9a <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c9f4:	689b      	ldr	r3, [r3, #8]
 800c9f6:	683a      	ldr	r2, [r7, #0]
 800c9f8:	7850      	ldrb	r0, [r2, #1]
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	6839      	ldr	r1, [r7, #0]
 800c9fe:	4798      	blx	r3
    break;
 800ca00:	e04b      	b.n	800ca9a <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	785b      	ldrb	r3, [r3, #1]
 800ca06:	2b0a      	cmp	r3, #10
 800ca08:	d017      	beq.n	800ca3a <USBD_CDC_Setup+0xd6>
 800ca0a:	2b0b      	cmp	r3, #11
 800ca0c:	d029      	beq.n	800ca62 <USBD_CDC_Setup+0xfe>
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d133      	bne.n	800ca7a <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ca18:	2b03      	cmp	r3, #3
 800ca1a:	d107      	bne.n	800ca2c <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800ca1c:	f107 030c 	add.w	r3, r7, #12
 800ca20:	2202      	movs	r2, #2
 800ca22:	4619      	mov	r1, r3
 800ca24:	6878      	ldr	r0, [r7, #4]
 800ca26:	f001 f997 	bl	800dd58 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800ca2a:	e02e      	b.n	800ca8a <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800ca2c:	6839      	ldr	r1, [r7, #0]
 800ca2e:	6878      	ldr	r0, [r7, #4]
 800ca30:	f001 f927 	bl	800dc82 <USBD_CtlError>
			  ret = USBD_FAIL;
 800ca34:	2302      	movs	r3, #2
 800ca36:	75fb      	strb	r3, [r7, #23]
      break;
 800ca38:	e027      	b.n	800ca8a <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ca40:	2b03      	cmp	r3, #3
 800ca42:	d107      	bne.n	800ca54 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800ca44:	f107 030f 	add.w	r3, r7, #15
 800ca48:	2201      	movs	r2, #1
 800ca4a:	4619      	mov	r1, r3
 800ca4c:	6878      	ldr	r0, [r7, #4]
 800ca4e:	f001 f983 	bl	800dd58 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800ca52:	e01a      	b.n	800ca8a <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800ca54:	6839      	ldr	r1, [r7, #0]
 800ca56:	6878      	ldr	r0, [r7, #4]
 800ca58:	f001 f913 	bl	800dc82 <USBD_CtlError>
			  ret = USBD_FAIL;
 800ca5c:	2302      	movs	r3, #2
 800ca5e:	75fb      	strb	r3, [r7, #23]
      break;
 800ca60:	e013      	b.n	800ca8a <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ca68:	2b03      	cmp	r3, #3
 800ca6a:	d00d      	beq.n	800ca88 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 800ca6c:	6839      	ldr	r1, [r7, #0]
 800ca6e:	6878      	ldr	r0, [r7, #4]
 800ca70:	f001 f907 	bl	800dc82 <USBD_CtlError>
			  ret = USBD_FAIL;
 800ca74:	2302      	movs	r3, #2
 800ca76:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800ca78:	e006      	b.n	800ca88 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 800ca7a:	6839      	ldr	r1, [r7, #0]
 800ca7c:	6878      	ldr	r0, [r7, #4]
 800ca7e:	f001 f900 	bl	800dc82 <USBD_CtlError>
      ret = USBD_FAIL;
 800ca82:	2302      	movs	r3, #2
 800ca84:	75fb      	strb	r3, [r7, #23]
      break;
 800ca86:	e000      	b.n	800ca8a <USBD_CDC_Setup+0x126>
      break;
 800ca88:	bf00      	nop
    }
    break;
 800ca8a:	e006      	b.n	800ca9a <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 800ca8c:	6839      	ldr	r1, [r7, #0]
 800ca8e:	6878      	ldr	r0, [r7, #4]
 800ca90:	f001 f8f7 	bl	800dc82 <USBD_CtlError>
    ret = USBD_FAIL;
 800ca94:	2302      	movs	r3, #2
 800ca96:	75fb      	strb	r3, [r7, #23]
    break;
 800ca98:	bf00      	nop
  }

  return ret;
 800ca9a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	3718      	adds	r7, #24
 800caa0:	46bd      	mov	sp, r7
 800caa2:	bd80      	pop	{r7, pc}

0800caa4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b084      	sub	sp, #16
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
 800caac:	460b      	mov	r3, r1
 800caae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cab6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800cabe:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d03a      	beq.n	800cb40 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800caca:	78fa      	ldrb	r2, [r7, #3]
 800cacc:	6879      	ldr	r1, [r7, #4]
 800cace:	4613      	mov	r3, r2
 800cad0:	009b      	lsls	r3, r3, #2
 800cad2:	4413      	add	r3, r2
 800cad4:	009b      	lsls	r3, r3, #2
 800cad6:	440b      	add	r3, r1
 800cad8:	331c      	adds	r3, #28
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d029      	beq.n	800cb34 <USBD_CDC_DataIn+0x90>
 800cae0:	78fa      	ldrb	r2, [r7, #3]
 800cae2:	6879      	ldr	r1, [r7, #4]
 800cae4:	4613      	mov	r3, r2
 800cae6:	009b      	lsls	r3, r3, #2
 800cae8:	4413      	add	r3, r2
 800caea:	009b      	lsls	r3, r3, #2
 800caec:	440b      	add	r3, r1
 800caee:	331c      	adds	r3, #28
 800caf0:	681a      	ldr	r2, [r3, #0]
 800caf2:	78f9      	ldrb	r1, [r7, #3]
 800caf4:	68b8      	ldr	r0, [r7, #8]
 800caf6:	460b      	mov	r3, r1
 800caf8:	00db      	lsls	r3, r3, #3
 800cafa:	1a5b      	subs	r3, r3, r1
 800cafc:	009b      	lsls	r3, r3, #2
 800cafe:	4403      	add	r3, r0
 800cb00:	3344      	adds	r3, #68	; 0x44
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	fbb2 f1f3 	udiv	r1, r2, r3
 800cb08:	fb03 f301 	mul.w	r3, r3, r1
 800cb0c:	1ad3      	subs	r3, r2, r3
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d110      	bne.n	800cb34 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800cb12:	78fa      	ldrb	r2, [r7, #3]
 800cb14:	6879      	ldr	r1, [r7, #4]
 800cb16:	4613      	mov	r3, r2
 800cb18:	009b      	lsls	r3, r3, #2
 800cb1a:	4413      	add	r3, r2
 800cb1c:	009b      	lsls	r3, r3, #2
 800cb1e:	440b      	add	r3, r1
 800cb20:	331c      	adds	r3, #28
 800cb22:	2200      	movs	r2, #0
 800cb24:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800cb26:	78f9      	ldrb	r1, [r7, #3]
 800cb28:	2300      	movs	r3, #0
 800cb2a:	2200      	movs	r2, #0
 800cb2c:	6878      	ldr	r0, [r7, #4]
 800cb2e:	f002 fb24 	bl	800f17a <USBD_LL_Transmit>
 800cb32:	e003      	b.n	800cb3c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	2200      	movs	r2, #0
 800cb38:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	e000      	b.n	800cb42 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800cb40:	2302      	movs	r3, #2
  }
}
 800cb42:	4618      	mov	r0, r3
 800cb44:	3710      	adds	r7, #16
 800cb46:	46bd      	mov	sp, r7
 800cb48:	bd80      	pop	{r7, pc}

0800cb4a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cb4a:	b580      	push	{r7, lr}
 800cb4c:	b084      	sub	sp, #16
 800cb4e:	af00      	add	r7, sp, #0
 800cb50:	6078      	str	r0, [r7, #4]
 800cb52:	460b      	mov	r3, r1
 800cb54:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cb5c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800cb5e:	78fb      	ldrb	r3, [r7, #3]
 800cb60:	4619      	mov	r1, r3
 800cb62:	6878      	ldr	r0, [r7, #4]
 800cb64:	f002 fb4f 	bl	800f206 <USBD_LL_GetRxDataSize>
 800cb68:	4602      	mov	r2, r0
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d00d      	beq.n	800cb96 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cb80:	68db      	ldr	r3, [r3, #12]
 800cb82:	68fa      	ldr	r2, [r7, #12]
 800cb84:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800cb88:	68fa      	ldr	r2, [r7, #12]
 800cb8a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800cb8e:	4611      	mov	r1, r2
 800cb90:	4798      	blx	r3

    return USBD_OK;
 800cb92:	2300      	movs	r3, #0
 800cb94:	e000      	b.n	800cb98 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800cb96:	2302      	movs	r3, #2
  }
}
 800cb98:	4618      	mov	r0, r3
 800cb9a:	3710      	adds	r7, #16
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	bd80      	pop	{r7, pc}

0800cba0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b084      	sub	sp, #16
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cbae:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d015      	beq.n	800cbe6 <USBD_CDC_EP0_RxReady+0x46>
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800cbc0:	2bff      	cmp	r3, #255	; 0xff
 800cbc2:	d010      	beq.n	800cbe6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cbca:	689b      	ldr	r3, [r3, #8]
 800cbcc:	68fa      	ldr	r2, [r7, #12]
 800cbce:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800cbd2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800cbd4:	68fa      	ldr	r2, [r7, #12]
 800cbd6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800cbda:	b292      	uxth	r2, r2
 800cbdc:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	22ff      	movs	r2, #255	; 0xff
 800cbe2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800cbe6:	2300      	movs	r3, #0
}
 800cbe8:	4618      	mov	r0, r3
 800cbea:	3710      	adds	r7, #16
 800cbec:	46bd      	mov	sp, r7
 800cbee:	bd80      	pop	{r7, pc}

0800cbf0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800cbf0:	b480      	push	{r7}
 800cbf2:	b083      	sub	sp, #12
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	2243      	movs	r2, #67	; 0x43
 800cbfc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800cbfe:	4b03      	ldr	r3, [pc, #12]	; (800cc0c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800cc00:	4618      	mov	r0, r3
 800cc02:	370c      	adds	r7, #12
 800cc04:	46bd      	mov	sp, r7
 800cc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0a:	4770      	bx	lr
 800cc0c:	200000a8 	.word	0x200000a8

0800cc10 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800cc10:	b480      	push	{r7}
 800cc12:	b083      	sub	sp, #12
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	2243      	movs	r2, #67	; 0x43
 800cc1c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800cc1e:	4b03      	ldr	r3, [pc, #12]	; (800cc2c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800cc20:	4618      	mov	r0, r3
 800cc22:	370c      	adds	r7, #12
 800cc24:	46bd      	mov	sp, r7
 800cc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2a:	4770      	bx	lr
 800cc2c:	20000064 	.word	0x20000064

0800cc30 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800cc30:	b480      	push	{r7}
 800cc32:	b083      	sub	sp, #12
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	2243      	movs	r2, #67	; 0x43
 800cc3c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800cc3e:	4b03      	ldr	r3, [pc, #12]	; (800cc4c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800cc40:	4618      	mov	r0, r3
 800cc42:	370c      	adds	r7, #12
 800cc44:	46bd      	mov	sp, r7
 800cc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4a:	4770      	bx	lr
 800cc4c:	200000ec 	.word	0x200000ec

0800cc50 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800cc50:	b480      	push	{r7}
 800cc52:	b083      	sub	sp, #12
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	220a      	movs	r2, #10
 800cc5c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800cc5e:	4b03      	ldr	r3, [pc, #12]	; (800cc6c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800cc60:	4618      	mov	r0, r3
 800cc62:	370c      	adds	r7, #12
 800cc64:	46bd      	mov	sp, r7
 800cc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6a:	4770      	bx	lr
 800cc6c:	20000020 	.word	0x20000020

0800cc70 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800cc70:	b480      	push	{r7}
 800cc72:	b085      	sub	sp, #20
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
 800cc78:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800cc7a:	2302      	movs	r3, #2
 800cc7c:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d005      	beq.n	800cc90 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	683a      	ldr	r2, [r7, #0]
 800cc88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800cc90:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc92:	4618      	mov	r0, r3
 800cc94:	3714      	adds	r7, #20
 800cc96:	46bd      	mov	sp, r7
 800cc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9c:	4770      	bx	lr

0800cc9e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800cc9e:	b480      	push	{r7}
 800cca0:	b087      	sub	sp, #28
 800cca2:	af00      	add	r7, sp, #0
 800cca4:	60f8      	str	r0, [r7, #12]
 800cca6:	60b9      	str	r1, [r7, #8]
 800cca8:	4613      	mov	r3, r2
 800ccaa:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ccb2:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800ccb4:	697b      	ldr	r3, [r7, #20]
 800ccb6:	68ba      	ldr	r2, [r7, #8]
 800ccb8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ccbc:	88fa      	ldrh	r2, [r7, #6]
 800ccbe:	697b      	ldr	r3, [r7, #20]
 800ccc0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800ccc4:	2300      	movs	r3, #0
}
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	371c      	adds	r7, #28
 800ccca:	46bd      	mov	sp, r7
 800cccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd0:	4770      	bx	lr

0800ccd2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800ccd2:	b480      	push	{r7}
 800ccd4:	b085      	sub	sp, #20
 800ccd6:	af00      	add	r7, sp, #0
 800ccd8:	6078      	str	r0, [r7, #4]
 800ccda:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cce2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	683a      	ldr	r2, [r7, #0]
 800cce8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800ccec:	2300      	movs	r3, #0
}
 800ccee:	4618      	mov	r0, r3
 800ccf0:	3714      	adds	r7, #20
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf8:	4770      	bx	lr

0800ccfa <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ccfa:	b580      	push	{r7, lr}
 800ccfc:	b084      	sub	sp, #16
 800ccfe:	af00      	add	r7, sp, #0
 800cd00:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cd08:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d01c      	beq.n	800cd4e <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d115      	bne.n	800cd4a <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	2201      	movs	r2, #1
 800cd22:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800cd3c:	b29b      	uxth	r3, r3
 800cd3e:	2181      	movs	r1, #129	; 0x81
 800cd40:	6878      	ldr	r0, [r7, #4]
 800cd42:	f002 fa1a 	bl	800f17a <USBD_LL_Transmit>

      return USBD_OK;
 800cd46:	2300      	movs	r3, #0
 800cd48:	e002      	b.n	800cd50 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800cd4a:	2301      	movs	r3, #1
 800cd4c:	e000      	b.n	800cd50 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800cd4e:	2302      	movs	r3, #2
  }
}
 800cd50:	4618      	mov	r0, r3
 800cd52:	3710      	adds	r7, #16
 800cd54:	46bd      	mov	sp, r7
 800cd56:	bd80      	pop	{r7, pc}

0800cd58 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b084      	sub	sp, #16
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cd66:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d017      	beq.n	800cda2 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	7c1b      	ldrb	r3, [r3, #16]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d109      	bne.n	800cd8e <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cd80:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cd84:	2101      	movs	r1, #1
 800cd86:	6878      	ldr	r0, [r7, #4]
 800cd88:	f002 fa1a 	bl	800f1c0 <USBD_LL_PrepareReceive>
 800cd8c:	e007      	b.n	800cd9e <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cd94:	2340      	movs	r3, #64	; 0x40
 800cd96:	2101      	movs	r1, #1
 800cd98:	6878      	ldr	r0, [r7, #4]
 800cd9a:	f002 fa11 	bl	800f1c0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800cd9e:	2300      	movs	r3, #0
 800cda0:	e000      	b.n	800cda4 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800cda2:	2302      	movs	r3, #2
  }
}
 800cda4:	4618      	mov	r0, r3
 800cda6:	3710      	adds	r7, #16
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	bd80      	pop	{r7, pc}

0800cdac <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b084      	sub	sp, #16
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	60f8      	str	r0, [r7, #12]
 800cdb4:	60b9      	str	r1, [r7, #8]
 800cdb6:	4613      	mov	r3, r2
 800cdb8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d101      	bne.n	800cdc4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800cdc0:	2302      	movs	r3, #2
 800cdc2:	e01a      	b.n	800cdfa <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d003      	beq.n	800cdd6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	2200      	movs	r2, #0
 800cdd2:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800cdd6:	68bb      	ldr	r3, [r7, #8]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d003      	beq.n	800cde4 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	68ba      	ldr	r2, [r7, #8]
 800cde0:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	2201      	movs	r2, #1
 800cde8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	79fa      	ldrb	r2, [r7, #7]
 800cdf0:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800cdf2:	68f8      	ldr	r0, [r7, #12]
 800cdf4:	f002 f88c 	bl	800ef10 <USBD_LL_Init>

  return USBD_OK;
 800cdf8:	2300      	movs	r3, #0
}
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	3710      	adds	r7, #16
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd80      	pop	{r7, pc}

0800ce02 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ce02:	b480      	push	{r7}
 800ce04:	b085      	sub	sp, #20
 800ce06:	af00      	add	r7, sp, #0
 800ce08:	6078      	str	r0, [r7, #4]
 800ce0a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800ce10:	683b      	ldr	r3, [r7, #0]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d006      	beq.n	800ce24 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	683a      	ldr	r2, [r7, #0]
 800ce1a:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800ce1e:	2300      	movs	r3, #0
 800ce20:	73fb      	strb	r3, [r7, #15]
 800ce22:	e001      	b.n	800ce28 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800ce24:	2302      	movs	r3, #2
 800ce26:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ce28:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	3714      	adds	r7, #20
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce34:	4770      	bx	lr

0800ce36 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800ce36:	b580      	push	{r7, lr}
 800ce38:	b082      	sub	sp, #8
 800ce3a:	af00      	add	r7, sp, #0
 800ce3c:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800ce3e:	6878      	ldr	r0, [r7, #4]
 800ce40:	f002 f8b2 	bl	800efa8 <USBD_LL_Start>

  return USBD_OK;
 800ce44:	2300      	movs	r3, #0
}
 800ce46:	4618      	mov	r0, r3
 800ce48:	3708      	adds	r7, #8
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	bd80      	pop	{r7, pc}

0800ce4e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800ce4e:	b480      	push	{r7}
 800ce50:	b083      	sub	sp, #12
 800ce52:	af00      	add	r7, sp, #0
 800ce54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ce56:	2300      	movs	r3, #0
}
 800ce58:	4618      	mov	r0, r3
 800ce5a:	370c      	adds	r7, #12
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce62:	4770      	bx	lr

0800ce64 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b084      	sub	sp, #16
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
 800ce6c:	460b      	mov	r3, r1
 800ce6e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800ce70:	2302      	movs	r3, #2
 800ce72:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d00c      	beq.n	800ce98 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	78fa      	ldrb	r2, [r7, #3]
 800ce88:	4611      	mov	r1, r2
 800ce8a:	6878      	ldr	r0, [r7, #4]
 800ce8c:	4798      	blx	r3
 800ce8e:	4603      	mov	r3, r0
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d101      	bne.n	800ce98 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800ce94:	2300      	movs	r3, #0
 800ce96:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800ce98:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	3710      	adds	r7, #16
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	bd80      	pop	{r7, pc}

0800cea2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800cea2:	b580      	push	{r7, lr}
 800cea4:	b082      	sub	sp, #8
 800cea6:	af00      	add	r7, sp, #0
 800cea8:	6078      	str	r0, [r7, #4]
 800ceaa:	460b      	mov	r3, r1
 800ceac:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ceb4:	685b      	ldr	r3, [r3, #4]
 800ceb6:	78fa      	ldrb	r2, [r7, #3]
 800ceb8:	4611      	mov	r1, r2
 800ceba:	6878      	ldr	r0, [r7, #4]
 800cebc:	4798      	blx	r3
  return USBD_OK;
 800cebe:	2300      	movs	r3, #0
}
 800cec0:	4618      	mov	r0, r3
 800cec2:	3708      	adds	r7, #8
 800cec4:	46bd      	mov	sp, r7
 800cec6:	bd80      	pop	{r7, pc}

0800cec8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b082      	sub	sp, #8
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
 800ced0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800ced8:	6839      	ldr	r1, [r7, #0]
 800ceda:	4618      	mov	r0, r3
 800cedc:	f000 fe94 	bl	800dc08 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2201      	movs	r2, #1
 800cee4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800ceee:	461a      	mov	r2, r3
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800cefc:	f003 031f 	and.w	r3, r3, #31
 800cf00:	2b01      	cmp	r3, #1
 800cf02:	d00c      	beq.n	800cf1e <USBD_LL_SetupStage+0x56>
 800cf04:	2b01      	cmp	r3, #1
 800cf06:	d302      	bcc.n	800cf0e <USBD_LL_SetupStage+0x46>
 800cf08:	2b02      	cmp	r3, #2
 800cf0a:	d010      	beq.n	800cf2e <USBD_LL_SetupStage+0x66>
 800cf0c:	e017      	b.n	800cf3e <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800cf14:	4619      	mov	r1, r3
 800cf16:	6878      	ldr	r0, [r7, #4]
 800cf18:	f000 fa04 	bl	800d324 <USBD_StdDevReq>
    break;
 800cf1c:	e01a      	b.n	800cf54 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800cf24:	4619      	mov	r1, r3
 800cf26:	6878      	ldr	r0, [r7, #4]
 800cf28:	f000 fa66 	bl	800d3f8 <USBD_StdItfReq>
    break;
 800cf2c:	e012      	b.n	800cf54 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800cf34:	4619      	mov	r1, r3
 800cf36:	6878      	ldr	r0, [r7, #4]
 800cf38:	f000 faa4 	bl	800d484 <USBD_StdEPReq>
    break;
 800cf3c:	e00a      	b.n	800cf54 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800cf44:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cf48:	b2db      	uxtb	r3, r3
 800cf4a:	4619      	mov	r1, r3
 800cf4c:	6878      	ldr	r0, [r7, #4]
 800cf4e:	f002 f88b 	bl	800f068 <USBD_LL_StallEP>
    break;
 800cf52:	bf00      	nop
  }

  return USBD_OK;
 800cf54:	2300      	movs	r3, #0
}
 800cf56:	4618      	mov	r0, r3
 800cf58:	3708      	adds	r7, #8
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	bd80      	pop	{r7, pc}

0800cf5e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800cf5e:	b580      	push	{r7, lr}
 800cf60:	b086      	sub	sp, #24
 800cf62:	af00      	add	r7, sp, #0
 800cf64:	60f8      	str	r0, [r7, #12]
 800cf66:	460b      	mov	r3, r1
 800cf68:	607a      	str	r2, [r7, #4]
 800cf6a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800cf6c:	7afb      	ldrb	r3, [r7, #11]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d14b      	bne.n	800d00a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800cf78:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800cf80:	2b03      	cmp	r3, #3
 800cf82:	d134      	bne.n	800cfee <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800cf84:	697b      	ldr	r3, [r7, #20]
 800cf86:	68da      	ldr	r2, [r3, #12]
 800cf88:	697b      	ldr	r3, [r7, #20]
 800cf8a:	691b      	ldr	r3, [r3, #16]
 800cf8c:	429a      	cmp	r2, r3
 800cf8e:	d919      	bls.n	800cfc4 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800cf90:	697b      	ldr	r3, [r7, #20]
 800cf92:	68da      	ldr	r2, [r3, #12]
 800cf94:	697b      	ldr	r3, [r7, #20]
 800cf96:	691b      	ldr	r3, [r3, #16]
 800cf98:	1ad2      	subs	r2, r2, r3
 800cf9a:	697b      	ldr	r3, [r7, #20]
 800cf9c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800cf9e:	697b      	ldr	r3, [r7, #20]
 800cfa0:	68da      	ldr	r2, [r3, #12]
 800cfa2:	697b      	ldr	r3, [r7, #20]
 800cfa4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800cfa6:	429a      	cmp	r2, r3
 800cfa8:	d203      	bcs.n	800cfb2 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800cfaa:	697b      	ldr	r3, [r7, #20]
 800cfac:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800cfae:	b29b      	uxth	r3, r3
 800cfb0:	e002      	b.n	800cfb8 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800cfb2:	697b      	ldr	r3, [r7, #20]
 800cfb4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800cfb6:	b29b      	uxth	r3, r3
 800cfb8:	461a      	mov	r2, r3
 800cfba:	6879      	ldr	r1, [r7, #4]
 800cfbc:	68f8      	ldr	r0, [r7, #12]
 800cfbe:	f000 ff17 	bl	800ddf0 <USBD_CtlContinueRx>
 800cfc2:	e038      	b.n	800d036 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cfca:	691b      	ldr	r3, [r3, #16]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d00a      	beq.n	800cfe6 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800cfd6:	2b03      	cmp	r3, #3
 800cfd8:	d105      	bne.n	800cfe6 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cfe0:	691b      	ldr	r3, [r3, #16]
 800cfe2:	68f8      	ldr	r0, [r7, #12]
 800cfe4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800cfe6:	68f8      	ldr	r0, [r7, #12]
 800cfe8:	f000 ff14 	bl	800de14 <USBD_CtlSendStatus>
 800cfec:	e023      	b.n	800d036 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800cff4:	2b05      	cmp	r3, #5
 800cff6:	d11e      	bne.n	800d036 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	2200      	movs	r2, #0
 800cffc:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800d000:	2100      	movs	r1, #0
 800d002:	68f8      	ldr	r0, [r7, #12]
 800d004:	f002 f830 	bl	800f068 <USBD_LL_StallEP>
 800d008:	e015      	b.n	800d036 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d010:	699b      	ldr	r3, [r3, #24]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d00d      	beq.n	800d032 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800d01c:	2b03      	cmp	r3, #3
 800d01e:	d108      	bne.n	800d032 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d026:	699b      	ldr	r3, [r3, #24]
 800d028:	7afa      	ldrb	r2, [r7, #11]
 800d02a:	4611      	mov	r1, r2
 800d02c:	68f8      	ldr	r0, [r7, #12]
 800d02e:	4798      	blx	r3
 800d030:	e001      	b.n	800d036 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800d032:	2302      	movs	r3, #2
 800d034:	e000      	b.n	800d038 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800d036:	2300      	movs	r3, #0
}
 800d038:	4618      	mov	r0, r3
 800d03a:	3718      	adds	r7, #24
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bd80      	pop	{r7, pc}

0800d040 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b086      	sub	sp, #24
 800d044:	af00      	add	r7, sp, #0
 800d046:	60f8      	str	r0, [r7, #12]
 800d048:	460b      	mov	r3, r1
 800d04a:	607a      	str	r2, [r7, #4]
 800d04c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800d04e:	7afb      	ldrb	r3, [r7, #11]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d17f      	bne.n	800d154 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	3314      	adds	r3, #20
 800d058:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800d060:	2b02      	cmp	r3, #2
 800d062:	d15c      	bne.n	800d11e <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800d064:	697b      	ldr	r3, [r7, #20]
 800d066:	68da      	ldr	r2, [r3, #12]
 800d068:	697b      	ldr	r3, [r7, #20]
 800d06a:	691b      	ldr	r3, [r3, #16]
 800d06c:	429a      	cmp	r2, r3
 800d06e:	d915      	bls.n	800d09c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800d070:	697b      	ldr	r3, [r7, #20]
 800d072:	68da      	ldr	r2, [r3, #12]
 800d074:	697b      	ldr	r3, [r7, #20]
 800d076:	691b      	ldr	r3, [r3, #16]
 800d078:	1ad2      	subs	r2, r2, r3
 800d07a:	697b      	ldr	r3, [r7, #20]
 800d07c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800d07e:	697b      	ldr	r3, [r7, #20]
 800d080:	68db      	ldr	r3, [r3, #12]
 800d082:	b29b      	uxth	r3, r3
 800d084:	461a      	mov	r2, r3
 800d086:	6879      	ldr	r1, [r7, #4]
 800d088:	68f8      	ldr	r0, [r7, #12]
 800d08a:	f000 fe81 	bl	800dd90 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800d08e:	2300      	movs	r3, #0
 800d090:	2200      	movs	r2, #0
 800d092:	2100      	movs	r1, #0
 800d094:	68f8      	ldr	r0, [r7, #12]
 800d096:	f002 f893 	bl	800f1c0 <USBD_LL_PrepareReceive>
 800d09a:	e04e      	b.n	800d13a <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800d09c:	697b      	ldr	r3, [r7, #20]
 800d09e:	689b      	ldr	r3, [r3, #8]
 800d0a0:	697a      	ldr	r2, [r7, #20]
 800d0a2:	6912      	ldr	r2, [r2, #16]
 800d0a4:	fbb3 f1f2 	udiv	r1, r3, r2
 800d0a8:	fb02 f201 	mul.w	r2, r2, r1
 800d0ac:	1a9b      	subs	r3, r3, r2
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d11c      	bne.n	800d0ec <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800d0b2:	697b      	ldr	r3, [r7, #20]
 800d0b4:	689a      	ldr	r2, [r3, #8]
 800d0b6:	697b      	ldr	r3, [r7, #20]
 800d0b8:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800d0ba:	429a      	cmp	r2, r3
 800d0bc:	d316      	bcc.n	800d0ec <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800d0be:	697b      	ldr	r3, [r7, #20]
 800d0c0:	689a      	ldr	r2, [r3, #8]
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800d0c8:	429a      	cmp	r2, r3
 800d0ca:	d20f      	bcs.n	800d0ec <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	2100      	movs	r1, #0
 800d0d0:	68f8      	ldr	r0, [r7, #12]
 800d0d2:	f000 fe5d 	bl	800dd90 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	2200      	movs	r2, #0
 800d0da:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800d0de:	2300      	movs	r3, #0
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	2100      	movs	r1, #0
 800d0e4:	68f8      	ldr	r0, [r7, #12]
 800d0e6:	f002 f86b 	bl	800f1c0 <USBD_LL_PrepareReceive>
 800d0ea:	e026      	b.n	800d13a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d0f2:	68db      	ldr	r3, [r3, #12]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d00a      	beq.n	800d10e <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800d0fe:	2b03      	cmp	r3, #3
 800d100:	d105      	bne.n	800d10e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d108:	68db      	ldr	r3, [r3, #12]
 800d10a:	68f8      	ldr	r0, [r7, #12]
 800d10c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800d10e:	2180      	movs	r1, #128	; 0x80
 800d110:	68f8      	ldr	r0, [r7, #12]
 800d112:	f001 ffa9 	bl	800f068 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800d116:	68f8      	ldr	r0, [r7, #12]
 800d118:	f000 fe8f 	bl	800de3a <USBD_CtlReceiveStatus>
 800d11c:	e00d      	b.n	800d13a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800d124:	2b04      	cmp	r3, #4
 800d126:	d004      	beq.n	800d132 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d103      	bne.n	800d13a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800d132:	2180      	movs	r1, #128	; 0x80
 800d134:	68f8      	ldr	r0, [r7, #12]
 800d136:	f001 ff97 	bl	800f068 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800d140:	2b01      	cmp	r3, #1
 800d142:	d11d      	bne.n	800d180 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800d144:	68f8      	ldr	r0, [r7, #12]
 800d146:	f7ff fe82 	bl	800ce4e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	2200      	movs	r2, #0
 800d14e:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800d152:	e015      	b.n	800d180 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d15a:	695b      	ldr	r3, [r3, #20]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d00d      	beq.n	800d17c <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800d166:	2b03      	cmp	r3, #3
 800d168:	d108      	bne.n	800d17c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d170:	695b      	ldr	r3, [r3, #20]
 800d172:	7afa      	ldrb	r2, [r7, #11]
 800d174:	4611      	mov	r1, r2
 800d176:	68f8      	ldr	r0, [r7, #12]
 800d178:	4798      	blx	r3
 800d17a:	e001      	b.n	800d180 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800d17c:	2302      	movs	r3, #2
 800d17e:	e000      	b.n	800d182 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800d180:	2300      	movs	r3, #0
}
 800d182:	4618      	mov	r0, r3
 800d184:	3718      	adds	r7, #24
 800d186:	46bd      	mov	sp, r7
 800d188:	bd80      	pop	{r7, pc}

0800d18a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800d18a:	b580      	push	{r7, lr}
 800d18c:	b082      	sub	sp, #8
 800d18e:	af00      	add	r7, sp, #0
 800d190:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d192:	2340      	movs	r3, #64	; 0x40
 800d194:	2200      	movs	r2, #0
 800d196:	2100      	movs	r1, #0
 800d198:	6878      	ldr	r0, [r7, #4]
 800d19a:	f001 ff20 	bl	800efde <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	2201      	movs	r2, #1
 800d1a2:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	2240      	movs	r2, #64	; 0x40
 800d1aa:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d1ae:	2340      	movs	r3, #64	; 0x40
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	2180      	movs	r1, #128	; 0x80
 800d1b4:	6878      	ldr	r0, [r7, #4]
 800d1b6:	f001 ff12 	bl	800efde <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	2201      	movs	r2, #1
 800d1be:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	2240      	movs	r2, #64	; 0x40
 800d1c4:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	2201      	movs	r2, #1
 800d1ca:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	2200      	movs	r2, #0
 800d1da:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	2200      	movs	r2, #0
 800d1e0:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d009      	beq.n	800d202 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d1f4:	685b      	ldr	r3, [r3, #4]
 800d1f6:	687a      	ldr	r2, [r7, #4]
 800d1f8:	6852      	ldr	r2, [r2, #4]
 800d1fa:	b2d2      	uxtb	r2, r2
 800d1fc:	4611      	mov	r1, r2
 800d1fe:	6878      	ldr	r0, [r7, #4]
 800d200:	4798      	blx	r3
  }

  return USBD_OK;
 800d202:	2300      	movs	r3, #0
}
 800d204:	4618      	mov	r0, r3
 800d206:	3708      	adds	r7, #8
 800d208:	46bd      	mov	sp, r7
 800d20a:	bd80      	pop	{r7, pc}

0800d20c <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800d20c:	b480      	push	{r7}
 800d20e:	b083      	sub	sp, #12
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
 800d214:	460b      	mov	r3, r1
 800d216:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	78fa      	ldrb	r2, [r7, #3]
 800d21c:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800d21e:	2300      	movs	r3, #0
}
 800d220:	4618      	mov	r0, r3
 800d222:	370c      	adds	r7, #12
 800d224:	46bd      	mov	sp, r7
 800d226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22a:	4770      	bx	lr

0800d22c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800d22c:	b480      	push	{r7}
 800d22e:	b083      	sub	sp, #12
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	2204      	movs	r2, #4
 800d244:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800d248:	2300      	movs	r3, #0
}
 800d24a:	4618      	mov	r0, r3
 800d24c:	370c      	adds	r7, #12
 800d24e:	46bd      	mov	sp, r7
 800d250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d254:	4770      	bx	lr

0800d256 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800d256:	b480      	push	{r7}
 800d258:	b083      	sub	sp, #12
 800d25a:	af00      	add	r7, sp, #0
 800d25c:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800d26a:	2300      	movs	r3, #0
}
 800d26c:	4618      	mov	r0, r3
 800d26e:	370c      	adds	r7, #12
 800d270:	46bd      	mov	sp, r7
 800d272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d276:	4770      	bx	lr

0800d278 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b082      	sub	sp, #8
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d286:	2b03      	cmp	r3, #3
 800d288:	d10b      	bne.n	800d2a2 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d290:	69db      	ldr	r3, [r3, #28]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d005      	beq.n	800d2a2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d29c:	69db      	ldr	r3, [r3, #28]
 800d29e:	6878      	ldr	r0, [r7, #4]
 800d2a0:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800d2a2:	2300      	movs	r3, #0
}
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	3708      	adds	r7, #8
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	bd80      	pop	{r7, pc}

0800d2ac <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800d2ac:	b480      	push	{r7}
 800d2ae:	b083      	sub	sp, #12
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
 800d2b4:	460b      	mov	r3, r1
 800d2b6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800d2b8:	2300      	movs	r3, #0
}
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	370c      	adds	r7, #12
 800d2be:	46bd      	mov	sp, r7
 800d2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c4:	4770      	bx	lr

0800d2c6 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800d2c6:	b480      	push	{r7}
 800d2c8:	b083      	sub	sp, #12
 800d2ca:	af00      	add	r7, sp, #0
 800d2cc:	6078      	str	r0, [r7, #4]
 800d2ce:	460b      	mov	r3, r1
 800d2d0:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800d2d2:	2300      	movs	r3, #0
}
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	370c      	adds	r7, #12
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2de:	4770      	bx	lr

0800d2e0 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 800d2e0:	b480      	push	{r7}
 800d2e2:	b083      	sub	sp, #12
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d2e8:	2300      	movs	r3, #0
}
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	370c      	adds	r7, #12
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f4:	4770      	bx	lr

0800d2f6 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 800d2f6:	b580      	push	{r7, lr}
 800d2f8:	b082      	sub	sp, #8
 800d2fa:	af00      	add	r7, sp, #0
 800d2fc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	2201      	movs	r2, #1
 800d302:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d30c:	685b      	ldr	r3, [r3, #4]
 800d30e:	687a      	ldr	r2, [r7, #4]
 800d310:	6852      	ldr	r2, [r2, #4]
 800d312:	b2d2      	uxtb	r2, r2
 800d314:	4611      	mov	r1, r2
 800d316:	6878      	ldr	r0, [r7, #4]
 800d318:	4798      	blx	r3

  return USBD_OK;
 800d31a:	2300      	movs	r3, #0
}
 800d31c:	4618      	mov	r0, r3
 800d31e:	3708      	adds	r7, #8
 800d320:	46bd      	mov	sp, r7
 800d322:	bd80      	pop	{r7, pc}

0800d324 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b084      	sub	sp, #16
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
 800d32c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d32e:	2300      	movs	r3, #0
 800d330:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	781b      	ldrb	r3, [r3, #0]
 800d336:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d33a:	2b20      	cmp	r3, #32
 800d33c:	d004      	beq.n	800d348 <USBD_StdDevReq+0x24>
 800d33e:	2b40      	cmp	r3, #64	; 0x40
 800d340:	d002      	beq.n	800d348 <USBD_StdDevReq+0x24>
 800d342:	2b00      	cmp	r3, #0
 800d344:	d008      	beq.n	800d358 <USBD_StdDevReq+0x34>
 800d346:	e04c      	b.n	800d3e2 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d34e:	689b      	ldr	r3, [r3, #8]
 800d350:	6839      	ldr	r1, [r7, #0]
 800d352:	6878      	ldr	r0, [r7, #4]
 800d354:	4798      	blx	r3
    break;
 800d356:	e049      	b.n	800d3ec <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800d358:	683b      	ldr	r3, [r7, #0]
 800d35a:	785b      	ldrb	r3, [r3, #1]
 800d35c:	2b09      	cmp	r3, #9
 800d35e:	d83a      	bhi.n	800d3d6 <USBD_StdDevReq+0xb2>
 800d360:	a201      	add	r2, pc, #4	; (adr r2, 800d368 <USBD_StdDevReq+0x44>)
 800d362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d366:	bf00      	nop
 800d368:	0800d3b9 	.word	0x0800d3b9
 800d36c:	0800d3cd 	.word	0x0800d3cd
 800d370:	0800d3d7 	.word	0x0800d3d7
 800d374:	0800d3c3 	.word	0x0800d3c3
 800d378:	0800d3d7 	.word	0x0800d3d7
 800d37c:	0800d39b 	.word	0x0800d39b
 800d380:	0800d391 	.word	0x0800d391
 800d384:	0800d3d7 	.word	0x0800d3d7
 800d388:	0800d3af 	.word	0x0800d3af
 800d38c:	0800d3a5 	.word	0x0800d3a5
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800d390:	6839      	ldr	r1, [r7, #0]
 800d392:	6878      	ldr	r0, [r7, #4]
 800d394:	f000 f9d2 	bl	800d73c <USBD_GetDescriptor>
      break;
 800d398:	e022      	b.n	800d3e0 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800d39a:	6839      	ldr	r1, [r7, #0]
 800d39c:	6878      	ldr	r0, [r7, #4]
 800d39e:	f000 fac7 	bl	800d930 <USBD_SetAddress>
      break;
 800d3a2:	e01d      	b.n	800d3e0 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800d3a4:	6839      	ldr	r1, [r7, #0]
 800d3a6:	6878      	ldr	r0, [r7, #4]
 800d3a8:	f000 fb04 	bl	800d9b4 <USBD_SetConfig>
      break;
 800d3ac:	e018      	b.n	800d3e0 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800d3ae:	6839      	ldr	r1, [r7, #0]
 800d3b0:	6878      	ldr	r0, [r7, #4]
 800d3b2:	f000 fb8d 	bl	800dad0 <USBD_GetConfig>
      break;
 800d3b6:	e013      	b.n	800d3e0 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800d3b8:	6839      	ldr	r1, [r7, #0]
 800d3ba:	6878      	ldr	r0, [r7, #4]
 800d3bc:	f000 fbbc 	bl	800db38 <USBD_GetStatus>
      break;
 800d3c0:	e00e      	b.n	800d3e0 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800d3c2:	6839      	ldr	r1, [r7, #0]
 800d3c4:	6878      	ldr	r0, [r7, #4]
 800d3c6:	f000 fbea 	bl	800db9e <USBD_SetFeature>
      break;
 800d3ca:	e009      	b.n	800d3e0 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800d3cc:	6839      	ldr	r1, [r7, #0]
 800d3ce:	6878      	ldr	r0, [r7, #4]
 800d3d0:	f000 fbf9 	bl	800dbc6 <USBD_ClrFeature>
      break;
 800d3d4:	e004      	b.n	800d3e0 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800d3d6:	6839      	ldr	r1, [r7, #0]
 800d3d8:	6878      	ldr	r0, [r7, #4]
 800d3da:	f000 fc52 	bl	800dc82 <USBD_CtlError>
      break;
 800d3de:	bf00      	nop
    }
    break;
 800d3e0:	e004      	b.n	800d3ec <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800d3e2:	6839      	ldr	r1, [r7, #0]
 800d3e4:	6878      	ldr	r0, [r7, #4]
 800d3e6:	f000 fc4c 	bl	800dc82 <USBD_CtlError>
    break;
 800d3ea:	bf00      	nop
  }

  return ret;
 800d3ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	3710      	adds	r7, #16
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	bd80      	pop	{r7, pc}
 800d3f6:	bf00      	nop

0800d3f8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b084      	sub	sp, #16
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
 800d400:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d402:	2300      	movs	r3, #0
 800d404:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d406:	683b      	ldr	r3, [r7, #0]
 800d408:	781b      	ldrb	r3, [r3, #0]
 800d40a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d40e:	2b20      	cmp	r3, #32
 800d410:	d003      	beq.n	800d41a <USBD_StdItfReq+0x22>
 800d412:	2b40      	cmp	r3, #64	; 0x40
 800d414:	d001      	beq.n	800d41a <USBD_StdItfReq+0x22>
 800d416:	2b00      	cmp	r3, #0
 800d418:	d12a      	bne.n	800d470 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d420:	3b01      	subs	r3, #1
 800d422:	2b02      	cmp	r3, #2
 800d424:	d81d      	bhi.n	800d462 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d426:	683b      	ldr	r3, [r7, #0]
 800d428:	889b      	ldrh	r3, [r3, #4]
 800d42a:	b2db      	uxtb	r3, r3
 800d42c:	2b01      	cmp	r3, #1
 800d42e:	d813      	bhi.n	800d458 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d436:	689b      	ldr	r3, [r3, #8]
 800d438:	6839      	ldr	r1, [r7, #0]
 800d43a:	6878      	ldr	r0, [r7, #4]
 800d43c:	4798      	blx	r3
 800d43e:	4603      	mov	r3, r0
 800d440:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800d442:	683b      	ldr	r3, [r7, #0]
 800d444:	88db      	ldrh	r3, [r3, #6]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d110      	bne.n	800d46c <USBD_StdItfReq+0x74>
 800d44a:	7bfb      	ldrb	r3, [r7, #15]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d10d      	bne.n	800d46c <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 800d450:	6878      	ldr	r0, [r7, #4]
 800d452:	f000 fcdf 	bl	800de14 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800d456:	e009      	b.n	800d46c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800d458:	6839      	ldr	r1, [r7, #0]
 800d45a:	6878      	ldr	r0, [r7, #4]
 800d45c:	f000 fc11 	bl	800dc82 <USBD_CtlError>
      break;
 800d460:	e004      	b.n	800d46c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800d462:	6839      	ldr	r1, [r7, #0]
 800d464:	6878      	ldr	r0, [r7, #4]
 800d466:	f000 fc0c 	bl	800dc82 <USBD_CtlError>
      break;
 800d46a:	e000      	b.n	800d46e <USBD_StdItfReq+0x76>
      break;
 800d46c:	bf00      	nop
    }
    break;
 800d46e:	e004      	b.n	800d47a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800d470:	6839      	ldr	r1, [r7, #0]
 800d472:	6878      	ldr	r0, [r7, #4]
 800d474:	f000 fc05 	bl	800dc82 <USBD_CtlError>
    break;
 800d478:	bf00      	nop
  }

  return USBD_OK;
 800d47a:	2300      	movs	r3, #0
}
 800d47c:	4618      	mov	r0, r3
 800d47e:	3710      	adds	r7, #16
 800d480:	46bd      	mov	sp, r7
 800d482:	bd80      	pop	{r7, pc}

0800d484 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800d484:	b580      	push	{r7, lr}
 800d486:	b084      	sub	sp, #16
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
 800d48c:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800d48e:	2300      	movs	r3, #0
 800d490:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800d492:	683b      	ldr	r3, [r7, #0]
 800d494:	889b      	ldrh	r3, [r3, #4]
 800d496:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d498:	683b      	ldr	r3, [r7, #0]
 800d49a:	781b      	ldrb	r3, [r3, #0]
 800d49c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d4a0:	2b20      	cmp	r3, #32
 800d4a2:	d004      	beq.n	800d4ae <USBD_StdEPReq+0x2a>
 800d4a4:	2b40      	cmp	r3, #64	; 0x40
 800d4a6:	d002      	beq.n	800d4ae <USBD_StdEPReq+0x2a>
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d008      	beq.n	800d4be <USBD_StdEPReq+0x3a>
 800d4ac:	e13b      	b.n	800d726 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d4b4:	689b      	ldr	r3, [r3, #8]
 800d4b6:	6839      	ldr	r1, [r7, #0]
 800d4b8:	6878      	ldr	r0, [r7, #4]
 800d4ba:	4798      	blx	r3
    break;
 800d4bc:	e138      	b.n	800d730 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800d4be:	683b      	ldr	r3, [r7, #0]
 800d4c0:	781b      	ldrb	r3, [r3, #0]
 800d4c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d4c6:	2b20      	cmp	r3, #32
 800d4c8:	d10a      	bne.n	800d4e0 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d4d0:	689b      	ldr	r3, [r3, #8]
 800d4d2:	6839      	ldr	r1, [r7, #0]
 800d4d4:	6878      	ldr	r0, [r7, #4]
 800d4d6:	4798      	blx	r3
 800d4d8:	4603      	mov	r3, r0
 800d4da:	73fb      	strb	r3, [r7, #15]

      return ret;
 800d4dc:	7bfb      	ldrb	r3, [r7, #15]
 800d4de:	e128      	b.n	800d732 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 800d4e0:	683b      	ldr	r3, [r7, #0]
 800d4e2:	785b      	ldrb	r3, [r3, #1]
 800d4e4:	2b01      	cmp	r3, #1
 800d4e6:	d03e      	beq.n	800d566 <USBD_StdEPReq+0xe2>
 800d4e8:	2b03      	cmp	r3, #3
 800d4ea:	d002      	beq.n	800d4f2 <USBD_StdEPReq+0x6e>
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d070      	beq.n	800d5d2 <USBD_StdEPReq+0x14e>
 800d4f0:	e113      	b.n	800d71a <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d4f8:	2b02      	cmp	r3, #2
 800d4fa:	d002      	beq.n	800d502 <USBD_StdEPReq+0x7e>
 800d4fc:	2b03      	cmp	r3, #3
 800d4fe:	d015      	beq.n	800d52c <USBD_StdEPReq+0xa8>
 800d500:	e02b      	b.n	800d55a <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d502:	7bbb      	ldrb	r3, [r7, #14]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d00c      	beq.n	800d522 <USBD_StdEPReq+0x9e>
 800d508:	7bbb      	ldrb	r3, [r7, #14]
 800d50a:	2b80      	cmp	r3, #128	; 0x80
 800d50c:	d009      	beq.n	800d522 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800d50e:	7bbb      	ldrb	r3, [r7, #14]
 800d510:	4619      	mov	r1, r3
 800d512:	6878      	ldr	r0, [r7, #4]
 800d514:	f001 fda8 	bl	800f068 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800d518:	2180      	movs	r1, #128	; 0x80
 800d51a:	6878      	ldr	r0, [r7, #4]
 800d51c:	f001 fda4 	bl	800f068 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800d520:	e020      	b.n	800d564 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 800d522:	6839      	ldr	r1, [r7, #0]
 800d524:	6878      	ldr	r0, [r7, #4]
 800d526:	f000 fbac 	bl	800dc82 <USBD_CtlError>
        break;
 800d52a:	e01b      	b.n	800d564 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800d52c:	683b      	ldr	r3, [r7, #0]
 800d52e:	885b      	ldrh	r3, [r3, #2]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d10e      	bne.n	800d552 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d534:	7bbb      	ldrb	r3, [r7, #14]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d00b      	beq.n	800d552 <USBD_StdEPReq+0xce>
 800d53a:	7bbb      	ldrb	r3, [r7, #14]
 800d53c:	2b80      	cmp	r3, #128	; 0x80
 800d53e:	d008      	beq.n	800d552 <USBD_StdEPReq+0xce>
 800d540:	683b      	ldr	r3, [r7, #0]
 800d542:	88db      	ldrh	r3, [r3, #6]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d104      	bne.n	800d552 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800d548:	7bbb      	ldrb	r3, [r7, #14]
 800d54a:	4619      	mov	r1, r3
 800d54c:	6878      	ldr	r0, [r7, #4]
 800d54e:	f001 fd8b 	bl	800f068 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800d552:	6878      	ldr	r0, [r7, #4]
 800d554:	f000 fc5e 	bl	800de14 <USBD_CtlSendStatus>

        break;
 800d558:	e004      	b.n	800d564 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 800d55a:	6839      	ldr	r1, [r7, #0]
 800d55c:	6878      	ldr	r0, [r7, #4]
 800d55e:	f000 fb90 	bl	800dc82 <USBD_CtlError>
        break;
 800d562:	bf00      	nop
      }
      break;
 800d564:	e0de      	b.n	800d724 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d56c:	2b02      	cmp	r3, #2
 800d56e:	d002      	beq.n	800d576 <USBD_StdEPReq+0xf2>
 800d570:	2b03      	cmp	r3, #3
 800d572:	d015      	beq.n	800d5a0 <USBD_StdEPReq+0x11c>
 800d574:	e026      	b.n	800d5c4 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d576:	7bbb      	ldrb	r3, [r7, #14]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d00c      	beq.n	800d596 <USBD_StdEPReq+0x112>
 800d57c:	7bbb      	ldrb	r3, [r7, #14]
 800d57e:	2b80      	cmp	r3, #128	; 0x80
 800d580:	d009      	beq.n	800d596 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800d582:	7bbb      	ldrb	r3, [r7, #14]
 800d584:	4619      	mov	r1, r3
 800d586:	6878      	ldr	r0, [r7, #4]
 800d588:	f001 fd6e 	bl	800f068 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800d58c:	2180      	movs	r1, #128	; 0x80
 800d58e:	6878      	ldr	r0, [r7, #4]
 800d590:	f001 fd6a 	bl	800f068 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800d594:	e01c      	b.n	800d5d0 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800d596:	6839      	ldr	r1, [r7, #0]
 800d598:	6878      	ldr	r0, [r7, #4]
 800d59a:	f000 fb72 	bl	800dc82 <USBD_CtlError>
        break;
 800d59e:	e017      	b.n	800d5d0 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800d5a0:	683b      	ldr	r3, [r7, #0]
 800d5a2:	885b      	ldrh	r3, [r3, #2]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d112      	bne.n	800d5ce <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800d5a8:	7bbb      	ldrb	r3, [r7, #14]
 800d5aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d004      	beq.n	800d5bc <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800d5b2:	7bbb      	ldrb	r3, [r7, #14]
 800d5b4:	4619      	mov	r1, r3
 800d5b6:	6878      	ldr	r0, [r7, #4]
 800d5b8:	f001 fd75 	bl	800f0a6 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800d5bc:	6878      	ldr	r0, [r7, #4]
 800d5be:	f000 fc29 	bl	800de14 <USBD_CtlSendStatus>
        }
        break;
 800d5c2:	e004      	b.n	800d5ce <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800d5c4:	6839      	ldr	r1, [r7, #0]
 800d5c6:	6878      	ldr	r0, [r7, #4]
 800d5c8:	f000 fb5b 	bl	800dc82 <USBD_CtlError>
        break;
 800d5cc:	e000      	b.n	800d5d0 <USBD_StdEPReq+0x14c>
        break;
 800d5ce:	bf00      	nop
      }
      break;
 800d5d0:	e0a8      	b.n	800d724 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d5d8:	2b02      	cmp	r3, #2
 800d5da:	d002      	beq.n	800d5e2 <USBD_StdEPReq+0x15e>
 800d5dc:	2b03      	cmp	r3, #3
 800d5de:	d031      	beq.n	800d644 <USBD_StdEPReq+0x1c0>
 800d5e0:	e095      	b.n	800d70e <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d5e2:	7bbb      	ldrb	r3, [r7, #14]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d007      	beq.n	800d5f8 <USBD_StdEPReq+0x174>
 800d5e8:	7bbb      	ldrb	r3, [r7, #14]
 800d5ea:	2b80      	cmp	r3, #128	; 0x80
 800d5ec:	d004      	beq.n	800d5f8 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800d5ee:	6839      	ldr	r1, [r7, #0]
 800d5f0:	6878      	ldr	r0, [r7, #4]
 800d5f2:	f000 fb46 	bl	800dc82 <USBD_CtlError>
          break;
 800d5f6:	e08f      	b.n	800d718 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800d5f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	da0b      	bge.n	800d618 <USBD_StdEPReq+0x194>
 800d600:	7bbb      	ldrb	r3, [r7, #14]
 800d602:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d606:	4613      	mov	r3, r2
 800d608:	009b      	lsls	r3, r3, #2
 800d60a:	4413      	add	r3, r2
 800d60c:	009b      	lsls	r3, r3, #2
 800d60e:	3310      	adds	r3, #16
 800d610:	687a      	ldr	r2, [r7, #4]
 800d612:	4413      	add	r3, r2
 800d614:	3304      	adds	r3, #4
 800d616:	e00a      	b.n	800d62e <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 800d618:	7bbb      	ldrb	r3, [r7, #14]
 800d61a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800d61e:	4613      	mov	r3, r2
 800d620:	009b      	lsls	r3, r3, #2
 800d622:	4413      	add	r3, r2
 800d624:	009b      	lsls	r3, r3, #2
 800d626:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800d62a:	687a      	ldr	r2, [r7, #4]
 800d62c:	4413      	add	r3, r2
 800d62e:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800d630:	68bb      	ldr	r3, [r7, #8]
 800d632:	2200      	movs	r2, #0
 800d634:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800d636:	68bb      	ldr	r3, [r7, #8]
 800d638:	2202      	movs	r2, #2
 800d63a:	4619      	mov	r1, r3
 800d63c:	6878      	ldr	r0, [r7, #4]
 800d63e:	f000 fb8b 	bl	800dd58 <USBD_CtlSendData>
          break;
 800d642:	e069      	b.n	800d718 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800d644:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	da11      	bge.n	800d670 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d64c:	7bbb      	ldrb	r3, [r7, #14]
 800d64e:	f003 020f 	and.w	r2, r3, #15
 800d652:	6879      	ldr	r1, [r7, #4]
 800d654:	4613      	mov	r3, r2
 800d656:	009b      	lsls	r3, r3, #2
 800d658:	4413      	add	r3, r2
 800d65a:	009b      	lsls	r3, r3, #2
 800d65c:	440b      	add	r3, r1
 800d65e:	3318      	adds	r3, #24
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d117      	bne.n	800d696 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800d666:	6839      	ldr	r1, [r7, #0]
 800d668:	6878      	ldr	r0, [r7, #4]
 800d66a:	f000 fb0a 	bl	800dc82 <USBD_CtlError>
            break;
 800d66e:	e053      	b.n	800d718 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d670:	7bbb      	ldrb	r3, [r7, #14]
 800d672:	f003 020f 	and.w	r2, r3, #15
 800d676:	6879      	ldr	r1, [r7, #4]
 800d678:	4613      	mov	r3, r2
 800d67a:	009b      	lsls	r3, r3, #2
 800d67c:	4413      	add	r3, r2
 800d67e:	009b      	lsls	r3, r3, #2
 800d680:	440b      	add	r3, r1
 800d682:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d104      	bne.n	800d696 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800d68c:	6839      	ldr	r1, [r7, #0]
 800d68e:	6878      	ldr	r0, [r7, #4]
 800d690:	f000 faf7 	bl	800dc82 <USBD_CtlError>
            break;
 800d694:	e040      	b.n	800d718 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800d696:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	da0b      	bge.n	800d6b6 <USBD_StdEPReq+0x232>
 800d69e:	7bbb      	ldrb	r3, [r7, #14]
 800d6a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d6a4:	4613      	mov	r3, r2
 800d6a6:	009b      	lsls	r3, r3, #2
 800d6a8:	4413      	add	r3, r2
 800d6aa:	009b      	lsls	r3, r3, #2
 800d6ac:	3310      	adds	r3, #16
 800d6ae:	687a      	ldr	r2, [r7, #4]
 800d6b0:	4413      	add	r3, r2
 800d6b2:	3304      	adds	r3, #4
 800d6b4:	e00a      	b.n	800d6cc <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 800d6b6:	7bbb      	ldrb	r3, [r7, #14]
 800d6b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800d6bc:	4613      	mov	r3, r2
 800d6be:	009b      	lsls	r3, r3, #2
 800d6c0:	4413      	add	r3, r2
 800d6c2:	009b      	lsls	r3, r3, #2
 800d6c4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800d6c8:	687a      	ldr	r2, [r7, #4]
 800d6ca:	4413      	add	r3, r2
 800d6cc:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d6ce:	7bbb      	ldrb	r3, [r7, #14]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d002      	beq.n	800d6da <USBD_StdEPReq+0x256>
 800d6d4:	7bbb      	ldrb	r3, [r7, #14]
 800d6d6:	2b80      	cmp	r3, #128	; 0x80
 800d6d8:	d103      	bne.n	800d6e2 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 800d6da:	68bb      	ldr	r3, [r7, #8]
 800d6dc:	2200      	movs	r2, #0
 800d6de:	601a      	str	r2, [r3, #0]
 800d6e0:	e00e      	b.n	800d700 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800d6e2:	7bbb      	ldrb	r3, [r7, #14]
 800d6e4:	4619      	mov	r1, r3
 800d6e6:	6878      	ldr	r0, [r7, #4]
 800d6e8:	f001 fcfc 	bl	800f0e4 <USBD_LL_IsStallEP>
 800d6ec:	4603      	mov	r3, r0
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d003      	beq.n	800d6fa <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 800d6f2:	68bb      	ldr	r3, [r7, #8]
 800d6f4:	2201      	movs	r2, #1
 800d6f6:	601a      	str	r2, [r3, #0]
 800d6f8:	e002      	b.n	800d700 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 800d6fa:	68bb      	ldr	r3, [r7, #8]
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800d700:	68bb      	ldr	r3, [r7, #8]
 800d702:	2202      	movs	r2, #2
 800d704:	4619      	mov	r1, r3
 800d706:	6878      	ldr	r0, [r7, #4]
 800d708:	f000 fb26 	bl	800dd58 <USBD_CtlSendData>
          break;
 800d70c:	e004      	b.n	800d718 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 800d70e:	6839      	ldr	r1, [r7, #0]
 800d710:	6878      	ldr	r0, [r7, #4]
 800d712:	f000 fab6 	bl	800dc82 <USBD_CtlError>
        break;
 800d716:	bf00      	nop
      }
      break;
 800d718:	e004      	b.n	800d724 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 800d71a:	6839      	ldr	r1, [r7, #0]
 800d71c:	6878      	ldr	r0, [r7, #4]
 800d71e:	f000 fab0 	bl	800dc82 <USBD_CtlError>
      break;
 800d722:	bf00      	nop
    }
    break;
 800d724:	e004      	b.n	800d730 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 800d726:	6839      	ldr	r1, [r7, #0]
 800d728:	6878      	ldr	r0, [r7, #4]
 800d72a:	f000 faaa 	bl	800dc82 <USBD_CtlError>
    break;
 800d72e:	bf00      	nop
  }

  return ret;
 800d730:	7bfb      	ldrb	r3, [r7, #15]
}
 800d732:	4618      	mov	r0, r3
 800d734:	3710      	adds	r7, #16
 800d736:	46bd      	mov	sp, r7
 800d738:	bd80      	pop	{r7, pc}
	...

0800d73c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800d73c:	b580      	push	{r7, lr}
 800d73e:	b084      	sub	sp, #16
 800d740:	af00      	add	r7, sp, #0
 800d742:	6078      	str	r0, [r7, #4]
 800d744:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800d746:	683b      	ldr	r3, [r7, #0]
 800d748:	885b      	ldrh	r3, [r3, #2]
 800d74a:	0a1b      	lsrs	r3, r3, #8
 800d74c:	b29b      	uxth	r3, r3
 800d74e:	3b01      	subs	r3, #1
 800d750:	2b06      	cmp	r3, #6
 800d752:	f200 80c9 	bhi.w	800d8e8 <USBD_GetDescriptor+0x1ac>
 800d756:	a201      	add	r2, pc, #4	; (adr r2, 800d75c <USBD_GetDescriptor+0x20>)
 800d758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d75c:	0800d779 	.word	0x0800d779
 800d760:	0800d791 	.word	0x0800d791
 800d764:	0800d7d1 	.word	0x0800d7d1
 800d768:	0800d8e9 	.word	0x0800d8e9
 800d76c:	0800d8e9 	.word	0x0800d8e9
 800d770:	0800d895 	.word	0x0800d895
 800d774:	0800d8bb 	.word	0x0800d8bb
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	687a      	ldr	r2, [r7, #4]
 800d782:	7c12      	ldrb	r2, [r2, #16]
 800d784:	f107 010a 	add.w	r1, r7, #10
 800d788:	4610      	mov	r0, r2
 800d78a:	4798      	blx	r3
 800d78c:	60f8      	str	r0, [r7, #12]
    break;
 800d78e:	e0b0      	b.n	800d8f2 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	7c1b      	ldrb	r3, [r3, #16]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d10d      	bne.n	800d7b4 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d79e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7a0:	f107 020a 	add.w	r2, r7, #10
 800d7a4:	4610      	mov	r0, r2
 800d7a6:	4798      	blx	r3
 800d7a8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	3301      	adds	r3, #1
 800d7ae:	2202      	movs	r2, #2
 800d7b0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800d7b2:	e09e      	b.n	800d8f2 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d7ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7bc:	f107 020a 	add.w	r2, r7, #10
 800d7c0:	4610      	mov	r0, r2
 800d7c2:	4798      	blx	r3
 800d7c4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	3301      	adds	r3, #1
 800d7ca:	2202      	movs	r2, #2
 800d7cc:	701a      	strb	r2, [r3, #0]
    break;
 800d7ce:	e090      	b.n	800d8f2 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800d7d0:	683b      	ldr	r3, [r7, #0]
 800d7d2:	885b      	ldrh	r3, [r3, #2]
 800d7d4:	b2db      	uxtb	r3, r3
 800d7d6:	2b05      	cmp	r3, #5
 800d7d8:	d856      	bhi.n	800d888 <USBD_GetDescriptor+0x14c>
 800d7da:	a201      	add	r2, pc, #4	; (adr r2, 800d7e0 <USBD_GetDescriptor+0xa4>)
 800d7dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7e0:	0800d7f9 	.word	0x0800d7f9
 800d7e4:	0800d811 	.word	0x0800d811
 800d7e8:	0800d829 	.word	0x0800d829
 800d7ec:	0800d841 	.word	0x0800d841
 800d7f0:	0800d859 	.word	0x0800d859
 800d7f4:	0800d871 	.word	0x0800d871
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800d7fe:	685b      	ldr	r3, [r3, #4]
 800d800:	687a      	ldr	r2, [r7, #4]
 800d802:	7c12      	ldrb	r2, [r2, #16]
 800d804:	f107 010a 	add.w	r1, r7, #10
 800d808:	4610      	mov	r0, r2
 800d80a:	4798      	blx	r3
 800d80c:	60f8      	str	r0, [r7, #12]
      break;
 800d80e:	e040      	b.n	800d892 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800d816:	689b      	ldr	r3, [r3, #8]
 800d818:	687a      	ldr	r2, [r7, #4]
 800d81a:	7c12      	ldrb	r2, [r2, #16]
 800d81c:	f107 010a 	add.w	r1, r7, #10
 800d820:	4610      	mov	r0, r2
 800d822:	4798      	blx	r3
 800d824:	60f8      	str	r0, [r7, #12]
      break;
 800d826:	e034      	b.n	800d892 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800d82e:	68db      	ldr	r3, [r3, #12]
 800d830:	687a      	ldr	r2, [r7, #4]
 800d832:	7c12      	ldrb	r2, [r2, #16]
 800d834:	f107 010a 	add.w	r1, r7, #10
 800d838:	4610      	mov	r0, r2
 800d83a:	4798      	blx	r3
 800d83c:	60f8      	str	r0, [r7, #12]
      break;
 800d83e:	e028      	b.n	800d892 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800d846:	691b      	ldr	r3, [r3, #16]
 800d848:	687a      	ldr	r2, [r7, #4]
 800d84a:	7c12      	ldrb	r2, [r2, #16]
 800d84c:	f107 010a 	add.w	r1, r7, #10
 800d850:	4610      	mov	r0, r2
 800d852:	4798      	blx	r3
 800d854:	60f8      	str	r0, [r7, #12]
      break;
 800d856:	e01c      	b.n	800d892 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800d85e:	695b      	ldr	r3, [r3, #20]
 800d860:	687a      	ldr	r2, [r7, #4]
 800d862:	7c12      	ldrb	r2, [r2, #16]
 800d864:	f107 010a 	add.w	r1, r7, #10
 800d868:	4610      	mov	r0, r2
 800d86a:	4798      	blx	r3
 800d86c:	60f8      	str	r0, [r7, #12]
      break;
 800d86e:	e010      	b.n	800d892 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800d876:	699b      	ldr	r3, [r3, #24]
 800d878:	687a      	ldr	r2, [r7, #4]
 800d87a:	7c12      	ldrb	r2, [r2, #16]
 800d87c:	f107 010a 	add.w	r1, r7, #10
 800d880:	4610      	mov	r0, r2
 800d882:	4798      	blx	r3
 800d884:	60f8      	str	r0, [r7, #12]
      break;
 800d886:	e004      	b.n	800d892 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800d888:	6839      	ldr	r1, [r7, #0]
 800d88a:	6878      	ldr	r0, [r7, #4]
 800d88c:	f000 f9f9 	bl	800dc82 <USBD_CtlError>
      return;
 800d890:	e04b      	b.n	800d92a <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800d892:	e02e      	b.n	800d8f2 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	7c1b      	ldrb	r3, [r3, #16]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d109      	bne.n	800d8b0 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d8a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8a4:	f107 020a 	add.w	r2, r7, #10
 800d8a8:	4610      	mov	r0, r2
 800d8aa:	4798      	blx	r3
 800d8ac:	60f8      	str	r0, [r7, #12]
      break;
 800d8ae:	e020      	b.n	800d8f2 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800d8b0:	6839      	ldr	r1, [r7, #0]
 800d8b2:	6878      	ldr	r0, [r7, #4]
 800d8b4:	f000 f9e5 	bl	800dc82 <USBD_CtlError>
      return;
 800d8b8:	e037      	b.n	800d92a <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	7c1b      	ldrb	r3, [r3, #16]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d10d      	bne.n	800d8de <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d8c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8ca:	f107 020a 	add.w	r2, r7, #10
 800d8ce:	4610      	mov	r0, r2
 800d8d0:	4798      	blx	r3
 800d8d2:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	3301      	adds	r3, #1
 800d8d8:	2207      	movs	r2, #7
 800d8da:	701a      	strb	r2, [r3, #0]
      break;
 800d8dc:	e009      	b.n	800d8f2 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800d8de:	6839      	ldr	r1, [r7, #0]
 800d8e0:	6878      	ldr	r0, [r7, #4]
 800d8e2:	f000 f9ce 	bl	800dc82 <USBD_CtlError>
      return;
 800d8e6:	e020      	b.n	800d92a <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 800d8e8:	6839      	ldr	r1, [r7, #0]
 800d8ea:	6878      	ldr	r0, [r7, #4]
 800d8ec:	f000 f9c9 	bl	800dc82 <USBD_CtlError>
    return;
 800d8f0:	e01b      	b.n	800d92a <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800d8f2:	897b      	ldrh	r3, [r7, #10]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d011      	beq.n	800d91c <USBD_GetDescriptor+0x1e0>
 800d8f8:	683b      	ldr	r3, [r7, #0]
 800d8fa:	88db      	ldrh	r3, [r3, #6]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d00d      	beq.n	800d91c <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 800d900:	683b      	ldr	r3, [r7, #0]
 800d902:	88da      	ldrh	r2, [r3, #6]
 800d904:	897b      	ldrh	r3, [r7, #10]
 800d906:	4293      	cmp	r3, r2
 800d908:	bf28      	it	cs
 800d90a:	4613      	movcs	r3, r2
 800d90c:	b29b      	uxth	r3, r3
 800d90e:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800d910:	897b      	ldrh	r3, [r7, #10]
 800d912:	461a      	mov	r2, r3
 800d914:	68f9      	ldr	r1, [r7, #12]
 800d916:	6878      	ldr	r0, [r7, #4]
 800d918:	f000 fa1e 	bl	800dd58 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	88db      	ldrh	r3, [r3, #6]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d102      	bne.n	800d92a <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800d924:	6878      	ldr	r0, [r7, #4]
 800d926:	f000 fa75 	bl	800de14 <USBD_CtlSendStatus>
  }
}
 800d92a:	3710      	adds	r7, #16
 800d92c:	46bd      	mov	sp, r7
 800d92e:	bd80      	pop	{r7, pc}

0800d930 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800d930:	b580      	push	{r7, lr}
 800d932:	b084      	sub	sp, #16
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
 800d938:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d93a:	683b      	ldr	r3, [r7, #0]
 800d93c:	889b      	ldrh	r3, [r3, #4]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d130      	bne.n	800d9a4 <USBD_SetAddress+0x74>
 800d942:	683b      	ldr	r3, [r7, #0]
 800d944:	88db      	ldrh	r3, [r3, #6]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d12c      	bne.n	800d9a4 <USBD_SetAddress+0x74>
 800d94a:	683b      	ldr	r3, [r7, #0]
 800d94c:	885b      	ldrh	r3, [r3, #2]
 800d94e:	2b7f      	cmp	r3, #127	; 0x7f
 800d950:	d828      	bhi.n	800d9a4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d952:	683b      	ldr	r3, [r7, #0]
 800d954:	885b      	ldrh	r3, [r3, #2]
 800d956:	b2db      	uxtb	r3, r3
 800d958:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d95c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d964:	2b03      	cmp	r3, #3
 800d966:	d104      	bne.n	800d972 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800d968:	6839      	ldr	r1, [r7, #0]
 800d96a:	6878      	ldr	r0, [r7, #4]
 800d96c:	f000 f989 	bl	800dc82 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d970:	e01c      	b.n	800d9ac <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	7bfa      	ldrb	r2, [r7, #15]
 800d976:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d97a:	7bfb      	ldrb	r3, [r7, #15]
 800d97c:	4619      	mov	r1, r3
 800d97e:	6878      	ldr	r0, [r7, #4]
 800d980:	f001 fbdc 	bl	800f13c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800d984:	6878      	ldr	r0, [r7, #4]
 800d986:	f000 fa45 	bl	800de14 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d98a:	7bfb      	ldrb	r3, [r7, #15]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d004      	beq.n	800d99a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	2202      	movs	r2, #2
 800d994:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d998:	e008      	b.n	800d9ac <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	2201      	movs	r2, #1
 800d99e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9a2:	e003      	b.n	800d9ac <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d9a4:	6839      	ldr	r1, [r7, #0]
 800d9a6:	6878      	ldr	r0, [r7, #4]
 800d9a8:	f000 f96b 	bl	800dc82 <USBD_CtlError>
  }
}
 800d9ac:	bf00      	nop
 800d9ae:	3710      	adds	r7, #16
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	bd80      	pop	{r7, pc}

0800d9b4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b082      	sub	sp, #8
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]
 800d9bc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d9be:	683b      	ldr	r3, [r7, #0]
 800d9c0:	885b      	ldrh	r3, [r3, #2]
 800d9c2:	b2da      	uxtb	r2, r3
 800d9c4:	4b41      	ldr	r3, [pc, #260]	; (800dacc <USBD_SetConfig+0x118>)
 800d9c6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d9c8:	4b40      	ldr	r3, [pc, #256]	; (800dacc <USBD_SetConfig+0x118>)
 800d9ca:	781b      	ldrb	r3, [r3, #0]
 800d9cc:	2b01      	cmp	r3, #1
 800d9ce:	d904      	bls.n	800d9da <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800d9d0:	6839      	ldr	r1, [r7, #0]
 800d9d2:	6878      	ldr	r0, [r7, #4]
 800d9d4:	f000 f955 	bl	800dc82 <USBD_CtlError>
 800d9d8:	e075      	b.n	800dac6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d9e0:	2b02      	cmp	r3, #2
 800d9e2:	d002      	beq.n	800d9ea <USBD_SetConfig+0x36>
 800d9e4:	2b03      	cmp	r3, #3
 800d9e6:	d023      	beq.n	800da30 <USBD_SetConfig+0x7c>
 800d9e8:	e062      	b.n	800dab0 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800d9ea:	4b38      	ldr	r3, [pc, #224]	; (800dacc <USBD_SetConfig+0x118>)
 800d9ec:	781b      	ldrb	r3, [r3, #0]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d01a      	beq.n	800da28 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800d9f2:	4b36      	ldr	r3, [pc, #216]	; (800dacc <USBD_SetConfig+0x118>)
 800d9f4:	781b      	ldrb	r3, [r3, #0]
 800d9f6:	461a      	mov	r2, r3
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	2203      	movs	r2, #3
 800da00:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800da04:	4b31      	ldr	r3, [pc, #196]	; (800dacc <USBD_SetConfig+0x118>)
 800da06:	781b      	ldrb	r3, [r3, #0]
 800da08:	4619      	mov	r1, r3
 800da0a:	6878      	ldr	r0, [r7, #4]
 800da0c:	f7ff fa2a 	bl	800ce64 <USBD_SetClassConfig>
 800da10:	4603      	mov	r3, r0
 800da12:	2b02      	cmp	r3, #2
 800da14:	d104      	bne.n	800da20 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800da16:	6839      	ldr	r1, [r7, #0]
 800da18:	6878      	ldr	r0, [r7, #4]
 800da1a:	f000 f932 	bl	800dc82 <USBD_CtlError>
          return;
 800da1e:	e052      	b.n	800dac6 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800da20:	6878      	ldr	r0, [r7, #4]
 800da22:	f000 f9f7 	bl	800de14 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800da26:	e04e      	b.n	800dac6 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800da28:	6878      	ldr	r0, [r7, #4]
 800da2a:	f000 f9f3 	bl	800de14 <USBD_CtlSendStatus>
      break;
 800da2e:	e04a      	b.n	800dac6 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800da30:	4b26      	ldr	r3, [pc, #152]	; (800dacc <USBD_SetConfig+0x118>)
 800da32:	781b      	ldrb	r3, [r3, #0]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d112      	bne.n	800da5e <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2202      	movs	r2, #2
 800da3c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800da40:	4b22      	ldr	r3, [pc, #136]	; (800dacc <USBD_SetConfig+0x118>)
 800da42:	781b      	ldrb	r3, [r3, #0]
 800da44:	461a      	mov	r2, r3
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800da4a:	4b20      	ldr	r3, [pc, #128]	; (800dacc <USBD_SetConfig+0x118>)
 800da4c:	781b      	ldrb	r3, [r3, #0]
 800da4e:	4619      	mov	r1, r3
 800da50:	6878      	ldr	r0, [r7, #4]
 800da52:	f7ff fa26 	bl	800cea2 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800da56:	6878      	ldr	r0, [r7, #4]
 800da58:	f000 f9dc 	bl	800de14 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800da5c:	e033      	b.n	800dac6 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800da5e:	4b1b      	ldr	r3, [pc, #108]	; (800dacc <USBD_SetConfig+0x118>)
 800da60:	781b      	ldrb	r3, [r3, #0]
 800da62:	461a      	mov	r2, r3
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	685b      	ldr	r3, [r3, #4]
 800da68:	429a      	cmp	r2, r3
 800da6a:	d01d      	beq.n	800daa8 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	685b      	ldr	r3, [r3, #4]
 800da70:	b2db      	uxtb	r3, r3
 800da72:	4619      	mov	r1, r3
 800da74:	6878      	ldr	r0, [r7, #4]
 800da76:	f7ff fa14 	bl	800cea2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800da7a:	4b14      	ldr	r3, [pc, #80]	; (800dacc <USBD_SetConfig+0x118>)
 800da7c:	781b      	ldrb	r3, [r3, #0]
 800da7e:	461a      	mov	r2, r3
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800da84:	4b11      	ldr	r3, [pc, #68]	; (800dacc <USBD_SetConfig+0x118>)
 800da86:	781b      	ldrb	r3, [r3, #0]
 800da88:	4619      	mov	r1, r3
 800da8a:	6878      	ldr	r0, [r7, #4]
 800da8c:	f7ff f9ea 	bl	800ce64 <USBD_SetClassConfig>
 800da90:	4603      	mov	r3, r0
 800da92:	2b02      	cmp	r3, #2
 800da94:	d104      	bne.n	800daa0 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800da96:	6839      	ldr	r1, [r7, #0]
 800da98:	6878      	ldr	r0, [r7, #4]
 800da9a:	f000 f8f2 	bl	800dc82 <USBD_CtlError>
          return;
 800da9e:	e012      	b.n	800dac6 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800daa0:	6878      	ldr	r0, [r7, #4]
 800daa2:	f000 f9b7 	bl	800de14 <USBD_CtlSendStatus>
      break;
 800daa6:	e00e      	b.n	800dac6 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800daa8:	6878      	ldr	r0, [r7, #4]
 800daaa:	f000 f9b3 	bl	800de14 <USBD_CtlSendStatus>
      break;
 800daae:	e00a      	b.n	800dac6 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800dab0:	6839      	ldr	r1, [r7, #0]
 800dab2:	6878      	ldr	r0, [r7, #4]
 800dab4:	f000 f8e5 	bl	800dc82 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800dab8:	4b04      	ldr	r3, [pc, #16]	; (800dacc <USBD_SetConfig+0x118>)
 800daba:	781b      	ldrb	r3, [r3, #0]
 800dabc:	4619      	mov	r1, r3
 800dabe:	6878      	ldr	r0, [r7, #4]
 800dac0:	f7ff f9ef 	bl	800cea2 <USBD_ClrClassConfig>
      break;
 800dac4:	bf00      	nop
    }
  }
}
 800dac6:	3708      	adds	r7, #8
 800dac8:	46bd      	mov	sp, r7
 800daca:	bd80      	pop	{r7, pc}
 800dacc:	20000784 	.word	0x20000784

0800dad0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b082      	sub	sp, #8
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
 800dad8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800dada:	683b      	ldr	r3, [r7, #0]
 800dadc:	88db      	ldrh	r3, [r3, #6]
 800dade:	2b01      	cmp	r3, #1
 800dae0:	d004      	beq.n	800daec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800dae2:	6839      	ldr	r1, [r7, #0]
 800dae4:	6878      	ldr	r0, [r7, #4]
 800dae6:	f000 f8cc 	bl	800dc82 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800daea:	e021      	b.n	800db30 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800daf2:	2b01      	cmp	r3, #1
 800daf4:	db17      	blt.n	800db26 <USBD_GetConfig+0x56>
 800daf6:	2b02      	cmp	r3, #2
 800daf8:	dd02      	ble.n	800db00 <USBD_GetConfig+0x30>
 800dafa:	2b03      	cmp	r3, #3
 800dafc:	d00b      	beq.n	800db16 <USBD_GetConfig+0x46>
 800dafe:	e012      	b.n	800db26 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	2200      	movs	r2, #0
 800db04:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	3308      	adds	r3, #8
 800db0a:	2201      	movs	r2, #1
 800db0c:	4619      	mov	r1, r3
 800db0e:	6878      	ldr	r0, [r7, #4]
 800db10:	f000 f922 	bl	800dd58 <USBD_CtlSendData>
      break;
 800db14:	e00c      	b.n	800db30 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	3304      	adds	r3, #4
 800db1a:	2201      	movs	r2, #1
 800db1c:	4619      	mov	r1, r3
 800db1e:	6878      	ldr	r0, [r7, #4]
 800db20:	f000 f91a 	bl	800dd58 <USBD_CtlSendData>
      break;
 800db24:	e004      	b.n	800db30 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 800db26:	6839      	ldr	r1, [r7, #0]
 800db28:	6878      	ldr	r0, [r7, #4]
 800db2a:	f000 f8aa 	bl	800dc82 <USBD_CtlError>
      break;
 800db2e:	bf00      	nop
}
 800db30:	bf00      	nop
 800db32:	3708      	adds	r7, #8
 800db34:	46bd      	mov	sp, r7
 800db36:	bd80      	pop	{r7, pc}

0800db38 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	b082      	sub	sp, #8
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
 800db40:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800db48:	3b01      	subs	r3, #1
 800db4a:	2b02      	cmp	r3, #2
 800db4c:	d81e      	bhi.n	800db8c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800db4e:	683b      	ldr	r3, [r7, #0]
 800db50:	88db      	ldrh	r3, [r3, #6]
 800db52:	2b02      	cmp	r3, #2
 800db54:	d004      	beq.n	800db60 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800db56:	6839      	ldr	r1, [r7, #0]
 800db58:	6878      	ldr	r0, [r7, #4]
 800db5a:	f000 f892 	bl	800dc82 <USBD_CtlError>
      break;
 800db5e:	e01a      	b.n	800db96 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	2201      	movs	r2, #1
 800db64:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d005      	beq.n	800db7c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	68db      	ldr	r3, [r3, #12]
 800db74:	f043 0202 	orr.w	r2, r3, #2
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	330c      	adds	r3, #12
 800db80:	2202      	movs	r2, #2
 800db82:	4619      	mov	r1, r3
 800db84:	6878      	ldr	r0, [r7, #4]
 800db86:	f000 f8e7 	bl	800dd58 <USBD_CtlSendData>
    break;
 800db8a:	e004      	b.n	800db96 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800db8c:	6839      	ldr	r1, [r7, #0]
 800db8e:	6878      	ldr	r0, [r7, #4]
 800db90:	f000 f877 	bl	800dc82 <USBD_CtlError>
    break;
 800db94:	bf00      	nop
  }
}
 800db96:	bf00      	nop
 800db98:	3708      	adds	r7, #8
 800db9a:	46bd      	mov	sp, r7
 800db9c:	bd80      	pop	{r7, pc}

0800db9e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800db9e:	b580      	push	{r7, lr}
 800dba0:	b082      	sub	sp, #8
 800dba2:	af00      	add	r7, sp, #0
 800dba4:	6078      	str	r0, [r7, #4]
 800dba6:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dba8:	683b      	ldr	r3, [r7, #0]
 800dbaa:	885b      	ldrh	r3, [r3, #2]
 800dbac:	2b01      	cmp	r3, #1
 800dbae:	d106      	bne.n	800dbbe <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	2201      	movs	r2, #1
 800dbb4:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800dbb8:	6878      	ldr	r0, [r7, #4]
 800dbba:	f000 f92b 	bl	800de14 <USBD_CtlSendStatus>
  }

}
 800dbbe:	bf00      	nop
 800dbc0:	3708      	adds	r7, #8
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	bd80      	pop	{r7, pc}

0800dbc6 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800dbc6:	b580      	push	{r7, lr}
 800dbc8:	b082      	sub	sp, #8
 800dbca:	af00      	add	r7, sp, #0
 800dbcc:	6078      	str	r0, [r7, #4]
 800dbce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800dbd6:	3b01      	subs	r3, #1
 800dbd8:	2b02      	cmp	r3, #2
 800dbda:	d80b      	bhi.n	800dbf4 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dbdc:	683b      	ldr	r3, [r7, #0]
 800dbde:	885b      	ldrh	r3, [r3, #2]
 800dbe0:	2b01      	cmp	r3, #1
 800dbe2:	d10c      	bne.n	800dbfe <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800dbec:	6878      	ldr	r0, [r7, #4]
 800dbee:	f000 f911 	bl	800de14 <USBD_CtlSendStatus>
    }
    break;
 800dbf2:	e004      	b.n	800dbfe <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800dbf4:	6839      	ldr	r1, [r7, #0]
 800dbf6:	6878      	ldr	r0, [r7, #4]
 800dbf8:	f000 f843 	bl	800dc82 <USBD_CtlError>
    break;
 800dbfc:	e000      	b.n	800dc00 <USBD_ClrFeature+0x3a>
    break;
 800dbfe:	bf00      	nop
  }
}
 800dc00:	bf00      	nop
 800dc02:	3708      	adds	r7, #8
 800dc04:	46bd      	mov	sp, r7
 800dc06:	bd80      	pop	{r7, pc}

0800dc08 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800dc08:	b480      	push	{r7}
 800dc0a:	b083      	sub	sp, #12
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
 800dc10:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800dc12:	683b      	ldr	r3, [r7, #0]
 800dc14:	781a      	ldrb	r2, [r3, #0]
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800dc1a:	683b      	ldr	r3, [r7, #0]
 800dc1c:	785a      	ldrb	r2, [r3, #1]
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800dc22:	683b      	ldr	r3, [r7, #0]
 800dc24:	3302      	adds	r3, #2
 800dc26:	781b      	ldrb	r3, [r3, #0]
 800dc28:	b29a      	uxth	r2, r3
 800dc2a:	683b      	ldr	r3, [r7, #0]
 800dc2c:	3303      	adds	r3, #3
 800dc2e:	781b      	ldrb	r3, [r3, #0]
 800dc30:	b29b      	uxth	r3, r3
 800dc32:	021b      	lsls	r3, r3, #8
 800dc34:	b29b      	uxth	r3, r3
 800dc36:	4413      	add	r3, r2
 800dc38:	b29a      	uxth	r2, r3
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800dc3e:	683b      	ldr	r3, [r7, #0]
 800dc40:	3304      	adds	r3, #4
 800dc42:	781b      	ldrb	r3, [r3, #0]
 800dc44:	b29a      	uxth	r2, r3
 800dc46:	683b      	ldr	r3, [r7, #0]
 800dc48:	3305      	adds	r3, #5
 800dc4a:	781b      	ldrb	r3, [r3, #0]
 800dc4c:	b29b      	uxth	r3, r3
 800dc4e:	021b      	lsls	r3, r3, #8
 800dc50:	b29b      	uxth	r3, r3
 800dc52:	4413      	add	r3, r2
 800dc54:	b29a      	uxth	r2, r3
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800dc5a:	683b      	ldr	r3, [r7, #0]
 800dc5c:	3306      	adds	r3, #6
 800dc5e:	781b      	ldrb	r3, [r3, #0]
 800dc60:	b29a      	uxth	r2, r3
 800dc62:	683b      	ldr	r3, [r7, #0]
 800dc64:	3307      	adds	r3, #7
 800dc66:	781b      	ldrb	r3, [r3, #0]
 800dc68:	b29b      	uxth	r3, r3
 800dc6a:	021b      	lsls	r3, r3, #8
 800dc6c:	b29b      	uxth	r3, r3
 800dc6e:	4413      	add	r3, r2
 800dc70:	b29a      	uxth	r2, r3
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	80da      	strh	r2, [r3, #6]

}
 800dc76:	bf00      	nop
 800dc78:	370c      	adds	r7, #12
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc80:	4770      	bx	lr

0800dc82 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800dc82:	b580      	push	{r7, lr}
 800dc84:	b082      	sub	sp, #8
 800dc86:	af00      	add	r7, sp, #0
 800dc88:	6078      	str	r0, [r7, #4]
 800dc8a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800dc8c:	2180      	movs	r1, #128	; 0x80
 800dc8e:	6878      	ldr	r0, [r7, #4]
 800dc90:	f001 f9ea 	bl	800f068 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800dc94:	2100      	movs	r1, #0
 800dc96:	6878      	ldr	r0, [r7, #4]
 800dc98:	f001 f9e6 	bl	800f068 <USBD_LL_StallEP>
}
 800dc9c:	bf00      	nop
 800dc9e:	3708      	adds	r7, #8
 800dca0:	46bd      	mov	sp, r7
 800dca2:	bd80      	pop	{r7, pc}

0800dca4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b086      	sub	sp, #24
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	60f8      	str	r0, [r7, #12]
 800dcac:	60b9      	str	r1, [r7, #8]
 800dcae:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d032      	beq.n	800dd20 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800dcba:	68f8      	ldr	r0, [r7, #12]
 800dcbc:	f000 f834 	bl	800dd28 <USBD_GetLen>
 800dcc0:	4603      	mov	r3, r0
 800dcc2:	3301      	adds	r3, #1
 800dcc4:	b29b      	uxth	r3, r3
 800dcc6:	005b      	lsls	r3, r3, #1
 800dcc8:	b29a      	uxth	r2, r3
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800dcce:	7dfb      	ldrb	r3, [r7, #23]
 800dcd0:	1c5a      	adds	r2, r3, #1
 800dcd2:	75fa      	strb	r2, [r7, #23]
 800dcd4:	461a      	mov	r2, r3
 800dcd6:	68bb      	ldr	r3, [r7, #8]
 800dcd8:	4413      	add	r3, r2
 800dcda:	687a      	ldr	r2, [r7, #4]
 800dcdc:	7812      	ldrb	r2, [r2, #0]
 800dcde:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800dce0:	7dfb      	ldrb	r3, [r7, #23]
 800dce2:	1c5a      	adds	r2, r3, #1
 800dce4:	75fa      	strb	r2, [r7, #23]
 800dce6:	461a      	mov	r2, r3
 800dce8:	68bb      	ldr	r3, [r7, #8]
 800dcea:	4413      	add	r3, r2
 800dcec:	2203      	movs	r2, #3
 800dcee:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800dcf0:	e012      	b.n	800dd18 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	1c5a      	adds	r2, r3, #1
 800dcf6:	60fa      	str	r2, [r7, #12]
 800dcf8:	7dfa      	ldrb	r2, [r7, #23]
 800dcfa:	1c51      	adds	r1, r2, #1
 800dcfc:	75f9      	strb	r1, [r7, #23]
 800dcfe:	4611      	mov	r1, r2
 800dd00:	68ba      	ldr	r2, [r7, #8]
 800dd02:	440a      	add	r2, r1
 800dd04:	781b      	ldrb	r3, [r3, #0]
 800dd06:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800dd08:	7dfb      	ldrb	r3, [r7, #23]
 800dd0a:	1c5a      	adds	r2, r3, #1
 800dd0c:	75fa      	strb	r2, [r7, #23]
 800dd0e:	461a      	mov	r2, r3
 800dd10:	68bb      	ldr	r3, [r7, #8]
 800dd12:	4413      	add	r3, r2
 800dd14:	2200      	movs	r2, #0
 800dd16:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	781b      	ldrb	r3, [r3, #0]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d1e8      	bne.n	800dcf2 <USBD_GetString+0x4e>
    }
  }
}
 800dd20:	bf00      	nop
 800dd22:	3718      	adds	r7, #24
 800dd24:	46bd      	mov	sp, r7
 800dd26:	bd80      	pop	{r7, pc}

0800dd28 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800dd28:	b480      	push	{r7}
 800dd2a:	b085      	sub	sp, #20
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800dd30:	2300      	movs	r3, #0
 800dd32:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800dd34:	e005      	b.n	800dd42 <USBD_GetLen+0x1a>
    {
        len++;
 800dd36:	7bfb      	ldrb	r3, [r7, #15]
 800dd38:	3301      	adds	r3, #1
 800dd3a:	73fb      	strb	r3, [r7, #15]
        buf++;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	3301      	adds	r3, #1
 800dd40:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	781b      	ldrb	r3, [r3, #0]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d1f5      	bne.n	800dd36 <USBD_GetLen+0xe>
    }

    return len;
 800dd4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	3714      	adds	r7, #20
 800dd50:	46bd      	mov	sp, r7
 800dd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd56:	4770      	bx	lr

0800dd58 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b084      	sub	sp, #16
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	60f8      	str	r0, [r7, #12]
 800dd60:	60b9      	str	r1, [r7, #8]
 800dd62:	4613      	mov	r3, r2
 800dd64:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	2202      	movs	r2, #2
 800dd6a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800dd6e:	88fa      	ldrh	r2, [r7, #6]
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800dd74:	88fa      	ldrh	r2, [r7, #6]
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800dd7a:	88fb      	ldrh	r3, [r7, #6]
 800dd7c:	68ba      	ldr	r2, [r7, #8]
 800dd7e:	2100      	movs	r1, #0
 800dd80:	68f8      	ldr	r0, [r7, #12]
 800dd82:	f001 f9fa 	bl	800f17a <USBD_LL_Transmit>

  return USBD_OK;
 800dd86:	2300      	movs	r3, #0
}
 800dd88:	4618      	mov	r0, r3
 800dd8a:	3710      	adds	r7, #16
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	bd80      	pop	{r7, pc}

0800dd90 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b084      	sub	sp, #16
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	60f8      	str	r0, [r7, #12]
 800dd98:	60b9      	str	r1, [r7, #8]
 800dd9a:	4613      	mov	r3, r2
 800dd9c:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800dd9e:	88fb      	ldrh	r3, [r7, #6]
 800dda0:	68ba      	ldr	r2, [r7, #8]
 800dda2:	2100      	movs	r1, #0
 800dda4:	68f8      	ldr	r0, [r7, #12]
 800dda6:	f001 f9e8 	bl	800f17a <USBD_LL_Transmit>

  return USBD_OK;
 800ddaa:	2300      	movs	r3, #0
}
 800ddac:	4618      	mov	r0, r3
 800ddae:	3710      	adds	r7, #16
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	bd80      	pop	{r7, pc}

0800ddb4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	b084      	sub	sp, #16
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	60f8      	str	r0, [r7, #12]
 800ddbc:	60b9      	str	r1, [r7, #8]
 800ddbe:	4613      	mov	r3, r2
 800ddc0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	2203      	movs	r2, #3
 800ddc6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800ddca:	88fa      	ldrh	r2, [r7, #6]
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800ddd2:	88fa      	ldrh	r2, [r7, #6]
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800ddda:	88fb      	ldrh	r3, [r7, #6]
 800dddc:	68ba      	ldr	r2, [r7, #8]
 800ddde:	2100      	movs	r1, #0
 800dde0:	68f8      	ldr	r0, [r7, #12]
 800dde2:	f001 f9ed 	bl	800f1c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dde6:	2300      	movs	r3, #0
}
 800dde8:	4618      	mov	r0, r3
 800ddea:	3710      	adds	r7, #16
 800ddec:	46bd      	mov	sp, r7
 800ddee:	bd80      	pop	{r7, pc}

0800ddf0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b084      	sub	sp, #16
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	60f8      	str	r0, [r7, #12]
 800ddf8:	60b9      	str	r1, [r7, #8]
 800ddfa:	4613      	mov	r3, r2
 800ddfc:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ddfe:	88fb      	ldrh	r3, [r7, #6]
 800de00:	68ba      	ldr	r2, [r7, #8]
 800de02:	2100      	movs	r1, #0
 800de04:	68f8      	ldr	r0, [r7, #12]
 800de06:	f001 f9db 	bl	800f1c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800de0a:	2300      	movs	r3, #0
}
 800de0c:	4618      	mov	r0, r3
 800de0e:	3710      	adds	r7, #16
 800de10:	46bd      	mov	sp, r7
 800de12:	bd80      	pop	{r7, pc}

0800de14 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800de14:	b580      	push	{r7, lr}
 800de16:	b082      	sub	sp, #8
 800de18:	af00      	add	r7, sp, #0
 800de1a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	2204      	movs	r2, #4
 800de20:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800de24:	2300      	movs	r3, #0
 800de26:	2200      	movs	r2, #0
 800de28:	2100      	movs	r1, #0
 800de2a:	6878      	ldr	r0, [r7, #4]
 800de2c:	f001 f9a5 	bl	800f17a <USBD_LL_Transmit>

  return USBD_OK;
 800de30:	2300      	movs	r3, #0
}
 800de32:	4618      	mov	r0, r3
 800de34:	3708      	adds	r7, #8
 800de36:	46bd      	mov	sp, r7
 800de38:	bd80      	pop	{r7, pc}

0800de3a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800de3a:	b580      	push	{r7, lr}
 800de3c:	b082      	sub	sp, #8
 800de3e:	af00      	add	r7, sp, #0
 800de40:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	2205      	movs	r2, #5
 800de46:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800de4a:	2300      	movs	r3, #0
 800de4c:	2200      	movs	r2, #0
 800de4e:	2100      	movs	r1, #0
 800de50:	6878      	ldr	r0, [r7, #4]
 800de52:	f001 f9b5 	bl	800f1c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800de56:	2300      	movs	r3, #0
}
 800de58:	4618      	mov	r0, r3
 800de5a:	3708      	adds	r7, #8
 800de5c:	46bd      	mov	sp, r7
 800de5e:	bd80      	pop	{r7, pc}

0800de60 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800de60:	b580      	push	{r7, lr}
 800de62:	b084      	sub	sp, #16
 800de64:	af00      	add	r7, sp, #0
 800de66:	4603      	mov	r3, r0
 800de68:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800de6a:	79fb      	ldrb	r3, [r7, #7]
 800de6c:	4a08      	ldr	r2, [pc, #32]	; (800de90 <disk_status+0x30>)
 800de6e:	009b      	lsls	r3, r3, #2
 800de70:	4413      	add	r3, r2
 800de72:	685b      	ldr	r3, [r3, #4]
 800de74:	685b      	ldr	r3, [r3, #4]
 800de76:	79fa      	ldrb	r2, [r7, #7]
 800de78:	4905      	ldr	r1, [pc, #20]	; (800de90 <disk_status+0x30>)
 800de7a:	440a      	add	r2, r1
 800de7c:	7a12      	ldrb	r2, [r2, #8]
 800de7e:	4610      	mov	r0, r2
 800de80:	4798      	blx	r3
 800de82:	4603      	mov	r3, r0
 800de84:	73fb      	strb	r3, [r7, #15]
  return stat;
 800de86:	7bfb      	ldrb	r3, [r7, #15]
}
 800de88:	4618      	mov	r0, r3
 800de8a:	3710      	adds	r7, #16
 800de8c:	46bd      	mov	sp, r7
 800de8e:	bd80      	pop	{r7, pc}
 800de90:	200007b0 	.word	0x200007b0

0800de94 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800de94:	b580      	push	{r7, lr}
 800de96:	b084      	sub	sp, #16
 800de98:	af00      	add	r7, sp, #0
 800de9a:	4603      	mov	r3, r0
 800de9c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800de9e:	2300      	movs	r3, #0
 800dea0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800dea2:	79fb      	ldrb	r3, [r7, #7]
 800dea4:	4a0d      	ldr	r2, [pc, #52]	; (800dedc <disk_initialize+0x48>)
 800dea6:	5cd3      	ldrb	r3, [r2, r3]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d111      	bne.n	800ded0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800deac:	79fb      	ldrb	r3, [r7, #7]
 800deae:	4a0b      	ldr	r2, [pc, #44]	; (800dedc <disk_initialize+0x48>)
 800deb0:	2101      	movs	r1, #1
 800deb2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800deb4:	79fb      	ldrb	r3, [r7, #7]
 800deb6:	4a09      	ldr	r2, [pc, #36]	; (800dedc <disk_initialize+0x48>)
 800deb8:	009b      	lsls	r3, r3, #2
 800deba:	4413      	add	r3, r2
 800debc:	685b      	ldr	r3, [r3, #4]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	79fa      	ldrb	r2, [r7, #7]
 800dec2:	4906      	ldr	r1, [pc, #24]	; (800dedc <disk_initialize+0x48>)
 800dec4:	440a      	add	r2, r1
 800dec6:	7a12      	ldrb	r2, [r2, #8]
 800dec8:	4610      	mov	r0, r2
 800deca:	4798      	blx	r3
 800decc:	4603      	mov	r3, r0
 800dece:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800ded0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ded2:	4618      	mov	r0, r3
 800ded4:	3710      	adds	r7, #16
 800ded6:	46bd      	mov	sp, r7
 800ded8:	bd80      	pop	{r7, pc}
 800deda:	bf00      	nop
 800dedc:	200007b0 	.word	0x200007b0

0800dee0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800dee0:	b590      	push	{r4, r7, lr}
 800dee2:	b087      	sub	sp, #28
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	60b9      	str	r1, [r7, #8]
 800dee8:	607a      	str	r2, [r7, #4]
 800deea:	603b      	str	r3, [r7, #0]
 800deec:	4603      	mov	r3, r0
 800deee:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800def0:	7bfb      	ldrb	r3, [r7, #15]
 800def2:	4a0a      	ldr	r2, [pc, #40]	; (800df1c <disk_read+0x3c>)
 800def4:	009b      	lsls	r3, r3, #2
 800def6:	4413      	add	r3, r2
 800def8:	685b      	ldr	r3, [r3, #4]
 800defa:	689c      	ldr	r4, [r3, #8]
 800defc:	7bfb      	ldrb	r3, [r7, #15]
 800defe:	4a07      	ldr	r2, [pc, #28]	; (800df1c <disk_read+0x3c>)
 800df00:	4413      	add	r3, r2
 800df02:	7a18      	ldrb	r0, [r3, #8]
 800df04:	683b      	ldr	r3, [r7, #0]
 800df06:	687a      	ldr	r2, [r7, #4]
 800df08:	68b9      	ldr	r1, [r7, #8]
 800df0a:	47a0      	blx	r4
 800df0c:	4603      	mov	r3, r0
 800df0e:	75fb      	strb	r3, [r7, #23]
  return res;
 800df10:	7dfb      	ldrb	r3, [r7, #23]
}
 800df12:	4618      	mov	r0, r3
 800df14:	371c      	adds	r7, #28
 800df16:	46bd      	mov	sp, r7
 800df18:	bd90      	pop	{r4, r7, pc}
 800df1a:	bf00      	nop
 800df1c:	200007b0 	.word	0x200007b0

0800df20 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800df20:	b590      	push	{r4, r7, lr}
 800df22:	b087      	sub	sp, #28
 800df24:	af00      	add	r7, sp, #0
 800df26:	60b9      	str	r1, [r7, #8]
 800df28:	607a      	str	r2, [r7, #4]
 800df2a:	603b      	str	r3, [r7, #0]
 800df2c:	4603      	mov	r3, r0
 800df2e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800df30:	7bfb      	ldrb	r3, [r7, #15]
 800df32:	4a0a      	ldr	r2, [pc, #40]	; (800df5c <disk_write+0x3c>)
 800df34:	009b      	lsls	r3, r3, #2
 800df36:	4413      	add	r3, r2
 800df38:	685b      	ldr	r3, [r3, #4]
 800df3a:	68dc      	ldr	r4, [r3, #12]
 800df3c:	7bfb      	ldrb	r3, [r7, #15]
 800df3e:	4a07      	ldr	r2, [pc, #28]	; (800df5c <disk_write+0x3c>)
 800df40:	4413      	add	r3, r2
 800df42:	7a18      	ldrb	r0, [r3, #8]
 800df44:	683b      	ldr	r3, [r7, #0]
 800df46:	687a      	ldr	r2, [r7, #4]
 800df48:	68b9      	ldr	r1, [r7, #8]
 800df4a:	47a0      	blx	r4
 800df4c:	4603      	mov	r3, r0
 800df4e:	75fb      	strb	r3, [r7, #23]
  return res;
 800df50:	7dfb      	ldrb	r3, [r7, #23]
}
 800df52:	4618      	mov	r0, r3
 800df54:	371c      	adds	r7, #28
 800df56:	46bd      	mov	sp, r7
 800df58:	bd90      	pop	{r4, r7, pc}
 800df5a:	bf00      	nop
 800df5c:	200007b0 	.word	0x200007b0

0800df60 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800df60:	b480      	push	{r7}
 800df62:	b085      	sub	sp, #20
 800df64:	af00      	add	r7, sp, #0
 800df66:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	3301      	adds	r3, #1
 800df6c:	781b      	ldrb	r3, [r3, #0]
 800df6e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800df70:	89fb      	ldrh	r3, [r7, #14]
 800df72:	021b      	lsls	r3, r3, #8
 800df74:	b21a      	sxth	r2, r3
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	781b      	ldrb	r3, [r3, #0]
 800df7a:	b21b      	sxth	r3, r3
 800df7c:	4313      	orrs	r3, r2
 800df7e:	b21b      	sxth	r3, r3
 800df80:	81fb      	strh	r3, [r7, #14]
	return rv;
 800df82:	89fb      	ldrh	r3, [r7, #14]
}
 800df84:	4618      	mov	r0, r3
 800df86:	3714      	adds	r7, #20
 800df88:	46bd      	mov	sp, r7
 800df8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8e:	4770      	bx	lr

0800df90 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800df90:	b480      	push	{r7}
 800df92:	b085      	sub	sp, #20
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	3303      	adds	r3, #3
 800df9c:	781b      	ldrb	r3, [r3, #0]
 800df9e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	021b      	lsls	r3, r3, #8
 800dfa4:	687a      	ldr	r2, [r7, #4]
 800dfa6:	3202      	adds	r2, #2
 800dfa8:	7812      	ldrb	r2, [r2, #0]
 800dfaa:	4313      	orrs	r3, r2
 800dfac:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	021b      	lsls	r3, r3, #8
 800dfb2:	687a      	ldr	r2, [r7, #4]
 800dfb4:	3201      	adds	r2, #1
 800dfb6:	7812      	ldrb	r2, [r2, #0]
 800dfb8:	4313      	orrs	r3, r2
 800dfba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	021b      	lsls	r3, r3, #8
 800dfc0:	687a      	ldr	r2, [r7, #4]
 800dfc2:	7812      	ldrb	r2, [r2, #0]
 800dfc4:	4313      	orrs	r3, r2
 800dfc6:	60fb      	str	r3, [r7, #12]
	return rv;
 800dfc8:	68fb      	ldr	r3, [r7, #12]
}
 800dfca:	4618      	mov	r0, r3
 800dfcc:	3714      	adds	r7, #20
 800dfce:	46bd      	mov	sp, r7
 800dfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd4:	4770      	bx	lr
	...

0800dfd8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800dfd8:	b480      	push	{r7}
 800dfda:	b085      	sub	sp, #20
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	60fb      	str	r3, [r7, #12]
 800dfe4:	e010      	b.n	800e008 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800dfe6:	4a0d      	ldr	r2, [pc, #52]	; (800e01c <clear_lock+0x44>)
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	011b      	lsls	r3, r3, #4
 800dfec:	4413      	add	r3, r2
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	687a      	ldr	r2, [r7, #4]
 800dff2:	429a      	cmp	r2, r3
 800dff4:	d105      	bne.n	800e002 <clear_lock+0x2a>
 800dff6:	4a09      	ldr	r2, [pc, #36]	; (800e01c <clear_lock+0x44>)
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	011b      	lsls	r3, r3, #4
 800dffc:	4413      	add	r3, r2
 800dffe:	2200      	movs	r2, #0
 800e000:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	3301      	adds	r3, #1
 800e006:	60fb      	str	r3, [r7, #12]
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	2b01      	cmp	r3, #1
 800e00c:	d9eb      	bls.n	800dfe6 <clear_lock+0xe>
	}
}
 800e00e:	bf00      	nop
 800e010:	3714      	adds	r7, #20
 800e012:	46bd      	mov	sp, r7
 800e014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e018:	4770      	bx	lr
 800e01a:	bf00      	nop
 800e01c:	20000790 	.word	0x20000790

0800e020 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800e020:	b580      	push	{r7, lr}
 800e022:	b086      	sub	sp, #24
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e028:	2300      	movs	r3, #0
 800e02a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	78db      	ldrb	r3, [r3, #3]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d034      	beq.n	800e09e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e038:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	7858      	ldrb	r0, [r3, #1]
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e044:	2301      	movs	r3, #1
 800e046:	697a      	ldr	r2, [r7, #20]
 800e048:	f7ff ff6a 	bl	800df20 <disk_write>
 800e04c:	4603      	mov	r3, r0
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d002      	beq.n	800e058 <sync_window+0x38>
			res = FR_DISK_ERR;
 800e052:	2301      	movs	r3, #1
 800e054:	73fb      	strb	r3, [r7, #15]
 800e056:	e022      	b.n	800e09e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	2200      	movs	r2, #0
 800e05c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	6a1b      	ldr	r3, [r3, #32]
 800e062:	697a      	ldr	r2, [r7, #20]
 800e064:	1ad2      	subs	r2, r2, r3
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	699b      	ldr	r3, [r3, #24]
 800e06a:	429a      	cmp	r2, r3
 800e06c:	d217      	bcs.n	800e09e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	789b      	ldrb	r3, [r3, #2]
 800e072:	613b      	str	r3, [r7, #16]
 800e074:	e010      	b.n	800e098 <sync_window+0x78>
					wsect += fs->fsize;
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	699b      	ldr	r3, [r3, #24]
 800e07a:	697a      	ldr	r2, [r7, #20]
 800e07c:	4413      	add	r3, r2
 800e07e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	7858      	ldrb	r0, [r3, #1]
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e08a:	2301      	movs	r3, #1
 800e08c:	697a      	ldr	r2, [r7, #20]
 800e08e:	f7ff ff47 	bl	800df20 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e092:	693b      	ldr	r3, [r7, #16]
 800e094:	3b01      	subs	r3, #1
 800e096:	613b      	str	r3, [r7, #16]
 800e098:	693b      	ldr	r3, [r7, #16]
 800e09a:	2b01      	cmp	r3, #1
 800e09c:	d8eb      	bhi.n	800e076 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800e09e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	3718      	adds	r7, #24
 800e0a4:	46bd      	mov	sp, r7
 800e0a6:	bd80      	pop	{r7, pc}

0800e0a8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	b084      	sub	sp, #16
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
 800e0b0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0ba:	683a      	ldr	r2, [r7, #0]
 800e0bc:	429a      	cmp	r2, r3
 800e0be:	d01b      	beq.n	800e0f8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800e0c0:	6878      	ldr	r0, [r7, #4]
 800e0c2:	f7ff ffad 	bl	800e020 <sync_window>
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e0ca:	7bfb      	ldrb	r3, [r7, #15]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d113      	bne.n	800e0f8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	7858      	ldrb	r0, [r3, #1]
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e0da:	2301      	movs	r3, #1
 800e0dc:	683a      	ldr	r2, [r7, #0]
 800e0de:	f7ff feff 	bl	800dee0 <disk_read>
 800e0e2:	4603      	mov	r3, r0
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d004      	beq.n	800e0f2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800e0e8:	f04f 33ff 	mov.w	r3, #4294967295
 800e0ec:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800e0ee:	2301      	movs	r3, #1
 800e0f0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	683a      	ldr	r2, [r7, #0]
 800e0f6:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800e0f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	3710      	adds	r7, #16
 800e0fe:	46bd      	mov	sp, r7
 800e100:	bd80      	pop	{r7, pc}

0800e102 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e102:	b480      	push	{r7}
 800e104:	b087      	sub	sp, #28
 800e106:	af00      	add	r7, sp, #0
 800e108:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e10a:	f04f 33ff 	mov.w	r3, #4294967295
 800e10e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d031      	beq.n	800e17c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	617b      	str	r3, [r7, #20]
 800e11e:	e002      	b.n	800e126 <get_ldnumber+0x24>
 800e120:	697b      	ldr	r3, [r7, #20]
 800e122:	3301      	adds	r3, #1
 800e124:	617b      	str	r3, [r7, #20]
 800e126:	697b      	ldr	r3, [r7, #20]
 800e128:	781b      	ldrb	r3, [r3, #0]
 800e12a:	2b20      	cmp	r3, #32
 800e12c:	d903      	bls.n	800e136 <get_ldnumber+0x34>
 800e12e:	697b      	ldr	r3, [r7, #20]
 800e130:	781b      	ldrb	r3, [r3, #0]
 800e132:	2b3a      	cmp	r3, #58	; 0x3a
 800e134:	d1f4      	bne.n	800e120 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e136:	697b      	ldr	r3, [r7, #20]
 800e138:	781b      	ldrb	r3, [r3, #0]
 800e13a:	2b3a      	cmp	r3, #58	; 0x3a
 800e13c:	d11c      	bne.n	800e178 <get_ldnumber+0x76>
			tp = *path;
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	1c5a      	adds	r2, r3, #1
 800e148:	60fa      	str	r2, [r7, #12]
 800e14a:	781b      	ldrb	r3, [r3, #0]
 800e14c:	3b30      	subs	r3, #48	; 0x30
 800e14e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e150:	68bb      	ldr	r3, [r7, #8]
 800e152:	2b09      	cmp	r3, #9
 800e154:	d80e      	bhi.n	800e174 <get_ldnumber+0x72>
 800e156:	68fa      	ldr	r2, [r7, #12]
 800e158:	697b      	ldr	r3, [r7, #20]
 800e15a:	429a      	cmp	r2, r3
 800e15c:	d10a      	bne.n	800e174 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e15e:	68bb      	ldr	r3, [r7, #8]
 800e160:	2b00      	cmp	r3, #0
 800e162:	d107      	bne.n	800e174 <get_ldnumber+0x72>
					vol = (int)i;
 800e164:	68bb      	ldr	r3, [r7, #8]
 800e166:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e168:	697b      	ldr	r3, [r7, #20]
 800e16a:	3301      	adds	r3, #1
 800e16c:	617b      	str	r3, [r7, #20]
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	697a      	ldr	r2, [r7, #20]
 800e172:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e174:	693b      	ldr	r3, [r7, #16]
 800e176:	e002      	b.n	800e17e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e178:	2300      	movs	r3, #0
 800e17a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e17c:	693b      	ldr	r3, [r7, #16]
}
 800e17e:	4618      	mov	r0, r3
 800e180:	371c      	adds	r7, #28
 800e182:	46bd      	mov	sp, r7
 800e184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e188:	4770      	bx	lr
	...

0800e18c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b082      	sub	sp, #8
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
 800e194:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	2200      	movs	r2, #0
 800e19a:	70da      	strb	r2, [r3, #3]
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	f04f 32ff 	mov.w	r2, #4294967295
 800e1a2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e1a4:	6839      	ldr	r1, [r7, #0]
 800e1a6:	6878      	ldr	r0, [r7, #4]
 800e1a8:	f7ff ff7e 	bl	800e0a8 <move_window>
 800e1ac:	4603      	mov	r3, r0
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d001      	beq.n	800e1b6 <check_fs+0x2a>
 800e1b2:	2304      	movs	r3, #4
 800e1b4:	e038      	b.n	800e228 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	3330      	adds	r3, #48	; 0x30
 800e1ba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e1be:	4618      	mov	r0, r3
 800e1c0:	f7ff fece 	bl	800df60 <ld_word>
 800e1c4:	4603      	mov	r3, r0
 800e1c6:	461a      	mov	r2, r3
 800e1c8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e1cc:	429a      	cmp	r2, r3
 800e1ce:	d001      	beq.n	800e1d4 <check_fs+0x48>
 800e1d0:	2303      	movs	r3, #3
 800e1d2:	e029      	b.n	800e228 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e1da:	2be9      	cmp	r3, #233	; 0xe9
 800e1dc:	d009      	beq.n	800e1f2 <check_fs+0x66>
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e1e4:	2beb      	cmp	r3, #235	; 0xeb
 800e1e6:	d11e      	bne.n	800e226 <check_fs+0x9a>
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800e1ee:	2b90      	cmp	r3, #144	; 0x90
 800e1f0:	d119      	bne.n	800e226 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	3330      	adds	r3, #48	; 0x30
 800e1f6:	3336      	adds	r3, #54	; 0x36
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	f7ff fec9 	bl	800df90 <ld_dword>
 800e1fe:	4603      	mov	r3, r0
 800e200:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e204:	4a0a      	ldr	r2, [pc, #40]	; (800e230 <check_fs+0xa4>)
 800e206:	4293      	cmp	r3, r2
 800e208:	d101      	bne.n	800e20e <check_fs+0x82>
 800e20a:	2300      	movs	r3, #0
 800e20c:	e00c      	b.n	800e228 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	3330      	adds	r3, #48	; 0x30
 800e212:	3352      	adds	r3, #82	; 0x52
 800e214:	4618      	mov	r0, r3
 800e216:	f7ff febb 	bl	800df90 <ld_dword>
 800e21a:	4602      	mov	r2, r0
 800e21c:	4b05      	ldr	r3, [pc, #20]	; (800e234 <check_fs+0xa8>)
 800e21e:	429a      	cmp	r2, r3
 800e220:	d101      	bne.n	800e226 <check_fs+0x9a>
 800e222:	2300      	movs	r3, #0
 800e224:	e000      	b.n	800e228 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e226:	2302      	movs	r3, #2
}
 800e228:	4618      	mov	r0, r3
 800e22a:	3708      	adds	r7, #8
 800e22c:	46bd      	mov	sp, r7
 800e22e:	bd80      	pop	{r7, pc}
 800e230:	00544146 	.word	0x00544146
 800e234:	33544146 	.word	0x33544146

0800e238 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b096      	sub	sp, #88	; 0x58
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	60f8      	str	r0, [r7, #12]
 800e240:	60b9      	str	r1, [r7, #8]
 800e242:	4613      	mov	r3, r2
 800e244:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e246:	68bb      	ldr	r3, [r7, #8]
 800e248:	2200      	movs	r2, #0
 800e24a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e24c:	68f8      	ldr	r0, [r7, #12]
 800e24e:	f7ff ff58 	bl	800e102 <get_ldnumber>
 800e252:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e256:	2b00      	cmp	r3, #0
 800e258:	da01      	bge.n	800e25e <find_volume+0x26>
 800e25a:	230b      	movs	r3, #11
 800e25c:	e22e      	b.n	800e6bc <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e25e:	4aa8      	ldr	r2, [pc, #672]	; (800e500 <find_volume+0x2c8>)
 800e260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e266:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d101      	bne.n	800e272 <find_volume+0x3a>
 800e26e:	230c      	movs	r3, #12
 800e270:	e224      	b.n	800e6bc <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800e272:	68bb      	ldr	r3, [r7, #8]
 800e274:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e276:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e278:	79fb      	ldrb	r3, [r7, #7]
 800e27a:	f023 0301 	bic.w	r3, r3, #1
 800e27e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e282:	781b      	ldrb	r3, [r3, #0]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d01a      	beq.n	800e2be <find_volume+0x86>
		stat = disk_status(fs->drv);
 800e288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e28a:	785b      	ldrb	r3, [r3, #1]
 800e28c:	4618      	mov	r0, r3
 800e28e:	f7ff fde7 	bl	800de60 <disk_status>
 800e292:	4603      	mov	r3, r0
 800e294:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e298:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e29c:	f003 0301 	and.w	r3, r3, #1
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d10c      	bne.n	800e2be <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e2a4:	79fb      	ldrb	r3, [r7, #7]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d007      	beq.n	800e2ba <find_volume+0x82>
 800e2aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e2ae:	f003 0304 	and.w	r3, r3, #4
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d001      	beq.n	800e2ba <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800e2b6:	230a      	movs	r3, #10
 800e2b8:	e200      	b.n	800e6bc <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	e1fe      	b.n	800e6bc <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e2be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2c0:	2200      	movs	r2, #0
 800e2c2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e2c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2c6:	b2da      	uxtb	r2, r3
 800e2c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ca:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e2cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ce:	785b      	ldrb	r3, [r3, #1]
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	f7ff fddf 	bl	800de94 <disk_initialize>
 800e2d6:	4603      	mov	r3, r0
 800e2d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e2dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e2e0:	f003 0301 	and.w	r3, r3, #1
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d001      	beq.n	800e2ec <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e2e8:	2303      	movs	r3, #3
 800e2ea:	e1e7      	b.n	800e6bc <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e2ec:	79fb      	ldrb	r3, [r7, #7]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d007      	beq.n	800e302 <find_volume+0xca>
 800e2f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e2f6:	f003 0304 	and.w	r3, r3, #4
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d001      	beq.n	800e302 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e2fe:	230a      	movs	r3, #10
 800e300:	e1dc      	b.n	800e6bc <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e302:	2300      	movs	r3, #0
 800e304:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e306:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e308:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e30a:	f7ff ff3f 	bl	800e18c <check_fs>
 800e30e:	4603      	mov	r3, r0
 800e310:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e314:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e318:	2b02      	cmp	r3, #2
 800e31a:	d14b      	bne.n	800e3b4 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e31c:	2300      	movs	r3, #0
 800e31e:	643b      	str	r3, [r7, #64]	; 0x40
 800e320:	e01f      	b.n	800e362 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e324:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e328:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e32a:	011b      	lsls	r3, r3, #4
 800e32c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800e330:	4413      	add	r3, r2
 800e332:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e336:	3304      	adds	r3, #4
 800e338:	781b      	ldrb	r3, [r3, #0]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d006      	beq.n	800e34c <find_volume+0x114>
 800e33e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e340:	3308      	adds	r3, #8
 800e342:	4618      	mov	r0, r3
 800e344:	f7ff fe24 	bl	800df90 <ld_dword>
 800e348:	4602      	mov	r2, r0
 800e34a:	e000      	b.n	800e34e <find_volume+0x116>
 800e34c:	2200      	movs	r2, #0
 800e34e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e350:	009b      	lsls	r3, r3, #2
 800e352:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800e356:	440b      	add	r3, r1
 800e358:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e35c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e35e:	3301      	adds	r3, #1
 800e360:	643b      	str	r3, [r7, #64]	; 0x40
 800e362:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e364:	2b03      	cmp	r3, #3
 800e366:	d9dc      	bls.n	800e322 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e368:	2300      	movs	r3, #0
 800e36a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800e36c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d002      	beq.n	800e378 <find_volume+0x140>
 800e372:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e374:	3b01      	subs	r3, #1
 800e376:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e378:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e37a:	009b      	lsls	r3, r3, #2
 800e37c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800e380:	4413      	add	r3, r2
 800e382:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e386:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e388:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d005      	beq.n	800e39a <find_volume+0x162>
 800e38e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e390:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e392:	f7ff fefb 	bl	800e18c <check_fs>
 800e396:	4603      	mov	r3, r0
 800e398:	e000      	b.n	800e39c <find_volume+0x164>
 800e39a:	2303      	movs	r3, #3
 800e39c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e3a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e3a4:	2b01      	cmp	r3, #1
 800e3a6:	d905      	bls.n	800e3b4 <find_volume+0x17c>
 800e3a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e3aa:	3301      	adds	r3, #1
 800e3ac:	643b      	str	r3, [r7, #64]	; 0x40
 800e3ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e3b0:	2b03      	cmp	r3, #3
 800e3b2:	d9e1      	bls.n	800e378 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e3b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e3b8:	2b04      	cmp	r3, #4
 800e3ba:	d101      	bne.n	800e3c0 <find_volume+0x188>
 800e3bc:	2301      	movs	r3, #1
 800e3be:	e17d      	b.n	800e6bc <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e3c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e3c4:	2b01      	cmp	r3, #1
 800e3c6:	d901      	bls.n	800e3cc <find_volume+0x194>
 800e3c8:	230d      	movs	r3, #13
 800e3ca:	e177      	b.n	800e6bc <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3ce:	3330      	adds	r3, #48	; 0x30
 800e3d0:	330b      	adds	r3, #11
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	f7ff fdc4 	bl	800df60 <ld_word>
 800e3d8:	4603      	mov	r3, r0
 800e3da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e3de:	d001      	beq.n	800e3e4 <find_volume+0x1ac>
 800e3e0:	230d      	movs	r3, #13
 800e3e2:	e16b      	b.n	800e6bc <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e3e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3e6:	3330      	adds	r3, #48	; 0x30
 800e3e8:	3316      	adds	r3, #22
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	f7ff fdb8 	bl	800df60 <ld_word>
 800e3f0:	4603      	mov	r3, r0
 800e3f2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e3f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d106      	bne.n	800e408 <find_volume+0x1d0>
 800e3fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3fc:	3330      	adds	r3, #48	; 0x30
 800e3fe:	3324      	adds	r3, #36	; 0x24
 800e400:	4618      	mov	r0, r3
 800e402:	f7ff fdc5 	bl	800df90 <ld_dword>
 800e406:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800e408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e40a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e40c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e40e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e410:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800e414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e416:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e41a:	789b      	ldrb	r3, [r3, #2]
 800e41c:	2b01      	cmp	r3, #1
 800e41e:	d005      	beq.n	800e42c <find_volume+0x1f4>
 800e420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e422:	789b      	ldrb	r3, [r3, #2]
 800e424:	2b02      	cmp	r3, #2
 800e426:	d001      	beq.n	800e42c <find_volume+0x1f4>
 800e428:	230d      	movs	r3, #13
 800e42a:	e147      	b.n	800e6bc <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e42c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e42e:	789b      	ldrb	r3, [r3, #2]
 800e430:	461a      	mov	r2, r3
 800e432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e434:	fb02 f303 	mul.w	r3, r2, r3
 800e438:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e43a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e43c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e440:	b29a      	uxth	r2, r3
 800e442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e444:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e448:	895b      	ldrh	r3, [r3, #10]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d008      	beq.n	800e460 <find_volume+0x228>
 800e44e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e450:	895b      	ldrh	r3, [r3, #10]
 800e452:	461a      	mov	r2, r3
 800e454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e456:	895b      	ldrh	r3, [r3, #10]
 800e458:	3b01      	subs	r3, #1
 800e45a:	4013      	ands	r3, r2
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d001      	beq.n	800e464 <find_volume+0x22c>
 800e460:	230d      	movs	r3, #13
 800e462:	e12b      	b.n	800e6bc <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e466:	3330      	adds	r3, #48	; 0x30
 800e468:	3311      	adds	r3, #17
 800e46a:	4618      	mov	r0, r3
 800e46c:	f7ff fd78 	bl	800df60 <ld_word>
 800e470:	4603      	mov	r3, r0
 800e472:	461a      	mov	r2, r3
 800e474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e476:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e47a:	891b      	ldrh	r3, [r3, #8]
 800e47c:	f003 030f 	and.w	r3, r3, #15
 800e480:	b29b      	uxth	r3, r3
 800e482:	2b00      	cmp	r3, #0
 800e484:	d001      	beq.n	800e48a <find_volume+0x252>
 800e486:	230d      	movs	r3, #13
 800e488:	e118      	b.n	800e6bc <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e48a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e48c:	3330      	adds	r3, #48	; 0x30
 800e48e:	3313      	adds	r3, #19
 800e490:	4618      	mov	r0, r3
 800e492:	f7ff fd65 	bl	800df60 <ld_word>
 800e496:	4603      	mov	r3, r0
 800e498:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e49a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d106      	bne.n	800e4ae <find_volume+0x276>
 800e4a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4a2:	3330      	adds	r3, #48	; 0x30
 800e4a4:	3320      	adds	r3, #32
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	f7ff fd72 	bl	800df90 <ld_dword>
 800e4ac:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e4ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4b0:	3330      	adds	r3, #48	; 0x30
 800e4b2:	330e      	adds	r3, #14
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	f7ff fd53 	bl	800df60 <ld_word>
 800e4ba:	4603      	mov	r3, r0
 800e4bc:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e4be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d101      	bne.n	800e4c8 <find_volume+0x290>
 800e4c4:	230d      	movs	r3, #13
 800e4c6:	e0f9      	b.n	800e6bc <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e4c8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e4ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e4cc:	4413      	add	r3, r2
 800e4ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e4d0:	8912      	ldrh	r2, [r2, #8]
 800e4d2:	0912      	lsrs	r2, r2, #4
 800e4d4:	b292      	uxth	r2, r2
 800e4d6:	4413      	add	r3, r2
 800e4d8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e4da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e4dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4de:	429a      	cmp	r2, r3
 800e4e0:	d201      	bcs.n	800e4e6 <find_volume+0x2ae>
 800e4e2:	230d      	movs	r3, #13
 800e4e4:	e0ea      	b.n	800e6bc <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e4e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e4e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ea:	1ad3      	subs	r3, r2, r3
 800e4ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e4ee:	8952      	ldrh	r2, [r2, #10]
 800e4f0:	fbb3 f3f2 	udiv	r3, r3, r2
 800e4f4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e4f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d103      	bne.n	800e504 <find_volume+0x2cc>
 800e4fc:	230d      	movs	r3, #13
 800e4fe:	e0dd      	b.n	800e6bc <find_volume+0x484>
 800e500:	20000788 	.word	0x20000788
		fmt = FS_FAT32;
 800e504:	2303      	movs	r3, #3
 800e506:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e50a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e50c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e510:	4293      	cmp	r3, r2
 800e512:	d802      	bhi.n	800e51a <find_volume+0x2e2>
 800e514:	2302      	movs	r3, #2
 800e516:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e51c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e520:	4293      	cmp	r3, r2
 800e522:	d802      	bhi.n	800e52a <find_volume+0x2f2>
 800e524:	2301      	movs	r3, #1
 800e526:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e52c:	1c9a      	adds	r2, r3, #2
 800e52e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e530:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800e532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e534:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e536:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e538:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e53a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e53c:	441a      	add	r2, r3
 800e53e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e540:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800e542:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e546:	441a      	add	r2, r3
 800e548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e54a:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800e54c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e550:	2b03      	cmp	r3, #3
 800e552:	d11e      	bne.n	800e592 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e556:	3330      	adds	r3, #48	; 0x30
 800e558:	332a      	adds	r3, #42	; 0x2a
 800e55a:	4618      	mov	r0, r3
 800e55c:	f7ff fd00 	bl	800df60 <ld_word>
 800e560:	4603      	mov	r3, r0
 800e562:	2b00      	cmp	r3, #0
 800e564:	d001      	beq.n	800e56a <find_volume+0x332>
 800e566:	230d      	movs	r3, #13
 800e568:	e0a8      	b.n	800e6bc <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e56a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e56c:	891b      	ldrh	r3, [r3, #8]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d001      	beq.n	800e576 <find_volume+0x33e>
 800e572:	230d      	movs	r3, #13
 800e574:	e0a2      	b.n	800e6bc <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e578:	3330      	adds	r3, #48	; 0x30
 800e57a:	332c      	adds	r3, #44	; 0x2c
 800e57c:	4618      	mov	r0, r3
 800e57e:	f7ff fd07 	bl	800df90 <ld_dword>
 800e582:	4602      	mov	r2, r0
 800e584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e586:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e58a:	695b      	ldr	r3, [r3, #20]
 800e58c:	009b      	lsls	r3, r3, #2
 800e58e:	647b      	str	r3, [r7, #68]	; 0x44
 800e590:	e01f      	b.n	800e5d2 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e594:	891b      	ldrh	r3, [r3, #8]
 800e596:	2b00      	cmp	r3, #0
 800e598:	d101      	bne.n	800e59e <find_volume+0x366>
 800e59a:	230d      	movs	r3, #13
 800e59c:	e08e      	b.n	800e6bc <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e59e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5a0:	6a1a      	ldr	r2, [r3, #32]
 800e5a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e5a4:	441a      	add	r2, r3
 800e5a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5a8:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e5aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e5ae:	2b02      	cmp	r3, #2
 800e5b0:	d103      	bne.n	800e5ba <find_volume+0x382>
 800e5b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5b4:	695b      	ldr	r3, [r3, #20]
 800e5b6:	005b      	lsls	r3, r3, #1
 800e5b8:	e00a      	b.n	800e5d0 <find_volume+0x398>
 800e5ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5bc:	695a      	ldr	r2, [r3, #20]
 800e5be:	4613      	mov	r3, r2
 800e5c0:	005b      	lsls	r3, r3, #1
 800e5c2:	4413      	add	r3, r2
 800e5c4:	085a      	lsrs	r2, r3, #1
 800e5c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5c8:	695b      	ldr	r3, [r3, #20]
 800e5ca:	f003 0301 	and.w	r3, r3, #1
 800e5ce:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e5d0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e5d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5d4:	699a      	ldr	r2, [r3, #24]
 800e5d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e5d8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800e5dc:	0a5b      	lsrs	r3, r3, #9
 800e5de:	429a      	cmp	r2, r3
 800e5e0:	d201      	bcs.n	800e5e6 <find_volume+0x3ae>
 800e5e2:	230d      	movs	r3, #13
 800e5e4:	e06a      	b.n	800e6bc <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e5e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5e8:	f04f 32ff 	mov.w	r2, #4294967295
 800e5ec:	611a      	str	r2, [r3, #16]
 800e5ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5f0:	691a      	ldr	r2, [r3, #16]
 800e5f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5f4:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800e5f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5f8:	2280      	movs	r2, #128	; 0x80
 800e5fa:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e5fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e600:	2b03      	cmp	r3, #3
 800e602:	d149      	bne.n	800e698 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e606:	3330      	adds	r3, #48	; 0x30
 800e608:	3330      	adds	r3, #48	; 0x30
 800e60a:	4618      	mov	r0, r3
 800e60c:	f7ff fca8 	bl	800df60 <ld_word>
 800e610:	4603      	mov	r3, r0
 800e612:	2b01      	cmp	r3, #1
 800e614:	d140      	bne.n	800e698 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e616:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e618:	3301      	adds	r3, #1
 800e61a:	4619      	mov	r1, r3
 800e61c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e61e:	f7ff fd43 	bl	800e0a8 <move_window>
 800e622:	4603      	mov	r3, r0
 800e624:	2b00      	cmp	r3, #0
 800e626:	d137      	bne.n	800e698 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800e628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e62a:	2200      	movs	r2, #0
 800e62c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e62e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e630:	3330      	adds	r3, #48	; 0x30
 800e632:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e636:	4618      	mov	r0, r3
 800e638:	f7ff fc92 	bl	800df60 <ld_word>
 800e63c:	4603      	mov	r3, r0
 800e63e:	461a      	mov	r2, r3
 800e640:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e644:	429a      	cmp	r2, r3
 800e646:	d127      	bne.n	800e698 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e64a:	3330      	adds	r3, #48	; 0x30
 800e64c:	4618      	mov	r0, r3
 800e64e:	f7ff fc9f 	bl	800df90 <ld_dword>
 800e652:	4602      	mov	r2, r0
 800e654:	4b1b      	ldr	r3, [pc, #108]	; (800e6c4 <find_volume+0x48c>)
 800e656:	429a      	cmp	r2, r3
 800e658:	d11e      	bne.n	800e698 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e65a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e65c:	3330      	adds	r3, #48	; 0x30
 800e65e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e662:	4618      	mov	r0, r3
 800e664:	f7ff fc94 	bl	800df90 <ld_dword>
 800e668:	4602      	mov	r2, r0
 800e66a:	4b17      	ldr	r3, [pc, #92]	; (800e6c8 <find_volume+0x490>)
 800e66c:	429a      	cmp	r2, r3
 800e66e:	d113      	bne.n	800e698 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e672:	3330      	adds	r3, #48	; 0x30
 800e674:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800e678:	4618      	mov	r0, r3
 800e67a:	f7ff fc89 	bl	800df90 <ld_dword>
 800e67e:	4602      	mov	r2, r0
 800e680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e682:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e686:	3330      	adds	r3, #48	; 0x30
 800e688:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e68c:	4618      	mov	r0, r3
 800e68e:	f7ff fc7f 	bl	800df90 <ld_dword>
 800e692:	4602      	mov	r2, r0
 800e694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e696:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e69a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800e69e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e6a0:	4b0a      	ldr	r3, [pc, #40]	; (800e6cc <find_volume+0x494>)
 800e6a2:	881b      	ldrh	r3, [r3, #0]
 800e6a4:	3301      	adds	r3, #1
 800e6a6:	b29a      	uxth	r2, r3
 800e6a8:	4b08      	ldr	r3, [pc, #32]	; (800e6cc <find_volume+0x494>)
 800e6aa:	801a      	strh	r2, [r3, #0]
 800e6ac:	4b07      	ldr	r3, [pc, #28]	; (800e6cc <find_volume+0x494>)
 800e6ae:	881a      	ldrh	r2, [r3, #0]
 800e6b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6b2:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e6b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e6b6:	f7ff fc8f 	bl	800dfd8 <clear_lock>
#endif
	return FR_OK;
 800e6ba:	2300      	movs	r3, #0
}
 800e6bc:	4618      	mov	r0, r3
 800e6be:	3758      	adds	r7, #88	; 0x58
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	bd80      	pop	{r7, pc}
 800e6c4:	41615252 	.word	0x41615252
 800e6c8:	61417272 	.word	0x61417272
 800e6cc:	2000078c 	.word	0x2000078c

0800e6d0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e6d0:	b580      	push	{r7, lr}
 800e6d2:	b088      	sub	sp, #32
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	60f8      	str	r0, [r7, #12]
 800e6d8:	60b9      	str	r1, [r7, #8]
 800e6da:	4613      	mov	r3, r2
 800e6dc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e6de:	68bb      	ldr	r3, [r7, #8]
 800e6e0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e6e2:	f107 0310 	add.w	r3, r7, #16
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	f7ff fd0b 	bl	800e102 <get_ldnumber>
 800e6ec:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e6ee:	69fb      	ldr	r3, [r7, #28]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	da01      	bge.n	800e6f8 <f_mount+0x28>
 800e6f4:	230b      	movs	r3, #11
 800e6f6:	e02b      	b.n	800e750 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e6f8:	4a17      	ldr	r2, [pc, #92]	; (800e758 <f_mount+0x88>)
 800e6fa:	69fb      	ldr	r3, [r7, #28]
 800e6fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e700:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e702:	69bb      	ldr	r3, [r7, #24]
 800e704:	2b00      	cmp	r3, #0
 800e706:	d005      	beq.n	800e714 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e708:	69b8      	ldr	r0, [r7, #24]
 800e70a:	f7ff fc65 	bl	800dfd8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e70e:	69bb      	ldr	r3, [r7, #24]
 800e710:	2200      	movs	r2, #0
 800e712:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d002      	beq.n	800e720 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	2200      	movs	r2, #0
 800e71e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e720:	68fa      	ldr	r2, [r7, #12]
 800e722:	490d      	ldr	r1, [pc, #52]	; (800e758 <f_mount+0x88>)
 800e724:	69fb      	ldr	r3, [r7, #28]
 800e726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d002      	beq.n	800e736 <f_mount+0x66>
 800e730:	79fb      	ldrb	r3, [r7, #7]
 800e732:	2b01      	cmp	r3, #1
 800e734:	d001      	beq.n	800e73a <f_mount+0x6a>
 800e736:	2300      	movs	r3, #0
 800e738:	e00a      	b.n	800e750 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e73a:	f107 010c 	add.w	r1, r7, #12
 800e73e:	f107 0308 	add.w	r3, r7, #8
 800e742:	2200      	movs	r2, #0
 800e744:	4618      	mov	r0, r3
 800e746:	f7ff fd77 	bl	800e238 <find_volume>
 800e74a:	4603      	mov	r3, r0
 800e74c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e74e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e750:	4618      	mov	r0, r3
 800e752:	3720      	adds	r7, #32
 800e754:	46bd      	mov	sp, r7
 800e756:	bd80      	pop	{r7, pc}
 800e758:	20000788 	.word	0x20000788

0800e75c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e75c:	b480      	push	{r7}
 800e75e:	b087      	sub	sp, #28
 800e760:	af00      	add	r7, sp, #0
 800e762:	60f8      	str	r0, [r7, #12]
 800e764:	60b9      	str	r1, [r7, #8]
 800e766:	4613      	mov	r3, r2
 800e768:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e76a:	2301      	movs	r3, #1
 800e76c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e76e:	2300      	movs	r3, #0
 800e770:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e772:	4b1f      	ldr	r3, [pc, #124]	; (800e7f0 <FATFS_LinkDriverEx+0x94>)
 800e774:	7a5b      	ldrb	r3, [r3, #9]
 800e776:	b2db      	uxtb	r3, r3
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d131      	bne.n	800e7e0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e77c:	4b1c      	ldr	r3, [pc, #112]	; (800e7f0 <FATFS_LinkDriverEx+0x94>)
 800e77e:	7a5b      	ldrb	r3, [r3, #9]
 800e780:	b2db      	uxtb	r3, r3
 800e782:	461a      	mov	r2, r3
 800e784:	4b1a      	ldr	r3, [pc, #104]	; (800e7f0 <FATFS_LinkDriverEx+0x94>)
 800e786:	2100      	movs	r1, #0
 800e788:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e78a:	4b19      	ldr	r3, [pc, #100]	; (800e7f0 <FATFS_LinkDriverEx+0x94>)
 800e78c:	7a5b      	ldrb	r3, [r3, #9]
 800e78e:	b2db      	uxtb	r3, r3
 800e790:	4a17      	ldr	r2, [pc, #92]	; (800e7f0 <FATFS_LinkDriverEx+0x94>)
 800e792:	009b      	lsls	r3, r3, #2
 800e794:	4413      	add	r3, r2
 800e796:	68fa      	ldr	r2, [r7, #12]
 800e798:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e79a:	4b15      	ldr	r3, [pc, #84]	; (800e7f0 <FATFS_LinkDriverEx+0x94>)
 800e79c:	7a5b      	ldrb	r3, [r3, #9]
 800e79e:	b2db      	uxtb	r3, r3
 800e7a0:	461a      	mov	r2, r3
 800e7a2:	4b13      	ldr	r3, [pc, #76]	; (800e7f0 <FATFS_LinkDriverEx+0x94>)
 800e7a4:	4413      	add	r3, r2
 800e7a6:	79fa      	ldrb	r2, [r7, #7]
 800e7a8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e7aa:	4b11      	ldr	r3, [pc, #68]	; (800e7f0 <FATFS_LinkDriverEx+0x94>)
 800e7ac:	7a5b      	ldrb	r3, [r3, #9]
 800e7ae:	b2db      	uxtb	r3, r3
 800e7b0:	1c5a      	adds	r2, r3, #1
 800e7b2:	b2d1      	uxtb	r1, r2
 800e7b4:	4a0e      	ldr	r2, [pc, #56]	; (800e7f0 <FATFS_LinkDriverEx+0x94>)
 800e7b6:	7251      	strb	r1, [r2, #9]
 800e7b8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e7ba:	7dbb      	ldrb	r3, [r7, #22]
 800e7bc:	3330      	adds	r3, #48	; 0x30
 800e7be:	b2da      	uxtb	r2, r3
 800e7c0:	68bb      	ldr	r3, [r7, #8]
 800e7c2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e7c4:	68bb      	ldr	r3, [r7, #8]
 800e7c6:	3301      	adds	r3, #1
 800e7c8:	223a      	movs	r2, #58	; 0x3a
 800e7ca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e7cc:	68bb      	ldr	r3, [r7, #8]
 800e7ce:	3302      	adds	r3, #2
 800e7d0:	222f      	movs	r2, #47	; 0x2f
 800e7d2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e7d4:	68bb      	ldr	r3, [r7, #8]
 800e7d6:	3303      	adds	r3, #3
 800e7d8:	2200      	movs	r2, #0
 800e7da:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e7dc:	2300      	movs	r3, #0
 800e7de:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e7e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	371c      	adds	r7, #28
 800e7e6:	46bd      	mov	sp, r7
 800e7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ec:	4770      	bx	lr
 800e7ee:	bf00      	nop
 800e7f0:	200007b0 	.word	0x200007b0

0800e7f4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e7f4:	b580      	push	{r7, lr}
 800e7f6:	b082      	sub	sp, #8
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	6078      	str	r0, [r7, #4]
 800e7fc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e7fe:	2200      	movs	r2, #0
 800e800:	6839      	ldr	r1, [r7, #0]
 800e802:	6878      	ldr	r0, [r7, #4]
 800e804:	f7ff ffaa 	bl	800e75c <FATFS_LinkDriverEx>
 800e808:	4603      	mov	r3, r0
}
 800e80a:	4618      	mov	r0, r3
 800e80c:	3708      	adds	r7, #8
 800e80e:	46bd      	mov	sp, r7
 800e810:	bd80      	pop	{r7, pc}
	...

0800e814 <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 800e814:	b480      	push	{r7}
 800e816:	b085      	sub	sp, #20
 800e818:	af00      	add	r7, sp, #0
 800e81a:	6078      	str	r0, [r7, #4]
 800e81c:	460b      	mov	r3, r1
 800e81e:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 800e820:	2300      	movs	r3, #0
 800e822:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 800e824:	2301      	movs	r3, #1
 800e826:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 800e828:	4b15      	ldr	r3, [pc, #84]	; (800e880 <FATFS_UnLinkDriverEx+0x6c>)
 800e82a:	7a5b      	ldrb	r3, [r3, #9]
 800e82c:	b2db      	uxtb	r3, r3
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d01e      	beq.n	800e870 <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	781b      	ldrb	r3, [r3, #0]
 800e836:	3b30      	subs	r3, #48	; 0x30
 800e838:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 800e83a:	7bbb      	ldrb	r3, [r7, #14]
 800e83c:	4a10      	ldr	r2, [pc, #64]	; (800e880 <FATFS_UnLinkDriverEx+0x6c>)
 800e83e:	009b      	lsls	r3, r3, #2
 800e840:	4413      	add	r3, r2
 800e842:	685b      	ldr	r3, [r3, #4]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d013      	beq.n	800e870 <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 800e848:	7bbb      	ldrb	r3, [r7, #14]
 800e84a:	4a0d      	ldr	r2, [pc, #52]	; (800e880 <FATFS_UnLinkDriverEx+0x6c>)
 800e84c:	009b      	lsls	r3, r3, #2
 800e84e:	4413      	add	r3, r2
 800e850:	2200      	movs	r2, #0
 800e852:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 800e854:	7bbb      	ldrb	r3, [r7, #14]
 800e856:	4a0a      	ldr	r2, [pc, #40]	; (800e880 <FATFS_UnLinkDriverEx+0x6c>)
 800e858:	4413      	add	r3, r2
 800e85a:	2200      	movs	r2, #0
 800e85c:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 800e85e:	4b08      	ldr	r3, [pc, #32]	; (800e880 <FATFS_UnLinkDriverEx+0x6c>)
 800e860:	7a5b      	ldrb	r3, [r3, #9]
 800e862:	b2db      	uxtb	r3, r3
 800e864:	3b01      	subs	r3, #1
 800e866:	b2da      	uxtb	r2, r3
 800e868:	4b05      	ldr	r3, [pc, #20]	; (800e880 <FATFS_UnLinkDriverEx+0x6c>)
 800e86a:	725a      	strb	r2, [r3, #9]
      ret = 0;
 800e86c:	2300      	movs	r3, #0
 800e86e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800e870:	7bfb      	ldrb	r3, [r7, #15]
}
 800e872:	4618      	mov	r0, r3
 800e874:	3714      	adds	r7, #20
 800e876:	46bd      	mov	sp, r7
 800e878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e87c:	4770      	bx	lr
 800e87e:	bf00      	nop
 800e880:	200007b0 	.word	0x200007b0

0800e884 <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 800e884:	b580      	push	{r7, lr}
 800e886:	b082      	sub	sp, #8
 800e888:	af00      	add	r7, sp, #0
 800e88a:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 800e88c:	2100      	movs	r1, #0
 800e88e:	6878      	ldr	r0, [r7, #4]
 800e890:	f7ff ffc0 	bl	800e814 <FATFS_UnLinkDriverEx>
 800e894:	4603      	mov	r3, r0
}
 800e896:	4618      	mov	r0, r3
 800e898:	3708      	adds	r7, #8
 800e89a:	46bd      	mov	sp, r7
 800e89c:	bd80      	pop	{r7, pc}
	...

0800e8a0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e8a0:	b580      	push	{r7, lr}
 800e8a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	4912      	ldr	r1, [pc, #72]	; (800e8f0 <MX_USB_DEVICE_Init+0x50>)
 800e8a8:	4812      	ldr	r0, [pc, #72]	; (800e8f4 <MX_USB_DEVICE_Init+0x54>)
 800e8aa:	f7fe fa7f 	bl	800cdac <USBD_Init>
 800e8ae:	4603      	mov	r3, r0
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d001      	beq.n	800e8b8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e8b4:	f7f4 f95c 	bl	8002b70 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e8b8:	490f      	ldr	r1, [pc, #60]	; (800e8f8 <MX_USB_DEVICE_Init+0x58>)
 800e8ba:	480e      	ldr	r0, [pc, #56]	; (800e8f4 <MX_USB_DEVICE_Init+0x54>)
 800e8bc:	f7fe faa1 	bl	800ce02 <USBD_RegisterClass>
 800e8c0:	4603      	mov	r3, r0
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d001      	beq.n	800e8ca <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e8c6:	f7f4 f953 	bl	8002b70 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e8ca:	490c      	ldr	r1, [pc, #48]	; (800e8fc <MX_USB_DEVICE_Init+0x5c>)
 800e8cc:	4809      	ldr	r0, [pc, #36]	; (800e8f4 <MX_USB_DEVICE_Init+0x54>)
 800e8ce:	f7fe f9cf 	bl	800cc70 <USBD_CDC_RegisterInterface>
 800e8d2:	4603      	mov	r3, r0
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d001      	beq.n	800e8dc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e8d8:	f7f4 f94a 	bl	8002b70 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e8dc:	4805      	ldr	r0, [pc, #20]	; (800e8f4 <MX_USB_DEVICE_Init+0x54>)
 800e8de:	f7fe faaa 	bl	800ce36 <USBD_Start>
 800e8e2:	4603      	mov	r3, r0
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d001      	beq.n	800e8ec <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e8e8:	f7f4 f942 	bl	8002b70 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e8ec:	bf00      	nop
 800e8ee:	bd80      	pop	{r7, pc}
 800e8f0:	20000140 	.word	0x20000140
 800e8f4:	20001174 	.word	0x20001174
 800e8f8:	2000002c 	.word	0x2000002c
 800e8fc:	20000130 	.word	0x20000130

0800e900 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e900:	b580      	push	{r7, lr}
 800e902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e904:	2200      	movs	r2, #0
 800e906:	4905      	ldr	r1, [pc, #20]	; (800e91c <CDC_Init_FS+0x1c>)
 800e908:	4805      	ldr	r0, [pc, #20]	; (800e920 <CDC_Init_FS+0x20>)
 800e90a:	f7fe f9c8 	bl	800cc9e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e90e:	4905      	ldr	r1, [pc, #20]	; (800e924 <CDC_Init_FS+0x24>)
 800e910:	4803      	ldr	r0, [pc, #12]	; (800e920 <CDC_Init_FS+0x20>)
 800e912:	f7fe f9de 	bl	800ccd2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e916:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e918:	4618      	mov	r0, r3
 800e91a:	bd80      	pop	{r7, pc}
 800e91c:	20001c10 	.word	0x20001c10
 800e920:	20001174 	.word	0x20001174
 800e924:	20001410 	.word	0x20001410

0800e928 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e928:	b480      	push	{r7}
 800e92a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e92c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e92e:	4618      	mov	r0, r3
 800e930:	46bd      	mov	sp, r7
 800e932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e936:	4770      	bx	lr

0800e938 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e938:	b480      	push	{r7}
 800e93a:	b083      	sub	sp, #12
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	4603      	mov	r3, r0
 800e940:	6039      	str	r1, [r7, #0]
 800e942:	71fb      	strb	r3, [r7, #7]
 800e944:	4613      	mov	r3, r2
 800e946:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e948:	79fb      	ldrb	r3, [r7, #7]
 800e94a:	2b23      	cmp	r3, #35	; 0x23
 800e94c:	d84a      	bhi.n	800e9e4 <CDC_Control_FS+0xac>
 800e94e:	a201      	add	r2, pc, #4	; (adr r2, 800e954 <CDC_Control_FS+0x1c>)
 800e950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e954:	0800e9e5 	.word	0x0800e9e5
 800e958:	0800e9e5 	.word	0x0800e9e5
 800e95c:	0800e9e5 	.word	0x0800e9e5
 800e960:	0800e9e5 	.word	0x0800e9e5
 800e964:	0800e9e5 	.word	0x0800e9e5
 800e968:	0800e9e5 	.word	0x0800e9e5
 800e96c:	0800e9e5 	.word	0x0800e9e5
 800e970:	0800e9e5 	.word	0x0800e9e5
 800e974:	0800e9e5 	.word	0x0800e9e5
 800e978:	0800e9e5 	.word	0x0800e9e5
 800e97c:	0800e9e5 	.word	0x0800e9e5
 800e980:	0800e9e5 	.word	0x0800e9e5
 800e984:	0800e9e5 	.word	0x0800e9e5
 800e988:	0800e9e5 	.word	0x0800e9e5
 800e98c:	0800e9e5 	.word	0x0800e9e5
 800e990:	0800e9e5 	.word	0x0800e9e5
 800e994:	0800e9e5 	.word	0x0800e9e5
 800e998:	0800e9e5 	.word	0x0800e9e5
 800e99c:	0800e9e5 	.word	0x0800e9e5
 800e9a0:	0800e9e5 	.word	0x0800e9e5
 800e9a4:	0800e9e5 	.word	0x0800e9e5
 800e9a8:	0800e9e5 	.word	0x0800e9e5
 800e9ac:	0800e9e5 	.word	0x0800e9e5
 800e9b0:	0800e9e5 	.word	0x0800e9e5
 800e9b4:	0800e9e5 	.word	0x0800e9e5
 800e9b8:	0800e9e5 	.word	0x0800e9e5
 800e9bc:	0800e9e5 	.word	0x0800e9e5
 800e9c0:	0800e9e5 	.word	0x0800e9e5
 800e9c4:	0800e9e5 	.word	0x0800e9e5
 800e9c8:	0800e9e5 	.word	0x0800e9e5
 800e9cc:	0800e9e5 	.word	0x0800e9e5
 800e9d0:	0800e9e5 	.word	0x0800e9e5
 800e9d4:	0800e9e5 	.word	0x0800e9e5
 800e9d8:	0800e9e5 	.word	0x0800e9e5
 800e9dc:	0800e9e5 	.word	0x0800e9e5
 800e9e0:	0800e9e5 	.word	0x0800e9e5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e9e4:	bf00      	nop
  }

  return (USBD_OK);
 800e9e6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	370c      	adds	r7, #12
 800e9ec:	46bd      	mov	sp, r7
 800e9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f2:	4770      	bx	lr

0800e9f4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e9f4:	b580      	push	{r7, lr}
 800e9f6:	b082      	sub	sp, #8
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	6078      	str	r0, [r7, #4]
 800e9fc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e9fe:	6879      	ldr	r1, [r7, #4]
 800ea00:	4805      	ldr	r0, [pc, #20]	; (800ea18 <CDC_Receive_FS+0x24>)
 800ea02:	f7fe f966 	bl	800ccd2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ea06:	4804      	ldr	r0, [pc, #16]	; (800ea18 <CDC_Receive_FS+0x24>)
 800ea08:	f7fe f9a6 	bl	800cd58 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ea0c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ea0e:	4618      	mov	r0, r3
 800ea10:	3708      	adds	r7, #8
 800ea12:	46bd      	mov	sp, r7
 800ea14:	bd80      	pop	{r7, pc}
 800ea16:	bf00      	nop
 800ea18:	20001174 	.word	0x20001174

0800ea1c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b084      	sub	sp, #16
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
 800ea24:	460b      	mov	r3, r1
 800ea26:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ea28:	2300      	movs	r3, #0
 800ea2a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ea2c:	4b0d      	ldr	r3, [pc, #52]	; (800ea64 <CDC_Transmit_FS+0x48>)
 800ea2e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ea32:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ea34:	68bb      	ldr	r3, [r7, #8]
 800ea36:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d001      	beq.n	800ea42 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ea3e:	2301      	movs	r3, #1
 800ea40:	e00b      	b.n	800ea5a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ea42:	887b      	ldrh	r3, [r7, #2]
 800ea44:	461a      	mov	r2, r3
 800ea46:	6879      	ldr	r1, [r7, #4]
 800ea48:	4806      	ldr	r0, [pc, #24]	; (800ea64 <CDC_Transmit_FS+0x48>)
 800ea4a:	f7fe f928 	bl	800cc9e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ea4e:	4805      	ldr	r0, [pc, #20]	; (800ea64 <CDC_Transmit_FS+0x48>)
 800ea50:	f7fe f953 	bl	800ccfa <USBD_CDC_TransmitPacket>
 800ea54:	4603      	mov	r3, r0
 800ea56:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ea58:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	3710      	adds	r7, #16
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	bd80      	pop	{r7, pc}
 800ea62:	bf00      	nop
 800ea64:	20001174 	.word	0x20001174

0800ea68 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ea68:	b480      	push	{r7}
 800ea6a:	b083      	sub	sp, #12
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	4603      	mov	r3, r0
 800ea70:	6039      	str	r1, [r7, #0]
 800ea72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ea74:	683b      	ldr	r3, [r7, #0]
 800ea76:	2212      	movs	r2, #18
 800ea78:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ea7a:	4b03      	ldr	r3, [pc, #12]	; (800ea88 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	370c      	adds	r7, #12
 800ea80:	46bd      	mov	sp, r7
 800ea82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea86:	4770      	bx	lr
 800ea88:	2000015c 	.word	0x2000015c

0800ea8c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ea8c:	b480      	push	{r7}
 800ea8e:	b083      	sub	sp, #12
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	4603      	mov	r3, r0
 800ea94:	6039      	str	r1, [r7, #0]
 800ea96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ea98:	683b      	ldr	r3, [r7, #0]
 800ea9a:	2204      	movs	r2, #4
 800ea9c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ea9e:	4b03      	ldr	r3, [pc, #12]	; (800eaac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800eaa0:	4618      	mov	r0, r3
 800eaa2:	370c      	adds	r7, #12
 800eaa4:	46bd      	mov	sp, r7
 800eaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaaa:	4770      	bx	lr
 800eaac:	20000170 	.word	0x20000170

0800eab0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eab0:	b580      	push	{r7, lr}
 800eab2:	b082      	sub	sp, #8
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	4603      	mov	r3, r0
 800eab8:	6039      	str	r1, [r7, #0]
 800eaba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800eabc:	79fb      	ldrb	r3, [r7, #7]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d105      	bne.n	800eace <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800eac2:	683a      	ldr	r2, [r7, #0]
 800eac4:	4907      	ldr	r1, [pc, #28]	; (800eae4 <USBD_FS_ProductStrDescriptor+0x34>)
 800eac6:	4808      	ldr	r0, [pc, #32]	; (800eae8 <USBD_FS_ProductStrDescriptor+0x38>)
 800eac8:	f7ff f8ec 	bl	800dca4 <USBD_GetString>
 800eacc:	e004      	b.n	800ead8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800eace:	683a      	ldr	r2, [r7, #0]
 800ead0:	4904      	ldr	r1, [pc, #16]	; (800eae4 <USBD_FS_ProductStrDescriptor+0x34>)
 800ead2:	4805      	ldr	r0, [pc, #20]	; (800eae8 <USBD_FS_ProductStrDescriptor+0x38>)
 800ead4:	f7ff f8e6 	bl	800dca4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ead8:	4b02      	ldr	r3, [pc, #8]	; (800eae4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800eada:	4618      	mov	r0, r3
 800eadc:	3708      	adds	r7, #8
 800eade:	46bd      	mov	sp, r7
 800eae0:	bd80      	pop	{r7, pc}
 800eae2:	bf00      	nop
 800eae4:	20002410 	.word	0x20002410
 800eae8:	08013854 	.word	0x08013854

0800eaec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b082      	sub	sp, #8
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	4603      	mov	r3, r0
 800eaf4:	6039      	str	r1, [r7, #0]
 800eaf6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800eaf8:	683a      	ldr	r2, [r7, #0]
 800eafa:	4904      	ldr	r1, [pc, #16]	; (800eb0c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800eafc:	4804      	ldr	r0, [pc, #16]	; (800eb10 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800eafe:	f7ff f8d1 	bl	800dca4 <USBD_GetString>
  return USBD_StrDesc;
 800eb02:	4b02      	ldr	r3, [pc, #8]	; (800eb0c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800eb04:	4618      	mov	r0, r3
 800eb06:	3708      	adds	r7, #8
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	bd80      	pop	{r7, pc}
 800eb0c:	20002410 	.word	0x20002410
 800eb10:	0801386c 	.word	0x0801386c

0800eb14 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb14:	b580      	push	{r7, lr}
 800eb16:	b082      	sub	sp, #8
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	4603      	mov	r3, r0
 800eb1c:	6039      	str	r1, [r7, #0]
 800eb1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800eb20:	683b      	ldr	r3, [r7, #0]
 800eb22:	221a      	movs	r2, #26
 800eb24:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800eb26:	f000 f843 	bl	800ebb0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800eb2a:	4b02      	ldr	r3, [pc, #8]	; (800eb34 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	3708      	adds	r7, #8
 800eb30:	46bd      	mov	sp, r7
 800eb32:	bd80      	pop	{r7, pc}
 800eb34:	20000174 	.word	0x20000174

0800eb38 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b082      	sub	sp, #8
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	4603      	mov	r3, r0
 800eb40:	6039      	str	r1, [r7, #0]
 800eb42:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800eb44:	79fb      	ldrb	r3, [r7, #7]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d105      	bne.n	800eb56 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800eb4a:	683a      	ldr	r2, [r7, #0]
 800eb4c:	4907      	ldr	r1, [pc, #28]	; (800eb6c <USBD_FS_ConfigStrDescriptor+0x34>)
 800eb4e:	4808      	ldr	r0, [pc, #32]	; (800eb70 <USBD_FS_ConfigStrDescriptor+0x38>)
 800eb50:	f7ff f8a8 	bl	800dca4 <USBD_GetString>
 800eb54:	e004      	b.n	800eb60 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800eb56:	683a      	ldr	r2, [r7, #0]
 800eb58:	4904      	ldr	r1, [pc, #16]	; (800eb6c <USBD_FS_ConfigStrDescriptor+0x34>)
 800eb5a:	4805      	ldr	r0, [pc, #20]	; (800eb70 <USBD_FS_ConfigStrDescriptor+0x38>)
 800eb5c:	f7ff f8a2 	bl	800dca4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800eb60:	4b02      	ldr	r3, [pc, #8]	; (800eb6c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800eb62:	4618      	mov	r0, r3
 800eb64:	3708      	adds	r7, #8
 800eb66:	46bd      	mov	sp, r7
 800eb68:	bd80      	pop	{r7, pc}
 800eb6a:	bf00      	nop
 800eb6c:	20002410 	.word	0x20002410
 800eb70:	08013880 	.word	0x08013880

0800eb74 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb74:	b580      	push	{r7, lr}
 800eb76:	b082      	sub	sp, #8
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	4603      	mov	r3, r0
 800eb7c:	6039      	str	r1, [r7, #0]
 800eb7e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800eb80:	79fb      	ldrb	r3, [r7, #7]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d105      	bne.n	800eb92 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800eb86:	683a      	ldr	r2, [r7, #0]
 800eb88:	4907      	ldr	r1, [pc, #28]	; (800eba8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800eb8a:	4808      	ldr	r0, [pc, #32]	; (800ebac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800eb8c:	f7ff f88a 	bl	800dca4 <USBD_GetString>
 800eb90:	e004      	b.n	800eb9c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800eb92:	683a      	ldr	r2, [r7, #0]
 800eb94:	4904      	ldr	r1, [pc, #16]	; (800eba8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800eb96:	4805      	ldr	r0, [pc, #20]	; (800ebac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800eb98:	f7ff f884 	bl	800dca4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800eb9c:	4b02      	ldr	r3, [pc, #8]	; (800eba8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800eb9e:	4618      	mov	r0, r3
 800eba0:	3708      	adds	r7, #8
 800eba2:	46bd      	mov	sp, r7
 800eba4:	bd80      	pop	{r7, pc}
 800eba6:	bf00      	nop
 800eba8:	20002410 	.word	0x20002410
 800ebac:	0801388c 	.word	0x0801388c

0800ebb0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	b084      	sub	sp, #16
 800ebb4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ebb6:	4b0f      	ldr	r3, [pc, #60]	; (800ebf4 <Get_SerialNum+0x44>)
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ebbc:	4b0e      	ldr	r3, [pc, #56]	; (800ebf8 <Get_SerialNum+0x48>)
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ebc2:	4b0e      	ldr	r3, [pc, #56]	; (800ebfc <Get_SerialNum+0x4c>)
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ebc8:	68fa      	ldr	r2, [r7, #12]
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	4413      	add	r3, r2
 800ebce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d009      	beq.n	800ebea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ebd6:	2208      	movs	r2, #8
 800ebd8:	4909      	ldr	r1, [pc, #36]	; (800ec00 <Get_SerialNum+0x50>)
 800ebda:	68f8      	ldr	r0, [r7, #12]
 800ebdc:	f000 f814 	bl	800ec08 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ebe0:	2204      	movs	r2, #4
 800ebe2:	4908      	ldr	r1, [pc, #32]	; (800ec04 <Get_SerialNum+0x54>)
 800ebe4:	68b8      	ldr	r0, [r7, #8]
 800ebe6:	f000 f80f 	bl	800ec08 <IntToUnicode>
  }
}
 800ebea:	bf00      	nop
 800ebec:	3710      	adds	r7, #16
 800ebee:	46bd      	mov	sp, r7
 800ebf0:	bd80      	pop	{r7, pc}
 800ebf2:	bf00      	nop
 800ebf4:	1fff7a10 	.word	0x1fff7a10
 800ebf8:	1fff7a14 	.word	0x1fff7a14
 800ebfc:	1fff7a18 	.word	0x1fff7a18
 800ec00:	20000176 	.word	0x20000176
 800ec04:	20000186 	.word	0x20000186

0800ec08 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ec08:	b480      	push	{r7}
 800ec0a:	b087      	sub	sp, #28
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	60f8      	str	r0, [r7, #12]
 800ec10:	60b9      	str	r1, [r7, #8]
 800ec12:	4613      	mov	r3, r2
 800ec14:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ec16:	2300      	movs	r3, #0
 800ec18:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	75fb      	strb	r3, [r7, #23]
 800ec1e:	e027      	b.n	800ec70 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	0f1b      	lsrs	r3, r3, #28
 800ec24:	2b09      	cmp	r3, #9
 800ec26:	d80b      	bhi.n	800ec40 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	0f1b      	lsrs	r3, r3, #28
 800ec2c:	b2da      	uxtb	r2, r3
 800ec2e:	7dfb      	ldrb	r3, [r7, #23]
 800ec30:	005b      	lsls	r3, r3, #1
 800ec32:	4619      	mov	r1, r3
 800ec34:	68bb      	ldr	r3, [r7, #8]
 800ec36:	440b      	add	r3, r1
 800ec38:	3230      	adds	r2, #48	; 0x30
 800ec3a:	b2d2      	uxtb	r2, r2
 800ec3c:	701a      	strb	r2, [r3, #0]
 800ec3e:	e00a      	b.n	800ec56 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	0f1b      	lsrs	r3, r3, #28
 800ec44:	b2da      	uxtb	r2, r3
 800ec46:	7dfb      	ldrb	r3, [r7, #23]
 800ec48:	005b      	lsls	r3, r3, #1
 800ec4a:	4619      	mov	r1, r3
 800ec4c:	68bb      	ldr	r3, [r7, #8]
 800ec4e:	440b      	add	r3, r1
 800ec50:	3237      	adds	r2, #55	; 0x37
 800ec52:	b2d2      	uxtb	r2, r2
 800ec54:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	011b      	lsls	r3, r3, #4
 800ec5a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ec5c:	7dfb      	ldrb	r3, [r7, #23]
 800ec5e:	005b      	lsls	r3, r3, #1
 800ec60:	3301      	adds	r3, #1
 800ec62:	68ba      	ldr	r2, [r7, #8]
 800ec64:	4413      	add	r3, r2
 800ec66:	2200      	movs	r2, #0
 800ec68:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ec6a:	7dfb      	ldrb	r3, [r7, #23]
 800ec6c:	3301      	adds	r3, #1
 800ec6e:	75fb      	strb	r3, [r7, #23]
 800ec70:	7dfa      	ldrb	r2, [r7, #23]
 800ec72:	79fb      	ldrb	r3, [r7, #7]
 800ec74:	429a      	cmp	r2, r3
 800ec76:	d3d3      	bcc.n	800ec20 <IntToUnicode+0x18>
  }
}
 800ec78:	bf00      	nop
 800ec7a:	371c      	adds	r7, #28
 800ec7c:	46bd      	mov	sp, r7
 800ec7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec82:	4770      	bx	lr

0800ec84 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ec84:	b580      	push	{r7, lr}
 800ec86:	b08a      	sub	sp, #40	; 0x28
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ec8c:	f107 0314 	add.w	r3, r7, #20
 800ec90:	2200      	movs	r2, #0
 800ec92:	601a      	str	r2, [r3, #0]
 800ec94:	605a      	str	r2, [r3, #4]
 800ec96:	609a      	str	r2, [r3, #8]
 800ec98:	60da      	str	r2, [r3, #12]
 800ec9a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800eca4:	d13a      	bne.n	800ed1c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800eca6:	2300      	movs	r3, #0
 800eca8:	613b      	str	r3, [r7, #16]
 800ecaa:	4b1e      	ldr	r3, [pc, #120]	; (800ed24 <HAL_PCD_MspInit+0xa0>)
 800ecac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecae:	4a1d      	ldr	r2, [pc, #116]	; (800ed24 <HAL_PCD_MspInit+0xa0>)
 800ecb0:	f043 0301 	orr.w	r3, r3, #1
 800ecb4:	6313      	str	r3, [r2, #48]	; 0x30
 800ecb6:	4b1b      	ldr	r3, [pc, #108]	; (800ed24 <HAL_PCD_MspInit+0xa0>)
 800ecb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecba:	f003 0301 	and.w	r3, r3, #1
 800ecbe:	613b      	str	r3, [r7, #16]
 800ecc0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ecc2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ecc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ecc8:	2302      	movs	r3, #2
 800ecca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eccc:	2300      	movs	r3, #0
 800ecce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ecd0:	2303      	movs	r3, #3
 800ecd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ecd4:	230a      	movs	r3, #10
 800ecd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ecd8:	f107 0314 	add.w	r3, r7, #20
 800ecdc:	4619      	mov	r1, r3
 800ecde:	4812      	ldr	r0, [pc, #72]	; (800ed28 <HAL_PCD_MspInit+0xa4>)
 800ece0:	f7f4 ffb2 	bl	8003c48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ece4:	4b0f      	ldr	r3, [pc, #60]	; (800ed24 <HAL_PCD_MspInit+0xa0>)
 800ece6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ece8:	4a0e      	ldr	r2, [pc, #56]	; (800ed24 <HAL_PCD_MspInit+0xa0>)
 800ecea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ecee:	6353      	str	r3, [r2, #52]	; 0x34
 800ecf0:	2300      	movs	r3, #0
 800ecf2:	60fb      	str	r3, [r7, #12]
 800ecf4:	4b0b      	ldr	r3, [pc, #44]	; (800ed24 <HAL_PCD_MspInit+0xa0>)
 800ecf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ecf8:	4a0a      	ldr	r2, [pc, #40]	; (800ed24 <HAL_PCD_MspInit+0xa0>)
 800ecfa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ecfe:	6453      	str	r3, [r2, #68]	; 0x44
 800ed00:	4b08      	ldr	r3, [pc, #32]	; (800ed24 <HAL_PCD_MspInit+0xa0>)
 800ed02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ed08:	60fb      	str	r3, [r7, #12]
 800ed0a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ed0c:	2200      	movs	r2, #0
 800ed0e:	2100      	movs	r1, #0
 800ed10:	2043      	movs	r0, #67	; 0x43
 800ed12:	f7f4 fbc6 	bl	80034a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ed16:	2043      	movs	r0, #67	; 0x43
 800ed18:	f7f4 fbdf 	bl	80034da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ed1c:	bf00      	nop
 800ed1e:	3728      	adds	r7, #40	; 0x28
 800ed20:	46bd      	mov	sp, r7
 800ed22:	bd80      	pop	{r7, pc}
 800ed24:	40023800 	.word	0x40023800
 800ed28:	40020000 	.word	0x40020000

0800ed2c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	b082      	sub	sp, #8
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ed40:	4619      	mov	r1, r3
 800ed42:	4610      	mov	r0, r2
 800ed44:	f7fe f8c0 	bl	800cec8 <USBD_LL_SetupStage>
}
 800ed48:	bf00      	nop
 800ed4a:	3708      	adds	r7, #8
 800ed4c:	46bd      	mov	sp, r7
 800ed4e:	bd80      	pop	{r7, pc}

0800ed50 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b082      	sub	sp, #8
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
 800ed58:	460b      	mov	r3, r1
 800ed5a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800ed62:	78fa      	ldrb	r2, [r7, #3]
 800ed64:	6879      	ldr	r1, [r7, #4]
 800ed66:	4613      	mov	r3, r2
 800ed68:	00db      	lsls	r3, r3, #3
 800ed6a:	1a9b      	subs	r3, r3, r2
 800ed6c:	009b      	lsls	r3, r3, #2
 800ed6e:	440b      	add	r3, r1
 800ed70:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ed74:	681a      	ldr	r2, [r3, #0]
 800ed76:	78fb      	ldrb	r3, [r7, #3]
 800ed78:	4619      	mov	r1, r3
 800ed7a:	f7fe f8f0 	bl	800cf5e <USBD_LL_DataOutStage>
}
 800ed7e:	bf00      	nop
 800ed80:	3708      	adds	r7, #8
 800ed82:	46bd      	mov	sp, r7
 800ed84:	bd80      	pop	{r7, pc}

0800ed86 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed86:	b580      	push	{r7, lr}
 800ed88:	b082      	sub	sp, #8
 800ed8a:	af00      	add	r7, sp, #0
 800ed8c:	6078      	str	r0, [r7, #4]
 800ed8e:	460b      	mov	r3, r1
 800ed90:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800ed98:	78fa      	ldrb	r2, [r7, #3]
 800ed9a:	6879      	ldr	r1, [r7, #4]
 800ed9c:	4613      	mov	r3, r2
 800ed9e:	00db      	lsls	r3, r3, #3
 800eda0:	1a9b      	subs	r3, r3, r2
 800eda2:	009b      	lsls	r3, r3, #2
 800eda4:	440b      	add	r3, r1
 800eda6:	3348      	adds	r3, #72	; 0x48
 800eda8:	681a      	ldr	r2, [r3, #0]
 800edaa:	78fb      	ldrb	r3, [r7, #3]
 800edac:	4619      	mov	r1, r3
 800edae:	f7fe f947 	bl	800d040 <USBD_LL_DataInStage>
}
 800edb2:	bf00      	nop
 800edb4:	3708      	adds	r7, #8
 800edb6:	46bd      	mov	sp, r7
 800edb8:	bd80      	pop	{r7, pc}

0800edba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800edba:	b580      	push	{r7, lr}
 800edbc:	b082      	sub	sp, #8
 800edbe:	af00      	add	r7, sp, #0
 800edc0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800edc8:	4618      	mov	r0, r3
 800edca:	f7fe fa55 	bl	800d278 <USBD_LL_SOF>
}
 800edce:	bf00      	nop
 800edd0:	3708      	adds	r7, #8
 800edd2:	46bd      	mov	sp, r7
 800edd4:	bd80      	pop	{r7, pc}

0800edd6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800edd6:	b580      	push	{r7, lr}
 800edd8:	b084      	sub	sp, #16
 800edda:	af00      	add	r7, sp, #0
 800eddc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800edde:	2301      	movs	r3, #1
 800ede0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	68db      	ldr	r3, [r3, #12]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d102      	bne.n	800edf0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800edea:	2300      	movs	r3, #0
 800edec:	73fb      	strb	r3, [r7, #15]
 800edee:	e008      	b.n	800ee02 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	68db      	ldr	r3, [r3, #12]
 800edf4:	2b02      	cmp	r3, #2
 800edf6:	d102      	bne.n	800edfe <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800edf8:	2301      	movs	r3, #1
 800edfa:	73fb      	strb	r3, [r7, #15]
 800edfc:	e001      	b.n	800ee02 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800edfe:	f7f3 feb7 	bl	8002b70 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ee08:	7bfa      	ldrb	r2, [r7, #15]
 800ee0a:	4611      	mov	r1, r2
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	f7fe f9fd 	bl	800d20c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ee18:	4618      	mov	r0, r3
 800ee1a:	f7fe f9b6 	bl	800d18a <USBD_LL_Reset>
}
 800ee1e:	bf00      	nop
 800ee20:	3710      	adds	r7, #16
 800ee22:	46bd      	mov	sp, r7
 800ee24:	bd80      	pop	{r7, pc}
	...

0800ee28 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	b082      	sub	sp, #8
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ee36:	4618      	mov	r0, r3
 800ee38:	f7fe f9f8 	bl	800d22c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	687a      	ldr	r2, [r7, #4]
 800ee48:	6812      	ldr	r2, [r2, #0]
 800ee4a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ee4e:	f043 0301 	orr.w	r3, r3, #1
 800ee52:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	6a1b      	ldr	r3, [r3, #32]
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d005      	beq.n	800ee68 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ee5c:	4b04      	ldr	r3, [pc, #16]	; (800ee70 <HAL_PCD_SuspendCallback+0x48>)
 800ee5e:	691b      	ldr	r3, [r3, #16]
 800ee60:	4a03      	ldr	r2, [pc, #12]	; (800ee70 <HAL_PCD_SuspendCallback+0x48>)
 800ee62:	f043 0306 	orr.w	r3, r3, #6
 800ee66:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ee68:	bf00      	nop
 800ee6a:	3708      	adds	r7, #8
 800ee6c:	46bd      	mov	sp, r7
 800ee6e:	bd80      	pop	{r7, pc}
 800ee70:	e000ed00 	.word	0xe000ed00

0800ee74 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee74:	b580      	push	{r7, lr}
 800ee76:	b082      	sub	sp, #8
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ee82:	4618      	mov	r0, r3
 800ee84:	f7fe f9e7 	bl	800d256 <USBD_LL_Resume>
}
 800ee88:	bf00      	nop
 800ee8a:	3708      	adds	r7, #8
 800ee8c:	46bd      	mov	sp, r7
 800ee8e:	bd80      	pop	{r7, pc}

0800ee90 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee90:	b580      	push	{r7, lr}
 800ee92:	b082      	sub	sp, #8
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	6078      	str	r0, [r7, #4]
 800ee98:	460b      	mov	r3, r1
 800ee9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800eea2:	78fa      	ldrb	r2, [r7, #3]
 800eea4:	4611      	mov	r1, r2
 800eea6:	4618      	mov	r0, r3
 800eea8:	f7fe fa0d 	bl	800d2c6 <USBD_LL_IsoOUTIncomplete>
}
 800eeac:	bf00      	nop
 800eeae:	3708      	adds	r7, #8
 800eeb0:	46bd      	mov	sp, r7
 800eeb2:	bd80      	pop	{r7, pc}

0800eeb4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eeb4:	b580      	push	{r7, lr}
 800eeb6:	b082      	sub	sp, #8
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	6078      	str	r0, [r7, #4]
 800eebc:	460b      	mov	r3, r1
 800eebe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800eec6:	78fa      	ldrb	r2, [r7, #3]
 800eec8:	4611      	mov	r1, r2
 800eeca:	4618      	mov	r0, r3
 800eecc:	f7fe f9ee 	bl	800d2ac <USBD_LL_IsoINIncomplete>
}
 800eed0:	bf00      	nop
 800eed2:	3708      	adds	r7, #8
 800eed4:	46bd      	mov	sp, r7
 800eed6:	bd80      	pop	{r7, pc}

0800eed8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eed8:	b580      	push	{r7, lr}
 800eeda:	b082      	sub	sp, #8
 800eedc:	af00      	add	r7, sp, #0
 800eede:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800eee6:	4618      	mov	r0, r3
 800eee8:	f7fe f9fa 	bl	800d2e0 <USBD_LL_DevConnected>
}
 800eeec:	bf00      	nop
 800eeee:	3708      	adds	r7, #8
 800eef0:	46bd      	mov	sp, r7
 800eef2:	bd80      	pop	{r7, pc}

0800eef4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b082      	sub	sp, #8
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ef02:	4618      	mov	r0, r3
 800ef04:	f7fe f9f7 	bl	800d2f6 <USBD_LL_DevDisconnected>
}
 800ef08:	bf00      	nop
 800ef0a:	3708      	adds	r7, #8
 800ef0c:	46bd      	mov	sp, r7
 800ef0e:	bd80      	pop	{r7, pc}

0800ef10 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ef10:	b580      	push	{r7, lr}
 800ef12:	b082      	sub	sp, #8
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	781b      	ldrb	r3, [r3, #0]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d13c      	bne.n	800ef9a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ef20:	4a20      	ldr	r2, [pc, #128]	; (800efa4 <USBD_LL_Init+0x94>)
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	4a1e      	ldr	r2, [pc, #120]	; (800efa4 <USBD_LL_Init+0x94>)
 800ef2c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ef30:	4b1c      	ldr	r3, [pc, #112]	; (800efa4 <USBD_LL_Init+0x94>)
 800ef32:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ef36:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ef38:	4b1a      	ldr	r3, [pc, #104]	; (800efa4 <USBD_LL_Init+0x94>)
 800ef3a:	2204      	movs	r2, #4
 800ef3c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ef3e:	4b19      	ldr	r3, [pc, #100]	; (800efa4 <USBD_LL_Init+0x94>)
 800ef40:	2202      	movs	r2, #2
 800ef42:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ef44:	4b17      	ldr	r3, [pc, #92]	; (800efa4 <USBD_LL_Init+0x94>)
 800ef46:	2200      	movs	r2, #0
 800ef48:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ef4a:	4b16      	ldr	r3, [pc, #88]	; (800efa4 <USBD_LL_Init+0x94>)
 800ef4c:	2202      	movs	r2, #2
 800ef4e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ef50:	4b14      	ldr	r3, [pc, #80]	; (800efa4 <USBD_LL_Init+0x94>)
 800ef52:	2200      	movs	r2, #0
 800ef54:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ef56:	4b13      	ldr	r3, [pc, #76]	; (800efa4 <USBD_LL_Init+0x94>)
 800ef58:	2200      	movs	r2, #0
 800ef5a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ef5c:	4b11      	ldr	r3, [pc, #68]	; (800efa4 <USBD_LL_Init+0x94>)
 800ef5e:	2200      	movs	r2, #0
 800ef60:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ef62:	4b10      	ldr	r3, [pc, #64]	; (800efa4 <USBD_LL_Init+0x94>)
 800ef64:	2200      	movs	r2, #0
 800ef66:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ef68:	4b0e      	ldr	r3, [pc, #56]	; (800efa4 <USBD_LL_Init+0x94>)
 800ef6a:	2200      	movs	r2, #0
 800ef6c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ef6e:	480d      	ldr	r0, [pc, #52]	; (800efa4 <USBD_LL_Init+0x94>)
 800ef70:	f7f6 f817 	bl	8004fa2 <HAL_PCD_Init>
 800ef74:	4603      	mov	r3, r0
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d001      	beq.n	800ef7e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ef7a:	f7f3 fdf9 	bl	8002b70 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ef7e:	2180      	movs	r1, #128	; 0x80
 800ef80:	4808      	ldr	r0, [pc, #32]	; (800efa4 <USBD_LL_Init+0x94>)
 800ef82:	f7f7 f97c 	bl	800627e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ef86:	2240      	movs	r2, #64	; 0x40
 800ef88:	2100      	movs	r1, #0
 800ef8a:	4806      	ldr	r0, [pc, #24]	; (800efa4 <USBD_LL_Init+0x94>)
 800ef8c:	f7f7 f930 	bl	80061f0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ef90:	2280      	movs	r2, #128	; 0x80
 800ef92:	2101      	movs	r1, #1
 800ef94:	4803      	ldr	r0, [pc, #12]	; (800efa4 <USBD_LL_Init+0x94>)
 800ef96:	f7f7 f92b 	bl	80061f0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ef9a:	2300      	movs	r3, #0
}
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	3708      	adds	r7, #8
 800efa0:	46bd      	mov	sp, r7
 800efa2:	bd80      	pop	{r7, pc}
 800efa4:	20002610 	.word	0x20002610

0800efa8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800efa8:	b580      	push	{r7, lr}
 800efaa:	b084      	sub	sp, #16
 800efac:	af00      	add	r7, sp, #0
 800efae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800efb0:	2300      	movs	r3, #0
 800efb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800efb4:	2300      	movs	r3, #0
 800efb6:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800efbe:	4618      	mov	r0, r3
 800efc0:	f7f6 f90c 	bl	80051dc <HAL_PCD_Start>
 800efc4:	4603      	mov	r3, r0
 800efc6:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 800efc8:	7bfb      	ldrb	r3, [r7, #15]
 800efca:	4618      	mov	r0, r3
 800efcc:	f000 f92e 	bl	800f22c <USBD_Get_USB_Status>
 800efd0:	4603      	mov	r3, r0
 800efd2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800efd4:	7bbb      	ldrb	r3, [r7, #14]
}
 800efd6:	4618      	mov	r0, r3
 800efd8:	3710      	adds	r7, #16
 800efda:	46bd      	mov	sp, r7
 800efdc:	bd80      	pop	{r7, pc}

0800efde <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800efde:	b580      	push	{r7, lr}
 800efe0:	b084      	sub	sp, #16
 800efe2:	af00      	add	r7, sp, #0
 800efe4:	6078      	str	r0, [r7, #4]
 800efe6:	4608      	mov	r0, r1
 800efe8:	4611      	mov	r1, r2
 800efea:	461a      	mov	r2, r3
 800efec:	4603      	mov	r3, r0
 800efee:	70fb      	strb	r3, [r7, #3]
 800eff0:	460b      	mov	r3, r1
 800eff2:	70bb      	strb	r3, [r7, #2]
 800eff4:	4613      	mov	r3, r2
 800eff6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eff8:	2300      	movs	r3, #0
 800effa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800effc:	2300      	movs	r3, #0
 800effe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800f006:	78bb      	ldrb	r3, [r7, #2]
 800f008:	883a      	ldrh	r2, [r7, #0]
 800f00a:	78f9      	ldrb	r1, [r7, #3]
 800f00c:	f7f6 fce1 	bl	80059d2 <HAL_PCD_EP_Open>
 800f010:	4603      	mov	r3, r0
 800f012:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f014:	7bfb      	ldrb	r3, [r7, #15]
 800f016:	4618      	mov	r0, r3
 800f018:	f000 f908 	bl	800f22c <USBD_Get_USB_Status>
 800f01c:	4603      	mov	r3, r0
 800f01e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800f020:	7bbb      	ldrb	r3, [r7, #14]
}
 800f022:	4618      	mov	r0, r3
 800f024:	3710      	adds	r7, #16
 800f026:	46bd      	mov	sp, r7
 800f028:	bd80      	pop	{r7, pc}

0800f02a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f02a:	b580      	push	{r7, lr}
 800f02c:	b084      	sub	sp, #16
 800f02e:	af00      	add	r7, sp, #0
 800f030:	6078      	str	r0, [r7, #4]
 800f032:	460b      	mov	r3, r1
 800f034:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f036:	2300      	movs	r3, #0
 800f038:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f03a:	2300      	movs	r3, #0
 800f03c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800f044:	78fa      	ldrb	r2, [r7, #3]
 800f046:	4611      	mov	r1, r2
 800f048:	4618      	mov	r0, r3
 800f04a:	f7f6 fd2a 	bl	8005aa2 <HAL_PCD_EP_Close>
 800f04e:	4603      	mov	r3, r0
 800f050:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800f052:	7bfb      	ldrb	r3, [r7, #15]
 800f054:	4618      	mov	r0, r3
 800f056:	f000 f8e9 	bl	800f22c <USBD_Get_USB_Status>
 800f05a:	4603      	mov	r3, r0
 800f05c:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800f05e:	7bbb      	ldrb	r3, [r7, #14]
}
 800f060:	4618      	mov	r0, r3
 800f062:	3710      	adds	r7, #16
 800f064:	46bd      	mov	sp, r7
 800f066:	bd80      	pop	{r7, pc}

0800f068 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f068:	b580      	push	{r7, lr}
 800f06a:	b084      	sub	sp, #16
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	6078      	str	r0, [r7, #4]
 800f070:	460b      	mov	r3, r1
 800f072:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f074:	2300      	movs	r3, #0
 800f076:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f078:	2300      	movs	r3, #0
 800f07a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800f082:	78fa      	ldrb	r2, [r7, #3]
 800f084:	4611      	mov	r1, r2
 800f086:	4618      	mov	r0, r3
 800f088:	f7f6 fe02 	bl	8005c90 <HAL_PCD_EP_SetStall>
 800f08c:	4603      	mov	r3, r0
 800f08e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f090:	7bfb      	ldrb	r3, [r7, #15]
 800f092:	4618      	mov	r0, r3
 800f094:	f000 f8ca 	bl	800f22c <USBD_Get_USB_Status>
 800f098:	4603      	mov	r3, r0
 800f09a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800f09c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f09e:	4618      	mov	r0, r3
 800f0a0:	3710      	adds	r7, #16
 800f0a2:	46bd      	mov	sp, r7
 800f0a4:	bd80      	pop	{r7, pc}

0800f0a6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f0a6:	b580      	push	{r7, lr}
 800f0a8:	b084      	sub	sp, #16
 800f0aa:	af00      	add	r7, sp, #0
 800f0ac:	6078      	str	r0, [r7, #4]
 800f0ae:	460b      	mov	r3, r1
 800f0b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800f0c0:	78fa      	ldrb	r2, [r7, #3]
 800f0c2:	4611      	mov	r1, r2
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	f7f6 fe47 	bl	8005d58 <HAL_PCD_EP_ClrStall>
 800f0ca:	4603      	mov	r3, r0
 800f0cc:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800f0ce:	7bfb      	ldrb	r3, [r7, #15]
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	f000 f8ab 	bl	800f22c <USBD_Get_USB_Status>
 800f0d6:	4603      	mov	r3, r0
 800f0d8:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800f0da:	7bbb      	ldrb	r3, [r7, #14]
}
 800f0dc:	4618      	mov	r0, r3
 800f0de:	3710      	adds	r7, #16
 800f0e0:	46bd      	mov	sp, r7
 800f0e2:	bd80      	pop	{r7, pc}

0800f0e4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f0e4:	b480      	push	{r7}
 800f0e6:	b085      	sub	sp, #20
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	6078      	str	r0, [r7, #4]
 800f0ec:	460b      	mov	r3, r1
 800f0ee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800f0f6:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800f0f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	da0b      	bge.n	800f118 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800f100:	78fb      	ldrb	r3, [r7, #3]
 800f102:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f106:	68f9      	ldr	r1, [r7, #12]
 800f108:	4613      	mov	r3, r2
 800f10a:	00db      	lsls	r3, r3, #3
 800f10c:	1a9b      	subs	r3, r3, r2
 800f10e:	009b      	lsls	r3, r3, #2
 800f110:	440b      	add	r3, r1
 800f112:	333e      	adds	r3, #62	; 0x3e
 800f114:	781b      	ldrb	r3, [r3, #0]
 800f116:	e00b      	b.n	800f130 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800f118:	78fb      	ldrb	r3, [r7, #3]
 800f11a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f11e:	68f9      	ldr	r1, [r7, #12]
 800f120:	4613      	mov	r3, r2
 800f122:	00db      	lsls	r3, r3, #3
 800f124:	1a9b      	subs	r3, r3, r2
 800f126:	009b      	lsls	r3, r3, #2
 800f128:	440b      	add	r3, r1
 800f12a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f12e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f130:	4618      	mov	r0, r3
 800f132:	3714      	adds	r7, #20
 800f134:	46bd      	mov	sp, r7
 800f136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f13a:	4770      	bx	lr

0800f13c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f13c:	b580      	push	{r7, lr}
 800f13e:	b084      	sub	sp, #16
 800f140:	af00      	add	r7, sp, #0
 800f142:	6078      	str	r0, [r7, #4]
 800f144:	460b      	mov	r3, r1
 800f146:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f148:	2300      	movs	r3, #0
 800f14a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f14c:	2300      	movs	r3, #0
 800f14e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800f156:	78fa      	ldrb	r2, [r7, #3]
 800f158:	4611      	mov	r1, r2
 800f15a:	4618      	mov	r0, r3
 800f15c:	f7f6 fc14 	bl	8005988 <HAL_PCD_SetAddress>
 800f160:	4603      	mov	r3, r0
 800f162:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 800f164:	7bfb      	ldrb	r3, [r7, #15]
 800f166:	4618      	mov	r0, r3
 800f168:	f000 f860 	bl	800f22c <USBD_Get_USB_Status>
 800f16c:	4603      	mov	r3, r0
 800f16e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800f170:	7bbb      	ldrb	r3, [r7, #14]
}
 800f172:	4618      	mov	r0, r3
 800f174:	3710      	adds	r7, #16
 800f176:	46bd      	mov	sp, r7
 800f178:	bd80      	pop	{r7, pc}

0800f17a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800f17a:	b580      	push	{r7, lr}
 800f17c:	b086      	sub	sp, #24
 800f17e:	af00      	add	r7, sp, #0
 800f180:	60f8      	str	r0, [r7, #12]
 800f182:	607a      	str	r2, [r7, #4]
 800f184:	461a      	mov	r2, r3
 800f186:	460b      	mov	r3, r1
 800f188:	72fb      	strb	r3, [r7, #11]
 800f18a:	4613      	mov	r3, r2
 800f18c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f18e:	2300      	movs	r3, #0
 800f190:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f192:	2300      	movs	r3, #0
 800f194:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800f19c:	893b      	ldrh	r3, [r7, #8]
 800f19e:	7af9      	ldrb	r1, [r7, #11]
 800f1a0:	687a      	ldr	r2, [r7, #4]
 800f1a2:	f7f6 fd2b 	bl	8005bfc <HAL_PCD_EP_Transmit>
 800f1a6:	4603      	mov	r3, r0
 800f1a8:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800f1aa:	7dfb      	ldrb	r3, [r7, #23]
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	f000 f83d 	bl	800f22c <USBD_Get_USB_Status>
 800f1b2:	4603      	mov	r3, r0
 800f1b4:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800f1b6:	7dbb      	ldrb	r3, [r7, #22]
}
 800f1b8:	4618      	mov	r0, r3
 800f1ba:	3718      	adds	r7, #24
 800f1bc:	46bd      	mov	sp, r7
 800f1be:	bd80      	pop	{r7, pc}

0800f1c0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800f1c0:	b580      	push	{r7, lr}
 800f1c2:	b086      	sub	sp, #24
 800f1c4:	af00      	add	r7, sp, #0
 800f1c6:	60f8      	str	r0, [r7, #12]
 800f1c8:	607a      	str	r2, [r7, #4]
 800f1ca:	461a      	mov	r2, r3
 800f1cc:	460b      	mov	r3, r1
 800f1ce:	72fb      	strb	r3, [r7, #11]
 800f1d0:	4613      	mov	r3, r2
 800f1d2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f1d4:	2300      	movs	r3, #0
 800f1d6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f1d8:	2300      	movs	r3, #0
 800f1da:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800f1e2:	893b      	ldrh	r3, [r7, #8]
 800f1e4:	7af9      	ldrb	r1, [r7, #11]
 800f1e6:	687a      	ldr	r2, [r7, #4]
 800f1e8:	f7f6 fca5 	bl	8005b36 <HAL_PCD_EP_Receive>
 800f1ec:	4603      	mov	r3, r0
 800f1ee:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800f1f0:	7dfb      	ldrb	r3, [r7, #23]
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	f000 f81a 	bl	800f22c <USBD_Get_USB_Status>
 800f1f8:	4603      	mov	r3, r0
 800f1fa:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 800f1fc:	7dbb      	ldrb	r3, [r7, #22]
}
 800f1fe:	4618      	mov	r0, r3
 800f200:	3718      	adds	r7, #24
 800f202:	46bd      	mov	sp, r7
 800f204:	bd80      	pop	{r7, pc}

0800f206 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f206:	b580      	push	{r7, lr}
 800f208:	b082      	sub	sp, #8
 800f20a:	af00      	add	r7, sp, #0
 800f20c:	6078      	str	r0, [r7, #4]
 800f20e:	460b      	mov	r3, r1
 800f210:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800f218:	78fa      	ldrb	r2, [r7, #3]
 800f21a:	4611      	mov	r1, r2
 800f21c:	4618      	mov	r0, r3
 800f21e:	f7f6 fcd5 	bl	8005bcc <HAL_PCD_EP_GetRxCount>
 800f222:	4603      	mov	r3, r0
}
 800f224:	4618      	mov	r0, r3
 800f226:	3708      	adds	r7, #8
 800f228:	46bd      	mov	sp, r7
 800f22a:	bd80      	pop	{r7, pc}

0800f22c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f22c:	b480      	push	{r7}
 800f22e:	b085      	sub	sp, #20
 800f230:	af00      	add	r7, sp, #0
 800f232:	4603      	mov	r3, r0
 800f234:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f236:	2300      	movs	r3, #0
 800f238:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f23a:	79fb      	ldrb	r3, [r7, #7]
 800f23c:	2b03      	cmp	r3, #3
 800f23e:	d817      	bhi.n	800f270 <USBD_Get_USB_Status+0x44>
 800f240:	a201      	add	r2, pc, #4	; (adr r2, 800f248 <USBD_Get_USB_Status+0x1c>)
 800f242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f246:	bf00      	nop
 800f248:	0800f259 	.word	0x0800f259
 800f24c:	0800f25f 	.word	0x0800f25f
 800f250:	0800f265 	.word	0x0800f265
 800f254:	0800f26b 	.word	0x0800f26b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f258:	2300      	movs	r3, #0
 800f25a:	73fb      	strb	r3, [r7, #15]
    break;
 800f25c:	e00b      	b.n	800f276 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f25e:	2302      	movs	r3, #2
 800f260:	73fb      	strb	r3, [r7, #15]
    break;
 800f262:	e008      	b.n	800f276 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f264:	2301      	movs	r3, #1
 800f266:	73fb      	strb	r3, [r7, #15]
    break;
 800f268:	e005      	b.n	800f276 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f26a:	2302      	movs	r3, #2
 800f26c:	73fb      	strb	r3, [r7, #15]
    break;
 800f26e:	e002      	b.n	800f276 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f270:	2302      	movs	r3, #2
 800f272:	73fb      	strb	r3, [r7, #15]
    break;
 800f274:	bf00      	nop
  }
  return usb_status;
 800f276:	7bfb      	ldrb	r3, [r7, #15]
}
 800f278:	4618      	mov	r0, r3
 800f27a:	3714      	adds	r7, #20
 800f27c:	46bd      	mov	sp, r7
 800f27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f282:	4770      	bx	lr

0800f284 <__libc_init_array>:
 800f284:	b570      	push	{r4, r5, r6, lr}
 800f286:	4e0d      	ldr	r6, [pc, #52]	; (800f2bc <__libc_init_array+0x38>)
 800f288:	4c0d      	ldr	r4, [pc, #52]	; (800f2c0 <__libc_init_array+0x3c>)
 800f28a:	1ba4      	subs	r4, r4, r6
 800f28c:	10a4      	asrs	r4, r4, #2
 800f28e:	2500      	movs	r5, #0
 800f290:	42a5      	cmp	r5, r4
 800f292:	d109      	bne.n	800f2a8 <__libc_init_array+0x24>
 800f294:	4e0b      	ldr	r6, [pc, #44]	; (800f2c4 <__libc_init_array+0x40>)
 800f296:	4c0c      	ldr	r4, [pc, #48]	; (800f2c8 <__libc_init_array+0x44>)
 800f298:	f004 fa44 	bl	8013724 <_init>
 800f29c:	1ba4      	subs	r4, r4, r6
 800f29e:	10a4      	asrs	r4, r4, #2
 800f2a0:	2500      	movs	r5, #0
 800f2a2:	42a5      	cmp	r5, r4
 800f2a4:	d105      	bne.n	800f2b2 <__libc_init_array+0x2e>
 800f2a6:	bd70      	pop	{r4, r5, r6, pc}
 800f2a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f2ac:	4798      	blx	r3
 800f2ae:	3501      	adds	r5, #1
 800f2b0:	e7ee      	b.n	800f290 <__libc_init_array+0xc>
 800f2b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f2b6:	4798      	blx	r3
 800f2b8:	3501      	adds	r5, #1
 800f2ba:	e7f2      	b.n	800f2a2 <__libc_init_array+0x1e>
 800f2bc:	08013bf8 	.word	0x08013bf8
 800f2c0:	08013bf8 	.word	0x08013bf8
 800f2c4:	08013bf8 	.word	0x08013bf8
 800f2c8:	08013bfc 	.word	0x08013bfc

0800f2cc <malloc>:
 800f2cc:	4b02      	ldr	r3, [pc, #8]	; (800f2d8 <malloc+0xc>)
 800f2ce:	4601      	mov	r1, r0
 800f2d0:	6818      	ldr	r0, [r3, #0]
 800f2d2:	f000 b86d 	b.w	800f3b0 <_malloc_r>
 800f2d6:	bf00      	nop
 800f2d8:	20000190 	.word	0x20000190

0800f2dc <free>:
 800f2dc:	4b02      	ldr	r3, [pc, #8]	; (800f2e8 <free+0xc>)
 800f2de:	4601      	mov	r1, r0
 800f2e0:	6818      	ldr	r0, [r3, #0]
 800f2e2:	f000 b817 	b.w	800f314 <_free_r>
 800f2e6:	bf00      	nop
 800f2e8:	20000190 	.word	0x20000190

0800f2ec <memcpy>:
 800f2ec:	b510      	push	{r4, lr}
 800f2ee:	1e43      	subs	r3, r0, #1
 800f2f0:	440a      	add	r2, r1
 800f2f2:	4291      	cmp	r1, r2
 800f2f4:	d100      	bne.n	800f2f8 <memcpy+0xc>
 800f2f6:	bd10      	pop	{r4, pc}
 800f2f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f2fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f300:	e7f7      	b.n	800f2f2 <memcpy+0x6>

0800f302 <memset>:
 800f302:	4402      	add	r2, r0
 800f304:	4603      	mov	r3, r0
 800f306:	4293      	cmp	r3, r2
 800f308:	d100      	bne.n	800f30c <memset+0xa>
 800f30a:	4770      	bx	lr
 800f30c:	f803 1b01 	strb.w	r1, [r3], #1
 800f310:	e7f9      	b.n	800f306 <memset+0x4>
	...

0800f314 <_free_r>:
 800f314:	b538      	push	{r3, r4, r5, lr}
 800f316:	4605      	mov	r5, r0
 800f318:	2900      	cmp	r1, #0
 800f31a:	d045      	beq.n	800f3a8 <_free_r+0x94>
 800f31c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f320:	1f0c      	subs	r4, r1, #4
 800f322:	2b00      	cmp	r3, #0
 800f324:	bfb8      	it	lt
 800f326:	18e4      	addlt	r4, r4, r3
 800f328:	f003 f834 	bl	8012394 <__malloc_lock>
 800f32c:	4a1f      	ldr	r2, [pc, #124]	; (800f3ac <_free_r+0x98>)
 800f32e:	6813      	ldr	r3, [r2, #0]
 800f330:	4610      	mov	r0, r2
 800f332:	b933      	cbnz	r3, 800f342 <_free_r+0x2e>
 800f334:	6063      	str	r3, [r4, #4]
 800f336:	6014      	str	r4, [r2, #0]
 800f338:	4628      	mov	r0, r5
 800f33a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f33e:	f003 b82a 	b.w	8012396 <__malloc_unlock>
 800f342:	42a3      	cmp	r3, r4
 800f344:	d90c      	bls.n	800f360 <_free_r+0x4c>
 800f346:	6821      	ldr	r1, [r4, #0]
 800f348:	1862      	adds	r2, r4, r1
 800f34a:	4293      	cmp	r3, r2
 800f34c:	bf04      	itt	eq
 800f34e:	681a      	ldreq	r2, [r3, #0]
 800f350:	685b      	ldreq	r3, [r3, #4]
 800f352:	6063      	str	r3, [r4, #4]
 800f354:	bf04      	itt	eq
 800f356:	1852      	addeq	r2, r2, r1
 800f358:	6022      	streq	r2, [r4, #0]
 800f35a:	6004      	str	r4, [r0, #0]
 800f35c:	e7ec      	b.n	800f338 <_free_r+0x24>
 800f35e:	4613      	mov	r3, r2
 800f360:	685a      	ldr	r2, [r3, #4]
 800f362:	b10a      	cbz	r2, 800f368 <_free_r+0x54>
 800f364:	42a2      	cmp	r2, r4
 800f366:	d9fa      	bls.n	800f35e <_free_r+0x4a>
 800f368:	6819      	ldr	r1, [r3, #0]
 800f36a:	1858      	adds	r0, r3, r1
 800f36c:	42a0      	cmp	r0, r4
 800f36e:	d10b      	bne.n	800f388 <_free_r+0x74>
 800f370:	6820      	ldr	r0, [r4, #0]
 800f372:	4401      	add	r1, r0
 800f374:	1858      	adds	r0, r3, r1
 800f376:	4282      	cmp	r2, r0
 800f378:	6019      	str	r1, [r3, #0]
 800f37a:	d1dd      	bne.n	800f338 <_free_r+0x24>
 800f37c:	6810      	ldr	r0, [r2, #0]
 800f37e:	6852      	ldr	r2, [r2, #4]
 800f380:	605a      	str	r2, [r3, #4]
 800f382:	4401      	add	r1, r0
 800f384:	6019      	str	r1, [r3, #0]
 800f386:	e7d7      	b.n	800f338 <_free_r+0x24>
 800f388:	d902      	bls.n	800f390 <_free_r+0x7c>
 800f38a:	230c      	movs	r3, #12
 800f38c:	602b      	str	r3, [r5, #0]
 800f38e:	e7d3      	b.n	800f338 <_free_r+0x24>
 800f390:	6820      	ldr	r0, [r4, #0]
 800f392:	1821      	adds	r1, r4, r0
 800f394:	428a      	cmp	r2, r1
 800f396:	bf04      	itt	eq
 800f398:	6811      	ldreq	r1, [r2, #0]
 800f39a:	6852      	ldreq	r2, [r2, #4]
 800f39c:	6062      	str	r2, [r4, #4]
 800f39e:	bf04      	itt	eq
 800f3a0:	1809      	addeq	r1, r1, r0
 800f3a2:	6021      	streq	r1, [r4, #0]
 800f3a4:	605c      	str	r4, [r3, #4]
 800f3a6:	e7c7      	b.n	800f338 <_free_r+0x24>
 800f3a8:	bd38      	pop	{r3, r4, r5, pc}
 800f3aa:	bf00      	nop
 800f3ac:	200007bc 	.word	0x200007bc

0800f3b0 <_malloc_r>:
 800f3b0:	b570      	push	{r4, r5, r6, lr}
 800f3b2:	1ccd      	adds	r5, r1, #3
 800f3b4:	f025 0503 	bic.w	r5, r5, #3
 800f3b8:	3508      	adds	r5, #8
 800f3ba:	2d0c      	cmp	r5, #12
 800f3bc:	bf38      	it	cc
 800f3be:	250c      	movcc	r5, #12
 800f3c0:	2d00      	cmp	r5, #0
 800f3c2:	4606      	mov	r6, r0
 800f3c4:	db01      	blt.n	800f3ca <_malloc_r+0x1a>
 800f3c6:	42a9      	cmp	r1, r5
 800f3c8:	d903      	bls.n	800f3d2 <_malloc_r+0x22>
 800f3ca:	230c      	movs	r3, #12
 800f3cc:	6033      	str	r3, [r6, #0]
 800f3ce:	2000      	movs	r0, #0
 800f3d0:	bd70      	pop	{r4, r5, r6, pc}
 800f3d2:	f002 ffdf 	bl	8012394 <__malloc_lock>
 800f3d6:	4a21      	ldr	r2, [pc, #132]	; (800f45c <_malloc_r+0xac>)
 800f3d8:	6814      	ldr	r4, [r2, #0]
 800f3da:	4621      	mov	r1, r4
 800f3dc:	b991      	cbnz	r1, 800f404 <_malloc_r+0x54>
 800f3de:	4c20      	ldr	r4, [pc, #128]	; (800f460 <_malloc_r+0xb0>)
 800f3e0:	6823      	ldr	r3, [r4, #0]
 800f3e2:	b91b      	cbnz	r3, 800f3ec <_malloc_r+0x3c>
 800f3e4:	4630      	mov	r0, r6
 800f3e6:	f000 fe93 	bl	8010110 <_sbrk_r>
 800f3ea:	6020      	str	r0, [r4, #0]
 800f3ec:	4629      	mov	r1, r5
 800f3ee:	4630      	mov	r0, r6
 800f3f0:	f000 fe8e 	bl	8010110 <_sbrk_r>
 800f3f4:	1c43      	adds	r3, r0, #1
 800f3f6:	d124      	bne.n	800f442 <_malloc_r+0x92>
 800f3f8:	230c      	movs	r3, #12
 800f3fa:	6033      	str	r3, [r6, #0]
 800f3fc:	4630      	mov	r0, r6
 800f3fe:	f002 ffca 	bl	8012396 <__malloc_unlock>
 800f402:	e7e4      	b.n	800f3ce <_malloc_r+0x1e>
 800f404:	680b      	ldr	r3, [r1, #0]
 800f406:	1b5b      	subs	r3, r3, r5
 800f408:	d418      	bmi.n	800f43c <_malloc_r+0x8c>
 800f40a:	2b0b      	cmp	r3, #11
 800f40c:	d90f      	bls.n	800f42e <_malloc_r+0x7e>
 800f40e:	600b      	str	r3, [r1, #0]
 800f410:	50cd      	str	r5, [r1, r3]
 800f412:	18cc      	adds	r4, r1, r3
 800f414:	4630      	mov	r0, r6
 800f416:	f002 ffbe 	bl	8012396 <__malloc_unlock>
 800f41a:	f104 000b 	add.w	r0, r4, #11
 800f41e:	1d23      	adds	r3, r4, #4
 800f420:	f020 0007 	bic.w	r0, r0, #7
 800f424:	1ac3      	subs	r3, r0, r3
 800f426:	d0d3      	beq.n	800f3d0 <_malloc_r+0x20>
 800f428:	425a      	negs	r2, r3
 800f42a:	50e2      	str	r2, [r4, r3]
 800f42c:	e7d0      	b.n	800f3d0 <_malloc_r+0x20>
 800f42e:	428c      	cmp	r4, r1
 800f430:	684b      	ldr	r3, [r1, #4]
 800f432:	bf16      	itet	ne
 800f434:	6063      	strne	r3, [r4, #4]
 800f436:	6013      	streq	r3, [r2, #0]
 800f438:	460c      	movne	r4, r1
 800f43a:	e7eb      	b.n	800f414 <_malloc_r+0x64>
 800f43c:	460c      	mov	r4, r1
 800f43e:	6849      	ldr	r1, [r1, #4]
 800f440:	e7cc      	b.n	800f3dc <_malloc_r+0x2c>
 800f442:	1cc4      	adds	r4, r0, #3
 800f444:	f024 0403 	bic.w	r4, r4, #3
 800f448:	42a0      	cmp	r0, r4
 800f44a:	d005      	beq.n	800f458 <_malloc_r+0xa8>
 800f44c:	1a21      	subs	r1, r4, r0
 800f44e:	4630      	mov	r0, r6
 800f450:	f000 fe5e 	bl	8010110 <_sbrk_r>
 800f454:	3001      	adds	r0, #1
 800f456:	d0cf      	beq.n	800f3f8 <_malloc_r+0x48>
 800f458:	6025      	str	r5, [r4, #0]
 800f45a:	e7db      	b.n	800f414 <_malloc_r+0x64>
 800f45c:	200007bc 	.word	0x200007bc
 800f460:	200007c0 	.word	0x200007c0

0800f464 <__cvt>:
 800f464:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f468:	ec55 4b10 	vmov	r4, r5, d0
 800f46c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800f46e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f472:	2d00      	cmp	r5, #0
 800f474:	460e      	mov	r6, r1
 800f476:	4691      	mov	r9, r2
 800f478:	4619      	mov	r1, r3
 800f47a:	bfb8      	it	lt
 800f47c:	4622      	movlt	r2, r4
 800f47e:	462b      	mov	r3, r5
 800f480:	f027 0720 	bic.w	r7, r7, #32
 800f484:	bfbb      	ittet	lt
 800f486:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f48a:	461d      	movlt	r5, r3
 800f48c:	2300      	movge	r3, #0
 800f48e:	232d      	movlt	r3, #45	; 0x2d
 800f490:	bfb8      	it	lt
 800f492:	4614      	movlt	r4, r2
 800f494:	2f46      	cmp	r7, #70	; 0x46
 800f496:	700b      	strb	r3, [r1, #0]
 800f498:	d004      	beq.n	800f4a4 <__cvt+0x40>
 800f49a:	2f45      	cmp	r7, #69	; 0x45
 800f49c:	d100      	bne.n	800f4a0 <__cvt+0x3c>
 800f49e:	3601      	adds	r6, #1
 800f4a0:	2102      	movs	r1, #2
 800f4a2:	e000      	b.n	800f4a6 <__cvt+0x42>
 800f4a4:	2103      	movs	r1, #3
 800f4a6:	ab03      	add	r3, sp, #12
 800f4a8:	9301      	str	r3, [sp, #4]
 800f4aa:	ab02      	add	r3, sp, #8
 800f4ac:	9300      	str	r3, [sp, #0]
 800f4ae:	4632      	mov	r2, r6
 800f4b0:	4653      	mov	r3, sl
 800f4b2:	ec45 4b10 	vmov	d0, r4, r5
 800f4b6:	f001 fd9f 	bl	8010ff8 <_dtoa_r>
 800f4ba:	2f47      	cmp	r7, #71	; 0x47
 800f4bc:	4680      	mov	r8, r0
 800f4be:	d102      	bne.n	800f4c6 <__cvt+0x62>
 800f4c0:	f019 0f01 	tst.w	r9, #1
 800f4c4:	d026      	beq.n	800f514 <__cvt+0xb0>
 800f4c6:	2f46      	cmp	r7, #70	; 0x46
 800f4c8:	eb08 0906 	add.w	r9, r8, r6
 800f4cc:	d111      	bne.n	800f4f2 <__cvt+0x8e>
 800f4ce:	f898 3000 	ldrb.w	r3, [r8]
 800f4d2:	2b30      	cmp	r3, #48	; 0x30
 800f4d4:	d10a      	bne.n	800f4ec <__cvt+0x88>
 800f4d6:	2200      	movs	r2, #0
 800f4d8:	2300      	movs	r3, #0
 800f4da:	4620      	mov	r0, r4
 800f4dc:	4629      	mov	r1, r5
 800f4de:	f7f1 faf3 	bl	8000ac8 <__aeabi_dcmpeq>
 800f4e2:	b918      	cbnz	r0, 800f4ec <__cvt+0x88>
 800f4e4:	f1c6 0601 	rsb	r6, r6, #1
 800f4e8:	f8ca 6000 	str.w	r6, [sl]
 800f4ec:	f8da 3000 	ldr.w	r3, [sl]
 800f4f0:	4499      	add	r9, r3
 800f4f2:	2200      	movs	r2, #0
 800f4f4:	2300      	movs	r3, #0
 800f4f6:	4620      	mov	r0, r4
 800f4f8:	4629      	mov	r1, r5
 800f4fa:	f7f1 fae5 	bl	8000ac8 <__aeabi_dcmpeq>
 800f4fe:	b938      	cbnz	r0, 800f510 <__cvt+0xac>
 800f500:	2230      	movs	r2, #48	; 0x30
 800f502:	9b03      	ldr	r3, [sp, #12]
 800f504:	454b      	cmp	r3, r9
 800f506:	d205      	bcs.n	800f514 <__cvt+0xb0>
 800f508:	1c59      	adds	r1, r3, #1
 800f50a:	9103      	str	r1, [sp, #12]
 800f50c:	701a      	strb	r2, [r3, #0]
 800f50e:	e7f8      	b.n	800f502 <__cvt+0x9e>
 800f510:	f8cd 900c 	str.w	r9, [sp, #12]
 800f514:	9b03      	ldr	r3, [sp, #12]
 800f516:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f518:	eba3 0308 	sub.w	r3, r3, r8
 800f51c:	4640      	mov	r0, r8
 800f51e:	6013      	str	r3, [r2, #0]
 800f520:	b004      	add	sp, #16
 800f522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800f526 <__exponent>:
 800f526:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f528:	2900      	cmp	r1, #0
 800f52a:	4604      	mov	r4, r0
 800f52c:	bfba      	itte	lt
 800f52e:	4249      	neglt	r1, r1
 800f530:	232d      	movlt	r3, #45	; 0x2d
 800f532:	232b      	movge	r3, #43	; 0x2b
 800f534:	2909      	cmp	r1, #9
 800f536:	f804 2b02 	strb.w	r2, [r4], #2
 800f53a:	7043      	strb	r3, [r0, #1]
 800f53c:	dd20      	ble.n	800f580 <__exponent+0x5a>
 800f53e:	f10d 0307 	add.w	r3, sp, #7
 800f542:	461f      	mov	r7, r3
 800f544:	260a      	movs	r6, #10
 800f546:	fb91 f5f6 	sdiv	r5, r1, r6
 800f54a:	fb06 1115 	mls	r1, r6, r5, r1
 800f54e:	3130      	adds	r1, #48	; 0x30
 800f550:	2d09      	cmp	r5, #9
 800f552:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f556:	f103 32ff 	add.w	r2, r3, #4294967295
 800f55a:	4629      	mov	r1, r5
 800f55c:	dc09      	bgt.n	800f572 <__exponent+0x4c>
 800f55e:	3130      	adds	r1, #48	; 0x30
 800f560:	3b02      	subs	r3, #2
 800f562:	f802 1c01 	strb.w	r1, [r2, #-1]
 800f566:	42bb      	cmp	r3, r7
 800f568:	4622      	mov	r2, r4
 800f56a:	d304      	bcc.n	800f576 <__exponent+0x50>
 800f56c:	1a10      	subs	r0, r2, r0
 800f56e:	b003      	add	sp, #12
 800f570:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f572:	4613      	mov	r3, r2
 800f574:	e7e7      	b.n	800f546 <__exponent+0x20>
 800f576:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f57a:	f804 2b01 	strb.w	r2, [r4], #1
 800f57e:	e7f2      	b.n	800f566 <__exponent+0x40>
 800f580:	2330      	movs	r3, #48	; 0x30
 800f582:	4419      	add	r1, r3
 800f584:	7083      	strb	r3, [r0, #2]
 800f586:	1d02      	adds	r2, r0, #4
 800f588:	70c1      	strb	r1, [r0, #3]
 800f58a:	e7ef      	b.n	800f56c <__exponent+0x46>

0800f58c <_printf_float>:
 800f58c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f590:	b08d      	sub	sp, #52	; 0x34
 800f592:	460c      	mov	r4, r1
 800f594:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800f598:	4616      	mov	r6, r2
 800f59a:	461f      	mov	r7, r3
 800f59c:	4605      	mov	r5, r0
 800f59e:	f002 fed9 	bl	8012354 <_localeconv_r>
 800f5a2:	6803      	ldr	r3, [r0, #0]
 800f5a4:	9304      	str	r3, [sp, #16]
 800f5a6:	4618      	mov	r0, r3
 800f5a8:	f7f0 fe12 	bl	80001d0 <strlen>
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	930a      	str	r3, [sp, #40]	; 0x28
 800f5b0:	f8d8 3000 	ldr.w	r3, [r8]
 800f5b4:	9005      	str	r0, [sp, #20]
 800f5b6:	3307      	adds	r3, #7
 800f5b8:	f023 0307 	bic.w	r3, r3, #7
 800f5bc:	f103 0208 	add.w	r2, r3, #8
 800f5c0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f5c4:	f8d4 b000 	ldr.w	fp, [r4]
 800f5c8:	f8c8 2000 	str.w	r2, [r8]
 800f5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5d0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f5d4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f5d8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f5dc:	9307      	str	r3, [sp, #28]
 800f5de:	f8cd 8018 	str.w	r8, [sp, #24]
 800f5e2:	f04f 32ff 	mov.w	r2, #4294967295
 800f5e6:	4ba7      	ldr	r3, [pc, #668]	; (800f884 <_printf_float+0x2f8>)
 800f5e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f5ec:	f7f1 fa9e 	bl	8000b2c <__aeabi_dcmpun>
 800f5f0:	bb70      	cbnz	r0, 800f650 <_printf_float+0xc4>
 800f5f2:	f04f 32ff 	mov.w	r2, #4294967295
 800f5f6:	4ba3      	ldr	r3, [pc, #652]	; (800f884 <_printf_float+0x2f8>)
 800f5f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f5fc:	f7f1 fa78 	bl	8000af0 <__aeabi_dcmple>
 800f600:	bb30      	cbnz	r0, 800f650 <_printf_float+0xc4>
 800f602:	2200      	movs	r2, #0
 800f604:	2300      	movs	r3, #0
 800f606:	4640      	mov	r0, r8
 800f608:	4649      	mov	r1, r9
 800f60a:	f7f1 fa67 	bl	8000adc <__aeabi_dcmplt>
 800f60e:	b110      	cbz	r0, 800f616 <_printf_float+0x8a>
 800f610:	232d      	movs	r3, #45	; 0x2d
 800f612:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f616:	4a9c      	ldr	r2, [pc, #624]	; (800f888 <_printf_float+0x2fc>)
 800f618:	4b9c      	ldr	r3, [pc, #624]	; (800f88c <_printf_float+0x300>)
 800f61a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800f61e:	bf8c      	ite	hi
 800f620:	4690      	movhi	r8, r2
 800f622:	4698      	movls	r8, r3
 800f624:	2303      	movs	r3, #3
 800f626:	f02b 0204 	bic.w	r2, fp, #4
 800f62a:	6123      	str	r3, [r4, #16]
 800f62c:	6022      	str	r2, [r4, #0]
 800f62e:	f04f 0900 	mov.w	r9, #0
 800f632:	9700      	str	r7, [sp, #0]
 800f634:	4633      	mov	r3, r6
 800f636:	aa0b      	add	r2, sp, #44	; 0x2c
 800f638:	4621      	mov	r1, r4
 800f63a:	4628      	mov	r0, r5
 800f63c:	f000 f9e6 	bl	800fa0c <_printf_common>
 800f640:	3001      	adds	r0, #1
 800f642:	f040 808d 	bne.w	800f760 <_printf_float+0x1d4>
 800f646:	f04f 30ff 	mov.w	r0, #4294967295
 800f64a:	b00d      	add	sp, #52	; 0x34
 800f64c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f650:	4642      	mov	r2, r8
 800f652:	464b      	mov	r3, r9
 800f654:	4640      	mov	r0, r8
 800f656:	4649      	mov	r1, r9
 800f658:	f7f1 fa68 	bl	8000b2c <__aeabi_dcmpun>
 800f65c:	b110      	cbz	r0, 800f664 <_printf_float+0xd8>
 800f65e:	4a8c      	ldr	r2, [pc, #560]	; (800f890 <_printf_float+0x304>)
 800f660:	4b8c      	ldr	r3, [pc, #560]	; (800f894 <_printf_float+0x308>)
 800f662:	e7da      	b.n	800f61a <_printf_float+0x8e>
 800f664:	6861      	ldr	r1, [r4, #4]
 800f666:	1c4b      	adds	r3, r1, #1
 800f668:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800f66c:	a80a      	add	r0, sp, #40	; 0x28
 800f66e:	d13e      	bne.n	800f6ee <_printf_float+0x162>
 800f670:	2306      	movs	r3, #6
 800f672:	6063      	str	r3, [r4, #4]
 800f674:	2300      	movs	r3, #0
 800f676:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800f67a:	ab09      	add	r3, sp, #36	; 0x24
 800f67c:	9300      	str	r3, [sp, #0]
 800f67e:	ec49 8b10 	vmov	d0, r8, r9
 800f682:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f686:	6022      	str	r2, [r4, #0]
 800f688:	f8cd a004 	str.w	sl, [sp, #4]
 800f68c:	6861      	ldr	r1, [r4, #4]
 800f68e:	4628      	mov	r0, r5
 800f690:	f7ff fee8 	bl	800f464 <__cvt>
 800f694:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800f698:	2b47      	cmp	r3, #71	; 0x47
 800f69a:	4680      	mov	r8, r0
 800f69c:	d109      	bne.n	800f6b2 <_printf_float+0x126>
 800f69e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6a0:	1cd8      	adds	r0, r3, #3
 800f6a2:	db02      	blt.n	800f6aa <_printf_float+0x11e>
 800f6a4:	6862      	ldr	r2, [r4, #4]
 800f6a6:	4293      	cmp	r3, r2
 800f6a8:	dd47      	ble.n	800f73a <_printf_float+0x1ae>
 800f6aa:	f1aa 0a02 	sub.w	sl, sl, #2
 800f6ae:	fa5f fa8a 	uxtb.w	sl, sl
 800f6b2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800f6b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f6b8:	d824      	bhi.n	800f704 <_printf_float+0x178>
 800f6ba:	3901      	subs	r1, #1
 800f6bc:	4652      	mov	r2, sl
 800f6be:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f6c2:	9109      	str	r1, [sp, #36]	; 0x24
 800f6c4:	f7ff ff2f 	bl	800f526 <__exponent>
 800f6c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f6ca:	1813      	adds	r3, r2, r0
 800f6cc:	2a01      	cmp	r2, #1
 800f6ce:	4681      	mov	r9, r0
 800f6d0:	6123      	str	r3, [r4, #16]
 800f6d2:	dc02      	bgt.n	800f6da <_printf_float+0x14e>
 800f6d4:	6822      	ldr	r2, [r4, #0]
 800f6d6:	07d1      	lsls	r1, r2, #31
 800f6d8:	d501      	bpl.n	800f6de <_printf_float+0x152>
 800f6da:	3301      	adds	r3, #1
 800f6dc:	6123      	str	r3, [r4, #16]
 800f6de:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d0a5      	beq.n	800f632 <_printf_float+0xa6>
 800f6e6:	232d      	movs	r3, #45	; 0x2d
 800f6e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f6ec:	e7a1      	b.n	800f632 <_printf_float+0xa6>
 800f6ee:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800f6f2:	f000 8177 	beq.w	800f9e4 <_printf_float+0x458>
 800f6f6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800f6fa:	d1bb      	bne.n	800f674 <_printf_float+0xe8>
 800f6fc:	2900      	cmp	r1, #0
 800f6fe:	d1b9      	bne.n	800f674 <_printf_float+0xe8>
 800f700:	2301      	movs	r3, #1
 800f702:	e7b6      	b.n	800f672 <_printf_float+0xe6>
 800f704:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800f708:	d119      	bne.n	800f73e <_printf_float+0x1b2>
 800f70a:	2900      	cmp	r1, #0
 800f70c:	6863      	ldr	r3, [r4, #4]
 800f70e:	dd0c      	ble.n	800f72a <_printf_float+0x19e>
 800f710:	6121      	str	r1, [r4, #16]
 800f712:	b913      	cbnz	r3, 800f71a <_printf_float+0x18e>
 800f714:	6822      	ldr	r2, [r4, #0]
 800f716:	07d2      	lsls	r2, r2, #31
 800f718:	d502      	bpl.n	800f720 <_printf_float+0x194>
 800f71a:	3301      	adds	r3, #1
 800f71c:	440b      	add	r3, r1
 800f71e:	6123      	str	r3, [r4, #16]
 800f720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f722:	65a3      	str	r3, [r4, #88]	; 0x58
 800f724:	f04f 0900 	mov.w	r9, #0
 800f728:	e7d9      	b.n	800f6de <_printf_float+0x152>
 800f72a:	b913      	cbnz	r3, 800f732 <_printf_float+0x1a6>
 800f72c:	6822      	ldr	r2, [r4, #0]
 800f72e:	07d0      	lsls	r0, r2, #31
 800f730:	d501      	bpl.n	800f736 <_printf_float+0x1aa>
 800f732:	3302      	adds	r3, #2
 800f734:	e7f3      	b.n	800f71e <_printf_float+0x192>
 800f736:	2301      	movs	r3, #1
 800f738:	e7f1      	b.n	800f71e <_printf_float+0x192>
 800f73a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800f73e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f742:	4293      	cmp	r3, r2
 800f744:	db05      	blt.n	800f752 <_printf_float+0x1c6>
 800f746:	6822      	ldr	r2, [r4, #0]
 800f748:	6123      	str	r3, [r4, #16]
 800f74a:	07d1      	lsls	r1, r2, #31
 800f74c:	d5e8      	bpl.n	800f720 <_printf_float+0x194>
 800f74e:	3301      	adds	r3, #1
 800f750:	e7e5      	b.n	800f71e <_printf_float+0x192>
 800f752:	2b00      	cmp	r3, #0
 800f754:	bfd4      	ite	le
 800f756:	f1c3 0302 	rsble	r3, r3, #2
 800f75a:	2301      	movgt	r3, #1
 800f75c:	4413      	add	r3, r2
 800f75e:	e7de      	b.n	800f71e <_printf_float+0x192>
 800f760:	6823      	ldr	r3, [r4, #0]
 800f762:	055a      	lsls	r2, r3, #21
 800f764:	d407      	bmi.n	800f776 <_printf_float+0x1ea>
 800f766:	6923      	ldr	r3, [r4, #16]
 800f768:	4642      	mov	r2, r8
 800f76a:	4631      	mov	r1, r6
 800f76c:	4628      	mov	r0, r5
 800f76e:	47b8      	blx	r7
 800f770:	3001      	adds	r0, #1
 800f772:	d12b      	bne.n	800f7cc <_printf_float+0x240>
 800f774:	e767      	b.n	800f646 <_printf_float+0xba>
 800f776:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800f77a:	f240 80dc 	bls.w	800f936 <_printf_float+0x3aa>
 800f77e:	2200      	movs	r2, #0
 800f780:	2300      	movs	r3, #0
 800f782:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f786:	f7f1 f99f 	bl	8000ac8 <__aeabi_dcmpeq>
 800f78a:	2800      	cmp	r0, #0
 800f78c:	d033      	beq.n	800f7f6 <_printf_float+0x26a>
 800f78e:	2301      	movs	r3, #1
 800f790:	4a41      	ldr	r2, [pc, #260]	; (800f898 <_printf_float+0x30c>)
 800f792:	4631      	mov	r1, r6
 800f794:	4628      	mov	r0, r5
 800f796:	47b8      	blx	r7
 800f798:	3001      	adds	r0, #1
 800f79a:	f43f af54 	beq.w	800f646 <_printf_float+0xba>
 800f79e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f7a2:	429a      	cmp	r2, r3
 800f7a4:	db02      	blt.n	800f7ac <_printf_float+0x220>
 800f7a6:	6823      	ldr	r3, [r4, #0]
 800f7a8:	07d8      	lsls	r0, r3, #31
 800f7aa:	d50f      	bpl.n	800f7cc <_printf_float+0x240>
 800f7ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f7b0:	4631      	mov	r1, r6
 800f7b2:	4628      	mov	r0, r5
 800f7b4:	47b8      	blx	r7
 800f7b6:	3001      	adds	r0, #1
 800f7b8:	f43f af45 	beq.w	800f646 <_printf_float+0xba>
 800f7bc:	f04f 0800 	mov.w	r8, #0
 800f7c0:	f104 091a 	add.w	r9, r4, #26
 800f7c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f7c6:	3b01      	subs	r3, #1
 800f7c8:	4543      	cmp	r3, r8
 800f7ca:	dc09      	bgt.n	800f7e0 <_printf_float+0x254>
 800f7cc:	6823      	ldr	r3, [r4, #0]
 800f7ce:	079b      	lsls	r3, r3, #30
 800f7d0:	f100 8103 	bmi.w	800f9da <_printf_float+0x44e>
 800f7d4:	68e0      	ldr	r0, [r4, #12]
 800f7d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f7d8:	4298      	cmp	r0, r3
 800f7da:	bfb8      	it	lt
 800f7dc:	4618      	movlt	r0, r3
 800f7de:	e734      	b.n	800f64a <_printf_float+0xbe>
 800f7e0:	2301      	movs	r3, #1
 800f7e2:	464a      	mov	r2, r9
 800f7e4:	4631      	mov	r1, r6
 800f7e6:	4628      	mov	r0, r5
 800f7e8:	47b8      	blx	r7
 800f7ea:	3001      	adds	r0, #1
 800f7ec:	f43f af2b 	beq.w	800f646 <_printf_float+0xba>
 800f7f0:	f108 0801 	add.w	r8, r8, #1
 800f7f4:	e7e6      	b.n	800f7c4 <_printf_float+0x238>
 800f7f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	dc2b      	bgt.n	800f854 <_printf_float+0x2c8>
 800f7fc:	2301      	movs	r3, #1
 800f7fe:	4a26      	ldr	r2, [pc, #152]	; (800f898 <_printf_float+0x30c>)
 800f800:	4631      	mov	r1, r6
 800f802:	4628      	mov	r0, r5
 800f804:	47b8      	blx	r7
 800f806:	3001      	adds	r0, #1
 800f808:	f43f af1d 	beq.w	800f646 <_printf_float+0xba>
 800f80c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f80e:	b923      	cbnz	r3, 800f81a <_printf_float+0x28e>
 800f810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f812:	b913      	cbnz	r3, 800f81a <_printf_float+0x28e>
 800f814:	6823      	ldr	r3, [r4, #0]
 800f816:	07d9      	lsls	r1, r3, #31
 800f818:	d5d8      	bpl.n	800f7cc <_printf_float+0x240>
 800f81a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f81e:	4631      	mov	r1, r6
 800f820:	4628      	mov	r0, r5
 800f822:	47b8      	blx	r7
 800f824:	3001      	adds	r0, #1
 800f826:	f43f af0e 	beq.w	800f646 <_printf_float+0xba>
 800f82a:	f04f 0900 	mov.w	r9, #0
 800f82e:	f104 0a1a 	add.w	sl, r4, #26
 800f832:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f834:	425b      	negs	r3, r3
 800f836:	454b      	cmp	r3, r9
 800f838:	dc01      	bgt.n	800f83e <_printf_float+0x2b2>
 800f83a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f83c:	e794      	b.n	800f768 <_printf_float+0x1dc>
 800f83e:	2301      	movs	r3, #1
 800f840:	4652      	mov	r2, sl
 800f842:	4631      	mov	r1, r6
 800f844:	4628      	mov	r0, r5
 800f846:	47b8      	blx	r7
 800f848:	3001      	adds	r0, #1
 800f84a:	f43f aefc 	beq.w	800f646 <_printf_float+0xba>
 800f84e:	f109 0901 	add.w	r9, r9, #1
 800f852:	e7ee      	b.n	800f832 <_printf_float+0x2a6>
 800f854:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f856:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f858:	429a      	cmp	r2, r3
 800f85a:	bfa8      	it	ge
 800f85c:	461a      	movge	r2, r3
 800f85e:	2a00      	cmp	r2, #0
 800f860:	4691      	mov	r9, r2
 800f862:	dd07      	ble.n	800f874 <_printf_float+0x2e8>
 800f864:	4613      	mov	r3, r2
 800f866:	4631      	mov	r1, r6
 800f868:	4642      	mov	r2, r8
 800f86a:	4628      	mov	r0, r5
 800f86c:	47b8      	blx	r7
 800f86e:	3001      	adds	r0, #1
 800f870:	f43f aee9 	beq.w	800f646 <_printf_float+0xba>
 800f874:	f104 031a 	add.w	r3, r4, #26
 800f878:	f04f 0b00 	mov.w	fp, #0
 800f87c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f880:	9306      	str	r3, [sp, #24]
 800f882:	e015      	b.n	800f8b0 <_printf_float+0x324>
 800f884:	7fefffff 	.word	0x7fefffff
 800f888:	080138d8 	.word	0x080138d8
 800f88c:	080138d4 	.word	0x080138d4
 800f890:	080138e0 	.word	0x080138e0
 800f894:	080138dc 	.word	0x080138dc
 800f898:	080138e4 	.word	0x080138e4
 800f89c:	2301      	movs	r3, #1
 800f89e:	9a06      	ldr	r2, [sp, #24]
 800f8a0:	4631      	mov	r1, r6
 800f8a2:	4628      	mov	r0, r5
 800f8a4:	47b8      	blx	r7
 800f8a6:	3001      	adds	r0, #1
 800f8a8:	f43f aecd 	beq.w	800f646 <_printf_float+0xba>
 800f8ac:	f10b 0b01 	add.w	fp, fp, #1
 800f8b0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800f8b4:	ebaa 0309 	sub.w	r3, sl, r9
 800f8b8:	455b      	cmp	r3, fp
 800f8ba:	dcef      	bgt.n	800f89c <_printf_float+0x310>
 800f8bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f8c0:	429a      	cmp	r2, r3
 800f8c2:	44d0      	add	r8, sl
 800f8c4:	db15      	blt.n	800f8f2 <_printf_float+0x366>
 800f8c6:	6823      	ldr	r3, [r4, #0]
 800f8c8:	07da      	lsls	r2, r3, #31
 800f8ca:	d412      	bmi.n	800f8f2 <_printf_float+0x366>
 800f8cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f8ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f8d0:	eba3 020a 	sub.w	r2, r3, sl
 800f8d4:	eba3 0a01 	sub.w	sl, r3, r1
 800f8d8:	4592      	cmp	sl, r2
 800f8da:	bfa8      	it	ge
 800f8dc:	4692      	movge	sl, r2
 800f8de:	f1ba 0f00 	cmp.w	sl, #0
 800f8e2:	dc0e      	bgt.n	800f902 <_printf_float+0x376>
 800f8e4:	f04f 0800 	mov.w	r8, #0
 800f8e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f8ec:	f104 091a 	add.w	r9, r4, #26
 800f8f0:	e019      	b.n	800f926 <_printf_float+0x39a>
 800f8f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f8f6:	4631      	mov	r1, r6
 800f8f8:	4628      	mov	r0, r5
 800f8fa:	47b8      	blx	r7
 800f8fc:	3001      	adds	r0, #1
 800f8fe:	d1e5      	bne.n	800f8cc <_printf_float+0x340>
 800f900:	e6a1      	b.n	800f646 <_printf_float+0xba>
 800f902:	4653      	mov	r3, sl
 800f904:	4642      	mov	r2, r8
 800f906:	4631      	mov	r1, r6
 800f908:	4628      	mov	r0, r5
 800f90a:	47b8      	blx	r7
 800f90c:	3001      	adds	r0, #1
 800f90e:	d1e9      	bne.n	800f8e4 <_printf_float+0x358>
 800f910:	e699      	b.n	800f646 <_printf_float+0xba>
 800f912:	2301      	movs	r3, #1
 800f914:	464a      	mov	r2, r9
 800f916:	4631      	mov	r1, r6
 800f918:	4628      	mov	r0, r5
 800f91a:	47b8      	blx	r7
 800f91c:	3001      	adds	r0, #1
 800f91e:	f43f ae92 	beq.w	800f646 <_printf_float+0xba>
 800f922:	f108 0801 	add.w	r8, r8, #1
 800f926:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f92a:	1a9b      	subs	r3, r3, r2
 800f92c:	eba3 030a 	sub.w	r3, r3, sl
 800f930:	4543      	cmp	r3, r8
 800f932:	dcee      	bgt.n	800f912 <_printf_float+0x386>
 800f934:	e74a      	b.n	800f7cc <_printf_float+0x240>
 800f936:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f938:	2a01      	cmp	r2, #1
 800f93a:	dc01      	bgt.n	800f940 <_printf_float+0x3b4>
 800f93c:	07db      	lsls	r3, r3, #31
 800f93e:	d53a      	bpl.n	800f9b6 <_printf_float+0x42a>
 800f940:	2301      	movs	r3, #1
 800f942:	4642      	mov	r2, r8
 800f944:	4631      	mov	r1, r6
 800f946:	4628      	mov	r0, r5
 800f948:	47b8      	blx	r7
 800f94a:	3001      	adds	r0, #1
 800f94c:	f43f ae7b 	beq.w	800f646 <_printf_float+0xba>
 800f950:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f954:	4631      	mov	r1, r6
 800f956:	4628      	mov	r0, r5
 800f958:	47b8      	blx	r7
 800f95a:	3001      	adds	r0, #1
 800f95c:	f108 0801 	add.w	r8, r8, #1
 800f960:	f43f ae71 	beq.w	800f646 <_printf_float+0xba>
 800f964:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f966:	2200      	movs	r2, #0
 800f968:	f103 3aff 	add.w	sl, r3, #4294967295
 800f96c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f970:	2300      	movs	r3, #0
 800f972:	f7f1 f8a9 	bl	8000ac8 <__aeabi_dcmpeq>
 800f976:	b9c8      	cbnz	r0, 800f9ac <_printf_float+0x420>
 800f978:	4653      	mov	r3, sl
 800f97a:	4642      	mov	r2, r8
 800f97c:	4631      	mov	r1, r6
 800f97e:	4628      	mov	r0, r5
 800f980:	47b8      	blx	r7
 800f982:	3001      	adds	r0, #1
 800f984:	d10e      	bne.n	800f9a4 <_printf_float+0x418>
 800f986:	e65e      	b.n	800f646 <_printf_float+0xba>
 800f988:	2301      	movs	r3, #1
 800f98a:	4652      	mov	r2, sl
 800f98c:	4631      	mov	r1, r6
 800f98e:	4628      	mov	r0, r5
 800f990:	47b8      	blx	r7
 800f992:	3001      	adds	r0, #1
 800f994:	f43f ae57 	beq.w	800f646 <_printf_float+0xba>
 800f998:	f108 0801 	add.w	r8, r8, #1
 800f99c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f99e:	3b01      	subs	r3, #1
 800f9a0:	4543      	cmp	r3, r8
 800f9a2:	dcf1      	bgt.n	800f988 <_printf_float+0x3fc>
 800f9a4:	464b      	mov	r3, r9
 800f9a6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f9aa:	e6de      	b.n	800f76a <_printf_float+0x1de>
 800f9ac:	f04f 0800 	mov.w	r8, #0
 800f9b0:	f104 0a1a 	add.w	sl, r4, #26
 800f9b4:	e7f2      	b.n	800f99c <_printf_float+0x410>
 800f9b6:	2301      	movs	r3, #1
 800f9b8:	e7df      	b.n	800f97a <_printf_float+0x3ee>
 800f9ba:	2301      	movs	r3, #1
 800f9bc:	464a      	mov	r2, r9
 800f9be:	4631      	mov	r1, r6
 800f9c0:	4628      	mov	r0, r5
 800f9c2:	47b8      	blx	r7
 800f9c4:	3001      	adds	r0, #1
 800f9c6:	f43f ae3e 	beq.w	800f646 <_printf_float+0xba>
 800f9ca:	f108 0801 	add.w	r8, r8, #1
 800f9ce:	68e3      	ldr	r3, [r4, #12]
 800f9d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f9d2:	1a9b      	subs	r3, r3, r2
 800f9d4:	4543      	cmp	r3, r8
 800f9d6:	dcf0      	bgt.n	800f9ba <_printf_float+0x42e>
 800f9d8:	e6fc      	b.n	800f7d4 <_printf_float+0x248>
 800f9da:	f04f 0800 	mov.w	r8, #0
 800f9de:	f104 0919 	add.w	r9, r4, #25
 800f9e2:	e7f4      	b.n	800f9ce <_printf_float+0x442>
 800f9e4:	2900      	cmp	r1, #0
 800f9e6:	f43f ae8b 	beq.w	800f700 <_printf_float+0x174>
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800f9f0:	ab09      	add	r3, sp, #36	; 0x24
 800f9f2:	9300      	str	r3, [sp, #0]
 800f9f4:	ec49 8b10 	vmov	d0, r8, r9
 800f9f8:	6022      	str	r2, [r4, #0]
 800f9fa:	f8cd a004 	str.w	sl, [sp, #4]
 800f9fe:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800fa02:	4628      	mov	r0, r5
 800fa04:	f7ff fd2e 	bl	800f464 <__cvt>
 800fa08:	4680      	mov	r8, r0
 800fa0a:	e648      	b.n	800f69e <_printf_float+0x112>

0800fa0c <_printf_common>:
 800fa0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa10:	4691      	mov	r9, r2
 800fa12:	461f      	mov	r7, r3
 800fa14:	688a      	ldr	r2, [r1, #8]
 800fa16:	690b      	ldr	r3, [r1, #16]
 800fa18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fa1c:	4293      	cmp	r3, r2
 800fa1e:	bfb8      	it	lt
 800fa20:	4613      	movlt	r3, r2
 800fa22:	f8c9 3000 	str.w	r3, [r9]
 800fa26:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fa2a:	4606      	mov	r6, r0
 800fa2c:	460c      	mov	r4, r1
 800fa2e:	b112      	cbz	r2, 800fa36 <_printf_common+0x2a>
 800fa30:	3301      	adds	r3, #1
 800fa32:	f8c9 3000 	str.w	r3, [r9]
 800fa36:	6823      	ldr	r3, [r4, #0]
 800fa38:	0699      	lsls	r1, r3, #26
 800fa3a:	bf42      	ittt	mi
 800fa3c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800fa40:	3302      	addmi	r3, #2
 800fa42:	f8c9 3000 	strmi.w	r3, [r9]
 800fa46:	6825      	ldr	r5, [r4, #0]
 800fa48:	f015 0506 	ands.w	r5, r5, #6
 800fa4c:	d107      	bne.n	800fa5e <_printf_common+0x52>
 800fa4e:	f104 0a19 	add.w	sl, r4, #25
 800fa52:	68e3      	ldr	r3, [r4, #12]
 800fa54:	f8d9 2000 	ldr.w	r2, [r9]
 800fa58:	1a9b      	subs	r3, r3, r2
 800fa5a:	42ab      	cmp	r3, r5
 800fa5c:	dc28      	bgt.n	800fab0 <_printf_common+0xa4>
 800fa5e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800fa62:	6822      	ldr	r2, [r4, #0]
 800fa64:	3300      	adds	r3, #0
 800fa66:	bf18      	it	ne
 800fa68:	2301      	movne	r3, #1
 800fa6a:	0692      	lsls	r2, r2, #26
 800fa6c:	d42d      	bmi.n	800faca <_printf_common+0xbe>
 800fa6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fa72:	4639      	mov	r1, r7
 800fa74:	4630      	mov	r0, r6
 800fa76:	47c0      	blx	r8
 800fa78:	3001      	adds	r0, #1
 800fa7a:	d020      	beq.n	800fabe <_printf_common+0xb2>
 800fa7c:	6823      	ldr	r3, [r4, #0]
 800fa7e:	68e5      	ldr	r5, [r4, #12]
 800fa80:	f8d9 2000 	ldr.w	r2, [r9]
 800fa84:	f003 0306 	and.w	r3, r3, #6
 800fa88:	2b04      	cmp	r3, #4
 800fa8a:	bf08      	it	eq
 800fa8c:	1aad      	subeq	r5, r5, r2
 800fa8e:	68a3      	ldr	r3, [r4, #8]
 800fa90:	6922      	ldr	r2, [r4, #16]
 800fa92:	bf0c      	ite	eq
 800fa94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fa98:	2500      	movne	r5, #0
 800fa9a:	4293      	cmp	r3, r2
 800fa9c:	bfc4      	itt	gt
 800fa9e:	1a9b      	subgt	r3, r3, r2
 800faa0:	18ed      	addgt	r5, r5, r3
 800faa2:	f04f 0900 	mov.w	r9, #0
 800faa6:	341a      	adds	r4, #26
 800faa8:	454d      	cmp	r5, r9
 800faaa:	d11a      	bne.n	800fae2 <_printf_common+0xd6>
 800faac:	2000      	movs	r0, #0
 800faae:	e008      	b.n	800fac2 <_printf_common+0xb6>
 800fab0:	2301      	movs	r3, #1
 800fab2:	4652      	mov	r2, sl
 800fab4:	4639      	mov	r1, r7
 800fab6:	4630      	mov	r0, r6
 800fab8:	47c0      	blx	r8
 800faba:	3001      	adds	r0, #1
 800fabc:	d103      	bne.n	800fac6 <_printf_common+0xba>
 800fabe:	f04f 30ff 	mov.w	r0, #4294967295
 800fac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fac6:	3501      	adds	r5, #1
 800fac8:	e7c3      	b.n	800fa52 <_printf_common+0x46>
 800faca:	18e1      	adds	r1, r4, r3
 800facc:	1c5a      	adds	r2, r3, #1
 800face:	2030      	movs	r0, #48	; 0x30
 800fad0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fad4:	4422      	add	r2, r4
 800fad6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fada:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fade:	3302      	adds	r3, #2
 800fae0:	e7c5      	b.n	800fa6e <_printf_common+0x62>
 800fae2:	2301      	movs	r3, #1
 800fae4:	4622      	mov	r2, r4
 800fae6:	4639      	mov	r1, r7
 800fae8:	4630      	mov	r0, r6
 800faea:	47c0      	blx	r8
 800faec:	3001      	adds	r0, #1
 800faee:	d0e6      	beq.n	800fabe <_printf_common+0xb2>
 800faf0:	f109 0901 	add.w	r9, r9, #1
 800faf4:	e7d8      	b.n	800faa8 <_printf_common+0x9c>
	...

0800faf8 <_printf_i>:
 800faf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fafc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800fb00:	460c      	mov	r4, r1
 800fb02:	7e09      	ldrb	r1, [r1, #24]
 800fb04:	b085      	sub	sp, #20
 800fb06:	296e      	cmp	r1, #110	; 0x6e
 800fb08:	4617      	mov	r7, r2
 800fb0a:	4606      	mov	r6, r0
 800fb0c:	4698      	mov	r8, r3
 800fb0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fb10:	f000 80b3 	beq.w	800fc7a <_printf_i+0x182>
 800fb14:	d822      	bhi.n	800fb5c <_printf_i+0x64>
 800fb16:	2963      	cmp	r1, #99	; 0x63
 800fb18:	d036      	beq.n	800fb88 <_printf_i+0x90>
 800fb1a:	d80a      	bhi.n	800fb32 <_printf_i+0x3a>
 800fb1c:	2900      	cmp	r1, #0
 800fb1e:	f000 80b9 	beq.w	800fc94 <_printf_i+0x19c>
 800fb22:	2958      	cmp	r1, #88	; 0x58
 800fb24:	f000 8083 	beq.w	800fc2e <_printf_i+0x136>
 800fb28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fb2c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800fb30:	e032      	b.n	800fb98 <_printf_i+0xa0>
 800fb32:	2964      	cmp	r1, #100	; 0x64
 800fb34:	d001      	beq.n	800fb3a <_printf_i+0x42>
 800fb36:	2969      	cmp	r1, #105	; 0x69
 800fb38:	d1f6      	bne.n	800fb28 <_printf_i+0x30>
 800fb3a:	6820      	ldr	r0, [r4, #0]
 800fb3c:	6813      	ldr	r3, [r2, #0]
 800fb3e:	0605      	lsls	r5, r0, #24
 800fb40:	f103 0104 	add.w	r1, r3, #4
 800fb44:	d52a      	bpl.n	800fb9c <_printf_i+0xa4>
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	6011      	str	r1, [r2, #0]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	da03      	bge.n	800fb56 <_printf_i+0x5e>
 800fb4e:	222d      	movs	r2, #45	; 0x2d
 800fb50:	425b      	negs	r3, r3
 800fb52:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800fb56:	486f      	ldr	r0, [pc, #444]	; (800fd14 <_printf_i+0x21c>)
 800fb58:	220a      	movs	r2, #10
 800fb5a:	e039      	b.n	800fbd0 <_printf_i+0xd8>
 800fb5c:	2973      	cmp	r1, #115	; 0x73
 800fb5e:	f000 809d 	beq.w	800fc9c <_printf_i+0x1a4>
 800fb62:	d808      	bhi.n	800fb76 <_printf_i+0x7e>
 800fb64:	296f      	cmp	r1, #111	; 0x6f
 800fb66:	d020      	beq.n	800fbaa <_printf_i+0xb2>
 800fb68:	2970      	cmp	r1, #112	; 0x70
 800fb6a:	d1dd      	bne.n	800fb28 <_printf_i+0x30>
 800fb6c:	6823      	ldr	r3, [r4, #0]
 800fb6e:	f043 0320 	orr.w	r3, r3, #32
 800fb72:	6023      	str	r3, [r4, #0]
 800fb74:	e003      	b.n	800fb7e <_printf_i+0x86>
 800fb76:	2975      	cmp	r1, #117	; 0x75
 800fb78:	d017      	beq.n	800fbaa <_printf_i+0xb2>
 800fb7a:	2978      	cmp	r1, #120	; 0x78
 800fb7c:	d1d4      	bne.n	800fb28 <_printf_i+0x30>
 800fb7e:	2378      	movs	r3, #120	; 0x78
 800fb80:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fb84:	4864      	ldr	r0, [pc, #400]	; (800fd18 <_printf_i+0x220>)
 800fb86:	e055      	b.n	800fc34 <_printf_i+0x13c>
 800fb88:	6813      	ldr	r3, [r2, #0]
 800fb8a:	1d19      	adds	r1, r3, #4
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	6011      	str	r1, [r2, #0]
 800fb90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fb94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fb98:	2301      	movs	r3, #1
 800fb9a:	e08c      	b.n	800fcb6 <_printf_i+0x1be>
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	6011      	str	r1, [r2, #0]
 800fba0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fba4:	bf18      	it	ne
 800fba6:	b21b      	sxthne	r3, r3
 800fba8:	e7cf      	b.n	800fb4a <_printf_i+0x52>
 800fbaa:	6813      	ldr	r3, [r2, #0]
 800fbac:	6825      	ldr	r5, [r4, #0]
 800fbae:	1d18      	adds	r0, r3, #4
 800fbb0:	6010      	str	r0, [r2, #0]
 800fbb2:	0628      	lsls	r0, r5, #24
 800fbb4:	d501      	bpl.n	800fbba <_printf_i+0xc2>
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	e002      	b.n	800fbc0 <_printf_i+0xc8>
 800fbba:	0668      	lsls	r0, r5, #25
 800fbbc:	d5fb      	bpl.n	800fbb6 <_printf_i+0xbe>
 800fbbe:	881b      	ldrh	r3, [r3, #0]
 800fbc0:	4854      	ldr	r0, [pc, #336]	; (800fd14 <_printf_i+0x21c>)
 800fbc2:	296f      	cmp	r1, #111	; 0x6f
 800fbc4:	bf14      	ite	ne
 800fbc6:	220a      	movne	r2, #10
 800fbc8:	2208      	moveq	r2, #8
 800fbca:	2100      	movs	r1, #0
 800fbcc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fbd0:	6865      	ldr	r5, [r4, #4]
 800fbd2:	60a5      	str	r5, [r4, #8]
 800fbd4:	2d00      	cmp	r5, #0
 800fbd6:	f2c0 8095 	blt.w	800fd04 <_printf_i+0x20c>
 800fbda:	6821      	ldr	r1, [r4, #0]
 800fbdc:	f021 0104 	bic.w	r1, r1, #4
 800fbe0:	6021      	str	r1, [r4, #0]
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d13d      	bne.n	800fc62 <_printf_i+0x16a>
 800fbe6:	2d00      	cmp	r5, #0
 800fbe8:	f040 808e 	bne.w	800fd08 <_printf_i+0x210>
 800fbec:	4665      	mov	r5, ip
 800fbee:	2a08      	cmp	r2, #8
 800fbf0:	d10b      	bne.n	800fc0a <_printf_i+0x112>
 800fbf2:	6823      	ldr	r3, [r4, #0]
 800fbf4:	07db      	lsls	r3, r3, #31
 800fbf6:	d508      	bpl.n	800fc0a <_printf_i+0x112>
 800fbf8:	6923      	ldr	r3, [r4, #16]
 800fbfa:	6862      	ldr	r2, [r4, #4]
 800fbfc:	429a      	cmp	r2, r3
 800fbfe:	bfde      	ittt	le
 800fc00:	2330      	movle	r3, #48	; 0x30
 800fc02:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fc06:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fc0a:	ebac 0305 	sub.w	r3, ip, r5
 800fc0e:	6123      	str	r3, [r4, #16]
 800fc10:	f8cd 8000 	str.w	r8, [sp]
 800fc14:	463b      	mov	r3, r7
 800fc16:	aa03      	add	r2, sp, #12
 800fc18:	4621      	mov	r1, r4
 800fc1a:	4630      	mov	r0, r6
 800fc1c:	f7ff fef6 	bl	800fa0c <_printf_common>
 800fc20:	3001      	adds	r0, #1
 800fc22:	d14d      	bne.n	800fcc0 <_printf_i+0x1c8>
 800fc24:	f04f 30ff 	mov.w	r0, #4294967295
 800fc28:	b005      	add	sp, #20
 800fc2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fc2e:	4839      	ldr	r0, [pc, #228]	; (800fd14 <_printf_i+0x21c>)
 800fc30:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800fc34:	6813      	ldr	r3, [r2, #0]
 800fc36:	6821      	ldr	r1, [r4, #0]
 800fc38:	1d1d      	adds	r5, r3, #4
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	6015      	str	r5, [r2, #0]
 800fc3e:	060a      	lsls	r2, r1, #24
 800fc40:	d50b      	bpl.n	800fc5a <_printf_i+0x162>
 800fc42:	07ca      	lsls	r2, r1, #31
 800fc44:	bf44      	itt	mi
 800fc46:	f041 0120 	orrmi.w	r1, r1, #32
 800fc4a:	6021      	strmi	r1, [r4, #0]
 800fc4c:	b91b      	cbnz	r3, 800fc56 <_printf_i+0x15e>
 800fc4e:	6822      	ldr	r2, [r4, #0]
 800fc50:	f022 0220 	bic.w	r2, r2, #32
 800fc54:	6022      	str	r2, [r4, #0]
 800fc56:	2210      	movs	r2, #16
 800fc58:	e7b7      	b.n	800fbca <_printf_i+0xd2>
 800fc5a:	064d      	lsls	r5, r1, #25
 800fc5c:	bf48      	it	mi
 800fc5e:	b29b      	uxthmi	r3, r3
 800fc60:	e7ef      	b.n	800fc42 <_printf_i+0x14a>
 800fc62:	4665      	mov	r5, ip
 800fc64:	fbb3 f1f2 	udiv	r1, r3, r2
 800fc68:	fb02 3311 	mls	r3, r2, r1, r3
 800fc6c:	5cc3      	ldrb	r3, [r0, r3]
 800fc6e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800fc72:	460b      	mov	r3, r1
 800fc74:	2900      	cmp	r1, #0
 800fc76:	d1f5      	bne.n	800fc64 <_printf_i+0x16c>
 800fc78:	e7b9      	b.n	800fbee <_printf_i+0xf6>
 800fc7a:	6813      	ldr	r3, [r2, #0]
 800fc7c:	6825      	ldr	r5, [r4, #0]
 800fc7e:	6961      	ldr	r1, [r4, #20]
 800fc80:	1d18      	adds	r0, r3, #4
 800fc82:	6010      	str	r0, [r2, #0]
 800fc84:	0628      	lsls	r0, r5, #24
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	d501      	bpl.n	800fc8e <_printf_i+0x196>
 800fc8a:	6019      	str	r1, [r3, #0]
 800fc8c:	e002      	b.n	800fc94 <_printf_i+0x19c>
 800fc8e:	066a      	lsls	r2, r5, #25
 800fc90:	d5fb      	bpl.n	800fc8a <_printf_i+0x192>
 800fc92:	8019      	strh	r1, [r3, #0]
 800fc94:	2300      	movs	r3, #0
 800fc96:	6123      	str	r3, [r4, #16]
 800fc98:	4665      	mov	r5, ip
 800fc9a:	e7b9      	b.n	800fc10 <_printf_i+0x118>
 800fc9c:	6813      	ldr	r3, [r2, #0]
 800fc9e:	1d19      	adds	r1, r3, #4
 800fca0:	6011      	str	r1, [r2, #0]
 800fca2:	681d      	ldr	r5, [r3, #0]
 800fca4:	6862      	ldr	r2, [r4, #4]
 800fca6:	2100      	movs	r1, #0
 800fca8:	4628      	mov	r0, r5
 800fcaa:	f7f0 fa99 	bl	80001e0 <memchr>
 800fcae:	b108      	cbz	r0, 800fcb4 <_printf_i+0x1bc>
 800fcb0:	1b40      	subs	r0, r0, r5
 800fcb2:	6060      	str	r0, [r4, #4]
 800fcb4:	6863      	ldr	r3, [r4, #4]
 800fcb6:	6123      	str	r3, [r4, #16]
 800fcb8:	2300      	movs	r3, #0
 800fcba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fcbe:	e7a7      	b.n	800fc10 <_printf_i+0x118>
 800fcc0:	6923      	ldr	r3, [r4, #16]
 800fcc2:	462a      	mov	r2, r5
 800fcc4:	4639      	mov	r1, r7
 800fcc6:	4630      	mov	r0, r6
 800fcc8:	47c0      	blx	r8
 800fcca:	3001      	adds	r0, #1
 800fccc:	d0aa      	beq.n	800fc24 <_printf_i+0x12c>
 800fcce:	6823      	ldr	r3, [r4, #0]
 800fcd0:	079b      	lsls	r3, r3, #30
 800fcd2:	d413      	bmi.n	800fcfc <_printf_i+0x204>
 800fcd4:	68e0      	ldr	r0, [r4, #12]
 800fcd6:	9b03      	ldr	r3, [sp, #12]
 800fcd8:	4298      	cmp	r0, r3
 800fcda:	bfb8      	it	lt
 800fcdc:	4618      	movlt	r0, r3
 800fcde:	e7a3      	b.n	800fc28 <_printf_i+0x130>
 800fce0:	2301      	movs	r3, #1
 800fce2:	464a      	mov	r2, r9
 800fce4:	4639      	mov	r1, r7
 800fce6:	4630      	mov	r0, r6
 800fce8:	47c0      	blx	r8
 800fcea:	3001      	adds	r0, #1
 800fcec:	d09a      	beq.n	800fc24 <_printf_i+0x12c>
 800fcee:	3501      	adds	r5, #1
 800fcf0:	68e3      	ldr	r3, [r4, #12]
 800fcf2:	9a03      	ldr	r2, [sp, #12]
 800fcf4:	1a9b      	subs	r3, r3, r2
 800fcf6:	42ab      	cmp	r3, r5
 800fcf8:	dcf2      	bgt.n	800fce0 <_printf_i+0x1e8>
 800fcfa:	e7eb      	b.n	800fcd4 <_printf_i+0x1dc>
 800fcfc:	2500      	movs	r5, #0
 800fcfe:	f104 0919 	add.w	r9, r4, #25
 800fd02:	e7f5      	b.n	800fcf0 <_printf_i+0x1f8>
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d1ac      	bne.n	800fc62 <_printf_i+0x16a>
 800fd08:	7803      	ldrb	r3, [r0, #0]
 800fd0a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fd0e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fd12:	e76c      	b.n	800fbee <_printf_i+0xf6>
 800fd14:	080138e6 	.word	0x080138e6
 800fd18:	080138f7 	.word	0x080138f7

0800fd1c <_scanf_float>:
 800fd1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd20:	469a      	mov	sl, r3
 800fd22:	688b      	ldr	r3, [r1, #8]
 800fd24:	4616      	mov	r6, r2
 800fd26:	1e5a      	subs	r2, r3, #1
 800fd28:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800fd2c:	b087      	sub	sp, #28
 800fd2e:	bf83      	ittte	hi
 800fd30:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800fd34:	189b      	addhi	r3, r3, r2
 800fd36:	9301      	strhi	r3, [sp, #4]
 800fd38:	2300      	movls	r3, #0
 800fd3a:	bf86      	itte	hi
 800fd3c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800fd40:	608b      	strhi	r3, [r1, #8]
 800fd42:	9301      	strls	r3, [sp, #4]
 800fd44:	680b      	ldr	r3, [r1, #0]
 800fd46:	4688      	mov	r8, r1
 800fd48:	f04f 0b00 	mov.w	fp, #0
 800fd4c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800fd50:	f848 3b1c 	str.w	r3, [r8], #28
 800fd54:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800fd58:	4607      	mov	r7, r0
 800fd5a:	460c      	mov	r4, r1
 800fd5c:	4645      	mov	r5, r8
 800fd5e:	465a      	mov	r2, fp
 800fd60:	46d9      	mov	r9, fp
 800fd62:	f8cd b008 	str.w	fp, [sp, #8]
 800fd66:	68a1      	ldr	r1, [r4, #8]
 800fd68:	b181      	cbz	r1, 800fd8c <_scanf_float+0x70>
 800fd6a:	6833      	ldr	r3, [r6, #0]
 800fd6c:	781b      	ldrb	r3, [r3, #0]
 800fd6e:	2b49      	cmp	r3, #73	; 0x49
 800fd70:	d071      	beq.n	800fe56 <_scanf_float+0x13a>
 800fd72:	d84d      	bhi.n	800fe10 <_scanf_float+0xf4>
 800fd74:	2b39      	cmp	r3, #57	; 0x39
 800fd76:	d840      	bhi.n	800fdfa <_scanf_float+0xde>
 800fd78:	2b31      	cmp	r3, #49	; 0x31
 800fd7a:	f080 8088 	bcs.w	800fe8e <_scanf_float+0x172>
 800fd7e:	2b2d      	cmp	r3, #45	; 0x2d
 800fd80:	f000 8090 	beq.w	800fea4 <_scanf_float+0x188>
 800fd84:	d815      	bhi.n	800fdb2 <_scanf_float+0x96>
 800fd86:	2b2b      	cmp	r3, #43	; 0x2b
 800fd88:	f000 808c 	beq.w	800fea4 <_scanf_float+0x188>
 800fd8c:	f1b9 0f00 	cmp.w	r9, #0
 800fd90:	d003      	beq.n	800fd9a <_scanf_float+0x7e>
 800fd92:	6823      	ldr	r3, [r4, #0]
 800fd94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fd98:	6023      	str	r3, [r4, #0]
 800fd9a:	3a01      	subs	r2, #1
 800fd9c:	2a01      	cmp	r2, #1
 800fd9e:	f200 80ea 	bhi.w	800ff76 <_scanf_float+0x25a>
 800fda2:	4545      	cmp	r5, r8
 800fda4:	f200 80dc 	bhi.w	800ff60 <_scanf_float+0x244>
 800fda8:	2601      	movs	r6, #1
 800fdaa:	4630      	mov	r0, r6
 800fdac:	b007      	add	sp, #28
 800fdae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdb2:	2b2e      	cmp	r3, #46	; 0x2e
 800fdb4:	f000 809f 	beq.w	800fef6 <_scanf_float+0x1da>
 800fdb8:	2b30      	cmp	r3, #48	; 0x30
 800fdba:	d1e7      	bne.n	800fd8c <_scanf_float+0x70>
 800fdbc:	6820      	ldr	r0, [r4, #0]
 800fdbe:	f410 7f80 	tst.w	r0, #256	; 0x100
 800fdc2:	d064      	beq.n	800fe8e <_scanf_float+0x172>
 800fdc4:	9b01      	ldr	r3, [sp, #4]
 800fdc6:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800fdca:	6020      	str	r0, [r4, #0]
 800fdcc:	f109 0901 	add.w	r9, r9, #1
 800fdd0:	b11b      	cbz	r3, 800fdda <_scanf_float+0xbe>
 800fdd2:	3b01      	subs	r3, #1
 800fdd4:	3101      	adds	r1, #1
 800fdd6:	9301      	str	r3, [sp, #4]
 800fdd8:	60a1      	str	r1, [r4, #8]
 800fdda:	68a3      	ldr	r3, [r4, #8]
 800fddc:	3b01      	subs	r3, #1
 800fdde:	60a3      	str	r3, [r4, #8]
 800fde0:	6923      	ldr	r3, [r4, #16]
 800fde2:	3301      	adds	r3, #1
 800fde4:	6123      	str	r3, [r4, #16]
 800fde6:	6873      	ldr	r3, [r6, #4]
 800fde8:	3b01      	subs	r3, #1
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	6073      	str	r3, [r6, #4]
 800fdee:	f340 80ac 	ble.w	800ff4a <_scanf_float+0x22e>
 800fdf2:	6833      	ldr	r3, [r6, #0]
 800fdf4:	3301      	adds	r3, #1
 800fdf6:	6033      	str	r3, [r6, #0]
 800fdf8:	e7b5      	b.n	800fd66 <_scanf_float+0x4a>
 800fdfa:	2b45      	cmp	r3, #69	; 0x45
 800fdfc:	f000 8085 	beq.w	800ff0a <_scanf_float+0x1ee>
 800fe00:	2b46      	cmp	r3, #70	; 0x46
 800fe02:	d06a      	beq.n	800feda <_scanf_float+0x1be>
 800fe04:	2b41      	cmp	r3, #65	; 0x41
 800fe06:	d1c1      	bne.n	800fd8c <_scanf_float+0x70>
 800fe08:	2a01      	cmp	r2, #1
 800fe0a:	d1bf      	bne.n	800fd8c <_scanf_float+0x70>
 800fe0c:	2202      	movs	r2, #2
 800fe0e:	e046      	b.n	800fe9e <_scanf_float+0x182>
 800fe10:	2b65      	cmp	r3, #101	; 0x65
 800fe12:	d07a      	beq.n	800ff0a <_scanf_float+0x1ee>
 800fe14:	d818      	bhi.n	800fe48 <_scanf_float+0x12c>
 800fe16:	2b54      	cmp	r3, #84	; 0x54
 800fe18:	d066      	beq.n	800fee8 <_scanf_float+0x1cc>
 800fe1a:	d811      	bhi.n	800fe40 <_scanf_float+0x124>
 800fe1c:	2b4e      	cmp	r3, #78	; 0x4e
 800fe1e:	d1b5      	bne.n	800fd8c <_scanf_float+0x70>
 800fe20:	2a00      	cmp	r2, #0
 800fe22:	d146      	bne.n	800feb2 <_scanf_float+0x196>
 800fe24:	f1b9 0f00 	cmp.w	r9, #0
 800fe28:	d145      	bne.n	800feb6 <_scanf_float+0x19a>
 800fe2a:	6821      	ldr	r1, [r4, #0]
 800fe2c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800fe30:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800fe34:	d13f      	bne.n	800feb6 <_scanf_float+0x19a>
 800fe36:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800fe3a:	6021      	str	r1, [r4, #0]
 800fe3c:	2201      	movs	r2, #1
 800fe3e:	e02e      	b.n	800fe9e <_scanf_float+0x182>
 800fe40:	2b59      	cmp	r3, #89	; 0x59
 800fe42:	d01e      	beq.n	800fe82 <_scanf_float+0x166>
 800fe44:	2b61      	cmp	r3, #97	; 0x61
 800fe46:	e7de      	b.n	800fe06 <_scanf_float+0xea>
 800fe48:	2b6e      	cmp	r3, #110	; 0x6e
 800fe4a:	d0e9      	beq.n	800fe20 <_scanf_float+0x104>
 800fe4c:	d815      	bhi.n	800fe7a <_scanf_float+0x15e>
 800fe4e:	2b66      	cmp	r3, #102	; 0x66
 800fe50:	d043      	beq.n	800feda <_scanf_float+0x1be>
 800fe52:	2b69      	cmp	r3, #105	; 0x69
 800fe54:	d19a      	bne.n	800fd8c <_scanf_float+0x70>
 800fe56:	f1bb 0f00 	cmp.w	fp, #0
 800fe5a:	d138      	bne.n	800fece <_scanf_float+0x1b2>
 800fe5c:	f1b9 0f00 	cmp.w	r9, #0
 800fe60:	d197      	bne.n	800fd92 <_scanf_float+0x76>
 800fe62:	6821      	ldr	r1, [r4, #0]
 800fe64:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800fe68:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800fe6c:	d195      	bne.n	800fd9a <_scanf_float+0x7e>
 800fe6e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800fe72:	6021      	str	r1, [r4, #0]
 800fe74:	f04f 0b01 	mov.w	fp, #1
 800fe78:	e011      	b.n	800fe9e <_scanf_float+0x182>
 800fe7a:	2b74      	cmp	r3, #116	; 0x74
 800fe7c:	d034      	beq.n	800fee8 <_scanf_float+0x1cc>
 800fe7e:	2b79      	cmp	r3, #121	; 0x79
 800fe80:	d184      	bne.n	800fd8c <_scanf_float+0x70>
 800fe82:	f1bb 0f07 	cmp.w	fp, #7
 800fe86:	d181      	bne.n	800fd8c <_scanf_float+0x70>
 800fe88:	f04f 0b08 	mov.w	fp, #8
 800fe8c:	e007      	b.n	800fe9e <_scanf_float+0x182>
 800fe8e:	eb12 0f0b 	cmn.w	r2, fp
 800fe92:	f47f af7b 	bne.w	800fd8c <_scanf_float+0x70>
 800fe96:	6821      	ldr	r1, [r4, #0]
 800fe98:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800fe9c:	6021      	str	r1, [r4, #0]
 800fe9e:	702b      	strb	r3, [r5, #0]
 800fea0:	3501      	adds	r5, #1
 800fea2:	e79a      	b.n	800fdda <_scanf_float+0xbe>
 800fea4:	6821      	ldr	r1, [r4, #0]
 800fea6:	0608      	lsls	r0, r1, #24
 800fea8:	f57f af70 	bpl.w	800fd8c <_scanf_float+0x70>
 800feac:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800feb0:	e7f4      	b.n	800fe9c <_scanf_float+0x180>
 800feb2:	2a02      	cmp	r2, #2
 800feb4:	d047      	beq.n	800ff46 <_scanf_float+0x22a>
 800feb6:	f1bb 0f01 	cmp.w	fp, #1
 800feba:	d003      	beq.n	800fec4 <_scanf_float+0x1a8>
 800febc:	f1bb 0f04 	cmp.w	fp, #4
 800fec0:	f47f af64 	bne.w	800fd8c <_scanf_float+0x70>
 800fec4:	f10b 0b01 	add.w	fp, fp, #1
 800fec8:	fa5f fb8b 	uxtb.w	fp, fp
 800fecc:	e7e7      	b.n	800fe9e <_scanf_float+0x182>
 800fece:	f1bb 0f03 	cmp.w	fp, #3
 800fed2:	d0f7      	beq.n	800fec4 <_scanf_float+0x1a8>
 800fed4:	f1bb 0f05 	cmp.w	fp, #5
 800fed8:	e7f2      	b.n	800fec0 <_scanf_float+0x1a4>
 800feda:	f1bb 0f02 	cmp.w	fp, #2
 800fede:	f47f af55 	bne.w	800fd8c <_scanf_float+0x70>
 800fee2:	f04f 0b03 	mov.w	fp, #3
 800fee6:	e7da      	b.n	800fe9e <_scanf_float+0x182>
 800fee8:	f1bb 0f06 	cmp.w	fp, #6
 800feec:	f47f af4e 	bne.w	800fd8c <_scanf_float+0x70>
 800fef0:	f04f 0b07 	mov.w	fp, #7
 800fef4:	e7d3      	b.n	800fe9e <_scanf_float+0x182>
 800fef6:	6821      	ldr	r1, [r4, #0]
 800fef8:	0588      	lsls	r0, r1, #22
 800fefa:	f57f af47 	bpl.w	800fd8c <_scanf_float+0x70>
 800fefe:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800ff02:	6021      	str	r1, [r4, #0]
 800ff04:	f8cd 9008 	str.w	r9, [sp, #8]
 800ff08:	e7c9      	b.n	800fe9e <_scanf_float+0x182>
 800ff0a:	6821      	ldr	r1, [r4, #0]
 800ff0c:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800ff10:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800ff14:	d006      	beq.n	800ff24 <_scanf_float+0x208>
 800ff16:	0548      	lsls	r0, r1, #21
 800ff18:	f57f af38 	bpl.w	800fd8c <_scanf_float+0x70>
 800ff1c:	f1b9 0f00 	cmp.w	r9, #0
 800ff20:	f43f af3b 	beq.w	800fd9a <_scanf_float+0x7e>
 800ff24:	0588      	lsls	r0, r1, #22
 800ff26:	bf58      	it	pl
 800ff28:	9802      	ldrpl	r0, [sp, #8]
 800ff2a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800ff2e:	bf58      	it	pl
 800ff30:	eba9 0000 	subpl.w	r0, r9, r0
 800ff34:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800ff38:	bf58      	it	pl
 800ff3a:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800ff3e:	6021      	str	r1, [r4, #0]
 800ff40:	f04f 0900 	mov.w	r9, #0
 800ff44:	e7ab      	b.n	800fe9e <_scanf_float+0x182>
 800ff46:	2203      	movs	r2, #3
 800ff48:	e7a9      	b.n	800fe9e <_scanf_float+0x182>
 800ff4a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ff4e:	9205      	str	r2, [sp, #20]
 800ff50:	4631      	mov	r1, r6
 800ff52:	4638      	mov	r0, r7
 800ff54:	4798      	blx	r3
 800ff56:	9a05      	ldr	r2, [sp, #20]
 800ff58:	2800      	cmp	r0, #0
 800ff5a:	f43f af04 	beq.w	800fd66 <_scanf_float+0x4a>
 800ff5e:	e715      	b.n	800fd8c <_scanf_float+0x70>
 800ff60:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ff64:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800ff68:	4632      	mov	r2, r6
 800ff6a:	4638      	mov	r0, r7
 800ff6c:	4798      	blx	r3
 800ff6e:	6923      	ldr	r3, [r4, #16]
 800ff70:	3b01      	subs	r3, #1
 800ff72:	6123      	str	r3, [r4, #16]
 800ff74:	e715      	b.n	800fda2 <_scanf_float+0x86>
 800ff76:	f10b 33ff 	add.w	r3, fp, #4294967295
 800ff7a:	2b06      	cmp	r3, #6
 800ff7c:	d80a      	bhi.n	800ff94 <_scanf_float+0x278>
 800ff7e:	f1bb 0f02 	cmp.w	fp, #2
 800ff82:	d968      	bls.n	8010056 <_scanf_float+0x33a>
 800ff84:	f1ab 0b03 	sub.w	fp, fp, #3
 800ff88:	fa5f fb8b 	uxtb.w	fp, fp
 800ff8c:	eba5 0b0b 	sub.w	fp, r5, fp
 800ff90:	455d      	cmp	r5, fp
 800ff92:	d14b      	bne.n	801002c <_scanf_float+0x310>
 800ff94:	6823      	ldr	r3, [r4, #0]
 800ff96:	05da      	lsls	r2, r3, #23
 800ff98:	d51f      	bpl.n	800ffda <_scanf_float+0x2be>
 800ff9a:	055b      	lsls	r3, r3, #21
 800ff9c:	d468      	bmi.n	8010070 <_scanf_float+0x354>
 800ff9e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ffa2:	6923      	ldr	r3, [r4, #16]
 800ffa4:	2965      	cmp	r1, #101	; 0x65
 800ffa6:	f103 33ff 	add.w	r3, r3, #4294967295
 800ffaa:	f105 3bff 	add.w	fp, r5, #4294967295
 800ffae:	6123      	str	r3, [r4, #16]
 800ffb0:	d00d      	beq.n	800ffce <_scanf_float+0x2b2>
 800ffb2:	2945      	cmp	r1, #69	; 0x45
 800ffb4:	d00b      	beq.n	800ffce <_scanf_float+0x2b2>
 800ffb6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ffba:	4632      	mov	r2, r6
 800ffbc:	4638      	mov	r0, r7
 800ffbe:	4798      	blx	r3
 800ffc0:	6923      	ldr	r3, [r4, #16]
 800ffc2:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800ffc6:	3b01      	subs	r3, #1
 800ffc8:	f1a5 0b02 	sub.w	fp, r5, #2
 800ffcc:	6123      	str	r3, [r4, #16]
 800ffce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ffd2:	4632      	mov	r2, r6
 800ffd4:	4638      	mov	r0, r7
 800ffd6:	4798      	blx	r3
 800ffd8:	465d      	mov	r5, fp
 800ffda:	6826      	ldr	r6, [r4, #0]
 800ffdc:	f016 0610 	ands.w	r6, r6, #16
 800ffe0:	d17a      	bne.n	80100d8 <_scanf_float+0x3bc>
 800ffe2:	702e      	strb	r6, [r5, #0]
 800ffe4:	6823      	ldr	r3, [r4, #0]
 800ffe6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ffea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ffee:	d142      	bne.n	8010076 <_scanf_float+0x35a>
 800fff0:	9b02      	ldr	r3, [sp, #8]
 800fff2:	eba9 0303 	sub.w	r3, r9, r3
 800fff6:	425a      	negs	r2, r3
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d149      	bne.n	8010090 <_scanf_float+0x374>
 800fffc:	2200      	movs	r2, #0
 800fffe:	4641      	mov	r1, r8
 8010000:	4638      	mov	r0, r7
 8010002:	f000 fecd 	bl	8010da0 <_strtod_r>
 8010006:	6825      	ldr	r5, [r4, #0]
 8010008:	f8da 3000 	ldr.w	r3, [sl]
 801000c:	f015 0f02 	tst.w	r5, #2
 8010010:	f103 0204 	add.w	r2, r3, #4
 8010014:	ec59 8b10 	vmov	r8, r9, d0
 8010018:	f8ca 2000 	str.w	r2, [sl]
 801001c:	d043      	beq.n	80100a6 <_scanf_float+0x38a>
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	e9c3 8900 	strd	r8, r9, [r3]
 8010024:	68e3      	ldr	r3, [r4, #12]
 8010026:	3301      	adds	r3, #1
 8010028:	60e3      	str	r3, [r4, #12]
 801002a:	e6be      	b.n	800fdaa <_scanf_float+0x8e>
 801002c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010030:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8010034:	4632      	mov	r2, r6
 8010036:	4638      	mov	r0, r7
 8010038:	4798      	blx	r3
 801003a:	6923      	ldr	r3, [r4, #16]
 801003c:	3b01      	subs	r3, #1
 801003e:	6123      	str	r3, [r4, #16]
 8010040:	e7a6      	b.n	800ff90 <_scanf_float+0x274>
 8010042:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010046:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801004a:	4632      	mov	r2, r6
 801004c:	4638      	mov	r0, r7
 801004e:	4798      	blx	r3
 8010050:	6923      	ldr	r3, [r4, #16]
 8010052:	3b01      	subs	r3, #1
 8010054:	6123      	str	r3, [r4, #16]
 8010056:	4545      	cmp	r5, r8
 8010058:	d8f3      	bhi.n	8010042 <_scanf_float+0x326>
 801005a:	e6a5      	b.n	800fda8 <_scanf_float+0x8c>
 801005c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010060:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8010064:	4632      	mov	r2, r6
 8010066:	4638      	mov	r0, r7
 8010068:	4798      	blx	r3
 801006a:	6923      	ldr	r3, [r4, #16]
 801006c:	3b01      	subs	r3, #1
 801006e:	6123      	str	r3, [r4, #16]
 8010070:	4545      	cmp	r5, r8
 8010072:	d8f3      	bhi.n	801005c <_scanf_float+0x340>
 8010074:	e698      	b.n	800fda8 <_scanf_float+0x8c>
 8010076:	9b03      	ldr	r3, [sp, #12]
 8010078:	2b00      	cmp	r3, #0
 801007a:	d0bf      	beq.n	800fffc <_scanf_float+0x2e0>
 801007c:	9904      	ldr	r1, [sp, #16]
 801007e:	230a      	movs	r3, #10
 8010080:	4632      	mov	r2, r6
 8010082:	3101      	adds	r1, #1
 8010084:	4638      	mov	r0, r7
 8010086:	f000 ff17 	bl	8010eb8 <_strtol_r>
 801008a:	9b03      	ldr	r3, [sp, #12]
 801008c:	9d04      	ldr	r5, [sp, #16]
 801008e:	1ac2      	subs	r2, r0, r3
 8010090:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8010094:	429d      	cmp	r5, r3
 8010096:	bf28      	it	cs
 8010098:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 801009c:	490f      	ldr	r1, [pc, #60]	; (80100dc <_scanf_float+0x3c0>)
 801009e:	4628      	mov	r0, r5
 80100a0:	f000 f84c 	bl	801013c <siprintf>
 80100a4:	e7aa      	b.n	800fffc <_scanf_float+0x2e0>
 80100a6:	f015 0504 	ands.w	r5, r5, #4
 80100aa:	d1b8      	bne.n	801001e <_scanf_float+0x302>
 80100ac:	681f      	ldr	r7, [r3, #0]
 80100ae:	ee10 2a10 	vmov	r2, s0
 80100b2:	464b      	mov	r3, r9
 80100b4:	ee10 0a10 	vmov	r0, s0
 80100b8:	4649      	mov	r1, r9
 80100ba:	f7f0 fd37 	bl	8000b2c <__aeabi_dcmpun>
 80100be:	b128      	cbz	r0, 80100cc <_scanf_float+0x3b0>
 80100c0:	4628      	mov	r0, r5
 80100c2:	f000 f835 	bl	8010130 <nanf>
 80100c6:	ed87 0a00 	vstr	s0, [r7]
 80100ca:	e7ab      	b.n	8010024 <_scanf_float+0x308>
 80100cc:	4640      	mov	r0, r8
 80100ce:	4649      	mov	r1, r9
 80100d0:	f7f0 fd8a 	bl	8000be8 <__aeabi_d2f>
 80100d4:	6038      	str	r0, [r7, #0]
 80100d6:	e7a5      	b.n	8010024 <_scanf_float+0x308>
 80100d8:	2600      	movs	r6, #0
 80100da:	e666      	b.n	800fdaa <_scanf_float+0x8e>
 80100dc:	08013908 	.word	0x08013908

080100e0 <iprintf>:
 80100e0:	b40f      	push	{r0, r1, r2, r3}
 80100e2:	4b0a      	ldr	r3, [pc, #40]	; (801010c <iprintf+0x2c>)
 80100e4:	b513      	push	{r0, r1, r4, lr}
 80100e6:	681c      	ldr	r4, [r3, #0]
 80100e8:	b124      	cbz	r4, 80100f4 <iprintf+0x14>
 80100ea:	69a3      	ldr	r3, [r4, #24]
 80100ec:	b913      	cbnz	r3, 80100f4 <iprintf+0x14>
 80100ee:	4620      	mov	r0, r4
 80100f0:	f001 fd7a 	bl	8011be8 <__sinit>
 80100f4:	ab05      	add	r3, sp, #20
 80100f6:	9a04      	ldr	r2, [sp, #16]
 80100f8:	68a1      	ldr	r1, [r4, #8]
 80100fa:	9301      	str	r3, [sp, #4]
 80100fc:	4620      	mov	r0, r4
 80100fe:	f002 fed5 	bl	8012eac <_vfiprintf_r>
 8010102:	b002      	add	sp, #8
 8010104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010108:	b004      	add	sp, #16
 801010a:	4770      	bx	lr
 801010c:	20000190 	.word	0x20000190

08010110 <_sbrk_r>:
 8010110:	b538      	push	{r3, r4, r5, lr}
 8010112:	4c06      	ldr	r4, [pc, #24]	; (801012c <_sbrk_r+0x1c>)
 8010114:	2300      	movs	r3, #0
 8010116:	4605      	mov	r5, r0
 8010118:	4608      	mov	r0, r1
 801011a:	6023      	str	r3, [r4, #0]
 801011c:	f003 faec 	bl	80136f8 <_sbrk>
 8010120:	1c43      	adds	r3, r0, #1
 8010122:	d102      	bne.n	801012a <_sbrk_r+0x1a>
 8010124:	6823      	ldr	r3, [r4, #0]
 8010126:	b103      	cbz	r3, 801012a <_sbrk_r+0x1a>
 8010128:	602b      	str	r3, [r5, #0]
 801012a:	bd38      	pop	{r3, r4, r5, pc}
 801012c:	20002a18 	.word	0x20002a18

08010130 <nanf>:
 8010130:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8010138 <nanf+0x8>
 8010134:	4770      	bx	lr
 8010136:	bf00      	nop
 8010138:	7fc00000 	.word	0x7fc00000

0801013c <siprintf>:
 801013c:	b40e      	push	{r1, r2, r3}
 801013e:	b500      	push	{lr}
 8010140:	b09c      	sub	sp, #112	; 0x70
 8010142:	ab1d      	add	r3, sp, #116	; 0x74
 8010144:	9002      	str	r0, [sp, #8]
 8010146:	9006      	str	r0, [sp, #24]
 8010148:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801014c:	4809      	ldr	r0, [pc, #36]	; (8010174 <siprintf+0x38>)
 801014e:	9107      	str	r1, [sp, #28]
 8010150:	9104      	str	r1, [sp, #16]
 8010152:	4909      	ldr	r1, [pc, #36]	; (8010178 <siprintf+0x3c>)
 8010154:	f853 2b04 	ldr.w	r2, [r3], #4
 8010158:	9105      	str	r1, [sp, #20]
 801015a:	6800      	ldr	r0, [r0, #0]
 801015c:	9301      	str	r3, [sp, #4]
 801015e:	a902      	add	r1, sp, #8
 8010160:	f002 fd82 	bl	8012c68 <_svfiprintf_r>
 8010164:	9b02      	ldr	r3, [sp, #8]
 8010166:	2200      	movs	r2, #0
 8010168:	701a      	strb	r2, [r3, #0]
 801016a:	b01c      	add	sp, #112	; 0x70
 801016c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010170:	b003      	add	sp, #12
 8010172:	4770      	bx	lr
 8010174:	20000190 	.word	0x20000190
 8010178:	ffff0208 	.word	0xffff0208

0801017c <sulp>:
 801017c:	b570      	push	{r4, r5, r6, lr}
 801017e:	4604      	mov	r4, r0
 8010180:	460d      	mov	r5, r1
 8010182:	ec45 4b10 	vmov	d0, r4, r5
 8010186:	4616      	mov	r6, r2
 8010188:	f002 fbd2 	bl	8012930 <__ulp>
 801018c:	ec51 0b10 	vmov	r0, r1, d0
 8010190:	b17e      	cbz	r6, 80101b2 <sulp+0x36>
 8010192:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010196:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801019a:	2b00      	cmp	r3, #0
 801019c:	dd09      	ble.n	80101b2 <sulp+0x36>
 801019e:	051b      	lsls	r3, r3, #20
 80101a0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80101a4:	2400      	movs	r4, #0
 80101a6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80101aa:	4622      	mov	r2, r4
 80101ac:	462b      	mov	r3, r5
 80101ae:	f7f0 fa23 	bl	80005f8 <__aeabi_dmul>
 80101b2:	bd70      	pop	{r4, r5, r6, pc}
 80101b4:	0000      	movs	r0, r0
	...

080101b8 <_strtod_l>:
 80101b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101bc:	461f      	mov	r7, r3
 80101be:	b0a1      	sub	sp, #132	; 0x84
 80101c0:	2300      	movs	r3, #0
 80101c2:	4681      	mov	r9, r0
 80101c4:	4638      	mov	r0, r7
 80101c6:	460e      	mov	r6, r1
 80101c8:	9217      	str	r2, [sp, #92]	; 0x5c
 80101ca:	931c      	str	r3, [sp, #112]	; 0x70
 80101cc:	f002 f8bf 	bl	801234e <__localeconv_l>
 80101d0:	4680      	mov	r8, r0
 80101d2:	6800      	ldr	r0, [r0, #0]
 80101d4:	f7ef fffc 	bl	80001d0 <strlen>
 80101d8:	f04f 0a00 	mov.w	sl, #0
 80101dc:	4604      	mov	r4, r0
 80101de:	f04f 0b00 	mov.w	fp, #0
 80101e2:	961b      	str	r6, [sp, #108]	; 0x6c
 80101e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80101e6:	781a      	ldrb	r2, [r3, #0]
 80101e8:	2a0d      	cmp	r2, #13
 80101ea:	d832      	bhi.n	8010252 <_strtod_l+0x9a>
 80101ec:	2a09      	cmp	r2, #9
 80101ee:	d236      	bcs.n	801025e <_strtod_l+0xa6>
 80101f0:	2a00      	cmp	r2, #0
 80101f2:	d03e      	beq.n	8010272 <_strtod_l+0xba>
 80101f4:	2300      	movs	r3, #0
 80101f6:	930d      	str	r3, [sp, #52]	; 0x34
 80101f8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80101fa:	782b      	ldrb	r3, [r5, #0]
 80101fc:	2b30      	cmp	r3, #48	; 0x30
 80101fe:	f040 80ac 	bne.w	801035a <_strtod_l+0x1a2>
 8010202:	786b      	ldrb	r3, [r5, #1]
 8010204:	2b58      	cmp	r3, #88	; 0x58
 8010206:	d001      	beq.n	801020c <_strtod_l+0x54>
 8010208:	2b78      	cmp	r3, #120	; 0x78
 801020a:	d167      	bne.n	80102dc <_strtod_l+0x124>
 801020c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801020e:	9301      	str	r3, [sp, #4]
 8010210:	ab1c      	add	r3, sp, #112	; 0x70
 8010212:	9300      	str	r3, [sp, #0]
 8010214:	9702      	str	r7, [sp, #8]
 8010216:	ab1d      	add	r3, sp, #116	; 0x74
 8010218:	4a88      	ldr	r2, [pc, #544]	; (801043c <_strtod_l+0x284>)
 801021a:	a91b      	add	r1, sp, #108	; 0x6c
 801021c:	4648      	mov	r0, r9
 801021e:	f001 fdbc 	bl	8011d9a <__gethex>
 8010222:	f010 0407 	ands.w	r4, r0, #7
 8010226:	4606      	mov	r6, r0
 8010228:	d005      	beq.n	8010236 <_strtod_l+0x7e>
 801022a:	2c06      	cmp	r4, #6
 801022c:	d12b      	bne.n	8010286 <_strtod_l+0xce>
 801022e:	3501      	adds	r5, #1
 8010230:	2300      	movs	r3, #0
 8010232:	951b      	str	r5, [sp, #108]	; 0x6c
 8010234:	930d      	str	r3, [sp, #52]	; 0x34
 8010236:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010238:	2b00      	cmp	r3, #0
 801023a:	f040 859a 	bne.w	8010d72 <_strtod_l+0xbba>
 801023e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010240:	b1e3      	cbz	r3, 801027c <_strtod_l+0xc4>
 8010242:	4652      	mov	r2, sl
 8010244:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010248:	ec43 2b10 	vmov	d0, r2, r3
 801024c:	b021      	add	sp, #132	; 0x84
 801024e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010252:	2a2b      	cmp	r2, #43	; 0x2b
 8010254:	d015      	beq.n	8010282 <_strtod_l+0xca>
 8010256:	2a2d      	cmp	r2, #45	; 0x2d
 8010258:	d004      	beq.n	8010264 <_strtod_l+0xac>
 801025a:	2a20      	cmp	r2, #32
 801025c:	d1ca      	bne.n	80101f4 <_strtod_l+0x3c>
 801025e:	3301      	adds	r3, #1
 8010260:	931b      	str	r3, [sp, #108]	; 0x6c
 8010262:	e7bf      	b.n	80101e4 <_strtod_l+0x2c>
 8010264:	2201      	movs	r2, #1
 8010266:	920d      	str	r2, [sp, #52]	; 0x34
 8010268:	1c5a      	adds	r2, r3, #1
 801026a:	921b      	str	r2, [sp, #108]	; 0x6c
 801026c:	785b      	ldrb	r3, [r3, #1]
 801026e:	2b00      	cmp	r3, #0
 8010270:	d1c2      	bne.n	80101f8 <_strtod_l+0x40>
 8010272:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010274:	961b      	str	r6, [sp, #108]	; 0x6c
 8010276:	2b00      	cmp	r3, #0
 8010278:	f040 8579 	bne.w	8010d6e <_strtod_l+0xbb6>
 801027c:	4652      	mov	r2, sl
 801027e:	465b      	mov	r3, fp
 8010280:	e7e2      	b.n	8010248 <_strtod_l+0x90>
 8010282:	2200      	movs	r2, #0
 8010284:	e7ef      	b.n	8010266 <_strtod_l+0xae>
 8010286:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8010288:	b13a      	cbz	r2, 801029a <_strtod_l+0xe2>
 801028a:	2135      	movs	r1, #53	; 0x35
 801028c:	a81e      	add	r0, sp, #120	; 0x78
 801028e:	f002 fc47 	bl	8012b20 <__copybits>
 8010292:	991c      	ldr	r1, [sp, #112]	; 0x70
 8010294:	4648      	mov	r0, r9
 8010296:	f002 f8b3 	bl	8012400 <_Bfree>
 801029a:	3c01      	subs	r4, #1
 801029c:	2c04      	cmp	r4, #4
 801029e:	d806      	bhi.n	80102ae <_strtod_l+0xf6>
 80102a0:	e8df f004 	tbb	[pc, r4]
 80102a4:	1714030a 	.word	0x1714030a
 80102a8:	0a          	.byte	0x0a
 80102a9:	00          	.byte	0x00
 80102aa:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80102ae:	0730      	lsls	r0, r6, #28
 80102b0:	d5c1      	bpl.n	8010236 <_strtod_l+0x7e>
 80102b2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80102b6:	e7be      	b.n	8010236 <_strtod_l+0x7e>
 80102b8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80102bc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80102be:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80102c2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80102c6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80102ca:	e7f0      	b.n	80102ae <_strtod_l+0xf6>
 80102cc:	f8df b170 	ldr.w	fp, [pc, #368]	; 8010440 <_strtod_l+0x288>
 80102d0:	e7ed      	b.n	80102ae <_strtod_l+0xf6>
 80102d2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80102d6:	f04f 3aff 	mov.w	sl, #4294967295
 80102da:	e7e8      	b.n	80102ae <_strtod_l+0xf6>
 80102dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80102de:	1c5a      	adds	r2, r3, #1
 80102e0:	921b      	str	r2, [sp, #108]	; 0x6c
 80102e2:	785b      	ldrb	r3, [r3, #1]
 80102e4:	2b30      	cmp	r3, #48	; 0x30
 80102e6:	d0f9      	beq.n	80102dc <_strtod_l+0x124>
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d0a4      	beq.n	8010236 <_strtod_l+0x7e>
 80102ec:	2301      	movs	r3, #1
 80102ee:	2500      	movs	r5, #0
 80102f0:	9306      	str	r3, [sp, #24]
 80102f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80102f4:	9308      	str	r3, [sp, #32]
 80102f6:	9507      	str	r5, [sp, #28]
 80102f8:	9505      	str	r5, [sp, #20]
 80102fa:	220a      	movs	r2, #10
 80102fc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80102fe:	7807      	ldrb	r7, [r0, #0]
 8010300:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8010304:	b2d9      	uxtb	r1, r3
 8010306:	2909      	cmp	r1, #9
 8010308:	d929      	bls.n	801035e <_strtod_l+0x1a6>
 801030a:	4622      	mov	r2, r4
 801030c:	f8d8 1000 	ldr.w	r1, [r8]
 8010310:	f002 ff25 	bl	801315e <strncmp>
 8010314:	2800      	cmp	r0, #0
 8010316:	d031      	beq.n	801037c <_strtod_l+0x1c4>
 8010318:	2000      	movs	r0, #0
 801031a:	9c05      	ldr	r4, [sp, #20]
 801031c:	9004      	str	r0, [sp, #16]
 801031e:	463b      	mov	r3, r7
 8010320:	4602      	mov	r2, r0
 8010322:	2b65      	cmp	r3, #101	; 0x65
 8010324:	d001      	beq.n	801032a <_strtod_l+0x172>
 8010326:	2b45      	cmp	r3, #69	; 0x45
 8010328:	d114      	bne.n	8010354 <_strtod_l+0x19c>
 801032a:	b924      	cbnz	r4, 8010336 <_strtod_l+0x17e>
 801032c:	b910      	cbnz	r0, 8010334 <_strtod_l+0x17c>
 801032e:	9b06      	ldr	r3, [sp, #24]
 8010330:	2b00      	cmp	r3, #0
 8010332:	d09e      	beq.n	8010272 <_strtod_l+0xba>
 8010334:	2400      	movs	r4, #0
 8010336:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8010338:	1c73      	adds	r3, r6, #1
 801033a:	931b      	str	r3, [sp, #108]	; 0x6c
 801033c:	7873      	ldrb	r3, [r6, #1]
 801033e:	2b2b      	cmp	r3, #43	; 0x2b
 8010340:	d078      	beq.n	8010434 <_strtod_l+0x27c>
 8010342:	2b2d      	cmp	r3, #45	; 0x2d
 8010344:	d070      	beq.n	8010428 <_strtod_l+0x270>
 8010346:	f04f 0c00 	mov.w	ip, #0
 801034a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 801034e:	2f09      	cmp	r7, #9
 8010350:	d97c      	bls.n	801044c <_strtod_l+0x294>
 8010352:	961b      	str	r6, [sp, #108]	; 0x6c
 8010354:	f04f 0e00 	mov.w	lr, #0
 8010358:	e09a      	b.n	8010490 <_strtod_l+0x2d8>
 801035a:	2300      	movs	r3, #0
 801035c:	e7c7      	b.n	80102ee <_strtod_l+0x136>
 801035e:	9905      	ldr	r1, [sp, #20]
 8010360:	2908      	cmp	r1, #8
 8010362:	bfdd      	ittte	le
 8010364:	9907      	ldrle	r1, [sp, #28]
 8010366:	fb02 3301 	mlale	r3, r2, r1, r3
 801036a:	9307      	strle	r3, [sp, #28]
 801036c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8010370:	9b05      	ldr	r3, [sp, #20]
 8010372:	3001      	adds	r0, #1
 8010374:	3301      	adds	r3, #1
 8010376:	9305      	str	r3, [sp, #20]
 8010378:	901b      	str	r0, [sp, #108]	; 0x6c
 801037a:	e7bf      	b.n	80102fc <_strtod_l+0x144>
 801037c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801037e:	191a      	adds	r2, r3, r4
 8010380:	921b      	str	r2, [sp, #108]	; 0x6c
 8010382:	9a05      	ldr	r2, [sp, #20]
 8010384:	5d1b      	ldrb	r3, [r3, r4]
 8010386:	2a00      	cmp	r2, #0
 8010388:	d037      	beq.n	80103fa <_strtod_l+0x242>
 801038a:	9c05      	ldr	r4, [sp, #20]
 801038c:	4602      	mov	r2, r0
 801038e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8010392:	2909      	cmp	r1, #9
 8010394:	d913      	bls.n	80103be <_strtod_l+0x206>
 8010396:	2101      	movs	r1, #1
 8010398:	9104      	str	r1, [sp, #16]
 801039a:	e7c2      	b.n	8010322 <_strtod_l+0x16a>
 801039c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801039e:	1c5a      	adds	r2, r3, #1
 80103a0:	921b      	str	r2, [sp, #108]	; 0x6c
 80103a2:	785b      	ldrb	r3, [r3, #1]
 80103a4:	3001      	adds	r0, #1
 80103a6:	2b30      	cmp	r3, #48	; 0x30
 80103a8:	d0f8      	beq.n	801039c <_strtod_l+0x1e4>
 80103aa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80103ae:	2a08      	cmp	r2, #8
 80103b0:	f200 84e4 	bhi.w	8010d7c <_strtod_l+0xbc4>
 80103b4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80103b6:	9208      	str	r2, [sp, #32]
 80103b8:	4602      	mov	r2, r0
 80103ba:	2000      	movs	r0, #0
 80103bc:	4604      	mov	r4, r0
 80103be:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80103c2:	f100 0101 	add.w	r1, r0, #1
 80103c6:	d012      	beq.n	80103ee <_strtod_l+0x236>
 80103c8:	440a      	add	r2, r1
 80103ca:	eb00 0c04 	add.w	ip, r0, r4
 80103ce:	4621      	mov	r1, r4
 80103d0:	270a      	movs	r7, #10
 80103d2:	458c      	cmp	ip, r1
 80103d4:	d113      	bne.n	80103fe <_strtod_l+0x246>
 80103d6:	1821      	adds	r1, r4, r0
 80103d8:	2908      	cmp	r1, #8
 80103da:	f104 0401 	add.w	r4, r4, #1
 80103de:	4404      	add	r4, r0
 80103e0:	dc19      	bgt.n	8010416 <_strtod_l+0x25e>
 80103e2:	9b07      	ldr	r3, [sp, #28]
 80103e4:	210a      	movs	r1, #10
 80103e6:	fb01 e303 	mla	r3, r1, r3, lr
 80103ea:	9307      	str	r3, [sp, #28]
 80103ec:	2100      	movs	r1, #0
 80103ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80103f0:	1c58      	adds	r0, r3, #1
 80103f2:	901b      	str	r0, [sp, #108]	; 0x6c
 80103f4:	785b      	ldrb	r3, [r3, #1]
 80103f6:	4608      	mov	r0, r1
 80103f8:	e7c9      	b.n	801038e <_strtod_l+0x1d6>
 80103fa:	9805      	ldr	r0, [sp, #20]
 80103fc:	e7d3      	b.n	80103a6 <_strtod_l+0x1ee>
 80103fe:	2908      	cmp	r1, #8
 8010400:	f101 0101 	add.w	r1, r1, #1
 8010404:	dc03      	bgt.n	801040e <_strtod_l+0x256>
 8010406:	9b07      	ldr	r3, [sp, #28]
 8010408:	437b      	muls	r3, r7
 801040a:	9307      	str	r3, [sp, #28]
 801040c:	e7e1      	b.n	80103d2 <_strtod_l+0x21a>
 801040e:	2910      	cmp	r1, #16
 8010410:	bfd8      	it	le
 8010412:	437d      	mulle	r5, r7
 8010414:	e7dd      	b.n	80103d2 <_strtod_l+0x21a>
 8010416:	2c10      	cmp	r4, #16
 8010418:	bfdc      	itt	le
 801041a:	210a      	movle	r1, #10
 801041c:	fb01 e505 	mlale	r5, r1, r5, lr
 8010420:	e7e4      	b.n	80103ec <_strtod_l+0x234>
 8010422:	2301      	movs	r3, #1
 8010424:	9304      	str	r3, [sp, #16]
 8010426:	e781      	b.n	801032c <_strtod_l+0x174>
 8010428:	f04f 0c01 	mov.w	ip, #1
 801042c:	1cb3      	adds	r3, r6, #2
 801042e:	931b      	str	r3, [sp, #108]	; 0x6c
 8010430:	78b3      	ldrb	r3, [r6, #2]
 8010432:	e78a      	b.n	801034a <_strtod_l+0x192>
 8010434:	f04f 0c00 	mov.w	ip, #0
 8010438:	e7f8      	b.n	801042c <_strtod_l+0x274>
 801043a:	bf00      	nop
 801043c:	08013910 	.word	0x08013910
 8010440:	7ff00000 	.word	0x7ff00000
 8010444:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010446:	1c5f      	adds	r7, r3, #1
 8010448:	971b      	str	r7, [sp, #108]	; 0x6c
 801044a:	785b      	ldrb	r3, [r3, #1]
 801044c:	2b30      	cmp	r3, #48	; 0x30
 801044e:	d0f9      	beq.n	8010444 <_strtod_l+0x28c>
 8010450:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8010454:	2f08      	cmp	r7, #8
 8010456:	f63f af7d 	bhi.w	8010354 <_strtod_l+0x19c>
 801045a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801045e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010460:	930a      	str	r3, [sp, #40]	; 0x28
 8010462:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010464:	1c5f      	adds	r7, r3, #1
 8010466:	971b      	str	r7, [sp, #108]	; 0x6c
 8010468:	785b      	ldrb	r3, [r3, #1]
 801046a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 801046e:	f1b8 0f09 	cmp.w	r8, #9
 8010472:	d937      	bls.n	80104e4 <_strtod_l+0x32c>
 8010474:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010476:	1a7f      	subs	r7, r7, r1
 8010478:	2f08      	cmp	r7, #8
 801047a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801047e:	dc37      	bgt.n	80104f0 <_strtod_l+0x338>
 8010480:	45be      	cmp	lr, r7
 8010482:	bfa8      	it	ge
 8010484:	46be      	movge	lr, r7
 8010486:	f1bc 0f00 	cmp.w	ip, #0
 801048a:	d001      	beq.n	8010490 <_strtod_l+0x2d8>
 801048c:	f1ce 0e00 	rsb	lr, lr, #0
 8010490:	2c00      	cmp	r4, #0
 8010492:	d151      	bne.n	8010538 <_strtod_l+0x380>
 8010494:	2800      	cmp	r0, #0
 8010496:	f47f aece 	bne.w	8010236 <_strtod_l+0x7e>
 801049a:	9a06      	ldr	r2, [sp, #24]
 801049c:	2a00      	cmp	r2, #0
 801049e:	f47f aeca 	bne.w	8010236 <_strtod_l+0x7e>
 80104a2:	9a04      	ldr	r2, [sp, #16]
 80104a4:	2a00      	cmp	r2, #0
 80104a6:	f47f aee4 	bne.w	8010272 <_strtod_l+0xba>
 80104aa:	2b4e      	cmp	r3, #78	; 0x4e
 80104ac:	d027      	beq.n	80104fe <_strtod_l+0x346>
 80104ae:	dc21      	bgt.n	80104f4 <_strtod_l+0x33c>
 80104b0:	2b49      	cmp	r3, #73	; 0x49
 80104b2:	f47f aede 	bne.w	8010272 <_strtod_l+0xba>
 80104b6:	49a0      	ldr	r1, [pc, #640]	; (8010738 <_strtod_l+0x580>)
 80104b8:	a81b      	add	r0, sp, #108	; 0x6c
 80104ba:	f001 fea1 	bl	8012200 <__match>
 80104be:	2800      	cmp	r0, #0
 80104c0:	f43f aed7 	beq.w	8010272 <_strtod_l+0xba>
 80104c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80104c6:	499d      	ldr	r1, [pc, #628]	; (801073c <_strtod_l+0x584>)
 80104c8:	3b01      	subs	r3, #1
 80104ca:	a81b      	add	r0, sp, #108	; 0x6c
 80104cc:	931b      	str	r3, [sp, #108]	; 0x6c
 80104ce:	f001 fe97 	bl	8012200 <__match>
 80104d2:	b910      	cbnz	r0, 80104da <_strtod_l+0x322>
 80104d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80104d6:	3301      	adds	r3, #1
 80104d8:	931b      	str	r3, [sp, #108]	; 0x6c
 80104da:	f8df b274 	ldr.w	fp, [pc, #628]	; 8010750 <_strtod_l+0x598>
 80104de:	f04f 0a00 	mov.w	sl, #0
 80104e2:	e6a8      	b.n	8010236 <_strtod_l+0x7e>
 80104e4:	210a      	movs	r1, #10
 80104e6:	fb01 3e0e 	mla	lr, r1, lr, r3
 80104ea:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80104ee:	e7b8      	b.n	8010462 <_strtod_l+0x2aa>
 80104f0:	46be      	mov	lr, r7
 80104f2:	e7c8      	b.n	8010486 <_strtod_l+0x2ce>
 80104f4:	2b69      	cmp	r3, #105	; 0x69
 80104f6:	d0de      	beq.n	80104b6 <_strtod_l+0x2fe>
 80104f8:	2b6e      	cmp	r3, #110	; 0x6e
 80104fa:	f47f aeba 	bne.w	8010272 <_strtod_l+0xba>
 80104fe:	4990      	ldr	r1, [pc, #576]	; (8010740 <_strtod_l+0x588>)
 8010500:	a81b      	add	r0, sp, #108	; 0x6c
 8010502:	f001 fe7d 	bl	8012200 <__match>
 8010506:	2800      	cmp	r0, #0
 8010508:	f43f aeb3 	beq.w	8010272 <_strtod_l+0xba>
 801050c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801050e:	781b      	ldrb	r3, [r3, #0]
 8010510:	2b28      	cmp	r3, #40	; 0x28
 8010512:	d10e      	bne.n	8010532 <_strtod_l+0x37a>
 8010514:	aa1e      	add	r2, sp, #120	; 0x78
 8010516:	498b      	ldr	r1, [pc, #556]	; (8010744 <_strtod_l+0x58c>)
 8010518:	a81b      	add	r0, sp, #108	; 0x6c
 801051a:	f001 fe85 	bl	8012228 <__hexnan>
 801051e:	2805      	cmp	r0, #5
 8010520:	d107      	bne.n	8010532 <_strtod_l+0x37a>
 8010522:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010524:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8010528:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801052c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8010530:	e681      	b.n	8010236 <_strtod_l+0x7e>
 8010532:	f8df b224 	ldr.w	fp, [pc, #548]	; 8010758 <_strtod_l+0x5a0>
 8010536:	e7d2      	b.n	80104de <_strtod_l+0x326>
 8010538:	ebae 0302 	sub.w	r3, lr, r2
 801053c:	9306      	str	r3, [sp, #24]
 801053e:	9b05      	ldr	r3, [sp, #20]
 8010540:	9807      	ldr	r0, [sp, #28]
 8010542:	2b00      	cmp	r3, #0
 8010544:	bf08      	it	eq
 8010546:	4623      	moveq	r3, r4
 8010548:	2c10      	cmp	r4, #16
 801054a:	9305      	str	r3, [sp, #20]
 801054c:	46a0      	mov	r8, r4
 801054e:	bfa8      	it	ge
 8010550:	f04f 0810 	movge.w	r8, #16
 8010554:	f7ef ffd6 	bl	8000504 <__aeabi_ui2d>
 8010558:	2c09      	cmp	r4, #9
 801055a:	4682      	mov	sl, r0
 801055c:	468b      	mov	fp, r1
 801055e:	dc13      	bgt.n	8010588 <_strtod_l+0x3d0>
 8010560:	9b06      	ldr	r3, [sp, #24]
 8010562:	2b00      	cmp	r3, #0
 8010564:	f43f ae67 	beq.w	8010236 <_strtod_l+0x7e>
 8010568:	9b06      	ldr	r3, [sp, #24]
 801056a:	dd7a      	ble.n	8010662 <_strtod_l+0x4aa>
 801056c:	2b16      	cmp	r3, #22
 801056e:	dc61      	bgt.n	8010634 <_strtod_l+0x47c>
 8010570:	4a75      	ldr	r2, [pc, #468]	; (8010748 <_strtod_l+0x590>)
 8010572:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8010576:	e9de 0100 	ldrd	r0, r1, [lr]
 801057a:	4652      	mov	r2, sl
 801057c:	465b      	mov	r3, fp
 801057e:	f7f0 f83b 	bl	80005f8 <__aeabi_dmul>
 8010582:	4682      	mov	sl, r0
 8010584:	468b      	mov	fp, r1
 8010586:	e656      	b.n	8010236 <_strtod_l+0x7e>
 8010588:	4b6f      	ldr	r3, [pc, #444]	; (8010748 <_strtod_l+0x590>)
 801058a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801058e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8010592:	f7f0 f831 	bl	80005f8 <__aeabi_dmul>
 8010596:	4606      	mov	r6, r0
 8010598:	4628      	mov	r0, r5
 801059a:	460f      	mov	r7, r1
 801059c:	f7ef ffb2 	bl	8000504 <__aeabi_ui2d>
 80105a0:	4602      	mov	r2, r0
 80105a2:	460b      	mov	r3, r1
 80105a4:	4630      	mov	r0, r6
 80105a6:	4639      	mov	r1, r7
 80105a8:	f7ef fe70 	bl	800028c <__adddf3>
 80105ac:	2c0f      	cmp	r4, #15
 80105ae:	4682      	mov	sl, r0
 80105b0:	468b      	mov	fp, r1
 80105b2:	ddd5      	ble.n	8010560 <_strtod_l+0x3a8>
 80105b4:	9b06      	ldr	r3, [sp, #24]
 80105b6:	eba4 0808 	sub.w	r8, r4, r8
 80105ba:	4498      	add	r8, r3
 80105bc:	f1b8 0f00 	cmp.w	r8, #0
 80105c0:	f340 8096 	ble.w	80106f0 <_strtod_l+0x538>
 80105c4:	f018 030f 	ands.w	r3, r8, #15
 80105c8:	d00a      	beq.n	80105e0 <_strtod_l+0x428>
 80105ca:	495f      	ldr	r1, [pc, #380]	; (8010748 <_strtod_l+0x590>)
 80105cc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80105d0:	4652      	mov	r2, sl
 80105d2:	465b      	mov	r3, fp
 80105d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80105d8:	f7f0 f80e 	bl	80005f8 <__aeabi_dmul>
 80105dc:	4682      	mov	sl, r0
 80105de:	468b      	mov	fp, r1
 80105e0:	f038 080f 	bics.w	r8, r8, #15
 80105e4:	d073      	beq.n	80106ce <_strtod_l+0x516>
 80105e6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80105ea:	dd47      	ble.n	801067c <_strtod_l+0x4c4>
 80105ec:	2400      	movs	r4, #0
 80105ee:	46a0      	mov	r8, r4
 80105f0:	9407      	str	r4, [sp, #28]
 80105f2:	9405      	str	r4, [sp, #20]
 80105f4:	2322      	movs	r3, #34	; 0x22
 80105f6:	f8df b158 	ldr.w	fp, [pc, #344]	; 8010750 <_strtod_l+0x598>
 80105fa:	f8c9 3000 	str.w	r3, [r9]
 80105fe:	f04f 0a00 	mov.w	sl, #0
 8010602:	9b07      	ldr	r3, [sp, #28]
 8010604:	2b00      	cmp	r3, #0
 8010606:	f43f ae16 	beq.w	8010236 <_strtod_l+0x7e>
 801060a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801060c:	4648      	mov	r0, r9
 801060e:	f001 fef7 	bl	8012400 <_Bfree>
 8010612:	9905      	ldr	r1, [sp, #20]
 8010614:	4648      	mov	r0, r9
 8010616:	f001 fef3 	bl	8012400 <_Bfree>
 801061a:	4641      	mov	r1, r8
 801061c:	4648      	mov	r0, r9
 801061e:	f001 feef 	bl	8012400 <_Bfree>
 8010622:	9907      	ldr	r1, [sp, #28]
 8010624:	4648      	mov	r0, r9
 8010626:	f001 feeb 	bl	8012400 <_Bfree>
 801062a:	4621      	mov	r1, r4
 801062c:	4648      	mov	r0, r9
 801062e:	f001 fee7 	bl	8012400 <_Bfree>
 8010632:	e600      	b.n	8010236 <_strtod_l+0x7e>
 8010634:	9a06      	ldr	r2, [sp, #24]
 8010636:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 801063a:	4293      	cmp	r3, r2
 801063c:	dbba      	blt.n	80105b4 <_strtod_l+0x3fc>
 801063e:	4d42      	ldr	r5, [pc, #264]	; (8010748 <_strtod_l+0x590>)
 8010640:	f1c4 040f 	rsb	r4, r4, #15
 8010644:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8010648:	4652      	mov	r2, sl
 801064a:	465b      	mov	r3, fp
 801064c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010650:	f7ef ffd2 	bl	80005f8 <__aeabi_dmul>
 8010654:	9b06      	ldr	r3, [sp, #24]
 8010656:	1b1c      	subs	r4, r3, r4
 8010658:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 801065c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010660:	e78d      	b.n	801057e <_strtod_l+0x3c6>
 8010662:	f113 0f16 	cmn.w	r3, #22
 8010666:	dba5      	blt.n	80105b4 <_strtod_l+0x3fc>
 8010668:	4a37      	ldr	r2, [pc, #220]	; (8010748 <_strtod_l+0x590>)
 801066a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 801066e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8010672:	4650      	mov	r0, sl
 8010674:	4659      	mov	r1, fp
 8010676:	f7f0 f8e9 	bl	800084c <__aeabi_ddiv>
 801067a:	e782      	b.n	8010582 <_strtod_l+0x3ca>
 801067c:	2300      	movs	r3, #0
 801067e:	4e33      	ldr	r6, [pc, #204]	; (801074c <_strtod_l+0x594>)
 8010680:	ea4f 1828 	mov.w	r8, r8, asr #4
 8010684:	4650      	mov	r0, sl
 8010686:	4659      	mov	r1, fp
 8010688:	461d      	mov	r5, r3
 801068a:	f1b8 0f01 	cmp.w	r8, #1
 801068e:	dc21      	bgt.n	80106d4 <_strtod_l+0x51c>
 8010690:	b10b      	cbz	r3, 8010696 <_strtod_l+0x4de>
 8010692:	4682      	mov	sl, r0
 8010694:	468b      	mov	fp, r1
 8010696:	4b2d      	ldr	r3, [pc, #180]	; (801074c <_strtod_l+0x594>)
 8010698:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801069c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80106a0:	4652      	mov	r2, sl
 80106a2:	465b      	mov	r3, fp
 80106a4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80106a8:	f7ef ffa6 	bl	80005f8 <__aeabi_dmul>
 80106ac:	4b28      	ldr	r3, [pc, #160]	; (8010750 <_strtod_l+0x598>)
 80106ae:	460a      	mov	r2, r1
 80106b0:	400b      	ands	r3, r1
 80106b2:	4928      	ldr	r1, [pc, #160]	; (8010754 <_strtod_l+0x59c>)
 80106b4:	428b      	cmp	r3, r1
 80106b6:	4682      	mov	sl, r0
 80106b8:	d898      	bhi.n	80105ec <_strtod_l+0x434>
 80106ba:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80106be:	428b      	cmp	r3, r1
 80106c0:	bf86      	itte	hi
 80106c2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801075c <_strtod_l+0x5a4>
 80106c6:	f04f 3aff 	movhi.w	sl, #4294967295
 80106ca:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80106ce:	2300      	movs	r3, #0
 80106d0:	9304      	str	r3, [sp, #16]
 80106d2:	e077      	b.n	80107c4 <_strtod_l+0x60c>
 80106d4:	f018 0f01 	tst.w	r8, #1
 80106d8:	d006      	beq.n	80106e8 <_strtod_l+0x530>
 80106da:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80106de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106e2:	f7ef ff89 	bl	80005f8 <__aeabi_dmul>
 80106e6:	2301      	movs	r3, #1
 80106e8:	3501      	adds	r5, #1
 80106ea:	ea4f 0868 	mov.w	r8, r8, asr #1
 80106ee:	e7cc      	b.n	801068a <_strtod_l+0x4d2>
 80106f0:	d0ed      	beq.n	80106ce <_strtod_l+0x516>
 80106f2:	f1c8 0800 	rsb	r8, r8, #0
 80106f6:	f018 020f 	ands.w	r2, r8, #15
 80106fa:	d00a      	beq.n	8010712 <_strtod_l+0x55a>
 80106fc:	4b12      	ldr	r3, [pc, #72]	; (8010748 <_strtod_l+0x590>)
 80106fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010702:	4650      	mov	r0, sl
 8010704:	4659      	mov	r1, fp
 8010706:	e9d3 2300 	ldrd	r2, r3, [r3]
 801070a:	f7f0 f89f 	bl	800084c <__aeabi_ddiv>
 801070e:	4682      	mov	sl, r0
 8010710:	468b      	mov	fp, r1
 8010712:	ea5f 1828 	movs.w	r8, r8, asr #4
 8010716:	d0da      	beq.n	80106ce <_strtod_l+0x516>
 8010718:	f1b8 0f1f 	cmp.w	r8, #31
 801071c:	dd20      	ble.n	8010760 <_strtod_l+0x5a8>
 801071e:	2400      	movs	r4, #0
 8010720:	46a0      	mov	r8, r4
 8010722:	9407      	str	r4, [sp, #28]
 8010724:	9405      	str	r4, [sp, #20]
 8010726:	2322      	movs	r3, #34	; 0x22
 8010728:	f04f 0a00 	mov.w	sl, #0
 801072c:	f04f 0b00 	mov.w	fp, #0
 8010730:	f8c9 3000 	str.w	r3, [r9]
 8010734:	e765      	b.n	8010602 <_strtod_l+0x44a>
 8010736:	bf00      	nop
 8010738:	080138d9 	.word	0x080138d9
 801073c:	08013963 	.word	0x08013963
 8010740:	080138e1 	.word	0x080138e1
 8010744:	08013924 	.word	0x08013924
 8010748:	08013a08 	.word	0x08013a08
 801074c:	080139e0 	.word	0x080139e0
 8010750:	7ff00000 	.word	0x7ff00000
 8010754:	7ca00000 	.word	0x7ca00000
 8010758:	fff80000 	.word	0xfff80000
 801075c:	7fefffff 	.word	0x7fefffff
 8010760:	f018 0310 	ands.w	r3, r8, #16
 8010764:	bf18      	it	ne
 8010766:	236a      	movne	r3, #106	; 0x6a
 8010768:	4da0      	ldr	r5, [pc, #640]	; (80109ec <_strtod_l+0x834>)
 801076a:	9304      	str	r3, [sp, #16]
 801076c:	4650      	mov	r0, sl
 801076e:	4659      	mov	r1, fp
 8010770:	2300      	movs	r3, #0
 8010772:	f1b8 0f00 	cmp.w	r8, #0
 8010776:	f300 810a 	bgt.w	801098e <_strtod_l+0x7d6>
 801077a:	b10b      	cbz	r3, 8010780 <_strtod_l+0x5c8>
 801077c:	4682      	mov	sl, r0
 801077e:	468b      	mov	fp, r1
 8010780:	9b04      	ldr	r3, [sp, #16]
 8010782:	b1bb      	cbz	r3, 80107b4 <_strtod_l+0x5fc>
 8010784:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8010788:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801078c:	2b00      	cmp	r3, #0
 801078e:	4659      	mov	r1, fp
 8010790:	dd10      	ble.n	80107b4 <_strtod_l+0x5fc>
 8010792:	2b1f      	cmp	r3, #31
 8010794:	f340 8107 	ble.w	80109a6 <_strtod_l+0x7ee>
 8010798:	2b34      	cmp	r3, #52	; 0x34
 801079a:	bfde      	ittt	le
 801079c:	3b20      	suble	r3, #32
 801079e:	f04f 32ff 	movle.w	r2, #4294967295
 80107a2:	fa02 f303 	lslle.w	r3, r2, r3
 80107a6:	f04f 0a00 	mov.w	sl, #0
 80107aa:	bfcc      	ite	gt
 80107ac:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80107b0:	ea03 0b01 	andle.w	fp, r3, r1
 80107b4:	2200      	movs	r2, #0
 80107b6:	2300      	movs	r3, #0
 80107b8:	4650      	mov	r0, sl
 80107ba:	4659      	mov	r1, fp
 80107bc:	f7f0 f984 	bl	8000ac8 <__aeabi_dcmpeq>
 80107c0:	2800      	cmp	r0, #0
 80107c2:	d1ac      	bne.n	801071e <_strtod_l+0x566>
 80107c4:	9b07      	ldr	r3, [sp, #28]
 80107c6:	9300      	str	r3, [sp, #0]
 80107c8:	9a05      	ldr	r2, [sp, #20]
 80107ca:	9908      	ldr	r1, [sp, #32]
 80107cc:	4623      	mov	r3, r4
 80107ce:	4648      	mov	r0, r9
 80107d0:	f001 fe68 	bl	80124a4 <__s2b>
 80107d4:	9007      	str	r0, [sp, #28]
 80107d6:	2800      	cmp	r0, #0
 80107d8:	f43f af08 	beq.w	80105ec <_strtod_l+0x434>
 80107dc:	9a06      	ldr	r2, [sp, #24]
 80107de:	9b06      	ldr	r3, [sp, #24]
 80107e0:	2a00      	cmp	r2, #0
 80107e2:	f1c3 0300 	rsb	r3, r3, #0
 80107e6:	bfa8      	it	ge
 80107e8:	2300      	movge	r3, #0
 80107ea:	930e      	str	r3, [sp, #56]	; 0x38
 80107ec:	2400      	movs	r4, #0
 80107ee:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80107f2:	9316      	str	r3, [sp, #88]	; 0x58
 80107f4:	46a0      	mov	r8, r4
 80107f6:	9b07      	ldr	r3, [sp, #28]
 80107f8:	4648      	mov	r0, r9
 80107fa:	6859      	ldr	r1, [r3, #4]
 80107fc:	f001 fdcc 	bl	8012398 <_Balloc>
 8010800:	9005      	str	r0, [sp, #20]
 8010802:	2800      	cmp	r0, #0
 8010804:	f43f aef6 	beq.w	80105f4 <_strtod_l+0x43c>
 8010808:	9b07      	ldr	r3, [sp, #28]
 801080a:	691a      	ldr	r2, [r3, #16]
 801080c:	3202      	adds	r2, #2
 801080e:	f103 010c 	add.w	r1, r3, #12
 8010812:	0092      	lsls	r2, r2, #2
 8010814:	300c      	adds	r0, #12
 8010816:	f7fe fd69 	bl	800f2ec <memcpy>
 801081a:	aa1e      	add	r2, sp, #120	; 0x78
 801081c:	a91d      	add	r1, sp, #116	; 0x74
 801081e:	ec4b ab10 	vmov	d0, sl, fp
 8010822:	4648      	mov	r0, r9
 8010824:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8010828:	f002 f8f8 	bl	8012a1c <__d2b>
 801082c:	901c      	str	r0, [sp, #112]	; 0x70
 801082e:	2800      	cmp	r0, #0
 8010830:	f43f aee0 	beq.w	80105f4 <_strtod_l+0x43c>
 8010834:	2101      	movs	r1, #1
 8010836:	4648      	mov	r0, r9
 8010838:	f001 fec0 	bl	80125bc <__i2b>
 801083c:	4680      	mov	r8, r0
 801083e:	2800      	cmp	r0, #0
 8010840:	f43f aed8 	beq.w	80105f4 <_strtod_l+0x43c>
 8010844:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8010846:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8010848:	2e00      	cmp	r6, #0
 801084a:	bfab      	itete	ge
 801084c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 801084e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8010850:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8010852:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8010854:	bfac      	ite	ge
 8010856:	18f7      	addge	r7, r6, r3
 8010858:	1b9d      	sublt	r5, r3, r6
 801085a:	9b04      	ldr	r3, [sp, #16]
 801085c:	1af6      	subs	r6, r6, r3
 801085e:	4416      	add	r6, r2
 8010860:	4b63      	ldr	r3, [pc, #396]	; (80109f0 <_strtod_l+0x838>)
 8010862:	3e01      	subs	r6, #1
 8010864:	429e      	cmp	r6, r3
 8010866:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801086a:	f280 80af 	bge.w	80109cc <_strtod_l+0x814>
 801086e:	1b9b      	subs	r3, r3, r6
 8010870:	2b1f      	cmp	r3, #31
 8010872:	eba2 0203 	sub.w	r2, r2, r3
 8010876:	f04f 0101 	mov.w	r1, #1
 801087a:	f300 809b 	bgt.w	80109b4 <_strtod_l+0x7fc>
 801087e:	fa01 f303 	lsl.w	r3, r1, r3
 8010882:	930f      	str	r3, [sp, #60]	; 0x3c
 8010884:	2300      	movs	r3, #0
 8010886:	930a      	str	r3, [sp, #40]	; 0x28
 8010888:	18be      	adds	r6, r7, r2
 801088a:	9b04      	ldr	r3, [sp, #16]
 801088c:	42b7      	cmp	r7, r6
 801088e:	4415      	add	r5, r2
 8010890:	441d      	add	r5, r3
 8010892:	463b      	mov	r3, r7
 8010894:	bfa8      	it	ge
 8010896:	4633      	movge	r3, r6
 8010898:	42ab      	cmp	r3, r5
 801089a:	bfa8      	it	ge
 801089c:	462b      	movge	r3, r5
 801089e:	2b00      	cmp	r3, #0
 80108a0:	bfc2      	ittt	gt
 80108a2:	1af6      	subgt	r6, r6, r3
 80108a4:	1aed      	subgt	r5, r5, r3
 80108a6:	1aff      	subgt	r7, r7, r3
 80108a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80108aa:	b1bb      	cbz	r3, 80108dc <_strtod_l+0x724>
 80108ac:	4641      	mov	r1, r8
 80108ae:	461a      	mov	r2, r3
 80108b0:	4648      	mov	r0, r9
 80108b2:	f001 ff23 	bl	80126fc <__pow5mult>
 80108b6:	4680      	mov	r8, r0
 80108b8:	2800      	cmp	r0, #0
 80108ba:	f43f ae9b 	beq.w	80105f4 <_strtod_l+0x43c>
 80108be:	4601      	mov	r1, r0
 80108c0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80108c2:	4648      	mov	r0, r9
 80108c4:	f001 fe83 	bl	80125ce <__multiply>
 80108c8:	900c      	str	r0, [sp, #48]	; 0x30
 80108ca:	2800      	cmp	r0, #0
 80108cc:	f43f ae92 	beq.w	80105f4 <_strtod_l+0x43c>
 80108d0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80108d2:	4648      	mov	r0, r9
 80108d4:	f001 fd94 	bl	8012400 <_Bfree>
 80108d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80108da:	931c      	str	r3, [sp, #112]	; 0x70
 80108dc:	2e00      	cmp	r6, #0
 80108de:	dc7a      	bgt.n	80109d6 <_strtod_l+0x81e>
 80108e0:	9b06      	ldr	r3, [sp, #24]
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	dd08      	ble.n	80108f8 <_strtod_l+0x740>
 80108e6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80108e8:	9905      	ldr	r1, [sp, #20]
 80108ea:	4648      	mov	r0, r9
 80108ec:	f001 ff06 	bl	80126fc <__pow5mult>
 80108f0:	9005      	str	r0, [sp, #20]
 80108f2:	2800      	cmp	r0, #0
 80108f4:	f43f ae7e 	beq.w	80105f4 <_strtod_l+0x43c>
 80108f8:	2d00      	cmp	r5, #0
 80108fa:	dd08      	ble.n	801090e <_strtod_l+0x756>
 80108fc:	462a      	mov	r2, r5
 80108fe:	9905      	ldr	r1, [sp, #20]
 8010900:	4648      	mov	r0, r9
 8010902:	f001 ff49 	bl	8012798 <__lshift>
 8010906:	9005      	str	r0, [sp, #20]
 8010908:	2800      	cmp	r0, #0
 801090a:	f43f ae73 	beq.w	80105f4 <_strtod_l+0x43c>
 801090e:	2f00      	cmp	r7, #0
 8010910:	dd08      	ble.n	8010924 <_strtod_l+0x76c>
 8010912:	4641      	mov	r1, r8
 8010914:	463a      	mov	r2, r7
 8010916:	4648      	mov	r0, r9
 8010918:	f001 ff3e 	bl	8012798 <__lshift>
 801091c:	4680      	mov	r8, r0
 801091e:	2800      	cmp	r0, #0
 8010920:	f43f ae68 	beq.w	80105f4 <_strtod_l+0x43c>
 8010924:	9a05      	ldr	r2, [sp, #20]
 8010926:	991c      	ldr	r1, [sp, #112]	; 0x70
 8010928:	4648      	mov	r0, r9
 801092a:	f001 ffa3 	bl	8012874 <__mdiff>
 801092e:	4604      	mov	r4, r0
 8010930:	2800      	cmp	r0, #0
 8010932:	f43f ae5f 	beq.w	80105f4 <_strtod_l+0x43c>
 8010936:	68c3      	ldr	r3, [r0, #12]
 8010938:	930c      	str	r3, [sp, #48]	; 0x30
 801093a:	2300      	movs	r3, #0
 801093c:	60c3      	str	r3, [r0, #12]
 801093e:	4641      	mov	r1, r8
 8010940:	f001 ff7e 	bl	8012840 <__mcmp>
 8010944:	2800      	cmp	r0, #0
 8010946:	da55      	bge.n	80109f4 <_strtod_l+0x83c>
 8010948:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801094a:	b9e3      	cbnz	r3, 8010986 <_strtod_l+0x7ce>
 801094c:	f1ba 0f00 	cmp.w	sl, #0
 8010950:	d119      	bne.n	8010986 <_strtod_l+0x7ce>
 8010952:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010956:	b9b3      	cbnz	r3, 8010986 <_strtod_l+0x7ce>
 8010958:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801095c:	0d1b      	lsrs	r3, r3, #20
 801095e:	051b      	lsls	r3, r3, #20
 8010960:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8010964:	d90f      	bls.n	8010986 <_strtod_l+0x7ce>
 8010966:	6963      	ldr	r3, [r4, #20]
 8010968:	b913      	cbnz	r3, 8010970 <_strtod_l+0x7b8>
 801096a:	6923      	ldr	r3, [r4, #16]
 801096c:	2b01      	cmp	r3, #1
 801096e:	dd0a      	ble.n	8010986 <_strtod_l+0x7ce>
 8010970:	4621      	mov	r1, r4
 8010972:	2201      	movs	r2, #1
 8010974:	4648      	mov	r0, r9
 8010976:	f001 ff0f 	bl	8012798 <__lshift>
 801097a:	4641      	mov	r1, r8
 801097c:	4604      	mov	r4, r0
 801097e:	f001 ff5f 	bl	8012840 <__mcmp>
 8010982:	2800      	cmp	r0, #0
 8010984:	dc67      	bgt.n	8010a56 <_strtod_l+0x89e>
 8010986:	9b04      	ldr	r3, [sp, #16]
 8010988:	2b00      	cmp	r3, #0
 801098a:	d171      	bne.n	8010a70 <_strtod_l+0x8b8>
 801098c:	e63d      	b.n	801060a <_strtod_l+0x452>
 801098e:	f018 0f01 	tst.w	r8, #1
 8010992:	d004      	beq.n	801099e <_strtod_l+0x7e6>
 8010994:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010998:	f7ef fe2e 	bl	80005f8 <__aeabi_dmul>
 801099c:	2301      	movs	r3, #1
 801099e:	ea4f 0868 	mov.w	r8, r8, asr #1
 80109a2:	3508      	adds	r5, #8
 80109a4:	e6e5      	b.n	8010772 <_strtod_l+0x5ba>
 80109a6:	f04f 32ff 	mov.w	r2, #4294967295
 80109aa:	fa02 f303 	lsl.w	r3, r2, r3
 80109ae:	ea03 0a0a 	and.w	sl, r3, sl
 80109b2:	e6ff      	b.n	80107b4 <_strtod_l+0x5fc>
 80109b4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80109b8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80109bc:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80109c0:	36e2      	adds	r6, #226	; 0xe2
 80109c2:	fa01 f306 	lsl.w	r3, r1, r6
 80109c6:	930a      	str	r3, [sp, #40]	; 0x28
 80109c8:	910f      	str	r1, [sp, #60]	; 0x3c
 80109ca:	e75d      	b.n	8010888 <_strtod_l+0x6d0>
 80109cc:	2300      	movs	r3, #0
 80109ce:	930a      	str	r3, [sp, #40]	; 0x28
 80109d0:	2301      	movs	r3, #1
 80109d2:	930f      	str	r3, [sp, #60]	; 0x3c
 80109d4:	e758      	b.n	8010888 <_strtod_l+0x6d0>
 80109d6:	4632      	mov	r2, r6
 80109d8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80109da:	4648      	mov	r0, r9
 80109dc:	f001 fedc 	bl	8012798 <__lshift>
 80109e0:	901c      	str	r0, [sp, #112]	; 0x70
 80109e2:	2800      	cmp	r0, #0
 80109e4:	f47f af7c 	bne.w	80108e0 <_strtod_l+0x728>
 80109e8:	e604      	b.n	80105f4 <_strtod_l+0x43c>
 80109ea:	bf00      	nop
 80109ec:	08013938 	.word	0x08013938
 80109f0:	fffffc02 	.word	0xfffffc02
 80109f4:	465d      	mov	r5, fp
 80109f6:	f040 8086 	bne.w	8010b06 <_strtod_l+0x94e>
 80109fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80109fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010a00:	b32a      	cbz	r2, 8010a4e <_strtod_l+0x896>
 8010a02:	4aaf      	ldr	r2, [pc, #700]	; (8010cc0 <_strtod_l+0xb08>)
 8010a04:	4293      	cmp	r3, r2
 8010a06:	d153      	bne.n	8010ab0 <_strtod_l+0x8f8>
 8010a08:	9b04      	ldr	r3, [sp, #16]
 8010a0a:	4650      	mov	r0, sl
 8010a0c:	b1d3      	cbz	r3, 8010a44 <_strtod_l+0x88c>
 8010a0e:	4aad      	ldr	r2, [pc, #692]	; (8010cc4 <_strtod_l+0xb0c>)
 8010a10:	402a      	ands	r2, r5
 8010a12:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8010a16:	f04f 31ff 	mov.w	r1, #4294967295
 8010a1a:	d816      	bhi.n	8010a4a <_strtod_l+0x892>
 8010a1c:	0d12      	lsrs	r2, r2, #20
 8010a1e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8010a22:	fa01 f303 	lsl.w	r3, r1, r3
 8010a26:	4298      	cmp	r0, r3
 8010a28:	d142      	bne.n	8010ab0 <_strtod_l+0x8f8>
 8010a2a:	4ba7      	ldr	r3, [pc, #668]	; (8010cc8 <_strtod_l+0xb10>)
 8010a2c:	429d      	cmp	r5, r3
 8010a2e:	d102      	bne.n	8010a36 <_strtod_l+0x87e>
 8010a30:	3001      	adds	r0, #1
 8010a32:	f43f addf 	beq.w	80105f4 <_strtod_l+0x43c>
 8010a36:	4ba3      	ldr	r3, [pc, #652]	; (8010cc4 <_strtod_l+0xb0c>)
 8010a38:	402b      	ands	r3, r5
 8010a3a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8010a3e:	f04f 0a00 	mov.w	sl, #0
 8010a42:	e7a0      	b.n	8010986 <_strtod_l+0x7ce>
 8010a44:	f04f 33ff 	mov.w	r3, #4294967295
 8010a48:	e7ed      	b.n	8010a26 <_strtod_l+0x86e>
 8010a4a:	460b      	mov	r3, r1
 8010a4c:	e7eb      	b.n	8010a26 <_strtod_l+0x86e>
 8010a4e:	bb7b      	cbnz	r3, 8010ab0 <_strtod_l+0x8f8>
 8010a50:	f1ba 0f00 	cmp.w	sl, #0
 8010a54:	d12c      	bne.n	8010ab0 <_strtod_l+0x8f8>
 8010a56:	9904      	ldr	r1, [sp, #16]
 8010a58:	4a9a      	ldr	r2, [pc, #616]	; (8010cc4 <_strtod_l+0xb0c>)
 8010a5a:	465b      	mov	r3, fp
 8010a5c:	b1f1      	cbz	r1, 8010a9c <_strtod_l+0x8e4>
 8010a5e:	ea02 010b 	and.w	r1, r2, fp
 8010a62:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8010a66:	dc19      	bgt.n	8010a9c <_strtod_l+0x8e4>
 8010a68:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8010a6c:	f77f ae5b 	ble.w	8010726 <_strtod_l+0x56e>
 8010a70:	4a96      	ldr	r2, [pc, #600]	; (8010ccc <_strtod_l+0xb14>)
 8010a72:	2300      	movs	r3, #0
 8010a74:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8010a78:	4650      	mov	r0, sl
 8010a7a:	4659      	mov	r1, fp
 8010a7c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8010a80:	f7ef fdba 	bl	80005f8 <__aeabi_dmul>
 8010a84:	4682      	mov	sl, r0
 8010a86:	468b      	mov	fp, r1
 8010a88:	2900      	cmp	r1, #0
 8010a8a:	f47f adbe 	bne.w	801060a <_strtod_l+0x452>
 8010a8e:	2800      	cmp	r0, #0
 8010a90:	f47f adbb 	bne.w	801060a <_strtod_l+0x452>
 8010a94:	2322      	movs	r3, #34	; 0x22
 8010a96:	f8c9 3000 	str.w	r3, [r9]
 8010a9a:	e5b6      	b.n	801060a <_strtod_l+0x452>
 8010a9c:	4013      	ands	r3, r2
 8010a9e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8010aa2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010aa6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8010aaa:	f04f 3aff 	mov.w	sl, #4294967295
 8010aae:	e76a      	b.n	8010986 <_strtod_l+0x7ce>
 8010ab0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ab2:	b193      	cbz	r3, 8010ada <_strtod_l+0x922>
 8010ab4:	422b      	tst	r3, r5
 8010ab6:	f43f af66 	beq.w	8010986 <_strtod_l+0x7ce>
 8010aba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010abc:	9a04      	ldr	r2, [sp, #16]
 8010abe:	4650      	mov	r0, sl
 8010ac0:	4659      	mov	r1, fp
 8010ac2:	b173      	cbz	r3, 8010ae2 <_strtod_l+0x92a>
 8010ac4:	f7ff fb5a 	bl	801017c <sulp>
 8010ac8:	4602      	mov	r2, r0
 8010aca:	460b      	mov	r3, r1
 8010acc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010ad0:	f7ef fbdc 	bl	800028c <__adddf3>
 8010ad4:	4682      	mov	sl, r0
 8010ad6:	468b      	mov	fp, r1
 8010ad8:	e755      	b.n	8010986 <_strtod_l+0x7ce>
 8010ada:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010adc:	ea13 0f0a 	tst.w	r3, sl
 8010ae0:	e7e9      	b.n	8010ab6 <_strtod_l+0x8fe>
 8010ae2:	f7ff fb4b 	bl	801017c <sulp>
 8010ae6:	4602      	mov	r2, r0
 8010ae8:	460b      	mov	r3, r1
 8010aea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010aee:	f7ef fbcb 	bl	8000288 <__aeabi_dsub>
 8010af2:	2200      	movs	r2, #0
 8010af4:	2300      	movs	r3, #0
 8010af6:	4682      	mov	sl, r0
 8010af8:	468b      	mov	fp, r1
 8010afa:	f7ef ffe5 	bl	8000ac8 <__aeabi_dcmpeq>
 8010afe:	2800      	cmp	r0, #0
 8010b00:	f47f ae11 	bne.w	8010726 <_strtod_l+0x56e>
 8010b04:	e73f      	b.n	8010986 <_strtod_l+0x7ce>
 8010b06:	4641      	mov	r1, r8
 8010b08:	4620      	mov	r0, r4
 8010b0a:	f001 ffd6 	bl	8012aba <__ratio>
 8010b0e:	ec57 6b10 	vmov	r6, r7, d0
 8010b12:	2200      	movs	r2, #0
 8010b14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010b18:	ee10 0a10 	vmov	r0, s0
 8010b1c:	4639      	mov	r1, r7
 8010b1e:	f7ef ffe7 	bl	8000af0 <__aeabi_dcmple>
 8010b22:	2800      	cmp	r0, #0
 8010b24:	d077      	beq.n	8010c16 <_strtod_l+0xa5e>
 8010b26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d04a      	beq.n	8010bc2 <_strtod_l+0xa0a>
 8010b2c:	4b68      	ldr	r3, [pc, #416]	; (8010cd0 <_strtod_l+0xb18>)
 8010b2e:	2200      	movs	r2, #0
 8010b30:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8010b34:	4f66      	ldr	r7, [pc, #408]	; (8010cd0 <_strtod_l+0xb18>)
 8010b36:	2600      	movs	r6, #0
 8010b38:	4b62      	ldr	r3, [pc, #392]	; (8010cc4 <_strtod_l+0xb0c>)
 8010b3a:	402b      	ands	r3, r5
 8010b3c:	930f      	str	r3, [sp, #60]	; 0x3c
 8010b3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010b40:	4b64      	ldr	r3, [pc, #400]	; (8010cd4 <_strtod_l+0xb1c>)
 8010b42:	429a      	cmp	r2, r3
 8010b44:	f040 80ce 	bne.w	8010ce4 <_strtod_l+0xb2c>
 8010b48:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010b4c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010b50:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8010b54:	ec4b ab10 	vmov	d0, sl, fp
 8010b58:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8010b5c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8010b60:	f001 fee6 	bl	8012930 <__ulp>
 8010b64:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010b68:	ec53 2b10 	vmov	r2, r3, d0
 8010b6c:	f7ef fd44 	bl	80005f8 <__aeabi_dmul>
 8010b70:	4652      	mov	r2, sl
 8010b72:	465b      	mov	r3, fp
 8010b74:	f7ef fb8a 	bl	800028c <__adddf3>
 8010b78:	460b      	mov	r3, r1
 8010b7a:	4952      	ldr	r1, [pc, #328]	; (8010cc4 <_strtod_l+0xb0c>)
 8010b7c:	4a56      	ldr	r2, [pc, #344]	; (8010cd8 <_strtod_l+0xb20>)
 8010b7e:	4019      	ands	r1, r3
 8010b80:	4291      	cmp	r1, r2
 8010b82:	4682      	mov	sl, r0
 8010b84:	d95b      	bls.n	8010c3e <_strtod_l+0xa86>
 8010b86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b88:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8010b8c:	4293      	cmp	r3, r2
 8010b8e:	d103      	bne.n	8010b98 <_strtod_l+0x9e0>
 8010b90:	9b08      	ldr	r3, [sp, #32]
 8010b92:	3301      	adds	r3, #1
 8010b94:	f43f ad2e 	beq.w	80105f4 <_strtod_l+0x43c>
 8010b98:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8010cc8 <_strtod_l+0xb10>
 8010b9c:	f04f 3aff 	mov.w	sl, #4294967295
 8010ba0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8010ba2:	4648      	mov	r0, r9
 8010ba4:	f001 fc2c 	bl	8012400 <_Bfree>
 8010ba8:	9905      	ldr	r1, [sp, #20]
 8010baa:	4648      	mov	r0, r9
 8010bac:	f001 fc28 	bl	8012400 <_Bfree>
 8010bb0:	4641      	mov	r1, r8
 8010bb2:	4648      	mov	r0, r9
 8010bb4:	f001 fc24 	bl	8012400 <_Bfree>
 8010bb8:	4621      	mov	r1, r4
 8010bba:	4648      	mov	r0, r9
 8010bbc:	f001 fc20 	bl	8012400 <_Bfree>
 8010bc0:	e619      	b.n	80107f6 <_strtod_l+0x63e>
 8010bc2:	f1ba 0f00 	cmp.w	sl, #0
 8010bc6:	d11a      	bne.n	8010bfe <_strtod_l+0xa46>
 8010bc8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010bcc:	b9eb      	cbnz	r3, 8010c0a <_strtod_l+0xa52>
 8010bce:	2200      	movs	r2, #0
 8010bd0:	4b3f      	ldr	r3, [pc, #252]	; (8010cd0 <_strtod_l+0xb18>)
 8010bd2:	4630      	mov	r0, r6
 8010bd4:	4639      	mov	r1, r7
 8010bd6:	f7ef ff81 	bl	8000adc <__aeabi_dcmplt>
 8010bda:	b9c8      	cbnz	r0, 8010c10 <_strtod_l+0xa58>
 8010bdc:	4630      	mov	r0, r6
 8010bde:	4639      	mov	r1, r7
 8010be0:	2200      	movs	r2, #0
 8010be2:	4b3e      	ldr	r3, [pc, #248]	; (8010cdc <_strtod_l+0xb24>)
 8010be4:	f7ef fd08 	bl	80005f8 <__aeabi_dmul>
 8010be8:	4606      	mov	r6, r0
 8010bea:	460f      	mov	r7, r1
 8010bec:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8010bf0:	9618      	str	r6, [sp, #96]	; 0x60
 8010bf2:	9319      	str	r3, [sp, #100]	; 0x64
 8010bf4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8010bf8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8010bfc:	e79c      	b.n	8010b38 <_strtod_l+0x980>
 8010bfe:	f1ba 0f01 	cmp.w	sl, #1
 8010c02:	d102      	bne.n	8010c0a <_strtod_l+0xa52>
 8010c04:	2d00      	cmp	r5, #0
 8010c06:	f43f ad8e 	beq.w	8010726 <_strtod_l+0x56e>
 8010c0a:	2200      	movs	r2, #0
 8010c0c:	4b34      	ldr	r3, [pc, #208]	; (8010ce0 <_strtod_l+0xb28>)
 8010c0e:	e78f      	b.n	8010b30 <_strtod_l+0x978>
 8010c10:	2600      	movs	r6, #0
 8010c12:	4f32      	ldr	r7, [pc, #200]	; (8010cdc <_strtod_l+0xb24>)
 8010c14:	e7ea      	b.n	8010bec <_strtod_l+0xa34>
 8010c16:	4b31      	ldr	r3, [pc, #196]	; (8010cdc <_strtod_l+0xb24>)
 8010c18:	4630      	mov	r0, r6
 8010c1a:	4639      	mov	r1, r7
 8010c1c:	2200      	movs	r2, #0
 8010c1e:	f7ef fceb 	bl	80005f8 <__aeabi_dmul>
 8010c22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010c24:	4606      	mov	r6, r0
 8010c26:	460f      	mov	r7, r1
 8010c28:	b933      	cbnz	r3, 8010c38 <_strtod_l+0xa80>
 8010c2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010c2e:	9010      	str	r0, [sp, #64]	; 0x40
 8010c30:	9311      	str	r3, [sp, #68]	; 0x44
 8010c32:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010c36:	e7df      	b.n	8010bf8 <_strtod_l+0xa40>
 8010c38:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8010c3c:	e7f9      	b.n	8010c32 <_strtod_l+0xa7a>
 8010c3e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8010c42:	9b04      	ldr	r3, [sp, #16]
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d1ab      	bne.n	8010ba0 <_strtod_l+0x9e8>
 8010c48:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010c4c:	0d1b      	lsrs	r3, r3, #20
 8010c4e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010c50:	051b      	lsls	r3, r3, #20
 8010c52:	429a      	cmp	r2, r3
 8010c54:	465d      	mov	r5, fp
 8010c56:	d1a3      	bne.n	8010ba0 <_strtod_l+0x9e8>
 8010c58:	4639      	mov	r1, r7
 8010c5a:	4630      	mov	r0, r6
 8010c5c:	f7ef ff7c 	bl	8000b58 <__aeabi_d2iz>
 8010c60:	f7ef fc60 	bl	8000524 <__aeabi_i2d>
 8010c64:	460b      	mov	r3, r1
 8010c66:	4602      	mov	r2, r0
 8010c68:	4639      	mov	r1, r7
 8010c6a:	4630      	mov	r0, r6
 8010c6c:	f7ef fb0c 	bl	8000288 <__aeabi_dsub>
 8010c70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010c72:	4606      	mov	r6, r0
 8010c74:	460f      	mov	r7, r1
 8010c76:	b933      	cbnz	r3, 8010c86 <_strtod_l+0xace>
 8010c78:	f1ba 0f00 	cmp.w	sl, #0
 8010c7c:	d103      	bne.n	8010c86 <_strtod_l+0xace>
 8010c7e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8010c82:	2d00      	cmp	r5, #0
 8010c84:	d06d      	beq.n	8010d62 <_strtod_l+0xbaa>
 8010c86:	a30a      	add	r3, pc, #40	; (adr r3, 8010cb0 <_strtod_l+0xaf8>)
 8010c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c8c:	4630      	mov	r0, r6
 8010c8e:	4639      	mov	r1, r7
 8010c90:	f7ef ff24 	bl	8000adc <__aeabi_dcmplt>
 8010c94:	2800      	cmp	r0, #0
 8010c96:	f47f acb8 	bne.w	801060a <_strtod_l+0x452>
 8010c9a:	a307      	add	r3, pc, #28	; (adr r3, 8010cb8 <_strtod_l+0xb00>)
 8010c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ca0:	4630      	mov	r0, r6
 8010ca2:	4639      	mov	r1, r7
 8010ca4:	f7ef ff38 	bl	8000b18 <__aeabi_dcmpgt>
 8010ca8:	2800      	cmp	r0, #0
 8010caa:	f43f af79 	beq.w	8010ba0 <_strtod_l+0x9e8>
 8010cae:	e4ac      	b.n	801060a <_strtod_l+0x452>
 8010cb0:	94a03595 	.word	0x94a03595
 8010cb4:	3fdfffff 	.word	0x3fdfffff
 8010cb8:	35afe535 	.word	0x35afe535
 8010cbc:	3fe00000 	.word	0x3fe00000
 8010cc0:	000fffff 	.word	0x000fffff
 8010cc4:	7ff00000 	.word	0x7ff00000
 8010cc8:	7fefffff 	.word	0x7fefffff
 8010ccc:	39500000 	.word	0x39500000
 8010cd0:	3ff00000 	.word	0x3ff00000
 8010cd4:	7fe00000 	.word	0x7fe00000
 8010cd8:	7c9fffff 	.word	0x7c9fffff
 8010cdc:	3fe00000 	.word	0x3fe00000
 8010ce0:	bff00000 	.word	0xbff00000
 8010ce4:	9b04      	ldr	r3, [sp, #16]
 8010ce6:	b333      	cbz	r3, 8010d36 <_strtod_l+0xb7e>
 8010ce8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010cea:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010cee:	d822      	bhi.n	8010d36 <_strtod_l+0xb7e>
 8010cf0:	a327      	add	r3, pc, #156	; (adr r3, 8010d90 <_strtod_l+0xbd8>)
 8010cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cf6:	4630      	mov	r0, r6
 8010cf8:	4639      	mov	r1, r7
 8010cfa:	f7ef fef9 	bl	8000af0 <__aeabi_dcmple>
 8010cfe:	b1a0      	cbz	r0, 8010d2a <_strtod_l+0xb72>
 8010d00:	4639      	mov	r1, r7
 8010d02:	4630      	mov	r0, r6
 8010d04:	f7ef ff50 	bl	8000ba8 <__aeabi_d2uiz>
 8010d08:	2800      	cmp	r0, #0
 8010d0a:	bf08      	it	eq
 8010d0c:	2001      	moveq	r0, #1
 8010d0e:	f7ef fbf9 	bl	8000504 <__aeabi_ui2d>
 8010d12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010d14:	4606      	mov	r6, r0
 8010d16:	460f      	mov	r7, r1
 8010d18:	bb03      	cbnz	r3, 8010d5c <_strtod_l+0xba4>
 8010d1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010d1e:	9012      	str	r0, [sp, #72]	; 0x48
 8010d20:	9313      	str	r3, [sp, #76]	; 0x4c
 8010d22:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8010d26:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8010d2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010d2c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010d2e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8010d32:	1a9b      	subs	r3, r3, r2
 8010d34:	930b      	str	r3, [sp, #44]	; 0x2c
 8010d36:	ed9d 0b08 	vldr	d0, [sp, #32]
 8010d3a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8010d3e:	f001 fdf7 	bl	8012930 <__ulp>
 8010d42:	4650      	mov	r0, sl
 8010d44:	ec53 2b10 	vmov	r2, r3, d0
 8010d48:	4659      	mov	r1, fp
 8010d4a:	f7ef fc55 	bl	80005f8 <__aeabi_dmul>
 8010d4e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010d52:	f7ef fa9b 	bl	800028c <__adddf3>
 8010d56:	4682      	mov	sl, r0
 8010d58:	468b      	mov	fp, r1
 8010d5a:	e772      	b.n	8010c42 <_strtod_l+0xa8a>
 8010d5c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8010d60:	e7df      	b.n	8010d22 <_strtod_l+0xb6a>
 8010d62:	a30d      	add	r3, pc, #52	; (adr r3, 8010d98 <_strtod_l+0xbe0>)
 8010d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d68:	f7ef feb8 	bl	8000adc <__aeabi_dcmplt>
 8010d6c:	e79c      	b.n	8010ca8 <_strtod_l+0xaf0>
 8010d6e:	2300      	movs	r3, #0
 8010d70:	930d      	str	r3, [sp, #52]	; 0x34
 8010d72:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010d74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010d76:	6013      	str	r3, [r2, #0]
 8010d78:	f7ff ba61 	b.w	801023e <_strtod_l+0x86>
 8010d7c:	2b65      	cmp	r3, #101	; 0x65
 8010d7e:	f04f 0200 	mov.w	r2, #0
 8010d82:	f43f ab4e 	beq.w	8010422 <_strtod_l+0x26a>
 8010d86:	2101      	movs	r1, #1
 8010d88:	4614      	mov	r4, r2
 8010d8a:	9104      	str	r1, [sp, #16]
 8010d8c:	f7ff bacb 	b.w	8010326 <_strtod_l+0x16e>
 8010d90:	ffc00000 	.word	0xffc00000
 8010d94:	41dfffff 	.word	0x41dfffff
 8010d98:	94a03595 	.word	0x94a03595
 8010d9c:	3fcfffff 	.word	0x3fcfffff

08010da0 <_strtod_r>:
 8010da0:	4b05      	ldr	r3, [pc, #20]	; (8010db8 <_strtod_r+0x18>)
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	b410      	push	{r4}
 8010da6:	6a1b      	ldr	r3, [r3, #32]
 8010da8:	4c04      	ldr	r4, [pc, #16]	; (8010dbc <_strtod_r+0x1c>)
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	bf08      	it	eq
 8010dae:	4623      	moveq	r3, r4
 8010db0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010db4:	f7ff ba00 	b.w	80101b8 <_strtod_l>
 8010db8:	20000190 	.word	0x20000190
 8010dbc:	200001f4 	.word	0x200001f4

08010dc0 <_strtol_l.isra.0>:
 8010dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010dc4:	4680      	mov	r8, r0
 8010dc6:	4689      	mov	r9, r1
 8010dc8:	4692      	mov	sl, r2
 8010dca:	461e      	mov	r6, r3
 8010dcc:	460f      	mov	r7, r1
 8010dce:	463d      	mov	r5, r7
 8010dd0:	9808      	ldr	r0, [sp, #32]
 8010dd2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010dd6:	f001 fab7 	bl	8012348 <__locale_ctype_ptr_l>
 8010dda:	4420      	add	r0, r4
 8010ddc:	7843      	ldrb	r3, [r0, #1]
 8010dde:	f013 0308 	ands.w	r3, r3, #8
 8010de2:	d132      	bne.n	8010e4a <_strtol_l.isra.0+0x8a>
 8010de4:	2c2d      	cmp	r4, #45	; 0x2d
 8010de6:	d132      	bne.n	8010e4e <_strtol_l.isra.0+0x8e>
 8010de8:	787c      	ldrb	r4, [r7, #1]
 8010dea:	1cbd      	adds	r5, r7, #2
 8010dec:	2201      	movs	r2, #1
 8010dee:	2e00      	cmp	r6, #0
 8010df0:	d05d      	beq.n	8010eae <_strtol_l.isra.0+0xee>
 8010df2:	2e10      	cmp	r6, #16
 8010df4:	d109      	bne.n	8010e0a <_strtol_l.isra.0+0x4a>
 8010df6:	2c30      	cmp	r4, #48	; 0x30
 8010df8:	d107      	bne.n	8010e0a <_strtol_l.isra.0+0x4a>
 8010dfa:	782b      	ldrb	r3, [r5, #0]
 8010dfc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010e00:	2b58      	cmp	r3, #88	; 0x58
 8010e02:	d14f      	bne.n	8010ea4 <_strtol_l.isra.0+0xe4>
 8010e04:	786c      	ldrb	r4, [r5, #1]
 8010e06:	2610      	movs	r6, #16
 8010e08:	3502      	adds	r5, #2
 8010e0a:	2a00      	cmp	r2, #0
 8010e0c:	bf14      	ite	ne
 8010e0e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8010e12:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8010e16:	2700      	movs	r7, #0
 8010e18:	fbb1 fcf6 	udiv	ip, r1, r6
 8010e1c:	4638      	mov	r0, r7
 8010e1e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8010e22:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8010e26:	2b09      	cmp	r3, #9
 8010e28:	d817      	bhi.n	8010e5a <_strtol_l.isra.0+0x9a>
 8010e2a:	461c      	mov	r4, r3
 8010e2c:	42a6      	cmp	r6, r4
 8010e2e:	dd23      	ble.n	8010e78 <_strtol_l.isra.0+0xb8>
 8010e30:	1c7b      	adds	r3, r7, #1
 8010e32:	d007      	beq.n	8010e44 <_strtol_l.isra.0+0x84>
 8010e34:	4584      	cmp	ip, r0
 8010e36:	d31c      	bcc.n	8010e72 <_strtol_l.isra.0+0xb2>
 8010e38:	d101      	bne.n	8010e3e <_strtol_l.isra.0+0x7e>
 8010e3a:	45a6      	cmp	lr, r4
 8010e3c:	db19      	blt.n	8010e72 <_strtol_l.isra.0+0xb2>
 8010e3e:	fb00 4006 	mla	r0, r0, r6, r4
 8010e42:	2701      	movs	r7, #1
 8010e44:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010e48:	e7eb      	b.n	8010e22 <_strtol_l.isra.0+0x62>
 8010e4a:	462f      	mov	r7, r5
 8010e4c:	e7bf      	b.n	8010dce <_strtol_l.isra.0+0xe>
 8010e4e:	2c2b      	cmp	r4, #43	; 0x2b
 8010e50:	bf04      	itt	eq
 8010e52:	1cbd      	addeq	r5, r7, #2
 8010e54:	787c      	ldrbeq	r4, [r7, #1]
 8010e56:	461a      	mov	r2, r3
 8010e58:	e7c9      	b.n	8010dee <_strtol_l.isra.0+0x2e>
 8010e5a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8010e5e:	2b19      	cmp	r3, #25
 8010e60:	d801      	bhi.n	8010e66 <_strtol_l.isra.0+0xa6>
 8010e62:	3c37      	subs	r4, #55	; 0x37
 8010e64:	e7e2      	b.n	8010e2c <_strtol_l.isra.0+0x6c>
 8010e66:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8010e6a:	2b19      	cmp	r3, #25
 8010e6c:	d804      	bhi.n	8010e78 <_strtol_l.isra.0+0xb8>
 8010e6e:	3c57      	subs	r4, #87	; 0x57
 8010e70:	e7dc      	b.n	8010e2c <_strtol_l.isra.0+0x6c>
 8010e72:	f04f 37ff 	mov.w	r7, #4294967295
 8010e76:	e7e5      	b.n	8010e44 <_strtol_l.isra.0+0x84>
 8010e78:	1c7b      	adds	r3, r7, #1
 8010e7a:	d108      	bne.n	8010e8e <_strtol_l.isra.0+0xce>
 8010e7c:	2322      	movs	r3, #34	; 0x22
 8010e7e:	f8c8 3000 	str.w	r3, [r8]
 8010e82:	4608      	mov	r0, r1
 8010e84:	f1ba 0f00 	cmp.w	sl, #0
 8010e88:	d107      	bne.n	8010e9a <_strtol_l.isra.0+0xda>
 8010e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e8e:	b102      	cbz	r2, 8010e92 <_strtol_l.isra.0+0xd2>
 8010e90:	4240      	negs	r0, r0
 8010e92:	f1ba 0f00 	cmp.w	sl, #0
 8010e96:	d0f8      	beq.n	8010e8a <_strtol_l.isra.0+0xca>
 8010e98:	b10f      	cbz	r7, 8010e9e <_strtol_l.isra.0+0xde>
 8010e9a:	f105 39ff 	add.w	r9, r5, #4294967295
 8010e9e:	f8ca 9000 	str.w	r9, [sl]
 8010ea2:	e7f2      	b.n	8010e8a <_strtol_l.isra.0+0xca>
 8010ea4:	2430      	movs	r4, #48	; 0x30
 8010ea6:	2e00      	cmp	r6, #0
 8010ea8:	d1af      	bne.n	8010e0a <_strtol_l.isra.0+0x4a>
 8010eaa:	2608      	movs	r6, #8
 8010eac:	e7ad      	b.n	8010e0a <_strtol_l.isra.0+0x4a>
 8010eae:	2c30      	cmp	r4, #48	; 0x30
 8010eb0:	d0a3      	beq.n	8010dfa <_strtol_l.isra.0+0x3a>
 8010eb2:	260a      	movs	r6, #10
 8010eb4:	e7a9      	b.n	8010e0a <_strtol_l.isra.0+0x4a>
	...

08010eb8 <_strtol_r>:
 8010eb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010eba:	4c06      	ldr	r4, [pc, #24]	; (8010ed4 <_strtol_r+0x1c>)
 8010ebc:	4d06      	ldr	r5, [pc, #24]	; (8010ed8 <_strtol_r+0x20>)
 8010ebe:	6824      	ldr	r4, [r4, #0]
 8010ec0:	6a24      	ldr	r4, [r4, #32]
 8010ec2:	2c00      	cmp	r4, #0
 8010ec4:	bf08      	it	eq
 8010ec6:	462c      	moveq	r4, r5
 8010ec8:	9400      	str	r4, [sp, #0]
 8010eca:	f7ff ff79 	bl	8010dc0 <_strtol_l.isra.0>
 8010ece:	b003      	add	sp, #12
 8010ed0:	bd30      	pop	{r4, r5, pc}
 8010ed2:	bf00      	nop
 8010ed4:	20000190 	.word	0x20000190
 8010ed8:	200001f4 	.word	0x200001f4

08010edc <quorem>:
 8010edc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ee0:	6903      	ldr	r3, [r0, #16]
 8010ee2:	690c      	ldr	r4, [r1, #16]
 8010ee4:	42a3      	cmp	r3, r4
 8010ee6:	4680      	mov	r8, r0
 8010ee8:	f2c0 8082 	blt.w	8010ff0 <quorem+0x114>
 8010eec:	3c01      	subs	r4, #1
 8010eee:	f101 0714 	add.w	r7, r1, #20
 8010ef2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8010ef6:	f100 0614 	add.w	r6, r0, #20
 8010efa:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8010efe:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8010f02:	eb06 030c 	add.w	r3, r6, ip
 8010f06:	3501      	adds	r5, #1
 8010f08:	eb07 090c 	add.w	r9, r7, ip
 8010f0c:	9301      	str	r3, [sp, #4]
 8010f0e:	fbb0 f5f5 	udiv	r5, r0, r5
 8010f12:	b395      	cbz	r5, 8010f7a <quorem+0x9e>
 8010f14:	f04f 0a00 	mov.w	sl, #0
 8010f18:	4638      	mov	r0, r7
 8010f1a:	46b6      	mov	lr, r6
 8010f1c:	46d3      	mov	fp, sl
 8010f1e:	f850 2b04 	ldr.w	r2, [r0], #4
 8010f22:	b293      	uxth	r3, r2
 8010f24:	fb05 a303 	mla	r3, r5, r3, sl
 8010f28:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010f2c:	b29b      	uxth	r3, r3
 8010f2e:	ebab 0303 	sub.w	r3, fp, r3
 8010f32:	0c12      	lsrs	r2, r2, #16
 8010f34:	f8de b000 	ldr.w	fp, [lr]
 8010f38:	fb05 a202 	mla	r2, r5, r2, sl
 8010f3c:	fa13 f38b 	uxtah	r3, r3, fp
 8010f40:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8010f44:	fa1f fb82 	uxth.w	fp, r2
 8010f48:	f8de 2000 	ldr.w	r2, [lr]
 8010f4c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8010f50:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010f54:	b29b      	uxth	r3, r3
 8010f56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010f5a:	4581      	cmp	r9, r0
 8010f5c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8010f60:	f84e 3b04 	str.w	r3, [lr], #4
 8010f64:	d2db      	bcs.n	8010f1e <quorem+0x42>
 8010f66:	f856 300c 	ldr.w	r3, [r6, ip]
 8010f6a:	b933      	cbnz	r3, 8010f7a <quorem+0x9e>
 8010f6c:	9b01      	ldr	r3, [sp, #4]
 8010f6e:	3b04      	subs	r3, #4
 8010f70:	429e      	cmp	r6, r3
 8010f72:	461a      	mov	r2, r3
 8010f74:	d330      	bcc.n	8010fd8 <quorem+0xfc>
 8010f76:	f8c8 4010 	str.w	r4, [r8, #16]
 8010f7a:	4640      	mov	r0, r8
 8010f7c:	f001 fc60 	bl	8012840 <__mcmp>
 8010f80:	2800      	cmp	r0, #0
 8010f82:	db25      	blt.n	8010fd0 <quorem+0xf4>
 8010f84:	3501      	adds	r5, #1
 8010f86:	4630      	mov	r0, r6
 8010f88:	f04f 0c00 	mov.w	ip, #0
 8010f8c:	f857 2b04 	ldr.w	r2, [r7], #4
 8010f90:	f8d0 e000 	ldr.w	lr, [r0]
 8010f94:	b293      	uxth	r3, r2
 8010f96:	ebac 0303 	sub.w	r3, ip, r3
 8010f9a:	0c12      	lsrs	r2, r2, #16
 8010f9c:	fa13 f38e 	uxtah	r3, r3, lr
 8010fa0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010fa4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010fa8:	b29b      	uxth	r3, r3
 8010faa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010fae:	45b9      	cmp	r9, r7
 8010fb0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010fb4:	f840 3b04 	str.w	r3, [r0], #4
 8010fb8:	d2e8      	bcs.n	8010f8c <quorem+0xb0>
 8010fba:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8010fbe:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8010fc2:	b92a      	cbnz	r2, 8010fd0 <quorem+0xf4>
 8010fc4:	3b04      	subs	r3, #4
 8010fc6:	429e      	cmp	r6, r3
 8010fc8:	461a      	mov	r2, r3
 8010fca:	d30b      	bcc.n	8010fe4 <quorem+0x108>
 8010fcc:	f8c8 4010 	str.w	r4, [r8, #16]
 8010fd0:	4628      	mov	r0, r5
 8010fd2:	b003      	add	sp, #12
 8010fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fd8:	6812      	ldr	r2, [r2, #0]
 8010fda:	3b04      	subs	r3, #4
 8010fdc:	2a00      	cmp	r2, #0
 8010fde:	d1ca      	bne.n	8010f76 <quorem+0x9a>
 8010fe0:	3c01      	subs	r4, #1
 8010fe2:	e7c5      	b.n	8010f70 <quorem+0x94>
 8010fe4:	6812      	ldr	r2, [r2, #0]
 8010fe6:	3b04      	subs	r3, #4
 8010fe8:	2a00      	cmp	r2, #0
 8010fea:	d1ef      	bne.n	8010fcc <quorem+0xf0>
 8010fec:	3c01      	subs	r4, #1
 8010fee:	e7ea      	b.n	8010fc6 <quorem+0xea>
 8010ff0:	2000      	movs	r0, #0
 8010ff2:	e7ee      	b.n	8010fd2 <quorem+0xf6>
 8010ff4:	0000      	movs	r0, r0
	...

08010ff8 <_dtoa_r>:
 8010ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ffc:	ec57 6b10 	vmov	r6, r7, d0
 8011000:	b097      	sub	sp, #92	; 0x5c
 8011002:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011004:	9106      	str	r1, [sp, #24]
 8011006:	4604      	mov	r4, r0
 8011008:	920b      	str	r2, [sp, #44]	; 0x2c
 801100a:	9312      	str	r3, [sp, #72]	; 0x48
 801100c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011010:	e9cd 6700 	strd	r6, r7, [sp]
 8011014:	b93d      	cbnz	r5, 8011026 <_dtoa_r+0x2e>
 8011016:	2010      	movs	r0, #16
 8011018:	f7fe f958 	bl	800f2cc <malloc>
 801101c:	6260      	str	r0, [r4, #36]	; 0x24
 801101e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011022:	6005      	str	r5, [r0, #0]
 8011024:	60c5      	str	r5, [r0, #12]
 8011026:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011028:	6819      	ldr	r1, [r3, #0]
 801102a:	b151      	cbz	r1, 8011042 <_dtoa_r+0x4a>
 801102c:	685a      	ldr	r2, [r3, #4]
 801102e:	604a      	str	r2, [r1, #4]
 8011030:	2301      	movs	r3, #1
 8011032:	4093      	lsls	r3, r2
 8011034:	608b      	str	r3, [r1, #8]
 8011036:	4620      	mov	r0, r4
 8011038:	f001 f9e2 	bl	8012400 <_Bfree>
 801103c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801103e:	2200      	movs	r2, #0
 8011040:	601a      	str	r2, [r3, #0]
 8011042:	1e3b      	subs	r3, r7, #0
 8011044:	bfbb      	ittet	lt
 8011046:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801104a:	9301      	strlt	r3, [sp, #4]
 801104c:	2300      	movge	r3, #0
 801104e:	2201      	movlt	r2, #1
 8011050:	bfac      	ite	ge
 8011052:	f8c8 3000 	strge.w	r3, [r8]
 8011056:	f8c8 2000 	strlt.w	r2, [r8]
 801105a:	4baf      	ldr	r3, [pc, #700]	; (8011318 <_dtoa_r+0x320>)
 801105c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011060:	ea33 0308 	bics.w	r3, r3, r8
 8011064:	d114      	bne.n	8011090 <_dtoa_r+0x98>
 8011066:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011068:	f242 730f 	movw	r3, #9999	; 0x270f
 801106c:	6013      	str	r3, [r2, #0]
 801106e:	9b00      	ldr	r3, [sp, #0]
 8011070:	b923      	cbnz	r3, 801107c <_dtoa_r+0x84>
 8011072:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8011076:	2800      	cmp	r0, #0
 8011078:	f000 8542 	beq.w	8011b00 <_dtoa_r+0xb08>
 801107c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801107e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801132c <_dtoa_r+0x334>
 8011082:	2b00      	cmp	r3, #0
 8011084:	f000 8544 	beq.w	8011b10 <_dtoa_r+0xb18>
 8011088:	f10b 0303 	add.w	r3, fp, #3
 801108c:	f000 bd3e 	b.w	8011b0c <_dtoa_r+0xb14>
 8011090:	e9dd 6700 	ldrd	r6, r7, [sp]
 8011094:	2200      	movs	r2, #0
 8011096:	2300      	movs	r3, #0
 8011098:	4630      	mov	r0, r6
 801109a:	4639      	mov	r1, r7
 801109c:	f7ef fd14 	bl	8000ac8 <__aeabi_dcmpeq>
 80110a0:	4681      	mov	r9, r0
 80110a2:	b168      	cbz	r0, 80110c0 <_dtoa_r+0xc8>
 80110a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80110a6:	2301      	movs	r3, #1
 80110a8:	6013      	str	r3, [r2, #0]
 80110aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	f000 8524 	beq.w	8011afa <_dtoa_r+0xb02>
 80110b2:	4b9a      	ldr	r3, [pc, #616]	; (801131c <_dtoa_r+0x324>)
 80110b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80110b6:	f103 3bff 	add.w	fp, r3, #4294967295
 80110ba:	6013      	str	r3, [r2, #0]
 80110bc:	f000 bd28 	b.w	8011b10 <_dtoa_r+0xb18>
 80110c0:	aa14      	add	r2, sp, #80	; 0x50
 80110c2:	a915      	add	r1, sp, #84	; 0x54
 80110c4:	ec47 6b10 	vmov	d0, r6, r7
 80110c8:	4620      	mov	r0, r4
 80110ca:	f001 fca7 	bl	8012a1c <__d2b>
 80110ce:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80110d2:	9004      	str	r0, [sp, #16]
 80110d4:	2d00      	cmp	r5, #0
 80110d6:	d07c      	beq.n	80111d2 <_dtoa_r+0x1da>
 80110d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80110dc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80110e0:	46b2      	mov	sl, r6
 80110e2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80110e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80110ea:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80110ee:	2200      	movs	r2, #0
 80110f0:	4b8b      	ldr	r3, [pc, #556]	; (8011320 <_dtoa_r+0x328>)
 80110f2:	4650      	mov	r0, sl
 80110f4:	4659      	mov	r1, fp
 80110f6:	f7ef f8c7 	bl	8000288 <__aeabi_dsub>
 80110fa:	a381      	add	r3, pc, #516	; (adr r3, 8011300 <_dtoa_r+0x308>)
 80110fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011100:	f7ef fa7a 	bl	80005f8 <__aeabi_dmul>
 8011104:	a380      	add	r3, pc, #512	; (adr r3, 8011308 <_dtoa_r+0x310>)
 8011106:	e9d3 2300 	ldrd	r2, r3, [r3]
 801110a:	f7ef f8bf 	bl	800028c <__adddf3>
 801110e:	4606      	mov	r6, r0
 8011110:	4628      	mov	r0, r5
 8011112:	460f      	mov	r7, r1
 8011114:	f7ef fa06 	bl	8000524 <__aeabi_i2d>
 8011118:	a37d      	add	r3, pc, #500	; (adr r3, 8011310 <_dtoa_r+0x318>)
 801111a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801111e:	f7ef fa6b 	bl	80005f8 <__aeabi_dmul>
 8011122:	4602      	mov	r2, r0
 8011124:	460b      	mov	r3, r1
 8011126:	4630      	mov	r0, r6
 8011128:	4639      	mov	r1, r7
 801112a:	f7ef f8af 	bl	800028c <__adddf3>
 801112e:	4606      	mov	r6, r0
 8011130:	460f      	mov	r7, r1
 8011132:	f7ef fd11 	bl	8000b58 <__aeabi_d2iz>
 8011136:	2200      	movs	r2, #0
 8011138:	4682      	mov	sl, r0
 801113a:	2300      	movs	r3, #0
 801113c:	4630      	mov	r0, r6
 801113e:	4639      	mov	r1, r7
 8011140:	f7ef fccc 	bl	8000adc <__aeabi_dcmplt>
 8011144:	b148      	cbz	r0, 801115a <_dtoa_r+0x162>
 8011146:	4650      	mov	r0, sl
 8011148:	f7ef f9ec 	bl	8000524 <__aeabi_i2d>
 801114c:	4632      	mov	r2, r6
 801114e:	463b      	mov	r3, r7
 8011150:	f7ef fcba 	bl	8000ac8 <__aeabi_dcmpeq>
 8011154:	b908      	cbnz	r0, 801115a <_dtoa_r+0x162>
 8011156:	f10a 3aff 	add.w	sl, sl, #4294967295
 801115a:	f1ba 0f16 	cmp.w	sl, #22
 801115e:	d859      	bhi.n	8011214 <_dtoa_r+0x21c>
 8011160:	4970      	ldr	r1, [pc, #448]	; (8011324 <_dtoa_r+0x32c>)
 8011162:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8011166:	e9dd 2300 	ldrd	r2, r3, [sp]
 801116a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801116e:	f7ef fcd3 	bl	8000b18 <__aeabi_dcmpgt>
 8011172:	2800      	cmp	r0, #0
 8011174:	d050      	beq.n	8011218 <_dtoa_r+0x220>
 8011176:	f10a 3aff 	add.w	sl, sl, #4294967295
 801117a:	2300      	movs	r3, #0
 801117c:	930f      	str	r3, [sp, #60]	; 0x3c
 801117e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011180:	1b5d      	subs	r5, r3, r5
 8011182:	f1b5 0801 	subs.w	r8, r5, #1
 8011186:	bf49      	itett	mi
 8011188:	f1c5 0301 	rsbmi	r3, r5, #1
 801118c:	2300      	movpl	r3, #0
 801118e:	9305      	strmi	r3, [sp, #20]
 8011190:	f04f 0800 	movmi.w	r8, #0
 8011194:	bf58      	it	pl
 8011196:	9305      	strpl	r3, [sp, #20]
 8011198:	f1ba 0f00 	cmp.w	sl, #0
 801119c:	db3e      	blt.n	801121c <_dtoa_r+0x224>
 801119e:	2300      	movs	r3, #0
 80111a0:	44d0      	add	r8, sl
 80111a2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80111a6:	9307      	str	r3, [sp, #28]
 80111a8:	9b06      	ldr	r3, [sp, #24]
 80111aa:	2b09      	cmp	r3, #9
 80111ac:	f200 8090 	bhi.w	80112d0 <_dtoa_r+0x2d8>
 80111b0:	2b05      	cmp	r3, #5
 80111b2:	bfc4      	itt	gt
 80111b4:	3b04      	subgt	r3, #4
 80111b6:	9306      	strgt	r3, [sp, #24]
 80111b8:	9b06      	ldr	r3, [sp, #24]
 80111ba:	f1a3 0302 	sub.w	r3, r3, #2
 80111be:	bfcc      	ite	gt
 80111c0:	2500      	movgt	r5, #0
 80111c2:	2501      	movle	r5, #1
 80111c4:	2b03      	cmp	r3, #3
 80111c6:	f200 808f 	bhi.w	80112e8 <_dtoa_r+0x2f0>
 80111ca:	e8df f003 	tbb	[pc, r3]
 80111ce:	7f7d      	.short	0x7f7d
 80111d0:	7131      	.short	0x7131
 80111d2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80111d6:	441d      	add	r5, r3
 80111d8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80111dc:	2820      	cmp	r0, #32
 80111de:	dd13      	ble.n	8011208 <_dtoa_r+0x210>
 80111e0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80111e4:	9b00      	ldr	r3, [sp, #0]
 80111e6:	fa08 f800 	lsl.w	r8, r8, r0
 80111ea:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80111ee:	fa23 f000 	lsr.w	r0, r3, r0
 80111f2:	ea48 0000 	orr.w	r0, r8, r0
 80111f6:	f7ef f985 	bl	8000504 <__aeabi_ui2d>
 80111fa:	2301      	movs	r3, #1
 80111fc:	4682      	mov	sl, r0
 80111fe:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8011202:	3d01      	subs	r5, #1
 8011204:	9313      	str	r3, [sp, #76]	; 0x4c
 8011206:	e772      	b.n	80110ee <_dtoa_r+0xf6>
 8011208:	9b00      	ldr	r3, [sp, #0]
 801120a:	f1c0 0020 	rsb	r0, r0, #32
 801120e:	fa03 f000 	lsl.w	r0, r3, r0
 8011212:	e7f0      	b.n	80111f6 <_dtoa_r+0x1fe>
 8011214:	2301      	movs	r3, #1
 8011216:	e7b1      	b.n	801117c <_dtoa_r+0x184>
 8011218:	900f      	str	r0, [sp, #60]	; 0x3c
 801121a:	e7b0      	b.n	801117e <_dtoa_r+0x186>
 801121c:	9b05      	ldr	r3, [sp, #20]
 801121e:	eba3 030a 	sub.w	r3, r3, sl
 8011222:	9305      	str	r3, [sp, #20]
 8011224:	f1ca 0300 	rsb	r3, sl, #0
 8011228:	9307      	str	r3, [sp, #28]
 801122a:	2300      	movs	r3, #0
 801122c:	930e      	str	r3, [sp, #56]	; 0x38
 801122e:	e7bb      	b.n	80111a8 <_dtoa_r+0x1b0>
 8011230:	2301      	movs	r3, #1
 8011232:	930a      	str	r3, [sp, #40]	; 0x28
 8011234:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011236:	2b00      	cmp	r3, #0
 8011238:	dd59      	ble.n	80112ee <_dtoa_r+0x2f6>
 801123a:	9302      	str	r3, [sp, #8]
 801123c:	4699      	mov	r9, r3
 801123e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011240:	2200      	movs	r2, #0
 8011242:	6072      	str	r2, [r6, #4]
 8011244:	2204      	movs	r2, #4
 8011246:	f102 0014 	add.w	r0, r2, #20
 801124a:	4298      	cmp	r0, r3
 801124c:	6871      	ldr	r1, [r6, #4]
 801124e:	d953      	bls.n	80112f8 <_dtoa_r+0x300>
 8011250:	4620      	mov	r0, r4
 8011252:	f001 f8a1 	bl	8012398 <_Balloc>
 8011256:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011258:	6030      	str	r0, [r6, #0]
 801125a:	f1b9 0f0e 	cmp.w	r9, #14
 801125e:	f8d3 b000 	ldr.w	fp, [r3]
 8011262:	f200 80e6 	bhi.w	8011432 <_dtoa_r+0x43a>
 8011266:	2d00      	cmp	r5, #0
 8011268:	f000 80e3 	beq.w	8011432 <_dtoa_r+0x43a>
 801126c:	ed9d 7b00 	vldr	d7, [sp]
 8011270:	f1ba 0f00 	cmp.w	sl, #0
 8011274:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8011278:	dd74      	ble.n	8011364 <_dtoa_r+0x36c>
 801127a:	4a2a      	ldr	r2, [pc, #168]	; (8011324 <_dtoa_r+0x32c>)
 801127c:	f00a 030f 	and.w	r3, sl, #15
 8011280:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011284:	ed93 7b00 	vldr	d7, [r3]
 8011288:	ea4f 162a 	mov.w	r6, sl, asr #4
 801128c:	06f0      	lsls	r0, r6, #27
 801128e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8011292:	d565      	bpl.n	8011360 <_dtoa_r+0x368>
 8011294:	4b24      	ldr	r3, [pc, #144]	; (8011328 <_dtoa_r+0x330>)
 8011296:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801129a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801129e:	f7ef fad5 	bl	800084c <__aeabi_ddiv>
 80112a2:	e9cd 0100 	strd	r0, r1, [sp]
 80112a6:	f006 060f 	and.w	r6, r6, #15
 80112aa:	2503      	movs	r5, #3
 80112ac:	4f1e      	ldr	r7, [pc, #120]	; (8011328 <_dtoa_r+0x330>)
 80112ae:	e04c      	b.n	801134a <_dtoa_r+0x352>
 80112b0:	2301      	movs	r3, #1
 80112b2:	930a      	str	r3, [sp, #40]	; 0x28
 80112b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80112b6:	4453      	add	r3, sl
 80112b8:	f103 0901 	add.w	r9, r3, #1
 80112bc:	9302      	str	r3, [sp, #8]
 80112be:	464b      	mov	r3, r9
 80112c0:	2b01      	cmp	r3, #1
 80112c2:	bfb8      	it	lt
 80112c4:	2301      	movlt	r3, #1
 80112c6:	e7ba      	b.n	801123e <_dtoa_r+0x246>
 80112c8:	2300      	movs	r3, #0
 80112ca:	e7b2      	b.n	8011232 <_dtoa_r+0x23a>
 80112cc:	2300      	movs	r3, #0
 80112ce:	e7f0      	b.n	80112b2 <_dtoa_r+0x2ba>
 80112d0:	2501      	movs	r5, #1
 80112d2:	2300      	movs	r3, #0
 80112d4:	9306      	str	r3, [sp, #24]
 80112d6:	950a      	str	r5, [sp, #40]	; 0x28
 80112d8:	f04f 33ff 	mov.w	r3, #4294967295
 80112dc:	9302      	str	r3, [sp, #8]
 80112de:	4699      	mov	r9, r3
 80112e0:	2200      	movs	r2, #0
 80112e2:	2312      	movs	r3, #18
 80112e4:	920b      	str	r2, [sp, #44]	; 0x2c
 80112e6:	e7aa      	b.n	801123e <_dtoa_r+0x246>
 80112e8:	2301      	movs	r3, #1
 80112ea:	930a      	str	r3, [sp, #40]	; 0x28
 80112ec:	e7f4      	b.n	80112d8 <_dtoa_r+0x2e0>
 80112ee:	2301      	movs	r3, #1
 80112f0:	9302      	str	r3, [sp, #8]
 80112f2:	4699      	mov	r9, r3
 80112f4:	461a      	mov	r2, r3
 80112f6:	e7f5      	b.n	80112e4 <_dtoa_r+0x2ec>
 80112f8:	3101      	adds	r1, #1
 80112fa:	6071      	str	r1, [r6, #4]
 80112fc:	0052      	lsls	r2, r2, #1
 80112fe:	e7a2      	b.n	8011246 <_dtoa_r+0x24e>
 8011300:	636f4361 	.word	0x636f4361
 8011304:	3fd287a7 	.word	0x3fd287a7
 8011308:	8b60c8b3 	.word	0x8b60c8b3
 801130c:	3fc68a28 	.word	0x3fc68a28
 8011310:	509f79fb 	.word	0x509f79fb
 8011314:	3fd34413 	.word	0x3fd34413
 8011318:	7ff00000 	.word	0x7ff00000
 801131c:	080138e5 	.word	0x080138e5
 8011320:	3ff80000 	.word	0x3ff80000
 8011324:	08013a08 	.word	0x08013a08
 8011328:	080139e0 	.word	0x080139e0
 801132c:	08013969 	.word	0x08013969
 8011330:	07f1      	lsls	r1, r6, #31
 8011332:	d508      	bpl.n	8011346 <_dtoa_r+0x34e>
 8011334:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011338:	e9d7 2300 	ldrd	r2, r3, [r7]
 801133c:	f7ef f95c 	bl	80005f8 <__aeabi_dmul>
 8011340:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011344:	3501      	adds	r5, #1
 8011346:	1076      	asrs	r6, r6, #1
 8011348:	3708      	adds	r7, #8
 801134a:	2e00      	cmp	r6, #0
 801134c:	d1f0      	bne.n	8011330 <_dtoa_r+0x338>
 801134e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011352:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011356:	f7ef fa79 	bl	800084c <__aeabi_ddiv>
 801135a:	e9cd 0100 	strd	r0, r1, [sp]
 801135e:	e01a      	b.n	8011396 <_dtoa_r+0x39e>
 8011360:	2502      	movs	r5, #2
 8011362:	e7a3      	b.n	80112ac <_dtoa_r+0x2b4>
 8011364:	f000 80a0 	beq.w	80114a8 <_dtoa_r+0x4b0>
 8011368:	f1ca 0600 	rsb	r6, sl, #0
 801136c:	4b9f      	ldr	r3, [pc, #636]	; (80115ec <_dtoa_r+0x5f4>)
 801136e:	4fa0      	ldr	r7, [pc, #640]	; (80115f0 <_dtoa_r+0x5f8>)
 8011370:	f006 020f 	and.w	r2, r6, #15
 8011374:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011378:	e9d3 2300 	ldrd	r2, r3, [r3]
 801137c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8011380:	f7ef f93a 	bl	80005f8 <__aeabi_dmul>
 8011384:	e9cd 0100 	strd	r0, r1, [sp]
 8011388:	1136      	asrs	r6, r6, #4
 801138a:	2300      	movs	r3, #0
 801138c:	2502      	movs	r5, #2
 801138e:	2e00      	cmp	r6, #0
 8011390:	d17f      	bne.n	8011492 <_dtoa_r+0x49a>
 8011392:	2b00      	cmp	r3, #0
 8011394:	d1e1      	bne.n	801135a <_dtoa_r+0x362>
 8011396:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011398:	2b00      	cmp	r3, #0
 801139a:	f000 8087 	beq.w	80114ac <_dtoa_r+0x4b4>
 801139e:	e9dd 6700 	ldrd	r6, r7, [sp]
 80113a2:	2200      	movs	r2, #0
 80113a4:	4b93      	ldr	r3, [pc, #588]	; (80115f4 <_dtoa_r+0x5fc>)
 80113a6:	4630      	mov	r0, r6
 80113a8:	4639      	mov	r1, r7
 80113aa:	f7ef fb97 	bl	8000adc <__aeabi_dcmplt>
 80113ae:	2800      	cmp	r0, #0
 80113b0:	d07c      	beq.n	80114ac <_dtoa_r+0x4b4>
 80113b2:	f1b9 0f00 	cmp.w	r9, #0
 80113b6:	d079      	beq.n	80114ac <_dtoa_r+0x4b4>
 80113b8:	9b02      	ldr	r3, [sp, #8]
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	dd35      	ble.n	801142a <_dtoa_r+0x432>
 80113be:	f10a 33ff 	add.w	r3, sl, #4294967295
 80113c2:	9308      	str	r3, [sp, #32]
 80113c4:	4639      	mov	r1, r7
 80113c6:	2200      	movs	r2, #0
 80113c8:	4b8b      	ldr	r3, [pc, #556]	; (80115f8 <_dtoa_r+0x600>)
 80113ca:	4630      	mov	r0, r6
 80113cc:	f7ef f914 	bl	80005f8 <__aeabi_dmul>
 80113d0:	e9cd 0100 	strd	r0, r1, [sp]
 80113d4:	9f02      	ldr	r7, [sp, #8]
 80113d6:	3501      	adds	r5, #1
 80113d8:	4628      	mov	r0, r5
 80113da:	f7ef f8a3 	bl	8000524 <__aeabi_i2d>
 80113de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80113e2:	f7ef f909 	bl	80005f8 <__aeabi_dmul>
 80113e6:	2200      	movs	r2, #0
 80113e8:	4b84      	ldr	r3, [pc, #528]	; (80115fc <_dtoa_r+0x604>)
 80113ea:	f7ee ff4f 	bl	800028c <__adddf3>
 80113ee:	4605      	mov	r5, r0
 80113f0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80113f4:	2f00      	cmp	r7, #0
 80113f6:	d15d      	bne.n	80114b4 <_dtoa_r+0x4bc>
 80113f8:	2200      	movs	r2, #0
 80113fa:	4b81      	ldr	r3, [pc, #516]	; (8011600 <_dtoa_r+0x608>)
 80113fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011400:	f7ee ff42 	bl	8000288 <__aeabi_dsub>
 8011404:	462a      	mov	r2, r5
 8011406:	4633      	mov	r3, r6
 8011408:	e9cd 0100 	strd	r0, r1, [sp]
 801140c:	f7ef fb84 	bl	8000b18 <__aeabi_dcmpgt>
 8011410:	2800      	cmp	r0, #0
 8011412:	f040 8288 	bne.w	8011926 <_dtoa_r+0x92e>
 8011416:	462a      	mov	r2, r5
 8011418:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801141c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011420:	f7ef fb5c 	bl	8000adc <__aeabi_dcmplt>
 8011424:	2800      	cmp	r0, #0
 8011426:	f040 827c 	bne.w	8011922 <_dtoa_r+0x92a>
 801142a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801142e:	e9cd 2300 	strd	r2, r3, [sp]
 8011432:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011434:	2b00      	cmp	r3, #0
 8011436:	f2c0 8150 	blt.w	80116da <_dtoa_r+0x6e2>
 801143a:	f1ba 0f0e 	cmp.w	sl, #14
 801143e:	f300 814c 	bgt.w	80116da <_dtoa_r+0x6e2>
 8011442:	4b6a      	ldr	r3, [pc, #424]	; (80115ec <_dtoa_r+0x5f4>)
 8011444:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8011448:	ed93 7b00 	vldr	d7, [r3]
 801144c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801144e:	2b00      	cmp	r3, #0
 8011450:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011454:	f280 80d8 	bge.w	8011608 <_dtoa_r+0x610>
 8011458:	f1b9 0f00 	cmp.w	r9, #0
 801145c:	f300 80d4 	bgt.w	8011608 <_dtoa_r+0x610>
 8011460:	f040 825e 	bne.w	8011920 <_dtoa_r+0x928>
 8011464:	2200      	movs	r2, #0
 8011466:	4b66      	ldr	r3, [pc, #408]	; (8011600 <_dtoa_r+0x608>)
 8011468:	ec51 0b17 	vmov	r0, r1, d7
 801146c:	f7ef f8c4 	bl	80005f8 <__aeabi_dmul>
 8011470:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011474:	f7ef fb46 	bl	8000b04 <__aeabi_dcmpge>
 8011478:	464f      	mov	r7, r9
 801147a:	464e      	mov	r6, r9
 801147c:	2800      	cmp	r0, #0
 801147e:	f040 8234 	bne.w	80118ea <_dtoa_r+0x8f2>
 8011482:	2331      	movs	r3, #49	; 0x31
 8011484:	f10b 0501 	add.w	r5, fp, #1
 8011488:	f88b 3000 	strb.w	r3, [fp]
 801148c:	f10a 0a01 	add.w	sl, sl, #1
 8011490:	e22f      	b.n	80118f2 <_dtoa_r+0x8fa>
 8011492:	07f2      	lsls	r2, r6, #31
 8011494:	d505      	bpl.n	80114a2 <_dtoa_r+0x4aa>
 8011496:	e9d7 2300 	ldrd	r2, r3, [r7]
 801149a:	f7ef f8ad 	bl	80005f8 <__aeabi_dmul>
 801149e:	3501      	adds	r5, #1
 80114a0:	2301      	movs	r3, #1
 80114a2:	1076      	asrs	r6, r6, #1
 80114a4:	3708      	adds	r7, #8
 80114a6:	e772      	b.n	801138e <_dtoa_r+0x396>
 80114a8:	2502      	movs	r5, #2
 80114aa:	e774      	b.n	8011396 <_dtoa_r+0x39e>
 80114ac:	f8cd a020 	str.w	sl, [sp, #32]
 80114b0:	464f      	mov	r7, r9
 80114b2:	e791      	b.n	80113d8 <_dtoa_r+0x3e0>
 80114b4:	4b4d      	ldr	r3, [pc, #308]	; (80115ec <_dtoa_r+0x5f4>)
 80114b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80114ba:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80114be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d047      	beq.n	8011554 <_dtoa_r+0x55c>
 80114c4:	4602      	mov	r2, r0
 80114c6:	460b      	mov	r3, r1
 80114c8:	2000      	movs	r0, #0
 80114ca:	494e      	ldr	r1, [pc, #312]	; (8011604 <_dtoa_r+0x60c>)
 80114cc:	f7ef f9be 	bl	800084c <__aeabi_ddiv>
 80114d0:	462a      	mov	r2, r5
 80114d2:	4633      	mov	r3, r6
 80114d4:	f7ee fed8 	bl	8000288 <__aeabi_dsub>
 80114d8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80114dc:	465d      	mov	r5, fp
 80114de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80114e2:	f7ef fb39 	bl	8000b58 <__aeabi_d2iz>
 80114e6:	4606      	mov	r6, r0
 80114e8:	f7ef f81c 	bl	8000524 <__aeabi_i2d>
 80114ec:	4602      	mov	r2, r0
 80114ee:	460b      	mov	r3, r1
 80114f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80114f4:	f7ee fec8 	bl	8000288 <__aeabi_dsub>
 80114f8:	3630      	adds	r6, #48	; 0x30
 80114fa:	f805 6b01 	strb.w	r6, [r5], #1
 80114fe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8011502:	e9cd 0100 	strd	r0, r1, [sp]
 8011506:	f7ef fae9 	bl	8000adc <__aeabi_dcmplt>
 801150a:	2800      	cmp	r0, #0
 801150c:	d163      	bne.n	80115d6 <_dtoa_r+0x5de>
 801150e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011512:	2000      	movs	r0, #0
 8011514:	4937      	ldr	r1, [pc, #220]	; (80115f4 <_dtoa_r+0x5fc>)
 8011516:	f7ee feb7 	bl	8000288 <__aeabi_dsub>
 801151a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801151e:	f7ef fadd 	bl	8000adc <__aeabi_dcmplt>
 8011522:	2800      	cmp	r0, #0
 8011524:	f040 80b7 	bne.w	8011696 <_dtoa_r+0x69e>
 8011528:	eba5 030b 	sub.w	r3, r5, fp
 801152c:	429f      	cmp	r7, r3
 801152e:	f77f af7c 	ble.w	801142a <_dtoa_r+0x432>
 8011532:	2200      	movs	r2, #0
 8011534:	4b30      	ldr	r3, [pc, #192]	; (80115f8 <_dtoa_r+0x600>)
 8011536:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801153a:	f7ef f85d 	bl	80005f8 <__aeabi_dmul>
 801153e:	2200      	movs	r2, #0
 8011540:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8011544:	4b2c      	ldr	r3, [pc, #176]	; (80115f8 <_dtoa_r+0x600>)
 8011546:	e9dd 0100 	ldrd	r0, r1, [sp]
 801154a:	f7ef f855 	bl	80005f8 <__aeabi_dmul>
 801154e:	e9cd 0100 	strd	r0, r1, [sp]
 8011552:	e7c4      	b.n	80114de <_dtoa_r+0x4e6>
 8011554:	462a      	mov	r2, r5
 8011556:	4633      	mov	r3, r6
 8011558:	f7ef f84e 	bl	80005f8 <__aeabi_dmul>
 801155c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8011560:	eb0b 0507 	add.w	r5, fp, r7
 8011564:	465e      	mov	r6, fp
 8011566:	e9dd 0100 	ldrd	r0, r1, [sp]
 801156a:	f7ef faf5 	bl	8000b58 <__aeabi_d2iz>
 801156e:	4607      	mov	r7, r0
 8011570:	f7ee ffd8 	bl	8000524 <__aeabi_i2d>
 8011574:	3730      	adds	r7, #48	; 0x30
 8011576:	4602      	mov	r2, r0
 8011578:	460b      	mov	r3, r1
 801157a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801157e:	f7ee fe83 	bl	8000288 <__aeabi_dsub>
 8011582:	f806 7b01 	strb.w	r7, [r6], #1
 8011586:	42ae      	cmp	r6, r5
 8011588:	e9cd 0100 	strd	r0, r1, [sp]
 801158c:	f04f 0200 	mov.w	r2, #0
 8011590:	d126      	bne.n	80115e0 <_dtoa_r+0x5e8>
 8011592:	4b1c      	ldr	r3, [pc, #112]	; (8011604 <_dtoa_r+0x60c>)
 8011594:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011598:	f7ee fe78 	bl	800028c <__adddf3>
 801159c:	4602      	mov	r2, r0
 801159e:	460b      	mov	r3, r1
 80115a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80115a4:	f7ef fab8 	bl	8000b18 <__aeabi_dcmpgt>
 80115a8:	2800      	cmp	r0, #0
 80115aa:	d174      	bne.n	8011696 <_dtoa_r+0x69e>
 80115ac:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80115b0:	2000      	movs	r0, #0
 80115b2:	4914      	ldr	r1, [pc, #80]	; (8011604 <_dtoa_r+0x60c>)
 80115b4:	f7ee fe68 	bl	8000288 <__aeabi_dsub>
 80115b8:	4602      	mov	r2, r0
 80115ba:	460b      	mov	r3, r1
 80115bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80115c0:	f7ef fa8c 	bl	8000adc <__aeabi_dcmplt>
 80115c4:	2800      	cmp	r0, #0
 80115c6:	f43f af30 	beq.w	801142a <_dtoa_r+0x432>
 80115ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80115ce:	2b30      	cmp	r3, #48	; 0x30
 80115d0:	f105 32ff 	add.w	r2, r5, #4294967295
 80115d4:	d002      	beq.n	80115dc <_dtoa_r+0x5e4>
 80115d6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80115da:	e04a      	b.n	8011672 <_dtoa_r+0x67a>
 80115dc:	4615      	mov	r5, r2
 80115de:	e7f4      	b.n	80115ca <_dtoa_r+0x5d2>
 80115e0:	4b05      	ldr	r3, [pc, #20]	; (80115f8 <_dtoa_r+0x600>)
 80115e2:	f7ef f809 	bl	80005f8 <__aeabi_dmul>
 80115e6:	e9cd 0100 	strd	r0, r1, [sp]
 80115ea:	e7bc      	b.n	8011566 <_dtoa_r+0x56e>
 80115ec:	08013a08 	.word	0x08013a08
 80115f0:	080139e0 	.word	0x080139e0
 80115f4:	3ff00000 	.word	0x3ff00000
 80115f8:	40240000 	.word	0x40240000
 80115fc:	401c0000 	.word	0x401c0000
 8011600:	40140000 	.word	0x40140000
 8011604:	3fe00000 	.word	0x3fe00000
 8011608:	e9dd 6700 	ldrd	r6, r7, [sp]
 801160c:	465d      	mov	r5, fp
 801160e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011612:	4630      	mov	r0, r6
 8011614:	4639      	mov	r1, r7
 8011616:	f7ef f919 	bl	800084c <__aeabi_ddiv>
 801161a:	f7ef fa9d 	bl	8000b58 <__aeabi_d2iz>
 801161e:	4680      	mov	r8, r0
 8011620:	f7ee ff80 	bl	8000524 <__aeabi_i2d>
 8011624:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011628:	f7ee ffe6 	bl	80005f8 <__aeabi_dmul>
 801162c:	4602      	mov	r2, r0
 801162e:	460b      	mov	r3, r1
 8011630:	4630      	mov	r0, r6
 8011632:	4639      	mov	r1, r7
 8011634:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8011638:	f7ee fe26 	bl	8000288 <__aeabi_dsub>
 801163c:	f805 6b01 	strb.w	r6, [r5], #1
 8011640:	eba5 060b 	sub.w	r6, r5, fp
 8011644:	45b1      	cmp	r9, r6
 8011646:	4602      	mov	r2, r0
 8011648:	460b      	mov	r3, r1
 801164a:	d139      	bne.n	80116c0 <_dtoa_r+0x6c8>
 801164c:	f7ee fe1e 	bl	800028c <__adddf3>
 8011650:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011654:	4606      	mov	r6, r0
 8011656:	460f      	mov	r7, r1
 8011658:	f7ef fa5e 	bl	8000b18 <__aeabi_dcmpgt>
 801165c:	b9c8      	cbnz	r0, 8011692 <_dtoa_r+0x69a>
 801165e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011662:	4630      	mov	r0, r6
 8011664:	4639      	mov	r1, r7
 8011666:	f7ef fa2f 	bl	8000ac8 <__aeabi_dcmpeq>
 801166a:	b110      	cbz	r0, 8011672 <_dtoa_r+0x67a>
 801166c:	f018 0f01 	tst.w	r8, #1
 8011670:	d10f      	bne.n	8011692 <_dtoa_r+0x69a>
 8011672:	9904      	ldr	r1, [sp, #16]
 8011674:	4620      	mov	r0, r4
 8011676:	f000 fec3 	bl	8012400 <_Bfree>
 801167a:	2300      	movs	r3, #0
 801167c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801167e:	702b      	strb	r3, [r5, #0]
 8011680:	f10a 0301 	add.w	r3, sl, #1
 8011684:	6013      	str	r3, [r2, #0]
 8011686:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011688:	2b00      	cmp	r3, #0
 801168a:	f000 8241 	beq.w	8011b10 <_dtoa_r+0xb18>
 801168e:	601d      	str	r5, [r3, #0]
 8011690:	e23e      	b.n	8011b10 <_dtoa_r+0xb18>
 8011692:	f8cd a020 	str.w	sl, [sp, #32]
 8011696:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801169a:	2a39      	cmp	r2, #57	; 0x39
 801169c:	f105 33ff 	add.w	r3, r5, #4294967295
 80116a0:	d108      	bne.n	80116b4 <_dtoa_r+0x6bc>
 80116a2:	459b      	cmp	fp, r3
 80116a4:	d10a      	bne.n	80116bc <_dtoa_r+0x6c4>
 80116a6:	9b08      	ldr	r3, [sp, #32]
 80116a8:	3301      	adds	r3, #1
 80116aa:	9308      	str	r3, [sp, #32]
 80116ac:	2330      	movs	r3, #48	; 0x30
 80116ae:	f88b 3000 	strb.w	r3, [fp]
 80116b2:	465b      	mov	r3, fp
 80116b4:	781a      	ldrb	r2, [r3, #0]
 80116b6:	3201      	adds	r2, #1
 80116b8:	701a      	strb	r2, [r3, #0]
 80116ba:	e78c      	b.n	80115d6 <_dtoa_r+0x5de>
 80116bc:	461d      	mov	r5, r3
 80116be:	e7ea      	b.n	8011696 <_dtoa_r+0x69e>
 80116c0:	2200      	movs	r2, #0
 80116c2:	4b9b      	ldr	r3, [pc, #620]	; (8011930 <_dtoa_r+0x938>)
 80116c4:	f7ee ff98 	bl	80005f8 <__aeabi_dmul>
 80116c8:	2200      	movs	r2, #0
 80116ca:	2300      	movs	r3, #0
 80116cc:	4606      	mov	r6, r0
 80116ce:	460f      	mov	r7, r1
 80116d0:	f7ef f9fa 	bl	8000ac8 <__aeabi_dcmpeq>
 80116d4:	2800      	cmp	r0, #0
 80116d6:	d09a      	beq.n	801160e <_dtoa_r+0x616>
 80116d8:	e7cb      	b.n	8011672 <_dtoa_r+0x67a>
 80116da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80116dc:	2a00      	cmp	r2, #0
 80116de:	f000 808b 	beq.w	80117f8 <_dtoa_r+0x800>
 80116e2:	9a06      	ldr	r2, [sp, #24]
 80116e4:	2a01      	cmp	r2, #1
 80116e6:	dc6e      	bgt.n	80117c6 <_dtoa_r+0x7ce>
 80116e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80116ea:	2a00      	cmp	r2, #0
 80116ec:	d067      	beq.n	80117be <_dtoa_r+0x7c6>
 80116ee:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80116f2:	9f07      	ldr	r7, [sp, #28]
 80116f4:	9d05      	ldr	r5, [sp, #20]
 80116f6:	9a05      	ldr	r2, [sp, #20]
 80116f8:	2101      	movs	r1, #1
 80116fa:	441a      	add	r2, r3
 80116fc:	4620      	mov	r0, r4
 80116fe:	9205      	str	r2, [sp, #20]
 8011700:	4498      	add	r8, r3
 8011702:	f000 ff5b 	bl	80125bc <__i2b>
 8011706:	4606      	mov	r6, r0
 8011708:	2d00      	cmp	r5, #0
 801170a:	dd0c      	ble.n	8011726 <_dtoa_r+0x72e>
 801170c:	f1b8 0f00 	cmp.w	r8, #0
 8011710:	dd09      	ble.n	8011726 <_dtoa_r+0x72e>
 8011712:	4545      	cmp	r5, r8
 8011714:	9a05      	ldr	r2, [sp, #20]
 8011716:	462b      	mov	r3, r5
 8011718:	bfa8      	it	ge
 801171a:	4643      	movge	r3, r8
 801171c:	1ad2      	subs	r2, r2, r3
 801171e:	9205      	str	r2, [sp, #20]
 8011720:	1aed      	subs	r5, r5, r3
 8011722:	eba8 0803 	sub.w	r8, r8, r3
 8011726:	9b07      	ldr	r3, [sp, #28]
 8011728:	b1eb      	cbz	r3, 8011766 <_dtoa_r+0x76e>
 801172a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801172c:	2b00      	cmp	r3, #0
 801172e:	d067      	beq.n	8011800 <_dtoa_r+0x808>
 8011730:	b18f      	cbz	r7, 8011756 <_dtoa_r+0x75e>
 8011732:	4631      	mov	r1, r6
 8011734:	463a      	mov	r2, r7
 8011736:	4620      	mov	r0, r4
 8011738:	f000 ffe0 	bl	80126fc <__pow5mult>
 801173c:	9a04      	ldr	r2, [sp, #16]
 801173e:	4601      	mov	r1, r0
 8011740:	4606      	mov	r6, r0
 8011742:	4620      	mov	r0, r4
 8011744:	f000 ff43 	bl	80125ce <__multiply>
 8011748:	9904      	ldr	r1, [sp, #16]
 801174a:	9008      	str	r0, [sp, #32]
 801174c:	4620      	mov	r0, r4
 801174e:	f000 fe57 	bl	8012400 <_Bfree>
 8011752:	9b08      	ldr	r3, [sp, #32]
 8011754:	9304      	str	r3, [sp, #16]
 8011756:	9b07      	ldr	r3, [sp, #28]
 8011758:	1bda      	subs	r2, r3, r7
 801175a:	d004      	beq.n	8011766 <_dtoa_r+0x76e>
 801175c:	9904      	ldr	r1, [sp, #16]
 801175e:	4620      	mov	r0, r4
 8011760:	f000 ffcc 	bl	80126fc <__pow5mult>
 8011764:	9004      	str	r0, [sp, #16]
 8011766:	2101      	movs	r1, #1
 8011768:	4620      	mov	r0, r4
 801176a:	f000 ff27 	bl	80125bc <__i2b>
 801176e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011770:	4607      	mov	r7, r0
 8011772:	2b00      	cmp	r3, #0
 8011774:	f000 81d0 	beq.w	8011b18 <_dtoa_r+0xb20>
 8011778:	461a      	mov	r2, r3
 801177a:	4601      	mov	r1, r0
 801177c:	4620      	mov	r0, r4
 801177e:	f000 ffbd 	bl	80126fc <__pow5mult>
 8011782:	9b06      	ldr	r3, [sp, #24]
 8011784:	2b01      	cmp	r3, #1
 8011786:	4607      	mov	r7, r0
 8011788:	dc40      	bgt.n	801180c <_dtoa_r+0x814>
 801178a:	9b00      	ldr	r3, [sp, #0]
 801178c:	2b00      	cmp	r3, #0
 801178e:	d139      	bne.n	8011804 <_dtoa_r+0x80c>
 8011790:	9b01      	ldr	r3, [sp, #4]
 8011792:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011796:	2b00      	cmp	r3, #0
 8011798:	d136      	bne.n	8011808 <_dtoa_r+0x810>
 801179a:	9b01      	ldr	r3, [sp, #4]
 801179c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80117a0:	0d1b      	lsrs	r3, r3, #20
 80117a2:	051b      	lsls	r3, r3, #20
 80117a4:	b12b      	cbz	r3, 80117b2 <_dtoa_r+0x7ba>
 80117a6:	9b05      	ldr	r3, [sp, #20]
 80117a8:	3301      	adds	r3, #1
 80117aa:	9305      	str	r3, [sp, #20]
 80117ac:	f108 0801 	add.w	r8, r8, #1
 80117b0:	2301      	movs	r3, #1
 80117b2:	9307      	str	r3, [sp, #28]
 80117b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d12a      	bne.n	8011810 <_dtoa_r+0x818>
 80117ba:	2001      	movs	r0, #1
 80117bc:	e030      	b.n	8011820 <_dtoa_r+0x828>
 80117be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80117c0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80117c4:	e795      	b.n	80116f2 <_dtoa_r+0x6fa>
 80117c6:	9b07      	ldr	r3, [sp, #28]
 80117c8:	f109 37ff 	add.w	r7, r9, #4294967295
 80117cc:	42bb      	cmp	r3, r7
 80117ce:	bfbf      	itttt	lt
 80117d0:	9b07      	ldrlt	r3, [sp, #28]
 80117d2:	9707      	strlt	r7, [sp, #28]
 80117d4:	1afa      	sublt	r2, r7, r3
 80117d6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80117d8:	bfbb      	ittet	lt
 80117da:	189b      	addlt	r3, r3, r2
 80117dc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80117de:	1bdf      	subge	r7, r3, r7
 80117e0:	2700      	movlt	r7, #0
 80117e2:	f1b9 0f00 	cmp.w	r9, #0
 80117e6:	bfb5      	itete	lt
 80117e8:	9b05      	ldrlt	r3, [sp, #20]
 80117ea:	9d05      	ldrge	r5, [sp, #20]
 80117ec:	eba3 0509 	sublt.w	r5, r3, r9
 80117f0:	464b      	movge	r3, r9
 80117f2:	bfb8      	it	lt
 80117f4:	2300      	movlt	r3, #0
 80117f6:	e77e      	b.n	80116f6 <_dtoa_r+0x6fe>
 80117f8:	9f07      	ldr	r7, [sp, #28]
 80117fa:	9d05      	ldr	r5, [sp, #20]
 80117fc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80117fe:	e783      	b.n	8011708 <_dtoa_r+0x710>
 8011800:	9a07      	ldr	r2, [sp, #28]
 8011802:	e7ab      	b.n	801175c <_dtoa_r+0x764>
 8011804:	2300      	movs	r3, #0
 8011806:	e7d4      	b.n	80117b2 <_dtoa_r+0x7ba>
 8011808:	9b00      	ldr	r3, [sp, #0]
 801180a:	e7d2      	b.n	80117b2 <_dtoa_r+0x7ba>
 801180c:	2300      	movs	r3, #0
 801180e:	9307      	str	r3, [sp, #28]
 8011810:	693b      	ldr	r3, [r7, #16]
 8011812:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8011816:	6918      	ldr	r0, [r3, #16]
 8011818:	f000 fe82 	bl	8012520 <__hi0bits>
 801181c:	f1c0 0020 	rsb	r0, r0, #32
 8011820:	4440      	add	r0, r8
 8011822:	f010 001f 	ands.w	r0, r0, #31
 8011826:	d047      	beq.n	80118b8 <_dtoa_r+0x8c0>
 8011828:	f1c0 0320 	rsb	r3, r0, #32
 801182c:	2b04      	cmp	r3, #4
 801182e:	dd3b      	ble.n	80118a8 <_dtoa_r+0x8b0>
 8011830:	9b05      	ldr	r3, [sp, #20]
 8011832:	f1c0 001c 	rsb	r0, r0, #28
 8011836:	4403      	add	r3, r0
 8011838:	9305      	str	r3, [sp, #20]
 801183a:	4405      	add	r5, r0
 801183c:	4480      	add	r8, r0
 801183e:	9b05      	ldr	r3, [sp, #20]
 8011840:	2b00      	cmp	r3, #0
 8011842:	dd05      	ble.n	8011850 <_dtoa_r+0x858>
 8011844:	461a      	mov	r2, r3
 8011846:	9904      	ldr	r1, [sp, #16]
 8011848:	4620      	mov	r0, r4
 801184a:	f000 ffa5 	bl	8012798 <__lshift>
 801184e:	9004      	str	r0, [sp, #16]
 8011850:	f1b8 0f00 	cmp.w	r8, #0
 8011854:	dd05      	ble.n	8011862 <_dtoa_r+0x86a>
 8011856:	4639      	mov	r1, r7
 8011858:	4642      	mov	r2, r8
 801185a:	4620      	mov	r0, r4
 801185c:	f000 ff9c 	bl	8012798 <__lshift>
 8011860:	4607      	mov	r7, r0
 8011862:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011864:	b353      	cbz	r3, 80118bc <_dtoa_r+0x8c4>
 8011866:	4639      	mov	r1, r7
 8011868:	9804      	ldr	r0, [sp, #16]
 801186a:	f000 ffe9 	bl	8012840 <__mcmp>
 801186e:	2800      	cmp	r0, #0
 8011870:	da24      	bge.n	80118bc <_dtoa_r+0x8c4>
 8011872:	2300      	movs	r3, #0
 8011874:	220a      	movs	r2, #10
 8011876:	9904      	ldr	r1, [sp, #16]
 8011878:	4620      	mov	r0, r4
 801187a:	f000 fdd8 	bl	801242e <__multadd>
 801187e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011880:	9004      	str	r0, [sp, #16]
 8011882:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011886:	2b00      	cmp	r3, #0
 8011888:	f000 814d 	beq.w	8011b26 <_dtoa_r+0xb2e>
 801188c:	2300      	movs	r3, #0
 801188e:	4631      	mov	r1, r6
 8011890:	220a      	movs	r2, #10
 8011892:	4620      	mov	r0, r4
 8011894:	f000 fdcb 	bl	801242e <__multadd>
 8011898:	9b02      	ldr	r3, [sp, #8]
 801189a:	2b00      	cmp	r3, #0
 801189c:	4606      	mov	r6, r0
 801189e:	dc4f      	bgt.n	8011940 <_dtoa_r+0x948>
 80118a0:	9b06      	ldr	r3, [sp, #24]
 80118a2:	2b02      	cmp	r3, #2
 80118a4:	dd4c      	ble.n	8011940 <_dtoa_r+0x948>
 80118a6:	e011      	b.n	80118cc <_dtoa_r+0x8d4>
 80118a8:	d0c9      	beq.n	801183e <_dtoa_r+0x846>
 80118aa:	9a05      	ldr	r2, [sp, #20]
 80118ac:	331c      	adds	r3, #28
 80118ae:	441a      	add	r2, r3
 80118b0:	9205      	str	r2, [sp, #20]
 80118b2:	441d      	add	r5, r3
 80118b4:	4498      	add	r8, r3
 80118b6:	e7c2      	b.n	801183e <_dtoa_r+0x846>
 80118b8:	4603      	mov	r3, r0
 80118ba:	e7f6      	b.n	80118aa <_dtoa_r+0x8b2>
 80118bc:	f1b9 0f00 	cmp.w	r9, #0
 80118c0:	dc38      	bgt.n	8011934 <_dtoa_r+0x93c>
 80118c2:	9b06      	ldr	r3, [sp, #24]
 80118c4:	2b02      	cmp	r3, #2
 80118c6:	dd35      	ble.n	8011934 <_dtoa_r+0x93c>
 80118c8:	f8cd 9008 	str.w	r9, [sp, #8]
 80118cc:	9b02      	ldr	r3, [sp, #8]
 80118ce:	b963      	cbnz	r3, 80118ea <_dtoa_r+0x8f2>
 80118d0:	4639      	mov	r1, r7
 80118d2:	2205      	movs	r2, #5
 80118d4:	4620      	mov	r0, r4
 80118d6:	f000 fdaa 	bl	801242e <__multadd>
 80118da:	4601      	mov	r1, r0
 80118dc:	4607      	mov	r7, r0
 80118de:	9804      	ldr	r0, [sp, #16]
 80118e0:	f000 ffae 	bl	8012840 <__mcmp>
 80118e4:	2800      	cmp	r0, #0
 80118e6:	f73f adcc 	bgt.w	8011482 <_dtoa_r+0x48a>
 80118ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80118ec:	465d      	mov	r5, fp
 80118ee:	ea6f 0a03 	mvn.w	sl, r3
 80118f2:	f04f 0900 	mov.w	r9, #0
 80118f6:	4639      	mov	r1, r7
 80118f8:	4620      	mov	r0, r4
 80118fa:	f000 fd81 	bl	8012400 <_Bfree>
 80118fe:	2e00      	cmp	r6, #0
 8011900:	f43f aeb7 	beq.w	8011672 <_dtoa_r+0x67a>
 8011904:	f1b9 0f00 	cmp.w	r9, #0
 8011908:	d005      	beq.n	8011916 <_dtoa_r+0x91e>
 801190a:	45b1      	cmp	r9, r6
 801190c:	d003      	beq.n	8011916 <_dtoa_r+0x91e>
 801190e:	4649      	mov	r1, r9
 8011910:	4620      	mov	r0, r4
 8011912:	f000 fd75 	bl	8012400 <_Bfree>
 8011916:	4631      	mov	r1, r6
 8011918:	4620      	mov	r0, r4
 801191a:	f000 fd71 	bl	8012400 <_Bfree>
 801191e:	e6a8      	b.n	8011672 <_dtoa_r+0x67a>
 8011920:	2700      	movs	r7, #0
 8011922:	463e      	mov	r6, r7
 8011924:	e7e1      	b.n	80118ea <_dtoa_r+0x8f2>
 8011926:	f8dd a020 	ldr.w	sl, [sp, #32]
 801192a:	463e      	mov	r6, r7
 801192c:	e5a9      	b.n	8011482 <_dtoa_r+0x48a>
 801192e:	bf00      	nop
 8011930:	40240000 	.word	0x40240000
 8011934:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011936:	f8cd 9008 	str.w	r9, [sp, #8]
 801193a:	2b00      	cmp	r3, #0
 801193c:	f000 80fa 	beq.w	8011b34 <_dtoa_r+0xb3c>
 8011940:	2d00      	cmp	r5, #0
 8011942:	dd05      	ble.n	8011950 <_dtoa_r+0x958>
 8011944:	4631      	mov	r1, r6
 8011946:	462a      	mov	r2, r5
 8011948:	4620      	mov	r0, r4
 801194a:	f000 ff25 	bl	8012798 <__lshift>
 801194e:	4606      	mov	r6, r0
 8011950:	9b07      	ldr	r3, [sp, #28]
 8011952:	2b00      	cmp	r3, #0
 8011954:	d04c      	beq.n	80119f0 <_dtoa_r+0x9f8>
 8011956:	6871      	ldr	r1, [r6, #4]
 8011958:	4620      	mov	r0, r4
 801195a:	f000 fd1d 	bl	8012398 <_Balloc>
 801195e:	6932      	ldr	r2, [r6, #16]
 8011960:	3202      	adds	r2, #2
 8011962:	4605      	mov	r5, r0
 8011964:	0092      	lsls	r2, r2, #2
 8011966:	f106 010c 	add.w	r1, r6, #12
 801196a:	300c      	adds	r0, #12
 801196c:	f7fd fcbe 	bl	800f2ec <memcpy>
 8011970:	2201      	movs	r2, #1
 8011972:	4629      	mov	r1, r5
 8011974:	4620      	mov	r0, r4
 8011976:	f000 ff0f 	bl	8012798 <__lshift>
 801197a:	9b00      	ldr	r3, [sp, #0]
 801197c:	f8cd b014 	str.w	fp, [sp, #20]
 8011980:	f003 0301 	and.w	r3, r3, #1
 8011984:	46b1      	mov	r9, r6
 8011986:	9307      	str	r3, [sp, #28]
 8011988:	4606      	mov	r6, r0
 801198a:	4639      	mov	r1, r7
 801198c:	9804      	ldr	r0, [sp, #16]
 801198e:	f7ff faa5 	bl	8010edc <quorem>
 8011992:	4649      	mov	r1, r9
 8011994:	4605      	mov	r5, r0
 8011996:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801199a:	9804      	ldr	r0, [sp, #16]
 801199c:	f000 ff50 	bl	8012840 <__mcmp>
 80119a0:	4632      	mov	r2, r6
 80119a2:	9000      	str	r0, [sp, #0]
 80119a4:	4639      	mov	r1, r7
 80119a6:	4620      	mov	r0, r4
 80119a8:	f000 ff64 	bl	8012874 <__mdiff>
 80119ac:	68c3      	ldr	r3, [r0, #12]
 80119ae:	4602      	mov	r2, r0
 80119b0:	bb03      	cbnz	r3, 80119f4 <_dtoa_r+0x9fc>
 80119b2:	4601      	mov	r1, r0
 80119b4:	9008      	str	r0, [sp, #32]
 80119b6:	9804      	ldr	r0, [sp, #16]
 80119b8:	f000 ff42 	bl	8012840 <__mcmp>
 80119bc:	9a08      	ldr	r2, [sp, #32]
 80119be:	4603      	mov	r3, r0
 80119c0:	4611      	mov	r1, r2
 80119c2:	4620      	mov	r0, r4
 80119c4:	9308      	str	r3, [sp, #32]
 80119c6:	f000 fd1b 	bl	8012400 <_Bfree>
 80119ca:	9b08      	ldr	r3, [sp, #32]
 80119cc:	b9a3      	cbnz	r3, 80119f8 <_dtoa_r+0xa00>
 80119ce:	9a06      	ldr	r2, [sp, #24]
 80119d0:	b992      	cbnz	r2, 80119f8 <_dtoa_r+0xa00>
 80119d2:	9a07      	ldr	r2, [sp, #28]
 80119d4:	b982      	cbnz	r2, 80119f8 <_dtoa_r+0xa00>
 80119d6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80119da:	d029      	beq.n	8011a30 <_dtoa_r+0xa38>
 80119dc:	9b00      	ldr	r3, [sp, #0]
 80119de:	2b00      	cmp	r3, #0
 80119e0:	dd01      	ble.n	80119e6 <_dtoa_r+0x9ee>
 80119e2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80119e6:	9b05      	ldr	r3, [sp, #20]
 80119e8:	1c5d      	adds	r5, r3, #1
 80119ea:	f883 8000 	strb.w	r8, [r3]
 80119ee:	e782      	b.n	80118f6 <_dtoa_r+0x8fe>
 80119f0:	4630      	mov	r0, r6
 80119f2:	e7c2      	b.n	801197a <_dtoa_r+0x982>
 80119f4:	2301      	movs	r3, #1
 80119f6:	e7e3      	b.n	80119c0 <_dtoa_r+0x9c8>
 80119f8:	9a00      	ldr	r2, [sp, #0]
 80119fa:	2a00      	cmp	r2, #0
 80119fc:	db04      	blt.n	8011a08 <_dtoa_r+0xa10>
 80119fe:	d125      	bne.n	8011a4c <_dtoa_r+0xa54>
 8011a00:	9a06      	ldr	r2, [sp, #24]
 8011a02:	bb1a      	cbnz	r2, 8011a4c <_dtoa_r+0xa54>
 8011a04:	9a07      	ldr	r2, [sp, #28]
 8011a06:	bb0a      	cbnz	r2, 8011a4c <_dtoa_r+0xa54>
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	ddec      	ble.n	80119e6 <_dtoa_r+0x9ee>
 8011a0c:	2201      	movs	r2, #1
 8011a0e:	9904      	ldr	r1, [sp, #16]
 8011a10:	4620      	mov	r0, r4
 8011a12:	f000 fec1 	bl	8012798 <__lshift>
 8011a16:	4639      	mov	r1, r7
 8011a18:	9004      	str	r0, [sp, #16]
 8011a1a:	f000 ff11 	bl	8012840 <__mcmp>
 8011a1e:	2800      	cmp	r0, #0
 8011a20:	dc03      	bgt.n	8011a2a <_dtoa_r+0xa32>
 8011a22:	d1e0      	bne.n	80119e6 <_dtoa_r+0x9ee>
 8011a24:	f018 0f01 	tst.w	r8, #1
 8011a28:	d0dd      	beq.n	80119e6 <_dtoa_r+0x9ee>
 8011a2a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8011a2e:	d1d8      	bne.n	80119e2 <_dtoa_r+0x9ea>
 8011a30:	9b05      	ldr	r3, [sp, #20]
 8011a32:	9a05      	ldr	r2, [sp, #20]
 8011a34:	1c5d      	adds	r5, r3, #1
 8011a36:	2339      	movs	r3, #57	; 0x39
 8011a38:	7013      	strb	r3, [r2, #0]
 8011a3a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011a3e:	2b39      	cmp	r3, #57	; 0x39
 8011a40:	f105 32ff 	add.w	r2, r5, #4294967295
 8011a44:	d04f      	beq.n	8011ae6 <_dtoa_r+0xaee>
 8011a46:	3301      	adds	r3, #1
 8011a48:	7013      	strb	r3, [r2, #0]
 8011a4a:	e754      	b.n	80118f6 <_dtoa_r+0x8fe>
 8011a4c:	9a05      	ldr	r2, [sp, #20]
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	f102 0501 	add.w	r5, r2, #1
 8011a54:	dd06      	ble.n	8011a64 <_dtoa_r+0xa6c>
 8011a56:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8011a5a:	d0e9      	beq.n	8011a30 <_dtoa_r+0xa38>
 8011a5c:	f108 0801 	add.w	r8, r8, #1
 8011a60:	9b05      	ldr	r3, [sp, #20]
 8011a62:	e7c2      	b.n	80119ea <_dtoa_r+0x9f2>
 8011a64:	9a02      	ldr	r2, [sp, #8]
 8011a66:	f805 8c01 	strb.w	r8, [r5, #-1]
 8011a6a:	eba5 030b 	sub.w	r3, r5, fp
 8011a6e:	4293      	cmp	r3, r2
 8011a70:	d021      	beq.n	8011ab6 <_dtoa_r+0xabe>
 8011a72:	2300      	movs	r3, #0
 8011a74:	220a      	movs	r2, #10
 8011a76:	9904      	ldr	r1, [sp, #16]
 8011a78:	4620      	mov	r0, r4
 8011a7a:	f000 fcd8 	bl	801242e <__multadd>
 8011a7e:	45b1      	cmp	r9, r6
 8011a80:	9004      	str	r0, [sp, #16]
 8011a82:	f04f 0300 	mov.w	r3, #0
 8011a86:	f04f 020a 	mov.w	r2, #10
 8011a8a:	4649      	mov	r1, r9
 8011a8c:	4620      	mov	r0, r4
 8011a8e:	d105      	bne.n	8011a9c <_dtoa_r+0xaa4>
 8011a90:	f000 fccd 	bl	801242e <__multadd>
 8011a94:	4681      	mov	r9, r0
 8011a96:	4606      	mov	r6, r0
 8011a98:	9505      	str	r5, [sp, #20]
 8011a9a:	e776      	b.n	801198a <_dtoa_r+0x992>
 8011a9c:	f000 fcc7 	bl	801242e <__multadd>
 8011aa0:	4631      	mov	r1, r6
 8011aa2:	4681      	mov	r9, r0
 8011aa4:	2300      	movs	r3, #0
 8011aa6:	220a      	movs	r2, #10
 8011aa8:	4620      	mov	r0, r4
 8011aaa:	f000 fcc0 	bl	801242e <__multadd>
 8011aae:	4606      	mov	r6, r0
 8011ab0:	e7f2      	b.n	8011a98 <_dtoa_r+0xaa0>
 8011ab2:	f04f 0900 	mov.w	r9, #0
 8011ab6:	2201      	movs	r2, #1
 8011ab8:	9904      	ldr	r1, [sp, #16]
 8011aba:	4620      	mov	r0, r4
 8011abc:	f000 fe6c 	bl	8012798 <__lshift>
 8011ac0:	4639      	mov	r1, r7
 8011ac2:	9004      	str	r0, [sp, #16]
 8011ac4:	f000 febc 	bl	8012840 <__mcmp>
 8011ac8:	2800      	cmp	r0, #0
 8011aca:	dcb6      	bgt.n	8011a3a <_dtoa_r+0xa42>
 8011acc:	d102      	bne.n	8011ad4 <_dtoa_r+0xadc>
 8011ace:	f018 0f01 	tst.w	r8, #1
 8011ad2:	d1b2      	bne.n	8011a3a <_dtoa_r+0xa42>
 8011ad4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011ad8:	2b30      	cmp	r3, #48	; 0x30
 8011ada:	f105 32ff 	add.w	r2, r5, #4294967295
 8011ade:	f47f af0a 	bne.w	80118f6 <_dtoa_r+0x8fe>
 8011ae2:	4615      	mov	r5, r2
 8011ae4:	e7f6      	b.n	8011ad4 <_dtoa_r+0xadc>
 8011ae6:	4593      	cmp	fp, r2
 8011ae8:	d105      	bne.n	8011af6 <_dtoa_r+0xafe>
 8011aea:	2331      	movs	r3, #49	; 0x31
 8011aec:	f10a 0a01 	add.w	sl, sl, #1
 8011af0:	f88b 3000 	strb.w	r3, [fp]
 8011af4:	e6ff      	b.n	80118f6 <_dtoa_r+0x8fe>
 8011af6:	4615      	mov	r5, r2
 8011af8:	e79f      	b.n	8011a3a <_dtoa_r+0xa42>
 8011afa:	f8df b064 	ldr.w	fp, [pc, #100]	; 8011b60 <_dtoa_r+0xb68>
 8011afe:	e007      	b.n	8011b10 <_dtoa_r+0xb18>
 8011b00:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011b02:	f8df b060 	ldr.w	fp, [pc, #96]	; 8011b64 <_dtoa_r+0xb6c>
 8011b06:	b11b      	cbz	r3, 8011b10 <_dtoa_r+0xb18>
 8011b08:	f10b 0308 	add.w	r3, fp, #8
 8011b0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011b0e:	6013      	str	r3, [r2, #0]
 8011b10:	4658      	mov	r0, fp
 8011b12:	b017      	add	sp, #92	; 0x5c
 8011b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b18:	9b06      	ldr	r3, [sp, #24]
 8011b1a:	2b01      	cmp	r3, #1
 8011b1c:	f77f ae35 	ble.w	801178a <_dtoa_r+0x792>
 8011b20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011b22:	9307      	str	r3, [sp, #28]
 8011b24:	e649      	b.n	80117ba <_dtoa_r+0x7c2>
 8011b26:	9b02      	ldr	r3, [sp, #8]
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	dc03      	bgt.n	8011b34 <_dtoa_r+0xb3c>
 8011b2c:	9b06      	ldr	r3, [sp, #24]
 8011b2e:	2b02      	cmp	r3, #2
 8011b30:	f73f aecc 	bgt.w	80118cc <_dtoa_r+0x8d4>
 8011b34:	465d      	mov	r5, fp
 8011b36:	4639      	mov	r1, r7
 8011b38:	9804      	ldr	r0, [sp, #16]
 8011b3a:	f7ff f9cf 	bl	8010edc <quorem>
 8011b3e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8011b42:	f805 8b01 	strb.w	r8, [r5], #1
 8011b46:	9a02      	ldr	r2, [sp, #8]
 8011b48:	eba5 030b 	sub.w	r3, r5, fp
 8011b4c:	429a      	cmp	r2, r3
 8011b4e:	ddb0      	ble.n	8011ab2 <_dtoa_r+0xaba>
 8011b50:	2300      	movs	r3, #0
 8011b52:	220a      	movs	r2, #10
 8011b54:	9904      	ldr	r1, [sp, #16]
 8011b56:	4620      	mov	r0, r4
 8011b58:	f000 fc69 	bl	801242e <__multadd>
 8011b5c:	9004      	str	r0, [sp, #16]
 8011b5e:	e7ea      	b.n	8011b36 <_dtoa_r+0xb3e>
 8011b60:	080138e4 	.word	0x080138e4
 8011b64:	08013960 	.word	0x08013960

08011b68 <std>:
 8011b68:	2300      	movs	r3, #0
 8011b6a:	b510      	push	{r4, lr}
 8011b6c:	4604      	mov	r4, r0
 8011b6e:	e9c0 3300 	strd	r3, r3, [r0]
 8011b72:	6083      	str	r3, [r0, #8]
 8011b74:	8181      	strh	r1, [r0, #12]
 8011b76:	6643      	str	r3, [r0, #100]	; 0x64
 8011b78:	81c2      	strh	r2, [r0, #14]
 8011b7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011b7e:	6183      	str	r3, [r0, #24]
 8011b80:	4619      	mov	r1, r3
 8011b82:	2208      	movs	r2, #8
 8011b84:	305c      	adds	r0, #92	; 0x5c
 8011b86:	f7fd fbbc 	bl	800f302 <memset>
 8011b8a:	4b05      	ldr	r3, [pc, #20]	; (8011ba0 <std+0x38>)
 8011b8c:	6263      	str	r3, [r4, #36]	; 0x24
 8011b8e:	4b05      	ldr	r3, [pc, #20]	; (8011ba4 <std+0x3c>)
 8011b90:	62a3      	str	r3, [r4, #40]	; 0x28
 8011b92:	4b05      	ldr	r3, [pc, #20]	; (8011ba8 <std+0x40>)
 8011b94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011b96:	4b05      	ldr	r3, [pc, #20]	; (8011bac <std+0x44>)
 8011b98:	6224      	str	r4, [r4, #32]
 8011b9a:	6323      	str	r3, [r4, #48]	; 0x30
 8011b9c:	bd10      	pop	{r4, pc}
 8011b9e:	bf00      	nop
 8011ba0:	080130d9 	.word	0x080130d9
 8011ba4:	080130fb 	.word	0x080130fb
 8011ba8:	08013133 	.word	0x08013133
 8011bac:	08013157 	.word	0x08013157

08011bb0 <_cleanup_r>:
 8011bb0:	4901      	ldr	r1, [pc, #4]	; (8011bb8 <_cleanup_r+0x8>)
 8011bb2:	f000 b885 	b.w	8011cc0 <_fwalk_reent>
 8011bb6:	bf00      	nop
 8011bb8:	08013471 	.word	0x08013471

08011bbc <__sfmoreglue>:
 8011bbc:	b570      	push	{r4, r5, r6, lr}
 8011bbe:	1e4a      	subs	r2, r1, #1
 8011bc0:	2568      	movs	r5, #104	; 0x68
 8011bc2:	4355      	muls	r5, r2
 8011bc4:	460e      	mov	r6, r1
 8011bc6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011bca:	f7fd fbf1 	bl	800f3b0 <_malloc_r>
 8011bce:	4604      	mov	r4, r0
 8011bd0:	b140      	cbz	r0, 8011be4 <__sfmoreglue+0x28>
 8011bd2:	2100      	movs	r1, #0
 8011bd4:	e9c0 1600 	strd	r1, r6, [r0]
 8011bd8:	300c      	adds	r0, #12
 8011bda:	60a0      	str	r0, [r4, #8]
 8011bdc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011be0:	f7fd fb8f 	bl	800f302 <memset>
 8011be4:	4620      	mov	r0, r4
 8011be6:	bd70      	pop	{r4, r5, r6, pc}

08011be8 <__sinit>:
 8011be8:	6983      	ldr	r3, [r0, #24]
 8011bea:	b510      	push	{r4, lr}
 8011bec:	4604      	mov	r4, r0
 8011bee:	bb33      	cbnz	r3, 8011c3e <__sinit+0x56>
 8011bf0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8011bf4:	6503      	str	r3, [r0, #80]	; 0x50
 8011bf6:	4b12      	ldr	r3, [pc, #72]	; (8011c40 <__sinit+0x58>)
 8011bf8:	4a12      	ldr	r2, [pc, #72]	; (8011c44 <__sinit+0x5c>)
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	6282      	str	r2, [r0, #40]	; 0x28
 8011bfe:	4298      	cmp	r0, r3
 8011c00:	bf04      	itt	eq
 8011c02:	2301      	moveq	r3, #1
 8011c04:	6183      	streq	r3, [r0, #24]
 8011c06:	f000 f81f 	bl	8011c48 <__sfp>
 8011c0a:	6060      	str	r0, [r4, #4]
 8011c0c:	4620      	mov	r0, r4
 8011c0e:	f000 f81b 	bl	8011c48 <__sfp>
 8011c12:	60a0      	str	r0, [r4, #8]
 8011c14:	4620      	mov	r0, r4
 8011c16:	f000 f817 	bl	8011c48 <__sfp>
 8011c1a:	2200      	movs	r2, #0
 8011c1c:	60e0      	str	r0, [r4, #12]
 8011c1e:	2104      	movs	r1, #4
 8011c20:	6860      	ldr	r0, [r4, #4]
 8011c22:	f7ff ffa1 	bl	8011b68 <std>
 8011c26:	2201      	movs	r2, #1
 8011c28:	2109      	movs	r1, #9
 8011c2a:	68a0      	ldr	r0, [r4, #8]
 8011c2c:	f7ff ff9c 	bl	8011b68 <std>
 8011c30:	2202      	movs	r2, #2
 8011c32:	2112      	movs	r1, #18
 8011c34:	68e0      	ldr	r0, [r4, #12]
 8011c36:	f7ff ff97 	bl	8011b68 <std>
 8011c3a:	2301      	movs	r3, #1
 8011c3c:	61a3      	str	r3, [r4, #24]
 8011c3e:	bd10      	pop	{r4, pc}
 8011c40:	080138d0 	.word	0x080138d0
 8011c44:	08011bb1 	.word	0x08011bb1

08011c48 <__sfp>:
 8011c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c4a:	4b1b      	ldr	r3, [pc, #108]	; (8011cb8 <__sfp+0x70>)
 8011c4c:	681e      	ldr	r6, [r3, #0]
 8011c4e:	69b3      	ldr	r3, [r6, #24]
 8011c50:	4607      	mov	r7, r0
 8011c52:	b913      	cbnz	r3, 8011c5a <__sfp+0x12>
 8011c54:	4630      	mov	r0, r6
 8011c56:	f7ff ffc7 	bl	8011be8 <__sinit>
 8011c5a:	3648      	adds	r6, #72	; 0x48
 8011c5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011c60:	3b01      	subs	r3, #1
 8011c62:	d503      	bpl.n	8011c6c <__sfp+0x24>
 8011c64:	6833      	ldr	r3, [r6, #0]
 8011c66:	b133      	cbz	r3, 8011c76 <__sfp+0x2e>
 8011c68:	6836      	ldr	r6, [r6, #0]
 8011c6a:	e7f7      	b.n	8011c5c <__sfp+0x14>
 8011c6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011c70:	b16d      	cbz	r5, 8011c8e <__sfp+0x46>
 8011c72:	3468      	adds	r4, #104	; 0x68
 8011c74:	e7f4      	b.n	8011c60 <__sfp+0x18>
 8011c76:	2104      	movs	r1, #4
 8011c78:	4638      	mov	r0, r7
 8011c7a:	f7ff ff9f 	bl	8011bbc <__sfmoreglue>
 8011c7e:	6030      	str	r0, [r6, #0]
 8011c80:	2800      	cmp	r0, #0
 8011c82:	d1f1      	bne.n	8011c68 <__sfp+0x20>
 8011c84:	230c      	movs	r3, #12
 8011c86:	603b      	str	r3, [r7, #0]
 8011c88:	4604      	mov	r4, r0
 8011c8a:	4620      	mov	r0, r4
 8011c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c8e:	4b0b      	ldr	r3, [pc, #44]	; (8011cbc <__sfp+0x74>)
 8011c90:	6665      	str	r5, [r4, #100]	; 0x64
 8011c92:	e9c4 5500 	strd	r5, r5, [r4]
 8011c96:	60a5      	str	r5, [r4, #8]
 8011c98:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8011c9c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8011ca0:	2208      	movs	r2, #8
 8011ca2:	4629      	mov	r1, r5
 8011ca4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011ca8:	f7fd fb2b 	bl	800f302 <memset>
 8011cac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011cb0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011cb4:	e7e9      	b.n	8011c8a <__sfp+0x42>
 8011cb6:	bf00      	nop
 8011cb8:	080138d0 	.word	0x080138d0
 8011cbc:	ffff0001 	.word	0xffff0001

08011cc0 <_fwalk_reent>:
 8011cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011cc4:	4680      	mov	r8, r0
 8011cc6:	4689      	mov	r9, r1
 8011cc8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011ccc:	2600      	movs	r6, #0
 8011cce:	b914      	cbnz	r4, 8011cd6 <_fwalk_reent+0x16>
 8011cd0:	4630      	mov	r0, r6
 8011cd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011cd6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8011cda:	3f01      	subs	r7, #1
 8011cdc:	d501      	bpl.n	8011ce2 <_fwalk_reent+0x22>
 8011cde:	6824      	ldr	r4, [r4, #0]
 8011ce0:	e7f5      	b.n	8011cce <_fwalk_reent+0xe>
 8011ce2:	89ab      	ldrh	r3, [r5, #12]
 8011ce4:	2b01      	cmp	r3, #1
 8011ce6:	d907      	bls.n	8011cf8 <_fwalk_reent+0x38>
 8011ce8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011cec:	3301      	adds	r3, #1
 8011cee:	d003      	beq.n	8011cf8 <_fwalk_reent+0x38>
 8011cf0:	4629      	mov	r1, r5
 8011cf2:	4640      	mov	r0, r8
 8011cf4:	47c8      	blx	r9
 8011cf6:	4306      	orrs	r6, r0
 8011cf8:	3568      	adds	r5, #104	; 0x68
 8011cfa:	e7ee      	b.n	8011cda <_fwalk_reent+0x1a>

08011cfc <rshift>:
 8011cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011cfe:	6906      	ldr	r6, [r0, #16]
 8011d00:	114b      	asrs	r3, r1, #5
 8011d02:	429e      	cmp	r6, r3
 8011d04:	f100 0414 	add.w	r4, r0, #20
 8011d08:	dd30      	ble.n	8011d6c <rshift+0x70>
 8011d0a:	f011 011f 	ands.w	r1, r1, #31
 8011d0e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8011d12:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8011d16:	d108      	bne.n	8011d2a <rshift+0x2e>
 8011d18:	4621      	mov	r1, r4
 8011d1a:	42b2      	cmp	r2, r6
 8011d1c:	460b      	mov	r3, r1
 8011d1e:	d211      	bcs.n	8011d44 <rshift+0x48>
 8011d20:	f852 3b04 	ldr.w	r3, [r2], #4
 8011d24:	f841 3b04 	str.w	r3, [r1], #4
 8011d28:	e7f7      	b.n	8011d1a <rshift+0x1e>
 8011d2a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8011d2e:	f1c1 0c20 	rsb	ip, r1, #32
 8011d32:	40cd      	lsrs	r5, r1
 8011d34:	3204      	adds	r2, #4
 8011d36:	4623      	mov	r3, r4
 8011d38:	42b2      	cmp	r2, r6
 8011d3a:	4617      	mov	r7, r2
 8011d3c:	d30c      	bcc.n	8011d58 <rshift+0x5c>
 8011d3e:	601d      	str	r5, [r3, #0]
 8011d40:	b105      	cbz	r5, 8011d44 <rshift+0x48>
 8011d42:	3304      	adds	r3, #4
 8011d44:	1b1a      	subs	r2, r3, r4
 8011d46:	42a3      	cmp	r3, r4
 8011d48:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011d4c:	bf08      	it	eq
 8011d4e:	2300      	moveq	r3, #0
 8011d50:	6102      	str	r2, [r0, #16]
 8011d52:	bf08      	it	eq
 8011d54:	6143      	streq	r3, [r0, #20]
 8011d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d58:	683f      	ldr	r7, [r7, #0]
 8011d5a:	fa07 f70c 	lsl.w	r7, r7, ip
 8011d5e:	433d      	orrs	r5, r7
 8011d60:	f843 5b04 	str.w	r5, [r3], #4
 8011d64:	f852 5b04 	ldr.w	r5, [r2], #4
 8011d68:	40cd      	lsrs	r5, r1
 8011d6a:	e7e5      	b.n	8011d38 <rshift+0x3c>
 8011d6c:	4623      	mov	r3, r4
 8011d6e:	e7e9      	b.n	8011d44 <rshift+0x48>

08011d70 <__hexdig_fun>:
 8011d70:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8011d74:	2b09      	cmp	r3, #9
 8011d76:	d802      	bhi.n	8011d7e <__hexdig_fun+0xe>
 8011d78:	3820      	subs	r0, #32
 8011d7a:	b2c0      	uxtb	r0, r0
 8011d7c:	4770      	bx	lr
 8011d7e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8011d82:	2b05      	cmp	r3, #5
 8011d84:	d801      	bhi.n	8011d8a <__hexdig_fun+0x1a>
 8011d86:	3847      	subs	r0, #71	; 0x47
 8011d88:	e7f7      	b.n	8011d7a <__hexdig_fun+0xa>
 8011d8a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8011d8e:	2b05      	cmp	r3, #5
 8011d90:	d801      	bhi.n	8011d96 <__hexdig_fun+0x26>
 8011d92:	3827      	subs	r0, #39	; 0x27
 8011d94:	e7f1      	b.n	8011d7a <__hexdig_fun+0xa>
 8011d96:	2000      	movs	r0, #0
 8011d98:	4770      	bx	lr

08011d9a <__gethex>:
 8011d9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d9e:	b08b      	sub	sp, #44	; 0x2c
 8011da0:	468a      	mov	sl, r1
 8011da2:	9002      	str	r0, [sp, #8]
 8011da4:	9816      	ldr	r0, [sp, #88]	; 0x58
 8011da6:	9306      	str	r3, [sp, #24]
 8011da8:	4690      	mov	r8, r2
 8011daa:	f000 fad0 	bl	801234e <__localeconv_l>
 8011dae:	6803      	ldr	r3, [r0, #0]
 8011db0:	9303      	str	r3, [sp, #12]
 8011db2:	4618      	mov	r0, r3
 8011db4:	f7ee fa0c 	bl	80001d0 <strlen>
 8011db8:	9b03      	ldr	r3, [sp, #12]
 8011dba:	9001      	str	r0, [sp, #4]
 8011dbc:	4403      	add	r3, r0
 8011dbe:	f04f 0b00 	mov.w	fp, #0
 8011dc2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8011dc6:	9307      	str	r3, [sp, #28]
 8011dc8:	f8da 3000 	ldr.w	r3, [sl]
 8011dcc:	3302      	adds	r3, #2
 8011dce:	461f      	mov	r7, r3
 8011dd0:	f813 0b01 	ldrb.w	r0, [r3], #1
 8011dd4:	2830      	cmp	r0, #48	; 0x30
 8011dd6:	d06c      	beq.n	8011eb2 <__gethex+0x118>
 8011dd8:	f7ff ffca 	bl	8011d70 <__hexdig_fun>
 8011ddc:	4604      	mov	r4, r0
 8011dde:	2800      	cmp	r0, #0
 8011de0:	d16a      	bne.n	8011eb8 <__gethex+0x11e>
 8011de2:	9a01      	ldr	r2, [sp, #4]
 8011de4:	9903      	ldr	r1, [sp, #12]
 8011de6:	4638      	mov	r0, r7
 8011de8:	f001 f9b9 	bl	801315e <strncmp>
 8011dec:	2800      	cmp	r0, #0
 8011dee:	d166      	bne.n	8011ebe <__gethex+0x124>
 8011df0:	9b01      	ldr	r3, [sp, #4]
 8011df2:	5cf8      	ldrb	r0, [r7, r3]
 8011df4:	18fe      	adds	r6, r7, r3
 8011df6:	f7ff ffbb 	bl	8011d70 <__hexdig_fun>
 8011dfa:	2800      	cmp	r0, #0
 8011dfc:	d062      	beq.n	8011ec4 <__gethex+0x12a>
 8011dfe:	4633      	mov	r3, r6
 8011e00:	7818      	ldrb	r0, [r3, #0]
 8011e02:	2830      	cmp	r0, #48	; 0x30
 8011e04:	461f      	mov	r7, r3
 8011e06:	f103 0301 	add.w	r3, r3, #1
 8011e0a:	d0f9      	beq.n	8011e00 <__gethex+0x66>
 8011e0c:	f7ff ffb0 	bl	8011d70 <__hexdig_fun>
 8011e10:	fab0 f580 	clz	r5, r0
 8011e14:	096d      	lsrs	r5, r5, #5
 8011e16:	4634      	mov	r4, r6
 8011e18:	f04f 0b01 	mov.w	fp, #1
 8011e1c:	463a      	mov	r2, r7
 8011e1e:	4616      	mov	r6, r2
 8011e20:	3201      	adds	r2, #1
 8011e22:	7830      	ldrb	r0, [r6, #0]
 8011e24:	f7ff ffa4 	bl	8011d70 <__hexdig_fun>
 8011e28:	2800      	cmp	r0, #0
 8011e2a:	d1f8      	bne.n	8011e1e <__gethex+0x84>
 8011e2c:	9a01      	ldr	r2, [sp, #4]
 8011e2e:	9903      	ldr	r1, [sp, #12]
 8011e30:	4630      	mov	r0, r6
 8011e32:	f001 f994 	bl	801315e <strncmp>
 8011e36:	b950      	cbnz	r0, 8011e4e <__gethex+0xb4>
 8011e38:	b954      	cbnz	r4, 8011e50 <__gethex+0xb6>
 8011e3a:	9b01      	ldr	r3, [sp, #4]
 8011e3c:	18f4      	adds	r4, r6, r3
 8011e3e:	4622      	mov	r2, r4
 8011e40:	4616      	mov	r6, r2
 8011e42:	3201      	adds	r2, #1
 8011e44:	7830      	ldrb	r0, [r6, #0]
 8011e46:	f7ff ff93 	bl	8011d70 <__hexdig_fun>
 8011e4a:	2800      	cmp	r0, #0
 8011e4c:	d1f8      	bne.n	8011e40 <__gethex+0xa6>
 8011e4e:	b10c      	cbz	r4, 8011e54 <__gethex+0xba>
 8011e50:	1ba4      	subs	r4, r4, r6
 8011e52:	00a4      	lsls	r4, r4, #2
 8011e54:	7833      	ldrb	r3, [r6, #0]
 8011e56:	2b50      	cmp	r3, #80	; 0x50
 8011e58:	d001      	beq.n	8011e5e <__gethex+0xc4>
 8011e5a:	2b70      	cmp	r3, #112	; 0x70
 8011e5c:	d140      	bne.n	8011ee0 <__gethex+0x146>
 8011e5e:	7873      	ldrb	r3, [r6, #1]
 8011e60:	2b2b      	cmp	r3, #43	; 0x2b
 8011e62:	d031      	beq.n	8011ec8 <__gethex+0x12e>
 8011e64:	2b2d      	cmp	r3, #45	; 0x2d
 8011e66:	d033      	beq.n	8011ed0 <__gethex+0x136>
 8011e68:	1c71      	adds	r1, r6, #1
 8011e6a:	f04f 0900 	mov.w	r9, #0
 8011e6e:	7808      	ldrb	r0, [r1, #0]
 8011e70:	f7ff ff7e 	bl	8011d70 <__hexdig_fun>
 8011e74:	1e43      	subs	r3, r0, #1
 8011e76:	b2db      	uxtb	r3, r3
 8011e78:	2b18      	cmp	r3, #24
 8011e7a:	d831      	bhi.n	8011ee0 <__gethex+0x146>
 8011e7c:	f1a0 0210 	sub.w	r2, r0, #16
 8011e80:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011e84:	f7ff ff74 	bl	8011d70 <__hexdig_fun>
 8011e88:	1e43      	subs	r3, r0, #1
 8011e8a:	b2db      	uxtb	r3, r3
 8011e8c:	2b18      	cmp	r3, #24
 8011e8e:	d922      	bls.n	8011ed6 <__gethex+0x13c>
 8011e90:	f1b9 0f00 	cmp.w	r9, #0
 8011e94:	d000      	beq.n	8011e98 <__gethex+0xfe>
 8011e96:	4252      	negs	r2, r2
 8011e98:	4414      	add	r4, r2
 8011e9a:	f8ca 1000 	str.w	r1, [sl]
 8011e9e:	b30d      	cbz	r5, 8011ee4 <__gethex+0x14a>
 8011ea0:	f1bb 0f00 	cmp.w	fp, #0
 8011ea4:	bf0c      	ite	eq
 8011ea6:	2706      	moveq	r7, #6
 8011ea8:	2700      	movne	r7, #0
 8011eaa:	4638      	mov	r0, r7
 8011eac:	b00b      	add	sp, #44	; 0x2c
 8011eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011eb2:	f10b 0b01 	add.w	fp, fp, #1
 8011eb6:	e78a      	b.n	8011dce <__gethex+0x34>
 8011eb8:	2500      	movs	r5, #0
 8011eba:	462c      	mov	r4, r5
 8011ebc:	e7ae      	b.n	8011e1c <__gethex+0x82>
 8011ebe:	463e      	mov	r6, r7
 8011ec0:	2501      	movs	r5, #1
 8011ec2:	e7c7      	b.n	8011e54 <__gethex+0xba>
 8011ec4:	4604      	mov	r4, r0
 8011ec6:	e7fb      	b.n	8011ec0 <__gethex+0x126>
 8011ec8:	f04f 0900 	mov.w	r9, #0
 8011ecc:	1cb1      	adds	r1, r6, #2
 8011ece:	e7ce      	b.n	8011e6e <__gethex+0xd4>
 8011ed0:	f04f 0901 	mov.w	r9, #1
 8011ed4:	e7fa      	b.n	8011ecc <__gethex+0x132>
 8011ed6:	230a      	movs	r3, #10
 8011ed8:	fb03 0202 	mla	r2, r3, r2, r0
 8011edc:	3a10      	subs	r2, #16
 8011ede:	e7cf      	b.n	8011e80 <__gethex+0xe6>
 8011ee0:	4631      	mov	r1, r6
 8011ee2:	e7da      	b.n	8011e9a <__gethex+0x100>
 8011ee4:	1bf3      	subs	r3, r6, r7
 8011ee6:	3b01      	subs	r3, #1
 8011ee8:	4629      	mov	r1, r5
 8011eea:	2b07      	cmp	r3, #7
 8011eec:	dc49      	bgt.n	8011f82 <__gethex+0x1e8>
 8011eee:	9802      	ldr	r0, [sp, #8]
 8011ef0:	f000 fa52 	bl	8012398 <_Balloc>
 8011ef4:	9b01      	ldr	r3, [sp, #4]
 8011ef6:	f100 0914 	add.w	r9, r0, #20
 8011efa:	f04f 0b00 	mov.w	fp, #0
 8011efe:	f1c3 0301 	rsb	r3, r3, #1
 8011f02:	4605      	mov	r5, r0
 8011f04:	f8cd 9010 	str.w	r9, [sp, #16]
 8011f08:	46da      	mov	sl, fp
 8011f0a:	9308      	str	r3, [sp, #32]
 8011f0c:	42b7      	cmp	r7, r6
 8011f0e:	d33b      	bcc.n	8011f88 <__gethex+0x1ee>
 8011f10:	9804      	ldr	r0, [sp, #16]
 8011f12:	f840 ab04 	str.w	sl, [r0], #4
 8011f16:	eba0 0009 	sub.w	r0, r0, r9
 8011f1a:	1080      	asrs	r0, r0, #2
 8011f1c:	6128      	str	r0, [r5, #16]
 8011f1e:	0147      	lsls	r7, r0, #5
 8011f20:	4650      	mov	r0, sl
 8011f22:	f000 fafd 	bl	8012520 <__hi0bits>
 8011f26:	f8d8 6000 	ldr.w	r6, [r8]
 8011f2a:	1a3f      	subs	r7, r7, r0
 8011f2c:	42b7      	cmp	r7, r6
 8011f2e:	dd64      	ble.n	8011ffa <__gethex+0x260>
 8011f30:	1bbf      	subs	r7, r7, r6
 8011f32:	4639      	mov	r1, r7
 8011f34:	4628      	mov	r0, r5
 8011f36:	f000 fe0d 	bl	8012b54 <__any_on>
 8011f3a:	4682      	mov	sl, r0
 8011f3c:	b178      	cbz	r0, 8011f5e <__gethex+0x1c4>
 8011f3e:	1e7b      	subs	r3, r7, #1
 8011f40:	1159      	asrs	r1, r3, #5
 8011f42:	f003 021f 	and.w	r2, r3, #31
 8011f46:	f04f 0a01 	mov.w	sl, #1
 8011f4a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8011f4e:	fa0a f202 	lsl.w	r2, sl, r2
 8011f52:	420a      	tst	r2, r1
 8011f54:	d003      	beq.n	8011f5e <__gethex+0x1c4>
 8011f56:	4553      	cmp	r3, sl
 8011f58:	dc46      	bgt.n	8011fe8 <__gethex+0x24e>
 8011f5a:	f04f 0a02 	mov.w	sl, #2
 8011f5e:	4639      	mov	r1, r7
 8011f60:	4628      	mov	r0, r5
 8011f62:	f7ff fecb 	bl	8011cfc <rshift>
 8011f66:	443c      	add	r4, r7
 8011f68:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011f6c:	42a3      	cmp	r3, r4
 8011f6e:	da52      	bge.n	8012016 <__gethex+0x27c>
 8011f70:	4629      	mov	r1, r5
 8011f72:	9802      	ldr	r0, [sp, #8]
 8011f74:	f000 fa44 	bl	8012400 <_Bfree>
 8011f78:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011f7a:	2300      	movs	r3, #0
 8011f7c:	6013      	str	r3, [r2, #0]
 8011f7e:	27a3      	movs	r7, #163	; 0xa3
 8011f80:	e793      	b.n	8011eaa <__gethex+0x110>
 8011f82:	3101      	adds	r1, #1
 8011f84:	105b      	asrs	r3, r3, #1
 8011f86:	e7b0      	b.n	8011eea <__gethex+0x150>
 8011f88:	1e73      	subs	r3, r6, #1
 8011f8a:	9305      	str	r3, [sp, #20]
 8011f8c:	9a07      	ldr	r2, [sp, #28]
 8011f8e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011f92:	4293      	cmp	r3, r2
 8011f94:	d018      	beq.n	8011fc8 <__gethex+0x22e>
 8011f96:	f1bb 0f20 	cmp.w	fp, #32
 8011f9a:	d107      	bne.n	8011fac <__gethex+0x212>
 8011f9c:	9b04      	ldr	r3, [sp, #16]
 8011f9e:	f8c3 a000 	str.w	sl, [r3]
 8011fa2:	3304      	adds	r3, #4
 8011fa4:	f04f 0a00 	mov.w	sl, #0
 8011fa8:	9304      	str	r3, [sp, #16]
 8011faa:	46d3      	mov	fp, sl
 8011fac:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8011fb0:	f7ff fede 	bl	8011d70 <__hexdig_fun>
 8011fb4:	f000 000f 	and.w	r0, r0, #15
 8011fb8:	fa00 f00b 	lsl.w	r0, r0, fp
 8011fbc:	ea4a 0a00 	orr.w	sl, sl, r0
 8011fc0:	f10b 0b04 	add.w	fp, fp, #4
 8011fc4:	9b05      	ldr	r3, [sp, #20]
 8011fc6:	e00d      	b.n	8011fe4 <__gethex+0x24a>
 8011fc8:	9b05      	ldr	r3, [sp, #20]
 8011fca:	9a08      	ldr	r2, [sp, #32]
 8011fcc:	4413      	add	r3, r2
 8011fce:	42bb      	cmp	r3, r7
 8011fd0:	d3e1      	bcc.n	8011f96 <__gethex+0x1fc>
 8011fd2:	4618      	mov	r0, r3
 8011fd4:	9a01      	ldr	r2, [sp, #4]
 8011fd6:	9903      	ldr	r1, [sp, #12]
 8011fd8:	9309      	str	r3, [sp, #36]	; 0x24
 8011fda:	f001 f8c0 	bl	801315e <strncmp>
 8011fde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011fe0:	2800      	cmp	r0, #0
 8011fe2:	d1d8      	bne.n	8011f96 <__gethex+0x1fc>
 8011fe4:	461e      	mov	r6, r3
 8011fe6:	e791      	b.n	8011f0c <__gethex+0x172>
 8011fe8:	1eb9      	subs	r1, r7, #2
 8011fea:	4628      	mov	r0, r5
 8011fec:	f000 fdb2 	bl	8012b54 <__any_on>
 8011ff0:	2800      	cmp	r0, #0
 8011ff2:	d0b2      	beq.n	8011f5a <__gethex+0x1c0>
 8011ff4:	f04f 0a03 	mov.w	sl, #3
 8011ff8:	e7b1      	b.n	8011f5e <__gethex+0x1c4>
 8011ffa:	da09      	bge.n	8012010 <__gethex+0x276>
 8011ffc:	1bf7      	subs	r7, r6, r7
 8011ffe:	4629      	mov	r1, r5
 8012000:	463a      	mov	r2, r7
 8012002:	9802      	ldr	r0, [sp, #8]
 8012004:	f000 fbc8 	bl	8012798 <__lshift>
 8012008:	1be4      	subs	r4, r4, r7
 801200a:	4605      	mov	r5, r0
 801200c:	f100 0914 	add.w	r9, r0, #20
 8012010:	f04f 0a00 	mov.w	sl, #0
 8012014:	e7a8      	b.n	8011f68 <__gethex+0x1ce>
 8012016:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801201a:	42a0      	cmp	r0, r4
 801201c:	dd6a      	ble.n	80120f4 <__gethex+0x35a>
 801201e:	1b04      	subs	r4, r0, r4
 8012020:	42a6      	cmp	r6, r4
 8012022:	dc2e      	bgt.n	8012082 <__gethex+0x2e8>
 8012024:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012028:	2b02      	cmp	r3, #2
 801202a:	d022      	beq.n	8012072 <__gethex+0x2d8>
 801202c:	2b03      	cmp	r3, #3
 801202e:	d024      	beq.n	801207a <__gethex+0x2e0>
 8012030:	2b01      	cmp	r3, #1
 8012032:	d115      	bne.n	8012060 <__gethex+0x2c6>
 8012034:	42a6      	cmp	r6, r4
 8012036:	d113      	bne.n	8012060 <__gethex+0x2c6>
 8012038:	2e01      	cmp	r6, #1
 801203a:	dc0b      	bgt.n	8012054 <__gethex+0x2ba>
 801203c:	9a06      	ldr	r2, [sp, #24]
 801203e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012042:	6013      	str	r3, [r2, #0]
 8012044:	2301      	movs	r3, #1
 8012046:	612b      	str	r3, [r5, #16]
 8012048:	f8c9 3000 	str.w	r3, [r9]
 801204c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801204e:	2762      	movs	r7, #98	; 0x62
 8012050:	601d      	str	r5, [r3, #0]
 8012052:	e72a      	b.n	8011eaa <__gethex+0x110>
 8012054:	1e71      	subs	r1, r6, #1
 8012056:	4628      	mov	r0, r5
 8012058:	f000 fd7c 	bl	8012b54 <__any_on>
 801205c:	2800      	cmp	r0, #0
 801205e:	d1ed      	bne.n	801203c <__gethex+0x2a2>
 8012060:	4629      	mov	r1, r5
 8012062:	9802      	ldr	r0, [sp, #8]
 8012064:	f000 f9cc 	bl	8012400 <_Bfree>
 8012068:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801206a:	2300      	movs	r3, #0
 801206c:	6013      	str	r3, [r2, #0]
 801206e:	2750      	movs	r7, #80	; 0x50
 8012070:	e71b      	b.n	8011eaa <__gethex+0x110>
 8012072:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012074:	2b00      	cmp	r3, #0
 8012076:	d0e1      	beq.n	801203c <__gethex+0x2a2>
 8012078:	e7f2      	b.n	8012060 <__gethex+0x2c6>
 801207a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801207c:	2b00      	cmp	r3, #0
 801207e:	d1dd      	bne.n	801203c <__gethex+0x2a2>
 8012080:	e7ee      	b.n	8012060 <__gethex+0x2c6>
 8012082:	1e67      	subs	r7, r4, #1
 8012084:	f1ba 0f00 	cmp.w	sl, #0
 8012088:	d131      	bne.n	80120ee <__gethex+0x354>
 801208a:	b127      	cbz	r7, 8012096 <__gethex+0x2fc>
 801208c:	4639      	mov	r1, r7
 801208e:	4628      	mov	r0, r5
 8012090:	f000 fd60 	bl	8012b54 <__any_on>
 8012094:	4682      	mov	sl, r0
 8012096:	117a      	asrs	r2, r7, #5
 8012098:	2301      	movs	r3, #1
 801209a:	f007 071f 	and.w	r7, r7, #31
 801209e:	fa03 f707 	lsl.w	r7, r3, r7
 80120a2:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80120a6:	4621      	mov	r1, r4
 80120a8:	421f      	tst	r7, r3
 80120aa:	4628      	mov	r0, r5
 80120ac:	bf18      	it	ne
 80120ae:	f04a 0a02 	orrne.w	sl, sl, #2
 80120b2:	1b36      	subs	r6, r6, r4
 80120b4:	f7ff fe22 	bl	8011cfc <rshift>
 80120b8:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80120bc:	2702      	movs	r7, #2
 80120be:	f1ba 0f00 	cmp.w	sl, #0
 80120c2:	d048      	beq.n	8012156 <__gethex+0x3bc>
 80120c4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80120c8:	2b02      	cmp	r3, #2
 80120ca:	d015      	beq.n	80120f8 <__gethex+0x35e>
 80120cc:	2b03      	cmp	r3, #3
 80120ce:	d017      	beq.n	8012100 <__gethex+0x366>
 80120d0:	2b01      	cmp	r3, #1
 80120d2:	d109      	bne.n	80120e8 <__gethex+0x34e>
 80120d4:	f01a 0f02 	tst.w	sl, #2
 80120d8:	d006      	beq.n	80120e8 <__gethex+0x34e>
 80120da:	f8d9 3000 	ldr.w	r3, [r9]
 80120de:	ea4a 0a03 	orr.w	sl, sl, r3
 80120e2:	f01a 0f01 	tst.w	sl, #1
 80120e6:	d10e      	bne.n	8012106 <__gethex+0x36c>
 80120e8:	f047 0710 	orr.w	r7, r7, #16
 80120ec:	e033      	b.n	8012156 <__gethex+0x3bc>
 80120ee:	f04f 0a01 	mov.w	sl, #1
 80120f2:	e7d0      	b.n	8012096 <__gethex+0x2fc>
 80120f4:	2701      	movs	r7, #1
 80120f6:	e7e2      	b.n	80120be <__gethex+0x324>
 80120f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80120fa:	f1c3 0301 	rsb	r3, r3, #1
 80120fe:	9315      	str	r3, [sp, #84]	; 0x54
 8012100:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012102:	2b00      	cmp	r3, #0
 8012104:	d0f0      	beq.n	80120e8 <__gethex+0x34e>
 8012106:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801210a:	f105 0314 	add.w	r3, r5, #20
 801210e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8012112:	eb03 010a 	add.w	r1, r3, sl
 8012116:	f04f 0c00 	mov.w	ip, #0
 801211a:	4618      	mov	r0, r3
 801211c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012120:	f1b2 3fff 	cmp.w	r2, #4294967295
 8012124:	d01c      	beq.n	8012160 <__gethex+0x3c6>
 8012126:	3201      	adds	r2, #1
 8012128:	6002      	str	r2, [r0, #0]
 801212a:	2f02      	cmp	r7, #2
 801212c:	f105 0314 	add.w	r3, r5, #20
 8012130:	d138      	bne.n	80121a4 <__gethex+0x40a>
 8012132:	f8d8 2000 	ldr.w	r2, [r8]
 8012136:	3a01      	subs	r2, #1
 8012138:	42b2      	cmp	r2, r6
 801213a:	d10a      	bne.n	8012152 <__gethex+0x3b8>
 801213c:	1171      	asrs	r1, r6, #5
 801213e:	2201      	movs	r2, #1
 8012140:	f006 061f 	and.w	r6, r6, #31
 8012144:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012148:	fa02 f606 	lsl.w	r6, r2, r6
 801214c:	421e      	tst	r6, r3
 801214e:	bf18      	it	ne
 8012150:	4617      	movne	r7, r2
 8012152:	f047 0720 	orr.w	r7, r7, #32
 8012156:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012158:	601d      	str	r5, [r3, #0]
 801215a:	9b06      	ldr	r3, [sp, #24]
 801215c:	601c      	str	r4, [r3, #0]
 801215e:	e6a4      	b.n	8011eaa <__gethex+0x110>
 8012160:	4299      	cmp	r1, r3
 8012162:	f843 cc04 	str.w	ip, [r3, #-4]
 8012166:	d8d8      	bhi.n	801211a <__gethex+0x380>
 8012168:	68ab      	ldr	r3, [r5, #8]
 801216a:	4599      	cmp	r9, r3
 801216c:	db12      	blt.n	8012194 <__gethex+0x3fa>
 801216e:	6869      	ldr	r1, [r5, #4]
 8012170:	9802      	ldr	r0, [sp, #8]
 8012172:	3101      	adds	r1, #1
 8012174:	f000 f910 	bl	8012398 <_Balloc>
 8012178:	692a      	ldr	r2, [r5, #16]
 801217a:	3202      	adds	r2, #2
 801217c:	f105 010c 	add.w	r1, r5, #12
 8012180:	4683      	mov	fp, r0
 8012182:	0092      	lsls	r2, r2, #2
 8012184:	300c      	adds	r0, #12
 8012186:	f7fd f8b1 	bl	800f2ec <memcpy>
 801218a:	4629      	mov	r1, r5
 801218c:	9802      	ldr	r0, [sp, #8]
 801218e:	f000 f937 	bl	8012400 <_Bfree>
 8012192:	465d      	mov	r5, fp
 8012194:	692b      	ldr	r3, [r5, #16]
 8012196:	1c5a      	adds	r2, r3, #1
 8012198:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801219c:	612a      	str	r2, [r5, #16]
 801219e:	2201      	movs	r2, #1
 80121a0:	615a      	str	r2, [r3, #20]
 80121a2:	e7c2      	b.n	801212a <__gethex+0x390>
 80121a4:	692a      	ldr	r2, [r5, #16]
 80121a6:	454a      	cmp	r2, r9
 80121a8:	dd0b      	ble.n	80121c2 <__gethex+0x428>
 80121aa:	2101      	movs	r1, #1
 80121ac:	4628      	mov	r0, r5
 80121ae:	f7ff fda5 	bl	8011cfc <rshift>
 80121b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80121b6:	3401      	adds	r4, #1
 80121b8:	42a3      	cmp	r3, r4
 80121ba:	f6ff aed9 	blt.w	8011f70 <__gethex+0x1d6>
 80121be:	2701      	movs	r7, #1
 80121c0:	e7c7      	b.n	8012152 <__gethex+0x3b8>
 80121c2:	f016 061f 	ands.w	r6, r6, #31
 80121c6:	d0fa      	beq.n	80121be <__gethex+0x424>
 80121c8:	449a      	add	sl, r3
 80121ca:	f1c6 0620 	rsb	r6, r6, #32
 80121ce:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80121d2:	f000 f9a5 	bl	8012520 <__hi0bits>
 80121d6:	42b0      	cmp	r0, r6
 80121d8:	dbe7      	blt.n	80121aa <__gethex+0x410>
 80121da:	e7f0      	b.n	80121be <__gethex+0x424>

080121dc <L_shift>:
 80121dc:	f1c2 0208 	rsb	r2, r2, #8
 80121e0:	0092      	lsls	r2, r2, #2
 80121e2:	b570      	push	{r4, r5, r6, lr}
 80121e4:	f1c2 0620 	rsb	r6, r2, #32
 80121e8:	6843      	ldr	r3, [r0, #4]
 80121ea:	6804      	ldr	r4, [r0, #0]
 80121ec:	fa03 f506 	lsl.w	r5, r3, r6
 80121f0:	432c      	orrs	r4, r5
 80121f2:	40d3      	lsrs	r3, r2
 80121f4:	6004      	str	r4, [r0, #0]
 80121f6:	f840 3f04 	str.w	r3, [r0, #4]!
 80121fa:	4288      	cmp	r0, r1
 80121fc:	d3f4      	bcc.n	80121e8 <L_shift+0xc>
 80121fe:	bd70      	pop	{r4, r5, r6, pc}

08012200 <__match>:
 8012200:	b530      	push	{r4, r5, lr}
 8012202:	6803      	ldr	r3, [r0, #0]
 8012204:	3301      	adds	r3, #1
 8012206:	f811 4b01 	ldrb.w	r4, [r1], #1
 801220a:	b914      	cbnz	r4, 8012212 <__match+0x12>
 801220c:	6003      	str	r3, [r0, #0]
 801220e:	2001      	movs	r0, #1
 8012210:	bd30      	pop	{r4, r5, pc}
 8012212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012216:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801221a:	2d19      	cmp	r5, #25
 801221c:	bf98      	it	ls
 801221e:	3220      	addls	r2, #32
 8012220:	42a2      	cmp	r2, r4
 8012222:	d0f0      	beq.n	8012206 <__match+0x6>
 8012224:	2000      	movs	r0, #0
 8012226:	e7f3      	b.n	8012210 <__match+0x10>

08012228 <__hexnan>:
 8012228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801222c:	680b      	ldr	r3, [r1, #0]
 801222e:	6801      	ldr	r1, [r0, #0]
 8012230:	115f      	asrs	r7, r3, #5
 8012232:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8012236:	f013 031f 	ands.w	r3, r3, #31
 801223a:	b087      	sub	sp, #28
 801223c:	bf18      	it	ne
 801223e:	3704      	addne	r7, #4
 8012240:	2500      	movs	r5, #0
 8012242:	1f3e      	subs	r6, r7, #4
 8012244:	4682      	mov	sl, r0
 8012246:	4690      	mov	r8, r2
 8012248:	9301      	str	r3, [sp, #4]
 801224a:	f847 5c04 	str.w	r5, [r7, #-4]
 801224e:	46b1      	mov	r9, r6
 8012250:	4634      	mov	r4, r6
 8012252:	9502      	str	r5, [sp, #8]
 8012254:	46ab      	mov	fp, r5
 8012256:	784a      	ldrb	r2, [r1, #1]
 8012258:	1c4b      	adds	r3, r1, #1
 801225a:	9303      	str	r3, [sp, #12]
 801225c:	b342      	cbz	r2, 80122b0 <__hexnan+0x88>
 801225e:	4610      	mov	r0, r2
 8012260:	9105      	str	r1, [sp, #20]
 8012262:	9204      	str	r2, [sp, #16]
 8012264:	f7ff fd84 	bl	8011d70 <__hexdig_fun>
 8012268:	2800      	cmp	r0, #0
 801226a:	d143      	bne.n	80122f4 <__hexnan+0xcc>
 801226c:	9a04      	ldr	r2, [sp, #16]
 801226e:	9905      	ldr	r1, [sp, #20]
 8012270:	2a20      	cmp	r2, #32
 8012272:	d818      	bhi.n	80122a6 <__hexnan+0x7e>
 8012274:	9b02      	ldr	r3, [sp, #8]
 8012276:	459b      	cmp	fp, r3
 8012278:	dd13      	ble.n	80122a2 <__hexnan+0x7a>
 801227a:	454c      	cmp	r4, r9
 801227c:	d206      	bcs.n	801228c <__hexnan+0x64>
 801227e:	2d07      	cmp	r5, #7
 8012280:	dc04      	bgt.n	801228c <__hexnan+0x64>
 8012282:	462a      	mov	r2, r5
 8012284:	4649      	mov	r1, r9
 8012286:	4620      	mov	r0, r4
 8012288:	f7ff ffa8 	bl	80121dc <L_shift>
 801228c:	4544      	cmp	r4, r8
 801228e:	d944      	bls.n	801231a <__hexnan+0xf2>
 8012290:	2300      	movs	r3, #0
 8012292:	f1a4 0904 	sub.w	r9, r4, #4
 8012296:	f844 3c04 	str.w	r3, [r4, #-4]
 801229a:	f8cd b008 	str.w	fp, [sp, #8]
 801229e:	464c      	mov	r4, r9
 80122a0:	461d      	mov	r5, r3
 80122a2:	9903      	ldr	r1, [sp, #12]
 80122a4:	e7d7      	b.n	8012256 <__hexnan+0x2e>
 80122a6:	2a29      	cmp	r2, #41	; 0x29
 80122a8:	d14a      	bne.n	8012340 <__hexnan+0x118>
 80122aa:	3102      	adds	r1, #2
 80122ac:	f8ca 1000 	str.w	r1, [sl]
 80122b0:	f1bb 0f00 	cmp.w	fp, #0
 80122b4:	d044      	beq.n	8012340 <__hexnan+0x118>
 80122b6:	454c      	cmp	r4, r9
 80122b8:	d206      	bcs.n	80122c8 <__hexnan+0xa0>
 80122ba:	2d07      	cmp	r5, #7
 80122bc:	dc04      	bgt.n	80122c8 <__hexnan+0xa0>
 80122be:	462a      	mov	r2, r5
 80122c0:	4649      	mov	r1, r9
 80122c2:	4620      	mov	r0, r4
 80122c4:	f7ff ff8a 	bl	80121dc <L_shift>
 80122c8:	4544      	cmp	r4, r8
 80122ca:	d928      	bls.n	801231e <__hexnan+0xf6>
 80122cc:	4643      	mov	r3, r8
 80122ce:	f854 2b04 	ldr.w	r2, [r4], #4
 80122d2:	f843 2b04 	str.w	r2, [r3], #4
 80122d6:	42a6      	cmp	r6, r4
 80122d8:	d2f9      	bcs.n	80122ce <__hexnan+0xa6>
 80122da:	2200      	movs	r2, #0
 80122dc:	f843 2b04 	str.w	r2, [r3], #4
 80122e0:	429e      	cmp	r6, r3
 80122e2:	d2fb      	bcs.n	80122dc <__hexnan+0xb4>
 80122e4:	6833      	ldr	r3, [r6, #0]
 80122e6:	b91b      	cbnz	r3, 80122f0 <__hexnan+0xc8>
 80122e8:	4546      	cmp	r6, r8
 80122ea:	d127      	bne.n	801233c <__hexnan+0x114>
 80122ec:	2301      	movs	r3, #1
 80122ee:	6033      	str	r3, [r6, #0]
 80122f0:	2005      	movs	r0, #5
 80122f2:	e026      	b.n	8012342 <__hexnan+0x11a>
 80122f4:	3501      	adds	r5, #1
 80122f6:	2d08      	cmp	r5, #8
 80122f8:	f10b 0b01 	add.w	fp, fp, #1
 80122fc:	dd06      	ble.n	801230c <__hexnan+0xe4>
 80122fe:	4544      	cmp	r4, r8
 8012300:	d9cf      	bls.n	80122a2 <__hexnan+0x7a>
 8012302:	2300      	movs	r3, #0
 8012304:	f844 3c04 	str.w	r3, [r4, #-4]
 8012308:	2501      	movs	r5, #1
 801230a:	3c04      	subs	r4, #4
 801230c:	6822      	ldr	r2, [r4, #0]
 801230e:	f000 000f 	and.w	r0, r0, #15
 8012312:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8012316:	6020      	str	r0, [r4, #0]
 8012318:	e7c3      	b.n	80122a2 <__hexnan+0x7a>
 801231a:	2508      	movs	r5, #8
 801231c:	e7c1      	b.n	80122a2 <__hexnan+0x7a>
 801231e:	9b01      	ldr	r3, [sp, #4]
 8012320:	2b00      	cmp	r3, #0
 8012322:	d0df      	beq.n	80122e4 <__hexnan+0xbc>
 8012324:	f04f 32ff 	mov.w	r2, #4294967295
 8012328:	f1c3 0320 	rsb	r3, r3, #32
 801232c:	fa22 f303 	lsr.w	r3, r2, r3
 8012330:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8012334:	401a      	ands	r2, r3
 8012336:	f847 2c04 	str.w	r2, [r7, #-4]
 801233a:	e7d3      	b.n	80122e4 <__hexnan+0xbc>
 801233c:	3e04      	subs	r6, #4
 801233e:	e7d1      	b.n	80122e4 <__hexnan+0xbc>
 8012340:	2004      	movs	r0, #4
 8012342:	b007      	add	sp, #28
 8012344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012348 <__locale_ctype_ptr_l>:
 8012348:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 801234c:	4770      	bx	lr

0801234e <__localeconv_l>:
 801234e:	30f0      	adds	r0, #240	; 0xf0
 8012350:	4770      	bx	lr
	...

08012354 <_localeconv_r>:
 8012354:	4b04      	ldr	r3, [pc, #16]	; (8012368 <_localeconv_r+0x14>)
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	6a18      	ldr	r0, [r3, #32]
 801235a:	4b04      	ldr	r3, [pc, #16]	; (801236c <_localeconv_r+0x18>)
 801235c:	2800      	cmp	r0, #0
 801235e:	bf08      	it	eq
 8012360:	4618      	moveq	r0, r3
 8012362:	30f0      	adds	r0, #240	; 0xf0
 8012364:	4770      	bx	lr
 8012366:	bf00      	nop
 8012368:	20000190 	.word	0x20000190
 801236c:	200001f4 	.word	0x200001f4

08012370 <__ascii_mbtowc>:
 8012370:	b082      	sub	sp, #8
 8012372:	b901      	cbnz	r1, 8012376 <__ascii_mbtowc+0x6>
 8012374:	a901      	add	r1, sp, #4
 8012376:	b142      	cbz	r2, 801238a <__ascii_mbtowc+0x1a>
 8012378:	b14b      	cbz	r3, 801238e <__ascii_mbtowc+0x1e>
 801237a:	7813      	ldrb	r3, [r2, #0]
 801237c:	600b      	str	r3, [r1, #0]
 801237e:	7812      	ldrb	r2, [r2, #0]
 8012380:	1c10      	adds	r0, r2, #0
 8012382:	bf18      	it	ne
 8012384:	2001      	movne	r0, #1
 8012386:	b002      	add	sp, #8
 8012388:	4770      	bx	lr
 801238a:	4610      	mov	r0, r2
 801238c:	e7fb      	b.n	8012386 <__ascii_mbtowc+0x16>
 801238e:	f06f 0001 	mvn.w	r0, #1
 8012392:	e7f8      	b.n	8012386 <__ascii_mbtowc+0x16>

08012394 <__malloc_lock>:
 8012394:	4770      	bx	lr

08012396 <__malloc_unlock>:
 8012396:	4770      	bx	lr

08012398 <_Balloc>:
 8012398:	b570      	push	{r4, r5, r6, lr}
 801239a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801239c:	4604      	mov	r4, r0
 801239e:	460e      	mov	r6, r1
 80123a0:	b93d      	cbnz	r5, 80123b2 <_Balloc+0x1a>
 80123a2:	2010      	movs	r0, #16
 80123a4:	f7fc ff92 	bl	800f2cc <malloc>
 80123a8:	6260      	str	r0, [r4, #36]	; 0x24
 80123aa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80123ae:	6005      	str	r5, [r0, #0]
 80123b0:	60c5      	str	r5, [r0, #12]
 80123b2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80123b4:	68eb      	ldr	r3, [r5, #12]
 80123b6:	b183      	cbz	r3, 80123da <_Balloc+0x42>
 80123b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80123ba:	68db      	ldr	r3, [r3, #12]
 80123bc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80123c0:	b9b8      	cbnz	r0, 80123f2 <_Balloc+0x5a>
 80123c2:	2101      	movs	r1, #1
 80123c4:	fa01 f506 	lsl.w	r5, r1, r6
 80123c8:	1d6a      	adds	r2, r5, #5
 80123ca:	0092      	lsls	r2, r2, #2
 80123cc:	4620      	mov	r0, r4
 80123ce:	f000 fbe2 	bl	8012b96 <_calloc_r>
 80123d2:	b160      	cbz	r0, 80123ee <_Balloc+0x56>
 80123d4:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80123d8:	e00e      	b.n	80123f8 <_Balloc+0x60>
 80123da:	2221      	movs	r2, #33	; 0x21
 80123dc:	2104      	movs	r1, #4
 80123de:	4620      	mov	r0, r4
 80123e0:	f000 fbd9 	bl	8012b96 <_calloc_r>
 80123e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80123e6:	60e8      	str	r0, [r5, #12]
 80123e8:	68db      	ldr	r3, [r3, #12]
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d1e4      	bne.n	80123b8 <_Balloc+0x20>
 80123ee:	2000      	movs	r0, #0
 80123f0:	bd70      	pop	{r4, r5, r6, pc}
 80123f2:	6802      	ldr	r2, [r0, #0]
 80123f4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80123f8:	2300      	movs	r3, #0
 80123fa:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80123fe:	e7f7      	b.n	80123f0 <_Balloc+0x58>

08012400 <_Bfree>:
 8012400:	b570      	push	{r4, r5, r6, lr}
 8012402:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8012404:	4606      	mov	r6, r0
 8012406:	460d      	mov	r5, r1
 8012408:	b93c      	cbnz	r4, 801241a <_Bfree+0x1a>
 801240a:	2010      	movs	r0, #16
 801240c:	f7fc ff5e 	bl	800f2cc <malloc>
 8012410:	6270      	str	r0, [r6, #36]	; 0x24
 8012412:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012416:	6004      	str	r4, [r0, #0]
 8012418:	60c4      	str	r4, [r0, #12]
 801241a:	b13d      	cbz	r5, 801242c <_Bfree+0x2c>
 801241c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801241e:	686a      	ldr	r2, [r5, #4]
 8012420:	68db      	ldr	r3, [r3, #12]
 8012422:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012426:	6029      	str	r1, [r5, #0]
 8012428:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801242c:	bd70      	pop	{r4, r5, r6, pc}

0801242e <__multadd>:
 801242e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012432:	690d      	ldr	r5, [r1, #16]
 8012434:	461f      	mov	r7, r3
 8012436:	4606      	mov	r6, r0
 8012438:	460c      	mov	r4, r1
 801243a:	f101 0c14 	add.w	ip, r1, #20
 801243e:	2300      	movs	r3, #0
 8012440:	f8dc 0000 	ldr.w	r0, [ip]
 8012444:	b281      	uxth	r1, r0
 8012446:	fb02 7101 	mla	r1, r2, r1, r7
 801244a:	0c0f      	lsrs	r7, r1, #16
 801244c:	0c00      	lsrs	r0, r0, #16
 801244e:	fb02 7000 	mla	r0, r2, r0, r7
 8012452:	b289      	uxth	r1, r1
 8012454:	3301      	adds	r3, #1
 8012456:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801245a:	429d      	cmp	r5, r3
 801245c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8012460:	f84c 1b04 	str.w	r1, [ip], #4
 8012464:	dcec      	bgt.n	8012440 <__multadd+0x12>
 8012466:	b1d7      	cbz	r7, 801249e <__multadd+0x70>
 8012468:	68a3      	ldr	r3, [r4, #8]
 801246a:	42ab      	cmp	r3, r5
 801246c:	dc12      	bgt.n	8012494 <__multadd+0x66>
 801246e:	6861      	ldr	r1, [r4, #4]
 8012470:	4630      	mov	r0, r6
 8012472:	3101      	adds	r1, #1
 8012474:	f7ff ff90 	bl	8012398 <_Balloc>
 8012478:	6922      	ldr	r2, [r4, #16]
 801247a:	3202      	adds	r2, #2
 801247c:	f104 010c 	add.w	r1, r4, #12
 8012480:	4680      	mov	r8, r0
 8012482:	0092      	lsls	r2, r2, #2
 8012484:	300c      	adds	r0, #12
 8012486:	f7fc ff31 	bl	800f2ec <memcpy>
 801248a:	4621      	mov	r1, r4
 801248c:	4630      	mov	r0, r6
 801248e:	f7ff ffb7 	bl	8012400 <_Bfree>
 8012492:	4644      	mov	r4, r8
 8012494:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012498:	3501      	adds	r5, #1
 801249a:	615f      	str	r7, [r3, #20]
 801249c:	6125      	str	r5, [r4, #16]
 801249e:	4620      	mov	r0, r4
 80124a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080124a4 <__s2b>:
 80124a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80124a8:	460c      	mov	r4, r1
 80124aa:	4615      	mov	r5, r2
 80124ac:	461f      	mov	r7, r3
 80124ae:	2209      	movs	r2, #9
 80124b0:	3308      	adds	r3, #8
 80124b2:	4606      	mov	r6, r0
 80124b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80124b8:	2100      	movs	r1, #0
 80124ba:	2201      	movs	r2, #1
 80124bc:	429a      	cmp	r2, r3
 80124be:	db20      	blt.n	8012502 <__s2b+0x5e>
 80124c0:	4630      	mov	r0, r6
 80124c2:	f7ff ff69 	bl	8012398 <_Balloc>
 80124c6:	9b08      	ldr	r3, [sp, #32]
 80124c8:	6143      	str	r3, [r0, #20]
 80124ca:	2d09      	cmp	r5, #9
 80124cc:	f04f 0301 	mov.w	r3, #1
 80124d0:	6103      	str	r3, [r0, #16]
 80124d2:	dd19      	ble.n	8012508 <__s2b+0x64>
 80124d4:	f104 0809 	add.w	r8, r4, #9
 80124d8:	46c1      	mov	r9, r8
 80124da:	442c      	add	r4, r5
 80124dc:	f819 3b01 	ldrb.w	r3, [r9], #1
 80124e0:	4601      	mov	r1, r0
 80124e2:	3b30      	subs	r3, #48	; 0x30
 80124e4:	220a      	movs	r2, #10
 80124e6:	4630      	mov	r0, r6
 80124e8:	f7ff ffa1 	bl	801242e <__multadd>
 80124ec:	45a1      	cmp	r9, r4
 80124ee:	d1f5      	bne.n	80124dc <__s2b+0x38>
 80124f0:	eb08 0405 	add.w	r4, r8, r5
 80124f4:	3c08      	subs	r4, #8
 80124f6:	1b2d      	subs	r5, r5, r4
 80124f8:	1963      	adds	r3, r4, r5
 80124fa:	42bb      	cmp	r3, r7
 80124fc:	db07      	blt.n	801250e <__s2b+0x6a>
 80124fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012502:	0052      	lsls	r2, r2, #1
 8012504:	3101      	adds	r1, #1
 8012506:	e7d9      	b.n	80124bc <__s2b+0x18>
 8012508:	340a      	adds	r4, #10
 801250a:	2509      	movs	r5, #9
 801250c:	e7f3      	b.n	80124f6 <__s2b+0x52>
 801250e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012512:	4601      	mov	r1, r0
 8012514:	3b30      	subs	r3, #48	; 0x30
 8012516:	220a      	movs	r2, #10
 8012518:	4630      	mov	r0, r6
 801251a:	f7ff ff88 	bl	801242e <__multadd>
 801251e:	e7eb      	b.n	80124f8 <__s2b+0x54>

08012520 <__hi0bits>:
 8012520:	0c02      	lsrs	r2, r0, #16
 8012522:	0412      	lsls	r2, r2, #16
 8012524:	4603      	mov	r3, r0
 8012526:	b9b2      	cbnz	r2, 8012556 <__hi0bits+0x36>
 8012528:	0403      	lsls	r3, r0, #16
 801252a:	2010      	movs	r0, #16
 801252c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8012530:	bf04      	itt	eq
 8012532:	021b      	lsleq	r3, r3, #8
 8012534:	3008      	addeq	r0, #8
 8012536:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801253a:	bf04      	itt	eq
 801253c:	011b      	lsleq	r3, r3, #4
 801253e:	3004      	addeq	r0, #4
 8012540:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8012544:	bf04      	itt	eq
 8012546:	009b      	lsleq	r3, r3, #2
 8012548:	3002      	addeq	r0, #2
 801254a:	2b00      	cmp	r3, #0
 801254c:	db06      	blt.n	801255c <__hi0bits+0x3c>
 801254e:	005b      	lsls	r3, r3, #1
 8012550:	d503      	bpl.n	801255a <__hi0bits+0x3a>
 8012552:	3001      	adds	r0, #1
 8012554:	4770      	bx	lr
 8012556:	2000      	movs	r0, #0
 8012558:	e7e8      	b.n	801252c <__hi0bits+0xc>
 801255a:	2020      	movs	r0, #32
 801255c:	4770      	bx	lr

0801255e <__lo0bits>:
 801255e:	6803      	ldr	r3, [r0, #0]
 8012560:	f013 0207 	ands.w	r2, r3, #7
 8012564:	4601      	mov	r1, r0
 8012566:	d00b      	beq.n	8012580 <__lo0bits+0x22>
 8012568:	07da      	lsls	r2, r3, #31
 801256a:	d423      	bmi.n	80125b4 <__lo0bits+0x56>
 801256c:	0798      	lsls	r0, r3, #30
 801256e:	bf49      	itett	mi
 8012570:	085b      	lsrmi	r3, r3, #1
 8012572:	089b      	lsrpl	r3, r3, #2
 8012574:	2001      	movmi	r0, #1
 8012576:	600b      	strmi	r3, [r1, #0]
 8012578:	bf5c      	itt	pl
 801257a:	600b      	strpl	r3, [r1, #0]
 801257c:	2002      	movpl	r0, #2
 801257e:	4770      	bx	lr
 8012580:	b298      	uxth	r0, r3
 8012582:	b9a8      	cbnz	r0, 80125b0 <__lo0bits+0x52>
 8012584:	0c1b      	lsrs	r3, r3, #16
 8012586:	2010      	movs	r0, #16
 8012588:	f013 0fff 	tst.w	r3, #255	; 0xff
 801258c:	bf04      	itt	eq
 801258e:	0a1b      	lsreq	r3, r3, #8
 8012590:	3008      	addeq	r0, #8
 8012592:	071a      	lsls	r2, r3, #28
 8012594:	bf04      	itt	eq
 8012596:	091b      	lsreq	r3, r3, #4
 8012598:	3004      	addeq	r0, #4
 801259a:	079a      	lsls	r2, r3, #30
 801259c:	bf04      	itt	eq
 801259e:	089b      	lsreq	r3, r3, #2
 80125a0:	3002      	addeq	r0, #2
 80125a2:	07da      	lsls	r2, r3, #31
 80125a4:	d402      	bmi.n	80125ac <__lo0bits+0x4e>
 80125a6:	085b      	lsrs	r3, r3, #1
 80125a8:	d006      	beq.n	80125b8 <__lo0bits+0x5a>
 80125aa:	3001      	adds	r0, #1
 80125ac:	600b      	str	r3, [r1, #0]
 80125ae:	4770      	bx	lr
 80125b0:	4610      	mov	r0, r2
 80125b2:	e7e9      	b.n	8012588 <__lo0bits+0x2a>
 80125b4:	2000      	movs	r0, #0
 80125b6:	4770      	bx	lr
 80125b8:	2020      	movs	r0, #32
 80125ba:	4770      	bx	lr

080125bc <__i2b>:
 80125bc:	b510      	push	{r4, lr}
 80125be:	460c      	mov	r4, r1
 80125c0:	2101      	movs	r1, #1
 80125c2:	f7ff fee9 	bl	8012398 <_Balloc>
 80125c6:	2201      	movs	r2, #1
 80125c8:	6144      	str	r4, [r0, #20]
 80125ca:	6102      	str	r2, [r0, #16]
 80125cc:	bd10      	pop	{r4, pc}

080125ce <__multiply>:
 80125ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125d2:	4614      	mov	r4, r2
 80125d4:	690a      	ldr	r2, [r1, #16]
 80125d6:	6923      	ldr	r3, [r4, #16]
 80125d8:	429a      	cmp	r2, r3
 80125da:	bfb8      	it	lt
 80125dc:	460b      	movlt	r3, r1
 80125de:	4688      	mov	r8, r1
 80125e0:	bfbc      	itt	lt
 80125e2:	46a0      	movlt	r8, r4
 80125e4:	461c      	movlt	r4, r3
 80125e6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80125ea:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80125ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80125f2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80125f6:	eb07 0609 	add.w	r6, r7, r9
 80125fa:	42b3      	cmp	r3, r6
 80125fc:	bfb8      	it	lt
 80125fe:	3101      	addlt	r1, #1
 8012600:	f7ff feca 	bl	8012398 <_Balloc>
 8012604:	f100 0514 	add.w	r5, r0, #20
 8012608:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 801260c:	462b      	mov	r3, r5
 801260e:	2200      	movs	r2, #0
 8012610:	4573      	cmp	r3, lr
 8012612:	d316      	bcc.n	8012642 <__multiply+0x74>
 8012614:	f104 0214 	add.w	r2, r4, #20
 8012618:	f108 0114 	add.w	r1, r8, #20
 801261c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8012620:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8012624:	9300      	str	r3, [sp, #0]
 8012626:	9b00      	ldr	r3, [sp, #0]
 8012628:	9201      	str	r2, [sp, #4]
 801262a:	4293      	cmp	r3, r2
 801262c:	d80c      	bhi.n	8012648 <__multiply+0x7a>
 801262e:	2e00      	cmp	r6, #0
 8012630:	dd03      	ble.n	801263a <__multiply+0x6c>
 8012632:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8012636:	2b00      	cmp	r3, #0
 8012638:	d05d      	beq.n	80126f6 <__multiply+0x128>
 801263a:	6106      	str	r6, [r0, #16]
 801263c:	b003      	add	sp, #12
 801263e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012642:	f843 2b04 	str.w	r2, [r3], #4
 8012646:	e7e3      	b.n	8012610 <__multiply+0x42>
 8012648:	f8b2 b000 	ldrh.w	fp, [r2]
 801264c:	f1bb 0f00 	cmp.w	fp, #0
 8012650:	d023      	beq.n	801269a <__multiply+0xcc>
 8012652:	4689      	mov	r9, r1
 8012654:	46ac      	mov	ip, r5
 8012656:	f04f 0800 	mov.w	r8, #0
 801265a:	f859 4b04 	ldr.w	r4, [r9], #4
 801265e:	f8dc a000 	ldr.w	sl, [ip]
 8012662:	b2a3      	uxth	r3, r4
 8012664:	fa1f fa8a 	uxth.w	sl, sl
 8012668:	fb0b a303 	mla	r3, fp, r3, sl
 801266c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8012670:	f8dc 4000 	ldr.w	r4, [ip]
 8012674:	4443      	add	r3, r8
 8012676:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801267a:	fb0b 840a 	mla	r4, fp, sl, r8
 801267e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8012682:	46e2      	mov	sl, ip
 8012684:	b29b      	uxth	r3, r3
 8012686:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801268a:	454f      	cmp	r7, r9
 801268c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8012690:	f84a 3b04 	str.w	r3, [sl], #4
 8012694:	d82b      	bhi.n	80126ee <__multiply+0x120>
 8012696:	f8cc 8004 	str.w	r8, [ip, #4]
 801269a:	9b01      	ldr	r3, [sp, #4]
 801269c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80126a0:	3204      	adds	r2, #4
 80126a2:	f1ba 0f00 	cmp.w	sl, #0
 80126a6:	d020      	beq.n	80126ea <__multiply+0x11c>
 80126a8:	682b      	ldr	r3, [r5, #0]
 80126aa:	4689      	mov	r9, r1
 80126ac:	46a8      	mov	r8, r5
 80126ae:	f04f 0b00 	mov.w	fp, #0
 80126b2:	f8b9 c000 	ldrh.w	ip, [r9]
 80126b6:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80126ba:	fb0a 440c 	mla	r4, sl, ip, r4
 80126be:	445c      	add	r4, fp
 80126c0:	46c4      	mov	ip, r8
 80126c2:	b29b      	uxth	r3, r3
 80126c4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80126c8:	f84c 3b04 	str.w	r3, [ip], #4
 80126cc:	f859 3b04 	ldr.w	r3, [r9], #4
 80126d0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80126d4:	0c1b      	lsrs	r3, r3, #16
 80126d6:	fb0a b303 	mla	r3, sl, r3, fp
 80126da:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80126de:	454f      	cmp	r7, r9
 80126e0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80126e4:	d805      	bhi.n	80126f2 <__multiply+0x124>
 80126e6:	f8c8 3004 	str.w	r3, [r8, #4]
 80126ea:	3504      	adds	r5, #4
 80126ec:	e79b      	b.n	8012626 <__multiply+0x58>
 80126ee:	46d4      	mov	ip, sl
 80126f0:	e7b3      	b.n	801265a <__multiply+0x8c>
 80126f2:	46e0      	mov	r8, ip
 80126f4:	e7dd      	b.n	80126b2 <__multiply+0xe4>
 80126f6:	3e01      	subs	r6, #1
 80126f8:	e799      	b.n	801262e <__multiply+0x60>
	...

080126fc <__pow5mult>:
 80126fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012700:	4615      	mov	r5, r2
 8012702:	f012 0203 	ands.w	r2, r2, #3
 8012706:	4606      	mov	r6, r0
 8012708:	460f      	mov	r7, r1
 801270a:	d007      	beq.n	801271c <__pow5mult+0x20>
 801270c:	3a01      	subs	r2, #1
 801270e:	4c21      	ldr	r4, [pc, #132]	; (8012794 <__pow5mult+0x98>)
 8012710:	2300      	movs	r3, #0
 8012712:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012716:	f7ff fe8a 	bl	801242e <__multadd>
 801271a:	4607      	mov	r7, r0
 801271c:	10ad      	asrs	r5, r5, #2
 801271e:	d035      	beq.n	801278c <__pow5mult+0x90>
 8012720:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012722:	b93c      	cbnz	r4, 8012734 <__pow5mult+0x38>
 8012724:	2010      	movs	r0, #16
 8012726:	f7fc fdd1 	bl	800f2cc <malloc>
 801272a:	6270      	str	r0, [r6, #36]	; 0x24
 801272c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012730:	6004      	str	r4, [r0, #0]
 8012732:	60c4      	str	r4, [r0, #12]
 8012734:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012738:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801273c:	b94c      	cbnz	r4, 8012752 <__pow5mult+0x56>
 801273e:	f240 2171 	movw	r1, #625	; 0x271
 8012742:	4630      	mov	r0, r6
 8012744:	f7ff ff3a 	bl	80125bc <__i2b>
 8012748:	2300      	movs	r3, #0
 801274a:	f8c8 0008 	str.w	r0, [r8, #8]
 801274e:	4604      	mov	r4, r0
 8012750:	6003      	str	r3, [r0, #0]
 8012752:	f04f 0800 	mov.w	r8, #0
 8012756:	07eb      	lsls	r3, r5, #31
 8012758:	d50a      	bpl.n	8012770 <__pow5mult+0x74>
 801275a:	4639      	mov	r1, r7
 801275c:	4622      	mov	r2, r4
 801275e:	4630      	mov	r0, r6
 8012760:	f7ff ff35 	bl	80125ce <__multiply>
 8012764:	4639      	mov	r1, r7
 8012766:	4681      	mov	r9, r0
 8012768:	4630      	mov	r0, r6
 801276a:	f7ff fe49 	bl	8012400 <_Bfree>
 801276e:	464f      	mov	r7, r9
 8012770:	106d      	asrs	r5, r5, #1
 8012772:	d00b      	beq.n	801278c <__pow5mult+0x90>
 8012774:	6820      	ldr	r0, [r4, #0]
 8012776:	b938      	cbnz	r0, 8012788 <__pow5mult+0x8c>
 8012778:	4622      	mov	r2, r4
 801277a:	4621      	mov	r1, r4
 801277c:	4630      	mov	r0, r6
 801277e:	f7ff ff26 	bl	80125ce <__multiply>
 8012782:	6020      	str	r0, [r4, #0]
 8012784:	f8c0 8000 	str.w	r8, [r0]
 8012788:	4604      	mov	r4, r0
 801278a:	e7e4      	b.n	8012756 <__pow5mult+0x5a>
 801278c:	4638      	mov	r0, r7
 801278e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012792:	bf00      	nop
 8012794:	08013ad0 	.word	0x08013ad0

08012798 <__lshift>:
 8012798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801279c:	460c      	mov	r4, r1
 801279e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80127a2:	6923      	ldr	r3, [r4, #16]
 80127a4:	6849      	ldr	r1, [r1, #4]
 80127a6:	eb0a 0903 	add.w	r9, sl, r3
 80127aa:	68a3      	ldr	r3, [r4, #8]
 80127ac:	4607      	mov	r7, r0
 80127ae:	4616      	mov	r6, r2
 80127b0:	f109 0501 	add.w	r5, r9, #1
 80127b4:	42ab      	cmp	r3, r5
 80127b6:	db32      	blt.n	801281e <__lshift+0x86>
 80127b8:	4638      	mov	r0, r7
 80127ba:	f7ff fded 	bl	8012398 <_Balloc>
 80127be:	2300      	movs	r3, #0
 80127c0:	4680      	mov	r8, r0
 80127c2:	f100 0114 	add.w	r1, r0, #20
 80127c6:	461a      	mov	r2, r3
 80127c8:	4553      	cmp	r3, sl
 80127ca:	db2b      	blt.n	8012824 <__lshift+0x8c>
 80127cc:	6920      	ldr	r0, [r4, #16]
 80127ce:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80127d2:	f104 0314 	add.w	r3, r4, #20
 80127d6:	f016 021f 	ands.w	r2, r6, #31
 80127da:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80127de:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80127e2:	d025      	beq.n	8012830 <__lshift+0x98>
 80127e4:	f1c2 0e20 	rsb	lr, r2, #32
 80127e8:	2000      	movs	r0, #0
 80127ea:	681e      	ldr	r6, [r3, #0]
 80127ec:	468a      	mov	sl, r1
 80127ee:	4096      	lsls	r6, r2
 80127f0:	4330      	orrs	r0, r6
 80127f2:	f84a 0b04 	str.w	r0, [sl], #4
 80127f6:	f853 0b04 	ldr.w	r0, [r3], #4
 80127fa:	459c      	cmp	ip, r3
 80127fc:	fa20 f00e 	lsr.w	r0, r0, lr
 8012800:	d814      	bhi.n	801282c <__lshift+0x94>
 8012802:	6048      	str	r0, [r1, #4]
 8012804:	b108      	cbz	r0, 801280a <__lshift+0x72>
 8012806:	f109 0502 	add.w	r5, r9, #2
 801280a:	3d01      	subs	r5, #1
 801280c:	4638      	mov	r0, r7
 801280e:	f8c8 5010 	str.w	r5, [r8, #16]
 8012812:	4621      	mov	r1, r4
 8012814:	f7ff fdf4 	bl	8012400 <_Bfree>
 8012818:	4640      	mov	r0, r8
 801281a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801281e:	3101      	adds	r1, #1
 8012820:	005b      	lsls	r3, r3, #1
 8012822:	e7c7      	b.n	80127b4 <__lshift+0x1c>
 8012824:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8012828:	3301      	adds	r3, #1
 801282a:	e7cd      	b.n	80127c8 <__lshift+0x30>
 801282c:	4651      	mov	r1, sl
 801282e:	e7dc      	b.n	80127ea <__lshift+0x52>
 8012830:	3904      	subs	r1, #4
 8012832:	f853 2b04 	ldr.w	r2, [r3], #4
 8012836:	f841 2f04 	str.w	r2, [r1, #4]!
 801283a:	459c      	cmp	ip, r3
 801283c:	d8f9      	bhi.n	8012832 <__lshift+0x9a>
 801283e:	e7e4      	b.n	801280a <__lshift+0x72>

08012840 <__mcmp>:
 8012840:	6903      	ldr	r3, [r0, #16]
 8012842:	690a      	ldr	r2, [r1, #16]
 8012844:	1a9b      	subs	r3, r3, r2
 8012846:	b530      	push	{r4, r5, lr}
 8012848:	d10c      	bne.n	8012864 <__mcmp+0x24>
 801284a:	0092      	lsls	r2, r2, #2
 801284c:	3014      	adds	r0, #20
 801284e:	3114      	adds	r1, #20
 8012850:	1884      	adds	r4, r0, r2
 8012852:	4411      	add	r1, r2
 8012854:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012858:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801285c:	4295      	cmp	r5, r2
 801285e:	d003      	beq.n	8012868 <__mcmp+0x28>
 8012860:	d305      	bcc.n	801286e <__mcmp+0x2e>
 8012862:	2301      	movs	r3, #1
 8012864:	4618      	mov	r0, r3
 8012866:	bd30      	pop	{r4, r5, pc}
 8012868:	42a0      	cmp	r0, r4
 801286a:	d3f3      	bcc.n	8012854 <__mcmp+0x14>
 801286c:	e7fa      	b.n	8012864 <__mcmp+0x24>
 801286e:	f04f 33ff 	mov.w	r3, #4294967295
 8012872:	e7f7      	b.n	8012864 <__mcmp+0x24>

08012874 <__mdiff>:
 8012874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012878:	460d      	mov	r5, r1
 801287a:	4607      	mov	r7, r0
 801287c:	4611      	mov	r1, r2
 801287e:	4628      	mov	r0, r5
 8012880:	4614      	mov	r4, r2
 8012882:	f7ff ffdd 	bl	8012840 <__mcmp>
 8012886:	1e06      	subs	r6, r0, #0
 8012888:	d108      	bne.n	801289c <__mdiff+0x28>
 801288a:	4631      	mov	r1, r6
 801288c:	4638      	mov	r0, r7
 801288e:	f7ff fd83 	bl	8012398 <_Balloc>
 8012892:	2301      	movs	r3, #1
 8012894:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8012898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801289c:	bfa4      	itt	ge
 801289e:	4623      	movge	r3, r4
 80128a0:	462c      	movge	r4, r5
 80128a2:	4638      	mov	r0, r7
 80128a4:	6861      	ldr	r1, [r4, #4]
 80128a6:	bfa6      	itte	ge
 80128a8:	461d      	movge	r5, r3
 80128aa:	2600      	movge	r6, #0
 80128ac:	2601      	movlt	r6, #1
 80128ae:	f7ff fd73 	bl	8012398 <_Balloc>
 80128b2:	692b      	ldr	r3, [r5, #16]
 80128b4:	60c6      	str	r6, [r0, #12]
 80128b6:	6926      	ldr	r6, [r4, #16]
 80128b8:	f105 0914 	add.w	r9, r5, #20
 80128bc:	f104 0214 	add.w	r2, r4, #20
 80128c0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80128c4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80128c8:	f100 0514 	add.w	r5, r0, #20
 80128cc:	f04f 0e00 	mov.w	lr, #0
 80128d0:	f852 ab04 	ldr.w	sl, [r2], #4
 80128d4:	f859 4b04 	ldr.w	r4, [r9], #4
 80128d8:	fa1e f18a 	uxtah	r1, lr, sl
 80128dc:	b2a3      	uxth	r3, r4
 80128de:	1ac9      	subs	r1, r1, r3
 80128e0:	0c23      	lsrs	r3, r4, #16
 80128e2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80128e6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80128ea:	b289      	uxth	r1, r1
 80128ec:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80128f0:	45c8      	cmp	r8, r9
 80128f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80128f6:	4694      	mov	ip, r2
 80128f8:	f845 3b04 	str.w	r3, [r5], #4
 80128fc:	d8e8      	bhi.n	80128d0 <__mdiff+0x5c>
 80128fe:	45bc      	cmp	ip, r7
 8012900:	d304      	bcc.n	801290c <__mdiff+0x98>
 8012902:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8012906:	b183      	cbz	r3, 801292a <__mdiff+0xb6>
 8012908:	6106      	str	r6, [r0, #16]
 801290a:	e7c5      	b.n	8012898 <__mdiff+0x24>
 801290c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8012910:	fa1e f381 	uxtah	r3, lr, r1
 8012914:	141a      	asrs	r2, r3, #16
 8012916:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801291a:	b29b      	uxth	r3, r3
 801291c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012920:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8012924:	f845 3b04 	str.w	r3, [r5], #4
 8012928:	e7e9      	b.n	80128fe <__mdiff+0x8a>
 801292a:	3e01      	subs	r6, #1
 801292c:	e7e9      	b.n	8012902 <__mdiff+0x8e>
	...

08012930 <__ulp>:
 8012930:	4b12      	ldr	r3, [pc, #72]	; (801297c <__ulp+0x4c>)
 8012932:	ee10 2a90 	vmov	r2, s1
 8012936:	401a      	ands	r2, r3
 8012938:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 801293c:	2b00      	cmp	r3, #0
 801293e:	dd04      	ble.n	801294a <__ulp+0x1a>
 8012940:	2000      	movs	r0, #0
 8012942:	4619      	mov	r1, r3
 8012944:	ec41 0b10 	vmov	d0, r0, r1
 8012948:	4770      	bx	lr
 801294a:	425b      	negs	r3, r3
 801294c:	151b      	asrs	r3, r3, #20
 801294e:	2b13      	cmp	r3, #19
 8012950:	f04f 0000 	mov.w	r0, #0
 8012954:	f04f 0100 	mov.w	r1, #0
 8012958:	dc04      	bgt.n	8012964 <__ulp+0x34>
 801295a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801295e:	fa42 f103 	asr.w	r1, r2, r3
 8012962:	e7ef      	b.n	8012944 <__ulp+0x14>
 8012964:	3b14      	subs	r3, #20
 8012966:	2b1e      	cmp	r3, #30
 8012968:	f04f 0201 	mov.w	r2, #1
 801296c:	bfda      	itte	le
 801296e:	f1c3 031f 	rsble	r3, r3, #31
 8012972:	fa02 f303 	lslle.w	r3, r2, r3
 8012976:	4613      	movgt	r3, r2
 8012978:	4618      	mov	r0, r3
 801297a:	e7e3      	b.n	8012944 <__ulp+0x14>
 801297c:	7ff00000 	.word	0x7ff00000

08012980 <__b2d>:
 8012980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012982:	6905      	ldr	r5, [r0, #16]
 8012984:	f100 0714 	add.w	r7, r0, #20
 8012988:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801298c:	1f2e      	subs	r6, r5, #4
 801298e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8012992:	4620      	mov	r0, r4
 8012994:	f7ff fdc4 	bl	8012520 <__hi0bits>
 8012998:	f1c0 0320 	rsb	r3, r0, #32
 801299c:	280a      	cmp	r0, #10
 801299e:	600b      	str	r3, [r1, #0]
 80129a0:	f8df c074 	ldr.w	ip, [pc, #116]	; 8012a18 <__b2d+0x98>
 80129a4:	dc14      	bgt.n	80129d0 <__b2d+0x50>
 80129a6:	f1c0 0e0b 	rsb	lr, r0, #11
 80129aa:	fa24 f10e 	lsr.w	r1, r4, lr
 80129ae:	42b7      	cmp	r7, r6
 80129b0:	ea41 030c 	orr.w	r3, r1, ip
 80129b4:	bf34      	ite	cc
 80129b6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80129ba:	2100      	movcs	r1, #0
 80129bc:	3015      	adds	r0, #21
 80129be:	fa04 f000 	lsl.w	r0, r4, r0
 80129c2:	fa21 f10e 	lsr.w	r1, r1, lr
 80129c6:	ea40 0201 	orr.w	r2, r0, r1
 80129ca:	ec43 2b10 	vmov	d0, r2, r3
 80129ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80129d0:	42b7      	cmp	r7, r6
 80129d2:	bf3a      	itte	cc
 80129d4:	f1a5 0608 	subcc.w	r6, r5, #8
 80129d8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80129dc:	2100      	movcs	r1, #0
 80129de:	380b      	subs	r0, #11
 80129e0:	d015      	beq.n	8012a0e <__b2d+0x8e>
 80129e2:	4084      	lsls	r4, r0
 80129e4:	f1c0 0520 	rsb	r5, r0, #32
 80129e8:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80129ec:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80129f0:	42be      	cmp	r6, r7
 80129f2:	fa21 fc05 	lsr.w	ip, r1, r5
 80129f6:	ea44 030c 	orr.w	r3, r4, ip
 80129fa:	bf8c      	ite	hi
 80129fc:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8012a00:	2400      	movls	r4, #0
 8012a02:	fa01 f000 	lsl.w	r0, r1, r0
 8012a06:	40ec      	lsrs	r4, r5
 8012a08:	ea40 0204 	orr.w	r2, r0, r4
 8012a0c:	e7dd      	b.n	80129ca <__b2d+0x4a>
 8012a0e:	ea44 030c 	orr.w	r3, r4, ip
 8012a12:	460a      	mov	r2, r1
 8012a14:	e7d9      	b.n	80129ca <__b2d+0x4a>
 8012a16:	bf00      	nop
 8012a18:	3ff00000 	.word	0x3ff00000

08012a1c <__d2b>:
 8012a1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012a20:	460e      	mov	r6, r1
 8012a22:	2101      	movs	r1, #1
 8012a24:	ec59 8b10 	vmov	r8, r9, d0
 8012a28:	4615      	mov	r5, r2
 8012a2a:	f7ff fcb5 	bl	8012398 <_Balloc>
 8012a2e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8012a32:	4607      	mov	r7, r0
 8012a34:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012a38:	bb34      	cbnz	r4, 8012a88 <__d2b+0x6c>
 8012a3a:	9301      	str	r3, [sp, #4]
 8012a3c:	f1b8 0300 	subs.w	r3, r8, #0
 8012a40:	d027      	beq.n	8012a92 <__d2b+0x76>
 8012a42:	a802      	add	r0, sp, #8
 8012a44:	f840 3d08 	str.w	r3, [r0, #-8]!
 8012a48:	f7ff fd89 	bl	801255e <__lo0bits>
 8012a4c:	9900      	ldr	r1, [sp, #0]
 8012a4e:	b1f0      	cbz	r0, 8012a8e <__d2b+0x72>
 8012a50:	9a01      	ldr	r2, [sp, #4]
 8012a52:	f1c0 0320 	rsb	r3, r0, #32
 8012a56:	fa02 f303 	lsl.w	r3, r2, r3
 8012a5a:	430b      	orrs	r3, r1
 8012a5c:	40c2      	lsrs	r2, r0
 8012a5e:	617b      	str	r3, [r7, #20]
 8012a60:	9201      	str	r2, [sp, #4]
 8012a62:	9b01      	ldr	r3, [sp, #4]
 8012a64:	61bb      	str	r3, [r7, #24]
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	bf14      	ite	ne
 8012a6a:	2102      	movne	r1, #2
 8012a6c:	2101      	moveq	r1, #1
 8012a6e:	6139      	str	r1, [r7, #16]
 8012a70:	b1c4      	cbz	r4, 8012aa4 <__d2b+0x88>
 8012a72:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8012a76:	4404      	add	r4, r0
 8012a78:	6034      	str	r4, [r6, #0]
 8012a7a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012a7e:	6028      	str	r0, [r5, #0]
 8012a80:	4638      	mov	r0, r7
 8012a82:	b003      	add	sp, #12
 8012a84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012a88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012a8c:	e7d5      	b.n	8012a3a <__d2b+0x1e>
 8012a8e:	6179      	str	r1, [r7, #20]
 8012a90:	e7e7      	b.n	8012a62 <__d2b+0x46>
 8012a92:	a801      	add	r0, sp, #4
 8012a94:	f7ff fd63 	bl	801255e <__lo0bits>
 8012a98:	9b01      	ldr	r3, [sp, #4]
 8012a9a:	617b      	str	r3, [r7, #20]
 8012a9c:	2101      	movs	r1, #1
 8012a9e:	6139      	str	r1, [r7, #16]
 8012aa0:	3020      	adds	r0, #32
 8012aa2:	e7e5      	b.n	8012a70 <__d2b+0x54>
 8012aa4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8012aa8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012aac:	6030      	str	r0, [r6, #0]
 8012aae:	6918      	ldr	r0, [r3, #16]
 8012ab0:	f7ff fd36 	bl	8012520 <__hi0bits>
 8012ab4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8012ab8:	e7e1      	b.n	8012a7e <__d2b+0x62>

08012aba <__ratio>:
 8012aba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012abe:	4688      	mov	r8, r1
 8012ac0:	4669      	mov	r1, sp
 8012ac2:	4681      	mov	r9, r0
 8012ac4:	f7ff ff5c 	bl	8012980 <__b2d>
 8012ac8:	a901      	add	r1, sp, #4
 8012aca:	4640      	mov	r0, r8
 8012acc:	ec57 6b10 	vmov	r6, r7, d0
 8012ad0:	f7ff ff56 	bl	8012980 <__b2d>
 8012ad4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012ad8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8012adc:	eba3 0c02 	sub.w	ip, r3, r2
 8012ae0:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012ae4:	1a9b      	subs	r3, r3, r2
 8012ae6:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8012aea:	ec5b ab10 	vmov	sl, fp, d0
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	bfce      	itee	gt
 8012af2:	463a      	movgt	r2, r7
 8012af4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012af8:	465a      	movle	r2, fp
 8012afa:	4659      	mov	r1, fp
 8012afc:	463d      	mov	r5, r7
 8012afe:	bfd4      	ite	le
 8012b00:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8012b04:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8012b08:	4630      	mov	r0, r6
 8012b0a:	ee10 2a10 	vmov	r2, s0
 8012b0e:	460b      	mov	r3, r1
 8012b10:	4629      	mov	r1, r5
 8012b12:	f7ed fe9b 	bl	800084c <__aeabi_ddiv>
 8012b16:	ec41 0b10 	vmov	d0, r0, r1
 8012b1a:	b003      	add	sp, #12
 8012b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012b20 <__copybits>:
 8012b20:	3901      	subs	r1, #1
 8012b22:	b510      	push	{r4, lr}
 8012b24:	1149      	asrs	r1, r1, #5
 8012b26:	6914      	ldr	r4, [r2, #16]
 8012b28:	3101      	adds	r1, #1
 8012b2a:	f102 0314 	add.w	r3, r2, #20
 8012b2e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012b32:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012b36:	42a3      	cmp	r3, r4
 8012b38:	4602      	mov	r2, r0
 8012b3a:	d303      	bcc.n	8012b44 <__copybits+0x24>
 8012b3c:	2300      	movs	r3, #0
 8012b3e:	428a      	cmp	r2, r1
 8012b40:	d305      	bcc.n	8012b4e <__copybits+0x2e>
 8012b42:	bd10      	pop	{r4, pc}
 8012b44:	f853 2b04 	ldr.w	r2, [r3], #4
 8012b48:	f840 2b04 	str.w	r2, [r0], #4
 8012b4c:	e7f3      	b.n	8012b36 <__copybits+0x16>
 8012b4e:	f842 3b04 	str.w	r3, [r2], #4
 8012b52:	e7f4      	b.n	8012b3e <__copybits+0x1e>

08012b54 <__any_on>:
 8012b54:	f100 0214 	add.w	r2, r0, #20
 8012b58:	6900      	ldr	r0, [r0, #16]
 8012b5a:	114b      	asrs	r3, r1, #5
 8012b5c:	4298      	cmp	r0, r3
 8012b5e:	b510      	push	{r4, lr}
 8012b60:	db11      	blt.n	8012b86 <__any_on+0x32>
 8012b62:	dd0a      	ble.n	8012b7a <__any_on+0x26>
 8012b64:	f011 011f 	ands.w	r1, r1, #31
 8012b68:	d007      	beq.n	8012b7a <__any_on+0x26>
 8012b6a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012b6e:	fa24 f001 	lsr.w	r0, r4, r1
 8012b72:	fa00 f101 	lsl.w	r1, r0, r1
 8012b76:	428c      	cmp	r4, r1
 8012b78:	d10b      	bne.n	8012b92 <__any_on+0x3e>
 8012b7a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012b7e:	4293      	cmp	r3, r2
 8012b80:	d803      	bhi.n	8012b8a <__any_on+0x36>
 8012b82:	2000      	movs	r0, #0
 8012b84:	bd10      	pop	{r4, pc}
 8012b86:	4603      	mov	r3, r0
 8012b88:	e7f7      	b.n	8012b7a <__any_on+0x26>
 8012b8a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012b8e:	2900      	cmp	r1, #0
 8012b90:	d0f5      	beq.n	8012b7e <__any_on+0x2a>
 8012b92:	2001      	movs	r0, #1
 8012b94:	e7f6      	b.n	8012b84 <__any_on+0x30>

08012b96 <_calloc_r>:
 8012b96:	b538      	push	{r3, r4, r5, lr}
 8012b98:	fb02 f401 	mul.w	r4, r2, r1
 8012b9c:	4621      	mov	r1, r4
 8012b9e:	f7fc fc07 	bl	800f3b0 <_malloc_r>
 8012ba2:	4605      	mov	r5, r0
 8012ba4:	b118      	cbz	r0, 8012bae <_calloc_r+0x18>
 8012ba6:	4622      	mov	r2, r4
 8012ba8:	2100      	movs	r1, #0
 8012baa:	f7fc fbaa 	bl	800f302 <memset>
 8012bae:	4628      	mov	r0, r5
 8012bb0:	bd38      	pop	{r3, r4, r5, pc}

08012bb2 <__ssputs_r>:
 8012bb2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012bb6:	688e      	ldr	r6, [r1, #8]
 8012bb8:	429e      	cmp	r6, r3
 8012bba:	4682      	mov	sl, r0
 8012bbc:	460c      	mov	r4, r1
 8012bbe:	4690      	mov	r8, r2
 8012bc0:	4699      	mov	r9, r3
 8012bc2:	d837      	bhi.n	8012c34 <__ssputs_r+0x82>
 8012bc4:	898a      	ldrh	r2, [r1, #12]
 8012bc6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012bca:	d031      	beq.n	8012c30 <__ssputs_r+0x7e>
 8012bcc:	6825      	ldr	r5, [r4, #0]
 8012bce:	6909      	ldr	r1, [r1, #16]
 8012bd0:	1a6f      	subs	r7, r5, r1
 8012bd2:	6965      	ldr	r5, [r4, #20]
 8012bd4:	2302      	movs	r3, #2
 8012bd6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012bda:	fb95 f5f3 	sdiv	r5, r5, r3
 8012bde:	f109 0301 	add.w	r3, r9, #1
 8012be2:	443b      	add	r3, r7
 8012be4:	429d      	cmp	r5, r3
 8012be6:	bf38      	it	cc
 8012be8:	461d      	movcc	r5, r3
 8012bea:	0553      	lsls	r3, r2, #21
 8012bec:	d530      	bpl.n	8012c50 <__ssputs_r+0x9e>
 8012bee:	4629      	mov	r1, r5
 8012bf0:	f7fc fbde 	bl	800f3b0 <_malloc_r>
 8012bf4:	4606      	mov	r6, r0
 8012bf6:	b950      	cbnz	r0, 8012c0e <__ssputs_r+0x5c>
 8012bf8:	230c      	movs	r3, #12
 8012bfa:	f8ca 3000 	str.w	r3, [sl]
 8012bfe:	89a3      	ldrh	r3, [r4, #12]
 8012c00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012c04:	81a3      	strh	r3, [r4, #12]
 8012c06:	f04f 30ff 	mov.w	r0, #4294967295
 8012c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c0e:	463a      	mov	r2, r7
 8012c10:	6921      	ldr	r1, [r4, #16]
 8012c12:	f7fc fb6b 	bl	800f2ec <memcpy>
 8012c16:	89a3      	ldrh	r3, [r4, #12]
 8012c18:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012c20:	81a3      	strh	r3, [r4, #12]
 8012c22:	6126      	str	r6, [r4, #16]
 8012c24:	6165      	str	r5, [r4, #20]
 8012c26:	443e      	add	r6, r7
 8012c28:	1bed      	subs	r5, r5, r7
 8012c2a:	6026      	str	r6, [r4, #0]
 8012c2c:	60a5      	str	r5, [r4, #8]
 8012c2e:	464e      	mov	r6, r9
 8012c30:	454e      	cmp	r6, r9
 8012c32:	d900      	bls.n	8012c36 <__ssputs_r+0x84>
 8012c34:	464e      	mov	r6, r9
 8012c36:	4632      	mov	r2, r6
 8012c38:	4641      	mov	r1, r8
 8012c3a:	6820      	ldr	r0, [r4, #0]
 8012c3c:	f000 fcb8 	bl	80135b0 <memmove>
 8012c40:	68a3      	ldr	r3, [r4, #8]
 8012c42:	1b9b      	subs	r3, r3, r6
 8012c44:	60a3      	str	r3, [r4, #8]
 8012c46:	6823      	ldr	r3, [r4, #0]
 8012c48:	441e      	add	r6, r3
 8012c4a:	6026      	str	r6, [r4, #0]
 8012c4c:	2000      	movs	r0, #0
 8012c4e:	e7dc      	b.n	8012c0a <__ssputs_r+0x58>
 8012c50:	462a      	mov	r2, r5
 8012c52:	f000 fcc6 	bl	80135e2 <_realloc_r>
 8012c56:	4606      	mov	r6, r0
 8012c58:	2800      	cmp	r0, #0
 8012c5a:	d1e2      	bne.n	8012c22 <__ssputs_r+0x70>
 8012c5c:	6921      	ldr	r1, [r4, #16]
 8012c5e:	4650      	mov	r0, sl
 8012c60:	f7fc fb58 	bl	800f314 <_free_r>
 8012c64:	e7c8      	b.n	8012bf8 <__ssputs_r+0x46>
	...

08012c68 <_svfiprintf_r>:
 8012c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c6c:	461d      	mov	r5, r3
 8012c6e:	898b      	ldrh	r3, [r1, #12]
 8012c70:	061f      	lsls	r7, r3, #24
 8012c72:	b09d      	sub	sp, #116	; 0x74
 8012c74:	4680      	mov	r8, r0
 8012c76:	460c      	mov	r4, r1
 8012c78:	4616      	mov	r6, r2
 8012c7a:	d50f      	bpl.n	8012c9c <_svfiprintf_r+0x34>
 8012c7c:	690b      	ldr	r3, [r1, #16]
 8012c7e:	b96b      	cbnz	r3, 8012c9c <_svfiprintf_r+0x34>
 8012c80:	2140      	movs	r1, #64	; 0x40
 8012c82:	f7fc fb95 	bl	800f3b0 <_malloc_r>
 8012c86:	6020      	str	r0, [r4, #0]
 8012c88:	6120      	str	r0, [r4, #16]
 8012c8a:	b928      	cbnz	r0, 8012c98 <_svfiprintf_r+0x30>
 8012c8c:	230c      	movs	r3, #12
 8012c8e:	f8c8 3000 	str.w	r3, [r8]
 8012c92:	f04f 30ff 	mov.w	r0, #4294967295
 8012c96:	e0c8      	b.n	8012e2a <_svfiprintf_r+0x1c2>
 8012c98:	2340      	movs	r3, #64	; 0x40
 8012c9a:	6163      	str	r3, [r4, #20]
 8012c9c:	2300      	movs	r3, #0
 8012c9e:	9309      	str	r3, [sp, #36]	; 0x24
 8012ca0:	2320      	movs	r3, #32
 8012ca2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012ca6:	2330      	movs	r3, #48	; 0x30
 8012ca8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012cac:	9503      	str	r5, [sp, #12]
 8012cae:	f04f 0b01 	mov.w	fp, #1
 8012cb2:	4637      	mov	r7, r6
 8012cb4:	463d      	mov	r5, r7
 8012cb6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012cba:	b10b      	cbz	r3, 8012cc0 <_svfiprintf_r+0x58>
 8012cbc:	2b25      	cmp	r3, #37	; 0x25
 8012cbe:	d13e      	bne.n	8012d3e <_svfiprintf_r+0xd6>
 8012cc0:	ebb7 0a06 	subs.w	sl, r7, r6
 8012cc4:	d00b      	beq.n	8012cde <_svfiprintf_r+0x76>
 8012cc6:	4653      	mov	r3, sl
 8012cc8:	4632      	mov	r2, r6
 8012cca:	4621      	mov	r1, r4
 8012ccc:	4640      	mov	r0, r8
 8012cce:	f7ff ff70 	bl	8012bb2 <__ssputs_r>
 8012cd2:	3001      	adds	r0, #1
 8012cd4:	f000 80a4 	beq.w	8012e20 <_svfiprintf_r+0x1b8>
 8012cd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012cda:	4453      	add	r3, sl
 8012cdc:	9309      	str	r3, [sp, #36]	; 0x24
 8012cde:	783b      	ldrb	r3, [r7, #0]
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	f000 809d 	beq.w	8012e20 <_svfiprintf_r+0x1b8>
 8012ce6:	2300      	movs	r3, #0
 8012ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8012cec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012cf0:	9304      	str	r3, [sp, #16]
 8012cf2:	9307      	str	r3, [sp, #28]
 8012cf4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012cf8:	931a      	str	r3, [sp, #104]	; 0x68
 8012cfa:	462f      	mov	r7, r5
 8012cfc:	2205      	movs	r2, #5
 8012cfe:	f817 1b01 	ldrb.w	r1, [r7], #1
 8012d02:	4850      	ldr	r0, [pc, #320]	; (8012e44 <_svfiprintf_r+0x1dc>)
 8012d04:	f7ed fa6c 	bl	80001e0 <memchr>
 8012d08:	9b04      	ldr	r3, [sp, #16]
 8012d0a:	b9d0      	cbnz	r0, 8012d42 <_svfiprintf_r+0xda>
 8012d0c:	06d9      	lsls	r1, r3, #27
 8012d0e:	bf44      	itt	mi
 8012d10:	2220      	movmi	r2, #32
 8012d12:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012d16:	071a      	lsls	r2, r3, #28
 8012d18:	bf44      	itt	mi
 8012d1a:	222b      	movmi	r2, #43	; 0x2b
 8012d1c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012d20:	782a      	ldrb	r2, [r5, #0]
 8012d22:	2a2a      	cmp	r2, #42	; 0x2a
 8012d24:	d015      	beq.n	8012d52 <_svfiprintf_r+0xea>
 8012d26:	9a07      	ldr	r2, [sp, #28]
 8012d28:	462f      	mov	r7, r5
 8012d2a:	2000      	movs	r0, #0
 8012d2c:	250a      	movs	r5, #10
 8012d2e:	4639      	mov	r1, r7
 8012d30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012d34:	3b30      	subs	r3, #48	; 0x30
 8012d36:	2b09      	cmp	r3, #9
 8012d38:	d94d      	bls.n	8012dd6 <_svfiprintf_r+0x16e>
 8012d3a:	b1b8      	cbz	r0, 8012d6c <_svfiprintf_r+0x104>
 8012d3c:	e00f      	b.n	8012d5e <_svfiprintf_r+0xf6>
 8012d3e:	462f      	mov	r7, r5
 8012d40:	e7b8      	b.n	8012cb4 <_svfiprintf_r+0x4c>
 8012d42:	4a40      	ldr	r2, [pc, #256]	; (8012e44 <_svfiprintf_r+0x1dc>)
 8012d44:	1a80      	subs	r0, r0, r2
 8012d46:	fa0b f000 	lsl.w	r0, fp, r0
 8012d4a:	4318      	orrs	r0, r3
 8012d4c:	9004      	str	r0, [sp, #16]
 8012d4e:	463d      	mov	r5, r7
 8012d50:	e7d3      	b.n	8012cfa <_svfiprintf_r+0x92>
 8012d52:	9a03      	ldr	r2, [sp, #12]
 8012d54:	1d11      	adds	r1, r2, #4
 8012d56:	6812      	ldr	r2, [r2, #0]
 8012d58:	9103      	str	r1, [sp, #12]
 8012d5a:	2a00      	cmp	r2, #0
 8012d5c:	db01      	blt.n	8012d62 <_svfiprintf_r+0xfa>
 8012d5e:	9207      	str	r2, [sp, #28]
 8012d60:	e004      	b.n	8012d6c <_svfiprintf_r+0x104>
 8012d62:	4252      	negs	r2, r2
 8012d64:	f043 0302 	orr.w	r3, r3, #2
 8012d68:	9207      	str	r2, [sp, #28]
 8012d6a:	9304      	str	r3, [sp, #16]
 8012d6c:	783b      	ldrb	r3, [r7, #0]
 8012d6e:	2b2e      	cmp	r3, #46	; 0x2e
 8012d70:	d10c      	bne.n	8012d8c <_svfiprintf_r+0x124>
 8012d72:	787b      	ldrb	r3, [r7, #1]
 8012d74:	2b2a      	cmp	r3, #42	; 0x2a
 8012d76:	d133      	bne.n	8012de0 <_svfiprintf_r+0x178>
 8012d78:	9b03      	ldr	r3, [sp, #12]
 8012d7a:	1d1a      	adds	r2, r3, #4
 8012d7c:	681b      	ldr	r3, [r3, #0]
 8012d7e:	9203      	str	r2, [sp, #12]
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	bfb8      	it	lt
 8012d84:	f04f 33ff 	movlt.w	r3, #4294967295
 8012d88:	3702      	adds	r7, #2
 8012d8a:	9305      	str	r3, [sp, #20]
 8012d8c:	4d2e      	ldr	r5, [pc, #184]	; (8012e48 <_svfiprintf_r+0x1e0>)
 8012d8e:	7839      	ldrb	r1, [r7, #0]
 8012d90:	2203      	movs	r2, #3
 8012d92:	4628      	mov	r0, r5
 8012d94:	f7ed fa24 	bl	80001e0 <memchr>
 8012d98:	b138      	cbz	r0, 8012daa <_svfiprintf_r+0x142>
 8012d9a:	2340      	movs	r3, #64	; 0x40
 8012d9c:	1b40      	subs	r0, r0, r5
 8012d9e:	fa03 f000 	lsl.w	r0, r3, r0
 8012da2:	9b04      	ldr	r3, [sp, #16]
 8012da4:	4303      	orrs	r3, r0
 8012da6:	3701      	adds	r7, #1
 8012da8:	9304      	str	r3, [sp, #16]
 8012daa:	7839      	ldrb	r1, [r7, #0]
 8012dac:	4827      	ldr	r0, [pc, #156]	; (8012e4c <_svfiprintf_r+0x1e4>)
 8012dae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012db2:	2206      	movs	r2, #6
 8012db4:	1c7e      	adds	r6, r7, #1
 8012db6:	f7ed fa13 	bl	80001e0 <memchr>
 8012dba:	2800      	cmp	r0, #0
 8012dbc:	d038      	beq.n	8012e30 <_svfiprintf_r+0x1c8>
 8012dbe:	4b24      	ldr	r3, [pc, #144]	; (8012e50 <_svfiprintf_r+0x1e8>)
 8012dc0:	bb13      	cbnz	r3, 8012e08 <_svfiprintf_r+0x1a0>
 8012dc2:	9b03      	ldr	r3, [sp, #12]
 8012dc4:	3307      	adds	r3, #7
 8012dc6:	f023 0307 	bic.w	r3, r3, #7
 8012dca:	3308      	adds	r3, #8
 8012dcc:	9303      	str	r3, [sp, #12]
 8012dce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012dd0:	444b      	add	r3, r9
 8012dd2:	9309      	str	r3, [sp, #36]	; 0x24
 8012dd4:	e76d      	b.n	8012cb2 <_svfiprintf_r+0x4a>
 8012dd6:	fb05 3202 	mla	r2, r5, r2, r3
 8012dda:	2001      	movs	r0, #1
 8012ddc:	460f      	mov	r7, r1
 8012dde:	e7a6      	b.n	8012d2e <_svfiprintf_r+0xc6>
 8012de0:	2300      	movs	r3, #0
 8012de2:	3701      	adds	r7, #1
 8012de4:	9305      	str	r3, [sp, #20]
 8012de6:	4619      	mov	r1, r3
 8012de8:	250a      	movs	r5, #10
 8012dea:	4638      	mov	r0, r7
 8012dec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012df0:	3a30      	subs	r2, #48	; 0x30
 8012df2:	2a09      	cmp	r2, #9
 8012df4:	d903      	bls.n	8012dfe <_svfiprintf_r+0x196>
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	d0c8      	beq.n	8012d8c <_svfiprintf_r+0x124>
 8012dfa:	9105      	str	r1, [sp, #20]
 8012dfc:	e7c6      	b.n	8012d8c <_svfiprintf_r+0x124>
 8012dfe:	fb05 2101 	mla	r1, r5, r1, r2
 8012e02:	2301      	movs	r3, #1
 8012e04:	4607      	mov	r7, r0
 8012e06:	e7f0      	b.n	8012dea <_svfiprintf_r+0x182>
 8012e08:	ab03      	add	r3, sp, #12
 8012e0a:	9300      	str	r3, [sp, #0]
 8012e0c:	4622      	mov	r2, r4
 8012e0e:	4b11      	ldr	r3, [pc, #68]	; (8012e54 <_svfiprintf_r+0x1ec>)
 8012e10:	a904      	add	r1, sp, #16
 8012e12:	4640      	mov	r0, r8
 8012e14:	f7fc fbba 	bl	800f58c <_printf_float>
 8012e18:	f1b0 3fff 	cmp.w	r0, #4294967295
 8012e1c:	4681      	mov	r9, r0
 8012e1e:	d1d6      	bne.n	8012dce <_svfiprintf_r+0x166>
 8012e20:	89a3      	ldrh	r3, [r4, #12]
 8012e22:	065b      	lsls	r3, r3, #25
 8012e24:	f53f af35 	bmi.w	8012c92 <_svfiprintf_r+0x2a>
 8012e28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012e2a:	b01d      	add	sp, #116	; 0x74
 8012e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e30:	ab03      	add	r3, sp, #12
 8012e32:	9300      	str	r3, [sp, #0]
 8012e34:	4622      	mov	r2, r4
 8012e36:	4b07      	ldr	r3, [pc, #28]	; (8012e54 <_svfiprintf_r+0x1ec>)
 8012e38:	a904      	add	r1, sp, #16
 8012e3a:	4640      	mov	r0, r8
 8012e3c:	f7fc fe5c 	bl	800faf8 <_printf_i>
 8012e40:	e7ea      	b.n	8012e18 <_svfiprintf_r+0x1b0>
 8012e42:	bf00      	nop
 8012e44:	08013adc 	.word	0x08013adc
 8012e48:	08013ae2 	.word	0x08013ae2
 8012e4c:	08013ae6 	.word	0x08013ae6
 8012e50:	0800f58d 	.word	0x0800f58d
 8012e54:	08012bb3 	.word	0x08012bb3

08012e58 <__sfputc_r>:
 8012e58:	6893      	ldr	r3, [r2, #8]
 8012e5a:	3b01      	subs	r3, #1
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	b410      	push	{r4}
 8012e60:	6093      	str	r3, [r2, #8]
 8012e62:	da08      	bge.n	8012e76 <__sfputc_r+0x1e>
 8012e64:	6994      	ldr	r4, [r2, #24]
 8012e66:	42a3      	cmp	r3, r4
 8012e68:	db01      	blt.n	8012e6e <__sfputc_r+0x16>
 8012e6a:	290a      	cmp	r1, #10
 8012e6c:	d103      	bne.n	8012e76 <__sfputc_r+0x1e>
 8012e6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012e72:	f000 b987 	b.w	8013184 <__swbuf_r>
 8012e76:	6813      	ldr	r3, [r2, #0]
 8012e78:	1c58      	adds	r0, r3, #1
 8012e7a:	6010      	str	r0, [r2, #0]
 8012e7c:	7019      	strb	r1, [r3, #0]
 8012e7e:	4608      	mov	r0, r1
 8012e80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012e84:	4770      	bx	lr

08012e86 <__sfputs_r>:
 8012e86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e88:	4606      	mov	r6, r0
 8012e8a:	460f      	mov	r7, r1
 8012e8c:	4614      	mov	r4, r2
 8012e8e:	18d5      	adds	r5, r2, r3
 8012e90:	42ac      	cmp	r4, r5
 8012e92:	d101      	bne.n	8012e98 <__sfputs_r+0x12>
 8012e94:	2000      	movs	r0, #0
 8012e96:	e007      	b.n	8012ea8 <__sfputs_r+0x22>
 8012e98:	463a      	mov	r2, r7
 8012e9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e9e:	4630      	mov	r0, r6
 8012ea0:	f7ff ffda 	bl	8012e58 <__sfputc_r>
 8012ea4:	1c43      	adds	r3, r0, #1
 8012ea6:	d1f3      	bne.n	8012e90 <__sfputs_r+0xa>
 8012ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012eac <_vfiprintf_r>:
 8012eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012eb0:	460c      	mov	r4, r1
 8012eb2:	b09d      	sub	sp, #116	; 0x74
 8012eb4:	4617      	mov	r7, r2
 8012eb6:	461d      	mov	r5, r3
 8012eb8:	4606      	mov	r6, r0
 8012eba:	b118      	cbz	r0, 8012ec4 <_vfiprintf_r+0x18>
 8012ebc:	6983      	ldr	r3, [r0, #24]
 8012ebe:	b90b      	cbnz	r3, 8012ec4 <_vfiprintf_r+0x18>
 8012ec0:	f7fe fe92 	bl	8011be8 <__sinit>
 8012ec4:	4b7c      	ldr	r3, [pc, #496]	; (80130b8 <_vfiprintf_r+0x20c>)
 8012ec6:	429c      	cmp	r4, r3
 8012ec8:	d158      	bne.n	8012f7c <_vfiprintf_r+0xd0>
 8012eca:	6874      	ldr	r4, [r6, #4]
 8012ecc:	89a3      	ldrh	r3, [r4, #12]
 8012ece:	0718      	lsls	r0, r3, #28
 8012ed0:	d55e      	bpl.n	8012f90 <_vfiprintf_r+0xe4>
 8012ed2:	6923      	ldr	r3, [r4, #16]
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d05b      	beq.n	8012f90 <_vfiprintf_r+0xe4>
 8012ed8:	2300      	movs	r3, #0
 8012eda:	9309      	str	r3, [sp, #36]	; 0x24
 8012edc:	2320      	movs	r3, #32
 8012ede:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012ee2:	2330      	movs	r3, #48	; 0x30
 8012ee4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012ee8:	9503      	str	r5, [sp, #12]
 8012eea:	f04f 0b01 	mov.w	fp, #1
 8012eee:	46b8      	mov	r8, r7
 8012ef0:	4645      	mov	r5, r8
 8012ef2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012ef6:	b10b      	cbz	r3, 8012efc <_vfiprintf_r+0x50>
 8012ef8:	2b25      	cmp	r3, #37	; 0x25
 8012efa:	d154      	bne.n	8012fa6 <_vfiprintf_r+0xfa>
 8012efc:	ebb8 0a07 	subs.w	sl, r8, r7
 8012f00:	d00b      	beq.n	8012f1a <_vfiprintf_r+0x6e>
 8012f02:	4653      	mov	r3, sl
 8012f04:	463a      	mov	r2, r7
 8012f06:	4621      	mov	r1, r4
 8012f08:	4630      	mov	r0, r6
 8012f0a:	f7ff ffbc 	bl	8012e86 <__sfputs_r>
 8012f0e:	3001      	adds	r0, #1
 8012f10:	f000 80c2 	beq.w	8013098 <_vfiprintf_r+0x1ec>
 8012f14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f16:	4453      	add	r3, sl
 8012f18:	9309      	str	r3, [sp, #36]	; 0x24
 8012f1a:	f898 3000 	ldrb.w	r3, [r8]
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	f000 80ba 	beq.w	8013098 <_vfiprintf_r+0x1ec>
 8012f24:	2300      	movs	r3, #0
 8012f26:	f04f 32ff 	mov.w	r2, #4294967295
 8012f2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012f2e:	9304      	str	r3, [sp, #16]
 8012f30:	9307      	str	r3, [sp, #28]
 8012f32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012f36:	931a      	str	r3, [sp, #104]	; 0x68
 8012f38:	46a8      	mov	r8, r5
 8012f3a:	2205      	movs	r2, #5
 8012f3c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8012f40:	485e      	ldr	r0, [pc, #376]	; (80130bc <_vfiprintf_r+0x210>)
 8012f42:	f7ed f94d 	bl	80001e0 <memchr>
 8012f46:	9b04      	ldr	r3, [sp, #16]
 8012f48:	bb78      	cbnz	r0, 8012faa <_vfiprintf_r+0xfe>
 8012f4a:	06d9      	lsls	r1, r3, #27
 8012f4c:	bf44      	itt	mi
 8012f4e:	2220      	movmi	r2, #32
 8012f50:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012f54:	071a      	lsls	r2, r3, #28
 8012f56:	bf44      	itt	mi
 8012f58:	222b      	movmi	r2, #43	; 0x2b
 8012f5a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012f5e:	782a      	ldrb	r2, [r5, #0]
 8012f60:	2a2a      	cmp	r2, #42	; 0x2a
 8012f62:	d02a      	beq.n	8012fba <_vfiprintf_r+0x10e>
 8012f64:	9a07      	ldr	r2, [sp, #28]
 8012f66:	46a8      	mov	r8, r5
 8012f68:	2000      	movs	r0, #0
 8012f6a:	250a      	movs	r5, #10
 8012f6c:	4641      	mov	r1, r8
 8012f6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012f72:	3b30      	subs	r3, #48	; 0x30
 8012f74:	2b09      	cmp	r3, #9
 8012f76:	d969      	bls.n	801304c <_vfiprintf_r+0x1a0>
 8012f78:	b360      	cbz	r0, 8012fd4 <_vfiprintf_r+0x128>
 8012f7a:	e024      	b.n	8012fc6 <_vfiprintf_r+0x11a>
 8012f7c:	4b50      	ldr	r3, [pc, #320]	; (80130c0 <_vfiprintf_r+0x214>)
 8012f7e:	429c      	cmp	r4, r3
 8012f80:	d101      	bne.n	8012f86 <_vfiprintf_r+0xda>
 8012f82:	68b4      	ldr	r4, [r6, #8]
 8012f84:	e7a2      	b.n	8012ecc <_vfiprintf_r+0x20>
 8012f86:	4b4f      	ldr	r3, [pc, #316]	; (80130c4 <_vfiprintf_r+0x218>)
 8012f88:	429c      	cmp	r4, r3
 8012f8a:	bf08      	it	eq
 8012f8c:	68f4      	ldreq	r4, [r6, #12]
 8012f8e:	e79d      	b.n	8012ecc <_vfiprintf_r+0x20>
 8012f90:	4621      	mov	r1, r4
 8012f92:	4630      	mov	r0, r6
 8012f94:	f000 f968 	bl	8013268 <__swsetup_r>
 8012f98:	2800      	cmp	r0, #0
 8012f9a:	d09d      	beq.n	8012ed8 <_vfiprintf_r+0x2c>
 8012f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8012fa0:	b01d      	add	sp, #116	; 0x74
 8012fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fa6:	46a8      	mov	r8, r5
 8012fa8:	e7a2      	b.n	8012ef0 <_vfiprintf_r+0x44>
 8012faa:	4a44      	ldr	r2, [pc, #272]	; (80130bc <_vfiprintf_r+0x210>)
 8012fac:	1a80      	subs	r0, r0, r2
 8012fae:	fa0b f000 	lsl.w	r0, fp, r0
 8012fb2:	4318      	orrs	r0, r3
 8012fb4:	9004      	str	r0, [sp, #16]
 8012fb6:	4645      	mov	r5, r8
 8012fb8:	e7be      	b.n	8012f38 <_vfiprintf_r+0x8c>
 8012fba:	9a03      	ldr	r2, [sp, #12]
 8012fbc:	1d11      	adds	r1, r2, #4
 8012fbe:	6812      	ldr	r2, [r2, #0]
 8012fc0:	9103      	str	r1, [sp, #12]
 8012fc2:	2a00      	cmp	r2, #0
 8012fc4:	db01      	blt.n	8012fca <_vfiprintf_r+0x11e>
 8012fc6:	9207      	str	r2, [sp, #28]
 8012fc8:	e004      	b.n	8012fd4 <_vfiprintf_r+0x128>
 8012fca:	4252      	negs	r2, r2
 8012fcc:	f043 0302 	orr.w	r3, r3, #2
 8012fd0:	9207      	str	r2, [sp, #28]
 8012fd2:	9304      	str	r3, [sp, #16]
 8012fd4:	f898 3000 	ldrb.w	r3, [r8]
 8012fd8:	2b2e      	cmp	r3, #46	; 0x2e
 8012fda:	d10e      	bne.n	8012ffa <_vfiprintf_r+0x14e>
 8012fdc:	f898 3001 	ldrb.w	r3, [r8, #1]
 8012fe0:	2b2a      	cmp	r3, #42	; 0x2a
 8012fe2:	d138      	bne.n	8013056 <_vfiprintf_r+0x1aa>
 8012fe4:	9b03      	ldr	r3, [sp, #12]
 8012fe6:	1d1a      	adds	r2, r3, #4
 8012fe8:	681b      	ldr	r3, [r3, #0]
 8012fea:	9203      	str	r2, [sp, #12]
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	bfb8      	it	lt
 8012ff0:	f04f 33ff 	movlt.w	r3, #4294967295
 8012ff4:	f108 0802 	add.w	r8, r8, #2
 8012ff8:	9305      	str	r3, [sp, #20]
 8012ffa:	4d33      	ldr	r5, [pc, #204]	; (80130c8 <_vfiprintf_r+0x21c>)
 8012ffc:	f898 1000 	ldrb.w	r1, [r8]
 8013000:	2203      	movs	r2, #3
 8013002:	4628      	mov	r0, r5
 8013004:	f7ed f8ec 	bl	80001e0 <memchr>
 8013008:	b140      	cbz	r0, 801301c <_vfiprintf_r+0x170>
 801300a:	2340      	movs	r3, #64	; 0x40
 801300c:	1b40      	subs	r0, r0, r5
 801300e:	fa03 f000 	lsl.w	r0, r3, r0
 8013012:	9b04      	ldr	r3, [sp, #16]
 8013014:	4303      	orrs	r3, r0
 8013016:	f108 0801 	add.w	r8, r8, #1
 801301a:	9304      	str	r3, [sp, #16]
 801301c:	f898 1000 	ldrb.w	r1, [r8]
 8013020:	482a      	ldr	r0, [pc, #168]	; (80130cc <_vfiprintf_r+0x220>)
 8013022:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013026:	2206      	movs	r2, #6
 8013028:	f108 0701 	add.w	r7, r8, #1
 801302c:	f7ed f8d8 	bl	80001e0 <memchr>
 8013030:	2800      	cmp	r0, #0
 8013032:	d037      	beq.n	80130a4 <_vfiprintf_r+0x1f8>
 8013034:	4b26      	ldr	r3, [pc, #152]	; (80130d0 <_vfiprintf_r+0x224>)
 8013036:	bb1b      	cbnz	r3, 8013080 <_vfiprintf_r+0x1d4>
 8013038:	9b03      	ldr	r3, [sp, #12]
 801303a:	3307      	adds	r3, #7
 801303c:	f023 0307 	bic.w	r3, r3, #7
 8013040:	3308      	adds	r3, #8
 8013042:	9303      	str	r3, [sp, #12]
 8013044:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013046:	444b      	add	r3, r9
 8013048:	9309      	str	r3, [sp, #36]	; 0x24
 801304a:	e750      	b.n	8012eee <_vfiprintf_r+0x42>
 801304c:	fb05 3202 	mla	r2, r5, r2, r3
 8013050:	2001      	movs	r0, #1
 8013052:	4688      	mov	r8, r1
 8013054:	e78a      	b.n	8012f6c <_vfiprintf_r+0xc0>
 8013056:	2300      	movs	r3, #0
 8013058:	f108 0801 	add.w	r8, r8, #1
 801305c:	9305      	str	r3, [sp, #20]
 801305e:	4619      	mov	r1, r3
 8013060:	250a      	movs	r5, #10
 8013062:	4640      	mov	r0, r8
 8013064:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013068:	3a30      	subs	r2, #48	; 0x30
 801306a:	2a09      	cmp	r2, #9
 801306c:	d903      	bls.n	8013076 <_vfiprintf_r+0x1ca>
 801306e:	2b00      	cmp	r3, #0
 8013070:	d0c3      	beq.n	8012ffa <_vfiprintf_r+0x14e>
 8013072:	9105      	str	r1, [sp, #20]
 8013074:	e7c1      	b.n	8012ffa <_vfiprintf_r+0x14e>
 8013076:	fb05 2101 	mla	r1, r5, r1, r2
 801307a:	2301      	movs	r3, #1
 801307c:	4680      	mov	r8, r0
 801307e:	e7f0      	b.n	8013062 <_vfiprintf_r+0x1b6>
 8013080:	ab03      	add	r3, sp, #12
 8013082:	9300      	str	r3, [sp, #0]
 8013084:	4622      	mov	r2, r4
 8013086:	4b13      	ldr	r3, [pc, #76]	; (80130d4 <_vfiprintf_r+0x228>)
 8013088:	a904      	add	r1, sp, #16
 801308a:	4630      	mov	r0, r6
 801308c:	f7fc fa7e 	bl	800f58c <_printf_float>
 8013090:	f1b0 3fff 	cmp.w	r0, #4294967295
 8013094:	4681      	mov	r9, r0
 8013096:	d1d5      	bne.n	8013044 <_vfiprintf_r+0x198>
 8013098:	89a3      	ldrh	r3, [r4, #12]
 801309a:	065b      	lsls	r3, r3, #25
 801309c:	f53f af7e 	bmi.w	8012f9c <_vfiprintf_r+0xf0>
 80130a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80130a2:	e77d      	b.n	8012fa0 <_vfiprintf_r+0xf4>
 80130a4:	ab03      	add	r3, sp, #12
 80130a6:	9300      	str	r3, [sp, #0]
 80130a8:	4622      	mov	r2, r4
 80130aa:	4b0a      	ldr	r3, [pc, #40]	; (80130d4 <_vfiprintf_r+0x228>)
 80130ac:	a904      	add	r1, sp, #16
 80130ae:	4630      	mov	r0, r6
 80130b0:	f7fc fd22 	bl	800faf8 <_printf_i>
 80130b4:	e7ec      	b.n	8013090 <_vfiprintf_r+0x1e4>
 80130b6:	bf00      	nop
 80130b8:	08013990 	.word	0x08013990
 80130bc:	08013adc 	.word	0x08013adc
 80130c0:	080139b0 	.word	0x080139b0
 80130c4:	08013970 	.word	0x08013970
 80130c8:	08013ae2 	.word	0x08013ae2
 80130cc:	08013ae6 	.word	0x08013ae6
 80130d0:	0800f58d 	.word	0x0800f58d
 80130d4:	08012e87 	.word	0x08012e87

080130d8 <__sread>:
 80130d8:	b510      	push	{r4, lr}
 80130da:	460c      	mov	r4, r1
 80130dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80130e0:	f000 faa6 	bl	8013630 <_read_r>
 80130e4:	2800      	cmp	r0, #0
 80130e6:	bfab      	itete	ge
 80130e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80130ea:	89a3      	ldrhlt	r3, [r4, #12]
 80130ec:	181b      	addge	r3, r3, r0
 80130ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80130f2:	bfac      	ite	ge
 80130f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80130f6:	81a3      	strhlt	r3, [r4, #12]
 80130f8:	bd10      	pop	{r4, pc}

080130fa <__swrite>:
 80130fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130fe:	461f      	mov	r7, r3
 8013100:	898b      	ldrh	r3, [r1, #12]
 8013102:	05db      	lsls	r3, r3, #23
 8013104:	4605      	mov	r5, r0
 8013106:	460c      	mov	r4, r1
 8013108:	4616      	mov	r6, r2
 801310a:	d505      	bpl.n	8013118 <__swrite+0x1e>
 801310c:	2302      	movs	r3, #2
 801310e:	2200      	movs	r2, #0
 8013110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013114:	f000 f9d6 	bl	80134c4 <_lseek_r>
 8013118:	89a3      	ldrh	r3, [r4, #12]
 801311a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801311e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013122:	81a3      	strh	r3, [r4, #12]
 8013124:	4632      	mov	r2, r6
 8013126:	463b      	mov	r3, r7
 8013128:	4628      	mov	r0, r5
 801312a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801312e:	f000 b889 	b.w	8013244 <_write_r>

08013132 <__sseek>:
 8013132:	b510      	push	{r4, lr}
 8013134:	460c      	mov	r4, r1
 8013136:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801313a:	f000 f9c3 	bl	80134c4 <_lseek_r>
 801313e:	1c43      	adds	r3, r0, #1
 8013140:	89a3      	ldrh	r3, [r4, #12]
 8013142:	bf15      	itete	ne
 8013144:	6560      	strne	r0, [r4, #84]	; 0x54
 8013146:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801314a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801314e:	81a3      	strheq	r3, [r4, #12]
 8013150:	bf18      	it	ne
 8013152:	81a3      	strhne	r3, [r4, #12]
 8013154:	bd10      	pop	{r4, pc}

08013156 <__sclose>:
 8013156:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801315a:	f000 b8f3 	b.w	8013344 <_close_r>

0801315e <strncmp>:
 801315e:	b510      	push	{r4, lr}
 8013160:	b16a      	cbz	r2, 801317e <strncmp+0x20>
 8013162:	3901      	subs	r1, #1
 8013164:	1884      	adds	r4, r0, r2
 8013166:	f810 3b01 	ldrb.w	r3, [r0], #1
 801316a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801316e:	4293      	cmp	r3, r2
 8013170:	d103      	bne.n	801317a <strncmp+0x1c>
 8013172:	42a0      	cmp	r0, r4
 8013174:	d001      	beq.n	801317a <strncmp+0x1c>
 8013176:	2b00      	cmp	r3, #0
 8013178:	d1f5      	bne.n	8013166 <strncmp+0x8>
 801317a:	1a98      	subs	r0, r3, r2
 801317c:	bd10      	pop	{r4, pc}
 801317e:	4610      	mov	r0, r2
 8013180:	e7fc      	b.n	801317c <strncmp+0x1e>
	...

08013184 <__swbuf_r>:
 8013184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013186:	460e      	mov	r6, r1
 8013188:	4614      	mov	r4, r2
 801318a:	4605      	mov	r5, r0
 801318c:	b118      	cbz	r0, 8013196 <__swbuf_r+0x12>
 801318e:	6983      	ldr	r3, [r0, #24]
 8013190:	b90b      	cbnz	r3, 8013196 <__swbuf_r+0x12>
 8013192:	f7fe fd29 	bl	8011be8 <__sinit>
 8013196:	4b21      	ldr	r3, [pc, #132]	; (801321c <__swbuf_r+0x98>)
 8013198:	429c      	cmp	r4, r3
 801319a:	d12a      	bne.n	80131f2 <__swbuf_r+0x6e>
 801319c:	686c      	ldr	r4, [r5, #4]
 801319e:	69a3      	ldr	r3, [r4, #24]
 80131a0:	60a3      	str	r3, [r4, #8]
 80131a2:	89a3      	ldrh	r3, [r4, #12]
 80131a4:	071a      	lsls	r2, r3, #28
 80131a6:	d52e      	bpl.n	8013206 <__swbuf_r+0x82>
 80131a8:	6923      	ldr	r3, [r4, #16]
 80131aa:	b363      	cbz	r3, 8013206 <__swbuf_r+0x82>
 80131ac:	6923      	ldr	r3, [r4, #16]
 80131ae:	6820      	ldr	r0, [r4, #0]
 80131b0:	1ac0      	subs	r0, r0, r3
 80131b2:	6963      	ldr	r3, [r4, #20]
 80131b4:	b2f6      	uxtb	r6, r6
 80131b6:	4283      	cmp	r3, r0
 80131b8:	4637      	mov	r7, r6
 80131ba:	dc04      	bgt.n	80131c6 <__swbuf_r+0x42>
 80131bc:	4621      	mov	r1, r4
 80131be:	4628      	mov	r0, r5
 80131c0:	f000 f956 	bl	8013470 <_fflush_r>
 80131c4:	bb28      	cbnz	r0, 8013212 <__swbuf_r+0x8e>
 80131c6:	68a3      	ldr	r3, [r4, #8]
 80131c8:	3b01      	subs	r3, #1
 80131ca:	60a3      	str	r3, [r4, #8]
 80131cc:	6823      	ldr	r3, [r4, #0]
 80131ce:	1c5a      	adds	r2, r3, #1
 80131d0:	6022      	str	r2, [r4, #0]
 80131d2:	701e      	strb	r6, [r3, #0]
 80131d4:	6963      	ldr	r3, [r4, #20]
 80131d6:	3001      	adds	r0, #1
 80131d8:	4283      	cmp	r3, r0
 80131da:	d004      	beq.n	80131e6 <__swbuf_r+0x62>
 80131dc:	89a3      	ldrh	r3, [r4, #12]
 80131de:	07db      	lsls	r3, r3, #31
 80131e0:	d519      	bpl.n	8013216 <__swbuf_r+0x92>
 80131e2:	2e0a      	cmp	r6, #10
 80131e4:	d117      	bne.n	8013216 <__swbuf_r+0x92>
 80131e6:	4621      	mov	r1, r4
 80131e8:	4628      	mov	r0, r5
 80131ea:	f000 f941 	bl	8013470 <_fflush_r>
 80131ee:	b190      	cbz	r0, 8013216 <__swbuf_r+0x92>
 80131f0:	e00f      	b.n	8013212 <__swbuf_r+0x8e>
 80131f2:	4b0b      	ldr	r3, [pc, #44]	; (8013220 <__swbuf_r+0x9c>)
 80131f4:	429c      	cmp	r4, r3
 80131f6:	d101      	bne.n	80131fc <__swbuf_r+0x78>
 80131f8:	68ac      	ldr	r4, [r5, #8]
 80131fa:	e7d0      	b.n	801319e <__swbuf_r+0x1a>
 80131fc:	4b09      	ldr	r3, [pc, #36]	; (8013224 <__swbuf_r+0xa0>)
 80131fe:	429c      	cmp	r4, r3
 8013200:	bf08      	it	eq
 8013202:	68ec      	ldreq	r4, [r5, #12]
 8013204:	e7cb      	b.n	801319e <__swbuf_r+0x1a>
 8013206:	4621      	mov	r1, r4
 8013208:	4628      	mov	r0, r5
 801320a:	f000 f82d 	bl	8013268 <__swsetup_r>
 801320e:	2800      	cmp	r0, #0
 8013210:	d0cc      	beq.n	80131ac <__swbuf_r+0x28>
 8013212:	f04f 37ff 	mov.w	r7, #4294967295
 8013216:	4638      	mov	r0, r7
 8013218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801321a:	bf00      	nop
 801321c:	08013990 	.word	0x08013990
 8013220:	080139b0 	.word	0x080139b0
 8013224:	08013970 	.word	0x08013970

08013228 <__ascii_wctomb>:
 8013228:	b149      	cbz	r1, 801323e <__ascii_wctomb+0x16>
 801322a:	2aff      	cmp	r2, #255	; 0xff
 801322c:	bf85      	ittet	hi
 801322e:	238a      	movhi	r3, #138	; 0x8a
 8013230:	6003      	strhi	r3, [r0, #0]
 8013232:	700a      	strbls	r2, [r1, #0]
 8013234:	f04f 30ff 	movhi.w	r0, #4294967295
 8013238:	bf98      	it	ls
 801323a:	2001      	movls	r0, #1
 801323c:	4770      	bx	lr
 801323e:	4608      	mov	r0, r1
 8013240:	4770      	bx	lr
	...

08013244 <_write_r>:
 8013244:	b538      	push	{r3, r4, r5, lr}
 8013246:	4c07      	ldr	r4, [pc, #28]	; (8013264 <_write_r+0x20>)
 8013248:	4605      	mov	r5, r0
 801324a:	4608      	mov	r0, r1
 801324c:	4611      	mov	r1, r2
 801324e:	2200      	movs	r2, #0
 8013250:	6022      	str	r2, [r4, #0]
 8013252:	461a      	mov	r2, r3
 8013254:	f000 fa5e 	bl	8013714 <_write>
 8013258:	1c43      	adds	r3, r0, #1
 801325a:	d102      	bne.n	8013262 <_write_r+0x1e>
 801325c:	6823      	ldr	r3, [r4, #0]
 801325e:	b103      	cbz	r3, 8013262 <_write_r+0x1e>
 8013260:	602b      	str	r3, [r5, #0]
 8013262:	bd38      	pop	{r3, r4, r5, pc}
 8013264:	20002a18 	.word	0x20002a18

08013268 <__swsetup_r>:
 8013268:	4b32      	ldr	r3, [pc, #200]	; (8013334 <__swsetup_r+0xcc>)
 801326a:	b570      	push	{r4, r5, r6, lr}
 801326c:	681d      	ldr	r5, [r3, #0]
 801326e:	4606      	mov	r6, r0
 8013270:	460c      	mov	r4, r1
 8013272:	b125      	cbz	r5, 801327e <__swsetup_r+0x16>
 8013274:	69ab      	ldr	r3, [r5, #24]
 8013276:	b913      	cbnz	r3, 801327e <__swsetup_r+0x16>
 8013278:	4628      	mov	r0, r5
 801327a:	f7fe fcb5 	bl	8011be8 <__sinit>
 801327e:	4b2e      	ldr	r3, [pc, #184]	; (8013338 <__swsetup_r+0xd0>)
 8013280:	429c      	cmp	r4, r3
 8013282:	d10f      	bne.n	80132a4 <__swsetup_r+0x3c>
 8013284:	686c      	ldr	r4, [r5, #4]
 8013286:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801328a:	b29a      	uxth	r2, r3
 801328c:	0715      	lsls	r5, r2, #28
 801328e:	d42c      	bmi.n	80132ea <__swsetup_r+0x82>
 8013290:	06d0      	lsls	r0, r2, #27
 8013292:	d411      	bmi.n	80132b8 <__swsetup_r+0x50>
 8013294:	2209      	movs	r2, #9
 8013296:	6032      	str	r2, [r6, #0]
 8013298:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801329c:	81a3      	strh	r3, [r4, #12]
 801329e:	f04f 30ff 	mov.w	r0, #4294967295
 80132a2:	e03e      	b.n	8013322 <__swsetup_r+0xba>
 80132a4:	4b25      	ldr	r3, [pc, #148]	; (801333c <__swsetup_r+0xd4>)
 80132a6:	429c      	cmp	r4, r3
 80132a8:	d101      	bne.n	80132ae <__swsetup_r+0x46>
 80132aa:	68ac      	ldr	r4, [r5, #8]
 80132ac:	e7eb      	b.n	8013286 <__swsetup_r+0x1e>
 80132ae:	4b24      	ldr	r3, [pc, #144]	; (8013340 <__swsetup_r+0xd8>)
 80132b0:	429c      	cmp	r4, r3
 80132b2:	bf08      	it	eq
 80132b4:	68ec      	ldreq	r4, [r5, #12]
 80132b6:	e7e6      	b.n	8013286 <__swsetup_r+0x1e>
 80132b8:	0751      	lsls	r1, r2, #29
 80132ba:	d512      	bpl.n	80132e2 <__swsetup_r+0x7a>
 80132bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80132be:	b141      	cbz	r1, 80132d2 <__swsetup_r+0x6a>
 80132c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80132c4:	4299      	cmp	r1, r3
 80132c6:	d002      	beq.n	80132ce <__swsetup_r+0x66>
 80132c8:	4630      	mov	r0, r6
 80132ca:	f7fc f823 	bl	800f314 <_free_r>
 80132ce:	2300      	movs	r3, #0
 80132d0:	6363      	str	r3, [r4, #52]	; 0x34
 80132d2:	89a3      	ldrh	r3, [r4, #12]
 80132d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80132d8:	81a3      	strh	r3, [r4, #12]
 80132da:	2300      	movs	r3, #0
 80132dc:	6063      	str	r3, [r4, #4]
 80132de:	6923      	ldr	r3, [r4, #16]
 80132e0:	6023      	str	r3, [r4, #0]
 80132e2:	89a3      	ldrh	r3, [r4, #12]
 80132e4:	f043 0308 	orr.w	r3, r3, #8
 80132e8:	81a3      	strh	r3, [r4, #12]
 80132ea:	6923      	ldr	r3, [r4, #16]
 80132ec:	b94b      	cbnz	r3, 8013302 <__swsetup_r+0x9a>
 80132ee:	89a3      	ldrh	r3, [r4, #12]
 80132f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80132f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80132f8:	d003      	beq.n	8013302 <__swsetup_r+0x9a>
 80132fa:	4621      	mov	r1, r4
 80132fc:	4630      	mov	r0, r6
 80132fe:	f000 f917 	bl	8013530 <__smakebuf_r>
 8013302:	89a2      	ldrh	r2, [r4, #12]
 8013304:	f012 0301 	ands.w	r3, r2, #1
 8013308:	d00c      	beq.n	8013324 <__swsetup_r+0xbc>
 801330a:	2300      	movs	r3, #0
 801330c:	60a3      	str	r3, [r4, #8]
 801330e:	6963      	ldr	r3, [r4, #20]
 8013310:	425b      	negs	r3, r3
 8013312:	61a3      	str	r3, [r4, #24]
 8013314:	6923      	ldr	r3, [r4, #16]
 8013316:	b953      	cbnz	r3, 801332e <__swsetup_r+0xc6>
 8013318:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801331c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8013320:	d1ba      	bne.n	8013298 <__swsetup_r+0x30>
 8013322:	bd70      	pop	{r4, r5, r6, pc}
 8013324:	0792      	lsls	r2, r2, #30
 8013326:	bf58      	it	pl
 8013328:	6963      	ldrpl	r3, [r4, #20]
 801332a:	60a3      	str	r3, [r4, #8]
 801332c:	e7f2      	b.n	8013314 <__swsetup_r+0xac>
 801332e:	2000      	movs	r0, #0
 8013330:	e7f7      	b.n	8013322 <__swsetup_r+0xba>
 8013332:	bf00      	nop
 8013334:	20000190 	.word	0x20000190
 8013338:	08013990 	.word	0x08013990
 801333c:	080139b0 	.word	0x080139b0
 8013340:	08013970 	.word	0x08013970

08013344 <_close_r>:
 8013344:	b538      	push	{r3, r4, r5, lr}
 8013346:	4c06      	ldr	r4, [pc, #24]	; (8013360 <_close_r+0x1c>)
 8013348:	2300      	movs	r3, #0
 801334a:	4605      	mov	r5, r0
 801334c:	4608      	mov	r0, r1
 801334e:	6023      	str	r3, [r4, #0]
 8013350:	f000 f9aa 	bl	80136a8 <_close>
 8013354:	1c43      	adds	r3, r0, #1
 8013356:	d102      	bne.n	801335e <_close_r+0x1a>
 8013358:	6823      	ldr	r3, [r4, #0]
 801335a:	b103      	cbz	r3, 801335e <_close_r+0x1a>
 801335c:	602b      	str	r3, [r5, #0]
 801335e:	bd38      	pop	{r3, r4, r5, pc}
 8013360:	20002a18 	.word	0x20002a18

08013364 <__sflush_r>:
 8013364:	898a      	ldrh	r2, [r1, #12]
 8013366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801336a:	4605      	mov	r5, r0
 801336c:	0710      	lsls	r0, r2, #28
 801336e:	460c      	mov	r4, r1
 8013370:	d458      	bmi.n	8013424 <__sflush_r+0xc0>
 8013372:	684b      	ldr	r3, [r1, #4]
 8013374:	2b00      	cmp	r3, #0
 8013376:	dc05      	bgt.n	8013384 <__sflush_r+0x20>
 8013378:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801337a:	2b00      	cmp	r3, #0
 801337c:	dc02      	bgt.n	8013384 <__sflush_r+0x20>
 801337e:	2000      	movs	r0, #0
 8013380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013384:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013386:	2e00      	cmp	r6, #0
 8013388:	d0f9      	beq.n	801337e <__sflush_r+0x1a>
 801338a:	2300      	movs	r3, #0
 801338c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013390:	682f      	ldr	r7, [r5, #0]
 8013392:	6a21      	ldr	r1, [r4, #32]
 8013394:	602b      	str	r3, [r5, #0]
 8013396:	d032      	beq.n	80133fe <__sflush_r+0x9a>
 8013398:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801339a:	89a3      	ldrh	r3, [r4, #12]
 801339c:	075a      	lsls	r2, r3, #29
 801339e:	d505      	bpl.n	80133ac <__sflush_r+0x48>
 80133a0:	6863      	ldr	r3, [r4, #4]
 80133a2:	1ac0      	subs	r0, r0, r3
 80133a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80133a6:	b10b      	cbz	r3, 80133ac <__sflush_r+0x48>
 80133a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80133aa:	1ac0      	subs	r0, r0, r3
 80133ac:	2300      	movs	r3, #0
 80133ae:	4602      	mov	r2, r0
 80133b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80133b2:	6a21      	ldr	r1, [r4, #32]
 80133b4:	4628      	mov	r0, r5
 80133b6:	47b0      	blx	r6
 80133b8:	1c43      	adds	r3, r0, #1
 80133ba:	89a3      	ldrh	r3, [r4, #12]
 80133bc:	d106      	bne.n	80133cc <__sflush_r+0x68>
 80133be:	6829      	ldr	r1, [r5, #0]
 80133c0:	291d      	cmp	r1, #29
 80133c2:	d848      	bhi.n	8013456 <__sflush_r+0xf2>
 80133c4:	4a29      	ldr	r2, [pc, #164]	; (801346c <__sflush_r+0x108>)
 80133c6:	40ca      	lsrs	r2, r1
 80133c8:	07d6      	lsls	r6, r2, #31
 80133ca:	d544      	bpl.n	8013456 <__sflush_r+0xf2>
 80133cc:	2200      	movs	r2, #0
 80133ce:	6062      	str	r2, [r4, #4]
 80133d0:	04d9      	lsls	r1, r3, #19
 80133d2:	6922      	ldr	r2, [r4, #16]
 80133d4:	6022      	str	r2, [r4, #0]
 80133d6:	d504      	bpl.n	80133e2 <__sflush_r+0x7e>
 80133d8:	1c42      	adds	r2, r0, #1
 80133da:	d101      	bne.n	80133e0 <__sflush_r+0x7c>
 80133dc:	682b      	ldr	r3, [r5, #0]
 80133de:	b903      	cbnz	r3, 80133e2 <__sflush_r+0x7e>
 80133e0:	6560      	str	r0, [r4, #84]	; 0x54
 80133e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80133e4:	602f      	str	r7, [r5, #0]
 80133e6:	2900      	cmp	r1, #0
 80133e8:	d0c9      	beq.n	801337e <__sflush_r+0x1a>
 80133ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80133ee:	4299      	cmp	r1, r3
 80133f0:	d002      	beq.n	80133f8 <__sflush_r+0x94>
 80133f2:	4628      	mov	r0, r5
 80133f4:	f7fb ff8e 	bl	800f314 <_free_r>
 80133f8:	2000      	movs	r0, #0
 80133fa:	6360      	str	r0, [r4, #52]	; 0x34
 80133fc:	e7c0      	b.n	8013380 <__sflush_r+0x1c>
 80133fe:	2301      	movs	r3, #1
 8013400:	4628      	mov	r0, r5
 8013402:	47b0      	blx	r6
 8013404:	1c41      	adds	r1, r0, #1
 8013406:	d1c8      	bne.n	801339a <__sflush_r+0x36>
 8013408:	682b      	ldr	r3, [r5, #0]
 801340a:	2b00      	cmp	r3, #0
 801340c:	d0c5      	beq.n	801339a <__sflush_r+0x36>
 801340e:	2b1d      	cmp	r3, #29
 8013410:	d001      	beq.n	8013416 <__sflush_r+0xb2>
 8013412:	2b16      	cmp	r3, #22
 8013414:	d101      	bne.n	801341a <__sflush_r+0xb6>
 8013416:	602f      	str	r7, [r5, #0]
 8013418:	e7b1      	b.n	801337e <__sflush_r+0x1a>
 801341a:	89a3      	ldrh	r3, [r4, #12]
 801341c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013420:	81a3      	strh	r3, [r4, #12]
 8013422:	e7ad      	b.n	8013380 <__sflush_r+0x1c>
 8013424:	690f      	ldr	r7, [r1, #16]
 8013426:	2f00      	cmp	r7, #0
 8013428:	d0a9      	beq.n	801337e <__sflush_r+0x1a>
 801342a:	0793      	lsls	r3, r2, #30
 801342c:	680e      	ldr	r6, [r1, #0]
 801342e:	bf08      	it	eq
 8013430:	694b      	ldreq	r3, [r1, #20]
 8013432:	600f      	str	r7, [r1, #0]
 8013434:	bf18      	it	ne
 8013436:	2300      	movne	r3, #0
 8013438:	eba6 0807 	sub.w	r8, r6, r7
 801343c:	608b      	str	r3, [r1, #8]
 801343e:	f1b8 0f00 	cmp.w	r8, #0
 8013442:	dd9c      	ble.n	801337e <__sflush_r+0x1a>
 8013444:	4643      	mov	r3, r8
 8013446:	463a      	mov	r2, r7
 8013448:	6a21      	ldr	r1, [r4, #32]
 801344a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801344c:	4628      	mov	r0, r5
 801344e:	47b0      	blx	r6
 8013450:	2800      	cmp	r0, #0
 8013452:	dc06      	bgt.n	8013462 <__sflush_r+0xfe>
 8013454:	89a3      	ldrh	r3, [r4, #12]
 8013456:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801345a:	81a3      	strh	r3, [r4, #12]
 801345c:	f04f 30ff 	mov.w	r0, #4294967295
 8013460:	e78e      	b.n	8013380 <__sflush_r+0x1c>
 8013462:	4407      	add	r7, r0
 8013464:	eba8 0800 	sub.w	r8, r8, r0
 8013468:	e7e9      	b.n	801343e <__sflush_r+0xda>
 801346a:	bf00      	nop
 801346c:	20400001 	.word	0x20400001

08013470 <_fflush_r>:
 8013470:	b538      	push	{r3, r4, r5, lr}
 8013472:	690b      	ldr	r3, [r1, #16]
 8013474:	4605      	mov	r5, r0
 8013476:	460c      	mov	r4, r1
 8013478:	b1db      	cbz	r3, 80134b2 <_fflush_r+0x42>
 801347a:	b118      	cbz	r0, 8013484 <_fflush_r+0x14>
 801347c:	6983      	ldr	r3, [r0, #24]
 801347e:	b90b      	cbnz	r3, 8013484 <_fflush_r+0x14>
 8013480:	f7fe fbb2 	bl	8011be8 <__sinit>
 8013484:	4b0c      	ldr	r3, [pc, #48]	; (80134b8 <_fflush_r+0x48>)
 8013486:	429c      	cmp	r4, r3
 8013488:	d109      	bne.n	801349e <_fflush_r+0x2e>
 801348a:	686c      	ldr	r4, [r5, #4]
 801348c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013490:	b17b      	cbz	r3, 80134b2 <_fflush_r+0x42>
 8013492:	4621      	mov	r1, r4
 8013494:	4628      	mov	r0, r5
 8013496:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801349a:	f7ff bf63 	b.w	8013364 <__sflush_r>
 801349e:	4b07      	ldr	r3, [pc, #28]	; (80134bc <_fflush_r+0x4c>)
 80134a0:	429c      	cmp	r4, r3
 80134a2:	d101      	bne.n	80134a8 <_fflush_r+0x38>
 80134a4:	68ac      	ldr	r4, [r5, #8]
 80134a6:	e7f1      	b.n	801348c <_fflush_r+0x1c>
 80134a8:	4b05      	ldr	r3, [pc, #20]	; (80134c0 <_fflush_r+0x50>)
 80134aa:	429c      	cmp	r4, r3
 80134ac:	bf08      	it	eq
 80134ae:	68ec      	ldreq	r4, [r5, #12]
 80134b0:	e7ec      	b.n	801348c <_fflush_r+0x1c>
 80134b2:	2000      	movs	r0, #0
 80134b4:	bd38      	pop	{r3, r4, r5, pc}
 80134b6:	bf00      	nop
 80134b8:	08013990 	.word	0x08013990
 80134bc:	080139b0 	.word	0x080139b0
 80134c0:	08013970 	.word	0x08013970

080134c4 <_lseek_r>:
 80134c4:	b538      	push	{r3, r4, r5, lr}
 80134c6:	4c07      	ldr	r4, [pc, #28]	; (80134e4 <_lseek_r+0x20>)
 80134c8:	4605      	mov	r5, r0
 80134ca:	4608      	mov	r0, r1
 80134cc:	4611      	mov	r1, r2
 80134ce:	2200      	movs	r2, #0
 80134d0:	6022      	str	r2, [r4, #0]
 80134d2:	461a      	mov	r2, r3
 80134d4:	f000 f900 	bl	80136d8 <_lseek>
 80134d8:	1c43      	adds	r3, r0, #1
 80134da:	d102      	bne.n	80134e2 <_lseek_r+0x1e>
 80134dc:	6823      	ldr	r3, [r4, #0]
 80134de:	b103      	cbz	r3, 80134e2 <_lseek_r+0x1e>
 80134e0:	602b      	str	r3, [r5, #0]
 80134e2:	bd38      	pop	{r3, r4, r5, pc}
 80134e4:	20002a18 	.word	0x20002a18

080134e8 <__swhatbuf_r>:
 80134e8:	b570      	push	{r4, r5, r6, lr}
 80134ea:	460e      	mov	r6, r1
 80134ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80134f0:	2900      	cmp	r1, #0
 80134f2:	b096      	sub	sp, #88	; 0x58
 80134f4:	4614      	mov	r4, r2
 80134f6:	461d      	mov	r5, r3
 80134f8:	da07      	bge.n	801350a <__swhatbuf_r+0x22>
 80134fa:	2300      	movs	r3, #0
 80134fc:	602b      	str	r3, [r5, #0]
 80134fe:	89b3      	ldrh	r3, [r6, #12]
 8013500:	061a      	lsls	r2, r3, #24
 8013502:	d410      	bmi.n	8013526 <__swhatbuf_r+0x3e>
 8013504:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013508:	e00e      	b.n	8013528 <__swhatbuf_r+0x40>
 801350a:	466a      	mov	r2, sp
 801350c:	f000 f8a2 	bl	8013654 <_fstat_r>
 8013510:	2800      	cmp	r0, #0
 8013512:	dbf2      	blt.n	80134fa <__swhatbuf_r+0x12>
 8013514:	9a01      	ldr	r2, [sp, #4]
 8013516:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801351a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801351e:	425a      	negs	r2, r3
 8013520:	415a      	adcs	r2, r3
 8013522:	602a      	str	r2, [r5, #0]
 8013524:	e7ee      	b.n	8013504 <__swhatbuf_r+0x1c>
 8013526:	2340      	movs	r3, #64	; 0x40
 8013528:	2000      	movs	r0, #0
 801352a:	6023      	str	r3, [r4, #0]
 801352c:	b016      	add	sp, #88	; 0x58
 801352e:	bd70      	pop	{r4, r5, r6, pc}

08013530 <__smakebuf_r>:
 8013530:	898b      	ldrh	r3, [r1, #12]
 8013532:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013534:	079d      	lsls	r5, r3, #30
 8013536:	4606      	mov	r6, r0
 8013538:	460c      	mov	r4, r1
 801353a:	d507      	bpl.n	801354c <__smakebuf_r+0x1c>
 801353c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013540:	6023      	str	r3, [r4, #0]
 8013542:	6123      	str	r3, [r4, #16]
 8013544:	2301      	movs	r3, #1
 8013546:	6163      	str	r3, [r4, #20]
 8013548:	b002      	add	sp, #8
 801354a:	bd70      	pop	{r4, r5, r6, pc}
 801354c:	ab01      	add	r3, sp, #4
 801354e:	466a      	mov	r2, sp
 8013550:	f7ff ffca 	bl	80134e8 <__swhatbuf_r>
 8013554:	9900      	ldr	r1, [sp, #0]
 8013556:	4605      	mov	r5, r0
 8013558:	4630      	mov	r0, r6
 801355a:	f7fb ff29 	bl	800f3b0 <_malloc_r>
 801355e:	b948      	cbnz	r0, 8013574 <__smakebuf_r+0x44>
 8013560:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013564:	059a      	lsls	r2, r3, #22
 8013566:	d4ef      	bmi.n	8013548 <__smakebuf_r+0x18>
 8013568:	f023 0303 	bic.w	r3, r3, #3
 801356c:	f043 0302 	orr.w	r3, r3, #2
 8013570:	81a3      	strh	r3, [r4, #12]
 8013572:	e7e3      	b.n	801353c <__smakebuf_r+0xc>
 8013574:	4b0d      	ldr	r3, [pc, #52]	; (80135ac <__smakebuf_r+0x7c>)
 8013576:	62b3      	str	r3, [r6, #40]	; 0x28
 8013578:	89a3      	ldrh	r3, [r4, #12]
 801357a:	6020      	str	r0, [r4, #0]
 801357c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013580:	81a3      	strh	r3, [r4, #12]
 8013582:	9b00      	ldr	r3, [sp, #0]
 8013584:	6163      	str	r3, [r4, #20]
 8013586:	9b01      	ldr	r3, [sp, #4]
 8013588:	6120      	str	r0, [r4, #16]
 801358a:	b15b      	cbz	r3, 80135a4 <__smakebuf_r+0x74>
 801358c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013590:	4630      	mov	r0, r6
 8013592:	f000 f871 	bl	8013678 <_isatty_r>
 8013596:	b128      	cbz	r0, 80135a4 <__smakebuf_r+0x74>
 8013598:	89a3      	ldrh	r3, [r4, #12]
 801359a:	f023 0303 	bic.w	r3, r3, #3
 801359e:	f043 0301 	orr.w	r3, r3, #1
 80135a2:	81a3      	strh	r3, [r4, #12]
 80135a4:	89a3      	ldrh	r3, [r4, #12]
 80135a6:	431d      	orrs	r5, r3
 80135a8:	81a5      	strh	r5, [r4, #12]
 80135aa:	e7cd      	b.n	8013548 <__smakebuf_r+0x18>
 80135ac:	08011bb1 	.word	0x08011bb1

080135b0 <memmove>:
 80135b0:	4288      	cmp	r0, r1
 80135b2:	b510      	push	{r4, lr}
 80135b4:	eb01 0302 	add.w	r3, r1, r2
 80135b8:	d807      	bhi.n	80135ca <memmove+0x1a>
 80135ba:	1e42      	subs	r2, r0, #1
 80135bc:	4299      	cmp	r1, r3
 80135be:	d00a      	beq.n	80135d6 <memmove+0x26>
 80135c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80135c4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80135c8:	e7f8      	b.n	80135bc <memmove+0xc>
 80135ca:	4283      	cmp	r3, r0
 80135cc:	d9f5      	bls.n	80135ba <memmove+0xa>
 80135ce:	1881      	adds	r1, r0, r2
 80135d0:	1ad2      	subs	r2, r2, r3
 80135d2:	42d3      	cmn	r3, r2
 80135d4:	d100      	bne.n	80135d8 <memmove+0x28>
 80135d6:	bd10      	pop	{r4, pc}
 80135d8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80135dc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80135e0:	e7f7      	b.n	80135d2 <memmove+0x22>

080135e2 <_realloc_r>:
 80135e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135e4:	4607      	mov	r7, r0
 80135e6:	4614      	mov	r4, r2
 80135e8:	460e      	mov	r6, r1
 80135ea:	b921      	cbnz	r1, 80135f6 <_realloc_r+0x14>
 80135ec:	4611      	mov	r1, r2
 80135ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80135f2:	f7fb bedd 	b.w	800f3b0 <_malloc_r>
 80135f6:	b922      	cbnz	r2, 8013602 <_realloc_r+0x20>
 80135f8:	f7fb fe8c 	bl	800f314 <_free_r>
 80135fc:	4625      	mov	r5, r4
 80135fe:	4628      	mov	r0, r5
 8013600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013602:	f000 f849 	bl	8013698 <_malloc_usable_size_r>
 8013606:	42a0      	cmp	r0, r4
 8013608:	d20f      	bcs.n	801362a <_realloc_r+0x48>
 801360a:	4621      	mov	r1, r4
 801360c:	4638      	mov	r0, r7
 801360e:	f7fb fecf 	bl	800f3b0 <_malloc_r>
 8013612:	4605      	mov	r5, r0
 8013614:	2800      	cmp	r0, #0
 8013616:	d0f2      	beq.n	80135fe <_realloc_r+0x1c>
 8013618:	4631      	mov	r1, r6
 801361a:	4622      	mov	r2, r4
 801361c:	f7fb fe66 	bl	800f2ec <memcpy>
 8013620:	4631      	mov	r1, r6
 8013622:	4638      	mov	r0, r7
 8013624:	f7fb fe76 	bl	800f314 <_free_r>
 8013628:	e7e9      	b.n	80135fe <_realloc_r+0x1c>
 801362a:	4635      	mov	r5, r6
 801362c:	e7e7      	b.n	80135fe <_realloc_r+0x1c>
	...

08013630 <_read_r>:
 8013630:	b538      	push	{r3, r4, r5, lr}
 8013632:	4c07      	ldr	r4, [pc, #28]	; (8013650 <_read_r+0x20>)
 8013634:	4605      	mov	r5, r0
 8013636:	4608      	mov	r0, r1
 8013638:	4611      	mov	r1, r2
 801363a:	2200      	movs	r2, #0
 801363c:	6022      	str	r2, [r4, #0]
 801363e:	461a      	mov	r2, r3
 8013640:	f000 f852 	bl	80136e8 <_read>
 8013644:	1c43      	adds	r3, r0, #1
 8013646:	d102      	bne.n	801364e <_read_r+0x1e>
 8013648:	6823      	ldr	r3, [r4, #0]
 801364a:	b103      	cbz	r3, 801364e <_read_r+0x1e>
 801364c:	602b      	str	r3, [r5, #0]
 801364e:	bd38      	pop	{r3, r4, r5, pc}
 8013650:	20002a18 	.word	0x20002a18

08013654 <_fstat_r>:
 8013654:	b538      	push	{r3, r4, r5, lr}
 8013656:	4c07      	ldr	r4, [pc, #28]	; (8013674 <_fstat_r+0x20>)
 8013658:	2300      	movs	r3, #0
 801365a:	4605      	mov	r5, r0
 801365c:	4608      	mov	r0, r1
 801365e:	4611      	mov	r1, r2
 8013660:	6023      	str	r3, [r4, #0]
 8013662:	f000 f829 	bl	80136b8 <_fstat>
 8013666:	1c43      	adds	r3, r0, #1
 8013668:	d102      	bne.n	8013670 <_fstat_r+0x1c>
 801366a:	6823      	ldr	r3, [r4, #0]
 801366c:	b103      	cbz	r3, 8013670 <_fstat_r+0x1c>
 801366e:	602b      	str	r3, [r5, #0]
 8013670:	bd38      	pop	{r3, r4, r5, pc}
 8013672:	bf00      	nop
 8013674:	20002a18 	.word	0x20002a18

08013678 <_isatty_r>:
 8013678:	b538      	push	{r3, r4, r5, lr}
 801367a:	4c06      	ldr	r4, [pc, #24]	; (8013694 <_isatty_r+0x1c>)
 801367c:	2300      	movs	r3, #0
 801367e:	4605      	mov	r5, r0
 8013680:	4608      	mov	r0, r1
 8013682:	6023      	str	r3, [r4, #0]
 8013684:	f000 f820 	bl	80136c8 <_isatty>
 8013688:	1c43      	adds	r3, r0, #1
 801368a:	d102      	bne.n	8013692 <_isatty_r+0x1a>
 801368c:	6823      	ldr	r3, [r4, #0]
 801368e:	b103      	cbz	r3, 8013692 <_isatty_r+0x1a>
 8013690:	602b      	str	r3, [r5, #0]
 8013692:	bd38      	pop	{r3, r4, r5, pc}
 8013694:	20002a18 	.word	0x20002a18

08013698 <_malloc_usable_size_r>:
 8013698:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801369c:	1f18      	subs	r0, r3, #4
 801369e:	2b00      	cmp	r3, #0
 80136a0:	bfbc      	itt	lt
 80136a2:	580b      	ldrlt	r3, [r1, r0]
 80136a4:	18c0      	addlt	r0, r0, r3
 80136a6:	4770      	bx	lr

080136a8 <_close>:
 80136a8:	4b02      	ldr	r3, [pc, #8]	; (80136b4 <_close+0xc>)
 80136aa:	2258      	movs	r2, #88	; 0x58
 80136ac:	601a      	str	r2, [r3, #0]
 80136ae:	f04f 30ff 	mov.w	r0, #4294967295
 80136b2:	4770      	bx	lr
 80136b4:	20002a18 	.word	0x20002a18

080136b8 <_fstat>:
 80136b8:	4b02      	ldr	r3, [pc, #8]	; (80136c4 <_fstat+0xc>)
 80136ba:	2258      	movs	r2, #88	; 0x58
 80136bc:	601a      	str	r2, [r3, #0]
 80136be:	f04f 30ff 	mov.w	r0, #4294967295
 80136c2:	4770      	bx	lr
 80136c4:	20002a18 	.word	0x20002a18

080136c8 <_isatty>:
 80136c8:	4b02      	ldr	r3, [pc, #8]	; (80136d4 <_isatty+0xc>)
 80136ca:	2258      	movs	r2, #88	; 0x58
 80136cc:	601a      	str	r2, [r3, #0]
 80136ce:	2000      	movs	r0, #0
 80136d0:	4770      	bx	lr
 80136d2:	bf00      	nop
 80136d4:	20002a18 	.word	0x20002a18

080136d8 <_lseek>:
 80136d8:	4b02      	ldr	r3, [pc, #8]	; (80136e4 <_lseek+0xc>)
 80136da:	2258      	movs	r2, #88	; 0x58
 80136dc:	601a      	str	r2, [r3, #0]
 80136de:	f04f 30ff 	mov.w	r0, #4294967295
 80136e2:	4770      	bx	lr
 80136e4:	20002a18 	.word	0x20002a18

080136e8 <_read>:
 80136e8:	4b02      	ldr	r3, [pc, #8]	; (80136f4 <_read+0xc>)
 80136ea:	2258      	movs	r2, #88	; 0x58
 80136ec:	601a      	str	r2, [r3, #0]
 80136ee:	f04f 30ff 	mov.w	r0, #4294967295
 80136f2:	4770      	bx	lr
 80136f4:	20002a18 	.word	0x20002a18

080136f8 <_sbrk>:
 80136f8:	4b04      	ldr	r3, [pc, #16]	; (801370c <_sbrk+0x14>)
 80136fa:	6819      	ldr	r1, [r3, #0]
 80136fc:	4602      	mov	r2, r0
 80136fe:	b909      	cbnz	r1, 8013704 <_sbrk+0xc>
 8013700:	4903      	ldr	r1, [pc, #12]	; (8013710 <_sbrk+0x18>)
 8013702:	6019      	str	r1, [r3, #0]
 8013704:	6818      	ldr	r0, [r3, #0]
 8013706:	4402      	add	r2, r0
 8013708:	601a      	str	r2, [r3, #0]
 801370a:	4770      	bx	lr
 801370c:	200007c4 	.word	0x200007c4
 8013710:	20002a20 	.word	0x20002a20

08013714 <_write>:
 8013714:	4b02      	ldr	r3, [pc, #8]	; (8013720 <_write+0xc>)
 8013716:	2258      	movs	r2, #88	; 0x58
 8013718:	601a      	str	r2, [r3, #0]
 801371a:	f04f 30ff 	mov.w	r0, #4294967295
 801371e:	4770      	bx	lr
 8013720:	20002a18 	.word	0x20002a18

08013724 <_init>:
 8013724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013726:	bf00      	nop
 8013728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801372a:	bc08      	pop	{r3}
 801372c:	469e      	mov	lr, r3
 801372e:	4770      	bx	lr

08013730 <_fini>:
 8013730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013732:	bf00      	nop
 8013734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013736:	bc08      	pop	{r3}
 8013738:	469e      	mov	lr, r3
 801373a:	4770      	bx	lr
