
Satellite2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f9fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000328  0800fb90  0800fb90  0001fb90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800feb8  0800feb8  00020350  2**0
                  CONTENTS
  4 .ARM          00000008  0800feb8  0800feb8  0001feb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fec0  0800fec0  00020350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fec0  0800fec0  0001fec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fec4  0800fec4  0001fec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  0800fec8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024e8  20000350  08010218  00020350  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002838  08010218  00022838  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020350  2**0
                  CONTENTS, READONLY
 12 .debug_info   000274b2  00000000  00000000  00020380  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004d4a  00000000  00000000  00047832  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001df0  00000000  00000000  0004c580  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001bd8  00000000  00000000  0004e370  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000709c  00000000  00000000  0004ff48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001cea6  00000000  00000000  00056fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d38bd  00000000  00000000  00073e8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00147747  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008b30  00000000  00000000  001477c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000350 	.word	0x20000350
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fb74 	.word	0x0800fb74

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000354 	.word	0x20000354
 80001cc:	0800fb74 	.word	0x0800fb74

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <setup>:
int8_t counterDir;
bool notPlayed;
int i;

void setup()
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_RESET);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2180      	movs	r1, #128	; 0x80
 8000f90:	4828      	ldr	r0, [pc, #160]	; (8001034 <setup+0xac>)
 8000f92:	f001 fee7 	bl	8002d64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 8000f96:	2200      	movs	r2, #0
 8000f98:	2140      	movs	r1, #64	; 0x40
 8000f9a:	4826      	ldr	r0, [pc, #152]	; (8001034 <setup+0xac>)
 8000f9c:	f001 fee2 	bl	8002d64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDC_GPIO_Port, LEDC_Pin, GPIO_PIN_RESET);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fa6:	4824      	ldr	r0, [pc, #144]	; (8001038 <setup+0xb0>)
 8000fa8:	f001 fedc 	bl	8002d64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDD_GPIO_Port, LEDD_Pin, GPIO_PIN_RESET);
 8000fac:	2200      	movs	r2, #0
 8000fae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fb2:	4821      	ldr	r0, [pc, #132]	; (8001038 <setup+0xb0>)
 8000fb4:	f001 fed6 	bl	8002d64 <HAL_GPIO_WritePin>
	HAL_Delay(750);
 8000fb8:	f240 20ee 	movw	r0, #750	; 0x2ee
 8000fbc:	f001 f850 	bl	8002060 <HAL_Delay>

	HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_SET);
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	2180      	movs	r1, #128	; 0x80
 8000fc4:	481b      	ldr	r0, [pc, #108]	; (8001034 <setup+0xac>)
 8000fc6:	f001 fecd 	bl	8002d64 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000fca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fce:	f001 f847 	bl	8002060 <HAL_Delay>
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	2140      	movs	r1, #64	; 0x40
 8000fd6:	4817      	ldr	r0, [pc, #92]	; (8001034 <setup+0xac>)
 8000fd8:	f001 fec4 	bl	8002d64 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000fdc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fe0:	f001 f83e 	bl	8002060 <HAL_Delay>
	HAL_GPIO_WritePin(LEDC_GPIO_Port, LEDC_Pin, GPIO_PIN_SET);
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fea:	4813      	ldr	r0, [pc, #76]	; (8001038 <setup+0xb0>)
 8000fec:	f001 feba 	bl	8002d64 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000ff0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ff4:	f001 f834 	bl	8002060 <HAL_Delay>
	HAL_GPIO_WritePin(LEDD_GPIO_Port, LEDD_Pin, GPIO_PIN_SET);
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ffe:	480e      	ldr	r0, [pc, #56]	; (8001038 <setup+0xb0>)
 8001000:	f001 feb0 	bl	8002d64 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001004:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001008:	f001 f82a 	bl	8002060 <HAL_Delay>

	motL = 0;
 800100c:	4b0b      	ldr	r3, [pc, #44]	; (800103c <setup+0xb4>)
 800100e:	2200      	movs	r2, #0
 8001010:	701a      	strb	r2, [r3, #0]
	motR = 0;
 8001012:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <setup+0xb8>)
 8001014:	2200      	movs	r2, #0
 8001016:	701a      	strb	r2, [r3, #0]
	counterDir = 1;
 8001018:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <setup+0xbc>)
 800101a:	2201      	movs	r2, #1
 800101c:	701a      	strb	r2, [r3, #0]
	enableMotors();
 800101e:	f000 f867 	bl	80010f0 <enableMotors>
	setPwmFrequency(100000);
 8001022:	4809      	ldr	r0, [pc, #36]	; (8001048 <setup+0xc0>)
 8001024:	f000 f89e 	bl	8001164 <setPwmFrequency>
	notPlayed = true;
 8001028:	4b08      	ldr	r3, [pc, #32]	; (800104c <setup+0xc4>)
 800102a:	2201      	movs	r2, #1
 800102c:	701a      	strb	r2, [r3, #0]
		println("Radio init successful!");
		HAL_GPIO_TogglePin(LEDB_GPIO_Port, LEDB_Pin);
		HAL_Delay(500);
	}
	 */
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40020800 	.word	0x40020800
 8001038:	40020400 	.word	0x40020400
 800103c:	2000036c 	.word	0x2000036c
 8001040:	2000036d 	.word	0x2000036d
 8001044:	20000596 	.word	0x20000596
 8001048:	000186a0 	.word	0x000186a0
 800104c:	20000594 	.word	0x20000594

08001050 <loop>:

void loop()
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PH_R_GPIO_Port, PH_R_Pin, GPIO_PIN_SET);
 8001054:	2201      	movs	r2, #1
 8001056:	2104      	movs	r1, #4
 8001058:	4816      	ldr	r0, [pc, #88]	; (80010b4 <loop+0x64>)
 800105a:	f001 fe83 	bl	8002d64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PH_L_GPIO_Port, PH_L_Pin, GPIO_PIN_SET);
 800105e:	2201      	movs	r2, #1
 8001060:	2101      	movs	r1, #1
 8001062:	4814      	ldr	r0, [pc, #80]	; (80010b4 <loop+0x64>)
 8001064:	f001 fe7e 	bl	8002d64 <HAL_GPIO_WritePin>

	HAL_Delay(2000);
 8001068:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800106c:	f000 fff8 	bl	8002060 <HAL_Delay>
	HAL_GPIO_WritePin(EN_L_GPIO_Port, EN_L_Pin, GPIO_PIN_SET);
 8001070:	2201      	movs	r2, #1
 8001072:	2102      	movs	r1, #2
 8001074:	480f      	ldr	r0, [pc, #60]	; (80010b4 <loop+0x64>)
 8001076:	f001 fe75 	bl	8002d64 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 800107a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800107e:	f000 ffef 	bl	8002060 <HAL_Delay>
	HAL_GPIO_WritePin(EN_L_GPIO_Port, EN_L_Pin, GPIO_PIN_RESET);
 8001082:	2200      	movs	r2, #0
 8001084:	2102      	movs	r1, #2
 8001086:	480b      	ldr	r0, [pc, #44]	; (80010b4 <loop+0x64>)
 8001088:	f001 fe6c 	bl	8002d64 <HAL_GPIO_WritePin>

	HAL_Delay(2000);
 800108c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001090:	f000 ffe6 	bl	8002060 <HAL_Delay>
	HAL_GPIO_WritePin(EN_R_GPIO_Port, EN_R_Pin, GPIO_PIN_SET);
 8001094:	2201      	movs	r2, #1
 8001096:	2108      	movs	r1, #8
 8001098:	4806      	ldr	r0, [pc, #24]	; (80010b4 <loop+0x64>)
 800109a:	f001 fe63 	bl	8002d64 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800109e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010a2:	f000 ffdd 	bl	8002060 <HAL_Delay>
	HAL_GPIO_WritePin(EN_R_GPIO_Port, EN_R_Pin, GPIO_PIN_RESET);
 80010a6:	2200      	movs	r2, #0
 80010a8:	2108      	movs	r1, #8
 80010aa:	4802      	ldr	r0, [pc, #8]	; (80010b4 <loop+0x64>)
 80010ac:	f001 fe5a 	bl	8002d64 <HAL_GPIO_WritePin>
		printv(printBuffer, printLen);
		message += 1;
		radio.txDone = false;
	}
	*/
}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40020000 	.word	0x40020000

080010b8 <dio0_IRQ>:

	return true;
}

void dio0_IRQ()
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
		HAL_GPIO_TogglePin(LEDD_GPIO_Port, LEDD_Pin);
		SX1278_dio0_IRQ(&radio);
		radio_procedure();
	}
	*/
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
	...

080010c8 <haltMotors>:
	TIM2->CCR4 = (uint32_t)((float)TIM2->ARR / ((float)pwmR / 255.0));
	TIM3->CNT = 0;	// reset timer counter -> clears motor timeout
}

static void haltMotors()
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
	// Function called on TIM3 overflow interrupt
	TIM2->CCR2 = 0;
 80010cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010d0:	2200      	movs	r2, #0
 80010d2:	639a      	str	r2, [r3, #56]	; 0x38
	TIM2->CCR4 = 0;
 80010d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010d8:	2200      	movs	r2, #0
 80010da:	641a      	str	r2, [r3, #64]	; 0x40
	TIM3->CNT = 0;	// reset timer counter -> clears motor timeout
 80010dc:	4b03      	ldr	r3, [pc, #12]	; (80010ec <haltMotors+0x24>)
 80010de:	2200      	movs	r2, #0
 80010e0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80010e2:	bf00      	nop
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	40000400 	.word	0x40000400

080010f0 <enableMotors>:

static void enableMotors()
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
	haltMotors();
 80010f4:	f7ff ffe8 	bl	80010c8 <haltMotors>
	motL_forward = true;
 80010f8:	4b16      	ldr	r3, [pc, #88]	; (8001154 <enableMotors+0x64>)
 80010fa:	2201      	movs	r2, #1
 80010fc:	701a      	strb	r2, [r3, #0]
	motR_forward = true;
 80010fe:	4b16      	ldr	r3, [pc, #88]	; (8001158 <enableMotors+0x68>)
 8001100:	2201      	movs	r2, #1
 8001102:	701a      	strb	r2, [r3, #0]

	// flip direction based on config
	HAL_GPIO_WritePin(PH_L_GPIO_Port, PH_L_Pin, motL_forward ^ MOTOR_L_DIR);
 8001104:	4b13      	ldr	r3, [pc, #76]	; (8001154 <enableMotors+0x64>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	f083 0301 	eor.w	r3, r3, #1
 800110c:	b2db      	uxtb	r3, r3
 800110e:	461a      	mov	r2, r3
 8001110:	2101      	movs	r1, #1
 8001112:	4812      	ldr	r0, [pc, #72]	; (800115c <enableMotors+0x6c>)
 8001114:	f001 fe26 	bl	8002d64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PH_R_GPIO_Port, PH_R_Pin, motR_forward ^ MOTOR_R_DIR);
 8001118:	4b0f      	ldr	r3, [pc, #60]	; (8001158 <enableMotors+0x68>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	f083 0301 	eor.w	r3, r3, #1
 8001120:	b2db      	uxtb	r3, r3
 8001122:	461a      	mov	r2, r3
 8001124:	2104      	movs	r1, #4
 8001126:	480d      	ldr	r0, [pc, #52]	; (800115c <enableMotors+0x6c>)
 8001128:	f001 fe1c 	bl	8002d64 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(Get_TIM2_Instance(), TIM_CHANNEL_2);
 800112c:	f000 fbe4 	bl	80018f8 <Get_TIM2_Instance>
 8001130:	4603      	mov	r3, r0
 8001132:	2104      	movs	r1, #4
 8001134:	4618      	mov	r0, r3
 8001136:	f005 fc5f 	bl	80069f8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Get_TIM2_Instance(), TIM_CHANNEL_4);
 800113a:	f000 fbdd 	bl	80018f8 <Get_TIM2_Instance>
 800113e:	4603      	mov	r3, r0
 8001140:	210c      	movs	r1, #12
 8001142:	4618      	mov	r0, r3
 8001144:	f005 fc58 	bl	80069f8 <HAL_TIM_PWM_Start>

	TIM3->CNT = 0;	// reset timer counter -> clears motor timeout
 8001148:	4b05      	ldr	r3, [pc, #20]	; (8001160 <enableMotors+0x70>)
 800114a:	2200      	movs	r2, #0
 800114c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000000 	.word	0x20000000
 8001158:	20000001 	.word	0x20000001
 800115c:	40020000 	.word	0x40020000
 8001160:	40000400 	.word	0x40000400

08001164 <setPwmFrequency>:
	HAL_TIM_PWM_Stop(Get_TIM2_Instance(), TIM_CHANNEL_2);
	HAL_TIM_PWM_Stop(Get_TIM2_Instance(), TIM_CHANNEL_4);
}

static void setPwmFrequency(uint32_t f_hz)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
	// <=>
	// ARR = Clock frequency / (2 * Frequency)
	// Clock frequency (200kHz) = Source frequency / PSC

	//TIM2->ARR = (uint32_t)(42000000 / TIM2->PSC) / (2 * f_hz);
	TIM2->ARR = 200000 / (2 * f_hz);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001174:	4904      	ldr	r1, [pc, #16]	; (8001188 <setPwmFrequency+0x24>)
 8001176:	fbb1 f3f3 	udiv	r3, r1, r3
 800117a:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	00030d40 	.word	0x00030d40

0800118c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001190:	f000 fef4 	bl	8001f7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001194:	f000 f822 	bl	80011dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001198:	f000 faba 	bl	8001710 <MX_GPIO_Init>
  MX_DMA_Init();
 800119c:	f000 fa90 	bl	80016c0 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 80011a0:	f000 f926 	bl	80013f0 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 80011a4:	f008 fc48 	bl	8009a38 <MX_FATFS_Init>
  MX_I2C1_Init();
 80011a8:	f000 f89a 	bl	80012e0 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 80011ac:	f00a fa62 	bl	800b674 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 80011b0:	f000 f93e 	bl	8001430 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 80011b4:	f000 fa5a 	bl	800166c <MX_USART3_UART_Init>
  MX_RTC_Init();
 80011b8:	f000 f8c0 	bl	800133c <MX_RTC_Init>
  MX_TIM2_Init();
 80011bc:	f000 f96e 	bl	800149c <MX_TIM2_Init>
  MX_TIM5_Init();
 80011c0:	f000 fa06 	bl	80015d0 <MX_TIM5_Init>
  MX_TIM3_Init();
 80011c4:	f000 f9b6 	bl	8001534 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  setup();
 80011c8:	f7ff fede 	bl	8000f88 <setup>

  // Start motor timeout interrupt timer
  HAL_TIM_Base_Start(&htim3);
 80011cc:	4802      	ldr	r0, [pc, #8]	; (80011d8 <main+0x4c>)
 80011ce:	f005 fbee 	bl	80069ae <HAL_TIM_Base_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	loop();
 80011d2:	f7ff ff3d 	bl	8001050 <loop>
 80011d6:	e7fc      	b.n	80011d2 <main+0x46>
 80011d8:	20000948 	.word	0x20000948

080011dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b098      	sub	sp, #96	; 0x60
 80011e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011e6:	2230      	movs	r2, #48	; 0x30
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f00a ff85 	bl	800c0fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f0:	f107 031c 	add.w	r3, r7, #28
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001200:	f107 030c 	add.w	r3, r7, #12
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	4b31      	ldr	r3, [pc, #196]	; (80012d8 <SystemClock_Config+0xfc>)
 8001214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001216:	4a30      	ldr	r2, [pc, #192]	; (80012d8 <SystemClock_Config+0xfc>)
 8001218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800121c:	6413      	str	r3, [r2, #64]	; 0x40
 800121e:	4b2e      	ldr	r3, [pc, #184]	; (80012d8 <SystemClock_Config+0xfc>)
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800122a:	2300      	movs	r3, #0
 800122c:	607b      	str	r3, [r7, #4]
 800122e:	4b2b      	ldr	r3, [pc, #172]	; (80012dc <SystemClock_Config+0x100>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a2a      	ldr	r2, [pc, #168]	; (80012dc <SystemClock_Config+0x100>)
 8001234:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001238:	6013      	str	r3, [r2, #0]
 800123a:	4b28      	ldr	r3, [pc, #160]	; (80012dc <SystemClock_Config+0x100>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001242:	607b      	str	r3, [r7, #4]
 8001244:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001246:	2305      	movs	r3, #5
 8001248:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800124a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800124e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001250:	2301      	movs	r3, #1
 8001252:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001254:	2302      	movs	r3, #2
 8001256:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001258:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800125c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 6;
 800125e:	2306      	movs	r3, #6
 8001260:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001262:	23a8      	movs	r3, #168	; 0xa8
 8001264:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001266:	2302      	movs	r3, #2
 8001268:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800126a:	2307      	movs	r3, #7
 800126c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800126e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001272:	4618      	mov	r0, r3
 8001274:	f003 f86a 	bl	800434c <HAL_RCC_OscConfig>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800127e:	f000 fb65 	bl	800194c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001282:	230f      	movs	r3, #15
 8001284:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001286:	2302      	movs	r3, #2
 8001288:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800128a:	2300      	movs	r3, #0
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800128e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001292:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001294:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001298:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800129a:	f107 031c 	add.w	r3, r7, #28
 800129e:	2105      	movs	r1, #5
 80012a0:	4618      	mov	r0, r3
 80012a2:	f003 fac3 	bl	800482c <HAL_RCC_ClockConfig>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80012ac:	f000 fb4e 	bl	800194c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80012b0:	2302      	movs	r3, #2
 80012b2:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80012b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012b8:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ba:	f107 030c 	add.w	r3, r7, #12
 80012be:	4618      	mov	r0, r3
 80012c0:	f003 fc80 	bl	8004bc4 <HAL_RCCEx_PeriphCLKConfig>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80012ca:	f000 fb3f 	bl	800194c <Error_Handler>
  }
}
 80012ce:	bf00      	nop
 80012d0:	3760      	adds	r7, #96	; 0x60
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40007000 	.word	0x40007000

080012e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012e4:	4b12      	ldr	r3, [pc, #72]	; (8001330 <MX_I2C1_Init+0x50>)
 80012e6:	4a13      	ldr	r2, [pc, #76]	; (8001334 <MX_I2C1_Init+0x54>)
 80012e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012ea:	4b11      	ldr	r3, [pc, #68]	; (8001330 <MX_I2C1_Init+0x50>)
 80012ec:	4a12      	ldr	r2, [pc, #72]	; (8001338 <MX_I2C1_Init+0x58>)
 80012ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012f0:	4b0f      	ldr	r3, [pc, #60]	; (8001330 <MX_I2C1_Init+0x50>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012f6:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <MX_I2C1_Init+0x50>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012fc:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <MX_I2C1_Init+0x50>)
 80012fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001302:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001304:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <MX_I2C1_Init+0x50>)
 8001306:	2200      	movs	r2, #0
 8001308:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800130a:	4b09      	ldr	r3, [pc, #36]	; (8001330 <MX_I2C1_Init+0x50>)
 800130c:	2200      	movs	r2, #0
 800130e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001310:	4b07      	ldr	r3, [pc, #28]	; (8001330 <MX_I2C1_Init+0x50>)
 8001312:	2200      	movs	r2, #0
 8001314:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001316:	4b06      	ldr	r3, [pc, #24]	; (8001330 <MX_I2C1_Init+0x50>)
 8001318:	2200      	movs	r2, #0
 800131a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800131c:	4804      	ldr	r0, [pc, #16]	; (8001330 <MX_I2C1_Init+0x50>)
 800131e:	f001 fd53 	bl	8002dc8 <HAL_I2C_Init>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001328:	f000 fb10 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}
 8001330:	200008b4 	.word	0x200008b4
 8001334:	40005400 	.word	0x40005400
 8001338:	000186a0 	.word	0x000186a0

0800133c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001342:	1d3b      	adds	r3, r7, #4
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
 800134e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001350:	2300      	movs	r3, #0
 8001352:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8001354:	4b24      	ldr	r3, [pc, #144]	; (80013e8 <MX_RTC_Init+0xac>)
 8001356:	4a25      	ldr	r2, [pc, #148]	; (80013ec <MX_RTC_Init+0xb0>)
 8001358:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800135a:	4b23      	ldr	r3, [pc, #140]	; (80013e8 <MX_RTC_Init+0xac>)
 800135c:	2200      	movs	r2, #0
 800135e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001360:	4b21      	ldr	r3, [pc, #132]	; (80013e8 <MX_RTC_Init+0xac>)
 8001362:	227f      	movs	r2, #127	; 0x7f
 8001364:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001366:	4b20      	ldr	r3, [pc, #128]	; (80013e8 <MX_RTC_Init+0xac>)
 8001368:	22ff      	movs	r2, #255	; 0xff
 800136a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800136c:	4b1e      	ldr	r3, [pc, #120]	; (80013e8 <MX_RTC_Init+0xac>)
 800136e:	2200      	movs	r2, #0
 8001370:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001372:	4b1d      	ldr	r3, [pc, #116]	; (80013e8 <MX_RTC_Init+0xac>)
 8001374:	2200      	movs	r2, #0
 8001376:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001378:	4b1b      	ldr	r3, [pc, #108]	; (80013e8 <MX_RTC_Init+0xac>)
 800137a:	2200      	movs	r2, #0
 800137c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800137e:	481a      	ldr	r0, [pc, #104]	; (80013e8 <MX_RTC_Init+0xac>)
 8001380:	f003 fd02 	bl	8004d88 <HAL_RTC_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800138a:	f000 fadf 	bl	800194c <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 800138e:	2300      	movs	r3, #0
 8001390:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001392:	2300      	movs	r3, #0
 8001394:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001396:	2300      	movs	r3, #0
 8001398:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800139a:	2300      	movs	r3, #0
 800139c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80013a2:	1d3b      	adds	r3, r7, #4
 80013a4:	2201      	movs	r2, #1
 80013a6:	4619      	mov	r1, r3
 80013a8:	480f      	ldr	r0, [pc, #60]	; (80013e8 <MX_RTC_Init+0xac>)
 80013aa:	f003 fd7e 	bl	8004eaa <HAL_RTC_SetTime>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80013b4:	f000 faca 	bl	800194c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80013b8:	2301      	movs	r3, #1
 80013ba:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80013bc:	2301      	movs	r3, #1
 80013be:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80013c0:	2301      	movs	r3, #1
 80013c2:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x20;
 80013c4:	2320      	movs	r3, #32
 80013c6:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80013c8:	463b      	mov	r3, r7
 80013ca:	2201      	movs	r2, #1
 80013cc:	4619      	mov	r1, r3
 80013ce:	4806      	ldr	r0, [pc, #24]	; (80013e8 <MX_RTC_Init+0xac>)
 80013d0:	f003 fe28 	bl	8005024 <HAL_RTC_SetDate>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80013da:	f000 fab7 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80013de:	bf00      	nop
 80013e0:	3718      	adds	r7, #24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000988 	.word	0x20000988
 80013ec:	40002800 	.word	0x40002800

080013f0 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80013f4:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <MX_SDIO_SD_Init+0x38>)
 80013f6:	4a0d      	ldr	r2, [pc, #52]	; (800142c <MX_SDIO_SD_Init+0x3c>)
 80013f8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80013fa:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <MX_SDIO_SD_Init+0x38>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001400:	4b09      	ldr	r3, [pc, #36]	; (8001428 <MX_SDIO_SD_Init+0x38>)
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001406:	4b08      	ldr	r3, [pc, #32]	; (8001428 <MX_SDIO_SD_Init+0x38>)
 8001408:	2200      	movs	r2, #0
 800140a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800140c:	4b06      	ldr	r3, [pc, #24]	; (8001428 <MX_SDIO_SD_Init+0x38>)
 800140e:	2200      	movs	r2, #0
 8001410:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001412:	4b05      	ldr	r3, [pc, #20]	; (8001428 <MX_SDIO_SD_Init+0x38>)
 8001414:	2200      	movs	r2, #0
 8001416:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001418:	4b03      	ldr	r3, [pc, #12]	; (8001428 <MX_SDIO_SD_Init+0x38>)
 800141a:	2200      	movs	r2, #0
 800141c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800141e:	bf00      	nop
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	20000a08 	.word	0x20000a08
 800142c:	40012c00 	.word	0x40012c00

08001430 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001434:	4b17      	ldr	r3, [pc, #92]	; (8001494 <MX_SPI1_Init+0x64>)
 8001436:	4a18      	ldr	r2, [pc, #96]	; (8001498 <MX_SPI1_Init+0x68>)
 8001438:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800143a:	4b16      	ldr	r3, [pc, #88]	; (8001494 <MX_SPI1_Init+0x64>)
 800143c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001440:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001442:	4b14      	ldr	r3, [pc, #80]	; (8001494 <MX_SPI1_Init+0x64>)
 8001444:	2200      	movs	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001448:	4b12      	ldr	r3, [pc, #72]	; (8001494 <MX_SPI1_Init+0x64>)
 800144a:	2200      	movs	r2, #0
 800144c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800144e:	4b11      	ldr	r3, [pc, #68]	; (8001494 <MX_SPI1_Init+0x64>)
 8001450:	2200      	movs	r2, #0
 8001452:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001454:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <MX_SPI1_Init+0x64>)
 8001456:	2200      	movs	r2, #0
 8001458:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800145a:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <MX_SPI1_Init+0x64>)
 800145c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001460:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001462:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <MX_SPI1_Init+0x64>)
 8001464:	2200      	movs	r2, #0
 8001466:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001468:	4b0a      	ldr	r3, [pc, #40]	; (8001494 <MX_SPI1_Init+0x64>)
 800146a:	2200      	movs	r2, #0
 800146c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800146e:	4b09      	ldr	r3, [pc, #36]	; (8001494 <MX_SPI1_Init+0x64>)
 8001470:	2200      	movs	r2, #0
 8001472:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001474:	4b07      	ldr	r3, [pc, #28]	; (8001494 <MX_SPI1_Init+0x64>)
 8001476:	2200      	movs	r2, #0
 8001478:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800147a:	4b06      	ldr	r3, [pc, #24]	; (8001494 <MX_SPI1_Init+0x64>)
 800147c:	220a      	movs	r2, #10
 800147e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001480:	4804      	ldr	r0, [pc, #16]	; (8001494 <MX_SPI1_Init+0x64>)
 8001482:	f005 fa05 	bl	8006890 <HAL_SPI_Init>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800148c:	f000 fa5e 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001490:	bf00      	nop
 8001492:	bd80      	pop	{r7, pc}
 8001494:	20000a8c 	.word	0x20000a8c
 8001498:	40013000 	.word	0x40013000

0800149c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014a2:	f107 0308 	add.w	r3, r7, #8
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b0:	463b      	mov	r3, r7
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014b8:	4b1d      	ldr	r3, [pc, #116]	; (8001530 <MX_TIM2_Init+0x94>)
 80014ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 20999;
 80014c0:	4b1b      	ldr	r3, [pc, #108]	; (8001530 <MX_TIM2_Init+0x94>)
 80014c2:	f245 2207 	movw	r2, #20999	; 0x5207
 80014c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c8:	4b19      	ldr	r3, [pc, #100]	; (8001530 <MX_TIM2_Init+0x94>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 80014ce:	4b18      	ldr	r3, [pc, #96]	; (8001530 <MX_TIM2_Init+0x94>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d4:	4b16      	ldr	r3, [pc, #88]	; (8001530 <MX_TIM2_Init+0x94>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014da:	4b15      	ldr	r3, [pc, #84]	; (8001530 <MX_TIM2_Init+0x94>)
 80014dc:	2200      	movs	r2, #0
 80014de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014e0:	4813      	ldr	r0, [pc, #76]	; (8001530 <MX_TIM2_Init+0x94>)
 80014e2:	f005 fa39 	bl	8006958 <HAL_TIM_Base_Init>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80014ec:	f000 fa2e 	bl	800194c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014f6:	f107 0308 	add.w	r3, r7, #8
 80014fa:	4619      	mov	r1, r3
 80014fc:	480c      	ldr	r0, [pc, #48]	; (8001530 <MX_TIM2_Init+0x94>)
 80014fe:	f005 fbc1 	bl	8006c84 <HAL_TIM_ConfigClockSource>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001508:	f000 fa20 	bl	800194c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800150c:	2300      	movs	r3, #0
 800150e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001510:	2300      	movs	r3, #0
 8001512:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001514:	463b      	mov	r3, r7
 8001516:	4619      	mov	r1, r3
 8001518:	4805      	ldr	r0, [pc, #20]	; (8001530 <MX_TIM2_Init+0x94>)
 800151a:	f005 fdf3 	bl	8007104 <HAL_TIMEx_MasterConfigSynchronization>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001524:	f000 fa12 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001528:	bf00      	nop
 800152a:	3718      	adds	r7, #24
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20000ae4 	.word	0x20000ae4

08001534 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800153a:	f107 0308 	add.w	r3, r7, #8
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	605a      	str	r2, [r3, #4]
 8001544:	609a      	str	r2, [r3, #8]
 8001546:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001548:	463b      	mov	r3, r7
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001550:	4b1d      	ldr	r3, [pc, #116]	; (80015c8 <MX_TIM3_Init+0x94>)
 8001552:	4a1e      	ldr	r2, [pc, #120]	; (80015cc <MX_TIM3_Init+0x98>)
 8001554:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 41999;
 8001556:	4b1c      	ldr	r3, [pc, #112]	; (80015c8 <MX_TIM3_Init+0x94>)
 8001558:	f24a 420f 	movw	r2, #41999	; 0xa40f
 800155c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800155e:	4b1a      	ldr	r3, [pc, #104]	; (80015c8 <MX_TIM3_Init+0x94>)
 8001560:	2200      	movs	r2, #0
 8001562:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8001564:	4b18      	ldr	r3, [pc, #96]	; (80015c8 <MX_TIM3_Init+0x94>)
 8001566:	2264      	movs	r2, #100	; 0x64
 8001568:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800156a:	4b17      	ldr	r3, [pc, #92]	; (80015c8 <MX_TIM3_Init+0x94>)
 800156c:	2200      	movs	r2, #0
 800156e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001570:	4b15      	ldr	r3, [pc, #84]	; (80015c8 <MX_TIM3_Init+0x94>)
 8001572:	2200      	movs	r2, #0
 8001574:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001576:	4814      	ldr	r0, [pc, #80]	; (80015c8 <MX_TIM3_Init+0x94>)
 8001578:	f005 f9ee 	bl	8006958 <HAL_TIM_Base_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001582:	f000 f9e3 	bl	800194c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001586:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800158a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800158c:	f107 0308 	add.w	r3, r7, #8
 8001590:	4619      	mov	r1, r3
 8001592:	480d      	ldr	r0, [pc, #52]	; (80015c8 <MX_TIM3_Init+0x94>)
 8001594:	f005 fb76 	bl	8006c84 <HAL_TIM_ConfigClockSource>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800159e:	f000 f9d5 	bl	800194c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015a2:	2300      	movs	r3, #0
 80015a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a6:	2300      	movs	r3, #0
 80015a8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015aa:	463b      	mov	r3, r7
 80015ac:	4619      	mov	r1, r3
 80015ae:	4806      	ldr	r0, [pc, #24]	; (80015c8 <MX_TIM3_Init+0x94>)
 80015b0:	f005 fda8 	bl	8007104 <HAL_TIMEx_MasterConfigSynchronization>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80015ba:	f000 f9c7 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80015be:	bf00      	nop
 80015c0:	3718      	adds	r7, #24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000948 	.word	0x20000948
 80015cc:	40000400 	.word	0x40000400

080015d0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015d6:	f107 0308 	add.w	r3, r7, #8
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]
 80015e0:	609a      	str	r2, [r3, #8]
 80015e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015e4:	463b      	mov	r3, r7
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80015ec:	4b1d      	ldr	r3, [pc, #116]	; (8001664 <MX_TIM5_Init+0x94>)
 80015ee:	4a1e      	ldr	r2, [pc, #120]	; (8001668 <MX_TIM5_Init+0x98>)
 80015f0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 41999;
 80015f2:	4b1c      	ldr	r3, [pc, #112]	; (8001664 <MX_TIM5_Init+0x94>)
 80015f4:	f24a 420f 	movw	r2, #41999	; 0xa40f
 80015f8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015fa:	4b1a      	ldr	r3, [pc, #104]	; (8001664 <MX_TIM5_Init+0x94>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8001600:	4b18      	ldr	r3, [pc, #96]	; (8001664 <MX_TIM5_Init+0x94>)
 8001602:	2200      	movs	r2, #0
 8001604:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001606:	4b17      	ldr	r3, [pc, #92]	; (8001664 <MX_TIM5_Init+0x94>)
 8001608:	2200      	movs	r2, #0
 800160a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800160c:	4b15      	ldr	r3, [pc, #84]	; (8001664 <MX_TIM5_Init+0x94>)
 800160e:	2200      	movs	r2, #0
 8001610:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001612:	4814      	ldr	r0, [pc, #80]	; (8001664 <MX_TIM5_Init+0x94>)
 8001614:	f005 f9a0 	bl	8006958 <HAL_TIM_Base_Init>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800161e:	f000 f995 	bl	800194c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001626:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001628:	f107 0308 	add.w	r3, r7, #8
 800162c:	4619      	mov	r1, r3
 800162e:	480d      	ldr	r0, [pc, #52]	; (8001664 <MX_TIM5_Init+0x94>)
 8001630:	f005 fb28 	bl	8006c84 <HAL_TIM_ConfigClockSource>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800163a:	f000 f987 	bl	800194c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800163e:	2300      	movs	r3, #0
 8001640:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001642:	2300      	movs	r3, #0
 8001644:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001646:	463b      	mov	r3, r7
 8001648:	4619      	mov	r1, r3
 800164a:	4806      	ldr	r0, [pc, #24]	; (8001664 <MX_TIM5_Init+0x94>)
 800164c:	f005 fd5a 	bl	8007104 <HAL_TIMEx_MasterConfigSynchronization>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001656:	f000 f979 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800165a:	bf00      	nop
 800165c:	3718      	adds	r7, #24
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20000908 	.word	0x20000908
 8001668:	40000c00 	.word	0x40000c00

0800166c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001670:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <MX_USART3_UART_Init+0x4c>)
 8001672:	4a12      	ldr	r2, [pc, #72]	; (80016bc <MX_USART3_UART_Init+0x50>)
 8001674:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001676:	4b10      	ldr	r3, [pc, #64]	; (80016b8 <MX_USART3_UART_Init+0x4c>)
 8001678:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800167c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800167e:	4b0e      	ldr	r3, [pc, #56]	; (80016b8 <MX_USART3_UART_Init+0x4c>)
 8001680:	2200      	movs	r2, #0
 8001682:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001684:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <MX_USART3_UART_Init+0x4c>)
 8001686:	2200      	movs	r2, #0
 8001688:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800168a:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <MX_USART3_UART_Init+0x4c>)
 800168c:	2200      	movs	r2, #0
 800168e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001690:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <MX_USART3_UART_Init+0x4c>)
 8001692:	220c      	movs	r2, #12
 8001694:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001696:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <MX_USART3_UART_Init+0x4c>)
 8001698:	2200      	movs	r2, #0
 800169a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800169c:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <MX_USART3_UART_Init+0x4c>)
 800169e:	2200      	movs	r2, #0
 80016a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016a2:	4805      	ldr	r0, [pc, #20]	; (80016b8 <MX_USART3_UART_Init+0x4c>)
 80016a4:	f005 fdbe 	bl	8007224 <HAL_UART_Init>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80016ae:	f000 f94d 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20000874 	.word	0x20000874
 80016bc:	40004800 	.word	0x40004800

080016c0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	607b      	str	r3, [r7, #4]
 80016ca:	4b10      	ldr	r3, [pc, #64]	; (800170c <MX_DMA_Init+0x4c>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	4a0f      	ldr	r2, [pc, #60]	; (800170c <MX_DMA_Init+0x4c>)
 80016d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016d4:	6313      	str	r3, [r2, #48]	; 0x30
 80016d6:	4b0d      	ldr	r3, [pc, #52]	; (800170c <MX_DMA_Init+0x4c>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016de:	607b      	str	r3, [r7, #4]
 80016e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80016e2:	2200      	movs	r2, #0
 80016e4:	2100      	movs	r1, #0
 80016e6:	203b      	movs	r0, #59	; 0x3b
 80016e8:	f000 fdb7 	bl	800225a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80016ec:	203b      	movs	r0, #59	; 0x3b
 80016ee:	f000 fdd0 	bl	8002292 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80016f2:	2200      	movs	r2, #0
 80016f4:	2100      	movs	r1, #0
 80016f6:	2045      	movs	r0, #69	; 0x45
 80016f8:	f000 fdaf 	bl	800225a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80016fc:	2045      	movs	r0, #69	; 0x45
 80016fe:	f000 fdc8 	bl	8002292 <HAL_NVIC_EnableIRQ>

}
 8001702:	bf00      	nop
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40023800 	.word	0x40023800

08001710 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b08a      	sub	sp, #40	; 0x28
 8001714:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001716:	f107 0314 	add.w	r3, r7, #20
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	605a      	str	r2, [r3, #4]
 8001720:	609a      	str	r2, [r3, #8]
 8001722:	60da      	str	r2, [r3, #12]
 8001724:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	613b      	str	r3, [r7, #16]
 800172a:	4b6e      	ldr	r3, [pc, #440]	; (80018e4 <MX_GPIO_Init+0x1d4>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	4a6d      	ldr	r2, [pc, #436]	; (80018e4 <MX_GPIO_Init+0x1d4>)
 8001730:	f043 0304 	orr.w	r3, r3, #4
 8001734:	6313      	str	r3, [r2, #48]	; 0x30
 8001736:	4b6b      	ldr	r3, [pc, #428]	; (80018e4 <MX_GPIO_Init+0x1d4>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	f003 0304 	and.w	r3, r3, #4
 800173e:	613b      	str	r3, [r7, #16]
 8001740:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	4b67      	ldr	r3, [pc, #412]	; (80018e4 <MX_GPIO_Init+0x1d4>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	4a66      	ldr	r2, [pc, #408]	; (80018e4 <MX_GPIO_Init+0x1d4>)
 800174c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001750:	6313      	str	r3, [r2, #48]	; 0x30
 8001752:	4b64      	ldr	r3, [pc, #400]	; (80018e4 <MX_GPIO_Init+0x1d4>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	60bb      	str	r3, [r7, #8]
 8001762:	4b60      	ldr	r3, [pc, #384]	; (80018e4 <MX_GPIO_Init+0x1d4>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	4a5f      	ldr	r2, [pc, #380]	; (80018e4 <MX_GPIO_Init+0x1d4>)
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	6313      	str	r3, [r2, #48]	; 0x30
 800176e:	4b5d      	ldr	r3, [pc, #372]	; (80018e4 <MX_GPIO_Init+0x1d4>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	60bb      	str	r3, [r7, #8]
 8001778:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	607b      	str	r3, [r7, #4]
 800177e:	4b59      	ldr	r3, [pc, #356]	; (80018e4 <MX_GPIO_Init+0x1d4>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	4a58      	ldr	r2, [pc, #352]	; (80018e4 <MX_GPIO_Init+0x1d4>)
 8001784:	f043 0302 	orr.w	r3, r3, #2
 8001788:	6313      	str	r3, [r2, #48]	; 0x30
 800178a:	4b56      	ldr	r3, [pc, #344]	; (80018e4 <MX_GPIO_Init+0x1d4>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	607b      	str	r3, [r7, #4]
 8001794:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	603b      	str	r3, [r7, #0]
 800179a:	4b52      	ldr	r3, [pc, #328]	; (80018e4 <MX_GPIO_Init+0x1d4>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	4a51      	ldr	r2, [pc, #324]	; (80018e4 <MX_GPIO_Init+0x1d4>)
 80017a0:	f043 0308 	orr.w	r3, r3, #8
 80017a4:	6313      	str	r3, [r2, #48]	; 0x30
 80017a6:	4b4f      	ldr	r3, [pc, #316]	; (80018e4 <MX_GPIO_Init+0x1d4>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	f003 0308 	and.w	r3, r3, #8
 80017ae:	603b      	str	r3, [r7, #0]
 80017b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, P1_Pin|P4_Pin|P2_Pin|P5_Pin 
 80017b2:	2200      	movs	r2, #0
 80017b4:	21ef      	movs	r1, #239	; 0xef
 80017b6:	484c      	ldr	r0, [pc, #304]	; (80018e8 <MX_GPIO_Init+0x1d8>)
 80017b8:	f001 fad4 	bl	8002d64 <HAL_GPIO_WritePin>
                          |LR_RESET_Pin|LEDB_Pin|LEDA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PH_L_Pin|EN_L_Pin|PH_R_Pin|EN_R_Pin 
 80017bc:	2200      	movs	r2, #0
 80017be:	211f      	movs	r1, #31
 80017c0:	484a      	ldr	r0, [pc, #296]	; (80018ec <MX_GPIO_Init+0x1dc>)
 80017c2:	f001 facf 	bl	8002d64 <HAL_GPIO_WritePin>
                          |P7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, P6_Pin|P3_Pin|LEDD_Pin|LEDC_Pin 
 80017c6:	2200      	movs	r2, #0
 80017c8:	f243 2103 	movw	r1, #12803	; 0x3203
 80017cc:	4848      	ldr	r0, [pc, #288]	; (80018f0 <MX_GPIO_Init+0x1e0>)
 80017ce:	f001 fac9 	bl	8002d64 <HAL_GPIO_WritePin>
                          |LR_NSS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : P1_Pin P4_Pin P2_Pin P5_Pin 
                           LR_RESET_Pin */
  GPIO_InitStruct.Pin = P1_Pin|P4_Pin|P2_Pin|P5_Pin 
 80017d2:	232f      	movs	r3, #47	; 0x2f
 80017d4:	617b      	str	r3, [r7, #20]
                          |LR_RESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d6:	2301      	movs	r3, #1
 80017d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017de:	2300      	movs	r3, #0
 80017e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017e2:	f107 0314 	add.w	r3, r7, #20
 80017e6:	4619      	mov	r1, r3
 80017e8:	483f      	ldr	r0, [pc, #252]	; (80018e8 <MX_GPIO_Init+0x1d8>)
 80017ea:	f001 f909 	bl	8002a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH_L_Pin EN_L_Pin PH_R_Pin */
  GPIO_InitStruct.Pin = PH_L_Pin|EN_L_Pin|PH_R_Pin;
 80017ee:	2307      	movs	r3, #7
 80017f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f2:	2301      	movs	r3, #1
 80017f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017f6:	2302      	movs	r3, #2
 80017f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fa:	2300      	movs	r3, #0
 80017fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fe:	f107 0314 	add.w	r3, r7, #20
 8001802:	4619      	mov	r1, r3
 8001804:	4839      	ldr	r0, [pc, #228]	; (80018ec <MX_GPIO_Init+0x1dc>)
 8001806:	f001 f8fb 	bl	8002a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_R_Pin P7_Pin */
  GPIO_InitStruct.Pin = EN_R_Pin|P7_Pin;
 800180a:	2318      	movs	r3, #24
 800180c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800180e:	2301      	movs	r3, #1
 8001810:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001816:	2300      	movs	r3, #0
 8001818:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800181a:	f107 0314 	add.w	r3, r7, #20
 800181e:	4619      	mov	r1, r3
 8001820:	4832      	ldr	r0, [pc, #200]	; (80018ec <MX_GPIO_Init+0x1dc>)
 8001822:	f001 f8ed 	bl	8002a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : LR_DIO0_Pin */
  GPIO_InitStruct.Pin = LR_DIO0_Pin;
 8001826:	2340      	movs	r3, #64	; 0x40
 8001828:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800182a:	4b32      	ldr	r3, [pc, #200]	; (80018f4 <MX_GPIO_Init+0x1e4>)
 800182c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800182e:	2302      	movs	r3, #2
 8001830:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LR_DIO0_GPIO_Port, &GPIO_InitStruct);
 8001832:	f107 0314 	add.w	r3, r7, #20
 8001836:	4619      	mov	r1, r3
 8001838:	482c      	ldr	r0, [pc, #176]	; (80018ec <MX_GPIO_Init+0x1dc>)
 800183a:	f001 f8e1 	bl	8002a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : P6_Pin P3_Pin LR_NSS_Pin */
  GPIO_InitStruct.Pin = P6_Pin|P3_Pin|LR_NSS_Pin;
 800183e:	f240 2303 	movw	r3, #515	; 0x203
 8001842:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001844:	2301      	movs	r3, #1
 8001846:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184c:	2300      	movs	r3, #0
 800184e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001850:	f107 0314 	add.w	r3, r7, #20
 8001854:	4619      	mov	r1, r3
 8001856:	4826      	ldr	r0, [pc, #152]	; (80018f0 <MX_GPIO_Init+0x1e0>)
 8001858:	f001 f8d2 	bl	8002a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDD_Pin LEDC_Pin */
  GPIO_InitStruct.Pin = LEDD_Pin|LEDC_Pin;
 800185c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001860:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001862:	2301      	movs	r3, #1
 8001864:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001866:	2302      	movs	r3, #2
 8001868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186a:	2300      	movs	r3, #0
 800186c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800186e:	f107 0314 	add.w	r3, r7, #20
 8001872:	4619      	mov	r1, r3
 8001874:	481e      	ldr	r0, [pc, #120]	; (80018f0 <MX_GPIO_Init+0x1e0>)
 8001876:	f001 f8c3 	bl	8002a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDB_Pin LEDA_Pin */
  GPIO_InitStruct.Pin = LEDB_Pin|LEDA_Pin;
 800187a:	23c0      	movs	r3, #192	; 0xc0
 800187c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187e:	2301      	movs	r3, #1
 8001880:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001882:	2302      	movs	r3, #2
 8001884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001886:	2300      	movs	r3, #0
 8001888:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800188a:	f107 0314 	add.w	r3, r7, #20
 800188e:	4619      	mov	r1, r3
 8001890:	4815      	ldr	r0, [pc, #84]	; (80018e8 <MX_GPIO_Init+0x1d8>)
 8001892:	f001 f8b5 	bl	8002a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_SW_Pin */
  GPIO_InitStruct.Pin = SDIO_SW_Pin;
 8001896:	f44f 7380 	mov.w	r3, #256	; 0x100
 800189a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800189c:	2300      	movs	r3, #0
 800189e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDIO_SW_GPIO_Port, &GPIO_InitStruct);
 80018a4:	f107 0314 	add.w	r3, r7, #20
 80018a8:	4619      	mov	r1, r3
 80018aa:	4810      	ldr	r0, [pc, #64]	; (80018ec <MX_GPIO_Init+0x1dc>)
 80018ac:	f001 f8a8 	bl	8002a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_USR_Pin */
  GPIO_InitStruct.Pin = BTN_USR_Pin;
 80018b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018b6:	2300      	movs	r3, #0
 80018b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018ba:	2301      	movs	r3, #1
 80018bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_USR_GPIO_Port, &GPIO_InitStruct);
 80018be:	f107 0314 	add.w	r3, r7, #20
 80018c2:	4619      	mov	r1, r3
 80018c4:	4809      	ldr	r0, [pc, #36]	; (80018ec <MX_GPIO_Init+0x1dc>)
 80018c6:	f001 f89b 	bl	8002a00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80018ca:	2200      	movs	r2, #0
 80018cc:	2100      	movs	r1, #0
 80018ce:	2017      	movs	r0, #23
 80018d0:	f000 fcc3 	bl	800225a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80018d4:	2017      	movs	r0, #23
 80018d6:	f000 fcdc 	bl	8002292 <HAL_NVIC_EnableIRQ>

}
 80018da:	bf00      	nop
 80018dc:	3728      	adds	r7, #40	; 0x28
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40023800 	.word	0x40023800
 80018e8:	40020800 	.word	0x40020800
 80018ec:	40020000 	.word	0x40020000
 80018f0:	40020400 	.word	0x40020400
 80018f4:	10110000 	.word	0x10110000

080018f8 <Get_TIM2_Instance>:
/* USER CODE BEGIN 4 */

I2C_HandleTypeDef* Get_I2C1_Instance() { return &hi2c1; }
SPI_HandleTypeDef* Get_SPI1_Instance() { return &hspi1; }
RTC_HandleTypeDef* Get_RTC_Instance() { return &hrtc; }
TIM_HandleTypeDef* Get_TIM2_Instance() { return &htim2; }
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	4b02      	ldr	r3, [pc, #8]	; (8001908 <Get_TIM2_Instance+0x10>)
 80018fe:	4618      	mov	r0, r3
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	20000ae4 	.word	0x20000ae4

0800190c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	80fb      	strh	r3, [r7, #6]
	//DIO0 Interrupt function
	if (GPIO_Pin == LR_DIO0_Pin)
 8001916:	88fb      	ldrh	r3, [r7, #6]
 8001918:	2b40      	cmp	r3, #64	; 0x40
 800191a:	d101      	bne.n	8001920 <HAL_GPIO_EXTI_Callback+0x14>
	{
		dio0_IRQ();
 800191c:	f7ff fbcc 	bl	80010b8 <dio0_IRQ>
	}
}
 8001920:	bf00      	nop
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
	// motor interrupt in on TIM3
	if (htim->Instance == TIM3)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a04      	ldr	r2, [pc, #16]	; (8001948 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d101      	bne.n	800193e <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		haltMotors();
 800193a:	f7ff fbc5 	bl	80010c8 <haltMotors>
	}

}
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40000400 	.word	0x40000400

0800194c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
	...

0800195c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	607b      	str	r3, [r7, #4]
 8001966:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <HAL_MspInit+0x4c>)
 8001968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196a:	4a0f      	ldr	r2, [pc, #60]	; (80019a8 <HAL_MspInit+0x4c>)
 800196c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001970:	6453      	str	r3, [r2, #68]	; 0x44
 8001972:	4b0d      	ldr	r3, [pc, #52]	; (80019a8 <HAL_MspInit+0x4c>)
 8001974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001976:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800197a:	607b      	str	r3, [r7, #4]
 800197c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	603b      	str	r3, [r7, #0]
 8001982:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <HAL_MspInit+0x4c>)
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	4a08      	ldr	r2, [pc, #32]	; (80019a8 <HAL_MspInit+0x4c>)
 8001988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800198c:	6413      	str	r3, [r2, #64]	; 0x40
 800198e:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <HAL_MspInit+0x4c>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001996:	603b      	str	r3, [r7, #0]
 8001998:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	40023800 	.word	0x40023800

080019ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08a      	sub	sp, #40	; 0x28
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b4:	f107 0314 	add.w	r3, r7, #20
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a19      	ldr	r2, [pc, #100]	; (8001a30 <HAL_I2C_MspInit+0x84>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d12b      	bne.n	8001a26 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	613b      	str	r3, [r7, #16]
 80019d2:	4b18      	ldr	r3, [pc, #96]	; (8001a34 <HAL_I2C_MspInit+0x88>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	4a17      	ldr	r2, [pc, #92]	; (8001a34 <HAL_I2C_MspInit+0x88>)
 80019d8:	f043 0302 	orr.w	r3, r3, #2
 80019dc:	6313      	str	r3, [r2, #48]	; 0x30
 80019de:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <HAL_I2C_MspInit+0x88>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	613b      	str	r3, [r7, #16]
 80019e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 80019ea:	23c0      	movs	r3, #192	; 0xc0
 80019ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019ee:	2312      	movs	r3, #18
 80019f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f2:	2300      	movs	r3, #0
 80019f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f6:	2303      	movs	r3, #3
 80019f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019fa:	2304      	movs	r3, #4
 80019fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019fe:	f107 0314 	add.w	r3, r7, #20
 8001a02:	4619      	mov	r1, r3
 8001a04:	480c      	ldr	r0, [pc, #48]	; (8001a38 <HAL_I2C_MspInit+0x8c>)
 8001a06:	f000 fffb 	bl	8002a00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <HAL_I2C_MspInit+0x88>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	4a08      	ldr	r2, [pc, #32]	; (8001a34 <HAL_I2C_MspInit+0x88>)
 8001a14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a18:	6413      	str	r3, [r2, #64]	; 0x40
 8001a1a:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <HAL_I2C_MspInit+0x88>)
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a26:	bf00      	nop
 8001a28:	3728      	adds	r7, #40	; 0x28
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40005400 	.word	0x40005400
 8001a34:	40023800 	.word	0x40023800
 8001a38:	40020400 	.word	0x40020400

08001a3c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a05      	ldr	r2, [pc, #20]	; (8001a60 <HAL_RTC_MspInit+0x24>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d102      	bne.n	8001a54 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001a4e:	4b05      	ldr	r3, [pc, #20]	; (8001a64 <HAL_RTC_MspInit+0x28>)
 8001a50:	2201      	movs	r2, #1
 8001a52:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	40002800 	.word	0x40002800
 8001a64:	42470e3c 	.word	0x42470e3c

08001a68 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08a      	sub	sp, #40	; 0x28
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a70:	f107 0314 	add.w	r3, r7, #20
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
 8001a7e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a70      	ldr	r2, [pc, #448]	; (8001c48 <HAL_SD_MspInit+0x1e0>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	f040 80da 	bne.w	8001c40 <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	613b      	str	r3, [r7, #16]
 8001a90:	4b6e      	ldr	r3, [pc, #440]	; (8001c4c <HAL_SD_MspInit+0x1e4>)
 8001a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a94:	4a6d      	ldr	r2, [pc, #436]	; (8001c4c <HAL_SD_MspInit+0x1e4>)
 8001a96:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a9a:	6453      	str	r3, [r2, #68]	; 0x44
 8001a9c:	4b6b      	ldr	r3, [pc, #428]	; (8001c4c <HAL_SD_MspInit+0x1e4>)
 8001a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001aa4:	613b      	str	r3, [r7, #16]
 8001aa6:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	4b67      	ldr	r3, [pc, #412]	; (8001c4c <HAL_SD_MspInit+0x1e4>)
 8001aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab0:	4a66      	ldr	r2, [pc, #408]	; (8001c4c <HAL_SD_MspInit+0x1e4>)
 8001ab2:	f043 0304 	orr.w	r3, r3, #4
 8001ab6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab8:	4b64      	ldr	r3, [pc, #400]	; (8001c4c <HAL_SD_MspInit+0x1e4>)
 8001aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abc:	f003 0304 	and.w	r3, r3, #4
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60bb      	str	r3, [r7, #8]
 8001ac8:	4b60      	ldr	r3, [pc, #384]	; (8001c4c <HAL_SD_MspInit+0x1e4>)
 8001aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001acc:	4a5f      	ldr	r2, [pc, #380]	; (8001c4c <HAL_SD_MspInit+0x1e4>)
 8001ace:	f043 0308 	orr.w	r3, r3, #8
 8001ad2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad4:	4b5d      	ldr	r3, [pc, #372]	; (8001c4c <HAL_SD_MspInit+0x1e4>)
 8001ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad8:	f003 0308 	and.w	r3, r3, #8
 8001adc:	60bb      	str	r3, [r7, #8]
 8001ade:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001ae0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001ae4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aea:	2301      	movs	r3, #1
 8001aec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aee:	2303      	movs	r3, #3
 8001af0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001af2:	230c      	movs	r3, #12
 8001af4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001af6:	f107 0314 	add.w	r3, r7, #20
 8001afa:	4619      	mov	r1, r3
 8001afc:	4854      	ldr	r0, [pc, #336]	; (8001c50 <HAL_SD_MspInit+0x1e8>)
 8001afe:	f000 ff7f 	bl	8002a00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001b02:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001b06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b10:	2303      	movs	r3, #3
 8001b12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001b14:	230c      	movs	r3, #12
 8001b16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b18:	f107 0314 	add.w	r3, r7, #20
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	484c      	ldr	r0, [pc, #304]	; (8001c50 <HAL_SD_MspInit+0x1e8>)
 8001b20:	f000 ff6e 	bl	8002a00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b24:	2304      	movs	r3, #4
 8001b26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b30:	2303      	movs	r3, #3
 8001b32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001b34:	230c      	movs	r3, #12
 8001b36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b38:	f107 0314 	add.w	r3, r7, #20
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4845      	ldr	r0, [pc, #276]	; (8001c54 <HAL_SD_MspInit+0x1ec>)
 8001b40:	f000 ff5e 	bl	8002a00 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8001b44:	4b44      	ldr	r3, [pc, #272]	; (8001c58 <HAL_SD_MspInit+0x1f0>)
 8001b46:	4a45      	ldr	r2, [pc, #276]	; (8001c5c <HAL_SD_MspInit+0x1f4>)
 8001b48:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8001b4a:	4b43      	ldr	r3, [pc, #268]	; (8001c58 <HAL_SD_MspInit+0x1f0>)
 8001b4c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b50:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b52:	4b41      	ldr	r3, [pc, #260]	; (8001c58 <HAL_SD_MspInit+0x1f0>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b58:	4b3f      	ldr	r3, [pc, #252]	; (8001c58 <HAL_SD_MspInit+0x1f0>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b5e:	4b3e      	ldr	r3, [pc, #248]	; (8001c58 <HAL_SD_MspInit+0x1f0>)
 8001b60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b64:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001b66:	4b3c      	ldr	r3, [pc, #240]	; (8001c58 <HAL_SD_MspInit+0x1f0>)
 8001b68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b6c:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001b6e:	4b3a      	ldr	r3, [pc, #232]	; (8001c58 <HAL_SD_MspInit+0x1f0>)
 8001b70:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b74:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8001b76:	4b38      	ldr	r3, [pc, #224]	; (8001c58 <HAL_SD_MspInit+0x1f0>)
 8001b78:	2220      	movs	r2, #32
 8001b7a:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b7c:	4b36      	ldr	r3, [pc, #216]	; (8001c58 <HAL_SD_MspInit+0x1f0>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001b82:	4b35      	ldr	r3, [pc, #212]	; (8001c58 <HAL_SD_MspInit+0x1f0>)
 8001b84:	2204      	movs	r2, #4
 8001b86:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001b88:	4b33      	ldr	r3, [pc, #204]	; (8001c58 <HAL_SD_MspInit+0x1f0>)
 8001b8a:	2203      	movs	r2, #3
 8001b8c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001b8e:	4b32      	ldr	r3, [pc, #200]	; (8001c58 <HAL_SD_MspInit+0x1f0>)
 8001b90:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001b94:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001b96:	4b30      	ldr	r3, [pc, #192]	; (8001c58 <HAL_SD_MspInit+0x1f0>)
 8001b98:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001b9c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8001b9e:	482e      	ldr	r0, [pc, #184]	; (8001c58 <HAL_SD_MspInit+0x1f0>)
 8001ba0:	f000 fb92 	bl	80022c8 <HAL_DMA_Init>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 8001baa:	f7ff fecf 	bl	800194c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a29      	ldr	r2, [pc, #164]	; (8001c58 <HAL_SD_MspInit+0x1f0>)
 8001bb2:	641a      	str	r2, [r3, #64]	; 0x40
 8001bb4:	4a28      	ldr	r2, [pc, #160]	; (8001c58 <HAL_SD_MspInit+0x1f0>)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8001bba:	4b29      	ldr	r3, [pc, #164]	; (8001c60 <HAL_SD_MspInit+0x1f8>)
 8001bbc:	4a29      	ldr	r2, [pc, #164]	; (8001c64 <HAL_SD_MspInit+0x1fc>)
 8001bbe:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8001bc0:	4b27      	ldr	r3, [pc, #156]	; (8001c60 <HAL_SD_MspInit+0x1f8>)
 8001bc2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bc6:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bc8:	4b25      	ldr	r3, [pc, #148]	; (8001c60 <HAL_SD_MspInit+0x1f8>)
 8001bca:	2240      	movs	r2, #64	; 0x40
 8001bcc:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bce:	4b24      	ldr	r3, [pc, #144]	; (8001c60 <HAL_SD_MspInit+0x1f8>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001bd4:	4b22      	ldr	r3, [pc, #136]	; (8001c60 <HAL_SD_MspInit+0x1f8>)
 8001bd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bda:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001bdc:	4b20      	ldr	r3, [pc, #128]	; (8001c60 <HAL_SD_MspInit+0x1f8>)
 8001bde:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001be2:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001be4:	4b1e      	ldr	r3, [pc, #120]	; (8001c60 <HAL_SD_MspInit+0x1f8>)
 8001be6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bea:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8001bec:	4b1c      	ldr	r3, [pc, #112]	; (8001c60 <HAL_SD_MspInit+0x1f8>)
 8001bee:	2220      	movs	r2, #32
 8001bf0:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001bf2:	4b1b      	ldr	r3, [pc, #108]	; (8001c60 <HAL_SD_MspInit+0x1f8>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001bf8:	4b19      	ldr	r3, [pc, #100]	; (8001c60 <HAL_SD_MspInit+0x1f8>)
 8001bfa:	2204      	movs	r2, #4
 8001bfc:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001bfe:	4b18      	ldr	r3, [pc, #96]	; (8001c60 <HAL_SD_MspInit+0x1f8>)
 8001c00:	2203      	movs	r2, #3
 8001c02:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001c04:	4b16      	ldr	r3, [pc, #88]	; (8001c60 <HAL_SD_MspInit+0x1f8>)
 8001c06:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001c0a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001c0c:	4b14      	ldr	r3, [pc, #80]	; (8001c60 <HAL_SD_MspInit+0x1f8>)
 8001c0e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001c12:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8001c14:	4812      	ldr	r0, [pc, #72]	; (8001c60 <HAL_SD_MspInit+0x1f8>)
 8001c16:	f000 fb57 	bl	80022c8 <HAL_DMA_Init>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 8001c20:	f7ff fe94 	bl	800194c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4a0e      	ldr	r2, [pc, #56]	; (8001c60 <HAL_SD_MspInit+0x1f8>)
 8001c28:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c2a:	4a0d      	ldr	r2, [pc, #52]	; (8001c60 <HAL_SD_MspInit+0x1f8>)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8001c30:	2200      	movs	r2, #0
 8001c32:	2100      	movs	r1, #0
 8001c34:	2031      	movs	r0, #49	; 0x31
 8001c36:	f000 fb10 	bl	800225a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001c3a:	2031      	movs	r0, #49	; 0x31
 8001c3c:	f000 fb29 	bl	8002292 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001c40:	bf00      	nop
 8001c42:	3728      	adds	r7, #40	; 0x28
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40012c00 	.word	0x40012c00
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	40020800 	.word	0x40020800
 8001c54:	40020c00 	.word	0x40020c00
 8001c58:	20000814 	.word	0x20000814
 8001c5c:	40026458 	.word	0x40026458
 8001c60:	200009a8 	.word	0x200009a8
 8001c64:	400264a0 	.word	0x400264a0

08001c68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b08a      	sub	sp, #40	; 0x28
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c70:	f107 0314 	add.w	r3, r7, #20
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	605a      	str	r2, [r3, #4]
 8001c7a:	609a      	str	r2, [r3, #8]
 8001c7c:	60da      	str	r2, [r3, #12]
 8001c7e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a19      	ldr	r2, [pc, #100]	; (8001cec <HAL_SPI_MspInit+0x84>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d12b      	bne.n	8001ce2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	613b      	str	r3, [r7, #16]
 8001c8e:	4b18      	ldr	r3, [pc, #96]	; (8001cf0 <HAL_SPI_MspInit+0x88>)
 8001c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c92:	4a17      	ldr	r2, [pc, #92]	; (8001cf0 <HAL_SPI_MspInit+0x88>)
 8001c94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c98:	6453      	str	r3, [r2, #68]	; 0x44
 8001c9a:	4b15      	ldr	r3, [pc, #84]	; (8001cf0 <HAL_SPI_MspInit+0x88>)
 8001c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ca2:	613b      	str	r3, [r7, #16]
 8001ca4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	4b11      	ldr	r3, [pc, #68]	; (8001cf0 <HAL_SPI_MspInit+0x88>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	4a10      	ldr	r2, [pc, #64]	; (8001cf0 <HAL_SPI_MspInit+0x88>)
 8001cb0:	f043 0302 	orr.w	r3, r3, #2
 8001cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb6:	4b0e      	ldr	r3, [pc, #56]	; (8001cf0 <HAL_SPI_MspInit+0x88>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	60fb      	str	r3, [r7, #12]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = LR_SCK_Pin|LR_MISO_Pin|LR_MOSI_Pin;
 8001cc2:	2338      	movs	r3, #56	; 0x38
 8001cc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cd2:	2305      	movs	r3, #5
 8001cd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd6:	f107 0314 	add.w	r3, r7, #20
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4805      	ldr	r0, [pc, #20]	; (8001cf4 <HAL_SPI_MspInit+0x8c>)
 8001cde:	f000 fe8f 	bl	8002a00 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ce2:	bf00      	nop
 8001ce4:	3728      	adds	r7, #40	; 0x28
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40013000 	.word	0x40013000
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	40020400 	.word	0x40020400

08001cf8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d08:	d10e      	bne.n	8001d28 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	617b      	str	r3, [r7, #20]
 8001d0e:	4b20      	ldr	r3, [pc, #128]	; (8001d90 <HAL_TIM_Base_MspInit+0x98>)
 8001d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d12:	4a1f      	ldr	r2, [pc, #124]	; (8001d90 <HAL_TIM_Base_MspInit+0x98>)
 8001d14:	f043 0301 	orr.w	r3, r3, #1
 8001d18:	6413      	str	r3, [r2, #64]	; 0x40
 8001d1a:	4b1d      	ldr	r3, [pc, #116]	; (8001d90 <HAL_TIM_Base_MspInit+0x98>)
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	617b      	str	r3, [r7, #20]
 8001d24:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001d26:	e02e      	b.n	8001d86 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a19      	ldr	r2, [pc, #100]	; (8001d94 <HAL_TIM_Base_MspInit+0x9c>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d116      	bne.n	8001d60 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	613b      	str	r3, [r7, #16]
 8001d36:	4b16      	ldr	r3, [pc, #88]	; (8001d90 <HAL_TIM_Base_MspInit+0x98>)
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	4a15      	ldr	r2, [pc, #84]	; (8001d90 <HAL_TIM_Base_MspInit+0x98>)
 8001d3c:	f043 0302 	orr.w	r3, r3, #2
 8001d40:	6413      	str	r3, [r2, #64]	; 0x40
 8001d42:	4b13      	ldr	r3, [pc, #76]	; (8001d90 <HAL_TIM_Base_MspInit+0x98>)
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	613b      	str	r3, [r7, #16]
 8001d4c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001d4e:	2200      	movs	r2, #0
 8001d50:	2100      	movs	r1, #0
 8001d52:	201d      	movs	r0, #29
 8001d54:	f000 fa81 	bl	800225a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d58:	201d      	movs	r0, #29
 8001d5a:	f000 fa9a 	bl	8002292 <HAL_NVIC_EnableIRQ>
}
 8001d5e:	e012      	b.n	8001d86 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM5)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a0c      	ldr	r2, [pc, #48]	; (8001d98 <HAL_TIM_Base_MspInit+0xa0>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d10d      	bne.n	8001d86 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	4b08      	ldr	r3, [pc, #32]	; (8001d90 <HAL_TIM_Base_MspInit+0x98>)
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	4a07      	ldr	r2, [pc, #28]	; (8001d90 <HAL_TIM_Base_MspInit+0x98>)
 8001d74:	f043 0308 	orr.w	r3, r3, #8
 8001d78:	6413      	str	r3, [r2, #64]	; 0x40
 8001d7a:	4b05      	ldr	r3, [pc, #20]	; (8001d90 <HAL_TIM_Base_MspInit+0x98>)
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	f003 0308 	and.w	r3, r3, #8
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	68fb      	ldr	r3, [r7, #12]
}
 8001d86:	bf00      	nop
 8001d88:	3718      	adds	r7, #24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40023800 	.word	0x40023800
 8001d94:	40000400 	.word	0x40000400
 8001d98:	40000c00 	.word	0x40000c00

08001d9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08a      	sub	sp, #40	; 0x28
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da4:	f107 0314 	add.w	r3, r7, #20
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	60da      	str	r2, [r3, #12]
 8001db2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a19      	ldr	r2, [pc, #100]	; (8001e20 <HAL_UART_MspInit+0x84>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d12c      	bne.n	8001e18 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	613b      	str	r3, [r7, #16]
 8001dc2:	4b18      	ldr	r3, [pc, #96]	; (8001e24 <HAL_UART_MspInit+0x88>)
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	4a17      	ldr	r2, [pc, #92]	; (8001e24 <HAL_UART_MspInit+0x88>)
 8001dc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dce:	4b15      	ldr	r3, [pc, #84]	; (8001e24 <HAL_UART_MspInit+0x88>)
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dd6:	613b      	str	r3, [r7, #16]
 8001dd8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <HAL_UART_MspInit+0x88>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	4a10      	ldr	r2, [pc, #64]	; (8001e24 <HAL_UART_MspInit+0x88>)
 8001de4:	f043 0302 	orr.w	r3, r3, #2
 8001de8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dea:	4b0e      	ldr	r3, [pc, #56]	; (8001e24 <HAL_UART_MspInit+0x88>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPS_RX_Pin|GPS_TX_Pin;
 8001df6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001dfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e00:	2300      	movs	r3, #0
 8001e02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e04:	2303      	movs	r3, #3
 8001e06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e08:	2307      	movs	r3, #7
 8001e0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e0c:	f107 0314 	add.w	r3, r7, #20
 8001e10:	4619      	mov	r1, r3
 8001e12:	4805      	ldr	r0, [pc, #20]	; (8001e28 <HAL_UART_MspInit+0x8c>)
 8001e14:	f000 fdf4 	bl	8002a00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001e18:	bf00      	nop
 8001e1a:	3728      	adds	r7, #40	; 0x28
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40004800 	.word	0x40004800
 8001e24:	40023800 	.word	0x40023800
 8001e28:	40020400 	.word	0x40020400

08001e2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e30:	bf00      	nop
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e3e:	e7fe      	b.n	8001e3e <HardFault_Handler+0x4>

08001e40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e44:	e7fe      	b.n	8001e44 <MemManage_Handler+0x4>

08001e46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e46:	b480      	push	{r7}
 8001e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e4a:	e7fe      	b.n	8001e4a <BusFault_Handler+0x4>

08001e4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e50:	e7fe      	b.n	8001e50 <UsageFault_Handler+0x4>

08001e52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e52:	b480      	push	{r7}
 8001e54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e56:	bf00      	nop
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e64:	bf00      	nop
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e80:	f000 f8ce 	bl	8002020 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e84:	bf00      	nop
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001e8c:	2040      	movs	r0, #64	; 0x40
 8001e8e:	f000 ff83 	bl	8002d98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001e92:	bf00      	nop
 8001e94:	bd80      	pop	{r7, pc}
	...

08001e98 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001e9c:	4802      	ldr	r0, [pc, #8]	; (8001ea8 <TIM3_IRQHandler+0x10>)
 8001e9e:	f004 fde9 	bl	8006a74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	20000948 	.word	0x20000948

08001eac <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001eb0:	4802      	ldr	r0, [pc, #8]	; (8001ebc <SDIO_IRQHandler+0x10>)
 8001eb2:	f003 fc3b 	bl	800572c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	20000a08 	.word	0x20000a08

08001ec0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001ec4:	4802      	ldr	r0, [pc, #8]	; (8001ed0 <DMA2_Stream3_IRQHandler+0x10>)
 8001ec6:	f000 fb27 	bl	8002518 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	20000814 	.word	0x20000814

08001ed4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001ed8:	4802      	ldr	r0, [pc, #8]	; (8001ee4 <OTG_FS_IRQHandler+0x10>)
 8001eda:	f001 f9fd 	bl	80032d8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	2000242c 	.word	0x2000242c

08001ee8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001eec:	4802      	ldr	r0, [pc, #8]	; (8001ef8 <DMA2_Stream6_IRQHandler+0x10>)
 8001eee:	f000 fb13 	bl	8002518 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	200009a8 	.word	0x200009a8

08001efc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f00:	4b08      	ldr	r3, [pc, #32]	; (8001f24 <SystemInit+0x28>)
 8001f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f06:	4a07      	ldr	r2, [pc, #28]	; (8001f24 <SystemInit+0x28>)
 8001f08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f10:	4b04      	ldr	r3, [pc, #16]	; (8001f24 <SystemInit+0x28>)
 8001f12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f16:	609a      	str	r2, [r3, #8]
#endif
}
 8001f18:	bf00      	nop
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	e000ed00 	.word	0xe000ed00

08001f28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001f28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f60 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001f2c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001f2e:	e003      	b.n	8001f38 <LoopCopyDataInit>

08001f30 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001f30:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001f32:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001f34:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001f36:	3104      	adds	r1, #4

08001f38 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001f38:	480b      	ldr	r0, [pc, #44]	; (8001f68 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001f3a:	4b0c      	ldr	r3, [pc, #48]	; (8001f6c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001f3c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001f3e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001f40:	d3f6      	bcc.n	8001f30 <CopyDataInit>
  ldr  r2, =_sbss
 8001f42:	4a0b      	ldr	r2, [pc, #44]	; (8001f70 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001f44:	e002      	b.n	8001f4c <LoopFillZerobss>

08001f46 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001f46:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001f48:	f842 3b04 	str.w	r3, [r2], #4

08001f4c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001f4c:	4b09      	ldr	r3, [pc, #36]	; (8001f74 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001f4e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001f50:	d3f9      	bcc.n	8001f46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f52:	f7ff ffd3 	bl	8001efc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f56:	f00a f891 	bl	800c07c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f5a:	f7ff f917 	bl	800118c <main>
  bx  lr    
 8001f5e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f60:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001f64:	0800fec8 	.word	0x0800fec8
  ldr  r0, =_sdata
 8001f68:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001f6c:	20000350 	.word	0x20000350
  ldr  r2, =_sbss
 8001f70:	20000350 	.word	0x20000350
  ldr  r3, = _ebss
 8001f74:	20002838 	.word	0x20002838

08001f78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f78:	e7fe      	b.n	8001f78 <ADC_IRQHandler>
	...

08001f7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f80:	4b0e      	ldr	r3, [pc, #56]	; (8001fbc <HAL_Init+0x40>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a0d      	ldr	r2, [pc, #52]	; (8001fbc <HAL_Init+0x40>)
 8001f86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f8c:	4b0b      	ldr	r3, [pc, #44]	; (8001fbc <HAL_Init+0x40>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a0a      	ldr	r2, [pc, #40]	; (8001fbc <HAL_Init+0x40>)
 8001f92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f98:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <HAL_Init+0x40>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a07      	ldr	r2, [pc, #28]	; (8001fbc <HAL_Init+0x40>)
 8001f9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fa4:	2003      	movs	r0, #3
 8001fa6:	f000 f94d 	bl	8002244 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001faa:	2000      	movs	r0, #0
 8001fac:	f000 f808 	bl	8001fc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fb0:	f7ff fcd4 	bl	800195c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40023c00 	.word	0x40023c00

08001fc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fc8:	4b12      	ldr	r3, [pc, #72]	; (8002014 <HAL_InitTick+0x54>)
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	4b12      	ldr	r3, [pc, #72]	; (8002018 <HAL_InitTick+0x58>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f000 f965 	bl	80022ae <HAL_SYSTICK_Config>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e00e      	b.n	800200c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2b0f      	cmp	r3, #15
 8001ff2:	d80a      	bhi.n	800200a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	6879      	ldr	r1, [r7, #4]
 8001ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ffc:	f000 f92d 	bl	800225a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002000:	4a06      	ldr	r2, [pc, #24]	; (800201c <HAL_InitTick+0x5c>)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002006:	2300      	movs	r3, #0
 8002008:	e000      	b.n	800200c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
}
 800200c:	4618      	mov	r0, r3
 800200e:	3708      	adds	r7, #8
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	20000004 	.word	0x20000004
 8002018:	2000000c 	.word	0x2000000c
 800201c:	20000008 	.word	0x20000008

08002020 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002024:	4b06      	ldr	r3, [pc, #24]	; (8002040 <HAL_IncTick+0x20>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	461a      	mov	r2, r3
 800202a:	4b06      	ldr	r3, [pc, #24]	; (8002044 <HAL_IncTick+0x24>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4413      	add	r3, r2
 8002030:	4a04      	ldr	r2, [pc, #16]	; (8002044 <HAL_IncTick+0x24>)
 8002032:	6013      	str	r3, [r2, #0]
}
 8002034:	bf00      	nop
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	2000000c 	.word	0x2000000c
 8002044:	20000b24 	.word	0x20000b24

08002048 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  return uwTick;
 800204c:	4b03      	ldr	r3, [pc, #12]	; (800205c <HAL_GetTick+0x14>)
 800204e:	681b      	ldr	r3, [r3, #0]
}
 8002050:	4618      	mov	r0, r3
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	20000b24 	.word	0x20000b24

08002060 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002068:	f7ff ffee 	bl	8002048 <HAL_GetTick>
 800206c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002078:	d005      	beq.n	8002086 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800207a:	4b09      	ldr	r3, [pc, #36]	; (80020a0 <HAL_Delay+0x40>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	461a      	mov	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	4413      	add	r3, r2
 8002084:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002086:	bf00      	nop
 8002088:	f7ff ffde 	bl	8002048 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	429a      	cmp	r2, r3
 8002096:	d8f7      	bhi.n	8002088 <HAL_Delay+0x28>
  {
  }
}
 8002098:	bf00      	nop
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	2000000c 	.word	0x2000000c

080020a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f003 0307 	and.w	r3, r3, #7
 80020b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020b4:	4b0c      	ldr	r3, [pc, #48]	; (80020e8 <__NVIC_SetPriorityGrouping+0x44>)
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ba:	68ba      	ldr	r2, [r7, #8]
 80020bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020c0:	4013      	ands	r3, r2
 80020c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020d6:	4a04      	ldr	r2, [pc, #16]	; (80020e8 <__NVIC_SetPriorityGrouping+0x44>)
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	60d3      	str	r3, [r2, #12]
}
 80020dc:	bf00      	nop
 80020de:	3714      	adds	r7, #20
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	e000ed00 	.word	0xe000ed00

080020ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020f0:	4b04      	ldr	r3, [pc, #16]	; (8002104 <__NVIC_GetPriorityGrouping+0x18>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	0a1b      	lsrs	r3, r3, #8
 80020f6:	f003 0307 	and.w	r3, r3, #7
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	e000ed00 	.word	0xe000ed00

08002108 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	4603      	mov	r3, r0
 8002110:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002116:	2b00      	cmp	r3, #0
 8002118:	db0b      	blt.n	8002132 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800211a:	79fb      	ldrb	r3, [r7, #7]
 800211c:	f003 021f 	and.w	r2, r3, #31
 8002120:	4907      	ldr	r1, [pc, #28]	; (8002140 <__NVIC_EnableIRQ+0x38>)
 8002122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002126:	095b      	lsrs	r3, r3, #5
 8002128:	2001      	movs	r0, #1
 800212a:	fa00 f202 	lsl.w	r2, r0, r2
 800212e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002132:	bf00      	nop
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	e000e100 	.word	0xe000e100

08002144 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	4603      	mov	r3, r0
 800214c:	6039      	str	r1, [r7, #0]
 800214e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002154:	2b00      	cmp	r3, #0
 8002156:	db0a      	blt.n	800216e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	b2da      	uxtb	r2, r3
 800215c:	490c      	ldr	r1, [pc, #48]	; (8002190 <__NVIC_SetPriority+0x4c>)
 800215e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002162:	0112      	lsls	r2, r2, #4
 8002164:	b2d2      	uxtb	r2, r2
 8002166:	440b      	add	r3, r1
 8002168:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800216c:	e00a      	b.n	8002184 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	b2da      	uxtb	r2, r3
 8002172:	4908      	ldr	r1, [pc, #32]	; (8002194 <__NVIC_SetPriority+0x50>)
 8002174:	79fb      	ldrb	r3, [r7, #7]
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	3b04      	subs	r3, #4
 800217c:	0112      	lsls	r2, r2, #4
 800217e:	b2d2      	uxtb	r2, r2
 8002180:	440b      	add	r3, r1
 8002182:	761a      	strb	r2, [r3, #24]
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	e000e100 	.word	0xe000e100
 8002194:	e000ed00 	.word	0xe000ed00

08002198 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002198:	b480      	push	{r7}
 800219a:	b089      	sub	sp, #36	; 0x24
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f003 0307 	and.w	r3, r3, #7
 80021aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	f1c3 0307 	rsb	r3, r3, #7
 80021b2:	2b04      	cmp	r3, #4
 80021b4:	bf28      	it	cs
 80021b6:	2304      	movcs	r3, #4
 80021b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	3304      	adds	r3, #4
 80021be:	2b06      	cmp	r3, #6
 80021c0:	d902      	bls.n	80021c8 <NVIC_EncodePriority+0x30>
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	3b03      	subs	r3, #3
 80021c6:	e000      	b.n	80021ca <NVIC_EncodePriority+0x32>
 80021c8:	2300      	movs	r3, #0
 80021ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021cc:	f04f 32ff 	mov.w	r2, #4294967295
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	43da      	mvns	r2, r3
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	401a      	ands	r2, r3
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021e0:	f04f 31ff 	mov.w	r1, #4294967295
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	fa01 f303 	lsl.w	r3, r1, r3
 80021ea:	43d9      	mvns	r1, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f0:	4313      	orrs	r3, r2
         );
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3724      	adds	r7, #36	; 0x24
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
	...

08002200 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3b01      	subs	r3, #1
 800220c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002210:	d301      	bcc.n	8002216 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002212:	2301      	movs	r3, #1
 8002214:	e00f      	b.n	8002236 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002216:	4a0a      	ldr	r2, [pc, #40]	; (8002240 <SysTick_Config+0x40>)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3b01      	subs	r3, #1
 800221c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800221e:	210f      	movs	r1, #15
 8002220:	f04f 30ff 	mov.w	r0, #4294967295
 8002224:	f7ff ff8e 	bl	8002144 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002228:	4b05      	ldr	r3, [pc, #20]	; (8002240 <SysTick_Config+0x40>)
 800222a:	2200      	movs	r2, #0
 800222c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800222e:	4b04      	ldr	r3, [pc, #16]	; (8002240 <SysTick_Config+0x40>)
 8002230:	2207      	movs	r2, #7
 8002232:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	e000e010 	.word	0xe000e010

08002244 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f7ff ff29 	bl	80020a4 <__NVIC_SetPriorityGrouping>
}
 8002252:	bf00      	nop
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800225a:	b580      	push	{r7, lr}
 800225c:	b086      	sub	sp, #24
 800225e:	af00      	add	r7, sp, #0
 8002260:	4603      	mov	r3, r0
 8002262:	60b9      	str	r1, [r7, #8]
 8002264:	607a      	str	r2, [r7, #4]
 8002266:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002268:	2300      	movs	r3, #0
 800226a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800226c:	f7ff ff3e 	bl	80020ec <__NVIC_GetPriorityGrouping>
 8002270:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	68b9      	ldr	r1, [r7, #8]
 8002276:	6978      	ldr	r0, [r7, #20]
 8002278:	f7ff ff8e 	bl	8002198 <NVIC_EncodePriority>
 800227c:	4602      	mov	r2, r0
 800227e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002282:	4611      	mov	r1, r2
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff ff5d 	bl	8002144 <__NVIC_SetPriority>
}
 800228a:	bf00      	nop
 800228c:	3718      	adds	r7, #24
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b082      	sub	sp, #8
 8002296:	af00      	add	r7, sp, #0
 8002298:	4603      	mov	r3, r0
 800229a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800229c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff ff31 	bl	8002108 <__NVIC_EnableIRQ>
}
 80022a6:	bf00      	nop
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b082      	sub	sp, #8
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f7ff ffa2 	bl	8002200 <SysTick_Config>
 80022bc:	4603      	mov	r3, r0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
	...

080022c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022d0:	2300      	movs	r3, #0
 80022d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80022d4:	f7ff feb8 	bl	8002048 <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d101      	bne.n	80022e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e099      	b.n	8002418 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2202      	movs	r2, #2
 80022f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f022 0201 	bic.w	r2, r2, #1
 8002302:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002304:	e00f      	b.n	8002326 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002306:	f7ff fe9f 	bl	8002048 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b05      	cmp	r3, #5
 8002312:	d908      	bls.n	8002326 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2220      	movs	r2, #32
 8002318:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2203      	movs	r2, #3
 800231e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e078      	b.n	8002418 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0301 	and.w	r3, r3, #1
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1e8      	bne.n	8002306 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800233c:	697a      	ldr	r2, [r7, #20]
 800233e:	4b38      	ldr	r3, [pc, #224]	; (8002420 <HAL_DMA_Init+0x158>)
 8002340:	4013      	ands	r3, r2
 8002342:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685a      	ldr	r2, [r3, #4]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002352:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800235e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800236a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	4313      	orrs	r3, r2
 8002376:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237c:	2b04      	cmp	r3, #4
 800237e:	d107      	bne.n	8002390 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002388:	4313      	orrs	r3, r2
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	4313      	orrs	r3, r2
 800238e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	697a      	ldr	r2, [r7, #20]
 8002396:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	f023 0307 	bic.w	r3, r3, #7
 80023a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ac:	697a      	ldr	r2, [r7, #20]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b6:	2b04      	cmp	r3, #4
 80023b8:	d117      	bne.n	80023ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023be:	697a      	ldr	r2, [r7, #20]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d00e      	beq.n	80023ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f000 fa9d 	bl	800290c <DMA_CheckFifoParam>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d008      	beq.n	80023ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2240      	movs	r2, #64	; 0x40
 80023dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2201      	movs	r2, #1
 80023e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80023e6:	2301      	movs	r3, #1
 80023e8:	e016      	b.n	8002418 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f000 fa54 	bl	80028a0 <DMA_CalcBaseAndBitshift>
 80023f8:	4603      	mov	r3, r0
 80023fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002400:	223f      	movs	r2, #63	; 0x3f
 8002402:	409a      	lsls	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2201      	movs	r2, #1
 8002412:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002416:	2300      	movs	r3, #0
}
 8002418:	4618      	mov	r0, r3
 800241a:	3718      	adds	r7, #24
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	f010803f 	.word	0xf010803f

08002424 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
 8002430:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002432:	2300      	movs	r3, #0
 8002434:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800243a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002442:	2b01      	cmp	r3, #1
 8002444:	d101      	bne.n	800244a <HAL_DMA_Start_IT+0x26>
 8002446:	2302      	movs	r3, #2
 8002448:	e040      	b.n	80024cc <HAL_DMA_Start_IT+0xa8>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2201      	movs	r2, #1
 800244e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b01      	cmp	r3, #1
 800245c:	d12f      	bne.n	80024be <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2202      	movs	r2, #2
 8002462:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2200      	movs	r2, #0
 800246a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	68b9      	ldr	r1, [r7, #8]
 8002472:	68f8      	ldr	r0, [r7, #12]
 8002474:	f000 f9e6 	bl	8002844 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800247c:	223f      	movs	r2, #63	; 0x3f
 800247e:	409a      	lsls	r2, r3
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f042 0216 	orr.w	r2, r2, #22
 8002492:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002498:	2b00      	cmp	r3, #0
 800249a:	d007      	beq.n	80024ac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f042 0208 	orr.w	r2, r2, #8
 80024aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f042 0201 	orr.w	r2, r2, #1
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	e005      	b.n	80024ca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80024c6:	2302      	movs	r3, #2
 80024c8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80024ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3718      	adds	r7, #24
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d004      	beq.n	80024f2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2280      	movs	r2, #128	; 0x80
 80024ec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e00c      	b.n	800250c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2205      	movs	r2, #5
 80024f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f022 0201 	bic.w	r2, r2, #1
 8002508:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002520:	2300      	movs	r3, #0
 8002522:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002524:	4b92      	ldr	r3, [pc, #584]	; (8002770 <HAL_DMA_IRQHandler+0x258>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a92      	ldr	r2, [pc, #584]	; (8002774 <HAL_DMA_IRQHandler+0x25c>)
 800252a:	fba2 2303 	umull	r2, r3, r2, r3
 800252e:	0a9b      	lsrs	r3, r3, #10
 8002530:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002536:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002542:	2208      	movs	r2, #8
 8002544:	409a      	lsls	r2, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	4013      	ands	r3, r2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d01a      	beq.n	8002584 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0304 	and.w	r3, r3, #4
 8002558:	2b00      	cmp	r3, #0
 800255a:	d013      	beq.n	8002584 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f022 0204 	bic.w	r2, r2, #4
 800256a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002570:	2208      	movs	r2, #8
 8002572:	409a      	lsls	r2, r3
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800257c:	f043 0201 	orr.w	r2, r3, #1
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002588:	2201      	movs	r2, #1
 800258a:	409a      	lsls	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	4013      	ands	r3, r2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d012      	beq.n	80025ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00b      	beq.n	80025ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a6:	2201      	movs	r2, #1
 80025a8:	409a      	lsls	r2, r3
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b2:	f043 0202 	orr.w	r2, r3, #2
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025be:	2204      	movs	r2, #4
 80025c0:	409a      	lsls	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	4013      	ands	r3, r2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d012      	beq.n	80025f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d00b      	beq.n	80025f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025dc:	2204      	movs	r2, #4
 80025de:	409a      	lsls	r2, r3
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e8:	f043 0204 	orr.w	r2, r3, #4
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f4:	2210      	movs	r2, #16
 80025f6:	409a      	lsls	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	4013      	ands	r3, r2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d043      	beq.n	8002688 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0308 	and.w	r3, r3, #8
 800260a:	2b00      	cmp	r3, #0
 800260c:	d03c      	beq.n	8002688 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002612:	2210      	movs	r2, #16
 8002614:	409a      	lsls	r2, r3
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d018      	beq.n	800265a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d108      	bne.n	8002648 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263a:	2b00      	cmp	r3, #0
 800263c:	d024      	beq.n	8002688 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	4798      	blx	r3
 8002646:	e01f      	b.n	8002688 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800264c:	2b00      	cmp	r3, #0
 800264e:	d01b      	beq.n	8002688 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	4798      	blx	r3
 8002658:	e016      	b.n	8002688 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002664:	2b00      	cmp	r3, #0
 8002666:	d107      	bne.n	8002678 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f022 0208 	bic.w	r2, r2, #8
 8002676:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267c:	2b00      	cmp	r3, #0
 800267e:	d003      	beq.n	8002688 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800268c:	2220      	movs	r2, #32
 800268e:	409a      	lsls	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	4013      	ands	r3, r2
 8002694:	2b00      	cmp	r3, #0
 8002696:	f000 808e 	beq.w	80027b6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0310 	and.w	r3, r3, #16
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f000 8086 	beq.w	80027b6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ae:	2220      	movs	r2, #32
 80026b0:	409a      	lsls	r2, r3
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b05      	cmp	r3, #5
 80026c0:	d136      	bne.n	8002730 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f022 0216 	bic.w	r2, r2, #22
 80026d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	695a      	ldr	r2, [r3, #20]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d103      	bne.n	80026f2 <HAL_DMA_IRQHandler+0x1da>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d007      	beq.n	8002702 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f022 0208 	bic.w	r2, r2, #8
 8002700:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002706:	223f      	movs	r2, #63	; 0x3f
 8002708:	409a      	lsls	r2, r3
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2201      	movs	r2, #1
 800271a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002722:	2b00      	cmp	r3, #0
 8002724:	d07d      	beq.n	8002822 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	4798      	blx	r3
        }
        return;
 800272e:	e078      	b.n	8002822 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d01c      	beq.n	8002778 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d108      	bne.n	800275e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002750:	2b00      	cmp	r3, #0
 8002752:	d030      	beq.n	80027b6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	4798      	blx	r3
 800275c:	e02b      	b.n	80027b6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002762:	2b00      	cmp	r3, #0
 8002764:	d027      	beq.n	80027b6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	4798      	blx	r3
 800276e:	e022      	b.n	80027b6 <HAL_DMA_IRQHandler+0x29e>
 8002770:	20000004 	.word	0x20000004
 8002774:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002782:	2b00      	cmp	r3, #0
 8002784:	d10f      	bne.n	80027a6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 0210 	bic.w	r2, r2, #16
 8002794:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d003      	beq.n	80027b6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d032      	beq.n	8002824 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d022      	beq.n	8002810 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2205      	movs	r2, #5
 80027ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f022 0201 	bic.w	r2, r2, #1
 80027e0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	3301      	adds	r3, #1
 80027e6:	60bb      	str	r3, [r7, #8]
 80027e8:	697a      	ldr	r2, [r7, #20]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d307      	bcc.n	80027fe <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0301 	and.w	r3, r3, #1
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1f2      	bne.n	80027e2 <HAL_DMA_IRQHandler+0x2ca>
 80027fc:	e000      	b.n	8002800 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80027fe:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002814:	2b00      	cmp	r3, #0
 8002816:	d005      	beq.n	8002824 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	4798      	blx	r3
 8002820:	e000      	b.n	8002824 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002822:	bf00      	nop
    }
  }
}
 8002824:	3718      	adds	r7, #24
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop

0800282c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002838:	4618      	mov	r0, r3
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	607a      	str	r2, [r7, #4]
 8002850:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002860:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	683a      	ldr	r2, [r7, #0]
 8002868:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	2b40      	cmp	r3, #64	; 0x40
 8002870:	d108      	bne.n	8002884 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68ba      	ldr	r2, [r7, #8]
 8002880:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002882:	e007      	b.n	8002894 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68ba      	ldr	r2, [r7, #8]
 800288a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	60da      	str	r2, [r3, #12]
}
 8002894:	bf00      	nop
 8002896:	3714      	adds	r7, #20
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	3b10      	subs	r3, #16
 80028b0:	4a14      	ldr	r2, [pc, #80]	; (8002904 <DMA_CalcBaseAndBitshift+0x64>)
 80028b2:	fba2 2303 	umull	r2, r3, r2, r3
 80028b6:	091b      	lsrs	r3, r3, #4
 80028b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80028ba:	4a13      	ldr	r2, [pc, #76]	; (8002908 <DMA_CalcBaseAndBitshift+0x68>)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	4413      	add	r3, r2
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	461a      	mov	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2b03      	cmp	r3, #3
 80028cc:	d909      	bls.n	80028e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80028d6:	f023 0303 	bic.w	r3, r3, #3
 80028da:	1d1a      	adds	r2, r3, #4
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	659a      	str	r2, [r3, #88]	; 0x58
 80028e0:	e007      	b.n	80028f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80028ea:	f023 0303 	bic.w	r3, r3, #3
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3714      	adds	r7, #20
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	aaaaaaab 	.word	0xaaaaaaab
 8002908:	0800fbe4 	.word	0x0800fbe4

0800290c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002914:	2300      	movs	r3, #0
 8002916:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d11f      	bne.n	8002966 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	2b03      	cmp	r3, #3
 800292a:	d855      	bhi.n	80029d8 <DMA_CheckFifoParam+0xcc>
 800292c:	a201      	add	r2, pc, #4	; (adr r2, 8002934 <DMA_CheckFifoParam+0x28>)
 800292e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002932:	bf00      	nop
 8002934:	08002945 	.word	0x08002945
 8002938:	08002957 	.word	0x08002957
 800293c:	08002945 	.word	0x08002945
 8002940:	080029d9 	.word	0x080029d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002948:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d045      	beq.n	80029dc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002954:	e042      	b.n	80029dc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800295a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800295e:	d13f      	bne.n	80029e0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002964:	e03c      	b.n	80029e0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800296e:	d121      	bne.n	80029b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	2b03      	cmp	r3, #3
 8002974:	d836      	bhi.n	80029e4 <DMA_CheckFifoParam+0xd8>
 8002976:	a201      	add	r2, pc, #4	; (adr r2, 800297c <DMA_CheckFifoParam+0x70>)
 8002978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800297c:	0800298d 	.word	0x0800298d
 8002980:	08002993 	.word	0x08002993
 8002984:	0800298d 	.word	0x0800298d
 8002988:	080029a5 	.word	0x080029a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	73fb      	strb	r3, [r7, #15]
      break;
 8002990:	e02f      	b.n	80029f2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002996:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d024      	beq.n	80029e8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029a2:	e021      	b.n	80029e8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029ac:	d11e      	bne.n	80029ec <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80029b2:	e01b      	b.n	80029ec <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d902      	bls.n	80029c0 <DMA_CheckFifoParam+0xb4>
 80029ba:	2b03      	cmp	r3, #3
 80029bc:	d003      	beq.n	80029c6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80029be:	e018      	b.n	80029f2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	73fb      	strb	r3, [r7, #15]
      break;
 80029c4:	e015      	b.n	80029f2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00e      	beq.n	80029f0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	73fb      	strb	r3, [r7, #15]
      break;
 80029d6:	e00b      	b.n	80029f0 <DMA_CheckFifoParam+0xe4>
      break;
 80029d8:	bf00      	nop
 80029da:	e00a      	b.n	80029f2 <DMA_CheckFifoParam+0xe6>
      break;
 80029dc:	bf00      	nop
 80029de:	e008      	b.n	80029f2 <DMA_CheckFifoParam+0xe6>
      break;
 80029e0:	bf00      	nop
 80029e2:	e006      	b.n	80029f2 <DMA_CheckFifoParam+0xe6>
      break;
 80029e4:	bf00      	nop
 80029e6:	e004      	b.n	80029f2 <DMA_CheckFifoParam+0xe6>
      break;
 80029e8:	bf00      	nop
 80029ea:	e002      	b.n	80029f2 <DMA_CheckFifoParam+0xe6>
      break;   
 80029ec:	bf00      	nop
 80029ee:	e000      	b.n	80029f2 <DMA_CheckFifoParam+0xe6>
      break;
 80029f0:	bf00      	nop
    }
  } 
  
  return status; 
 80029f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3714      	adds	r7, #20
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b089      	sub	sp, #36	; 0x24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a12:	2300      	movs	r3, #0
 8002a14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a16:	2300      	movs	r3, #0
 8002a18:	61fb      	str	r3, [r7, #28]
 8002a1a:	e16b      	b.n	8002cf4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	f040 815a 	bne.w	8002cee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d00b      	beq.n	8002a5a <HAL_GPIO_Init+0x5a>
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d007      	beq.n	8002a5a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a4e:	2b11      	cmp	r3, #17
 8002a50:	d003      	beq.n	8002a5a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	2b12      	cmp	r3, #18
 8002a58:	d130      	bne.n	8002abc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	2203      	movs	r2, #3
 8002a66:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	68da      	ldr	r2, [r3, #12]
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a90:	2201      	movs	r2, #1
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	091b      	lsrs	r3, r3, #4
 8002aa6:	f003 0201 	and.w	r2, r3, #1
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	2203      	movs	r2, #3
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	43db      	mvns	r3, r3
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d003      	beq.n	8002afc <HAL_GPIO_Init+0xfc>
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	2b12      	cmp	r3, #18
 8002afa:	d123      	bne.n	8002b44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	08da      	lsrs	r2, r3, #3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	3208      	adds	r2, #8
 8002b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	f003 0307 	and.w	r3, r3, #7
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	220f      	movs	r2, #15
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	691a      	ldr	r2, [r3, #16]
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	f003 0307 	and.w	r3, r3, #7
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	08da      	lsrs	r2, r3, #3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	3208      	adds	r2, #8
 8002b3e:	69b9      	ldr	r1, [r7, #24]
 8002b40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	2203      	movs	r2, #3
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	43db      	mvns	r3, r3
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f003 0203 	and.w	r2, r3, #3
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	f000 80b4 	beq.w	8002cee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b86:	2300      	movs	r3, #0
 8002b88:	60fb      	str	r3, [r7, #12]
 8002b8a:	4b5f      	ldr	r3, [pc, #380]	; (8002d08 <HAL_GPIO_Init+0x308>)
 8002b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8e:	4a5e      	ldr	r2, [pc, #376]	; (8002d08 <HAL_GPIO_Init+0x308>)
 8002b90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b94:	6453      	str	r3, [r2, #68]	; 0x44
 8002b96:	4b5c      	ldr	r3, [pc, #368]	; (8002d08 <HAL_GPIO_Init+0x308>)
 8002b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b9e:	60fb      	str	r3, [r7, #12]
 8002ba0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ba2:	4a5a      	ldr	r2, [pc, #360]	; (8002d0c <HAL_GPIO_Init+0x30c>)
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	089b      	lsrs	r3, r3, #2
 8002ba8:	3302      	adds	r3, #2
 8002baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	f003 0303 	and.w	r3, r3, #3
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	220f      	movs	r2, #15
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	43db      	mvns	r3, r3
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a51      	ldr	r2, [pc, #324]	; (8002d10 <HAL_GPIO_Init+0x310>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d02b      	beq.n	8002c26 <HAL_GPIO_Init+0x226>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a50      	ldr	r2, [pc, #320]	; (8002d14 <HAL_GPIO_Init+0x314>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d025      	beq.n	8002c22 <HAL_GPIO_Init+0x222>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a4f      	ldr	r2, [pc, #316]	; (8002d18 <HAL_GPIO_Init+0x318>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d01f      	beq.n	8002c1e <HAL_GPIO_Init+0x21e>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a4e      	ldr	r2, [pc, #312]	; (8002d1c <HAL_GPIO_Init+0x31c>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d019      	beq.n	8002c1a <HAL_GPIO_Init+0x21a>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a4d      	ldr	r2, [pc, #308]	; (8002d20 <HAL_GPIO_Init+0x320>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d013      	beq.n	8002c16 <HAL_GPIO_Init+0x216>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a4c      	ldr	r2, [pc, #304]	; (8002d24 <HAL_GPIO_Init+0x324>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d00d      	beq.n	8002c12 <HAL_GPIO_Init+0x212>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a4b      	ldr	r2, [pc, #300]	; (8002d28 <HAL_GPIO_Init+0x328>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d007      	beq.n	8002c0e <HAL_GPIO_Init+0x20e>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a4a      	ldr	r2, [pc, #296]	; (8002d2c <HAL_GPIO_Init+0x32c>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d101      	bne.n	8002c0a <HAL_GPIO_Init+0x20a>
 8002c06:	2307      	movs	r3, #7
 8002c08:	e00e      	b.n	8002c28 <HAL_GPIO_Init+0x228>
 8002c0a:	2308      	movs	r3, #8
 8002c0c:	e00c      	b.n	8002c28 <HAL_GPIO_Init+0x228>
 8002c0e:	2306      	movs	r3, #6
 8002c10:	e00a      	b.n	8002c28 <HAL_GPIO_Init+0x228>
 8002c12:	2305      	movs	r3, #5
 8002c14:	e008      	b.n	8002c28 <HAL_GPIO_Init+0x228>
 8002c16:	2304      	movs	r3, #4
 8002c18:	e006      	b.n	8002c28 <HAL_GPIO_Init+0x228>
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e004      	b.n	8002c28 <HAL_GPIO_Init+0x228>
 8002c1e:	2302      	movs	r3, #2
 8002c20:	e002      	b.n	8002c28 <HAL_GPIO_Init+0x228>
 8002c22:	2301      	movs	r3, #1
 8002c24:	e000      	b.n	8002c28 <HAL_GPIO_Init+0x228>
 8002c26:	2300      	movs	r3, #0
 8002c28:	69fa      	ldr	r2, [r7, #28]
 8002c2a:	f002 0203 	and.w	r2, r2, #3
 8002c2e:	0092      	lsls	r2, r2, #2
 8002c30:	4093      	lsls	r3, r2
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c38:	4934      	ldr	r1, [pc, #208]	; (8002d0c <HAL_GPIO_Init+0x30c>)
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	089b      	lsrs	r3, r3, #2
 8002c3e:	3302      	adds	r3, #2
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c46:	4b3a      	ldr	r3, [pc, #232]	; (8002d30 <HAL_GPIO_Init+0x330>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	43db      	mvns	r3, r3
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	4013      	ands	r3, r2
 8002c54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d003      	beq.n	8002c6a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c6a:	4a31      	ldr	r2, [pc, #196]	; (8002d30 <HAL_GPIO_Init+0x330>)
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c70:	4b2f      	ldr	r3, [pc, #188]	; (8002d30 <HAL_GPIO_Init+0x330>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d003      	beq.n	8002c94 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c94:	4a26      	ldr	r2, [pc, #152]	; (8002d30 <HAL_GPIO_Init+0x330>)
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c9a:	4b25      	ldr	r3, [pc, #148]	; (8002d30 <HAL_GPIO_Init+0x330>)
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	43db      	mvns	r3, r3
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d003      	beq.n	8002cbe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cbe:	4a1c      	ldr	r2, [pc, #112]	; (8002d30 <HAL_GPIO_Init+0x330>)
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cc4:	4b1a      	ldr	r3, [pc, #104]	; (8002d30 <HAL_GPIO_Init+0x330>)
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d003      	beq.n	8002ce8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ce8:	4a11      	ldr	r2, [pc, #68]	; (8002d30 <HAL_GPIO_Init+0x330>)
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	61fb      	str	r3, [r7, #28]
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	2b0f      	cmp	r3, #15
 8002cf8:	f67f ae90 	bls.w	8002a1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cfc:	bf00      	nop
 8002cfe:	3724      	adds	r7, #36	; 0x24
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr
 8002d08:	40023800 	.word	0x40023800
 8002d0c:	40013800 	.word	0x40013800
 8002d10:	40020000 	.word	0x40020000
 8002d14:	40020400 	.word	0x40020400
 8002d18:	40020800 	.word	0x40020800
 8002d1c:	40020c00 	.word	0x40020c00
 8002d20:	40021000 	.word	0x40021000
 8002d24:	40021400 	.word	0x40021400
 8002d28:	40021800 	.word	0x40021800
 8002d2c:	40021c00 	.word	0x40021c00
 8002d30:	40013c00 	.word	0x40013c00

08002d34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	691a      	ldr	r2, [r3, #16]
 8002d44:	887b      	ldrh	r3, [r7, #2]
 8002d46:	4013      	ands	r3, r2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d002      	beq.n	8002d52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	73fb      	strb	r3, [r7, #15]
 8002d50:	e001      	b.n	8002d56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d52:	2300      	movs	r3, #0
 8002d54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3714      	adds	r7, #20
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	807b      	strh	r3, [r7, #2]
 8002d70:	4613      	mov	r3, r2
 8002d72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d74:	787b      	ldrb	r3, [r7, #1]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d003      	beq.n	8002d82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d7a:	887a      	ldrh	r2, [r7, #2]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d80:	e003      	b.n	8002d8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d82:	887b      	ldrh	r3, [r7, #2]
 8002d84:	041a      	lsls	r2, r3, #16
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	619a      	str	r2, [r3, #24]
}
 8002d8a:	bf00      	nop
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
	...

08002d98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	4603      	mov	r3, r0
 8002da0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002da2:	4b08      	ldr	r3, [pc, #32]	; (8002dc4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002da4:	695a      	ldr	r2, [r3, #20]
 8002da6:	88fb      	ldrh	r3, [r7, #6]
 8002da8:	4013      	ands	r3, r2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d006      	beq.n	8002dbc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002dae:	4a05      	ldr	r2, [pc, #20]	; (8002dc4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002db0:	88fb      	ldrh	r3, [r7, #6]
 8002db2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002db4:	88fb      	ldrh	r3, [r7, #6]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7fe fda8 	bl	800190c <HAL_GPIO_EXTI_Callback>
  }
}
 8002dbc:	bf00      	nop
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	40013c00 	.word	0x40013c00

08002dc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e11f      	b.n	800301a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d106      	bne.n	8002df4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f7fe fddc 	bl	80019ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2224      	movs	r2, #36	; 0x24
 8002df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f022 0201 	bic.w	r2, r2, #1
 8002e0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e2c:	f001 fea2 	bl	8004b74 <HAL_RCC_GetPCLK1Freq>
 8002e30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	4a7b      	ldr	r2, [pc, #492]	; (8003024 <HAL_I2C_Init+0x25c>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d807      	bhi.n	8002e4c <HAL_I2C_Init+0x84>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	4a7a      	ldr	r2, [pc, #488]	; (8003028 <HAL_I2C_Init+0x260>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	bf94      	ite	ls
 8002e44:	2301      	movls	r3, #1
 8002e46:	2300      	movhi	r3, #0
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	e006      	b.n	8002e5a <HAL_I2C_Init+0x92>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	4a77      	ldr	r2, [pc, #476]	; (800302c <HAL_I2C_Init+0x264>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	bf94      	ite	ls
 8002e54:	2301      	movls	r3, #1
 8002e56:	2300      	movhi	r3, #0
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e0db      	b.n	800301a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	4a72      	ldr	r2, [pc, #456]	; (8003030 <HAL_I2C_Init+0x268>)
 8002e66:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6a:	0c9b      	lsrs	r3, r3, #18
 8002e6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68ba      	ldr	r2, [r7, #8]
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	6a1b      	ldr	r3, [r3, #32]
 8002e88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	4a64      	ldr	r2, [pc, #400]	; (8003024 <HAL_I2C_Init+0x25c>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d802      	bhi.n	8002e9c <HAL_I2C_Init+0xd4>
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	e009      	b.n	8002eb0 <HAL_I2C_Init+0xe8>
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ea2:	fb02 f303 	mul.w	r3, r2, r3
 8002ea6:	4a63      	ldr	r2, [pc, #396]	; (8003034 <HAL_I2C_Init+0x26c>)
 8002ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8002eac:	099b      	lsrs	r3, r3, #6
 8002eae:	3301      	adds	r3, #1
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	6812      	ldr	r2, [r2, #0]
 8002eb4:	430b      	orrs	r3, r1
 8002eb6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	69db      	ldr	r3, [r3, #28]
 8002ebe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ec2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	4956      	ldr	r1, [pc, #344]	; (8003024 <HAL_I2C_Init+0x25c>)
 8002ecc:	428b      	cmp	r3, r1
 8002ece:	d80d      	bhi.n	8002eec <HAL_I2C_Init+0x124>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	1e59      	subs	r1, r3, #1
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ede:	3301      	adds	r3, #1
 8002ee0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ee4:	2b04      	cmp	r3, #4
 8002ee6:	bf38      	it	cc
 8002ee8:	2304      	movcc	r3, #4
 8002eea:	e04f      	b.n	8002f8c <HAL_I2C_Init+0x1c4>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d111      	bne.n	8002f18 <HAL_I2C_Init+0x150>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	1e58      	subs	r0, r3, #1
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6859      	ldr	r1, [r3, #4]
 8002efc:	460b      	mov	r3, r1
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	440b      	add	r3, r1
 8002f02:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f06:	3301      	adds	r3, #1
 8002f08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	bf0c      	ite	eq
 8002f10:	2301      	moveq	r3, #1
 8002f12:	2300      	movne	r3, #0
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	e012      	b.n	8002f3e <HAL_I2C_Init+0x176>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	1e58      	subs	r0, r3, #1
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6859      	ldr	r1, [r3, #4]
 8002f20:	460b      	mov	r3, r1
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	440b      	add	r3, r1
 8002f26:	0099      	lsls	r1, r3, #2
 8002f28:	440b      	add	r3, r1
 8002f2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f2e:	3301      	adds	r3, #1
 8002f30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	bf0c      	ite	eq
 8002f38:	2301      	moveq	r3, #1
 8002f3a:	2300      	movne	r3, #0
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <HAL_I2C_Init+0x17e>
 8002f42:	2301      	movs	r3, #1
 8002f44:	e022      	b.n	8002f8c <HAL_I2C_Init+0x1c4>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d10e      	bne.n	8002f6c <HAL_I2C_Init+0x1a4>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	1e58      	subs	r0, r3, #1
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6859      	ldr	r1, [r3, #4]
 8002f56:	460b      	mov	r3, r1
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	440b      	add	r3, r1
 8002f5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f60:	3301      	adds	r3, #1
 8002f62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f6a:	e00f      	b.n	8002f8c <HAL_I2C_Init+0x1c4>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	1e58      	subs	r0, r3, #1
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6859      	ldr	r1, [r3, #4]
 8002f74:	460b      	mov	r3, r1
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	440b      	add	r3, r1
 8002f7a:	0099      	lsls	r1, r3, #2
 8002f7c:	440b      	add	r3, r1
 8002f7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f82:	3301      	adds	r3, #1
 8002f84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f8c:	6879      	ldr	r1, [r7, #4]
 8002f8e:	6809      	ldr	r1, [r1, #0]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	69da      	ldr	r2, [r3, #28]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	431a      	orrs	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	430a      	orrs	r2, r1
 8002fae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002fba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	6911      	ldr	r1, [r2, #16]
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	68d2      	ldr	r2, [r2, #12]
 8002fc6:	4311      	orrs	r1, r2
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	6812      	ldr	r2, [r2, #0]
 8002fcc:	430b      	orrs	r3, r1
 8002fce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	695a      	ldr	r2, [r3, #20]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f042 0201 	orr.w	r2, r2, #1
 8002ffa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2220      	movs	r2, #32
 8003006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	000186a0 	.word	0x000186a0
 8003028:	001e847f 	.word	0x001e847f
 800302c:	003d08ff 	.word	0x003d08ff
 8003030:	431bde83 	.word	0x431bde83
 8003034:	10624dd3 	.word	0x10624dd3

08003038 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800303a:	b08f      	sub	sp, #60	; 0x3c
 800303c:	af0a      	add	r7, sp, #40	; 0x28
 800303e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e10f      	b.n	800326a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b00      	cmp	r3, #0
 800305a:	d106      	bne.n	800306a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f008 fd09 	bl	800ba7c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2203      	movs	r2, #3
 800306e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800307a:	2b00      	cmp	r3, #0
 800307c:	d102      	bne.n	8003084 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4618      	mov	r0, r3
 800308a:	f005 fb0e 	bl	80086aa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	603b      	str	r3, [r7, #0]
 8003094:	687e      	ldr	r6, [r7, #4]
 8003096:	466d      	mov	r5, sp
 8003098:	f106 0410 	add.w	r4, r6, #16
 800309c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800309e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030a4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030a8:	e885 0003 	stmia.w	r5, {r0, r1}
 80030ac:	1d33      	adds	r3, r6, #4
 80030ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030b0:	6838      	ldr	r0, [r7, #0]
 80030b2:	f005 f9e5 	bl	8008480 <USB_CoreInit>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d005      	beq.n	80030c8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2202      	movs	r2, #2
 80030c0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e0d0      	b.n	800326a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2100      	movs	r1, #0
 80030ce:	4618      	mov	r0, r3
 80030d0:	f005 fafc 	bl	80086cc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030d4:	2300      	movs	r3, #0
 80030d6:	73fb      	strb	r3, [r7, #15]
 80030d8:	e04a      	b.n	8003170 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80030da:	7bfa      	ldrb	r2, [r7, #15]
 80030dc:	6879      	ldr	r1, [r7, #4]
 80030de:	4613      	mov	r3, r2
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	1a9b      	subs	r3, r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	440b      	add	r3, r1
 80030e8:	333d      	adds	r3, #61	; 0x3d
 80030ea:	2201      	movs	r2, #1
 80030ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80030ee:	7bfa      	ldrb	r2, [r7, #15]
 80030f0:	6879      	ldr	r1, [r7, #4]
 80030f2:	4613      	mov	r3, r2
 80030f4:	00db      	lsls	r3, r3, #3
 80030f6:	1a9b      	subs	r3, r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	440b      	add	r3, r1
 80030fc:	333c      	adds	r3, #60	; 0x3c
 80030fe:	7bfa      	ldrb	r2, [r7, #15]
 8003100:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003102:	7bfa      	ldrb	r2, [r7, #15]
 8003104:	7bfb      	ldrb	r3, [r7, #15]
 8003106:	b298      	uxth	r0, r3
 8003108:	6879      	ldr	r1, [r7, #4]
 800310a:	4613      	mov	r3, r2
 800310c:	00db      	lsls	r3, r3, #3
 800310e:	1a9b      	subs	r3, r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	440b      	add	r3, r1
 8003114:	3342      	adds	r3, #66	; 0x42
 8003116:	4602      	mov	r2, r0
 8003118:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800311a:	7bfa      	ldrb	r2, [r7, #15]
 800311c:	6879      	ldr	r1, [r7, #4]
 800311e:	4613      	mov	r3, r2
 8003120:	00db      	lsls	r3, r3, #3
 8003122:	1a9b      	subs	r3, r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	440b      	add	r3, r1
 8003128:	333f      	adds	r3, #63	; 0x3f
 800312a:	2200      	movs	r2, #0
 800312c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800312e:	7bfa      	ldrb	r2, [r7, #15]
 8003130:	6879      	ldr	r1, [r7, #4]
 8003132:	4613      	mov	r3, r2
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	1a9b      	subs	r3, r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	440b      	add	r3, r1
 800313c:	3344      	adds	r3, #68	; 0x44
 800313e:	2200      	movs	r2, #0
 8003140:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003142:	7bfa      	ldrb	r2, [r7, #15]
 8003144:	6879      	ldr	r1, [r7, #4]
 8003146:	4613      	mov	r3, r2
 8003148:	00db      	lsls	r3, r3, #3
 800314a:	1a9b      	subs	r3, r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	440b      	add	r3, r1
 8003150:	3348      	adds	r3, #72	; 0x48
 8003152:	2200      	movs	r2, #0
 8003154:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003156:	7bfa      	ldrb	r2, [r7, #15]
 8003158:	6879      	ldr	r1, [r7, #4]
 800315a:	4613      	mov	r3, r2
 800315c:	00db      	lsls	r3, r3, #3
 800315e:	1a9b      	subs	r3, r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	440b      	add	r3, r1
 8003164:	3350      	adds	r3, #80	; 0x50
 8003166:	2200      	movs	r2, #0
 8003168:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800316a:	7bfb      	ldrb	r3, [r7, #15]
 800316c:	3301      	adds	r3, #1
 800316e:	73fb      	strb	r3, [r7, #15]
 8003170:	7bfa      	ldrb	r2, [r7, #15]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	429a      	cmp	r2, r3
 8003178:	d3af      	bcc.n	80030da <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800317a:	2300      	movs	r3, #0
 800317c:	73fb      	strb	r3, [r7, #15]
 800317e:	e044      	b.n	800320a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003180:	7bfa      	ldrb	r2, [r7, #15]
 8003182:	6879      	ldr	r1, [r7, #4]
 8003184:	4613      	mov	r3, r2
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	1a9b      	subs	r3, r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	440b      	add	r3, r1
 800318e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003192:	2200      	movs	r2, #0
 8003194:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003196:	7bfa      	ldrb	r2, [r7, #15]
 8003198:	6879      	ldr	r1, [r7, #4]
 800319a:	4613      	mov	r3, r2
 800319c:	00db      	lsls	r3, r3, #3
 800319e:	1a9b      	subs	r3, r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	440b      	add	r3, r1
 80031a4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80031a8:	7bfa      	ldrb	r2, [r7, #15]
 80031aa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80031ac:	7bfa      	ldrb	r2, [r7, #15]
 80031ae:	6879      	ldr	r1, [r7, #4]
 80031b0:	4613      	mov	r3, r2
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	1a9b      	subs	r3, r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	440b      	add	r3, r1
 80031ba:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80031be:	2200      	movs	r2, #0
 80031c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80031c2:	7bfa      	ldrb	r2, [r7, #15]
 80031c4:	6879      	ldr	r1, [r7, #4]
 80031c6:	4613      	mov	r3, r2
 80031c8:	00db      	lsls	r3, r3, #3
 80031ca:	1a9b      	subs	r3, r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	440b      	add	r3, r1
 80031d0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80031d4:	2200      	movs	r2, #0
 80031d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80031d8:	7bfa      	ldrb	r2, [r7, #15]
 80031da:	6879      	ldr	r1, [r7, #4]
 80031dc:	4613      	mov	r3, r2
 80031de:	00db      	lsls	r3, r3, #3
 80031e0:	1a9b      	subs	r3, r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	440b      	add	r3, r1
 80031e6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80031ea:	2200      	movs	r2, #0
 80031ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80031ee:	7bfa      	ldrb	r2, [r7, #15]
 80031f0:	6879      	ldr	r1, [r7, #4]
 80031f2:	4613      	mov	r3, r2
 80031f4:	00db      	lsls	r3, r3, #3
 80031f6:	1a9b      	subs	r3, r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	440b      	add	r3, r1
 80031fc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003200:	2200      	movs	r2, #0
 8003202:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003204:	7bfb      	ldrb	r3, [r7, #15]
 8003206:	3301      	adds	r3, #1
 8003208:	73fb      	strb	r3, [r7, #15]
 800320a:	7bfa      	ldrb	r2, [r7, #15]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	429a      	cmp	r2, r3
 8003212:	d3b5      	bcc.n	8003180 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	603b      	str	r3, [r7, #0]
 800321a:	687e      	ldr	r6, [r7, #4]
 800321c:	466d      	mov	r5, sp
 800321e:	f106 0410 	add.w	r4, r6, #16
 8003222:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003224:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003226:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003228:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800322a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800322e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003232:	1d33      	adds	r3, r6, #4
 8003234:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003236:	6838      	ldr	r0, [r7, #0]
 8003238:	f005 fa72 	bl	8008720 <USB_DevInit>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d005      	beq.n	800324e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2202      	movs	r2, #2
 8003246:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e00d      	b.n	800326a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4618      	mov	r0, r3
 8003264:	f006 fa67 	bl	8009736 <USB_DevDisconnect>

  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3714      	adds	r7, #20
 800326e:	46bd      	mov	sp, r7
 8003270:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003272 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b084      	sub	sp, #16
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003286:	2b01      	cmp	r3, #1
 8003288:	d101      	bne.n	800328e <HAL_PCD_Start+0x1c>
 800328a:	2302      	movs	r3, #2
 800328c:	e020      	b.n	80032d0 <HAL_PCD_Start+0x5e>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800329a:	2b01      	cmp	r3, #1
 800329c:	d109      	bne.n	80032b2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d005      	beq.n	80032b2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f006 fa25 	bl	8009706 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f005 f9e1 	bl	8008688 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80032d8:	b590      	push	{r4, r7, lr}
 80032da:	b08d      	sub	sp, #52	; 0x34
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032e6:	6a3b      	ldr	r3, [r7, #32]
 80032e8:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f006 facc 	bl	800988c <USB_GetMode>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f040 838e 	bne.w	8003a18 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4618      	mov	r0, r3
 8003302:	f006 fa30 	bl	8009766 <USB_ReadInterrupts>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	f000 8384 	beq.w	8003a16 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4618      	mov	r0, r3
 8003314:	f006 fa27 	bl	8009766 <USB_ReadInterrupts>
 8003318:	4603      	mov	r3, r0
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b02      	cmp	r3, #2
 8003320:	d107      	bne.n	8003332 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	695a      	ldr	r2, [r3, #20]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f002 0202 	and.w	r2, r2, #2
 8003330:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4618      	mov	r0, r3
 8003338:	f006 fa15 	bl	8009766 <USB_ReadInterrupts>
 800333c:	4603      	mov	r3, r0
 800333e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003342:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003346:	d17b      	bne.n	8003440 <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8003348:	2300      	movs	r3, #0
 800334a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4618      	mov	r0, r3
 8003352:	f006 fa1b 	bl	800978c <USB_ReadDevAllOutEpInterrupt>
 8003356:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003358:	e06f      	b.n	800343a <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 800335a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	2b00      	cmp	r3, #0
 8003362:	d064      	beq.n	800342e <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800336a:	b2d2      	uxtb	r2, r2
 800336c:	4611      	mov	r1, r2
 800336e:	4618      	mov	r0, r3
 8003370:	f006 fa40 	bl	80097f4 <USB_ReadDevOutEPInterrupt>
 8003374:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00c      	beq.n	800339a <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003382:	015a      	lsls	r2, r3, #5
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	4413      	add	r3, r2
 8003388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800338c:	461a      	mov	r2, r3
 800338e:	2301      	movs	r3, #1
 8003390:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003392:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f000 fe0d 	bl	8003fb4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	f003 0308 	and.w	r3, r3, #8
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00c      	beq.n	80033be <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80033a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 ff0c 	bl	80041c4 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80033ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ae:	015a      	lsls	r2, r3, #5
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	4413      	add	r3, r2
 80033b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033b8:	461a      	mov	r2, r3
 80033ba:	2308      	movs	r3, #8
 80033bc:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	f003 0310 	and.w	r3, r3, #16
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d008      	beq.n	80033da <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80033c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ca:	015a      	lsls	r2, r3, #5
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	4413      	add	r3, r2
 80033d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033d4:	461a      	mov	r2, r3
 80033d6:	2310      	movs	r3, #16
 80033d8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	f003 0320 	and.w	r3, r3, #32
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d015      	beq.n	8003410 <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d108      	bne.n	80033fe <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6818      	ldr	r0, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80033f6:	461a      	mov	r2, r3
 80033f8:	2101      	movs	r1, #1
 80033fa:	f006 fa8b 	bl	8009914 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80033fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003400:	015a      	lsls	r2, r3, #5
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	4413      	add	r3, r2
 8003406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800340a:	461a      	mov	r2, r3
 800340c:	2320      	movs	r3, #32
 800340e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d009      	beq.n	800342e <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800341a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341c:	015a      	lsls	r2, r3, #5
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	4413      	add	r3, r2
 8003422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003426:	461a      	mov	r2, r3
 8003428:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800342c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800342e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003430:	3301      	adds	r3, #1
 8003432:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003436:	085b      	lsrs	r3, r3, #1
 8003438:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800343a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800343c:	2b00      	cmp	r3, #0
 800343e:	d18c      	bne.n	800335a <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4618      	mov	r0, r3
 8003446:	f006 f98e 	bl	8009766 <USB_ReadInterrupts>
 800344a:	4603      	mov	r3, r0
 800344c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003450:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003454:	f040 80c4 	bne.w	80035e0 <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4618      	mov	r0, r3
 800345e:	f006 f9af 	bl	80097c0 <USB_ReadDevAllInEpInterrupt>
 8003462:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003464:	2300      	movs	r3, #0
 8003466:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003468:	e0b6      	b.n	80035d8 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800346a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800346c:	f003 0301 	and.w	r3, r3, #1
 8003470:	2b00      	cmp	r3, #0
 8003472:	f000 80ab 	beq.w	80035cc <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800347c:	b2d2      	uxtb	r2, r2
 800347e:	4611      	mov	r1, r2
 8003480:	4618      	mov	r0, r3
 8003482:	f006 f9d5 	bl	8009830 <USB_ReadDevInEPInterrupt>
 8003486:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	2b00      	cmp	r3, #0
 8003490:	d05b      	beq.n	800354a <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003494:	f003 030f 	and.w	r3, r3, #15
 8003498:	2201      	movs	r2, #1
 800349a:	fa02 f303 	lsl.w	r3, r2, r3
 800349e:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	43db      	mvns	r3, r3
 80034ac:	69f9      	ldr	r1, [r7, #28]
 80034ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034b2:	4013      	ands	r3, r2
 80034b4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80034b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b8:	015a      	lsls	r2, r3, #5
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	4413      	add	r3, r2
 80034be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034c2:	461a      	mov	r2, r3
 80034c4:	2301      	movs	r3, #1
 80034c6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d11b      	bne.n	8003508 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80034d0:	6879      	ldr	r1, [r7, #4]
 80034d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034d4:	4613      	mov	r3, r2
 80034d6:	00db      	lsls	r3, r3, #3
 80034d8:	1a9b      	subs	r3, r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	440b      	add	r3, r1
 80034de:	3348      	adds	r3, #72	; 0x48
 80034e0:	6819      	ldr	r1, [r3, #0]
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034e6:	4613      	mov	r3, r2
 80034e8:	00db      	lsls	r3, r3, #3
 80034ea:	1a9b      	subs	r3, r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	4403      	add	r3, r0
 80034f0:	3344      	adds	r3, #68	; 0x44
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4419      	add	r1, r3
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034fa:	4613      	mov	r3, r2
 80034fc:	00db      	lsls	r3, r3, #3
 80034fe:	1a9b      	subs	r3, r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	4403      	add	r3, r0
 8003504:	3348      	adds	r3, #72	; 0x48
 8003506:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350a:	b2db      	uxtb	r3, r3
 800350c:	4619      	mov	r1, r3
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f008 fb35 	bl	800bb7e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	2b01      	cmp	r3, #1
 800351a:	d116      	bne.n	800354a <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800351c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351e:	2b00      	cmp	r3, #0
 8003520:	d113      	bne.n	800354a <HAL_PCD_IRQHandler+0x272>
 8003522:	6879      	ldr	r1, [r7, #4]
 8003524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003526:	4613      	mov	r3, r2
 8003528:	00db      	lsls	r3, r3, #3
 800352a:	1a9b      	subs	r3, r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	440b      	add	r3, r1
 8003530:	3350      	adds	r3, #80	; 0x50
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d108      	bne.n	800354a <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6818      	ldr	r0, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003542:	461a      	mov	r2, r3
 8003544:	2101      	movs	r1, #1
 8003546:	f006 f9e5 	bl	8009914 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	f003 0308 	and.w	r3, r3, #8
 8003550:	2b00      	cmp	r3, #0
 8003552:	d008      	beq.n	8003566 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003556:	015a      	lsls	r2, r3, #5
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	4413      	add	r3, r2
 800355c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003560:	461a      	mov	r2, r3
 8003562:	2308      	movs	r3, #8
 8003564:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	f003 0310 	and.w	r3, r3, #16
 800356c:	2b00      	cmp	r3, #0
 800356e:	d008      	beq.n	8003582 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003572:	015a      	lsls	r2, r3, #5
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	4413      	add	r3, r2
 8003578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800357c:	461a      	mov	r2, r3
 800357e:	2310      	movs	r3, #16
 8003580:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003588:	2b00      	cmp	r3, #0
 800358a:	d008      	beq.n	800359e <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800358c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358e:	015a      	lsls	r2, r3, #5
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	4413      	add	r3, r2
 8003594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003598:	461a      	mov	r2, r3
 800359a:	2340      	movs	r3, #64	; 0x40
 800359c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d008      	beq.n	80035ba <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80035a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035aa:	015a      	lsls	r2, r3, #5
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	4413      	add	r3, r2
 80035b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035b4:	461a      	mov	r2, r3
 80035b6:	2302      	movs	r3, #2
 80035b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d003      	beq.n	80035cc <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80035c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 fc67 	bl	8003e9a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80035cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ce:	3301      	adds	r3, #1
 80035d0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80035d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d4:	085b      	lsrs	r3, r3, #1
 80035d6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80035d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f47f af45 	bne.w	800346a <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f006 f8be 	bl	8009766 <USB_ReadInterrupts>
 80035ea:	4603      	mov	r3, r0
 80035ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80035f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035f4:	d122      	bne.n	800363c <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	69fa      	ldr	r2, [r7, #28]
 8003600:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003604:	f023 0301 	bic.w	r3, r3, #1
 8003608:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003610:	2b01      	cmp	r3, #1
 8003612:	d108      	bne.n	8003626 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800361c:	2100      	movs	r1, #0
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 fe88 	bl	8004334 <HAL_PCDEx_LPM_Callback>
 8003624:	e002      	b.n	800362c <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f008 fb20 	bl	800bc6c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	695a      	ldr	r2, [r3, #20]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800363a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4618      	mov	r0, r3
 8003642:	f006 f890 	bl	8009766 <USB_ReadInterrupts>
 8003646:	4603      	mov	r3, r0
 8003648:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800364c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003650:	d112      	bne.n	8003678 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b01      	cmp	r3, #1
 8003660:	d102      	bne.n	8003668 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f008 fadc 	bl	800bc20 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	695a      	ldr	r2, [r3, #20]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003676:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4618      	mov	r0, r3
 800367e:	f006 f872 	bl	8009766 <USB_ReadInterrupts>
 8003682:	4603      	mov	r3, r0
 8003684:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003688:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800368c:	f040 80a7 	bne.w	80037de <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	69fa      	ldr	r2, [r7, #28]
 800369a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800369e:	f023 0301 	bic.w	r3, r3, #1
 80036a2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2110      	movs	r1, #16
 80036aa:	4618      	mov	r0, r3
 80036ac:	f005 f9aa 	bl	8008a04 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036b0:	2300      	movs	r3, #0
 80036b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036b4:	e036      	b.n	8003724 <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80036b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b8:	015a      	lsls	r2, r3, #5
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	4413      	add	r3, r2
 80036be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036c2:	461a      	mov	r2, r3
 80036c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80036c8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80036ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036cc:	015a      	lsls	r2, r3, #5
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	4413      	add	r3, r2
 80036d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036da:	0151      	lsls	r1, r2, #5
 80036dc:	69fa      	ldr	r2, [r7, #28]
 80036de:	440a      	add	r2, r1
 80036e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80036e8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80036ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ec:	015a      	lsls	r2, r3, #5
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	4413      	add	r3, r2
 80036f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036f6:	461a      	mov	r2, r3
 80036f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80036fc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80036fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003700:	015a      	lsls	r2, r3, #5
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	4413      	add	r3, r2
 8003706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800370e:	0151      	lsls	r1, r2, #5
 8003710:	69fa      	ldr	r2, [r7, #28]
 8003712:	440a      	add	r2, r1
 8003714:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003718:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800371c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800371e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003720:	3301      	adds	r3, #1
 8003722:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800372a:	429a      	cmp	r2, r3
 800372c:	d3c3      	bcc.n	80036b6 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	69fa      	ldr	r2, [r7, #28]
 8003738:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800373c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003740:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003746:	2b00      	cmp	r3, #0
 8003748:	d016      	beq.n	8003778 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003750:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003754:	69fa      	ldr	r2, [r7, #28]
 8003756:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800375a:	f043 030b 	orr.w	r3, r3, #11
 800375e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376a:	69fa      	ldr	r2, [r7, #28]
 800376c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003770:	f043 030b 	orr.w	r3, r3, #11
 8003774:	6453      	str	r3, [r2, #68]	; 0x44
 8003776:	e015      	b.n	80037a4 <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800377e:	695b      	ldr	r3, [r3, #20]
 8003780:	69fa      	ldr	r2, [r7, #28]
 8003782:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003786:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800378a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800378e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	69fa      	ldr	r2, [r7, #28]
 800379a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800379e:	f043 030b 	orr.w	r3, r3, #11
 80037a2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	69fa      	ldr	r2, [r7, #28]
 80037ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037b2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80037b6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6818      	ldr	r0, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80037c8:	461a      	mov	r2, r3
 80037ca:	f006 f8a3 	bl	8009914 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	695a      	ldr	r2, [r3, #20]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80037dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f005 ffbf 	bl	8009766 <USB_ReadInterrupts>
 80037e8:	4603      	mov	r3, r0
 80037ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037f2:	d124      	bne.n	800383e <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f006 f855 	bl	80098a8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4618      	mov	r0, r3
 8003804:	f005 f95f 	bl	8008ac6 <USB_GetDevSpeed>
 8003808:	4603      	mov	r3, r0
 800380a:	461a      	mov	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681c      	ldr	r4, [r3, #0]
 8003814:	f001 f9a2 	bl	8004b5c <HAL_RCC_GetHCLKFreq>
 8003818:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800381e:	b2db      	uxtb	r3, r3
 8003820:	461a      	mov	r2, r3
 8003822:	4620      	mov	r0, r4
 8003824:	f004 fe8e 	bl	8008544 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f008 f9d0 	bl	800bbce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	695a      	ldr	r2, [r3, #20]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800383c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4618      	mov	r0, r3
 8003844:	f005 ff8f 	bl	8009766 <USB_ReadInterrupts>
 8003848:	4603      	mov	r3, r0
 800384a:	f003 0310 	and.w	r3, r3, #16
 800384e:	2b10      	cmp	r3, #16
 8003850:	d161      	bne.n	8003916 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	699a      	ldr	r2, [r3, #24]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f022 0210 	bic.w	r2, r2, #16
 8003860:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003862:	6a3b      	ldr	r3, [r7, #32]
 8003864:	6a1b      	ldr	r3, [r3, #32]
 8003866:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	f003 020f 	and.w	r2, r3, #15
 800386e:	4613      	mov	r3, r2
 8003870:	00db      	lsls	r3, r3, #3
 8003872:	1a9b      	subs	r3, r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	4413      	add	r3, r2
 800387e:	3304      	adds	r3, #4
 8003880:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	0c5b      	lsrs	r3, r3, #17
 8003886:	f003 030f 	and.w	r3, r3, #15
 800388a:	2b02      	cmp	r3, #2
 800388c:	d124      	bne.n	80038d8 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800388e:	693a      	ldr	r2, [r7, #16]
 8003890:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003894:	4013      	ands	r3, r2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d035      	beq.n	8003906 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	091b      	lsrs	r3, r3, #4
 80038a2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80038a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	461a      	mov	r2, r3
 80038ac:	6a38      	ldr	r0, [r7, #32]
 80038ae:	f005 fe07 	bl	80094c0 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	68da      	ldr	r2, [r3, #12]
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	091b      	lsrs	r3, r3, #4
 80038ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038be:	441a      	add	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	699a      	ldr	r2, [r3, #24]
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	091b      	lsrs	r3, r3, #4
 80038cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038d0:	441a      	add	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	619a      	str	r2, [r3, #24]
 80038d6:	e016      	b.n	8003906 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	0c5b      	lsrs	r3, r3, #17
 80038dc:	f003 030f 	and.w	r3, r3, #15
 80038e0:	2b06      	cmp	r3, #6
 80038e2:	d110      	bne.n	8003906 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80038ea:	2208      	movs	r2, #8
 80038ec:	4619      	mov	r1, r3
 80038ee:	6a38      	ldr	r0, [r7, #32]
 80038f0:	f005 fde6 	bl	80094c0 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	699a      	ldr	r2, [r3, #24]
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	091b      	lsrs	r3, r3, #4
 80038fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003900:	441a      	add	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	699a      	ldr	r2, [r3, #24]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f042 0210 	orr.w	r2, r2, #16
 8003914:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4618      	mov	r0, r3
 800391c:	f005 ff23 	bl	8009766 <USB_ReadInterrupts>
 8003920:	4603      	mov	r3, r0
 8003922:	f003 0308 	and.w	r3, r3, #8
 8003926:	2b08      	cmp	r3, #8
 8003928:	d10a      	bne.n	8003940 <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f008 f941 	bl	800bbb2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	695a      	ldr	r2, [r3, #20]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f002 0208 	and.w	r2, r2, #8
 800393e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4618      	mov	r0, r3
 8003946:	f005 ff0e 	bl	8009766 <USB_ReadInterrupts>
 800394a:	4603      	mov	r3, r0
 800394c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003950:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003954:	d10f      	bne.n	8003976 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003956:	2300      	movs	r3, #0
 8003958:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800395a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395c:	b2db      	uxtb	r3, r3
 800395e:	4619      	mov	r1, r3
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f008 f9a3 	bl	800bcac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	695a      	ldr	r2, [r3, #20]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003974:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4618      	mov	r0, r3
 800397c:	f005 fef3 	bl	8009766 <USB_ReadInterrupts>
 8003980:	4603      	mov	r3, r0
 8003982:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003986:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800398a:	d10f      	bne.n	80039ac <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800398c:	2300      	movs	r3, #0
 800398e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003992:	b2db      	uxtb	r3, r3
 8003994:	4619      	mov	r1, r3
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f008 f976 	bl	800bc88 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	695a      	ldr	r2, [r3, #20]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80039aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f005 fed8 	bl	8009766 <USB_ReadInterrupts>
 80039b6:	4603      	mov	r3, r0
 80039b8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80039bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039c0:	d10a      	bne.n	80039d8 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f008 f984 	bl	800bcd0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	695a      	ldr	r2, [r3, #20]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80039d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4618      	mov	r0, r3
 80039de:	f005 fec2 	bl	8009766 <USB_ReadInterrupts>
 80039e2:	4603      	mov	r3, r0
 80039e4:	f003 0304 	and.w	r3, r3, #4
 80039e8:	2b04      	cmp	r3, #4
 80039ea:	d115      	bne.n	8003a18 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	f003 0304 	and.w	r3, r3, #4
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d002      	beq.n	8003a04 <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f008 f974 	bl	800bcec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	6859      	ldr	r1, [r3, #4]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	430a      	orrs	r2, r1
 8003a12:	605a      	str	r2, [r3, #4]
 8003a14:	e000      	b.n	8003a18 <HAL_PCD_IRQHandler+0x740>
      return;
 8003a16:	bf00      	nop
    }
  }
}
 8003a18:	3734      	adds	r7, #52	; 0x34
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd90      	pop	{r4, r7, pc}

08003a1e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b082      	sub	sp, #8
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
 8003a26:	460b      	mov	r3, r1
 8003a28:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d101      	bne.n	8003a38 <HAL_PCD_SetAddress+0x1a>
 8003a34:	2302      	movs	r3, #2
 8003a36:	e013      	b.n	8003a60 <HAL_PCD_SetAddress+0x42>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	78fa      	ldrb	r2, [r7, #3]
 8003a44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	78fa      	ldrb	r2, [r7, #3]
 8003a4e:	4611      	mov	r1, r2
 8003a50:	4618      	mov	r0, r3
 8003a52:	f005 fe32 	bl	80096ba <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3708      	adds	r7, #8
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	4608      	mov	r0, r1
 8003a72:	4611      	mov	r1, r2
 8003a74:	461a      	mov	r2, r3
 8003a76:	4603      	mov	r3, r0
 8003a78:	70fb      	strb	r3, [r7, #3]
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	803b      	strh	r3, [r7, #0]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003a82:	2300      	movs	r3, #0
 8003a84:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	da0f      	bge.n	8003aae <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a8e:	78fb      	ldrb	r3, [r7, #3]
 8003a90:	f003 020f 	and.w	r2, r3, #15
 8003a94:	4613      	mov	r3, r2
 8003a96:	00db      	lsls	r3, r3, #3
 8003a98:	1a9b      	subs	r3, r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	3338      	adds	r3, #56	; 0x38
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	3304      	adds	r3, #4
 8003aa4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	705a      	strb	r2, [r3, #1]
 8003aac:	e00f      	b.n	8003ace <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003aae:	78fb      	ldrb	r3, [r7, #3]
 8003ab0:	f003 020f 	and.w	r2, r3, #15
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	00db      	lsls	r3, r3, #3
 8003ab8:	1a9b      	subs	r3, r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	3304      	adds	r3, #4
 8003ac6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003ace:	78fb      	ldrb	r3, [r7, #3]
 8003ad0:	f003 030f 	and.w	r3, r3, #15
 8003ad4:	b2da      	uxtb	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003ada:	883a      	ldrh	r2, [r7, #0]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	78ba      	ldrb	r2, [r7, #2]
 8003ae4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	785b      	ldrb	r3, [r3, #1]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d004      	beq.n	8003af8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003af8:	78bb      	ldrb	r3, [r7, #2]
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d102      	bne.n	8003b04 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2200      	movs	r2, #0
 8003b02:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d101      	bne.n	8003b12 <HAL_PCD_EP_Open+0xaa>
 8003b0e:	2302      	movs	r3, #2
 8003b10:	e00e      	b.n	8003b30 <HAL_PCD_EP_Open+0xc8>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2201      	movs	r2, #1
 8003b16:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68f9      	ldr	r1, [r7, #12]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f004 fff5 	bl	8008b10 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003b2e:	7afb      	ldrb	r3, [r7, #11]
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3710      	adds	r7, #16
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	460b      	mov	r3, r1
 8003b42:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	da0f      	bge.n	8003b6c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b4c:	78fb      	ldrb	r3, [r7, #3]
 8003b4e:	f003 020f 	and.w	r2, r3, #15
 8003b52:	4613      	mov	r3, r2
 8003b54:	00db      	lsls	r3, r3, #3
 8003b56:	1a9b      	subs	r3, r3, r2
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	3338      	adds	r3, #56	; 0x38
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	4413      	add	r3, r2
 8003b60:	3304      	adds	r3, #4
 8003b62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2201      	movs	r2, #1
 8003b68:	705a      	strb	r2, [r3, #1]
 8003b6a:	e00f      	b.n	8003b8c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b6c:	78fb      	ldrb	r3, [r7, #3]
 8003b6e:	f003 020f 	and.w	r2, r3, #15
 8003b72:	4613      	mov	r3, r2
 8003b74:	00db      	lsls	r3, r3, #3
 8003b76:	1a9b      	subs	r3, r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	4413      	add	r3, r2
 8003b82:	3304      	adds	r3, #4
 8003b84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003b8c:	78fb      	ldrb	r3, [r7, #3]
 8003b8e:	f003 030f 	and.w	r3, r3, #15
 8003b92:	b2da      	uxtb	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d101      	bne.n	8003ba6 <HAL_PCD_EP_Close+0x6e>
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	e00e      	b.n	8003bc4 <HAL_PCD_EP_Close+0x8c>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68f9      	ldr	r1, [r7, #12]
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f005 f833 	bl	8008c20 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	607a      	str	r2, [r7, #4]
 8003bd6:	603b      	str	r3, [r7, #0]
 8003bd8:	460b      	mov	r3, r1
 8003bda:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bdc:	7afb      	ldrb	r3, [r7, #11]
 8003bde:	f003 020f 	and.w	r2, r3, #15
 8003be2:	4613      	mov	r3, r2
 8003be4:	00db      	lsls	r3, r3, #3
 8003be6:	1a9b      	subs	r3, r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	3304      	adds	r3, #4
 8003bf4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	683a      	ldr	r2, [r7, #0]
 8003c00:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	2200      	movs	r2, #0
 8003c06:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c0e:	7afb      	ldrb	r3, [r7, #11]
 8003c10:	f003 030f 	and.w	r3, r3, #15
 8003c14:	b2da      	uxtb	r2, r3
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d102      	bne.n	8003c28 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c28:	7afb      	ldrb	r3, [r7, #11]
 8003c2a:	f003 030f 	and.w	r3, r3, #15
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d109      	bne.n	8003c46 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6818      	ldr	r0, [r3, #0]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	6979      	ldr	r1, [r7, #20]
 8003c40:	f005 fab6 	bl	80091b0 <USB_EP0StartXfer>
 8003c44:	e008      	b.n	8003c58 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6818      	ldr	r0, [r3, #0]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	461a      	mov	r2, r3
 8003c52:	6979      	ldr	r1, [r7, #20]
 8003c54:	f005 f868 	bl	8008d28 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3718      	adds	r7, #24
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c62:	b480      	push	{r7}
 8003c64:	b083      	sub	sp, #12
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003c6e:	78fb      	ldrb	r3, [r7, #3]
 8003c70:	f003 020f 	and.w	r2, r3, #15
 8003c74:	6879      	ldr	r1, [r7, #4]
 8003c76:	4613      	mov	r3, r2
 8003c78:	00db      	lsls	r3, r3, #3
 8003c7a:	1a9b      	subs	r3, r3, r2
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	440b      	add	r3, r1
 8003c80:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003c84:	681b      	ldr	r3, [r3, #0]
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c92:	b580      	push	{r7, lr}
 8003c94:	b086      	sub	sp, #24
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	60f8      	str	r0, [r7, #12]
 8003c9a:	607a      	str	r2, [r7, #4]
 8003c9c:	603b      	str	r3, [r7, #0]
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ca2:	7afb      	ldrb	r3, [r7, #11]
 8003ca4:	f003 020f 	and.w	r2, r3, #15
 8003ca8:	4613      	mov	r3, r2
 8003caa:	00db      	lsls	r3, r3, #3
 8003cac:	1a9b      	subs	r3, r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	3338      	adds	r3, #56	; 0x38
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	3304      	adds	r3, #4
 8003cb8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	683a      	ldr	r2, [r7, #0]
 8003cc4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cd2:	7afb      	ldrb	r3, [r7, #11]
 8003cd4:	f003 030f 	and.w	r3, r3, #15
 8003cd8:	b2da      	uxtb	r2, r3
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d102      	bne.n	8003cec <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003cec:	7afb      	ldrb	r3, [r7, #11]
 8003cee:	f003 030f 	and.w	r3, r3, #15
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d109      	bne.n	8003d0a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6818      	ldr	r0, [r3, #0]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	461a      	mov	r2, r3
 8003d02:	6979      	ldr	r1, [r7, #20]
 8003d04:	f005 fa54 	bl	80091b0 <USB_EP0StartXfer>
 8003d08:	e008      	b.n	8003d1c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6818      	ldr	r0, [r3, #0]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	461a      	mov	r2, r3
 8003d16:	6979      	ldr	r1, [r7, #20]
 8003d18:	f005 f806 	bl	8008d28 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3718      	adds	r7, #24
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b084      	sub	sp, #16
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
 8003d2e:	460b      	mov	r3, r1
 8003d30:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003d32:	78fb      	ldrb	r3, [r7, #3]
 8003d34:	f003 020f 	and.w	r2, r3, #15
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d901      	bls.n	8003d44 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e050      	b.n	8003de6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	da0f      	bge.n	8003d6c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d4c:	78fb      	ldrb	r3, [r7, #3]
 8003d4e:	f003 020f 	and.w	r2, r3, #15
 8003d52:	4613      	mov	r3, r2
 8003d54:	00db      	lsls	r3, r3, #3
 8003d56:	1a9b      	subs	r3, r3, r2
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	3338      	adds	r3, #56	; 0x38
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	4413      	add	r3, r2
 8003d60:	3304      	adds	r3, #4
 8003d62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2201      	movs	r2, #1
 8003d68:	705a      	strb	r2, [r3, #1]
 8003d6a:	e00d      	b.n	8003d88 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003d6c:	78fa      	ldrb	r2, [r7, #3]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	00db      	lsls	r3, r3, #3
 8003d72:	1a9b      	subs	r3, r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	3304      	adds	r3, #4
 8003d80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d8e:	78fb      	ldrb	r3, [r7, #3]
 8003d90:	f003 030f 	and.w	r3, r3, #15
 8003d94:	b2da      	uxtb	r2, r3
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d101      	bne.n	8003da8 <HAL_PCD_EP_SetStall+0x82>
 8003da4:	2302      	movs	r3, #2
 8003da6:	e01e      	b.n	8003de6 <HAL_PCD_EP_SetStall+0xc0>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68f9      	ldr	r1, [r7, #12]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f005 fbab 	bl	8009512 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003dbc:	78fb      	ldrb	r3, [r7, #3]
 8003dbe:	f003 030f 	and.w	r3, r3, #15
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10a      	bne.n	8003ddc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6818      	ldr	r0, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	b2d9      	uxtb	r1, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	f005 fd9c 	bl	8009914 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3710      	adds	r7, #16
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b084      	sub	sp, #16
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
 8003df6:	460b      	mov	r3, r1
 8003df8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003dfa:	78fb      	ldrb	r3, [r7, #3]
 8003dfc:	f003 020f 	and.w	r2, r3, #15
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d901      	bls.n	8003e0c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e042      	b.n	8003e92 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	da0f      	bge.n	8003e34 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e14:	78fb      	ldrb	r3, [r7, #3]
 8003e16:	f003 020f 	and.w	r2, r3, #15
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	00db      	lsls	r3, r3, #3
 8003e1e:	1a9b      	subs	r3, r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	3338      	adds	r3, #56	; 0x38
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	4413      	add	r3, r2
 8003e28:	3304      	adds	r3, #4
 8003e2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	705a      	strb	r2, [r3, #1]
 8003e32:	e00f      	b.n	8003e54 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e34:	78fb      	ldrb	r3, [r7, #3]
 8003e36:	f003 020f 	and.w	r2, r3, #15
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	00db      	lsls	r3, r3, #3
 8003e3e:	1a9b      	subs	r3, r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	4413      	add	r3, r2
 8003e4a:	3304      	adds	r3, #4
 8003e4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e5a:	78fb      	ldrb	r3, [r7, #3]
 8003e5c:	f003 030f 	and.w	r3, r3, #15
 8003e60:	b2da      	uxtb	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d101      	bne.n	8003e74 <HAL_PCD_EP_ClrStall+0x86>
 8003e70:	2302      	movs	r3, #2
 8003e72:	e00e      	b.n	8003e92 <HAL_PCD_EP_ClrStall+0xa4>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68f9      	ldr	r1, [r7, #12]
 8003e82:	4618      	mov	r0, r3
 8003e84:	f005 fbb3 	bl	80095ee <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3710      	adds	r7, #16
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b08a      	sub	sp, #40	; 0x28
 8003e9e:	af02      	add	r7, sp, #8
 8003ea0:	6078      	str	r0, [r7, #4]
 8003ea2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003eae:	683a      	ldr	r2, [r7, #0]
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	00db      	lsls	r3, r3, #3
 8003eb4:	1a9b      	subs	r3, r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	3338      	adds	r3, #56	; 0x38
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	3304      	adds	r3, #4
 8003ec0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	699a      	ldr	r2, [r3, #24]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d901      	bls.n	8003ed2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e06c      	b.n	8003fac <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	695a      	ldr	r2, [r3, #20]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	69fa      	ldr	r2, [r7, #28]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d902      	bls.n	8003eee <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	3303      	adds	r3, #3
 8003ef2:	089b      	lsrs	r3, r3, #2
 8003ef4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ef6:	e02b      	b.n	8003f50 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	695a      	ldr	r2, [r3, #20]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	69fa      	ldr	r2, [r7, #28]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d902      	bls.n	8003f14 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	3303      	adds	r3, #3
 8003f18:	089b      	lsrs	r3, r3, #2
 8003f1a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	68d9      	ldr	r1, [r3, #12]
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	b2da      	uxtb	r2, r3
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	9300      	str	r3, [sp, #0]
 8003f30:	4603      	mov	r3, r0
 8003f32:	6978      	ldr	r0, [r7, #20]
 8003f34:	f005 fa8f 	bl	8009456 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	68da      	ldr	r2, [r3, #12]
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	441a      	add	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	699a      	ldr	r2, [r3, #24]
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	441a      	add	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	015a      	lsls	r2, r3, #5
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	4413      	add	r3, r2
 8003f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d809      	bhi.n	8003f7a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	699a      	ldr	r2, [r3, #24]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d203      	bcs.n	8003f7a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1be      	bne.n	8003ef8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	695a      	ldr	r2, [r3, #20]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d811      	bhi.n	8003faa <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	f003 030f 	and.w	r3, r3, #15
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f92:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	43db      	mvns	r3, r3
 8003fa0:	6939      	ldr	r1, [r7, #16]
 8003fa2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3720      	adds	r7, #32
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	333c      	adds	r3, #60	; 0x3c
 8003fcc:	3304      	adds	r3, #4
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	015a      	lsls	r2, r3, #5
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	4413      	add	r3, r2
 8003fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	f040 80b3 	bne.w	8004152 <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	f003 0308 	and.w	r3, r3, #8
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d028      	beq.n	8004048 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	4a70      	ldr	r2, [pc, #448]	; (80041bc <PCD_EP_OutXfrComplete_int+0x208>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d90e      	bls.n	800401c <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004004:	2b00      	cmp	r3, #0
 8004006:	d009      	beq.n	800401c <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	015a      	lsls	r2, r3, #5
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	4413      	add	r3, r2
 8004010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004014:	461a      	mov	r2, r3
 8004016:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800401a:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f007 fd81 	bl	800bb24 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6818      	ldr	r0, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800402c:	461a      	mov	r2, r3
 800402e:	2101      	movs	r1, #1
 8004030:	f005 fc70 	bl	8009914 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	015a      	lsls	r2, r3, #5
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	4413      	add	r3, r2
 800403c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004040:	461a      	mov	r2, r3
 8004042:	2308      	movs	r3, #8
 8004044:	6093      	str	r3, [r2, #8]
 8004046:	e0b3      	b.n	80041b0 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	f003 0320 	and.w	r3, r3, #32
 800404e:	2b00      	cmp	r3, #0
 8004050:	d009      	beq.n	8004066 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	015a      	lsls	r2, r3, #5
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	4413      	add	r3, r2
 800405a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800405e:	461a      	mov	r2, r3
 8004060:	2320      	movs	r3, #32
 8004062:	6093      	str	r3, [r2, #8]
 8004064:	e0a4      	b.n	80041b0 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800406c:	2b00      	cmp	r3, #0
 800406e:	f040 809f 	bne.w	80041b0 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	4a51      	ldr	r2, [pc, #324]	; (80041bc <PCD_EP_OutXfrComplete_int+0x208>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d90f      	bls.n	800409a <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00a      	beq.n	800409a <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	015a      	lsls	r2, r3, #5
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	4413      	add	r3, r2
 800408c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004090:	461a      	mov	r2, r3
 8004092:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004096:	6093      	str	r3, [r2, #8]
 8004098:	e08a      	b.n	80041b0 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800409a:	6879      	ldr	r1, [r7, #4]
 800409c:	683a      	ldr	r2, [r7, #0]
 800409e:	4613      	mov	r3, r2
 80040a0:	00db      	lsls	r3, r3, #3
 80040a2:	1a9b      	subs	r3, r3, r2
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	440b      	add	r3, r1
 80040a8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80040ac:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	0159      	lsls	r1, r3, #5
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	440b      	add	r3, r1
 80040b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80040c0:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	683a      	ldr	r2, [r7, #0]
 80040c6:	4613      	mov	r3, r2
 80040c8:	00db      	lsls	r3, r3, #3
 80040ca:	1a9b      	subs	r3, r3, r2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	4403      	add	r3, r0
 80040d0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80040d4:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80040d6:	6879      	ldr	r1, [r7, #4]
 80040d8:	683a      	ldr	r2, [r7, #0]
 80040da:	4613      	mov	r3, r2
 80040dc:	00db      	lsls	r3, r3, #3
 80040de:	1a9b      	subs	r3, r3, r2
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	440b      	add	r3, r1
 80040e4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80040e8:	6819      	ldr	r1, [r3, #0]
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	683a      	ldr	r2, [r7, #0]
 80040ee:	4613      	mov	r3, r2
 80040f0:	00db      	lsls	r3, r3, #3
 80040f2:	1a9b      	subs	r3, r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	4403      	add	r3, r0
 80040f8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4419      	add	r1, r3
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	683a      	ldr	r2, [r7, #0]
 8004104:	4613      	mov	r3, r2
 8004106:	00db      	lsls	r3, r3, #3
 8004108:	1a9b      	subs	r3, r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	4403      	add	r3, r0
 800410e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004112:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	b2db      	uxtb	r3, r3
 8004118:	4619      	mov	r1, r3
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f007 fd14 	bl	800bb48 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d144      	bne.n	80041b0 <PCD_EP_OutXfrComplete_int+0x1fc>
 8004126:	6879      	ldr	r1, [r7, #4]
 8004128:	683a      	ldr	r2, [r7, #0]
 800412a:	4613      	mov	r3, r2
 800412c:	00db      	lsls	r3, r3, #3
 800412e:	1a9b      	subs	r3, r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	440b      	add	r3, r1
 8004134:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d138      	bne.n	80041b0 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6818      	ldr	r0, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004148:	461a      	mov	r2, r3
 800414a:	2101      	movs	r1, #1
 800414c:	f005 fbe2 	bl	8009914 <USB_EP0_OutStart>
 8004150:	e02e      	b.n	80041b0 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	4a1a      	ldr	r2, [pc, #104]	; (80041c0 <PCD_EP_OutXfrComplete_int+0x20c>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d124      	bne.n	80041a4 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00a      	beq.n	800417a <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	015a      	lsls	r2, r3, #5
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	4413      	add	r3, r2
 800416c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004170:	461a      	mov	r2, r3
 8004172:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004176:	6093      	str	r3, [r2, #8]
 8004178:	e01a      	b.n	80041b0 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	f003 0320 	and.w	r3, r3, #32
 8004180:	2b00      	cmp	r3, #0
 8004182:	d008      	beq.n	8004196 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	015a      	lsls	r2, r3, #5
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	4413      	add	r3, r2
 800418c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004190:	461a      	mov	r2, r3
 8004192:	2320      	movs	r3, #32
 8004194:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	b2db      	uxtb	r3, r3
 800419a:	4619      	mov	r1, r3
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f007 fcd3 	bl	800bb48 <HAL_PCD_DataOutStageCallback>
 80041a2:	e005      	b.n	80041b0 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	4619      	mov	r1, r3
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f007 fccc 	bl	800bb48 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3718      	adds	r7, #24
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	4f54300a 	.word	0x4f54300a
 80041c0:	4f54310a 	.word	0x4f54310a

080041c4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	333c      	adds	r3, #60	; 0x3c
 80041dc:	3304      	adds	r3, #4
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	015a      	lsls	r2, r3, #5
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	4413      	add	r3, r2
 80041ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d113      	bne.n	8004222 <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	4a1f      	ldr	r2, [pc, #124]	; (800427c <PCD_EP_OutSetupPacket_int+0xb8>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d922      	bls.n	8004248 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004208:	2b00      	cmp	r3, #0
 800420a:	d01d      	beq.n	8004248 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	015a      	lsls	r2, r3, #5
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	4413      	add	r3, r2
 8004214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004218:	461a      	mov	r2, r3
 800421a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800421e:	6093      	str	r3, [r2, #8]
 8004220:	e012      	b.n	8004248 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	4a16      	ldr	r2, [pc, #88]	; (8004280 <PCD_EP_OutSetupPacket_int+0xbc>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d10e      	bne.n	8004248 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8004230:	2b00      	cmp	r3, #0
 8004232:	d009      	beq.n	8004248 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	015a      	lsls	r2, r3, #5
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	4413      	add	r3, r2
 800423c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004240:	461a      	mov	r2, r3
 8004242:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004246:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f007 fc6b 	bl	800bb24 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	4a0a      	ldr	r2, [pc, #40]	; (800427c <PCD_EP_OutSetupPacket_int+0xb8>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d90c      	bls.n	8004270 <PCD_EP_OutSetupPacket_int+0xac>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	2b01      	cmp	r3, #1
 800425c:	d108      	bne.n	8004270 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6818      	ldr	r0, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004268:	461a      	mov	r2, r3
 800426a:	2101      	movs	r1, #1
 800426c:	f005 fb52 	bl	8009914 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3718      	adds	r7, #24
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	4f54300a 	.word	0x4f54300a
 8004280:	4f54310a 	.word	0x4f54310a

08004284 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	460b      	mov	r3, r1
 800428e:	70fb      	strb	r3, [r7, #3]
 8004290:	4613      	mov	r3, r2
 8004292:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800429c:	78fb      	ldrb	r3, [r7, #3]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d107      	bne.n	80042b2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80042a2:	883b      	ldrh	r3, [r7, #0]
 80042a4:	0419      	lsls	r1, r3, #16
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68ba      	ldr	r2, [r7, #8]
 80042ac:	430a      	orrs	r2, r1
 80042ae:	629a      	str	r2, [r3, #40]	; 0x28
 80042b0:	e028      	b.n	8004304 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b8:	0c1b      	lsrs	r3, r3, #16
 80042ba:	68ba      	ldr	r2, [r7, #8]
 80042bc:	4413      	add	r3, r2
 80042be:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80042c0:	2300      	movs	r3, #0
 80042c2:	73fb      	strb	r3, [r7, #15]
 80042c4:	e00d      	b.n	80042e2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	7bfb      	ldrb	r3, [r7, #15]
 80042cc:	3340      	adds	r3, #64	; 0x40
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	4413      	add	r3, r2
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	0c1b      	lsrs	r3, r3, #16
 80042d6:	68ba      	ldr	r2, [r7, #8]
 80042d8:	4413      	add	r3, r2
 80042da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80042dc:	7bfb      	ldrb	r3, [r7, #15]
 80042de:	3301      	adds	r3, #1
 80042e0:	73fb      	strb	r3, [r7, #15]
 80042e2:	7bfa      	ldrb	r2, [r7, #15]
 80042e4:	78fb      	ldrb	r3, [r7, #3]
 80042e6:	3b01      	subs	r3, #1
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d3ec      	bcc.n	80042c6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80042ec:	883b      	ldrh	r3, [r7, #0]
 80042ee:	0418      	lsls	r0, r3, #16
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6819      	ldr	r1, [r3, #0]
 80042f4:	78fb      	ldrb	r3, [r7, #3]
 80042f6:	3b01      	subs	r3, #1
 80042f8:	68ba      	ldr	r2, [r7, #8]
 80042fa:	4302      	orrs	r2, r0
 80042fc:	3340      	adds	r3, #64	; 0x40
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	440b      	add	r3, r1
 8004302:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3714      	adds	r7, #20
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr

08004312 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004312:	b480      	push	{r7}
 8004314:	b083      	sub	sp, #12
 8004316:	af00      	add	r7, sp, #0
 8004318:	6078      	str	r0, [r7, #4]
 800431a:	460b      	mov	r3, r1
 800431c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	887a      	ldrh	r2, [r7, #2]
 8004324:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	460b      	mov	r3, r1
 800433e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004340:	bf00      	nop
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b086      	sub	sp, #24
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e25b      	b.n	8004816 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	2b00      	cmp	r3, #0
 8004368:	d075      	beq.n	8004456 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800436a:	4ba3      	ldr	r3, [pc, #652]	; (80045f8 <HAL_RCC_OscConfig+0x2ac>)
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f003 030c 	and.w	r3, r3, #12
 8004372:	2b04      	cmp	r3, #4
 8004374:	d00c      	beq.n	8004390 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004376:	4ba0      	ldr	r3, [pc, #640]	; (80045f8 <HAL_RCC_OscConfig+0x2ac>)
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800437e:	2b08      	cmp	r3, #8
 8004380:	d112      	bne.n	80043a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004382:	4b9d      	ldr	r3, [pc, #628]	; (80045f8 <HAL_RCC_OscConfig+0x2ac>)
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800438a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800438e:	d10b      	bne.n	80043a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004390:	4b99      	ldr	r3, [pc, #612]	; (80045f8 <HAL_RCC_OscConfig+0x2ac>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d05b      	beq.n	8004454 <HAL_RCC_OscConfig+0x108>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d157      	bne.n	8004454 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e236      	b.n	8004816 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043b0:	d106      	bne.n	80043c0 <HAL_RCC_OscConfig+0x74>
 80043b2:	4b91      	ldr	r3, [pc, #580]	; (80045f8 <HAL_RCC_OscConfig+0x2ac>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a90      	ldr	r2, [pc, #576]	; (80045f8 <HAL_RCC_OscConfig+0x2ac>)
 80043b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043bc:	6013      	str	r3, [r2, #0]
 80043be:	e01d      	b.n	80043fc <HAL_RCC_OscConfig+0xb0>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043c8:	d10c      	bne.n	80043e4 <HAL_RCC_OscConfig+0x98>
 80043ca:	4b8b      	ldr	r3, [pc, #556]	; (80045f8 <HAL_RCC_OscConfig+0x2ac>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a8a      	ldr	r2, [pc, #552]	; (80045f8 <HAL_RCC_OscConfig+0x2ac>)
 80043d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043d4:	6013      	str	r3, [r2, #0]
 80043d6:	4b88      	ldr	r3, [pc, #544]	; (80045f8 <HAL_RCC_OscConfig+0x2ac>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a87      	ldr	r2, [pc, #540]	; (80045f8 <HAL_RCC_OscConfig+0x2ac>)
 80043dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043e0:	6013      	str	r3, [r2, #0]
 80043e2:	e00b      	b.n	80043fc <HAL_RCC_OscConfig+0xb0>
 80043e4:	4b84      	ldr	r3, [pc, #528]	; (80045f8 <HAL_RCC_OscConfig+0x2ac>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a83      	ldr	r2, [pc, #524]	; (80045f8 <HAL_RCC_OscConfig+0x2ac>)
 80043ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043ee:	6013      	str	r3, [r2, #0]
 80043f0:	4b81      	ldr	r3, [pc, #516]	; (80045f8 <HAL_RCC_OscConfig+0x2ac>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a80      	ldr	r2, [pc, #512]	; (80045f8 <HAL_RCC_OscConfig+0x2ac>)
 80043f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d013      	beq.n	800442c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004404:	f7fd fe20 	bl	8002048 <HAL_GetTick>
 8004408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800440a:	e008      	b.n	800441e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800440c:	f7fd fe1c 	bl	8002048 <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	2b64      	cmp	r3, #100	; 0x64
 8004418:	d901      	bls.n	800441e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e1fb      	b.n	8004816 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800441e:	4b76      	ldr	r3, [pc, #472]	; (80045f8 <HAL_RCC_OscConfig+0x2ac>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d0f0      	beq.n	800440c <HAL_RCC_OscConfig+0xc0>
 800442a:	e014      	b.n	8004456 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800442c:	f7fd fe0c 	bl	8002048 <HAL_GetTick>
 8004430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004432:	e008      	b.n	8004446 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004434:	f7fd fe08 	bl	8002048 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	2b64      	cmp	r3, #100	; 0x64
 8004440:	d901      	bls.n	8004446 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e1e7      	b.n	8004816 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004446:	4b6c      	ldr	r3, [pc, #432]	; (80045f8 <HAL_RCC_OscConfig+0x2ac>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1f0      	bne.n	8004434 <HAL_RCC_OscConfig+0xe8>
 8004452:	e000      	b.n	8004456 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004454:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0302 	and.w	r3, r3, #2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d063      	beq.n	800452a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004462:	4b65      	ldr	r3, [pc, #404]	; (80045f8 <HAL_RCC_OscConfig+0x2ac>)
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f003 030c 	and.w	r3, r3, #12
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00b      	beq.n	8004486 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800446e:	4b62      	ldr	r3, [pc, #392]	; (80045f8 <HAL_RCC_OscConfig+0x2ac>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004476:	2b08      	cmp	r3, #8
 8004478:	d11c      	bne.n	80044b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800447a:	4b5f      	ldr	r3, [pc, #380]	; (80045f8 <HAL_RCC_OscConfig+0x2ac>)
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d116      	bne.n	80044b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004486:	4b5c      	ldr	r3, [pc, #368]	; (80045f8 <HAL_RCC_OscConfig+0x2ac>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d005      	beq.n	800449e <HAL_RCC_OscConfig+0x152>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d001      	beq.n	800449e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e1bb      	b.n	8004816 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800449e:	4b56      	ldr	r3, [pc, #344]	; (80045f8 <HAL_RCC_OscConfig+0x2ac>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	00db      	lsls	r3, r3, #3
 80044ac:	4952      	ldr	r1, [pc, #328]	; (80045f8 <HAL_RCC_OscConfig+0x2ac>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044b2:	e03a      	b.n	800452a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d020      	beq.n	80044fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044bc:	4b4f      	ldr	r3, [pc, #316]	; (80045fc <HAL_RCC_OscConfig+0x2b0>)
 80044be:	2201      	movs	r2, #1
 80044c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c2:	f7fd fdc1 	bl	8002048 <HAL_GetTick>
 80044c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044c8:	e008      	b.n	80044dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044ca:	f7fd fdbd 	bl	8002048 <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d901      	bls.n	80044dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e19c      	b.n	8004816 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044dc:	4b46      	ldr	r3, [pc, #280]	; (80045f8 <HAL_RCC_OscConfig+0x2ac>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d0f0      	beq.n	80044ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044e8:	4b43      	ldr	r3, [pc, #268]	; (80045f8 <HAL_RCC_OscConfig+0x2ac>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	00db      	lsls	r3, r3, #3
 80044f6:	4940      	ldr	r1, [pc, #256]	; (80045f8 <HAL_RCC_OscConfig+0x2ac>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	600b      	str	r3, [r1, #0]
 80044fc:	e015      	b.n	800452a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044fe:	4b3f      	ldr	r3, [pc, #252]	; (80045fc <HAL_RCC_OscConfig+0x2b0>)
 8004500:	2200      	movs	r2, #0
 8004502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004504:	f7fd fda0 	bl	8002048 <HAL_GetTick>
 8004508:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800450a:	e008      	b.n	800451e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800450c:	f7fd fd9c 	bl	8002048 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b02      	cmp	r3, #2
 8004518:	d901      	bls.n	800451e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e17b      	b.n	8004816 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800451e:	4b36      	ldr	r3, [pc, #216]	; (80045f8 <HAL_RCC_OscConfig+0x2ac>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1f0      	bne.n	800450c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0308 	and.w	r3, r3, #8
 8004532:	2b00      	cmp	r3, #0
 8004534:	d030      	beq.n	8004598 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d016      	beq.n	800456c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800453e:	4b30      	ldr	r3, [pc, #192]	; (8004600 <HAL_RCC_OscConfig+0x2b4>)
 8004540:	2201      	movs	r2, #1
 8004542:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004544:	f7fd fd80 	bl	8002048 <HAL_GetTick>
 8004548:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800454a:	e008      	b.n	800455e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800454c:	f7fd fd7c 	bl	8002048 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	2b02      	cmp	r3, #2
 8004558:	d901      	bls.n	800455e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e15b      	b.n	8004816 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800455e:	4b26      	ldr	r3, [pc, #152]	; (80045f8 <HAL_RCC_OscConfig+0x2ac>)
 8004560:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004562:	f003 0302 	and.w	r3, r3, #2
 8004566:	2b00      	cmp	r3, #0
 8004568:	d0f0      	beq.n	800454c <HAL_RCC_OscConfig+0x200>
 800456a:	e015      	b.n	8004598 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800456c:	4b24      	ldr	r3, [pc, #144]	; (8004600 <HAL_RCC_OscConfig+0x2b4>)
 800456e:	2200      	movs	r2, #0
 8004570:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004572:	f7fd fd69 	bl	8002048 <HAL_GetTick>
 8004576:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004578:	e008      	b.n	800458c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800457a:	f7fd fd65 	bl	8002048 <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	2b02      	cmp	r3, #2
 8004586:	d901      	bls.n	800458c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e144      	b.n	8004816 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800458c:	4b1a      	ldr	r3, [pc, #104]	; (80045f8 <HAL_RCC_OscConfig+0x2ac>)
 800458e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004590:	f003 0302 	and.w	r3, r3, #2
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1f0      	bne.n	800457a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0304 	and.w	r3, r3, #4
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	f000 80a0 	beq.w	80046e6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045a6:	2300      	movs	r3, #0
 80045a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045aa:	4b13      	ldr	r3, [pc, #76]	; (80045f8 <HAL_RCC_OscConfig+0x2ac>)
 80045ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d10f      	bne.n	80045d6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045b6:	2300      	movs	r3, #0
 80045b8:	60bb      	str	r3, [r7, #8]
 80045ba:	4b0f      	ldr	r3, [pc, #60]	; (80045f8 <HAL_RCC_OscConfig+0x2ac>)
 80045bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045be:	4a0e      	ldr	r2, [pc, #56]	; (80045f8 <HAL_RCC_OscConfig+0x2ac>)
 80045c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045c4:	6413      	str	r3, [r2, #64]	; 0x40
 80045c6:	4b0c      	ldr	r3, [pc, #48]	; (80045f8 <HAL_RCC_OscConfig+0x2ac>)
 80045c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ce:	60bb      	str	r3, [r7, #8]
 80045d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045d2:	2301      	movs	r3, #1
 80045d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045d6:	4b0b      	ldr	r3, [pc, #44]	; (8004604 <HAL_RCC_OscConfig+0x2b8>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d121      	bne.n	8004626 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045e2:	4b08      	ldr	r3, [pc, #32]	; (8004604 <HAL_RCC_OscConfig+0x2b8>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a07      	ldr	r2, [pc, #28]	; (8004604 <HAL_RCC_OscConfig+0x2b8>)
 80045e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045ee:	f7fd fd2b 	bl	8002048 <HAL_GetTick>
 80045f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045f4:	e011      	b.n	800461a <HAL_RCC_OscConfig+0x2ce>
 80045f6:	bf00      	nop
 80045f8:	40023800 	.word	0x40023800
 80045fc:	42470000 	.word	0x42470000
 8004600:	42470e80 	.word	0x42470e80
 8004604:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004608:	f7fd fd1e 	bl	8002048 <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	2b02      	cmp	r3, #2
 8004614:	d901      	bls.n	800461a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e0fd      	b.n	8004816 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800461a:	4b81      	ldr	r3, [pc, #516]	; (8004820 <HAL_RCC_OscConfig+0x4d4>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004622:	2b00      	cmp	r3, #0
 8004624:	d0f0      	beq.n	8004608 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d106      	bne.n	800463c <HAL_RCC_OscConfig+0x2f0>
 800462e:	4b7d      	ldr	r3, [pc, #500]	; (8004824 <HAL_RCC_OscConfig+0x4d8>)
 8004630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004632:	4a7c      	ldr	r2, [pc, #496]	; (8004824 <HAL_RCC_OscConfig+0x4d8>)
 8004634:	f043 0301 	orr.w	r3, r3, #1
 8004638:	6713      	str	r3, [r2, #112]	; 0x70
 800463a:	e01c      	b.n	8004676 <HAL_RCC_OscConfig+0x32a>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	2b05      	cmp	r3, #5
 8004642:	d10c      	bne.n	800465e <HAL_RCC_OscConfig+0x312>
 8004644:	4b77      	ldr	r3, [pc, #476]	; (8004824 <HAL_RCC_OscConfig+0x4d8>)
 8004646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004648:	4a76      	ldr	r2, [pc, #472]	; (8004824 <HAL_RCC_OscConfig+0x4d8>)
 800464a:	f043 0304 	orr.w	r3, r3, #4
 800464e:	6713      	str	r3, [r2, #112]	; 0x70
 8004650:	4b74      	ldr	r3, [pc, #464]	; (8004824 <HAL_RCC_OscConfig+0x4d8>)
 8004652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004654:	4a73      	ldr	r2, [pc, #460]	; (8004824 <HAL_RCC_OscConfig+0x4d8>)
 8004656:	f043 0301 	orr.w	r3, r3, #1
 800465a:	6713      	str	r3, [r2, #112]	; 0x70
 800465c:	e00b      	b.n	8004676 <HAL_RCC_OscConfig+0x32a>
 800465e:	4b71      	ldr	r3, [pc, #452]	; (8004824 <HAL_RCC_OscConfig+0x4d8>)
 8004660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004662:	4a70      	ldr	r2, [pc, #448]	; (8004824 <HAL_RCC_OscConfig+0x4d8>)
 8004664:	f023 0301 	bic.w	r3, r3, #1
 8004668:	6713      	str	r3, [r2, #112]	; 0x70
 800466a:	4b6e      	ldr	r3, [pc, #440]	; (8004824 <HAL_RCC_OscConfig+0x4d8>)
 800466c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800466e:	4a6d      	ldr	r2, [pc, #436]	; (8004824 <HAL_RCC_OscConfig+0x4d8>)
 8004670:	f023 0304 	bic.w	r3, r3, #4
 8004674:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d015      	beq.n	80046aa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800467e:	f7fd fce3 	bl	8002048 <HAL_GetTick>
 8004682:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004684:	e00a      	b.n	800469c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004686:	f7fd fcdf 	bl	8002048 <HAL_GetTick>
 800468a:	4602      	mov	r2, r0
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	f241 3288 	movw	r2, #5000	; 0x1388
 8004694:	4293      	cmp	r3, r2
 8004696:	d901      	bls.n	800469c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e0bc      	b.n	8004816 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800469c:	4b61      	ldr	r3, [pc, #388]	; (8004824 <HAL_RCC_OscConfig+0x4d8>)
 800469e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a0:	f003 0302 	and.w	r3, r3, #2
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d0ee      	beq.n	8004686 <HAL_RCC_OscConfig+0x33a>
 80046a8:	e014      	b.n	80046d4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046aa:	f7fd fccd 	bl	8002048 <HAL_GetTick>
 80046ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046b0:	e00a      	b.n	80046c8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046b2:	f7fd fcc9 	bl	8002048 <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d901      	bls.n	80046c8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	e0a6      	b.n	8004816 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046c8:	4b56      	ldr	r3, [pc, #344]	; (8004824 <HAL_RCC_OscConfig+0x4d8>)
 80046ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046cc:	f003 0302 	and.w	r3, r3, #2
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d1ee      	bne.n	80046b2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046d4:	7dfb      	ldrb	r3, [r7, #23]
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d105      	bne.n	80046e6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046da:	4b52      	ldr	r3, [pc, #328]	; (8004824 <HAL_RCC_OscConfig+0x4d8>)
 80046dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046de:	4a51      	ldr	r2, [pc, #324]	; (8004824 <HAL_RCC_OscConfig+0x4d8>)
 80046e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f000 8092 	beq.w	8004814 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046f0:	4b4c      	ldr	r3, [pc, #304]	; (8004824 <HAL_RCC_OscConfig+0x4d8>)
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	f003 030c 	and.w	r3, r3, #12
 80046f8:	2b08      	cmp	r3, #8
 80046fa:	d05c      	beq.n	80047b6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	2b02      	cmp	r3, #2
 8004702:	d141      	bne.n	8004788 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004704:	4b48      	ldr	r3, [pc, #288]	; (8004828 <HAL_RCC_OscConfig+0x4dc>)
 8004706:	2200      	movs	r2, #0
 8004708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800470a:	f7fd fc9d 	bl	8002048 <HAL_GetTick>
 800470e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004710:	e008      	b.n	8004724 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004712:	f7fd fc99 	bl	8002048 <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	2b02      	cmp	r3, #2
 800471e:	d901      	bls.n	8004724 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e078      	b.n	8004816 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004724:	4b3f      	ldr	r3, [pc, #252]	; (8004824 <HAL_RCC_OscConfig+0x4d8>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d1f0      	bne.n	8004712 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	69da      	ldr	r2, [r3, #28]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a1b      	ldr	r3, [r3, #32]
 8004738:	431a      	orrs	r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473e:	019b      	lsls	r3, r3, #6
 8004740:	431a      	orrs	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004746:	085b      	lsrs	r3, r3, #1
 8004748:	3b01      	subs	r3, #1
 800474a:	041b      	lsls	r3, r3, #16
 800474c:	431a      	orrs	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004752:	061b      	lsls	r3, r3, #24
 8004754:	4933      	ldr	r1, [pc, #204]	; (8004824 <HAL_RCC_OscConfig+0x4d8>)
 8004756:	4313      	orrs	r3, r2
 8004758:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800475a:	4b33      	ldr	r3, [pc, #204]	; (8004828 <HAL_RCC_OscConfig+0x4dc>)
 800475c:	2201      	movs	r2, #1
 800475e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004760:	f7fd fc72 	bl	8002048 <HAL_GetTick>
 8004764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004766:	e008      	b.n	800477a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004768:	f7fd fc6e 	bl	8002048 <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	2b02      	cmp	r3, #2
 8004774:	d901      	bls.n	800477a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e04d      	b.n	8004816 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800477a:	4b2a      	ldr	r3, [pc, #168]	; (8004824 <HAL_RCC_OscConfig+0x4d8>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d0f0      	beq.n	8004768 <HAL_RCC_OscConfig+0x41c>
 8004786:	e045      	b.n	8004814 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004788:	4b27      	ldr	r3, [pc, #156]	; (8004828 <HAL_RCC_OscConfig+0x4dc>)
 800478a:	2200      	movs	r2, #0
 800478c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800478e:	f7fd fc5b 	bl	8002048 <HAL_GetTick>
 8004792:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004794:	e008      	b.n	80047a8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004796:	f7fd fc57 	bl	8002048 <HAL_GetTick>
 800479a:	4602      	mov	r2, r0
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d901      	bls.n	80047a8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	e036      	b.n	8004816 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047a8:	4b1e      	ldr	r3, [pc, #120]	; (8004824 <HAL_RCC_OscConfig+0x4d8>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d1f0      	bne.n	8004796 <HAL_RCC_OscConfig+0x44a>
 80047b4:	e02e      	b.n	8004814 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d101      	bne.n	80047c2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e029      	b.n	8004816 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80047c2:	4b18      	ldr	r3, [pc, #96]	; (8004824 <HAL_RCC_OscConfig+0x4d8>)
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	69db      	ldr	r3, [r3, #28]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d11c      	bne.n	8004810 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d115      	bne.n	8004810 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80047ea:	4013      	ands	r3, r2
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d10d      	bne.n	8004810 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80047fe:	429a      	cmp	r2, r3
 8004800:	d106      	bne.n	8004810 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800480c:	429a      	cmp	r2, r3
 800480e:	d001      	beq.n	8004814 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e000      	b.n	8004816 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3718      	adds	r7, #24
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	40007000 	.word	0x40007000
 8004824:	40023800 	.word	0x40023800
 8004828:	42470060 	.word	0x42470060

0800482c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d101      	bne.n	8004840 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e0cc      	b.n	80049da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004840:	4b68      	ldr	r3, [pc, #416]	; (80049e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 030f 	and.w	r3, r3, #15
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	429a      	cmp	r2, r3
 800484c:	d90c      	bls.n	8004868 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800484e:	4b65      	ldr	r3, [pc, #404]	; (80049e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004850:	683a      	ldr	r2, [r7, #0]
 8004852:	b2d2      	uxtb	r2, r2
 8004854:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004856:	4b63      	ldr	r3, [pc, #396]	; (80049e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 030f 	and.w	r3, r3, #15
 800485e:	683a      	ldr	r2, [r7, #0]
 8004860:	429a      	cmp	r2, r3
 8004862:	d001      	beq.n	8004868 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e0b8      	b.n	80049da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d020      	beq.n	80048b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0304 	and.w	r3, r3, #4
 800487c:	2b00      	cmp	r3, #0
 800487e:	d005      	beq.n	800488c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004880:	4b59      	ldr	r3, [pc, #356]	; (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	4a58      	ldr	r2, [pc, #352]	; (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004886:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800488a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0308 	and.w	r3, r3, #8
 8004894:	2b00      	cmp	r3, #0
 8004896:	d005      	beq.n	80048a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004898:	4b53      	ldr	r3, [pc, #332]	; (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	4a52      	ldr	r2, [pc, #328]	; (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 800489e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048a4:	4b50      	ldr	r3, [pc, #320]	; (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	494d      	ldr	r1, [pc, #308]	; (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0301 	and.w	r3, r3, #1
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d044      	beq.n	800494c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d107      	bne.n	80048da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ca:	4b47      	ldr	r3, [pc, #284]	; (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d119      	bne.n	800490a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e07f      	b.n	80049da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d003      	beq.n	80048ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048e6:	2b03      	cmp	r3, #3
 80048e8:	d107      	bne.n	80048fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048ea:	4b3f      	ldr	r3, [pc, #252]	; (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d109      	bne.n	800490a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e06f      	b.n	80049da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048fa:	4b3b      	ldr	r3, [pc, #236]	; (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d101      	bne.n	800490a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e067      	b.n	80049da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800490a:	4b37      	ldr	r3, [pc, #220]	; (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f023 0203 	bic.w	r2, r3, #3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	4934      	ldr	r1, [pc, #208]	; (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004918:	4313      	orrs	r3, r2
 800491a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800491c:	f7fd fb94 	bl	8002048 <HAL_GetTick>
 8004920:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004922:	e00a      	b.n	800493a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004924:	f7fd fb90 	bl	8002048 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004932:	4293      	cmp	r3, r2
 8004934:	d901      	bls.n	800493a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e04f      	b.n	80049da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800493a:	4b2b      	ldr	r3, [pc, #172]	; (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	f003 020c 	and.w	r2, r3, #12
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	429a      	cmp	r2, r3
 800494a:	d1eb      	bne.n	8004924 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800494c:	4b25      	ldr	r3, [pc, #148]	; (80049e4 <HAL_RCC_ClockConfig+0x1b8>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 030f 	and.w	r3, r3, #15
 8004954:	683a      	ldr	r2, [r7, #0]
 8004956:	429a      	cmp	r2, r3
 8004958:	d20c      	bcs.n	8004974 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800495a:	4b22      	ldr	r3, [pc, #136]	; (80049e4 <HAL_RCC_ClockConfig+0x1b8>)
 800495c:	683a      	ldr	r2, [r7, #0]
 800495e:	b2d2      	uxtb	r2, r2
 8004960:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004962:	4b20      	ldr	r3, [pc, #128]	; (80049e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 030f 	and.w	r3, r3, #15
 800496a:	683a      	ldr	r2, [r7, #0]
 800496c:	429a      	cmp	r2, r3
 800496e:	d001      	beq.n	8004974 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e032      	b.n	80049da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0304 	and.w	r3, r3, #4
 800497c:	2b00      	cmp	r3, #0
 800497e:	d008      	beq.n	8004992 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004980:	4b19      	ldr	r3, [pc, #100]	; (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	4916      	ldr	r1, [pc, #88]	; (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 800498e:	4313      	orrs	r3, r2
 8004990:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0308 	and.w	r3, r3, #8
 800499a:	2b00      	cmp	r3, #0
 800499c:	d009      	beq.n	80049b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800499e:	4b12      	ldr	r3, [pc, #72]	; (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	00db      	lsls	r3, r3, #3
 80049ac:	490e      	ldr	r1, [pc, #56]	; (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049b2:	f000 f821 	bl	80049f8 <HAL_RCC_GetSysClockFreq>
 80049b6:	4601      	mov	r1, r0
 80049b8:	4b0b      	ldr	r3, [pc, #44]	; (80049e8 <HAL_RCC_ClockConfig+0x1bc>)
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	091b      	lsrs	r3, r3, #4
 80049be:	f003 030f 	and.w	r3, r3, #15
 80049c2:	4a0a      	ldr	r2, [pc, #40]	; (80049ec <HAL_RCC_ClockConfig+0x1c0>)
 80049c4:	5cd3      	ldrb	r3, [r2, r3]
 80049c6:	fa21 f303 	lsr.w	r3, r1, r3
 80049ca:	4a09      	ldr	r2, [pc, #36]	; (80049f0 <HAL_RCC_ClockConfig+0x1c4>)
 80049cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80049ce:	4b09      	ldr	r3, [pc, #36]	; (80049f4 <HAL_RCC_ClockConfig+0x1c8>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7fd faf4 	bl	8001fc0 <HAL_InitTick>

  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	40023c00 	.word	0x40023c00
 80049e8:	40023800 	.word	0x40023800
 80049ec:	0800fbcc 	.word	0x0800fbcc
 80049f0:	20000004 	.word	0x20000004
 80049f4:	20000008 	.word	0x20000008

080049f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80049fe:	2300      	movs	r3, #0
 8004a00:	607b      	str	r3, [r7, #4]
 8004a02:	2300      	movs	r3, #0
 8004a04:	60fb      	str	r3, [r7, #12]
 8004a06:	2300      	movs	r3, #0
 8004a08:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a0e:	4b50      	ldr	r3, [pc, #320]	; (8004b50 <HAL_RCC_GetSysClockFreq+0x158>)
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f003 030c 	and.w	r3, r3, #12
 8004a16:	2b04      	cmp	r3, #4
 8004a18:	d007      	beq.n	8004a2a <HAL_RCC_GetSysClockFreq+0x32>
 8004a1a:	2b08      	cmp	r3, #8
 8004a1c:	d008      	beq.n	8004a30 <HAL_RCC_GetSysClockFreq+0x38>
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	f040 808d 	bne.w	8004b3e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a24:	4b4b      	ldr	r3, [pc, #300]	; (8004b54 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004a26:	60bb      	str	r3, [r7, #8]
       break;
 8004a28:	e08c      	b.n	8004b44 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a2a:	4b4b      	ldr	r3, [pc, #300]	; (8004b58 <HAL_RCC_GetSysClockFreq+0x160>)
 8004a2c:	60bb      	str	r3, [r7, #8]
      break;
 8004a2e:	e089      	b.n	8004b44 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a30:	4b47      	ldr	r3, [pc, #284]	; (8004b50 <HAL_RCC_GetSysClockFreq+0x158>)
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a38:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a3a:	4b45      	ldr	r3, [pc, #276]	; (8004b50 <HAL_RCC_GetSysClockFreq+0x158>)
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d023      	beq.n	8004a8e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a46:	4b42      	ldr	r3, [pc, #264]	; (8004b50 <HAL_RCC_GetSysClockFreq+0x158>)
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	099b      	lsrs	r3, r3, #6
 8004a4c:	f04f 0400 	mov.w	r4, #0
 8004a50:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004a54:	f04f 0200 	mov.w	r2, #0
 8004a58:	ea03 0501 	and.w	r5, r3, r1
 8004a5c:	ea04 0602 	and.w	r6, r4, r2
 8004a60:	4a3d      	ldr	r2, [pc, #244]	; (8004b58 <HAL_RCC_GetSysClockFreq+0x160>)
 8004a62:	fb02 f106 	mul.w	r1, r2, r6
 8004a66:	2200      	movs	r2, #0
 8004a68:	fb02 f205 	mul.w	r2, r2, r5
 8004a6c:	440a      	add	r2, r1
 8004a6e:	493a      	ldr	r1, [pc, #232]	; (8004b58 <HAL_RCC_GetSysClockFreq+0x160>)
 8004a70:	fba5 0101 	umull	r0, r1, r5, r1
 8004a74:	1853      	adds	r3, r2, r1
 8004a76:	4619      	mov	r1, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f04f 0400 	mov.w	r4, #0
 8004a7e:	461a      	mov	r2, r3
 8004a80:	4623      	mov	r3, r4
 8004a82:	f7fc f901 	bl	8000c88 <__aeabi_uldivmod>
 8004a86:	4603      	mov	r3, r0
 8004a88:	460c      	mov	r4, r1
 8004a8a:	60fb      	str	r3, [r7, #12]
 8004a8c:	e049      	b.n	8004b22 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a8e:	4b30      	ldr	r3, [pc, #192]	; (8004b50 <HAL_RCC_GetSysClockFreq+0x158>)
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	099b      	lsrs	r3, r3, #6
 8004a94:	f04f 0400 	mov.w	r4, #0
 8004a98:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004a9c:	f04f 0200 	mov.w	r2, #0
 8004aa0:	ea03 0501 	and.w	r5, r3, r1
 8004aa4:	ea04 0602 	and.w	r6, r4, r2
 8004aa8:	4629      	mov	r1, r5
 8004aaa:	4632      	mov	r2, r6
 8004aac:	f04f 0300 	mov.w	r3, #0
 8004ab0:	f04f 0400 	mov.w	r4, #0
 8004ab4:	0154      	lsls	r4, r2, #5
 8004ab6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004aba:	014b      	lsls	r3, r1, #5
 8004abc:	4619      	mov	r1, r3
 8004abe:	4622      	mov	r2, r4
 8004ac0:	1b49      	subs	r1, r1, r5
 8004ac2:	eb62 0206 	sbc.w	r2, r2, r6
 8004ac6:	f04f 0300 	mov.w	r3, #0
 8004aca:	f04f 0400 	mov.w	r4, #0
 8004ace:	0194      	lsls	r4, r2, #6
 8004ad0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004ad4:	018b      	lsls	r3, r1, #6
 8004ad6:	1a5b      	subs	r3, r3, r1
 8004ad8:	eb64 0402 	sbc.w	r4, r4, r2
 8004adc:	f04f 0100 	mov.w	r1, #0
 8004ae0:	f04f 0200 	mov.w	r2, #0
 8004ae4:	00e2      	lsls	r2, r4, #3
 8004ae6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004aea:	00d9      	lsls	r1, r3, #3
 8004aec:	460b      	mov	r3, r1
 8004aee:	4614      	mov	r4, r2
 8004af0:	195b      	adds	r3, r3, r5
 8004af2:	eb44 0406 	adc.w	r4, r4, r6
 8004af6:	f04f 0100 	mov.w	r1, #0
 8004afa:	f04f 0200 	mov.w	r2, #0
 8004afe:	02a2      	lsls	r2, r4, #10
 8004b00:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004b04:	0299      	lsls	r1, r3, #10
 8004b06:	460b      	mov	r3, r1
 8004b08:	4614      	mov	r4, r2
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	4621      	mov	r1, r4
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f04f 0400 	mov.w	r4, #0
 8004b14:	461a      	mov	r2, r3
 8004b16:	4623      	mov	r3, r4
 8004b18:	f7fc f8b6 	bl	8000c88 <__aeabi_uldivmod>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	460c      	mov	r4, r1
 8004b20:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b22:	4b0b      	ldr	r3, [pc, #44]	; (8004b50 <HAL_RCC_GetSysClockFreq+0x158>)
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	0c1b      	lsrs	r3, r3, #16
 8004b28:	f003 0303 	and.w	r3, r3, #3
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	005b      	lsls	r3, r3, #1
 8004b30:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b3a:	60bb      	str	r3, [r7, #8]
      break;
 8004b3c:	e002      	b.n	8004b44 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b3e:	4b05      	ldr	r3, [pc, #20]	; (8004b54 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004b40:	60bb      	str	r3, [r7, #8]
      break;
 8004b42:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b44:	68bb      	ldr	r3, [r7, #8]
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3714      	adds	r7, #20
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	40023800 	.word	0x40023800
 8004b54:	00f42400 	.word	0x00f42400
 8004b58:	00b71b00 	.word	0x00b71b00

08004b5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b60:	4b03      	ldr	r3, [pc, #12]	; (8004b70 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b62:	681b      	ldr	r3, [r3, #0]
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	20000004 	.word	0x20000004

08004b74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b78:	f7ff fff0 	bl	8004b5c <HAL_RCC_GetHCLKFreq>
 8004b7c:	4601      	mov	r1, r0
 8004b7e:	4b05      	ldr	r3, [pc, #20]	; (8004b94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	0a9b      	lsrs	r3, r3, #10
 8004b84:	f003 0307 	and.w	r3, r3, #7
 8004b88:	4a03      	ldr	r2, [pc, #12]	; (8004b98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b8a:	5cd3      	ldrb	r3, [r2, r3]
 8004b8c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	40023800 	.word	0x40023800
 8004b98:	0800fbdc 	.word	0x0800fbdc

08004b9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004ba0:	f7ff ffdc 	bl	8004b5c <HAL_RCC_GetHCLKFreq>
 8004ba4:	4601      	mov	r1, r0
 8004ba6:	4b05      	ldr	r3, [pc, #20]	; (8004bbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	0b5b      	lsrs	r3, r3, #13
 8004bac:	f003 0307 	and.w	r3, r3, #7
 8004bb0:	4a03      	ldr	r2, [pc, #12]	; (8004bc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bb2:	5cd3      	ldrb	r3, [r2, r3]
 8004bb4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	40023800 	.word	0x40023800
 8004bc0:	0800fbdc 	.word	0x0800fbdc

08004bc4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b086      	sub	sp, #24
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0301 	and.w	r3, r3, #1
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d105      	bne.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d035      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004bec:	4b62      	ldr	r3, [pc, #392]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004bee:	2200      	movs	r2, #0
 8004bf0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004bf2:	f7fd fa29 	bl	8002048 <HAL_GetTick>
 8004bf6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004bf8:	e008      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004bfa:	f7fd fa25 	bl	8002048 <HAL_GetTick>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d901      	bls.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e0b0      	b.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c0c:	4b5b      	ldr	r3, [pc, #364]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d1f0      	bne.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	019a      	lsls	r2, r3, #6
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	071b      	lsls	r3, r3, #28
 8004c24:	4955      	ldr	r1, [pc, #340]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004c2c:	4b52      	ldr	r3, [pc, #328]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004c2e:	2201      	movs	r2, #1
 8004c30:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c32:	f7fd fa09 	bl	8002048 <HAL_GetTick>
 8004c36:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c38:	e008      	b.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c3a:	f7fd fa05 	bl	8002048 <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d901      	bls.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e090      	b.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c4c:	4b4b      	ldr	r3, [pc, #300]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d0f0      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0302 	and.w	r3, r3, #2
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	f000 8083 	beq.w	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c66:	2300      	movs	r3, #0
 8004c68:	60fb      	str	r3, [r7, #12]
 8004c6a:	4b44      	ldr	r3, [pc, #272]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6e:	4a43      	ldr	r2, [pc, #268]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c74:	6413      	str	r3, [r2, #64]	; 0x40
 8004c76:	4b41      	ldr	r3, [pc, #260]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c7e:	60fb      	str	r3, [r7, #12]
 8004c80:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004c82:	4b3f      	ldr	r3, [pc, #252]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a3e      	ldr	r2, [pc, #248]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c8c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c8e:	f7fd f9db 	bl	8002048 <HAL_GetTick>
 8004c92:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004c94:	e008      	b.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004c96:	f7fd f9d7 	bl	8002048 <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d901      	bls.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e062      	b.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004ca8:	4b35      	ldr	r3, [pc, #212]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d0f0      	beq.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004cb4:	4b31      	ldr	r3, [pc, #196]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cbc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d02f      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ccc:	693a      	ldr	r2, [r7, #16]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d028      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004cd2:	4b2a      	ldr	r3, [pc, #168]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cda:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004cdc:	4b29      	ldr	r3, [pc, #164]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004cde:	2201      	movs	r2, #1
 8004ce0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ce2:	4b28      	ldr	r3, [pc, #160]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004ce8:	4a24      	ldr	r2, [pc, #144]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004cee:	4b23      	ldr	r3, [pc, #140]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cf2:	f003 0301 	and.w	r3, r3, #1
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d114      	bne.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004cfa:	f7fd f9a5 	bl	8002048 <HAL_GetTick>
 8004cfe:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d00:	e00a      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d02:	f7fd f9a1 	bl	8002048 <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d901      	bls.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e02a      	b.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d18:	4b18      	ldr	r3, [pc, #96]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d1c:	f003 0302 	and.w	r3, r3, #2
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d0ee      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d30:	d10d      	bne.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004d32:	4b12      	ldr	r3, [pc, #72]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004d42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d46:	490d      	ldr	r1, [pc, #52]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	608b      	str	r3, [r1, #8]
 8004d4c:	e005      	b.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004d4e:	4b0b      	ldr	r3, [pc, #44]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	4a0a      	ldr	r2, [pc, #40]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d54:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004d58:	6093      	str	r3, [r2, #8]
 8004d5a:	4b08      	ldr	r3, [pc, #32]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d5c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d66:	4905      	ldr	r1, [pc, #20]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3718      	adds	r7, #24
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	42470068 	.word	0x42470068
 8004d7c:	40023800 	.word	0x40023800
 8004d80:	40007000 	.word	0x40007000
 8004d84:	42470e40 	.word	0x42470e40

08004d88 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d101      	bne.n	8004d9a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e083      	b.n	8004ea2 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	7f5b      	ldrb	r3, [r3, #29]
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d105      	bne.n	8004db0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f7fc fe46 	bl	8001a3c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2202      	movs	r2, #2
 8004db4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	22ca      	movs	r2, #202	; 0xca
 8004dbc:	625a      	str	r2, [r3, #36]	; 0x24
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2253      	movs	r2, #83	; 0x53
 8004dc4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 f9fb 	bl	80051c2 <RTC_EnterInitMode>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d008      	beq.n	8004de4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	22ff      	movs	r2, #255	; 0xff
 8004dd8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2204      	movs	r2, #4
 8004dde:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e05e      	b.n	8004ea2 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	6812      	ldr	r2, [r2, #0]
 8004dee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004df2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004df6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	6899      	ldr	r1, [r3, #8]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	685a      	ldr	r2, [r3, #4]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	431a      	orrs	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	695b      	ldr	r3, [r3, #20]
 8004e0c:	431a      	orrs	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	430a      	orrs	r2, r1
 8004e14:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	68d2      	ldr	r2, [r2, #12]
 8004e1e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	6919      	ldr	r1, [r3, #16]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	041a      	lsls	r2, r3, #16
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	430a      	orrs	r2, r1
 8004e32:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68da      	ldr	r2, [r3, #12]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e42:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	f003 0320 	and.w	r3, r3, #32
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10e      	bne.n	8004e70 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 f98d 	bl	8005172 <HAL_RTC_WaitForSynchro>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d008      	beq.n	8004e70 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	22ff      	movs	r2, #255	; 0xff
 8004e64:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2204      	movs	r2, #4
 8004e6a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e018      	b.n	8004ea2 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004e7e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	699a      	ldr	r2, [r3, #24]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	22ff      	movs	r2, #255	; 0xff
 8004e98:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
  }
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3708      	adds	r7, #8
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}

08004eaa <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004eaa:	b590      	push	{r4, r7, lr}
 8004eac:	b087      	sub	sp, #28
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	60f8      	str	r0, [r7, #12]
 8004eb2:	60b9      	str	r1, [r7, #8]
 8004eb4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	7f1b      	ldrb	r3, [r3, #28]
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d101      	bne.n	8004ec6 <HAL_RTC_SetTime+0x1c>
 8004ec2:	2302      	movs	r3, #2
 8004ec4:	e0aa      	b.n	800501c <HAL_RTC_SetTime+0x172>
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2201      	movs	r2, #1
 8004eca:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2202      	movs	r2, #2
 8004ed0:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d126      	bne.n	8004f26 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d102      	bne.n	8004eec <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f000 f992 	bl	800521a <RTC_ByteToBcd2>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	785b      	ldrb	r3, [r3, #1]
 8004efe:	4618      	mov	r0, r3
 8004f00:	f000 f98b 	bl	800521a <RTC_ByteToBcd2>
 8004f04:	4603      	mov	r3, r0
 8004f06:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004f08:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	789b      	ldrb	r3, [r3, #2]
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f000 f983 	bl	800521a <RTC_ByteToBcd2>
 8004f14:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004f16:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	78db      	ldrb	r3, [r3, #3]
 8004f1e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004f20:	4313      	orrs	r3, r2
 8004f22:	617b      	str	r3, [r7, #20]
 8004f24:	e018      	b.n	8004f58 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d102      	bne.n	8004f3a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	2200      	movs	r2, #0
 8004f38:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	785b      	ldrb	r3, [r3, #1]
 8004f44:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004f46:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8004f48:	68ba      	ldr	r2, [r7, #8]
 8004f4a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004f4c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	78db      	ldrb	r3, [r3, #3]
 8004f52:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004f54:	4313      	orrs	r3, r2
 8004f56:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	22ca      	movs	r2, #202	; 0xca
 8004f5e:	625a      	str	r2, [r3, #36]	; 0x24
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2253      	movs	r2, #83	; 0x53
 8004f66:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004f68:	68f8      	ldr	r0, [r7, #12]
 8004f6a:	f000 f92a 	bl	80051c2 <RTC_EnterInitMode>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d00b      	beq.n	8004f8c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	22ff      	movs	r2, #255	; 0xff
 8004f7a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2204      	movs	r2, #4
 8004f80:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2200      	movs	r2, #0
 8004f86:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e047      	b.n	800501c <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004f96:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004f9a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	689a      	ldr	r2, [r3, #8]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004faa:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	6899      	ldr	r1, [r3, #8]
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	68da      	ldr	r2, [r3, #12]
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	431a      	orrs	r2, r3
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	430a      	orrs	r2, r1
 8004fc2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68da      	ldr	r2, [r3, #12]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004fd2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f003 0320 	and.w	r3, r3, #32
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d111      	bne.n	8005006 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004fe2:	68f8      	ldr	r0, [r7, #12]
 8004fe4:	f000 f8c5 	bl	8005172 <HAL_RTC_WaitForSynchro>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00b      	beq.n	8005006 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	22ff      	movs	r2, #255	; 0xff
 8004ff4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2204      	movs	r2, #4
 8004ffa:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2200      	movs	r2, #0
 8005000:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e00a      	b.n	800501c <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	22ff      	movs	r2, #255	; 0xff
 800500c:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2201      	movs	r2, #1
 8005012:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2200      	movs	r2, #0
 8005018:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800501a:	2300      	movs	r3, #0
  }
}
 800501c:	4618      	mov	r0, r3
 800501e:	371c      	adds	r7, #28
 8005020:	46bd      	mov	sp, r7
 8005022:	bd90      	pop	{r4, r7, pc}

08005024 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005024:	b590      	push	{r4, r7, lr}
 8005026:	b087      	sub	sp, #28
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005030:	2300      	movs	r3, #0
 8005032:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	7f1b      	ldrb	r3, [r3, #28]
 8005038:	2b01      	cmp	r3, #1
 800503a:	d101      	bne.n	8005040 <HAL_RTC_SetDate+0x1c>
 800503c:	2302      	movs	r3, #2
 800503e:	e094      	b.n	800516a <HAL_RTC_SetDate+0x146>
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2201      	movs	r2, #1
 8005044:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2202      	movs	r2, #2
 800504a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d10e      	bne.n	8005070 <HAL_RTC_SetDate+0x4c>
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	785b      	ldrb	r3, [r3, #1]
 8005056:	f003 0310 	and.w	r3, r3, #16
 800505a:	2b00      	cmp	r3, #0
 800505c:	d008      	beq.n	8005070 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	785b      	ldrb	r3, [r3, #1]
 8005062:	f023 0310 	bic.w	r3, r3, #16
 8005066:	b2db      	uxtb	r3, r3
 8005068:	330a      	adds	r3, #10
 800506a:	b2da      	uxtb	r2, r3
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d11c      	bne.n	80050b0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	78db      	ldrb	r3, [r3, #3]
 800507a:	4618      	mov	r0, r3
 800507c:	f000 f8cd 	bl	800521a <RTC_ByteToBcd2>
 8005080:	4603      	mov	r3, r0
 8005082:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	785b      	ldrb	r3, [r3, #1]
 8005088:	4618      	mov	r0, r3
 800508a:	f000 f8c6 	bl	800521a <RTC_ByteToBcd2>
 800508e:	4603      	mov	r3, r0
 8005090:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005092:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	789b      	ldrb	r3, [r3, #2]
 8005098:	4618      	mov	r0, r3
 800509a:	f000 f8be 	bl	800521a <RTC_ByteToBcd2>
 800509e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80050a0:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80050aa:	4313      	orrs	r3, r2
 80050ac:	617b      	str	r3, [r7, #20]
 80050ae:	e00e      	b.n	80050ce <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	78db      	ldrb	r3, [r3, #3]
 80050b4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	785b      	ldrb	r3, [r3, #1]
 80050ba:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80050bc:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80050be:	68ba      	ldr	r2, [r7, #8]
 80050c0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80050c2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80050ca:	4313      	orrs	r3, r2
 80050cc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	22ca      	movs	r2, #202	; 0xca
 80050d4:	625a      	str	r2, [r3, #36]	; 0x24
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2253      	movs	r2, #83	; 0x53
 80050dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80050de:	68f8      	ldr	r0, [r7, #12]
 80050e0:	f000 f86f 	bl	80051c2 <RTC_EnterInitMode>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00b      	beq.n	8005102 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	22ff      	movs	r2, #255	; 0xff
 80050f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2204      	movs	r2, #4
 80050f6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2200      	movs	r2, #0
 80050fc:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e033      	b.n	800516a <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800510c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005110:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68da      	ldr	r2, [r3, #12]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005120:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f003 0320 	and.w	r3, r3, #32
 800512c:	2b00      	cmp	r3, #0
 800512e:	d111      	bne.n	8005154 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f000 f81e 	bl	8005172 <HAL_RTC_WaitForSynchro>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00b      	beq.n	8005154 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	22ff      	movs	r2, #255	; 0xff
 8005142:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2204      	movs	r2, #4
 8005148:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2200      	movs	r2, #0
 800514e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e00a      	b.n	800516a <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	22ff      	movs	r2, #255	; 0xff
 800515a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2201      	movs	r2, #1
 8005160:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2200      	movs	r2, #0
 8005166:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005168:	2300      	movs	r3, #0
  }
}
 800516a:	4618      	mov	r0, r3
 800516c:	371c      	adds	r7, #28
 800516e:	46bd      	mov	sp, r7
 8005170:	bd90      	pop	{r4, r7, pc}

08005172 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005172:	b580      	push	{r7, lr}
 8005174:	b084      	sub	sp, #16
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800517a:	2300      	movs	r3, #0
 800517c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68da      	ldr	r2, [r3, #12]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800518c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800518e:	f7fc ff5b 	bl	8002048 <HAL_GetTick>
 8005192:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005194:	e009      	b.n	80051aa <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005196:	f7fc ff57 	bl	8002048 <HAL_GetTick>
 800519a:	4602      	mov	r2, r0
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051a4:	d901      	bls.n	80051aa <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e007      	b.n	80051ba <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	f003 0320 	and.w	r3, r3, #32
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d0ee      	beq.n	8005196 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80051c2:	b580      	push	{r7, lr}
 80051c4:	b084      	sub	sp, #16
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80051ca:	2300      	movs	r3, #0
 80051cc:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d119      	bne.n	8005210 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f04f 32ff 	mov.w	r2, #4294967295
 80051e4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80051e6:	f7fc ff2f 	bl	8002048 <HAL_GetTick>
 80051ea:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80051ec:	e009      	b.n	8005202 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80051ee:	f7fc ff2b 	bl	8002048 <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051fc:	d901      	bls.n	8005202 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e007      	b.n	8005212 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800520c:	2b00      	cmp	r3, #0
 800520e:	d0ee      	beq.n	80051ee <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3710      	adds	r7, #16
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}

0800521a <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800521a:	b480      	push	{r7}
 800521c:	b085      	sub	sp, #20
 800521e:	af00      	add	r7, sp, #0
 8005220:	4603      	mov	r3, r0
 8005222:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005224:	2300      	movs	r3, #0
 8005226:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8005228:	e005      	b.n	8005236 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	3301      	adds	r3, #1
 800522e:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8005230:	79fb      	ldrb	r3, [r7, #7]
 8005232:	3b0a      	subs	r3, #10
 8005234:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8005236:	79fb      	ldrb	r3, [r7, #7]
 8005238:	2b09      	cmp	r3, #9
 800523a:	d8f6      	bhi.n	800522a <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	b2db      	uxtb	r3, r3
 8005240:	011b      	lsls	r3, r3, #4
 8005242:	b2da      	uxtb	r2, r3
 8005244:	79fb      	ldrb	r3, [r7, #7]
 8005246:	4313      	orrs	r3, r2
 8005248:	b2db      	uxtb	r3, r3
}
 800524a:	4618      	mov	r0, r3
 800524c:	3714      	adds	r7, #20
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr

08005256 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005256:	b580      	push	{r7, lr}
 8005258:	b082      	sub	sp, #8
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d101      	bne.n	8005268 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e022      	b.n	80052ae <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800526e:	b2db      	uxtb	r3, r3
 8005270:	2b00      	cmp	r3, #0
 8005272:	d105      	bne.n	8005280 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f7fc fbf4 	bl	8001a68 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2203      	movs	r2, #3
 8005284:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f000 f815 	bl	80052b8 <HAL_SD_InitCard>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d001      	beq.n	8005298 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e00a      	b.n	80052ae <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3708      	adds	r7, #8
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
	...

080052b8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80052b8:	b5b0      	push	{r4, r5, r7, lr}
 80052ba:	b08e      	sub	sp, #56	; 0x38
 80052bc:	af04      	add	r7, sp, #16
 80052be:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80052c0:	2300      	movs	r3, #0
 80052c2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80052c4:	2300      	movs	r3, #0
 80052c6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80052c8:	2300      	movs	r3, #0
 80052ca:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80052cc:	2300      	movs	r3, #0
 80052ce:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80052d0:	2300      	movs	r3, #0
 80052d2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80052d4:	2376      	movs	r3, #118	; 0x76
 80052d6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681d      	ldr	r5, [r3, #0]
 80052dc:	466c      	mov	r4, sp
 80052de:	f107 0314 	add.w	r3, r7, #20
 80052e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80052e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80052ea:	f107 0308 	add.w	r3, r7, #8
 80052ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80052f0:	4628      	mov	r0, r5
 80052f2:	f002 fb61 	bl	80079b8 <SDIO_Init>
 80052f6:	4603      	mov	r3, r0
 80052f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80052fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005300:	2b00      	cmp	r3, #0
 8005302:	d001      	beq.n	8005308 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e031      	b.n	800536c <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8005308:	4b1a      	ldr	r3, [pc, #104]	; (8005374 <HAL_SD_InitCard+0xbc>)
 800530a:	2200      	movs	r2, #0
 800530c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4618      	mov	r0, r3
 8005314:	f002 fb99 	bl	8007a4a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8005318:	4b16      	ldr	r3, [pc, #88]	; (8005374 <HAL_SD_InitCard+0xbc>)
 800531a:	2201      	movs	r2, #1
 800531c:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 fffa 	bl	8006318 <SD_PowerON>
 8005324:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005326:	6a3b      	ldr	r3, [r7, #32]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00b      	beq.n	8005344 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005338:	6a3b      	ldr	r3, [r7, #32]
 800533a:	431a      	orrs	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e013      	b.n	800536c <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f000 ff19 	bl	800617c <SD_InitCard>
 800534a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800534c:	6a3b      	ldr	r3, [r7, #32]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00b      	beq.n	800536a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2201      	movs	r2, #1
 8005356:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800535e:	6a3b      	ldr	r3, [r7, #32]
 8005360:	431a      	orrs	r2, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e000      	b.n	800536c <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800536a:	2300      	movs	r3, #0
}
 800536c:	4618      	mov	r0, r3
 800536e:	3728      	adds	r7, #40	; 0x28
 8005370:	46bd      	mov	sp, r7
 8005372:	bdb0      	pop	{r4, r5, r7, pc}
 8005374:	422580a0 	.word	0x422580a0

08005378 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b08c      	sub	sp, #48	; 0x30
 800537c:	af00      	add	r7, sp, #0
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	607a      	str	r2, [r7, #4]
 8005384:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d107      	bne.n	80053a0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005394:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e0c9      	b.n	8005534 <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	f040 80c2 	bne.w	8005532 <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2200      	movs	r2, #0
 80053b2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80053b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	441a      	add	r2, r3
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053be:	429a      	cmp	r2, r3
 80053c0:	d907      	bls.n	80053d2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e0b0      	b.n	8005534 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2203      	movs	r2, #3
 80053d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2200      	movs	r2, #0
 80053e0:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	6812      	ldr	r2, [r2, #0]
 80053ec:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 80053f0:	f043 0302 	orr.w	r3, r3, #2
 80053f4:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fa:	4a50      	ldr	r2, [pc, #320]	; (800553c <HAL_SD_ReadBlocks_DMA+0x1c4>)
 80053fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005402:	4a4f      	ldr	r2, [pc, #316]	; (8005540 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8005404:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540a:	2200      	movs	r2, #0
 800540c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	3380      	adds	r3, #128	; 0x80
 8005418:	4619      	mov	r1, r3
 800541a:	68ba      	ldr	r2, [r7, #8]
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	025b      	lsls	r3, r3, #9
 8005420:	089b      	lsrs	r3, r3, #2
 8005422:	f7fc ffff 	bl	8002424 <HAL_DMA_Start_IT>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d017      	beq.n	800545c <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800543a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a40      	ldr	r2, [pc, #256]	; (8005544 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8005442:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005448:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e06b      	b.n	8005534 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800545c:	4b3a      	ldr	r3, [pc, #232]	; (8005548 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 800545e:	2201      	movs	r2, #1
 8005460:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005466:	2b01      	cmp	r3, #1
 8005468:	d002      	beq.n	8005470 <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 800546a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800546c:	025b      	lsls	r3, r3, #9
 800546e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005478:	4618      	mov	r0, r3
 800547a:	f002 fb79 	bl	8007b70 <SDMMC_CmdBlockLength>
 800547e:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8005480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00f      	beq.n	80054a6 <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a2e      	ldr	r2, [pc, #184]	; (8005544 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800548c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005494:	431a      	orrs	r2, r3
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2201      	movs	r2, #1
 800549e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e046      	b.n	8005534 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80054a6:	f04f 33ff 	mov.w	r3, #4294967295
 80054aa:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	025b      	lsls	r3, r3, #9
 80054b0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80054b2:	2390      	movs	r3, #144	; 0x90
 80054b4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80054b6:	2302      	movs	r3, #2
 80054b8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80054ba:	2300      	movs	r3, #0
 80054bc:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80054be:	2301      	movs	r3, #1
 80054c0:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f107 0210 	add.w	r2, r7, #16
 80054ca:	4611      	mov	r1, r2
 80054cc:	4618      	mov	r0, r3
 80054ce:	f002 fb23 	bl	8007b18 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d90a      	bls.n	80054ee <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2282      	movs	r2, #130	; 0x82
 80054dc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054e4:	4618      	mov	r0, r3
 80054e6:	f002 fb87 	bl	8007bf8 <SDMMC_CmdReadMultiBlock>
 80054ea:	62f8      	str	r0, [r7, #44]	; 0x2c
 80054ec:	e009      	b.n	8005502 <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2281      	movs	r2, #129	; 0x81
 80054f2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054fa:	4618      	mov	r0, r3
 80054fc:	f002 fb5a 	bl	8007bb4 <SDMMC_CmdReadSingleBlock>
 8005500:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8005502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005504:	2b00      	cmp	r3, #0
 8005506:	d012      	beq.n	800552e <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a0d      	ldr	r2, [pc, #52]	; (8005544 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800550e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005516:	431a      	orrs	r2, r3
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2200      	movs	r2, #0
 8005528:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e002      	b.n	8005534 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 800552e:	2300      	movs	r3, #0
 8005530:	e000      	b.n	8005534 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 8005532:	2302      	movs	r3, #2
  }
}
 8005534:	4618      	mov	r0, r3
 8005536:	3730      	adds	r7, #48	; 0x30
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}
 800553c:	08005f8b 	.word	0x08005f8b
 8005540:	08005ffd 	.word	0x08005ffd
 8005544:	004005ff 	.word	0x004005ff
 8005548:	4225858c 	.word	0x4225858c

0800554c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b08c      	sub	sp, #48	; 0x30
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]
 8005558:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d107      	bne.n	8005574 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005568:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e0ce      	b.n	8005712 <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800557a:	b2db      	uxtb	r3, r3
 800557c:	2b01      	cmp	r3, #1
 800557e:	f040 80c7 	bne.w	8005710 <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2200      	movs	r2, #0
 8005586:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005588:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	441a      	add	r2, r3
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005592:	429a      	cmp	r2, r3
 8005594:	d907      	bls.n	80055a6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800559a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e0b5      	b.n	8005712 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2203      	movs	r2, #3
 80055aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2200      	movs	r2, #0
 80055b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	6812      	ldr	r2, [r2, #0]
 80055c0:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 80055c4:	f043 0302 	orr.w	r3, r3, #2
 80055c8:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ce:	4a53      	ldr	r2, [pc, #332]	; (800571c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 80055d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055d6:	4a52      	ldr	r2, [pc, #328]	; (8005720 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 80055d8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055de:	2200      	movs	r2, #0
 80055e0:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d002      	beq.n	80055f0 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 80055ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ec:	025b      	lsls	r3, r3, #9
 80055ee:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80055f8:	4618      	mov	r0, r3
 80055fa:	f002 fab9 	bl	8007b70 <SDMMC_CmdBlockLength>
 80055fe:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00f      	beq.n	8005626 <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a46      	ldr	r2, [pc, #280]	; (8005724 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800560c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005614:	431a      	orrs	r2, r3
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2201      	movs	r2, #1
 800561e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e075      	b.n	8005712 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	2b01      	cmp	r3, #1
 800562a:	d90a      	bls.n	8005642 <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	22a0      	movs	r2, #160	; 0xa0
 8005630:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005638:	4618      	mov	r0, r3
 800563a:	f002 fb21 	bl	8007c80 <SDMMC_CmdWriteMultiBlock>
 800563e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005640:	e009      	b.n	8005656 <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2290      	movs	r2, #144	; 0x90
 8005646:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800564e:	4618      	mov	r0, r3
 8005650:	f002 faf4 	bl	8007c3c <SDMMC_CmdWriteSingleBlock>
 8005654:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005658:	2b00      	cmp	r3, #0
 800565a:	d012      	beq.n	8005682 <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a30      	ldr	r2, [pc, #192]	; (8005724 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8005662:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800566a:	431a      	orrs	r2, r3
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2200      	movs	r2, #0
 800567c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e047      	b.n	8005712 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8005682:	4b29      	ldr	r3, [pc, #164]	; (8005728 <HAL_SD_WriteBlocks_DMA+0x1dc>)
 8005684:	2201      	movs	r2, #1
 8005686:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800568c:	68b9      	ldr	r1, [r7, #8]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	3380      	adds	r3, #128	; 0x80
 8005694:	461a      	mov	r2, r3
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	025b      	lsls	r3, r3, #9
 800569a:	089b      	lsrs	r3, r3, #2
 800569c:	f7fc fec2 	bl	8002424 <HAL_DMA_Start_IT>
 80056a0:	4603      	mov	r3, r0
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d01c      	beq.n	80056e0 <HAL_SD_WriteBlocks_DMA+0x194>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	6812      	ldr	r2, [r2, #0]
 80056b0:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 80056b4:	f023 0302 	bic.w	r3, r3, #2
 80056b8:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a19      	ldr	r2, [pc, #100]	; (8005724 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80056c0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2201      	movs	r2, #1
 80056d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2200      	movs	r2, #0
 80056da:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e018      	b.n	8005712 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80056e0:	f04f 33ff 	mov.w	r3, #4294967295
 80056e4:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	025b      	lsls	r3, r3, #9
 80056ea:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80056ec:	2390      	movs	r3, #144	; 0x90
 80056ee:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80056f0:	2300      	movs	r3, #0
 80056f2:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80056f4:	2300      	movs	r3, #0
 80056f6:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80056f8:	2301      	movs	r3, #1
 80056fa:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f107 0210 	add.w	r2, r7, #16
 8005704:	4611      	mov	r1, r2
 8005706:	4618      	mov	r0, r3
 8005708:	f002 fa06 	bl	8007b18 <SDIO_ConfigData>

      return HAL_OK;
 800570c:	2300      	movs	r3, #0
 800570e:	e000      	b.n	8005712 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 8005710:	2302      	movs	r3, #2
  }
}
 8005712:	4618      	mov	r0, r3
 8005714:	3730      	adds	r7, #48	; 0x30
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	08005f61 	.word	0x08005f61
 8005720:	08005ffd 	.word	0x08005ffd
 8005724:	004005ff 	.word	0x004005ff
 8005728:	4225858c 	.word	0x4225858c

0800572c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005738:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005740:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005744:	2b00      	cmp	r3, #0
 8005746:	d008      	beq.n	800575a <HAL_SD_IRQHandler+0x2e>
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f003 0308 	and.w	r3, r3, #8
 800574e:	2b00      	cmp	r3, #0
 8005750:	d003      	beq.n	800575a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 fff6 	bl	8006744 <SD_Read_IT>
 8005758:	e165      	b.n	8005a26 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005764:	2b00      	cmp	r3, #0
 8005766:	f000 808f 	beq.w	8005888 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005772:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	6812      	ldr	r2, [r2, #0]
 800577e:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8005782:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8005786:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f022 0201 	bic.w	r2, r2, #1
 8005796:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f003 0308 	and.w	r3, r3, #8
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d039      	beq.n	8005816 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f003 0302 	and.w	r3, r3, #2
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d104      	bne.n	80057b6 <HAL_SD_IRQHandler+0x8a>
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f003 0320 	and.w	r3, r3, #32
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d011      	beq.n	80057da <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4618      	mov	r0, r3
 80057bc:	f002 fa82 	bl	8007cc4 <SDMMC_CmdStopTransfer>
 80057c0:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d008      	beq.n	80057da <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	431a      	orrs	r2, r3
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 f943 	bl	8005a60 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f240 523a 	movw	r2, #1338	; 0x53a
 80057e2:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f003 0301 	and.w	r3, r3, #1
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d104      	bne.n	8005806 <HAL_SD_IRQHandler+0xda>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f003 0302 	and.w	r3, r3, #2
 8005802:	2b00      	cmp	r3, #0
 8005804:	d003      	beq.n	800580e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 f920 	bl	8005a4c <HAL_SD_RxCpltCallback>
 800580c:	e10b      	b.n	8005a26 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 f912 	bl	8005a38 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005814:	e107      	b.n	8005a26 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800581c:	2b00      	cmp	r3, #0
 800581e:	f000 8102 	beq.w	8005a26 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f003 0320 	and.w	r3, r3, #32
 8005828:	2b00      	cmp	r3, #0
 800582a:	d011      	beq.n	8005850 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4618      	mov	r0, r3
 8005832:	f002 fa47 	bl	8007cc4 <SDMMC_CmdStopTransfer>
 8005836:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d008      	beq.n	8005850 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	431a      	orrs	r2, r3
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 f908 	bl	8005a60 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f003 0301 	and.w	r3, r3, #1
 8005856:	2b00      	cmp	r3, #0
 8005858:	f040 80e5 	bne.w	8005a26 <HAL_SD_IRQHandler+0x2fa>
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f003 0302 	and.w	r3, r3, #2
 8005862:	2b00      	cmp	r3, #0
 8005864:	f040 80df 	bne.w	8005a26 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f022 0208 	bic.w	r2, r2, #8
 8005876:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f000 f8d9 	bl	8005a38 <HAL_SD_TxCpltCallback>
}
 8005886:	e0ce      	b.n	8005a26 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800588e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005892:	2b00      	cmp	r3, #0
 8005894:	d008      	beq.n	80058a8 <HAL_SD_IRQHandler+0x17c>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f003 0308 	and.w	r3, r3, #8
 800589c:	2b00      	cmp	r3, #0
 800589e:	d003      	beq.n	80058a8 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 ffa0 	bl	80067e6 <SD_Write_IT>
 80058a6:	e0be      	b.n	8005a26 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058ae:	f240 233a 	movw	r3, #570	; 0x23a
 80058b2:	4013      	ands	r3, r2
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f000 80b6 	beq.w	8005a26 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058c0:	f003 0302 	and.w	r3, r3, #2
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d005      	beq.n	80058d4 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058cc:	f043 0202 	orr.w	r2, r3, #2
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058da:	f003 0308 	and.w	r3, r3, #8
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d005      	beq.n	80058ee <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e6:	f043 0208 	orr.w	r2, r3, #8
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058f4:	f003 0320 	and.w	r3, r3, #32
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d005      	beq.n	8005908 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005900:	f043 0220 	orr.w	r2, r3, #32
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800590e:	f003 0310 	and.w	r3, r3, #16
 8005912:	2b00      	cmp	r3, #0
 8005914:	d005      	beq.n	8005922 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800591a:	f043 0210 	orr.w	r2, r3, #16
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005928:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800592c:	2b00      	cmp	r3, #0
 800592e:	d005      	beq.n	800593c <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005934:	f043 0208 	orr.w	r2, r3, #8
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f240 723a 	movw	r2, #1850	; 0x73a
 8005944:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	6812      	ldr	r2, [r2, #0]
 8005950:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8005954:	f023 0302 	bic.w	r3, r3, #2
 8005958:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4618      	mov	r0, r3
 8005960:	f002 f9b0 	bl	8007cc4 <SDMMC_CmdStopTransfer>
 8005964:	4602      	mov	r2, r0
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800596a:	431a      	orrs	r2, r3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f003 0308 	and.w	r3, r3, #8
 8005976:	2b00      	cmp	r3, #0
 8005978:	d00a      	beq.n	8005990 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2201      	movs	r2, #1
 800597e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f000 f869 	bl	8005a60 <HAL_SD_ErrorCallback>
}
 800598e:	e04a      	b.n	8005a26 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005996:	2b00      	cmp	r3, #0
 8005998:	d045      	beq.n	8005a26 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f003 0310 	and.w	r3, r3, #16
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d104      	bne.n	80059ae <HAL_SD_IRQHandler+0x282>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f003 0320 	and.w	r3, r3, #32
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d011      	beq.n	80059d2 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059b2:	4a1f      	ldr	r2, [pc, #124]	; (8005a30 <HAL_SD_IRQHandler+0x304>)
 80059b4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ba:	4618      	mov	r0, r3
 80059bc:	f7fc fd8a 	bl	80024d4 <HAL_DMA_Abort_IT>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d02f      	beq.n	8005a26 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ca:	4618      	mov	r0, r3
 80059cc:	f000 fb68 	bl	80060a0 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80059d0:	e029      	b.n	8005a26 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f003 0301 	and.w	r3, r3, #1
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d104      	bne.n	80059e6 <HAL_SD_IRQHandler+0x2ba>
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f003 0302 	and.w	r3, r3, #2
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d011      	beq.n	8005a0a <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ea:	4a12      	ldr	r2, [pc, #72]	; (8005a34 <HAL_SD_IRQHandler+0x308>)
 80059ec:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f2:	4618      	mov	r0, r3
 80059f4:	f7fc fd6e 	bl	80024d4 <HAL_DMA_Abort_IT>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d013      	beq.n	8005a26 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a02:	4618      	mov	r0, r3
 8005a04:	f000 fb83 	bl	800610e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005a08:	e00d      	b.n	8005a26 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 f828 	bl	8005a74 <HAL_SD_AbortCallback>
}
 8005a24:	e7ff      	b.n	8005a26 <HAL_SD_IRQHandler+0x2fa>
 8005a26:	bf00      	nop
 8005a28:	3710      	adds	r7, #16
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	080060a1 	.word	0x080060a1
 8005a34:	0800610f 	.word	0x0800610f

08005a38 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: Pointer to SD handle
  * @retval None
  */
__weak void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b083      	sub	sp, #12
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_TxCpltCallback can be implemented in the user file
   */
}
 8005a40:	bf00      	nop
 8005a42:	370c      	adds	r7, #12
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr

08005a4c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_RxCpltCallback can be implemented in the user file
   */
}
 8005a54:	bf00      	nop
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8005a68:	bf00      	nop
 8005a6a:	370c      	adds	r7, #12
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_AbortCallback can be implemented in the user file
   */
}
 8005a7c:	bf00      	nop
 8005a7e:	370c      	adds	r7, #12
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a96:	0f9b      	lsrs	r3, r3, #30
 8005a98:	b2da      	uxtb	r2, r3
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005aa2:	0e9b      	lsrs	r3, r3, #26
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	f003 030f 	and.w	r3, r3, #15
 8005aaa:	b2da      	uxtb	r2, r3
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ab4:	0e1b      	lsrs	r3, r3, #24
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	f003 0303 	and.w	r3, r3, #3
 8005abc:	b2da      	uxtb	r2, r3
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ac6:	0c1b      	lsrs	r3, r3, #16
 8005ac8:	b2da      	uxtb	r2, r3
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ad2:	0a1b      	lsrs	r3, r3, #8
 8005ad4:	b2da      	uxtb	r2, r3
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ade:	b2da      	uxtb	r2, r3
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ae8:	0d1b      	lsrs	r3, r3, #20
 8005aea:	b29a      	uxth	r2, r3
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005af4:	0c1b      	lsrs	r3, r3, #16
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	f003 030f 	and.w	r3, r3, #15
 8005afc:	b2da      	uxtb	r2, r3
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b06:	0bdb      	lsrs	r3, r3, #15
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	f003 0301 	and.w	r3, r3, #1
 8005b0e:	b2da      	uxtb	r2, r3
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b18:	0b9b      	lsrs	r3, r3, #14
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	f003 0301 	and.w	r3, r3, #1
 8005b20:	b2da      	uxtb	r2, r3
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b2a:	0b5b      	lsrs	r3, r3, #13
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	f003 0301 	and.w	r3, r3, #1
 8005b32:	b2da      	uxtb	r2, r3
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b3c:	0b1b      	lsrs	r3, r3, #12
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	f003 0301 	and.w	r3, r3, #1
 8005b44:	b2da      	uxtb	r2, r3
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d163      	bne.n	8005c20 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b5c:	009a      	lsls	r2, r3, #2
 8005b5e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005b62:	4013      	ands	r3, r2
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005b68:	0f92      	lsrs	r2, r2, #30
 8005b6a:	431a      	orrs	r2, r3
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b74:	0edb      	lsrs	r3, r3, #27
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	f003 0307 	and.w	r3, r3, #7
 8005b7c:	b2da      	uxtb	r2, r3
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b86:	0e1b      	lsrs	r3, r3, #24
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	f003 0307 	and.w	r3, r3, #7
 8005b8e:	b2da      	uxtb	r2, r3
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b98:	0d5b      	lsrs	r3, r3, #21
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	f003 0307 	and.w	r3, r3, #7
 8005ba0:	b2da      	uxtb	r2, r3
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005baa:	0c9b      	lsrs	r3, r3, #18
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	f003 0307 	and.w	r3, r3, #7
 8005bb2:	b2da      	uxtb	r2, r3
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bbc:	0bdb      	lsrs	r3, r3, #15
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	f003 0307 	and.w	r3, r3, #7
 8005bc4:	b2da      	uxtb	r2, r3
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	1c5a      	adds	r2, r3, #1
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	7e1b      	ldrb	r3, [r3, #24]
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	f003 0307 	and.w	r3, r3, #7
 8005bde:	3302      	adds	r3, #2
 8005be0:	2201      	movs	r2, #1
 8005be2:	fa02 f303 	lsl.w	r3, r2, r3
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005bea:	fb02 f203 	mul.w	r2, r2, r3
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	7a1b      	ldrb	r3, [r3, #8]
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	f003 030f 	and.w	r3, r3, #15
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	409a      	lsls	r2, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005c0c:	0a52      	lsrs	r2, r2, #9
 8005c0e:	fb02 f203 	mul.w	r2, r2, r3
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c1c:	661a      	str	r2, [r3, #96]	; 0x60
 8005c1e:	e031      	b.n	8005c84 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d11d      	bne.n	8005c64 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c2c:	041b      	lsls	r3, r3, #16
 8005c2e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c36:	0c1b      	lsrs	r3, r3, #16
 8005c38:	431a      	orrs	r2, r3
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	691b      	ldr	r3, [r3, #16]
 8005c42:	3301      	adds	r3, #1
 8005c44:	029a      	lsls	r2, r3, #10
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c58:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	661a      	str	r2, [r3, #96]	; 0x60
 8005c62:	e00f      	b.n	8005c84 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a58      	ldr	r2, [pc, #352]	; (8005dcc <HAL_SD_GetCardCSD+0x344>)
 8005c6a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c70:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e09d      	b.n	8005dc0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c88:	0b9b      	lsrs	r3, r3, #14
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	f003 0301 	and.w	r3, r3, #1
 8005c90:	b2da      	uxtb	r2, r3
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c9a:	09db      	lsrs	r3, r3, #7
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ca2:	b2da      	uxtb	r2, r3
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cb2:	b2da      	uxtb	r2, r3
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cbc:	0fdb      	lsrs	r3, r3, #31
 8005cbe:	b2da      	uxtb	r2, r3
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cc8:	0f5b      	lsrs	r3, r3, #29
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	f003 0303 	and.w	r3, r3, #3
 8005cd0:	b2da      	uxtb	r2, r3
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cda:	0e9b      	lsrs	r3, r3, #26
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	f003 0307 	and.w	r3, r3, #7
 8005ce2:	b2da      	uxtb	r2, r3
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cec:	0d9b      	lsrs	r3, r3, #22
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	f003 030f 	and.w	r3, r3, #15
 8005cf4:	b2da      	uxtb	r2, r3
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cfe:	0d5b      	lsrs	r3, r3, #21
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	f003 0301 	and.w	r3, r3, #1
 8005d06:	b2da      	uxtb	r2, r3
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d1a:	0c1b      	lsrs	r3, r3, #16
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	f003 0301 	and.w	r3, r3, #1
 8005d22:	b2da      	uxtb	r2, r3
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d2e:	0bdb      	lsrs	r3, r3, #15
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	f003 0301 	and.w	r3, r3, #1
 8005d36:	b2da      	uxtb	r2, r3
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d42:	0b9b      	lsrs	r3, r3, #14
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	f003 0301 	and.w	r3, r3, #1
 8005d4a:	b2da      	uxtb	r2, r3
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d56:	0b5b      	lsrs	r3, r3, #13
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	f003 0301 	and.w	r3, r3, #1
 8005d5e:	b2da      	uxtb	r2, r3
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d6a:	0b1b      	lsrs	r3, r3, #12
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	f003 0301 	and.w	r3, r3, #1
 8005d72:	b2da      	uxtb	r2, r3
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d7e:	0a9b      	lsrs	r3, r3, #10
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	f003 0303 	and.w	r3, r3, #3
 8005d86:	b2da      	uxtb	r2, r3
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d92:	0a1b      	lsrs	r3, r3, #8
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	f003 0303 	and.w	r3, r3, #3
 8005d9a:	b2da      	uxtb	r2, r3
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005da6:	085b      	lsrs	r3, r3, #1
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dae:	b2da      	uxtb	r2, r3
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	2201      	movs	r2, #1
 8005dba:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005dbe:	2300      	movs	r3, #0
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr
 8005dcc:	004005ff 	.word	0x004005ff

08005dd0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005e1a:	2300      	movs	r3, #0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	370c      	adds	r7, #12
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005e28:	b5b0      	push	{r4, r5, r7, lr}
 8005e2a:	b08e      	sub	sp, #56	; 0x38
 8005e2c:	af04      	add	r7, sp, #16
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2203      	movs	r2, #3
 8005e36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e3e:	2b03      	cmp	r3, #3
 8005e40:	d02e      	beq.n	8005ea0 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e48:	d106      	bne.n	8005e58 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e4e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	639a      	str	r2, [r3, #56]	; 0x38
 8005e56:	e029      	b.n	8005eac <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e5e:	d10a      	bne.n	8005e76 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 fb0f 	bl	8006484 <SD_WideBus_Enable>
 8005e66:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6e:	431a      	orrs	r2, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	639a      	str	r2, [r3, #56]	; 0x38
 8005e74:	e01a      	b.n	8005eac <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d10a      	bne.n	8005e92 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f000 fb4c 	bl	800651a <SD_WideBus_Disable>
 8005e82:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8a:	431a      	orrs	r2, r3
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	639a      	str	r2, [r3, #56]	; 0x38
 8005e90:	e00c      	b.n	8005eac <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e96:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	639a      	str	r2, [r3, #56]	; 0x38
 8005e9e:	e005      	b.n	8005eac <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d009      	beq.n	8005ec8 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a18      	ldr	r2, [pc, #96]	; (8005f1c <HAL_SD_ConfigWideBusOperation+0xf4>)
 8005eba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e024      	b.n	8005f12 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	695b      	ldr	r3, [r3, #20]
 8005ee2:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	699b      	ldr	r3, [r3, #24]
 8005ee8:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681d      	ldr	r5, [r3, #0]
 8005eee:	466c      	mov	r4, sp
 8005ef0:	f107 0318 	add.w	r3, r7, #24
 8005ef4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005ef8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005efc:	f107 030c 	add.w	r3, r7, #12
 8005f00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f02:	4628      	mov	r0, r5
 8005f04:	f001 fd58 	bl	80079b8 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3728      	adds	r7, #40	; 0x28
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bdb0      	pop	{r4, r5, r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	004005ff 	.word	0x004005ff

08005f20 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b086      	sub	sp, #24
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005f2c:	f107 030c 	add.w	r3, r7, #12
 8005f30:	4619      	mov	r1, r3
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 fa7e 	bl	8006434 <SD_SendStatus>
 8005f38:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d005      	beq.n	8005f4c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	431a      	orrs	r2, r3
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	0a5b      	lsrs	r3, r3, #9
 8005f50:	f003 030f 	and.w	r3, r3, #15
 8005f54:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005f56:	693b      	ldr	r3, [r7, #16]
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3718      	adds	r7, #24
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b085      	sub	sp, #20
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f6c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f7c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005f7e:	bf00      	nop
 8005f80:	3714      	adds	r7, #20
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr

08005f8a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005f8a:	b580      	push	{r7, lr}
 8005f8c:	b084      	sub	sp, #16
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f96:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f9c:	2b82      	cmp	r3, #130	; 0x82
 8005f9e:	d111      	bne.n	8005fc4 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f001 fe8d 	bl	8007cc4 <SDMMC_CmdStopTransfer>
 8005faa:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d008      	beq.n	8005fc4 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	431a      	orrs	r2, r3
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8005fbe:	68f8      	ldr	r0, [r7, #12]
 8005fc0:	f7ff fd4e 	bl	8005a60 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f022 0208 	bic.w	r2, r2, #8
 8005fd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f240 523a 	movw	r2, #1338	; 0x53a
 8005fdc:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8005fec:	68f8      	ldr	r0, [r7, #12]
 8005fee:	f7ff fd2d 	bl	8005a4c <HAL_SD_RxCpltCallback>
#endif
}
 8005ff2:	bf00      	nop
 8005ff4:	3710      	adds	r7, #16
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
	...

08005ffc <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b086      	sub	sp, #24
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006008:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f7fc fc0e 	bl	800282c <HAL_DMA_GetError>
 8006010:	4603      	mov	r3, r0
 8006012:	2b02      	cmp	r3, #2
 8006014:	d03e      	beq.n	8006094 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800601c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006024:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	2b01      	cmp	r3, #1
 800602a:	d002      	beq.n	8006032 <SD_DMAError+0x36>
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2b01      	cmp	r3, #1
 8006030:	d12d      	bne.n	800608e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a19      	ldr	r2, [pc, #100]	; (800609c <SD_DMAError+0xa0>)
 8006038:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006048:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800604e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8006056:	6978      	ldr	r0, [r7, #20]
 8006058:	f7ff ff62 	bl	8005f20 <HAL_SD_GetCardState>
 800605c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	2b06      	cmp	r3, #6
 8006062:	d002      	beq.n	800606a <SD_DMAError+0x6e>
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	2b05      	cmp	r3, #5
 8006068:	d10a      	bne.n	8006080 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4618      	mov	r0, r3
 8006070:	f001 fe28 	bl	8007cc4 <SDMMC_CmdStopTransfer>
 8006074:	4602      	mov	r2, r0
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800607a:	431a      	orrs	r2, r3
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	2200      	movs	r2, #0
 800608c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800608e:	6978      	ldr	r0, [r7, #20]
 8006090:	f7ff fce6 	bl	8005a60 <HAL_SD_ErrorCallback>
#endif
  }
}
 8006094:	bf00      	nop
 8006096:	3718      	adds	r7, #24
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}
 800609c:	004005ff 	.word	0x004005ff

080060a0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ac:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f240 523a 	movw	r2, #1338	; 0x53a
 80060b6:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80060b8:	68f8      	ldr	r0, [r7, #12]
 80060ba:	f7ff ff31 	bl	8005f20 <HAL_SD_GetCardState>
 80060be:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2201      	movs	r2, #1
 80060c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2200      	movs	r2, #0
 80060cc:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	2b06      	cmp	r3, #6
 80060d2:	d002      	beq.n	80060da <SD_DMATxAbort+0x3a>
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	2b05      	cmp	r3, #5
 80060d8:	d10a      	bne.n	80060f0 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4618      	mov	r0, r3
 80060e0:	f001 fdf0 	bl	8007cc4 <SDMMC_CmdStopTransfer>
 80060e4:	4602      	mov	r2, r0
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ea:	431a      	orrs	r2, r3
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d103      	bne.n	8006100 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80060f8:	68f8      	ldr	r0, [r7, #12]
 80060fa:	f7ff fcbb 	bl	8005a74 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80060fe:	e002      	b.n	8006106 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006100:	68f8      	ldr	r0, [r7, #12]
 8006102:	f7ff fcad 	bl	8005a60 <HAL_SD_ErrorCallback>
}
 8006106:	bf00      	nop
 8006108:	3710      	adds	r7, #16
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}

0800610e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800610e:	b580      	push	{r7, lr}
 8006110:	b084      	sub	sp, #16
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800611a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f240 523a 	movw	r2, #1338	; 0x53a
 8006124:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006126:	68f8      	ldr	r0, [r7, #12]
 8006128:	f7ff fefa 	bl	8005f20 <HAL_SD_GetCardState>
 800612c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2201      	movs	r2, #1
 8006132:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2200      	movs	r2, #0
 800613a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	2b06      	cmp	r3, #6
 8006140:	d002      	beq.n	8006148 <SD_DMARxAbort+0x3a>
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	2b05      	cmp	r3, #5
 8006146:	d10a      	bne.n	800615e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4618      	mov	r0, r3
 800614e:	f001 fdb9 	bl	8007cc4 <SDMMC_CmdStopTransfer>
 8006152:	4602      	mov	r2, r0
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006158:	431a      	orrs	r2, r3
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006162:	2b00      	cmp	r3, #0
 8006164:	d103      	bne.n	800616e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006166:	68f8      	ldr	r0, [r7, #12]
 8006168:	f7ff fc84 	bl	8005a74 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800616c:	e002      	b.n	8006174 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800616e:	68f8      	ldr	r0, [r7, #12]
 8006170:	f7ff fc76 	bl	8005a60 <HAL_SD_ErrorCallback>
}
 8006174:	bf00      	nop
 8006176:	3710      	adds	r7, #16
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800617c:	b5b0      	push	{r4, r5, r7, lr}
 800617e:	b094      	sub	sp, #80	; 0x50
 8006180:	af04      	add	r7, sp, #16
 8006182:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006184:	2301      	movs	r3, #1
 8006186:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4618      	mov	r0, r3
 800618e:	f001 fc6b 	bl	8007a68 <SDIO_GetPowerState>
 8006192:	4603      	mov	r3, r0
 8006194:	2b00      	cmp	r3, #0
 8006196:	d102      	bne.n	800619e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006198:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800619c:	e0b7      	b.n	800630e <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061a2:	2b03      	cmp	r3, #3
 80061a4:	d02f      	beq.n	8006206 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4618      	mov	r0, r3
 80061ac:	f001 fe94 	bl	8007ed8 <SDMMC_CmdSendCID>
 80061b0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80061b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d001      	beq.n	80061bc <SD_InitCard+0x40>
    {
      return errorstate;
 80061b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061ba:	e0a8      	b.n	800630e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2100      	movs	r1, #0
 80061c2:	4618      	mov	r0, r3
 80061c4:	f001 fc95 	bl	8007af2 <SDIO_GetResponse>
 80061c8:	4602      	mov	r2, r0
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	2104      	movs	r1, #4
 80061d4:	4618      	mov	r0, r3
 80061d6:	f001 fc8c 	bl	8007af2 <SDIO_GetResponse>
 80061da:	4602      	mov	r2, r0
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2108      	movs	r1, #8
 80061e6:	4618      	mov	r0, r3
 80061e8:	f001 fc83 	bl	8007af2 <SDIO_GetResponse>
 80061ec:	4602      	mov	r2, r0
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	210c      	movs	r1, #12
 80061f8:	4618      	mov	r0, r3
 80061fa:	f001 fc7a 	bl	8007af2 <SDIO_GetResponse>
 80061fe:	4602      	mov	r2, r0
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800620a:	2b03      	cmp	r3, #3
 800620c:	d00d      	beq.n	800622a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f107 020e 	add.w	r2, r7, #14
 8006216:	4611      	mov	r1, r2
 8006218:	4618      	mov	r0, r3
 800621a:	f001 fe9a 	bl	8007f52 <SDMMC_CmdSetRelAdd>
 800621e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006222:	2b00      	cmp	r3, #0
 8006224:	d001      	beq.n	800622a <SD_InitCard+0xae>
    {
      return errorstate;
 8006226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006228:	e071      	b.n	800630e <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800622e:	2b03      	cmp	r3, #3
 8006230:	d036      	beq.n	80062a0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006232:	89fb      	ldrh	r3, [r7, #14]
 8006234:	461a      	mov	r2, r3
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006242:	041b      	lsls	r3, r3, #16
 8006244:	4619      	mov	r1, r3
 8006246:	4610      	mov	r0, r2
 8006248:	f001 fe64 	bl	8007f14 <SDMMC_CmdSendCSD>
 800624c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800624e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006250:	2b00      	cmp	r3, #0
 8006252:	d001      	beq.n	8006258 <SD_InitCard+0xdc>
    {
      return errorstate;
 8006254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006256:	e05a      	b.n	800630e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2100      	movs	r1, #0
 800625e:	4618      	mov	r0, r3
 8006260:	f001 fc47 	bl	8007af2 <SDIO_GetResponse>
 8006264:	4602      	mov	r2, r0
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2104      	movs	r1, #4
 8006270:	4618      	mov	r0, r3
 8006272:	f001 fc3e 	bl	8007af2 <SDIO_GetResponse>
 8006276:	4602      	mov	r2, r0
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	2108      	movs	r1, #8
 8006282:	4618      	mov	r0, r3
 8006284:	f001 fc35 	bl	8007af2 <SDIO_GetResponse>
 8006288:	4602      	mov	r2, r0
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	210c      	movs	r1, #12
 8006294:	4618      	mov	r0, r3
 8006296:	f001 fc2c 	bl	8007af2 <SDIO_GetResponse>
 800629a:	4602      	mov	r2, r0
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	2104      	movs	r1, #4
 80062a6:	4618      	mov	r0, r3
 80062a8:	f001 fc23 	bl	8007af2 <SDIO_GetResponse>
 80062ac:	4603      	mov	r3, r0
 80062ae:	0d1a      	lsrs	r2, r3, #20
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80062b4:	f107 0310 	add.w	r3, r7, #16
 80062b8:	4619      	mov	r1, r3
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f7ff fbe4 	bl	8005a88 <HAL_SD_GetCardCSD>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d002      	beq.n	80062cc <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80062c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80062ca:	e020      	b.n	800630e <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6819      	ldr	r1, [r3, #0]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062d4:	041b      	lsls	r3, r3, #16
 80062d6:	f04f 0400 	mov.w	r4, #0
 80062da:	461a      	mov	r2, r3
 80062dc:	4623      	mov	r3, r4
 80062de:	4608      	mov	r0, r1
 80062e0:	f001 fd12 	bl	8007d08 <SDMMC_CmdSelDesel>
 80062e4:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80062e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d001      	beq.n	80062f0 <SD_InitCard+0x174>
  {
    return errorstate;
 80062ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062ee:	e00e      	b.n	800630e <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681d      	ldr	r5, [r3, #0]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	466c      	mov	r4, sp
 80062f8:	f103 0210 	add.w	r2, r3, #16
 80062fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80062fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006302:	3304      	adds	r3, #4
 8006304:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006306:	4628      	mov	r0, r5
 8006308:	f001 fb56 	bl	80079b8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3740      	adds	r7, #64	; 0x40
 8006312:	46bd      	mov	sp, r7
 8006314:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006318 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b086      	sub	sp, #24
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006320:	2300      	movs	r3, #0
 8006322:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006324:	2300      	movs	r3, #0
 8006326:	617b      	str	r3, [r7, #20]
 8006328:	2300      	movs	r3, #0
 800632a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4618      	mov	r0, r3
 8006332:	f001 fd0c 	bl	8007d4e <SDMMC_CmdGoIdleState>
 8006336:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d001      	beq.n	8006342 <SD_PowerON+0x2a>
  {
    return errorstate;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	e072      	b.n	8006428 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4618      	mov	r0, r3
 8006348:	f001 fd1f 	bl	8007d8a <SDMMC_CmdOperCond>
 800634c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d00d      	beq.n	8006370 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4618      	mov	r0, r3
 8006360:	f001 fcf5 	bl	8007d4e <SDMMC_CmdGoIdleState>
 8006364:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d004      	beq.n	8006376 <SD_PowerON+0x5e>
    {
      return errorstate;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	e05b      	b.n	8006428 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800637a:	2b01      	cmp	r3, #1
 800637c:	d137      	bne.n	80063ee <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	2100      	movs	r1, #0
 8006384:	4618      	mov	r0, r3
 8006386:	f001 fd1f 	bl	8007dc8 <SDMMC_CmdAppCommand>
 800638a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d02d      	beq.n	80063ee <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006392:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006396:	e047      	b.n	8006428 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2100      	movs	r1, #0
 800639e:	4618      	mov	r0, r3
 80063a0:	f001 fd12 	bl	8007dc8 <SDMMC_CmdAppCommand>
 80063a4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d001      	beq.n	80063b0 <SD_PowerON+0x98>
    {
      return errorstate;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	e03b      	b.n	8006428 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	491e      	ldr	r1, [pc, #120]	; (8006430 <SD_PowerON+0x118>)
 80063b6:	4618      	mov	r0, r3
 80063b8:	f001 fd28 	bl	8007e0c <SDMMC_CmdAppOperCommand>
 80063bc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d002      	beq.n	80063ca <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80063c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80063c8:	e02e      	b.n	8006428 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	2100      	movs	r1, #0
 80063d0:	4618      	mov	r0, r3
 80063d2:	f001 fb8e 	bl	8007af2 <SDIO_GetResponse>
 80063d6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	0fdb      	lsrs	r3, r3, #31
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d101      	bne.n	80063e4 <SD_PowerON+0xcc>
 80063e0:	2301      	movs	r3, #1
 80063e2:	e000      	b.n	80063e6 <SD_PowerON+0xce>
 80063e4:	2300      	movs	r3, #0
 80063e6:	613b      	str	r3, [r7, #16]

    count++;
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	3301      	adds	r3, #1
 80063ec:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d802      	bhi.n	80063fe <SD_PowerON+0xe6>
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d0cc      	beq.n	8006398 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006404:	4293      	cmp	r3, r2
 8006406:	d902      	bls.n	800640e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006408:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800640c:	e00c      	b.n	8006428 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006414:	2b00      	cmp	r3, #0
 8006416:	d003      	beq.n	8006420 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2201      	movs	r2, #1
 800641c:	645a      	str	r2, [r3, #68]	; 0x44
 800641e:	e002      	b.n	8006426 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006426:	2300      	movs	r3, #0
}
 8006428:	4618      	mov	r0, r3
 800642a:	3718      	adds	r7, #24
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}
 8006430:	c1100000 	.word	0xc1100000

08006434 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d102      	bne.n	800644a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006444:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006448:	e018      	b.n	800647c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006452:	041b      	lsls	r3, r3, #16
 8006454:	4619      	mov	r1, r3
 8006456:	4610      	mov	r0, r2
 8006458:	f001 fd9c 	bl	8007f94 <SDMMC_CmdSendStatus>
 800645c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d001      	beq.n	8006468 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	e009      	b.n	800647c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	2100      	movs	r1, #0
 800646e:	4618      	mov	r0, r3
 8006470:	f001 fb3f 	bl	8007af2 <SDIO_GetResponse>
 8006474:	4602      	mov	r2, r0
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800647a:	2300      	movs	r3, #0
}
 800647c:	4618      	mov	r0, r3
 800647e:	3710      	adds	r7, #16
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b086      	sub	sp, #24
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800648c:	2300      	movs	r3, #0
 800648e:	60fb      	str	r3, [r7, #12]
 8006490:	2300      	movs	r3, #0
 8006492:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	2100      	movs	r1, #0
 800649a:	4618      	mov	r0, r3
 800649c:	f001 fb29 	bl	8007af2 <SDIO_GetResponse>
 80064a0:	4603      	mov	r3, r0
 80064a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80064aa:	d102      	bne.n	80064b2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80064ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80064b0:	e02f      	b.n	8006512 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80064b2:	f107 030c 	add.w	r3, r7, #12
 80064b6:	4619      	mov	r1, r3
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 f879 	bl	80065b0 <SD_FindSCR>
 80064be:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d001      	beq.n	80064ca <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	e023      	b.n	8006512 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d01c      	beq.n	800650e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064dc:	041b      	lsls	r3, r3, #16
 80064de:	4619      	mov	r1, r3
 80064e0:	4610      	mov	r0, r2
 80064e2:	f001 fc71 	bl	8007dc8 <SDMMC_CmdAppCommand>
 80064e6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d001      	beq.n	80064f2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	e00f      	b.n	8006512 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	2102      	movs	r1, #2
 80064f8:	4618      	mov	r0, r3
 80064fa:	f001 fcaa 	bl	8007e52 <SDMMC_CmdBusWidth>
 80064fe:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d001      	beq.n	800650a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	e003      	b.n	8006512 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800650a:	2300      	movs	r3, #0
 800650c:	e001      	b.n	8006512 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800650e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006512:	4618      	mov	r0, r3
 8006514:	3718      	adds	r7, #24
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}

0800651a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800651a:	b580      	push	{r7, lr}
 800651c:	b086      	sub	sp, #24
 800651e:	af00      	add	r7, sp, #0
 8006520:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006522:	2300      	movs	r3, #0
 8006524:	60fb      	str	r3, [r7, #12]
 8006526:	2300      	movs	r3, #0
 8006528:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2100      	movs	r1, #0
 8006530:	4618      	mov	r0, r3
 8006532:	f001 fade 	bl	8007af2 <SDIO_GetResponse>
 8006536:	4603      	mov	r3, r0
 8006538:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800653c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006540:	d102      	bne.n	8006548 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006542:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006546:	e02f      	b.n	80065a8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006548:	f107 030c 	add.w	r3, r7, #12
 800654c:	4619      	mov	r1, r3
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 f82e 	bl	80065b0 <SD_FindSCR>
 8006554:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d001      	beq.n	8006560 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	e023      	b.n	80065a8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006566:	2b00      	cmp	r3, #0
 8006568:	d01c      	beq.n	80065a4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006572:	041b      	lsls	r3, r3, #16
 8006574:	4619      	mov	r1, r3
 8006576:	4610      	mov	r0, r2
 8006578:	f001 fc26 	bl	8007dc8 <SDMMC_CmdAppCommand>
 800657c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d001      	beq.n	8006588 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	e00f      	b.n	80065a8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2100      	movs	r1, #0
 800658e:	4618      	mov	r0, r3
 8006590:	f001 fc5f 	bl	8007e52 <SDMMC_CmdBusWidth>
 8006594:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d001      	beq.n	80065a0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	e003      	b.n	80065a8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80065a0:	2300      	movs	r3, #0
 80065a2:	e001      	b.n	80065a8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80065a4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3718      	adds	r7, #24
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80065b0:	b590      	push	{r4, r7, lr}
 80065b2:	b08f      	sub	sp, #60	; 0x3c
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80065ba:	f7fb fd45 	bl	8002048 <HAL_GetTick>
 80065be:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80065c0:	2300      	movs	r3, #0
 80065c2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80065c4:	2300      	movs	r3, #0
 80065c6:	60bb      	str	r3, [r7, #8]
 80065c8:	2300      	movs	r3, #0
 80065ca:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	2108      	movs	r1, #8
 80065d6:	4618      	mov	r0, r3
 80065d8:	f001 faca 	bl	8007b70 <SDMMC_CmdBlockLength>
 80065dc:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80065de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d001      	beq.n	80065e8 <SD_FindSCR+0x38>
  {
    return errorstate;
 80065e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e6:	e0a9      	b.n	800673c <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065f0:	041b      	lsls	r3, r3, #16
 80065f2:	4619      	mov	r1, r3
 80065f4:	4610      	mov	r0, r2
 80065f6:	f001 fbe7 	bl	8007dc8 <SDMMC_CmdAppCommand>
 80065fa:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80065fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d001      	beq.n	8006606 <SD_FindSCR+0x56>
  {
    return errorstate;
 8006602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006604:	e09a      	b.n	800673c <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006606:	f04f 33ff 	mov.w	r3, #4294967295
 800660a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800660c:	2308      	movs	r3, #8
 800660e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8006610:	2330      	movs	r3, #48	; 0x30
 8006612:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006614:	2302      	movs	r3, #2
 8006616:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006618:	2300      	movs	r3, #0
 800661a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800661c:	2301      	movs	r3, #1
 800661e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f107 0210 	add.w	r2, r7, #16
 8006628:	4611      	mov	r1, r2
 800662a:	4618      	mov	r0, r3
 800662c:	f001 fa74 	bl	8007b18 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4618      	mov	r0, r3
 8006636:	f001 fc2e 	bl	8007e96 <SDMMC_CmdSendSCR>
 800663a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800663c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800663e:	2b00      	cmp	r3, #0
 8006640:	d022      	beq.n	8006688 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8006642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006644:	e07a      	b.n	800673c <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800664c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006650:	2b00      	cmp	r3, #0
 8006652:	d00e      	beq.n	8006672 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6819      	ldr	r1, [r3, #0]
 8006658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	f107 0208 	add.w	r2, r7, #8
 8006660:	18d4      	adds	r4, r2, r3
 8006662:	4608      	mov	r0, r1
 8006664:	f001 f9d3 	bl	8007a0e <SDIO_ReadFIFO>
 8006668:	4603      	mov	r3, r0
 800666a:	6023      	str	r3, [r4, #0]
      index++;
 800666c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800666e:	3301      	adds	r3, #1
 8006670:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006672:	f7fb fce9 	bl	8002048 <HAL_GetTick>
 8006676:	4602      	mov	r2, r0
 8006678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800667a:	1ad3      	subs	r3, r2, r3
 800667c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006680:	d102      	bne.n	8006688 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006682:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006686:	e059      	b.n	800673c <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800668e:	f240 432a 	movw	r3, #1066	; 0x42a
 8006692:	4013      	ands	r3, r2
 8006694:	2b00      	cmp	r3, #0
 8006696:	d0d6      	beq.n	8006646 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800669e:	f003 0308 	and.w	r3, r3, #8
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d005      	beq.n	80066b2 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	2208      	movs	r2, #8
 80066ac:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80066ae:	2308      	movs	r3, #8
 80066b0:	e044      	b.n	800673c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066b8:	f003 0302 	and.w	r3, r3, #2
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d005      	beq.n	80066cc <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	2202      	movs	r2, #2
 80066c6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80066c8:	2302      	movs	r3, #2
 80066ca:	e037      	b.n	800673c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066d2:	f003 0320 	and.w	r3, r3, #32
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d005      	beq.n	80066e6 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2220      	movs	r2, #32
 80066e0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80066e2:	2320      	movs	r3, #32
 80066e4:	e02a      	b.n	800673c <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f240 523a 	movw	r2, #1338	; 0x53a
 80066ee:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	061a      	lsls	r2, r3, #24
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	021b      	lsls	r3, r3, #8
 80066f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80066fc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	0a1b      	lsrs	r3, r3, #8
 8006702:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006706:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	0e1b      	lsrs	r3, r3, #24
 800670c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800670e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006710:	601a      	str	r2, [r3, #0]
    scr++;
 8006712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006714:	3304      	adds	r3, #4
 8006716:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	061a      	lsls	r2, r3, #24
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	021b      	lsls	r3, r3, #8
 8006720:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006724:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	0a1b      	lsrs	r3, r3, #8
 800672a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800672e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	0e1b      	lsrs	r3, r3, #24
 8006734:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006738:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800673a:	2300      	movs	r3, #0
}
 800673c:	4618      	mov	r0, r3
 800673e:	373c      	adds	r7, #60	; 0x3c
 8006740:	46bd      	mov	sp, r7
 8006742:	bd90      	pop	{r4, r7, pc}

08006744 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b086      	sub	sp, #24
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006750:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006756:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d03f      	beq.n	80067de <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800675e:	2300      	movs	r3, #0
 8006760:	617b      	str	r3, [r7, #20]
 8006762:	e033      	b.n	80067cc <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4618      	mov	r0, r3
 800676a:	f001 f950 	bl	8007a0e <SDIO_ReadFIFO>
 800676e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	b2da      	uxtb	r2, r3
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	3301      	adds	r3, #1
 800677c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	3b01      	subs	r3, #1
 8006782:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	0a1b      	lsrs	r3, r3, #8
 8006788:	b2da      	uxtb	r2, r3
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	3301      	adds	r3, #1
 8006792:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	3b01      	subs	r3, #1
 8006798:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	0c1b      	lsrs	r3, r3, #16
 800679e:	b2da      	uxtb	r2, r3
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	3301      	adds	r3, #1
 80067a8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	3b01      	subs	r3, #1
 80067ae:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	0e1b      	lsrs	r3, r3, #24
 80067b4:	b2da      	uxtb	r2, r3
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	701a      	strb	r2, [r3, #0]
      tmp++;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	3301      	adds	r3, #1
 80067be:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	3b01      	subs	r3, #1
 80067c4:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	3301      	adds	r3, #1
 80067ca:	617b      	str	r3, [r7, #20]
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	2b07      	cmp	r3, #7
 80067d0:	d9c8      	bls.n	8006764 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	68fa      	ldr	r2, [r7, #12]
 80067d6:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	693a      	ldr	r2, [r7, #16]
 80067dc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80067de:	bf00      	nop
 80067e0:	3718      	adds	r7, #24
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}

080067e6 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80067e6:	b580      	push	{r7, lr}
 80067e8:	b086      	sub	sp, #24
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6a1b      	ldr	r3, [r3, #32]
 80067f2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d043      	beq.n	8006888 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8006800:	2300      	movs	r3, #0
 8006802:	617b      	str	r3, [r7, #20]
 8006804:	e037      	b.n	8006876 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	3301      	adds	r3, #1
 8006810:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	3b01      	subs	r3, #1
 8006816:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	021a      	lsls	r2, r3, #8
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	4313      	orrs	r3, r2
 8006822:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	3301      	adds	r3, #1
 8006828:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	3b01      	subs	r3, #1
 800682e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	041a      	lsls	r2, r3, #16
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	4313      	orrs	r3, r2
 800683a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	3301      	adds	r3, #1
 8006840:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	3b01      	subs	r3, #1
 8006846:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	061a      	lsls	r2, r3, #24
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	4313      	orrs	r3, r2
 8006852:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	3301      	adds	r3, #1
 8006858:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	3b01      	subs	r3, #1
 800685e:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f107 0208 	add.w	r2, r7, #8
 8006868:	4611      	mov	r1, r2
 800686a:	4618      	mov	r0, r3
 800686c:	f001 f8dc 	bl	8007a28 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	3301      	adds	r3, #1
 8006874:	617b      	str	r3, [r7, #20]
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	2b07      	cmp	r3, #7
 800687a:	d9c4      	bls.n	8006806 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	68fa      	ldr	r2, [r7, #12]
 8006880:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	693a      	ldr	r2, [r7, #16]
 8006886:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8006888:	bf00      	nop
 800688a:	3718      	adds	r7, #24
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d101      	bne.n	80068a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	e056      	b.n	8006950 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d106      	bne.n	80068c2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f7fb f9d3 	bl	8001c68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2202      	movs	r2, #2
 80068c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068d8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	685a      	ldr	r2, [r3, #4]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	431a      	orrs	r2, r3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	431a      	orrs	r2, r3
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	691b      	ldr	r3, [r3, #16]
 80068ee:	431a      	orrs	r2, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	695b      	ldr	r3, [r3, #20]
 80068f4:	431a      	orrs	r2, r3
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	699b      	ldr	r3, [r3, #24]
 80068fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068fe:	431a      	orrs	r2, r3
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	69db      	ldr	r3, [r3, #28]
 8006904:	431a      	orrs	r2, r3
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6a1b      	ldr	r3, [r3, #32]
 800690a:	ea42 0103 	orr.w	r1, r2, r3
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	430a      	orrs	r2, r1
 8006918:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	699b      	ldr	r3, [r3, #24]
 800691e:	0c1b      	lsrs	r3, r3, #16
 8006920:	f003 0104 	and.w	r1, r3, #4
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	430a      	orrs	r2, r1
 800692e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	69da      	ldr	r2, [r3, #28]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800693e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2201      	movs	r2, #1
 800694a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800694e:	2300      	movs	r3, #0
}
 8006950:	4618      	mov	r0, r3
 8006952:	3708      	adds	r7, #8
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b082      	sub	sp, #8
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d101      	bne.n	800696a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	e01d      	b.n	80069a6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006970:	b2db      	uxtb	r3, r3
 8006972:	2b00      	cmp	r3, #0
 8006974:	d106      	bne.n	8006984 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f7fb f9ba 	bl	8001cf8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2202      	movs	r2, #2
 8006988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	3304      	adds	r3, #4
 8006994:	4619      	mov	r1, r3
 8006996:	4610      	mov	r0, r2
 8006998:	f000 fa54 	bl	8006e44 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3708      	adds	r7, #8
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}

080069ae <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80069ae:	b480      	push	{r7}
 80069b0:	b085      	sub	sp, #20
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2202      	movs	r2, #2
 80069ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	f003 0307 	and.w	r3, r3, #7
 80069c8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2b06      	cmp	r3, #6
 80069ce:	d007      	beq.n	80069e0 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f042 0201 	orr.w	r2, r2, #1
 80069de:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80069e8:	2300      	movs	r3, #0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3714      	adds	r7, #20
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr
	...

080069f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b084      	sub	sp, #16
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	2201      	movs	r2, #1
 8006a08:	6839      	ldr	r1, [r7, #0]
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f000 fb54 	bl	80070b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a15      	ldr	r2, [pc, #84]	; (8006a6c <HAL_TIM_PWM_Start+0x74>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d004      	beq.n	8006a24 <HAL_TIM_PWM_Start+0x2c>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a14      	ldr	r2, [pc, #80]	; (8006a70 <HAL_TIM_PWM_Start+0x78>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d101      	bne.n	8006a28 <HAL_TIM_PWM_Start+0x30>
 8006a24:	2301      	movs	r3, #1
 8006a26:	e000      	b.n	8006a2a <HAL_TIM_PWM_Start+0x32>
 8006a28:	2300      	movs	r3, #0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d007      	beq.n	8006a3e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a3c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	f003 0307 	and.w	r3, r3, #7
 8006a48:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2b06      	cmp	r3, #6
 8006a4e:	d007      	beq.n	8006a60 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f042 0201 	orr.w	r2, r2, #1
 8006a5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a60:	2300      	movs	r3, #0
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3710      	adds	r7, #16
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	40010000 	.word	0x40010000
 8006a70:	40010400 	.word	0x40010400

08006a74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b082      	sub	sp, #8
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	691b      	ldr	r3, [r3, #16]
 8006a82:	f003 0302 	and.w	r3, r3, #2
 8006a86:	2b02      	cmp	r3, #2
 8006a88:	d122      	bne.n	8006ad0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	f003 0302 	and.w	r3, r3, #2
 8006a94:	2b02      	cmp	r3, #2
 8006a96:	d11b      	bne.n	8006ad0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f06f 0202 	mvn.w	r2, #2
 8006aa0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	699b      	ldr	r3, [r3, #24]
 8006aae:	f003 0303 	and.w	r3, r3, #3
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d003      	beq.n	8006abe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 f9a5 	bl	8006e06 <HAL_TIM_IC_CaptureCallback>
 8006abc:	e005      	b.n	8006aca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 f997 	bl	8006df2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f000 f9a8 	bl	8006e1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	f003 0304 	and.w	r3, r3, #4
 8006ada:	2b04      	cmp	r3, #4
 8006adc:	d122      	bne.n	8006b24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	f003 0304 	and.w	r3, r3, #4
 8006ae8:	2b04      	cmp	r3, #4
 8006aea:	d11b      	bne.n	8006b24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f06f 0204 	mvn.w	r2, #4
 8006af4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2202      	movs	r2, #2
 8006afa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	699b      	ldr	r3, [r3, #24]
 8006b02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d003      	beq.n	8006b12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 f97b 	bl	8006e06 <HAL_TIM_IC_CaptureCallback>
 8006b10:	e005      	b.n	8006b1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 f96d 	bl	8006df2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 f97e 	bl	8006e1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	691b      	ldr	r3, [r3, #16]
 8006b2a:	f003 0308 	and.w	r3, r3, #8
 8006b2e:	2b08      	cmp	r3, #8
 8006b30:	d122      	bne.n	8006b78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	f003 0308 	and.w	r3, r3, #8
 8006b3c:	2b08      	cmp	r3, #8
 8006b3e:	d11b      	bne.n	8006b78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f06f 0208 	mvn.w	r2, #8
 8006b48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2204      	movs	r2, #4
 8006b4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	69db      	ldr	r3, [r3, #28]
 8006b56:	f003 0303 	and.w	r3, r3, #3
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d003      	beq.n	8006b66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 f951 	bl	8006e06 <HAL_TIM_IC_CaptureCallback>
 8006b64:	e005      	b.n	8006b72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 f943 	bl	8006df2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 f954 	bl	8006e1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	f003 0310 	and.w	r3, r3, #16
 8006b82:	2b10      	cmp	r3, #16
 8006b84:	d122      	bne.n	8006bcc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	68db      	ldr	r3, [r3, #12]
 8006b8c:	f003 0310 	and.w	r3, r3, #16
 8006b90:	2b10      	cmp	r3, #16
 8006b92:	d11b      	bne.n	8006bcc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f06f 0210 	mvn.w	r2, #16
 8006b9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2208      	movs	r2, #8
 8006ba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	69db      	ldr	r3, [r3, #28]
 8006baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d003      	beq.n	8006bba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 f927 	bl	8006e06 <HAL_TIM_IC_CaptureCallback>
 8006bb8:	e005      	b.n	8006bc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 f919 	bl	8006df2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f000 f92a 	bl	8006e1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	f003 0301 	and.w	r3, r3, #1
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d10e      	bne.n	8006bf8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	f003 0301 	and.w	r3, r3, #1
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d107      	bne.n	8006bf8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f06f 0201 	mvn.w	r2, #1
 8006bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f7fa fe98 	bl	8001928 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c02:	2b80      	cmp	r3, #128	; 0x80
 8006c04:	d10e      	bne.n	8006c24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c10:	2b80      	cmp	r3, #128	; 0x80
 8006c12:	d107      	bne.n	8006c24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 faf6 	bl	8007210 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c2e:	2b40      	cmp	r3, #64	; 0x40
 8006c30:	d10e      	bne.n	8006c50 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c3c:	2b40      	cmp	r3, #64	; 0x40
 8006c3e:	d107      	bne.n	8006c50 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 f8ef 	bl	8006e2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	f003 0320 	and.w	r3, r3, #32
 8006c5a:	2b20      	cmp	r3, #32
 8006c5c:	d10e      	bne.n	8006c7c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	f003 0320 	and.w	r3, r3, #32
 8006c68:	2b20      	cmp	r3, #32
 8006c6a:	d107      	bne.n	8006c7c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f06f 0220 	mvn.w	r2, #32
 8006c74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 fac0 	bl	80071fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c7c:	bf00      	nop
 8006c7e:	3708      	adds	r7, #8
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}

08006c84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b084      	sub	sp, #16
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d101      	bne.n	8006c9c <HAL_TIM_ConfigClockSource+0x18>
 8006c98:	2302      	movs	r3, #2
 8006c9a:	e0a6      	b.n	8006dea <HAL_TIM_ConfigClockSource+0x166>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2202      	movs	r2, #2
 8006ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006cba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cc2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2b40      	cmp	r3, #64	; 0x40
 8006cd2:	d067      	beq.n	8006da4 <HAL_TIM_ConfigClockSource+0x120>
 8006cd4:	2b40      	cmp	r3, #64	; 0x40
 8006cd6:	d80b      	bhi.n	8006cf0 <HAL_TIM_ConfigClockSource+0x6c>
 8006cd8:	2b10      	cmp	r3, #16
 8006cda:	d073      	beq.n	8006dc4 <HAL_TIM_ConfigClockSource+0x140>
 8006cdc:	2b10      	cmp	r3, #16
 8006cde:	d802      	bhi.n	8006ce6 <HAL_TIM_ConfigClockSource+0x62>
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d06f      	beq.n	8006dc4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006ce4:	e078      	b.n	8006dd8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006ce6:	2b20      	cmp	r3, #32
 8006ce8:	d06c      	beq.n	8006dc4 <HAL_TIM_ConfigClockSource+0x140>
 8006cea:	2b30      	cmp	r3, #48	; 0x30
 8006cec:	d06a      	beq.n	8006dc4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006cee:	e073      	b.n	8006dd8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006cf0:	2b70      	cmp	r3, #112	; 0x70
 8006cf2:	d00d      	beq.n	8006d10 <HAL_TIM_ConfigClockSource+0x8c>
 8006cf4:	2b70      	cmp	r3, #112	; 0x70
 8006cf6:	d804      	bhi.n	8006d02 <HAL_TIM_ConfigClockSource+0x7e>
 8006cf8:	2b50      	cmp	r3, #80	; 0x50
 8006cfa:	d033      	beq.n	8006d64 <HAL_TIM_ConfigClockSource+0xe0>
 8006cfc:	2b60      	cmp	r3, #96	; 0x60
 8006cfe:	d041      	beq.n	8006d84 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006d00:	e06a      	b.n	8006dd8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006d02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d06:	d066      	beq.n	8006dd6 <HAL_TIM_ConfigClockSource+0x152>
 8006d08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d0c:	d017      	beq.n	8006d3e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006d0e:	e063      	b.n	8006dd8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6818      	ldr	r0, [r3, #0]
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	6899      	ldr	r1, [r3, #8]
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	685a      	ldr	r2, [r3, #4]
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	f000 f9aa 	bl	8007078 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006d32:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	68fa      	ldr	r2, [r7, #12]
 8006d3a:	609a      	str	r2, [r3, #8]
      break;
 8006d3c:	e04c      	b.n	8006dd8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6818      	ldr	r0, [r3, #0]
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	6899      	ldr	r1, [r3, #8]
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	685a      	ldr	r2, [r3, #4]
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	68db      	ldr	r3, [r3, #12]
 8006d4e:	f000 f993 	bl	8007078 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	689a      	ldr	r2, [r3, #8]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d60:	609a      	str	r2, [r3, #8]
      break;
 8006d62:	e039      	b.n	8006dd8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6818      	ldr	r0, [r3, #0]
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	6859      	ldr	r1, [r3, #4]
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	68db      	ldr	r3, [r3, #12]
 8006d70:	461a      	mov	r2, r3
 8006d72:	f000 f907 	bl	8006f84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	2150      	movs	r1, #80	; 0x50
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f000 f960 	bl	8007042 <TIM_ITRx_SetConfig>
      break;
 8006d82:	e029      	b.n	8006dd8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6818      	ldr	r0, [r3, #0]
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	6859      	ldr	r1, [r3, #4]
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	461a      	mov	r2, r3
 8006d92:	f000 f926 	bl	8006fe2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	2160      	movs	r1, #96	; 0x60
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f000 f950 	bl	8007042 <TIM_ITRx_SetConfig>
      break;
 8006da2:	e019      	b.n	8006dd8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6818      	ldr	r0, [r3, #0]
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	6859      	ldr	r1, [r3, #4]
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	461a      	mov	r2, r3
 8006db2:	f000 f8e7 	bl	8006f84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2140      	movs	r1, #64	; 0x40
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f000 f940 	bl	8007042 <TIM_ITRx_SetConfig>
      break;
 8006dc2:	e009      	b.n	8006dd8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4619      	mov	r1, r3
 8006dce:	4610      	mov	r0, r2
 8006dd0:	f000 f937 	bl	8007042 <TIM_ITRx_SetConfig>
      break;
 8006dd4:	e000      	b.n	8006dd8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006dd6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006de8:	2300      	movs	r3, #0
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3710      	adds	r7, #16
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}

08006df2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006df2:	b480      	push	{r7}
 8006df4:	b083      	sub	sp, #12
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006dfa:	bf00      	nop
 8006dfc:	370c      	adds	r7, #12
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr

08006e06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e06:	b480      	push	{r7}
 8006e08:	b083      	sub	sp, #12
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e0e:	bf00      	nop
 8006e10:	370c      	adds	r7, #12
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr

08006e1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e1a:	b480      	push	{r7}
 8006e1c:	b083      	sub	sp, #12
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e22:	bf00      	nop
 8006e24:	370c      	adds	r7, #12
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr

08006e2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e2e:	b480      	push	{r7}
 8006e30:	b083      	sub	sp, #12
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e36:	bf00      	nop
 8006e38:	370c      	adds	r7, #12
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr
	...

08006e44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b085      	sub	sp, #20
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	4a40      	ldr	r2, [pc, #256]	; (8006f58 <TIM_Base_SetConfig+0x114>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d013      	beq.n	8006e84 <TIM_Base_SetConfig+0x40>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e62:	d00f      	beq.n	8006e84 <TIM_Base_SetConfig+0x40>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	4a3d      	ldr	r2, [pc, #244]	; (8006f5c <TIM_Base_SetConfig+0x118>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d00b      	beq.n	8006e84 <TIM_Base_SetConfig+0x40>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	4a3c      	ldr	r2, [pc, #240]	; (8006f60 <TIM_Base_SetConfig+0x11c>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d007      	beq.n	8006e84 <TIM_Base_SetConfig+0x40>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	4a3b      	ldr	r2, [pc, #236]	; (8006f64 <TIM_Base_SetConfig+0x120>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d003      	beq.n	8006e84 <TIM_Base_SetConfig+0x40>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	4a3a      	ldr	r2, [pc, #232]	; (8006f68 <TIM_Base_SetConfig+0x124>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d108      	bne.n	8006e96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	68fa      	ldr	r2, [r7, #12]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	4a2f      	ldr	r2, [pc, #188]	; (8006f58 <TIM_Base_SetConfig+0x114>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d02b      	beq.n	8006ef6 <TIM_Base_SetConfig+0xb2>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ea4:	d027      	beq.n	8006ef6 <TIM_Base_SetConfig+0xb2>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	4a2c      	ldr	r2, [pc, #176]	; (8006f5c <TIM_Base_SetConfig+0x118>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d023      	beq.n	8006ef6 <TIM_Base_SetConfig+0xb2>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4a2b      	ldr	r2, [pc, #172]	; (8006f60 <TIM_Base_SetConfig+0x11c>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d01f      	beq.n	8006ef6 <TIM_Base_SetConfig+0xb2>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	4a2a      	ldr	r2, [pc, #168]	; (8006f64 <TIM_Base_SetConfig+0x120>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d01b      	beq.n	8006ef6 <TIM_Base_SetConfig+0xb2>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	4a29      	ldr	r2, [pc, #164]	; (8006f68 <TIM_Base_SetConfig+0x124>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d017      	beq.n	8006ef6 <TIM_Base_SetConfig+0xb2>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	4a28      	ldr	r2, [pc, #160]	; (8006f6c <TIM_Base_SetConfig+0x128>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d013      	beq.n	8006ef6 <TIM_Base_SetConfig+0xb2>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	4a27      	ldr	r2, [pc, #156]	; (8006f70 <TIM_Base_SetConfig+0x12c>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d00f      	beq.n	8006ef6 <TIM_Base_SetConfig+0xb2>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	4a26      	ldr	r2, [pc, #152]	; (8006f74 <TIM_Base_SetConfig+0x130>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d00b      	beq.n	8006ef6 <TIM_Base_SetConfig+0xb2>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	4a25      	ldr	r2, [pc, #148]	; (8006f78 <TIM_Base_SetConfig+0x134>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d007      	beq.n	8006ef6 <TIM_Base_SetConfig+0xb2>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	4a24      	ldr	r2, [pc, #144]	; (8006f7c <TIM_Base_SetConfig+0x138>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d003      	beq.n	8006ef6 <TIM_Base_SetConfig+0xb2>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4a23      	ldr	r2, [pc, #140]	; (8006f80 <TIM_Base_SetConfig+0x13c>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d108      	bne.n	8006f08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006efc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	68fa      	ldr	r2, [r7, #12]
 8006f04:	4313      	orrs	r3, r2
 8006f06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	695b      	ldr	r3, [r3, #20]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	68fa      	ldr	r2, [r7, #12]
 8006f1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	689a      	ldr	r2, [r3, #8]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	4a0a      	ldr	r2, [pc, #40]	; (8006f58 <TIM_Base_SetConfig+0x114>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d003      	beq.n	8006f3c <TIM_Base_SetConfig+0xf8>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	4a0c      	ldr	r2, [pc, #48]	; (8006f68 <TIM_Base_SetConfig+0x124>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d103      	bne.n	8006f44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	691a      	ldr	r2, [r3, #16]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2201      	movs	r2, #1
 8006f48:	615a      	str	r2, [r3, #20]
}
 8006f4a:	bf00      	nop
 8006f4c:	3714      	adds	r7, #20
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr
 8006f56:	bf00      	nop
 8006f58:	40010000 	.word	0x40010000
 8006f5c:	40000400 	.word	0x40000400
 8006f60:	40000800 	.word	0x40000800
 8006f64:	40000c00 	.word	0x40000c00
 8006f68:	40010400 	.word	0x40010400
 8006f6c:	40014000 	.word	0x40014000
 8006f70:	40014400 	.word	0x40014400
 8006f74:	40014800 	.word	0x40014800
 8006f78:	40001800 	.word	0x40001800
 8006f7c:	40001c00 	.word	0x40001c00
 8006f80:	40002000 	.word	0x40002000

08006f84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b087      	sub	sp, #28
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	60b9      	str	r1, [r7, #8]
 8006f8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6a1b      	ldr	r3, [r3, #32]
 8006f94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	6a1b      	ldr	r3, [r3, #32]
 8006f9a:	f023 0201 	bic.w	r2, r3, #1
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	699b      	ldr	r3, [r3, #24]
 8006fa6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006fae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	011b      	lsls	r3, r3, #4
 8006fb4:	693a      	ldr	r2, [r7, #16]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	f023 030a 	bic.w	r3, r3, #10
 8006fc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006fc2:	697a      	ldr	r2, [r7, #20]
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	693a      	ldr	r2, [r7, #16]
 8006fce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	697a      	ldr	r2, [r7, #20]
 8006fd4:	621a      	str	r2, [r3, #32]
}
 8006fd6:	bf00      	nop
 8006fd8:	371c      	adds	r7, #28
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr

08006fe2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fe2:	b480      	push	{r7}
 8006fe4:	b087      	sub	sp, #28
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	60f8      	str	r0, [r7, #12]
 8006fea:	60b9      	str	r1, [r7, #8]
 8006fec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	6a1b      	ldr	r3, [r3, #32]
 8006ff2:	f023 0210 	bic.w	r2, r3, #16
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	699b      	ldr	r3, [r3, #24]
 8006ffe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	6a1b      	ldr	r3, [r3, #32]
 8007004:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800700c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	031b      	lsls	r3, r3, #12
 8007012:	697a      	ldr	r2, [r7, #20]
 8007014:	4313      	orrs	r3, r2
 8007016:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800701e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	011b      	lsls	r3, r3, #4
 8007024:	693a      	ldr	r2, [r7, #16]
 8007026:	4313      	orrs	r3, r2
 8007028:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	697a      	ldr	r2, [r7, #20]
 800702e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	693a      	ldr	r2, [r7, #16]
 8007034:	621a      	str	r2, [r3, #32]
}
 8007036:	bf00      	nop
 8007038:	371c      	adds	r7, #28
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr

08007042 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007042:	b480      	push	{r7}
 8007044:	b085      	sub	sp, #20
 8007046:	af00      	add	r7, sp, #0
 8007048:	6078      	str	r0, [r7, #4]
 800704a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007058:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800705a:	683a      	ldr	r2, [r7, #0]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	4313      	orrs	r3, r2
 8007060:	f043 0307 	orr.w	r3, r3, #7
 8007064:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	68fa      	ldr	r2, [r7, #12]
 800706a:	609a      	str	r2, [r3, #8]
}
 800706c:	bf00      	nop
 800706e:	3714      	adds	r7, #20
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr

08007078 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007078:	b480      	push	{r7}
 800707a:	b087      	sub	sp, #28
 800707c:	af00      	add	r7, sp, #0
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	60b9      	str	r1, [r7, #8]
 8007082:	607a      	str	r2, [r7, #4]
 8007084:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007092:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	021a      	lsls	r2, r3, #8
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	431a      	orrs	r2, r3
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	4313      	orrs	r3, r2
 80070a0:	697a      	ldr	r2, [r7, #20]
 80070a2:	4313      	orrs	r3, r2
 80070a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	697a      	ldr	r2, [r7, #20]
 80070aa:	609a      	str	r2, [r3, #8]
}
 80070ac:	bf00      	nop
 80070ae:	371c      	adds	r7, #28
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b087      	sub	sp, #28
 80070bc:	af00      	add	r7, sp, #0
 80070be:	60f8      	str	r0, [r7, #12]
 80070c0:	60b9      	str	r1, [r7, #8]
 80070c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	f003 031f 	and.w	r3, r3, #31
 80070ca:	2201      	movs	r2, #1
 80070cc:	fa02 f303 	lsl.w	r3, r2, r3
 80070d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	6a1a      	ldr	r2, [r3, #32]
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	43db      	mvns	r3, r3
 80070da:	401a      	ands	r2, r3
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6a1a      	ldr	r2, [r3, #32]
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	f003 031f 	and.w	r3, r3, #31
 80070ea:	6879      	ldr	r1, [r7, #4]
 80070ec:	fa01 f303 	lsl.w	r3, r1, r3
 80070f0:	431a      	orrs	r2, r3
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	621a      	str	r2, [r3, #32]
}
 80070f6:	bf00      	nop
 80070f8:	371c      	adds	r7, #28
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr
	...

08007104 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007104:	b480      	push	{r7}
 8007106:	b085      	sub	sp, #20
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007114:	2b01      	cmp	r3, #1
 8007116:	d101      	bne.n	800711c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007118:	2302      	movs	r3, #2
 800711a:	e05a      	b.n	80071d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2201      	movs	r2, #1
 8007120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2202      	movs	r2, #2
 8007128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007142:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	68fa      	ldr	r2, [r7, #12]
 800714a:	4313      	orrs	r3, r2
 800714c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	68fa      	ldr	r2, [r7, #12]
 8007154:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a21      	ldr	r2, [pc, #132]	; (80071e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d022      	beq.n	80071a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007168:	d01d      	beq.n	80071a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a1d      	ldr	r2, [pc, #116]	; (80071e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d018      	beq.n	80071a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a1b      	ldr	r2, [pc, #108]	; (80071e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d013      	beq.n	80071a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a1a      	ldr	r2, [pc, #104]	; (80071ec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d00e      	beq.n	80071a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a18      	ldr	r2, [pc, #96]	; (80071f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d009      	beq.n	80071a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a17      	ldr	r2, [pc, #92]	; (80071f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d004      	beq.n	80071a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a15      	ldr	r2, [pc, #84]	; (80071f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d10c      	bne.n	80071c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	68ba      	ldr	r2, [r7, #8]
 80071b4:	4313      	orrs	r3, r2
 80071b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	68ba      	ldr	r2, [r7, #8]
 80071be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2201      	movs	r2, #1
 80071c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071d0:	2300      	movs	r3, #0
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3714      	adds	r7, #20
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr
 80071de:	bf00      	nop
 80071e0:	40010000 	.word	0x40010000
 80071e4:	40000400 	.word	0x40000400
 80071e8:	40000800 	.word	0x40000800
 80071ec:	40000c00 	.word	0x40000c00
 80071f0:	40010400 	.word	0x40010400
 80071f4:	40014000 	.word	0x40014000
 80071f8:	40001800 	.word	0x40001800

080071fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007204:	bf00      	nop
 8007206:	370c      	adds	r7, #12
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007218:	bf00      	nop
 800721a:	370c      	adds	r7, #12
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b082      	sub	sp, #8
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d101      	bne.n	8007236 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007232:	2301      	movs	r3, #1
 8007234:	e03f      	b.n	80072b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800723c:	b2db      	uxtb	r3, r3
 800723e:	2b00      	cmp	r3, #0
 8007240:	d106      	bne.n	8007250 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2200      	movs	r2, #0
 8007246:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f7fa fda6 	bl	8001d9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2224      	movs	r2, #36	; 0x24
 8007254:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	68da      	ldr	r2, [r3, #12]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007266:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f000 f829 	bl	80072c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	691a      	ldr	r2, [r3, #16]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800727c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	695a      	ldr	r2, [r3, #20]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800728c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	68da      	ldr	r2, [r3, #12]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800729c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2220      	movs	r2, #32
 80072a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2220      	movs	r2, #32
 80072b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80072b4:	2300      	movs	r3, #0
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3708      	adds	r7, #8
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}
	...

080072c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072c4:	b085      	sub	sp, #20
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	691b      	ldr	r3, [r3, #16]
 80072d0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	68da      	ldr	r2, [r3, #12]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	430a      	orrs	r2, r1
 80072de:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	689a      	ldr	r2, [r3, #8]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	691b      	ldr	r3, [r3, #16]
 80072e8:	431a      	orrs	r2, r3
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	695b      	ldr	r3, [r3, #20]
 80072ee:	431a      	orrs	r2, r3
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	69db      	ldr	r3, [r3, #28]
 80072f4:	4313      	orrs	r3, r2
 80072f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	68db      	ldr	r3, [r3, #12]
 80072fe:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007302:	f023 030c 	bic.w	r3, r3, #12
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	6812      	ldr	r2, [r2, #0]
 800730a:	68f9      	ldr	r1, [r7, #12]
 800730c:	430b      	orrs	r3, r1
 800730e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	695b      	ldr	r3, [r3, #20]
 8007316:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	699a      	ldr	r2, [r3, #24]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	430a      	orrs	r2, r1
 8007324:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	69db      	ldr	r3, [r3, #28]
 800732a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800732e:	f040 818b 	bne.w	8007648 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4ac1      	ldr	r2, [pc, #772]	; (800763c <UART_SetConfig+0x37c>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d005      	beq.n	8007348 <UART_SetConfig+0x88>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4abf      	ldr	r2, [pc, #764]	; (8007640 <UART_SetConfig+0x380>)
 8007342:	4293      	cmp	r3, r2
 8007344:	f040 80bd 	bne.w	80074c2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007348:	f7fd fc28 	bl	8004b9c <HAL_RCC_GetPCLK2Freq>
 800734c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	461d      	mov	r5, r3
 8007352:	f04f 0600 	mov.w	r6, #0
 8007356:	46a8      	mov	r8, r5
 8007358:	46b1      	mov	r9, r6
 800735a:	eb18 0308 	adds.w	r3, r8, r8
 800735e:	eb49 0409 	adc.w	r4, r9, r9
 8007362:	4698      	mov	r8, r3
 8007364:	46a1      	mov	r9, r4
 8007366:	eb18 0805 	adds.w	r8, r8, r5
 800736a:	eb49 0906 	adc.w	r9, r9, r6
 800736e:	f04f 0100 	mov.w	r1, #0
 8007372:	f04f 0200 	mov.w	r2, #0
 8007376:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800737a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800737e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007382:	4688      	mov	r8, r1
 8007384:	4691      	mov	r9, r2
 8007386:	eb18 0005 	adds.w	r0, r8, r5
 800738a:	eb49 0106 	adc.w	r1, r9, r6
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	461d      	mov	r5, r3
 8007394:	f04f 0600 	mov.w	r6, #0
 8007398:	196b      	adds	r3, r5, r5
 800739a:	eb46 0406 	adc.w	r4, r6, r6
 800739e:	461a      	mov	r2, r3
 80073a0:	4623      	mov	r3, r4
 80073a2:	f7f9 fc71 	bl	8000c88 <__aeabi_uldivmod>
 80073a6:	4603      	mov	r3, r0
 80073a8:	460c      	mov	r4, r1
 80073aa:	461a      	mov	r2, r3
 80073ac:	4ba5      	ldr	r3, [pc, #660]	; (8007644 <UART_SetConfig+0x384>)
 80073ae:	fba3 2302 	umull	r2, r3, r3, r2
 80073b2:	095b      	lsrs	r3, r3, #5
 80073b4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	461d      	mov	r5, r3
 80073bc:	f04f 0600 	mov.w	r6, #0
 80073c0:	46a9      	mov	r9, r5
 80073c2:	46b2      	mov	sl, r6
 80073c4:	eb19 0309 	adds.w	r3, r9, r9
 80073c8:	eb4a 040a 	adc.w	r4, sl, sl
 80073cc:	4699      	mov	r9, r3
 80073ce:	46a2      	mov	sl, r4
 80073d0:	eb19 0905 	adds.w	r9, r9, r5
 80073d4:	eb4a 0a06 	adc.w	sl, sl, r6
 80073d8:	f04f 0100 	mov.w	r1, #0
 80073dc:	f04f 0200 	mov.w	r2, #0
 80073e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80073e4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80073e8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80073ec:	4689      	mov	r9, r1
 80073ee:	4692      	mov	sl, r2
 80073f0:	eb19 0005 	adds.w	r0, r9, r5
 80073f4:	eb4a 0106 	adc.w	r1, sl, r6
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	461d      	mov	r5, r3
 80073fe:	f04f 0600 	mov.w	r6, #0
 8007402:	196b      	adds	r3, r5, r5
 8007404:	eb46 0406 	adc.w	r4, r6, r6
 8007408:	461a      	mov	r2, r3
 800740a:	4623      	mov	r3, r4
 800740c:	f7f9 fc3c 	bl	8000c88 <__aeabi_uldivmod>
 8007410:	4603      	mov	r3, r0
 8007412:	460c      	mov	r4, r1
 8007414:	461a      	mov	r2, r3
 8007416:	4b8b      	ldr	r3, [pc, #556]	; (8007644 <UART_SetConfig+0x384>)
 8007418:	fba3 1302 	umull	r1, r3, r3, r2
 800741c:	095b      	lsrs	r3, r3, #5
 800741e:	2164      	movs	r1, #100	; 0x64
 8007420:	fb01 f303 	mul.w	r3, r1, r3
 8007424:	1ad3      	subs	r3, r2, r3
 8007426:	00db      	lsls	r3, r3, #3
 8007428:	3332      	adds	r3, #50	; 0x32
 800742a:	4a86      	ldr	r2, [pc, #536]	; (8007644 <UART_SetConfig+0x384>)
 800742c:	fba2 2303 	umull	r2, r3, r2, r3
 8007430:	095b      	lsrs	r3, r3, #5
 8007432:	005b      	lsls	r3, r3, #1
 8007434:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007438:	4498      	add	r8, r3
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	461d      	mov	r5, r3
 800743e:	f04f 0600 	mov.w	r6, #0
 8007442:	46a9      	mov	r9, r5
 8007444:	46b2      	mov	sl, r6
 8007446:	eb19 0309 	adds.w	r3, r9, r9
 800744a:	eb4a 040a 	adc.w	r4, sl, sl
 800744e:	4699      	mov	r9, r3
 8007450:	46a2      	mov	sl, r4
 8007452:	eb19 0905 	adds.w	r9, r9, r5
 8007456:	eb4a 0a06 	adc.w	sl, sl, r6
 800745a:	f04f 0100 	mov.w	r1, #0
 800745e:	f04f 0200 	mov.w	r2, #0
 8007462:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007466:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800746a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800746e:	4689      	mov	r9, r1
 8007470:	4692      	mov	sl, r2
 8007472:	eb19 0005 	adds.w	r0, r9, r5
 8007476:	eb4a 0106 	adc.w	r1, sl, r6
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	461d      	mov	r5, r3
 8007480:	f04f 0600 	mov.w	r6, #0
 8007484:	196b      	adds	r3, r5, r5
 8007486:	eb46 0406 	adc.w	r4, r6, r6
 800748a:	461a      	mov	r2, r3
 800748c:	4623      	mov	r3, r4
 800748e:	f7f9 fbfb 	bl	8000c88 <__aeabi_uldivmod>
 8007492:	4603      	mov	r3, r0
 8007494:	460c      	mov	r4, r1
 8007496:	461a      	mov	r2, r3
 8007498:	4b6a      	ldr	r3, [pc, #424]	; (8007644 <UART_SetConfig+0x384>)
 800749a:	fba3 1302 	umull	r1, r3, r3, r2
 800749e:	095b      	lsrs	r3, r3, #5
 80074a0:	2164      	movs	r1, #100	; 0x64
 80074a2:	fb01 f303 	mul.w	r3, r1, r3
 80074a6:	1ad3      	subs	r3, r2, r3
 80074a8:	00db      	lsls	r3, r3, #3
 80074aa:	3332      	adds	r3, #50	; 0x32
 80074ac:	4a65      	ldr	r2, [pc, #404]	; (8007644 <UART_SetConfig+0x384>)
 80074ae:	fba2 2303 	umull	r2, r3, r2, r3
 80074b2:	095b      	lsrs	r3, r3, #5
 80074b4:	f003 0207 	and.w	r2, r3, #7
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4442      	add	r2, r8
 80074be:	609a      	str	r2, [r3, #8]
 80074c0:	e26f      	b.n	80079a2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80074c2:	f7fd fb57 	bl	8004b74 <HAL_RCC_GetPCLK1Freq>
 80074c6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	461d      	mov	r5, r3
 80074cc:	f04f 0600 	mov.w	r6, #0
 80074d0:	46a8      	mov	r8, r5
 80074d2:	46b1      	mov	r9, r6
 80074d4:	eb18 0308 	adds.w	r3, r8, r8
 80074d8:	eb49 0409 	adc.w	r4, r9, r9
 80074dc:	4698      	mov	r8, r3
 80074de:	46a1      	mov	r9, r4
 80074e0:	eb18 0805 	adds.w	r8, r8, r5
 80074e4:	eb49 0906 	adc.w	r9, r9, r6
 80074e8:	f04f 0100 	mov.w	r1, #0
 80074ec:	f04f 0200 	mov.w	r2, #0
 80074f0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80074f4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80074f8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80074fc:	4688      	mov	r8, r1
 80074fe:	4691      	mov	r9, r2
 8007500:	eb18 0005 	adds.w	r0, r8, r5
 8007504:	eb49 0106 	adc.w	r1, r9, r6
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	461d      	mov	r5, r3
 800750e:	f04f 0600 	mov.w	r6, #0
 8007512:	196b      	adds	r3, r5, r5
 8007514:	eb46 0406 	adc.w	r4, r6, r6
 8007518:	461a      	mov	r2, r3
 800751a:	4623      	mov	r3, r4
 800751c:	f7f9 fbb4 	bl	8000c88 <__aeabi_uldivmod>
 8007520:	4603      	mov	r3, r0
 8007522:	460c      	mov	r4, r1
 8007524:	461a      	mov	r2, r3
 8007526:	4b47      	ldr	r3, [pc, #284]	; (8007644 <UART_SetConfig+0x384>)
 8007528:	fba3 2302 	umull	r2, r3, r3, r2
 800752c:	095b      	lsrs	r3, r3, #5
 800752e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	461d      	mov	r5, r3
 8007536:	f04f 0600 	mov.w	r6, #0
 800753a:	46a9      	mov	r9, r5
 800753c:	46b2      	mov	sl, r6
 800753e:	eb19 0309 	adds.w	r3, r9, r9
 8007542:	eb4a 040a 	adc.w	r4, sl, sl
 8007546:	4699      	mov	r9, r3
 8007548:	46a2      	mov	sl, r4
 800754a:	eb19 0905 	adds.w	r9, r9, r5
 800754e:	eb4a 0a06 	adc.w	sl, sl, r6
 8007552:	f04f 0100 	mov.w	r1, #0
 8007556:	f04f 0200 	mov.w	r2, #0
 800755a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800755e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007562:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007566:	4689      	mov	r9, r1
 8007568:	4692      	mov	sl, r2
 800756a:	eb19 0005 	adds.w	r0, r9, r5
 800756e:	eb4a 0106 	adc.w	r1, sl, r6
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	461d      	mov	r5, r3
 8007578:	f04f 0600 	mov.w	r6, #0
 800757c:	196b      	adds	r3, r5, r5
 800757e:	eb46 0406 	adc.w	r4, r6, r6
 8007582:	461a      	mov	r2, r3
 8007584:	4623      	mov	r3, r4
 8007586:	f7f9 fb7f 	bl	8000c88 <__aeabi_uldivmod>
 800758a:	4603      	mov	r3, r0
 800758c:	460c      	mov	r4, r1
 800758e:	461a      	mov	r2, r3
 8007590:	4b2c      	ldr	r3, [pc, #176]	; (8007644 <UART_SetConfig+0x384>)
 8007592:	fba3 1302 	umull	r1, r3, r3, r2
 8007596:	095b      	lsrs	r3, r3, #5
 8007598:	2164      	movs	r1, #100	; 0x64
 800759a:	fb01 f303 	mul.w	r3, r1, r3
 800759e:	1ad3      	subs	r3, r2, r3
 80075a0:	00db      	lsls	r3, r3, #3
 80075a2:	3332      	adds	r3, #50	; 0x32
 80075a4:	4a27      	ldr	r2, [pc, #156]	; (8007644 <UART_SetConfig+0x384>)
 80075a6:	fba2 2303 	umull	r2, r3, r2, r3
 80075aa:	095b      	lsrs	r3, r3, #5
 80075ac:	005b      	lsls	r3, r3, #1
 80075ae:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80075b2:	4498      	add	r8, r3
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	461d      	mov	r5, r3
 80075b8:	f04f 0600 	mov.w	r6, #0
 80075bc:	46a9      	mov	r9, r5
 80075be:	46b2      	mov	sl, r6
 80075c0:	eb19 0309 	adds.w	r3, r9, r9
 80075c4:	eb4a 040a 	adc.w	r4, sl, sl
 80075c8:	4699      	mov	r9, r3
 80075ca:	46a2      	mov	sl, r4
 80075cc:	eb19 0905 	adds.w	r9, r9, r5
 80075d0:	eb4a 0a06 	adc.w	sl, sl, r6
 80075d4:	f04f 0100 	mov.w	r1, #0
 80075d8:	f04f 0200 	mov.w	r2, #0
 80075dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80075e0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80075e4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80075e8:	4689      	mov	r9, r1
 80075ea:	4692      	mov	sl, r2
 80075ec:	eb19 0005 	adds.w	r0, r9, r5
 80075f0:	eb4a 0106 	adc.w	r1, sl, r6
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	461d      	mov	r5, r3
 80075fa:	f04f 0600 	mov.w	r6, #0
 80075fe:	196b      	adds	r3, r5, r5
 8007600:	eb46 0406 	adc.w	r4, r6, r6
 8007604:	461a      	mov	r2, r3
 8007606:	4623      	mov	r3, r4
 8007608:	f7f9 fb3e 	bl	8000c88 <__aeabi_uldivmod>
 800760c:	4603      	mov	r3, r0
 800760e:	460c      	mov	r4, r1
 8007610:	461a      	mov	r2, r3
 8007612:	4b0c      	ldr	r3, [pc, #48]	; (8007644 <UART_SetConfig+0x384>)
 8007614:	fba3 1302 	umull	r1, r3, r3, r2
 8007618:	095b      	lsrs	r3, r3, #5
 800761a:	2164      	movs	r1, #100	; 0x64
 800761c:	fb01 f303 	mul.w	r3, r1, r3
 8007620:	1ad3      	subs	r3, r2, r3
 8007622:	00db      	lsls	r3, r3, #3
 8007624:	3332      	adds	r3, #50	; 0x32
 8007626:	4a07      	ldr	r2, [pc, #28]	; (8007644 <UART_SetConfig+0x384>)
 8007628:	fba2 2303 	umull	r2, r3, r2, r3
 800762c:	095b      	lsrs	r3, r3, #5
 800762e:	f003 0207 	and.w	r2, r3, #7
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4442      	add	r2, r8
 8007638:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800763a:	e1b2      	b.n	80079a2 <UART_SetConfig+0x6e2>
 800763c:	40011000 	.word	0x40011000
 8007640:	40011400 	.word	0x40011400
 8007644:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4ad7      	ldr	r2, [pc, #860]	; (80079ac <UART_SetConfig+0x6ec>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d005      	beq.n	800765e <UART_SetConfig+0x39e>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4ad6      	ldr	r2, [pc, #856]	; (80079b0 <UART_SetConfig+0x6f0>)
 8007658:	4293      	cmp	r3, r2
 800765a:	f040 80d1 	bne.w	8007800 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800765e:	f7fd fa9d 	bl	8004b9c <HAL_RCC_GetPCLK2Freq>
 8007662:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	469a      	mov	sl, r3
 8007668:	f04f 0b00 	mov.w	fp, #0
 800766c:	46d0      	mov	r8, sl
 800766e:	46d9      	mov	r9, fp
 8007670:	eb18 0308 	adds.w	r3, r8, r8
 8007674:	eb49 0409 	adc.w	r4, r9, r9
 8007678:	4698      	mov	r8, r3
 800767a:	46a1      	mov	r9, r4
 800767c:	eb18 080a 	adds.w	r8, r8, sl
 8007680:	eb49 090b 	adc.w	r9, r9, fp
 8007684:	f04f 0100 	mov.w	r1, #0
 8007688:	f04f 0200 	mov.w	r2, #0
 800768c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007690:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007694:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007698:	4688      	mov	r8, r1
 800769a:	4691      	mov	r9, r2
 800769c:	eb1a 0508 	adds.w	r5, sl, r8
 80076a0:	eb4b 0609 	adc.w	r6, fp, r9
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	4619      	mov	r1, r3
 80076aa:	f04f 0200 	mov.w	r2, #0
 80076ae:	f04f 0300 	mov.w	r3, #0
 80076b2:	f04f 0400 	mov.w	r4, #0
 80076b6:	0094      	lsls	r4, r2, #2
 80076b8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80076bc:	008b      	lsls	r3, r1, #2
 80076be:	461a      	mov	r2, r3
 80076c0:	4623      	mov	r3, r4
 80076c2:	4628      	mov	r0, r5
 80076c4:	4631      	mov	r1, r6
 80076c6:	f7f9 fadf 	bl	8000c88 <__aeabi_uldivmod>
 80076ca:	4603      	mov	r3, r0
 80076cc:	460c      	mov	r4, r1
 80076ce:	461a      	mov	r2, r3
 80076d0:	4bb8      	ldr	r3, [pc, #736]	; (80079b4 <UART_SetConfig+0x6f4>)
 80076d2:	fba3 2302 	umull	r2, r3, r3, r2
 80076d6:	095b      	lsrs	r3, r3, #5
 80076d8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	469b      	mov	fp, r3
 80076e0:	f04f 0c00 	mov.w	ip, #0
 80076e4:	46d9      	mov	r9, fp
 80076e6:	46e2      	mov	sl, ip
 80076e8:	eb19 0309 	adds.w	r3, r9, r9
 80076ec:	eb4a 040a 	adc.w	r4, sl, sl
 80076f0:	4699      	mov	r9, r3
 80076f2:	46a2      	mov	sl, r4
 80076f4:	eb19 090b 	adds.w	r9, r9, fp
 80076f8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80076fc:	f04f 0100 	mov.w	r1, #0
 8007700:	f04f 0200 	mov.w	r2, #0
 8007704:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007708:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800770c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007710:	4689      	mov	r9, r1
 8007712:	4692      	mov	sl, r2
 8007714:	eb1b 0509 	adds.w	r5, fp, r9
 8007718:	eb4c 060a 	adc.w	r6, ip, sl
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	4619      	mov	r1, r3
 8007722:	f04f 0200 	mov.w	r2, #0
 8007726:	f04f 0300 	mov.w	r3, #0
 800772a:	f04f 0400 	mov.w	r4, #0
 800772e:	0094      	lsls	r4, r2, #2
 8007730:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007734:	008b      	lsls	r3, r1, #2
 8007736:	461a      	mov	r2, r3
 8007738:	4623      	mov	r3, r4
 800773a:	4628      	mov	r0, r5
 800773c:	4631      	mov	r1, r6
 800773e:	f7f9 faa3 	bl	8000c88 <__aeabi_uldivmod>
 8007742:	4603      	mov	r3, r0
 8007744:	460c      	mov	r4, r1
 8007746:	461a      	mov	r2, r3
 8007748:	4b9a      	ldr	r3, [pc, #616]	; (80079b4 <UART_SetConfig+0x6f4>)
 800774a:	fba3 1302 	umull	r1, r3, r3, r2
 800774e:	095b      	lsrs	r3, r3, #5
 8007750:	2164      	movs	r1, #100	; 0x64
 8007752:	fb01 f303 	mul.w	r3, r1, r3
 8007756:	1ad3      	subs	r3, r2, r3
 8007758:	011b      	lsls	r3, r3, #4
 800775a:	3332      	adds	r3, #50	; 0x32
 800775c:	4a95      	ldr	r2, [pc, #596]	; (80079b4 <UART_SetConfig+0x6f4>)
 800775e:	fba2 2303 	umull	r2, r3, r2, r3
 8007762:	095b      	lsrs	r3, r3, #5
 8007764:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007768:	4498      	add	r8, r3
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	469b      	mov	fp, r3
 800776e:	f04f 0c00 	mov.w	ip, #0
 8007772:	46d9      	mov	r9, fp
 8007774:	46e2      	mov	sl, ip
 8007776:	eb19 0309 	adds.w	r3, r9, r9
 800777a:	eb4a 040a 	adc.w	r4, sl, sl
 800777e:	4699      	mov	r9, r3
 8007780:	46a2      	mov	sl, r4
 8007782:	eb19 090b 	adds.w	r9, r9, fp
 8007786:	eb4a 0a0c 	adc.w	sl, sl, ip
 800778a:	f04f 0100 	mov.w	r1, #0
 800778e:	f04f 0200 	mov.w	r2, #0
 8007792:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007796:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800779a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800779e:	4689      	mov	r9, r1
 80077a0:	4692      	mov	sl, r2
 80077a2:	eb1b 0509 	adds.w	r5, fp, r9
 80077a6:	eb4c 060a 	adc.w	r6, ip, sl
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	4619      	mov	r1, r3
 80077b0:	f04f 0200 	mov.w	r2, #0
 80077b4:	f04f 0300 	mov.w	r3, #0
 80077b8:	f04f 0400 	mov.w	r4, #0
 80077bc:	0094      	lsls	r4, r2, #2
 80077be:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80077c2:	008b      	lsls	r3, r1, #2
 80077c4:	461a      	mov	r2, r3
 80077c6:	4623      	mov	r3, r4
 80077c8:	4628      	mov	r0, r5
 80077ca:	4631      	mov	r1, r6
 80077cc:	f7f9 fa5c 	bl	8000c88 <__aeabi_uldivmod>
 80077d0:	4603      	mov	r3, r0
 80077d2:	460c      	mov	r4, r1
 80077d4:	461a      	mov	r2, r3
 80077d6:	4b77      	ldr	r3, [pc, #476]	; (80079b4 <UART_SetConfig+0x6f4>)
 80077d8:	fba3 1302 	umull	r1, r3, r3, r2
 80077dc:	095b      	lsrs	r3, r3, #5
 80077de:	2164      	movs	r1, #100	; 0x64
 80077e0:	fb01 f303 	mul.w	r3, r1, r3
 80077e4:	1ad3      	subs	r3, r2, r3
 80077e6:	011b      	lsls	r3, r3, #4
 80077e8:	3332      	adds	r3, #50	; 0x32
 80077ea:	4a72      	ldr	r2, [pc, #456]	; (80079b4 <UART_SetConfig+0x6f4>)
 80077ec:	fba2 2303 	umull	r2, r3, r2, r3
 80077f0:	095b      	lsrs	r3, r3, #5
 80077f2:	f003 020f 	and.w	r2, r3, #15
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4442      	add	r2, r8
 80077fc:	609a      	str	r2, [r3, #8]
 80077fe:	e0d0      	b.n	80079a2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007800:	f7fd f9b8 	bl	8004b74 <HAL_RCC_GetPCLK1Freq>
 8007804:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	469a      	mov	sl, r3
 800780a:	f04f 0b00 	mov.w	fp, #0
 800780e:	46d0      	mov	r8, sl
 8007810:	46d9      	mov	r9, fp
 8007812:	eb18 0308 	adds.w	r3, r8, r8
 8007816:	eb49 0409 	adc.w	r4, r9, r9
 800781a:	4698      	mov	r8, r3
 800781c:	46a1      	mov	r9, r4
 800781e:	eb18 080a 	adds.w	r8, r8, sl
 8007822:	eb49 090b 	adc.w	r9, r9, fp
 8007826:	f04f 0100 	mov.w	r1, #0
 800782a:	f04f 0200 	mov.w	r2, #0
 800782e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007832:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007836:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800783a:	4688      	mov	r8, r1
 800783c:	4691      	mov	r9, r2
 800783e:	eb1a 0508 	adds.w	r5, sl, r8
 8007842:	eb4b 0609 	adc.w	r6, fp, r9
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	4619      	mov	r1, r3
 800784c:	f04f 0200 	mov.w	r2, #0
 8007850:	f04f 0300 	mov.w	r3, #0
 8007854:	f04f 0400 	mov.w	r4, #0
 8007858:	0094      	lsls	r4, r2, #2
 800785a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800785e:	008b      	lsls	r3, r1, #2
 8007860:	461a      	mov	r2, r3
 8007862:	4623      	mov	r3, r4
 8007864:	4628      	mov	r0, r5
 8007866:	4631      	mov	r1, r6
 8007868:	f7f9 fa0e 	bl	8000c88 <__aeabi_uldivmod>
 800786c:	4603      	mov	r3, r0
 800786e:	460c      	mov	r4, r1
 8007870:	461a      	mov	r2, r3
 8007872:	4b50      	ldr	r3, [pc, #320]	; (80079b4 <UART_SetConfig+0x6f4>)
 8007874:	fba3 2302 	umull	r2, r3, r3, r2
 8007878:	095b      	lsrs	r3, r3, #5
 800787a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	469b      	mov	fp, r3
 8007882:	f04f 0c00 	mov.w	ip, #0
 8007886:	46d9      	mov	r9, fp
 8007888:	46e2      	mov	sl, ip
 800788a:	eb19 0309 	adds.w	r3, r9, r9
 800788e:	eb4a 040a 	adc.w	r4, sl, sl
 8007892:	4699      	mov	r9, r3
 8007894:	46a2      	mov	sl, r4
 8007896:	eb19 090b 	adds.w	r9, r9, fp
 800789a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800789e:	f04f 0100 	mov.w	r1, #0
 80078a2:	f04f 0200 	mov.w	r2, #0
 80078a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80078aa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80078ae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80078b2:	4689      	mov	r9, r1
 80078b4:	4692      	mov	sl, r2
 80078b6:	eb1b 0509 	adds.w	r5, fp, r9
 80078ba:	eb4c 060a 	adc.w	r6, ip, sl
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	4619      	mov	r1, r3
 80078c4:	f04f 0200 	mov.w	r2, #0
 80078c8:	f04f 0300 	mov.w	r3, #0
 80078cc:	f04f 0400 	mov.w	r4, #0
 80078d0:	0094      	lsls	r4, r2, #2
 80078d2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80078d6:	008b      	lsls	r3, r1, #2
 80078d8:	461a      	mov	r2, r3
 80078da:	4623      	mov	r3, r4
 80078dc:	4628      	mov	r0, r5
 80078de:	4631      	mov	r1, r6
 80078e0:	f7f9 f9d2 	bl	8000c88 <__aeabi_uldivmod>
 80078e4:	4603      	mov	r3, r0
 80078e6:	460c      	mov	r4, r1
 80078e8:	461a      	mov	r2, r3
 80078ea:	4b32      	ldr	r3, [pc, #200]	; (80079b4 <UART_SetConfig+0x6f4>)
 80078ec:	fba3 1302 	umull	r1, r3, r3, r2
 80078f0:	095b      	lsrs	r3, r3, #5
 80078f2:	2164      	movs	r1, #100	; 0x64
 80078f4:	fb01 f303 	mul.w	r3, r1, r3
 80078f8:	1ad3      	subs	r3, r2, r3
 80078fa:	011b      	lsls	r3, r3, #4
 80078fc:	3332      	adds	r3, #50	; 0x32
 80078fe:	4a2d      	ldr	r2, [pc, #180]	; (80079b4 <UART_SetConfig+0x6f4>)
 8007900:	fba2 2303 	umull	r2, r3, r2, r3
 8007904:	095b      	lsrs	r3, r3, #5
 8007906:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800790a:	4498      	add	r8, r3
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	469b      	mov	fp, r3
 8007910:	f04f 0c00 	mov.w	ip, #0
 8007914:	46d9      	mov	r9, fp
 8007916:	46e2      	mov	sl, ip
 8007918:	eb19 0309 	adds.w	r3, r9, r9
 800791c:	eb4a 040a 	adc.w	r4, sl, sl
 8007920:	4699      	mov	r9, r3
 8007922:	46a2      	mov	sl, r4
 8007924:	eb19 090b 	adds.w	r9, r9, fp
 8007928:	eb4a 0a0c 	adc.w	sl, sl, ip
 800792c:	f04f 0100 	mov.w	r1, #0
 8007930:	f04f 0200 	mov.w	r2, #0
 8007934:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007938:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800793c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007940:	4689      	mov	r9, r1
 8007942:	4692      	mov	sl, r2
 8007944:	eb1b 0509 	adds.w	r5, fp, r9
 8007948:	eb4c 060a 	adc.w	r6, ip, sl
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	4619      	mov	r1, r3
 8007952:	f04f 0200 	mov.w	r2, #0
 8007956:	f04f 0300 	mov.w	r3, #0
 800795a:	f04f 0400 	mov.w	r4, #0
 800795e:	0094      	lsls	r4, r2, #2
 8007960:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007964:	008b      	lsls	r3, r1, #2
 8007966:	461a      	mov	r2, r3
 8007968:	4623      	mov	r3, r4
 800796a:	4628      	mov	r0, r5
 800796c:	4631      	mov	r1, r6
 800796e:	f7f9 f98b 	bl	8000c88 <__aeabi_uldivmod>
 8007972:	4603      	mov	r3, r0
 8007974:	460c      	mov	r4, r1
 8007976:	461a      	mov	r2, r3
 8007978:	4b0e      	ldr	r3, [pc, #56]	; (80079b4 <UART_SetConfig+0x6f4>)
 800797a:	fba3 1302 	umull	r1, r3, r3, r2
 800797e:	095b      	lsrs	r3, r3, #5
 8007980:	2164      	movs	r1, #100	; 0x64
 8007982:	fb01 f303 	mul.w	r3, r1, r3
 8007986:	1ad3      	subs	r3, r2, r3
 8007988:	011b      	lsls	r3, r3, #4
 800798a:	3332      	adds	r3, #50	; 0x32
 800798c:	4a09      	ldr	r2, [pc, #36]	; (80079b4 <UART_SetConfig+0x6f4>)
 800798e:	fba2 2303 	umull	r2, r3, r2, r3
 8007992:	095b      	lsrs	r3, r3, #5
 8007994:	f003 020f 	and.w	r2, r3, #15
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4442      	add	r2, r8
 800799e:	609a      	str	r2, [r3, #8]
}
 80079a0:	e7ff      	b.n	80079a2 <UART_SetConfig+0x6e2>
 80079a2:	bf00      	nop
 80079a4:	3714      	adds	r7, #20
 80079a6:	46bd      	mov	sp, r7
 80079a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079ac:	40011000 	.word	0x40011000
 80079b0:	40011400 	.word	0x40011400
 80079b4:	51eb851f 	.word	0x51eb851f

080079b8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80079b8:	b084      	sub	sp, #16
 80079ba:	b480      	push	{r7}
 80079bc:	b085      	sub	sp, #20
 80079be:	af00      	add	r7, sp, #0
 80079c0:	6078      	str	r0, [r7, #4]
 80079c2:	f107 001c 	add.w	r0, r7, #28
 80079c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80079ca:	2300      	movs	r3, #0
 80079cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80079ce:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80079d0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80079d2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80079d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80079d6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80079d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80079da:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80079dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80079de:	431a      	orrs	r2, r3
             Init.ClockDiv
 80079e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80079e2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80079e4:	68fa      	ldr	r2, [r7, #12]
 80079e6:	4313      	orrs	r3, r2
 80079e8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80079f2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80079f6:	68fa      	ldr	r2, [r7, #12]
 80079f8:	431a      	orrs	r2, r3
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80079fe:	2300      	movs	r3, #0
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3714      	adds	r7, #20
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	b004      	add	sp, #16
 8007a0c:	4770      	bx	lr

08007a0e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8007a0e:	b480      	push	{r7}
 8007a10:	b083      	sub	sp, #12
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	370c      	adds	r7, #12
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr

08007a28 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8007a28:	b480      	push	{r7}
 8007a2a:	b083      	sub	sp, #12
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	681a      	ldr	r2, [r3, #0]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007a3c:	2300      	movs	r3, #0
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	370c      	adds	r7, #12
 8007a42:	46bd      	mov	sp, r7
 8007a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a48:	4770      	bx	lr

08007a4a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8007a4a:	b580      	push	{r7, lr}
 8007a4c:	b082      	sub	sp, #8
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2203      	movs	r2, #3
 8007a56:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8007a58:	2002      	movs	r0, #2
 8007a5a:	f7fa fb01 	bl	8002060 <HAL_Delay>
  
  return HAL_OK;
 8007a5e:	2300      	movs	r3, #0
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3708      	adds	r7, #8
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}

08007a68 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b083      	sub	sp, #12
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f003 0303 	and.w	r3, r3, #3
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	370c      	adds	r7, #12
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr

08007a84 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b085      	sub	sp, #20
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007aa2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007aa8:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007aae:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007ab0:	68fa      	ldr	r2, [r7, #12]
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	68db      	ldr	r3, [r3, #12]
 8007aba:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007abe:	f023 030f 	bic.w	r3, r3, #15
 8007ac2:	68fa      	ldr	r2, [r7, #12]
 8007ac4:	431a      	orrs	r2, r3
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8007aca:	2300      	movs	r3, #0
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3714      	adds	r7, #20
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr

08007ad8 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	691b      	ldr	r3, [r3, #16]
 8007ae4:	b2db      	uxtb	r3, r3
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	370c      	adds	r7, #12
 8007aea:	46bd      	mov	sp, r7
 8007aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af0:	4770      	bx	lr

08007af2 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8007af2:	b480      	push	{r7}
 8007af4:	b085      	sub	sp, #20
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	6078      	str	r0, [r7, #4]
 8007afa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	3314      	adds	r3, #20
 8007b00:	461a      	mov	r2, r3
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	4413      	add	r3, r2
 8007b06:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
}  
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3714      	adds	r7, #20
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b085      	sub	sp, #20
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007b22:	2300      	movs	r3, #0
 8007b24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	685a      	ldr	r2, [r3, #4]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007b3e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8007b44:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007b4a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007b4c:	68fa      	ldr	r2, [r7, #12]
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b56:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	431a      	orrs	r2, r3
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007b62:	2300      	movs	r3, #0

}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3714      	adds	r7, #20
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b088      	sub	sp, #32
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007b7e:	2310      	movs	r3, #16
 8007b80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007b82:	2340      	movs	r3, #64	; 0x40
 8007b84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007b86:	2300      	movs	r3, #0
 8007b88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007b8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b8e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007b90:	f107 0308 	add.w	r3, r7, #8
 8007b94:	4619      	mov	r1, r3
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f7ff ff74 	bl	8007a84 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8007b9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ba0:	2110      	movs	r1, #16
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 fa40 	bl	8008028 <SDMMC_GetCmdResp1>
 8007ba8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007baa:	69fb      	ldr	r3, [r7, #28]
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3720      	adds	r7, #32
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b088      	sub	sp, #32
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007bc2:	2311      	movs	r3, #17
 8007bc4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007bc6:	2340      	movs	r3, #64	; 0x40
 8007bc8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007bce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007bd2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007bd4:	f107 0308 	add.w	r3, r7, #8
 8007bd8:	4619      	mov	r1, r3
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f7ff ff52 	bl	8007a84 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007be4:	2111      	movs	r1, #17
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 fa1e 	bl	8008028 <SDMMC_GetCmdResp1>
 8007bec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007bee:	69fb      	ldr	r3, [r7, #28]
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3720      	adds	r7, #32
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b088      	sub	sp, #32
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007c06:	2312      	movs	r3, #18
 8007c08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007c0a:	2340      	movs	r3, #64	; 0x40
 8007c0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007c12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c16:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007c18:	f107 0308 	add.w	r3, r7, #8
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f7ff ff30 	bl	8007a84 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c28:	2112      	movs	r1, #18
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 f9fc 	bl	8008028 <SDMMC_GetCmdResp1>
 8007c30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007c32:	69fb      	ldr	r3, [r7, #28]
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3720      	adds	r7, #32
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}

08007c3c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b088      	sub	sp, #32
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007c4a:	2318      	movs	r3, #24
 8007c4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007c4e:	2340      	movs	r3, #64	; 0x40
 8007c50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007c52:	2300      	movs	r3, #0
 8007c54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007c56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c5a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007c5c:	f107 0308 	add.w	r3, r7, #8
 8007c60:	4619      	mov	r1, r3
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f7ff ff0e 	bl	8007a84 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c6c:	2118      	movs	r1, #24
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 f9da 	bl	8008028 <SDMMC_GetCmdResp1>
 8007c74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007c76:	69fb      	ldr	r3, [r7, #28]
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3720      	adds	r7, #32
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b088      	sub	sp, #32
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007c8e:	2319      	movs	r3, #25
 8007c90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007c92:	2340      	movs	r3, #64	; 0x40
 8007c94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007c96:	2300      	movs	r3, #0
 8007c98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007c9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c9e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007ca0:	f107 0308 	add.w	r3, r7, #8
 8007ca4:	4619      	mov	r1, r3
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f7ff feec 	bl	8007a84 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cb0:	2119      	movs	r1, #25
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 f9b8 	bl	8008028 <SDMMC_GetCmdResp1>
 8007cb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007cba:	69fb      	ldr	r3, [r7, #28]
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3720      	adds	r7, #32
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b088      	sub	sp, #32
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007cd0:	230c      	movs	r3, #12
 8007cd2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007cd4:	2340      	movs	r3, #64	; 0x40
 8007cd6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007cdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ce0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007ce2:	f107 0308 	add.w	r3, r7, #8
 8007ce6:	4619      	mov	r1, r3
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f7ff fecb 	bl	8007a84 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8007cee:	4a05      	ldr	r2, [pc, #20]	; (8007d04 <SDMMC_CmdStopTransfer+0x40>)
 8007cf0:	210c      	movs	r1, #12
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 f998 	bl	8008028 <SDMMC_GetCmdResp1>
 8007cf8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007cfa:	69fb      	ldr	r3, [r7, #28]
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3720      	adds	r7, #32
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}
 8007d04:	05f5e100 	.word	0x05f5e100

08007d08 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b08a      	sub	sp, #40	; 0x28
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	60f8      	str	r0, [r7, #12]
 8007d10:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007d18:	2307      	movs	r3, #7
 8007d1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007d1c:	2340      	movs	r3, #64	; 0x40
 8007d1e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007d20:	2300      	movs	r3, #0
 8007d22:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007d24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d28:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007d2a:	f107 0310 	add.w	r3, r7, #16
 8007d2e:	4619      	mov	r1, r3
 8007d30:	68f8      	ldr	r0, [r7, #12]
 8007d32:	f7ff fea7 	bl	8007a84 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8007d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d3a:	2107      	movs	r1, #7
 8007d3c:	68f8      	ldr	r0, [r7, #12]
 8007d3e:	f000 f973 	bl	8008028 <SDMMC_GetCmdResp1>
 8007d42:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8007d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3728      	adds	r7, #40	; 0x28
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}

08007d4e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8007d4e:	b580      	push	{r7, lr}
 8007d50:	b088      	sub	sp, #32
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8007d56:	2300      	movs	r3, #0
 8007d58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007d62:	2300      	movs	r3, #0
 8007d64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007d66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d6a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007d6c:	f107 0308 	add.w	r3, r7, #8
 8007d70:	4619      	mov	r1, r3
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f7ff fe86 	bl	8007a84 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f000 f92d 	bl	8007fd8 <SDMMC_GetCmdError>
 8007d7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007d80:	69fb      	ldr	r3, [r7, #28]
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3720      	adds	r7, #32
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}

08007d8a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8007d8a:	b580      	push	{r7, lr}
 8007d8c:	b088      	sub	sp, #32
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007d92:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007d96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007d98:	2308      	movs	r3, #8
 8007d9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007d9c:	2340      	movs	r3, #64	; 0x40
 8007d9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007da0:	2300      	movs	r3, #0
 8007da2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007da4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007da8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007daa:	f107 0308 	add.w	r3, r7, #8
 8007dae:	4619      	mov	r1, r3
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f7ff fe67 	bl	8007a84 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 fb16 	bl	80083e8 <SDMMC_GetCmdResp7>
 8007dbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007dbe:	69fb      	ldr	r3, [r7, #28]
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3720      	adds	r7, #32
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b088      	sub	sp, #32
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007dd6:	2337      	movs	r3, #55	; 0x37
 8007dd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007dda:	2340      	movs	r3, #64	; 0x40
 8007ddc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007dde:	2300      	movs	r3, #0
 8007de0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007de2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007de6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007de8:	f107 0308 	add.w	r3, r7, #8
 8007dec:	4619      	mov	r1, r3
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f7ff fe48 	bl	8007a84 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8007df4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007df8:	2137      	movs	r1, #55	; 0x37
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 f914 	bl	8008028 <SDMMC_GetCmdResp1>
 8007e00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007e02:	69fb      	ldr	r3, [r7, #28]
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3720      	adds	r7, #32
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b088      	sub	sp, #32
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007e1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007e22:	2329      	movs	r3, #41	; 0x29
 8007e24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007e26:	2340      	movs	r3, #64	; 0x40
 8007e28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007e2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e32:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007e34:	f107 0308 	add.w	r3, r7, #8
 8007e38:	4619      	mov	r1, r3
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f7ff fe22 	bl	8007a84 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 fa23 	bl	800828c <SDMMC_GetCmdResp3>
 8007e46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007e48:	69fb      	ldr	r3, [r7, #28]
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3720      	adds	r7, #32
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}

08007e52 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8007e52:	b580      	push	{r7, lr}
 8007e54:	b088      	sub	sp, #32
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	6078      	str	r0, [r7, #4]
 8007e5a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8007e60:	2306      	movs	r3, #6
 8007e62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007e64:	2340      	movs	r3, #64	; 0x40
 8007e66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007e6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e70:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007e72:	f107 0308 	add.w	r3, r7, #8
 8007e76:	4619      	mov	r1, r3
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f7ff fe03 	bl	8007a84 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8007e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e82:	2106      	movs	r1, #6
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f000 f8cf 	bl	8008028 <SDMMC_GetCmdResp1>
 8007e8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007e8c:	69fb      	ldr	r3, [r7, #28]
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3720      	adds	r7, #32
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}

08007e96 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8007e96:	b580      	push	{r7, lr}
 8007e98:	b088      	sub	sp, #32
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007ea2:	2333      	movs	r3, #51	; 0x33
 8007ea4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007ea6:	2340      	movs	r3, #64	; 0x40
 8007ea8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007eae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007eb2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007eb4:	f107 0308 	add.w	r3, r7, #8
 8007eb8:	4619      	mov	r1, r3
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f7ff fde2 	bl	8007a84 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8007ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ec4:	2133      	movs	r1, #51	; 0x33
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 f8ae 	bl	8008028 <SDMMC_GetCmdResp1>
 8007ecc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ece:	69fb      	ldr	r3, [r7, #28]
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3720      	adds	r7, #32
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b088      	sub	sp, #32
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007ee4:	2302      	movs	r3, #2
 8007ee6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007ee8:	23c0      	movs	r3, #192	; 0xc0
 8007eea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007eec:	2300      	movs	r3, #0
 8007eee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007ef0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ef4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007ef6:	f107 0308 	add.w	r3, r7, #8
 8007efa:	4619      	mov	r1, r3
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f7ff fdc1 	bl	8007a84 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 f97c 	bl	8008200 <SDMMC_GetCmdResp2>
 8007f08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f0a:	69fb      	ldr	r3, [r7, #28]
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3720      	adds	r7, #32
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b088      	sub	sp, #32
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007f22:	2309      	movs	r3, #9
 8007f24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007f26:	23c0      	movs	r3, #192	; 0xc0
 8007f28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007f2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f32:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007f34:	f107 0308 	add.w	r3, r7, #8
 8007f38:	4619      	mov	r1, r3
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f7ff fda2 	bl	8007a84 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f000 f95d 	bl	8008200 <SDMMC_GetCmdResp2>
 8007f46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f48:	69fb      	ldr	r3, [r7, #28]
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3720      	adds	r7, #32
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}

08007f52 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8007f52:	b580      	push	{r7, lr}
 8007f54:	b088      	sub	sp, #32
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
 8007f5a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007f60:	2303      	movs	r3, #3
 8007f62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007f64:	2340      	movs	r3, #64	; 0x40
 8007f66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007f6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f70:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007f72:	f107 0308 	add.w	r3, r7, #8
 8007f76:	4619      	mov	r1, r3
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f7ff fd83 	bl	8007a84 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007f7e:	683a      	ldr	r2, [r7, #0]
 8007f80:	2103      	movs	r1, #3
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 f9bc 	bl	8008300 <SDMMC_GetCmdResp6>
 8007f88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f8a:	69fb      	ldr	r3, [r7, #28]
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3720      	adds	r7, #32
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b088      	sub	sp, #32
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007fa2:	230d      	movs	r3, #13
 8007fa4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007fa6:	2340      	movs	r3, #64	; 0x40
 8007fa8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007faa:	2300      	movs	r3, #0
 8007fac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007fae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fb2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007fb4:	f107 0308 	add.w	r3, r7, #8
 8007fb8:	4619      	mov	r1, r3
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f7ff fd62 	bl	8007a84 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8007fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fc4:	210d      	movs	r1, #13
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 f82e 	bl	8008028 <SDMMC_GetCmdResp1>
 8007fcc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007fce:	69fb      	ldr	r3, [r7, #28]
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3720      	adds	r7, #32
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8007fd8:	b490      	push	{r4, r7}
 8007fda:	b082      	sub	sp, #8
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007fe0:	4b0f      	ldr	r3, [pc, #60]	; (8008020 <SDMMC_GetCmdError+0x48>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a0f      	ldr	r2, [pc, #60]	; (8008024 <SDMMC_GetCmdError+0x4c>)
 8007fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8007fea:	0a5b      	lsrs	r3, r3, #9
 8007fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ff0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007ff4:	4623      	mov	r3, r4
 8007ff6:	1e5c      	subs	r4, r3, #1
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d102      	bne.n	8008002 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007ffc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008000:	e009      	b.n	8008016 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800800a:	2b00      	cmp	r3, #0
 800800c:	d0f2      	beq.n	8007ff4 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	22c5      	movs	r2, #197	; 0xc5
 8008012:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8008014:	2300      	movs	r3, #0
}
 8008016:	4618      	mov	r0, r3
 8008018:	3708      	adds	r7, #8
 800801a:	46bd      	mov	sp, r7
 800801c:	bc90      	pop	{r4, r7}
 800801e:	4770      	bx	lr
 8008020:	20000004 	.word	0x20000004
 8008024:	10624dd3 	.word	0x10624dd3

08008028 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008028:	b590      	push	{r4, r7, lr}
 800802a:	b087      	sub	sp, #28
 800802c:	af00      	add	r7, sp, #0
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	460b      	mov	r3, r1
 8008032:	607a      	str	r2, [r7, #4]
 8008034:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008036:	4b6f      	ldr	r3, [pc, #444]	; (80081f4 <SDMMC_GetCmdResp1+0x1cc>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a6f      	ldr	r2, [pc, #444]	; (80081f8 <SDMMC_GetCmdResp1+0x1d0>)
 800803c:	fba2 2303 	umull	r2, r3, r2, r3
 8008040:	0a5b      	lsrs	r3, r3, #9
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008048:	4623      	mov	r3, r4
 800804a:	1e5c      	subs	r4, r3, #1
 800804c:	2b00      	cmp	r3, #0
 800804e:	d102      	bne.n	8008056 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008050:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008054:	e0c9      	b.n	80081ea <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800805a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008062:	2b00      	cmp	r3, #0
 8008064:	d0f0      	beq.n	8008048 <SDMMC_GetCmdResp1+0x20>
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800806c:	2b00      	cmp	r3, #0
 800806e:	d1eb      	bne.n	8008048 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008074:	f003 0304 	and.w	r3, r3, #4
 8008078:	2b00      	cmp	r3, #0
 800807a:	d004      	beq.n	8008086 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2204      	movs	r2, #4
 8008080:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008082:	2304      	movs	r3, #4
 8008084:	e0b1      	b.n	80081ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800808a:	f003 0301 	and.w	r3, r3, #1
 800808e:	2b00      	cmp	r3, #0
 8008090:	d004      	beq.n	800809c <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2201      	movs	r2, #1
 8008096:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008098:	2301      	movs	r3, #1
 800809a:	e0a6      	b.n	80081ea <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	22c5      	movs	r2, #197	; 0xc5
 80080a0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80080a2:	68f8      	ldr	r0, [r7, #12]
 80080a4:	f7ff fd18 	bl	8007ad8 <SDIO_GetCommandResponse>
 80080a8:	4603      	mov	r3, r0
 80080aa:	461a      	mov	r2, r3
 80080ac:	7afb      	ldrb	r3, [r7, #11]
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d001      	beq.n	80080b6 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80080b2:	2301      	movs	r3, #1
 80080b4:	e099      	b.n	80081ea <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80080b6:	2100      	movs	r1, #0
 80080b8:	68f8      	ldr	r0, [r7, #12]
 80080ba:	f7ff fd1a 	bl	8007af2 <SDIO_GetResponse>
 80080be:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80080c0:	693a      	ldr	r2, [r7, #16]
 80080c2:	4b4e      	ldr	r3, [pc, #312]	; (80081fc <SDMMC_GetCmdResp1+0x1d4>)
 80080c4:	4013      	ands	r3, r2
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d101      	bne.n	80080ce <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 80080ca:	2300      	movs	r3, #0
 80080cc:	e08d      	b.n	80081ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	da02      	bge.n	80080da <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80080d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80080d8:	e087      	b.n	80081ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d001      	beq.n	80080e8 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80080e4:	2340      	movs	r3, #64	; 0x40
 80080e6:	e080      	b.n	80081ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d001      	beq.n	80080f6 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80080f2:	2380      	movs	r3, #128	; 0x80
 80080f4:	e079      	b.n	80081ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d002      	beq.n	8008106 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008100:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008104:	e071      	b.n	80081ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800810c:	2b00      	cmp	r3, #0
 800810e:	d002      	beq.n	8008116 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008110:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008114:	e069      	b.n	80081ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800811c:	2b00      	cmp	r3, #0
 800811e:	d002      	beq.n	8008126 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008120:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008124:	e061      	b.n	80081ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800812c:	2b00      	cmp	r3, #0
 800812e:	d002      	beq.n	8008136 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008130:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008134:	e059      	b.n	80081ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800813c:	2b00      	cmp	r3, #0
 800813e:	d002      	beq.n	8008146 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008140:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008144:	e051      	b.n	80081ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800814c:	2b00      	cmp	r3, #0
 800814e:	d002      	beq.n	8008156 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008150:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008154:	e049      	b.n	80081ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800815c:	2b00      	cmp	r3, #0
 800815e:	d002      	beq.n	8008166 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008160:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008164:	e041      	b.n	80081ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800816c:	2b00      	cmp	r3, #0
 800816e:	d002      	beq.n	8008176 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8008170:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008174:	e039      	b.n	80081ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800817c:	2b00      	cmp	r3, #0
 800817e:	d002      	beq.n	8008186 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008180:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008184:	e031      	b.n	80081ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800818c:	2b00      	cmp	r3, #0
 800818e:	d002      	beq.n	8008196 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008190:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008194:	e029      	b.n	80081ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008196:	693b      	ldr	r3, [r7, #16]
 8008198:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800819c:	2b00      	cmp	r3, #0
 800819e:	d002      	beq.n	80081a6 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80081a0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80081a4:	e021      	b.n	80081ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d002      	beq.n	80081b6 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80081b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80081b4:	e019      	b.n	80081ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d002      	beq.n	80081c6 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80081c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80081c4:	e011      	b.n	80081ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d002      	beq.n	80081d6 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80081d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80081d4:	e009      	b.n	80081ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	f003 0308 	and.w	r3, r3, #8
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d002      	beq.n	80081e6 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80081e0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80081e4:	e001      	b.n	80081ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80081e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	371c      	adds	r7, #28
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd90      	pop	{r4, r7, pc}
 80081f2:	bf00      	nop
 80081f4:	20000004 	.word	0x20000004
 80081f8:	10624dd3 	.word	0x10624dd3
 80081fc:	fdffe008 	.word	0xfdffe008

08008200 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8008200:	b490      	push	{r4, r7}
 8008202:	b084      	sub	sp, #16
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008208:	4b1e      	ldr	r3, [pc, #120]	; (8008284 <SDMMC_GetCmdResp2+0x84>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a1e      	ldr	r2, [pc, #120]	; (8008288 <SDMMC_GetCmdResp2+0x88>)
 800820e:	fba2 2303 	umull	r2, r3, r2, r3
 8008212:	0a5b      	lsrs	r3, r3, #9
 8008214:	f241 3288 	movw	r2, #5000	; 0x1388
 8008218:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800821c:	4623      	mov	r3, r4
 800821e:	1e5c      	subs	r4, r3, #1
 8008220:	2b00      	cmp	r3, #0
 8008222:	d102      	bne.n	800822a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008224:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008228:	e026      	b.n	8008278 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800822e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008236:	2b00      	cmp	r3, #0
 8008238:	d0f0      	beq.n	800821c <SDMMC_GetCmdResp2+0x1c>
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008240:	2b00      	cmp	r3, #0
 8008242:	d1eb      	bne.n	800821c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008248:	f003 0304 	and.w	r3, r3, #4
 800824c:	2b00      	cmp	r3, #0
 800824e:	d004      	beq.n	800825a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2204      	movs	r2, #4
 8008254:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008256:	2304      	movs	r3, #4
 8008258:	e00e      	b.n	8008278 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800825e:	f003 0301 	and.w	r3, r3, #1
 8008262:	2b00      	cmp	r3, #0
 8008264:	d004      	beq.n	8008270 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2201      	movs	r2, #1
 800826a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800826c:	2301      	movs	r3, #1
 800826e:	e003      	b.n	8008278 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	22c5      	movs	r2, #197	; 0xc5
 8008274:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008276:	2300      	movs	r3, #0
}
 8008278:	4618      	mov	r0, r3
 800827a:	3710      	adds	r7, #16
 800827c:	46bd      	mov	sp, r7
 800827e:	bc90      	pop	{r4, r7}
 8008280:	4770      	bx	lr
 8008282:	bf00      	nop
 8008284:	20000004 	.word	0x20000004
 8008288:	10624dd3 	.word	0x10624dd3

0800828c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800828c:	b490      	push	{r4, r7}
 800828e:	b084      	sub	sp, #16
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008294:	4b18      	ldr	r3, [pc, #96]	; (80082f8 <SDMMC_GetCmdResp3+0x6c>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a18      	ldr	r2, [pc, #96]	; (80082fc <SDMMC_GetCmdResp3+0x70>)
 800829a:	fba2 2303 	umull	r2, r3, r2, r3
 800829e:	0a5b      	lsrs	r3, r3, #9
 80082a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80082a4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80082a8:	4623      	mov	r3, r4
 80082aa:	1e5c      	subs	r4, r3, #1
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d102      	bne.n	80082b6 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80082b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80082b4:	e01b      	b.n	80082ee <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082ba:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d0f0      	beq.n	80082a8 <SDMMC_GetCmdResp3+0x1c>
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d1eb      	bne.n	80082a8 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082d4:	f003 0304 	and.w	r3, r3, #4
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d004      	beq.n	80082e6 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2204      	movs	r2, #4
 80082e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80082e2:	2304      	movs	r3, #4
 80082e4:	e003      	b.n	80082ee <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	22c5      	movs	r2, #197	; 0xc5
 80082ea:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80082ec:	2300      	movs	r3, #0
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3710      	adds	r7, #16
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bc90      	pop	{r4, r7}
 80082f6:	4770      	bx	lr
 80082f8:	20000004 	.word	0x20000004
 80082fc:	10624dd3 	.word	0x10624dd3

08008300 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008300:	b590      	push	{r4, r7, lr}
 8008302:	b087      	sub	sp, #28
 8008304:	af00      	add	r7, sp, #0
 8008306:	60f8      	str	r0, [r7, #12]
 8008308:	460b      	mov	r3, r1
 800830a:	607a      	str	r2, [r7, #4]
 800830c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800830e:	4b34      	ldr	r3, [pc, #208]	; (80083e0 <SDMMC_GetCmdResp6+0xe0>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4a34      	ldr	r2, [pc, #208]	; (80083e4 <SDMMC_GetCmdResp6+0xe4>)
 8008314:	fba2 2303 	umull	r2, r3, r2, r3
 8008318:	0a5b      	lsrs	r3, r3, #9
 800831a:	f241 3288 	movw	r2, #5000	; 0x1388
 800831e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008322:	4623      	mov	r3, r4
 8008324:	1e5c      	subs	r4, r3, #1
 8008326:	2b00      	cmp	r3, #0
 8008328:	d102      	bne.n	8008330 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800832a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800832e:	e052      	b.n	80083d6 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008334:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800833c:	2b00      	cmp	r3, #0
 800833e:	d0f0      	beq.n	8008322 <SDMMC_GetCmdResp6+0x22>
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008346:	2b00      	cmp	r3, #0
 8008348:	d1eb      	bne.n	8008322 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800834e:	f003 0304 	and.w	r3, r3, #4
 8008352:	2b00      	cmp	r3, #0
 8008354:	d004      	beq.n	8008360 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2204      	movs	r2, #4
 800835a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800835c:	2304      	movs	r3, #4
 800835e:	e03a      	b.n	80083d6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008364:	f003 0301 	and.w	r3, r3, #1
 8008368:	2b00      	cmp	r3, #0
 800836a:	d004      	beq.n	8008376 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2201      	movs	r2, #1
 8008370:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008372:	2301      	movs	r3, #1
 8008374:	e02f      	b.n	80083d6 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008376:	68f8      	ldr	r0, [r7, #12]
 8008378:	f7ff fbae 	bl	8007ad8 <SDIO_GetCommandResponse>
 800837c:	4603      	mov	r3, r0
 800837e:	461a      	mov	r2, r3
 8008380:	7afb      	ldrb	r3, [r7, #11]
 8008382:	4293      	cmp	r3, r2
 8008384:	d001      	beq.n	800838a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008386:	2301      	movs	r3, #1
 8008388:	e025      	b.n	80083d6 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	22c5      	movs	r2, #197	; 0xc5
 800838e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008390:	2100      	movs	r1, #0
 8008392:	68f8      	ldr	r0, [r7, #12]
 8008394:	f7ff fbad 	bl	8007af2 <SDIO_GetResponse>
 8008398:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d106      	bne.n	80083b2 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	0c1b      	lsrs	r3, r3, #16
 80083a8:	b29a      	uxth	r2, r3
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80083ae:	2300      	movs	r3, #0
 80083b0:	e011      	b.n	80083d6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d002      	beq.n	80083c2 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80083bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80083c0:	e009      	b.n	80083d6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d002      	beq.n	80083d2 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80083cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80083d0:	e001      	b.n	80083d6 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80083d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	371c      	adds	r7, #28
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd90      	pop	{r4, r7, pc}
 80083de:	bf00      	nop
 80083e0:	20000004 	.word	0x20000004
 80083e4:	10624dd3 	.word	0x10624dd3

080083e8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80083e8:	b490      	push	{r4, r7}
 80083ea:	b084      	sub	sp, #16
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80083f0:	4b21      	ldr	r3, [pc, #132]	; (8008478 <SDMMC_GetCmdResp7+0x90>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a21      	ldr	r2, [pc, #132]	; (800847c <SDMMC_GetCmdResp7+0x94>)
 80083f6:	fba2 2303 	umull	r2, r3, r2, r3
 80083fa:	0a5b      	lsrs	r3, r3, #9
 80083fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008400:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008404:	4623      	mov	r3, r4
 8008406:	1e5c      	subs	r4, r3, #1
 8008408:	2b00      	cmp	r3, #0
 800840a:	d102      	bne.n	8008412 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800840c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008410:	e02c      	b.n	800846c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008416:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800841e:	2b00      	cmp	r3, #0
 8008420:	d0f0      	beq.n	8008404 <SDMMC_GetCmdResp7+0x1c>
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008428:	2b00      	cmp	r3, #0
 800842a:	d1eb      	bne.n	8008404 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008430:	f003 0304 	and.w	r3, r3, #4
 8008434:	2b00      	cmp	r3, #0
 8008436:	d004      	beq.n	8008442 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2204      	movs	r2, #4
 800843c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800843e:	2304      	movs	r3, #4
 8008440:	e014      	b.n	800846c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008446:	f003 0301 	and.w	r3, r3, #1
 800844a:	2b00      	cmp	r3, #0
 800844c:	d004      	beq.n	8008458 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2201      	movs	r2, #1
 8008452:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008454:	2301      	movs	r3, #1
 8008456:	e009      	b.n	800846c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800845c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008460:	2b00      	cmp	r3, #0
 8008462:	d002      	beq.n	800846a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2240      	movs	r2, #64	; 0x40
 8008468:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800846a:	2300      	movs	r3, #0
  
}
 800846c:	4618      	mov	r0, r3
 800846e:	3710      	adds	r7, #16
 8008470:	46bd      	mov	sp, r7
 8008472:	bc90      	pop	{r4, r7}
 8008474:	4770      	bx	lr
 8008476:	bf00      	nop
 8008478:	20000004 	.word	0x20000004
 800847c:	10624dd3 	.word	0x10624dd3

08008480 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008480:	b084      	sub	sp, #16
 8008482:	b580      	push	{r7, lr}
 8008484:	b084      	sub	sp, #16
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
 800848a:	f107 001c 	add.w	r0, r7, #28
 800848e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008494:	2b01      	cmp	r3, #1
 8008496:	d122      	bne.n	80084de <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800849c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	68db      	ldr	r3, [r3, #12]
 80084a8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80084ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084b0:	687a      	ldr	r2, [r7, #4]
 80084b2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	68db      	ldr	r3, [r3, #12]
 80084b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80084c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	d105      	bne.n	80084d2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	68db      	ldr	r3, [r3, #12]
 80084ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f001 fa7c 	bl	80099d0 <USB_CoreReset>
 80084d8:	4603      	mov	r3, r0
 80084da:	73fb      	strb	r3, [r7, #15]
 80084dc:	e01a      	b.n	8008514 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	68db      	ldr	r3, [r3, #12]
 80084e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f001 fa70 	bl	80099d0 <USB_CoreReset>
 80084f0:	4603      	mov	r3, r0
 80084f2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80084f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d106      	bne.n	8008508 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	639a      	str	r2, [r3, #56]	; 0x38
 8008506:	e005      	b.n	8008514 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800850c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008516:	2b01      	cmp	r3, #1
 8008518:	d10b      	bne.n	8008532 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	689b      	ldr	r3, [r3, #8]
 800851e:	f043 0206 	orr.w	r2, r3, #6
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	689b      	ldr	r3, [r3, #8]
 800852a:	f043 0220 	orr.w	r2, r3, #32
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008532:	7bfb      	ldrb	r3, [r7, #15]
}
 8008534:	4618      	mov	r0, r3
 8008536:	3710      	adds	r7, #16
 8008538:	46bd      	mov	sp, r7
 800853a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800853e:	b004      	add	sp, #16
 8008540:	4770      	bx	lr
	...

08008544 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008544:	b480      	push	{r7}
 8008546:	b087      	sub	sp, #28
 8008548:	af00      	add	r7, sp, #0
 800854a:	60f8      	str	r0, [r7, #12]
 800854c:	60b9      	str	r1, [r7, #8]
 800854e:	4613      	mov	r3, r2
 8008550:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008552:	79fb      	ldrb	r3, [r7, #7]
 8008554:	2b02      	cmp	r3, #2
 8008556:	d165      	bne.n	8008624 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	4a41      	ldr	r2, [pc, #260]	; (8008660 <USB_SetTurnaroundTime+0x11c>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d906      	bls.n	800856e <USB_SetTurnaroundTime+0x2a>
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	4a40      	ldr	r2, [pc, #256]	; (8008664 <USB_SetTurnaroundTime+0x120>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d802      	bhi.n	800856e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008568:	230f      	movs	r3, #15
 800856a:	617b      	str	r3, [r7, #20]
 800856c:	e062      	b.n	8008634 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	4a3c      	ldr	r2, [pc, #240]	; (8008664 <USB_SetTurnaroundTime+0x120>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d906      	bls.n	8008584 <USB_SetTurnaroundTime+0x40>
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	4a3b      	ldr	r2, [pc, #236]	; (8008668 <USB_SetTurnaroundTime+0x124>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d802      	bhi.n	8008584 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800857e:	230e      	movs	r3, #14
 8008580:	617b      	str	r3, [r7, #20]
 8008582:	e057      	b.n	8008634 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	4a38      	ldr	r2, [pc, #224]	; (8008668 <USB_SetTurnaroundTime+0x124>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d906      	bls.n	800859a <USB_SetTurnaroundTime+0x56>
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	4a37      	ldr	r2, [pc, #220]	; (800866c <USB_SetTurnaroundTime+0x128>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d802      	bhi.n	800859a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008594:	230d      	movs	r3, #13
 8008596:	617b      	str	r3, [r7, #20]
 8008598:	e04c      	b.n	8008634 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	4a33      	ldr	r2, [pc, #204]	; (800866c <USB_SetTurnaroundTime+0x128>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d906      	bls.n	80085b0 <USB_SetTurnaroundTime+0x6c>
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	4a32      	ldr	r2, [pc, #200]	; (8008670 <USB_SetTurnaroundTime+0x12c>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d802      	bhi.n	80085b0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80085aa:	230c      	movs	r3, #12
 80085ac:	617b      	str	r3, [r7, #20]
 80085ae:	e041      	b.n	8008634 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	4a2f      	ldr	r2, [pc, #188]	; (8008670 <USB_SetTurnaroundTime+0x12c>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d906      	bls.n	80085c6 <USB_SetTurnaroundTime+0x82>
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	4a2e      	ldr	r2, [pc, #184]	; (8008674 <USB_SetTurnaroundTime+0x130>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d802      	bhi.n	80085c6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80085c0:	230b      	movs	r3, #11
 80085c2:	617b      	str	r3, [r7, #20]
 80085c4:	e036      	b.n	8008634 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	4a2a      	ldr	r2, [pc, #168]	; (8008674 <USB_SetTurnaroundTime+0x130>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d906      	bls.n	80085dc <USB_SetTurnaroundTime+0x98>
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	4a29      	ldr	r2, [pc, #164]	; (8008678 <USB_SetTurnaroundTime+0x134>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d802      	bhi.n	80085dc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80085d6:	230a      	movs	r3, #10
 80085d8:	617b      	str	r3, [r7, #20]
 80085da:	e02b      	b.n	8008634 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	4a26      	ldr	r2, [pc, #152]	; (8008678 <USB_SetTurnaroundTime+0x134>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d906      	bls.n	80085f2 <USB_SetTurnaroundTime+0xae>
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	4a25      	ldr	r2, [pc, #148]	; (800867c <USB_SetTurnaroundTime+0x138>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d802      	bhi.n	80085f2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80085ec:	2309      	movs	r3, #9
 80085ee:	617b      	str	r3, [r7, #20]
 80085f0:	e020      	b.n	8008634 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	4a21      	ldr	r2, [pc, #132]	; (800867c <USB_SetTurnaroundTime+0x138>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d906      	bls.n	8008608 <USB_SetTurnaroundTime+0xc4>
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	4a20      	ldr	r2, [pc, #128]	; (8008680 <USB_SetTurnaroundTime+0x13c>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d802      	bhi.n	8008608 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008602:	2308      	movs	r3, #8
 8008604:	617b      	str	r3, [r7, #20]
 8008606:	e015      	b.n	8008634 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	4a1d      	ldr	r2, [pc, #116]	; (8008680 <USB_SetTurnaroundTime+0x13c>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d906      	bls.n	800861e <USB_SetTurnaroundTime+0xda>
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	4a1c      	ldr	r2, [pc, #112]	; (8008684 <USB_SetTurnaroundTime+0x140>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d802      	bhi.n	800861e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008618:	2307      	movs	r3, #7
 800861a:	617b      	str	r3, [r7, #20]
 800861c:	e00a      	b.n	8008634 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800861e:	2306      	movs	r3, #6
 8008620:	617b      	str	r3, [r7, #20]
 8008622:	e007      	b.n	8008634 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008624:	79fb      	ldrb	r3, [r7, #7]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d102      	bne.n	8008630 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800862a:	2309      	movs	r3, #9
 800862c:	617b      	str	r3, [r7, #20]
 800862e:	e001      	b.n	8008634 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008630:	2309      	movs	r3, #9
 8008632:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	68db      	ldr	r3, [r3, #12]
 8008638:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	68da      	ldr	r2, [r3, #12]
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	029b      	lsls	r3, r3, #10
 8008648:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800864c:	431a      	orrs	r2, r3
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008652:	2300      	movs	r3, #0
}
 8008654:	4618      	mov	r0, r3
 8008656:	371c      	adds	r7, #28
 8008658:	46bd      	mov	sp, r7
 800865a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865e:	4770      	bx	lr
 8008660:	00d8acbf 	.word	0x00d8acbf
 8008664:	00e4e1bf 	.word	0x00e4e1bf
 8008668:	00f423ff 	.word	0x00f423ff
 800866c:	0106737f 	.word	0x0106737f
 8008670:	011a499f 	.word	0x011a499f
 8008674:	01312cff 	.word	0x01312cff
 8008678:	014ca43f 	.word	0x014ca43f
 800867c:	016e35ff 	.word	0x016e35ff
 8008680:	01a6ab1f 	.word	0x01a6ab1f
 8008684:	01e847ff 	.word	0x01e847ff

08008688 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008688:	b480      	push	{r7}
 800868a:	b083      	sub	sp, #12
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	689b      	ldr	r3, [r3, #8]
 8008694:	f043 0201 	orr.w	r2, r3, #1
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800869c:	2300      	movs	r3, #0
}
 800869e:	4618      	mov	r0, r3
 80086a0:	370c      	adds	r7, #12
 80086a2:	46bd      	mov	sp, r7
 80086a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a8:	4770      	bx	lr

080086aa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80086aa:	b480      	push	{r7}
 80086ac:	b083      	sub	sp, #12
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	689b      	ldr	r3, [r3, #8]
 80086b6:	f023 0201 	bic.w	r2, r3, #1
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80086be:	2300      	movs	r3, #0
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	370c      	adds	r7, #12
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr

080086cc <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b082      	sub	sp, #8
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	460b      	mov	r3, r1
 80086d6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	68db      	ldr	r3, [r3, #12]
 80086dc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80086e4:	78fb      	ldrb	r3, [r7, #3]
 80086e6:	2b01      	cmp	r3, #1
 80086e8:	d106      	bne.n	80086f8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	68db      	ldr	r3, [r3, #12]
 80086ee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	60da      	str	r2, [r3, #12]
 80086f6:	e00b      	b.n	8008710 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80086f8:	78fb      	ldrb	r3, [r7, #3]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d106      	bne.n	800870c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	68db      	ldr	r3, [r3, #12]
 8008702:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	60da      	str	r2, [r3, #12]
 800870a:	e001      	b.n	8008710 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800870c:	2301      	movs	r3, #1
 800870e:	e003      	b.n	8008718 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008710:	2032      	movs	r0, #50	; 0x32
 8008712:	f7f9 fca5 	bl	8002060 <HAL_Delay>

  return HAL_OK;
 8008716:	2300      	movs	r3, #0
}
 8008718:	4618      	mov	r0, r3
 800871a:	3708      	adds	r7, #8
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008720:	b084      	sub	sp, #16
 8008722:	b580      	push	{r7, lr}
 8008724:	b086      	sub	sp, #24
 8008726:	af00      	add	r7, sp, #0
 8008728:	6078      	str	r0, [r7, #4]
 800872a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800872e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008732:	2300      	movs	r3, #0
 8008734:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800873a:	2300      	movs	r3, #0
 800873c:	613b      	str	r3, [r7, #16]
 800873e:	e009      	b.n	8008754 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	3340      	adds	r3, #64	; 0x40
 8008746:	009b      	lsls	r3, r3, #2
 8008748:	4413      	add	r3, r2
 800874a:	2200      	movs	r2, #0
 800874c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	3301      	adds	r3, #1
 8008752:	613b      	str	r3, [r7, #16]
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	2b0e      	cmp	r3, #14
 8008758:	d9f2      	bls.n	8008740 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800875a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800875c:	2b00      	cmp	r3, #0
 800875e:	d112      	bne.n	8008786 <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008764:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008770:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800877c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	639a      	str	r2, [r3, #56]	; 0x38
 8008784:	e00b      	b.n	800879e <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008796:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80087a4:	461a      	mov	r2, r3
 80087a6:	2300      	movs	r3, #0
 80087a8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087b0:	4619      	mov	r1, r3
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087b8:	461a      	mov	r2, r3
 80087ba:	680b      	ldr	r3, [r1, #0]
 80087bc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80087be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087c0:	2b01      	cmp	r3, #1
 80087c2:	d10c      	bne.n	80087de <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80087c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d104      	bne.n	80087d4 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80087ca:	2100      	movs	r1, #0
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f000 f961 	bl	8008a94 <USB_SetDevSpeed>
 80087d2:	e008      	b.n	80087e6 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80087d4:	2101      	movs	r1, #1
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 f95c 	bl	8008a94 <USB_SetDevSpeed>
 80087dc:	e003      	b.n	80087e6 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80087de:	2103      	movs	r1, #3
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f000 f957 	bl	8008a94 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80087e6:	2110      	movs	r1, #16
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f000 f90b 	bl	8008a04 <USB_FlushTxFifo>
 80087ee:	4603      	mov	r3, r0
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d001      	beq.n	80087f8 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 80087f4:	2301      	movs	r3, #1
 80087f6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f000 f929 	bl	8008a50 <USB_FlushRxFifo>
 80087fe:	4603      	mov	r3, r0
 8008800:	2b00      	cmp	r3, #0
 8008802:	d001      	beq.n	8008808 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8008804:	2301      	movs	r3, #1
 8008806:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800880e:	461a      	mov	r2, r3
 8008810:	2300      	movs	r3, #0
 8008812:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800881a:	461a      	mov	r2, r3
 800881c:	2300      	movs	r3, #0
 800881e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008826:	461a      	mov	r2, r3
 8008828:	2300      	movs	r3, #0
 800882a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800882c:	2300      	movs	r3, #0
 800882e:	613b      	str	r3, [r7, #16]
 8008830:	e043      	b.n	80088ba <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	015a      	lsls	r2, r3, #5
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	4413      	add	r3, r2
 800883a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008844:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008848:	d118      	bne.n	800887c <USB_DevInit+0x15c>
    {
      if (i == 0U)
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d10a      	bne.n	8008866 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	015a      	lsls	r2, r3, #5
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	4413      	add	r3, r2
 8008858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800885c:	461a      	mov	r2, r3
 800885e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008862:	6013      	str	r3, [r2, #0]
 8008864:	e013      	b.n	800888e <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	015a      	lsls	r2, r3, #5
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	4413      	add	r3, r2
 800886e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008872:	461a      	mov	r2, r3
 8008874:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008878:	6013      	str	r3, [r2, #0]
 800887a:	e008      	b.n	800888e <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800887c:	693b      	ldr	r3, [r7, #16]
 800887e:	015a      	lsls	r2, r3, #5
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	4413      	add	r3, r2
 8008884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008888:	461a      	mov	r2, r3
 800888a:	2300      	movs	r3, #0
 800888c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	015a      	lsls	r2, r3, #5
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	4413      	add	r3, r2
 8008896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800889a:	461a      	mov	r2, r3
 800889c:	2300      	movs	r3, #0
 800889e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	015a      	lsls	r2, r3, #5
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	4413      	add	r3, r2
 80088a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088ac:	461a      	mov	r2, r3
 80088ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80088b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	3301      	adds	r3, #1
 80088b8:	613b      	str	r3, [r7, #16]
 80088ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088bc:	693a      	ldr	r2, [r7, #16]
 80088be:	429a      	cmp	r2, r3
 80088c0:	d3b7      	bcc.n	8008832 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80088c2:	2300      	movs	r3, #0
 80088c4:	613b      	str	r3, [r7, #16]
 80088c6:	e043      	b.n	8008950 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	015a      	lsls	r2, r3, #5
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	4413      	add	r3, r2
 80088d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088de:	d118      	bne.n	8008912 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d10a      	bne.n	80088fc <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	015a      	lsls	r2, r3, #5
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	4413      	add	r3, r2
 80088ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088f2:	461a      	mov	r2, r3
 80088f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80088f8:	6013      	str	r3, [r2, #0]
 80088fa:	e013      	b.n	8008924 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	015a      	lsls	r2, r3, #5
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	4413      	add	r3, r2
 8008904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008908:	461a      	mov	r2, r3
 800890a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800890e:	6013      	str	r3, [r2, #0]
 8008910:	e008      	b.n	8008924 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	015a      	lsls	r2, r3, #5
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	4413      	add	r3, r2
 800891a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800891e:	461a      	mov	r2, r3
 8008920:	2300      	movs	r3, #0
 8008922:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	015a      	lsls	r2, r3, #5
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	4413      	add	r3, r2
 800892c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008930:	461a      	mov	r2, r3
 8008932:	2300      	movs	r3, #0
 8008934:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	015a      	lsls	r2, r3, #5
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	4413      	add	r3, r2
 800893e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008942:	461a      	mov	r2, r3
 8008944:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008948:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	3301      	adds	r3, #1
 800894e:	613b      	str	r3, [r7, #16]
 8008950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008952:	693a      	ldr	r2, [r7, #16]
 8008954:	429a      	cmp	r2, r3
 8008956:	d3b7      	bcc.n	80088c8 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800895e:	691b      	ldr	r3, [r3, #16]
 8008960:	68fa      	ldr	r2, [r7, #12]
 8008962:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008966:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800896a:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 800896c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800896e:	2b01      	cmp	r3, #1
 8008970:	d111      	bne.n	8008996 <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008978:	461a      	mov	r2, r3
 800897a:	4b20      	ldr	r3, [pc, #128]	; (80089fc <USB_DevInit+0x2dc>)
 800897c:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008986:	68fa      	ldr	r2, [r7, #12]
 8008988:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800898c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008990:	f043 0303 	orr.w	r3, r3, #3
 8008994:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2200      	movs	r2, #0
 800899a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80089a2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80089a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d105      	bne.n	80089b6 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	699b      	ldr	r3, [r3, #24]
 80089ae:	f043 0210 	orr.w	r2, r3, #16
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	699a      	ldr	r2, [r3, #24]
 80089ba:	4b11      	ldr	r3, [pc, #68]	; (8008a00 <USB_DevInit+0x2e0>)
 80089bc:	4313      	orrs	r3, r2
 80089be:	687a      	ldr	r2, [r7, #4]
 80089c0:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80089c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d005      	beq.n	80089d4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	699b      	ldr	r3, [r3, #24]
 80089cc:	f043 0208 	orr.w	r2, r3, #8
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80089d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d107      	bne.n	80089ea <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	699b      	ldr	r3, [r3, #24]
 80089de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80089e2:	f043 0304 	orr.w	r3, r3, #4
 80089e6:	687a      	ldr	r2, [r7, #4]
 80089e8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80089ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3718      	adds	r7, #24
 80089f0:	46bd      	mov	sp, r7
 80089f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80089f6:	b004      	add	sp, #16
 80089f8:	4770      	bx	lr
 80089fa:	bf00      	nop
 80089fc:	00800100 	.word	0x00800100
 8008a00:	803c3800 	.word	0x803c3800

08008a04 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008a04:	b480      	push	{r7}
 8008a06:	b085      	sub	sp, #20
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
 8008a0c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	019b      	lsls	r3, r3, #6
 8008a16:	f043 0220 	orr.w	r2, r3, #32
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	3301      	adds	r3, #1
 8008a22:	60fb      	str	r3, [r7, #12]
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	4a09      	ldr	r2, [pc, #36]	; (8008a4c <USB_FlushTxFifo+0x48>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d901      	bls.n	8008a30 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008a2c:	2303      	movs	r3, #3
 8008a2e:	e006      	b.n	8008a3e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	691b      	ldr	r3, [r3, #16]
 8008a34:	f003 0320 	and.w	r3, r3, #32
 8008a38:	2b20      	cmp	r3, #32
 8008a3a:	d0f0      	beq.n	8008a1e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008a3c:	2300      	movs	r3, #0
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3714      	adds	r7, #20
 8008a42:	46bd      	mov	sp, r7
 8008a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a48:	4770      	bx	lr
 8008a4a:	bf00      	nop
 8008a4c:	00030d40 	.word	0x00030d40

08008a50 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b085      	sub	sp, #20
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2210      	movs	r2, #16
 8008a60:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	3301      	adds	r3, #1
 8008a66:	60fb      	str	r3, [r7, #12]
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	4a09      	ldr	r2, [pc, #36]	; (8008a90 <USB_FlushRxFifo+0x40>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d901      	bls.n	8008a74 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008a70:	2303      	movs	r3, #3
 8008a72:	e006      	b.n	8008a82 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	691b      	ldr	r3, [r3, #16]
 8008a78:	f003 0310 	and.w	r3, r3, #16
 8008a7c:	2b10      	cmp	r3, #16
 8008a7e:	d0f0      	beq.n	8008a62 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008a80:	2300      	movs	r3, #0
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3714      	adds	r7, #20
 8008a86:	46bd      	mov	sp, r7
 8008a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8c:	4770      	bx	lr
 8008a8e:	bf00      	nop
 8008a90:	00030d40 	.word	0x00030d40

08008a94 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b085      	sub	sp, #20
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	460b      	mov	r3, r1
 8008a9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008aaa:	681a      	ldr	r2, [r3, #0]
 8008aac:	78fb      	ldrb	r3, [r7, #3]
 8008aae:	68f9      	ldr	r1, [r7, #12]
 8008ab0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008ab8:	2300      	movs	r3, #0
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3714      	adds	r7, #20
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac4:	4770      	bx	lr

08008ac6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008ac6:	b480      	push	{r7}
 8008ac8:	b087      	sub	sp, #28
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ad8:	689b      	ldr	r3, [r3, #8]
 8008ada:	f003 0306 	and.w	r3, r3, #6
 8008ade:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d102      	bne.n	8008aec <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	75fb      	strb	r3, [r7, #23]
 8008aea:	e00a      	b.n	8008b02 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	2b02      	cmp	r3, #2
 8008af0:	d002      	beq.n	8008af8 <USB_GetDevSpeed+0x32>
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	2b06      	cmp	r3, #6
 8008af6:	d102      	bne.n	8008afe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008af8:	2302      	movs	r3, #2
 8008afa:	75fb      	strb	r3, [r7, #23]
 8008afc:	e001      	b.n	8008b02 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008afe:	230f      	movs	r3, #15
 8008b00:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008b02:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	371c      	adds	r7, #28
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0e:	4770      	bx	lr

08008b10 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b085      	sub	sp, #20
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	781b      	ldrb	r3, [r3, #0]
 8008b22:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	785b      	ldrb	r3, [r3, #1]
 8008b28:	2b01      	cmp	r3, #1
 8008b2a:	d13a      	bne.n	8008ba2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b32:	69da      	ldr	r2, [r3, #28]
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	781b      	ldrb	r3, [r3, #0]
 8008b38:	f003 030f 	and.w	r3, r3, #15
 8008b3c:	2101      	movs	r1, #1
 8008b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8008b42:	b29b      	uxth	r3, r3
 8008b44:	68f9      	ldr	r1, [r7, #12]
 8008b46:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	015a      	lsls	r2, r3, #5
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	4413      	add	r3, r2
 8008b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d155      	bne.n	8008c10 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	015a      	lsls	r2, r3, #5
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	4413      	add	r3, r2
 8008b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b70:	681a      	ldr	r2, [r3, #0]
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	689b      	ldr	r3, [r3, #8]
 8008b76:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	78db      	ldrb	r3, [r3, #3]
 8008b7e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008b80:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	059b      	lsls	r3, r3, #22
 8008b86:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008b88:	4313      	orrs	r3, r2
 8008b8a:	68ba      	ldr	r2, [r7, #8]
 8008b8c:	0151      	lsls	r1, r2, #5
 8008b8e:	68fa      	ldr	r2, [r7, #12]
 8008b90:	440a      	add	r2, r1
 8008b92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b9e:	6013      	str	r3, [r2, #0]
 8008ba0:	e036      	b.n	8008c10 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ba8:	69da      	ldr	r2, [r3, #28]
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	781b      	ldrb	r3, [r3, #0]
 8008bae:	f003 030f 	and.w	r3, r3, #15
 8008bb2:	2101      	movs	r1, #1
 8008bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8008bb8:	041b      	lsls	r3, r3, #16
 8008bba:	68f9      	ldr	r1, [r7, #12]
 8008bbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	015a      	lsls	r2, r3, #5
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	4413      	add	r3, r2
 8008bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d11a      	bne.n	8008c10 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	015a      	lsls	r2, r3, #5
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	4413      	add	r3, r2
 8008be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008be6:	681a      	ldr	r2, [r3, #0]
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	689b      	ldr	r3, [r3, #8]
 8008bec:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	78db      	ldrb	r3, [r3, #3]
 8008bf4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008bf6:	430b      	orrs	r3, r1
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	68ba      	ldr	r2, [r7, #8]
 8008bfc:	0151      	lsls	r1, r2, #5
 8008bfe:	68fa      	ldr	r2, [r7, #12]
 8008c00:	440a      	add	r2, r1
 8008c02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c0e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008c10:	2300      	movs	r3, #0
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3714      	adds	r7, #20
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr
	...

08008c20 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b085      	sub	sp, #20
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	781b      	ldrb	r3, [r3, #0]
 8008c32:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	785b      	ldrb	r3, [r3, #1]
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	d135      	bne.n	8008ca8 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	781b      	ldrb	r3, [r3, #0]
 8008c48:	f003 030f 	and.w	r3, r3, #15
 8008c4c:	2101      	movs	r1, #1
 8008c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	43db      	mvns	r3, r3
 8008c56:	68f9      	ldr	r1, [r7, #12]
 8008c58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c5c:	4013      	ands	r3, r2
 8008c5e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c66:	69da      	ldr	r2, [r3, #28]
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	781b      	ldrb	r3, [r3, #0]
 8008c6c:	f003 030f 	and.w	r3, r3, #15
 8008c70:	2101      	movs	r1, #1
 8008c72:	fa01 f303 	lsl.w	r3, r1, r3
 8008c76:	b29b      	uxth	r3, r3
 8008c78:	43db      	mvns	r3, r3
 8008c7a:	68f9      	ldr	r1, [r7, #12]
 8008c7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c80:	4013      	ands	r3, r2
 8008c82:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	015a      	lsls	r2, r3, #5
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	4413      	add	r3, r2
 8008c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c90:	681a      	ldr	r2, [r3, #0]
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	0159      	lsls	r1, r3, #5
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	440b      	add	r3, r1
 8008c9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	4b1f      	ldr	r3, [pc, #124]	; (8008d20 <USB_DeactivateEndpoint+0x100>)
 8008ca2:	4013      	ands	r3, r2
 8008ca4:	600b      	str	r3, [r1, #0]
 8008ca6:	e034      	b.n	8008d12 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	781b      	ldrb	r3, [r3, #0]
 8008cb4:	f003 030f 	and.w	r3, r3, #15
 8008cb8:	2101      	movs	r1, #1
 8008cba:	fa01 f303 	lsl.w	r3, r1, r3
 8008cbe:	041b      	lsls	r3, r3, #16
 8008cc0:	43db      	mvns	r3, r3
 8008cc2:	68f9      	ldr	r1, [r7, #12]
 8008cc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008cc8:	4013      	ands	r3, r2
 8008cca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cd2:	69da      	ldr	r2, [r3, #28]
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	781b      	ldrb	r3, [r3, #0]
 8008cd8:	f003 030f 	and.w	r3, r3, #15
 8008cdc:	2101      	movs	r1, #1
 8008cde:	fa01 f303 	lsl.w	r3, r1, r3
 8008ce2:	041b      	lsls	r3, r3, #16
 8008ce4:	43db      	mvns	r3, r3
 8008ce6:	68f9      	ldr	r1, [r7, #12]
 8008ce8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008cec:	4013      	ands	r3, r2
 8008cee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	015a      	lsls	r2, r3, #5
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	4413      	add	r3, r2
 8008cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cfc:	681a      	ldr	r2, [r3, #0]
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	0159      	lsls	r1, r3, #5
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	440b      	add	r3, r1
 8008d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	4b05      	ldr	r3, [pc, #20]	; (8008d24 <USB_DeactivateEndpoint+0x104>)
 8008d0e:	4013      	ands	r3, r2
 8008d10:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008d12:	2300      	movs	r3, #0
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3714      	adds	r7, #20
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr
 8008d20:	ec337800 	.word	0xec337800
 8008d24:	eff37800 	.word	0xeff37800

08008d28 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b08a      	sub	sp, #40	; 0x28
 8008d2c:	af02      	add	r7, sp, #8
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	60b9      	str	r1, [r7, #8]
 8008d32:	4613      	mov	r3, r2
 8008d34:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	781b      	ldrb	r3, [r3, #0]
 8008d3e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	785b      	ldrb	r3, [r3, #1]
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	f040 815c 	bne.w	8009002 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	695b      	ldr	r3, [r3, #20]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d132      	bne.n	8008db8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008d52:	69bb      	ldr	r3, [r7, #24]
 8008d54:	015a      	lsls	r2, r3, #5
 8008d56:	69fb      	ldr	r3, [r7, #28]
 8008d58:	4413      	add	r3, r2
 8008d5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d5e:	691b      	ldr	r3, [r3, #16]
 8008d60:	69ba      	ldr	r2, [r7, #24]
 8008d62:	0151      	lsls	r1, r2, #5
 8008d64:	69fa      	ldr	r2, [r7, #28]
 8008d66:	440a      	add	r2, r1
 8008d68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d6c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008d70:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008d74:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008d76:	69bb      	ldr	r3, [r7, #24]
 8008d78:	015a      	lsls	r2, r3, #5
 8008d7a:	69fb      	ldr	r3, [r7, #28]
 8008d7c:	4413      	add	r3, r2
 8008d7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d82:	691b      	ldr	r3, [r3, #16]
 8008d84:	69ba      	ldr	r2, [r7, #24]
 8008d86:	0151      	lsls	r1, r2, #5
 8008d88:	69fa      	ldr	r2, [r7, #28]
 8008d8a:	440a      	add	r2, r1
 8008d8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008d94:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008d96:	69bb      	ldr	r3, [r7, #24]
 8008d98:	015a      	lsls	r2, r3, #5
 8008d9a:	69fb      	ldr	r3, [r7, #28]
 8008d9c:	4413      	add	r3, r2
 8008d9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008da2:	691b      	ldr	r3, [r3, #16]
 8008da4:	69ba      	ldr	r2, [r7, #24]
 8008da6:	0151      	lsls	r1, r2, #5
 8008da8:	69fa      	ldr	r2, [r7, #28]
 8008daa:	440a      	add	r2, r1
 8008dac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008db0:	0cdb      	lsrs	r3, r3, #19
 8008db2:	04db      	lsls	r3, r3, #19
 8008db4:	6113      	str	r3, [r2, #16]
 8008db6:	e074      	b.n	8008ea2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008db8:	69bb      	ldr	r3, [r7, #24]
 8008dba:	015a      	lsls	r2, r3, #5
 8008dbc:	69fb      	ldr	r3, [r7, #28]
 8008dbe:	4413      	add	r3, r2
 8008dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dc4:	691b      	ldr	r3, [r3, #16]
 8008dc6:	69ba      	ldr	r2, [r7, #24]
 8008dc8:	0151      	lsls	r1, r2, #5
 8008dca:	69fa      	ldr	r2, [r7, #28]
 8008dcc:	440a      	add	r2, r1
 8008dce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008dd2:	0cdb      	lsrs	r3, r3, #19
 8008dd4:	04db      	lsls	r3, r3, #19
 8008dd6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008dd8:	69bb      	ldr	r3, [r7, #24]
 8008dda:	015a      	lsls	r2, r3, #5
 8008ddc:	69fb      	ldr	r3, [r7, #28]
 8008dde:	4413      	add	r3, r2
 8008de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008de4:	691b      	ldr	r3, [r3, #16]
 8008de6:	69ba      	ldr	r2, [r7, #24]
 8008de8:	0151      	lsls	r1, r2, #5
 8008dea:	69fa      	ldr	r2, [r7, #28]
 8008dec:	440a      	add	r2, r1
 8008dee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008df2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008df6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008dfa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008dfc:	69bb      	ldr	r3, [r7, #24]
 8008dfe:	015a      	lsls	r2, r3, #5
 8008e00:	69fb      	ldr	r3, [r7, #28]
 8008e02:	4413      	add	r3, r2
 8008e04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e08:	691a      	ldr	r2, [r3, #16]
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	6959      	ldr	r1, [r3, #20]
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	689b      	ldr	r3, [r3, #8]
 8008e12:	440b      	add	r3, r1
 8008e14:	1e59      	subs	r1, r3, #1
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	689b      	ldr	r3, [r3, #8]
 8008e1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8008e1e:	04d9      	lsls	r1, r3, #19
 8008e20:	4b9d      	ldr	r3, [pc, #628]	; (8009098 <USB_EPStartXfer+0x370>)
 8008e22:	400b      	ands	r3, r1
 8008e24:	69b9      	ldr	r1, [r7, #24]
 8008e26:	0148      	lsls	r0, r1, #5
 8008e28:	69f9      	ldr	r1, [r7, #28]
 8008e2a:	4401      	add	r1, r0
 8008e2c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008e30:	4313      	orrs	r3, r2
 8008e32:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008e34:	69bb      	ldr	r3, [r7, #24]
 8008e36:	015a      	lsls	r2, r3, #5
 8008e38:	69fb      	ldr	r3, [r7, #28]
 8008e3a:	4413      	add	r3, r2
 8008e3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e40:	691a      	ldr	r2, [r3, #16]
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	695b      	ldr	r3, [r3, #20]
 8008e46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e4a:	69b9      	ldr	r1, [r7, #24]
 8008e4c:	0148      	lsls	r0, r1, #5
 8008e4e:	69f9      	ldr	r1, [r7, #28]
 8008e50:	4401      	add	r1, r0
 8008e52:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008e56:	4313      	orrs	r3, r2
 8008e58:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	78db      	ldrb	r3, [r3, #3]
 8008e5e:	2b01      	cmp	r3, #1
 8008e60:	d11f      	bne.n	8008ea2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008e62:	69bb      	ldr	r3, [r7, #24]
 8008e64:	015a      	lsls	r2, r3, #5
 8008e66:	69fb      	ldr	r3, [r7, #28]
 8008e68:	4413      	add	r3, r2
 8008e6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e6e:	691b      	ldr	r3, [r3, #16]
 8008e70:	69ba      	ldr	r2, [r7, #24]
 8008e72:	0151      	lsls	r1, r2, #5
 8008e74:	69fa      	ldr	r2, [r7, #28]
 8008e76:	440a      	add	r2, r1
 8008e78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e7c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008e80:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008e82:	69bb      	ldr	r3, [r7, #24]
 8008e84:	015a      	lsls	r2, r3, #5
 8008e86:	69fb      	ldr	r3, [r7, #28]
 8008e88:	4413      	add	r3, r2
 8008e8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e8e:	691b      	ldr	r3, [r3, #16]
 8008e90:	69ba      	ldr	r2, [r7, #24]
 8008e92:	0151      	lsls	r1, r2, #5
 8008e94:	69fa      	ldr	r2, [r7, #28]
 8008e96:	440a      	add	r2, r1
 8008e98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e9c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008ea0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008ea2:	79fb      	ldrb	r3, [r7, #7]
 8008ea4:	2b01      	cmp	r3, #1
 8008ea6:	d14b      	bne.n	8008f40 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	691b      	ldr	r3, [r3, #16]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d009      	beq.n	8008ec4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008eb0:	69bb      	ldr	r3, [r7, #24]
 8008eb2:	015a      	lsls	r2, r3, #5
 8008eb4:	69fb      	ldr	r3, [r7, #28]
 8008eb6:	4413      	add	r3, r2
 8008eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ebc:	461a      	mov	r2, r3
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	691b      	ldr	r3, [r3, #16]
 8008ec2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	78db      	ldrb	r3, [r3, #3]
 8008ec8:	2b01      	cmp	r3, #1
 8008eca:	d128      	bne.n	8008f1e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008ecc:	69fb      	ldr	r3, [r7, #28]
 8008ece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ed2:	689b      	ldr	r3, [r3, #8]
 8008ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d110      	bne.n	8008efe <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008edc:	69bb      	ldr	r3, [r7, #24]
 8008ede:	015a      	lsls	r2, r3, #5
 8008ee0:	69fb      	ldr	r3, [r7, #28]
 8008ee2:	4413      	add	r3, r2
 8008ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	69ba      	ldr	r2, [r7, #24]
 8008eec:	0151      	lsls	r1, r2, #5
 8008eee:	69fa      	ldr	r2, [r7, #28]
 8008ef0:	440a      	add	r2, r1
 8008ef2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ef6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008efa:	6013      	str	r3, [r2, #0]
 8008efc:	e00f      	b.n	8008f1e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008efe:	69bb      	ldr	r3, [r7, #24]
 8008f00:	015a      	lsls	r2, r3, #5
 8008f02:	69fb      	ldr	r3, [r7, #28]
 8008f04:	4413      	add	r3, r2
 8008f06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	69ba      	ldr	r2, [r7, #24]
 8008f0e:	0151      	lsls	r1, r2, #5
 8008f10:	69fa      	ldr	r2, [r7, #28]
 8008f12:	440a      	add	r2, r1
 8008f14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f1c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008f1e:	69bb      	ldr	r3, [r7, #24]
 8008f20:	015a      	lsls	r2, r3, #5
 8008f22:	69fb      	ldr	r3, [r7, #28]
 8008f24:	4413      	add	r3, r2
 8008f26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	69ba      	ldr	r2, [r7, #24]
 8008f2e:	0151      	lsls	r1, r2, #5
 8008f30:	69fa      	ldr	r2, [r7, #28]
 8008f32:	440a      	add	r2, r1
 8008f34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f38:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008f3c:	6013      	str	r3, [r2, #0]
 8008f3e:	e12f      	b.n	80091a0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008f40:	69bb      	ldr	r3, [r7, #24]
 8008f42:	015a      	lsls	r2, r3, #5
 8008f44:	69fb      	ldr	r3, [r7, #28]
 8008f46:	4413      	add	r3, r2
 8008f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	69ba      	ldr	r2, [r7, #24]
 8008f50:	0151      	lsls	r1, r2, #5
 8008f52:	69fa      	ldr	r2, [r7, #28]
 8008f54:	440a      	add	r2, r1
 8008f56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f5a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008f5e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	78db      	ldrb	r3, [r3, #3]
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	d015      	beq.n	8008f94 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	695b      	ldr	r3, [r3, #20]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	f000 8117 	beq.w	80091a0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008f72:	69fb      	ldr	r3, [r7, #28]
 8008f74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	f003 030f 	and.w	r3, r3, #15
 8008f82:	2101      	movs	r1, #1
 8008f84:	fa01 f303 	lsl.w	r3, r1, r3
 8008f88:	69f9      	ldr	r1, [r7, #28]
 8008f8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f8e:	4313      	orrs	r3, r2
 8008f90:	634b      	str	r3, [r1, #52]	; 0x34
 8008f92:	e105      	b.n	80091a0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008f94:	69fb      	ldr	r3, [r7, #28]
 8008f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f9a:	689b      	ldr	r3, [r3, #8]
 8008f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d110      	bne.n	8008fc6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008fa4:	69bb      	ldr	r3, [r7, #24]
 8008fa6:	015a      	lsls	r2, r3, #5
 8008fa8:	69fb      	ldr	r3, [r7, #28]
 8008faa:	4413      	add	r3, r2
 8008fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	69ba      	ldr	r2, [r7, #24]
 8008fb4:	0151      	lsls	r1, r2, #5
 8008fb6:	69fa      	ldr	r2, [r7, #28]
 8008fb8:	440a      	add	r2, r1
 8008fba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fbe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008fc2:	6013      	str	r3, [r2, #0]
 8008fc4:	e00f      	b.n	8008fe6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008fc6:	69bb      	ldr	r3, [r7, #24]
 8008fc8:	015a      	lsls	r2, r3, #5
 8008fca:	69fb      	ldr	r3, [r7, #28]
 8008fcc:	4413      	add	r3, r2
 8008fce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	69ba      	ldr	r2, [r7, #24]
 8008fd6:	0151      	lsls	r1, r2, #5
 8008fd8:	69fa      	ldr	r2, [r7, #28]
 8008fda:	440a      	add	r2, r1
 8008fdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008fe4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	68d9      	ldr	r1, [r3, #12]
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	781a      	ldrb	r2, [r3, #0]
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	695b      	ldr	r3, [r3, #20]
 8008ff2:	b298      	uxth	r0, r3
 8008ff4:	79fb      	ldrb	r3, [r7, #7]
 8008ff6:	9300      	str	r3, [sp, #0]
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	68f8      	ldr	r0, [r7, #12]
 8008ffc:	f000 fa2b 	bl	8009456 <USB_WritePacket>
 8009000:	e0ce      	b.n	80091a0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009002:	69bb      	ldr	r3, [r7, #24]
 8009004:	015a      	lsls	r2, r3, #5
 8009006:	69fb      	ldr	r3, [r7, #28]
 8009008:	4413      	add	r3, r2
 800900a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800900e:	691b      	ldr	r3, [r3, #16]
 8009010:	69ba      	ldr	r2, [r7, #24]
 8009012:	0151      	lsls	r1, r2, #5
 8009014:	69fa      	ldr	r2, [r7, #28]
 8009016:	440a      	add	r2, r1
 8009018:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800901c:	0cdb      	lsrs	r3, r3, #19
 800901e:	04db      	lsls	r3, r3, #19
 8009020:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009022:	69bb      	ldr	r3, [r7, #24]
 8009024:	015a      	lsls	r2, r3, #5
 8009026:	69fb      	ldr	r3, [r7, #28]
 8009028:	4413      	add	r3, r2
 800902a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800902e:	691b      	ldr	r3, [r3, #16]
 8009030:	69ba      	ldr	r2, [r7, #24]
 8009032:	0151      	lsls	r1, r2, #5
 8009034:	69fa      	ldr	r2, [r7, #28]
 8009036:	440a      	add	r2, r1
 8009038:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800903c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009040:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009044:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	695b      	ldr	r3, [r3, #20]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d126      	bne.n	800909c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800904e:	69bb      	ldr	r3, [r7, #24]
 8009050:	015a      	lsls	r2, r3, #5
 8009052:	69fb      	ldr	r3, [r7, #28]
 8009054:	4413      	add	r3, r2
 8009056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800905a:	691a      	ldr	r2, [r3, #16]
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	689b      	ldr	r3, [r3, #8]
 8009060:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009064:	69b9      	ldr	r1, [r7, #24]
 8009066:	0148      	lsls	r0, r1, #5
 8009068:	69f9      	ldr	r1, [r7, #28]
 800906a:	4401      	add	r1, r0
 800906c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009070:	4313      	orrs	r3, r2
 8009072:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009074:	69bb      	ldr	r3, [r7, #24]
 8009076:	015a      	lsls	r2, r3, #5
 8009078:	69fb      	ldr	r3, [r7, #28]
 800907a:	4413      	add	r3, r2
 800907c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009080:	691b      	ldr	r3, [r3, #16]
 8009082:	69ba      	ldr	r2, [r7, #24]
 8009084:	0151      	lsls	r1, r2, #5
 8009086:	69fa      	ldr	r2, [r7, #28]
 8009088:	440a      	add	r2, r1
 800908a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800908e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009092:	6113      	str	r3, [r2, #16]
 8009094:	e036      	b.n	8009104 <USB_EPStartXfer+0x3dc>
 8009096:	bf00      	nop
 8009098:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	695a      	ldr	r2, [r3, #20]
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	689b      	ldr	r3, [r3, #8]
 80090a4:	4413      	add	r3, r2
 80090a6:	1e5a      	subs	r2, r3, #1
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	689b      	ldr	r3, [r3, #8]
 80090ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80090b0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80090b2:	69bb      	ldr	r3, [r7, #24]
 80090b4:	015a      	lsls	r2, r3, #5
 80090b6:	69fb      	ldr	r3, [r7, #28]
 80090b8:	4413      	add	r3, r2
 80090ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090be:	691a      	ldr	r2, [r3, #16]
 80090c0:	8afb      	ldrh	r3, [r7, #22]
 80090c2:	04d9      	lsls	r1, r3, #19
 80090c4:	4b39      	ldr	r3, [pc, #228]	; (80091ac <USB_EPStartXfer+0x484>)
 80090c6:	400b      	ands	r3, r1
 80090c8:	69b9      	ldr	r1, [r7, #24]
 80090ca:	0148      	lsls	r0, r1, #5
 80090cc:	69f9      	ldr	r1, [r7, #28]
 80090ce:	4401      	add	r1, r0
 80090d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80090d4:	4313      	orrs	r3, r2
 80090d6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80090d8:	69bb      	ldr	r3, [r7, #24]
 80090da:	015a      	lsls	r2, r3, #5
 80090dc:	69fb      	ldr	r3, [r7, #28]
 80090de:	4413      	add	r3, r2
 80090e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090e4:	691a      	ldr	r2, [r3, #16]
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	689b      	ldr	r3, [r3, #8]
 80090ea:	8af9      	ldrh	r1, [r7, #22]
 80090ec:	fb01 f303 	mul.w	r3, r1, r3
 80090f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80090f4:	69b9      	ldr	r1, [r7, #24]
 80090f6:	0148      	lsls	r0, r1, #5
 80090f8:	69f9      	ldr	r1, [r7, #28]
 80090fa:	4401      	add	r1, r0
 80090fc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009100:	4313      	orrs	r3, r2
 8009102:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009104:	79fb      	ldrb	r3, [r7, #7]
 8009106:	2b01      	cmp	r3, #1
 8009108:	d10d      	bne.n	8009126 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	68db      	ldr	r3, [r3, #12]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d009      	beq.n	8009126 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	68d9      	ldr	r1, [r3, #12]
 8009116:	69bb      	ldr	r3, [r7, #24]
 8009118:	015a      	lsls	r2, r3, #5
 800911a:	69fb      	ldr	r3, [r7, #28]
 800911c:	4413      	add	r3, r2
 800911e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009122:	460a      	mov	r2, r1
 8009124:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	78db      	ldrb	r3, [r3, #3]
 800912a:	2b01      	cmp	r3, #1
 800912c:	d128      	bne.n	8009180 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800912e:	69fb      	ldr	r3, [r7, #28]
 8009130:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009134:	689b      	ldr	r3, [r3, #8]
 8009136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800913a:	2b00      	cmp	r3, #0
 800913c:	d110      	bne.n	8009160 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800913e:	69bb      	ldr	r3, [r7, #24]
 8009140:	015a      	lsls	r2, r3, #5
 8009142:	69fb      	ldr	r3, [r7, #28]
 8009144:	4413      	add	r3, r2
 8009146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	69ba      	ldr	r2, [r7, #24]
 800914e:	0151      	lsls	r1, r2, #5
 8009150:	69fa      	ldr	r2, [r7, #28]
 8009152:	440a      	add	r2, r1
 8009154:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009158:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800915c:	6013      	str	r3, [r2, #0]
 800915e:	e00f      	b.n	8009180 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009160:	69bb      	ldr	r3, [r7, #24]
 8009162:	015a      	lsls	r2, r3, #5
 8009164:	69fb      	ldr	r3, [r7, #28]
 8009166:	4413      	add	r3, r2
 8009168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	69ba      	ldr	r2, [r7, #24]
 8009170:	0151      	lsls	r1, r2, #5
 8009172:	69fa      	ldr	r2, [r7, #28]
 8009174:	440a      	add	r2, r1
 8009176:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800917a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800917e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009180:	69bb      	ldr	r3, [r7, #24]
 8009182:	015a      	lsls	r2, r3, #5
 8009184:	69fb      	ldr	r3, [r7, #28]
 8009186:	4413      	add	r3, r2
 8009188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	69ba      	ldr	r2, [r7, #24]
 8009190:	0151      	lsls	r1, r2, #5
 8009192:	69fa      	ldr	r2, [r7, #28]
 8009194:	440a      	add	r2, r1
 8009196:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800919a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800919e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80091a0:	2300      	movs	r3, #0
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3720      	adds	r7, #32
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}
 80091aa:	bf00      	nop
 80091ac:	1ff80000 	.word	0x1ff80000

080091b0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b087      	sub	sp, #28
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	60f8      	str	r0, [r7, #12]
 80091b8:	60b9      	str	r1, [r7, #8]
 80091ba:	4613      	mov	r3, r2
 80091bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	781b      	ldrb	r3, [r3, #0]
 80091c6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	785b      	ldrb	r3, [r3, #1]
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	f040 80cd 	bne.w	800936c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	695b      	ldr	r3, [r3, #20]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d132      	bne.n	8009240 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	015a      	lsls	r2, r3, #5
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	4413      	add	r3, r2
 80091e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091e6:	691b      	ldr	r3, [r3, #16]
 80091e8:	693a      	ldr	r2, [r7, #16]
 80091ea:	0151      	lsls	r1, r2, #5
 80091ec:	697a      	ldr	r2, [r7, #20]
 80091ee:	440a      	add	r2, r1
 80091f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80091f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80091fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	015a      	lsls	r2, r3, #5
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	4413      	add	r3, r2
 8009206:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800920a:	691b      	ldr	r3, [r3, #16]
 800920c:	693a      	ldr	r2, [r7, #16]
 800920e:	0151      	lsls	r1, r2, #5
 8009210:	697a      	ldr	r2, [r7, #20]
 8009212:	440a      	add	r2, r1
 8009214:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009218:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800921c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	015a      	lsls	r2, r3, #5
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	4413      	add	r3, r2
 8009226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800922a:	691b      	ldr	r3, [r3, #16]
 800922c:	693a      	ldr	r2, [r7, #16]
 800922e:	0151      	lsls	r1, r2, #5
 8009230:	697a      	ldr	r2, [r7, #20]
 8009232:	440a      	add	r2, r1
 8009234:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009238:	0cdb      	lsrs	r3, r3, #19
 800923a:	04db      	lsls	r3, r3, #19
 800923c:	6113      	str	r3, [r2, #16]
 800923e:	e04e      	b.n	80092de <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	015a      	lsls	r2, r3, #5
 8009244:	697b      	ldr	r3, [r7, #20]
 8009246:	4413      	add	r3, r2
 8009248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800924c:	691b      	ldr	r3, [r3, #16]
 800924e:	693a      	ldr	r2, [r7, #16]
 8009250:	0151      	lsls	r1, r2, #5
 8009252:	697a      	ldr	r2, [r7, #20]
 8009254:	440a      	add	r2, r1
 8009256:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800925a:	0cdb      	lsrs	r3, r3, #19
 800925c:	04db      	lsls	r3, r3, #19
 800925e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	015a      	lsls	r2, r3, #5
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	4413      	add	r3, r2
 8009268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800926c:	691b      	ldr	r3, [r3, #16]
 800926e:	693a      	ldr	r2, [r7, #16]
 8009270:	0151      	lsls	r1, r2, #5
 8009272:	697a      	ldr	r2, [r7, #20]
 8009274:	440a      	add	r2, r1
 8009276:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800927a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800927e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009282:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	695a      	ldr	r2, [r3, #20]
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	689b      	ldr	r3, [r3, #8]
 800928c:	429a      	cmp	r2, r3
 800928e:	d903      	bls.n	8009298 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	689a      	ldr	r2, [r3, #8]
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009298:	693b      	ldr	r3, [r7, #16]
 800929a:	015a      	lsls	r2, r3, #5
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	4413      	add	r3, r2
 80092a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092a4:	691b      	ldr	r3, [r3, #16]
 80092a6:	693a      	ldr	r2, [r7, #16]
 80092a8:	0151      	lsls	r1, r2, #5
 80092aa:	697a      	ldr	r2, [r7, #20]
 80092ac:	440a      	add	r2, r1
 80092ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80092b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	015a      	lsls	r2, r3, #5
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	4413      	add	r3, r2
 80092c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092c4:	691a      	ldr	r2, [r3, #16]
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	695b      	ldr	r3, [r3, #20]
 80092ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80092ce:	6939      	ldr	r1, [r7, #16]
 80092d0:	0148      	lsls	r0, r1, #5
 80092d2:	6979      	ldr	r1, [r7, #20]
 80092d4:	4401      	add	r1, r0
 80092d6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80092da:	4313      	orrs	r3, r2
 80092dc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80092de:	79fb      	ldrb	r3, [r7, #7]
 80092e0:	2b01      	cmp	r3, #1
 80092e2:	d11e      	bne.n	8009322 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	691b      	ldr	r3, [r3, #16]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d009      	beq.n	8009300 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	015a      	lsls	r2, r3, #5
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	4413      	add	r3, r2
 80092f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092f8:	461a      	mov	r2, r3
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	691b      	ldr	r3, [r3, #16]
 80092fe:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	015a      	lsls	r2, r3, #5
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	4413      	add	r3, r2
 8009308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	693a      	ldr	r2, [r7, #16]
 8009310:	0151      	lsls	r1, r2, #5
 8009312:	697a      	ldr	r2, [r7, #20]
 8009314:	440a      	add	r2, r1
 8009316:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800931a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800931e:	6013      	str	r3, [r2, #0]
 8009320:	e092      	b.n	8009448 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	015a      	lsls	r2, r3, #5
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	4413      	add	r3, r2
 800932a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	693a      	ldr	r2, [r7, #16]
 8009332:	0151      	lsls	r1, r2, #5
 8009334:	697a      	ldr	r2, [r7, #20]
 8009336:	440a      	add	r2, r1
 8009338:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800933c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009340:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	695b      	ldr	r3, [r3, #20]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d07e      	beq.n	8009448 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009350:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	781b      	ldrb	r3, [r3, #0]
 8009356:	f003 030f 	and.w	r3, r3, #15
 800935a:	2101      	movs	r1, #1
 800935c:	fa01 f303 	lsl.w	r3, r1, r3
 8009360:	6979      	ldr	r1, [r7, #20]
 8009362:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009366:	4313      	orrs	r3, r2
 8009368:	634b      	str	r3, [r1, #52]	; 0x34
 800936a:	e06d      	b.n	8009448 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	015a      	lsls	r2, r3, #5
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	4413      	add	r3, r2
 8009374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009378:	691b      	ldr	r3, [r3, #16]
 800937a:	693a      	ldr	r2, [r7, #16]
 800937c:	0151      	lsls	r1, r2, #5
 800937e:	697a      	ldr	r2, [r7, #20]
 8009380:	440a      	add	r2, r1
 8009382:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009386:	0cdb      	lsrs	r3, r3, #19
 8009388:	04db      	lsls	r3, r3, #19
 800938a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	015a      	lsls	r2, r3, #5
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	4413      	add	r3, r2
 8009394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009398:	691b      	ldr	r3, [r3, #16]
 800939a:	693a      	ldr	r2, [r7, #16]
 800939c:	0151      	lsls	r1, r2, #5
 800939e:	697a      	ldr	r2, [r7, #20]
 80093a0:	440a      	add	r2, r1
 80093a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093a6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80093aa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80093ae:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	695b      	ldr	r3, [r3, #20]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d003      	beq.n	80093c0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	689a      	ldr	r2, [r3, #8]
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	015a      	lsls	r2, r3, #5
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	4413      	add	r3, r2
 80093c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093cc:	691b      	ldr	r3, [r3, #16]
 80093ce:	693a      	ldr	r2, [r7, #16]
 80093d0:	0151      	lsls	r1, r2, #5
 80093d2:	697a      	ldr	r2, [r7, #20]
 80093d4:	440a      	add	r2, r1
 80093d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80093de:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	015a      	lsls	r2, r3, #5
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	4413      	add	r3, r2
 80093e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093ec:	691a      	ldr	r2, [r3, #16]
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	689b      	ldr	r3, [r3, #8]
 80093f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80093f6:	6939      	ldr	r1, [r7, #16]
 80093f8:	0148      	lsls	r0, r1, #5
 80093fa:	6979      	ldr	r1, [r7, #20]
 80093fc:	4401      	add	r1, r0
 80093fe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009402:	4313      	orrs	r3, r2
 8009404:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009406:	79fb      	ldrb	r3, [r7, #7]
 8009408:	2b01      	cmp	r3, #1
 800940a:	d10d      	bne.n	8009428 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	68db      	ldr	r3, [r3, #12]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d009      	beq.n	8009428 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	68d9      	ldr	r1, [r3, #12]
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	015a      	lsls	r2, r3, #5
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	4413      	add	r3, r2
 8009420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009424:	460a      	mov	r2, r1
 8009426:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	015a      	lsls	r2, r3, #5
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	4413      	add	r3, r2
 8009430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	693a      	ldr	r2, [r7, #16]
 8009438:	0151      	lsls	r1, r2, #5
 800943a:	697a      	ldr	r2, [r7, #20]
 800943c:	440a      	add	r2, r1
 800943e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009442:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009446:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009448:	2300      	movs	r3, #0
}
 800944a:	4618      	mov	r0, r3
 800944c:	371c      	adds	r7, #28
 800944e:	46bd      	mov	sp, r7
 8009450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009454:	4770      	bx	lr

08009456 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009456:	b480      	push	{r7}
 8009458:	b089      	sub	sp, #36	; 0x24
 800945a:	af00      	add	r7, sp, #0
 800945c:	60f8      	str	r0, [r7, #12]
 800945e:	60b9      	str	r1, [r7, #8]
 8009460:	4611      	mov	r1, r2
 8009462:	461a      	mov	r2, r3
 8009464:	460b      	mov	r3, r1
 8009466:	71fb      	strb	r3, [r7, #7]
 8009468:	4613      	mov	r3, r2
 800946a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8009474:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009478:	2b00      	cmp	r3, #0
 800947a:	d11a      	bne.n	80094b2 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800947c:	88bb      	ldrh	r3, [r7, #4]
 800947e:	3303      	adds	r3, #3
 8009480:	089b      	lsrs	r3, r3, #2
 8009482:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009484:	2300      	movs	r3, #0
 8009486:	61bb      	str	r3, [r7, #24]
 8009488:	e00f      	b.n	80094aa <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800948a:	79fb      	ldrb	r3, [r7, #7]
 800948c:	031a      	lsls	r2, r3, #12
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	4413      	add	r3, r2
 8009492:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009496:	461a      	mov	r2, r3
 8009498:	69fb      	ldr	r3, [r7, #28]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800949e:	69fb      	ldr	r3, [r7, #28]
 80094a0:	3304      	adds	r3, #4
 80094a2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80094a4:	69bb      	ldr	r3, [r7, #24]
 80094a6:	3301      	adds	r3, #1
 80094a8:	61bb      	str	r3, [r7, #24]
 80094aa:	69ba      	ldr	r2, [r7, #24]
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	429a      	cmp	r2, r3
 80094b0:	d3eb      	bcc.n	800948a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80094b2:	2300      	movs	r3, #0
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3724      	adds	r7, #36	; 0x24
 80094b8:	46bd      	mov	sp, r7
 80094ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094be:	4770      	bx	lr

080094c0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b089      	sub	sp, #36	; 0x24
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	60f8      	str	r0, [r7, #12]
 80094c8:	60b9      	str	r1, [r7, #8]
 80094ca:	4613      	mov	r3, r2
 80094cc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80094d6:	88fb      	ldrh	r3, [r7, #6]
 80094d8:	3303      	adds	r3, #3
 80094da:	089b      	lsrs	r3, r3, #2
 80094dc:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80094de:	2300      	movs	r3, #0
 80094e0:	61bb      	str	r3, [r7, #24]
 80094e2:	e00b      	b.n	80094fc <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80094e4:	697b      	ldr	r3, [r7, #20]
 80094e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094ea:	681a      	ldr	r2, [r3, #0]
 80094ec:	69fb      	ldr	r3, [r7, #28]
 80094ee:	601a      	str	r2, [r3, #0]
    pDest++;
 80094f0:	69fb      	ldr	r3, [r7, #28]
 80094f2:	3304      	adds	r3, #4
 80094f4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80094f6:	69bb      	ldr	r3, [r7, #24]
 80094f8:	3301      	adds	r3, #1
 80094fa:	61bb      	str	r3, [r7, #24]
 80094fc:	69ba      	ldr	r2, [r7, #24]
 80094fe:	693b      	ldr	r3, [r7, #16]
 8009500:	429a      	cmp	r2, r3
 8009502:	d3ef      	bcc.n	80094e4 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8009504:	69fb      	ldr	r3, [r7, #28]
}
 8009506:	4618      	mov	r0, r3
 8009508:	3724      	adds	r7, #36	; 0x24
 800950a:	46bd      	mov	sp, r7
 800950c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009510:	4770      	bx	lr

08009512 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009512:	b480      	push	{r7}
 8009514:	b085      	sub	sp, #20
 8009516:	af00      	add	r7, sp, #0
 8009518:	6078      	str	r0, [r7, #4]
 800951a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	781b      	ldrb	r3, [r3, #0]
 8009524:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	785b      	ldrb	r3, [r3, #1]
 800952a:	2b01      	cmp	r3, #1
 800952c:	d12c      	bne.n	8009588 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	015a      	lsls	r2, r3, #5
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	4413      	add	r3, r2
 8009536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	2b00      	cmp	r3, #0
 800953e:	db12      	blt.n	8009566 <USB_EPSetStall+0x54>
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d00f      	beq.n	8009566 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	015a      	lsls	r2, r3, #5
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	4413      	add	r3, r2
 800954e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	68ba      	ldr	r2, [r7, #8]
 8009556:	0151      	lsls	r1, r2, #5
 8009558:	68fa      	ldr	r2, [r7, #12]
 800955a:	440a      	add	r2, r1
 800955c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009560:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009564:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	015a      	lsls	r2, r3, #5
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	4413      	add	r3, r2
 800956e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	68ba      	ldr	r2, [r7, #8]
 8009576:	0151      	lsls	r1, r2, #5
 8009578:	68fa      	ldr	r2, [r7, #12]
 800957a:	440a      	add	r2, r1
 800957c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009580:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009584:	6013      	str	r3, [r2, #0]
 8009586:	e02b      	b.n	80095e0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	015a      	lsls	r2, r3, #5
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	4413      	add	r3, r2
 8009590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	2b00      	cmp	r3, #0
 8009598:	db12      	blt.n	80095c0 <USB_EPSetStall+0xae>
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d00f      	beq.n	80095c0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	015a      	lsls	r2, r3, #5
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	4413      	add	r3, r2
 80095a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	68ba      	ldr	r2, [r7, #8]
 80095b0:	0151      	lsls	r1, r2, #5
 80095b2:	68fa      	ldr	r2, [r7, #12]
 80095b4:	440a      	add	r2, r1
 80095b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80095be:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	015a      	lsls	r2, r3, #5
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	4413      	add	r3, r2
 80095c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	68ba      	ldr	r2, [r7, #8]
 80095d0:	0151      	lsls	r1, r2, #5
 80095d2:	68fa      	ldr	r2, [r7, #12]
 80095d4:	440a      	add	r2, r1
 80095d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80095de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80095e0:	2300      	movs	r3, #0
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3714      	adds	r7, #20
 80095e6:	46bd      	mov	sp, r7
 80095e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ec:	4770      	bx	lr

080095ee <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80095ee:	b480      	push	{r7}
 80095f0:	b085      	sub	sp, #20
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	6078      	str	r0, [r7, #4]
 80095f6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	781b      	ldrb	r3, [r3, #0]
 8009600:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	785b      	ldrb	r3, [r3, #1]
 8009606:	2b01      	cmp	r3, #1
 8009608:	d128      	bne.n	800965c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	015a      	lsls	r2, r3, #5
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	4413      	add	r3, r2
 8009612:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	68ba      	ldr	r2, [r7, #8]
 800961a:	0151      	lsls	r1, r2, #5
 800961c:	68fa      	ldr	r2, [r7, #12]
 800961e:	440a      	add	r2, r1
 8009620:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009624:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009628:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	78db      	ldrb	r3, [r3, #3]
 800962e:	2b03      	cmp	r3, #3
 8009630:	d003      	beq.n	800963a <USB_EPClearStall+0x4c>
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	78db      	ldrb	r3, [r3, #3]
 8009636:	2b02      	cmp	r3, #2
 8009638:	d138      	bne.n	80096ac <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	015a      	lsls	r2, r3, #5
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	4413      	add	r3, r2
 8009642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	68ba      	ldr	r2, [r7, #8]
 800964a:	0151      	lsls	r1, r2, #5
 800964c:	68fa      	ldr	r2, [r7, #12]
 800964e:	440a      	add	r2, r1
 8009650:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009658:	6013      	str	r3, [r2, #0]
 800965a:	e027      	b.n	80096ac <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	015a      	lsls	r2, r3, #5
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	4413      	add	r3, r2
 8009664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	68ba      	ldr	r2, [r7, #8]
 800966c:	0151      	lsls	r1, r2, #5
 800966e:	68fa      	ldr	r2, [r7, #12]
 8009670:	440a      	add	r2, r1
 8009672:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009676:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800967a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	78db      	ldrb	r3, [r3, #3]
 8009680:	2b03      	cmp	r3, #3
 8009682:	d003      	beq.n	800968c <USB_EPClearStall+0x9e>
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	78db      	ldrb	r3, [r3, #3]
 8009688:	2b02      	cmp	r3, #2
 800968a:	d10f      	bne.n	80096ac <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	015a      	lsls	r2, r3, #5
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	4413      	add	r3, r2
 8009694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	68ba      	ldr	r2, [r7, #8]
 800969c:	0151      	lsls	r1, r2, #5
 800969e:	68fa      	ldr	r2, [r7, #12]
 80096a0:	440a      	add	r2, r1
 80096a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80096aa:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80096ac:	2300      	movs	r3, #0
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3714      	adds	r7, #20
 80096b2:	46bd      	mov	sp, r7
 80096b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b8:	4770      	bx	lr

080096ba <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80096ba:	b480      	push	{r7}
 80096bc:	b085      	sub	sp, #20
 80096be:	af00      	add	r7, sp, #0
 80096c0:	6078      	str	r0, [r7, #4]
 80096c2:	460b      	mov	r3, r1
 80096c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	68fa      	ldr	r2, [r7, #12]
 80096d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80096d8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80096dc:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096e4:	681a      	ldr	r2, [r3, #0]
 80096e6:	78fb      	ldrb	r3, [r7, #3]
 80096e8:	011b      	lsls	r3, r3, #4
 80096ea:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80096ee:	68f9      	ldr	r1, [r7, #12]
 80096f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80096f4:	4313      	orrs	r3, r2
 80096f6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80096f8:	2300      	movs	r3, #0
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	3714      	adds	r7, #20
 80096fe:	46bd      	mov	sp, r7
 8009700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009704:	4770      	bx	lr

08009706 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009706:	b580      	push	{r7, lr}
 8009708:	b084      	sub	sp, #16
 800970a:	af00      	add	r7, sp, #0
 800970c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009718:	685b      	ldr	r3, [r3, #4]
 800971a:	68fa      	ldr	r2, [r7, #12]
 800971c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009720:	f023 0302 	bic.w	r3, r3, #2
 8009724:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8009726:	2003      	movs	r0, #3
 8009728:	f7f8 fc9a 	bl	8002060 <HAL_Delay>

  return HAL_OK;
 800972c:	2300      	movs	r3, #0
}
 800972e:	4618      	mov	r0, r3
 8009730:	3710      	adds	r7, #16
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}

08009736 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009736:	b580      	push	{r7, lr}
 8009738:	b084      	sub	sp, #16
 800973a:	af00      	add	r7, sp, #0
 800973c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009748:	685b      	ldr	r3, [r3, #4]
 800974a:	68fa      	ldr	r2, [r7, #12]
 800974c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009750:	f043 0302 	orr.w	r3, r3, #2
 8009754:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8009756:	2003      	movs	r0, #3
 8009758:	f7f8 fc82 	bl	8002060 <HAL_Delay>

  return HAL_OK;
 800975c:	2300      	movs	r3, #0
}
 800975e:	4618      	mov	r0, r3
 8009760:	3710      	adds	r7, #16
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}

08009766 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009766:	b480      	push	{r7}
 8009768:	b085      	sub	sp, #20
 800976a:	af00      	add	r7, sp, #0
 800976c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	695b      	ldr	r3, [r3, #20]
 8009772:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	699b      	ldr	r3, [r3, #24]
 8009778:	68fa      	ldr	r2, [r7, #12]
 800977a:	4013      	ands	r3, r2
 800977c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800977e:	68fb      	ldr	r3, [r7, #12]
}
 8009780:	4618      	mov	r0, r3
 8009782:	3714      	adds	r7, #20
 8009784:	46bd      	mov	sp, r7
 8009786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978a:	4770      	bx	lr

0800978c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800978c:	b480      	push	{r7}
 800978e:	b085      	sub	sp, #20
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800979e:	699b      	ldr	r3, [r3, #24]
 80097a0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097a8:	69db      	ldr	r3, [r3, #28]
 80097aa:	68ba      	ldr	r2, [r7, #8]
 80097ac:	4013      	ands	r3, r2
 80097ae:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	0c1b      	lsrs	r3, r3, #16
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	3714      	adds	r7, #20
 80097b8:	46bd      	mov	sp, r7
 80097ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097be:	4770      	bx	lr

080097c0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b085      	sub	sp, #20
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097d2:	699b      	ldr	r3, [r3, #24]
 80097d4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097dc:	69db      	ldr	r3, [r3, #28]
 80097de:	68ba      	ldr	r2, [r7, #8]
 80097e0:	4013      	ands	r3, r2
 80097e2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	b29b      	uxth	r3, r3
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	3714      	adds	r7, #20
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr

080097f4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b085      	sub	sp, #20
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
 80097fc:	460b      	mov	r3, r1
 80097fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009804:	78fb      	ldrb	r3, [r7, #3]
 8009806:	015a      	lsls	r2, r3, #5
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	4413      	add	r3, r2
 800980c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009810:	689b      	ldr	r3, [r3, #8]
 8009812:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800981a:	695b      	ldr	r3, [r3, #20]
 800981c:	68ba      	ldr	r2, [r7, #8]
 800981e:	4013      	ands	r3, r2
 8009820:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009822:	68bb      	ldr	r3, [r7, #8]
}
 8009824:	4618      	mov	r0, r3
 8009826:	3714      	adds	r7, #20
 8009828:	46bd      	mov	sp, r7
 800982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982e:	4770      	bx	lr

08009830 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009830:	b480      	push	{r7}
 8009832:	b087      	sub	sp, #28
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
 8009838:	460b      	mov	r3, r1
 800983a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009840:	697b      	ldr	r3, [r7, #20]
 8009842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009846:	691b      	ldr	r3, [r3, #16]
 8009848:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009852:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009854:	78fb      	ldrb	r3, [r7, #3]
 8009856:	f003 030f 	and.w	r3, r3, #15
 800985a:	68fa      	ldr	r2, [r7, #12]
 800985c:	fa22 f303 	lsr.w	r3, r2, r3
 8009860:	01db      	lsls	r3, r3, #7
 8009862:	b2db      	uxtb	r3, r3
 8009864:	693a      	ldr	r2, [r7, #16]
 8009866:	4313      	orrs	r3, r2
 8009868:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800986a:	78fb      	ldrb	r3, [r7, #3]
 800986c:	015a      	lsls	r2, r3, #5
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	4413      	add	r3, r2
 8009872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009876:	689b      	ldr	r3, [r3, #8]
 8009878:	693a      	ldr	r2, [r7, #16]
 800987a:	4013      	ands	r3, r2
 800987c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800987e:	68bb      	ldr	r3, [r7, #8]
}
 8009880:	4618      	mov	r0, r3
 8009882:	371c      	adds	r7, #28
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr

0800988c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800988c:	b480      	push	{r7}
 800988e:	b083      	sub	sp, #12
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	695b      	ldr	r3, [r3, #20]
 8009898:	f003 0301 	and.w	r3, r3, #1
}
 800989c:	4618      	mov	r0, r3
 800989e:	370c      	adds	r7, #12
 80098a0:	46bd      	mov	sp, r7
 80098a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a6:	4770      	bx	lr

080098a8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b085      	sub	sp, #20
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	68fa      	ldr	r2, [r7, #12]
 80098be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098c2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80098c6:	f023 0307 	bic.w	r3, r3, #7
 80098ca:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098d2:	689b      	ldr	r3, [r3, #8]
 80098d4:	f003 0306 	and.w	r3, r3, #6
 80098d8:	2b04      	cmp	r3, #4
 80098da:	d109      	bne.n	80098f0 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	68fa      	ldr	r2, [r7, #12]
 80098e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098ea:	f043 0303 	orr.w	r3, r3, #3
 80098ee:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098f6:	685b      	ldr	r3, [r3, #4]
 80098f8:	68fa      	ldr	r2, [r7, #12]
 80098fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80098fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009902:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009904:	2300      	movs	r3, #0
}
 8009906:	4618      	mov	r0, r3
 8009908:	3714      	adds	r7, #20
 800990a:	46bd      	mov	sp, r7
 800990c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009910:	4770      	bx	lr
	...

08009914 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009914:	b480      	push	{r7}
 8009916:	b087      	sub	sp, #28
 8009918:	af00      	add	r7, sp, #0
 800991a:	60f8      	str	r0, [r7, #12]
 800991c:	460b      	mov	r3, r1
 800991e:	607a      	str	r2, [r7, #4]
 8009920:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	333c      	adds	r3, #60	; 0x3c
 800992a:	3304      	adds	r3, #4
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	4a26      	ldr	r2, [pc, #152]	; (80099cc <USB_EP0_OutStart+0xb8>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d90a      	bls.n	800994e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009944:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009948:	d101      	bne.n	800994e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800994a:	2300      	movs	r3, #0
 800994c:	e037      	b.n	80099be <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009954:	461a      	mov	r2, r3
 8009956:	2300      	movs	r3, #0
 8009958:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009960:	691b      	ldr	r3, [r3, #16]
 8009962:	697a      	ldr	r2, [r7, #20]
 8009964:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009968:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800996c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009974:	691b      	ldr	r3, [r3, #16]
 8009976:	697a      	ldr	r2, [r7, #20]
 8009978:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800997c:	f043 0318 	orr.w	r3, r3, #24
 8009980:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009982:	697b      	ldr	r3, [r7, #20]
 8009984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009988:	691b      	ldr	r3, [r3, #16]
 800998a:	697a      	ldr	r2, [r7, #20]
 800998c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009990:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009994:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009996:	7afb      	ldrb	r3, [r7, #11]
 8009998:	2b01      	cmp	r3, #1
 800999a:	d10f      	bne.n	80099bc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099a2:	461a      	mov	r2, r3
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	697a      	ldr	r2, [r7, #20]
 80099b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099b6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80099ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80099bc:	2300      	movs	r3, #0
}
 80099be:	4618      	mov	r0, r3
 80099c0:	371c      	adds	r7, #28
 80099c2:	46bd      	mov	sp, r7
 80099c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c8:	4770      	bx	lr
 80099ca:	bf00      	nop
 80099cc:	4f54300a 	.word	0x4f54300a

080099d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80099d0:	b480      	push	{r7}
 80099d2:	b085      	sub	sp, #20
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80099d8:	2300      	movs	r3, #0
 80099da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	3301      	adds	r3, #1
 80099e0:	60fb      	str	r3, [r7, #12]
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	4a13      	ldr	r2, [pc, #76]	; (8009a34 <USB_CoreReset+0x64>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d901      	bls.n	80099ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80099ea:	2303      	movs	r3, #3
 80099ec:	e01b      	b.n	8009a26 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	691b      	ldr	r3, [r3, #16]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	daf2      	bge.n	80099dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80099f6:	2300      	movs	r3, #0
 80099f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	691b      	ldr	r3, [r3, #16]
 80099fe:	f043 0201 	orr.w	r2, r3, #1
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	3301      	adds	r3, #1
 8009a0a:	60fb      	str	r3, [r7, #12]
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	4a09      	ldr	r2, [pc, #36]	; (8009a34 <USB_CoreReset+0x64>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d901      	bls.n	8009a18 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009a14:	2303      	movs	r3, #3
 8009a16:	e006      	b.n	8009a26 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	691b      	ldr	r3, [r3, #16]
 8009a1c:	f003 0301 	and.w	r3, r3, #1
 8009a20:	2b01      	cmp	r3, #1
 8009a22:	d0f0      	beq.n	8009a06 <USB_CoreReset+0x36>

  return HAL_OK;
 8009a24:	2300      	movs	r3, #0
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	3714      	adds	r7, #20
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a30:	4770      	bx	lr
 8009a32:	bf00      	nop
 8009a34:	00030d40 	.word	0x00030d40

08009a38 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009a3c:	4904      	ldr	r1, [pc, #16]	; (8009a50 <MX_FATFS_Init+0x18>)
 8009a3e:	4805      	ldr	r0, [pc, #20]	; (8009a54 <MX_FATFS_Init+0x1c>)
 8009a40:	f001 fe08 	bl	800b654 <FATFS_LinkDriver>
 8009a44:	4603      	mov	r3, r0
 8009a46:	461a      	mov	r2, r3
 8009a48:	4b03      	ldr	r3, [pc, #12]	; (8009a58 <MX_FATFS_Init+0x20>)
 8009a4a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8009a4c:	bf00      	nop
 8009a4e:	bd80      	pop	{r7, pc}
 8009a50:	20000b2c 	.word	0x20000b2c
 8009a54:	0800fbec 	.word	0x0800fbec
 8009a58:	20000b28 	.word	0x20000b28

08009a5c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b082      	sub	sp, #8
 8009a60:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8009a62:	2300      	movs	r3, #0
 8009a64:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009a66:	f000 f871 	bl	8009b4c <BSP_SD_IsDetected>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	2b01      	cmp	r3, #1
 8009a6e:	d001      	beq.n	8009a74 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8009a70:	2301      	movs	r3, #1
 8009a72:	e012      	b.n	8009a9a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8009a74:	480b      	ldr	r0, [pc, #44]	; (8009aa4 <BSP_SD_Init+0x48>)
 8009a76:	f7fb fbee 	bl	8005256 <HAL_SD_Init>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8009a7e:	79fb      	ldrb	r3, [r7, #7]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d109      	bne.n	8009a98 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8009a84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009a88:	4806      	ldr	r0, [pc, #24]	; (8009aa4 <BSP_SD_Init+0x48>)
 8009a8a:	f7fc f9cd 	bl	8005e28 <HAL_SD_ConfigWideBusOperation>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d001      	beq.n	8009a98 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8009a94:	2301      	movs	r3, #1
 8009a96:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8009a98:	79fb      	ldrb	r3, [r7, #7]
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3708      	adds	r7, #8
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}
 8009aa2:	bf00      	nop
 8009aa4:	20000a08 	.word	0x20000a08

08009aa8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b086      	sub	sp, #24
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	60f8      	str	r0, [r7, #12]
 8009ab0:	60b9      	str	r1, [r7, #8]
 8009ab2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	68ba      	ldr	r2, [r7, #8]
 8009abc:	68f9      	ldr	r1, [r7, #12]
 8009abe:	4806      	ldr	r0, [pc, #24]	; (8009ad8 <BSP_SD_ReadBlocks_DMA+0x30>)
 8009ac0:	f7fb fc5a 	bl	8005378 <HAL_SD_ReadBlocks_DMA>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d001      	beq.n	8009ace <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009aca:	2301      	movs	r3, #1
 8009acc:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 8009ace:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	3718      	adds	r7, #24
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}
 8009ad8:	20000a08 	.word	0x20000a08

08009adc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b086      	sub	sp, #24
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	60f8      	str	r0, [r7, #12]
 8009ae4:	60b9      	str	r1, [r7, #8]
 8009ae6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	68ba      	ldr	r2, [r7, #8]
 8009af0:	68f9      	ldr	r1, [r7, #12]
 8009af2:	4806      	ldr	r0, [pc, #24]	; (8009b0c <BSP_SD_WriteBlocks_DMA+0x30>)
 8009af4:	f7fb fd2a 	bl	800554c <HAL_SD_WriteBlocks_DMA>
 8009af8:	4603      	mov	r3, r0
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d001      	beq.n	8009b02 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009afe:	2301      	movs	r3, #1
 8009b00:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 8009b02:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	3718      	adds	r7, #24
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}
 8009b0c:	20000a08 	.word	0x20000a08

08009b10 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009b14:	4805      	ldr	r0, [pc, #20]	; (8009b2c <BSP_SD_GetCardState+0x1c>)
 8009b16:	f7fc fa03 	bl	8005f20 <HAL_SD_GetCardState>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	2b04      	cmp	r3, #4
 8009b1e:	bf14      	ite	ne
 8009b20:	2301      	movne	r3, #1
 8009b22:	2300      	moveq	r3, #0
 8009b24:	b2db      	uxtb	r3, r3
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	bd80      	pop	{r7, pc}
 8009b2a:	bf00      	nop
 8009b2c:	20000a08 	.word	0x20000a08

08009b30 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b082      	sub	sp, #8
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8009b38:	6879      	ldr	r1, [r7, #4]
 8009b3a:	4803      	ldr	r0, [pc, #12]	; (8009b48 <BSP_SD_GetCardInfo+0x18>)
 8009b3c:	f7fc f948 	bl	8005dd0 <HAL_SD_GetCardInfo>
}
 8009b40:	bf00      	nop
 8009b42:	3708      	adds	r7, #8
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}
 8009b48:	20000a08 	.word	0x20000a08

08009b4c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b082      	sub	sp, #8
 8009b50:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8009b52:	2301      	movs	r3, #1
 8009b54:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 8009b56:	f000 f80b 	bl	8009b70 <BSP_PlatformIsDetected>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d101      	bne.n	8009b64 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8009b60:	2300      	movs	r3, #0
 8009b62:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8009b64:	79fb      	ldrb	r3, [r7, #7]
 8009b66:	b2db      	uxtb	r3, r3
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	3708      	adds	r7, #8
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}

08009b70 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b082      	sub	sp, #8
 8009b74:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8009b76:	2301      	movs	r3, #1
 8009b78:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8009b7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009b7e:	4806      	ldr	r0, [pc, #24]	; (8009b98 <BSP_PlatformIsDetected+0x28>)
 8009b80:	f7f9 f8d8 	bl	8002d34 <HAL_GPIO_ReadPin>
 8009b84:	4603      	mov	r3, r0
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d001      	beq.n	8009b8e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 8009b8e:	79fb      	ldrb	r3, [r7, #7]
}  
 8009b90:	4618      	mov	r0, r3
 8009b92:	3708      	adds	r7, #8
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}
 8009b98:	40020000 	.word	0x40020000

08009b9c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b084      	sub	sp, #16
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8009ba4:	f7f8 fa50 	bl	8002048 <HAL_GetTick>
 8009ba8:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8009baa:	e006      	b.n	8009bba <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009bac:	f7ff ffb0 	bl	8009b10 <BSP_SD_GetCardState>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d101      	bne.n	8009bba <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	e009      	b.n	8009bce <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8009bba:	f7f8 fa45 	bl	8002048 <HAL_GetTick>
 8009bbe:	4602      	mov	r2, r0
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	1ad3      	subs	r3, r2, r3
 8009bc4:	687a      	ldr	r2, [r7, #4]
 8009bc6:	429a      	cmp	r2, r3
 8009bc8:	d8f0      	bhi.n	8009bac <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8009bca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3710      	adds	r7, #16
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}
	...

08009bd8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b082      	sub	sp, #8
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	4603      	mov	r3, r0
 8009be0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8009be2:	4b0b      	ldr	r3, [pc, #44]	; (8009c10 <SD_CheckStatus+0x38>)
 8009be4:	2201      	movs	r2, #1
 8009be6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8009be8:	f7ff ff92 	bl	8009b10 <BSP_SD_GetCardState>
 8009bec:	4603      	mov	r3, r0
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d107      	bne.n	8009c02 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8009bf2:	4b07      	ldr	r3, [pc, #28]	; (8009c10 <SD_CheckStatus+0x38>)
 8009bf4:	781b      	ldrb	r3, [r3, #0]
 8009bf6:	b2db      	uxtb	r3, r3
 8009bf8:	f023 0301 	bic.w	r3, r3, #1
 8009bfc:	b2da      	uxtb	r2, r3
 8009bfe:	4b04      	ldr	r3, [pc, #16]	; (8009c10 <SD_CheckStatus+0x38>)
 8009c00:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8009c02:	4b03      	ldr	r3, [pc, #12]	; (8009c10 <SD_CheckStatus+0x38>)
 8009c04:	781b      	ldrb	r3, [r3, #0]
 8009c06:	b2db      	uxtb	r3, r3
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	3708      	adds	r7, #8
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd80      	pop	{r7, pc}
 8009c10:	2000000d 	.word	0x2000000d

08009c14 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b082      	sub	sp, #8
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8009c1e:	f7ff ff1d 	bl	8009a5c <BSP_SD_Init>
 8009c22:	4603      	mov	r3, r0
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d107      	bne.n	8009c38 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8009c28:	79fb      	ldrb	r3, [r7, #7]
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f7ff ffd4 	bl	8009bd8 <SD_CheckStatus>
 8009c30:	4603      	mov	r3, r0
 8009c32:	461a      	mov	r2, r3
 8009c34:	4b04      	ldr	r3, [pc, #16]	; (8009c48 <SD_initialize+0x34>)
 8009c36:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 8009c38:	4b03      	ldr	r3, [pc, #12]	; (8009c48 <SD_initialize+0x34>)
 8009c3a:	781b      	ldrb	r3, [r3, #0]
 8009c3c:	b2db      	uxtb	r3, r3
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3708      	adds	r7, #8
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}
 8009c46:	bf00      	nop
 8009c48:	2000000d 	.word	0x2000000d

08009c4c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b082      	sub	sp, #8
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	4603      	mov	r3, r0
 8009c54:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8009c56:	79fb      	ldrb	r3, [r7, #7]
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f7ff ffbd 	bl	8009bd8 <SD_CheckStatus>
 8009c5e:	4603      	mov	r3, r0
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	3708      	adds	r7, #8
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}

08009c68 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b088      	sub	sp, #32
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	60b9      	str	r1, [r7, #8]
 8009c70:	607a      	str	r2, [r7, #4]
 8009c72:	603b      	str	r3, [r7, #0]
 8009c74:	4603      	mov	r3, r0
 8009c76:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009c78:	2301      	movs	r3, #1
 8009c7a:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009c7c:	f247 5030 	movw	r0, #30000	; 0x7530
 8009c80:	f7ff ff8c 	bl	8009b9c <SD_CheckStatusWithTimeout>
 8009c84:	4603      	mov	r3, r0
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	da01      	bge.n	8009c8e <SD_read+0x26>
  {
    return res;
 8009c8a:	7ffb      	ldrb	r3, [r7, #31]
 8009c8c:	e08b      	b.n	8009da6 <SD_read+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	f003 0303 	and.w	r3, r3, #3
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	f040 8085 	bne.w	8009da4 <SD_read+0x13c>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8009c9a:	683a      	ldr	r2, [r7, #0]
 8009c9c:	6879      	ldr	r1, [r7, #4]
 8009c9e:	68b8      	ldr	r0, [r7, #8]
 8009ca0:	f7ff ff02 	bl	8009aa8 <BSP_SD_ReadBlocks_DMA>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d133      	bne.n	8009d12 <SD_read+0xaa>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8009caa:	4b41      	ldr	r3, [pc, #260]	; (8009db0 <SD_read+0x148>)
 8009cac:	2200      	movs	r2, #0
 8009cae:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8009cb0:	f7f8 f9ca 	bl	8002048 <HAL_GetTick>
 8009cb4:	6178      	str	r0, [r7, #20]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8009cb6:	bf00      	nop
 8009cb8:	4b3d      	ldr	r3, [pc, #244]	; (8009db0 <SD_read+0x148>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d108      	bne.n	8009cd2 <SD_read+0x6a>
 8009cc0:	f7f8 f9c2 	bl	8002048 <HAL_GetTick>
 8009cc4:	4602      	mov	r2, r0
 8009cc6:	697b      	ldr	r3, [r7, #20]
 8009cc8:	1ad3      	subs	r3, r2, r3
 8009cca:	f247 522f 	movw	r2, #29999	; 0x752f
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d9f2      	bls.n	8009cb8 <SD_read+0x50>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 8009cd2:	4b37      	ldr	r3, [pc, #220]	; (8009db0 <SD_read+0x148>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d102      	bne.n	8009ce0 <SD_read+0x78>
      {
        res = RES_ERROR;
 8009cda:	2301      	movs	r3, #1
 8009cdc:	77fb      	strb	r3, [r7, #31]
 8009cde:	e061      	b.n	8009da4 <SD_read+0x13c>
      }
      else
      {
        ReadStatus = 0;
 8009ce0:	4b33      	ldr	r3, [pc, #204]	; (8009db0 <SD_read+0x148>)
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8009ce6:	f7f8 f9af 	bl	8002048 <HAL_GetTick>
 8009cea:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009cec:	e007      	b.n	8009cfe <SD_read+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009cee:	f7ff ff0f 	bl	8009b10 <BSP_SD_GetCardState>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d102      	bne.n	8009cfe <SD_read+0x96>
          {
            res = RES_OK;
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	77fb      	strb	r3, [r7, #31]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8009cfc:	e052      	b.n	8009da4 <SD_read+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009cfe:	f7f8 f9a3 	bl	8002048 <HAL_GetTick>
 8009d02:	4602      	mov	r2, r0
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	1ad3      	subs	r3, r2, r3
 8009d08:	f247 522f 	movw	r2, #29999	; 0x752f
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d9ee      	bls.n	8009cee <SD_read+0x86>
 8009d10:	e048      	b.n	8009da4 <SD_read+0x13c>
#if defined(ENABLE_SCRATCH_BUFFER)
    else {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 8009d12:	2300      	movs	r3, #0
 8009d14:	61bb      	str	r3, [r7, #24]
 8009d16:	e034      	b.n	8009d82 <SD_read+0x11a>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	1c5a      	adds	r2, r3, #1
 8009d1c:	607a      	str	r2, [r7, #4]
 8009d1e:	2201      	movs	r2, #1
 8009d20:	4619      	mov	r1, r3
 8009d22:	4824      	ldr	r0, [pc, #144]	; (8009db4 <SD_read+0x14c>)
 8009d24:	f7ff fec0 	bl	8009aa8 <BSP_SD_ReadBlocks_DMA>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 8009d2c:	7fbb      	ldrb	r3, [r7, #30]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d12c      	bne.n	8009d8c <SD_read+0x124>
          /* wait until the read is successful or a timeout occurs */

          ReadStatus = 0;
 8009d32:	4b1f      	ldr	r3, [pc, #124]	; (8009db0 <SD_read+0x148>)
 8009d34:	2200      	movs	r2, #0
 8009d36:	601a      	str	r2, [r3, #0]
          timeout = HAL_GetTick();
 8009d38:	f7f8 f986 	bl	8002048 <HAL_GetTick>
 8009d3c:	6178      	str	r0, [r7, #20]
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8009d3e:	bf00      	nop
 8009d40:	4b1b      	ldr	r3, [pc, #108]	; (8009db0 <SD_read+0x148>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d108      	bne.n	8009d5a <SD_read+0xf2>
 8009d48:	f7f8 f97e 	bl	8002048 <HAL_GetTick>
 8009d4c:	4602      	mov	r2, r0
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	1ad3      	subs	r3, r2, r3
 8009d52:	f247 522f 	movw	r2, #29999	; 0x752f
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d9f2      	bls.n	8009d40 <SD_read+0xd8>
          {
          }
          if (ReadStatus == 0)
 8009d5a:	4b15      	ldr	r3, [pc, #84]	; (8009db0 <SD_read+0x148>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d016      	beq.n	8009d90 <SD_read+0x128>
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	4a13      	ldr	r2, [pc, #76]	; (8009db4 <SD_read+0x14c>)
 8009d66:	4618      	mov	r0, r3
 8009d68:	4611      	mov	r1, r2
 8009d6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d6e:	461a      	mov	r2, r3
 8009d70:	f002 f9b8 	bl	800c0e4 <memcpy>
          buff += BLOCKSIZE;
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009d7a:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 8009d7c:	69bb      	ldr	r3, [r7, #24]
 8009d7e:	3301      	adds	r3, #1
 8009d80:	61bb      	str	r3, [r7, #24]
 8009d82:	69bb      	ldr	r3, [r7, #24]
 8009d84:	683a      	ldr	r2, [r7, #0]
 8009d86:	429a      	cmp	r2, r3
 8009d88:	d8c6      	bhi.n	8009d18 <SD_read+0xb0>
 8009d8a:	e002      	b.n	8009d92 <SD_read+0x12a>
        }
        else
        {
          break;
 8009d8c:	bf00      	nop
 8009d8e:	e000      	b.n	8009d92 <SD_read+0x12a>
            break;
 8009d90:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 8009d92:	69bb      	ldr	r3, [r7, #24]
 8009d94:	683a      	ldr	r2, [r7, #0]
 8009d96:	429a      	cmp	r2, r3
 8009d98:	d104      	bne.n	8009da4 <SD_read+0x13c>
 8009d9a:	7fbb      	ldrb	r3, [r7, #30]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d101      	bne.n	8009da4 <SD_read+0x13c>
        res = RES_OK;
 8009da0:	2300      	movs	r3, #0
 8009da2:	77fb      	strb	r3, [r7, #31]
    }
#endif
  }

  return res;
 8009da4:	7ffb      	ldrb	r3, [r7, #31]
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	3720      	adds	r7, #32
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}
 8009dae:	bf00      	nop
 8009db0:	20000574 	.word	0x20000574
 8009db4:	20000370 	.word	0x20000370

08009db8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b088      	sub	sp, #32
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	60b9      	str	r1, [r7, #8]
 8009dc0:	607a      	str	r2, [r7, #4]
 8009dc2:	603b      	str	r3, [r7, #0]
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009dc8:	2301      	movs	r3, #1
 8009dca:	77fb      	strb	r3, [r7, #31]
  uint32_t timeout;
  uint8_t ret;
  int i;

   WriteStatus = 0;
 8009dcc:	4b4c      	ldr	r3, [pc, #304]	; (8009f00 <SD_write+0x148>)
 8009dce:	2200      	movs	r2, #0
 8009dd0:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009dd2:	f247 5030 	movw	r0, #30000	; 0x7530
 8009dd6:	f7ff fee1 	bl	8009b9c <SD_CheckStatusWithTimeout>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	da01      	bge.n	8009de4 <SD_write+0x2c>
  {
    return res;
 8009de0:	7ffb      	ldrb	r3, [r7, #31]
 8009de2:	e088      	b.n	8009ef6 <SD_write+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	f003 0303 	and.w	r3, r3, #3
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	f040 8082 	bne.w	8009ef4 <SD_write+0x13c>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8009df0:	683a      	ldr	r2, [r7, #0]
 8009df2:	6879      	ldr	r1, [r7, #4]
 8009df4:	68b8      	ldr	r0, [r7, #8]
 8009df6:	f7ff fe71 	bl	8009adc <BSP_SD_WriteBlocks_DMA>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d130      	bne.n	8009e62 <SD_write+0xaa>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8009e00:	f7f8 f922 	bl	8002048 <HAL_GetTick>
 8009e04:	6178      	str	r0, [r7, #20]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8009e06:	bf00      	nop
 8009e08:	4b3d      	ldr	r3, [pc, #244]	; (8009f00 <SD_write+0x148>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d108      	bne.n	8009e22 <SD_write+0x6a>
 8009e10:	f7f8 f91a 	bl	8002048 <HAL_GetTick>
 8009e14:	4602      	mov	r2, r0
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	1ad3      	subs	r3, r2, r3
 8009e1a:	f247 522f 	movw	r2, #29999	; 0x752f
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d9f2      	bls.n	8009e08 <SD_write+0x50>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 8009e22:	4b37      	ldr	r3, [pc, #220]	; (8009f00 <SD_write+0x148>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d102      	bne.n	8009e30 <SD_write+0x78>
      {
        res = RES_ERROR;
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	77fb      	strb	r3, [r7, #31]
 8009e2e:	e061      	b.n	8009ef4 <SD_write+0x13c>
      }
      else
      {
        WriteStatus = 0;
 8009e30:	4b33      	ldr	r3, [pc, #204]	; (8009f00 <SD_write+0x148>)
 8009e32:	2200      	movs	r2, #0
 8009e34:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8009e36:	f7f8 f907 	bl	8002048 <HAL_GetTick>
 8009e3a:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009e3c:	e007      	b.n	8009e4e <SD_write+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009e3e:	f7ff fe67 	bl	8009b10 <BSP_SD_GetCardState>
 8009e42:	4603      	mov	r3, r0
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d102      	bne.n	8009e4e <SD_write+0x96>
          {
            res = RES_OK;
 8009e48:	2300      	movs	r3, #0
 8009e4a:	77fb      	strb	r3, [r7, #31]
            break;
 8009e4c:	e052      	b.n	8009ef4 <SD_write+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009e4e:	f7f8 f8fb 	bl	8002048 <HAL_GetTick>
 8009e52:	4602      	mov	r2, r0
 8009e54:	697b      	ldr	r3, [r7, #20]
 8009e56:	1ad3      	subs	r3, r2, r3
 8009e58:	f247 522f 	movw	r2, #29999	; 0x752f
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	d9ee      	bls.n	8009e3e <SD_write+0x86>
 8009e60:	e048      	b.n	8009ef4 <SD_write+0x13c>
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 8009e62:	2300      	movs	r3, #0
 8009e64:	61bb      	str	r3, [r7, #24]
 8009e66:	e034      	b.n	8009ed2 <SD_write+0x11a>
      {
        WriteStatus = 0;
 8009e68:	4b25      	ldr	r3, [pc, #148]	; (8009f00 <SD_write+0x148>)
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	601a      	str	r2, [r3, #0]
        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	1c5a      	adds	r2, r3, #1
 8009e72:	607a      	str	r2, [r7, #4]
 8009e74:	2201      	movs	r2, #1
 8009e76:	4619      	mov	r1, r3
 8009e78:	4822      	ldr	r0, [pc, #136]	; (8009f04 <SD_write+0x14c>)
 8009e7a:	f7ff fe2f 	bl	8009adc <BSP_SD_WriteBlocks_DMA>
 8009e7e:	4603      	mov	r3, r0
 8009e80:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 8009e82:	7fbb      	ldrb	r3, [r7, #30]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d129      	bne.n	8009edc <SD_write+0x124>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 8009e88:	f7f8 f8de 	bl	8002048 <HAL_GetTick>
 8009e8c:	6178      	str	r0, [r7, #20]
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8009e8e:	bf00      	nop
 8009e90:	4b1b      	ldr	r3, [pc, #108]	; (8009f00 <SD_write+0x148>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d108      	bne.n	8009eaa <SD_write+0xf2>
 8009e98:	f7f8 f8d6 	bl	8002048 <HAL_GetTick>
 8009e9c:	4602      	mov	r2, r0
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	1ad3      	subs	r3, r2, r3
 8009ea2:	f247 522f 	movw	r2, #29999	; 0x752f
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	d9f2      	bls.n	8009e90 <SD_write+0xd8>
          {
          }
          if (WriteStatus == 0)
 8009eaa:	4b15      	ldr	r3, [pc, #84]	; (8009f00 <SD_write+0x148>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d016      	beq.n	8009ee0 <SD_write+0x128>
          {
            break;
          }

          memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	4a13      	ldr	r2, [pc, #76]	; (8009f04 <SD_write+0x14c>)
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	4611      	mov	r1, r2
 8009eba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ebe:	461a      	mov	r2, r3
 8009ec0:	f002 f910 	bl	800c0e4 <memcpy>
          buff += BLOCKSIZE;
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009eca:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++)
 8009ecc:	69bb      	ldr	r3, [r7, #24]
 8009ece:	3301      	adds	r3, #1
 8009ed0:	61bb      	str	r3, [r7, #24]
 8009ed2:	69bb      	ldr	r3, [r7, #24]
 8009ed4:	683a      	ldr	r2, [r7, #0]
 8009ed6:	429a      	cmp	r2, r3
 8009ed8:	d8c6      	bhi.n	8009e68 <SD_write+0xb0>
 8009eda:	e002      	b.n	8009ee2 <SD_write+0x12a>
        }
        else
        {
          break;
 8009edc:	bf00      	nop
 8009ede:	e000      	b.n	8009ee2 <SD_write+0x12a>
            break;
 8009ee0:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 8009ee2:	69bb      	ldr	r3, [r7, #24]
 8009ee4:	683a      	ldr	r2, [r7, #0]
 8009ee6:	429a      	cmp	r2, r3
 8009ee8:	d104      	bne.n	8009ef4 <SD_write+0x13c>
 8009eea:	7fbb      	ldrb	r3, [r7, #30]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d101      	bne.n	8009ef4 <SD_write+0x13c>
        res = RES_OK;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	77fb      	strb	r3, [r7, #31]
    }

  }
  return res;
 8009ef4:	7ffb      	ldrb	r3, [r7, #31]
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3720      	adds	r7, #32
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}
 8009efe:	bf00      	nop
 8009f00:	20000570 	.word	0x20000570
 8009f04:	20000370 	.word	0x20000370

08009f08 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b08c      	sub	sp, #48	; 0x30
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	4603      	mov	r3, r0
 8009f10:	603a      	str	r2, [r7, #0]
 8009f12:	71fb      	strb	r3, [r7, #7]
 8009f14:	460b      	mov	r3, r1
 8009f16:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009f18:	2301      	movs	r3, #1
 8009f1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009f1e:	4b25      	ldr	r3, [pc, #148]	; (8009fb4 <SD_ioctl+0xac>)
 8009f20:	781b      	ldrb	r3, [r3, #0]
 8009f22:	b2db      	uxtb	r3, r3
 8009f24:	f003 0301 	and.w	r3, r3, #1
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d001      	beq.n	8009f30 <SD_ioctl+0x28>
 8009f2c:	2303      	movs	r3, #3
 8009f2e:	e03c      	b.n	8009faa <SD_ioctl+0xa2>

  switch (cmd)
 8009f30:	79bb      	ldrb	r3, [r7, #6]
 8009f32:	2b03      	cmp	r3, #3
 8009f34:	d834      	bhi.n	8009fa0 <SD_ioctl+0x98>
 8009f36:	a201      	add	r2, pc, #4	; (adr r2, 8009f3c <SD_ioctl+0x34>)
 8009f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f3c:	08009f4d 	.word	0x08009f4d
 8009f40:	08009f55 	.word	0x08009f55
 8009f44:	08009f6d 	.word	0x08009f6d
 8009f48:	08009f87 	.word	0x08009f87
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009f52:	e028      	b.n	8009fa6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009f54:	f107 030c 	add.w	r3, r7, #12
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f7ff fde9 	bl	8009b30 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009f64:	2300      	movs	r3, #0
 8009f66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009f6a:	e01c      	b.n	8009fa6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009f6c:	f107 030c 	add.w	r3, r7, #12
 8009f70:	4618      	mov	r0, r3
 8009f72:	f7ff fddd 	bl	8009b30 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f78:	b29a      	uxth	r2, r3
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009f84:	e00f      	b.n	8009fa6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009f86:	f107 030c 	add.w	r3, r7, #12
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f7ff fdd0 	bl	8009b30 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f92:	0a5a      	lsrs	r2, r3, #9
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009f98:	2300      	movs	r3, #0
 8009f9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009f9e:	e002      	b.n	8009fa6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009fa0:	2304      	movs	r3, #4
 8009fa2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8009fa6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	3730      	adds	r7, #48	; 0x30
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}
 8009fb2:	bf00      	nop
 8009fb4:	2000000d 	.word	0x2000000d

08009fb8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b084      	sub	sp, #16
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
 8009fc0:	460b      	mov	r3, r1
 8009fc2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	7c1b      	ldrb	r3, [r3, #16]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d115      	bne.n	8009ffc <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009fd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009fd4:	2202      	movs	r2, #2
 8009fd6:	2181      	movs	r1, #129	; 0x81
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f001 fefc 	bl	800bdd6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2201      	movs	r2, #1
 8009fe2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009fe4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009fe8:	2202      	movs	r2, #2
 8009fea:	2101      	movs	r1, #1
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f001 fef2 	bl	800bdd6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2201      	movs	r2, #1
 8009ff6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8009ffa:	e012      	b.n	800a022 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009ffc:	2340      	movs	r3, #64	; 0x40
 8009ffe:	2202      	movs	r2, #2
 800a000:	2181      	movs	r1, #129	; 0x81
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f001 fee7 	bl	800bdd6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2201      	movs	r2, #1
 800a00c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a00e:	2340      	movs	r3, #64	; 0x40
 800a010:	2202      	movs	r2, #2
 800a012:	2101      	movs	r1, #1
 800a014:	6878      	ldr	r0, [r7, #4]
 800a016:	f001 fede 	bl	800bdd6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2201      	movs	r2, #1
 800a01e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a022:	2308      	movs	r3, #8
 800a024:	2203      	movs	r2, #3
 800a026:	2182      	movs	r1, #130	; 0x82
 800a028:	6878      	ldr	r0, [r7, #4]
 800a02a:	f001 fed4 	bl	800bdd6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2201      	movs	r2, #1
 800a032:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800a034:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a038:	f002 f844 	bl	800c0c4 <malloc>
 800a03c:	4603      	mov	r3, r0
 800a03e:	461a      	mov	r2, r3
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d102      	bne.n	800a056 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 800a050:	2301      	movs	r3, #1
 800a052:	73fb      	strb	r3, [r7, #15]
 800a054:	e026      	b.n	800a0a4 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a05c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	2200      	movs	r2, #0
 800a06c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	2200      	movs	r2, #0
 800a074:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	7c1b      	ldrb	r3, [r3, #16]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d109      	bne.n	800a094 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a086:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a08a:	2101      	movs	r1, #1
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f001 ff93 	bl	800bfb8 <USBD_LL_PrepareReceive>
 800a092:	e007      	b.n	800a0a4 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a09a:	2340      	movs	r3, #64	; 0x40
 800a09c:	2101      	movs	r1, #1
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f001 ff8a 	bl	800bfb8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800a0a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	3710      	adds	r7, #16
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}

0800a0ae <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a0ae:	b580      	push	{r7, lr}
 800a0b0:	b084      	sub	sp, #16
 800a0b2:	af00      	add	r7, sp, #0
 800a0b4:	6078      	str	r0, [r7, #4]
 800a0b6:	460b      	mov	r3, r1
 800a0b8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a0be:	2181      	movs	r1, #129	; 0x81
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f001 feae 	bl	800be22 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a0cc:	2101      	movs	r1, #1
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f001 fea7 	bl	800be22 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a0dc:	2182      	movs	r1, #130	; 0x82
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f001 fe9f 	bl	800be22 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d00e      	beq.n	800a112 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a0fa:	685b      	ldr	r3, [r3, #4]
 800a0fc:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a104:	4618      	mov	r0, r3
 800a106:	f001 ffe5 	bl	800c0d4 <free>
    pdev->pClassData = NULL;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2200      	movs	r2, #0
 800a10e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800a112:	7bfb      	ldrb	r3, [r7, #15]
}
 800a114:	4618      	mov	r0, r3
 800a116:	3710      	adds	r7, #16
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}

0800a11c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b086      	sub	sp, #24
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
 800a124:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a12c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a12e:	2300      	movs	r3, #0
 800a130:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800a132:	2300      	movs	r3, #0
 800a134:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800a136:	2300      	movs	r3, #0
 800a138:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	781b      	ldrb	r3, [r3, #0]
 800a13e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a142:	2b00      	cmp	r3, #0
 800a144:	d039      	beq.n	800a1ba <USBD_CDC_Setup+0x9e>
 800a146:	2b20      	cmp	r3, #32
 800a148:	d17c      	bne.n	800a244 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	88db      	ldrh	r3, [r3, #6]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d029      	beq.n	800a1a6 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	781b      	ldrb	r3, [r3, #0]
 800a156:	b25b      	sxtb	r3, r3
 800a158:	2b00      	cmp	r3, #0
 800a15a:	da11      	bge.n	800a180 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a162:	689b      	ldr	r3, [r3, #8]
 800a164:	683a      	ldr	r2, [r7, #0]
 800a166:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800a168:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a16a:	683a      	ldr	r2, [r7, #0]
 800a16c:	88d2      	ldrh	r2, [r2, #6]
 800a16e:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a170:	6939      	ldr	r1, [r7, #16]
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	88db      	ldrh	r3, [r3, #6]
 800a176:	461a      	mov	r2, r3
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f001 f99b 	bl	800b4b4 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800a17e:	e068      	b.n	800a252 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	785a      	ldrb	r2, [r3, #1]
 800a184:	693b      	ldr	r3, [r7, #16]
 800a186:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	88db      	ldrh	r3, [r3, #6]
 800a18e:	b2da      	uxtb	r2, r3
 800a190:	693b      	ldr	r3, [r7, #16]
 800a192:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a196:	6939      	ldr	r1, [r7, #16]
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	88db      	ldrh	r3, [r3, #6]
 800a19c:	461a      	mov	r2, r3
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f001 f9b6 	bl	800b510 <USBD_CtlPrepareRx>
    break;
 800a1a4:	e055      	b.n	800a252 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a1ac:	689b      	ldr	r3, [r3, #8]
 800a1ae:	683a      	ldr	r2, [r7, #0]
 800a1b0:	7850      	ldrb	r0, [r2, #1]
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	6839      	ldr	r1, [r7, #0]
 800a1b6:	4798      	blx	r3
    break;
 800a1b8:	e04b      	b.n	800a252 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	785b      	ldrb	r3, [r3, #1]
 800a1be:	2b0a      	cmp	r3, #10
 800a1c0:	d017      	beq.n	800a1f2 <USBD_CDC_Setup+0xd6>
 800a1c2:	2b0b      	cmp	r3, #11
 800a1c4:	d029      	beq.n	800a21a <USBD_CDC_Setup+0xfe>
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d133      	bne.n	800a232 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a1d0:	2b03      	cmp	r3, #3
 800a1d2:	d107      	bne.n	800a1e4 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800a1d4:	f107 030c 	add.w	r3, r7, #12
 800a1d8:	2202      	movs	r2, #2
 800a1da:	4619      	mov	r1, r3
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f001 f969 	bl	800b4b4 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800a1e2:	e02e      	b.n	800a242 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800a1e4:	6839      	ldr	r1, [r7, #0]
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	f001 f8f9 	bl	800b3de <USBD_CtlError>
			  ret = USBD_FAIL;
 800a1ec:	2302      	movs	r3, #2
 800a1ee:	75fb      	strb	r3, [r7, #23]
      break;
 800a1f0:	e027      	b.n	800a242 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a1f8:	2b03      	cmp	r3, #3
 800a1fa:	d107      	bne.n	800a20c <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800a1fc:	f107 030f 	add.w	r3, r7, #15
 800a200:	2201      	movs	r2, #1
 800a202:	4619      	mov	r1, r3
 800a204:	6878      	ldr	r0, [r7, #4]
 800a206:	f001 f955 	bl	800b4b4 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800a20a:	e01a      	b.n	800a242 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800a20c:	6839      	ldr	r1, [r7, #0]
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f001 f8e5 	bl	800b3de <USBD_CtlError>
			  ret = USBD_FAIL;
 800a214:	2302      	movs	r3, #2
 800a216:	75fb      	strb	r3, [r7, #23]
      break;
 800a218:	e013      	b.n	800a242 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a220:	2b03      	cmp	r3, #3
 800a222:	d00d      	beq.n	800a240 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 800a224:	6839      	ldr	r1, [r7, #0]
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f001 f8d9 	bl	800b3de <USBD_CtlError>
			  ret = USBD_FAIL;
 800a22c:	2302      	movs	r3, #2
 800a22e:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800a230:	e006      	b.n	800a240 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 800a232:	6839      	ldr	r1, [r7, #0]
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f001 f8d2 	bl	800b3de <USBD_CtlError>
      ret = USBD_FAIL;
 800a23a:	2302      	movs	r3, #2
 800a23c:	75fb      	strb	r3, [r7, #23]
      break;
 800a23e:	e000      	b.n	800a242 <USBD_CDC_Setup+0x126>
      break;
 800a240:	bf00      	nop
    }
    break;
 800a242:	e006      	b.n	800a252 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 800a244:	6839      	ldr	r1, [r7, #0]
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f001 f8c9 	bl	800b3de <USBD_CtlError>
    ret = USBD_FAIL;
 800a24c:	2302      	movs	r3, #2
 800a24e:	75fb      	strb	r3, [r7, #23]
    break;
 800a250:	bf00      	nop
  }

  return ret;
 800a252:	7dfb      	ldrb	r3, [r7, #23]
}
 800a254:	4618      	mov	r0, r3
 800a256:	3718      	adds	r7, #24
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}

0800a25c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b084      	sub	sp, #16
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
 800a264:	460b      	mov	r3, r1
 800a266:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a26e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a276:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d03a      	beq.n	800a2f8 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a282:	78fa      	ldrb	r2, [r7, #3]
 800a284:	6879      	ldr	r1, [r7, #4]
 800a286:	4613      	mov	r3, r2
 800a288:	009b      	lsls	r3, r3, #2
 800a28a:	4413      	add	r3, r2
 800a28c:	009b      	lsls	r3, r3, #2
 800a28e:	440b      	add	r3, r1
 800a290:	331c      	adds	r3, #28
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d029      	beq.n	800a2ec <USBD_CDC_DataIn+0x90>
 800a298:	78fa      	ldrb	r2, [r7, #3]
 800a29a:	6879      	ldr	r1, [r7, #4]
 800a29c:	4613      	mov	r3, r2
 800a29e:	009b      	lsls	r3, r3, #2
 800a2a0:	4413      	add	r3, r2
 800a2a2:	009b      	lsls	r3, r3, #2
 800a2a4:	440b      	add	r3, r1
 800a2a6:	331c      	adds	r3, #28
 800a2a8:	681a      	ldr	r2, [r3, #0]
 800a2aa:	78f9      	ldrb	r1, [r7, #3]
 800a2ac:	68b8      	ldr	r0, [r7, #8]
 800a2ae:	460b      	mov	r3, r1
 800a2b0:	00db      	lsls	r3, r3, #3
 800a2b2:	1a5b      	subs	r3, r3, r1
 800a2b4:	009b      	lsls	r3, r3, #2
 800a2b6:	4403      	add	r3, r0
 800a2b8:	3344      	adds	r3, #68	; 0x44
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	fbb2 f1f3 	udiv	r1, r2, r3
 800a2c0:	fb03 f301 	mul.w	r3, r3, r1
 800a2c4:	1ad3      	subs	r3, r2, r3
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d110      	bne.n	800a2ec <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800a2ca:	78fa      	ldrb	r2, [r7, #3]
 800a2cc:	6879      	ldr	r1, [r7, #4]
 800a2ce:	4613      	mov	r3, r2
 800a2d0:	009b      	lsls	r3, r3, #2
 800a2d2:	4413      	add	r3, r2
 800a2d4:	009b      	lsls	r3, r3, #2
 800a2d6:	440b      	add	r3, r1
 800a2d8:	331c      	adds	r3, #28
 800a2da:	2200      	movs	r2, #0
 800a2dc:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800a2de:	78f9      	ldrb	r1, [r7, #3]
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	f001 fe44 	bl	800bf72 <USBD_LL_Transmit>
 800a2ea:	e003      	b.n	800a2f4 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	e000      	b.n	800a2fa <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800a2f8:	2302      	movs	r3, #2
  }
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3710      	adds	r7, #16
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}

0800a302 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a302:	b580      	push	{r7, lr}
 800a304:	b084      	sub	sp, #16
 800a306:	af00      	add	r7, sp, #0
 800a308:	6078      	str	r0, [r7, #4]
 800a30a:	460b      	mov	r3, r1
 800a30c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a314:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800a316:	78fb      	ldrb	r3, [r7, #3]
 800a318:	4619      	mov	r1, r3
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f001 fe6f 	bl	800bffe <USBD_LL_GetRxDataSize>
 800a320:	4602      	mov	r2, r0
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d00d      	beq.n	800a34e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a338:	68db      	ldr	r3, [r3, #12]
 800a33a:	68fa      	ldr	r2, [r7, #12]
 800a33c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a340:	68fa      	ldr	r2, [r7, #12]
 800a342:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a346:	4611      	mov	r1, r2
 800a348:	4798      	blx	r3

    return USBD_OK;
 800a34a:	2300      	movs	r3, #0
 800a34c:	e000      	b.n	800a350 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800a34e:	2302      	movs	r3, #2
  }
}
 800a350:	4618      	mov	r0, r3
 800a352:	3710      	adds	r7, #16
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}

0800a358 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b084      	sub	sp, #16
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a366:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d015      	beq.n	800a39e <USBD_CDC_EP0_RxReady+0x46>
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a378:	2bff      	cmp	r3, #255	; 0xff
 800a37a:	d010      	beq.n	800a39e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a382:	689b      	ldr	r3, [r3, #8]
 800a384:	68fa      	ldr	r2, [r7, #12]
 800a386:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800a38a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a38c:	68fa      	ldr	r2, [r7, #12]
 800a38e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a392:	b292      	uxth	r2, r2
 800a394:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	22ff      	movs	r2, #255	; 0xff
 800a39a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800a39e:	2300      	movs	r3, #0
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3710      	adds	r7, #16
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}

0800a3a8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b083      	sub	sp, #12
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2243      	movs	r2, #67	; 0x43
 800a3b4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800a3b6:	4b03      	ldr	r3, [pc, #12]	; (800a3c4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	370c      	adds	r7, #12
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c2:	4770      	bx	lr
 800a3c4:	20000098 	.word	0x20000098

0800a3c8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800a3c8:	b480      	push	{r7}
 800a3ca:	b083      	sub	sp, #12
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2243      	movs	r2, #67	; 0x43
 800a3d4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800a3d6:	4b03      	ldr	r3, [pc, #12]	; (800a3e4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	370c      	adds	r7, #12
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e2:	4770      	bx	lr
 800a3e4:	20000054 	.word	0x20000054

0800a3e8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b083      	sub	sp, #12
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2243      	movs	r2, #67	; 0x43
 800a3f4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800a3f6:	4b03      	ldr	r3, [pc, #12]	; (800a404 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	370c      	adds	r7, #12
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a402:	4770      	bx	lr
 800a404:	200000dc 	.word	0x200000dc

0800a408 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800a408:	b480      	push	{r7}
 800a40a:	b083      	sub	sp, #12
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	220a      	movs	r2, #10
 800a414:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800a416:	4b03      	ldr	r3, [pc, #12]	; (800a424 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a418:	4618      	mov	r0, r3
 800a41a:	370c      	adds	r7, #12
 800a41c:	46bd      	mov	sp, r7
 800a41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a422:	4770      	bx	lr
 800a424:	20000010 	.word	0x20000010

0800a428 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800a428:	b480      	push	{r7}
 800a42a:	b085      	sub	sp, #20
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
 800a430:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a432:	2302      	movs	r3, #2
 800a434:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d005      	beq.n	800a448 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	683a      	ldr	r2, [r7, #0]
 800a440:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 800a444:	2300      	movs	r3, #0
 800a446:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a448:	7bfb      	ldrb	r3, [r7, #15]
}
 800a44a:	4618      	mov	r0, r3
 800a44c:	3714      	adds	r7, #20
 800a44e:	46bd      	mov	sp, r7
 800a450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a454:	4770      	bx	lr

0800a456 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800a456:	b480      	push	{r7}
 800a458:	b087      	sub	sp, #28
 800a45a:	af00      	add	r7, sp, #0
 800a45c:	60f8      	str	r0, [r7, #12]
 800a45e:	60b9      	str	r1, [r7, #8]
 800a460:	4613      	mov	r3, r2
 800a462:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a46a:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a46c:	697b      	ldr	r3, [r7, #20]
 800a46e:	68ba      	ldr	r2, [r7, #8]
 800a470:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a474:	88fa      	ldrh	r2, [r7, #6]
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800a47c:	2300      	movs	r3, #0
}
 800a47e:	4618      	mov	r0, r3
 800a480:	371c      	adds	r7, #28
 800a482:	46bd      	mov	sp, r7
 800a484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a488:	4770      	bx	lr

0800a48a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800a48a:	b480      	push	{r7}
 800a48c:	b085      	sub	sp, #20
 800a48e:	af00      	add	r7, sp, #0
 800a490:	6078      	str	r0, [r7, #4]
 800a492:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a49a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	683a      	ldr	r2, [r7, #0]
 800a4a0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800a4a4:	2300      	movs	r3, #0
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3714      	adds	r7, #20
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b0:	4770      	bx	lr

0800a4b2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a4b2:	b580      	push	{r7, lr}
 800a4b4:	b084      	sub	sp, #16
 800a4b6:	af00      	add	r7, sp, #0
 800a4b8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a4c0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d017      	beq.n	800a4fc <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	7c1b      	ldrb	r3, [r3, #16]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d109      	bne.n	800a4e8 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a4da:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a4de:	2101      	movs	r1, #1
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f001 fd69 	bl	800bfb8 <USBD_LL_PrepareReceive>
 800a4e6:	e007      	b.n	800a4f8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a4ee:	2340      	movs	r3, #64	; 0x40
 800a4f0:	2101      	movs	r1, #1
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f001 fd60 	bl	800bfb8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	e000      	b.n	800a4fe <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800a4fc:	2302      	movs	r3, #2
  }
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3710      	adds	r7, #16
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}

0800a506 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a506:	b580      	push	{r7, lr}
 800a508:	b084      	sub	sp, #16
 800a50a:	af00      	add	r7, sp, #0
 800a50c:	60f8      	str	r0, [r7, #12]
 800a50e:	60b9      	str	r1, [r7, #8]
 800a510:	4613      	mov	r3, r2
 800a512:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d101      	bne.n	800a51e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a51a:	2302      	movs	r3, #2
 800a51c:	e01a      	b.n	800a554 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a524:	2b00      	cmp	r3, #0
 800a526:	d003      	beq.n	800a530 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	2200      	movs	r2, #0
 800a52c:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d003      	beq.n	800a53e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	68ba      	ldr	r2, [r7, #8]
 800a53a:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	2201      	movs	r2, #1
 800a542:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	79fa      	ldrb	r2, [r7, #7]
 800a54a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a54c:	68f8      	ldr	r0, [r7, #12]
 800a54e:	f001 fbdb 	bl	800bd08 <USBD_LL_Init>

  return USBD_OK;
 800a552:	2300      	movs	r3, #0
}
 800a554:	4618      	mov	r0, r3
 800a556:	3710      	adds	r7, #16
 800a558:	46bd      	mov	sp, r7
 800a55a:	bd80      	pop	{r7, pc}

0800a55c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a55c:	b480      	push	{r7}
 800a55e:	b085      	sub	sp, #20
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
 800a564:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800a566:	2300      	movs	r3, #0
 800a568:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d006      	beq.n	800a57e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	683a      	ldr	r2, [r7, #0]
 800a574:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800a578:	2300      	movs	r3, #0
 800a57a:	73fb      	strb	r3, [r7, #15]
 800a57c:	e001      	b.n	800a582 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a57e:	2302      	movs	r3, #2
 800a580:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a582:	7bfb      	ldrb	r3, [r7, #15]
}
 800a584:	4618      	mov	r0, r3
 800a586:	3714      	adds	r7, #20
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr

0800a590 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b082      	sub	sp, #8
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f001 fc01 	bl	800bda0 <USBD_LL_Start>

  return USBD_OK;
 800a59e:	2300      	movs	r3, #0
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3708      	adds	r7, #8
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}

0800a5a8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b083      	sub	sp, #12
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a5b0:	2300      	movs	r3, #0
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	370c      	adds	r7, #12
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5bc:	4770      	bx	lr

0800a5be <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a5be:	b580      	push	{r7, lr}
 800a5c0:	b084      	sub	sp, #16
 800a5c2:	af00      	add	r7, sp, #0
 800a5c4:	6078      	str	r0, [r7, #4]
 800a5c6:	460b      	mov	r3, r1
 800a5c8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800a5ca:	2302      	movs	r3, #2
 800a5cc:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d00c      	beq.n	800a5f2 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	78fa      	ldrb	r2, [r7, #3]
 800a5e2:	4611      	mov	r1, r2
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	4798      	blx	r3
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d101      	bne.n	800a5f2 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a5f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	3710      	adds	r7, #16
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}

0800a5fc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b082      	sub	sp, #8
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
 800a604:	460b      	mov	r3, r1
 800a606:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a60e:	685b      	ldr	r3, [r3, #4]
 800a610:	78fa      	ldrb	r2, [r7, #3]
 800a612:	4611      	mov	r1, r2
 800a614:	6878      	ldr	r0, [r7, #4]
 800a616:	4798      	blx	r3
  return USBD_OK;
 800a618:	2300      	movs	r3, #0
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	3708      	adds	r7, #8
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}

0800a622 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a622:	b580      	push	{r7, lr}
 800a624:	b082      	sub	sp, #8
 800a626:	af00      	add	r7, sp, #0
 800a628:	6078      	str	r0, [r7, #4]
 800a62a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800a632:	6839      	ldr	r1, [r7, #0]
 800a634:	4618      	mov	r0, r3
 800a636:	f000 fe95 	bl	800b364 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2201      	movs	r2, #1
 800a63e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800a648:	461a      	mov	r2, r3
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800a656:	f003 031f 	and.w	r3, r3, #31
 800a65a:	2b01      	cmp	r3, #1
 800a65c:	d00c      	beq.n	800a678 <USBD_LL_SetupStage+0x56>
 800a65e:	2b01      	cmp	r3, #1
 800a660:	d302      	bcc.n	800a668 <USBD_LL_SetupStage+0x46>
 800a662:	2b02      	cmp	r3, #2
 800a664:	d010      	beq.n	800a688 <USBD_LL_SetupStage+0x66>
 800a666:	e017      	b.n	800a698 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800a66e:	4619      	mov	r1, r3
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f000 fa05 	bl	800aa80 <USBD_StdDevReq>
    break;
 800a676:	e01a      	b.n	800a6ae <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800a67e:	4619      	mov	r1, r3
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f000 fa67 	bl	800ab54 <USBD_StdItfReq>
    break;
 800a686:	e012      	b.n	800a6ae <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800a68e:	4619      	mov	r1, r3
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	f000 faa5 	bl	800abe0 <USBD_StdEPReq>
    break;
 800a696:	e00a      	b.n	800a6ae <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800a69e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a6a2:	b2db      	uxtb	r3, r3
 800a6a4:	4619      	mov	r1, r3
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f001 fbda 	bl	800be60 <USBD_LL_StallEP>
    break;
 800a6ac:	bf00      	nop
  }

  return USBD_OK;
 800a6ae:	2300      	movs	r3, #0
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	3708      	adds	r7, #8
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}

0800a6b8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b086      	sub	sp, #24
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	60f8      	str	r0, [r7, #12]
 800a6c0:	460b      	mov	r3, r1
 800a6c2:	607a      	str	r2, [r7, #4]
 800a6c4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800a6c6:	7afb      	ldrb	r3, [r7, #11]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d14b      	bne.n	800a764 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800a6d2:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800a6da:	2b03      	cmp	r3, #3
 800a6dc:	d134      	bne.n	800a748 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	68da      	ldr	r2, [r3, #12]
 800a6e2:	697b      	ldr	r3, [r7, #20]
 800a6e4:	691b      	ldr	r3, [r3, #16]
 800a6e6:	429a      	cmp	r2, r3
 800a6e8:	d919      	bls.n	800a71e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	68da      	ldr	r2, [r3, #12]
 800a6ee:	697b      	ldr	r3, [r7, #20]
 800a6f0:	691b      	ldr	r3, [r3, #16]
 800a6f2:	1ad2      	subs	r2, r2, r3
 800a6f4:	697b      	ldr	r3, [r7, #20]
 800a6f6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a6f8:	697b      	ldr	r3, [r7, #20]
 800a6fa:	68da      	ldr	r2, [r3, #12]
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800a700:	429a      	cmp	r2, r3
 800a702:	d203      	bcs.n	800a70c <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800a708:	b29b      	uxth	r3, r3
 800a70a:	e002      	b.n	800a712 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a70c:	697b      	ldr	r3, [r7, #20]
 800a70e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800a710:	b29b      	uxth	r3, r3
 800a712:	461a      	mov	r2, r3
 800a714:	6879      	ldr	r1, [r7, #4]
 800a716:	68f8      	ldr	r0, [r7, #12]
 800a718:	f000 ff18 	bl	800b54c <USBD_CtlContinueRx>
 800a71c:	e038      	b.n	800a790 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a724:	691b      	ldr	r3, [r3, #16]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d00a      	beq.n	800a740 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800a730:	2b03      	cmp	r3, #3
 800a732:	d105      	bne.n	800a740 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a73a:	691b      	ldr	r3, [r3, #16]
 800a73c:	68f8      	ldr	r0, [r7, #12]
 800a73e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a740:	68f8      	ldr	r0, [r7, #12]
 800a742:	f000 ff15 	bl	800b570 <USBD_CtlSendStatus>
 800a746:	e023      	b.n	800a790 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800a74e:	2b05      	cmp	r3, #5
 800a750:	d11e      	bne.n	800a790 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	2200      	movs	r2, #0
 800a756:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800a75a:	2100      	movs	r1, #0
 800a75c:	68f8      	ldr	r0, [r7, #12]
 800a75e:	f001 fb7f 	bl	800be60 <USBD_LL_StallEP>
 800a762:	e015      	b.n	800a790 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a76a:	699b      	ldr	r3, [r3, #24]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d00d      	beq.n	800a78c <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800a776:	2b03      	cmp	r3, #3
 800a778:	d108      	bne.n	800a78c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a780:	699b      	ldr	r3, [r3, #24]
 800a782:	7afa      	ldrb	r2, [r7, #11]
 800a784:	4611      	mov	r1, r2
 800a786:	68f8      	ldr	r0, [r7, #12]
 800a788:	4798      	blx	r3
 800a78a:	e001      	b.n	800a790 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a78c:	2302      	movs	r3, #2
 800a78e:	e000      	b.n	800a792 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800a790:	2300      	movs	r3, #0
}
 800a792:	4618      	mov	r0, r3
 800a794:	3718      	adds	r7, #24
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}

0800a79a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800a79a:	b580      	push	{r7, lr}
 800a79c:	b086      	sub	sp, #24
 800a79e:	af00      	add	r7, sp, #0
 800a7a0:	60f8      	str	r0, [r7, #12]
 800a7a2:	460b      	mov	r3, r1
 800a7a4:	607a      	str	r2, [r7, #4]
 800a7a6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800a7a8:	7afb      	ldrb	r3, [r7, #11]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d17f      	bne.n	800a8ae <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	3314      	adds	r3, #20
 800a7b2:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800a7ba:	2b02      	cmp	r3, #2
 800a7bc:	d15c      	bne.n	800a878 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800a7be:	697b      	ldr	r3, [r7, #20]
 800a7c0:	68da      	ldr	r2, [r3, #12]
 800a7c2:	697b      	ldr	r3, [r7, #20]
 800a7c4:	691b      	ldr	r3, [r3, #16]
 800a7c6:	429a      	cmp	r2, r3
 800a7c8:	d915      	bls.n	800a7f6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800a7ca:	697b      	ldr	r3, [r7, #20]
 800a7cc:	68da      	ldr	r2, [r3, #12]
 800a7ce:	697b      	ldr	r3, [r7, #20]
 800a7d0:	691b      	ldr	r3, [r3, #16]
 800a7d2:	1ad2      	subs	r2, r2, r3
 800a7d4:	697b      	ldr	r3, [r7, #20]
 800a7d6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800a7d8:	697b      	ldr	r3, [r7, #20]
 800a7da:	68db      	ldr	r3, [r3, #12]
 800a7dc:	b29b      	uxth	r3, r3
 800a7de:	461a      	mov	r2, r3
 800a7e0:	6879      	ldr	r1, [r7, #4]
 800a7e2:	68f8      	ldr	r0, [r7, #12]
 800a7e4:	f000 fe82 	bl	800b4ec <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	2100      	movs	r1, #0
 800a7ee:	68f8      	ldr	r0, [r7, #12]
 800a7f0:	f001 fbe2 	bl	800bfb8 <USBD_LL_PrepareReceive>
 800a7f4:	e04e      	b.n	800a894 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800a7f6:	697b      	ldr	r3, [r7, #20]
 800a7f8:	689b      	ldr	r3, [r3, #8]
 800a7fa:	697a      	ldr	r2, [r7, #20]
 800a7fc:	6912      	ldr	r2, [r2, #16]
 800a7fe:	fbb3 f1f2 	udiv	r1, r3, r2
 800a802:	fb02 f201 	mul.w	r2, r2, r1
 800a806:	1a9b      	subs	r3, r3, r2
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d11c      	bne.n	800a846 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	689a      	ldr	r2, [r3, #8]
 800a810:	697b      	ldr	r3, [r7, #20]
 800a812:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800a814:	429a      	cmp	r2, r3
 800a816:	d316      	bcc.n	800a846 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800a818:	697b      	ldr	r3, [r7, #20]
 800a81a:	689a      	ldr	r2, [r3, #8]
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800a822:	429a      	cmp	r2, r3
 800a824:	d20f      	bcs.n	800a846 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a826:	2200      	movs	r2, #0
 800a828:	2100      	movs	r1, #0
 800a82a:	68f8      	ldr	r0, [r7, #12]
 800a82c:	f000 fe5e 	bl	800b4ec <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	2200      	movs	r2, #0
 800a834:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800a838:	2300      	movs	r3, #0
 800a83a:	2200      	movs	r2, #0
 800a83c:	2100      	movs	r1, #0
 800a83e:	68f8      	ldr	r0, [r7, #12]
 800a840:	f001 fbba 	bl	800bfb8 <USBD_LL_PrepareReceive>
 800a844:	e026      	b.n	800a894 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a84c:	68db      	ldr	r3, [r3, #12]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d00a      	beq.n	800a868 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800a858:	2b03      	cmp	r3, #3
 800a85a:	d105      	bne.n	800a868 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a862:	68db      	ldr	r3, [r3, #12]
 800a864:	68f8      	ldr	r0, [r7, #12]
 800a866:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a868:	2180      	movs	r1, #128	; 0x80
 800a86a:	68f8      	ldr	r0, [r7, #12]
 800a86c:	f001 faf8 	bl	800be60 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a870:	68f8      	ldr	r0, [r7, #12]
 800a872:	f000 fe90 	bl	800b596 <USBD_CtlReceiveStatus>
 800a876:	e00d      	b.n	800a894 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800a87e:	2b04      	cmp	r3, #4
 800a880:	d004      	beq.n	800a88c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d103      	bne.n	800a894 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a88c:	2180      	movs	r1, #128	; 0x80
 800a88e:	68f8      	ldr	r0, [r7, #12]
 800a890:	f001 fae6 	bl	800be60 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800a89a:	2b01      	cmp	r3, #1
 800a89c:	d11d      	bne.n	800a8da <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a89e:	68f8      	ldr	r0, [r7, #12]
 800a8a0:	f7ff fe82 	bl	800a5a8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800a8ac:	e015      	b.n	800a8da <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a8b4:	695b      	ldr	r3, [r3, #20]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d00d      	beq.n	800a8d6 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800a8c0:	2b03      	cmp	r3, #3
 800a8c2:	d108      	bne.n	800a8d6 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a8ca:	695b      	ldr	r3, [r3, #20]
 800a8cc:	7afa      	ldrb	r2, [r7, #11]
 800a8ce:	4611      	mov	r1, r2
 800a8d0:	68f8      	ldr	r0, [r7, #12]
 800a8d2:	4798      	blx	r3
 800a8d4:	e001      	b.n	800a8da <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a8d6:	2302      	movs	r3, #2
 800a8d8:	e000      	b.n	800a8dc <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a8da:	2300      	movs	r3, #0
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	3718      	adds	r7, #24
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}

0800a8e4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b082      	sub	sp, #8
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a8ec:	2340      	movs	r3, #64	; 0x40
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	2100      	movs	r1, #0
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f001 fa6f 	bl	800bdd6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2201      	movs	r2, #1
 800a8fc:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2240      	movs	r2, #64	; 0x40
 800a904:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a908:	2340      	movs	r3, #64	; 0x40
 800a90a:	2200      	movs	r2, #0
 800a90c:	2180      	movs	r1, #128	; 0x80
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f001 fa61 	bl	800bdd6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2201      	movs	r2, #1
 800a918:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2240      	movs	r2, #64	; 0x40
 800a91e:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2201      	movs	r2, #1
 800a924:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2200      	movs	r2, #0
 800a92c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2200      	movs	r2, #0
 800a934:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2200      	movs	r2, #0
 800a93a:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a944:	2b00      	cmp	r3, #0
 800a946:	d009      	beq.n	800a95c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a94e:	685b      	ldr	r3, [r3, #4]
 800a950:	687a      	ldr	r2, [r7, #4]
 800a952:	6852      	ldr	r2, [r2, #4]
 800a954:	b2d2      	uxtb	r2, r2
 800a956:	4611      	mov	r1, r2
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	4798      	blx	r3
  }

  return USBD_OK;
 800a95c:	2300      	movs	r3, #0
}
 800a95e:	4618      	mov	r0, r3
 800a960:	3708      	adds	r7, #8
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}

0800a966 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800a966:	b480      	push	{r7}
 800a968:	b083      	sub	sp, #12
 800a96a:	af00      	add	r7, sp, #0
 800a96c:	6078      	str	r0, [r7, #4]
 800a96e:	460b      	mov	r3, r1
 800a970:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	78fa      	ldrb	r2, [r7, #3]
 800a976:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800a978:	2300      	movs	r3, #0
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	370c      	adds	r7, #12
 800a97e:	46bd      	mov	sp, r7
 800a980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a984:	4770      	bx	lr

0800a986 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800a986:	b480      	push	{r7}
 800a988:	b083      	sub	sp, #12
 800a98a:	af00      	add	r7, sp, #0
 800a98c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2204      	movs	r2, #4
 800a99e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800a9a2:	2300      	movs	r3, #0
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	370c      	adds	r7, #12
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ae:	4770      	bx	lr

0800a9b0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b083      	sub	sp, #12
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800a9c4:	2300      	movs	r3, #0
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	370c      	adds	r7, #12
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d0:	4770      	bx	lr

0800a9d2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800a9d2:	b580      	push	{r7, lr}
 800a9d4:	b082      	sub	sp, #8
 800a9d6:	af00      	add	r7, sp, #0
 800a9d8:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a9e0:	2b03      	cmp	r3, #3
 800a9e2:	d10b      	bne.n	800a9fc <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a9ea:	69db      	ldr	r3, [r3, #28]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d005      	beq.n	800a9fc <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a9f6:	69db      	ldr	r3, [r3, #28]
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800a9fc:	2300      	movs	r3, #0
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3708      	adds	r7, #8
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}

0800aa06 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800aa06:	b480      	push	{r7}
 800aa08:	b083      	sub	sp, #12
 800aa0a:	af00      	add	r7, sp, #0
 800aa0c:	6078      	str	r0, [r7, #4]
 800aa0e:	460b      	mov	r3, r1
 800aa10:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800aa12:	2300      	movs	r3, #0
}
 800aa14:	4618      	mov	r0, r3
 800aa16:	370c      	adds	r7, #12
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1e:	4770      	bx	lr

0800aa20 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800aa20:	b480      	push	{r7}
 800aa22:	b083      	sub	sp, #12
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
 800aa28:	460b      	mov	r3, r1
 800aa2a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800aa2c:	2300      	movs	r3, #0
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	370c      	adds	r7, #12
 800aa32:	46bd      	mov	sp, r7
 800aa34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa38:	4770      	bx	lr

0800aa3a <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 800aa3a:	b480      	push	{r7}
 800aa3c:	b083      	sub	sp, #12
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800aa42:	2300      	movs	r3, #0
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	370c      	adds	r7, #12
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4e:	4770      	bx	lr

0800aa50 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b082      	sub	sp, #8
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2201      	movs	r2, #1
 800aa5c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800aa66:	685b      	ldr	r3, [r3, #4]
 800aa68:	687a      	ldr	r2, [r7, #4]
 800aa6a:	6852      	ldr	r2, [r2, #4]
 800aa6c:	b2d2      	uxtb	r2, r2
 800aa6e:	4611      	mov	r1, r2
 800aa70:	6878      	ldr	r0, [r7, #4]
 800aa72:	4798      	blx	r3

  return USBD_OK;
 800aa74:	2300      	movs	r3, #0
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	3708      	adds	r7, #8
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}
	...

0800aa80 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b084      	sub	sp, #16
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
 800aa88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	781b      	ldrb	r3, [r3, #0]
 800aa92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aa96:	2b20      	cmp	r3, #32
 800aa98:	d004      	beq.n	800aaa4 <USBD_StdDevReq+0x24>
 800aa9a:	2b40      	cmp	r3, #64	; 0x40
 800aa9c:	d002      	beq.n	800aaa4 <USBD_StdDevReq+0x24>
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d008      	beq.n	800aab4 <USBD_StdDevReq+0x34>
 800aaa2:	e04c      	b.n	800ab3e <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800aaaa:	689b      	ldr	r3, [r3, #8]
 800aaac:	6839      	ldr	r1, [r7, #0]
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	4798      	blx	r3
    break;
 800aab2:	e049      	b.n	800ab48 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	785b      	ldrb	r3, [r3, #1]
 800aab8:	2b09      	cmp	r3, #9
 800aaba:	d83a      	bhi.n	800ab32 <USBD_StdDevReq+0xb2>
 800aabc:	a201      	add	r2, pc, #4	; (adr r2, 800aac4 <USBD_StdDevReq+0x44>)
 800aabe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aac2:	bf00      	nop
 800aac4:	0800ab15 	.word	0x0800ab15
 800aac8:	0800ab29 	.word	0x0800ab29
 800aacc:	0800ab33 	.word	0x0800ab33
 800aad0:	0800ab1f 	.word	0x0800ab1f
 800aad4:	0800ab33 	.word	0x0800ab33
 800aad8:	0800aaf7 	.word	0x0800aaf7
 800aadc:	0800aaed 	.word	0x0800aaed
 800aae0:	0800ab33 	.word	0x0800ab33
 800aae4:	0800ab0b 	.word	0x0800ab0b
 800aae8:	0800ab01 	.word	0x0800ab01
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800aaec:	6839      	ldr	r1, [r7, #0]
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f000 f9d2 	bl	800ae98 <USBD_GetDescriptor>
      break;
 800aaf4:	e022      	b.n	800ab3c <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800aaf6:	6839      	ldr	r1, [r7, #0]
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f000 fac7 	bl	800b08c <USBD_SetAddress>
      break;
 800aafe:	e01d      	b.n	800ab3c <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800ab00:	6839      	ldr	r1, [r7, #0]
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f000 fb04 	bl	800b110 <USBD_SetConfig>
      break;
 800ab08:	e018      	b.n	800ab3c <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800ab0a:	6839      	ldr	r1, [r7, #0]
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f000 fb8d 	bl	800b22c <USBD_GetConfig>
      break;
 800ab12:	e013      	b.n	800ab3c <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800ab14:	6839      	ldr	r1, [r7, #0]
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f000 fbbc 	bl	800b294 <USBD_GetStatus>
      break;
 800ab1c:	e00e      	b.n	800ab3c <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800ab1e:	6839      	ldr	r1, [r7, #0]
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f000 fbea 	bl	800b2fa <USBD_SetFeature>
      break;
 800ab26:	e009      	b.n	800ab3c <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800ab28:	6839      	ldr	r1, [r7, #0]
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f000 fbf9 	bl	800b322 <USBD_ClrFeature>
      break;
 800ab30:	e004      	b.n	800ab3c <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800ab32:	6839      	ldr	r1, [r7, #0]
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f000 fc52 	bl	800b3de <USBD_CtlError>
      break;
 800ab3a:	bf00      	nop
    }
    break;
 800ab3c:	e004      	b.n	800ab48 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800ab3e:	6839      	ldr	r1, [r7, #0]
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f000 fc4c 	bl	800b3de <USBD_CtlError>
    break;
 800ab46:	bf00      	nop
  }

  return ret;
 800ab48:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3710      	adds	r7, #16
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}
 800ab52:	bf00      	nop

0800ab54 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b084      	sub	sp, #16
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
 800ab5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab5e:	2300      	movs	r3, #0
 800ab60:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	781b      	ldrb	r3, [r3, #0]
 800ab66:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ab6a:	2b20      	cmp	r3, #32
 800ab6c:	d003      	beq.n	800ab76 <USBD_StdItfReq+0x22>
 800ab6e:	2b40      	cmp	r3, #64	; 0x40
 800ab70:	d001      	beq.n	800ab76 <USBD_StdItfReq+0x22>
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d12a      	bne.n	800abcc <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ab7c:	3b01      	subs	r3, #1
 800ab7e:	2b02      	cmp	r3, #2
 800ab80:	d81d      	bhi.n	800abbe <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	889b      	ldrh	r3, [r3, #4]
 800ab86:	b2db      	uxtb	r3, r3
 800ab88:	2b01      	cmp	r3, #1
 800ab8a:	d813      	bhi.n	800abb4 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ab92:	689b      	ldr	r3, [r3, #8]
 800ab94:	6839      	ldr	r1, [r7, #0]
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	4798      	blx	r3
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	88db      	ldrh	r3, [r3, #6]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d110      	bne.n	800abc8 <USBD_StdItfReq+0x74>
 800aba6:	7bfb      	ldrb	r3, [r7, #15]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d10d      	bne.n	800abc8 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 800abac:	6878      	ldr	r0, [r7, #4]
 800abae:	f000 fcdf 	bl	800b570 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800abb2:	e009      	b.n	800abc8 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800abb4:	6839      	ldr	r1, [r7, #0]
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f000 fc11 	bl	800b3de <USBD_CtlError>
      break;
 800abbc:	e004      	b.n	800abc8 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800abbe:	6839      	ldr	r1, [r7, #0]
 800abc0:	6878      	ldr	r0, [r7, #4]
 800abc2:	f000 fc0c 	bl	800b3de <USBD_CtlError>
      break;
 800abc6:	e000      	b.n	800abca <USBD_StdItfReq+0x76>
      break;
 800abc8:	bf00      	nop
    }
    break;
 800abca:	e004      	b.n	800abd6 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800abcc:	6839      	ldr	r1, [r7, #0]
 800abce:	6878      	ldr	r0, [r7, #4]
 800abd0:	f000 fc05 	bl	800b3de <USBD_CtlError>
    break;
 800abd4:	bf00      	nop
  }

  return USBD_OK;
 800abd6:	2300      	movs	r3, #0
}
 800abd8:	4618      	mov	r0, r3
 800abda:	3710      	adds	r7, #16
 800abdc:	46bd      	mov	sp, r7
 800abde:	bd80      	pop	{r7, pc}

0800abe0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b084      	sub	sp, #16
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
 800abe8:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800abea:	2300      	movs	r3, #0
 800abec:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	889b      	ldrh	r3, [r3, #4]
 800abf2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	781b      	ldrb	r3, [r3, #0]
 800abf8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800abfc:	2b20      	cmp	r3, #32
 800abfe:	d004      	beq.n	800ac0a <USBD_StdEPReq+0x2a>
 800ac00:	2b40      	cmp	r3, #64	; 0x40
 800ac02:	d002      	beq.n	800ac0a <USBD_StdEPReq+0x2a>
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d008      	beq.n	800ac1a <USBD_StdEPReq+0x3a>
 800ac08:	e13b      	b.n	800ae82 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ac10:	689b      	ldr	r3, [r3, #8]
 800ac12:	6839      	ldr	r1, [r7, #0]
 800ac14:	6878      	ldr	r0, [r7, #4]
 800ac16:	4798      	blx	r3
    break;
 800ac18:	e138      	b.n	800ae8c <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	781b      	ldrb	r3, [r3, #0]
 800ac1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ac22:	2b20      	cmp	r3, #32
 800ac24:	d10a      	bne.n	800ac3c <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ac2c:	689b      	ldr	r3, [r3, #8]
 800ac2e:	6839      	ldr	r1, [r7, #0]
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	4798      	blx	r3
 800ac34:	4603      	mov	r3, r0
 800ac36:	73fb      	strb	r3, [r7, #15]

      return ret;
 800ac38:	7bfb      	ldrb	r3, [r7, #15]
 800ac3a:	e128      	b.n	800ae8e <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	785b      	ldrb	r3, [r3, #1]
 800ac40:	2b01      	cmp	r3, #1
 800ac42:	d03e      	beq.n	800acc2 <USBD_StdEPReq+0xe2>
 800ac44:	2b03      	cmp	r3, #3
 800ac46:	d002      	beq.n	800ac4e <USBD_StdEPReq+0x6e>
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d070      	beq.n	800ad2e <USBD_StdEPReq+0x14e>
 800ac4c:	e113      	b.n	800ae76 <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ac54:	2b02      	cmp	r3, #2
 800ac56:	d002      	beq.n	800ac5e <USBD_StdEPReq+0x7e>
 800ac58:	2b03      	cmp	r3, #3
 800ac5a:	d015      	beq.n	800ac88 <USBD_StdEPReq+0xa8>
 800ac5c:	e02b      	b.n	800acb6 <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ac5e:	7bbb      	ldrb	r3, [r7, #14]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d00c      	beq.n	800ac7e <USBD_StdEPReq+0x9e>
 800ac64:	7bbb      	ldrb	r3, [r7, #14]
 800ac66:	2b80      	cmp	r3, #128	; 0x80
 800ac68:	d009      	beq.n	800ac7e <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800ac6a:	7bbb      	ldrb	r3, [r7, #14]
 800ac6c:	4619      	mov	r1, r3
 800ac6e:	6878      	ldr	r0, [r7, #4]
 800ac70:	f001 f8f6 	bl	800be60 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800ac74:	2180      	movs	r1, #128	; 0x80
 800ac76:	6878      	ldr	r0, [r7, #4]
 800ac78:	f001 f8f2 	bl	800be60 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800ac7c:	e020      	b.n	800acc0 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 800ac7e:	6839      	ldr	r1, [r7, #0]
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f000 fbac 	bl	800b3de <USBD_CtlError>
        break;
 800ac86:	e01b      	b.n	800acc0 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	885b      	ldrh	r3, [r3, #2]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d10e      	bne.n	800acae <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ac90:	7bbb      	ldrb	r3, [r7, #14]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d00b      	beq.n	800acae <USBD_StdEPReq+0xce>
 800ac96:	7bbb      	ldrb	r3, [r7, #14]
 800ac98:	2b80      	cmp	r3, #128	; 0x80
 800ac9a:	d008      	beq.n	800acae <USBD_StdEPReq+0xce>
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	88db      	ldrh	r3, [r3, #6]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d104      	bne.n	800acae <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800aca4:	7bbb      	ldrb	r3, [r7, #14]
 800aca6:	4619      	mov	r1, r3
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f001 f8d9 	bl	800be60 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f000 fc5e 	bl	800b570 <USBD_CtlSendStatus>

        break;
 800acb4:	e004      	b.n	800acc0 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 800acb6:	6839      	ldr	r1, [r7, #0]
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f000 fb90 	bl	800b3de <USBD_CtlError>
        break;
 800acbe:	bf00      	nop
      }
      break;
 800acc0:	e0de      	b.n	800ae80 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800acc8:	2b02      	cmp	r3, #2
 800acca:	d002      	beq.n	800acd2 <USBD_StdEPReq+0xf2>
 800accc:	2b03      	cmp	r3, #3
 800acce:	d015      	beq.n	800acfc <USBD_StdEPReq+0x11c>
 800acd0:	e026      	b.n	800ad20 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800acd2:	7bbb      	ldrb	r3, [r7, #14]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d00c      	beq.n	800acf2 <USBD_StdEPReq+0x112>
 800acd8:	7bbb      	ldrb	r3, [r7, #14]
 800acda:	2b80      	cmp	r3, #128	; 0x80
 800acdc:	d009      	beq.n	800acf2 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800acde:	7bbb      	ldrb	r3, [r7, #14]
 800ace0:	4619      	mov	r1, r3
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	f001 f8bc 	bl	800be60 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800ace8:	2180      	movs	r1, #128	; 0x80
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f001 f8b8 	bl	800be60 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800acf0:	e01c      	b.n	800ad2c <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800acf2:	6839      	ldr	r1, [r7, #0]
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	f000 fb72 	bl	800b3de <USBD_CtlError>
        break;
 800acfa:	e017      	b.n	800ad2c <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	885b      	ldrh	r3, [r3, #2]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d112      	bne.n	800ad2a <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800ad04:	7bbb      	ldrb	r3, [r7, #14]
 800ad06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d004      	beq.n	800ad18 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800ad0e:	7bbb      	ldrb	r3, [r7, #14]
 800ad10:	4619      	mov	r1, r3
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	f001 f8c3 	bl	800be9e <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f000 fc29 	bl	800b570 <USBD_CtlSendStatus>
        }
        break;
 800ad1e:	e004      	b.n	800ad2a <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800ad20:	6839      	ldr	r1, [r7, #0]
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	f000 fb5b 	bl	800b3de <USBD_CtlError>
        break;
 800ad28:	e000      	b.n	800ad2c <USBD_StdEPReq+0x14c>
        break;
 800ad2a:	bf00      	nop
      }
      break;
 800ad2c:	e0a8      	b.n	800ae80 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ad34:	2b02      	cmp	r3, #2
 800ad36:	d002      	beq.n	800ad3e <USBD_StdEPReq+0x15e>
 800ad38:	2b03      	cmp	r3, #3
 800ad3a:	d031      	beq.n	800ada0 <USBD_StdEPReq+0x1c0>
 800ad3c:	e095      	b.n	800ae6a <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ad3e:	7bbb      	ldrb	r3, [r7, #14]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d007      	beq.n	800ad54 <USBD_StdEPReq+0x174>
 800ad44:	7bbb      	ldrb	r3, [r7, #14]
 800ad46:	2b80      	cmp	r3, #128	; 0x80
 800ad48:	d004      	beq.n	800ad54 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800ad4a:	6839      	ldr	r1, [r7, #0]
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f000 fb46 	bl	800b3de <USBD_CtlError>
          break;
 800ad52:	e08f      	b.n	800ae74 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800ad54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	da0b      	bge.n	800ad74 <USBD_StdEPReq+0x194>
 800ad5c:	7bbb      	ldrb	r3, [r7, #14]
 800ad5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad62:	4613      	mov	r3, r2
 800ad64:	009b      	lsls	r3, r3, #2
 800ad66:	4413      	add	r3, r2
 800ad68:	009b      	lsls	r3, r3, #2
 800ad6a:	3310      	adds	r3, #16
 800ad6c:	687a      	ldr	r2, [r7, #4]
 800ad6e:	4413      	add	r3, r2
 800ad70:	3304      	adds	r3, #4
 800ad72:	e00a      	b.n	800ad8a <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 800ad74:	7bbb      	ldrb	r3, [r7, #14]
 800ad76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800ad7a:	4613      	mov	r3, r2
 800ad7c:	009b      	lsls	r3, r3, #2
 800ad7e:	4413      	add	r3, r2
 800ad80:	009b      	lsls	r3, r3, #2
 800ad82:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800ad86:	687a      	ldr	r2, [r7, #4]
 800ad88:	4413      	add	r3, r2
 800ad8a:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	2200      	movs	r2, #0
 800ad90:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ad92:	68bb      	ldr	r3, [r7, #8]
 800ad94:	2202      	movs	r2, #2
 800ad96:	4619      	mov	r1, r3
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f000 fb8b 	bl	800b4b4 <USBD_CtlSendData>
          break;
 800ad9e:	e069      	b.n	800ae74 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800ada0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	da11      	bge.n	800adcc <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ada8:	7bbb      	ldrb	r3, [r7, #14]
 800adaa:	f003 020f 	and.w	r2, r3, #15
 800adae:	6879      	ldr	r1, [r7, #4]
 800adb0:	4613      	mov	r3, r2
 800adb2:	009b      	lsls	r3, r3, #2
 800adb4:	4413      	add	r3, r2
 800adb6:	009b      	lsls	r3, r3, #2
 800adb8:	440b      	add	r3, r1
 800adba:	3318      	adds	r3, #24
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d117      	bne.n	800adf2 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800adc2:	6839      	ldr	r1, [r7, #0]
 800adc4:	6878      	ldr	r0, [r7, #4]
 800adc6:	f000 fb0a 	bl	800b3de <USBD_CtlError>
            break;
 800adca:	e053      	b.n	800ae74 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800adcc:	7bbb      	ldrb	r3, [r7, #14]
 800adce:	f003 020f 	and.w	r2, r3, #15
 800add2:	6879      	ldr	r1, [r7, #4]
 800add4:	4613      	mov	r3, r2
 800add6:	009b      	lsls	r3, r3, #2
 800add8:	4413      	add	r3, r2
 800adda:	009b      	lsls	r3, r3, #2
 800addc:	440b      	add	r3, r1
 800adde:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d104      	bne.n	800adf2 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800ade8:	6839      	ldr	r1, [r7, #0]
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	f000 faf7 	bl	800b3de <USBD_CtlError>
            break;
 800adf0:	e040      	b.n	800ae74 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800adf2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	da0b      	bge.n	800ae12 <USBD_StdEPReq+0x232>
 800adfa:	7bbb      	ldrb	r3, [r7, #14]
 800adfc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ae00:	4613      	mov	r3, r2
 800ae02:	009b      	lsls	r3, r3, #2
 800ae04:	4413      	add	r3, r2
 800ae06:	009b      	lsls	r3, r3, #2
 800ae08:	3310      	adds	r3, #16
 800ae0a:	687a      	ldr	r2, [r7, #4]
 800ae0c:	4413      	add	r3, r2
 800ae0e:	3304      	adds	r3, #4
 800ae10:	e00a      	b.n	800ae28 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 800ae12:	7bbb      	ldrb	r3, [r7, #14]
 800ae14:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800ae18:	4613      	mov	r3, r2
 800ae1a:	009b      	lsls	r3, r3, #2
 800ae1c:	4413      	add	r3, r2
 800ae1e:	009b      	lsls	r3, r3, #2
 800ae20:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800ae24:	687a      	ldr	r2, [r7, #4]
 800ae26:	4413      	add	r3, r2
 800ae28:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ae2a:	7bbb      	ldrb	r3, [r7, #14]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d002      	beq.n	800ae36 <USBD_StdEPReq+0x256>
 800ae30:	7bbb      	ldrb	r3, [r7, #14]
 800ae32:	2b80      	cmp	r3, #128	; 0x80
 800ae34:	d103      	bne.n	800ae3e <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	2200      	movs	r2, #0
 800ae3a:	601a      	str	r2, [r3, #0]
 800ae3c:	e00e      	b.n	800ae5c <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800ae3e:	7bbb      	ldrb	r3, [r7, #14]
 800ae40:	4619      	mov	r1, r3
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	f001 f84a 	bl	800bedc <USBD_LL_IsStallEP>
 800ae48:	4603      	mov	r3, r0
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d003      	beq.n	800ae56 <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	2201      	movs	r2, #1
 800ae52:	601a      	str	r2, [r3, #0]
 800ae54:	e002      	b.n	800ae5c <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	2200      	movs	r2, #0
 800ae5a:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ae5c:	68bb      	ldr	r3, [r7, #8]
 800ae5e:	2202      	movs	r2, #2
 800ae60:	4619      	mov	r1, r3
 800ae62:	6878      	ldr	r0, [r7, #4]
 800ae64:	f000 fb26 	bl	800b4b4 <USBD_CtlSendData>
          break;
 800ae68:	e004      	b.n	800ae74 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 800ae6a:	6839      	ldr	r1, [r7, #0]
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f000 fab6 	bl	800b3de <USBD_CtlError>
        break;
 800ae72:	bf00      	nop
      }
      break;
 800ae74:	e004      	b.n	800ae80 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 800ae76:	6839      	ldr	r1, [r7, #0]
 800ae78:	6878      	ldr	r0, [r7, #4]
 800ae7a:	f000 fab0 	bl	800b3de <USBD_CtlError>
      break;
 800ae7e:	bf00      	nop
    }
    break;
 800ae80:	e004      	b.n	800ae8c <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 800ae82:	6839      	ldr	r1, [r7, #0]
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f000 faaa 	bl	800b3de <USBD_CtlError>
    break;
 800ae8a:	bf00      	nop
  }

  return ret;
 800ae8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae8e:	4618      	mov	r0, r3
 800ae90:	3710      	adds	r7, #16
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}
	...

0800ae98 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b084      	sub	sp, #16
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
 800aea0:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	885b      	ldrh	r3, [r3, #2]
 800aea6:	0a1b      	lsrs	r3, r3, #8
 800aea8:	b29b      	uxth	r3, r3
 800aeaa:	3b01      	subs	r3, #1
 800aeac:	2b06      	cmp	r3, #6
 800aeae:	f200 80c9 	bhi.w	800b044 <USBD_GetDescriptor+0x1ac>
 800aeb2:	a201      	add	r2, pc, #4	; (adr r2, 800aeb8 <USBD_GetDescriptor+0x20>)
 800aeb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeb8:	0800aed5 	.word	0x0800aed5
 800aebc:	0800aeed 	.word	0x0800aeed
 800aec0:	0800af2d 	.word	0x0800af2d
 800aec4:	0800b045 	.word	0x0800b045
 800aec8:	0800b045 	.word	0x0800b045
 800aecc:	0800aff1 	.word	0x0800aff1
 800aed0:	0800b017 	.word	0x0800b017
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	687a      	ldr	r2, [r7, #4]
 800aede:	7c12      	ldrb	r2, [r2, #16]
 800aee0:	f107 010a 	add.w	r1, r7, #10
 800aee4:	4610      	mov	r0, r2
 800aee6:	4798      	blx	r3
 800aee8:	60f8      	str	r0, [r7, #12]
    break;
 800aeea:	e0b0      	b.n	800b04e <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	7c1b      	ldrb	r3, [r3, #16]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d10d      	bne.n	800af10 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800aefa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aefc:	f107 020a 	add.w	r2, r7, #10
 800af00:	4610      	mov	r0, r2
 800af02:	4798      	blx	r3
 800af04:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	3301      	adds	r3, #1
 800af0a:	2202      	movs	r2, #2
 800af0c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800af0e:	e09e      	b.n	800b04e <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800af16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af18:	f107 020a 	add.w	r2, r7, #10
 800af1c:	4610      	mov	r0, r2
 800af1e:	4798      	blx	r3
 800af20:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	3301      	adds	r3, #1
 800af26:	2202      	movs	r2, #2
 800af28:	701a      	strb	r2, [r3, #0]
    break;
 800af2a:	e090      	b.n	800b04e <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	885b      	ldrh	r3, [r3, #2]
 800af30:	b2db      	uxtb	r3, r3
 800af32:	2b05      	cmp	r3, #5
 800af34:	d856      	bhi.n	800afe4 <USBD_GetDescriptor+0x14c>
 800af36:	a201      	add	r2, pc, #4	; (adr r2, 800af3c <USBD_GetDescriptor+0xa4>)
 800af38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af3c:	0800af55 	.word	0x0800af55
 800af40:	0800af6d 	.word	0x0800af6d
 800af44:	0800af85 	.word	0x0800af85
 800af48:	0800af9d 	.word	0x0800af9d
 800af4c:	0800afb5 	.word	0x0800afb5
 800af50:	0800afcd 	.word	0x0800afcd
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800af5a:	685b      	ldr	r3, [r3, #4]
 800af5c:	687a      	ldr	r2, [r7, #4]
 800af5e:	7c12      	ldrb	r2, [r2, #16]
 800af60:	f107 010a 	add.w	r1, r7, #10
 800af64:	4610      	mov	r0, r2
 800af66:	4798      	blx	r3
 800af68:	60f8      	str	r0, [r7, #12]
      break;
 800af6a:	e040      	b.n	800afee <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800af72:	689b      	ldr	r3, [r3, #8]
 800af74:	687a      	ldr	r2, [r7, #4]
 800af76:	7c12      	ldrb	r2, [r2, #16]
 800af78:	f107 010a 	add.w	r1, r7, #10
 800af7c:	4610      	mov	r0, r2
 800af7e:	4798      	blx	r3
 800af80:	60f8      	str	r0, [r7, #12]
      break;
 800af82:	e034      	b.n	800afee <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800af8a:	68db      	ldr	r3, [r3, #12]
 800af8c:	687a      	ldr	r2, [r7, #4]
 800af8e:	7c12      	ldrb	r2, [r2, #16]
 800af90:	f107 010a 	add.w	r1, r7, #10
 800af94:	4610      	mov	r0, r2
 800af96:	4798      	blx	r3
 800af98:	60f8      	str	r0, [r7, #12]
      break;
 800af9a:	e028      	b.n	800afee <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800afa2:	691b      	ldr	r3, [r3, #16]
 800afa4:	687a      	ldr	r2, [r7, #4]
 800afa6:	7c12      	ldrb	r2, [r2, #16]
 800afa8:	f107 010a 	add.w	r1, r7, #10
 800afac:	4610      	mov	r0, r2
 800afae:	4798      	blx	r3
 800afb0:	60f8      	str	r0, [r7, #12]
      break;
 800afb2:	e01c      	b.n	800afee <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800afba:	695b      	ldr	r3, [r3, #20]
 800afbc:	687a      	ldr	r2, [r7, #4]
 800afbe:	7c12      	ldrb	r2, [r2, #16]
 800afc0:	f107 010a 	add.w	r1, r7, #10
 800afc4:	4610      	mov	r0, r2
 800afc6:	4798      	blx	r3
 800afc8:	60f8      	str	r0, [r7, #12]
      break;
 800afca:	e010      	b.n	800afee <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800afd2:	699b      	ldr	r3, [r3, #24]
 800afd4:	687a      	ldr	r2, [r7, #4]
 800afd6:	7c12      	ldrb	r2, [r2, #16]
 800afd8:	f107 010a 	add.w	r1, r7, #10
 800afdc:	4610      	mov	r0, r2
 800afde:	4798      	blx	r3
 800afe0:	60f8      	str	r0, [r7, #12]
      break;
 800afe2:	e004      	b.n	800afee <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800afe4:	6839      	ldr	r1, [r7, #0]
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	f000 f9f9 	bl	800b3de <USBD_CtlError>
      return;
 800afec:	e04b      	b.n	800b086 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800afee:	e02e      	b.n	800b04e <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	7c1b      	ldrb	r3, [r3, #16]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d109      	bne.n	800b00c <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800affe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b000:	f107 020a 	add.w	r2, r7, #10
 800b004:	4610      	mov	r0, r2
 800b006:	4798      	blx	r3
 800b008:	60f8      	str	r0, [r7, #12]
      break;
 800b00a:	e020      	b.n	800b04e <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800b00c:	6839      	ldr	r1, [r7, #0]
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f000 f9e5 	bl	800b3de <USBD_CtlError>
      return;
 800b014:	e037      	b.n	800b086 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	7c1b      	ldrb	r3, [r3, #16]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d10d      	bne.n	800b03a <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b026:	f107 020a 	add.w	r2, r7, #10
 800b02a:	4610      	mov	r0, r2
 800b02c:	4798      	blx	r3
 800b02e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	3301      	adds	r3, #1
 800b034:	2207      	movs	r2, #7
 800b036:	701a      	strb	r2, [r3, #0]
      break;
 800b038:	e009      	b.n	800b04e <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800b03a:	6839      	ldr	r1, [r7, #0]
 800b03c:	6878      	ldr	r0, [r7, #4]
 800b03e:	f000 f9ce 	bl	800b3de <USBD_CtlError>
      return;
 800b042:	e020      	b.n	800b086 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 800b044:	6839      	ldr	r1, [r7, #0]
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	f000 f9c9 	bl	800b3de <USBD_CtlError>
    return;
 800b04c:	e01b      	b.n	800b086 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800b04e:	897b      	ldrh	r3, [r7, #10]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d011      	beq.n	800b078 <USBD_GetDescriptor+0x1e0>
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	88db      	ldrh	r3, [r3, #6]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d00d      	beq.n	800b078 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	88da      	ldrh	r2, [r3, #6]
 800b060:	897b      	ldrh	r3, [r7, #10]
 800b062:	4293      	cmp	r3, r2
 800b064:	bf28      	it	cs
 800b066:	4613      	movcs	r3, r2
 800b068:	b29b      	uxth	r3, r3
 800b06a:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800b06c:	897b      	ldrh	r3, [r7, #10]
 800b06e:	461a      	mov	r2, r3
 800b070:	68f9      	ldr	r1, [r7, #12]
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f000 fa1e 	bl	800b4b4 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	88db      	ldrh	r3, [r3, #6]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d102      	bne.n	800b086 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800b080:	6878      	ldr	r0, [r7, #4]
 800b082:	f000 fa75 	bl	800b570 <USBD_CtlSendStatus>
  }
}
 800b086:	3710      	adds	r7, #16
 800b088:	46bd      	mov	sp, r7
 800b08a:	bd80      	pop	{r7, pc}

0800b08c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b084      	sub	sp, #16
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
 800b094:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	889b      	ldrh	r3, [r3, #4]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d130      	bne.n	800b100 <USBD_SetAddress+0x74>
 800b09e:	683b      	ldr	r3, [r7, #0]
 800b0a0:	88db      	ldrh	r3, [r3, #6]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d12c      	bne.n	800b100 <USBD_SetAddress+0x74>
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	885b      	ldrh	r3, [r3, #2]
 800b0aa:	2b7f      	cmp	r3, #127	; 0x7f
 800b0ac:	d828      	bhi.n	800b100 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	885b      	ldrh	r3, [r3, #2]
 800b0b2:	b2db      	uxtb	r3, r3
 800b0b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0b8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800b0c0:	2b03      	cmp	r3, #3
 800b0c2:	d104      	bne.n	800b0ce <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800b0c4:	6839      	ldr	r1, [r7, #0]
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f000 f989 	bl	800b3de <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0cc:	e01c      	b.n	800b108 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	7bfa      	ldrb	r2, [r7, #15]
 800b0d2:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b0d6:	7bfb      	ldrb	r3, [r7, #15]
 800b0d8:	4619      	mov	r1, r3
 800b0da:	6878      	ldr	r0, [r7, #4]
 800b0dc:	f000 ff2a 	bl	800bf34 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f000 fa45 	bl	800b570 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b0e6:	7bfb      	ldrb	r3, [r7, #15]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d004      	beq.n	800b0f6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2202      	movs	r2, #2
 800b0f0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0f4:	e008      	b.n	800b108 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2201      	movs	r2, #1
 800b0fa:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0fe:	e003      	b.n	800b108 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b100:	6839      	ldr	r1, [r7, #0]
 800b102:	6878      	ldr	r0, [r7, #4]
 800b104:	f000 f96b 	bl	800b3de <USBD_CtlError>
  }
}
 800b108:	bf00      	nop
 800b10a:	3710      	adds	r7, #16
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd80      	pop	{r7, pc}

0800b110 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b082      	sub	sp, #8
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
 800b118:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	885b      	ldrh	r3, [r3, #2]
 800b11e:	b2da      	uxtb	r2, r3
 800b120:	4b41      	ldr	r3, [pc, #260]	; (800b228 <USBD_SetConfig+0x118>)
 800b122:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b124:	4b40      	ldr	r3, [pc, #256]	; (800b228 <USBD_SetConfig+0x118>)
 800b126:	781b      	ldrb	r3, [r3, #0]
 800b128:	2b01      	cmp	r3, #1
 800b12a:	d904      	bls.n	800b136 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800b12c:	6839      	ldr	r1, [r7, #0]
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f000 f955 	bl	800b3de <USBD_CtlError>
 800b134:	e075      	b.n	800b222 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800b13c:	2b02      	cmp	r3, #2
 800b13e:	d002      	beq.n	800b146 <USBD_SetConfig+0x36>
 800b140:	2b03      	cmp	r3, #3
 800b142:	d023      	beq.n	800b18c <USBD_SetConfig+0x7c>
 800b144:	e062      	b.n	800b20c <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800b146:	4b38      	ldr	r3, [pc, #224]	; (800b228 <USBD_SetConfig+0x118>)
 800b148:	781b      	ldrb	r3, [r3, #0]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d01a      	beq.n	800b184 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800b14e:	4b36      	ldr	r3, [pc, #216]	; (800b228 <USBD_SetConfig+0x118>)
 800b150:	781b      	ldrb	r3, [r3, #0]
 800b152:	461a      	mov	r2, r3
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2203      	movs	r2, #3
 800b15c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b160:	4b31      	ldr	r3, [pc, #196]	; (800b228 <USBD_SetConfig+0x118>)
 800b162:	781b      	ldrb	r3, [r3, #0]
 800b164:	4619      	mov	r1, r3
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f7ff fa29 	bl	800a5be <USBD_SetClassConfig>
 800b16c:	4603      	mov	r3, r0
 800b16e:	2b02      	cmp	r3, #2
 800b170:	d104      	bne.n	800b17c <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800b172:	6839      	ldr	r1, [r7, #0]
 800b174:	6878      	ldr	r0, [r7, #4]
 800b176:	f000 f932 	bl	800b3de <USBD_CtlError>
          return;
 800b17a:	e052      	b.n	800b222 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800b17c:	6878      	ldr	r0, [r7, #4]
 800b17e:	f000 f9f7 	bl	800b570 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800b182:	e04e      	b.n	800b222 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	f000 f9f3 	bl	800b570 <USBD_CtlSendStatus>
      break;
 800b18a:	e04a      	b.n	800b222 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b18c:	4b26      	ldr	r3, [pc, #152]	; (800b228 <USBD_SetConfig+0x118>)
 800b18e:	781b      	ldrb	r3, [r3, #0]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d112      	bne.n	800b1ba <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2202      	movs	r2, #2
 800b198:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800b19c:	4b22      	ldr	r3, [pc, #136]	; (800b228 <USBD_SetConfig+0x118>)
 800b19e:	781b      	ldrb	r3, [r3, #0]
 800b1a0:	461a      	mov	r2, r3
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800b1a6:	4b20      	ldr	r3, [pc, #128]	; (800b228 <USBD_SetConfig+0x118>)
 800b1a8:	781b      	ldrb	r3, [r3, #0]
 800b1aa:	4619      	mov	r1, r3
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f7ff fa25 	bl	800a5fc <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800b1b2:	6878      	ldr	r0, [r7, #4]
 800b1b4:	f000 f9dc 	bl	800b570 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800b1b8:	e033      	b.n	800b222 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800b1ba:	4b1b      	ldr	r3, [pc, #108]	; (800b228 <USBD_SetConfig+0x118>)
 800b1bc:	781b      	ldrb	r3, [r3, #0]
 800b1be:	461a      	mov	r2, r3
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	685b      	ldr	r3, [r3, #4]
 800b1c4:	429a      	cmp	r2, r3
 800b1c6:	d01d      	beq.n	800b204 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	685b      	ldr	r3, [r3, #4]
 800b1cc:	b2db      	uxtb	r3, r3
 800b1ce:	4619      	mov	r1, r3
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f7ff fa13 	bl	800a5fc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b1d6:	4b14      	ldr	r3, [pc, #80]	; (800b228 <USBD_SetConfig+0x118>)
 800b1d8:	781b      	ldrb	r3, [r3, #0]
 800b1da:	461a      	mov	r2, r3
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b1e0:	4b11      	ldr	r3, [pc, #68]	; (800b228 <USBD_SetConfig+0x118>)
 800b1e2:	781b      	ldrb	r3, [r3, #0]
 800b1e4:	4619      	mov	r1, r3
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	f7ff f9e9 	bl	800a5be <USBD_SetClassConfig>
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	2b02      	cmp	r3, #2
 800b1f0:	d104      	bne.n	800b1fc <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800b1f2:	6839      	ldr	r1, [r7, #0]
 800b1f4:	6878      	ldr	r0, [r7, #4]
 800b1f6:	f000 f8f2 	bl	800b3de <USBD_CtlError>
          return;
 800b1fa:	e012      	b.n	800b222 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800b1fc:	6878      	ldr	r0, [r7, #4]
 800b1fe:	f000 f9b7 	bl	800b570 <USBD_CtlSendStatus>
      break;
 800b202:	e00e      	b.n	800b222 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	f000 f9b3 	bl	800b570 <USBD_CtlSendStatus>
      break;
 800b20a:	e00a      	b.n	800b222 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800b20c:	6839      	ldr	r1, [r7, #0]
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f000 f8e5 	bl	800b3de <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800b214:	4b04      	ldr	r3, [pc, #16]	; (800b228 <USBD_SetConfig+0x118>)
 800b216:	781b      	ldrb	r3, [r3, #0]
 800b218:	4619      	mov	r1, r3
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f7ff f9ee 	bl	800a5fc <USBD_ClrClassConfig>
      break;
 800b220:	bf00      	nop
    }
  }
}
 800b222:	3708      	adds	r7, #8
 800b224:	46bd      	mov	sp, r7
 800b226:	bd80      	pop	{r7, pc}
 800b228:	20000578 	.word	0x20000578

0800b22c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b082      	sub	sp, #8
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
 800b234:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b236:	683b      	ldr	r3, [r7, #0]
 800b238:	88db      	ldrh	r3, [r3, #6]
 800b23a:	2b01      	cmp	r3, #1
 800b23c:	d004      	beq.n	800b248 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800b23e:	6839      	ldr	r1, [r7, #0]
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f000 f8cc 	bl	800b3de <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800b246:	e021      	b.n	800b28c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800b24e:	2b01      	cmp	r3, #1
 800b250:	db17      	blt.n	800b282 <USBD_GetConfig+0x56>
 800b252:	2b02      	cmp	r3, #2
 800b254:	dd02      	ble.n	800b25c <USBD_GetConfig+0x30>
 800b256:	2b03      	cmp	r3, #3
 800b258:	d00b      	beq.n	800b272 <USBD_GetConfig+0x46>
 800b25a:	e012      	b.n	800b282 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2200      	movs	r2, #0
 800b260:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	3308      	adds	r3, #8
 800b266:	2201      	movs	r2, #1
 800b268:	4619      	mov	r1, r3
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	f000 f922 	bl	800b4b4 <USBD_CtlSendData>
      break;
 800b270:	e00c      	b.n	800b28c <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	3304      	adds	r3, #4
 800b276:	2201      	movs	r2, #1
 800b278:	4619      	mov	r1, r3
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f000 f91a 	bl	800b4b4 <USBD_CtlSendData>
      break;
 800b280:	e004      	b.n	800b28c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 800b282:	6839      	ldr	r1, [r7, #0]
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	f000 f8aa 	bl	800b3de <USBD_CtlError>
      break;
 800b28a:	bf00      	nop
}
 800b28c:	bf00      	nop
 800b28e:	3708      	adds	r7, #8
 800b290:	46bd      	mov	sp, r7
 800b292:	bd80      	pop	{r7, pc}

0800b294 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b082      	sub	sp, #8
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
 800b29c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800b2a4:	3b01      	subs	r3, #1
 800b2a6:	2b02      	cmp	r3, #2
 800b2a8:	d81e      	bhi.n	800b2e8 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	88db      	ldrh	r3, [r3, #6]
 800b2ae:	2b02      	cmp	r3, #2
 800b2b0:	d004      	beq.n	800b2bc <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800b2b2:	6839      	ldr	r1, [r7, #0]
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	f000 f892 	bl	800b3de <USBD_CtlError>
      break;
 800b2ba:	e01a      	b.n	800b2f2 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2201      	movs	r2, #1
 800b2c0:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d005      	beq.n	800b2d8 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	68db      	ldr	r3, [r3, #12]
 800b2d0:	f043 0202 	orr.w	r2, r3, #2
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	330c      	adds	r3, #12
 800b2dc:	2202      	movs	r2, #2
 800b2de:	4619      	mov	r1, r3
 800b2e0:	6878      	ldr	r0, [r7, #4]
 800b2e2:	f000 f8e7 	bl	800b4b4 <USBD_CtlSendData>
    break;
 800b2e6:	e004      	b.n	800b2f2 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800b2e8:	6839      	ldr	r1, [r7, #0]
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f000 f877 	bl	800b3de <USBD_CtlError>
    break;
 800b2f0:	bf00      	nop
  }
}
 800b2f2:	bf00      	nop
 800b2f4:	3708      	adds	r7, #8
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}

0800b2fa <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800b2fa:	b580      	push	{r7, lr}
 800b2fc:	b082      	sub	sp, #8
 800b2fe:	af00      	add	r7, sp, #0
 800b300:	6078      	str	r0, [r7, #4]
 800b302:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	885b      	ldrh	r3, [r3, #2]
 800b308:	2b01      	cmp	r3, #1
 800b30a:	d106      	bne.n	800b31a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2201      	movs	r2, #1
 800b310:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f000 f92b 	bl	800b570 <USBD_CtlSendStatus>
  }

}
 800b31a:	bf00      	nop
 800b31c:	3708      	adds	r7, #8
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}

0800b322 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800b322:	b580      	push	{r7, lr}
 800b324:	b082      	sub	sp, #8
 800b326:	af00      	add	r7, sp, #0
 800b328:	6078      	str	r0, [r7, #4]
 800b32a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800b332:	3b01      	subs	r3, #1
 800b334:	2b02      	cmp	r3, #2
 800b336:	d80b      	bhi.n	800b350 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	885b      	ldrh	r3, [r3, #2]
 800b33c:	2b01      	cmp	r3, #1
 800b33e:	d10c      	bne.n	800b35a <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2200      	movs	r2, #0
 800b344:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800b348:	6878      	ldr	r0, [r7, #4]
 800b34a:	f000 f911 	bl	800b570 <USBD_CtlSendStatus>
    }
    break;
 800b34e:	e004      	b.n	800b35a <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800b350:	6839      	ldr	r1, [r7, #0]
 800b352:	6878      	ldr	r0, [r7, #4]
 800b354:	f000 f843 	bl	800b3de <USBD_CtlError>
    break;
 800b358:	e000      	b.n	800b35c <USBD_ClrFeature+0x3a>
    break;
 800b35a:	bf00      	nop
  }
}
 800b35c:	bf00      	nop
 800b35e:	3708      	adds	r7, #8
 800b360:	46bd      	mov	sp, r7
 800b362:	bd80      	pop	{r7, pc}

0800b364 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b364:	b480      	push	{r7}
 800b366:	b083      	sub	sp, #12
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
 800b36c:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	781a      	ldrb	r2, [r3, #0]
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	785a      	ldrb	r2, [r3, #1]
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	3302      	adds	r3, #2
 800b382:	781b      	ldrb	r3, [r3, #0]
 800b384:	b29a      	uxth	r2, r3
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	3303      	adds	r3, #3
 800b38a:	781b      	ldrb	r3, [r3, #0]
 800b38c:	b29b      	uxth	r3, r3
 800b38e:	021b      	lsls	r3, r3, #8
 800b390:	b29b      	uxth	r3, r3
 800b392:	4413      	add	r3, r2
 800b394:	b29a      	uxth	r2, r3
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	3304      	adds	r3, #4
 800b39e:	781b      	ldrb	r3, [r3, #0]
 800b3a0:	b29a      	uxth	r2, r3
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	3305      	adds	r3, #5
 800b3a6:	781b      	ldrb	r3, [r3, #0]
 800b3a8:	b29b      	uxth	r3, r3
 800b3aa:	021b      	lsls	r3, r3, #8
 800b3ac:	b29b      	uxth	r3, r3
 800b3ae:	4413      	add	r3, r2
 800b3b0:	b29a      	uxth	r2, r3
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	3306      	adds	r3, #6
 800b3ba:	781b      	ldrb	r3, [r3, #0]
 800b3bc:	b29a      	uxth	r2, r3
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	3307      	adds	r3, #7
 800b3c2:	781b      	ldrb	r3, [r3, #0]
 800b3c4:	b29b      	uxth	r3, r3
 800b3c6:	021b      	lsls	r3, r3, #8
 800b3c8:	b29b      	uxth	r3, r3
 800b3ca:	4413      	add	r3, r2
 800b3cc:	b29a      	uxth	r2, r3
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	80da      	strh	r2, [r3, #6]

}
 800b3d2:	bf00      	nop
 800b3d4:	370c      	adds	r7, #12
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3dc:	4770      	bx	lr

0800b3de <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800b3de:	b580      	push	{r7, lr}
 800b3e0:	b082      	sub	sp, #8
 800b3e2:	af00      	add	r7, sp, #0
 800b3e4:	6078      	str	r0, [r7, #4]
 800b3e6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800b3e8:	2180      	movs	r1, #128	; 0x80
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f000 fd38 	bl	800be60 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800b3f0:	2100      	movs	r1, #0
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	f000 fd34 	bl	800be60 <USBD_LL_StallEP>
}
 800b3f8:	bf00      	nop
 800b3fa:	3708      	adds	r7, #8
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bd80      	pop	{r7, pc}

0800b400 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b086      	sub	sp, #24
 800b404:	af00      	add	r7, sp, #0
 800b406:	60f8      	str	r0, [r7, #12]
 800b408:	60b9      	str	r1, [r7, #8]
 800b40a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b40c:	2300      	movs	r3, #0
 800b40e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d032      	beq.n	800b47c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b416:	68f8      	ldr	r0, [r7, #12]
 800b418:	f000 f834 	bl	800b484 <USBD_GetLen>
 800b41c:	4603      	mov	r3, r0
 800b41e:	3301      	adds	r3, #1
 800b420:	b29b      	uxth	r3, r3
 800b422:	005b      	lsls	r3, r3, #1
 800b424:	b29a      	uxth	r2, r3
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b42a:	7dfb      	ldrb	r3, [r7, #23]
 800b42c:	1c5a      	adds	r2, r3, #1
 800b42e:	75fa      	strb	r2, [r7, #23]
 800b430:	461a      	mov	r2, r3
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	4413      	add	r3, r2
 800b436:	687a      	ldr	r2, [r7, #4]
 800b438:	7812      	ldrb	r2, [r2, #0]
 800b43a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b43c:	7dfb      	ldrb	r3, [r7, #23]
 800b43e:	1c5a      	adds	r2, r3, #1
 800b440:	75fa      	strb	r2, [r7, #23]
 800b442:	461a      	mov	r2, r3
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	4413      	add	r3, r2
 800b448:	2203      	movs	r2, #3
 800b44a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b44c:	e012      	b.n	800b474 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	1c5a      	adds	r2, r3, #1
 800b452:	60fa      	str	r2, [r7, #12]
 800b454:	7dfa      	ldrb	r2, [r7, #23]
 800b456:	1c51      	adds	r1, r2, #1
 800b458:	75f9      	strb	r1, [r7, #23]
 800b45a:	4611      	mov	r1, r2
 800b45c:	68ba      	ldr	r2, [r7, #8]
 800b45e:	440a      	add	r2, r1
 800b460:	781b      	ldrb	r3, [r3, #0]
 800b462:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800b464:	7dfb      	ldrb	r3, [r7, #23]
 800b466:	1c5a      	adds	r2, r3, #1
 800b468:	75fa      	strb	r2, [r7, #23]
 800b46a:	461a      	mov	r2, r3
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	4413      	add	r3, r2
 800b470:	2200      	movs	r2, #0
 800b472:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	781b      	ldrb	r3, [r3, #0]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d1e8      	bne.n	800b44e <USBD_GetString+0x4e>
    }
  }
}
 800b47c:	bf00      	nop
 800b47e:	3718      	adds	r7, #24
 800b480:	46bd      	mov	sp, r7
 800b482:	bd80      	pop	{r7, pc}

0800b484 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b484:	b480      	push	{r7}
 800b486:	b085      	sub	sp, #20
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800b48c:	2300      	movs	r3, #0
 800b48e:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800b490:	e005      	b.n	800b49e <USBD_GetLen+0x1a>
    {
        len++;
 800b492:	7bfb      	ldrb	r3, [r7, #15]
 800b494:	3301      	adds	r3, #1
 800b496:	73fb      	strb	r3, [r7, #15]
        buf++;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	3301      	adds	r3, #1
 800b49c:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	781b      	ldrb	r3, [r3, #0]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d1f5      	bne.n	800b492 <USBD_GetLen+0xe>
    }

    return len;
 800b4a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	3714      	adds	r7, #20
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b2:	4770      	bx	lr

0800b4b4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b084      	sub	sp, #16
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	60f8      	str	r0, [r7, #12]
 800b4bc:	60b9      	str	r1, [r7, #8]
 800b4be:	4613      	mov	r3, r2
 800b4c0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	2202      	movs	r2, #2
 800b4c6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800b4ca:	88fa      	ldrh	r2, [r7, #6]
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b4d0:	88fa      	ldrh	r2, [r7, #6]
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800b4d6:	88fb      	ldrh	r3, [r7, #6]
 800b4d8:	68ba      	ldr	r2, [r7, #8]
 800b4da:	2100      	movs	r1, #0
 800b4dc:	68f8      	ldr	r0, [r7, #12]
 800b4de:	f000 fd48 	bl	800bf72 <USBD_LL_Transmit>

  return USBD_OK;
 800b4e2:	2300      	movs	r3, #0
}
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	3710      	adds	r7, #16
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bd80      	pop	{r7, pc}

0800b4ec <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b084      	sub	sp, #16
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	60f8      	str	r0, [r7, #12]
 800b4f4:	60b9      	str	r1, [r7, #8]
 800b4f6:	4613      	mov	r3, r2
 800b4f8:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800b4fa:	88fb      	ldrh	r3, [r7, #6]
 800b4fc:	68ba      	ldr	r2, [r7, #8]
 800b4fe:	2100      	movs	r1, #0
 800b500:	68f8      	ldr	r0, [r7, #12]
 800b502:	f000 fd36 	bl	800bf72 <USBD_LL_Transmit>

  return USBD_OK;
 800b506:	2300      	movs	r3, #0
}
 800b508:	4618      	mov	r0, r3
 800b50a:	3710      	adds	r7, #16
 800b50c:	46bd      	mov	sp, r7
 800b50e:	bd80      	pop	{r7, pc}

0800b510 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b084      	sub	sp, #16
 800b514:	af00      	add	r7, sp, #0
 800b516:	60f8      	str	r0, [r7, #12]
 800b518:	60b9      	str	r1, [r7, #8]
 800b51a:	4613      	mov	r3, r2
 800b51c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	2203      	movs	r2, #3
 800b522:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800b526:	88fa      	ldrh	r2, [r7, #6]
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800b52e:	88fa      	ldrh	r2, [r7, #6]
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800b536:	88fb      	ldrh	r3, [r7, #6]
 800b538:	68ba      	ldr	r2, [r7, #8]
 800b53a:	2100      	movs	r1, #0
 800b53c:	68f8      	ldr	r0, [r7, #12]
 800b53e:	f000 fd3b 	bl	800bfb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b542:	2300      	movs	r3, #0
}
 800b544:	4618      	mov	r0, r3
 800b546:	3710      	adds	r7, #16
 800b548:	46bd      	mov	sp, r7
 800b54a:	bd80      	pop	{r7, pc}

0800b54c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b084      	sub	sp, #16
 800b550:	af00      	add	r7, sp, #0
 800b552:	60f8      	str	r0, [r7, #12]
 800b554:	60b9      	str	r1, [r7, #8]
 800b556:	4613      	mov	r3, r2
 800b558:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b55a:	88fb      	ldrh	r3, [r7, #6]
 800b55c:	68ba      	ldr	r2, [r7, #8]
 800b55e:	2100      	movs	r1, #0
 800b560:	68f8      	ldr	r0, [r7, #12]
 800b562:	f000 fd29 	bl	800bfb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b566:	2300      	movs	r3, #0
}
 800b568:	4618      	mov	r0, r3
 800b56a:	3710      	adds	r7, #16
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd80      	pop	{r7, pc}

0800b570 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b082      	sub	sp, #8
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2204      	movs	r2, #4
 800b57c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b580:	2300      	movs	r3, #0
 800b582:	2200      	movs	r2, #0
 800b584:	2100      	movs	r1, #0
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f000 fcf3 	bl	800bf72 <USBD_LL_Transmit>

  return USBD_OK;
 800b58c:	2300      	movs	r3, #0
}
 800b58e:	4618      	mov	r0, r3
 800b590:	3708      	adds	r7, #8
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}

0800b596 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800b596:	b580      	push	{r7, lr}
 800b598:	b082      	sub	sp, #8
 800b59a:	af00      	add	r7, sp, #0
 800b59c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2205      	movs	r2, #5
 800b5a2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	2100      	movs	r1, #0
 800b5ac:	6878      	ldr	r0, [r7, #4]
 800b5ae:	f000 fd03 	bl	800bfb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b5b2:	2300      	movs	r3, #0
}
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	3708      	adds	r7, #8
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd80      	pop	{r7, pc}

0800b5bc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b5bc:	b480      	push	{r7}
 800b5be:	b087      	sub	sp, #28
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	60f8      	str	r0, [r7, #12]
 800b5c4:	60b9      	str	r1, [r7, #8]
 800b5c6:	4613      	mov	r3, r2
 800b5c8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b5d2:	4b1f      	ldr	r3, [pc, #124]	; (800b650 <FATFS_LinkDriverEx+0x94>)
 800b5d4:	7a5b      	ldrb	r3, [r3, #9]
 800b5d6:	b2db      	uxtb	r3, r3
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d131      	bne.n	800b640 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b5dc:	4b1c      	ldr	r3, [pc, #112]	; (800b650 <FATFS_LinkDriverEx+0x94>)
 800b5de:	7a5b      	ldrb	r3, [r3, #9]
 800b5e0:	b2db      	uxtb	r3, r3
 800b5e2:	461a      	mov	r2, r3
 800b5e4:	4b1a      	ldr	r3, [pc, #104]	; (800b650 <FATFS_LinkDriverEx+0x94>)
 800b5e6:	2100      	movs	r1, #0
 800b5e8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b5ea:	4b19      	ldr	r3, [pc, #100]	; (800b650 <FATFS_LinkDriverEx+0x94>)
 800b5ec:	7a5b      	ldrb	r3, [r3, #9]
 800b5ee:	b2db      	uxtb	r3, r3
 800b5f0:	4a17      	ldr	r2, [pc, #92]	; (800b650 <FATFS_LinkDriverEx+0x94>)
 800b5f2:	009b      	lsls	r3, r3, #2
 800b5f4:	4413      	add	r3, r2
 800b5f6:	68fa      	ldr	r2, [r7, #12]
 800b5f8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b5fa:	4b15      	ldr	r3, [pc, #84]	; (800b650 <FATFS_LinkDriverEx+0x94>)
 800b5fc:	7a5b      	ldrb	r3, [r3, #9]
 800b5fe:	b2db      	uxtb	r3, r3
 800b600:	461a      	mov	r2, r3
 800b602:	4b13      	ldr	r3, [pc, #76]	; (800b650 <FATFS_LinkDriverEx+0x94>)
 800b604:	4413      	add	r3, r2
 800b606:	79fa      	ldrb	r2, [r7, #7]
 800b608:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b60a:	4b11      	ldr	r3, [pc, #68]	; (800b650 <FATFS_LinkDriverEx+0x94>)
 800b60c:	7a5b      	ldrb	r3, [r3, #9]
 800b60e:	b2db      	uxtb	r3, r3
 800b610:	1c5a      	adds	r2, r3, #1
 800b612:	b2d1      	uxtb	r1, r2
 800b614:	4a0e      	ldr	r2, [pc, #56]	; (800b650 <FATFS_LinkDriverEx+0x94>)
 800b616:	7251      	strb	r1, [r2, #9]
 800b618:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b61a:	7dbb      	ldrb	r3, [r7, #22]
 800b61c:	3330      	adds	r3, #48	; 0x30
 800b61e:	b2da      	uxtb	r2, r3
 800b620:	68bb      	ldr	r3, [r7, #8]
 800b622:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b624:	68bb      	ldr	r3, [r7, #8]
 800b626:	3301      	adds	r3, #1
 800b628:	223a      	movs	r2, #58	; 0x3a
 800b62a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	3302      	adds	r3, #2
 800b630:	222f      	movs	r2, #47	; 0x2f
 800b632:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	3303      	adds	r3, #3
 800b638:	2200      	movs	r2, #0
 800b63a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b63c:	2300      	movs	r3, #0
 800b63e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b640:	7dfb      	ldrb	r3, [r7, #23]
}
 800b642:	4618      	mov	r0, r3
 800b644:	371c      	adds	r7, #28
 800b646:	46bd      	mov	sp, r7
 800b648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64c:	4770      	bx	lr
 800b64e:	bf00      	nop
 800b650:	2000057c 	.word	0x2000057c

0800b654 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b082      	sub	sp, #8
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
 800b65c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b65e:	2200      	movs	r2, #0
 800b660:	6839      	ldr	r1, [r7, #0]
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	f7ff ffaa 	bl	800b5bc <FATFS_LinkDriverEx>
 800b668:	4603      	mov	r3, r0
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3708      	adds	r7, #8
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}
	...

0800b674 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b678:	2200      	movs	r2, #0
 800b67a:	4912      	ldr	r1, [pc, #72]	; (800b6c4 <MX_USB_DEVICE_Init+0x50>)
 800b67c:	4812      	ldr	r0, [pc, #72]	; (800b6c8 <MX_USB_DEVICE_Init+0x54>)
 800b67e:	f7fe ff42 	bl	800a506 <USBD_Init>
 800b682:	4603      	mov	r3, r0
 800b684:	2b00      	cmp	r3, #0
 800b686:	d001      	beq.n	800b68c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b688:	f7f6 f960 	bl	800194c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b68c:	490f      	ldr	r1, [pc, #60]	; (800b6cc <MX_USB_DEVICE_Init+0x58>)
 800b68e:	480e      	ldr	r0, [pc, #56]	; (800b6c8 <MX_USB_DEVICE_Init+0x54>)
 800b690:	f7fe ff64 	bl	800a55c <USBD_RegisterClass>
 800b694:	4603      	mov	r3, r0
 800b696:	2b00      	cmp	r3, #0
 800b698:	d001      	beq.n	800b69e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b69a:	f7f6 f957 	bl	800194c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b69e:	490c      	ldr	r1, [pc, #48]	; (800b6d0 <MX_USB_DEVICE_Init+0x5c>)
 800b6a0:	4809      	ldr	r0, [pc, #36]	; (800b6c8 <MX_USB_DEVICE_Init+0x54>)
 800b6a2:	f7fe fec1 	bl	800a428 <USBD_CDC_RegisterInterface>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d001      	beq.n	800b6b0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b6ac:	f7f6 f94e 	bl	800194c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b6b0:	4805      	ldr	r0, [pc, #20]	; (800b6c8 <MX_USB_DEVICE_Init+0x54>)
 800b6b2:	f7fe ff6d 	bl	800a590 <USBD_Start>
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d001      	beq.n	800b6c0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b6bc:	f7f6 f946 	bl	800194c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b6c0:	bf00      	nop
 800b6c2:	bd80      	pop	{r7, pc}
 800b6c4:	20000130 	.word	0x20000130
 800b6c8:	20000f90 	.word	0x20000f90
 800b6cc:	2000001c 	.word	0x2000001c
 800b6d0:	20000120 	.word	0x20000120

0800b6d4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b6d8:	2200      	movs	r2, #0
 800b6da:	4905      	ldr	r1, [pc, #20]	; (800b6f0 <CDC_Init_FS+0x1c>)
 800b6dc:	4805      	ldr	r0, [pc, #20]	; (800b6f4 <CDC_Init_FS+0x20>)
 800b6de:	f7fe feba 	bl	800a456 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b6e2:	4905      	ldr	r1, [pc, #20]	; (800b6f8 <CDC_Init_FS+0x24>)
 800b6e4:	4803      	ldr	r0, [pc, #12]	; (800b6f4 <CDC_Init_FS+0x20>)
 800b6e6:	f7fe fed0 	bl	800a48a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b6ea:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	bd80      	pop	{r7, pc}
 800b6f0:	20001a2c 	.word	0x20001a2c
 800b6f4:	20000f90 	.word	0x20000f90
 800b6f8:	2000122c 	.word	0x2000122c

0800b6fc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b6fc:	b480      	push	{r7}
 800b6fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b700:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b702:	4618      	mov	r0, r3
 800b704:	46bd      	mov	sp, r7
 800b706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70a:	4770      	bx	lr

0800b70c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b70c:	b480      	push	{r7}
 800b70e:	b085      	sub	sp, #20
 800b710:	af00      	add	r7, sp, #0
 800b712:	4603      	mov	r3, r0
 800b714:	6039      	str	r1, [r7, #0]
 800b716:	71fb      	strb	r3, [r7, #7]
 800b718:	4613      	mov	r3, r2
 800b71a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint8_t tempbuf[7] = {0,0,0,0,0,0,0};
 800b71c:	f107 0308 	add.w	r3, r7, #8
 800b720:	2200      	movs	r2, #0
 800b722:	601a      	str	r2, [r3, #0]
 800b724:	f8c3 2003 	str.w	r2, [r3, #3]
  switch(cmd)
 800b728:	79fb      	ldrb	r3, [r7, #7]
 800b72a:	2b23      	cmp	r3, #35	; 0x23
 800b72c:	d87c      	bhi.n	800b828 <CDC_Control_FS+0x11c>
 800b72e:	a201      	add	r2, pc, #4	; (adr r2, 800b734 <CDC_Control_FS+0x28>)
 800b730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b734:	0800b829 	.word	0x0800b829
 800b738:	0800b829 	.word	0x0800b829
 800b73c:	0800b829 	.word	0x0800b829
 800b740:	0800b829 	.word	0x0800b829
 800b744:	0800b829 	.word	0x0800b829
 800b748:	0800b829 	.word	0x0800b829
 800b74c:	0800b829 	.word	0x0800b829
 800b750:	0800b829 	.word	0x0800b829
 800b754:	0800b829 	.word	0x0800b829
 800b758:	0800b829 	.word	0x0800b829
 800b75c:	0800b829 	.word	0x0800b829
 800b760:	0800b829 	.word	0x0800b829
 800b764:	0800b829 	.word	0x0800b829
 800b768:	0800b829 	.word	0x0800b829
 800b76c:	0800b829 	.word	0x0800b829
 800b770:	0800b829 	.word	0x0800b829
 800b774:	0800b829 	.word	0x0800b829
 800b778:	0800b829 	.word	0x0800b829
 800b77c:	0800b829 	.word	0x0800b829
 800b780:	0800b829 	.word	0x0800b829
 800b784:	0800b829 	.word	0x0800b829
 800b788:	0800b829 	.word	0x0800b829
 800b78c:	0800b829 	.word	0x0800b829
 800b790:	0800b829 	.word	0x0800b829
 800b794:	0800b829 	.word	0x0800b829
 800b798:	0800b829 	.word	0x0800b829
 800b79c:	0800b829 	.word	0x0800b829
 800b7a0:	0800b829 	.word	0x0800b829
 800b7a4:	0800b829 	.word	0x0800b829
 800b7a8:	0800b829 	.word	0x0800b829
 800b7ac:	0800b829 	.word	0x0800b829
 800b7b0:	0800b829 	.word	0x0800b829
 800b7b4:	0800b7c5 	.word	0x0800b7c5
 800b7b8:	0800b7f1 	.word	0x0800b7f1
 800b7bc:	0800b829 	.word	0x0800b829
 800b7c0:	0800b829 	.word	0x0800b829
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      	tempbuf[0] = pbuf[0];
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	781b      	ldrb	r3, [r3, #0]
 800b7c8:	723b      	strb	r3, [r7, #8]
      	tempbuf[1] = pbuf[1];
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	785b      	ldrb	r3, [r3, #1]
 800b7ce:	727b      	strb	r3, [r7, #9]
      	tempbuf[2] = pbuf[2];
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	789b      	ldrb	r3, [r3, #2]
 800b7d4:	72bb      	strb	r3, [r7, #10]
      	tempbuf[3] = pbuf[3];
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	78db      	ldrb	r3, [r3, #3]
 800b7da:	72fb      	strb	r3, [r7, #11]
      	tempbuf[4] = pbuf[4];
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	791b      	ldrb	r3, [r3, #4]
 800b7e0:	733b      	strb	r3, [r7, #12]
      	tempbuf[5] = pbuf[5];
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	795b      	ldrb	r3, [r3, #5]
 800b7e6:	737b      	strb	r3, [r7, #13]
      	tempbuf[6] = pbuf[6];
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	799b      	ldrb	r3, [r3, #6]
 800b7ec:	73bb      	strb	r3, [r7, #14]
      	break;
 800b7ee:	e01c      	b.n	800b82a <CDC_Control_FS+0x11e>

    case CDC_GET_LINE_CODING:
      	pbuf[0] = tempbuf[0];
 800b7f0:	7a3a      	ldrb	r2, [r7, #8]
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	701a      	strb	r2, [r3, #0]
      	pbuf[1] = tempbuf[1];
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	3301      	adds	r3, #1
 800b7fa:	7a7a      	ldrb	r2, [r7, #9]
 800b7fc:	701a      	strb	r2, [r3, #0]
      	pbuf[2] = tempbuf[2];
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	3302      	adds	r3, #2
 800b802:	7aba      	ldrb	r2, [r7, #10]
 800b804:	701a      	strb	r2, [r3, #0]
      	pbuf[3] = tempbuf[3];
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	3303      	adds	r3, #3
 800b80a:	7afa      	ldrb	r2, [r7, #11]
 800b80c:	701a      	strb	r2, [r3, #0]
      	pbuf[4] = tempbuf[4];
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	3304      	adds	r3, #4
 800b812:	7b3a      	ldrb	r2, [r7, #12]
 800b814:	701a      	strb	r2, [r3, #0]
      	pbuf[5] = tempbuf[5];
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	3305      	adds	r3, #5
 800b81a:	7b7a      	ldrb	r2, [r7, #13]
 800b81c:	701a      	strb	r2, [r3, #0]
      	pbuf[6] = tempbuf[6];
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	3306      	adds	r3, #6
 800b822:	7bba      	ldrb	r2, [r7, #14]
 800b824:	701a      	strb	r2, [r3, #0]
      	break;
 800b826:	e000      	b.n	800b82a <CDC_Control_FS+0x11e>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b828:	bf00      	nop
  }

  return (USBD_OK);
 800b82a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b82c:	4618      	mov	r0, r3
 800b82e:	3714      	adds	r7, #20
 800b830:	46bd      	mov	sp, r7
 800b832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b836:	4770      	bx	lr

0800b838 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b082      	sub	sp, #8
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
 800b840:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b842:	6879      	ldr	r1, [r7, #4]
 800b844:	4805      	ldr	r0, [pc, #20]	; (800b85c <CDC_Receive_FS+0x24>)
 800b846:	f7fe fe20 	bl	800a48a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b84a:	4804      	ldr	r0, [pc, #16]	; (800b85c <CDC_Receive_FS+0x24>)
 800b84c:	f7fe fe31 	bl	800a4b2 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b850:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b852:	4618      	mov	r0, r3
 800b854:	3708      	adds	r7, #8
 800b856:	46bd      	mov	sp, r7
 800b858:	bd80      	pop	{r7, pc}
 800b85a:	bf00      	nop
 800b85c:	20000f90 	.word	0x20000f90

0800b860 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b860:	b480      	push	{r7}
 800b862:	b083      	sub	sp, #12
 800b864:	af00      	add	r7, sp, #0
 800b866:	4603      	mov	r3, r0
 800b868:	6039      	str	r1, [r7, #0]
 800b86a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	2212      	movs	r2, #18
 800b870:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b872:	4b03      	ldr	r3, [pc, #12]	; (800b880 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b874:	4618      	mov	r0, r3
 800b876:	370c      	adds	r7, #12
 800b878:	46bd      	mov	sp, r7
 800b87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87e:	4770      	bx	lr
 800b880:	2000014c 	.word	0x2000014c

0800b884 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b884:	b480      	push	{r7}
 800b886:	b083      	sub	sp, #12
 800b888:	af00      	add	r7, sp, #0
 800b88a:	4603      	mov	r3, r0
 800b88c:	6039      	str	r1, [r7, #0]
 800b88e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b890:	683b      	ldr	r3, [r7, #0]
 800b892:	2204      	movs	r2, #4
 800b894:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b896:	4b03      	ldr	r3, [pc, #12]	; (800b8a4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b898:	4618      	mov	r0, r3
 800b89a:	370c      	adds	r7, #12
 800b89c:	46bd      	mov	sp, r7
 800b89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a2:	4770      	bx	lr
 800b8a4:	20000160 	.word	0x20000160

0800b8a8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b082      	sub	sp, #8
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	6039      	str	r1, [r7, #0]
 800b8b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b8b4:	79fb      	ldrb	r3, [r7, #7]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d105      	bne.n	800b8c6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b8ba:	683a      	ldr	r2, [r7, #0]
 800b8bc:	4907      	ldr	r1, [pc, #28]	; (800b8dc <USBD_FS_ProductStrDescriptor+0x34>)
 800b8be:	4808      	ldr	r0, [pc, #32]	; (800b8e0 <USBD_FS_ProductStrDescriptor+0x38>)
 800b8c0:	f7ff fd9e 	bl	800b400 <USBD_GetString>
 800b8c4:	e004      	b.n	800b8d0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b8c6:	683a      	ldr	r2, [r7, #0]
 800b8c8:	4904      	ldr	r1, [pc, #16]	; (800b8dc <USBD_FS_ProductStrDescriptor+0x34>)
 800b8ca:	4805      	ldr	r0, [pc, #20]	; (800b8e0 <USBD_FS_ProductStrDescriptor+0x38>)
 800b8cc:	f7ff fd98 	bl	800b400 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b8d0:	4b02      	ldr	r3, [pc, #8]	; (800b8dc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	3708      	adds	r7, #8
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}
 800b8da:	bf00      	nop
 800b8dc:	2000222c 	.word	0x2000222c
 800b8e0:	0800fb90 	.word	0x0800fb90

0800b8e4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b082      	sub	sp, #8
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	6039      	str	r1, [r7, #0]
 800b8ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b8f0:	683a      	ldr	r2, [r7, #0]
 800b8f2:	4904      	ldr	r1, [pc, #16]	; (800b904 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b8f4:	4804      	ldr	r0, [pc, #16]	; (800b908 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b8f6:	f7ff fd83 	bl	800b400 <USBD_GetString>
  return USBD_StrDesc;
 800b8fa:	4b02      	ldr	r3, [pc, #8]	; (800b904 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	3708      	adds	r7, #8
 800b900:	46bd      	mov	sp, r7
 800b902:	bd80      	pop	{r7, pc}
 800b904:	2000222c 	.word	0x2000222c
 800b908:	0800fb9c 	.word	0x0800fb9c

0800b90c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b082      	sub	sp, #8
 800b910:	af00      	add	r7, sp, #0
 800b912:	4603      	mov	r3, r0
 800b914:	6039      	str	r1, [r7, #0]
 800b916:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	221a      	movs	r2, #26
 800b91c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b91e:	f000 f843 	bl	800b9a8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b922:	4b02      	ldr	r3, [pc, #8]	; (800b92c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b924:	4618      	mov	r0, r3
 800b926:	3708      	adds	r7, #8
 800b928:	46bd      	mov	sp, r7
 800b92a:	bd80      	pop	{r7, pc}
 800b92c:	20000164 	.word	0x20000164

0800b930 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b082      	sub	sp, #8
 800b934:	af00      	add	r7, sp, #0
 800b936:	4603      	mov	r3, r0
 800b938:	6039      	str	r1, [r7, #0]
 800b93a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b93c:	79fb      	ldrb	r3, [r7, #7]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d105      	bne.n	800b94e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b942:	683a      	ldr	r2, [r7, #0]
 800b944:	4907      	ldr	r1, [pc, #28]	; (800b964 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b946:	4808      	ldr	r0, [pc, #32]	; (800b968 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b948:	f7ff fd5a 	bl	800b400 <USBD_GetString>
 800b94c:	e004      	b.n	800b958 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b94e:	683a      	ldr	r2, [r7, #0]
 800b950:	4904      	ldr	r1, [pc, #16]	; (800b964 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b952:	4805      	ldr	r0, [pc, #20]	; (800b968 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b954:	f7ff fd54 	bl	800b400 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b958:	4b02      	ldr	r3, [pc, #8]	; (800b964 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b95a:	4618      	mov	r0, r3
 800b95c:	3708      	adds	r7, #8
 800b95e:	46bd      	mov	sp, r7
 800b960:	bd80      	pop	{r7, pc}
 800b962:	bf00      	nop
 800b964:	2000222c 	.word	0x2000222c
 800b968:	0800fbb0 	.word	0x0800fbb0

0800b96c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b082      	sub	sp, #8
 800b970:	af00      	add	r7, sp, #0
 800b972:	4603      	mov	r3, r0
 800b974:	6039      	str	r1, [r7, #0]
 800b976:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b978:	79fb      	ldrb	r3, [r7, #7]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d105      	bne.n	800b98a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b97e:	683a      	ldr	r2, [r7, #0]
 800b980:	4907      	ldr	r1, [pc, #28]	; (800b9a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b982:	4808      	ldr	r0, [pc, #32]	; (800b9a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b984:	f7ff fd3c 	bl	800b400 <USBD_GetString>
 800b988:	e004      	b.n	800b994 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b98a:	683a      	ldr	r2, [r7, #0]
 800b98c:	4904      	ldr	r1, [pc, #16]	; (800b9a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b98e:	4805      	ldr	r0, [pc, #20]	; (800b9a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b990:	f7ff fd36 	bl	800b400 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b994:	4b02      	ldr	r3, [pc, #8]	; (800b9a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b996:	4618      	mov	r0, r3
 800b998:	3708      	adds	r7, #8
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd80      	pop	{r7, pc}
 800b99e:	bf00      	nop
 800b9a0:	2000222c 	.word	0x2000222c
 800b9a4:	0800fbbc 	.word	0x0800fbbc

0800b9a8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b084      	sub	sp, #16
 800b9ac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b9ae:	4b0f      	ldr	r3, [pc, #60]	; (800b9ec <Get_SerialNum+0x44>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b9b4:	4b0e      	ldr	r3, [pc, #56]	; (800b9f0 <Get_SerialNum+0x48>)
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b9ba:	4b0e      	ldr	r3, [pc, #56]	; (800b9f4 <Get_SerialNum+0x4c>)
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b9c0:	68fa      	ldr	r2, [r7, #12]
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	4413      	add	r3, r2
 800b9c6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d009      	beq.n	800b9e2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b9ce:	2208      	movs	r2, #8
 800b9d0:	4909      	ldr	r1, [pc, #36]	; (800b9f8 <Get_SerialNum+0x50>)
 800b9d2:	68f8      	ldr	r0, [r7, #12]
 800b9d4:	f000 f814 	bl	800ba00 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b9d8:	2204      	movs	r2, #4
 800b9da:	4908      	ldr	r1, [pc, #32]	; (800b9fc <Get_SerialNum+0x54>)
 800b9dc:	68b8      	ldr	r0, [r7, #8]
 800b9de:	f000 f80f 	bl	800ba00 <IntToUnicode>
  }
}
 800b9e2:	bf00      	nop
 800b9e4:	3710      	adds	r7, #16
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd80      	pop	{r7, pc}
 800b9ea:	bf00      	nop
 800b9ec:	1fff7a10 	.word	0x1fff7a10
 800b9f0:	1fff7a14 	.word	0x1fff7a14
 800b9f4:	1fff7a18 	.word	0x1fff7a18
 800b9f8:	20000166 	.word	0x20000166
 800b9fc:	20000176 	.word	0x20000176

0800ba00 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ba00:	b480      	push	{r7}
 800ba02:	b087      	sub	sp, #28
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	60f8      	str	r0, [r7, #12]
 800ba08:	60b9      	str	r1, [r7, #8]
 800ba0a:	4613      	mov	r3, r2
 800ba0c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ba12:	2300      	movs	r3, #0
 800ba14:	75fb      	strb	r3, [r7, #23]
 800ba16:	e027      	b.n	800ba68 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	0f1b      	lsrs	r3, r3, #28
 800ba1c:	2b09      	cmp	r3, #9
 800ba1e:	d80b      	bhi.n	800ba38 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	0f1b      	lsrs	r3, r3, #28
 800ba24:	b2da      	uxtb	r2, r3
 800ba26:	7dfb      	ldrb	r3, [r7, #23]
 800ba28:	005b      	lsls	r3, r3, #1
 800ba2a:	4619      	mov	r1, r3
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	440b      	add	r3, r1
 800ba30:	3230      	adds	r2, #48	; 0x30
 800ba32:	b2d2      	uxtb	r2, r2
 800ba34:	701a      	strb	r2, [r3, #0]
 800ba36:	e00a      	b.n	800ba4e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	0f1b      	lsrs	r3, r3, #28
 800ba3c:	b2da      	uxtb	r2, r3
 800ba3e:	7dfb      	ldrb	r3, [r7, #23]
 800ba40:	005b      	lsls	r3, r3, #1
 800ba42:	4619      	mov	r1, r3
 800ba44:	68bb      	ldr	r3, [r7, #8]
 800ba46:	440b      	add	r3, r1
 800ba48:	3237      	adds	r2, #55	; 0x37
 800ba4a:	b2d2      	uxtb	r2, r2
 800ba4c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	011b      	lsls	r3, r3, #4
 800ba52:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ba54:	7dfb      	ldrb	r3, [r7, #23]
 800ba56:	005b      	lsls	r3, r3, #1
 800ba58:	3301      	adds	r3, #1
 800ba5a:	68ba      	ldr	r2, [r7, #8]
 800ba5c:	4413      	add	r3, r2
 800ba5e:	2200      	movs	r2, #0
 800ba60:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ba62:	7dfb      	ldrb	r3, [r7, #23]
 800ba64:	3301      	adds	r3, #1
 800ba66:	75fb      	strb	r3, [r7, #23]
 800ba68:	7dfa      	ldrb	r2, [r7, #23]
 800ba6a:	79fb      	ldrb	r3, [r7, #7]
 800ba6c:	429a      	cmp	r2, r3
 800ba6e:	d3d3      	bcc.n	800ba18 <IntToUnicode+0x18>
  }
}
 800ba70:	bf00      	nop
 800ba72:	371c      	adds	r7, #28
 800ba74:	46bd      	mov	sp, r7
 800ba76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7a:	4770      	bx	lr

0800ba7c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b08a      	sub	sp, #40	; 0x28
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ba84:	f107 0314 	add.w	r3, r7, #20
 800ba88:	2200      	movs	r2, #0
 800ba8a:	601a      	str	r2, [r3, #0]
 800ba8c:	605a      	str	r2, [r3, #4]
 800ba8e:	609a      	str	r2, [r3, #8]
 800ba90:	60da      	str	r2, [r3, #12]
 800ba92:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ba9c:	d13a      	bne.n	800bb14 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ba9e:	2300      	movs	r3, #0
 800baa0:	613b      	str	r3, [r7, #16]
 800baa2:	4b1e      	ldr	r3, [pc, #120]	; (800bb1c <HAL_PCD_MspInit+0xa0>)
 800baa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baa6:	4a1d      	ldr	r2, [pc, #116]	; (800bb1c <HAL_PCD_MspInit+0xa0>)
 800baa8:	f043 0301 	orr.w	r3, r3, #1
 800baac:	6313      	str	r3, [r2, #48]	; 0x30
 800baae:	4b1b      	ldr	r3, [pc, #108]	; (800bb1c <HAL_PCD_MspInit+0xa0>)
 800bab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bab2:	f003 0301 	and.w	r3, r3, #1
 800bab6:	613b      	str	r3, [r7, #16]
 800bab8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800baba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800babe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bac0:	2302      	movs	r3, #2
 800bac2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bac4:	2300      	movs	r3, #0
 800bac6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bac8:	2303      	movs	r3, #3
 800baca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bacc:	230a      	movs	r3, #10
 800bace:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bad0:	f107 0314 	add.w	r3, r7, #20
 800bad4:	4619      	mov	r1, r3
 800bad6:	4812      	ldr	r0, [pc, #72]	; (800bb20 <HAL_PCD_MspInit+0xa4>)
 800bad8:	f7f6 ff92 	bl	8002a00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800badc:	4b0f      	ldr	r3, [pc, #60]	; (800bb1c <HAL_PCD_MspInit+0xa0>)
 800bade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bae0:	4a0e      	ldr	r2, [pc, #56]	; (800bb1c <HAL_PCD_MspInit+0xa0>)
 800bae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bae6:	6353      	str	r3, [r2, #52]	; 0x34
 800bae8:	2300      	movs	r3, #0
 800baea:	60fb      	str	r3, [r7, #12]
 800baec:	4b0b      	ldr	r3, [pc, #44]	; (800bb1c <HAL_PCD_MspInit+0xa0>)
 800baee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800baf0:	4a0a      	ldr	r2, [pc, #40]	; (800bb1c <HAL_PCD_MspInit+0xa0>)
 800baf2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800baf6:	6453      	str	r3, [r2, #68]	; 0x44
 800baf8:	4b08      	ldr	r3, [pc, #32]	; (800bb1c <HAL_PCD_MspInit+0xa0>)
 800bafa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bafc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bb00:	60fb      	str	r3, [r7, #12]
 800bb02:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bb04:	2200      	movs	r2, #0
 800bb06:	2100      	movs	r1, #0
 800bb08:	2043      	movs	r0, #67	; 0x43
 800bb0a:	f7f6 fba6 	bl	800225a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bb0e:	2043      	movs	r0, #67	; 0x43
 800bb10:	f7f6 fbbf 	bl	8002292 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bb14:	bf00      	nop
 800bb16:	3728      	adds	r7, #40	; 0x28
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	bd80      	pop	{r7, pc}
 800bb1c:	40023800 	.word	0x40023800
 800bb20:	40020000 	.word	0x40020000

0800bb24 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b082      	sub	sp, #8
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800bb38:	4619      	mov	r1, r3
 800bb3a:	4610      	mov	r0, r2
 800bb3c:	f7fe fd71 	bl	800a622 <USBD_LL_SetupStage>
}
 800bb40:	bf00      	nop
 800bb42:	3708      	adds	r7, #8
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}

0800bb48 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b082      	sub	sp, #8
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
 800bb50:	460b      	mov	r3, r1
 800bb52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800bb5a:	78fa      	ldrb	r2, [r7, #3]
 800bb5c:	6879      	ldr	r1, [r7, #4]
 800bb5e:	4613      	mov	r3, r2
 800bb60:	00db      	lsls	r3, r3, #3
 800bb62:	1a9b      	subs	r3, r3, r2
 800bb64:	009b      	lsls	r3, r3, #2
 800bb66:	440b      	add	r3, r1
 800bb68:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800bb6c:	681a      	ldr	r2, [r3, #0]
 800bb6e:	78fb      	ldrb	r3, [r7, #3]
 800bb70:	4619      	mov	r1, r3
 800bb72:	f7fe fda1 	bl	800a6b8 <USBD_LL_DataOutStage>
}
 800bb76:	bf00      	nop
 800bb78:	3708      	adds	r7, #8
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}

0800bb7e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb7e:	b580      	push	{r7, lr}
 800bb80:	b082      	sub	sp, #8
 800bb82:	af00      	add	r7, sp, #0
 800bb84:	6078      	str	r0, [r7, #4]
 800bb86:	460b      	mov	r3, r1
 800bb88:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800bb90:	78fa      	ldrb	r2, [r7, #3]
 800bb92:	6879      	ldr	r1, [r7, #4]
 800bb94:	4613      	mov	r3, r2
 800bb96:	00db      	lsls	r3, r3, #3
 800bb98:	1a9b      	subs	r3, r3, r2
 800bb9a:	009b      	lsls	r3, r3, #2
 800bb9c:	440b      	add	r3, r1
 800bb9e:	3348      	adds	r3, #72	; 0x48
 800bba0:	681a      	ldr	r2, [r3, #0]
 800bba2:	78fb      	ldrb	r3, [r7, #3]
 800bba4:	4619      	mov	r1, r3
 800bba6:	f7fe fdf8 	bl	800a79a <USBD_LL_DataInStage>
}
 800bbaa:	bf00      	nop
 800bbac:	3708      	adds	r7, #8
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd80      	pop	{r7, pc}

0800bbb2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbb2:	b580      	push	{r7, lr}
 800bbb4:	b082      	sub	sp, #8
 800bbb6:	af00      	add	r7, sp, #0
 800bbb8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	f7fe ff06 	bl	800a9d2 <USBD_LL_SOF>
}
 800bbc6:	bf00      	nop
 800bbc8:	3708      	adds	r7, #8
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}

0800bbce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800bbce:	b580      	push	{r7, lr}
 800bbd0:	b084      	sub	sp, #16
 800bbd2:	af00      	add	r7, sp, #0
 800bbd4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bbd6:	2301      	movs	r3, #1
 800bbd8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	68db      	ldr	r3, [r3, #12]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d102      	bne.n	800bbe8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	73fb      	strb	r3, [r7, #15]
 800bbe6:	e008      	b.n	800bbfa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	68db      	ldr	r3, [r3, #12]
 800bbec:	2b02      	cmp	r3, #2
 800bbee:	d102      	bne.n	800bbf6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800bbf0:	2301      	movs	r3, #1
 800bbf2:	73fb      	strb	r3, [r7, #15]
 800bbf4:	e001      	b.n	800bbfa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800bbf6:	f7f5 fea9 	bl	800194c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bc00:	7bfa      	ldrb	r2, [r7, #15]
 800bc02:	4611      	mov	r1, r2
 800bc04:	4618      	mov	r0, r3
 800bc06:	f7fe feae 	bl	800a966 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bc10:	4618      	mov	r0, r3
 800bc12:	f7fe fe67 	bl	800a8e4 <USBD_LL_Reset>
}
 800bc16:	bf00      	nop
 800bc18:	3710      	adds	r7, #16
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bd80      	pop	{r7, pc}
	...

0800bc20 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b082      	sub	sp, #8
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f7fe fea9 	bl	800a986 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	687a      	ldr	r2, [r7, #4]
 800bc40:	6812      	ldr	r2, [r2, #0]
 800bc42:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bc46:	f043 0301 	orr.w	r3, r3, #1
 800bc4a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	6a1b      	ldr	r3, [r3, #32]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d005      	beq.n	800bc60 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bc54:	4b04      	ldr	r3, [pc, #16]	; (800bc68 <HAL_PCD_SuspendCallback+0x48>)
 800bc56:	691b      	ldr	r3, [r3, #16]
 800bc58:	4a03      	ldr	r2, [pc, #12]	; (800bc68 <HAL_PCD_SuspendCallback+0x48>)
 800bc5a:	f043 0306 	orr.w	r3, r3, #6
 800bc5e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bc60:	bf00      	nop
 800bc62:	3708      	adds	r7, #8
 800bc64:	46bd      	mov	sp, r7
 800bc66:	bd80      	pop	{r7, pc}
 800bc68:	e000ed00 	.word	0xe000ed00

0800bc6c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b082      	sub	sp, #8
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	f7fe fe98 	bl	800a9b0 <USBD_LL_Resume>
}
 800bc80:	bf00      	nop
 800bc82:	3708      	adds	r7, #8
 800bc84:	46bd      	mov	sp, r7
 800bc86:	bd80      	pop	{r7, pc}

0800bc88 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b082      	sub	sp, #8
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
 800bc90:	460b      	mov	r3, r1
 800bc92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bc9a:	78fa      	ldrb	r2, [r7, #3]
 800bc9c:	4611      	mov	r1, r2
 800bc9e:	4618      	mov	r0, r3
 800bca0:	f7fe febe 	bl	800aa20 <USBD_LL_IsoOUTIncomplete>
}
 800bca4:	bf00      	nop
 800bca6:	3708      	adds	r7, #8
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	bd80      	pop	{r7, pc}

0800bcac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b082      	sub	sp, #8
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
 800bcb4:	460b      	mov	r3, r1
 800bcb6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bcbe:	78fa      	ldrb	r2, [r7, #3]
 800bcc0:	4611      	mov	r1, r2
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f7fe fe9f 	bl	800aa06 <USBD_LL_IsoINIncomplete>
}
 800bcc8:	bf00      	nop
 800bcca:	3708      	adds	r7, #8
 800bccc:	46bd      	mov	sp, r7
 800bcce:	bd80      	pop	{r7, pc}

0800bcd0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b082      	sub	sp, #8
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bcde:	4618      	mov	r0, r3
 800bce0:	f7fe feab 	bl	800aa3a <USBD_LL_DevConnected>
}
 800bce4:	bf00      	nop
 800bce6:	3708      	adds	r7, #8
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bd80      	pop	{r7, pc}

0800bcec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b082      	sub	sp, #8
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	f7fe fea8 	bl	800aa50 <USBD_LL_DevDisconnected>
}
 800bd00:	bf00      	nop
 800bd02:	3708      	adds	r7, #8
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}

0800bd08 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b082      	sub	sp, #8
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	781b      	ldrb	r3, [r3, #0]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d13c      	bne.n	800bd92 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800bd18:	4a20      	ldr	r2, [pc, #128]	; (800bd9c <USBD_LL_Init+0x94>)
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	4a1e      	ldr	r2, [pc, #120]	; (800bd9c <USBD_LL_Init+0x94>)
 800bd24:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bd28:	4b1c      	ldr	r3, [pc, #112]	; (800bd9c <USBD_LL_Init+0x94>)
 800bd2a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800bd2e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800bd30:	4b1a      	ldr	r3, [pc, #104]	; (800bd9c <USBD_LL_Init+0x94>)
 800bd32:	2204      	movs	r2, #4
 800bd34:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800bd36:	4b19      	ldr	r3, [pc, #100]	; (800bd9c <USBD_LL_Init+0x94>)
 800bd38:	2202      	movs	r2, #2
 800bd3a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bd3c:	4b17      	ldr	r3, [pc, #92]	; (800bd9c <USBD_LL_Init+0x94>)
 800bd3e:	2200      	movs	r2, #0
 800bd40:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bd42:	4b16      	ldr	r3, [pc, #88]	; (800bd9c <USBD_LL_Init+0x94>)
 800bd44:	2202      	movs	r2, #2
 800bd46:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bd48:	4b14      	ldr	r3, [pc, #80]	; (800bd9c <USBD_LL_Init+0x94>)
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800bd4e:	4b13      	ldr	r3, [pc, #76]	; (800bd9c <USBD_LL_Init+0x94>)
 800bd50:	2200      	movs	r2, #0
 800bd52:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800bd54:	4b11      	ldr	r3, [pc, #68]	; (800bd9c <USBD_LL_Init+0x94>)
 800bd56:	2200      	movs	r2, #0
 800bd58:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800bd5a:	4b10      	ldr	r3, [pc, #64]	; (800bd9c <USBD_LL_Init+0x94>)
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800bd60:	4b0e      	ldr	r3, [pc, #56]	; (800bd9c <USBD_LL_Init+0x94>)
 800bd62:	2200      	movs	r2, #0
 800bd64:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800bd66:	480d      	ldr	r0, [pc, #52]	; (800bd9c <USBD_LL_Init+0x94>)
 800bd68:	f7f7 f966 	bl	8003038 <HAL_PCD_Init>
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d001      	beq.n	800bd76 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800bd72:	f7f5 fdeb 	bl	800194c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800bd76:	2180      	movs	r1, #128	; 0x80
 800bd78:	4808      	ldr	r0, [pc, #32]	; (800bd9c <USBD_LL_Init+0x94>)
 800bd7a:	f7f8 faca 	bl	8004312 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800bd7e:	2240      	movs	r2, #64	; 0x40
 800bd80:	2100      	movs	r1, #0
 800bd82:	4806      	ldr	r0, [pc, #24]	; (800bd9c <USBD_LL_Init+0x94>)
 800bd84:	f7f8 fa7e 	bl	8004284 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800bd88:	2280      	movs	r2, #128	; 0x80
 800bd8a:	2101      	movs	r1, #1
 800bd8c:	4803      	ldr	r0, [pc, #12]	; (800bd9c <USBD_LL_Init+0x94>)
 800bd8e:	f7f8 fa79 	bl	8004284 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800bd92:	2300      	movs	r3, #0
}
 800bd94:	4618      	mov	r0, r3
 800bd96:	3708      	adds	r7, #8
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	bd80      	pop	{r7, pc}
 800bd9c:	2000242c 	.word	0x2000242c

0800bda0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b084      	sub	sp, #16
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bda8:	2300      	movs	r3, #0
 800bdaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdac:	2300      	movs	r3, #0
 800bdae:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	f7f7 fa5b 	bl	8003272 <HAL_PCD_Start>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 800bdc0:	7bfb      	ldrb	r3, [r7, #15]
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	f000 f92e 	bl	800c024 <USBD_Get_USB_Status>
 800bdc8:	4603      	mov	r3, r0
 800bdca:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800bdcc:	7bbb      	ldrb	r3, [r7, #14]
}
 800bdce:	4618      	mov	r0, r3
 800bdd0:	3710      	adds	r7, #16
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}

0800bdd6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bdd6:	b580      	push	{r7, lr}
 800bdd8:	b084      	sub	sp, #16
 800bdda:	af00      	add	r7, sp, #0
 800bddc:	6078      	str	r0, [r7, #4]
 800bdde:	4608      	mov	r0, r1
 800bde0:	4611      	mov	r1, r2
 800bde2:	461a      	mov	r2, r3
 800bde4:	4603      	mov	r3, r0
 800bde6:	70fb      	strb	r3, [r7, #3]
 800bde8:	460b      	mov	r3, r1
 800bdea:	70bb      	strb	r3, [r7, #2]
 800bdec:	4613      	mov	r3, r2
 800bdee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800bdfe:	78bb      	ldrb	r3, [r7, #2]
 800be00:	883a      	ldrh	r2, [r7, #0]
 800be02:	78f9      	ldrb	r1, [r7, #3]
 800be04:	f7f7 fe30 	bl	8003a68 <HAL_PCD_EP_Open>
 800be08:	4603      	mov	r3, r0
 800be0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be0c:	7bfb      	ldrb	r3, [r7, #15]
 800be0e:	4618      	mov	r0, r3
 800be10:	f000 f908 	bl	800c024 <USBD_Get_USB_Status>
 800be14:	4603      	mov	r3, r0
 800be16:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800be18:	7bbb      	ldrb	r3, [r7, #14]
}
 800be1a:	4618      	mov	r0, r3
 800be1c:	3710      	adds	r7, #16
 800be1e:	46bd      	mov	sp, r7
 800be20:	bd80      	pop	{r7, pc}

0800be22 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be22:	b580      	push	{r7, lr}
 800be24:	b084      	sub	sp, #16
 800be26:	af00      	add	r7, sp, #0
 800be28:	6078      	str	r0, [r7, #4]
 800be2a:	460b      	mov	r3, r1
 800be2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be2e:	2300      	movs	r3, #0
 800be30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be32:	2300      	movs	r3, #0
 800be34:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800be3c:	78fa      	ldrb	r2, [r7, #3]
 800be3e:	4611      	mov	r1, r2
 800be40:	4618      	mov	r0, r3
 800be42:	f7f7 fe79 	bl	8003b38 <HAL_PCD_EP_Close>
 800be46:	4603      	mov	r3, r0
 800be48:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800be4a:	7bfb      	ldrb	r3, [r7, #15]
 800be4c:	4618      	mov	r0, r3
 800be4e:	f000 f8e9 	bl	800c024 <USBD_Get_USB_Status>
 800be52:	4603      	mov	r3, r0
 800be54:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800be56:	7bbb      	ldrb	r3, [r7, #14]
}
 800be58:	4618      	mov	r0, r3
 800be5a:	3710      	adds	r7, #16
 800be5c:	46bd      	mov	sp, r7
 800be5e:	bd80      	pop	{r7, pc}

0800be60 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b084      	sub	sp, #16
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
 800be68:	460b      	mov	r3, r1
 800be6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be6c:	2300      	movs	r3, #0
 800be6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be70:	2300      	movs	r3, #0
 800be72:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800be7a:	78fa      	ldrb	r2, [r7, #3]
 800be7c:	4611      	mov	r1, r2
 800be7e:	4618      	mov	r0, r3
 800be80:	f7f7 ff51 	bl	8003d26 <HAL_PCD_EP_SetStall>
 800be84:	4603      	mov	r3, r0
 800be86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be88:	7bfb      	ldrb	r3, [r7, #15]
 800be8a:	4618      	mov	r0, r3
 800be8c:	f000 f8ca 	bl	800c024 <USBD_Get_USB_Status>
 800be90:	4603      	mov	r3, r0
 800be92:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800be94:	7bbb      	ldrb	r3, [r7, #14]
}
 800be96:	4618      	mov	r0, r3
 800be98:	3710      	adds	r7, #16
 800be9a:	46bd      	mov	sp, r7
 800be9c:	bd80      	pop	{r7, pc}

0800be9e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be9e:	b580      	push	{r7, lr}
 800bea0:	b084      	sub	sp, #16
 800bea2:	af00      	add	r7, sp, #0
 800bea4:	6078      	str	r0, [r7, #4]
 800bea6:	460b      	mov	r3, r1
 800bea8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800beaa:	2300      	movs	r3, #0
 800beac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800beae:	2300      	movs	r3, #0
 800beb0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800beb8:	78fa      	ldrb	r2, [r7, #3]
 800beba:	4611      	mov	r1, r2
 800bebc:	4618      	mov	r0, r3
 800bebe:	f7f7 ff96 	bl	8003dee <HAL_PCD_EP_ClrStall>
 800bec2:	4603      	mov	r3, r0
 800bec4:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800bec6:	7bfb      	ldrb	r3, [r7, #15]
 800bec8:	4618      	mov	r0, r3
 800beca:	f000 f8ab 	bl	800c024 <USBD_Get_USB_Status>
 800bece:	4603      	mov	r3, r0
 800bed0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800bed2:	7bbb      	ldrb	r3, [r7, #14]
}
 800bed4:	4618      	mov	r0, r3
 800bed6:	3710      	adds	r7, #16
 800bed8:	46bd      	mov	sp, r7
 800beda:	bd80      	pop	{r7, pc}

0800bedc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bedc:	b480      	push	{r7}
 800bede:	b085      	sub	sp, #20
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
 800bee4:	460b      	mov	r3, r1
 800bee6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800beee:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800bef0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	da0b      	bge.n	800bf10 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800bef8:	78fb      	ldrb	r3, [r7, #3]
 800befa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800befe:	68f9      	ldr	r1, [r7, #12]
 800bf00:	4613      	mov	r3, r2
 800bf02:	00db      	lsls	r3, r3, #3
 800bf04:	1a9b      	subs	r3, r3, r2
 800bf06:	009b      	lsls	r3, r3, #2
 800bf08:	440b      	add	r3, r1
 800bf0a:	333e      	adds	r3, #62	; 0x3e
 800bf0c:	781b      	ldrb	r3, [r3, #0]
 800bf0e:	e00b      	b.n	800bf28 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800bf10:	78fb      	ldrb	r3, [r7, #3]
 800bf12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bf16:	68f9      	ldr	r1, [r7, #12]
 800bf18:	4613      	mov	r3, r2
 800bf1a:	00db      	lsls	r3, r3, #3
 800bf1c:	1a9b      	subs	r3, r3, r2
 800bf1e:	009b      	lsls	r3, r3, #2
 800bf20:	440b      	add	r3, r1
 800bf22:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bf26:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	3714      	adds	r7, #20
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf32:	4770      	bx	lr

0800bf34 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b084      	sub	sp, #16
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
 800bf3c:	460b      	mov	r3, r1
 800bf3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf40:	2300      	movs	r3, #0
 800bf42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf44:	2300      	movs	r3, #0
 800bf46:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bf4e:	78fa      	ldrb	r2, [r7, #3]
 800bf50:	4611      	mov	r1, r2
 800bf52:	4618      	mov	r0, r3
 800bf54:	f7f7 fd63 	bl	8003a1e <HAL_PCD_SetAddress>
 800bf58:	4603      	mov	r3, r0
 800bf5a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf5c:	7bfb      	ldrb	r3, [r7, #15]
 800bf5e:	4618      	mov	r0, r3
 800bf60:	f000 f860 	bl	800c024 <USBD_Get_USB_Status>
 800bf64:	4603      	mov	r3, r0
 800bf66:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800bf68:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	3710      	adds	r7, #16
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	bd80      	pop	{r7, pc}

0800bf72 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bf72:	b580      	push	{r7, lr}
 800bf74:	b086      	sub	sp, #24
 800bf76:	af00      	add	r7, sp, #0
 800bf78:	60f8      	str	r0, [r7, #12]
 800bf7a:	607a      	str	r2, [r7, #4]
 800bf7c:	461a      	mov	r2, r3
 800bf7e:	460b      	mov	r3, r1
 800bf80:	72fb      	strb	r3, [r7, #11]
 800bf82:	4613      	mov	r3, r2
 800bf84:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf86:	2300      	movs	r3, #0
 800bf88:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800bf94:	893b      	ldrh	r3, [r7, #8]
 800bf96:	7af9      	ldrb	r1, [r7, #11]
 800bf98:	687a      	ldr	r2, [r7, #4]
 800bf9a:	f7f7 fe7a 	bl	8003c92 <HAL_PCD_EP_Transmit>
 800bf9e:	4603      	mov	r3, r0
 800bfa0:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800bfa2:	7dfb      	ldrb	r3, [r7, #23]
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f000 f83d 	bl	800c024 <USBD_Get_USB_Status>
 800bfaa:	4603      	mov	r3, r0
 800bfac:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800bfae:	7dbb      	ldrb	r3, [r7, #22]
}
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	3718      	adds	r7, #24
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	bd80      	pop	{r7, pc}

0800bfb8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b086      	sub	sp, #24
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	60f8      	str	r0, [r7, #12]
 800bfc0:	607a      	str	r2, [r7, #4]
 800bfc2:	461a      	mov	r2, r3
 800bfc4:	460b      	mov	r3, r1
 800bfc6:	72fb      	strb	r3, [r7, #11]
 800bfc8:	4613      	mov	r3, r2
 800bfca:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfcc:	2300      	movs	r3, #0
 800bfce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800bfda:	893b      	ldrh	r3, [r7, #8]
 800bfdc:	7af9      	ldrb	r1, [r7, #11]
 800bfde:	687a      	ldr	r2, [r7, #4]
 800bfe0:	f7f7 fdf4 	bl	8003bcc <HAL_PCD_EP_Receive>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800bfe8:	7dfb      	ldrb	r3, [r7, #23]
 800bfea:	4618      	mov	r0, r3
 800bfec:	f000 f81a 	bl	800c024 <USBD_Get_USB_Status>
 800bff0:	4603      	mov	r3, r0
 800bff2:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 800bff4:	7dbb      	ldrb	r3, [r7, #22]
}
 800bff6:	4618      	mov	r0, r3
 800bff8:	3718      	adds	r7, #24
 800bffa:	46bd      	mov	sp, r7
 800bffc:	bd80      	pop	{r7, pc}

0800bffe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bffe:	b580      	push	{r7, lr}
 800c000:	b082      	sub	sp, #8
 800c002:	af00      	add	r7, sp, #0
 800c004:	6078      	str	r0, [r7, #4]
 800c006:	460b      	mov	r3, r1
 800c008:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800c010:	78fa      	ldrb	r2, [r7, #3]
 800c012:	4611      	mov	r1, r2
 800c014:	4618      	mov	r0, r3
 800c016:	f7f7 fe24 	bl	8003c62 <HAL_PCD_EP_GetRxCount>
 800c01a:	4603      	mov	r3, r0
}
 800c01c:	4618      	mov	r0, r3
 800c01e:	3708      	adds	r7, #8
 800c020:	46bd      	mov	sp, r7
 800c022:	bd80      	pop	{r7, pc}

0800c024 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c024:	b480      	push	{r7}
 800c026:	b085      	sub	sp, #20
 800c028:	af00      	add	r7, sp, #0
 800c02a:	4603      	mov	r3, r0
 800c02c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c02e:	2300      	movs	r3, #0
 800c030:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c032:	79fb      	ldrb	r3, [r7, #7]
 800c034:	2b03      	cmp	r3, #3
 800c036:	d817      	bhi.n	800c068 <USBD_Get_USB_Status+0x44>
 800c038:	a201      	add	r2, pc, #4	; (adr r2, 800c040 <USBD_Get_USB_Status+0x1c>)
 800c03a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c03e:	bf00      	nop
 800c040:	0800c051 	.word	0x0800c051
 800c044:	0800c057 	.word	0x0800c057
 800c048:	0800c05d 	.word	0x0800c05d
 800c04c:	0800c063 	.word	0x0800c063
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c050:	2300      	movs	r3, #0
 800c052:	73fb      	strb	r3, [r7, #15]
    break;
 800c054:	e00b      	b.n	800c06e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c056:	2302      	movs	r3, #2
 800c058:	73fb      	strb	r3, [r7, #15]
    break;
 800c05a:	e008      	b.n	800c06e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c05c:	2301      	movs	r3, #1
 800c05e:	73fb      	strb	r3, [r7, #15]
    break;
 800c060:	e005      	b.n	800c06e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c062:	2302      	movs	r3, #2
 800c064:	73fb      	strb	r3, [r7, #15]
    break;
 800c066:	e002      	b.n	800c06e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c068:	2302      	movs	r3, #2
 800c06a:	73fb      	strb	r3, [r7, #15]
    break;
 800c06c:	bf00      	nop
  }
  return usb_status;
 800c06e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c070:	4618      	mov	r0, r3
 800c072:	3714      	adds	r7, #20
 800c074:	46bd      	mov	sp, r7
 800c076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07a:	4770      	bx	lr

0800c07c <__libc_init_array>:
 800c07c:	b570      	push	{r4, r5, r6, lr}
 800c07e:	4e0d      	ldr	r6, [pc, #52]	; (800c0b4 <__libc_init_array+0x38>)
 800c080:	4c0d      	ldr	r4, [pc, #52]	; (800c0b8 <__libc_init_array+0x3c>)
 800c082:	1ba4      	subs	r4, r4, r6
 800c084:	10a4      	asrs	r4, r4, #2
 800c086:	2500      	movs	r5, #0
 800c088:	42a5      	cmp	r5, r4
 800c08a:	d109      	bne.n	800c0a0 <__libc_init_array+0x24>
 800c08c:	4e0b      	ldr	r6, [pc, #44]	; (800c0bc <__libc_init_array+0x40>)
 800c08e:	4c0c      	ldr	r4, [pc, #48]	; (800c0c0 <__libc_init_array+0x44>)
 800c090:	f003 fd70 	bl	800fb74 <_init>
 800c094:	1ba4      	subs	r4, r4, r6
 800c096:	10a4      	asrs	r4, r4, #2
 800c098:	2500      	movs	r5, #0
 800c09a:	42a5      	cmp	r5, r4
 800c09c:	d105      	bne.n	800c0aa <__libc_init_array+0x2e>
 800c09e:	bd70      	pop	{r4, r5, r6, pc}
 800c0a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c0a4:	4798      	blx	r3
 800c0a6:	3501      	adds	r5, #1
 800c0a8:	e7ee      	b.n	800c088 <__libc_init_array+0xc>
 800c0aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c0ae:	4798      	blx	r3
 800c0b0:	3501      	adds	r5, #1
 800c0b2:	e7f2      	b.n	800c09a <__libc_init_array+0x1e>
 800c0b4:	0800fec0 	.word	0x0800fec0
 800c0b8:	0800fec0 	.word	0x0800fec0
 800c0bc:	0800fec0 	.word	0x0800fec0
 800c0c0:	0800fec4 	.word	0x0800fec4

0800c0c4 <malloc>:
 800c0c4:	4b02      	ldr	r3, [pc, #8]	; (800c0d0 <malloc+0xc>)
 800c0c6:	4601      	mov	r1, r0
 800c0c8:	6818      	ldr	r0, [r3, #0]
 800c0ca:	f000 b86d 	b.w	800c1a8 <_malloc_r>
 800c0ce:	bf00      	nop
 800c0d0:	20000180 	.word	0x20000180

0800c0d4 <free>:
 800c0d4:	4b02      	ldr	r3, [pc, #8]	; (800c0e0 <free+0xc>)
 800c0d6:	4601      	mov	r1, r0
 800c0d8:	6818      	ldr	r0, [r3, #0]
 800c0da:	f000 b817 	b.w	800c10c <_free_r>
 800c0de:	bf00      	nop
 800c0e0:	20000180 	.word	0x20000180

0800c0e4 <memcpy>:
 800c0e4:	b510      	push	{r4, lr}
 800c0e6:	1e43      	subs	r3, r0, #1
 800c0e8:	440a      	add	r2, r1
 800c0ea:	4291      	cmp	r1, r2
 800c0ec:	d100      	bne.n	800c0f0 <memcpy+0xc>
 800c0ee:	bd10      	pop	{r4, pc}
 800c0f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c0f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c0f8:	e7f7      	b.n	800c0ea <memcpy+0x6>

0800c0fa <memset>:
 800c0fa:	4402      	add	r2, r0
 800c0fc:	4603      	mov	r3, r0
 800c0fe:	4293      	cmp	r3, r2
 800c100:	d100      	bne.n	800c104 <memset+0xa>
 800c102:	4770      	bx	lr
 800c104:	f803 1b01 	strb.w	r1, [r3], #1
 800c108:	e7f9      	b.n	800c0fe <memset+0x4>
	...

0800c10c <_free_r>:
 800c10c:	b538      	push	{r3, r4, r5, lr}
 800c10e:	4605      	mov	r5, r0
 800c110:	2900      	cmp	r1, #0
 800c112:	d045      	beq.n	800c1a0 <_free_r+0x94>
 800c114:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c118:	1f0c      	subs	r4, r1, #4
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	bfb8      	it	lt
 800c11e:	18e4      	addlt	r4, r4, r3
 800c120:	f002 ff52 	bl	800efc8 <__malloc_lock>
 800c124:	4a1f      	ldr	r2, [pc, #124]	; (800c1a4 <_free_r+0x98>)
 800c126:	6813      	ldr	r3, [r2, #0]
 800c128:	4610      	mov	r0, r2
 800c12a:	b933      	cbnz	r3, 800c13a <_free_r+0x2e>
 800c12c:	6063      	str	r3, [r4, #4]
 800c12e:	6014      	str	r4, [r2, #0]
 800c130:	4628      	mov	r0, r5
 800c132:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c136:	f002 bf48 	b.w	800efca <__malloc_unlock>
 800c13a:	42a3      	cmp	r3, r4
 800c13c:	d90c      	bls.n	800c158 <_free_r+0x4c>
 800c13e:	6821      	ldr	r1, [r4, #0]
 800c140:	1862      	adds	r2, r4, r1
 800c142:	4293      	cmp	r3, r2
 800c144:	bf04      	itt	eq
 800c146:	681a      	ldreq	r2, [r3, #0]
 800c148:	685b      	ldreq	r3, [r3, #4]
 800c14a:	6063      	str	r3, [r4, #4]
 800c14c:	bf04      	itt	eq
 800c14e:	1852      	addeq	r2, r2, r1
 800c150:	6022      	streq	r2, [r4, #0]
 800c152:	6004      	str	r4, [r0, #0]
 800c154:	e7ec      	b.n	800c130 <_free_r+0x24>
 800c156:	4613      	mov	r3, r2
 800c158:	685a      	ldr	r2, [r3, #4]
 800c15a:	b10a      	cbz	r2, 800c160 <_free_r+0x54>
 800c15c:	42a2      	cmp	r2, r4
 800c15e:	d9fa      	bls.n	800c156 <_free_r+0x4a>
 800c160:	6819      	ldr	r1, [r3, #0]
 800c162:	1858      	adds	r0, r3, r1
 800c164:	42a0      	cmp	r0, r4
 800c166:	d10b      	bne.n	800c180 <_free_r+0x74>
 800c168:	6820      	ldr	r0, [r4, #0]
 800c16a:	4401      	add	r1, r0
 800c16c:	1858      	adds	r0, r3, r1
 800c16e:	4282      	cmp	r2, r0
 800c170:	6019      	str	r1, [r3, #0]
 800c172:	d1dd      	bne.n	800c130 <_free_r+0x24>
 800c174:	6810      	ldr	r0, [r2, #0]
 800c176:	6852      	ldr	r2, [r2, #4]
 800c178:	605a      	str	r2, [r3, #4]
 800c17a:	4401      	add	r1, r0
 800c17c:	6019      	str	r1, [r3, #0]
 800c17e:	e7d7      	b.n	800c130 <_free_r+0x24>
 800c180:	d902      	bls.n	800c188 <_free_r+0x7c>
 800c182:	230c      	movs	r3, #12
 800c184:	602b      	str	r3, [r5, #0]
 800c186:	e7d3      	b.n	800c130 <_free_r+0x24>
 800c188:	6820      	ldr	r0, [r4, #0]
 800c18a:	1821      	adds	r1, r4, r0
 800c18c:	428a      	cmp	r2, r1
 800c18e:	bf04      	itt	eq
 800c190:	6811      	ldreq	r1, [r2, #0]
 800c192:	6852      	ldreq	r2, [r2, #4]
 800c194:	6062      	str	r2, [r4, #4]
 800c196:	bf04      	itt	eq
 800c198:	1809      	addeq	r1, r1, r0
 800c19a:	6021      	streq	r1, [r4, #0]
 800c19c:	605c      	str	r4, [r3, #4]
 800c19e:	e7c7      	b.n	800c130 <_free_r+0x24>
 800c1a0:	bd38      	pop	{r3, r4, r5, pc}
 800c1a2:	bf00      	nop
 800c1a4:	20000588 	.word	0x20000588

0800c1a8 <_malloc_r>:
 800c1a8:	b570      	push	{r4, r5, r6, lr}
 800c1aa:	1ccd      	adds	r5, r1, #3
 800c1ac:	f025 0503 	bic.w	r5, r5, #3
 800c1b0:	3508      	adds	r5, #8
 800c1b2:	2d0c      	cmp	r5, #12
 800c1b4:	bf38      	it	cc
 800c1b6:	250c      	movcc	r5, #12
 800c1b8:	2d00      	cmp	r5, #0
 800c1ba:	4606      	mov	r6, r0
 800c1bc:	db01      	blt.n	800c1c2 <_malloc_r+0x1a>
 800c1be:	42a9      	cmp	r1, r5
 800c1c0:	d903      	bls.n	800c1ca <_malloc_r+0x22>
 800c1c2:	230c      	movs	r3, #12
 800c1c4:	6033      	str	r3, [r6, #0]
 800c1c6:	2000      	movs	r0, #0
 800c1c8:	bd70      	pop	{r4, r5, r6, pc}
 800c1ca:	f002 fefd 	bl	800efc8 <__malloc_lock>
 800c1ce:	4a21      	ldr	r2, [pc, #132]	; (800c254 <_malloc_r+0xac>)
 800c1d0:	6814      	ldr	r4, [r2, #0]
 800c1d2:	4621      	mov	r1, r4
 800c1d4:	b991      	cbnz	r1, 800c1fc <_malloc_r+0x54>
 800c1d6:	4c20      	ldr	r4, [pc, #128]	; (800c258 <_malloc_r+0xb0>)
 800c1d8:	6823      	ldr	r3, [r4, #0]
 800c1da:	b91b      	cbnz	r3, 800c1e4 <_malloc_r+0x3c>
 800c1dc:	4630      	mov	r0, r6
 800c1de:	f000 fe7b 	bl	800ced8 <_sbrk_r>
 800c1e2:	6020      	str	r0, [r4, #0]
 800c1e4:	4629      	mov	r1, r5
 800c1e6:	4630      	mov	r0, r6
 800c1e8:	f000 fe76 	bl	800ced8 <_sbrk_r>
 800c1ec:	1c43      	adds	r3, r0, #1
 800c1ee:	d124      	bne.n	800c23a <_malloc_r+0x92>
 800c1f0:	230c      	movs	r3, #12
 800c1f2:	6033      	str	r3, [r6, #0]
 800c1f4:	4630      	mov	r0, r6
 800c1f6:	f002 fee8 	bl	800efca <__malloc_unlock>
 800c1fa:	e7e4      	b.n	800c1c6 <_malloc_r+0x1e>
 800c1fc:	680b      	ldr	r3, [r1, #0]
 800c1fe:	1b5b      	subs	r3, r3, r5
 800c200:	d418      	bmi.n	800c234 <_malloc_r+0x8c>
 800c202:	2b0b      	cmp	r3, #11
 800c204:	d90f      	bls.n	800c226 <_malloc_r+0x7e>
 800c206:	600b      	str	r3, [r1, #0]
 800c208:	50cd      	str	r5, [r1, r3]
 800c20a:	18cc      	adds	r4, r1, r3
 800c20c:	4630      	mov	r0, r6
 800c20e:	f002 fedc 	bl	800efca <__malloc_unlock>
 800c212:	f104 000b 	add.w	r0, r4, #11
 800c216:	1d23      	adds	r3, r4, #4
 800c218:	f020 0007 	bic.w	r0, r0, #7
 800c21c:	1ac3      	subs	r3, r0, r3
 800c21e:	d0d3      	beq.n	800c1c8 <_malloc_r+0x20>
 800c220:	425a      	negs	r2, r3
 800c222:	50e2      	str	r2, [r4, r3]
 800c224:	e7d0      	b.n	800c1c8 <_malloc_r+0x20>
 800c226:	428c      	cmp	r4, r1
 800c228:	684b      	ldr	r3, [r1, #4]
 800c22a:	bf16      	itet	ne
 800c22c:	6063      	strne	r3, [r4, #4]
 800c22e:	6013      	streq	r3, [r2, #0]
 800c230:	460c      	movne	r4, r1
 800c232:	e7eb      	b.n	800c20c <_malloc_r+0x64>
 800c234:	460c      	mov	r4, r1
 800c236:	6849      	ldr	r1, [r1, #4]
 800c238:	e7cc      	b.n	800c1d4 <_malloc_r+0x2c>
 800c23a:	1cc4      	adds	r4, r0, #3
 800c23c:	f024 0403 	bic.w	r4, r4, #3
 800c240:	42a0      	cmp	r0, r4
 800c242:	d005      	beq.n	800c250 <_malloc_r+0xa8>
 800c244:	1a21      	subs	r1, r4, r0
 800c246:	4630      	mov	r0, r6
 800c248:	f000 fe46 	bl	800ced8 <_sbrk_r>
 800c24c:	3001      	adds	r0, #1
 800c24e:	d0cf      	beq.n	800c1f0 <_malloc_r+0x48>
 800c250:	6025      	str	r5, [r4, #0]
 800c252:	e7db      	b.n	800c20c <_malloc_r+0x64>
 800c254:	20000588 	.word	0x20000588
 800c258:	2000058c 	.word	0x2000058c

0800c25c <__cvt>:
 800c25c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c260:	ec55 4b10 	vmov	r4, r5, d0
 800c264:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800c266:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c26a:	2d00      	cmp	r5, #0
 800c26c:	460e      	mov	r6, r1
 800c26e:	4691      	mov	r9, r2
 800c270:	4619      	mov	r1, r3
 800c272:	bfb8      	it	lt
 800c274:	4622      	movlt	r2, r4
 800c276:	462b      	mov	r3, r5
 800c278:	f027 0720 	bic.w	r7, r7, #32
 800c27c:	bfbb      	ittet	lt
 800c27e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c282:	461d      	movlt	r5, r3
 800c284:	2300      	movge	r3, #0
 800c286:	232d      	movlt	r3, #45	; 0x2d
 800c288:	bfb8      	it	lt
 800c28a:	4614      	movlt	r4, r2
 800c28c:	2f46      	cmp	r7, #70	; 0x46
 800c28e:	700b      	strb	r3, [r1, #0]
 800c290:	d004      	beq.n	800c29c <__cvt+0x40>
 800c292:	2f45      	cmp	r7, #69	; 0x45
 800c294:	d100      	bne.n	800c298 <__cvt+0x3c>
 800c296:	3601      	adds	r6, #1
 800c298:	2102      	movs	r1, #2
 800c29a:	e000      	b.n	800c29e <__cvt+0x42>
 800c29c:	2103      	movs	r1, #3
 800c29e:	ab03      	add	r3, sp, #12
 800c2a0:	9301      	str	r3, [sp, #4]
 800c2a2:	ab02      	add	r3, sp, #8
 800c2a4:	9300      	str	r3, [sp, #0]
 800c2a6:	4632      	mov	r2, r6
 800c2a8:	4653      	mov	r3, sl
 800c2aa:	ec45 4b10 	vmov	d0, r4, r5
 800c2ae:	f001 fd87 	bl	800ddc0 <_dtoa_r>
 800c2b2:	2f47      	cmp	r7, #71	; 0x47
 800c2b4:	4680      	mov	r8, r0
 800c2b6:	d102      	bne.n	800c2be <__cvt+0x62>
 800c2b8:	f019 0f01 	tst.w	r9, #1
 800c2bc:	d026      	beq.n	800c30c <__cvt+0xb0>
 800c2be:	2f46      	cmp	r7, #70	; 0x46
 800c2c0:	eb08 0906 	add.w	r9, r8, r6
 800c2c4:	d111      	bne.n	800c2ea <__cvt+0x8e>
 800c2c6:	f898 3000 	ldrb.w	r3, [r8]
 800c2ca:	2b30      	cmp	r3, #48	; 0x30
 800c2cc:	d10a      	bne.n	800c2e4 <__cvt+0x88>
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	4620      	mov	r0, r4
 800c2d4:	4629      	mov	r1, r5
 800c2d6:	f7f4 fbf7 	bl	8000ac8 <__aeabi_dcmpeq>
 800c2da:	b918      	cbnz	r0, 800c2e4 <__cvt+0x88>
 800c2dc:	f1c6 0601 	rsb	r6, r6, #1
 800c2e0:	f8ca 6000 	str.w	r6, [sl]
 800c2e4:	f8da 3000 	ldr.w	r3, [sl]
 800c2e8:	4499      	add	r9, r3
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	4620      	mov	r0, r4
 800c2f0:	4629      	mov	r1, r5
 800c2f2:	f7f4 fbe9 	bl	8000ac8 <__aeabi_dcmpeq>
 800c2f6:	b938      	cbnz	r0, 800c308 <__cvt+0xac>
 800c2f8:	2230      	movs	r2, #48	; 0x30
 800c2fa:	9b03      	ldr	r3, [sp, #12]
 800c2fc:	454b      	cmp	r3, r9
 800c2fe:	d205      	bcs.n	800c30c <__cvt+0xb0>
 800c300:	1c59      	adds	r1, r3, #1
 800c302:	9103      	str	r1, [sp, #12]
 800c304:	701a      	strb	r2, [r3, #0]
 800c306:	e7f8      	b.n	800c2fa <__cvt+0x9e>
 800c308:	f8cd 900c 	str.w	r9, [sp, #12]
 800c30c:	9b03      	ldr	r3, [sp, #12]
 800c30e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c310:	eba3 0308 	sub.w	r3, r3, r8
 800c314:	4640      	mov	r0, r8
 800c316:	6013      	str	r3, [r2, #0]
 800c318:	b004      	add	sp, #16
 800c31a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800c31e <__exponent>:
 800c31e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c320:	2900      	cmp	r1, #0
 800c322:	4604      	mov	r4, r0
 800c324:	bfba      	itte	lt
 800c326:	4249      	neglt	r1, r1
 800c328:	232d      	movlt	r3, #45	; 0x2d
 800c32a:	232b      	movge	r3, #43	; 0x2b
 800c32c:	2909      	cmp	r1, #9
 800c32e:	f804 2b02 	strb.w	r2, [r4], #2
 800c332:	7043      	strb	r3, [r0, #1]
 800c334:	dd20      	ble.n	800c378 <__exponent+0x5a>
 800c336:	f10d 0307 	add.w	r3, sp, #7
 800c33a:	461f      	mov	r7, r3
 800c33c:	260a      	movs	r6, #10
 800c33e:	fb91 f5f6 	sdiv	r5, r1, r6
 800c342:	fb06 1115 	mls	r1, r6, r5, r1
 800c346:	3130      	adds	r1, #48	; 0x30
 800c348:	2d09      	cmp	r5, #9
 800c34a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c34e:	f103 32ff 	add.w	r2, r3, #4294967295
 800c352:	4629      	mov	r1, r5
 800c354:	dc09      	bgt.n	800c36a <__exponent+0x4c>
 800c356:	3130      	adds	r1, #48	; 0x30
 800c358:	3b02      	subs	r3, #2
 800c35a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c35e:	42bb      	cmp	r3, r7
 800c360:	4622      	mov	r2, r4
 800c362:	d304      	bcc.n	800c36e <__exponent+0x50>
 800c364:	1a10      	subs	r0, r2, r0
 800c366:	b003      	add	sp, #12
 800c368:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c36a:	4613      	mov	r3, r2
 800c36c:	e7e7      	b.n	800c33e <__exponent+0x20>
 800c36e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c372:	f804 2b01 	strb.w	r2, [r4], #1
 800c376:	e7f2      	b.n	800c35e <__exponent+0x40>
 800c378:	2330      	movs	r3, #48	; 0x30
 800c37a:	4419      	add	r1, r3
 800c37c:	7083      	strb	r3, [r0, #2]
 800c37e:	1d02      	adds	r2, r0, #4
 800c380:	70c1      	strb	r1, [r0, #3]
 800c382:	e7ef      	b.n	800c364 <__exponent+0x46>

0800c384 <_printf_float>:
 800c384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c388:	b08d      	sub	sp, #52	; 0x34
 800c38a:	460c      	mov	r4, r1
 800c38c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800c390:	4616      	mov	r6, r2
 800c392:	461f      	mov	r7, r3
 800c394:	4605      	mov	r5, r0
 800c396:	f002 fdf7 	bl	800ef88 <_localeconv_r>
 800c39a:	6803      	ldr	r3, [r0, #0]
 800c39c:	9304      	str	r3, [sp, #16]
 800c39e:	4618      	mov	r0, r3
 800c3a0:	f7f3 ff16 	bl	80001d0 <strlen>
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	930a      	str	r3, [sp, #40]	; 0x28
 800c3a8:	f8d8 3000 	ldr.w	r3, [r8]
 800c3ac:	9005      	str	r0, [sp, #20]
 800c3ae:	3307      	adds	r3, #7
 800c3b0:	f023 0307 	bic.w	r3, r3, #7
 800c3b4:	f103 0208 	add.w	r2, r3, #8
 800c3b8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c3bc:	f8d4 b000 	ldr.w	fp, [r4]
 800c3c0:	f8c8 2000 	str.w	r2, [r8]
 800c3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3c8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c3cc:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c3d0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c3d4:	9307      	str	r3, [sp, #28]
 800c3d6:	f8cd 8018 	str.w	r8, [sp, #24]
 800c3da:	f04f 32ff 	mov.w	r2, #4294967295
 800c3de:	4ba7      	ldr	r3, [pc, #668]	; (800c67c <_printf_float+0x2f8>)
 800c3e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c3e4:	f7f4 fba2 	bl	8000b2c <__aeabi_dcmpun>
 800c3e8:	bb70      	cbnz	r0, 800c448 <_printf_float+0xc4>
 800c3ea:	f04f 32ff 	mov.w	r2, #4294967295
 800c3ee:	4ba3      	ldr	r3, [pc, #652]	; (800c67c <_printf_float+0x2f8>)
 800c3f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c3f4:	f7f4 fb7c 	bl	8000af0 <__aeabi_dcmple>
 800c3f8:	bb30      	cbnz	r0, 800c448 <_printf_float+0xc4>
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	4640      	mov	r0, r8
 800c400:	4649      	mov	r1, r9
 800c402:	f7f4 fb6b 	bl	8000adc <__aeabi_dcmplt>
 800c406:	b110      	cbz	r0, 800c40e <_printf_float+0x8a>
 800c408:	232d      	movs	r3, #45	; 0x2d
 800c40a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c40e:	4a9c      	ldr	r2, [pc, #624]	; (800c680 <_printf_float+0x2fc>)
 800c410:	4b9c      	ldr	r3, [pc, #624]	; (800c684 <_printf_float+0x300>)
 800c412:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800c416:	bf8c      	ite	hi
 800c418:	4690      	movhi	r8, r2
 800c41a:	4698      	movls	r8, r3
 800c41c:	2303      	movs	r3, #3
 800c41e:	f02b 0204 	bic.w	r2, fp, #4
 800c422:	6123      	str	r3, [r4, #16]
 800c424:	6022      	str	r2, [r4, #0]
 800c426:	f04f 0900 	mov.w	r9, #0
 800c42a:	9700      	str	r7, [sp, #0]
 800c42c:	4633      	mov	r3, r6
 800c42e:	aa0b      	add	r2, sp, #44	; 0x2c
 800c430:	4621      	mov	r1, r4
 800c432:	4628      	mov	r0, r5
 800c434:	f000 f9e6 	bl	800c804 <_printf_common>
 800c438:	3001      	adds	r0, #1
 800c43a:	f040 808d 	bne.w	800c558 <_printf_float+0x1d4>
 800c43e:	f04f 30ff 	mov.w	r0, #4294967295
 800c442:	b00d      	add	sp, #52	; 0x34
 800c444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c448:	4642      	mov	r2, r8
 800c44a:	464b      	mov	r3, r9
 800c44c:	4640      	mov	r0, r8
 800c44e:	4649      	mov	r1, r9
 800c450:	f7f4 fb6c 	bl	8000b2c <__aeabi_dcmpun>
 800c454:	b110      	cbz	r0, 800c45c <_printf_float+0xd8>
 800c456:	4a8c      	ldr	r2, [pc, #560]	; (800c688 <_printf_float+0x304>)
 800c458:	4b8c      	ldr	r3, [pc, #560]	; (800c68c <_printf_float+0x308>)
 800c45a:	e7da      	b.n	800c412 <_printf_float+0x8e>
 800c45c:	6861      	ldr	r1, [r4, #4]
 800c45e:	1c4b      	adds	r3, r1, #1
 800c460:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800c464:	a80a      	add	r0, sp, #40	; 0x28
 800c466:	d13e      	bne.n	800c4e6 <_printf_float+0x162>
 800c468:	2306      	movs	r3, #6
 800c46a:	6063      	str	r3, [r4, #4]
 800c46c:	2300      	movs	r3, #0
 800c46e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800c472:	ab09      	add	r3, sp, #36	; 0x24
 800c474:	9300      	str	r3, [sp, #0]
 800c476:	ec49 8b10 	vmov	d0, r8, r9
 800c47a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c47e:	6022      	str	r2, [r4, #0]
 800c480:	f8cd a004 	str.w	sl, [sp, #4]
 800c484:	6861      	ldr	r1, [r4, #4]
 800c486:	4628      	mov	r0, r5
 800c488:	f7ff fee8 	bl	800c25c <__cvt>
 800c48c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800c490:	2b47      	cmp	r3, #71	; 0x47
 800c492:	4680      	mov	r8, r0
 800c494:	d109      	bne.n	800c4aa <_printf_float+0x126>
 800c496:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c498:	1cd8      	adds	r0, r3, #3
 800c49a:	db02      	blt.n	800c4a2 <_printf_float+0x11e>
 800c49c:	6862      	ldr	r2, [r4, #4]
 800c49e:	4293      	cmp	r3, r2
 800c4a0:	dd47      	ble.n	800c532 <_printf_float+0x1ae>
 800c4a2:	f1aa 0a02 	sub.w	sl, sl, #2
 800c4a6:	fa5f fa8a 	uxtb.w	sl, sl
 800c4aa:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800c4ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c4b0:	d824      	bhi.n	800c4fc <_printf_float+0x178>
 800c4b2:	3901      	subs	r1, #1
 800c4b4:	4652      	mov	r2, sl
 800c4b6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c4ba:	9109      	str	r1, [sp, #36]	; 0x24
 800c4bc:	f7ff ff2f 	bl	800c31e <__exponent>
 800c4c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c4c2:	1813      	adds	r3, r2, r0
 800c4c4:	2a01      	cmp	r2, #1
 800c4c6:	4681      	mov	r9, r0
 800c4c8:	6123      	str	r3, [r4, #16]
 800c4ca:	dc02      	bgt.n	800c4d2 <_printf_float+0x14e>
 800c4cc:	6822      	ldr	r2, [r4, #0]
 800c4ce:	07d1      	lsls	r1, r2, #31
 800c4d0:	d501      	bpl.n	800c4d6 <_printf_float+0x152>
 800c4d2:	3301      	adds	r3, #1
 800c4d4:	6123      	str	r3, [r4, #16]
 800c4d6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d0a5      	beq.n	800c42a <_printf_float+0xa6>
 800c4de:	232d      	movs	r3, #45	; 0x2d
 800c4e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c4e4:	e7a1      	b.n	800c42a <_printf_float+0xa6>
 800c4e6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800c4ea:	f000 8177 	beq.w	800c7dc <_printf_float+0x458>
 800c4ee:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800c4f2:	d1bb      	bne.n	800c46c <_printf_float+0xe8>
 800c4f4:	2900      	cmp	r1, #0
 800c4f6:	d1b9      	bne.n	800c46c <_printf_float+0xe8>
 800c4f8:	2301      	movs	r3, #1
 800c4fa:	e7b6      	b.n	800c46a <_printf_float+0xe6>
 800c4fc:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800c500:	d119      	bne.n	800c536 <_printf_float+0x1b2>
 800c502:	2900      	cmp	r1, #0
 800c504:	6863      	ldr	r3, [r4, #4]
 800c506:	dd0c      	ble.n	800c522 <_printf_float+0x19e>
 800c508:	6121      	str	r1, [r4, #16]
 800c50a:	b913      	cbnz	r3, 800c512 <_printf_float+0x18e>
 800c50c:	6822      	ldr	r2, [r4, #0]
 800c50e:	07d2      	lsls	r2, r2, #31
 800c510:	d502      	bpl.n	800c518 <_printf_float+0x194>
 800c512:	3301      	adds	r3, #1
 800c514:	440b      	add	r3, r1
 800c516:	6123      	str	r3, [r4, #16]
 800c518:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c51a:	65a3      	str	r3, [r4, #88]	; 0x58
 800c51c:	f04f 0900 	mov.w	r9, #0
 800c520:	e7d9      	b.n	800c4d6 <_printf_float+0x152>
 800c522:	b913      	cbnz	r3, 800c52a <_printf_float+0x1a6>
 800c524:	6822      	ldr	r2, [r4, #0]
 800c526:	07d0      	lsls	r0, r2, #31
 800c528:	d501      	bpl.n	800c52e <_printf_float+0x1aa>
 800c52a:	3302      	adds	r3, #2
 800c52c:	e7f3      	b.n	800c516 <_printf_float+0x192>
 800c52e:	2301      	movs	r3, #1
 800c530:	e7f1      	b.n	800c516 <_printf_float+0x192>
 800c532:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800c536:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c53a:	4293      	cmp	r3, r2
 800c53c:	db05      	blt.n	800c54a <_printf_float+0x1c6>
 800c53e:	6822      	ldr	r2, [r4, #0]
 800c540:	6123      	str	r3, [r4, #16]
 800c542:	07d1      	lsls	r1, r2, #31
 800c544:	d5e8      	bpl.n	800c518 <_printf_float+0x194>
 800c546:	3301      	adds	r3, #1
 800c548:	e7e5      	b.n	800c516 <_printf_float+0x192>
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	bfd4      	ite	le
 800c54e:	f1c3 0302 	rsble	r3, r3, #2
 800c552:	2301      	movgt	r3, #1
 800c554:	4413      	add	r3, r2
 800c556:	e7de      	b.n	800c516 <_printf_float+0x192>
 800c558:	6823      	ldr	r3, [r4, #0]
 800c55a:	055a      	lsls	r2, r3, #21
 800c55c:	d407      	bmi.n	800c56e <_printf_float+0x1ea>
 800c55e:	6923      	ldr	r3, [r4, #16]
 800c560:	4642      	mov	r2, r8
 800c562:	4631      	mov	r1, r6
 800c564:	4628      	mov	r0, r5
 800c566:	47b8      	blx	r7
 800c568:	3001      	adds	r0, #1
 800c56a:	d12b      	bne.n	800c5c4 <_printf_float+0x240>
 800c56c:	e767      	b.n	800c43e <_printf_float+0xba>
 800c56e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800c572:	f240 80dc 	bls.w	800c72e <_printf_float+0x3aa>
 800c576:	2200      	movs	r2, #0
 800c578:	2300      	movs	r3, #0
 800c57a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c57e:	f7f4 faa3 	bl	8000ac8 <__aeabi_dcmpeq>
 800c582:	2800      	cmp	r0, #0
 800c584:	d033      	beq.n	800c5ee <_printf_float+0x26a>
 800c586:	2301      	movs	r3, #1
 800c588:	4a41      	ldr	r2, [pc, #260]	; (800c690 <_printf_float+0x30c>)
 800c58a:	4631      	mov	r1, r6
 800c58c:	4628      	mov	r0, r5
 800c58e:	47b8      	blx	r7
 800c590:	3001      	adds	r0, #1
 800c592:	f43f af54 	beq.w	800c43e <_printf_float+0xba>
 800c596:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c59a:	429a      	cmp	r2, r3
 800c59c:	db02      	blt.n	800c5a4 <_printf_float+0x220>
 800c59e:	6823      	ldr	r3, [r4, #0]
 800c5a0:	07d8      	lsls	r0, r3, #31
 800c5a2:	d50f      	bpl.n	800c5c4 <_printf_float+0x240>
 800c5a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c5a8:	4631      	mov	r1, r6
 800c5aa:	4628      	mov	r0, r5
 800c5ac:	47b8      	blx	r7
 800c5ae:	3001      	adds	r0, #1
 800c5b0:	f43f af45 	beq.w	800c43e <_printf_float+0xba>
 800c5b4:	f04f 0800 	mov.w	r8, #0
 800c5b8:	f104 091a 	add.w	r9, r4, #26
 800c5bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5be:	3b01      	subs	r3, #1
 800c5c0:	4543      	cmp	r3, r8
 800c5c2:	dc09      	bgt.n	800c5d8 <_printf_float+0x254>
 800c5c4:	6823      	ldr	r3, [r4, #0]
 800c5c6:	079b      	lsls	r3, r3, #30
 800c5c8:	f100 8103 	bmi.w	800c7d2 <_printf_float+0x44e>
 800c5cc:	68e0      	ldr	r0, [r4, #12]
 800c5ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c5d0:	4298      	cmp	r0, r3
 800c5d2:	bfb8      	it	lt
 800c5d4:	4618      	movlt	r0, r3
 800c5d6:	e734      	b.n	800c442 <_printf_float+0xbe>
 800c5d8:	2301      	movs	r3, #1
 800c5da:	464a      	mov	r2, r9
 800c5dc:	4631      	mov	r1, r6
 800c5de:	4628      	mov	r0, r5
 800c5e0:	47b8      	blx	r7
 800c5e2:	3001      	adds	r0, #1
 800c5e4:	f43f af2b 	beq.w	800c43e <_printf_float+0xba>
 800c5e8:	f108 0801 	add.w	r8, r8, #1
 800c5ec:	e7e6      	b.n	800c5bc <_printf_float+0x238>
 800c5ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	dc2b      	bgt.n	800c64c <_printf_float+0x2c8>
 800c5f4:	2301      	movs	r3, #1
 800c5f6:	4a26      	ldr	r2, [pc, #152]	; (800c690 <_printf_float+0x30c>)
 800c5f8:	4631      	mov	r1, r6
 800c5fa:	4628      	mov	r0, r5
 800c5fc:	47b8      	blx	r7
 800c5fe:	3001      	adds	r0, #1
 800c600:	f43f af1d 	beq.w	800c43e <_printf_float+0xba>
 800c604:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c606:	b923      	cbnz	r3, 800c612 <_printf_float+0x28e>
 800c608:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c60a:	b913      	cbnz	r3, 800c612 <_printf_float+0x28e>
 800c60c:	6823      	ldr	r3, [r4, #0]
 800c60e:	07d9      	lsls	r1, r3, #31
 800c610:	d5d8      	bpl.n	800c5c4 <_printf_float+0x240>
 800c612:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c616:	4631      	mov	r1, r6
 800c618:	4628      	mov	r0, r5
 800c61a:	47b8      	blx	r7
 800c61c:	3001      	adds	r0, #1
 800c61e:	f43f af0e 	beq.w	800c43e <_printf_float+0xba>
 800c622:	f04f 0900 	mov.w	r9, #0
 800c626:	f104 0a1a 	add.w	sl, r4, #26
 800c62a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c62c:	425b      	negs	r3, r3
 800c62e:	454b      	cmp	r3, r9
 800c630:	dc01      	bgt.n	800c636 <_printf_float+0x2b2>
 800c632:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c634:	e794      	b.n	800c560 <_printf_float+0x1dc>
 800c636:	2301      	movs	r3, #1
 800c638:	4652      	mov	r2, sl
 800c63a:	4631      	mov	r1, r6
 800c63c:	4628      	mov	r0, r5
 800c63e:	47b8      	blx	r7
 800c640:	3001      	adds	r0, #1
 800c642:	f43f aefc 	beq.w	800c43e <_printf_float+0xba>
 800c646:	f109 0901 	add.w	r9, r9, #1
 800c64a:	e7ee      	b.n	800c62a <_printf_float+0x2a6>
 800c64c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c64e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c650:	429a      	cmp	r2, r3
 800c652:	bfa8      	it	ge
 800c654:	461a      	movge	r2, r3
 800c656:	2a00      	cmp	r2, #0
 800c658:	4691      	mov	r9, r2
 800c65a:	dd07      	ble.n	800c66c <_printf_float+0x2e8>
 800c65c:	4613      	mov	r3, r2
 800c65e:	4631      	mov	r1, r6
 800c660:	4642      	mov	r2, r8
 800c662:	4628      	mov	r0, r5
 800c664:	47b8      	blx	r7
 800c666:	3001      	adds	r0, #1
 800c668:	f43f aee9 	beq.w	800c43e <_printf_float+0xba>
 800c66c:	f104 031a 	add.w	r3, r4, #26
 800c670:	f04f 0b00 	mov.w	fp, #0
 800c674:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c678:	9306      	str	r3, [sp, #24]
 800c67a:	e015      	b.n	800c6a8 <_printf_float+0x324>
 800c67c:	7fefffff 	.word	0x7fefffff
 800c680:	0800fc04 	.word	0x0800fc04
 800c684:	0800fc00 	.word	0x0800fc00
 800c688:	0800fc0c 	.word	0x0800fc0c
 800c68c:	0800fc08 	.word	0x0800fc08
 800c690:	0800fc10 	.word	0x0800fc10
 800c694:	2301      	movs	r3, #1
 800c696:	9a06      	ldr	r2, [sp, #24]
 800c698:	4631      	mov	r1, r6
 800c69a:	4628      	mov	r0, r5
 800c69c:	47b8      	blx	r7
 800c69e:	3001      	adds	r0, #1
 800c6a0:	f43f aecd 	beq.w	800c43e <_printf_float+0xba>
 800c6a4:	f10b 0b01 	add.w	fp, fp, #1
 800c6a8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800c6ac:	ebaa 0309 	sub.w	r3, sl, r9
 800c6b0:	455b      	cmp	r3, fp
 800c6b2:	dcef      	bgt.n	800c694 <_printf_float+0x310>
 800c6b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c6b8:	429a      	cmp	r2, r3
 800c6ba:	44d0      	add	r8, sl
 800c6bc:	db15      	blt.n	800c6ea <_printf_float+0x366>
 800c6be:	6823      	ldr	r3, [r4, #0]
 800c6c0:	07da      	lsls	r2, r3, #31
 800c6c2:	d412      	bmi.n	800c6ea <_printf_float+0x366>
 800c6c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c6c8:	eba3 020a 	sub.w	r2, r3, sl
 800c6cc:	eba3 0a01 	sub.w	sl, r3, r1
 800c6d0:	4592      	cmp	sl, r2
 800c6d2:	bfa8      	it	ge
 800c6d4:	4692      	movge	sl, r2
 800c6d6:	f1ba 0f00 	cmp.w	sl, #0
 800c6da:	dc0e      	bgt.n	800c6fa <_printf_float+0x376>
 800c6dc:	f04f 0800 	mov.w	r8, #0
 800c6e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c6e4:	f104 091a 	add.w	r9, r4, #26
 800c6e8:	e019      	b.n	800c71e <_printf_float+0x39a>
 800c6ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c6ee:	4631      	mov	r1, r6
 800c6f0:	4628      	mov	r0, r5
 800c6f2:	47b8      	blx	r7
 800c6f4:	3001      	adds	r0, #1
 800c6f6:	d1e5      	bne.n	800c6c4 <_printf_float+0x340>
 800c6f8:	e6a1      	b.n	800c43e <_printf_float+0xba>
 800c6fa:	4653      	mov	r3, sl
 800c6fc:	4642      	mov	r2, r8
 800c6fe:	4631      	mov	r1, r6
 800c700:	4628      	mov	r0, r5
 800c702:	47b8      	blx	r7
 800c704:	3001      	adds	r0, #1
 800c706:	d1e9      	bne.n	800c6dc <_printf_float+0x358>
 800c708:	e699      	b.n	800c43e <_printf_float+0xba>
 800c70a:	2301      	movs	r3, #1
 800c70c:	464a      	mov	r2, r9
 800c70e:	4631      	mov	r1, r6
 800c710:	4628      	mov	r0, r5
 800c712:	47b8      	blx	r7
 800c714:	3001      	adds	r0, #1
 800c716:	f43f ae92 	beq.w	800c43e <_printf_float+0xba>
 800c71a:	f108 0801 	add.w	r8, r8, #1
 800c71e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c722:	1a9b      	subs	r3, r3, r2
 800c724:	eba3 030a 	sub.w	r3, r3, sl
 800c728:	4543      	cmp	r3, r8
 800c72a:	dcee      	bgt.n	800c70a <_printf_float+0x386>
 800c72c:	e74a      	b.n	800c5c4 <_printf_float+0x240>
 800c72e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c730:	2a01      	cmp	r2, #1
 800c732:	dc01      	bgt.n	800c738 <_printf_float+0x3b4>
 800c734:	07db      	lsls	r3, r3, #31
 800c736:	d53a      	bpl.n	800c7ae <_printf_float+0x42a>
 800c738:	2301      	movs	r3, #1
 800c73a:	4642      	mov	r2, r8
 800c73c:	4631      	mov	r1, r6
 800c73e:	4628      	mov	r0, r5
 800c740:	47b8      	blx	r7
 800c742:	3001      	adds	r0, #1
 800c744:	f43f ae7b 	beq.w	800c43e <_printf_float+0xba>
 800c748:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c74c:	4631      	mov	r1, r6
 800c74e:	4628      	mov	r0, r5
 800c750:	47b8      	blx	r7
 800c752:	3001      	adds	r0, #1
 800c754:	f108 0801 	add.w	r8, r8, #1
 800c758:	f43f ae71 	beq.w	800c43e <_printf_float+0xba>
 800c75c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c75e:	2200      	movs	r2, #0
 800c760:	f103 3aff 	add.w	sl, r3, #4294967295
 800c764:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c768:	2300      	movs	r3, #0
 800c76a:	f7f4 f9ad 	bl	8000ac8 <__aeabi_dcmpeq>
 800c76e:	b9c8      	cbnz	r0, 800c7a4 <_printf_float+0x420>
 800c770:	4653      	mov	r3, sl
 800c772:	4642      	mov	r2, r8
 800c774:	4631      	mov	r1, r6
 800c776:	4628      	mov	r0, r5
 800c778:	47b8      	blx	r7
 800c77a:	3001      	adds	r0, #1
 800c77c:	d10e      	bne.n	800c79c <_printf_float+0x418>
 800c77e:	e65e      	b.n	800c43e <_printf_float+0xba>
 800c780:	2301      	movs	r3, #1
 800c782:	4652      	mov	r2, sl
 800c784:	4631      	mov	r1, r6
 800c786:	4628      	mov	r0, r5
 800c788:	47b8      	blx	r7
 800c78a:	3001      	adds	r0, #1
 800c78c:	f43f ae57 	beq.w	800c43e <_printf_float+0xba>
 800c790:	f108 0801 	add.w	r8, r8, #1
 800c794:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c796:	3b01      	subs	r3, #1
 800c798:	4543      	cmp	r3, r8
 800c79a:	dcf1      	bgt.n	800c780 <_printf_float+0x3fc>
 800c79c:	464b      	mov	r3, r9
 800c79e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c7a2:	e6de      	b.n	800c562 <_printf_float+0x1de>
 800c7a4:	f04f 0800 	mov.w	r8, #0
 800c7a8:	f104 0a1a 	add.w	sl, r4, #26
 800c7ac:	e7f2      	b.n	800c794 <_printf_float+0x410>
 800c7ae:	2301      	movs	r3, #1
 800c7b0:	e7df      	b.n	800c772 <_printf_float+0x3ee>
 800c7b2:	2301      	movs	r3, #1
 800c7b4:	464a      	mov	r2, r9
 800c7b6:	4631      	mov	r1, r6
 800c7b8:	4628      	mov	r0, r5
 800c7ba:	47b8      	blx	r7
 800c7bc:	3001      	adds	r0, #1
 800c7be:	f43f ae3e 	beq.w	800c43e <_printf_float+0xba>
 800c7c2:	f108 0801 	add.w	r8, r8, #1
 800c7c6:	68e3      	ldr	r3, [r4, #12]
 800c7c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c7ca:	1a9b      	subs	r3, r3, r2
 800c7cc:	4543      	cmp	r3, r8
 800c7ce:	dcf0      	bgt.n	800c7b2 <_printf_float+0x42e>
 800c7d0:	e6fc      	b.n	800c5cc <_printf_float+0x248>
 800c7d2:	f04f 0800 	mov.w	r8, #0
 800c7d6:	f104 0919 	add.w	r9, r4, #25
 800c7da:	e7f4      	b.n	800c7c6 <_printf_float+0x442>
 800c7dc:	2900      	cmp	r1, #0
 800c7de:	f43f ae8b 	beq.w	800c4f8 <_printf_float+0x174>
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800c7e8:	ab09      	add	r3, sp, #36	; 0x24
 800c7ea:	9300      	str	r3, [sp, #0]
 800c7ec:	ec49 8b10 	vmov	d0, r8, r9
 800c7f0:	6022      	str	r2, [r4, #0]
 800c7f2:	f8cd a004 	str.w	sl, [sp, #4]
 800c7f6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c7fa:	4628      	mov	r0, r5
 800c7fc:	f7ff fd2e 	bl	800c25c <__cvt>
 800c800:	4680      	mov	r8, r0
 800c802:	e648      	b.n	800c496 <_printf_float+0x112>

0800c804 <_printf_common>:
 800c804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c808:	4691      	mov	r9, r2
 800c80a:	461f      	mov	r7, r3
 800c80c:	688a      	ldr	r2, [r1, #8]
 800c80e:	690b      	ldr	r3, [r1, #16]
 800c810:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c814:	4293      	cmp	r3, r2
 800c816:	bfb8      	it	lt
 800c818:	4613      	movlt	r3, r2
 800c81a:	f8c9 3000 	str.w	r3, [r9]
 800c81e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c822:	4606      	mov	r6, r0
 800c824:	460c      	mov	r4, r1
 800c826:	b112      	cbz	r2, 800c82e <_printf_common+0x2a>
 800c828:	3301      	adds	r3, #1
 800c82a:	f8c9 3000 	str.w	r3, [r9]
 800c82e:	6823      	ldr	r3, [r4, #0]
 800c830:	0699      	lsls	r1, r3, #26
 800c832:	bf42      	ittt	mi
 800c834:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c838:	3302      	addmi	r3, #2
 800c83a:	f8c9 3000 	strmi.w	r3, [r9]
 800c83e:	6825      	ldr	r5, [r4, #0]
 800c840:	f015 0506 	ands.w	r5, r5, #6
 800c844:	d107      	bne.n	800c856 <_printf_common+0x52>
 800c846:	f104 0a19 	add.w	sl, r4, #25
 800c84a:	68e3      	ldr	r3, [r4, #12]
 800c84c:	f8d9 2000 	ldr.w	r2, [r9]
 800c850:	1a9b      	subs	r3, r3, r2
 800c852:	42ab      	cmp	r3, r5
 800c854:	dc28      	bgt.n	800c8a8 <_printf_common+0xa4>
 800c856:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c85a:	6822      	ldr	r2, [r4, #0]
 800c85c:	3300      	adds	r3, #0
 800c85e:	bf18      	it	ne
 800c860:	2301      	movne	r3, #1
 800c862:	0692      	lsls	r2, r2, #26
 800c864:	d42d      	bmi.n	800c8c2 <_printf_common+0xbe>
 800c866:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c86a:	4639      	mov	r1, r7
 800c86c:	4630      	mov	r0, r6
 800c86e:	47c0      	blx	r8
 800c870:	3001      	adds	r0, #1
 800c872:	d020      	beq.n	800c8b6 <_printf_common+0xb2>
 800c874:	6823      	ldr	r3, [r4, #0]
 800c876:	68e5      	ldr	r5, [r4, #12]
 800c878:	f8d9 2000 	ldr.w	r2, [r9]
 800c87c:	f003 0306 	and.w	r3, r3, #6
 800c880:	2b04      	cmp	r3, #4
 800c882:	bf08      	it	eq
 800c884:	1aad      	subeq	r5, r5, r2
 800c886:	68a3      	ldr	r3, [r4, #8]
 800c888:	6922      	ldr	r2, [r4, #16]
 800c88a:	bf0c      	ite	eq
 800c88c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c890:	2500      	movne	r5, #0
 800c892:	4293      	cmp	r3, r2
 800c894:	bfc4      	itt	gt
 800c896:	1a9b      	subgt	r3, r3, r2
 800c898:	18ed      	addgt	r5, r5, r3
 800c89a:	f04f 0900 	mov.w	r9, #0
 800c89e:	341a      	adds	r4, #26
 800c8a0:	454d      	cmp	r5, r9
 800c8a2:	d11a      	bne.n	800c8da <_printf_common+0xd6>
 800c8a4:	2000      	movs	r0, #0
 800c8a6:	e008      	b.n	800c8ba <_printf_common+0xb6>
 800c8a8:	2301      	movs	r3, #1
 800c8aa:	4652      	mov	r2, sl
 800c8ac:	4639      	mov	r1, r7
 800c8ae:	4630      	mov	r0, r6
 800c8b0:	47c0      	blx	r8
 800c8b2:	3001      	adds	r0, #1
 800c8b4:	d103      	bne.n	800c8be <_printf_common+0xba>
 800c8b6:	f04f 30ff 	mov.w	r0, #4294967295
 800c8ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8be:	3501      	adds	r5, #1
 800c8c0:	e7c3      	b.n	800c84a <_printf_common+0x46>
 800c8c2:	18e1      	adds	r1, r4, r3
 800c8c4:	1c5a      	adds	r2, r3, #1
 800c8c6:	2030      	movs	r0, #48	; 0x30
 800c8c8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c8cc:	4422      	add	r2, r4
 800c8ce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c8d2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c8d6:	3302      	adds	r3, #2
 800c8d8:	e7c5      	b.n	800c866 <_printf_common+0x62>
 800c8da:	2301      	movs	r3, #1
 800c8dc:	4622      	mov	r2, r4
 800c8de:	4639      	mov	r1, r7
 800c8e0:	4630      	mov	r0, r6
 800c8e2:	47c0      	blx	r8
 800c8e4:	3001      	adds	r0, #1
 800c8e6:	d0e6      	beq.n	800c8b6 <_printf_common+0xb2>
 800c8e8:	f109 0901 	add.w	r9, r9, #1
 800c8ec:	e7d8      	b.n	800c8a0 <_printf_common+0x9c>
	...

0800c8f0 <_printf_i>:
 800c8f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c8f4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c8f8:	460c      	mov	r4, r1
 800c8fa:	7e09      	ldrb	r1, [r1, #24]
 800c8fc:	b085      	sub	sp, #20
 800c8fe:	296e      	cmp	r1, #110	; 0x6e
 800c900:	4617      	mov	r7, r2
 800c902:	4606      	mov	r6, r0
 800c904:	4698      	mov	r8, r3
 800c906:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c908:	f000 80b3 	beq.w	800ca72 <_printf_i+0x182>
 800c90c:	d822      	bhi.n	800c954 <_printf_i+0x64>
 800c90e:	2963      	cmp	r1, #99	; 0x63
 800c910:	d036      	beq.n	800c980 <_printf_i+0x90>
 800c912:	d80a      	bhi.n	800c92a <_printf_i+0x3a>
 800c914:	2900      	cmp	r1, #0
 800c916:	f000 80b9 	beq.w	800ca8c <_printf_i+0x19c>
 800c91a:	2958      	cmp	r1, #88	; 0x58
 800c91c:	f000 8083 	beq.w	800ca26 <_printf_i+0x136>
 800c920:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c924:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c928:	e032      	b.n	800c990 <_printf_i+0xa0>
 800c92a:	2964      	cmp	r1, #100	; 0x64
 800c92c:	d001      	beq.n	800c932 <_printf_i+0x42>
 800c92e:	2969      	cmp	r1, #105	; 0x69
 800c930:	d1f6      	bne.n	800c920 <_printf_i+0x30>
 800c932:	6820      	ldr	r0, [r4, #0]
 800c934:	6813      	ldr	r3, [r2, #0]
 800c936:	0605      	lsls	r5, r0, #24
 800c938:	f103 0104 	add.w	r1, r3, #4
 800c93c:	d52a      	bpl.n	800c994 <_printf_i+0xa4>
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	6011      	str	r1, [r2, #0]
 800c942:	2b00      	cmp	r3, #0
 800c944:	da03      	bge.n	800c94e <_printf_i+0x5e>
 800c946:	222d      	movs	r2, #45	; 0x2d
 800c948:	425b      	negs	r3, r3
 800c94a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c94e:	486f      	ldr	r0, [pc, #444]	; (800cb0c <_printf_i+0x21c>)
 800c950:	220a      	movs	r2, #10
 800c952:	e039      	b.n	800c9c8 <_printf_i+0xd8>
 800c954:	2973      	cmp	r1, #115	; 0x73
 800c956:	f000 809d 	beq.w	800ca94 <_printf_i+0x1a4>
 800c95a:	d808      	bhi.n	800c96e <_printf_i+0x7e>
 800c95c:	296f      	cmp	r1, #111	; 0x6f
 800c95e:	d020      	beq.n	800c9a2 <_printf_i+0xb2>
 800c960:	2970      	cmp	r1, #112	; 0x70
 800c962:	d1dd      	bne.n	800c920 <_printf_i+0x30>
 800c964:	6823      	ldr	r3, [r4, #0]
 800c966:	f043 0320 	orr.w	r3, r3, #32
 800c96a:	6023      	str	r3, [r4, #0]
 800c96c:	e003      	b.n	800c976 <_printf_i+0x86>
 800c96e:	2975      	cmp	r1, #117	; 0x75
 800c970:	d017      	beq.n	800c9a2 <_printf_i+0xb2>
 800c972:	2978      	cmp	r1, #120	; 0x78
 800c974:	d1d4      	bne.n	800c920 <_printf_i+0x30>
 800c976:	2378      	movs	r3, #120	; 0x78
 800c978:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c97c:	4864      	ldr	r0, [pc, #400]	; (800cb10 <_printf_i+0x220>)
 800c97e:	e055      	b.n	800ca2c <_printf_i+0x13c>
 800c980:	6813      	ldr	r3, [r2, #0]
 800c982:	1d19      	adds	r1, r3, #4
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	6011      	str	r1, [r2, #0]
 800c988:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c98c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c990:	2301      	movs	r3, #1
 800c992:	e08c      	b.n	800caae <_printf_i+0x1be>
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	6011      	str	r1, [r2, #0]
 800c998:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c99c:	bf18      	it	ne
 800c99e:	b21b      	sxthne	r3, r3
 800c9a0:	e7cf      	b.n	800c942 <_printf_i+0x52>
 800c9a2:	6813      	ldr	r3, [r2, #0]
 800c9a4:	6825      	ldr	r5, [r4, #0]
 800c9a6:	1d18      	adds	r0, r3, #4
 800c9a8:	6010      	str	r0, [r2, #0]
 800c9aa:	0628      	lsls	r0, r5, #24
 800c9ac:	d501      	bpl.n	800c9b2 <_printf_i+0xc2>
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	e002      	b.n	800c9b8 <_printf_i+0xc8>
 800c9b2:	0668      	lsls	r0, r5, #25
 800c9b4:	d5fb      	bpl.n	800c9ae <_printf_i+0xbe>
 800c9b6:	881b      	ldrh	r3, [r3, #0]
 800c9b8:	4854      	ldr	r0, [pc, #336]	; (800cb0c <_printf_i+0x21c>)
 800c9ba:	296f      	cmp	r1, #111	; 0x6f
 800c9bc:	bf14      	ite	ne
 800c9be:	220a      	movne	r2, #10
 800c9c0:	2208      	moveq	r2, #8
 800c9c2:	2100      	movs	r1, #0
 800c9c4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c9c8:	6865      	ldr	r5, [r4, #4]
 800c9ca:	60a5      	str	r5, [r4, #8]
 800c9cc:	2d00      	cmp	r5, #0
 800c9ce:	f2c0 8095 	blt.w	800cafc <_printf_i+0x20c>
 800c9d2:	6821      	ldr	r1, [r4, #0]
 800c9d4:	f021 0104 	bic.w	r1, r1, #4
 800c9d8:	6021      	str	r1, [r4, #0]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d13d      	bne.n	800ca5a <_printf_i+0x16a>
 800c9de:	2d00      	cmp	r5, #0
 800c9e0:	f040 808e 	bne.w	800cb00 <_printf_i+0x210>
 800c9e4:	4665      	mov	r5, ip
 800c9e6:	2a08      	cmp	r2, #8
 800c9e8:	d10b      	bne.n	800ca02 <_printf_i+0x112>
 800c9ea:	6823      	ldr	r3, [r4, #0]
 800c9ec:	07db      	lsls	r3, r3, #31
 800c9ee:	d508      	bpl.n	800ca02 <_printf_i+0x112>
 800c9f0:	6923      	ldr	r3, [r4, #16]
 800c9f2:	6862      	ldr	r2, [r4, #4]
 800c9f4:	429a      	cmp	r2, r3
 800c9f6:	bfde      	ittt	le
 800c9f8:	2330      	movle	r3, #48	; 0x30
 800c9fa:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c9fe:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ca02:	ebac 0305 	sub.w	r3, ip, r5
 800ca06:	6123      	str	r3, [r4, #16]
 800ca08:	f8cd 8000 	str.w	r8, [sp]
 800ca0c:	463b      	mov	r3, r7
 800ca0e:	aa03      	add	r2, sp, #12
 800ca10:	4621      	mov	r1, r4
 800ca12:	4630      	mov	r0, r6
 800ca14:	f7ff fef6 	bl	800c804 <_printf_common>
 800ca18:	3001      	adds	r0, #1
 800ca1a:	d14d      	bne.n	800cab8 <_printf_i+0x1c8>
 800ca1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ca20:	b005      	add	sp, #20
 800ca22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca26:	4839      	ldr	r0, [pc, #228]	; (800cb0c <_printf_i+0x21c>)
 800ca28:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800ca2c:	6813      	ldr	r3, [r2, #0]
 800ca2e:	6821      	ldr	r1, [r4, #0]
 800ca30:	1d1d      	adds	r5, r3, #4
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	6015      	str	r5, [r2, #0]
 800ca36:	060a      	lsls	r2, r1, #24
 800ca38:	d50b      	bpl.n	800ca52 <_printf_i+0x162>
 800ca3a:	07ca      	lsls	r2, r1, #31
 800ca3c:	bf44      	itt	mi
 800ca3e:	f041 0120 	orrmi.w	r1, r1, #32
 800ca42:	6021      	strmi	r1, [r4, #0]
 800ca44:	b91b      	cbnz	r3, 800ca4e <_printf_i+0x15e>
 800ca46:	6822      	ldr	r2, [r4, #0]
 800ca48:	f022 0220 	bic.w	r2, r2, #32
 800ca4c:	6022      	str	r2, [r4, #0]
 800ca4e:	2210      	movs	r2, #16
 800ca50:	e7b7      	b.n	800c9c2 <_printf_i+0xd2>
 800ca52:	064d      	lsls	r5, r1, #25
 800ca54:	bf48      	it	mi
 800ca56:	b29b      	uxthmi	r3, r3
 800ca58:	e7ef      	b.n	800ca3a <_printf_i+0x14a>
 800ca5a:	4665      	mov	r5, ip
 800ca5c:	fbb3 f1f2 	udiv	r1, r3, r2
 800ca60:	fb02 3311 	mls	r3, r2, r1, r3
 800ca64:	5cc3      	ldrb	r3, [r0, r3]
 800ca66:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800ca6a:	460b      	mov	r3, r1
 800ca6c:	2900      	cmp	r1, #0
 800ca6e:	d1f5      	bne.n	800ca5c <_printf_i+0x16c>
 800ca70:	e7b9      	b.n	800c9e6 <_printf_i+0xf6>
 800ca72:	6813      	ldr	r3, [r2, #0]
 800ca74:	6825      	ldr	r5, [r4, #0]
 800ca76:	6961      	ldr	r1, [r4, #20]
 800ca78:	1d18      	adds	r0, r3, #4
 800ca7a:	6010      	str	r0, [r2, #0]
 800ca7c:	0628      	lsls	r0, r5, #24
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	d501      	bpl.n	800ca86 <_printf_i+0x196>
 800ca82:	6019      	str	r1, [r3, #0]
 800ca84:	e002      	b.n	800ca8c <_printf_i+0x19c>
 800ca86:	066a      	lsls	r2, r5, #25
 800ca88:	d5fb      	bpl.n	800ca82 <_printf_i+0x192>
 800ca8a:	8019      	strh	r1, [r3, #0]
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	6123      	str	r3, [r4, #16]
 800ca90:	4665      	mov	r5, ip
 800ca92:	e7b9      	b.n	800ca08 <_printf_i+0x118>
 800ca94:	6813      	ldr	r3, [r2, #0]
 800ca96:	1d19      	adds	r1, r3, #4
 800ca98:	6011      	str	r1, [r2, #0]
 800ca9a:	681d      	ldr	r5, [r3, #0]
 800ca9c:	6862      	ldr	r2, [r4, #4]
 800ca9e:	2100      	movs	r1, #0
 800caa0:	4628      	mov	r0, r5
 800caa2:	f7f3 fb9d 	bl	80001e0 <memchr>
 800caa6:	b108      	cbz	r0, 800caac <_printf_i+0x1bc>
 800caa8:	1b40      	subs	r0, r0, r5
 800caaa:	6060      	str	r0, [r4, #4]
 800caac:	6863      	ldr	r3, [r4, #4]
 800caae:	6123      	str	r3, [r4, #16]
 800cab0:	2300      	movs	r3, #0
 800cab2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cab6:	e7a7      	b.n	800ca08 <_printf_i+0x118>
 800cab8:	6923      	ldr	r3, [r4, #16]
 800caba:	462a      	mov	r2, r5
 800cabc:	4639      	mov	r1, r7
 800cabe:	4630      	mov	r0, r6
 800cac0:	47c0      	blx	r8
 800cac2:	3001      	adds	r0, #1
 800cac4:	d0aa      	beq.n	800ca1c <_printf_i+0x12c>
 800cac6:	6823      	ldr	r3, [r4, #0]
 800cac8:	079b      	lsls	r3, r3, #30
 800caca:	d413      	bmi.n	800caf4 <_printf_i+0x204>
 800cacc:	68e0      	ldr	r0, [r4, #12]
 800cace:	9b03      	ldr	r3, [sp, #12]
 800cad0:	4298      	cmp	r0, r3
 800cad2:	bfb8      	it	lt
 800cad4:	4618      	movlt	r0, r3
 800cad6:	e7a3      	b.n	800ca20 <_printf_i+0x130>
 800cad8:	2301      	movs	r3, #1
 800cada:	464a      	mov	r2, r9
 800cadc:	4639      	mov	r1, r7
 800cade:	4630      	mov	r0, r6
 800cae0:	47c0      	blx	r8
 800cae2:	3001      	adds	r0, #1
 800cae4:	d09a      	beq.n	800ca1c <_printf_i+0x12c>
 800cae6:	3501      	adds	r5, #1
 800cae8:	68e3      	ldr	r3, [r4, #12]
 800caea:	9a03      	ldr	r2, [sp, #12]
 800caec:	1a9b      	subs	r3, r3, r2
 800caee:	42ab      	cmp	r3, r5
 800caf0:	dcf2      	bgt.n	800cad8 <_printf_i+0x1e8>
 800caf2:	e7eb      	b.n	800cacc <_printf_i+0x1dc>
 800caf4:	2500      	movs	r5, #0
 800caf6:	f104 0919 	add.w	r9, r4, #25
 800cafa:	e7f5      	b.n	800cae8 <_printf_i+0x1f8>
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d1ac      	bne.n	800ca5a <_printf_i+0x16a>
 800cb00:	7803      	ldrb	r3, [r0, #0]
 800cb02:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cb06:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb0a:	e76c      	b.n	800c9e6 <_printf_i+0xf6>
 800cb0c:	0800fc12 	.word	0x0800fc12
 800cb10:	0800fc23 	.word	0x0800fc23

0800cb14 <_scanf_float>:
 800cb14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb18:	469a      	mov	sl, r3
 800cb1a:	688b      	ldr	r3, [r1, #8]
 800cb1c:	4616      	mov	r6, r2
 800cb1e:	1e5a      	subs	r2, r3, #1
 800cb20:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800cb24:	b087      	sub	sp, #28
 800cb26:	bf83      	ittte	hi
 800cb28:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800cb2c:	189b      	addhi	r3, r3, r2
 800cb2e:	9301      	strhi	r3, [sp, #4]
 800cb30:	2300      	movls	r3, #0
 800cb32:	bf86      	itte	hi
 800cb34:	f240 135d 	movwhi	r3, #349	; 0x15d
 800cb38:	608b      	strhi	r3, [r1, #8]
 800cb3a:	9301      	strls	r3, [sp, #4]
 800cb3c:	680b      	ldr	r3, [r1, #0]
 800cb3e:	4688      	mov	r8, r1
 800cb40:	f04f 0b00 	mov.w	fp, #0
 800cb44:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800cb48:	f848 3b1c 	str.w	r3, [r8], #28
 800cb4c:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800cb50:	4607      	mov	r7, r0
 800cb52:	460c      	mov	r4, r1
 800cb54:	4645      	mov	r5, r8
 800cb56:	465a      	mov	r2, fp
 800cb58:	46d9      	mov	r9, fp
 800cb5a:	f8cd b008 	str.w	fp, [sp, #8]
 800cb5e:	68a1      	ldr	r1, [r4, #8]
 800cb60:	b181      	cbz	r1, 800cb84 <_scanf_float+0x70>
 800cb62:	6833      	ldr	r3, [r6, #0]
 800cb64:	781b      	ldrb	r3, [r3, #0]
 800cb66:	2b49      	cmp	r3, #73	; 0x49
 800cb68:	d071      	beq.n	800cc4e <_scanf_float+0x13a>
 800cb6a:	d84d      	bhi.n	800cc08 <_scanf_float+0xf4>
 800cb6c:	2b39      	cmp	r3, #57	; 0x39
 800cb6e:	d840      	bhi.n	800cbf2 <_scanf_float+0xde>
 800cb70:	2b31      	cmp	r3, #49	; 0x31
 800cb72:	f080 8088 	bcs.w	800cc86 <_scanf_float+0x172>
 800cb76:	2b2d      	cmp	r3, #45	; 0x2d
 800cb78:	f000 8090 	beq.w	800cc9c <_scanf_float+0x188>
 800cb7c:	d815      	bhi.n	800cbaa <_scanf_float+0x96>
 800cb7e:	2b2b      	cmp	r3, #43	; 0x2b
 800cb80:	f000 808c 	beq.w	800cc9c <_scanf_float+0x188>
 800cb84:	f1b9 0f00 	cmp.w	r9, #0
 800cb88:	d003      	beq.n	800cb92 <_scanf_float+0x7e>
 800cb8a:	6823      	ldr	r3, [r4, #0]
 800cb8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cb90:	6023      	str	r3, [r4, #0]
 800cb92:	3a01      	subs	r2, #1
 800cb94:	2a01      	cmp	r2, #1
 800cb96:	f200 80ea 	bhi.w	800cd6e <_scanf_float+0x25a>
 800cb9a:	4545      	cmp	r5, r8
 800cb9c:	f200 80dc 	bhi.w	800cd58 <_scanf_float+0x244>
 800cba0:	2601      	movs	r6, #1
 800cba2:	4630      	mov	r0, r6
 800cba4:	b007      	add	sp, #28
 800cba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbaa:	2b2e      	cmp	r3, #46	; 0x2e
 800cbac:	f000 809f 	beq.w	800ccee <_scanf_float+0x1da>
 800cbb0:	2b30      	cmp	r3, #48	; 0x30
 800cbb2:	d1e7      	bne.n	800cb84 <_scanf_float+0x70>
 800cbb4:	6820      	ldr	r0, [r4, #0]
 800cbb6:	f410 7f80 	tst.w	r0, #256	; 0x100
 800cbba:	d064      	beq.n	800cc86 <_scanf_float+0x172>
 800cbbc:	9b01      	ldr	r3, [sp, #4]
 800cbbe:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800cbc2:	6020      	str	r0, [r4, #0]
 800cbc4:	f109 0901 	add.w	r9, r9, #1
 800cbc8:	b11b      	cbz	r3, 800cbd2 <_scanf_float+0xbe>
 800cbca:	3b01      	subs	r3, #1
 800cbcc:	3101      	adds	r1, #1
 800cbce:	9301      	str	r3, [sp, #4]
 800cbd0:	60a1      	str	r1, [r4, #8]
 800cbd2:	68a3      	ldr	r3, [r4, #8]
 800cbd4:	3b01      	subs	r3, #1
 800cbd6:	60a3      	str	r3, [r4, #8]
 800cbd8:	6923      	ldr	r3, [r4, #16]
 800cbda:	3301      	adds	r3, #1
 800cbdc:	6123      	str	r3, [r4, #16]
 800cbde:	6873      	ldr	r3, [r6, #4]
 800cbe0:	3b01      	subs	r3, #1
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	6073      	str	r3, [r6, #4]
 800cbe6:	f340 80ac 	ble.w	800cd42 <_scanf_float+0x22e>
 800cbea:	6833      	ldr	r3, [r6, #0]
 800cbec:	3301      	adds	r3, #1
 800cbee:	6033      	str	r3, [r6, #0]
 800cbf0:	e7b5      	b.n	800cb5e <_scanf_float+0x4a>
 800cbf2:	2b45      	cmp	r3, #69	; 0x45
 800cbf4:	f000 8085 	beq.w	800cd02 <_scanf_float+0x1ee>
 800cbf8:	2b46      	cmp	r3, #70	; 0x46
 800cbfa:	d06a      	beq.n	800ccd2 <_scanf_float+0x1be>
 800cbfc:	2b41      	cmp	r3, #65	; 0x41
 800cbfe:	d1c1      	bne.n	800cb84 <_scanf_float+0x70>
 800cc00:	2a01      	cmp	r2, #1
 800cc02:	d1bf      	bne.n	800cb84 <_scanf_float+0x70>
 800cc04:	2202      	movs	r2, #2
 800cc06:	e046      	b.n	800cc96 <_scanf_float+0x182>
 800cc08:	2b65      	cmp	r3, #101	; 0x65
 800cc0a:	d07a      	beq.n	800cd02 <_scanf_float+0x1ee>
 800cc0c:	d818      	bhi.n	800cc40 <_scanf_float+0x12c>
 800cc0e:	2b54      	cmp	r3, #84	; 0x54
 800cc10:	d066      	beq.n	800cce0 <_scanf_float+0x1cc>
 800cc12:	d811      	bhi.n	800cc38 <_scanf_float+0x124>
 800cc14:	2b4e      	cmp	r3, #78	; 0x4e
 800cc16:	d1b5      	bne.n	800cb84 <_scanf_float+0x70>
 800cc18:	2a00      	cmp	r2, #0
 800cc1a:	d146      	bne.n	800ccaa <_scanf_float+0x196>
 800cc1c:	f1b9 0f00 	cmp.w	r9, #0
 800cc20:	d145      	bne.n	800ccae <_scanf_float+0x19a>
 800cc22:	6821      	ldr	r1, [r4, #0]
 800cc24:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800cc28:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800cc2c:	d13f      	bne.n	800ccae <_scanf_float+0x19a>
 800cc2e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800cc32:	6021      	str	r1, [r4, #0]
 800cc34:	2201      	movs	r2, #1
 800cc36:	e02e      	b.n	800cc96 <_scanf_float+0x182>
 800cc38:	2b59      	cmp	r3, #89	; 0x59
 800cc3a:	d01e      	beq.n	800cc7a <_scanf_float+0x166>
 800cc3c:	2b61      	cmp	r3, #97	; 0x61
 800cc3e:	e7de      	b.n	800cbfe <_scanf_float+0xea>
 800cc40:	2b6e      	cmp	r3, #110	; 0x6e
 800cc42:	d0e9      	beq.n	800cc18 <_scanf_float+0x104>
 800cc44:	d815      	bhi.n	800cc72 <_scanf_float+0x15e>
 800cc46:	2b66      	cmp	r3, #102	; 0x66
 800cc48:	d043      	beq.n	800ccd2 <_scanf_float+0x1be>
 800cc4a:	2b69      	cmp	r3, #105	; 0x69
 800cc4c:	d19a      	bne.n	800cb84 <_scanf_float+0x70>
 800cc4e:	f1bb 0f00 	cmp.w	fp, #0
 800cc52:	d138      	bne.n	800ccc6 <_scanf_float+0x1b2>
 800cc54:	f1b9 0f00 	cmp.w	r9, #0
 800cc58:	d197      	bne.n	800cb8a <_scanf_float+0x76>
 800cc5a:	6821      	ldr	r1, [r4, #0]
 800cc5c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800cc60:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800cc64:	d195      	bne.n	800cb92 <_scanf_float+0x7e>
 800cc66:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800cc6a:	6021      	str	r1, [r4, #0]
 800cc6c:	f04f 0b01 	mov.w	fp, #1
 800cc70:	e011      	b.n	800cc96 <_scanf_float+0x182>
 800cc72:	2b74      	cmp	r3, #116	; 0x74
 800cc74:	d034      	beq.n	800cce0 <_scanf_float+0x1cc>
 800cc76:	2b79      	cmp	r3, #121	; 0x79
 800cc78:	d184      	bne.n	800cb84 <_scanf_float+0x70>
 800cc7a:	f1bb 0f07 	cmp.w	fp, #7
 800cc7e:	d181      	bne.n	800cb84 <_scanf_float+0x70>
 800cc80:	f04f 0b08 	mov.w	fp, #8
 800cc84:	e007      	b.n	800cc96 <_scanf_float+0x182>
 800cc86:	eb12 0f0b 	cmn.w	r2, fp
 800cc8a:	f47f af7b 	bne.w	800cb84 <_scanf_float+0x70>
 800cc8e:	6821      	ldr	r1, [r4, #0]
 800cc90:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800cc94:	6021      	str	r1, [r4, #0]
 800cc96:	702b      	strb	r3, [r5, #0]
 800cc98:	3501      	adds	r5, #1
 800cc9a:	e79a      	b.n	800cbd2 <_scanf_float+0xbe>
 800cc9c:	6821      	ldr	r1, [r4, #0]
 800cc9e:	0608      	lsls	r0, r1, #24
 800cca0:	f57f af70 	bpl.w	800cb84 <_scanf_float+0x70>
 800cca4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800cca8:	e7f4      	b.n	800cc94 <_scanf_float+0x180>
 800ccaa:	2a02      	cmp	r2, #2
 800ccac:	d047      	beq.n	800cd3e <_scanf_float+0x22a>
 800ccae:	f1bb 0f01 	cmp.w	fp, #1
 800ccb2:	d003      	beq.n	800ccbc <_scanf_float+0x1a8>
 800ccb4:	f1bb 0f04 	cmp.w	fp, #4
 800ccb8:	f47f af64 	bne.w	800cb84 <_scanf_float+0x70>
 800ccbc:	f10b 0b01 	add.w	fp, fp, #1
 800ccc0:	fa5f fb8b 	uxtb.w	fp, fp
 800ccc4:	e7e7      	b.n	800cc96 <_scanf_float+0x182>
 800ccc6:	f1bb 0f03 	cmp.w	fp, #3
 800ccca:	d0f7      	beq.n	800ccbc <_scanf_float+0x1a8>
 800cccc:	f1bb 0f05 	cmp.w	fp, #5
 800ccd0:	e7f2      	b.n	800ccb8 <_scanf_float+0x1a4>
 800ccd2:	f1bb 0f02 	cmp.w	fp, #2
 800ccd6:	f47f af55 	bne.w	800cb84 <_scanf_float+0x70>
 800ccda:	f04f 0b03 	mov.w	fp, #3
 800ccde:	e7da      	b.n	800cc96 <_scanf_float+0x182>
 800cce0:	f1bb 0f06 	cmp.w	fp, #6
 800cce4:	f47f af4e 	bne.w	800cb84 <_scanf_float+0x70>
 800cce8:	f04f 0b07 	mov.w	fp, #7
 800ccec:	e7d3      	b.n	800cc96 <_scanf_float+0x182>
 800ccee:	6821      	ldr	r1, [r4, #0]
 800ccf0:	0588      	lsls	r0, r1, #22
 800ccf2:	f57f af47 	bpl.w	800cb84 <_scanf_float+0x70>
 800ccf6:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800ccfa:	6021      	str	r1, [r4, #0]
 800ccfc:	f8cd 9008 	str.w	r9, [sp, #8]
 800cd00:	e7c9      	b.n	800cc96 <_scanf_float+0x182>
 800cd02:	6821      	ldr	r1, [r4, #0]
 800cd04:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800cd08:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800cd0c:	d006      	beq.n	800cd1c <_scanf_float+0x208>
 800cd0e:	0548      	lsls	r0, r1, #21
 800cd10:	f57f af38 	bpl.w	800cb84 <_scanf_float+0x70>
 800cd14:	f1b9 0f00 	cmp.w	r9, #0
 800cd18:	f43f af3b 	beq.w	800cb92 <_scanf_float+0x7e>
 800cd1c:	0588      	lsls	r0, r1, #22
 800cd1e:	bf58      	it	pl
 800cd20:	9802      	ldrpl	r0, [sp, #8]
 800cd22:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800cd26:	bf58      	it	pl
 800cd28:	eba9 0000 	subpl.w	r0, r9, r0
 800cd2c:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800cd30:	bf58      	it	pl
 800cd32:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800cd36:	6021      	str	r1, [r4, #0]
 800cd38:	f04f 0900 	mov.w	r9, #0
 800cd3c:	e7ab      	b.n	800cc96 <_scanf_float+0x182>
 800cd3e:	2203      	movs	r2, #3
 800cd40:	e7a9      	b.n	800cc96 <_scanf_float+0x182>
 800cd42:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800cd46:	9205      	str	r2, [sp, #20]
 800cd48:	4631      	mov	r1, r6
 800cd4a:	4638      	mov	r0, r7
 800cd4c:	4798      	blx	r3
 800cd4e:	9a05      	ldr	r2, [sp, #20]
 800cd50:	2800      	cmp	r0, #0
 800cd52:	f43f af04 	beq.w	800cb5e <_scanf_float+0x4a>
 800cd56:	e715      	b.n	800cb84 <_scanf_float+0x70>
 800cd58:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cd5c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800cd60:	4632      	mov	r2, r6
 800cd62:	4638      	mov	r0, r7
 800cd64:	4798      	blx	r3
 800cd66:	6923      	ldr	r3, [r4, #16]
 800cd68:	3b01      	subs	r3, #1
 800cd6a:	6123      	str	r3, [r4, #16]
 800cd6c:	e715      	b.n	800cb9a <_scanf_float+0x86>
 800cd6e:	f10b 33ff 	add.w	r3, fp, #4294967295
 800cd72:	2b06      	cmp	r3, #6
 800cd74:	d80a      	bhi.n	800cd8c <_scanf_float+0x278>
 800cd76:	f1bb 0f02 	cmp.w	fp, #2
 800cd7a:	d968      	bls.n	800ce4e <_scanf_float+0x33a>
 800cd7c:	f1ab 0b03 	sub.w	fp, fp, #3
 800cd80:	fa5f fb8b 	uxtb.w	fp, fp
 800cd84:	eba5 0b0b 	sub.w	fp, r5, fp
 800cd88:	455d      	cmp	r5, fp
 800cd8a:	d14b      	bne.n	800ce24 <_scanf_float+0x310>
 800cd8c:	6823      	ldr	r3, [r4, #0]
 800cd8e:	05da      	lsls	r2, r3, #23
 800cd90:	d51f      	bpl.n	800cdd2 <_scanf_float+0x2be>
 800cd92:	055b      	lsls	r3, r3, #21
 800cd94:	d468      	bmi.n	800ce68 <_scanf_float+0x354>
 800cd96:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800cd9a:	6923      	ldr	r3, [r4, #16]
 800cd9c:	2965      	cmp	r1, #101	; 0x65
 800cd9e:	f103 33ff 	add.w	r3, r3, #4294967295
 800cda2:	f105 3bff 	add.w	fp, r5, #4294967295
 800cda6:	6123      	str	r3, [r4, #16]
 800cda8:	d00d      	beq.n	800cdc6 <_scanf_float+0x2b2>
 800cdaa:	2945      	cmp	r1, #69	; 0x45
 800cdac:	d00b      	beq.n	800cdc6 <_scanf_float+0x2b2>
 800cdae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cdb2:	4632      	mov	r2, r6
 800cdb4:	4638      	mov	r0, r7
 800cdb6:	4798      	blx	r3
 800cdb8:	6923      	ldr	r3, [r4, #16]
 800cdba:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800cdbe:	3b01      	subs	r3, #1
 800cdc0:	f1a5 0b02 	sub.w	fp, r5, #2
 800cdc4:	6123      	str	r3, [r4, #16]
 800cdc6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cdca:	4632      	mov	r2, r6
 800cdcc:	4638      	mov	r0, r7
 800cdce:	4798      	blx	r3
 800cdd0:	465d      	mov	r5, fp
 800cdd2:	6826      	ldr	r6, [r4, #0]
 800cdd4:	f016 0610 	ands.w	r6, r6, #16
 800cdd8:	d17a      	bne.n	800ced0 <_scanf_float+0x3bc>
 800cdda:	702e      	strb	r6, [r5, #0]
 800cddc:	6823      	ldr	r3, [r4, #0]
 800cdde:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800cde2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cde6:	d142      	bne.n	800ce6e <_scanf_float+0x35a>
 800cde8:	9b02      	ldr	r3, [sp, #8]
 800cdea:	eba9 0303 	sub.w	r3, r9, r3
 800cdee:	425a      	negs	r2, r3
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d149      	bne.n	800ce88 <_scanf_float+0x374>
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	4641      	mov	r1, r8
 800cdf8:	4638      	mov	r0, r7
 800cdfa:	f000 feb5 	bl	800db68 <_strtod_r>
 800cdfe:	6825      	ldr	r5, [r4, #0]
 800ce00:	f8da 3000 	ldr.w	r3, [sl]
 800ce04:	f015 0f02 	tst.w	r5, #2
 800ce08:	f103 0204 	add.w	r2, r3, #4
 800ce0c:	ec59 8b10 	vmov	r8, r9, d0
 800ce10:	f8ca 2000 	str.w	r2, [sl]
 800ce14:	d043      	beq.n	800ce9e <_scanf_float+0x38a>
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	e9c3 8900 	strd	r8, r9, [r3]
 800ce1c:	68e3      	ldr	r3, [r4, #12]
 800ce1e:	3301      	adds	r3, #1
 800ce20:	60e3      	str	r3, [r4, #12]
 800ce22:	e6be      	b.n	800cba2 <_scanf_float+0x8e>
 800ce24:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ce28:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800ce2c:	4632      	mov	r2, r6
 800ce2e:	4638      	mov	r0, r7
 800ce30:	4798      	blx	r3
 800ce32:	6923      	ldr	r3, [r4, #16]
 800ce34:	3b01      	subs	r3, #1
 800ce36:	6123      	str	r3, [r4, #16]
 800ce38:	e7a6      	b.n	800cd88 <_scanf_float+0x274>
 800ce3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ce3e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800ce42:	4632      	mov	r2, r6
 800ce44:	4638      	mov	r0, r7
 800ce46:	4798      	blx	r3
 800ce48:	6923      	ldr	r3, [r4, #16]
 800ce4a:	3b01      	subs	r3, #1
 800ce4c:	6123      	str	r3, [r4, #16]
 800ce4e:	4545      	cmp	r5, r8
 800ce50:	d8f3      	bhi.n	800ce3a <_scanf_float+0x326>
 800ce52:	e6a5      	b.n	800cba0 <_scanf_float+0x8c>
 800ce54:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ce58:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800ce5c:	4632      	mov	r2, r6
 800ce5e:	4638      	mov	r0, r7
 800ce60:	4798      	blx	r3
 800ce62:	6923      	ldr	r3, [r4, #16]
 800ce64:	3b01      	subs	r3, #1
 800ce66:	6123      	str	r3, [r4, #16]
 800ce68:	4545      	cmp	r5, r8
 800ce6a:	d8f3      	bhi.n	800ce54 <_scanf_float+0x340>
 800ce6c:	e698      	b.n	800cba0 <_scanf_float+0x8c>
 800ce6e:	9b03      	ldr	r3, [sp, #12]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d0bf      	beq.n	800cdf4 <_scanf_float+0x2e0>
 800ce74:	9904      	ldr	r1, [sp, #16]
 800ce76:	230a      	movs	r3, #10
 800ce78:	4632      	mov	r2, r6
 800ce7a:	3101      	adds	r1, #1
 800ce7c:	4638      	mov	r0, r7
 800ce7e:	f000 feff 	bl	800dc80 <_strtol_r>
 800ce82:	9b03      	ldr	r3, [sp, #12]
 800ce84:	9d04      	ldr	r5, [sp, #16]
 800ce86:	1ac2      	subs	r2, r0, r3
 800ce88:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800ce8c:	429d      	cmp	r5, r3
 800ce8e:	bf28      	it	cs
 800ce90:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800ce94:	490f      	ldr	r1, [pc, #60]	; (800ced4 <_scanf_float+0x3c0>)
 800ce96:	4628      	mov	r0, r5
 800ce98:	f000 f834 	bl	800cf04 <siprintf>
 800ce9c:	e7aa      	b.n	800cdf4 <_scanf_float+0x2e0>
 800ce9e:	f015 0504 	ands.w	r5, r5, #4
 800cea2:	d1b8      	bne.n	800ce16 <_scanf_float+0x302>
 800cea4:	681f      	ldr	r7, [r3, #0]
 800cea6:	ee10 2a10 	vmov	r2, s0
 800ceaa:	464b      	mov	r3, r9
 800ceac:	ee10 0a10 	vmov	r0, s0
 800ceb0:	4649      	mov	r1, r9
 800ceb2:	f7f3 fe3b 	bl	8000b2c <__aeabi_dcmpun>
 800ceb6:	b128      	cbz	r0, 800cec4 <_scanf_float+0x3b0>
 800ceb8:	4628      	mov	r0, r5
 800ceba:	f000 f81d 	bl	800cef8 <nanf>
 800cebe:	ed87 0a00 	vstr	s0, [r7]
 800cec2:	e7ab      	b.n	800ce1c <_scanf_float+0x308>
 800cec4:	4640      	mov	r0, r8
 800cec6:	4649      	mov	r1, r9
 800cec8:	f7f3 fe8e 	bl	8000be8 <__aeabi_d2f>
 800cecc:	6038      	str	r0, [r7, #0]
 800cece:	e7a5      	b.n	800ce1c <_scanf_float+0x308>
 800ced0:	2600      	movs	r6, #0
 800ced2:	e666      	b.n	800cba2 <_scanf_float+0x8e>
 800ced4:	0800fc34 	.word	0x0800fc34

0800ced8 <_sbrk_r>:
 800ced8:	b538      	push	{r3, r4, r5, lr}
 800ceda:	4c06      	ldr	r4, [pc, #24]	; (800cef4 <_sbrk_r+0x1c>)
 800cedc:	2300      	movs	r3, #0
 800cede:	4605      	mov	r5, r0
 800cee0:	4608      	mov	r0, r1
 800cee2:	6023      	str	r3, [r4, #0]
 800cee4:	f002 fe38 	bl	800fb58 <_sbrk>
 800cee8:	1c43      	adds	r3, r0, #1
 800ceea:	d102      	bne.n	800cef2 <_sbrk_r+0x1a>
 800ceec:	6823      	ldr	r3, [r4, #0]
 800ceee:	b103      	cbz	r3, 800cef2 <_sbrk_r+0x1a>
 800cef0:	602b      	str	r3, [r5, #0]
 800cef2:	bd38      	pop	{r3, r4, r5, pc}
 800cef4:	20002834 	.word	0x20002834

0800cef8 <nanf>:
 800cef8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800cf00 <nanf+0x8>
 800cefc:	4770      	bx	lr
 800cefe:	bf00      	nop
 800cf00:	7fc00000 	.word	0x7fc00000

0800cf04 <siprintf>:
 800cf04:	b40e      	push	{r1, r2, r3}
 800cf06:	b500      	push	{lr}
 800cf08:	b09c      	sub	sp, #112	; 0x70
 800cf0a:	ab1d      	add	r3, sp, #116	; 0x74
 800cf0c:	9002      	str	r0, [sp, #8]
 800cf0e:	9006      	str	r0, [sp, #24]
 800cf10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cf14:	4809      	ldr	r0, [pc, #36]	; (800cf3c <siprintf+0x38>)
 800cf16:	9107      	str	r1, [sp, #28]
 800cf18:	9104      	str	r1, [sp, #16]
 800cf1a:	4909      	ldr	r1, [pc, #36]	; (800cf40 <siprintf+0x3c>)
 800cf1c:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf20:	9105      	str	r1, [sp, #20]
 800cf22:	6800      	ldr	r0, [r0, #0]
 800cf24:	9301      	str	r3, [sp, #4]
 800cf26:	a902      	add	r1, sp, #8
 800cf28:	f002 fcb8 	bl	800f89c <_svfiprintf_r>
 800cf2c:	9b02      	ldr	r3, [sp, #8]
 800cf2e:	2200      	movs	r2, #0
 800cf30:	701a      	strb	r2, [r3, #0]
 800cf32:	b01c      	add	sp, #112	; 0x70
 800cf34:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf38:	b003      	add	sp, #12
 800cf3a:	4770      	bx	lr
 800cf3c:	20000180 	.word	0x20000180
 800cf40:	ffff0208 	.word	0xffff0208

0800cf44 <sulp>:
 800cf44:	b570      	push	{r4, r5, r6, lr}
 800cf46:	4604      	mov	r4, r0
 800cf48:	460d      	mov	r5, r1
 800cf4a:	ec45 4b10 	vmov	d0, r4, r5
 800cf4e:	4616      	mov	r6, r2
 800cf50:	f002 fb08 	bl	800f564 <__ulp>
 800cf54:	ec51 0b10 	vmov	r0, r1, d0
 800cf58:	b17e      	cbz	r6, 800cf7a <sulp+0x36>
 800cf5a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800cf5e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	dd09      	ble.n	800cf7a <sulp+0x36>
 800cf66:	051b      	lsls	r3, r3, #20
 800cf68:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800cf6c:	2400      	movs	r4, #0
 800cf6e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800cf72:	4622      	mov	r2, r4
 800cf74:	462b      	mov	r3, r5
 800cf76:	f7f3 fb3f 	bl	80005f8 <__aeabi_dmul>
 800cf7a:	bd70      	pop	{r4, r5, r6, pc}
 800cf7c:	0000      	movs	r0, r0
	...

0800cf80 <_strtod_l>:
 800cf80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf84:	461f      	mov	r7, r3
 800cf86:	b0a1      	sub	sp, #132	; 0x84
 800cf88:	2300      	movs	r3, #0
 800cf8a:	4681      	mov	r9, r0
 800cf8c:	4638      	mov	r0, r7
 800cf8e:	460e      	mov	r6, r1
 800cf90:	9217      	str	r2, [sp, #92]	; 0x5c
 800cf92:	931c      	str	r3, [sp, #112]	; 0x70
 800cf94:	f001 fff5 	bl	800ef82 <__localeconv_l>
 800cf98:	4680      	mov	r8, r0
 800cf9a:	6800      	ldr	r0, [r0, #0]
 800cf9c:	f7f3 f918 	bl	80001d0 <strlen>
 800cfa0:	f04f 0a00 	mov.w	sl, #0
 800cfa4:	4604      	mov	r4, r0
 800cfa6:	f04f 0b00 	mov.w	fp, #0
 800cfaa:	961b      	str	r6, [sp, #108]	; 0x6c
 800cfac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cfae:	781a      	ldrb	r2, [r3, #0]
 800cfb0:	2a0d      	cmp	r2, #13
 800cfb2:	d832      	bhi.n	800d01a <_strtod_l+0x9a>
 800cfb4:	2a09      	cmp	r2, #9
 800cfb6:	d236      	bcs.n	800d026 <_strtod_l+0xa6>
 800cfb8:	2a00      	cmp	r2, #0
 800cfba:	d03e      	beq.n	800d03a <_strtod_l+0xba>
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	930d      	str	r3, [sp, #52]	; 0x34
 800cfc0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800cfc2:	782b      	ldrb	r3, [r5, #0]
 800cfc4:	2b30      	cmp	r3, #48	; 0x30
 800cfc6:	f040 80ac 	bne.w	800d122 <_strtod_l+0x1a2>
 800cfca:	786b      	ldrb	r3, [r5, #1]
 800cfcc:	2b58      	cmp	r3, #88	; 0x58
 800cfce:	d001      	beq.n	800cfd4 <_strtod_l+0x54>
 800cfd0:	2b78      	cmp	r3, #120	; 0x78
 800cfd2:	d167      	bne.n	800d0a4 <_strtod_l+0x124>
 800cfd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cfd6:	9301      	str	r3, [sp, #4]
 800cfd8:	ab1c      	add	r3, sp, #112	; 0x70
 800cfda:	9300      	str	r3, [sp, #0]
 800cfdc:	9702      	str	r7, [sp, #8]
 800cfde:	ab1d      	add	r3, sp, #116	; 0x74
 800cfe0:	4a88      	ldr	r2, [pc, #544]	; (800d204 <_strtod_l+0x284>)
 800cfe2:	a91b      	add	r1, sp, #108	; 0x6c
 800cfe4:	4648      	mov	r0, r9
 800cfe6:	f001 fcf2 	bl	800e9ce <__gethex>
 800cfea:	f010 0407 	ands.w	r4, r0, #7
 800cfee:	4606      	mov	r6, r0
 800cff0:	d005      	beq.n	800cffe <_strtod_l+0x7e>
 800cff2:	2c06      	cmp	r4, #6
 800cff4:	d12b      	bne.n	800d04e <_strtod_l+0xce>
 800cff6:	3501      	adds	r5, #1
 800cff8:	2300      	movs	r3, #0
 800cffa:	951b      	str	r5, [sp, #108]	; 0x6c
 800cffc:	930d      	str	r3, [sp, #52]	; 0x34
 800cffe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d000:	2b00      	cmp	r3, #0
 800d002:	f040 859a 	bne.w	800db3a <_strtod_l+0xbba>
 800d006:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d008:	b1e3      	cbz	r3, 800d044 <_strtod_l+0xc4>
 800d00a:	4652      	mov	r2, sl
 800d00c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d010:	ec43 2b10 	vmov	d0, r2, r3
 800d014:	b021      	add	sp, #132	; 0x84
 800d016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d01a:	2a2b      	cmp	r2, #43	; 0x2b
 800d01c:	d015      	beq.n	800d04a <_strtod_l+0xca>
 800d01e:	2a2d      	cmp	r2, #45	; 0x2d
 800d020:	d004      	beq.n	800d02c <_strtod_l+0xac>
 800d022:	2a20      	cmp	r2, #32
 800d024:	d1ca      	bne.n	800cfbc <_strtod_l+0x3c>
 800d026:	3301      	adds	r3, #1
 800d028:	931b      	str	r3, [sp, #108]	; 0x6c
 800d02a:	e7bf      	b.n	800cfac <_strtod_l+0x2c>
 800d02c:	2201      	movs	r2, #1
 800d02e:	920d      	str	r2, [sp, #52]	; 0x34
 800d030:	1c5a      	adds	r2, r3, #1
 800d032:	921b      	str	r2, [sp, #108]	; 0x6c
 800d034:	785b      	ldrb	r3, [r3, #1]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d1c2      	bne.n	800cfc0 <_strtod_l+0x40>
 800d03a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d03c:	961b      	str	r6, [sp, #108]	; 0x6c
 800d03e:	2b00      	cmp	r3, #0
 800d040:	f040 8579 	bne.w	800db36 <_strtod_l+0xbb6>
 800d044:	4652      	mov	r2, sl
 800d046:	465b      	mov	r3, fp
 800d048:	e7e2      	b.n	800d010 <_strtod_l+0x90>
 800d04a:	2200      	movs	r2, #0
 800d04c:	e7ef      	b.n	800d02e <_strtod_l+0xae>
 800d04e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d050:	b13a      	cbz	r2, 800d062 <_strtod_l+0xe2>
 800d052:	2135      	movs	r1, #53	; 0x35
 800d054:	a81e      	add	r0, sp, #120	; 0x78
 800d056:	f002 fb7d 	bl	800f754 <__copybits>
 800d05a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d05c:	4648      	mov	r0, r9
 800d05e:	f001 ffe9 	bl	800f034 <_Bfree>
 800d062:	3c01      	subs	r4, #1
 800d064:	2c04      	cmp	r4, #4
 800d066:	d806      	bhi.n	800d076 <_strtod_l+0xf6>
 800d068:	e8df f004 	tbb	[pc, r4]
 800d06c:	1714030a 	.word	0x1714030a
 800d070:	0a          	.byte	0x0a
 800d071:	00          	.byte	0x00
 800d072:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800d076:	0730      	lsls	r0, r6, #28
 800d078:	d5c1      	bpl.n	800cffe <_strtod_l+0x7e>
 800d07a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800d07e:	e7be      	b.n	800cffe <_strtod_l+0x7e>
 800d080:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800d084:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d086:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d08a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d08e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d092:	e7f0      	b.n	800d076 <_strtod_l+0xf6>
 800d094:	f8df b170 	ldr.w	fp, [pc, #368]	; 800d208 <_strtod_l+0x288>
 800d098:	e7ed      	b.n	800d076 <_strtod_l+0xf6>
 800d09a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800d09e:	f04f 3aff 	mov.w	sl, #4294967295
 800d0a2:	e7e8      	b.n	800d076 <_strtod_l+0xf6>
 800d0a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d0a6:	1c5a      	adds	r2, r3, #1
 800d0a8:	921b      	str	r2, [sp, #108]	; 0x6c
 800d0aa:	785b      	ldrb	r3, [r3, #1]
 800d0ac:	2b30      	cmp	r3, #48	; 0x30
 800d0ae:	d0f9      	beq.n	800d0a4 <_strtod_l+0x124>
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d0a4      	beq.n	800cffe <_strtod_l+0x7e>
 800d0b4:	2301      	movs	r3, #1
 800d0b6:	2500      	movs	r5, #0
 800d0b8:	9306      	str	r3, [sp, #24]
 800d0ba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d0bc:	9308      	str	r3, [sp, #32]
 800d0be:	9507      	str	r5, [sp, #28]
 800d0c0:	9505      	str	r5, [sp, #20]
 800d0c2:	220a      	movs	r2, #10
 800d0c4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800d0c6:	7807      	ldrb	r7, [r0, #0]
 800d0c8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800d0cc:	b2d9      	uxtb	r1, r3
 800d0ce:	2909      	cmp	r1, #9
 800d0d0:	d929      	bls.n	800d126 <_strtod_l+0x1a6>
 800d0d2:	4622      	mov	r2, r4
 800d0d4:	f8d8 1000 	ldr.w	r1, [r8]
 800d0d8:	f002 fcd8 	bl	800fa8c <strncmp>
 800d0dc:	2800      	cmp	r0, #0
 800d0de:	d031      	beq.n	800d144 <_strtod_l+0x1c4>
 800d0e0:	2000      	movs	r0, #0
 800d0e2:	9c05      	ldr	r4, [sp, #20]
 800d0e4:	9004      	str	r0, [sp, #16]
 800d0e6:	463b      	mov	r3, r7
 800d0e8:	4602      	mov	r2, r0
 800d0ea:	2b65      	cmp	r3, #101	; 0x65
 800d0ec:	d001      	beq.n	800d0f2 <_strtod_l+0x172>
 800d0ee:	2b45      	cmp	r3, #69	; 0x45
 800d0f0:	d114      	bne.n	800d11c <_strtod_l+0x19c>
 800d0f2:	b924      	cbnz	r4, 800d0fe <_strtod_l+0x17e>
 800d0f4:	b910      	cbnz	r0, 800d0fc <_strtod_l+0x17c>
 800d0f6:	9b06      	ldr	r3, [sp, #24]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d09e      	beq.n	800d03a <_strtod_l+0xba>
 800d0fc:	2400      	movs	r4, #0
 800d0fe:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800d100:	1c73      	adds	r3, r6, #1
 800d102:	931b      	str	r3, [sp, #108]	; 0x6c
 800d104:	7873      	ldrb	r3, [r6, #1]
 800d106:	2b2b      	cmp	r3, #43	; 0x2b
 800d108:	d078      	beq.n	800d1fc <_strtod_l+0x27c>
 800d10a:	2b2d      	cmp	r3, #45	; 0x2d
 800d10c:	d070      	beq.n	800d1f0 <_strtod_l+0x270>
 800d10e:	f04f 0c00 	mov.w	ip, #0
 800d112:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800d116:	2f09      	cmp	r7, #9
 800d118:	d97c      	bls.n	800d214 <_strtod_l+0x294>
 800d11a:	961b      	str	r6, [sp, #108]	; 0x6c
 800d11c:	f04f 0e00 	mov.w	lr, #0
 800d120:	e09a      	b.n	800d258 <_strtod_l+0x2d8>
 800d122:	2300      	movs	r3, #0
 800d124:	e7c7      	b.n	800d0b6 <_strtod_l+0x136>
 800d126:	9905      	ldr	r1, [sp, #20]
 800d128:	2908      	cmp	r1, #8
 800d12a:	bfdd      	ittte	le
 800d12c:	9907      	ldrle	r1, [sp, #28]
 800d12e:	fb02 3301 	mlale	r3, r2, r1, r3
 800d132:	9307      	strle	r3, [sp, #28]
 800d134:	fb02 3505 	mlagt	r5, r2, r5, r3
 800d138:	9b05      	ldr	r3, [sp, #20]
 800d13a:	3001      	adds	r0, #1
 800d13c:	3301      	adds	r3, #1
 800d13e:	9305      	str	r3, [sp, #20]
 800d140:	901b      	str	r0, [sp, #108]	; 0x6c
 800d142:	e7bf      	b.n	800d0c4 <_strtod_l+0x144>
 800d144:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d146:	191a      	adds	r2, r3, r4
 800d148:	921b      	str	r2, [sp, #108]	; 0x6c
 800d14a:	9a05      	ldr	r2, [sp, #20]
 800d14c:	5d1b      	ldrb	r3, [r3, r4]
 800d14e:	2a00      	cmp	r2, #0
 800d150:	d037      	beq.n	800d1c2 <_strtod_l+0x242>
 800d152:	9c05      	ldr	r4, [sp, #20]
 800d154:	4602      	mov	r2, r0
 800d156:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800d15a:	2909      	cmp	r1, #9
 800d15c:	d913      	bls.n	800d186 <_strtod_l+0x206>
 800d15e:	2101      	movs	r1, #1
 800d160:	9104      	str	r1, [sp, #16]
 800d162:	e7c2      	b.n	800d0ea <_strtod_l+0x16a>
 800d164:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d166:	1c5a      	adds	r2, r3, #1
 800d168:	921b      	str	r2, [sp, #108]	; 0x6c
 800d16a:	785b      	ldrb	r3, [r3, #1]
 800d16c:	3001      	adds	r0, #1
 800d16e:	2b30      	cmp	r3, #48	; 0x30
 800d170:	d0f8      	beq.n	800d164 <_strtod_l+0x1e4>
 800d172:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800d176:	2a08      	cmp	r2, #8
 800d178:	f200 84e4 	bhi.w	800db44 <_strtod_l+0xbc4>
 800d17c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800d17e:	9208      	str	r2, [sp, #32]
 800d180:	4602      	mov	r2, r0
 800d182:	2000      	movs	r0, #0
 800d184:	4604      	mov	r4, r0
 800d186:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800d18a:	f100 0101 	add.w	r1, r0, #1
 800d18e:	d012      	beq.n	800d1b6 <_strtod_l+0x236>
 800d190:	440a      	add	r2, r1
 800d192:	eb00 0c04 	add.w	ip, r0, r4
 800d196:	4621      	mov	r1, r4
 800d198:	270a      	movs	r7, #10
 800d19a:	458c      	cmp	ip, r1
 800d19c:	d113      	bne.n	800d1c6 <_strtod_l+0x246>
 800d19e:	1821      	adds	r1, r4, r0
 800d1a0:	2908      	cmp	r1, #8
 800d1a2:	f104 0401 	add.w	r4, r4, #1
 800d1a6:	4404      	add	r4, r0
 800d1a8:	dc19      	bgt.n	800d1de <_strtod_l+0x25e>
 800d1aa:	9b07      	ldr	r3, [sp, #28]
 800d1ac:	210a      	movs	r1, #10
 800d1ae:	fb01 e303 	mla	r3, r1, r3, lr
 800d1b2:	9307      	str	r3, [sp, #28]
 800d1b4:	2100      	movs	r1, #0
 800d1b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d1b8:	1c58      	adds	r0, r3, #1
 800d1ba:	901b      	str	r0, [sp, #108]	; 0x6c
 800d1bc:	785b      	ldrb	r3, [r3, #1]
 800d1be:	4608      	mov	r0, r1
 800d1c0:	e7c9      	b.n	800d156 <_strtod_l+0x1d6>
 800d1c2:	9805      	ldr	r0, [sp, #20]
 800d1c4:	e7d3      	b.n	800d16e <_strtod_l+0x1ee>
 800d1c6:	2908      	cmp	r1, #8
 800d1c8:	f101 0101 	add.w	r1, r1, #1
 800d1cc:	dc03      	bgt.n	800d1d6 <_strtod_l+0x256>
 800d1ce:	9b07      	ldr	r3, [sp, #28]
 800d1d0:	437b      	muls	r3, r7
 800d1d2:	9307      	str	r3, [sp, #28]
 800d1d4:	e7e1      	b.n	800d19a <_strtod_l+0x21a>
 800d1d6:	2910      	cmp	r1, #16
 800d1d8:	bfd8      	it	le
 800d1da:	437d      	mulle	r5, r7
 800d1dc:	e7dd      	b.n	800d19a <_strtod_l+0x21a>
 800d1de:	2c10      	cmp	r4, #16
 800d1e0:	bfdc      	itt	le
 800d1e2:	210a      	movle	r1, #10
 800d1e4:	fb01 e505 	mlale	r5, r1, r5, lr
 800d1e8:	e7e4      	b.n	800d1b4 <_strtod_l+0x234>
 800d1ea:	2301      	movs	r3, #1
 800d1ec:	9304      	str	r3, [sp, #16]
 800d1ee:	e781      	b.n	800d0f4 <_strtod_l+0x174>
 800d1f0:	f04f 0c01 	mov.w	ip, #1
 800d1f4:	1cb3      	adds	r3, r6, #2
 800d1f6:	931b      	str	r3, [sp, #108]	; 0x6c
 800d1f8:	78b3      	ldrb	r3, [r6, #2]
 800d1fa:	e78a      	b.n	800d112 <_strtod_l+0x192>
 800d1fc:	f04f 0c00 	mov.w	ip, #0
 800d200:	e7f8      	b.n	800d1f4 <_strtod_l+0x274>
 800d202:	bf00      	nop
 800d204:	0800fc3c 	.word	0x0800fc3c
 800d208:	7ff00000 	.word	0x7ff00000
 800d20c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d20e:	1c5f      	adds	r7, r3, #1
 800d210:	971b      	str	r7, [sp, #108]	; 0x6c
 800d212:	785b      	ldrb	r3, [r3, #1]
 800d214:	2b30      	cmp	r3, #48	; 0x30
 800d216:	d0f9      	beq.n	800d20c <_strtod_l+0x28c>
 800d218:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800d21c:	2f08      	cmp	r7, #8
 800d21e:	f63f af7d 	bhi.w	800d11c <_strtod_l+0x19c>
 800d222:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800d226:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d228:	930a      	str	r3, [sp, #40]	; 0x28
 800d22a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d22c:	1c5f      	adds	r7, r3, #1
 800d22e:	971b      	str	r7, [sp, #108]	; 0x6c
 800d230:	785b      	ldrb	r3, [r3, #1]
 800d232:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800d236:	f1b8 0f09 	cmp.w	r8, #9
 800d23a:	d937      	bls.n	800d2ac <_strtod_l+0x32c>
 800d23c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d23e:	1a7f      	subs	r7, r7, r1
 800d240:	2f08      	cmp	r7, #8
 800d242:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800d246:	dc37      	bgt.n	800d2b8 <_strtod_l+0x338>
 800d248:	45be      	cmp	lr, r7
 800d24a:	bfa8      	it	ge
 800d24c:	46be      	movge	lr, r7
 800d24e:	f1bc 0f00 	cmp.w	ip, #0
 800d252:	d001      	beq.n	800d258 <_strtod_l+0x2d8>
 800d254:	f1ce 0e00 	rsb	lr, lr, #0
 800d258:	2c00      	cmp	r4, #0
 800d25a:	d151      	bne.n	800d300 <_strtod_l+0x380>
 800d25c:	2800      	cmp	r0, #0
 800d25e:	f47f aece 	bne.w	800cffe <_strtod_l+0x7e>
 800d262:	9a06      	ldr	r2, [sp, #24]
 800d264:	2a00      	cmp	r2, #0
 800d266:	f47f aeca 	bne.w	800cffe <_strtod_l+0x7e>
 800d26a:	9a04      	ldr	r2, [sp, #16]
 800d26c:	2a00      	cmp	r2, #0
 800d26e:	f47f aee4 	bne.w	800d03a <_strtod_l+0xba>
 800d272:	2b4e      	cmp	r3, #78	; 0x4e
 800d274:	d027      	beq.n	800d2c6 <_strtod_l+0x346>
 800d276:	dc21      	bgt.n	800d2bc <_strtod_l+0x33c>
 800d278:	2b49      	cmp	r3, #73	; 0x49
 800d27a:	f47f aede 	bne.w	800d03a <_strtod_l+0xba>
 800d27e:	49a0      	ldr	r1, [pc, #640]	; (800d500 <_strtod_l+0x580>)
 800d280:	a81b      	add	r0, sp, #108	; 0x6c
 800d282:	f001 fdd7 	bl	800ee34 <__match>
 800d286:	2800      	cmp	r0, #0
 800d288:	f43f aed7 	beq.w	800d03a <_strtod_l+0xba>
 800d28c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d28e:	499d      	ldr	r1, [pc, #628]	; (800d504 <_strtod_l+0x584>)
 800d290:	3b01      	subs	r3, #1
 800d292:	a81b      	add	r0, sp, #108	; 0x6c
 800d294:	931b      	str	r3, [sp, #108]	; 0x6c
 800d296:	f001 fdcd 	bl	800ee34 <__match>
 800d29a:	b910      	cbnz	r0, 800d2a2 <_strtod_l+0x322>
 800d29c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d29e:	3301      	adds	r3, #1
 800d2a0:	931b      	str	r3, [sp, #108]	; 0x6c
 800d2a2:	f8df b274 	ldr.w	fp, [pc, #628]	; 800d518 <_strtod_l+0x598>
 800d2a6:	f04f 0a00 	mov.w	sl, #0
 800d2aa:	e6a8      	b.n	800cffe <_strtod_l+0x7e>
 800d2ac:	210a      	movs	r1, #10
 800d2ae:	fb01 3e0e 	mla	lr, r1, lr, r3
 800d2b2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800d2b6:	e7b8      	b.n	800d22a <_strtod_l+0x2aa>
 800d2b8:	46be      	mov	lr, r7
 800d2ba:	e7c8      	b.n	800d24e <_strtod_l+0x2ce>
 800d2bc:	2b69      	cmp	r3, #105	; 0x69
 800d2be:	d0de      	beq.n	800d27e <_strtod_l+0x2fe>
 800d2c0:	2b6e      	cmp	r3, #110	; 0x6e
 800d2c2:	f47f aeba 	bne.w	800d03a <_strtod_l+0xba>
 800d2c6:	4990      	ldr	r1, [pc, #576]	; (800d508 <_strtod_l+0x588>)
 800d2c8:	a81b      	add	r0, sp, #108	; 0x6c
 800d2ca:	f001 fdb3 	bl	800ee34 <__match>
 800d2ce:	2800      	cmp	r0, #0
 800d2d0:	f43f aeb3 	beq.w	800d03a <_strtod_l+0xba>
 800d2d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d2d6:	781b      	ldrb	r3, [r3, #0]
 800d2d8:	2b28      	cmp	r3, #40	; 0x28
 800d2da:	d10e      	bne.n	800d2fa <_strtod_l+0x37a>
 800d2dc:	aa1e      	add	r2, sp, #120	; 0x78
 800d2de:	498b      	ldr	r1, [pc, #556]	; (800d50c <_strtod_l+0x58c>)
 800d2e0:	a81b      	add	r0, sp, #108	; 0x6c
 800d2e2:	f001 fdbb 	bl	800ee5c <__hexnan>
 800d2e6:	2805      	cmp	r0, #5
 800d2e8:	d107      	bne.n	800d2fa <_strtod_l+0x37a>
 800d2ea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d2ec:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800d2f0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d2f4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d2f8:	e681      	b.n	800cffe <_strtod_l+0x7e>
 800d2fa:	f8df b224 	ldr.w	fp, [pc, #548]	; 800d520 <_strtod_l+0x5a0>
 800d2fe:	e7d2      	b.n	800d2a6 <_strtod_l+0x326>
 800d300:	ebae 0302 	sub.w	r3, lr, r2
 800d304:	9306      	str	r3, [sp, #24]
 800d306:	9b05      	ldr	r3, [sp, #20]
 800d308:	9807      	ldr	r0, [sp, #28]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	bf08      	it	eq
 800d30e:	4623      	moveq	r3, r4
 800d310:	2c10      	cmp	r4, #16
 800d312:	9305      	str	r3, [sp, #20]
 800d314:	46a0      	mov	r8, r4
 800d316:	bfa8      	it	ge
 800d318:	f04f 0810 	movge.w	r8, #16
 800d31c:	f7f3 f8f2 	bl	8000504 <__aeabi_ui2d>
 800d320:	2c09      	cmp	r4, #9
 800d322:	4682      	mov	sl, r0
 800d324:	468b      	mov	fp, r1
 800d326:	dc13      	bgt.n	800d350 <_strtod_l+0x3d0>
 800d328:	9b06      	ldr	r3, [sp, #24]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	f43f ae67 	beq.w	800cffe <_strtod_l+0x7e>
 800d330:	9b06      	ldr	r3, [sp, #24]
 800d332:	dd7a      	ble.n	800d42a <_strtod_l+0x4aa>
 800d334:	2b16      	cmp	r3, #22
 800d336:	dc61      	bgt.n	800d3fc <_strtod_l+0x47c>
 800d338:	4a75      	ldr	r2, [pc, #468]	; (800d510 <_strtod_l+0x590>)
 800d33a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800d33e:	e9de 0100 	ldrd	r0, r1, [lr]
 800d342:	4652      	mov	r2, sl
 800d344:	465b      	mov	r3, fp
 800d346:	f7f3 f957 	bl	80005f8 <__aeabi_dmul>
 800d34a:	4682      	mov	sl, r0
 800d34c:	468b      	mov	fp, r1
 800d34e:	e656      	b.n	800cffe <_strtod_l+0x7e>
 800d350:	4b6f      	ldr	r3, [pc, #444]	; (800d510 <_strtod_l+0x590>)
 800d352:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d356:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d35a:	f7f3 f94d 	bl	80005f8 <__aeabi_dmul>
 800d35e:	4606      	mov	r6, r0
 800d360:	4628      	mov	r0, r5
 800d362:	460f      	mov	r7, r1
 800d364:	f7f3 f8ce 	bl	8000504 <__aeabi_ui2d>
 800d368:	4602      	mov	r2, r0
 800d36a:	460b      	mov	r3, r1
 800d36c:	4630      	mov	r0, r6
 800d36e:	4639      	mov	r1, r7
 800d370:	f7f2 ff8c 	bl	800028c <__adddf3>
 800d374:	2c0f      	cmp	r4, #15
 800d376:	4682      	mov	sl, r0
 800d378:	468b      	mov	fp, r1
 800d37a:	ddd5      	ble.n	800d328 <_strtod_l+0x3a8>
 800d37c:	9b06      	ldr	r3, [sp, #24]
 800d37e:	eba4 0808 	sub.w	r8, r4, r8
 800d382:	4498      	add	r8, r3
 800d384:	f1b8 0f00 	cmp.w	r8, #0
 800d388:	f340 8096 	ble.w	800d4b8 <_strtod_l+0x538>
 800d38c:	f018 030f 	ands.w	r3, r8, #15
 800d390:	d00a      	beq.n	800d3a8 <_strtod_l+0x428>
 800d392:	495f      	ldr	r1, [pc, #380]	; (800d510 <_strtod_l+0x590>)
 800d394:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d398:	4652      	mov	r2, sl
 800d39a:	465b      	mov	r3, fp
 800d39c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d3a0:	f7f3 f92a 	bl	80005f8 <__aeabi_dmul>
 800d3a4:	4682      	mov	sl, r0
 800d3a6:	468b      	mov	fp, r1
 800d3a8:	f038 080f 	bics.w	r8, r8, #15
 800d3ac:	d073      	beq.n	800d496 <_strtod_l+0x516>
 800d3ae:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800d3b2:	dd47      	ble.n	800d444 <_strtod_l+0x4c4>
 800d3b4:	2400      	movs	r4, #0
 800d3b6:	46a0      	mov	r8, r4
 800d3b8:	9407      	str	r4, [sp, #28]
 800d3ba:	9405      	str	r4, [sp, #20]
 800d3bc:	2322      	movs	r3, #34	; 0x22
 800d3be:	f8df b158 	ldr.w	fp, [pc, #344]	; 800d518 <_strtod_l+0x598>
 800d3c2:	f8c9 3000 	str.w	r3, [r9]
 800d3c6:	f04f 0a00 	mov.w	sl, #0
 800d3ca:	9b07      	ldr	r3, [sp, #28]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	f43f ae16 	beq.w	800cffe <_strtod_l+0x7e>
 800d3d2:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d3d4:	4648      	mov	r0, r9
 800d3d6:	f001 fe2d 	bl	800f034 <_Bfree>
 800d3da:	9905      	ldr	r1, [sp, #20]
 800d3dc:	4648      	mov	r0, r9
 800d3de:	f001 fe29 	bl	800f034 <_Bfree>
 800d3e2:	4641      	mov	r1, r8
 800d3e4:	4648      	mov	r0, r9
 800d3e6:	f001 fe25 	bl	800f034 <_Bfree>
 800d3ea:	9907      	ldr	r1, [sp, #28]
 800d3ec:	4648      	mov	r0, r9
 800d3ee:	f001 fe21 	bl	800f034 <_Bfree>
 800d3f2:	4621      	mov	r1, r4
 800d3f4:	4648      	mov	r0, r9
 800d3f6:	f001 fe1d 	bl	800f034 <_Bfree>
 800d3fa:	e600      	b.n	800cffe <_strtod_l+0x7e>
 800d3fc:	9a06      	ldr	r2, [sp, #24]
 800d3fe:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800d402:	4293      	cmp	r3, r2
 800d404:	dbba      	blt.n	800d37c <_strtod_l+0x3fc>
 800d406:	4d42      	ldr	r5, [pc, #264]	; (800d510 <_strtod_l+0x590>)
 800d408:	f1c4 040f 	rsb	r4, r4, #15
 800d40c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800d410:	4652      	mov	r2, sl
 800d412:	465b      	mov	r3, fp
 800d414:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d418:	f7f3 f8ee 	bl	80005f8 <__aeabi_dmul>
 800d41c:	9b06      	ldr	r3, [sp, #24]
 800d41e:	1b1c      	subs	r4, r3, r4
 800d420:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800d424:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d428:	e78d      	b.n	800d346 <_strtod_l+0x3c6>
 800d42a:	f113 0f16 	cmn.w	r3, #22
 800d42e:	dba5      	blt.n	800d37c <_strtod_l+0x3fc>
 800d430:	4a37      	ldr	r2, [pc, #220]	; (800d510 <_strtod_l+0x590>)
 800d432:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800d436:	e9d2 2300 	ldrd	r2, r3, [r2]
 800d43a:	4650      	mov	r0, sl
 800d43c:	4659      	mov	r1, fp
 800d43e:	f7f3 fa05 	bl	800084c <__aeabi_ddiv>
 800d442:	e782      	b.n	800d34a <_strtod_l+0x3ca>
 800d444:	2300      	movs	r3, #0
 800d446:	4e33      	ldr	r6, [pc, #204]	; (800d514 <_strtod_l+0x594>)
 800d448:	ea4f 1828 	mov.w	r8, r8, asr #4
 800d44c:	4650      	mov	r0, sl
 800d44e:	4659      	mov	r1, fp
 800d450:	461d      	mov	r5, r3
 800d452:	f1b8 0f01 	cmp.w	r8, #1
 800d456:	dc21      	bgt.n	800d49c <_strtod_l+0x51c>
 800d458:	b10b      	cbz	r3, 800d45e <_strtod_l+0x4de>
 800d45a:	4682      	mov	sl, r0
 800d45c:	468b      	mov	fp, r1
 800d45e:	4b2d      	ldr	r3, [pc, #180]	; (800d514 <_strtod_l+0x594>)
 800d460:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d464:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800d468:	4652      	mov	r2, sl
 800d46a:	465b      	mov	r3, fp
 800d46c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d470:	f7f3 f8c2 	bl	80005f8 <__aeabi_dmul>
 800d474:	4b28      	ldr	r3, [pc, #160]	; (800d518 <_strtod_l+0x598>)
 800d476:	460a      	mov	r2, r1
 800d478:	400b      	ands	r3, r1
 800d47a:	4928      	ldr	r1, [pc, #160]	; (800d51c <_strtod_l+0x59c>)
 800d47c:	428b      	cmp	r3, r1
 800d47e:	4682      	mov	sl, r0
 800d480:	d898      	bhi.n	800d3b4 <_strtod_l+0x434>
 800d482:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d486:	428b      	cmp	r3, r1
 800d488:	bf86      	itte	hi
 800d48a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800d524 <_strtod_l+0x5a4>
 800d48e:	f04f 3aff 	movhi.w	sl, #4294967295
 800d492:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d496:	2300      	movs	r3, #0
 800d498:	9304      	str	r3, [sp, #16]
 800d49a:	e077      	b.n	800d58c <_strtod_l+0x60c>
 800d49c:	f018 0f01 	tst.w	r8, #1
 800d4a0:	d006      	beq.n	800d4b0 <_strtod_l+0x530>
 800d4a2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800d4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4aa:	f7f3 f8a5 	bl	80005f8 <__aeabi_dmul>
 800d4ae:	2301      	movs	r3, #1
 800d4b0:	3501      	adds	r5, #1
 800d4b2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d4b6:	e7cc      	b.n	800d452 <_strtod_l+0x4d2>
 800d4b8:	d0ed      	beq.n	800d496 <_strtod_l+0x516>
 800d4ba:	f1c8 0800 	rsb	r8, r8, #0
 800d4be:	f018 020f 	ands.w	r2, r8, #15
 800d4c2:	d00a      	beq.n	800d4da <_strtod_l+0x55a>
 800d4c4:	4b12      	ldr	r3, [pc, #72]	; (800d510 <_strtod_l+0x590>)
 800d4c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d4ca:	4650      	mov	r0, sl
 800d4cc:	4659      	mov	r1, fp
 800d4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4d2:	f7f3 f9bb 	bl	800084c <__aeabi_ddiv>
 800d4d6:	4682      	mov	sl, r0
 800d4d8:	468b      	mov	fp, r1
 800d4da:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d4de:	d0da      	beq.n	800d496 <_strtod_l+0x516>
 800d4e0:	f1b8 0f1f 	cmp.w	r8, #31
 800d4e4:	dd20      	ble.n	800d528 <_strtod_l+0x5a8>
 800d4e6:	2400      	movs	r4, #0
 800d4e8:	46a0      	mov	r8, r4
 800d4ea:	9407      	str	r4, [sp, #28]
 800d4ec:	9405      	str	r4, [sp, #20]
 800d4ee:	2322      	movs	r3, #34	; 0x22
 800d4f0:	f04f 0a00 	mov.w	sl, #0
 800d4f4:	f04f 0b00 	mov.w	fp, #0
 800d4f8:	f8c9 3000 	str.w	r3, [r9]
 800d4fc:	e765      	b.n	800d3ca <_strtod_l+0x44a>
 800d4fe:	bf00      	nop
 800d500:	0800fc05 	.word	0x0800fc05
 800d504:	0800fc93 	.word	0x0800fc93
 800d508:	0800fc0d 	.word	0x0800fc0d
 800d50c:	0800fc50 	.word	0x0800fc50
 800d510:	0800fcd0 	.word	0x0800fcd0
 800d514:	0800fca8 	.word	0x0800fca8
 800d518:	7ff00000 	.word	0x7ff00000
 800d51c:	7ca00000 	.word	0x7ca00000
 800d520:	fff80000 	.word	0xfff80000
 800d524:	7fefffff 	.word	0x7fefffff
 800d528:	f018 0310 	ands.w	r3, r8, #16
 800d52c:	bf18      	it	ne
 800d52e:	236a      	movne	r3, #106	; 0x6a
 800d530:	4da0      	ldr	r5, [pc, #640]	; (800d7b4 <_strtod_l+0x834>)
 800d532:	9304      	str	r3, [sp, #16]
 800d534:	4650      	mov	r0, sl
 800d536:	4659      	mov	r1, fp
 800d538:	2300      	movs	r3, #0
 800d53a:	f1b8 0f00 	cmp.w	r8, #0
 800d53e:	f300 810a 	bgt.w	800d756 <_strtod_l+0x7d6>
 800d542:	b10b      	cbz	r3, 800d548 <_strtod_l+0x5c8>
 800d544:	4682      	mov	sl, r0
 800d546:	468b      	mov	fp, r1
 800d548:	9b04      	ldr	r3, [sp, #16]
 800d54a:	b1bb      	cbz	r3, 800d57c <_strtod_l+0x5fc>
 800d54c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800d550:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d554:	2b00      	cmp	r3, #0
 800d556:	4659      	mov	r1, fp
 800d558:	dd10      	ble.n	800d57c <_strtod_l+0x5fc>
 800d55a:	2b1f      	cmp	r3, #31
 800d55c:	f340 8107 	ble.w	800d76e <_strtod_l+0x7ee>
 800d560:	2b34      	cmp	r3, #52	; 0x34
 800d562:	bfde      	ittt	le
 800d564:	3b20      	suble	r3, #32
 800d566:	f04f 32ff 	movle.w	r2, #4294967295
 800d56a:	fa02 f303 	lslle.w	r3, r2, r3
 800d56e:	f04f 0a00 	mov.w	sl, #0
 800d572:	bfcc      	ite	gt
 800d574:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800d578:	ea03 0b01 	andle.w	fp, r3, r1
 800d57c:	2200      	movs	r2, #0
 800d57e:	2300      	movs	r3, #0
 800d580:	4650      	mov	r0, sl
 800d582:	4659      	mov	r1, fp
 800d584:	f7f3 faa0 	bl	8000ac8 <__aeabi_dcmpeq>
 800d588:	2800      	cmp	r0, #0
 800d58a:	d1ac      	bne.n	800d4e6 <_strtod_l+0x566>
 800d58c:	9b07      	ldr	r3, [sp, #28]
 800d58e:	9300      	str	r3, [sp, #0]
 800d590:	9a05      	ldr	r2, [sp, #20]
 800d592:	9908      	ldr	r1, [sp, #32]
 800d594:	4623      	mov	r3, r4
 800d596:	4648      	mov	r0, r9
 800d598:	f001 fd9e 	bl	800f0d8 <__s2b>
 800d59c:	9007      	str	r0, [sp, #28]
 800d59e:	2800      	cmp	r0, #0
 800d5a0:	f43f af08 	beq.w	800d3b4 <_strtod_l+0x434>
 800d5a4:	9a06      	ldr	r2, [sp, #24]
 800d5a6:	9b06      	ldr	r3, [sp, #24]
 800d5a8:	2a00      	cmp	r2, #0
 800d5aa:	f1c3 0300 	rsb	r3, r3, #0
 800d5ae:	bfa8      	it	ge
 800d5b0:	2300      	movge	r3, #0
 800d5b2:	930e      	str	r3, [sp, #56]	; 0x38
 800d5b4:	2400      	movs	r4, #0
 800d5b6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d5ba:	9316      	str	r3, [sp, #88]	; 0x58
 800d5bc:	46a0      	mov	r8, r4
 800d5be:	9b07      	ldr	r3, [sp, #28]
 800d5c0:	4648      	mov	r0, r9
 800d5c2:	6859      	ldr	r1, [r3, #4]
 800d5c4:	f001 fd02 	bl	800efcc <_Balloc>
 800d5c8:	9005      	str	r0, [sp, #20]
 800d5ca:	2800      	cmp	r0, #0
 800d5cc:	f43f aef6 	beq.w	800d3bc <_strtod_l+0x43c>
 800d5d0:	9b07      	ldr	r3, [sp, #28]
 800d5d2:	691a      	ldr	r2, [r3, #16]
 800d5d4:	3202      	adds	r2, #2
 800d5d6:	f103 010c 	add.w	r1, r3, #12
 800d5da:	0092      	lsls	r2, r2, #2
 800d5dc:	300c      	adds	r0, #12
 800d5de:	f7fe fd81 	bl	800c0e4 <memcpy>
 800d5e2:	aa1e      	add	r2, sp, #120	; 0x78
 800d5e4:	a91d      	add	r1, sp, #116	; 0x74
 800d5e6:	ec4b ab10 	vmov	d0, sl, fp
 800d5ea:	4648      	mov	r0, r9
 800d5ec:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800d5f0:	f002 f82e 	bl	800f650 <__d2b>
 800d5f4:	901c      	str	r0, [sp, #112]	; 0x70
 800d5f6:	2800      	cmp	r0, #0
 800d5f8:	f43f aee0 	beq.w	800d3bc <_strtod_l+0x43c>
 800d5fc:	2101      	movs	r1, #1
 800d5fe:	4648      	mov	r0, r9
 800d600:	f001 fdf6 	bl	800f1f0 <__i2b>
 800d604:	4680      	mov	r8, r0
 800d606:	2800      	cmp	r0, #0
 800d608:	f43f aed8 	beq.w	800d3bc <_strtod_l+0x43c>
 800d60c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800d60e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d610:	2e00      	cmp	r6, #0
 800d612:	bfab      	itete	ge
 800d614:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800d616:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800d618:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800d61a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800d61c:	bfac      	ite	ge
 800d61e:	18f7      	addge	r7, r6, r3
 800d620:	1b9d      	sublt	r5, r3, r6
 800d622:	9b04      	ldr	r3, [sp, #16]
 800d624:	1af6      	subs	r6, r6, r3
 800d626:	4416      	add	r6, r2
 800d628:	4b63      	ldr	r3, [pc, #396]	; (800d7b8 <_strtod_l+0x838>)
 800d62a:	3e01      	subs	r6, #1
 800d62c:	429e      	cmp	r6, r3
 800d62e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d632:	f280 80af 	bge.w	800d794 <_strtod_l+0x814>
 800d636:	1b9b      	subs	r3, r3, r6
 800d638:	2b1f      	cmp	r3, #31
 800d63a:	eba2 0203 	sub.w	r2, r2, r3
 800d63e:	f04f 0101 	mov.w	r1, #1
 800d642:	f300 809b 	bgt.w	800d77c <_strtod_l+0x7fc>
 800d646:	fa01 f303 	lsl.w	r3, r1, r3
 800d64a:	930f      	str	r3, [sp, #60]	; 0x3c
 800d64c:	2300      	movs	r3, #0
 800d64e:	930a      	str	r3, [sp, #40]	; 0x28
 800d650:	18be      	adds	r6, r7, r2
 800d652:	9b04      	ldr	r3, [sp, #16]
 800d654:	42b7      	cmp	r7, r6
 800d656:	4415      	add	r5, r2
 800d658:	441d      	add	r5, r3
 800d65a:	463b      	mov	r3, r7
 800d65c:	bfa8      	it	ge
 800d65e:	4633      	movge	r3, r6
 800d660:	42ab      	cmp	r3, r5
 800d662:	bfa8      	it	ge
 800d664:	462b      	movge	r3, r5
 800d666:	2b00      	cmp	r3, #0
 800d668:	bfc2      	ittt	gt
 800d66a:	1af6      	subgt	r6, r6, r3
 800d66c:	1aed      	subgt	r5, r5, r3
 800d66e:	1aff      	subgt	r7, r7, r3
 800d670:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d672:	b1bb      	cbz	r3, 800d6a4 <_strtod_l+0x724>
 800d674:	4641      	mov	r1, r8
 800d676:	461a      	mov	r2, r3
 800d678:	4648      	mov	r0, r9
 800d67a:	f001 fe59 	bl	800f330 <__pow5mult>
 800d67e:	4680      	mov	r8, r0
 800d680:	2800      	cmp	r0, #0
 800d682:	f43f ae9b 	beq.w	800d3bc <_strtod_l+0x43c>
 800d686:	4601      	mov	r1, r0
 800d688:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d68a:	4648      	mov	r0, r9
 800d68c:	f001 fdb9 	bl	800f202 <__multiply>
 800d690:	900c      	str	r0, [sp, #48]	; 0x30
 800d692:	2800      	cmp	r0, #0
 800d694:	f43f ae92 	beq.w	800d3bc <_strtod_l+0x43c>
 800d698:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d69a:	4648      	mov	r0, r9
 800d69c:	f001 fcca 	bl	800f034 <_Bfree>
 800d6a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d6a2:	931c      	str	r3, [sp, #112]	; 0x70
 800d6a4:	2e00      	cmp	r6, #0
 800d6a6:	dc7a      	bgt.n	800d79e <_strtod_l+0x81e>
 800d6a8:	9b06      	ldr	r3, [sp, #24]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	dd08      	ble.n	800d6c0 <_strtod_l+0x740>
 800d6ae:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d6b0:	9905      	ldr	r1, [sp, #20]
 800d6b2:	4648      	mov	r0, r9
 800d6b4:	f001 fe3c 	bl	800f330 <__pow5mult>
 800d6b8:	9005      	str	r0, [sp, #20]
 800d6ba:	2800      	cmp	r0, #0
 800d6bc:	f43f ae7e 	beq.w	800d3bc <_strtod_l+0x43c>
 800d6c0:	2d00      	cmp	r5, #0
 800d6c2:	dd08      	ble.n	800d6d6 <_strtod_l+0x756>
 800d6c4:	462a      	mov	r2, r5
 800d6c6:	9905      	ldr	r1, [sp, #20]
 800d6c8:	4648      	mov	r0, r9
 800d6ca:	f001 fe7f 	bl	800f3cc <__lshift>
 800d6ce:	9005      	str	r0, [sp, #20]
 800d6d0:	2800      	cmp	r0, #0
 800d6d2:	f43f ae73 	beq.w	800d3bc <_strtod_l+0x43c>
 800d6d6:	2f00      	cmp	r7, #0
 800d6d8:	dd08      	ble.n	800d6ec <_strtod_l+0x76c>
 800d6da:	4641      	mov	r1, r8
 800d6dc:	463a      	mov	r2, r7
 800d6de:	4648      	mov	r0, r9
 800d6e0:	f001 fe74 	bl	800f3cc <__lshift>
 800d6e4:	4680      	mov	r8, r0
 800d6e6:	2800      	cmp	r0, #0
 800d6e8:	f43f ae68 	beq.w	800d3bc <_strtod_l+0x43c>
 800d6ec:	9a05      	ldr	r2, [sp, #20]
 800d6ee:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d6f0:	4648      	mov	r0, r9
 800d6f2:	f001 fed9 	bl	800f4a8 <__mdiff>
 800d6f6:	4604      	mov	r4, r0
 800d6f8:	2800      	cmp	r0, #0
 800d6fa:	f43f ae5f 	beq.w	800d3bc <_strtod_l+0x43c>
 800d6fe:	68c3      	ldr	r3, [r0, #12]
 800d700:	930c      	str	r3, [sp, #48]	; 0x30
 800d702:	2300      	movs	r3, #0
 800d704:	60c3      	str	r3, [r0, #12]
 800d706:	4641      	mov	r1, r8
 800d708:	f001 feb4 	bl	800f474 <__mcmp>
 800d70c:	2800      	cmp	r0, #0
 800d70e:	da55      	bge.n	800d7bc <_strtod_l+0x83c>
 800d710:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d712:	b9e3      	cbnz	r3, 800d74e <_strtod_l+0x7ce>
 800d714:	f1ba 0f00 	cmp.w	sl, #0
 800d718:	d119      	bne.n	800d74e <_strtod_l+0x7ce>
 800d71a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d71e:	b9b3      	cbnz	r3, 800d74e <_strtod_l+0x7ce>
 800d720:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d724:	0d1b      	lsrs	r3, r3, #20
 800d726:	051b      	lsls	r3, r3, #20
 800d728:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d72c:	d90f      	bls.n	800d74e <_strtod_l+0x7ce>
 800d72e:	6963      	ldr	r3, [r4, #20]
 800d730:	b913      	cbnz	r3, 800d738 <_strtod_l+0x7b8>
 800d732:	6923      	ldr	r3, [r4, #16]
 800d734:	2b01      	cmp	r3, #1
 800d736:	dd0a      	ble.n	800d74e <_strtod_l+0x7ce>
 800d738:	4621      	mov	r1, r4
 800d73a:	2201      	movs	r2, #1
 800d73c:	4648      	mov	r0, r9
 800d73e:	f001 fe45 	bl	800f3cc <__lshift>
 800d742:	4641      	mov	r1, r8
 800d744:	4604      	mov	r4, r0
 800d746:	f001 fe95 	bl	800f474 <__mcmp>
 800d74a:	2800      	cmp	r0, #0
 800d74c:	dc67      	bgt.n	800d81e <_strtod_l+0x89e>
 800d74e:	9b04      	ldr	r3, [sp, #16]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d171      	bne.n	800d838 <_strtod_l+0x8b8>
 800d754:	e63d      	b.n	800d3d2 <_strtod_l+0x452>
 800d756:	f018 0f01 	tst.w	r8, #1
 800d75a:	d004      	beq.n	800d766 <_strtod_l+0x7e6>
 800d75c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d760:	f7f2 ff4a 	bl	80005f8 <__aeabi_dmul>
 800d764:	2301      	movs	r3, #1
 800d766:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d76a:	3508      	adds	r5, #8
 800d76c:	e6e5      	b.n	800d53a <_strtod_l+0x5ba>
 800d76e:	f04f 32ff 	mov.w	r2, #4294967295
 800d772:	fa02 f303 	lsl.w	r3, r2, r3
 800d776:	ea03 0a0a 	and.w	sl, r3, sl
 800d77a:	e6ff      	b.n	800d57c <_strtod_l+0x5fc>
 800d77c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800d780:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800d784:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800d788:	36e2      	adds	r6, #226	; 0xe2
 800d78a:	fa01 f306 	lsl.w	r3, r1, r6
 800d78e:	930a      	str	r3, [sp, #40]	; 0x28
 800d790:	910f      	str	r1, [sp, #60]	; 0x3c
 800d792:	e75d      	b.n	800d650 <_strtod_l+0x6d0>
 800d794:	2300      	movs	r3, #0
 800d796:	930a      	str	r3, [sp, #40]	; 0x28
 800d798:	2301      	movs	r3, #1
 800d79a:	930f      	str	r3, [sp, #60]	; 0x3c
 800d79c:	e758      	b.n	800d650 <_strtod_l+0x6d0>
 800d79e:	4632      	mov	r2, r6
 800d7a0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d7a2:	4648      	mov	r0, r9
 800d7a4:	f001 fe12 	bl	800f3cc <__lshift>
 800d7a8:	901c      	str	r0, [sp, #112]	; 0x70
 800d7aa:	2800      	cmp	r0, #0
 800d7ac:	f47f af7c 	bne.w	800d6a8 <_strtod_l+0x728>
 800d7b0:	e604      	b.n	800d3bc <_strtod_l+0x43c>
 800d7b2:	bf00      	nop
 800d7b4:	0800fc68 	.word	0x0800fc68
 800d7b8:	fffffc02 	.word	0xfffffc02
 800d7bc:	465d      	mov	r5, fp
 800d7be:	f040 8086 	bne.w	800d8ce <_strtod_l+0x94e>
 800d7c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d7c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d7c8:	b32a      	cbz	r2, 800d816 <_strtod_l+0x896>
 800d7ca:	4aaf      	ldr	r2, [pc, #700]	; (800da88 <_strtod_l+0xb08>)
 800d7cc:	4293      	cmp	r3, r2
 800d7ce:	d153      	bne.n	800d878 <_strtod_l+0x8f8>
 800d7d0:	9b04      	ldr	r3, [sp, #16]
 800d7d2:	4650      	mov	r0, sl
 800d7d4:	b1d3      	cbz	r3, 800d80c <_strtod_l+0x88c>
 800d7d6:	4aad      	ldr	r2, [pc, #692]	; (800da8c <_strtod_l+0xb0c>)
 800d7d8:	402a      	ands	r2, r5
 800d7da:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800d7de:	f04f 31ff 	mov.w	r1, #4294967295
 800d7e2:	d816      	bhi.n	800d812 <_strtod_l+0x892>
 800d7e4:	0d12      	lsrs	r2, r2, #20
 800d7e6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d7ea:	fa01 f303 	lsl.w	r3, r1, r3
 800d7ee:	4298      	cmp	r0, r3
 800d7f0:	d142      	bne.n	800d878 <_strtod_l+0x8f8>
 800d7f2:	4ba7      	ldr	r3, [pc, #668]	; (800da90 <_strtod_l+0xb10>)
 800d7f4:	429d      	cmp	r5, r3
 800d7f6:	d102      	bne.n	800d7fe <_strtod_l+0x87e>
 800d7f8:	3001      	adds	r0, #1
 800d7fa:	f43f addf 	beq.w	800d3bc <_strtod_l+0x43c>
 800d7fe:	4ba3      	ldr	r3, [pc, #652]	; (800da8c <_strtod_l+0xb0c>)
 800d800:	402b      	ands	r3, r5
 800d802:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800d806:	f04f 0a00 	mov.w	sl, #0
 800d80a:	e7a0      	b.n	800d74e <_strtod_l+0x7ce>
 800d80c:	f04f 33ff 	mov.w	r3, #4294967295
 800d810:	e7ed      	b.n	800d7ee <_strtod_l+0x86e>
 800d812:	460b      	mov	r3, r1
 800d814:	e7eb      	b.n	800d7ee <_strtod_l+0x86e>
 800d816:	bb7b      	cbnz	r3, 800d878 <_strtod_l+0x8f8>
 800d818:	f1ba 0f00 	cmp.w	sl, #0
 800d81c:	d12c      	bne.n	800d878 <_strtod_l+0x8f8>
 800d81e:	9904      	ldr	r1, [sp, #16]
 800d820:	4a9a      	ldr	r2, [pc, #616]	; (800da8c <_strtod_l+0xb0c>)
 800d822:	465b      	mov	r3, fp
 800d824:	b1f1      	cbz	r1, 800d864 <_strtod_l+0x8e4>
 800d826:	ea02 010b 	and.w	r1, r2, fp
 800d82a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d82e:	dc19      	bgt.n	800d864 <_strtod_l+0x8e4>
 800d830:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d834:	f77f ae5b 	ble.w	800d4ee <_strtod_l+0x56e>
 800d838:	4a96      	ldr	r2, [pc, #600]	; (800da94 <_strtod_l+0xb14>)
 800d83a:	2300      	movs	r3, #0
 800d83c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800d840:	4650      	mov	r0, sl
 800d842:	4659      	mov	r1, fp
 800d844:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d848:	f7f2 fed6 	bl	80005f8 <__aeabi_dmul>
 800d84c:	4682      	mov	sl, r0
 800d84e:	468b      	mov	fp, r1
 800d850:	2900      	cmp	r1, #0
 800d852:	f47f adbe 	bne.w	800d3d2 <_strtod_l+0x452>
 800d856:	2800      	cmp	r0, #0
 800d858:	f47f adbb 	bne.w	800d3d2 <_strtod_l+0x452>
 800d85c:	2322      	movs	r3, #34	; 0x22
 800d85e:	f8c9 3000 	str.w	r3, [r9]
 800d862:	e5b6      	b.n	800d3d2 <_strtod_l+0x452>
 800d864:	4013      	ands	r3, r2
 800d866:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d86a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d86e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d872:	f04f 3aff 	mov.w	sl, #4294967295
 800d876:	e76a      	b.n	800d74e <_strtod_l+0x7ce>
 800d878:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d87a:	b193      	cbz	r3, 800d8a2 <_strtod_l+0x922>
 800d87c:	422b      	tst	r3, r5
 800d87e:	f43f af66 	beq.w	800d74e <_strtod_l+0x7ce>
 800d882:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d884:	9a04      	ldr	r2, [sp, #16]
 800d886:	4650      	mov	r0, sl
 800d888:	4659      	mov	r1, fp
 800d88a:	b173      	cbz	r3, 800d8aa <_strtod_l+0x92a>
 800d88c:	f7ff fb5a 	bl	800cf44 <sulp>
 800d890:	4602      	mov	r2, r0
 800d892:	460b      	mov	r3, r1
 800d894:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d898:	f7f2 fcf8 	bl	800028c <__adddf3>
 800d89c:	4682      	mov	sl, r0
 800d89e:	468b      	mov	fp, r1
 800d8a0:	e755      	b.n	800d74e <_strtod_l+0x7ce>
 800d8a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d8a4:	ea13 0f0a 	tst.w	r3, sl
 800d8a8:	e7e9      	b.n	800d87e <_strtod_l+0x8fe>
 800d8aa:	f7ff fb4b 	bl	800cf44 <sulp>
 800d8ae:	4602      	mov	r2, r0
 800d8b0:	460b      	mov	r3, r1
 800d8b2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d8b6:	f7f2 fce7 	bl	8000288 <__aeabi_dsub>
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	2300      	movs	r3, #0
 800d8be:	4682      	mov	sl, r0
 800d8c0:	468b      	mov	fp, r1
 800d8c2:	f7f3 f901 	bl	8000ac8 <__aeabi_dcmpeq>
 800d8c6:	2800      	cmp	r0, #0
 800d8c8:	f47f ae11 	bne.w	800d4ee <_strtod_l+0x56e>
 800d8cc:	e73f      	b.n	800d74e <_strtod_l+0x7ce>
 800d8ce:	4641      	mov	r1, r8
 800d8d0:	4620      	mov	r0, r4
 800d8d2:	f001 ff0c 	bl	800f6ee <__ratio>
 800d8d6:	ec57 6b10 	vmov	r6, r7, d0
 800d8da:	2200      	movs	r2, #0
 800d8dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d8e0:	ee10 0a10 	vmov	r0, s0
 800d8e4:	4639      	mov	r1, r7
 800d8e6:	f7f3 f903 	bl	8000af0 <__aeabi_dcmple>
 800d8ea:	2800      	cmp	r0, #0
 800d8ec:	d077      	beq.n	800d9de <_strtod_l+0xa5e>
 800d8ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d04a      	beq.n	800d98a <_strtod_l+0xa0a>
 800d8f4:	4b68      	ldr	r3, [pc, #416]	; (800da98 <_strtod_l+0xb18>)
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800d8fc:	4f66      	ldr	r7, [pc, #408]	; (800da98 <_strtod_l+0xb18>)
 800d8fe:	2600      	movs	r6, #0
 800d900:	4b62      	ldr	r3, [pc, #392]	; (800da8c <_strtod_l+0xb0c>)
 800d902:	402b      	ands	r3, r5
 800d904:	930f      	str	r3, [sp, #60]	; 0x3c
 800d906:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d908:	4b64      	ldr	r3, [pc, #400]	; (800da9c <_strtod_l+0xb1c>)
 800d90a:	429a      	cmp	r2, r3
 800d90c:	f040 80ce 	bne.w	800daac <_strtod_l+0xb2c>
 800d910:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d914:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d918:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800d91c:	ec4b ab10 	vmov	d0, sl, fp
 800d920:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800d924:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800d928:	f001 fe1c 	bl	800f564 <__ulp>
 800d92c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d930:	ec53 2b10 	vmov	r2, r3, d0
 800d934:	f7f2 fe60 	bl	80005f8 <__aeabi_dmul>
 800d938:	4652      	mov	r2, sl
 800d93a:	465b      	mov	r3, fp
 800d93c:	f7f2 fca6 	bl	800028c <__adddf3>
 800d940:	460b      	mov	r3, r1
 800d942:	4952      	ldr	r1, [pc, #328]	; (800da8c <_strtod_l+0xb0c>)
 800d944:	4a56      	ldr	r2, [pc, #344]	; (800daa0 <_strtod_l+0xb20>)
 800d946:	4019      	ands	r1, r3
 800d948:	4291      	cmp	r1, r2
 800d94a:	4682      	mov	sl, r0
 800d94c:	d95b      	bls.n	800da06 <_strtod_l+0xa86>
 800d94e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d950:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d954:	4293      	cmp	r3, r2
 800d956:	d103      	bne.n	800d960 <_strtod_l+0x9e0>
 800d958:	9b08      	ldr	r3, [sp, #32]
 800d95a:	3301      	adds	r3, #1
 800d95c:	f43f ad2e 	beq.w	800d3bc <_strtod_l+0x43c>
 800d960:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800da90 <_strtod_l+0xb10>
 800d964:	f04f 3aff 	mov.w	sl, #4294967295
 800d968:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d96a:	4648      	mov	r0, r9
 800d96c:	f001 fb62 	bl	800f034 <_Bfree>
 800d970:	9905      	ldr	r1, [sp, #20]
 800d972:	4648      	mov	r0, r9
 800d974:	f001 fb5e 	bl	800f034 <_Bfree>
 800d978:	4641      	mov	r1, r8
 800d97a:	4648      	mov	r0, r9
 800d97c:	f001 fb5a 	bl	800f034 <_Bfree>
 800d980:	4621      	mov	r1, r4
 800d982:	4648      	mov	r0, r9
 800d984:	f001 fb56 	bl	800f034 <_Bfree>
 800d988:	e619      	b.n	800d5be <_strtod_l+0x63e>
 800d98a:	f1ba 0f00 	cmp.w	sl, #0
 800d98e:	d11a      	bne.n	800d9c6 <_strtod_l+0xa46>
 800d990:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d994:	b9eb      	cbnz	r3, 800d9d2 <_strtod_l+0xa52>
 800d996:	2200      	movs	r2, #0
 800d998:	4b3f      	ldr	r3, [pc, #252]	; (800da98 <_strtod_l+0xb18>)
 800d99a:	4630      	mov	r0, r6
 800d99c:	4639      	mov	r1, r7
 800d99e:	f7f3 f89d 	bl	8000adc <__aeabi_dcmplt>
 800d9a2:	b9c8      	cbnz	r0, 800d9d8 <_strtod_l+0xa58>
 800d9a4:	4630      	mov	r0, r6
 800d9a6:	4639      	mov	r1, r7
 800d9a8:	2200      	movs	r2, #0
 800d9aa:	4b3e      	ldr	r3, [pc, #248]	; (800daa4 <_strtod_l+0xb24>)
 800d9ac:	f7f2 fe24 	bl	80005f8 <__aeabi_dmul>
 800d9b0:	4606      	mov	r6, r0
 800d9b2:	460f      	mov	r7, r1
 800d9b4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800d9b8:	9618      	str	r6, [sp, #96]	; 0x60
 800d9ba:	9319      	str	r3, [sp, #100]	; 0x64
 800d9bc:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800d9c0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800d9c4:	e79c      	b.n	800d900 <_strtod_l+0x980>
 800d9c6:	f1ba 0f01 	cmp.w	sl, #1
 800d9ca:	d102      	bne.n	800d9d2 <_strtod_l+0xa52>
 800d9cc:	2d00      	cmp	r5, #0
 800d9ce:	f43f ad8e 	beq.w	800d4ee <_strtod_l+0x56e>
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	4b34      	ldr	r3, [pc, #208]	; (800daa8 <_strtod_l+0xb28>)
 800d9d6:	e78f      	b.n	800d8f8 <_strtod_l+0x978>
 800d9d8:	2600      	movs	r6, #0
 800d9da:	4f32      	ldr	r7, [pc, #200]	; (800daa4 <_strtod_l+0xb24>)
 800d9dc:	e7ea      	b.n	800d9b4 <_strtod_l+0xa34>
 800d9de:	4b31      	ldr	r3, [pc, #196]	; (800daa4 <_strtod_l+0xb24>)
 800d9e0:	4630      	mov	r0, r6
 800d9e2:	4639      	mov	r1, r7
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	f7f2 fe07 	bl	80005f8 <__aeabi_dmul>
 800d9ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d9ec:	4606      	mov	r6, r0
 800d9ee:	460f      	mov	r7, r1
 800d9f0:	b933      	cbnz	r3, 800da00 <_strtod_l+0xa80>
 800d9f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d9f6:	9010      	str	r0, [sp, #64]	; 0x40
 800d9f8:	9311      	str	r3, [sp, #68]	; 0x44
 800d9fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d9fe:	e7df      	b.n	800d9c0 <_strtod_l+0xa40>
 800da00:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800da04:	e7f9      	b.n	800d9fa <_strtod_l+0xa7a>
 800da06:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800da0a:	9b04      	ldr	r3, [sp, #16]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d1ab      	bne.n	800d968 <_strtod_l+0x9e8>
 800da10:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800da14:	0d1b      	lsrs	r3, r3, #20
 800da16:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800da18:	051b      	lsls	r3, r3, #20
 800da1a:	429a      	cmp	r2, r3
 800da1c:	465d      	mov	r5, fp
 800da1e:	d1a3      	bne.n	800d968 <_strtod_l+0x9e8>
 800da20:	4639      	mov	r1, r7
 800da22:	4630      	mov	r0, r6
 800da24:	f7f3 f898 	bl	8000b58 <__aeabi_d2iz>
 800da28:	f7f2 fd7c 	bl	8000524 <__aeabi_i2d>
 800da2c:	460b      	mov	r3, r1
 800da2e:	4602      	mov	r2, r0
 800da30:	4639      	mov	r1, r7
 800da32:	4630      	mov	r0, r6
 800da34:	f7f2 fc28 	bl	8000288 <__aeabi_dsub>
 800da38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800da3a:	4606      	mov	r6, r0
 800da3c:	460f      	mov	r7, r1
 800da3e:	b933      	cbnz	r3, 800da4e <_strtod_l+0xace>
 800da40:	f1ba 0f00 	cmp.w	sl, #0
 800da44:	d103      	bne.n	800da4e <_strtod_l+0xace>
 800da46:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800da4a:	2d00      	cmp	r5, #0
 800da4c:	d06d      	beq.n	800db2a <_strtod_l+0xbaa>
 800da4e:	a30a      	add	r3, pc, #40	; (adr r3, 800da78 <_strtod_l+0xaf8>)
 800da50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da54:	4630      	mov	r0, r6
 800da56:	4639      	mov	r1, r7
 800da58:	f7f3 f840 	bl	8000adc <__aeabi_dcmplt>
 800da5c:	2800      	cmp	r0, #0
 800da5e:	f47f acb8 	bne.w	800d3d2 <_strtod_l+0x452>
 800da62:	a307      	add	r3, pc, #28	; (adr r3, 800da80 <_strtod_l+0xb00>)
 800da64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da68:	4630      	mov	r0, r6
 800da6a:	4639      	mov	r1, r7
 800da6c:	f7f3 f854 	bl	8000b18 <__aeabi_dcmpgt>
 800da70:	2800      	cmp	r0, #0
 800da72:	f43f af79 	beq.w	800d968 <_strtod_l+0x9e8>
 800da76:	e4ac      	b.n	800d3d2 <_strtod_l+0x452>
 800da78:	94a03595 	.word	0x94a03595
 800da7c:	3fdfffff 	.word	0x3fdfffff
 800da80:	35afe535 	.word	0x35afe535
 800da84:	3fe00000 	.word	0x3fe00000
 800da88:	000fffff 	.word	0x000fffff
 800da8c:	7ff00000 	.word	0x7ff00000
 800da90:	7fefffff 	.word	0x7fefffff
 800da94:	39500000 	.word	0x39500000
 800da98:	3ff00000 	.word	0x3ff00000
 800da9c:	7fe00000 	.word	0x7fe00000
 800daa0:	7c9fffff 	.word	0x7c9fffff
 800daa4:	3fe00000 	.word	0x3fe00000
 800daa8:	bff00000 	.word	0xbff00000
 800daac:	9b04      	ldr	r3, [sp, #16]
 800daae:	b333      	cbz	r3, 800dafe <_strtod_l+0xb7e>
 800dab0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dab2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800dab6:	d822      	bhi.n	800dafe <_strtod_l+0xb7e>
 800dab8:	a327      	add	r3, pc, #156	; (adr r3, 800db58 <_strtod_l+0xbd8>)
 800daba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dabe:	4630      	mov	r0, r6
 800dac0:	4639      	mov	r1, r7
 800dac2:	f7f3 f815 	bl	8000af0 <__aeabi_dcmple>
 800dac6:	b1a0      	cbz	r0, 800daf2 <_strtod_l+0xb72>
 800dac8:	4639      	mov	r1, r7
 800daca:	4630      	mov	r0, r6
 800dacc:	f7f3 f86c 	bl	8000ba8 <__aeabi_d2uiz>
 800dad0:	2800      	cmp	r0, #0
 800dad2:	bf08      	it	eq
 800dad4:	2001      	moveq	r0, #1
 800dad6:	f7f2 fd15 	bl	8000504 <__aeabi_ui2d>
 800dada:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dadc:	4606      	mov	r6, r0
 800dade:	460f      	mov	r7, r1
 800dae0:	bb03      	cbnz	r3, 800db24 <_strtod_l+0xba4>
 800dae2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dae6:	9012      	str	r0, [sp, #72]	; 0x48
 800dae8:	9313      	str	r3, [sp, #76]	; 0x4c
 800daea:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800daee:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800daf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800daf4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800daf6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800dafa:	1a9b      	subs	r3, r3, r2
 800dafc:	930b      	str	r3, [sp, #44]	; 0x2c
 800dafe:	ed9d 0b08 	vldr	d0, [sp, #32]
 800db02:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800db06:	f001 fd2d 	bl	800f564 <__ulp>
 800db0a:	4650      	mov	r0, sl
 800db0c:	ec53 2b10 	vmov	r2, r3, d0
 800db10:	4659      	mov	r1, fp
 800db12:	f7f2 fd71 	bl	80005f8 <__aeabi_dmul>
 800db16:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800db1a:	f7f2 fbb7 	bl	800028c <__adddf3>
 800db1e:	4682      	mov	sl, r0
 800db20:	468b      	mov	fp, r1
 800db22:	e772      	b.n	800da0a <_strtod_l+0xa8a>
 800db24:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800db28:	e7df      	b.n	800daea <_strtod_l+0xb6a>
 800db2a:	a30d      	add	r3, pc, #52	; (adr r3, 800db60 <_strtod_l+0xbe0>)
 800db2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db30:	f7f2 ffd4 	bl	8000adc <__aeabi_dcmplt>
 800db34:	e79c      	b.n	800da70 <_strtod_l+0xaf0>
 800db36:	2300      	movs	r3, #0
 800db38:	930d      	str	r3, [sp, #52]	; 0x34
 800db3a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800db3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800db3e:	6013      	str	r3, [r2, #0]
 800db40:	f7ff ba61 	b.w	800d006 <_strtod_l+0x86>
 800db44:	2b65      	cmp	r3, #101	; 0x65
 800db46:	f04f 0200 	mov.w	r2, #0
 800db4a:	f43f ab4e 	beq.w	800d1ea <_strtod_l+0x26a>
 800db4e:	2101      	movs	r1, #1
 800db50:	4614      	mov	r4, r2
 800db52:	9104      	str	r1, [sp, #16]
 800db54:	f7ff bacb 	b.w	800d0ee <_strtod_l+0x16e>
 800db58:	ffc00000 	.word	0xffc00000
 800db5c:	41dfffff 	.word	0x41dfffff
 800db60:	94a03595 	.word	0x94a03595
 800db64:	3fcfffff 	.word	0x3fcfffff

0800db68 <_strtod_r>:
 800db68:	4b05      	ldr	r3, [pc, #20]	; (800db80 <_strtod_r+0x18>)
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	b410      	push	{r4}
 800db6e:	6a1b      	ldr	r3, [r3, #32]
 800db70:	4c04      	ldr	r4, [pc, #16]	; (800db84 <_strtod_r+0x1c>)
 800db72:	2b00      	cmp	r3, #0
 800db74:	bf08      	it	eq
 800db76:	4623      	moveq	r3, r4
 800db78:	f85d 4b04 	ldr.w	r4, [sp], #4
 800db7c:	f7ff ba00 	b.w	800cf80 <_strtod_l>
 800db80:	20000180 	.word	0x20000180
 800db84:	200001e4 	.word	0x200001e4

0800db88 <_strtol_l.isra.0>:
 800db88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db8c:	4680      	mov	r8, r0
 800db8e:	4689      	mov	r9, r1
 800db90:	4692      	mov	sl, r2
 800db92:	461e      	mov	r6, r3
 800db94:	460f      	mov	r7, r1
 800db96:	463d      	mov	r5, r7
 800db98:	9808      	ldr	r0, [sp, #32]
 800db9a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800db9e:	f001 f9ed 	bl	800ef7c <__locale_ctype_ptr_l>
 800dba2:	4420      	add	r0, r4
 800dba4:	7843      	ldrb	r3, [r0, #1]
 800dba6:	f013 0308 	ands.w	r3, r3, #8
 800dbaa:	d132      	bne.n	800dc12 <_strtol_l.isra.0+0x8a>
 800dbac:	2c2d      	cmp	r4, #45	; 0x2d
 800dbae:	d132      	bne.n	800dc16 <_strtol_l.isra.0+0x8e>
 800dbb0:	787c      	ldrb	r4, [r7, #1]
 800dbb2:	1cbd      	adds	r5, r7, #2
 800dbb4:	2201      	movs	r2, #1
 800dbb6:	2e00      	cmp	r6, #0
 800dbb8:	d05d      	beq.n	800dc76 <_strtol_l.isra.0+0xee>
 800dbba:	2e10      	cmp	r6, #16
 800dbbc:	d109      	bne.n	800dbd2 <_strtol_l.isra.0+0x4a>
 800dbbe:	2c30      	cmp	r4, #48	; 0x30
 800dbc0:	d107      	bne.n	800dbd2 <_strtol_l.isra.0+0x4a>
 800dbc2:	782b      	ldrb	r3, [r5, #0]
 800dbc4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800dbc8:	2b58      	cmp	r3, #88	; 0x58
 800dbca:	d14f      	bne.n	800dc6c <_strtol_l.isra.0+0xe4>
 800dbcc:	786c      	ldrb	r4, [r5, #1]
 800dbce:	2610      	movs	r6, #16
 800dbd0:	3502      	adds	r5, #2
 800dbd2:	2a00      	cmp	r2, #0
 800dbd4:	bf14      	ite	ne
 800dbd6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800dbda:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800dbde:	2700      	movs	r7, #0
 800dbe0:	fbb1 fcf6 	udiv	ip, r1, r6
 800dbe4:	4638      	mov	r0, r7
 800dbe6:	fb06 1e1c 	mls	lr, r6, ip, r1
 800dbea:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800dbee:	2b09      	cmp	r3, #9
 800dbf0:	d817      	bhi.n	800dc22 <_strtol_l.isra.0+0x9a>
 800dbf2:	461c      	mov	r4, r3
 800dbf4:	42a6      	cmp	r6, r4
 800dbf6:	dd23      	ble.n	800dc40 <_strtol_l.isra.0+0xb8>
 800dbf8:	1c7b      	adds	r3, r7, #1
 800dbfa:	d007      	beq.n	800dc0c <_strtol_l.isra.0+0x84>
 800dbfc:	4584      	cmp	ip, r0
 800dbfe:	d31c      	bcc.n	800dc3a <_strtol_l.isra.0+0xb2>
 800dc00:	d101      	bne.n	800dc06 <_strtol_l.isra.0+0x7e>
 800dc02:	45a6      	cmp	lr, r4
 800dc04:	db19      	blt.n	800dc3a <_strtol_l.isra.0+0xb2>
 800dc06:	fb00 4006 	mla	r0, r0, r6, r4
 800dc0a:	2701      	movs	r7, #1
 800dc0c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dc10:	e7eb      	b.n	800dbea <_strtol_l.isra.0+0x62>
 800dc12:	462f      	mov	r7, r5
 800dc14:	e7bf      	b.n	800db96 <_strtol_l.isra.0+0xe>
 800dc16:	2c2b      	cmp	r4, #43	; 0x2b
 800dc18:	bf04      	itt	eq
 800dc1a:	1cbd      	addeq	r5, r7, #2
 800dc1c:	787c      	ldrbeq	r4, [r7, #1]
 800dc1e:	461a      	mov	r2, r3
 800dc20:	e7c9      	b.n	800dbb6 <_strtol_l.isra.0+0x2e>
 800dc22:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800dc26:	2b19      	cmp	r3, #25
 800dc28:	d801      	bhi.n	800dc2e <_strtol_l.isra.0+0xa6>
 800dc2a:	3c37      	subs	r4, #55	; 0x37
 800dc2c:	e7e2      	b.n	800dbf4 <_strtol_l.isra.0+0x6c>
 800dc2e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800dc32:	2b19      	cmp	r3, #25
 800dc34:	d804      	bhi.n	800dc40 <_strtol_l.isra.0+0xb8>
 800dc36:	3c57      	subs	r4, #87	; 0x57
 800dc38:	e7dc      	b.n	800dbf4 <_strtol_l.isra.0+0x6c>
 800dc3a:	f04f 37ff 	mov.w	r7, #4294967295
 800dc3e:	e7e5      	b.n	800dc0c <_strtol_l.isra.0+0x84>
 800dc40:	1c7b      	adds	r3, r7, #1
 800dc42:	d108      	bne.n	800dc56 <_strtol_l.isra.0+0xce>
 800dc44:	2322      	movs	r3, #34	; 0x22
 800dc46:	f8c8 3000 	str.w	r3, [r8]
 800dc4a:	4608      	mov	r0, r1
 800dc4c:	f1ba 0f00 	cmp.w	sl, #0
 800dc50:	d107      	bne.n	800dc62 <_strtol_l.isra.0+0xda>
 800dc52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc56:	b102      	cbz	r2, 800dc5a <_strtol_l.isra.0+0xd2>
 800dc58:	4240      	negs	r0, r0
 800dc5a:	f1ba 0f00 	cmp.w	sl, #0
 800dc5e:	d0f8      	beq.n	800dc52 <_strtol_l.isra.0+0xca>
 800dc60:	b10f      	cbz	r7, 800dc66 <_strtol_l.isra.0+0xde>
 800dc62:	f105 39ff 	add.w	r9, r5, #4294967295
 800dc66:	f8ca 9000 	str.w	r9, [sl]
 800dc6a:	e7f2      	b.n	800dc52 <_strtol_l.isra.0+0xca>
 800dc6c:	2430      	movs	r4, #48	; 0x30
 800dc6e:	2e00      	cmp	r6, #0
 800dc70:	d1af      	bne.n	800dbd2 <_strtol_l.isra.0+0x4a>
 800dc72:	2608      	movs	r6, #8
 800dc74:	e7ad      	b.n	800dbd2 <_strtol_l.isra.0+0x4a>
 800dc76:	2c30      	cmp	r4, #48	; 0x30
 800dc78:	d0a3      	beq.n	800dbc2 <_strtol_l.isra.0+0x3a>
 800dc7a:	260a      	movs	r6, #10
 800dc7c:	e7a9      	b.n	800dbd2 <_strtol_l.isra.0+0x4a>
	...

0800dc80 <_strtol_r>:
 800dc80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dc82:	4c06      	ldr	r4, [pc, #24]	; (800dc9c <_strtol_r+0x1c>)
 800dc84:	4d06      	ldr	r5, [pc, #24]	; (800dca0 <_strtol_r+0x20>)
 800dc86:	6824      	ldr	r4, [r4, #0]
 800dc88:	6a24      	ldr	r4, [r4, #32]
 800dc8a:	2c00      	cmp	r4, #0
 800dc8c:	bf08      	it	eq
 800dc8e:	462c      	moveq	r4, r5
 800dc90:	9400      	str	r4, [sp, #0]
 800dc92:	f7ff ff79 	bl	800db88 <_strtol_l.isra.0>
 800dc96:	b003      	add	sp, #12
 800dc98:	bd30      	pop	{r4, r5, pc}
 800dc9a:	bf00      	nop
 800dc9c:	20000180 	.word	0x20000180
 800dca0:	200001e4 	.word	0x200001e4

0800dca4 <quorem>:
 800dca4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dca8:	6903      	ldr	r3, [r0, #16]
 800dcaa:	690c      	ldr	r4, [r1, #16]
 800dcac:	42a3      	cmp	r3, r4
 800dcae:	4680      	mov	r8, r0
 800dcb0:	f2c0 8082 	blt.w	800ddb8 <quorem+0x114>
 800dcb4:	3c01      	subs	r4, #1
 800dcb6:	f101 0714 	add.w	r7, r1, #20
 800dcba:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800dcbe:	f100 0614 	add.w	r6, r0, #20
 800dcc2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800dcc6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800dcca:	eb06 030c 	add.w	r3, r6, ip
 800dcce:	3501      	adds	r5, #1
 800dcd0:	eb07 090c 	add.w	r9, r7, ip
 800dcd4:	9301      	str	r3, [sp, #4]
 800dcd6:	fbb0 f5f5 	udiv	r5, r0, r5
 800dcda:	b395      	cbz	r5, 800dd42 <quorem+0x9e>
 800dcdc:	f04f 0a00 	mov.w	sl, #0
 800dce0:	4638      	mov	r0, r7
 800dce2:	46b6      	mov	lr, r6
 800dce4:	46d3      	mov	fp, sl
 800dce6:	f850 2b04 	ldr.w	r2, [r0], #4
 800dcea:	b293      	uxth	r3, r2
 800dcec:	fb05 a303 	mla	r3, r5, r3, sl
 800dcf0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dcf4:	b29b      	uxth	r3, r3
 800dcf6:	ebab 0303 	sub.w	r3, fp, r3
 800dcfa:	0c12      	lsrs	r2, r2, #16
 800dcfc:	f8de b000 	ldr.w	fp, [lr]
 800dd00:	fb05 a202 	mla	r2, r5, r2, sl
 800dd04:	fa13 f38b 	uxtah	r3, r3, fp
 800dd08:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800dd0c:	fa1f fb82 	uxth.w	fp, r2
 800dd10:	f8de 2000 	ldr.w	r2, [lr]
 800dd14:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800dd18:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dd1c:	b29b      	uxth	r3, r3
 800dd1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dd22:	4581      	cmp	r9, r0
 800dd24:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800dd28:	f84e 3b04 	str.w	r3, [lr], #4
 800dd2c:	d2db      	bcs.n	800dce6 <quorem+0x42>
 800dd2e:	f856 300c 	ldr.w	r3, [r6, ip]
 800dd32:	b933      	cbnz	r3, 800dd42 <quorem+0x9e>
 800dd34:	9b01      	ldr	r3, [sp, #4]
 800dd36:	3b04      	subs	r3, #4
 800dd38:	429e      	cmp	r6, r3
 800dd3a:	461a      	mov	r2, r3
 800dd3c:	d330      	bcc.n	800dda0 <quorem+0xfc>
 800dd3e:	f8c8 4010 	str.w	r4, [r8, #16]
 800dd42:	4640      	mov	r0, r8
 800dd44:	f001 fb96 	bl	800f474 <__mcmp>
 800dd48:	2800      	cmp	r0, #0
 800dd4a:	db25      	blt.n	800dd98 <quorem+0xf4>
 800dd4c:	3501      	adds	r5, #1
 800dd4e:	4630      	mov	r0, r6
 800dd50:	f04f 0c00 	mov.w	ip, #0
 800dd54:	f857 2b04 	ldr.w	r2, [r7], #4
 800dd58:	f8d0 e000 	ldr.w	lr, [r0]
 800dd5c:	b293      	uxth	r3, r2
 800dd5e:	ebac 0303 	sub.w	r3, ip, r3
 800dd62:	0c12      	lsrs	r2, r2, #16
 800dd64:	fa13 f38e 	uxtah	r3, r3, lr
 800dd68:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800dd6c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dd70:	b29b      	uxth	r3, r3
 800dd72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dd76:	45b9      	cmp	r9, r7
 800dd78:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800dd7c:	f840 3b04 	str.w	r3, [r0], #4
 800dd80:	d2e8      	bcs.n	800dd54 <quorem+0xb0>
 800dd82:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800dd86:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800dd8a:	b92a      	cbnz	r2, 800dd98 <quorem+0xf4>
 800dd8c:	3b04      	subs	r3, #4
 800dd8e:	429e      	cmp	r6, r3
 800dd90:	461a      	mov	r2, r3
 800dd92:	d30b      	bcc.n	800ddac <quorem+0x108>
 800dd94:	f8c8 4010 	str.w	r4, [r8, #16]
 800dd98:	4628      	mov	r0, r5
 800dd9a:	b003      	add	sp, #12
 800dd9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dda0:	6812      	ldr	r2, [r2, #0]
 800dda2:	3b04      	subs	r3, #4
 800dda4:	2a00      	cmp	r2, #0
 800dda6:	d1ca      	bne.n	800dd3e <quorem+0x9a>
 800dda8:	3c01      	subs	r4, #1
 800ddaa:	e7c5      	b.n	800dd38 <quorem+0x94>
 800ddac:	6812      	ldr	r2, [r2, #0]
 800ddae:	3b04      	subs	r3, #4
 800ddb0:	2a00      	cmp	r2, #0
 800ddb2:	d1ef      	bne.n	800dd94 <quorem+0xf0>
 800ddb4:	3c01      	subs	r4, #1
 800ddb6:	e7ea      	b.n	800dd8e <quorem+0xea>
 800ddb8:	2000      	movs	r0, #0
 800ddba:	e7ee      	b.n	800dd9a <quorem+0xf6>
 800ddbc:	0000      	movs	r0, r0
	...

0800ddc0 <_dtoa_r>:
 800ddc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddc4:	ec57 6b10 	vmov	r6, r7, d0
 800ddc8:	b097      	sub	sp, #92	; 0x5c
 800ddca:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ddcc:	9106      	str	r1, [sp, #24]
 800ddce:	4604      	mov	r4, r0
 800ddd0:	920b      	str	r2, [sp, #44]	; 0x2c
 800ddd2:	9312      	str	r3, [sp, #72]	; 0x48
 800ddd4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ddd8:	e9cd 6700 	strd	r6, r7, [sp]
 800dddc:	b93d      	cbnz	r5, 800ddee <_dtoa_r+0x2e>
 800ddde:	2010      	movs	r0, #16
 800dde0:	f7fe f970 	bl	800c0c4 <malloc>
 800dde4:	6260      	str	r0, [r4, #36]	; 0x24
 800dde6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ddea:	6005      	str	r5, [r0, #0]
 800ddec:	60c5      	str	r5, [r0, #12]
 800ddee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ddf0:	6819      	ldr	r1, [r3, #0]
 800ddf2:	b151      	cbz	r1, 800de0a <_dtoa_r+0x4a>
 800ddf4:	685a      	ldr	r2, [r3, #4]
 800ddf6:	604a      	str	r2, [r1, #4]
 800ddf8:	2301      	movs	r3, #1
 800ddfa:	4093      	lsls	r3, r2
 800ddfc:	608b      	str	r3, [r1, #8]
 800ddfe:	4620      	mov	r0, r4
 800de00:	f001 f918 	bl	800f034 <_Bfree>
 800de04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800de06:	2200      	movs	r2, #0
 800de08:	601a      	str	r2, [r3, #0]
 800de0a:	1e3b      	subs	r3, r7, #0
 800de0c:	bfbb      	ittet	lt
 800de0e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800de12:	9301      	strlt	r3, [sp, #4]
 800de14:	2300      	movge	r3, #0
 800de16:	2201      	movlt	r2, #1
 800de18:	bfac      	ite	ge
 800de1a:	f8c8 3000 	strge.w	r3, [r8]
 800de1e:	f8c8 2000 	strlt.w	r2, [r8]
 800de22:	4baf      	ldr	r3, [pc, #700]	; (800e0e0 <_dtoa_r+0x320>)
 800de24:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800de28:	ea33 0308 	bics.w	r3, r3, r8
 800de2c:	d114      	bne.n	800de58 <_dtoa_r+0x98>
 800de2e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800de30:	f242 730f 	movw	r3, #9999	; 0x270f
 800de34:	6013      	str	r3, [r2, #0]
 800de36:	9b00      	ldr	r3, [sp, #0]
 800de38:	b923      	cbnz	r3, 800de44 <_dtoa_r+0x84>
 800de3a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800de3e:	2800      	cmp	r0, #0
 800de40:	f000 8542 	beq.w	800e8c8 <_dtoa_r+0xb08>
 800de44:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800de46:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800e0f4 <_dtoa_r+0x334>
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	f000 8544 	beq.w	800e8d8 <_dtoa_r+0xb18>
 800de50:	f10b 0303 	add.w	r3, fp, #3
 800de54:	f000 bd3e 	b.w	800e8d4 <_dtoa_r+0xb14>
 800de58:	e9dd 6700 	ldrd	r6, r7, [sp]
 800de5c:	2200      	movs	r2, #0
 800de5e:	2300      	movs	r3, #0
 800de60:	4630      	mov	r0, r6
 800de62:	4639      	mov	r1, r7
 800de64:	f7f2 fe30 	bl	8000ac8 <__aeabi_dcmpeq>
 800de68:	4681      	mov	r9, r0
 800de6a:	b168      	cbz	r0, 800de88 <_dtoa_r+0xc8>
 800de6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800de6e:	2301      	movs	r3, #1
 800de70:	6013      	str	r3, [r2, #0]
 800de72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800de74:	2b00      	cmp	r3, #0
 800de76:	f000 8524 	beq.w	800e8c2 <_dtoa_r+0xb02>
 800de7a:	4b9a      	ldr	r3, [pc, #616]	; (800e0e4 <_dtoa_r+0x324>)
 800de7c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800de7e:	f103 3bff 	add.w	fp, r3, #4294967295
 800de82:	6013      	str	r3, [r2, #0]
 800de84:	f000 bd28 	b.w	800e8d8 <_dtoa_r+0xb18>
 800de88:	aa14      	add	r2, sp, #80	; 0x50
 800de8a:	a915      	add	r1, sp, #84	; 0x54
 800de8c:	ec47 6b10 	vmov	d0, r6, r7
 800de90:	4620      	mov	r0, r4
 800de92:	f001 fbdd 	bl	800f650 <__d2b>
 800de96:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800de9a:	9004      	str	r0, [sp, #16]
 800de9c:	2d00      	cmp	r5, #0
 800de9e:	d07c      	beq.n	800df9a <_dtoa_r+0x1da>
 800dea0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dea4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800dea8:	46b2      	mov	sl, r6
 800deaa:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800deae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800deb2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800deb6:	2200      	movs	r2, #0
 800deb8:	4b8b      	ldr	r3, [pc, #556]	; (800e0e8 <_dtoa_r+0x328>)
 800deba:	4650      	mov	r0, sl
 800debc:	4659      	mov	r1, fp
 800debe:	f7f2 f9e3 	bl	8000288 <__aeabi_dsub>
 800dec2:	a381      	add	r3, pc, #516	; (adr r3, 800e0c8 <_dtoa_r+0x308>)
 800dec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dec8:	f7f2 fb96 	bl	80005f8 <__aeabi_dmul>
 800decc:	a380      	add	r3, pc, #512	; (adr r3, 800e0d0 <_dtoa_r+0x310>)
 800dece:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ded2:	f7f2 f9db 	bl	800028c <__adddf3>
 800ded6:	4606      	mov	r6, r0
 800ded8:	4628      	mov	r0, r5
 800deda:	460f      	mov	r7, r1
 800dedc:	f7f2 fb22 	bl	8000524 <__aeabi_i2d>
 800dee0:	a37d      	add	r3, pc, #500	; (adr r3, 800e0d8 <_dtoa_r+0x318>)
 800dee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dee6:	f7f2 fb87 	bl	80005f8 <__aeabi_dmul>
 800deea:	4602      	mov	r2, r0
 800deec:	460b      	mov	r3, r1
 800deee:	4630      	mov	r0, r6
 800def0:	4639      	mov	r1, r7
 800def2:	f7f2 f9cb 	bl	800028c <__adddf3>
 800def6:	4606      	mov	r6, r0
 800def8:	460f      	mov	r7, r1
 800defa:	f7f2 fe2d 	bl	8000b58 <__aeabi_d2iz>
 800defe:	2200      	movs	r2, #0
 800df00:	4682      	mov	sl, r0
 800df02:	2300      	movs	r3, #0
 800df04:	4630      	mov	r0, r6
 800df06:	4639      	mov	r1, r7
 800df08:	f7f2 fde8 	bl	8000adc <__aeabi_dcmplt>
 800df0c:	b148      	cbz	r0, 800df22 <_dtoa_r+0x162>
 800df0e:	4650      	mov	r0, sl
 800df10:	f7f2 fb08 	bl	8000524 <__aeabi_i2d>
 800df14:	4632      	mov	r2, r6
 800df16:	463b      	mov	r3, r7
 800df18:	f7f2 fdd6 	bl	8000ac8 <__aeabi_dcmpeq>
 800df1c:	b908      	cbnz	r0, 800df22 <_dtoa_r+0x162>
 800df1e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800df22:	f1ba 0f16 	cmp.w	sl, #22
 800df26:	d859      	bhi.n	800dfdc <_dtoa_r+0x21c>
 800df28:	4970      	ldr	r1, [pc, #448]	; (800e0ec <_dtoa_r+0x32c>)
 800df2a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800df2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800df32:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df36:	f7f2 fdef 	bl	8000b18 <__aeabi_dcmpgt>
 800df3a:	2800      	cmp	r0, #0
 800df3c:	d050      	beq.n	800dfe0 <_dtoa_r+0x220>
 800df3e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800df42:	2300      	movs	r3, #0
 800df44:	930f      	str	r3, [sp, #60]	; 0x3c
 800df46:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800df48:	1b5d      	subs	r5, r3, r5
 800df4a:	f1b5 0801 	subs.w	r8, r5, #1
 800df4e:	bf49      	itett	mi
 800df50:	f1c5 0301 	rsbmi	r3, r5, #1
 800df54:	2300      	movpl	r3, #0
 800df56:	9305      	strmi	r3, [sp, #20]
 800df58:	f04f 0800 	movmi.w	r8, #0
 800df5c:	bf58      	it	pl
 800df5e:	9305      	strpl	r3, [sp, #20]
 800df60:	f1ba 0f00 	cmp.w	sl, #0
 800df64:	db3e      	blt.n	800dfe4 <_dtoa_r+0x224>
 800df66:	2300      	movs	r3, #0
 800df68:	44d0      	add	r8, sl
 800df6a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800df6e:	9307      	str	r3, [sp, #28]
 800df70:	9b06      	ldr	r3, [sp, #24]
 800df72:	2b09      	cmp	r3, #9
 800df74:	f200 8090 	bhi.w	800e098 <_dtoa_r+0x2d8>
 800df78:	2b05      	cmp	r3, #5
 800df7a:	bfc4      	itt	gt
 800df7c:	3b04      	subgt	r3, #4
 800df7e:	9306      	strgt	r3, [sp, #24]
 800df80:	9b06      	ldr	r3, [sp, #24]
 800df82:	f1a3 0302 	sub.w	r3, r3, #2
 800df86:	bfcc      	ite	gt
 800df88:	2500      	movgt	r5, #0
 800df8a:	2501      	movle	r5, #1
 800df8c:	2b03      	cmp	r3, #3
 800df8e:	f200 808f 	bhi.w	800e0b0 <_dtoa_r+0x2f0>
 800df92:	e8df f003 	tbb	[pc, r3]
 800df96:	7f7d      	.short	0x7f7d
 800df98:	7131      	.short	0x7131
 800df9a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800df9e:	441d      	add	r5, r3
 800dfa0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800dfa4:	2820      	cmp	r0, #32
 800dfa6:	dd13      	ble.n	800dfd0 <_dtoa_r+0x210>
 800dfa8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800dfac:	9b00      	ldr	r3, [sp, #0]
 800dfae:	fa08 f800 	lsl.w	r8, r8, r0
 800dfb2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800dfb6:	fa23 f000 	lsr.w	r0, r3, r0
 800dfba:	ea48 0000 	orr.w	r0, r8, r0
 800dfbe:	f7f2 faa1 	bl	8000504 <__aeabi_ui2d>
 800dfc2:	2301      	movs	r3, #1
 800dfc4:	4682      	mov	sl, r0
 800dfc6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800dfca:	3d01      	subs	r5, #1
 800dfcc:	9313      	str	r3, [sp, #76]	; 0x4c
 800dfce:	e772      	b.n	800deb6 <_dtoa_r+0xf6>
 800dfd0:	9b00      	ldr	r3, [sp, #0]
 800dfd2:	f1c0 0020 	rsb	r0, r0, #32
 800dfd6:	fa03 f000 	lsl.w	r0, r3, r0
 800dfda:	e7f0      	b.n	800dfbe <_dtoa_r+0x1fe>
 800dfdc:	2301      	movs	r3, #1
 800dfde:	e7b1      	b.n	800df44 <_dtoa_r+0x184>
 800dfe0:	900f      	str	r0, [sp, #60]	; 0x3c
 800dfe2:	e7b0      	b.n	800df46 <_dtoa_r+0x186>
 800dfe4:	9b05      	ldr	r3, [sp, #20]
 800dfe6:	eba3 030a 	sub.w	r3, r3, sl
 800dfea:	9305      	str	r3, [sp, #20]
 800dfec:	f1ca 0300 	rsb	r3, sl, #0
 800dff0:	9307      	str	r3, [sp, #28]
 800dff2:	2300      	movs	r3, #0
 800dff4:	930e      	str	r3, [sp, #56]	; 0x38
 800dff6:	e7bb      	b.n	800df70 <_dtoa_r+0x1b0>
 800dff8:	2301      	movs	r3, #1
 800dffa:	930a      	str	r3, [sp, #40]	; 0x28
 800dffc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dffe:	2b00      	cmp	r3, #0
 800e000:	dd59      	ble.n	800e0b6 <_dtoa_r+0x2f6>
 800e002:	9302      	str	r3, [sp, #8]
 800e004:	4699      	mov	r9, r3
 800e006:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e008:	2200      	movs	r2, #0
 800e00a:	6072      	str	r2, [r6, #4]
 800e00c:	2204      	movs	r2, #4
 800e00e:	f102 0014 	add.w	r0, r2, #20
 800e012:	4298      	cmp	r0, r3
 800e014:	6871      	ldr	r1, [r6, #4]
 800e016:	d953      	bls.n	800e0c0 <_dtoa_r+0x300>
 800e018:	4620      	mov	r0, r4
 800e01a:	f000 ffd7 	bl	800efcc <_Balloc>
 800e01e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e020:	6030      	str	r0, [r6, #0]
 800e022:	f1b9 0f0e 	cmp.w	r9, #14
 800e026:	f8d3 b000 	ldr.w	fp, [r3]
 800e02a:	f200 80e6 	bhi.w	800e1fa <_dtoa_r+0x43a>
 800e02e:	2d00      	cmp	r5, #0
 800e030:	f000 80e3 	beq.w	800e1fa <_dtoa_r+0x43a>
 800e034:	ed9d 7b00 	vldr	d7, [sp]
 800e038:	f1ba 0f00 	cmp.w	sl, #0
 800e03c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800e040:	dd74      	ble.n	800e12c <_dtoa_r+0x36c>
 800e042:	4a2a      	ldr	r2, [pc, #168]	; (800e0ec <_dtoa_r+0x32c>)
 800e044:	f00a 030f 	and.w	r3, sl, #15
 800e048:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e04c:	ed93 7b00 	vldr	d7, [r3]
 800e050:	ea4f 162a 	mov.w	r6, sl, asr #4
 800e054:	06f0      	lsls	r0, r6, #27
 800e056:	ed8d 7b08 	vstr	d7, [sp, #32]
 800e05a:	d565      	bpl.n	800e128 <_dtoa_r+0x368>
 800e05c:	4b24      	ldr	r3, [pc, #144]	; (800e0f0 <_dtoa_r+0x330>)
 800e05e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e062:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e066:	f7f2 fbf1 	bl	800084c <__aeabi_ddiv>
 800e06a:	e9cd 0100 	strd	r0, r1, [sp]
 800e06e:	f006 060f 	and.w	r6, r6, #15
 800e072:	2503      	movs	r5, #3
 800e074:	4f1e      	ldr	r7, [pc, #120]	; (800e0f0 <_dtoa_r+0x330>)
 800e076:	e04c      	b.n	800e112 <_dtoa_r+0x352>
 800e078:	2301      	movs	r3, #1
 800e07a:	930a      	str	r3, [sp, #40]	; 0x28
 800e07c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e07e:	4453      	add	r3, sl
 800e080:	f103 0901 	add.w	r9, r3, #1
 800e084:	9302      	str	r3, [sp, #8]
 800e086:	464b      	mov	r3, r9
 800e088:	2b01      	cmp	r3, #1
 800e08a:	bfb8      	it	lt
 800e08c:	2301      	movlt	r3, #1
 800e08e:	e7ba      	b.n	800e006 <_dtoa_r+0x246>
 800e090:	2300      	movs	r3, #0
 800e092:	e7b2      	b.n	800dffa <_dtoa_r+0x23a>
 800e094:	2300      	movs	r3, #0
 800e096:	e7f0      	b.n	800e07a <_dtoa_r+0x2ba>
 800e098:	2501      	movs	r5, #1
 800e09a:	2300      	movs	r3, #0
 800e09c:	9306      	str	r3, [sp, #24]
 800e09e:	950a      	str	r5, [sp, #40]	; 0x28
 800e0a0:	f04f 33ff 	mov.w	r3, #4294967295
 800e0a4:	9302      	str	r3, [sp, #8]
 800e0a6:	4699      	mov	r9, r3
 800e0a8:	2200      	movs	r2, #0
 800e0aa:	2312      	movs	r3, #18
 800e0ac:	920b      	str	r2, [sp, #44]	; 0x2c
 800e0ae:	e7aa      	b.n	800e006 <_dtoa_r+0x246>
 800e0b0:	2301      	movs	r3, #1
 800e0b2:	930a      	str	r3, [sp, #40]	; 0x28
 800e0b4:	e7f4      	b.n	800e0a0 <_dtoa_r+0x2e0>
 800e0b6:	2301      	movs	r3, #1
 800e0b8:	9302      	str	r3, [sp, #8]
 800e0ba:	4699      	mov	r9, r3
 800e0bc:	461a      	mov	r2, r3
 800e0be:	e7f5      	b.n	800e0ac <_dtoa_r+0x2ec>
 800e0c0:	3101      	adds	r1, #1
 800e0c2:	6071      	str	r1, [r6, #4]
 800e0c4:	0052      	lsls	r2, r2, #1
 800e0c6:	e7a2      	b.n	800e00e <_dtoa_r+0x24e>
 800e0c8:	636f4361 	.word	0x636f4361
 800e0cc:	3fd287a7 	.word	0x3fd287a7
 800e0d0:	8b60c8b3 	.word	0x8b60c8b3
 800e0d4:	3fc68a28 	.word	0x3fc68a28
 800e0d8:	509f79fb 	.word	0x509f79fb
 800e0dc:	3fd34413 	.word	0x3fd34413
 800e0e0:	7ff00000 	.word	0x7ff00000
 800e0e4:	0800fc11 	.word	0x0800fc11
 800e0e8:	3ff80000 	.word	0x3ff80000
 800e0ec:	0800fcd0 	.word	0x0800fcd0
 800e0f0:	0800fca8 	.word	0x0800fca8
 800e0f4:	0800fc99 	.word	0x0800fc99
 800e0f8:	07f1      	lsls	r1, r6, #31
 800e0fa:	d508      	bpl.n	800e10e <_dtoa_r+0x34e>
 800e0fc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e100:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e104:	f7f2 fa78 	bl	80005f8 <__aeabi_dmul>
 800e108:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e10c:	3501      	adds	r5, #1
 800e10e:	1076      	asrs	r6, r6, #1
 800e110:	3708      	adds	r7, #8
 800e112:	2e00      	cmp	r6, #0
 800e114:	d1f0      	bne.n	800e0f8 <_dtoa_r+0x338>
 800e116:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e11a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e11e:	f7f2 fb95 	bl	800084c <__aeabi_ddiv>
 800e122:	e9cd 0100 	strd	r0, r1, [sp]
 800e126:	e01a      	b.n	800e15e <_dtoa_r+0x39e>
 800e128:	2502      	movs	r5, #2
 800e12a:	e7a3      	b.n	800e074 <_dtoa_r+0x2b4>
 800e12c:	f000 80a0 	beq.w	800e270 <_dtoa_r+0x4b0>
 800e130:	f1ca 0600 	rsb	r6, sl, #0
 800e134:	4b9f      	ldr	r3, [pc, #636]	; (800e3b4 <_dtoa_r+0x5f4>)
 800e136:	4fa0      	ldr	r7, [pc, #640]	; (800e3b8 <_dtoa_r+0x5f8>)
 800e138:	f006 020f 	and.w	r2, r6, #15
 800e13c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e140:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e144:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e148:	f7f2 fa56 	bl	80005f8 <__aeabi_dmul>
 800e14c:	e9cd 0100 	strd	r0, r1, [sp]
 800e150:	1136      	asrs	r6, r6, #4
 800e152:	2300      	movs	r3, #0
 800e154:	2502      	movs	r5, #2
 800e156:	2e00      	cmp	r6, #0
 800e158:	d17f      	bne.n	800e25a <_dtoa_r+0x49a>
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d1e1      	bne.n	800e122 <_dtoa_r+0x362>
 800e15e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e160:	2b00      	cmp	r3, #0
 800e162:	f000 8087 	beq.w	800e274 <_dtoa_r+0x4b4>
 800e166:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e16a:	2200      	movs	r2, #0
 800e16c:	4b93      	ldr	r3, [pc, #588]	; (800e3bc <_dtoa_r+0x5fc>)
 800e16e:	4630      	mov	r0, r6
 800e170:	4639      	mov	r1, r7
 800e172:	f7f2 fcb3 	bl	8000adc <__aeabi_dcmplt>
 800e176:	2800      	cmp	r0, #0
 800e178:	d07c      	beq.n	800e274 <_dtoa_r+0x4b4>
 800e17a:	f1b9 0f00 	cmp.w	r9, #0
 800e17e:	d079      	beq.n	800e274 <_dtoa_r+0x4b4>
 800e180:	9b02      	ldr	r3, [sp, #8]
 800e182:	2b00      	cmp	r3, #0
 800e184:	dd35      	ble.n	800e1f2 <_dtoa_r+0x432>
 800e186:	f10a 33ff 	add.w	r3, sl, #4294967295
 800e18a:	9308      	str	r3, [sp, #32]
 800e18c:	4639      	mov	r1, r7
 800e18e:	2200      	movs	r2, #0
 800e190:	4b8b      	ldr	r3, [pc, #556]	; (800e3c0 <_dtoa_r+0x600>)
 800e192:	4630      	mov	r0, r6
 800e194:	f7f2 fa30 	bl	80005f8 <__aeabi_dmul>
 800e198:	e9cd 0100 	strd	r0, r1, [sp]
 800e19c:	9f02      	ldr	r7, [sp, #8]
 800e19e:	3501      	adds	r5, #1
 800e1a0:	4628      	mov	r0, r5
 800e1a2:	f7f2 f9bf 	bl	8000524 <__aeabi_i2d>
 800e1a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e1aa:	f7f2 fa25 	bl	80005f8 <__aeabi_dmul>
 800e1ae:	2200      	movs	r2, #0
 800e1b0:	4b84      	ldr	r3, [pc, #528]	; (800e3c4 <_dtoa_r+0x604>)
 800e1b2:	f7f2 f86b 	bl	800028c <__adddf3>
 800e1b6:	4605      	mov	r5, r0
 800e1b8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800e1bc:	2f00      	cmp	r7, #0
 800e1be:	d15d      	bne.n	800e27c <_dtoa_r+0x4bc>
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	4b81      	ldr	r3, [pc, #516]	; (800e3c8 <_dtoa_r+0x608>)
 800e1c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e1c8:	f7f2 f85e 	bl	8000288 <__aeabi_dsub>
 800e1cc:	462a      	mov	r2, r5
 800e1ce:	4633      	mov	r3, r6
 800e1d0:	e9cd 0100 	strd	r0, r1, [sp]
 800e1d4:	f7f2 fca0 	bl	8000b18 <__aeabi_dcmpgt>
 800e1d8:	2800      	cmp	r0, #0
 800e1da:	f040 8288 	bne.w	800e6ee <_dtoa_r+0x92e>
 800e1de:	462a      	mov	r2, r5
 800e1e0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800e1e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e1e8:	f7f2 fc78 	bl	8000adc <__aeabi_dcmplt>
 800e1ec:	2800      	cmp	r0, #0
 800e1ee:	f040 827c 	bne.w	800e6ea <_dtoa_r+0x92a>
 800e1f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e1f6:	e9cd 2300 	strd	r2, r3, [sp]
 800e1fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	f2c0 8150 	blt.w	800e4a2 <_dtoa_r+0x6e2>
 800e202:	f1ba 0f0e 	cmp.w	sl, #14
 800e206:	f300 814c 	bgt.w	800e4a2 <_dtoa_r+0x6e2>
 800e20a:	4b6a      	ldr	r3, [pc, #424]	; (800e3b4 <_dtoa_r+0x5f4>)
 800e20c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e210:	ed93 7b00 	vldr	d7, [r3]
 800e214:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e216:	2b00      	cmp	r3, #0
 800e218:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e21c:	f280 80d8 	bge.w	800e3d0 <_dtoa_r+0x610>
 800e220:	f1b9 0f00 	cmp.w	r9, #0
 800e224:	f300 80d4 	bgt.w	800e3d0 <_dtoa_r+0x610>
 800e228:	f040 825e 	bne.w	800e6e8 <_dtoa_r+0x928>
 800e22c:	2200      	movs	r2, #0
 800e22e:	4b66      	ldr	r3, [pc, #408]	; (800e3c8 <_dtoa_r+0x608>)
 800e230:	ec51 0b17 	vmov	r0, r1, d7
 800e234:	f7f2 f9e0 	bl	80005f8 <__aeabi_dmul>
 800e238:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e23c:	f7f2 fc62 	bl	8000b04 <__aeabi_dcmpge>
 800e240:	464f      	mov	r7, r9
 800e242:	464e      	mov	r6, r9
 800e244:	2800      	cmp	r0, #0
 800e246:	f040 8234 	bne.w	800e6b2 <_dtoa_r+0x8f2>
 800e24a:	2331      	movs	r3, #49	; 0x31
 800e24c:	f10b 0501 	add.w	r5, fp, #1
 800e250:	f88b 3000 	strb.w	r3, [fp]
 800e254:	f10a 0a01 	add.w	sl, sl, #1
 800e258:	e22f      	b.n	800e6ba <_dtoa_r+0x8fa>
 800e25a:	07f2      	lsls	r2, r6, #31
 800e25c:	d505      	bpl.n	800e26a <_dtoa_r+0x4aa>
 800e25e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e262:	f7f2 f9c9 	bl	80005f8 <__aeabi_dmul>
 800e266:	3501      	adds	r5, #1
 800e268:	2301      	movs	r3, #1
 800e26a:	1076      	asrs	r6, r6, #1
 800e26c:	3708      	adds	r7, #8
 800e26e:	e772      	b.n	800e156 <_dtoa_r+0x396>
 800e270:	2502      	movs	r5, #2
 800e272:	e774      	b.n	800e15e <_dtoa_r+0x39e>
 800e274:	f8cd a020 	str.w	sl, [sp, #32]
 800e278:	464f      	mov	r7, r9
 800e27a:	e791      	b.n	800e1a0 <_dtoa_r+0x3e0>
 800e27c:	4b4d      	ldr	r3, [pc, #308]	; (800e3b4 <_dtoa_r+0x5f4>)
 800e27e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e282:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800e286:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d047      	beq.n	800e31c <_dtoa_r+0x55c>
 800e28c:	4602      	mov	r2, r0
 800e28e:	460b      	mov	r3, r1
 800e290:	2000      	movs	r0, #0
 800e292:	494e      	ldr	r1, [pc, #312]	; (800e3cc <_dtoa_r+0x60c>)
 800e294:	f7f2 fada 	bl	800084c <__aeabi_ddiv>
 800e298:	462a      	mov	r2, r5
 800e29a:	4633      	mov	r3, r6
 800e29c:	f7f1 fff4 	bl	8000288 <__aeabi_dsub>
 800e2a0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e2a4:	465d      	mov	r5, fp
 800e2a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e2aa:	f7f2 fc55 	bl	8000b58 <__aeabi_d2iz>
 800e2ae:	4606      	mov	r6, r0
 800e2b0:	f7f2 f938 	bl	8000524 <__aeabi_i2d>
 800e2b4:	4602      	mov	r2, r0
 800e2b6:	460b      	mov	r3, r1
 800e2b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e2bc:	f7f1 ffe4 	bl	8000288 <__aeabi_dsub>
 800e2c0:	3630      	adds	r6, #48	; 0x30
 800e2c2:	f805 6b01 	strb.w	r6, [r5], #1
 800e2c6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e2ca:	e9cd 0100 	strd	r0, r1, [sp]
 800e2ce:	f7f2 fc05 	bl	8000adc <__aeabi_dcmplt>
 800e2d2:	2800      	cmp	r0, #0
 800e2d4:	d163      	bne.n	800e39e <_dtoa_r+0x5de>
 800e2d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e2da:	2000      	movs	r0, #0
 800e2dc:	4937      	ldr	r1, [pc, #220]	; (800e3bc <_dtoa_r+0x5fc>)
 800e2de:	f7f1 ffd3 	bl	8000288 <__aeabi_dsub>
 800e2e2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e2e6:	f7f2 fbf9 	bl	8000adc <__aeabi_dcmplt>
 800e2ea:	2800      	cmp	r0, #0
 800e2ec:	f040 80b7 	bne.w	800e45e <_dtoa_r+0x69e>
 800e2f0:	eba5 030b 	sub.w	r3, r5, fp
 800e2f4:	429f      	cmp	r7, r3
 800e2f6:	f77f af7c 	ble.w	800e1f2 <_dtoa_r+0x432>
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	4b30      	ldr	r3, [pc, #192]	; (800e3c0 <_dtoa_r+0x600>)
 800e2fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e302:	f7f2 f979 	bl	80005f8 <__aeabi_dmul>
 800e306:	2200      	movs	r2, #0
 800e308:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e30c:	4b2c      	ldr	r3, [pc, #176]	; (800e3c0 <_dtoa_r+0x600>)
 800e30e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e312:	f7f2 f971 	bl	80005f8 <__aeabi_dmul>
 800e316:	e9cd 0100 	strd	r0, r1, [sp]
 800e31a:	e7c4      	b.n	800e2a6 <_dtoa_r+0x4e6>
 800e31c:	462a      	mov	r2, r5
 800e31e:	4633      	mov	r3, r6
 800e320:	f7f2 f96a 	bl	80005f8 <__aeabi_dmul>
 800e324:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e328:	eb0b 0507 	add.w	r5, fp, r7
 800e32c:	465e      	mov	r6, fp
 800e32e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e332:	f7f2 fc11 	bl	8000b58 <__aeabi_d2iz>
 800e336:	4607      	mov	r7, r0
 800e338:	f7f2 f8f4 	bl	8000524 <__aeabi_i2d>
 800e33c:	3730      	adds	r7, #48	; 0x30
 800e33e:	4602      	mov	r2, r0
 800e340:	460b      	mov	r3, r1
 800e342:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e346:	f7f1 ff9f 	bl	8000288 <__aeabi_dsub>
 800e34a:	f806 7b01 	strb.w	r7, [r6], #1
 800e34e:	42ae      	cmp	r6, r5
 800e350:	e9cd 0100 	strd	r0, r1, [sp]
 800e354:	f04f 0200 	mov.w	r2, #0
 800e358:	d126      	bne.n	800e3a8 <_dtoa_r+0x5e8>
 800e35a:	4b1c      	ldr	r3, [pc, #112]	; (800e3cc <_dtoa_r+0x60c>)
 800e35c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e360:	f7f1 ff94 	bl	800028c <__adddf3>
 800e364:	4602      	mov	r2, r0
 800e366:	460b      	mov	r3, r1
 800e368:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e36c:	f7f2 fbd4 	bl	8000b18 <__aeabi_dcmpgt>
 800e370:	2800      	cmp	r0, #0
 800e372:	d174      	bne.n	800e45e <_dtoa_r+0x69e>
 800e374:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e378:	2000      	movs	r0, #0
 800e37a:	4914      	ldr	r1, [pc, #80]	; (800e3cc <_dtoa_r+0x60c>)
 800e37c:	f7f1 ff84 	bl	8000288 <__aeabi_dsub>
 800e380:	4602      	mov	r2, r0
 800e382:	460b      	mov	r3, r1
 800e384:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e388:	f7f2 fba8 	bl	8000adc <__aeabi_dcmplt>
 800e38c:	2800      	cmp	r0, #0
 800e38e:	f43f af30 	beq.w	800e1f2 <_dtoa_r+0x432>
 800e392:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e396:	2b30      	cmp	r3, #48	; 0x30
 800e398:	f105 32ff 	add.w	r2, r5, #4294967295
 800e39c:	d002      	beq.n	800e3a4 <_dtoa_r+0x5e4>
 800e39e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800e3a2:	e04a      	b.n	800e43a <_dtoa_r+0x67a>
 800e3a4:	4615      	mov	r5, r2
 800e3a6:	e7f4      	b.n	800e392 <_dtoa_r+0x5d2>
 800e3a8:	4b05      	ldr	r3, [pc, #20]	; (800e3c0 <_dtoa_r+0x600>)
 800e3aa:	f7f2 f925 	bl	80005f8 <__aeabi_dmul>
 800e3ae:	e9cd 0100 	strd	r0, r1, [sp]
 800e3b2:	e7bc      	b.n	800e32e <_dtoa_r+0x56e>
 800e3b4:	0800fcd0 	.word	0x0800fcd0
 800e3b8:	0800fca8 	.word	0x0800fca8
 800e3bc:	3ff00000 	.word	0x3ff00000
 800e3c0:	40240000 	.word	0x40240000
 800e3c4:	401c0000 	.word	0x401c0000
 800e3c8:	40140000 	.word	0x40140000
 800e3cc:	3fe00000 	.word	0x3fe00000
 800e3d0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e3d4:	465d      	mov	r5, fp
 800e3d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e3da:	4630      	mov	r0, r6
 800e3dc:	4639      	mov	r1, r7
 800e3de:	f7f2 fa35 	bl	800084c <__aeabi_ddiv>
 800e3e2:	f7f2 fbb9 	bl	8000b58 <__aeabi_d2iz>
 800e3e6:	4680      	mov	r8, r0
 800e3e8:	f7f2 f89c 	bl	8000524 <__aeabi_i2d>
 800e3ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e3f0:	f7f2 f902 	bl	80005f8 <__aeabi_dmul>
 800e3f4:	4602      	mov	r2, r0
 800e3f6:	460b      	mov	r3, r1
 800e3f8:	4630      	mov	r0, r6
 800e3fa:	4639      	mov	r1, r7
 800e3fc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800e400:	f7f1 ff42 	bl	8000288 <__aeabi_dsub>
 800e404:	f805 6b01 	strb.w	r6, [r5], #1
 800e408:	eba5 060b 	sub.w	r6, r5, fp
 800e40c:	45b1      	cmp	r9, r6
 800e40e:	4602      	mov	r2, r0
 800e410:	460b      	mov	r3, r1
 800e412:	d139      	bne.n	800e488 <_dtoa_r+0x6c8>
 800e414:	f7f1 ff3a 	bl	800028c <__adddf3>
 800e418:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e41c:	4606      	mov	r6, r0
 800e41e:	460f      	mov	r7, r1
 800e420:	f7f2 fb7a 	bl	8000b18 <__aeabi_dcmpgt>
 800e424:	b9c8      	cbnz	r0, 800e45a <_dtoa_r+0x69a>
 800e426:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e42a:	4630      	mov	r0, r6
 800e42c:	4639      	mov	r1, r7
 800e42e:	f7f2 fb4b 	bl	8000ac8 <__aeabi_dcmpeq>
 800e432:	b110      	cbz	r0, 800e43a <_dtoa_r+0x67a>
 800e434:	f018 0f01 	tst.w	r8, #1
 800e438:	d10f      	bne.n	800e45a <_dtoa_r+0x69a>
 800e43a:	9904      	ldr	r1, [sp, #16]
 800e43c:	4620      	mov	r0, r4
 800e43e:	f000 fdf9 	bl	800f034 <_Bfree>
 800e442:	2300      	movs	r3, #0
 800e444:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e446:	702b      	strb	r3, [r5, #0]
 800e448:	f10a 0301 	add.w	r3, sl, #1
 800e44c:	6013      	str	r3, [r2, #0]
 800e44e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e450:	2b00      	cmp	r3, #0
 800e452:	f000 8241 	beq.w	800e8d8 <_dtoa_r+0xb18>
 800e456:	601d      	str	r5, [r3, #0]
 800e458:	e23e      	b.n	800e8d8 <_dtoa_r+0xb18>
 800e45a:	f8cd a020 	str.w	sl, [sp, #32]
 800e45e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e462:	2a39      	cmp	r2, #57	; 0x39
 800e464:	f105 33ff 	add.w	r3, r5, #4294967295
 800e468:	d108      	bne.n	800e47c <_dtoa_r+0x6bc>
 800e46a:	459b      	cmp	fp, r3
 800e46c:	d10a      	bne.n	800e484 <_dtoa_r+0x6c4>
 800e46e:	9b08      	ldr	r3, [sp, #32]
 800e470:	3301      	adds	r3, #1
 800e472:	9308      	str	r3, [sp, #32]
 800e474:	2330      	movs	r3, #48	; 0x30
 800e476:	f88b 3000 	strb.w	r3, [fp]
 800e47a:	465b      	mov	r3, fp
 800e47c:	781a      	ldrb	r2, [r3, #0]
 800e47e:	3201      	adds	r2, #1
 800e480:	701a      	strb	r2, [r3, #0]
 800e482:	e78c      	b.n	800e39e <_dtoa_r+0x5de>
 800e484:	461d      	mov	r5, r3
 800e486:	e7ea      	b.n	800e45e <_dtoa_r+0x69e>
 800e488:	2200      	movs	r2, #0
 800e48a:	4b9b      	ldr	r3, [pc, #620]	; (800e6f8 <_dtoa_r+0x938>)
 800e48c:	f7f2 f8b4 	bl	80005f8 <__aeabi_dmul>
 800e490:	2200      	movs	r2, #0
 800e492:	2300      	movs	r3, #0
 800e494:	4606      	mov	r6, r0
 800e496:	460f      	mov	r7, r1
 800e498:	f7f2 fb16 	bl	8000ac8 <__aeabi_dcmpeq>
 800e49c:	2800      	cmp	r0, #0
 800e49e:	d09a      	beq.n	800e3d6 <_dtoa_r+0x616>
 800e4a0:	e7cb      	b.n	800e43a <_dtoa_r+0x67a>
 800e4a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e4a4:	2a00      	cmp	r2, #0
 800e4a6:	f000 808b 	beq.w	800e5c0 <_dtoa_r+0x800>
 800e4aa:	9a06      	ldr	r2, [sp, #24]
 800e4ac:	2a01      	cmp	r2, #1
 800e4ae:	dc6e      	bgt.n	800e58e <_dtoa_r+0x7ce>
 800e4b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e4b2:	2a00      	cmp	r2, #0
 800e4b4:	d067      	beq.n	800e586 <_dtoa_r+0x7c6>
 800e4b6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e4ba:	9f07      	ldr	r7, [sp, #28]
 800e4bc:	9d05      	ldr	r5, [sp, #20]
 800e4be:	9a05      	ldr	r2, [sp, #20]
 800e4c0:	2101      	movs	r1, #1
 800e4c2:	441a      	add	r2, r3
 800e4c4:	4620      	mov	r0, r4
 800e4c6:	9205      	str	r2, [sp, #20]
 800e4c8:	4498      	add	r8, r3
 800e4ca:	f000 fe91 	bl	800f1f0 <__i2b>
 800e4ce:	4606      	mov	r6, r0
 800e4d0:	2d00      	cmp	r5, #0
 800e4d2:	dd0c      	ble.n	800e4ee <_dtoa_r+0x72e>
 800e4d4:	f1b8 0f00 	cmp.w	r8, #0
 800e4d8:	dd09      	ble.n	800e4ee <_dtoa_r+0x72e>
 800e4da:	4545      	cmp	r5, r8
 800e4dc:	9a05      	ldr	r2, [sp, #20]
 800e4de:	462b      	mov	r3, r5
 800e4e0:	bfa8      	it	ge
 800e4e2:	4643      	movge	r3, r8
 800e4e4:	1ad2      	subs	r2, r2, r3
 800e4e6:	9205      	str	r2, [sp, #20]
 800e4e8:	1aed      	subs	r5, r5, r3
 800e4ea:	eba8 0803 	sub.w	r8, r8, r3
 800e4ee:	9b07      	ldr	r3, [sp, #28]
 800e4f0:	b1eb      	cbz	r3, 800e52e <_dtoa_r+0x76e>
 800e4f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d067      	beq.n	800e5c8 <_dtoa_r+0x808>
 800e4f8:	b18f      	cbz	r7, 800e51e <_dtoa_r+0x75e>
 800e4fa:	4631      	mov	r1, r6
 800e4fc:	463a      	mov	r2, r7
 800e4fe:	4620      	mov	r0, r4
 800e500:	f000 ff16 	bl	800f330 <__pow5mult>
 800e504:	9a04      	ldr	r2, [sp, #16]
 800e506:	4601      	mov	r1, r0
 800e508:	4606      	mov	r6, r0
 800e50a:	4620      	mov	r0, r4
 800e50c:	f000 fe79 	bl	800f202 <__multiply>
 800e510:	9904      	ldr	r1, [sp, #16]
 800e512:	9008      	str	r0, [sp, #32]
 800e514:	4620      	mov	r0, r4
 800e516:	f000 fd8d 	bl	800f034 <_Bfree>
 800e51a:	9b08      	ldr	r3, [sp, #32]
 800e51c:	9304      	str	r3, [sp, #16]
 800e51e:	9b07      	ldr	r3, [sp, #28]
 800e520:	1bda      	subs	r2, r3, r7
 800e522:	d004      	beq.n	800e52e <_dtoa_r+0x76e>
 800e524:	9904      	ldr	r1, [sp, #16]
 800e526:	4620      	mov	r0, r4
 800e528:	f000 ff02 	bl	800f330 <__pow5mult>
 800e52c:	9004      	str	r0, [sp, #16]
 800e52e:	2101      	movs	r1, #1
 800e530:	4620      	mov	r0, r4
 800e532:	f000 fe5d 	bl	800f1f0 <__i2b>
 800e536:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e538:	4607      	mov	r7, r0
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	f000 81d0 	beq.w	800e8e0 <_dtoa_r+0xb20>
 800e540:	461a      	mov	r2, r3
 800e542:	4601      	mov	r1, r0
 800e544:	4620      	mov	r0, r4
 800e546:	f000 fef3 	bl	800f330 <__pow5mult>
 800e54a:	9b06      	ldr	r3, [sp, #24]
 800e54c:	2b01      	cmp	r3, #1
 800e54e:	4607      	mov	r7, r0
 800e550:	dc40      	bgt.n	800e5d4 <_dtoa_r+0x814>
 800e552:	9b00      	ldr	r3, [sp, #0]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d139      	bne.n	800e5cc <_dtoa_r+0x80c>
 800e558:	9b01      	ldr	r3, [sp, #4]
 800e55a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d136      	bne.n	800e5d0 <_dtoa_r+0x810>
 800e562:	9b01      	ldr	r3, [sp, #4]
 800e564:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e568:	0d1b      	lsrs	r3, r3, #20
 800e56a:	051b      	lsls	r3, r3, #20
 800e56c:	b12b      	cbz	r3, 800e57a <_dtoa_r+0x7ba>
 800e56e:	9b05      	ldr	r3, [sp, #20]
 800e570:	3301      	adds	r3, #1
 800e572:	9305      	str	r3, [sp, #20]
 800e574:	f108 0801 	add.w	r8, r8, #1
 800e578:	2301      	movs	r3, #1
 800e57a:	9307      	str	r3, [sp, #28]
 800e57c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d12a      	bne.n	800e5d8 <_dtoa_r+0x818>
 800e582:	2001      	movs	r0, #1
 800e584:	e030      	b.n	800e5e8 <_dtoa_r+0x828>
 800e586:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e588:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e58c:	e795      	b.n	800e4ba <_dtoa_r+0x6fa>
 800e58e:	9b07      	ldr	r3, [sp, #28]
 800e590:	f109 37ff 	add.w	r7, r9, #4294967295
 800e594:	42bb      	cmp	r3, r7
 800e596:	bfbf      	itttt	lt
 800e598:	9b07      	ldrlt	r3, [sp, #28]
 800e59a:	9707      	strlt	r7, [sp, #28]
 800e59c:	1afa      	sublt	r2, r7, r3
 800e59e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800e5a0:	bfbb      	ittet	lt
 800e5a2:	189b      	addlt	r3, r3, r2
 800e5a4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800e5a6:	1bdf      	subge	r7, r3, r7
 800e5a8:	2700      	movlt	r7, #0
 800e5aa:	f1b9 0f00 	cmp.w	r9, #0
 800e5ae:	bfb5      	itete	lt
 800e5b0:	9b05      	ldrlt	r3, [sp, #20]
 800e5b2:	9d05      	ldrge	r5, [sp, #20]
 800e5b4:	eba3 0509 	sublt.w	r5, r3, r9
 800e5b8:	464b      	movge	r3, r9
 800e5ba:	bfb8      	it	lt
 800e5bc:	2300      	movlt	r3, #0
 800e5be:	e77e      	b.n	800e4be <_dtoa_r+0x6fe>
 800e5c0:	9f07      	ldr	r7, [sp, #28]
 800e5c2:	9d05      	ldr	r5, [sp, #20]
 800e5c4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800e5c6:	e783      	b.n	800e4d0 <_dtoa_r+0x710>
 800e5c8:	9a07      	ldr	r2, [sp, #28]
 800e5ca:	e7ab      	b.n	800e524 <_dtoa_r+0x764>
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	e7d4      	b.n	800e57a <_dtoa_r+0x7ba>
 800e5d0:	9b00      	ldr	r3, [sp, #0]
 800e5d2:	e7d2      	b.n	800e57a <_dtoa_r+0x7ba>
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	9307      	str	r3, [sp, #28]
 800e5d8:	693b      	ldr	r3, [r7, #16]
 800e5da:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800e5de:	6918      	ldr	r0, [r3, #16]
 800e5e0:	f000 fdb8 	bl	800f154 <__hi0bits>
 800e5e4:	f1c0 0020 	rsb	r0, r0, #32
 800e5e8:	4440      	add	r0, r8
 800e5ea:	f010 001f 	ands.w	r0, r0, #31
 800e5ee:	d047      	beq.n	800e680 <_dtoa_r+0x8c0>
 800e5f0:	f1c0 0320 	rsb	r3, r0, #32
 800e5f4:	2b04      	cmp	r3, #4
 800e5f6:	dd3b      	ble.n	800e670 <_dtoa_r+0x8b0>
 800e5f8:	9b05      	ldr	r3, [sp, #20]
 800e5fa:	f1c0 001c 	rsb	r0, r0, #28
 800e5fe:	4403      	add	r3, r0
 800e600:	9305      	str	r3, [sp, #20]
 800e602:	4405      	add	r5, r0
 800e604:	4480      	add	r8, r0
 800e606:	9b05      	ldr	r3, [sp, #20]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	dd05      	ble.n	800e618 <_dtoa_r+0x858>
 800e60c:	461a      	mov	r2, r3
 800e60e:	9904      	ldr	r1, [sp, #16]
 800e610:	4620      	mov	r0, r4
 800e612:	f000 fedb 	bl	800f3cc <__lshift>
 800e616:	9004      	str	r0, [sp, #16]
 800e618:	f1b8 0f00 	cmp.w	r8, #0
 800e61c:	dd05      	ble.n	800e62a <_dtoa_r+0x86a>
 800e61e:	4639      	mov	r1, r7
 800e620:	4642      	mov	r2, r8
 800e622:	4620      	mov	r0, r4
 800e624:	f000 fed2 	bl	800f3cc <__lshift>
 800e628:	4607      	mov	r7, r0
 800e62a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e62c:	b353      	cbz	r3, 800e684 <_dtoa_r+0x8c4>
 800e62e:	4639      	mov	r1, r7
 800e630:	9804      	ldr	r0, [sp, #16]
 800e632:	f000 ff1f 	bl	800f474 <__mcmp>
 800e636:	2800      	cmp	r0, #0
 800e638:	da24      	bge.n	800e684 <_dtoa_r+0x8c4>
 800e63a:	2300      	movs	r3, #0
 800e63c:	220a      	movs	r2, #10
 800e63e:	9904      	ldr	r1, [sp, #16]
 800e640:	4620      	mov	r0, r4
 800e642:	f000 fd0e 	bl	800f062 <__multadd>
 800e646:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e648:	9004      	str	r0, [sp, #16]
 800e64a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e64e:	2b00      	cmp	r3, #0
 800e650:	f000 814d 	beq.w	800e8ee <_dtoa_r+0xb2e>
 800e654:	2300      	movs	r3, #0
 800e656:	4631      	mov	r1, r6
 800e658:	220a      	movs	r2, #10
 800e65a:	4620      	mov	r0, r4
 800e65c:	f000 fd01 	bl	800f062 <__multadd>
 800e660:	9b02      	ldr	r3, [sp, #8]
 800e662:	2b00      	cmp	r3, #0
 800e664:	4606      	mov	r6, r0
 800e666:	dc4f      	bgt.n	800e708 <_dtoa_r+0x948>
 800e668:	9b06      	ldr	r3, [sp, #24]
 800e66a:	2b02      	cmp	r3, #2
 800e66c:	dd4c      	ble.n	800e708 <_dtoa_r+0x948>
 800e66e:	e011      	b.n	800e694 <_dtoa_r+0x8d4>
 800e670:	d0c9      	beq.n	800e606 <_dtoa_r+0x846>
 800e672:	9a05      	ldr	r2, [sp, #20]
 800e674:	331c      	adds	r3, #28
 800e676:	441a      	add	r2, r3
 800e678:	9205      	str	r2, [sp, #20]
 800e67a:	441d      	add	r5, r3
 800e67c:	4498      	add	r8, r3
 800e67e:	e7c2      	b.n	800e606 <_dtoa_r+0x846>
 800e680:	4603      	mov	r3, r0
 800e682:	e7f6      	b.n	800e672 <_dtoa_r+0x8b2>
 800e684:	f1b9 0f00 	cmp.w	r9, #0
 800e688:	dc38      	bgt.n	800e6fc <_dtoa_r+0x93c>
 800e68a:	9b06      	ldr	r3, [sp, #24]
 800e68c:	2b02      	cmp	r3, #2
 800e68e:	dd35      	ble.n	800e6fc <_dtoa_r+0x93c>
 800e690:	f8cd 9008 	str.w	r9, [sp, #8]
 800e694:	9b02      	ldr	r3, [sp, #8]
 800e696:	b963      	cbnz	r3, 800e6b2 <_dtoa_r+0x8f2>
 800e698:	4639      	mov	r1, r7
 800e69a:	2205      	movs	r2, #5
 800e69c:	4620      	mov	r0, r4
 800e69e:	f000 fce0 	bl	800f062 <__multadd>
 800e6a2:	4601      	mov	r1, r0
 800e6a4:	4607      	mov	r7, r0
 800e6a6:	9804      	ldr	r0, [sp, #16]
 800e6a8:	f000 fee4 	bl	800f474 <__mcmp>
 800e6ac:	2800      	cmp	r0, #0
 800e6ae:	f73f adcc 	bgt.w	800e24a <_dtoa_r+0x48a>
 800e6b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e6b4:	465d      	mov	r5, fp
 800e6b6:	ea6f 0a03 	mvn.w	sl, r3
 800e6ba:	f04f 0900 	mov.w	r9, #0
 800e6be:	4639      	mov	r1, r7
 800e6c0:	4620      	mov	r0, r4
 800e6c2:	f000 fcb7 	bl	800f034 <_Bfree>
 800e6c6:	2e00      	cmp	r6, #0
 800e6c8:	f43f aeb7 	beq.w	800e43a <_dtoa_r+0x67a>
 800e6cc:	f1b9 0f00 	cmp.w	r9, #0
 800e6d0:	d005      	beq.n	800e6de <_dtoa_r+0x91e>
 800e6d2:	45b1      	cmp	r9, r6
 800e6d4:	d003      	beq.n	800e6de <_dtoa_r+0x91e>
 800e6d6:	4649      	mov	r1, r9
 800e6d8:	4620      	mov	r0, r4
 800e6da:	f000 fcab 	bl	800f034 <_Bfree>
 800e6de:	4631      	mov	r1, r6
 800e6e0:	4620      	mov	r0, r4
 800e6e2:	f000 fca7 	bl	800f034 <_Bfree>
 800e6e6:	e6a8      	b.n	800e43a <_dtoa_r+0x67a>
 800e6e8:	2700      	movs	r7, #0
 800e6ea:	463e      	mov	r6, r7
 800e6ec:	e7e1      	b.n	800e6b2 <_dtoa_r+0x8f2>
 800e6ee:	f8dd a020 	ldr.w	sl, [sp, #32]
 800e6f2:	463e      	mov	r6, r7
 800e6f4:	e5a9      	b.n	800e24a <_dtoa_r+0x48a>
 800e6f6:	bf00      	nop
 800e6f8:	40240000 	.word	0x40240000
 800e6fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e6fe:	f8cd 9008 	str.w	r9, [sp, #8]
 800e702:	2b00      	cmp	r3, #0
 800e704:	f000 80fa 	beq.w	800e8fc <_dtoa_r+0xb3c>
 800e708:	2d00      	cmp	r5, #0
 800e70a:	dd05      	ble.n	800e718 <_dtoa_r+0x958>
 800e70c:	4631      	mov	r1, r6
 800e70e:	462a      	mov	r2, r5
 800e710:	4620      	mov	r0, r4
 800e712:	f000 fe5b 	bl	800f3cc <__lshift>
 800e716:	4606      	mov	r6, r0
 800e718:	9b07      	ldr	r3, [sp, #28]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d04c      	beq.n	800e7b8 <_dtoa_r+0x9f8>
 800e71e:	6871      	ldr	r1, [r6, #4]
 800e720:	4620      	mov	r0, r4
 800e722:	f000 fc53 	bl	800efcc <_Balloc>
 800e726:	6932      	ldr	r2, [r6, #16]
 800e728:	3202      	adds	r2, #2
 800e72a:	4605      	mov	r5, r0
 800e72c:	0092      	lsls	r2, r2, #2
 800e72e:	f106 010c 	add.w	r1, r6, #12
 800e732:	300c      	adds	r0, #12
 800e734:	f7fd fcd6 	bl	800c0e4 <memcpy>
 800e738:	2201      	movs	r2, #1
 800e73a:	4629      	mov	r1, r5
 800e73c:	4620      	mov	r0, r4
 800e73e:	f000 fe45 	bl	800f3cc <__lshift>
 800e742:	9b00      	ldr	r3, [sp, #0]
 800e744:	f8cd b014 	str.w	fp, [sp, #20]
 800e748:	f003 0301 	and.w	r3, r3, #1
 800e74c:	46b1      	mov	r9, r6
 800e74e:	9307      	str	r3, [sp, #28]
 800e750:	4606      	mov	r6, r0
 800e752:	4639      	mov	r1, r7
 800e754:	9804      	ldr	r0, [sp, #16]
 800e756:	f7ff faa5 	bl	800dca4 <quorem>
 800e75a:	4649      	mov	r1, r9
 800e75c:	4605      	mov	r5, r0
 800e75e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800e762:	9804      	ldr	r0, [sp, #16]
 800e764:	f000 fe86 	bl	800f474 <__mcmp>
 800e768:	4632      	mov	r2, r6
 800e76a:	9000      	str	r0, [sp, #0]
 800e76c:	4639      	mov	r1, r7
 800e76e:	4620      	mov	r0, r4
 800e770:	f000 fe9a 	bl	800f4a8 <__mdiff>
 800e774:	68c3      	ldr	r3, [r0, #12]
 800e776:	4602      	mov	r2, r0
 800e778:	bb03      	cbnz	r3, 800e7bc <_dtoa_r+0x9fc>
 800e77a:	4601      	mov	r1, r0
 800e77c:	9008      	str	r0, [sp, #32]
 800e77e:	9804      	ldr	r0, [sp, #16]
 800e780:	f000 fe78 	bl	800f474 <__mcmp>
 800e784:	9a08      	ldr	r2, [sp, #32]
 800e786:	4603      	mov	r3, r0
 800e788:	4611      	mov	r1, r2
 800e78a:	4620      	mov	r0, r4
 800e78c:	9308      	str	r3, [sp, #32]
 800e78e:	f000 fc51 	bl	800f034 <_Bfree>
 800e792:	9b08      	ldr	r3, [sp, #32]
 800e794:	b9a3      	cbnz	r3, 800e7c0 <_dtoa_r+0xa00>
 800e796:	9a06      	ldr	r2, [sp, #24]
 800e798:	b992      	cbnz	r2, 800e7c0 <_dtoa_r+0xa00>
 800e79a:	9a07      	ldr	r2, [sp, #28]
 800e79c:	b982      	cbnz	r2, 800e7c0 <_dtoa_r+0xa00>
 800e79e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e7a2:	d029      	beq.n	800e7f8 <_dtoa_r+0xa38>
 800e7a4:	9b00      	ldr	r3, [sp, #0]
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	dd01      	ble.n	800e7ae <_dtoa_r+0x9ee>
 800e7aa:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800e7ae:	9b05      	ldr	r3, [sp, #20]
 800e7b0:	1c5d      	adds	r5, r3, #1
 800e7b2:	f883 8000 	strb.w	r8, [r3]
 800e7b6:	e782      	b.n	800e6be <_dtoa_r+0x8fe>
 800e7b8:	4630      	mov	r0, r6
 800e7ba:	e7c2      	b.n	800e742 <_dtoa_r+0x982>
 800e7bc:	2301      	movs	r3, #1
 800e7be:	e7e3      	b.n	800e788 <_dtoa_r+0x9c8>
 800e7c0:	9a00      	ldr	r2, [sp, #0]
 800e7c2:	2a00      	cmp	r2, #0
 800e7c4:	db04      	blt.n	800e7d0 <_dtoa_r+0xa10>
 800e7c6:	d125      	bne.n	800e814 <_dtoa_r+0xa54>
 800e7c8:	9a06      	ldr	r2, [sp, #24]
 800e7ca:	bb1a      	cbnz	r2, 800e814 <_dtoa_r+0xa54>
 800e7cc:	9a07      	ldr	r2, [sp, #28]
 800e7ce:	bb0a      	cbnz	r2, 800e814 <_dtoa_r+0xa54>
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	ddec      	ble.n	800e7ae <_dtoa_r+0x9ee>
 800e7d4:	2201      	movs	r2, #1
 800e7d6:	9904      	ldr	r1, [sp, #16]
 800e7d8:	4620      	mov	r0, r4
 800e7da:	f000 fdf7 	bl	800f3cc <__lshift>
 800e7de:	4639      	mov	r1, r7
 800e7e0:	9004      	str	r0, [sp, #16]
 800e7e2:	f000 fe47 	bl	800f474 <__mcmp>
 800e7e6:	2800      	cmp	r0, #0
 800e7e8:	dc03      	bgt.n	800e7f2 <_dtoa_r+0xa32>
 800e7ea:	d1e0      	bne.n	800e7ae <_dtoa_r+0x9ee>
 800e7ec:	f018 0f01 	tst.w	r8, #1
 800e7f0:	d0dd      	beq.n	800e7ae <_dtoa_r+0x9ee>
 800e7f2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e7f6:	d1d8      	bne.n	800e7aa <_dtoa_r+0x9ea>
 800e7f8:	9b05      	ldr	r3, [sp, #20]
 800e7fa:	9a05      	ldr	r2, [sp, #20]
 800e7fc:	1c5d      	adds	r5, r3, #1
 800e7fe:	2339      	movs	r3, #57	; 0x39
 800e800:	7013      	strb	r3, [r2, #0]
 800e802:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e806:	2b39      	cmp	r3, #57	; 0x39
 800e808:	f105 32ff 	add.w	r2, r5, #4294967295
 800e80c:	d04f      	beq.n	800e8ae <_dtoa_r+0xaee>
 800e80e:	3301      	adds	r3, #1
 800e810:	7013      	strb	r3, [r2, #0]
 800e812:	e754      	b.n	800e6be <_dtoa_r+0x8fe>
 800e814:	9a05      	ldr	r2, [sp, #20]
 800e816:	2b00      	cmp	r3, #0
 800e818:	f102 0501 	add.w	r5, r2, #1
 800e81c:	dd06      	ble.n	800e82c <_dtoa_r+0xa6c>
 800e81e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e822:	d0e9      	beq.n	800e7f8 <_dtoa_r+0xa38>
 800e824:	f108 0801 	add.w	r8, r8, #1
 800e828:	9b05      	ldr	r3, [sp, #20]
 800e82a:	e7c2      	b.n	800e7b2 <_dtoa_r+0x9f2>
 800e82c:	9a02      	ldr	r2, [sp, #8]
 800e82e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800e832:	eba5 030b 	sub.w	r3, r5, fp
 800e836:	4293      	cmp	r3, r2
 800e838:	d021      	beq.n	800e87e <_dtoa_r+0xabe>
 800e83a:	2300      	movs	r3, #0
 800e83c:	220a      	movs	r2, #10
 800e83e:	9904      	ldr	r1, [sp, #16]
 800e840:	4620      	mov	r0, r4
 800e842:	f000 fc0e 	bl	800f062 <__multadd>
 800e846:	45b1      	cmp	r9, r6
 800e848:	9004      	str	r0, [sp, #16]
 800e84a:	f04f 0300 	mov.w	r3, #0
 800e84e:	f04f 020a 	mov.w	r2, #10
 800e852:	4649      	mov	r1, r9
 800e854:	4620      	mov	r0, r4
 800e856:	d105      	bne.n	800e864 <_dtoa_r+0xaa4>
 800e858:	f000 fc03 	bl	800f062 <__multadd>
 800e85c:	4681      	mov	r9, r0
 800e85e:	4606      	mov	r6, r0
 800e860:	9505      	str	r5, [sp, #20]
 800e862:	e776      	b.n	800e752 <_dtoa_r+0x992>
 800e864:	f000 fbfd 	bl	800f062 <__multadd>
 800e868:	4631      	mov	r1, r6
 800e86a:	4681      	mov	r9, r0
 800e86c:	2300      	movs	r3, #0
 800e86e:	220a      	movs	r2, #10
 800e870:	4620      	mov	r0, r4
 800e872:	f000 fbf6 	bl	800f062 <__multadd>
 800e876:	4606      	mov	r6, r0
 800e878:	e7f2      	b.n	800e860 <_dtoa_r+0xaa0>
 800e87a:	f04f 0900 	mov.w	r9, #0
 800e87e:	2201      	movs	r2, #1
 800e880:	9904      	ldr	r1, [sp, #16]
 800e882:	4620      	mov	r0, r4
 800e884:	f000 fda2 	bl	800f3cc <__lshift>
 800e888:	4639      	mov	r1, r7
 800e88a:	9004      	str	r0, [sp, #16]
 800e88c:	f000 fdf2 	bl	800f474 <__mcmp>
 800e890:	2800      	cmp	r0, #0
 800e892:	dcb6      	bgt.n	800e802 <_dtoa_r+0xa42>
 800e894:	d102      	bne.n	800e89c <_dtoa_r+0xadc>
 800e896:	f018 0f01 	tst.w	r8, #1
 800e89a:	d1b2      	bne.n	800e802 <_dtoa_r+0xa42>
 800e89c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e8a0:	2b30      	cmp	r3, #48	; 0x30
 800e8a2:	f105 32ff 	add.w	r2, r5, #4294967295
 800e8a6:	f47f af0a 	bne.w	800e6be <_dtoa_r+0x8fe>
 800e8aa:	4615      	mov	r5, r2
 800e8ac:	e7f6      	b.n	800e89c <_dtoa_r+0xadc>
 800e8ae:	4593      	cmp	fp, r2
 800e8b0:	d105      	bne.n	800e8be <_dtoa_r+0xafe>
 800e8b2:	2331      	movs	r3, #49	; 0x31
 800e8b4:	f10a 0a01 	add.w	sl, sl, #1
 800e8b8:	f88b 3000 	strb.w	r3, [fp]
 800e8bc:	e6ff      	b.n	800e6be <_dtoa_r+0x8fe>
 800e8be:	4615      	mov	r5, r2
 800e8c0:	e79f      	b.n	800e802 <_dtoa_r+0xa42>
 800e8c2:	f8df b064 	ldr.w	fp, [pc, #100]	; 800e928 <_dtoa_r+0xb68>
 800e8c6:	e007      	b.n	800e8d8 <_dtoa_r+0xb18>
 800e8c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e8ca:	f8df b060 	ldr.w	fp, [pc, #96]	; 800e92c <_dtoa_r+0xb6c>
 800e8ce:	b11b      	cbz	r3, 800e8d8 <_dtoa_r+0xb18>
 800e8d0:	f10b 0308 	add.w	r3, fp, #8
 800e8d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e8d6:	6013      	str	r3, [r2, #0]
 800e8d8:	4658      	mov	r0, fp
 800e8da:	b017      	add	sp, #92	; 0x5c
 800e8dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8e0:	9b06      	ldr	r3, [sp, #24]
 800e8e2:	2b01      	cmp	r3, #1
 800e8e4:	f77f ae35 	ble.w	800e552 <_dtoa_r+0x792>
 800e8e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e8ea:	9307      	str	r3, [sp, #28]
 800e8ec:	e649      	b.n	800e582 <_dtoa_r+0x7c2>
 800e8ee:	9b02      	ldr	r3, [sp, #8]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	dc03      	bgt.n	800e8fc <_dtoa_r+0xb3c>
 800e8f4:	9b06      	ldr	r3, [sp, #24]
 800e8f6:	2b02      	cmp	r3, #2
 800e8f8:	f73f aecc 	bgt.w	800e694 <_dtoa_r+0x8d4>
 800e8fc:	465d      	mov	r5, fp
 800e8fe:	4639      	mov	r1, r7
 800e900:	9804      	ldr	r0, [sp, #16]
 800e902:	f7ff f9cf 	bl	800dca4 <quorem>
 800e906:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800e90a:	f805 8b01 	strb.w	r8, [r5], #1
 800e90e:	9a02      	ldr	r2, [sp, #8]
 800e910:	eba5 030b 	sub.w	r3, r5, fp
 800e914:	429a      	cmp	r2, r3
 800e916:	ddb0      	ble.n	800e87a <_dtoa_r+0xaba>
 800e918:	2300      	movs	r3, #0
 800e91a:	220a      	movs	r2, #10
 800e91c:	9904      	ldr	r1, [sp, #16]
 800e91e:	4620      	mov	r0, r4
 800e920:	f000 fb9f 	bl	800f062 <__multadd>
 800e924:	9004      	str	r0, [sp, #16]
 800e926:	e7ea      	b.n	800e8fe <_dtoa_r+0xb3e>
 800e928:	0800fc10 	.word	0x0800fc10
 800e92c:	0800fc90 	.word	0x0800fc90

0800e930 <rshift>:
 800e930:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e932:	6906      	ldr	r6, [r0, #16]
 800e934:	114b      	asrs	r3, r1, #5
 800e936:	429e      	cmp	r6, r3
 800e938:	f100 0414 	add.w	r4, r0, #20
 800e93c:	dd30      	ble.n	800e9a0 <rshift+0x70>
 800e93e:	f011 011f 	ands.w	r1, r1, #31
 800e942:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800e946:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800e94a:	d108      	bne.n	800e95e <rshift+0x2e>
 800e94c:	4621      	mov	r1, r4
 800e94e:	42b2      	cmp	r2, r6
 800e950:	460b      	mov	r3, r1
 800e952:	d211      	bcs.n	800e978 <rshift+0x48>
 800e954:	f852 3b04 	ldr.w	r3, [r2], #4
 800e958:	f841 3b04 	str.w	r3, [r1], #4
 800e95c:	e7f7      	b.n	800e94e <rshift+0x1e>
 800e95e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800e962:	f1c1 0c20 	rsb	ip, r1, #32
 800e966:	40cd      	lsrs	r5, r1
 800e968:	3204      	adds	r2, #4
 800e96a:	4623      	mov	r3, r4
 800e96c:	42b2      	cmp	r2, r6
 800e96e:	4617      	mov	r7, r2
 800e970:	d30c      	bcc.n	800e98c <rshift+0x5c>
 800e972:	601d      	str	r5, [r3, #0]
 800e974:	b105      	cbz	r5, 800e978 <rshift+0x48>
 800e976:	3304      	adds	r3, #4
 800e978:	1b1a      	subs	r2, r3, r4
 800e97a:	42a3      	cmp	r3, r4
 800e97c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e980:	bf08      	it	eq
 800e982:	2300      	moveq	r3, #0
 800e984:	6102      	str	r2, [r0, #16]
 800e986:	bf08      	it	eq
 800e988:	6143      	streq	r3, [r0, #20]
 800e98a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e98c:	683f      	ldr	r7, [r7, #0]
 800e98e:	fa07 f70c 	lsl.w	r7, r7, ip
 800e992:	433d      	orrs	r5, r7
 800e994:	f843 5b04 	str.w	r5, [r3], #4
 800e998:	f852 5b04 	ldr.w	r5, [r2], #4
 800e99c:	40cd      	lsrs	r5, r1
 800e99e:	e7e5      	b.n	800e96c <rshift+0x3c>
 800e9a0:	4623      	mov	r3, r4
 800e9a2:	e7e9      	b.n	800e978 <rshift+0x48>

0800e9a4 <__hexdig_fun>:
 800e9a4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e9a8:	2b09      	cmp	r3, #9
 800e9aa:	d802      	bhi.n	800e9b2 <__hexdig_fun+0xe>
 800e9ac:	3820      	subs	r0, #32
 800e9ae:	b2c0      	uxtb	r0, r0
 800e9b0:	4770      	bx	lr
 800e9b2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e9b6:	2b05      	cmp	r3, #5
 800e9b8:	d801      	bhi.n	800e9be <__hexdig_fun+0x1a>
 800e9ba:	3847      	subs	r0, #71	; 0x47
 800e9bc:	e7f7      	b.n	800e9ae <__hexdig_fun+0xa>
 800e9be:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e9c2:	2b05      	cmp	r3, #5
 800e9c4:	d801      	bhi.n	800e9ca <__hexdig_fun+0x26>
 800e9c6:	3827      	subs	r0, #39	; 0x27
 800e9c8:	e7f1      	b.n	800e9ae <__hexdig_fun+0xa>
 800e9ca:	2000      	movs	r0, #0
 800e9cc:	4770      	bx	lr

0800e9ce <__gethex>:
 800e9ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9d2:	b08b      	sub	sp, #44	; 0x2c
 800e9d4:	468a      	mov	sl, r1
 800e9d6:	9002      	str	r0, [sp, #8]
 800e9d8:	9816      	ldr	r0, [sp, #88]	; 0x58
 800e9da:	9306      	str	r3, [sp, #24]
 800e9dc:	4690      	mov	r8, r2
 800e9de:	f000 fad0 	bl	800ef82 <__localeconv_l>
 800e9e2:	6803      	ldr	r3, [r0, #0]
 800e9e4:	9303      	str	r3, [sp, #12]
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	f7f1 fbf2 	bl	80001d0 <strlen>
 800e9ec:	9b03      	ldr	r3, [sp, #12]
 800e9ee:	9001      	str	r0, [sp, #4]
 800e9f0:	4403      	add	r3, r0
 800e9f2:	f04f 0b00 	mov.w	fp, #0
 800e9f6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e9fa:	9307      	str	r3, [sp, #28]
 800e9fc:	f8da 3000 	ldr.w	r3, [sl]
 800ea00:	3302      	adds	r3, #2
 800ea02:	461f      	mov	r7, r3
 800ea04:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ea08:	2830      	cmp	r0, #48	; 0x30
 800ea0a:	d06c      	beq.n	800eae6 <__gethex+0x118>
 800ea0c:	f7ff ffca 	bl	800e9a4 <__hexdig_fun>
 800ea10:	4604      	mov	r4, r0
 800ea12:	2800      	cmp	r0, #0
 800ea14:	d16a      	bne.n	800eaec <__gethex+0x11e>
 800ea16:	9a01      	ldr	r2, [sp, #4]
 800ea18:	9903      	ldr	r1, [sp, #12]
 800ea1a:	4638      	mov	r0, r7
 800ea1c:	f001 f836 	bl	800fa8c <strncmp>
 800ea20:	2800      	cmp	r0, #0
 800ea22:	d166      	bne.n	800eaf2 <__gethex+0x124>
 800ea24:	9b01      	ldr	r3, [sp, #4]
 800ea26:	5cf8      	ldrb	r0, [r7, r3]
 800ea28:	18fe      	adds	r6, r7, r3
 800ea2a:	f7ff ffbb 	bl	800e9a4 <__hexdig_fun>
 800ea2e:	2800      	cmp	r0, #0
 800ea30:	d062      	beq.n	800eaf8 <__gethex+0x12a>
 800ea32:	4633      	mov	r3, r6
 800ea34:	7818      	ldrb	r0, [r3, #0]
 800ea36:	2830      	cmp	r0, #48	; 0x30
 800ea38:	461f      	mov	r7, r3
 800ea3a:	f103 0301 	add.w	r3, r3, #1
 800ea3e:	d0f9      	beq.n	800ea34 <__gethex+0x66>
 800ea40:	f7ff ffb0 	bl	800e9a4 <__hexdig_fun>
 800ea44:	fab0 f580 	clz	r5, r0
 800ea48:	096d      	lsrs	r5, r5, #5
 800ea4a:	4634      	mov	r4, r6
 800ea4c:	f04f 0b01 	mov.w	fp, #1
 800ea50:	463a      	mov	r2, r7
 800ea52:	4616      	mov	r6, r2
 800ea54:	3201      	adds	r2, #1
 800ea56:	7830      	ldrb	r0, [r6, #0]
 800ea58:	f7ff ffa4 	bl	800e9a4 <__hexdig_fun>
 800ea5c:	2800      	cmp	r0, #0
 800ea5e:	d1f8      	bne.n	800ea52 <__gethex+0x84>
 800ea60:	9a01      	ldr	r2, [sp, #4]
 800ea62:	9903      	ldr	r1, [sp, #12]
 800ea64:	4630      	mov	r0, r6
 800ea66:	f001 f811 	bl	800fa8c <strncmp>
 800ea6a:	b950      	cbnz	r0, 800ea82 <__gethex+0xb4>
 800ea6c:	b954      	cbnz	r4, 800ea84 <__gethex+0xb6>
 800ea6e:	9b01      	ldr	r3, [sp, #4]
 800ea70:	18f4      	adds	r4, r6, r3
 800ea72:	4622      	mov	r2, r4
 800ea74:	4616      	mov	r6, r2
 800ea76:	3201      	adds	r2, #1
 800ea78:	7830      	ldrb	r0, [r6, #0]
 800ea7a:	f7ff ff93 	bl	800e9a4 <__hexdig_fun>
 800ea7e:	2800      	cmp	r0, #0
 800ea80:	d1f8      	bne.n	800ea74 <__gethex+0xa6>
 800ea82:	b10c      	cbz	r4, 800ea88 <__gethex+0xba>
 800ea84:	1ba4      	subs	r4, r4, r6
 800ea86:	00a4      	lsls	r4, r4, #2
 800ea88:	7833      	ldrb	r3, [r6, #0]
 800ea8a:	2b50      	cmp	r3, #80	; 0x50
 800ea8c:	d001      	beq.n	800ea92 <__gethex+0xc4>
 800ea8e:	2b70      	cmp	r3, #112	; 0x70
 800ea90:	d140      	bne.n	800eb14 <__gethex+0x146>
 800ea92:	7873      	ldrb	r3, [r6, #1]
 800ea94:	2b2b      	cmp	r3, #43	; 0x2b
 800ea96:	d031      	beq.n	800eafc <__gethex+0x12e>
 800ea98:	2b2d      	cmp	r3, #45	; 0x2d
 800ea9a:	d033      	beq.n	800eb04 <__gethex+0x136>
 800ea9c:	1c71      	adds	r1, r6, #1
 800ea9e:	f04f 0900 	mov.w	r9, #0
 800eaa2:	7808      	ldrb	r0, [r1, #0]
 800eaa4:	f7ff ff7e 	bl	800e9a4 <__hexdig_fun>
 800eaa8:	1e43      	subs	r3, r0, #1
 800eaaa:	b2db      	uxtb	r3, r3
 800eaac:	2b18      	cmp	r3, #24
 800eaae:	d831      	bhi.n	800eb14 <__gethex+0x146>
 800eab0:	f1a0 0210 	sub.w	r2, r0, #16
 800eab4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800eab8:	f7ff ff74 	bl	800e9a4 <__hexdig_fun>
 800eabc:	1e43      	subs	r3, r0, #1
 800eabe:	b2db      	uxtb	r3, r3
 800eac0:	2b18      	cmp	r3, #24
 800eac2:	d922      	bls.n	800eb0a <__gethex+0x13c>
 800eac4:	f1b9 0f00 	cmp.w	r9, #0
 800eac8:	d000      	beq.n	800eacc <__gethex+0xfe>
 800eaca:	4252      	negs	r2, r2
 800eacc:	4414      	add	r4, r2
 800eace:	f8ca 1000 	str.w	r1, [sl]
 800ead2:	b30d      	cbz	r5, 800eb18 <__gethex+0x14a>
 800ead4:	f1bb 0f00 	cmp.w	fp, #0
 800ead8:	bf0c      	ite	eq
 800eada:	2706      	moveq	r7, #6
 800eadc:	2700      	movne	r7, #0
 800eade:	4638      	mov	r0, r7
 800eae0:	b00b      	add	sp, #44	; 0x2c
 800eae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eae6:	f10b 0b01 	add.w	fp, fp, #1
 800eaea:	e78a      	b.n	800ea02 <__gethex+0x34>
 800eaec:	2500      	movs	r5, #0
 800eaee:	462c      	mov	r4, r5
 800eaf0:	e7ae      	b.n	800ea50 <__gethex+0x82>
 800eaf2:	463e      	mov	r6, r7
 800eaf4:	2501      	movs	r5, #1
 800eaf6:	e7c7      	b.n	800ea88 <__gethex+0xba>
 800eaf8:	4604      	mov	r4, r0
 800eafa:	e7fb      	b.n	800eaf4 <__gethex+0x126>
 800eafc:	f04f 0900 	mov.w	r9, #0
 800eb00:	1cb1      	adds	r1, r6, #2
 800eb02:	e7ce      	b.n	800eaa2 <__gethex+0xd4>
 800eb04:	f04f 0901 	mov.w	r9, #1
 800eb08:	e7fa      	b.n	800eb00 <__gethex+0x132>
 800eb0a:	230a      	movs	r3, #10
 800eb0c:	fb03 0202 	mla	r2, r3, r2, r0
 800eb10:	3a10      	subs	r2, #16
 800eb12:	e7cf      	b.n	800eab4 <__gethex+0xe6>
 800eb14:	4631      	mov	r1, r6
 800eb16:	e7da      	b.n	800eace <__gethex+0x100>
 800eb18:	1bf3      	subs	r3, r6, r7
 800eb1a:	3b01      	subs	r3, #1
 800eb1c:	4629      	mov	r1, r5
 800eb1e:	2b07      	cmp	r3, #7
 800eb20:	dc49      	bgt.n	800ebb6 <__gethex+0x1e8>
 800eb22:	9802      	ldr	r0, [sp, #8]
 800eb24:	f000 fa52 	bl	800efcc <_Balloc>
 800eb28:	9b01      	ldr	r3, [sp, #4]
 800eb2a:	f100 0914 	add.w	r9, r0, #20
 800eb2e:	f04f 0b00 	mov.w	fp, #0
 800eb32:	f1c3 0301 	rsb	r3, r3, #1
 800eb36:	4605      	mov	r5, r0
 800eb38:	f8cd 9010 	str.w	r9, [sp, #16]
 800eb3c:	46da      	mov	sl, fp
 800eb3e:	9308      	str	r3, [sp, #32]
 800eb40:	42b7      	cmp	r7, r6
 800eb42:	d33b      	bcc.n	800ebbc <__gethex+0x1ee>
 800eb44:	9804      	ldr	r0, [sp, #16]
 800eb46:	f840 ab04 	str.w	sl, [r0], #4
 800eb4a:	eba0 0009 	sub.w	r0, r0, r9
 800eb4e:	1080      	asrs	r0, r0, #2
 800eb50:	6128      	str	r0, [r5, #16]
 800eb52:	0147      	lsls	r7, r0, #5
 800eb54:	4650      	mov	r0, sl
 800eb56:	f000 fafd 	bl	800f154 <__hi0bits>
 800eb5a:	f8d8 6000 	ldr.w	r6, [r8]
 800eb5e:	1a3f      	subs	r7, r7, r0
 800eb60:	42b7      	cmp	r7, r6
 800eb62:	dd64      	ble.n	800ec2e <__gethex+0x260>
 800eb64:	1bbf      	subs	r7, r7, r6
 800eb66:	4639      	mov	r1, r7
 800eb68:	4628      	mov	r0, r5
 800eb6a:	f000 fe0d 	bl	800f788 <__any_on>
 800eb6e:	4682      	mov	sl, r0
 800eb70:	b178      	cbz	r0, 800eb92 <__gethex+0x1c4>
 800eb72:	1e7b      	subs	r3, r7, #1
 800eb74:	1159      	asrs	r1, r3, #5
 800eb76:	f003 021f 	and.w	r2, r3, #31
 800eb7a:	f04f 0a01 	mov.w	sl, #1
 800eb7e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800eb82:	fa0a f202 	lsl.w	r2, sl, r2
 800eb86:	420a      	tst	r2, r1
 800eb88:	d003      	beq.n	800eb92 <__gethex+0x1c4>
 800eb8a:	4553      	cmp	r3, sl
 800eb8c:	dc46      	bgt.n	800ec1c <__gethex+0x24e>
 800eb8e:	f04f 0a02 	mov.w	sl, #2
 800eb92:	4639      	mov	r1, r7
 800eb94:	4628      	mov	r0, r5
 800eb96:	f7ff fecb 	bl	800e930 <rshift>
 800eb9a:	443c      	add	r4, r7
 800eb9c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800eba0:	42a3      	cmp	r3, r4
 800eba2:	da52      	bge.n	800ec4a <__gethex+0x27c>
 800eba4:	4629      	mov	r1, r5
 800eba6:	9802      	ldr	r0, [sp, #8]
 800eba8:	f000 fa44 	bl	800f034 <_Bfree>
 800ebac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ebae:	2300      	movs	r3, #0
 800ebb0:	6013      	str	r3, [r2, #0]
 800ebb2:	27a3      	movs	r7, #163	; 0xa3
 800ebb4:	e793      	b.n	800eade <__gethex+0x110>
 800ebb6:	3101      	adds	r1, #1
 800ebb8:	105b      	asrs	r3, r3, #1
 800ebba:	e7b0      	b.n	800eb1e <__gethex+0x150>
 800ebbc:	1e73      	subs	r3, r6, #1
 800ebbe:	9305      	str	r3, [sp, #20]
 800ebc0:	9a07      	ldr	r2, [sp, #28]
 800ebc2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ebc6:	4293      	cmp	r3, r2
 800ebc8:	d018      	beq.n	800ebfc <__gethex+0x22e>
 800ebca:	f1bb 0f20 	cmp.w	fp, #32
 800ebce:	d107      	bne.n	800ebe0 <__gethex+0x212>
 800ebd0:	9b04      	ldr	r3, [sp, #16]
 800ebd2:	f8c3 a000 	str.w	sl, [r3]
 800ebd6:	3304      	adds	r3, #4
 800ebd8:	f04f 0a00 	mov.w	sl, #0
 800ebdc:	9304      	str	r3, [sp, #16]
 800ebde:	46d3      	mov	fp, sl
 800ebe0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ebe4:	f7ff fede 	bl	800e9a4 <__hexdig_fun>
 800ebe8:	f000 000f 	and.w	r0, r0, #15
 800ebec:	fa00 f00b 	lsl.w	r0, r0, fp
 800ebf0:	ea4a 0a00 	orr.w	sl, sl, r0
 800ebf4:	f10b 0b04 	add.w	fp, fp, #4
 800ebf8:	9b05      	ldr	r3, [sp, #20]
 800ebfa:	e00d      	b.n	800ec18 <__gethex+0x24a>
 800ebfc:	9b05      	ldr	r3, [sp, #20]
 800ebfe:	9a08      	ldr	r2, [sp, #32]
 800ec00:	4413      	add	r3, r2
 800ec02:	42bb      	cmp	r3, r7
 800ec04:	d3e1      	bcc.n	800ebca <__gethex+0x1fc>
 800ec06:	4618      	mov	r0, r3
 800ec08:	9a01      	ldr	r2, [sp, #4]
 800ec0a:	9903      	ldr	r1, [sp, #12]
 800ec0c:	9309      	str	r3, [sp, #36]	; 0x24
 800ec0e:	f000 ff3d 	bl	800fa8c <strncmp>
 800ec12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec14:	2800      	cmp	r0, #0
 800ec16:	d1d8      	bne.n	800ebca <__gethex+0x1fc>
 800ec18:	461e      	mov	r6, r3
 800ec1a:	e791      	b.n	800eb40 <__gethex+0x172>
 800ec1c:	1eb9      	subs	r1, r7, #2
 800ec1e:	4628      	mov	r0, r5
 800ec20:	f000 fdb2 	bl	800f788 <__any_on>
 800ec24:	2800      	cmp	r0, #0
 800ec26:	d0b2      	beq.n	800eb8e <__gethex+0x1c0>
 800ec28:	f04f 0a03 	mov.w	sl, #3
 800ec2c:	e7b1      	b.n	800eb92 <__gethex+0x1c4>
 800ec2e:	da09      	bge.n	800ec44 <__gethex+0x276>
 800ec30:	1bf7      	subs	r7, r6, r7
 800ec32:	4629      	mov	r1, r5
 800ec34:	463a      	mov	r2, r7
 800ec36:	9802      	ldr	r0, [sp, #8]
 800ec38:	f000 fbc8 	bl	800f3cc <__lshift>
 800ec3c:	1be4      	subs	r4, r4, r7
 800ec3e:	4605      	mov	r5, r0
 800ec40:	f100 0914 	add.w	r9, r0, #20
 800ec44:	f04f 0a00 	mov.w	sl, #0
 800ec48:	e7a8      	b.n	800eb9c <__gethex+0x1ce>
 800ec4a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ec4e:	42a0      	cmp	r0, r4
 800ec50:	dd6a      	ble.n	800ed28 <__gethex+0x35a>
 800ec52:	1b04      	subs	r4, r0, r4
 800ec54:	42a6      	cmp	r6, r4
 800ec56:	dc2e      	bgt.n	800ecb6 <__gethex+0x2e8>
 800ec58:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ec5c:	2b02      	cmp	r3, #2
 800ec5e:	d022      	beq.n	800eca6 <__gethex+0x2d8>
 800ec60:	2b03      	cmp	r3, #3
 800ec62:	d024      	beq.n	800ecae <__gethex+0x2e0>
 800ec64:	2b01      	cmp	r3, #1
 800ec66:	d115      	bne.n	800ec94 <__gethex+0x2c6>
 800ec68:	42a6      	cmp	r6, r4
 800ec6a:	d113      	bne.n	800ec94 <__gethex+0x2c6>
 800ec6c:	2e01      	cmp	r6, #1
 800ec6e:	dc0b      	bgt.n	800ec88 <__gethex+0x2ba>
 800ec70:	9a06      	ldr	r2, [sp, #24]
 800ec72:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ec76:	6013      	str	r3, [r2, #0]
 800ec78:	2301      	movs	r3, #1
 800ec7a:	612b      	str	r3, [r5, #16]
 800ec7c:	f8c9 3000 	str.w	r3, [r9]
 800ec80:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ec82:	2762      	movs	r7, #98	; 0x62
 800ec84:	601d      	str	r5, [r3, #0]
 800ec86:	e72a      	b.n	800eade <__gethex+0x110>
 800ec88:	1e71      	subs	r1, r6, #1
 800ec8a:	4628      	mov	r0, r5
 800ec8c:	f000 fd7c 	bl	800f788 <__any_on>
 800ec90:	2800      	cmp	r0, #0
 800ec92:	d1ed      	bne.n	800ec70 <__gethex+0x2a2>
 800ec94:	4629      	mov	r1, r5
 800ec96:	9802      	ldr	r0, [sp, #8]
 800ec98:	f000 f9cc 	bl	800f034 <_Bfree>
 800ec9c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ec9e:	2300      	movs	r3, #0
 800eca0:	6013      	str	r3, [r2, #0]
 800eca2:	2750      	movs	r7, #80	; 0x50
 800eca4:	e71b      	b.n	800eade <__gethex+0x110>
 800eca6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d0e1      	beq.n	800ec70 <__gethex+0x2a2>
 800ecac:	e7f2      	b.n	800ec94 <__gethex+0x2c6>
 800ecae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d1dd      	bne.n	800ec70 <__gethex+0x2a2>
 800ecb4:	e7ee      	b.n	800ec94 <__gethex+0x2c6>
 800ecb6:	1e67      	subs	r7, r4, #1
 800ecb8:	f1ba 0f00 	cmp.w	sl, #0
 800ecbc:	d131      	bne.n	800ed22 <__gethex+0x354>
 800ecbe:	b127      	cbz	r7, 800ecca <__gethex+0x2fc>
 800ecc0:	4639      	mov	r1, r7
 800ecc2:	4628      	mov	r0, r5
 800ecc4:	f000 fd60 	bl	800f788 <__any_on>
 800ecc8:	4682      	mov	sl, r0
 800ecca:	117a      	asrs	r2, r7, #5
 800eccc:	2301      	movs	r3, #1
 800ecce:	f007 071f 	and.w	r7, r7, #31
 800ecd2:	fa03 f707 	lsl.w	r7, r3, r7
 800ecd6:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800ecda:	4621      	mov	r1, r4
 800ecdc:	421f      	tst	r7, r3
 800ecde:	4628      	mov	r0, r5
 800ece0:	bf18      	it	ne
 800ece2:	f04a 0a02 	orrne.w	sl, sl, #2
 800ece6:	1b36      	subs	r6, r6, r4
 800ece8:	f7ff fe22 	bl	800e930 <rshift>
 800ecec:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800ecf0:	2702      	movs	r7, #2
 800ecf2:	f1ba 0f00 	cmp.w	sl, #0
 800ecf6:	d048      	beq.n	800ed8a <__gethex+0x3bc>
 800ecf8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ecfc:	2b02      	cmp	r3, #2
 800ecfe:	d015      	beq.n	800ed2c <__gethex+0x35e>
 800ed00:	2b03      	cmp	r3, #3
 800ed02:	d017      	beq.n	800ed34 <__gethex+0x366>
 800ed04:	2b01      	cmp	r3, #1
 800ed06:	d109      	bne.n	800ed1c <__gethex+0x34e>
 800ed08:	f01a 0f02 	tst.w	sl, #2
 800ed0c:	d006      	beq.n	800ed1c <__gethex+0x34e>
 800ed0e:	f8d9 3000 	ldr.w	r3, [r9]
 800ed12:	ea4a 0a03 	orr.w	sl, sl, r3
 800ed16:	f01a 0f01 	tst.w	sl, #1
 800ed1a:	d10e      	bne.n	800ed3a <__gethex+0x36c>
 800ed1c:	f047 0710 	orr.w	r7, r7, #16
 800ed20:	e033      	b.n	800ed8a <__gethex+0x3bc>
 800ed22:	f04f 0a01 	mov.w	sl, #1
 800ed26:	e7d0      	b.n	800ecca <__gethex+0x2fc>
 800ed28:	2701      	movs	r7, #1
 800ed2a:	e7e2      	b.n	800ecf2 <__gethex+0x324>
 800ed2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ed2e:	f1c3 0301 	rsb	r3, r3, #1
 800ed32:	9315      	str	r3, [sp, #84]	; 0x54
 800ed34:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d0f0      	beq.n	800ed1c <__gethex+0x34e>
 800ed3a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800ed3e:	f105 0314 	add.w	r3, r5, #20
 800ed42:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800ed46:	eb03 010a 	add.w	r1, r3, sl
 800ed4a:	f04f 0c00 	mov.w	ip, #0
 800ed4e:	4618      	mov	r0, r3
 800ed50:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed54:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ed58:	d01c      	beq.n	800ed94 <__gethex+0x3c6>
 800ed5a:	3201      	adds	r2, #1
 800ed5c:	6002      	str	r2, [r0, #0]
 800ed5e:	2f02      	cmp	r7, #2
 800ed60:	f105 0314 	add.w	r3, r5, #20
 800ed64:	d138      	bne.n	800edd8 <__gethex+0x40a>
 800ed66:	f8d8 2000 	ldr.w	r2, [r8]
 800ed6a:	3a01      	subs	r2, #1
 800ed6c:	42b2      	cmp	r2, r6
 800ed6e:	d10a      	bne.n	800ed86 <__gethex+0x3b8>
 800ed70:	1171      	asrs	r1, r6, #5
 800ed72:	2201      	movs	r2, #1
 800ed74:	f006 061f 	and.w	r6, r6, #31
 800ed78:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ed7c:	fa02 f606 	lsl.w	r6, r2, r6
 800ed80:	421e      	tst	r6, r3
 800ed82:	bf18      	it	ne
 800ed84:	4617      	movne	r7, r2
 800ed86:	f047 0720 	orr.w	r7, r7, #32
 800ed8a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ed8c:	601d      	str	r5, [r3, #0]
 800ed8e:	9b06      	ldr	r3, [sp, #24]
 800ed90:	601c      	str	r4, [r3, #0]
 800ed92:	e6a4      	b.n	800eade <__gethex+0x110>
 800ed94:	4299      	cmp	r1, r3
 800ed96:	f843 cc04 	str.w	ip, [r3, #-4]
 800ed9a:	d8d8      	bhi.n	800ed4e <__gethex+0x380>
 800ed9c:	68ab      	ldr	r3, [r5, #8]
 800ed9e:	4599      	cmp	r9, r3
 800eda0:	db12      	blt.n	800edc8 <__gethex+0x3fa>
 800eda2:	6869      	ldr	r1, [r5, #4]
 800eda4:	9802      	ldr	r0, [sp, #8]
 800eda6:	3101      	adds	r1, #1
 800eda8:	f000 f910 	bl	800efcc <_Balloc>
 800edac:	692a      	ldr	r2, [r5, #16]
 800edae:	3202      	adds	r2, #2
 800edb0:	f105 010c 	add.w	r1, r5, #12
 800edb4:	4683      	mov	fp, r0
 800edb6:	0092      	lsls	r2, r2, #2
 800edb8:	300c      	adds	r0, #12
 800edba:	f7fd f993 	bl	800c0e4 <memcpy>
 800edbe:	4629      	mov	r1, r5
 800edc0:	9802      	ldr	r0, [sp, #8]
 800edc2:	f000 f937 	bl	800f034 <_Bfree>
 800edc6:	465d      	mov	r5, fp
 800edc8:	692b      	ldr	r3, [r5, #16]
 800edca:	1c5a      	adds	r2, r3, #1
 800edcc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800edd0:	612a      	str	r2, [r5, #16]
 800edd2:	2201      	movs	r2, #1
 800edd4:	615a      	str	r2, [r3, #20]
 800edd6:	e7c2      	b.n	800ed5e <__gethex+0x390>
 800edd8:	692a      	ldr	r2, [r5, #16]
 800edda:	454a      	cmp	r2, r9
 800eddc:	dd0b      	ble.n	800edf6 <__gethex+0x428>
 800edde:	2101      	movs	r1, #1
 800ede0:	4628      	mov	r0, r5
 800ede2:	f7ff fda5 	bl	800e930 <rshift>
 800ede6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800edea:	3401      	adds	r4, #1
 800edec:	42a3      	cmp	r3, r4
 800edee:	f6ff aed9 	blt.w	800eba4 <__gethex+0x1d6>
 800edf2:	2701      	movs	r7, #1
 800edf4:	e7c7      	b.n	800ed86 <__gethex+0x3b8>
 800edf6:	f016 061f 	ands.w	r6, r6, #31
 800edfa:	d0fa      	beq.n	800edf2 <__gethex+0x424>
 800edfc:	449a      	add	sl, r3
 800edfe:	f1c6 0620 	rsb	r6, r6, #32
 800ee02:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800ee06:	f000 f9a5 	bl	800f154 <__hi0bits>
 800ee0a:	42b0      	cmp	r0, r6
 800ee0c:	dbe7      	blt.n	800edde <__gethex+0x410>
 800ee0e:	e7f0      	b.n	800edf2 <__gethex+0x424>

0800ee10 <L_shift>:
 800ee10:	f1c2 0208 	rsb	r2, r2, #8
 800ee14:	0092      	lsls	r2, r2, #2
 800ee16:	b570      	push	{r4, r5, r6, lr}
 800ee18:	f1c2 0620 	rsb	r6, r2, #32
 800ee1c:	6843      	ldr	r3, [r0, #4]
 800ee1e:	6804      	ldr	r4, [r0, #0]
 800ee20:	fa03 f506 	lsl.w	r5, r3, r6
 800ee24:	432c      	orrs	r4, r5
 800ee26:	40d3      	lsrs	r3, r2
 800ee28:	6004      	str	r4, [r0, #0]
 800ee2a:	f840 3f04 	str.w	r3, [r0, #4]!
 800ee2e:	4288      	cmp	r0, r1
 800ee30:	d3f4      	bcc.n	800ee1c <L_shift+0xc>
 800ee32:	bd70      	pop	{r4, r5, r6, pc}

0800ee34 <__match>:
 800ee34:	b530      	push	{r4, r5, lr}
 800ee36:	6803      	ldr	r3, [r0, #0]
 800ee38:	3301      	adds	r3, #1
 800ee3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ee3e:	b914      	cbnz	r4, 800ee46 <__match+0x12>
 800ee40:	6003      	str	r3, [r0, #0]
 800ee42:	2001      	movs	r0, #1
 800ee44:	bd30      	pop	{r4, r5, pc}
 800ee46:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee4a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ee4e:	2d19      	cmp	r5, #25
 800ee50:	bf98      	it	ls
 800ee52:	3220      	addls	r2, #32
 800ee54:	42a2      	cmp	r2, r4
 800ee56:	d0f0      	beq.n	800ee3a <__match+0x6>
 800ee58:	2000      	movs	r0, #0
 800ee5a:	e7f3      	b.n	800ee44 <__match+0x10>

0800ee5c <__hexnan>:
 800ee5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee60:	680b      	ldr	r3, [r1, #0]
 800ee62:	6801      	ldr	r1, [r0, #0]
 800ee64:	115f      	asrs	r7, r3, #5
 800ee66:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800ee6a:	f013 031f 	ands.w	r3, r3, #31
 800ee6e:	b087      	sub	sp, #28
 800ee70:	bf18      	it	ne
 800ee72:	3704      	addne	r7, #4
 800ee74:	2500      	movs	r5, #0
 800ee76:	1f3e      	subs	r6, r7, #4
 800ee78:	4682      	mov	sl, r0
 800ee7a:	4690      	mov	r8, r2
 800ee7c:	9301      	str	r3, [sp, #4]
 800ee7e:	f847 5c04 	str.w	r5, [r7, #-4]
 800ee82:	46b1      	mov	r9, r6
 800ee84:	4634      	mov	r4, r6
 800ee86:	9502      	str	r5, [sp, #8]
 800ee88:	46ab      	mov	fp, r5
 800ee8a:	784a      	ldrb	r2, [r1, #1]
 800ee8c:	1c4b      	adds	r3, r1, #1
 800ee8e:	9303      	str	r3, [sp, #12]
 800ee90:	b342      	cbz	r2, 800eee4 <__hexnan+0x88>
 800ee92:	4610      	mov	r0, r2
 800ee94:	9105      	str	r1, [sp, #20]
 800ee96:	9204      	str	r2, [sp, #16]
 800ee98:	f7ff fd84 	bl	800e9a4 <__hexdig_fun>
 800ee9c:	2800      	cmp	r0, #0
 800ee9e:	d143      	bne.n	800ef28 <__hexnan+0xcc>
 800eea0:	9a04      	ldr	r2, [sp, #16]
 800eea2:	9905      	ldr	r1, [sp, #20]
 800eea4:	2a20      	cmp	r2, #32
 800eea6:	d818      	bhi.n	800eeda <__hexnan+0x7e>
 800eea8:	9b02      	ldr	r3, [sp, #8]
 800eeaa:	459b      	cmp	fp, r3
 800eeac:	dd13      	ble.n	800eed6 <__hexnan+0x7a>
 800eeae:	454c      	cmp	r4, r9
 800eeb0:	d206      	bcs.n	800eec0 <__hexnan+0x64>
 800eeb2:	2d07      	cmp	r5, #7
 800eeb4:	dc04      	bgt.n	800eec0 <__hexnan+0x64>
 800eeb6:	462a      	mov	r2, r5
 800eeb8:	4649      	mov	r1, r9
 800eeba:	4620      	mov	r0, r4
 800eebc:	f7ff ffa8 	bl	800ee10 <L_shift>
 800eec0:	4544      	cmp	r4, r8
 800eec2:	d944      	bls.n	800ef4e <__hexnan+0xf2>
 800eec4:	2300      	movs	r3, #0
 800eec6:	f1a4 0904 	sub.w	r9, r4, #4
 800eeca:	f844 3c04 	str.w	r3, [r4, #-4]
 800eece:	f8cd b008 	str.w	fp, [sp, #8]
 800eed2:	464c      	mov	r4, r9
 800eed4:	461d      	mov	r5, r3
 800eed6:	9903      	ldr	r1, [sp, #12]
 800eed8:	e7d7      	b.n	800ee8a <__hexnan+0x2e>
 800eeda:	2a29      	cmp	r2, #41	; 0x29
 800eedc:	d14a      	bne.n	800ef74 <__hexnan+0x118>
 800eede:	3102      	adds	r1, #2
 800eee0:	f8ca 1000 	str.w	r1, [sl]
 800eee4:	f1bb 0f00 	cmp.w	fp, #0
 800eee8:	d044      	beq.n	800ef74 <__hexnan+0x118>
 800eeea:	454c      	cmp	r4, r9
 800eeec:	d206      	bcs.n	800eefc <__hexnan+0xa0>
 800eeee:	2d07      	cmp	r5, #7
 800eef0:	dc04      	bgt.n	800eefc <__hexnan+0xa0>
 800eef2:	462a      	mov	r2, r5
 800eef4:	4649      	mov	r1, r9
 800eef6:	4620      	mov	r0, r4
 800eef8:	f7ff ff8a 	bl	800ee10 <L_shift>
 800eefc:	4544      	cmp	r4, r8
 800eefe:	d928      	bls.n	800ef52 <__hexnan+0xf6>
 800ef00:	4643      	mov	r3, r8
 800ef02:	f854 2b04 	ldr.w	r2, [r4], #4
 800ef06:	f843 2b04 	str.w	r2, [r3], #4
 800ef0a:	42a6      	cmp	r6, r4
 800ef0c:	d2f9      	bcs.n	800ef02 <__hexnan+0xa6>
 800ef0e:	2200      	movs	r2, #0
 800ef10:	f843 2b04 	str.w	r2, [r3], #4
 800ef14:	429e      	cmp	r6, r3
 800ef16:	d2fb      	bcs.n	800ef10 <__hexnan+0xb4>
 800ef18:	6833      	ldr	r3, [r6, #0]
 800ef1a:	b91b      	cbnz	r3, 800ef24 <__hexnan+0xc8>
 800ef1c:	4546      	cmp	r6, r8
 800ef1e:	d127      	bne.n	800ef70 <__hexnan+0x114>
 800ef20:	2301      	movs	r3, #1
 800ef22:	6033      	str	r3, [r6, #0]
 800ef24:	2005      	movs	r0, #5
 800ef26:	e026      	b.n	800ef76 <__hexnan+0x11a>
 800ef28:	3501      	adds	r5, #1
 800ef2a:	2d08      	cmp	r5, #8
 800ef2c:	f10b 0b01 	add.w	fp, fp, #1
 800ef30:	dd06      	ble.n	800ef40 <__hexnan+0xe4>
 800ef32:	4544      	cmp	r4, r8
 800ef34:	d9cf      	bls.n	800eed6 <__hexnan+0x7a>
 800ef36:	2300      	movs	r3, #0
 800ef38:	f844 3c04 	str.w	r3, [r4, #-4]
 800ef3c:	2501      	movs	r5, #1
 800ef3e:	3c04      	subs	r4, #4
 800ef40:	6822      	ldr	r2, [r4, #0]
 800ef42:	f000 000f 	and.w	r0, r0, #15
 800ef46:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ef4a:	6020      	str	r0, [r4, #0]
 800ef4c:	e7c3      	b.n	800eed6 <__hexnan+0x7a>
 800ef4e:	2508      	movs	r5, #8
 800ef50:	e7c1      	b.n	800eed6 <__hexnan+0x7a>
 800ef52:	9b01      	ldr	r3, [sp, #4]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d0df      	beq.n	800ef18 <__hexnan+0xbc>
 800ef58:	f04f 32ff 	mov.w	r2, #4294967295
 800ef5c:	f1c3 0320 	rsb	r3, r3, #32
 800ef60:	fa22 f303 	lsr.w	r3, r2, r3
 800ef64:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800ef68:	401a      	ands	r2, r3
 800ef6a:	f847 2c04 	str.w	r2, [r7, #-4]
 800ef6e:	e7d3      	b.n	800ef18 <__hexnan+0xbc>
 800ef70:	3e04      	subs	r6, #4
 800ef72:	e7d1      	b.n	800ef18 <__hexnan+0xbc>
 800ef74:	2004      	movs	r0, #4
 800ef76:	b007      	add	sp, #28
 800ef78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ef7c <__locale_ctype_ptr_l>:
 800ef7c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800ef80:	4770      	bx	lr

0800ef82 <__localeconv_l>:
 800ef82:	30f0      	adds	r0, #240	; 0xf0
 800ef84:	4770      	bx	lr
	...

0800ef88 <_localeconv_r>:
 800ef88:	4b04      	ldr	r3, [pc, #16]	; (800ef9c <_localeconv_r+0x14>)
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	6a18      	ldr	r0, [r3, #32]
 800ef8e:	4b04      	ldr	r3, [pc, #16]	; (800efa0 <_localeconv_r+0x18>)
 800ef90:	2800      	cmp	r0, #0
 800ef92:	bf08      	it	eq
 800ef94:	4618      	moveq	r0, r3
 800ef96:	30f0      	adds	r0, #240	; 0xf0
 800ef98:	4770      	bx	lr
 800ef9a:	bf00      	nop
 800ef9c:	20000180 	.word	0x20000180
 800efa0:	200001e4 	.word	0x200001e4

0800efa4 <__ascii_mbtowc>:
 800efa4:	b082      	sub	sp, #8
 800efa6:	b901      	cbnz	r1, 800efaa <__ascii_mbtowc+0x6>
 800efa8:	a901      	add	r1, sp, #4
 800efaa:	b142      	cbz	r2, 800efbe <__ascii_mbtowc+0x1a>
 800efac:	b14b      	cbz	r3, 800efc2 <__ascii_mbtowc+0x1e>
 800efae:	7813      	ldrb	r3, [r2, #0]
 800efb0:	600b      	str	r3, [r1, #0]
 800efb2:	7812      	ldrb	r2, [r2, #0]
 800efb4:	1c10      	adds	r0, r2, #0
 800efb6:	bf18      	it	ne
 800efb8:	2001      	movne	r0, #1
 800efba:	b002      	add	sp, #8
 800efbc:	4770      	bx	lr
 800efbe:	4610      	mov	r0, r2
 800efc0:	e7fb      	b.n	800efba <__ascii_mbtowc+0x16>
 800efc2:	f06f 0001 	mvn.w	r0, #1
 800efc6:	e7f8      	b.n	800efba <__ascii_mbtowc+0x16>

0800efc8 <__malloc_lock>:
 800efc8:	4770      	bx	lr

0800efca <__malloc_unlock>:
 800efca:	4770      	bx	lr

0800efcc <_Balloc>:
 800efcc:	b570      	push	{r4, r5, r6, lr}
 800efce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800efd0:	4604      	mov	r4, r0
 800efd2:	460e      	mov	r6, r1
 800efd4:	b93d      	cbnz	r5, 800efe6 <_Balloc+0x1a>
 800efd6:	2010      	movs	r0, #16
 800efd8:	f7fd f874 	bl	800c0c4 <malloc>
 800efdc:	6260      	str	r0, [r4, #36]	; 0x24
 800efde:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800efe2:	6005      	str	r5, [r0, #0]
 800efe4:	60c5      	str	r5, [r0, #12]
 800efe6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800efe8:	68eb      	ldr	r3, [r5, #12]
 800efea:	b183      	cbz	r3, 800f00e <_Balloc+0x42>
 800efec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800efee:	68db      	ldr	r3, [r3, #12]
 800eff0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800eff4:	b9b8      	cbnz	r0, 800f026 <_Balloc+0x5a>
 800eff6:	2101      	movs	r1, #1
 800eff8:	fa01 f506 	lsl.w	r5, r1, r6
 800effc:	1d6a      	adds	r2, r5, #5
 800effe:	0092      	lsls	r2, r2, #2
 800f000:	4620      	mov	r0, r4
 800f002:	f000 fbe2 	bl	800f7ca <_calloc_r>
 800f006:	b160      	cbz	r0, 800f022 <_Balloc+0x56>
 800f008:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800f00c:	e00e      	b.n	800f02c <_Balloc+0x60>
 800f00e:	2221      	movs	r2, #33	; 0x21
 800f010:	2104      	movs	r1, #4
 800f012:	4620      	mov	r0, r4
 800f014:	f000 fbd9 	bl	800f7ca <_calloc_r>
 800f018:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f01a:	60e8      	str	r0, [r5, #12]
 800f01c:	68db      	ldr	r3, [r3, #12]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d1e4      	bne.n	800efec <_Balloc+0x20>
 800f022:	2000      	movs	r0, #0
 800f024:	bd70      	pop	{r4, r5, r6, pc}
 800f026:	6802      	ldr	r2, [r0, #0]
 800f028:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800f02c:	2300      	movs	r3, #0
 800f02e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f032:	e7f7      	b.n	800f024 <_Balloc+0x58>

0800f034 <_Bfree>:
 800f034:	b570      	push	{r4, r5, r6, lr}
 800f036:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800f038:	4606      	mov	r6, r0
 800f03a:	460d      	mov	r5, r1
 800f03c:	b93c      	cbnz	r4, 800f04e <_Bfree+0x1a>
 800f03e:	2010      	movs	r0, #16
 800f040:	f7fd f840 	bl	800c0c4 <malloc>
 800f044:	6270      	str	r0, [r6, #36]	; 0x24
 800f046:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f04a:	6004      	str	r4, [r0, #0]
 800f04c:	60c4      	str	r4, [r0, #12]
 800f04e:	b13d      	cbz	r5, 800f060 <_Bfree+0x2c>
 800f050:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800f052:	686a      	ldr	r2, [r5, #4]
 800f054:	68db      	ldr	r3, [r3, #12]
 800f056:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f05a:	6029      	str	r1, [r5, #0]
 800f05c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800f060:	bd70      	pop	{r4, r5, r6, pc}

0800f062 <__multadd>:
 800f062:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f066:	690d      	ldr	r5, [r1, #16]
 800f068:	461f      	mov	r7, r3
 800f06a:	4606      	mov	r6, r0
 800f06c:	460c      	mov	r4, r1
 800f06e:	f101 0c14 	add.w	ip, r1, #20
 800f072:	2300      	movs	r3, #0
 800f074:	f8dc 0000 	ldr.w	r0, [ip]
 800f078:	b281      	uxth	r1, r0
 800f07a:	fb02 7101 	mla	r1, r2, r1, r7
 800f07e:	0c0f      	lsrs	r7, r1, #16
 800f080:	0c00      	lsrs	r0, r0, #16
 800f082:	fb02 7000 	mla	r0, r2, r0, r7
 800f086:	b289      	uxth	r1, r1
 800f088:	3301      	adds	r3, #1
 800f08a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800f08e:	429d      	cmp	r5, r3
 800f090:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800f094:	f84c 1b04 	str.w	r1, [ip], #4
 800f098:	dcec      	bgt.n	800f074 <__multadd+0x12>
 800f09a:	b1d7      	cbz	r7, 800f0d2 <__multadd+0x70>
 800f09c:	68a3      	ldr	r3, [r4, #8]
 800f09e:	42ab      	cmp	r3, r5
 800f0a0:	dc12      	bgt.n	800f0c8 <__multadd+0x66>
 800f0a2:	6861      	ldr	r1, [r4, #4]
 800f0a4:	4630      	mov	r0, r6
 800f0a6:	3101      	adds	r1, #1
 800f0a8:	f7ff ff90 	bl	800efcc <_Balloc>
 800f0ac:	6922      	ldr	r2, [r4, #16]
 800f0ae:	3202      	adds	r2, #2
 800f0b0:	f104 010c 	add.w	r1, r4, #12
 800f0b4:	4680      	mov	r8, r0
 800f0b6:	0092      	lsls	r2, r2, #2
 800f0b8:	300c      	adds	r0, #12
 800f0ba:	f7fd f813 	bl	800c0e4 <memcpy>
 800f0be:	4621      	mov	r1, r4
 800f0c0:	4630      	mov	r0, r6
 800f0c2:	f7ff ffb7 	bl	800f034 <_Bfree>
 800f0c6:	4644      	mov	r4, r8
 800f0c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f0cc:	3501      	adds	r5, #1
 800f0ce:	615f      	str	r7, [r3, #20]
 800f0d0:	6125      	str	r5, [r4, #16]
 800f0d2:	4620      	mov	r0, r4
 800f0d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f0d8 <__s2b>:
 800f0d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f0dc:	460c      	mov	r4, r1
 800f0de:	4615      	mov	r5, r2
 800f0e0:	461f      	mov	r7, r3
 800f0e2:	2209      	movs	r2, #9
 800f0e4:	3308      	adds	r3, #8
 800f0e6:	4606      	mov	r6, r0
 800f0e8:	fb93 f3f2 	sdiv	r3, r3, r2
 800f0ec:	2100      	movs	r1, #0
 800f0ee:	2201      	movs	r2, #1
 800f0f0:	429a      	cmp	r2, r3
 800f0f2:	db20      	blt.n	800f136 <__s2b+0x5e>
 800f0f4:	4630      	mov	r0, r6
 800f0f6:	f7ff ff69 	bl	800efcc <_Balloc>
 800f0fa:	9b08      	ldr	r3, [sp, #32]
 800f0fc:	6143      	str	r3, [r0, #20]
 800f0fe:	2d09      	cmp	r5, #9
 800f100:	f04f 0301 	mov.w	r3, #1
 800f104:	6103      	str	r3, [r0, #16]
 800f106:	dd19      	ble.n	800f13c <__s2b+0x64>
 800f108:	f104 0809 	add.w	r8, r4, #9
 800f10c:	46c1      	mov	r9, r8
 800f10e:	442c      	add	r4, r5
 800f110:	f819 3b01 	ldrb.w	r3, [r9], #1
 800f114:	4601      	mov	r1, r0
 800f116:	3b30      	subs	r3, #48	; 0x30
 800f118:	220a      	movs	r2, #10
 800f11a:	4630      	mov	r0, r6
 800f11c:	f7ff ffa1 	bl	800f062 <__multadd>
 800f120:	45a1      	cmp	r9, r4
 800f122:	d1f5      	bne.n	800f110 <__s2b+0x38>
 800f124:	eb08 0405 	add.w	r4, r8, r5
 800f128:	3c08      	subs	r4, #8
 800f12a:	1b2d      	subs	r5, r5, r4
 800f12c:	1963      	adds	r3, r4, r5
 800f12e:	42bb      	cmp	r3, r7
 800f130:	db07      	blt.n	800f142 <__s2b+0x6a>
 800f132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f136:	0052      	lsls	r2, r2, #1
 800f138:	3101      	adds	r1, #1
 800f13a:	e7d9      	b.n	800f0f0 <__s2b+0x18>
 800f13c:	340a      	adds	r4, #10
 800f13e:	2509      	movs	r5, #9
 800f140:	e7f3      	b.n	800f12a <__s2b+0x52>
 800f142:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f146:	4601      	mov	r1, r0
 800f148:	3b30      	subs	r3, #48	; 0x30
 800f14a:	220a      	movs	r2, #10
 800f14c:	4630      	mov	r0, r6
 800f14e:	f7ff ff88 	bl	800f062 <__multadd>
 800f152:	e7eb      	b.n	800f12c <__s2b+0x54>

0800f154 <__hi0bits>:
 800f154:	0c02      	lsrs	r2, r0, #16
 800f156:	0412      	lsls	r2, r2, #16
 800f158:	4603      	mov	r3, r0
 800f15a:	b9b2      	cbnz	r2, 800f18a <__hi0bits+0x36>
 800f15c:	0403      	lsls	r3, r0, #16
 800f15e:	2010      	movs	r0, #16
 800f160:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800f164:	bf04      	itt	eq
 800f166:	021b      	lsleq	r3, r3, #8
 800f168:	3008      	addeq	r0, #8
 800f16a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800f16e:	bf04      	itt	eq
 800f170:	011b      	lsleq	r3, r3, #4
 800f172:	3004      	addeq	r0, #4
 800f174:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800f178:	bf04      	itt	eq
 800f17a:	009b      	lsleq	r3, r3, #2
 800f17c:	3002      	addeq	r0, #2
 800f17e:	2b00      	cmp	r3, #0
 800f180:	db06      	blt.n	800f190 <__hi0bits+0x3c>
 800f182:	005b      	lsls	r3, r3, #1
 800f184:	d503      	bpl.n	800f18e <__hi0bits+0x3a>
 800f186:	3001      	adds	r0, #1
 800f188:	4770      	bx	lr
 800f18a:	2000      	movs	r0, #0
 800f18c:	e7e8      	b.n	800f160 <__hi0bits+0xc>
 800f18e:	2020      	movs	r0, #32
 800f190:	4770      	bx	lr

0800f192 <__lo0bits>:
 800f192:	6803      	ldr	r3, [r0, #0]
 800f194:	f013 0207 	ands.w	r2, r3, #7
 800f198:	4601      	mov	r1, r0
 800f19a:	d00b      	beq.n	800f1b4 <__lo0bits+0x22>
 800f19c:	07da      	lsls	r2, r3, #31
 800f19e:	d423      	bmi.n	800f1e8 <__lo0bits+0x56>
 800f1a0:	0798      	lsls	r0, r3, #30
 800f1a2:	bf49      	itett	mi
 800f1a4:	085b      	lsrmi	r3, r3, #1
 800f1a6:	089b      	lsrpl	r3, r3, #2
 800f1a8:	2001      	movmi	r0, #1
 800f1aa:	600b      	strmi	r3, [r1, #0]
 800f1ac:	bf5c      	itt	pl
 800f1ae:	600b      	strpl	r3, [r1, #0]
 800f1b0:	2002      	movpl	r0, #2
 800f1b2:	4770      	bx	lr
 800f1b4:	b298      	uxth	r0, r3
 800f1b6:	b9a8      	cbnz	r0, 800f1e4 <__lo0bits+0x52>
 800f1b8:	0c1b      	lsrs	r3, r3, #16
 800f1ba:	2010      	movs	r0, #16
 800f1bc:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f1c0:	bf04      	itt	eq
 800f1c2:	0a1b      	lsreq	r3, r3, #8
 800f1c4:	3008      	addeq	r0, #8
 800f1c6:	071a      	lsls	r2, r3, #28
 800f1c8:	bf04      	itt	eq
 800f1ca:	091b      	lsreq	r3, r3, #4
 800f1cc:	3004      	addeq	r0, #4
 800f1ce:	079a      	lsls	r2, r3, #30
 800f1d0:	bf04      	itt	eq
 800f1d2:	089b      	lsreq	r3, r3, #2
 800f1d4:	3002      	addeq	r0, #2
 800f1d6:	07da      	lsls	r2, r3, #31
 800f1d8:	d402      	bmi.n	800f1e0 <__lo0bits+0x4e>
 800f1da:	085b      	lsrs	r3, r3, #1
 800f1dc:	d006      	beq.n	800f1ec <__lo0bits+0x5a>
 800f1de:	3001      	adds	r0, #1
 800f1e0:	600b      	str	r3, [r1, #0]
 800f1e2:	4770      	bx	lr
 800f1e4:	4610      	mov	r0, r2
 800f1e6:	e7e9      	b.n	800f1bc <__lo0bits+0x2a>
 800f1e8:	2000      	movs	r0, #0
 800f1ea:	4770      	bx	lr
 800f1ec:	2020      	movs	r0, #32
 800f1ee:	4770      	bx	lr

0800f1f0 <__i2b>:
 800f1f0:	b510      	push	{r4, lr}
 800f1f2:	460c      	mov	r4, r1
 800f1f4:	2101      	movs	r1, #1
 800f1f6:	f7ff fee9 	bl	800efcc <_Balloc>
 800f1fa:	2201      	movs	r2, #1
 800f1fc:	6144      	str	r4, [r0, #20]
 800f1fe:	6102      	str	r2, [r0, #16]
 800f200:	bd10      	pop	{r4, pc}

0800f202 <__multiply>:
 800f202:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f206:	4614      	mov	r4, r2
 800f208:	690a      	ldr	r2, [r1, #16]
 800f20a:	6923      	ldr	r3, [r4, #16]
 800f20c:	429a      	cmp	r2, r3
 800f20e:	bfb8      	it	lt
 800f210:	460b      	movlt	r3, r1
 800f212:	4688      	mov	r8, r1
 800f214:	bfbc      	itt	lt
 800f216:	46a0      	movlt	r8, r4
 800f218:	461c      	movlt	r4, r3
 800f21a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f21e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f222:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f226:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f22a:	eb07 0609 	add.w	r6, r7, r9
 800f22e:	42b3      	cmp	r3, r6
 800f230:	bfb8      	it	lt
 800f232:	3101      	addlt	r1, #1
 800f234:	f7ff feca 	bl	800efcc <_Balloc>
 800f238:	f100 0514 	add.w	r5, r0, #20
 800f23c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800f240:	462b      	mov	r3, r5
 800f242:	2200      	movs	r2, #0
 800f244:	4573      	cmp	r3, lr
 800f246:	d316      	bcc.n	800f276 <__multiply+0x74>
 800f248:	f104 0214 	add.w	r2, r4, #20
 800f24c:	f108 0114 	add.w	r1, r8, #20
 800f250:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800f254:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800f258:	9300      	str	r3, [sp, #0]
 800f25a:	9b00      	ldr	r3, [sp, #0]
 800f25c:	9201      	str	r2, [sp, #4]
 800f25e:	4293      	cmp	r3, r2
 800f260:	d80c      	bhi.n	800f27c <__multiply+0x7a>
 800f262:	2e00      	cmp	r6, #0
 800f264:	dd03      	ble.n	800f26e <__multiply+0x6c>
 800f266:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d05d      	beq.n	800f32a <__multiply+0x128>
 800f26e:	6106      	str	r6, [r0, #16]
 800f270:	b003      	add	sp, #12
 800f272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f276:	f843 2b04 	str.w	r2, [r3], #4
 800f27a:	e7e3      	b.n	800f244 <__multiply+0x42>
 800f27c:	f8b2 b000 	ldrh.w	fp, [r2]
 800f280:	f1bb 0f00 	cmp.w	fp, #0
 800f284:	d023      	beq.n	800f2ce <__multiply+0xcc>
 800f286:	4689      	mov	r9, r1
 800f288:	46ac      	mov	ip, r5
 800f28a:	f04f 0800 	mov.w	r8, #0
 800f28e:	f859 4b04 	ldr.w	r4, [r9], #4
 800f292:	f8dc a000 	ldr.w	sl, [ip]
 800f296:	b2a3      	uxth	r3, r4
 800f298:	fa1f fa8a 	uxth.w	sl, sl
 800f29c:	fb0b a303 	mla	r3, fp, r3, sl
 800f2a0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800f2a4:	f8dc 4000 	ldr.w	r4, [ip]
 800f2a8:	4443      	add	r3, r8
 800f2aa:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800f2ae:	fb0b 840a 	mla	r4, fp, sl, r8
 800f2b2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800f2b6:	46e2      	mov	sl, ip
 800f2b8:	b29b      	uxth	r3, r3
 800f2ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800f2be:	454f      	cmp	r7, r9
 800f2c0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800f2c4:	f84a 3b04 	str.w	r3, [sl], #4
 800f2c8:	d82b      	bhi.n	800f322 <__multiply+0x120>
 800f2ca:	f8cc 8004 	str.w	r8, [ip, #4]
 800f2ce:	9b01      	ldr	r3, [sp, #4]
 800f2d0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800f2d4:	3204      	adds	r2, #4
 800f2d6:	f1ba 0f00 	cmp.w	sl, #0
 800f2da:	d020      	beq.n	800f31e <__multiply+0x11c>
 800f2dc:	682b      	ldr	r3, [r5, #0]
 800f2de:	4689      	mov	r9, r1
 800f2e0:	46a8      	mov	r8, r5
 800f2e2:	f04f 0b00 	mov.w	fp, #0
 800f2e6:	f8b9 c000 	ldrh.w	ip, [r9]
 800f2ea:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800f2ee:	fb0a 440c 	mla	r4, sl, ip, r4
 800f2f2:	445c      	add	r4, fp
 800f2f4:	46c4      	mov	ip, r8
 800f2f6:	b29b      	uxth	r3, r3
 800f2f8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800f2fc:	f84c 3b04 	str.w	r3, [ip], #4
 800f300:	f859 3b04 	ldr.w	r3, [r9], #4
 800f304:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800f308:	0c1b      	lsrs	r3, r3, #16
 800f30a:	fb0a b303 	mla	r3, sl, r3, fp
 800f30e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800f312:	454f      	cmp	r7, r9
 800f314:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800f318:	d805      	bhi.n	800f326 <__multiply+0x124>
 800f31a:	f8c8 3004 	str.w	r3, [r8, #4]
 800f31e:	3504      	adds	r5, #4
 800f320:	e79b      	b.n	800f25a <__multiply+0x58>
 800f322:	46d4      	mov	ip, sl
 800f324:	e7b3      	b.n	800f28e <__multiply+0x8c>
 800f326:	46e0      	mov	r8, ip
 800f328:	e7dd      	b.n	800f2e6 <__multiply+0xe4>
 800f32a:	3e01      	subs	r6, #1
 800f32c:	e799      	b.n	800f262 <__multiply+0x60>
	...

0800f330 <__pow5mult>:
 800f330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f334:	4615      	mov	r5, r2
 800f336:	f012 0203 	ands.w	r2, r2, #3
 800f33a:	4606      	mov	r6, r0
 800f33c:	460f      	mov	r7, r1
 800f33e:	d007      	beq.n	800f350 <__pow5mult+0x20>
 800f340:	3a01      	subs	r2, #1
 800f342:	4c21      	ldr	r4, [pc, #132]	; (800f3c8 <__pow5mult+0x98>)
 800f344:	2300      	movs	r3, #0
 800f346:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f34a:	f7ff fe8a 	bl	800f062 <__multadd>
 800f34e:	4607      	mov	r7, r0
 800f350:	10ad      	asrs	r5, r5, #2
 800f352:	d035      	beq.n	800f3c0 <__pow5mult+0x90>
 800f354:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f356:	b93c      	cbnz	r4, 800f368 <__pow5mult+0x38>
 800f358:	2010      	movs	r0, #16
 800f35a:	f7fc feb3 	bl	800c0c4 <malloc>
 800f35e:	6270      	str	r0, [r6, #36]	; 0x24
 800f360:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f364:	6004      	str	r4, [r0, #0]
 800f366:	60c4      	str	r4, [r0, #12]
 800f368:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f36c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f370:	b94c      	cbnz	r4, 800f386 <__pow5mult+0x56>
 800f372:	f240 2171 	movw	r1, #625	; 0x271
 800f376:	4630      	mov	r0, r6
 800f378:	f7ff ff3a 	bl	800f1f0 <__i2b>
 800f37c:	2300      	movs	r3, #0
 800f37e:	f8c8 0008 	str.w	r0, [r8, #8]
 800f382:	4604      	mov	r4, r0
 800f384:	6003      	str	r3, [r0, #0]
 800f386:	f04f 0800 	mov.w	r8, #0
 800f38a:	07eb      	lsls	r3, r5, #31
 800f38c:	d50a      	bpl.n	800f3a4 <__pow5mult+0x74>
 800f38e:	4639      	mov	r1, r7
 800f390:	4622      	mov	r2, r4
 800f392:	4630      	mov	r0, r6
 800f394:	f7ff ff35 	bl	800f202 <__multiply>
 800f398:	4639      	mov	r1, r7
 800f39a:	4681      	mov	r9, r0
 800f39c:	4630      	mov	r0, r6
 800f39e:	f7ff fe49 	bl	800f034 <_Bfree>
 800f3a2:	464f      	mov	r7, r9
 800f3a4:	106d      	asrs	r5, r5, #1
 800f3a6:	d00b      	beq.n	800f3c0 <__pow5mult+0x90>
 800f3a8:	6820      	ldr	r0, [r4, #0]
 800f3aa:	b938      	cbnz	r0, 800f3bc <__pow5mult+0x8c>
 800f3ac:	4622      	mov	r2, r4
 800f3ae:	4621      	mov	r1, r4
 800f3b0:	4630      	mov	r0, r6
 800f3b2:	f7ff ff26 	bl	800f202 <__multiply>
 800f3b6:	6020      	str	r0, [r4, #0]
 800f3b8:	f8c0 8000 	str.w	r8, [r0]
 800f3bc:	4604      	mov	r4, r0
 800f3be:	e7e4      	b.n	800f38a <__pow5mult+0x5a>
 800f3c0:	4638      	mov	r0, r7
 800f3c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f3c6:	bf00      	nop
 800f3c8:	0800fd98 	.word	0x0800fd98

0800f3cc <__lshift>:
 800f3cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f3d0:	460c      	mov	r4, r1
 800f3d2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f3d6:	6923      	ldr	r3, [r4, #16]
 800f3d8:	6849      	ldr	r1, [r1, #4]
 800f3da:	eb0a 0903 	add.w	r9, sl, r3
 800f3de:	68a3      	ldr	r3, [r4, #8]
 800f3e0:	4607      	mov	r7, r0
 800f3e2:	4616      	mov	r6, r2
 800f3e4:	f109 0501 	add.w	r5, r9, #1
 800f3e8:	42ab      	cmp	r3, r5
 800f3ea:	db32      	blt.n	800f452 <__lshift+0x86>
 800f3ec:	4638      	mov	r0, r7
 800f3ee:	f7ff fded 	bl	800efcc <_Balloc>
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	4680      	mov	r8, r0
 800f3f6:	f100 0114 	add.w	r1, r0, #20
 800f3fa:	461a      	mov	r2, r3
 800f3fc:	4553      	cmp	r3, sl
 800f3fe:	db2b      	blt.n	800f458 <__lshift+0x8c>
 800f400:	6920      	ldr	r0, [r4, #16]
 800f402:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f406:	f104 0314 	add.w	r3, r4, #20
 800f40a:	f016 021f 	ands.w	r2, r6, #31
 800f40e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f412:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f416:	d025      	beq.n	800f464 <__lshift+0x98>
 800f418:	f1c2 0e20 	rsb	lr, r2, #32
 800f41c:	2000      	movs	r0, #0
 800f41e:	681e      	ldr	r6, [r3, #0]
 800f420:	468a      	mov	sl, r1
 800f422:	4096      	lsls	r6, r2
 800f424:	4330      	orrs	r0, r6
 800f426:	f84a 0b04 	str.w	r0, [sl], #4
 800f42a:	f853 0b04 	ldr.w	r0, [r3], #4
 800f42e:	459c      	cmp	ip, r3
 800f430:	fa20 f00e 	lsr.w	r0, r0, lr
 800f434:	d814      	bhi.n	800f460 <__lshift+0x94>
 800f436:	6048      	str	r0, [r1, #4]
 800f438:	b108      	cbz	r0, 800f43e <__lshift+0x72>
 800f43a:	f109 0502 	add.w	r5, r9, #2
 800f43e:	3d01      	subs	r5, #1
 800f440:	4638      	mov	r0, r7
 800f442:	f8c8 5010 	str.w	r5, [r8, #16]
 800f446:	4621      	mov	r1, r4
 800f448:	f7ff fdf4 	bl	800f034 <_Bfree>
 800f44c:	4640      	mov	r0, r8
 800f44e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f452:	3101      	adds	r1, #1
 800f454:	005b      	lsls	r3, r3, #1
 800f456:	e7c7      	b.n	800f3e8 <__lshift+0x1c>
 800f458:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800f45c:	3301      	adds	r3, #1
 800f45e:	e7cd      	b.n	800f3fc <__lshift+0x30>
 800f460:	4651      	mov	r1, sl
 800f462:	e7dc      	b.n	800f41e <__lshift+0x52>
 800f464:	3904      	subs	r1, #4
 800f466:	f853 2b04 	ldr.w	r2, [r3], #4
 800f46a:	f841 2f04 	str.w	r2, [r1, #4]!
 800f46e:	459c      	cmp	ip, r3
 800f470:	d8f9      	bhi.n	800f466 <__lshift+0x9a>
 800f472:	e7e4      	b.n	800f43e <__lshift+0x72>

0800f474 <__mcmp>:
 800f474:	6903      	ldr	r3, [r0, #16]
 800f476:	690a      	ldr	r2, [r1, #16]
 800f478:	1a9b      	subs	r3, r3, r2
 800f47a:	b530      	push	{r4, r5, lr}
 800f47c:	d10c      	bne.n	800f498 <__mcmp+0x24>
 800f47e:	0092      	lsls	r2, r2, #2
 800f480:	3014      	adds	r0, #20
 800f482:	3114      	adds	r1, #20
 800f484:	1884      	adds	r4, r0, r2
 800f486:	4411      	add	r1, r2
 800f488:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f48c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f490:	4295      	cmp	r5, r2
 800f492:	d003      	beq.n	800f49c <__mcmp+0x28>
 800f494:	d305      	bcc.n	800f4a2 <__mcmp+0x2e>
 800f496:	2301      	movs	r3, #1
 800f498:	4618      	mov	r0, r3
 800f49a:	bd30      	pop	{r4, r5, pc}
 800f49c:	42a0      	cmp	r0, r4
 800f49e:	d3f3      	bcc.n	800f488 <__mcmp+0x14>
 800f4a0:	e7fa      	b.n	800f498 <__mcmp+0x24>
 800f4a2:	f04f 33ff 	mov.w	r3, #4294967295
 800f4a6:	e7f7      	b.n	800f498 <__mcmp+0x24>

0800f4a8 <__mdiff>:
 800f4a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f4ac:	460d      	mov	r5, r1
 800f4ae:	4607      	mov	r7, r0
 800f4b0:	4611      	mov	r1, r2
 800f4b2:	4628      	mov	r0, r5
 800f4b4:	4614      	mov	r4, r2
 800f4b6:	f7ff ffdd 	bl	800f474 <__mcmp>
 800f4ba:	1e06      	subs	r6, r0, #0
 800f4bc:	d108      	bne.n	800f4d0 <__mdiff+0x28>
 800f4be:	4631      	mov	r1, r6
 800f4c0:	4638      	mov	r0, r7
 800f4c2:	f7ff fd83 	bl	800efcc <_Balloc>
 800f4c6:	2301      	movs	r3, #1
 800f4c8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800f4cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4d0:	bfa4      	itt	ge
 800f4d2:	4623      	movge	r3, r4
 800f4d4:	462c      	movge	r4, r5
 800f4d6:	4638      	mov	r0, r7
 800f4d8:	6861      	ldr	r1, [r4, #4]
 800f4da:	bfa6      	itte	ge
 800f4dc:	461d      	movge	r5, r3
 800f4de:	2600      	movge	r6, #0
 800f4e0:	2601      	movlt	r6, #1
 800f4e2:	f7ff fd73 	bl	800efcc <_Balloc>
 800f4e6:	692b      	ldr	r3, [r5, #16]
 800f4e8:	60c6      	str	r6, [r0, #12]
 800f4ea:	6926      	ldr	r6, [r4, #16]
 800f4ec:	f105 0914 	add.w	r9, r5, #20
 800f4f0:	f104 0214 	add.w	r2, r4, #20
 800f4f4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800f4f8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800f4fc:	f100 0514 	add.w	r5, r0, #20
 800f500:	f04f 0e00 	mov.w	lr, #0
 800f504:	f852 ab04 	ldr.w	sl, [r2], #4
 800f508:	f859 4b04 	ldr.w	r4, [r9], #4
 800f50c:	fa1e f18a 	uxtah	r1, lr, sl
 800f510:	b2a3      	uxth	r3, r4
 800f512:	1ac9      	subs	r1, r1, r3
 800f514:	0c23      	lsrs	r3, r4, #16
 800f516:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800f51a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800f51e:	b289      	uxth	r1, r1
 800f520:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800f524:	45c8      	cmp	r8, r9
 800f526:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800f52a:	4694      	mov	ip, r2
 800f52c:	f845 3b04 	str.w	r3, [r5], #4
 800f530:	d8e8      	bhi.n	800f504 <__mdiff+0x5c>
 800f532:	45bc      	cmp	ip, r7
 800f534:	d304      	bcc.n	800f540 <__mdiff+0x98>
 800f536:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800f53a:	b183      	cbz	r3, 800f55e <__mdiff+0xb6>
 800f53c:	6106      	str	r6, [r0, #16]
 800f53e:	e7c5      	b.n	800f4cc <__mdiff+0x24>
 800f540:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f544:	fa1e f381 	uxtah	r3, lr, r1
 800f548:	141a      	asrs	r2, r3, #16
 800f54a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f54e:	b29b      	uxth	r3, r3
 800f550:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f554:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800f558:	f845 3b04 	str.w	r3, [r5], #4
 800f55c:	e7e9      	b.n	800f532 <__mdiff+0x8a>
 800f55e:	3e01      	subs	r6, #1
 800f560:	e7e9      	b.n	800f536 <__mdiff+0x8e>
	...

0800f564 <__ulp>:
 800f564:	4b12      	ldr	r3, [pc, #72]	; (800f5b0 <__ulp+0x4c>)
 800f566:	ee10 2a90 	vmov	r2, s1
 800f56a:	401a      	ands	r2, r3
 800f56c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800f570:	2b00      	cmp	r3, #0
 800f572:	dd04      	ble.n	800f57e <__ulp+0x1a>
 800f574:	2000      	movs	r0, #0
 800f576:	4619      	mov	r1, r3
 800f578:	ec41 0b10 	vmov	d0, r0, r1
 800f57c:	4770      	bx	lr
 800f57e:	425b      	negs	r3, r3
 800f580:	151b      	asrs	r3, r3, #20
 800f582:	2b13      	cmp	r3, #19
 800f584:	f04f 0000 	mov.w	r0, #0
 800f588:	f04f 0100 	mov.w	r1, #0
 800f58c:	dc04      	bgt.n	800f598 <__ulp+0x34>
 800f58e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800f592:	fa42 f103 	asr.w	r1, r2, r3
 800f596:	e7ef      	b.n	800f578 <__ulp+0x14>
 800f598:	3b14      	subs	r3, #20
 800f59a:	2b1e      	cmp	r3, #30
 800f59c:	f04f 0201 	mov.w	r2, #1
 800f5a0:	bfda      	itte	le
 800f5a2:	f1c3 031f 	rsble	r3, r3, #31
 800f5a6:	fa02 f303 	lslle.w	r3, r2, r3
 800f5aa:	4613      	movgt	r3, r2
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	e7e3      	b.n	800f578 <__ulp+0x14>
 800f5b0:	7ff00000 	.word	0x7ff00000

0800f5b4 <__b2d>:
 800f5b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5b6:	6905      	ldr	r5, [r0, #16]
 800f5b8:	f100 0714 	add.w	r7, r0, #20
 800f5bc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800f5c0:	1f2e      	subs	r6, r5, #4
 800f5c2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800f5c6:	4620      	mov	r0, r4
 800f5c8:	f7ff fdc4 	bl	800f154 <__hi0bits>
 800f5cc:	f1c0 0320 	rsb	r3, r0, #32
 800f5d0:	280a      	cmp	r0, #10
 800f5d2:	600b      	str	r3, [r1, #0]
 800f5d4:	f8df c074 	ldr.w	ip, [pc, #116]	; 800f64c <__b2d+0x98>
 800f5d8:	dc14      	bgt.n	800f604 <__b2d+0x50>
 800f5da:	f1c0 0e0b 	rsb	lr, r0, #11
 800f5de:	fa24 f10e 	lsr.w	r1, r4, lr
 800f5e2:	42b7      	cmp	r7, r6
 800f5e4:	ea41 030c 	orr.w	r3, r1, ip
 800f5e8:	bf34      	ite	cc
 800f5ea:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f5ee:	2100      	movcs	r1, #0
 800f5f0:	3015      	adds	r0, #21
 800f5f2:	fa04 f000 	lsl.w	r0, r4, r0
 800f5f6:	fa21 f10e 	lsr.w	r1, r1, lr
 800f5fa:	ea40 0201 	orr.w	r2, r0, r1
 800f5fe:	ec43 2b10 	vmov	d0, r2, r3
 800f602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f604:	42b7      	cmp	r7, r6
 800f606:	bf3a      	itte	cc
 800f608:	f1a5 0608 	subcc.w	r6, r5, #8
 800f60c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f610:	2100      	movcs	r1, #0
 800f612:	380b      	subs	r0, #11
 800f614:	d015      	beq.n	800f642 <__b2d+0x8e>
 800f616:	4084      	lsls	r4, r0
 800f618:	f1c0 0520 	rsb	r5, r0, #32
 800f61c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800f620:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800f624:	42be      	cmp	r6, r7
 800f626:	fa21 fc05 	lsr.w	ip, r1, r5
 800f62a:	ea44 030c 	orr.w	r3, r4, ip
 800f62e:	bf8c      	ite	hi
 800f630:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800f634:	2400      	movls	r4, #0
 800f636:	fa01 f000 	lsl.w	r0, r1, r0
 800f63a:	40ec      	lsrs	r4, r5
 800f63c:	ea40 0204 	orr.w	r2, r0, r4
 800f640:	e7dd      	b.n	800f5fe <__b2d+0x4a>
 800f642:	ea44 030c 	orr.w	r3, r4, ip
 800f646:	460a      	mov	r2, r1
 800f648:	e7d9      	b.n	800f5fe <__b2d+0x4a>
 800f64a:	bf00      	nop
 800f64c:	3ff00000 	.word	0x3ff00000

0800f650 <__d2b>:
 800f650:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f654:	460e      	mov	r6, r1
 800f656:	2101      	movs	r1, #1
 800f658:	ec59 8b10 	vmov	r8, r9, d0
 800f65c:	4615      	mov	r5, r2
 800f65e:	f7ff fcb5 	bl	800efcc <_Balloc>
 800f662:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800f666:	4607      	mov	r7, r0
 800f668:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f66c:	bb34      	cbnz	r4, 800f6bc <__d2b+0x6c>
 800f66e:	9301      	str	r3, [sp, #4]
 800f670:	f1b8 0300 	subs.w	r3, r8, #0
 800f674:	d027      	beq.n	800f6c6 <__d2b+0x76>
 800f676:	a802      	add	r0, sp, #8
 800f678:	f840 3d08 	str.w	r3, [r0, #-8]!
 800f67c:	f7ff fd89 	bl	800f192 <__lo0bits>
 800f680:	9900      	ldr	r1, [sp, #0]
 800f682:	b1f0      	cbz	r0, 800f6c2 <__d2b+0x72>
 800f684:	9a01      	ldr	r2, [sp, #4]
 800f686:	f1c0 0320 	rsb	r3, r0, #32
 800f68a:	fa02 f303 	lsl.w	r3, r2, r3
 800f68e:	430b      	orrs	r3, r1
 800f690:	40c2      	lsrs	r2, r0
 800f692:	617b      	str	r3, [r7, #20]
 800f694:	9201      	str	r2, [sp, #4]
 800f696:	9b01      	ldr	r3, [sp, #4]
 800f698:	61bb      	str	r3, [r7, #24]
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	bf14      	ite	ne
 800f69e:	2102      	movne	r1, #2
 800f6a0:	2101      	moveq	r1, #1
 800f6a2:	6139      	str	r1, [r7, #16]
 800f6a4:	b1c4      	cbz	r4, 800f6d8 <__d2b+0x88>
 800f6a6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800f6aa:	4404      	add	r4, r0
 800f6ac:	6034      	str	r4, [r6, #0]
 800f6ae:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f6b2:	6028      	str	r0, [r5, #0]
 800f6b4:	4638      	mov	r0, r7
 800f6b6:	b003      	add	sp, #12
 800f6b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f6bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f6c0:	e7d5      	b.n	800f66e <__d2b+0x1e>
 800f6c2:	6179      	str	r1, [r7, #20]
 800f6c4:	e7e7      	b.n	800f696 <__d2b+0x46>
 800f6c6:	a801      	add	r0, sp, #4
 800f6c8:	f7ff fd63 	bl	800f192 <__lo0bits>
 800f6cc:	9b01      	ldr	r3, [sp, #4]
 800f6ce:	617b      	str	r3, [r7, #20]
 800f6d0:	2101      	movs	r1, #1
 800f6d2:	6139      	str	r1, [r7, #16]
 800f6d4:	3020      	adds	r0, #32
 800f6d6:	e7e5      	b.n	800f6a4 <__d2b+0x54>
 800f6d8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800f6dc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f6e0:	6030      	str	r0, [r6, #0]
 800f6e2:	6918      	ldr	r0, [r3, #16]
 800f6e4:	f7ff fd36 	bl	800f154 <__hi0bits>
 800f6e8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800f6ec:	e7e1      	b.n	800f6b2 <__d2b+0x62>

0800f6ee <__ratio>:
 800f6ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6f2:	4688      	mov	r8, r1
 800f6f4:	4669      	mov	r1, sp
 800f6f6:	4681      	mov	r9, r0
 800f6f8:	f7ff ff5c 	bl	800f5b4 <__b2d>
 800f6fc:	a901      	add	r1, sp, #4
 800f6fe:	4640      	mov	r0, r8
 800f700:	ec57 6b10 	vmov	r6, r7, d0
 800f704:	f7ff ff56 	bl	800f5b4 <__b2d>
 800f708:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f70c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f710:	eba3 0c02 	sub.w	ip, r3, r2
 800f714:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f718:	1a9b      	subs	r3, r3, r2
 800f71a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f71e:	ec5b ab10 	vmov	sl, fp, d0
 800f722:	2b00      	cmp	r3, #0
 800f724:	bfce      	itee	gt
 800f726:	463a      	movgt	r2, r7
 800f728:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f72c:	465a      	movle	r2, fp
 800f72e:	4659      	mov	r1, fp
 800f730:	463d      	mov	r5, r7
 800f732:	bfd4      	ite	le
 800f734:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800f738:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800f73c:	4630      	mov	r0, r6
 800f73e:	ee10 2a10 	vmov	r2, s0
 800f742:	460b      	mov	r3, r1
 800f744:	4629      	mov	r1, r5
 800f746:	f7f1 f881 	bl	800084c <__aeabi_ddiv>
 800f74a:	ec41 0b10 	vmov	d0, r0, r1
 800f74e:	b003      	add	sp, #12
 800f750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f754 <__copybits>:
 800f754:	3901      	subs	r1, #1
 800f756:	b510      	push	{r4, lr}
 800f758:	1149      	asrs	r1, r1, #5
 800f75a:	6914      	ldr	r4, [r2, #16]
 800f75c:	3101      	adds	r1, #1
 800f75e:	f102 0314 	add.w	r3, r2, #20
 800f762:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f766:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f76a:	42a3      	cmp	r3, r4
 800f76c:	4602      	mov	r2, r0
 800f76e:	d303      	bcc.n	800f778 <__copybits+0x24>
 800f770:	2300      	movs	r3, #0
 800f772:	428a      	cmp	r2, r1
 800f774:	d305      	bcc.n	800f782 <__copybits+0x2e>
 800f776:	bd10      	pop	{r4, pc}
 800f778:	f853 2b04 	ldr.w	r2, [r3], #4
 800f77c:	f840 2b04 	str.w	r2, [r0], #4
 800f780:	e7f3      	b.n	800f76a <__copybits+0x16>
 800f782:	f842 3b04 	str.w	r3, [r2], #4
 800f786:	e7f4      	b.n	800f772 <__copybits+0x1e>

0800f788 <__any_on>:
 800f788:	f100 0214 	add.w	r2, r0, #20
 800f78c:	6900      	ldr	r0, [r0, #16]
 800f78e:	114b      	asrs	r3, r1, #5
 800f790:	4298      	cmp	r0, r3
 800f792:	b510      	push	{r4, lr}
 800f794:	db11      	blt.n	800f7ba <__any_on+0x32>
 800f796:	dd0a      	ble.n	800f7ae <__any_on+0x26>
 800f798:	f011 011f 	ands.w	r1, r1, #31
 800f79c:	d007      	beq.n	800f7ae <__any_on+0x26>
 800f79e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f7a2:	fa24 f001 	lsr.w	r0, r4, r1
 800f7a6:	fa00 f101 	lsl.w	r1, r0, r1
 800f7aa:	428c      	cmp	r4, r1
 800f7ac:	d10b      	bne.n	800f7c6 <__any_on+0x3e>
 800f7ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f7b2:	4293      	cmp	r3, r2
 800f7b4:	d803      	bhi.n	800f7be <__any_on+0x36>
 800f7b6:	2000      	movs	r0, #0
 800f7b8:	bd10      	pop	{r4, pc}
 800f7ba:	4603      	mov	r3, r0
 800f7bc:	e7f7      	b.n	800f7ae <__any_on+0x26>
 800f7be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f7c2:	2900      	cmp	r1, #0
 800f7c4:	d0f5      	beq.n	800f7b2 <__any_on+0x2a>
 800f7c6:	2001      	movs	r0, #1
 800f7c8:	e7f6      	b.n	800f7b8 <__any_on+0x30>

0800f7ca <_calloc_r>:
 800f7ca:	b538      	push	{r3, r4, r5, lr}
 800f7cc:	fb02 f401 	mul.w	r4, r2, r1
 800f7d0:	4621      	mov	r1, r4
 800f7d2:	f7fc fce9 	bl	800c1a8 <_malloc_r>
 800f7d6:	4605      	mov	r5, r0
 800f7d8:	b118      	cbz	r0, 800f7e2 <_calloc_r+0x18>
 800f7da:	4622      	mov	r2, r4
 800f7dc:	2100      	movs	r1, #0
 800f7de:	f7fc fc8c 	bl	800c0fa <memset>
 800f7e2:	4628      	mov	r0, r5
 800f7e4:	bd38      	pop	{r3, r4, r5, pc}

0800f7e6 <__ssputs_r>:
 800f7e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f7ea:	688e      	ldr	r6, [r1, #8]
 800f7ec:	429e      	cmp	r6, r3
 800f7ee:	4682      	mov	sl, r0
 800f7f0:	460c      	mov	r4, r1
 800f7f2:	4690      	mov	r8, r2
 800f7f4:	4699      	mov	r9, r3
 800f7f6:	d837      	bhi.n	800f868 <__ssputs_r+0x82>
 800f7f8:	898a      	ldrh	r2, [r1, #12]
 800f7fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f7fe:	d031      	beq.n	800f864 <__ssputs_r+0x7e>
 800f800:	6825      	ldr	r5, [r4, #0]
 800f802:	6909      	ldr	r1, [r1, #16]
 800f804:	1a6f      	subs	r7, r5, r1
 800f806:	6965      	ldr	r5, [r4, #20]
 800f808:	2302      	movs	r3, #2
 800f80a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f80e:	fb95 f5f3 	sdiv	r5, r5, r3
 800f812:	f109 0301 	add.w	r3, r9, #1
 800f816:	443b      	add	r3, r7
 800f818:	429d      	cmp	r5, r3
 800f81a:	bf38      	it	cc
 800f81c:	461d      	movcc	r5, r3
 800f81e:	0553      	lsls	r3, r2, #21
 800f820:	d530      	bpl.n	800f884 <__ssputs_r+0x9e>
 800f822:	4629      	mov	r1, r5
 800f824:	f7fc fcc0 	bl	800c1a8 <_malloc_r>
 800f828:	4606      	mov	r6, r0
 800f82a:	b950      	cbnz	r0, 800f842 <__ssputs_r+0x5c>
 800f82c:	230c      	movs	r3, #12
 800f82e:	f8ca 3000 	str.w	r3, [sl]
 800f832:	89a3      	ldrh	r3, [r4, #12]
 800f834:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f838:	81a3      	strh	r3, [r4, #12]
 800f83a:	f04f 30ff 	mov.w	r0, #4294967295
 800f83e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f842:	463a      	mov	r2, r7
 800f844:	6921      	ldr	r1, [r4, #16]
 800f846:	f7fc fc4d 	bl	800c0e4 <memcpy>
 800f84a:	89a3      	ldrh	r3, [r4, #12]
 800f84c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f854:	81a3      	strh	r3, [r4, #12]
 800f856:	6126      	str	r6, [r4, #16]
 800f858:	6165      	str	r5, [r4, #20]
 800f85a:	443e      	add	r6, r7
 800f85c:	1bed      	subs	r5, r5, r7
 800f85e:	6026      	str	r6, [r4, #0]
 800f860:	60a5      	str	r5, [r4, #8]
 800f862:	464e      	mov	r6, r9
 800f864:	454e      	cmp	r6, r9
 800f866:	d900      	bls.n	800f86a <__ssputs_r+0x84>
 800f868:	464e      	mov	r6, r9
 800f86a:	4632      	mov	r2, r6
 800f86c:	4641      	mov	r1, r8
 800f86e:	6820      	ldr	r0, [r4, #0]
 800f870:	f000 f92b 	bl	800faca <memmove>
 800f874:	68a3      	ldr	r3, [r4, #8]
 800f876:	1b9b      	subs	r3, r3, r6
 800f878:	60a3      	str	r3, [r4, #8]
 800f87a:	6823      	ldr	r3, [r4, #0]
 800f87c:	441e      	add	r6, r3
 800f87e:	6026      	str	r6, [r4, #0]
 800f880:	2000      	movs	r0, #0
 800f882:	e7dc      	b.n	800f83e <__ssputs_r+0x58>
 800f884:	462a      	mov	r2, r5
 800f886:	f000 f939 	bl	800fafc <_realloc_r>
 800f88a:	4606      	mov	r6, r0
 800f88c:	2800      	cmp	r0, #0
 800f88e:	d1e2      	bne.n	800f856 <__ssputs_r+0x70>
 800f890:	6921      	ldr	r1, [r4, #16]
 800f892:	4650      	mov	r0, sl
 800f894:	f7fc fc3a 	bl	800c10c <_free_r>
 800f898:	e7c8      	b.n	800f82c <__ssputs_r+0x46>
	...

0800f89c <_svfiprintf_r>:
 800f89c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8a0:	461d      	mov	r5, r3
 800f8a2:	898b      	ldrh	r3, [r1, #12]
 800f8a4:	061f      	lsls	r7, r3, #24
 800f8a6:	b09d      	sub	sp, #116	; 0x74
 800f8a8:	4680      	mov	r8, r0
 800f8aa:	460c      	mov	r4, r1
 800f8ac:	4616      	mov	r6, r2
 800f8ae:	d50f      	bpl.n	800f8d0 <_svfiprintf_r+0x34>
 800f8b0:	690b      	ldr	r3, [r1, #16]
 800f8b2:	b96b      	cbnz	r3, 800f8d0 <_svfiprintf_r+0x34>
 800f8b4:	2140      	movs	r1, #64	; 0x40
 800f8b6:	f7fc fc77 	bl	800c1a8 <_malloc_r>
 800f8ba:	6020      	str	r0, [r4, #0]
 800f8bc:	6120      	str	r0, [r4, #16]
 800f8be:	b928      	cbnz	r0, 800f8cc <_svfiprintf_r+0x30>
 800f8c0:	230c      	movs	r3, #12
 800f8c2:	f8c8 3000 	str.w	r3, [r8]
 800f8c6:	f04f 30ff 	mov.w	r0, #4294967295
 800f8ca:	e0c8      	b.n	800fa5e <_svfiprintf_r+0x1c2>
 800f8cc:	2340      	movs	r3, #64	; 0x40
 800f8ce:	6163      	str	r3, [r4, #20]
 800f8d0:	2300      	movs	r3, #0
 800f8d2:	9309      	str	r3, [sp, #36]	; 0x24
 800f8d4:	2320      	movs	r3, #32
 800f8d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f8da:	2330      	movs	r3, #48	; 0x30
 800f8dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f8e0:	9503      	str	r5, [sp, #12]
 800f8e2:	f04f 0b01 	mov.w	fp, #1
 800f8e6:	4637      	mov	r7, r6
 800f8e8:	463d      	mov	r5, r7
 800f8ea:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f8ee:	b10b      	cbz	r3, 800f8f4 <_svfiprintf_r+0x58>
 800f8f0:	2b25      	cmp	r3, #37	; 0x25
 800f8f2:	d13e      	bne.n	800f972 <_svfiprintf_r+0xd6>
 800f8f4:	ebb7 0a06 	subs.w	sl, r7, r6
 800f8f8:	d00b      	beq.n	800f912 <_svfiprintf_r+0x76>
 800f8fa:	4653      	mov	r3, sl
 800f8fc:	4632      	mov	r2, r6
 800f8fe:	4621      	mov	r1, r4
 800f900:	4640      	mov	r0, r8
 800f902:	f7ff ff70 	bl	800f7e6 <__ssputs_r>
 800f906:	3001      	adds	r0, #1
 800f908:	f000 80a4 	beq.w	800fa54 <_svfiprintf_r+0x1b8>
 800f90c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f90e:	4453      	add	r3, sl
 800f910:	9309      	str	r3, [sp, #36]	; 0x24
 800f912:	783b      	ldrb	r3, [r7, #0]
 800f914:	2b00      	cmp	r3, #0
 800f916:	f000 809d 	beq.w	800fa54 <_svfiprintf_r+0x1b8>
 800f91a:	2300      	movs	r3, #0
 800f91c:	f04f 32ff 	mov.w	r2, #4294967295
 800f920:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f924:	9304      	str	r3, [sp, #16]
 800f926:	9307      	str	r3, [sp, #28]
 800f928:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f92c:	931a      	str	r3, [sp, #104]	; 0x68
 800f92e:	462f      	mov	r7, r5
 800f930:	2205      	movs	r2, #5
 800f932:	f817 1b01 	ldrb.w	r1, [r7], #1
 800f936:	4850      	ldr	r0, [pc, #320]	; (800fa78 <_svfiprintf_r+0x1dc>)
 800f938:	f7f0 fc52 	bl	80001e0 <memchr>
 800f93c:	9b04      	ldr	r3, [sp, #16]
 800f93e:	b9d0      	cbnz	r0, 800f976 <_svfiprintf_r+0xda>
 800f940:	06d9      	lsls	r1, r3, #27
 800f942:	bf44      	itt	mi
 800f944:	2220      	movmi	r2, #32
 800f946:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f94a:	071a      	lsls	r2, r3, #28
 800f94c:	bf44      	itt	mi
 800f94e:	222b      	movmi	r2, #43	; 0x2b
 800f950:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f954:	782a      	ldrb	r2, [r5, #0]
 800f956:	2a2a      	cmp	r2, #42	; 0x2a
 800f958:	d015      	beq.n	800f986 <_svfiprintf_r+0xea>
 800f95a:	9a07      	ldr	r2, [sp, #28]
 800f95c:	462f      	mov	r7, r5
 800f95e:	2000      	movs	r0, #0
 800f960:	250a      	movs	r5, #10
 800f962:	4639      	mov	r1, r7
 800f964:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f968:	3b30      	subs	r3, #48	; 0x30
 800f96a:	2b09      	cmp	r3, #9
 800f96c:	d94d      	bls.n	800fa0a <_svfiprintf_r+0x16e>
 800f96e:	b1b8      	cbz	r0, 800f9a0 <_svfiprintf_r+0x104>
 800f970:	e00f      	b.n	800f992 <_svfiprintf_r+0xf6>
 800f972:	462f      	mov	r7, r5
 800f974:	e7b8      	b.n	800f8e8 <_svfiprintf_r+0x4c>
 800f976:	4a40      	ldr	r2, [pc, #256]	; (800fa78 <_svfiprintf_r+0x1dc>)
 800f978:	1a80      	subs	r0, r0, r2
 800f97a:	fa0b f000 	lsl.w	r0, fp, r0
 800f97e:	4318      	orrs	r0, r3
 800f980:	9004      	str	r0, [sp, #16]
 800f982:	463d      	mov	r5, r7
 800f984:	e7d3      	b.n	800f92e <_svfiprintf_r+0x92>
 800f986:	9a03      	ldr	r2, [sp, #12]
 800f988:	1d11      	adds	r1, r2, #4
 800f98a:	6812      	ldr	r2, [r2, #0]
 800f98c:	9103      	str	r1, [sp, #12]
 800f98e:	2a00      	cmp	r2, #0
 800f990:	db01      	blt.n	800f996 <_svfiprintf_r+0xfa>
 800f992:	9207      	str	r2, [sp, #28]
 800f994:	e004      	b.n	800f9a0 <_svfiprintf_r+0x104>
 800f996:	4252      	negs	r2, r2
 800f998:	f043 0302 	orr.w	r3, r3, #2
 800f99c:	9207      	str	r2, [sp, #28]
 800f99e:	9304      	str	r3, [sp, #16]
 800f9a0:	783b      	ldrb	r3, [r7, #0]
 800f9a2:	2b2e      	cmp	r3, #46	; 0x2e
 800f9a4:	d10c      	bne.n	800f9c0 <_svfiprintf_r+0x124>
 800f9a6:	787b      	ldrb	r3, [r7, #1]
 800f9a8:	2b2a      	cmp	r3, #42	; 0x2a
 800f9aa:	d133      	bne.n	800fa14 <_svfiprintf_r+0x178>
 800f9ac:	9b03      	ldr	r3, [sp, #12]
 800f9ae:	1d1a      	adds	r2, r3, #4
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	9203      	str	r2, [sp, #12]
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	bfb8      	it	lt
 800f9b8:	f04f 33ff 	movlt.w	r3, #4294967295
 800f9bc:	3702      	adds	r7, #2
 800f9be:	9305      	str	r3, [sp, #20]
 800f9c0:	4d2e      	ldr	r5, [pc, #184]	; (800fa7c <_svfiprintf_r+0x1e0>)
 800f9c2:	7839      	ldrb	r1, [r7, #0]
 800f9c4:	2203      	movs	r2, #3
 800f9c6:	4628      	mov	r0, r5
 800f9c8:	f7f0 fc0a 	bl	80001e0 <memchr>
 800f9cc:	b138      	cbz	r0, 800f9de <_svfiprintf_r+0x142>
 800f9ce:	2340      	movs	r3, #64	; 0x40
 800f9d0:	1b40      	subs	r0, r0, r5
 800f9d2:	fa03 f000 	lsl.w	r0, r3, r0
 800f9d6:	9b04      	ldr	r3, [sp, #16]
 800f9d8:	4303      	orrs	r3, r0
 800f9da:	3701      	adds	r7, #1
 800f9dc:	9304      	str	r3, [sp, #16]
 800f9de:	7839      	ldrb	r1, [r7, #0]
 800f9e0:	4827      	ldr	r0, [pc, #156]	; (800fa80 <_svfiprintf_r+0x1e4>)
 800f9e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f9e6:	2206      	movs	r2, #6
 800f9e8:	1c7e      	adds	r6, r7, #1
 800f9ea:	f7f0 fbf9 	bl	80001e0 <memchr>
 800f9ee:	2800      	cmp	r0, #0
 800f9f0:	d038      	beq.n	800fa64 <_svfiprintf_r+0x1c8>
 800f9f2:	4b24      	ldr	r3, [pc, #144]	; (800fa84 <_svfiprintf_r+0x1e8>)
 800f9f4:	bb13      	cbnz	r3, 800fa3c <_svfiprintf_r+0x1a0>
 800f9f6:	9b03      	ldr	r3, [sp, #12]
 800f9f8:	3307      	adds	r3, #7
 800f9fa:	f023 0307 	bic.w	r3, r3, #7
 800f9fe:	3308      	adds	r3, #8
 800fa00:	9303      	str	r3, [sp, #12]
 800fa02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa04:	444b      	add	r3, r9
 800fa06:	9309      	str	r3, [sp, #36]	; 0x24
 800fa08:	e76d      	b.n	800f8e6 <_svfiprintf_r+0x4a>
 800fa0a:	fb05 3202 	mla	r2, r5, r2, r3
 800fa0e:	2001      	movs	r0, #1
 800fa10:	460f      	mov	r7, r1
 800fa12:	e7a6      	b.n	800f962 <_svfiprintf_r+0xc6>
 800fa14:	2300      	movs	r3, #0
 800fa16:	3701      	adds	r7, #1
 800fa18:	9305      	str	r3, [sp, #20]
 800fa1a:	4619      	mov	r1, r3
 800fa1c:	250a      	movs	r5, #10
 800fa1e:	4638      	mov	r0, r7
 800fa20:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fa24:	3a30      	subs	r2, #48	; 0x30
 800fa26:	2a09      	cmp	r2, #9
 800fa28:	d903      	bls.n	800fa32 <_svfiprintf_r+0x196>
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d0c8      	beq.n	800f9c0 <_svfiprintf_r+0x124>
 800fa2e:	9105      	str	r1, [sp, #20]
 800fa30:	e7c6      	b.n	800f9c0 <_svfiprintf_r+0x124>
 800fa32:	fb05 2101 	mla	r1, r5, r1, r2
 800fa36:	2301      	movs	r3, #1
 800fa38:	4607      	mov	r7, r0
 800fa3a:	e7f0      	b.n	800fa1e <_svfiprintf_r+0x182>
 800fa3c:	ab03      	add	r3, sp, #12
 800fa3e:	9300      	str	r3, [sp, #0]
 800fa40:	4622      	mov	r2, r4
 800fa42:	4b11      	ldr	r3, [pc, #68]	; (800fa88 <_svfiprintf_r+0x1ec>)
 800fa44:	a904      	add	r1, sp, #16
 800fa46:	4640      	mov	r0, r8
 800fa48:	f7fc fc9c 	bl	800c384 <_printf_float>
 800fa4c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800fa50:	4681      	mov	r9, r0
 800fa52:	d1d6      	bne.n	800fa02 <_svfiprintf_r+0x166>
 800fa54:	89a3      	ldrh	r3, [r4, #12]
 800fa56:	065b      	lsls	r3, r3, #25
 800fa58:	f53f af35 	bmi.w	800f8c6 <_svfiprintf_r+0x2a>
 800fa5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fa5e:	b01d      	add	sp, #116	; 0x74
 800fa60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa64:	ab03      	add	r3, sp, #12
 800fa66:	9300      	str	r3, [sp, #0]
 800fa68:	4622      	mov	r2, r4
 800fa6a:	4b07      	ldr	r3, [pc, #28]	; (800fa88 <_svfiprintf_r+0x1ec>)
 800fa6c:	a904      	add	r1, sp, #16
 800fa6e:	4640      	mov	r0, r8
 800fa70:	f7fc ff3e 	bl	800c8f0 <_printf_i>
 800fa74:	e7ea      	b.n	800fa4c <_svfiprintf_r+0x1b0>
 800fa76:	bf00      	nop
 800fa78:	0800fda4 	.word	0x0800fda4
 800fa7c:	0800fdaa 	.word	0x0800fdaa
 800fa80:	0800fdae 	.word	0x0800fdae
 800fa84:	0800c385 	.word	0x0800c385
 800fa88:	0800f7e7 	.word	0x0800f7e7

0800fa8c <strncmp>:
 800fa8c:	b510      	push	{r4, lr}
 800fa8e:	b16a      	cbz	r2, 800faac <strncmp+0x20>
 800fa90:	3901      	subs	r1, #1
 800fa92:	1884      	adds	r4, r0, r2
 800fa94:	f810 3b01 	ldrb.w	r3, [r0], #1
 800fa98:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800fa9c:	4293      	cmp	r3, r2
 800fa9e:	d103      	bne.n	800faa8 <strncmp+0x1c>
 800faa0:	42a0      	cmp	r0, r4
 800faa2:	d001      	beq.n	800faa8 <strncmp+0x1c>
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d1f5      	bne.n	800fa94 <strncmp+0x8>
 800faa8:	1a98      	subs	r0, r3, r2
 800faaa:	bd10      	pop	{r4, pc}
 800faac:	4610      	mov	r0, r2
 800faae:	e7fc      	b.n	800faaa <strncmp+0x1e>

0800fab0 <__ascii_wctomb>:
 800fab0:	b149      	cbz	r1, 800fac6 <__ascii_wctomb+0x16>
 800fab2:	2aff      	cmp	r2, #255	; 0xff
 800fab4:	bf85      	ittet	hi
 800fab6:	238a      	movhi	r3, #138	; 0x8a
 800fab8:	6003      	strhi	r3, [r0, #0]
 800faba:	700a      	strbls	r2, [r1, #0]
 800fabc:	f04f 30ff 	movhi.w	r0, #4294967295
 800fac0:	bf98      	it	ls
 800fac2:	2001      	movls	r0, #1
 800fac4:	4770      	bx	lr
 800fac6:	4608      	mov	r0, r1
 800fac8:	4770      	bx	lr

0800faca <memmove>:
 800faca:	4288      	cmp	r0, r1
 800facc:	b510      	push	{r4, lr}
 800face:	eb01 0302 	add.w	r3, r1, r2
 800fad2:	d807      	bhi.n	800fae4 <memmove+0x1a>
 800fad4:	1e42      	subs	r2, r0, #1
 800fad6:	4299      	cmp	r1, r3
 800fad8:	d00a      	beq.n	800faf0 <memmove+0x26>
 800fada:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fade:	f802 4f01 	strb.w	r4, [r2, #1]!
 800fae2:	e7f8      	b.n	800fad6 <memmove+0xc>
 800fae4:	4283      	cmp	r3, r0
 800fae6:	d9f5      	bls.n	800fad4 <memmove+0xa>
 800fae8:	1881      	adds	r1, r0, r2
 800faea:	1ad2      	subs	r2, r2, r3
 800faec:	42d3      	cmn	r3, r2
 800faee:	d100      	bne.n	800faf2 <memmove+0x28>
 800faf0:	bd10      	pop	{r4, pc}
 800faf2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800faf6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800fafa:	e7f7      	b.n	800faec <memmove+0x22>

0800fafc <_realloc_r>:
 800fafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fafe:	4607      	mov	r7, r0
 800fb00:	4614      	mov	r4, r2
 800fb02:	460e      	mov	r6, r1
 800fb04:	b921      	cbnz	r1, 800fb10 <_realloc_r+0x14>
 800fb06:	4611      	mov	r1, r2
 800fb08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fb0c:	f7fc bb4c 	b.w	800c1a8 <_malloc_r>
 800fb10:	b922      	cbnz	r2, 800fb1c <_realloc_r+0x20>
 800fb12:	f7fc fafb 	bl	800c10c <_free_r>
 800fb16:	4625      	mov	r5, r4
 800fb18:	4628      	mov	r0, r5
 800fb1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb1c:	f000 f814 	bl	800fb48 <_malloc_usable_size_r>
 800fb20:	42a0      	cmp	r0, r4
 800fb22:	d20f      	bcs.n	800fb44 <_realloc_r+0x48>
 800fb24:	4621      	mov	r1, r4
 800fb26:	4638      	mov	r0, r7
 800fb28:	f7fc fb3e 	bl	800c1a8 <_malloc_r>
 800fb2c:	4605      	mov	r5, r0
 800fb2e:	2800      	cmp	r0, #0
 800fb30:	d0f2      	beq.n	800fb18 <_realloc_r+0x1c>
 800fb32:	4631      	mov	r1, r6
 800fb34:	4622      	mov	r2, r4
 800fb36:	f7fc fad5 	bl	800c0e4 <memcpy>
 800fb3a:	4631      	mov	r1, r6
 800fb3c:	4638      	mov	r0, r7
 800fb3e:	f7fc fae5 	bl	800c10c <_free_r>
 800fb42:	e7e9      	b.n	800fb18 <_realloc_r+0x1c>
 800fb44:	4635      	mov	r5, r6
 800fb46:	e7e7      	b.n	800fb18 <_realloc_r+0x1c>

0800fb48 <_malloc_usable_size_r>:
 800fb48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fb4c:	1f18      	subs	r0, r3, #4
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	bfbc      	itt	lt
 800fb52:	580b      	ldrlt	r3, [r1, r0]
 800fb54:	18c0      	addlt	r0, r0, r3
 800fb56:	4770      	bx	lr

0800fb58 <_sbrk>:
 800fb58:	4b04      	ldr	r3, [pc, #16]	; (800fb6c <_sbrk+0x14>)
 800fb5a:	6819      	ldr	r1, [r3, #0]
 800fb5c:	4602      	mov	r2, r0
 800fb5e:	b909      	cbnz	r1, 800fb64 <_sbrk+0xc>
 800fb60:	4903      	ldr	r1, [pc, #12]	; (800fb70 <_sbrk+0x18>)
 800fb62:	6019      	str	r1, [r3, #0]
 800fb64:	6818      	ldr	r0, [r3, #0]
 800fb66:	4402      	add	r2, r0
 800fb68:	601a      	str	r2, [r3, #0]
 800fb6a:	4770      	bx	lr
 800fb6c:	20000590 	.word	0x20000590
 800fb70:	20002838 	.word	0x20002838

0800fb74 <_init>:
 800fb74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb76:	bf00      	nop
 800fb78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb7a:	bc08      	pop	{r3}
 800fb7c:	469e      	mov	lr, r3
 800fb7e:	4770      	bx	lr

0800fb80 <_fini>:
 800fb80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb82:	bf00      	nop
 800fb84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb86:	bc08      	pop	{r3}
 800fb88:	469e      	mov	lr, r3
 800fb8a:	4770      	bx	lr
