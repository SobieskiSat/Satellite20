
Satellite2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011808  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  08011998  08011998  00021998  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011e00  08011e00  0003035c  2**0
                  CONTENTS
  4 .ARM          00000008  08011e00  08011e00  00021e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011e08  08011e08  0003035c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011e08  08011e08  00021e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011e0c  08011e0c  00021e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000035c  20000000  08011e10  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024f0  2000035c  0801216c  0003035c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000284c  0801216c  0003284c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003035c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024bd0  00000000  00000000  0003038c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004cb8  00000000  00000000  00054f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001928  00000000  00000000  00059c18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001710  00000000  00000000  0005b540  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000267cb  00000000  00000000  0005cc50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001a635  00000000  00000000  0008341b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c7f9a  00000000  00000000  0009da50  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001659ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a58  00000000  00000000  00165a68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000035c 	.word	0x2000035c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011980 	.word	0x08011980

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000360 	.word	0x20000360
 80001cc:	08011980 	.word	0x08011980

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_ldivmod>:
 8000c88:	b97b      	cbnz	r3, 8000caa <__aeabi_ldivmod+0x22>
 8000c8a:	b972      	cbnz	r2, 8000caa <__aeabi_ldivmod+0x22>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bfbe      	ittt	lt
 8000c90:	2000      	movlt	r0, #0
 8000c92:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c96:	e006      	blt.n	8000ca6 <__aeabi_ldivmod+0x1e>
 8000c98:	bf08      	it	eq
 8000c9a:	2800      	cmpeq	r0, #0
 8000c9c:	bf1c      	itt	ne
 8000c9e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ca2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca6:	f000 b9bd 	b.w	8001024 <__aeabi_idiv0>
 8000caa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	db09      	blt.n	8000cca <__aeabi_ldivmod+0x42>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db1a      	blt.n	8000cf0 <__aeabi_ldivmod+0x68>
 8000cba:	f000 f84d 	bl	8000d58 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4770      	bx	lr
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1b      	blt.n	8000d0c <__aeabi_ldivmod+0x84>
 8000cd4:	f000 f840 	bl	8000d58 <__udivmoddi4>
 8000cd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	f000 f82f 	bl	8000d58 <__udivmoddi4>
 8000cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d02:	b004      	add	sp, #16
 8000d04:	4240      	negs	r0, r0
 8000d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0a:	4770      	bx	lr
 8000d0c:	4252      	negs	r2, r2
 8000d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d12:	f000 f821 	bl	8000d58 <__udivmoddi4>
 8000d16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1e:	b004      	add	sp, #16
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295
 8000d3c:	f000 b972 	b.w	8001024 <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f806 	bl	8000d58 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__udivmoddi4>:
 8000d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d5c:	9e08      	ldr	r6, [sp, #32]
 8000d5e:	4604      	mov	r4, r0
 8000d60:	4688      	mov	r8, r1
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d14b      	bne.n	8000dfe <__udivmoddi4+0xa6>
 8000d66:	428a      	cmp	r2, r1
 8000d68:	4615      	mov	r5, r2
 8000d6a:	d967      	bls.n	8000e3c <__udivmoddi4+0xe4>
 8000d6c:	fab2 f282 	clz	r2, r2
 8000d70:	b14a      	cbz	r2, 8000d86 <__udivmoddi4+0x2e>
 8000d72:	f1c2 0720 	rsb	r7, r2, #32
 8000d76:	fa01 f302 	lsl.w	r3, r1, r2
 8000d7a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d7e:	4095      	lsls	r5, r2
 8000d80:	ea47 0803 	orr.w	r8, r7, r3
 8000d84:	4094      	lsls	r4, r2
 8000d86:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d8a:	0c23      	lsrs	r3, r4, #16
 8000d8c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d90:	fa1f fc85 	uxth.w	ip, r5
 8000d94:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d98:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d9c:	fb07 f10c 	mul.w	r1, r7, ip
 8000da0:	4299      	cmp	r1, r3
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x60>
 8000da4:	18eb      	adds	r3, r5, r3
 8000da6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000daa:	f080 811b 	bcs.w	8000fe4 <__udivmoddi4+0x28c>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 8118 	bls.w	8000fe4 <__udivmoddi4+0x28c>
 8000db4:	3f02      	subs	r7, #2
 8000db6:	442b      	add	r3, r5
 8000db8:	1a5b      	subs	r3, r3, r1
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dc0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dcc:	45a4      	cmp	ip, r4
 8000dce:	d909      	bls.n	8000de4 <__udivmoddi4+0x8c>
 8000dd0:	192c      	adds	r4, r5, r4
 8000dd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd6:	f080 8107 	bcs.w	8000fe8 <__udivmoddi4+0x290>
 8000dda:	45a4      	cmp	ip, r4
 8000ddc:	f240 8104 	bls.w	8000fe8 <__udivmoddi4+0x290>
 8000de0:	3802      	subs	r0, #2
 8000de2:	442c      	add	r4, r5
 8000de4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000de8:	eba4 040c 	sub.w	r4, r4, ip
 8000dec:	2700      	movs	r7, #0
 8000dee:	b11e      	cbz	r6, 8000df8 <__udivmoddi4+0xa0>
 8000df0:	40d4      	lsrs	r4, r2
 8000df2:	2300      	movs	r3, #0
 8000df4:	e9c6 4300 	strd	r4, r3, [r6]
 8000df8:	4639      	mov	r1, r7
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d909      	bls.n	8000e16 <__udivmoddi4+0xbe>
 8000e02:	2e00      	cmp	r6, #0
 8000e04:	f000 80eb 	beq.w	8000fde <__udivmoddi4+0x286>
 8000e08:	2700      	movs	r7, #0
 8000e0a:	e9c6 0100 	strd	r0, r1, [r6]
 8000e0e:	4638      	mov	r0, r7
 8000e10:	4639      	mov	r1, r7
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	fab3 f783 	clz	r7, r3
 8000e1a:	2f00      	cmp	r7, #0
 8000e1c:	d147      	bne.n	8000eae <__udivmoddi4+0x156>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d302      	bcc.n	8000e28 <__udivmoddi4+0xd0>
 8000e22:	4282      	cmp	r2, r0
 8000e24:	f200 80fa 	bhi.w	800101c <__udivmoddi4+0x2c4>
 8000e28:	1a84      	subs	r4, r0, r2
 8000e2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e2e:	2001      	movs	r0, #1
 8000e30:	4698      	mov	r8, r3
 8000e32:	2e00      	cmp	r6, #0
 8000e34:	d0e0      	beq.n	8000df8 <__udivmoddi4+0xa0>
 8000e36:	e9c6 4800 	strd	r4, r8, [r6]
 8000e3a:	e7dd      	b.n	8000df8 <__udivmoddi4+0xa0>
 8000e3c:	b902      	cbnz	r2, 8000e40 <__udivmoddi4+0xe8>
 8000e3e:	deff      	udf	#255	; 0xff
 8000e40:	fab2 f282 	clz	r2, r2
 8000e44:	2a00      	cmp	r2, #0
 8000e46:	f040 808f 	bne.w	8000f68 <__udivmoddi4+0x210>
 8000e4a:	1b49      	subs	r1, r1, r5
 8000e4c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e50:	fa1f f885 	uxth.w	r8, r5
 8000e54:	2701      	movs	r7, #1
 8000e56:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e5a:	0c23      	lsrs	r3, r4, #16
 8000e5c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e64:	fb08 f10c 	mul.w	r1, r8, ip
 8000e68:	4299      	cmp	r1, r3
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x124>
 8000e6c:	18eb      	adds	r3, r5, r3
 8000e6e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x122>
 8000e74:	4299      	cmp	r1, r3
 8000e76:	f200 80cd 	bhi.w	8001014 <__udivmoddi4+0x2bc>
 8000e7a:	4684      	mov	ip, r0
 8000e7c:	1a59      	subs	r1, r3, r1
 8000e7e:	b2a3      	uxth	r3, r4
 8000e80:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e84:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e88:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e8c:	fb08 f800 	mul.w	r8, r8, r0
 8000e90:	45a0      	cmp	r8, r4
 8000e92:	d907      	bls.n	8000ea4 <__udivmoddi4+0x14c>
 8000e94:	192c      	adds	r4, r5, r4
 8000e96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e9a:	d202      	bcs.n	8000ea2 <__udivmoddi4+0x14a>
 8000e9c:	45a0      	cmp	r8, r4
 8000e9e:	f200 80b6 	bhi.w	800100e <__udivmoddi4+0x2b6>
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	eba4 0408 	sub.w	r4, r4, r8
 8000ea8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000eac:	e79f      	b.n	8000dee <__udivmoddi4+0x96>
 8000eae:	f1c7 0c20 	rsb	ip, r7, #32
 8000eb2:	40bb      	lsls	r3, r7
 8000eb4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000eb8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ebc:	fa01 f407 	lsl.w	r4, r1, r7
 8000ec0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ec4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ec8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ecc:	4325      	orrs	r5, r4
 8000ece:	fbb3 f9f8 	udiv	r9, r3, r8
 8000ed2:	0c2c      	lsrs	r4, r5, #16
 8000ed4:	fb08 3319 	mls	r3, r8, r9, r3
 8000ed8:	fa1f fa8e 	uxth.w	sl, lr
 8000edc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ee0:	fb09 f40a 	mul.w	r4, r9, sl
 8000ee4:	429c      	cmp	r4, r3
 8000ee6:	fa02 f207 	lsl.w	r2, r2, r7
 8000eea:	fa00 f107 	lsl.w	r1, r0, r7
 8000eee:	d90b      	bls.n	8000f08 <__udivmoddi4+0x1b0>
 8000ef0:	eb1e 0303 	adds.w	r3, lr, r3
 8000ef4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ef8:	f080 8087 	bcs.w	800100a <__udivmoddi4+0x2b2>
 8000efc:	429c      	cmp	r4, r3
 8000efe:	f240 8084 	bls.w	800100a <__udivmoddi4+0x2b2>
 8000f02:	f1a9 0902 	sub.w	r9, r9, #2
 8000f06:	4473      	add	r3, lr
 8000f08:	1b1b      	subs	r3, r3, r4
 8000f0a:	b2ad      	uxth	r5, r5
 8000f0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f10:	fb08 3310 	mls	r3, r8, r0, r3
 8000f14:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000f18:	fb00 fa0a 	mul.w	sl, r0, sl
 8000f1c:	45a2      	cmp	sl, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x1da>
 8000f20:	eb1e 0404 	adds.w	r4, lr, r4
 8000f24:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f28:	d26b      	bcs.n	8001002 <__udivmoddi4+0x2aa>
 8000f2a:	45a2      	cmp	sl, r4
 8000f2c:	d969      	bls.n	8001002 <__udivmoddi4+0x2aa>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	4474      	add	r4, lr
 8000f32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f36:	fba0 8902 	umull	r8, r9, r0, r2
 8000f3a:	eba4 040a 	sub.w	r4, r4, sl
 8000f3e:	454c      	cmp	r4, r9
 8000f40:	46c2      	mov	sl, r8
 8000f42:	464b      	mov	r3, r9
 8000f44:	d354      	bcc.n	8000ff0 <__udivmoddi4+0x298>
 8000f46:	d051      	beq.n	8000fec <__udivmoddi4+0x294>
 8000f48:	2e00      	cmp	r6, #0
 8000f4a:	d069      	beq.n	8001020 <__udivmoddi4+0x2c8>
 8000f4c:	ebb1 050a 	subs.w	r5, r1, sl
 8000f50:	eb64 0403 	sbc.w	r4, r4, r3
 8000f54:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f58:	40fd      	lsrs	r5, r7
 8000f5a:	40fc      	lsrs	r4, r7
 8000f5c:	ea4c 0505 	orr.w	r5, ip, r5
 8000f60:	e9c6 5400 	strd	r5, r4, [r6]
 8000f64:	2700      	movs	r7, #0
 8000f66:	e747      	b.n	8000df8 <__udivmoddi4+0xa0>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f70:	4095      	lsls	r5, r2
 8000f72:	fa01 f002 	lsl.w	r0, r1, r2
 8000f76:	fa21 f303 	lsr.w	r3, r1, r3
 8000f7a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f7e:	4338      	orrs	r0, r7
 8000f80:	0c01      	lsrs	r1, r0, #16
 8000f82:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f86:	fa1f f885 	uxth.w	r8, r5
 8000f8a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f92:	fb07 f308 	mul.w	r3, r7, r8
 8000f96:	428b      	cmp	r3, r1
 8000f98:	fa04 f402 	lsl.w	r4, r4, r2
 8000f9c:	d907      	bls.n	8000fae <__udivmoddi4+0x256>
 8000f9e:	1869      	adds	r1, r5, r1
 8000fa0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000fa4:	d22f      	bcs.n	8001006 <__udivmoddi4+0x2ae>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d92d      	bls.n	8001006 <__udivmoddi4+0x2ae>
 8000faa:	3f02      	subs	r7, #2
 8000fac:	4429      	add	r1, r5
 8000fae:	1acb      	subs	r3, r1, r3
 8000fb0:	b281      	uxth	r1, r0
 8000fb2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000fb6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fbe:	fb00 f308 	mul.w	r3, r0, r8
 8000fc2:	428b      	cmp	r3, r1
 8000fc4:	d907      	bls.n	8000fd6 <__udivmoddi4+0x27e>
 8000fc6:	1869      	adds	r1, r5, r1
 8000fc8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000fcc:	d217      	bcs.n	8000ffe <__udivmoddi4+0x2a6>
 8000fce:	428b      	cmp	r3, r1
 8000fd0:	d915      	bls.n	8000ffe <__udivmoddi4+0x2a6>
 8000fd2:	3802      	subs	r0, #2
 8000fd4:	4429      	add	r1, r5
 8000fd6:	1ac9      	subs	r1, r1, r3
 8000fd8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000fdc:	e73b      	b.n	8000e56 <__udivmoddi4+0xfe>
 8000fde:	4637      	mov	r7, r6
 8000fe0:	4630      	mov	r0, r6
 8000fe2:	e709      	b.n	8000df8 <__udivmoddi4+0xa0>
 8000fe4:	4607      	mov	r7, r0
 8000fe6:	e6e7      	b.n	8000db8 <__udivmoddi4+0x60>
 8000fe8:	4618      	mov	r0, r3
 8000fea:	e6fb      	b.n	8000de4 <__udivmoddi4+0x8c>
 8000fec:	4541      	cmp	r1, r8
 8000fee:	d2ab      	bcs.n	8000f48 <__udivmoddi4+0x1f0>
 8000ff0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ff4:	eb69 020e 	sbc.w	r2, r9, lr
 8000ff8:	3801      	subs	r0, #1
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	e7a4      	b.n	8000f48 <__udivmoddi4+0x1f0>
 8000ffe:	4660      	mov	r0, ip
 8001000:	e7e9      	b.n	8000fd6 <__udivmoddi4+0x27e>
 8001002:	4618      	mov	r0, r3
 8001004:	e795      	b.n	8000f32 <__udivmoddi4+0x1da>
 8001006:	4667      	mov	r7, ip
 8001008:	e7d1      	b.n	8000fae <__udivmoddi4+0x256>
 800100a:	4681      	mov	r9, r0
 800100c:	e77c      	b.n	8000f08 <__udivmoddi4+0x1b0>
 800100e:	3802      	subs	r0, #2
 8001010:	442c      	add	r4, r5
 8001012:	e747      	b.n	8000ea4 <__udivmoddi4+0x14c>
 8001014:	f1ac 0c02 	sub.w	ip, ip, #2
 8001018:	442b      	add	r3, r5
 800101a:	e72f      	b.n	8000e7c <__udivmoddi4+0x124>
 800101c:	4638      	mov	r0, r7
 800101e:	e708      	b.n	8000e32 <__udivmoddi4+0xda>
 8001020:	4637      	mov	r7, r6
 8001022:	e6e9      	b.n	8000df8 <__udivmoddi4+0xa0>

08001024 <__aeabi_idiv0>:
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <SX1278_write>:
#include "stm32f4xx_hal_spi.h"

//#### SPI communication with SX1278 ####

void SX1278_write(SPI_HandleTypeDef* spi, uint8_t data)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	460b      	mov	r3, r1
 8001032:	70fb      	strb	r3, [r7, #3]
	// writes byte [data] on SPI bus
	HAL_SPI_Transmit(spi, &data, 1, 1000);
 8001034:	1cf9      	adds	r1, r7, #3
 8001036:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800103a:	2201      	movs	r2, #1
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f006 ff6b 	bl	8007f18 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(spi) != HAL_SPI_STATE_READY);
 8001042:	bf00      	nop
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f007 fa3d 	bl	80084c4 <HAL_SPI_GetState>
 800104a:	4603      	mov	r3, r0
 800104c:	2b01      	cmp	r3, #1
 800104e:	d1f9      	bne.n	8001044 <SX1278_write+0x1c>
}
 8001050:	bf00      	nop
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <SX1278_command>:
void SX1278_command(SX1278* inst, uint8_t addr, uint8_t cmd)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	460b      	mov	r3, r1
 8001062:	70fb      	strb	r3, [r7, #3]
 8001064:	4613      	mov	r3, r2
 8001066:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6998      	ldr	r0, [r3, #24]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	89db      	ldrh	r3, [r3, #14]
 8001070:	2200      	movs	r2, #0
 8001072:	4619      	mov	r1, r3
 8001074:	f002 fe0e 	bl	8003c94 <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr | 0x80);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	69da      	ldr	r2, [r3, #28]
 800107c:	78fb      	ldrb	r3, [r7, #3]
 800107e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001082:	b2db      	uxtb	r3, r3
 8001084:	4619      	mov	r1, r3
 8001086:	4610      	mov	r0, r2
 8001088:	f7ff ffce 	bl	8001028 <SX1278_write>
	SX1278_write(inst->spi, cmd);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	69db      	ldr	r3, [r3, #28]
 8001090:	78ba      	ldrb	r2, [r7, #2]
 8001092:	4611      	mov	r1, r2
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff ffc7 	bl	8001028 <SX1278_write>

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6998      	ldr	r0, [r3, #24]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	89db      	ldrh	r3, [r3, #14]
 80010a2:	2201      	movs	r2, #1
 80010a4:	4619      	mov	r1, r3
 80010a6:	f002 fdf5 	bl	8003c94 <HAL_GPIO_WritePin>
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <SX1278_command_burst>:
void SX1278_command_burst(SX1278* inst, uint8_t addr, uint8_t* buff, uint8_t len)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b086      	sub	sp, #24
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	60f8      	str	r0, [r7, #12]
 80010ba:	607a      	str	r2, [r7, #4]
 80010bc:	461a      	mov	r2, r3
 80010be:	460b      	mov	r3, r1
 80010c0:	72fb      	strb	r3, [r7, #11]
 80010c2:	4613      	mov	r3, r2
 80010c4:	72bb      	strb	r3, [r7, #10]
	uint8_t i;

	//why not 1???
	if (len <= 1) return;
 80010c6:	7abb      	ldrb	r3, [r7, #10]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d92d      	bls.n	8001128 <SX1278_command_burst+0x76>

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	6998      	ldr	r0, [r3, #24]
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	89db      	ldrh	r3, [r3, #14]
 80010d4:	2200      	movs	r2, #0
 80010d6:	4619      	mov	r1, r3
 80010d8:	f002 fddc 	bl	8003c94 <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr | 0x80);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	69da      	ldr	r2, [r3, #28]
 80010e0:	7afb      	ldrb	r3, [r7, #11]
 80010e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	4619      	mov	r1, r3
 80010ea:	4610      	mov	r0, r2
 80010ec:	f7ff ff9c 	bl	8001028 <SX1278_write>
	for (i = 0; i < len; i++)
 80010f0:	2300      	movs	r3, #0
 80010f2:	75fb      	strb	r3, [r7, #23]
 80010f4:	e00b      	b.n	800110e <SX1278_command_burst+0x5c>
	{
		SX1278_write(inst->spi, *(buff + i));	//explanation: *(buff + i) = buff[i]
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	69d8      	ldr	r0, [r3, #28]
 80010fa:	7dfb      	ldrb	r3, [r7, #23]
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	4413      	add	r3, r2
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	4619      	mov	r1, r3
 8001104:	f7ff ff90 	bl	8001028 <SX1278_write>
	for (i = 0; i < len; i++)
 8001108:	7dfb      	ldrb	r3, [r7, #23]
 800110a:	3301      	adds	r3, #1
 800110c:	75fb      	strb	r3, [r7, #23]
 800110e:	7dfa      	ldrb	r2, [r7, #23]
 8001110:	7abb      	ldrb	r3, [r7, #10]
 8001112:	429a      	cmp	r2, r3
 8001114:	d3ef      	bcc.n	80010f6 <SX1278_command_burst+0x44>
	}

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	6998      	ldr	r0, [r3, #24]
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	89db      	ldrh	r3, [r3, #14]
 800111e:	2201      	movs	r2, #1
 8001120:	4619      	mov	r1, r3
 8001122:	f002 fdb7 	bl	8003c94 <HAL_GPIO_WritePin>
 8001126:	e000      	b.n	800112a <SX1278_command_burst+0x78>
	if (len <= 1) return;
 8001128:	bf00      	nop
}
 800112a:	3718      	adds	r7, #24
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <SX1278_read>:

uint8_t SX1278_read(SPI_HandleTypeDef* spi)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af02      	add	r7, sp, #8
 8001136:	6078      	str	r0, [r7, #4]
	// reads byte from SPI bus
	uint8_t txByte = 0x00;
 8001138:	2300      	movs	r3, #0
 800113a:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 800113c:	2300      	movs	r3, #0
 800113e:	73bb      	strb	r3, [r7, #14]

	HAL_SPI_TransmitReceive(spi, &txByte, &rxByte, 1, 1000);
 8001140:	f107 020e 	add.w	r2, r7, #14
 8001144:	f107 010f 	add.w	r1, r7, #15
 8001148:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800114c:	9300      	str	r3, [sp, #0]
 800114e:	2301      	movs	r3, #1
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f007 f815 	bl	8008180 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(spi) != HAL_SPI_STATE_READY);
 8001156:	bf00      	nop
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f007 f9b3 	bl	80084c4 <HAL_SPI_GetState>
 800115e:	4603      	mov	r3, r0
 8001160:	2b01      	cmp	r3, #1
 8001162:	d1f9      	bne.n	8001158 <SX1278_read+0x28>

	return rxByte;
 8001164:	7bbb      	ldrb	r3, [r7, #14]
}
 8001166:	4618      	mov	r0, r3
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <SX1278_read_address>:
uint8_t SX1278_read_address(SX1278* inst, uint8_t addr)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b084      	sub	sp, #16
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
 8001176:	460b      	mov	r3, r1
 8001178:	70fb      	strb	r3, [r7, #3]
	uint8_t recv;

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6998      	ldr	r0, [r3, #24]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	89db      	ldrh	r3, [r3, #14]
 8001182:	2200      	movs	r2, #0
 8001184:	4619      	mov	r1, r3
 8001186:	f002 fd85 	bl	8003c94 <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	69db      	ldr	r3, [r3, #28]
 800118e:	78fa      	ldrb	r2, [r7, #3]
 8001190:	4611      	mov	r1, r2
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff ff48 	bl	8001028 <SX1278_write>
	recv = SX1278_read(inst->spi);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	69db      	ldr	r3, [r3, #28]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ffc7 	bl	8001130 <SX1278_read>
 80011a2:	4603      	mov	r3, r0
 80011a4:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6998      	ldr	r0, [r3, #24]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	89db      	ldrh	r3, [r3, #14]
 80011ae:	2201      	movs	r2, #1
 80011b0:	4619      	mov	r1, r3
 80011b2:	f002 fd6f 	bl	8003c94 <HAL_GPIO_WritePin>

	return recv;
 80011b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3710      	adds	r7, #16
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <SX1278_read_burst>:
void SX1278_read_burst(SX1278* inst, uint8_t addr, uint8_t* buff, uint8_t len)
{
 80011c0:	b590      	push	{r4, r7, lr}
 80011c2:	b087      	sub	sp, #28
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	607a      	str	r2, [r7, #4]
 80011ca:	461a      	mov	r2, r3
 80011cc:	460b      	mov	r3, r1
 80011ce:	72fb      	strb	r3, [r7, #11]
 80011d0:	4613      	mov	r3, r2
 80011d2:	72bb      	strb	r3, [r7, #10]
	uint8_t i;

	//why not 1???
	if (len <= 1) return;
 80011d4:	7abb      	ldrb	r3, [r7, #10]
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d92b      	bls.n	8001232 <SX1278_read_burst+0x72>

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	6998      	ldr	r0, [r3, #24]
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	89db      	ldrh	r3, [r3, #14]
 80011e2:	2200      	movs	r2, #0
 80011e4:	4619      	mov	r1, r3
 80011e6:	f002 fd55 	bl	8003c94 <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	69db      	ldr	r3, [r3, #28]
 80011ee:	7afa      	ldrb	r2, [r7, #11]
 80011f0:	4611      	mov	r1, r2
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff ff18 	bl	8001028 <SX1278_write>
	for (i = 0; i < len; i++)
 80011f8:	2300      	movs	r3, #0
 80011fa:	75fb      	strb	r3, [r7, #23]
 80011fc:	e00c      	b.n	8001218 <SX1278_read_burst+0x58>
	{
		*(buff + i) = SX1278_read(inst->spi);	//explanation: *(buff + i) = buff[i]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	69d9      	ldr	r1, [r3, #28]
 8001202:	7dfb      	ldrb	r3, [r7, #23]
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	18d4      	adds	r4, r2, r3
 8001208:	4608      	mov	r0, r1
 800120a:	f7ff ff91 	bl	8001130 <SX1278_read>
 800120e:	4603      	mov	r3, r0
 8001210:	7023      	strb	r3, [r4, #0]
	for (i = 0; i < len; i++)
 8001212:	7dfb      	ldrb	r3, [r7, #23]
 8001214:	3301      	adds	r3, #1
 8001216:	75fb      	strb	r3, [r7, #23]
 8001218:	7dfa      	ldrb	r2, [r7, #23]
 800121a:	7abb      	ldrb	r3, [r7, #10]
 800121c:	429a      	cmp	r2, r3
 800121e:	d3ee      	bcc.n	80011fe <SX1278_read_burst+0x3e>
	}

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	6998      	ldr	r0, [r3, #24]
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	89db      	ldrh	r3, [r3, #14]
 8001228:	2201      	movs	r2, #1
 800122a:	4619      	mov	r1, r3
 800122c:	f002 fd32 	bl	8003c94 <HAL_GPIO_WritePin>
 8001230:	e000      	b.n	8001234 <SX1278_read_burst+0x74>
	if (len <= 1) return;
 8001232:	bf00      	nop
}
 8001234:	371c      	adds	r7, #28
 8001236:	46bd      	mov	sp, r7
 8001238:	bd90      	pop	{r4, r7, pc}

0800123a <SX1278_init>:

//#### SX1278 usage functions ####

bool SX1278_init(SX1278* inst)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b086      	sub	sp, #24
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
	//default pin configuration
	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6998      	ldr	r0, [r3, #24]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	89db      	ldrh	r3, [r3, #14]
 800124a:	2201      	movs	r2, #1
 800124c:	4619      	mov	r1, r3
 800124e:	f002 fd21 	bl	8003c94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(inst->reset_port, inst->reset, GPIO_PIN_SET);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6918      	ldr	r0, [r3, #16]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	895b      	ldrh	r3, [r3, #10]
 800125a:	2201      	movs	r2, #1
 800125c:	4619      	mov	r1, r3
 800125e:	f002 fd19 	bl	8003c94 <HAL_GPIO_WritePin>

	//unable to establish the connection with module
	if (SX1278_read_address(inst, REG_LR_VERSION) != 0x12) return false;
 8001262:	2142      	movs	r1, #66	; 0x42
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f7ff ff82 	bl	800116e <SX1278_read_address>
 800126a:	4603      	mov	r3, r0
 800126c:	2b12      	cmp	r3, #18
 800126e:	d001      	beq.n	8001274 <SX1278_init+0x3a>
 8001270:	2300      	movs	r3, #0
 8001272:	e0e3      	b.n	800143c <SX1278_init+0x202>

	//changes must be performed in a Sleep mode
	SX1278_sleep(inst);
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f000 fa48 	bl	800170a <SX1278_sleep>

	//HAL_Delay(15);

	//0x88 = 1_00_0_1_000 = Lora, FSK, (r), LowFreq, Sleep
	SX1278_command(inst, LR_RegOpMode, 0x88);
 800127a:	2288      	movs	r2, #136	; 0x88
 800127c:	2101      	movs	r1, #1
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f7ff feea 	bl	8001058 <SX1278_command>

	//Setting three frequency bytes
	//####################################
	//[!!!!] heavy low level shit going out there, must check if correct
	//####################################
	float step_in_mhz = 32/pow(2, 19);
 8001284:	f04f 5362 	mov.w	r3, #947912704	; 0x38800000
 8001288:	617b      	str	r3, [r7, #20]
	float multiplier = inst->frequency/step_in_mhz;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	edd3 6a00 	vldr	s13, [r3]
 8001290:	ed97 7a05 	vldr	s14, [r7, #20]
 8001294:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001298:	edc7 7a02 	vstr	s15, [r7, #8]
	uint8_t* multiplier_addr = &multiplier;
 800129c:	f107 0308 	add.w	r3, r7, #8
 80012a0:	613b      	str	r3, [r7, #16]
	SX1278_command(inst, LR_RegFrMsb, *multiplier_addr);
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	461a      	mov	r2, r3
 80012a8:	2106      	movs	r1, #6
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f7ff fed4 	bl	8001058 <SX1278_command>
	SX1278_command(inst, LR_RegFrMid, *(multiplier_addr + 1));
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	3301      	adds	r3, #1
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	461a      	mov	r2, r3
 80012b8:	2107      	movs	r1, #7
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff fecc 	bl	8001058 <SX1278_command>
	SX1278_command(inst, LR_RegFrLsb, *(multiplier_addr + 2));
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	3302      	adds	r3, #2
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	461a      	mov	r2, r3
 80012c8:	2108      	movs	r1, #8
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff fec4 	bl	8001058 <SX1278_command>

	SX1278_command(inst, LR_RegPaConfig, inst->power);				//Setting transmit power
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	791b      	ldrb	r3, [r3, #4]
 80012d4:	461a      	mov	r2, r3
 80012d6:	2109      	movs	r1, #9
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f7ff febd 	bl	8001058 <SX1278_command>
	SX1278_command(inst, LR_RegOcp, 0x2B);			// [was 0x0B] Over current protection set to 100mA
 80012de:	222b      	movs	r2, #43	; 0x2b
 80012e0:	210b      	movs	r1, #11
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f7ff feb8 	bl	8001058 <SX1278_command>
	SX1278_command(inst, LR_RegLna, 0x23);			// LNA settings: G1 - max gain, Boost on
 80012e8:	2223      	movs	r2, #35	; 0x23
 80012ea:	210c      	movs	r1, #12
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff feb3 	bl	8001058 <SX1278_command>
	SX1278_command(inst, REG_LR_PADAC, 0x87);		//high power setting +20dBm
 80012f2:	2287      	movs	r2, #135	; 0x87
 80012f4:	214d      	movs	r1, #77	; 0x4d
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f7ff feae 	bl	8001058 <SX1278_command>
	SX1278_command(inst, LR_RegHopPeriod, 0x00);	//frequency hopping off
 80012fc:	2200      	movs	r2, #0
 80012fe:	2124      	movs	r1, #36	; 0x24
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f7ff fea9 	bl	8001058 <SX1278_command>

	if (inst->spreadingFactor == SX1278_SF_6)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	795b      	ldrb	r3, [r3, #5]
 800130a:	2b06      	cmp	r3, #6
 800130c:	d13b      	bne.n	8001386 <SX1278_init+0x14c>
	{
		uint8_t tmp;
		//implicit CRC enable
		SX1278_command(inst, LR_RegModemConfig1, ((inst->bandWidth << 4) + (inst->codingRate << 1) + 0x01));
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	79db      	ldrb	r3, [r3, #7]
 8001312:	011b      	lsls	r3, r3, #4
 8001314:	b2da      	uxtb	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	799b      	ldrb	r3, [r3, #6]
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	b2db      	uxtb	r3, r3
 800131e:	4413      	add	r3, r2
 8001320:	b2db      	uxtb	r3, r3
 8001322:	3301      	adds	r3, #1
 8001324:	b2db      	uxtb	r3, r3
 8001326:	461a      	mov	r2, r3
 8001328:	211d      	movs	r1, #29
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f7ff fe94 	bl	8001058 <SX1278_command>
		SX1278_command(inst, LR_RegModemConfig2, ((inst->spreadingFactor << 4) + (inst->crc << 2) + 0x03));
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	795b      	ldrb	r3, [r3, #5]
 8001334:	011b      	lsls	r3, r3, #4
 8001336:	b2da      	uxtb	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	7a1b      	ldrb	r3, [r3, #8]
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	b2db      	uxtb	r3, r3
 8001340:	4413      	add	r3, r2
 8001342:	b2db      	uxtb	r3, r3
 8001344:	3303      	adds	r3, #3
 8001346:	b2db      	uxtb	r3, r3
 8001348:	461a      	mov	r2, r3
 800134a:	211e      	movs	r1, #30
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f7ff fe83 	bl	8001058 <SX1278_command>
		tmp = SX1278_read_address(inst, 0x31);
 8001352:	2131      	movs	r1, #49	; 0x31
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f7ff ff0a 	bl	800116e <SX1278_read_address>
 800135a:	4603      	mov	r3, r0
 800135c:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 800135e:	7bfb      	ldrb	r3, [r7, #15]
 8001360:	f023 0307 	bic.w	r3, r3, #7
 8001364:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 8001366:	7bfb      	ldrb	r3, [r7, #15]
 8001368:	f043 0305 	orr.w	r3, r3, #5
 800136c:	73fb      	strb	r3, [r7, #15]
		SX1278_command(inst, 0x31, tmp);
 800136e:	7bfb      	ldrb	r3, [r7, #15]
 8001370:	461a      	mov	r2, r3
 8001372:	2131      	movs	r1, #49	; 0x31
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f7ff fe6f 	bl	8001058 <SX1278_command>
		SX1278_command(inst, 0x37, 0x0C);
 800137a:	220c      	movs	r2, #12
 800137c:	2137      	movs	r1, #55	; 0x37
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7ff fe6a 	bl	8001058 <SX1278_command>
 8001384:	e01f      	b.n	80013c6 <SX1278_init+0x18c>
	}
	else
	{
		//explicit CRC enable
		SX1278_command(inst, LR_RegModemConfig1, ((inst->bandWidth << 4) + (inst->codingRate << 1) + 0x00));
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	79db      	ldrb	r3, [r3, #7]
 800138a:	011b      	lsls	r3, r3, #4
 800138c:	b2da      	uxtb	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	799b      	ldrb	r3, [r3, #6]
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	b2db      	uxtb	r3, r3
 8001396:	4413      	add	r3, r2
 8001398:	b2db      	uxtb	r3, r3
 800139a:	461a      	mov	r2, r3
 800139c:	211d      	movs	r1, #29
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f7ff fe5a 	bl	8001058 <SX1278_command>
		//SFactor &  LNA gain set by the internal AGC loop
		SX1278_command(inst, LR_RegModemConfig2, ((inst->spreadingFactor << 4) + (inst->crc << 2) + 0x03));
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	795b      	ldrb	r3, [r3, #5]
 80013a8:	011b      	lsls	r3, r3, #4
 80013aa:	b2da      	uxtb	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	7a1b      	ldrb	r3, [r3, #8]
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	4413      	add	r3, r2
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	3303      	adds	r3, #3
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	461a      	mov	r2, r3
 80013be:	211e      	movs	r1, #30
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f7ff fe49 	bl	8001058 <SX1278_command>
	}

	SX1278_command(inst, LR_RegSymbTimeoutLsb, 0xFF);	//recievier timeout value = 0x3FF(Max) [timeout = symbtimeout*ts]
 80013c6:	22ff      	movs	r2, #255	; 0xff
 80013c8:	211f      	movs	r1, #31
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f7ff fe44 	bl	8001058 <SX1278_command>
	SX1278_command(inst, LR_RegPreambleMsb, 0x00);		//Setting the preable length?
 80013d0:	2200      	movs	r2, #0
 80013d2:	2120      	movs	r1, #32
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f7ff fe3f 	bl	8001058 <SX1278_command>
	SX1278_command(inst, LR_RegPreambleLsb, 12);		//8+4=12byte Preamble
 80013da:	220c      	movs	r2, #12
 80013dc:	2121      	movs	r1, #33	; 0x21
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f7ff fe3a 	bl	8001058 <SX1278_command>
	SX1278_command(inst, REG_LR_DIOMAPPING2, 0x01);		//RegDioMapping2 DIO5=00, DIO4=01
 80013e4:	2201      	movs	r2, #1
 80013e6:	2141      	movs	r1, #65	; 0x41
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f7ff fe35 	bl	8001058 <SX1278_command>

	inst->newPacket = true;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2201      	movs	r2, #1
 80013f2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	inst->rxTimeout = false;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	inst->rxDone = false;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	inst->crcError = false;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2200      	movs	r2, #0
 800140a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	inst->rssi = 1;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2201      	movs	r2, #1
 8001412:	629a      	str	r2, [r3, #40]	; 0x28
	inst->newPacket = false;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2200      	movs	r2, #0
 8001418:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	inst->pendingIRQ = false;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	inst->txLen = 0;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	inst->rxLen = 0;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	SX1278_standby(inst);
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f000 f978 	bl	800172a <SX1278_standby>

	return true;
 800143a:	2301      	movs	r3, #1
}
 800143c:	4618      	mov	r0, r3
 800143e:	3718      	adds	r7, #24
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <SX1278_transmit>:

bool SX1278_transmit(SX1278* inst, uint8_t* txBuffer, uint8_t length)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	4613      	mov	r3, r2
 8001450:	71fb      	strb	r3, [r7, #7]
	// check if the module is ready for the transmission
	if (inst->mode == STANDBY)
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	7a5b      	ldrb	r3, [r3, #9]
 8001456:	2b01      	cmp	r3, #1
 8001458:	d127      	bne.n	80014aa <SX1278_transmit+0x66>
	{
		SX1278_tx_mode(inst);
 800145a:	68f8      	ldr	r0, [r7, #12]
 800145c:	f000 f8fc 	bl	8001658 <SX1278_tx_mode>
		SX1278_tx_input(inst, txBuffer, length);
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	461a      	mov	r2, r3
 8001464:	68b9      	ldr	r1, [r7, #8]
 8001466:	68f8      	ldr	r0, [r7, #12]
 8001468:	f000 f857 	bl	800151a <SX1278_tx_input>
		SX1278_tx_push(inst);
 800146c:	68f8      	ldr	r0, [r7, #12]
 800146e:	f000 f86f 	bl	8001550 <SX1278_tx_push>

		if (inst->useDio0IRQ)
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001478:	2b00      	cmp	r3, #0
 800147a:	d005      	beq.n	8001488 <SX1278_transmit+0x44>
		{
			//waiting for interrupt
			inst->pendingIRQ = true;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2201      	movs	r2, #1
 8001480:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			while (HAL_GPIO_ReadPin(inst->dio0_port, inst->dio0) == GPIO_PIN_RESET);

			return SX1278_tx_finish(inst);
		}

		return true;
 8001484:	2301      	movs	r3, #1
 8001486:	e011      	b.n	80014ac <SX1278_transmit+0x68>
			while (HAL_GPIO_ReadPin(inst->dio0_port, inst->dio0) == GPIO_PIN_RESET);
 8001488:	bf00      	nop
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	695a      	ldr	r2, [r3, #20]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	899b      	ldrh	r3, [r3, #12]
 8001492:	4619      	mov	r1, r3
 8001494:	4610      	mov	r0, r2
 8001496:	f002 fbe5 	bl	8003c64 <HAL_GPIO_ReadPin>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d0f4      	beq.n	800148a <SX1278_transmit+0x46>
			return SX1278_tx_finish(inst);
 80014a0:	68f8      	ldr	r0, [r7, #12]
 80014a2:	f000 f862 	bl	800156a <SX1278_tx_finish>
 80014a6:	4603      	mov	r3, r0
 80014a8:	e000      	b.n	80014ac <SX1278_transmit+0x68>
	}
	else return false;
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <SX1278_receive>:

bool SX1278_receive(SX1278* inst)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
	// [!!] writes data to the inst->rxBuffer
	if (inst->mode == STANDBY)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	7a5b      	ldrb	r3, [r3, #9]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d125      	bne.n	8001510 <SX1278_receive+0x5c>
	{
		SX1278_rx_mode(inst);
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f000 f8ef 	bl	80016a8 <SX1278_rx_mode>

		if (inst->useDio0IRQ)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d005      	beq.n	80014e0 <SX1278_receive+0x2c>
		{
			//waiting for interrupt
			inst->pendingIRQ = true;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2201      	movs	r2, #1
 80014d8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

			inst->newPacket = SX1278_rx_get_packet(inst);
			return inst->newPacket;
		}

		return true;
 80014dc:	2301      	movs	r3, #1
 80014de:	e018      	b.n	8001512 <SX1278_receive+0x5e>
			while (HAL_GPIO_ReadPin(inst->dio0_port, inst->dio0) == GPIO_PIN_RESET);
 80014e0:	bf00      	nop
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	695a      	ldr	r2, [r3, #20]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	899b      	ldrh	r3, [r3, #12]
 80014ea:	4619      	mov	r1, r3
 80014ec:	4610      	mov	r0, r2
 80014ee:	f002 fbb9 	bl	8003c64 <HAL_GPIO_ReadPin>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d0f4      	beq.n	80014e2 <SX1278_receive+0x2e>
			inst->newPacket = SX1278_rx_get_packet(inst);
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f000 f85b 	bl	80015b4 <SX1278_rx_get_packet>
 80014fe:	4603      	mov	r3, r0
 8001500:	461a      	mov	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			return inst->newPacket;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800150e:	e000      	b.n	8001512 <SX1278_receive+0x5e>
	}
	else return false;
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <SX1278_tx_input>:

//#### Data send / receive routines ####

void SX1278_tx_input(SX1278* inst, uint8_t* txBuffer, uint8_t length)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b084      	sub	sp, #16
 800151e:	af00      	add	r7, sp, #0
 8001520:	60f8      	str	r0, [r7, #12]
 8001522:	60b9      	str	r1, [r7, #8]
 8001524:	4613      	mov	r3, r2
 8001526:	71fb      	strb	r3, [r7, #7]
	SX1278_command(inst, LR_RegPayloadLength, length);	//(this register must difine when the data long of one byte in SF is 6)
 8001528:	79fb      	ldrb	r3, [r7, #7]
 800152a:	461a      	mov	r2, r3
 800152c:	2122      	movs	r1, #34	; 0x22
 800152e:	68f8      	ldr	r0, [r7, #12]
 8001530:	f7ff fd92 	bl	8001058 <SX1278_command>
	SX1278_command_burst(inst, 0x00, txBuffer, length);
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	68ba      	ldr	r2, [r7, #8]
 8001538:	2100      	movs	r1, #0
 800153a:	68f8      	ldr	r0, [r7, #12]
 800153c:	f7ff fdb9 	bl	80010b2 <SX1278_command_burst>

	inst->txLen = length;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	79fa      	ldrb	r2, [r7, #7]
 8001544:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
}
 8001548:	bf00      	nop
 800154a:	3710      	adds	r7, #16
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}

08001550 <SX1278_tx_push>:
void SX1278_tx_push(SX1278* inst)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
	//set module to TX mode and transmit
	SX1278_command(inst, LR_RegOpMode, 0x8b);
 8001558:	228b      	movs	r2, #139	; 0x8b
 800155a:	2101      	movs	r1, #1
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f7ff fd7b 	bl	8001058 <SX1278_command>
}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <SX1278_tx_finish>:
bool SX1278_tx_finish(SX1278* inst)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b082      	sub	sp, #8
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
	inst->irqStatus = SX1278_read_address(inst, LR_RegIrqFlags);
 8001572:	2112      	movs	r1, #18
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f7ff fdfa 	bl	800116e <SX1278_read_address>
 800157a:	4603      	mov	r3, r0
 800157c:	461a      	mov	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f883 2020 	strb.w	r2, [r3, #32]
	inst->txDone = ((inst->irqStatus & IRQ_LR_TXDONE) > 0x00);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f893 3020 	ldrb.w	r3, [r3, #32]
 800158a:	f003 0308 	and.w	r3, r3, #8
 800158e:	2b00      	cmp	r3, #0
 8001590:	bfcc      	ite	gt
 8001592:	2301      	movgt	r3, #1
 8001594:	2300      	movle	r3, #0
 8001596:	b2da      	uxtb	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	SX1278_clearLoRaIrq(inst);
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f000 f938 	bl	8001814 <SX1278_clearLoRaIrq>
	SX1278_standby(inst);
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f000 f8c0 	bl	800172a <SX1278_standby>
	return true;
 80015aa:	2301      	movs	r3, #1
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <SX1278_rx_get_packet>:

bool SX1278_rx_get_packet(SX1278* inst)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
	uint8_t addr;
	uint8_t packet_size;

	SX1278_update_IRQ_status(inst);
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f000 f8f1 	bl	80017a4 <SX1278_update_IRQ_status>
	if (inst->rxTimeout || (inst->crcError && LR_VALIDATE_CRCERROR)) return false;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <SX1278_rx_get_packet+0x1c>
 80015cc:	2300      	movs	r3, #0
 80015ce:	e03f      	b.n	8001650 <SX1278_rx_get_packet+0x9c>

	memset(inst->rxBuffer, 0x00, SX1278_MAX_PACKET);	//clear rxBuffer
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	3331      	adds	r3, #49	; 0x31
 80015d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015d8:	2100      	movs	r1, #0
 80015da:	4618      	mov	r0, r3
 80015dc:	f00b ffff 	bl	800d5de <memset>

	addr = SX1278_read_address(inst, LR_RegFifoRxCurrentaddr);	//get last packet address
 80015e0:	2110      	movs	r1, #16
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f7ff fdc3 	bl	800116e <SX1278_read_address>
 80015e8:	4603      	mov	r3, r0
 80015ea:	73bb      	strb	r3, [r7, #14]
	SX1278_command(inst, LR_RegFifoAddrPtr, addr);				//set fifo pointer to this address
 80015ec:	7bbb      	ldrb	r3, [r7, #14]
 80015ee:	461a      	mov	r2, r3
 80015f0:	210d      	movs	r1, #13
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f7ff fd30 	bl	8001058 <SX1278_command>

	//When SpreadingFactor = 6, use Implicit Header mode (Excluding internal packet length)
	if (inst->spreadingFactor == SX1278_SF_6)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	795b      	ldrb	r3, [r3, #5]
 80015fc:	2b06      	cmp	r3, #6
 80015fe:	d104      	bne.n	800160a <SX1278_rx_get_packet+0x56>
	{
		// ??? not sure what to put here
		packet_size = inst->txLen;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001606:	73fb      	strb	r3, [r7, #15]
 8001608:	e005      	b.n	8001616 <SX1278_rx_get_packet+0x62>
	}
	else
	{
		packet_size = SX1278_read_address(inst, LR_RegRxNbBytes); //get the number of received bytes
 800160a:	2113      	movs	r1, #19
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7ff fdae 	bl	800116e <SX1278_read_address>
 8001612:	4603      	mov	r3, r0
 8001614:	73fb      	strb	r3, [r7, #15]
	}

	SX1278_read_burst(inst, 0x00, inst->rxBuffer, packet_size);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f103 0231 	add.w	r2, r3, #49	; 0x31
 800161c:	7bfb      	ldrb	r3, [r7, #15]
 800161e:	2100      	movs	r1, #0
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7ff fdcd 	bl	80011c0 <SX1278_read_burst>

	inst->rssi = SX1278_getRSSI(inst);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f000 f901 	bl	800182e <SX1278_getRSSI>
 800162c:	4602      	mov	r2, r0
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	629a      	str	r2, [r3, #40]	; 0x28
	inst->rxLen = packet_size;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	7bfa      	ldrb	r2, [r7, #15]
 8001636:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	inst->newPacket = true;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2201      	movs	r2, #1
 800163e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	SX1278_clearLoRaIrq(inst);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f000 f8e6 	bl	8001814 <SX1278_clearLoRaIrq>
	SX1278_standby(inst);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f000 f86e 	bl	800172a <SX1278_standby>
	return true;
 800164e:	2301      	movs	r3, #1
}
 8001650:	4618      	mov	r0, r3
 8001652:	3710      	adds	r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <SX1278_tx_mode>:

//#### Functions to change SX1278 operation mode ####

void SX1278_tx_mode(SX1278* inst)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
	uint8_t addr;

	SX1278_clearLoRaIrq(inst);
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f000 f8d7 	bl	8001814 <SX1278_clearLoRaIrq>
	SX1278_command(inst, REG_LR_DIOMAPPING1, 0x41);	//DIO0=01, DIO1=00, DIO2=00, DIO3=01
 8001666:	2241      	movs	r2, #65	; 0x41
 8001668:	2140      	movs	r1, #64	; 0x40
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7ff fcf4 	bl	8001058 <SX1278_command>
	SX1278_command(inst, LR_RegIrqFlagsMask, 0xF7);	//Open TxDone interrupt
 8001670:	22f7      	movs	r2, #247	; 0xf7
 8001672:	2111      	movs	r1, #17
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f7ff fcef 	bl	8001058 <SX1278_command>

	addr = SX1278_read_address(inst, LR_RegFifoTxBaseAddr);	//read tx_fifo beginning adress in memory
 800167a:	210e      	movs	r1, #14
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f7ff fd76 	bl	800116e <SX1278_read_address>
 8001682:	4603      	mov	r3, r0
 8001684:	73fb      	strb	r3, [r7, #15]
	SX1278_command(inst, LR_RegFifoAddrPtr, addr);			//set fifo pointer there
 8001686:	7bfb      	ldrb	r3, [r7, #15]
 8001688:	461a      	mov	r2, r3
 800168a:	210d      	movs	r1, #13
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f7ff fce3 	bl	8001058 <SX1278_command>

	inst->txLen = 0;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	inst->mode = TX;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2202      	movs	r2, #2
 800169e:	725a      	strb	r2, [r3, #9]
}
 80016a0:	bf00      	nop
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <SX1278_rx_mode>:

void SX1278_rx_mode(SX1278* inst)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
	uint8_t addr;

	SX1278_clearLoRaIrq(inst);
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f000 f8af 	bl	8001814 <SX1278_clearLoRaIrq>
	SX1278_command(inst, REG_LR_DIOMAPPING1, 0x01);	//DIO=00, DIO1=00,DIO2=00, DIO3=01
 80016b6:	2201      	movs	r2, #1
 80016b8:	2140      	movs	r1, #64	; 0x40
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff fccc 	bl	8001058 <SX1278_command>
	SX1278_command(inst, LR_RegIrqFlagsMask, 0x3F);	//Open RxDone interrupt & Timeout (shouldn't this be after clearIRQ?)
 80016c0:	223f      	movs	r2, #63	; 0x3f
 80016c2:	2111      	movs	r1, #17
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f7ff fcc7 	bl	8001058 <SX1278_command>

	addr = SX1278_read_address(inst, LR_RegFifoRxBaseAddr);	//read rx_fifo beginning adress in memory
 80016ca:	210f      	movs	r1, #15
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f7ff fd4e 	bl	800116e <SX1278_read_address>
 80016d2:	4603      	mov	r3, r0
 80016d4:	73fb      	strb	r3, [r7, #15]
	SX1278_command(inst, LR_RegFifoAddrPtr, addr);			//set fifo pointer there
 80016d6:	7bfb      	ldrb	r3, [r7, #15]
 80016d8:	461a      	mov	r2, r3
 80016da:	210d      	movs	r1, #13
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7ff fcbb 	bl	8001058 <SX1278_command>

	SX1278_command(inst, LR_RegOpMode, 0x8d);				//0x8d = 1_00_0_1_101 = Lora, FSK, (r), Low Frequency mode, Rx mode
 80016e2:	228d      	movs	r2, #141	; 0x8d
 80016e4:	2101      	movs	r1, #1
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7ff fcb6 	bl	8001058 <SX1278_command>

	inst->crcError = false;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	inst->rxLen = 0;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	inst->mode = RX;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2203      	movs	r2, #3
 8001700:	725a      	strb	r2, [r3, #9]
}
 8001702:	bf00      	nop
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <SX1278_sleep>:

void SX1278_sleep(SX1278* inst)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b082      	sub	sp, #8
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
	SX1278_command(inst, LR_RegOpMode, 0x08);
 8001712:	2208      	movs	r2, #8
 8001714:	2101      	movs	r1, #1
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7ff fc9e 	bl	8001058 <SX1278_command>
	inst->mode = SLEEP;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	725a      	strb	r2, [r3, #9]
}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <SX1278_standby>:

void SX1278_standby(SX1278* inst)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b082      	sub	sp, #8
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
	SX1278_command(inst, LR_RegOpMode, 0x09);
 8001732:	2209      	movs	r2, #9
 8001734:	2101      	movs	r1, #1
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7ff fc8e 	bl	8001058 <SX1278_command>
	inst->mode = STANDBY;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2201      	movs	r2, #1
 8001740:	725a      	strb	r2, [r3, #9]
}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <SX1278_dio0_IRQ>:
}

//#### Interrupt methods ####

bool SX1278_dio0_IRQ(SX1278* inst)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b082      	sub	sp, #8
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
	//function to call when dio0 rises, used only when waiting for the DIO0 interrupt
	//finishes transmit and receive routines
	if (inst->useDio0IRQ && inst->pendingIRQ)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001758:	2b00      	cmp	r3, #0
 800175a:	d01e      	beq.n	800179a <SX1278_dio0_IRQ+0x50>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001762:	2b00      	cmp	r3, #0
 8001764:	d019      	beq.n	800179a <SX1278_dio0_IRQ+0x50>
	{
		if (inst->mode == TX)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	7a5b      	ldrb	r3, [r3, #9]
 800176a:	2b02      	cmp	r3, #2
 800176c:	d104      	bne.n	8001778 <SX1278_dio0_IRQ+0x2e>
		{
			return SX1278_tx_finish(inst);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f7ff fefb 	bl	800156a <SX1278_tx_finish>
 8001774:	4603      	mov	r3, r0
 8001776:	e011      	b.n	800179c <SX1278_dio0_IRQ+0x52>
		}
		else if (inst->mode == RX)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	7a5b      	ldrb	r3, [r3, #9]
 800177c:	2b03      	cmp	r3, #3
 800177e:	d104      	bne.n	800178a <SX1278_dio0_IRQ+0x40>
		{
			return SX1278_rx_get_packet(inst);
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f7ff ff17 	bl	80015b4 <SX1278_rx_get_packet>
 8001786:	4603      	mov	r3, r0
 8001788:	e008      	b.n	800179c <SX1278_dio0_IRQ+0x52>
		}
		else
		{
			SX1278_clearLoRaIrq(inst);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f000 f842 	bl	8001814 <SX1278_clearLoRaIrq>
			SX1278_standby(inst);
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f7ff ffca 	bl	800172a <SX1278_standby>
			return false;
 8001796:	2300      	movs	r3, #0
 8001798:	e000      	b.n	800179c <SX1278_dio0_IRQ+0x52>
		}

		inst->pendingIRQ = false;
		return true;
	}
	else return false;
 800179a:	2300      	movs	r3, #0
}
 800179c:	4618      	mov	r0, r3
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <SX1278_update_IRQ_status>:

void SX1278_update_IRQ_status(SX1278* inst)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
	inst->irqStatus = SX1278_read_address(inst, LR_RegIrqFlags);
 80017ac:	2112      	movs	r1, #18
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff fcdd 	bl	800116e <SX1278_read_address>
 80017b4:	4603      	mov	r3, r0
 80017b6:	461a      	mov	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f883 2020 	strb.w	r2, [r3, #32]
	inst->rxTimeout = ((inst->irqStatus & IRQ_LR_RXTIMEOUT) > 0x00);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	bfcc      	ite	gt
 80017cc:	2301      	movgt	r3, #1
 80017ce:	2300      	movle	r3, #0
 80017d0:	b2da      	uxtb	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	inst->rxDone = 	  ((inst->irqStatus & IRQ_LR_RXDONE) > 0x00);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	bfcc      	ite	gt
 80017e6:	2301      	movgt	r3, #1
 80017e8:	2300      	movle	r3, #0
 80017ea:	b2da      	uxtb	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	inst->crcError =  ((inst->irqStatus & IRQ_LR_CRCERROR) > 0x00);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017f8:	f003 0320 	and.w	r3, r3, #32
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	bfcc      	ite	gt
 8001800:	2301      	movgt	r3, #1
 8001802:	2300      	movle	r3, #0
 8001804:	b2da      	uxtb	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 800180c:	bf00      	nop
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278* inst)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
	SX1278_command(inst, LR_RegIrqFlags, 0xFF);
 800181c:	22ff      	movs	r2, #255	; 0xff
 800181e:	2112      	movs	r1, #18
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f7ff fc19 	bl	8001058 <SX1278_command>
}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <SX1278_getRSSI>:

int SX1278_getRSSI(SX1278* inst)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b082      	sub	sp, #8
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
  return (-164 + SX1278_read_address(inst, LR_RegPktRssiValue));
 8001836:	211a      	movs	r1, #26
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f7ff fc98 	bl	800116e <SX1278_read_address>
 800183e:	4603      	mov	r3, r0
 8001840:	3ba4      	subs	r3, #164	; 0xa4
}
 8001842:	4618      	mov	r0, r3
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <read_data>:
#include "bmp280.h"

static inline int read_data(BMP280 *inst, uint8_t addr, uint8_t *value, uint8_t len) {
 800184a:	b590      	push	{r4, r7, lr}
 800184c:	b08b      	sub	sp, #44	; 0x2c
 800184e:	af04      	add	r7, sp, #16
 8001850:	60f8      	str	r0, [r7, #12]
 8001852:	607a      	str	r2, [r7, #4]
 8001854:	461a      	mov	r2, r3
 8001856:	460b      	mov	r3, r1
 8001858:	72fb      	strb	r3, [r7, #11]
 800185a:	4613      	mov	r3, r2
 800185c:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (inst->addr << 1);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	889b      	ldrh	r3, [r3, #4]
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(inst->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK) return 0;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6818      	ldr	r0, [r3, #0]
 800186a:	7afb      	ldrb	r3, [r7, #11]
 800186c:	b29c      	uxth	r4, r3
 800186e:	7abb      	ldrb	r3, [r7, #10]
 8001870:	b29b      	uxth	r3, r3
 8001872:	8af9      	ldrh	r1, [r7, #22]
 8001874:	f241 3288 	movw	r2, #5000	; 0x1388
 8001878:	9202      	str	r2, [sp, #8]
 800187a:	9301      	str	r3, [sp, #4]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	9300      	str	r3, [sp, #0]
 8001880:	2301      	movs	r3, #1
 8001882:	4622      	mov	r2, r4
 8001884:	f002 fc84 	bl	8004190 <HAL_I2C_Mem_Read>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d101      	bne.n	8001892 <read_data+0x48>
 800188e:	2300      	movs	r3, #0
 8001890:	e000      	b.n	8001894 <read_data+0x4a>
	else return 1;
 8001892:	2301      	movs	r3, #1
}
 8001894:	4618      	mov	r0, r3
 8001896:	371c      	adds	r7, #28
 8001898:	46bd      	mov	sp, r7
 800189a:	bd90      	pop	{r4, r7, pc}

0800189c <write_register8>:

static int write_register8(BMP280 *inst, uint8_t addr, uint8_t value) {
 800189c:	b580      	push	{r7, lr}
 800189e:	b088      	sub	sp, #32
 80018a0:	af04      	add	r7, sp, #16
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	460b      	mov	r3, r1
 80018a6:	70fb      	strb	r3, [r7, #3]
 80018a8:	4613      	mov	r3, r2
 80018aa:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (inst->addr << 1);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	889b      	ldrh	r3, [r3, #4]
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(inst->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK) return false;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6818      	ldr	r0, [r3, #0]
 80018b8:	78fb      	ldrb	r3, [r7, #3]
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	89f9      	ldrh	r1, [r7, #14]
 80018be:	f242 7310 	movw	r3, #10000	; 0x2710
 80018c2:	9302      	str	r3, [sp, #8]
 80018c4:	2301      	movs	r3, #1
 80018c6:	9301      	str	r3, [sp, #4]
 80018c8:	1cbb      	adds	r3, r7, #2
 80018ca:	9300      	str	r3, [sp, #0]
 80018cc:	2301      	movs	r3, #1
 80018ce:	f002 fb65 	bl	8003f9c <HAL_I2C_Mem_Write>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d101      	bne.n	80018dc <write_register8+0x40>
 80018d8:	2300      	movs	r3, #0
 80018da:	e000      	b.n	80018de <write_register8+0x42>
	else return true;
 80018dc:	2301      	movs	r3, #1
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <read_register16>:

static bool read_register16(BMP280 *inst, uint8_t addr, uint16_t *value) {
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b08a      	sub	sp, #40	; 0x28
 80018ea:	af04      	add	r7, sp, #16
 80018ec:	60f8      	str	r0, [r7, #12]
 80018ee:	460b      	mov	r3, r1
 80018f0:	607a      	str	r2, [r7, #4]
 80018f2:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (inst->addr << 1);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	889b      	ldrh	r3, [r3, #4]
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(inst->i2c, tx_buff, addr, 1, rx_buff, 2, 5000) == HAL_OK)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	6818      	ldr	r0, [r3, #0]
 8001900:	7afb      	ldrb	r3, [r7, #11]
 8001902:	b29a      	uxth	r2, r3
 8001904:	8af9      	ldrh	r1, [r7, #22]
 8001906:	f241 3388 	movw	r3, #5000	; 0x1388
 800190a:	9302      	str	r3, [sp, #8]
 800190c:	2302      	movs	r3, #2
 800190e:	9301      	str	r3, [sp, #4]
 8001910:	f107 0314 	add.w	r3, r7, #20
 8001914:	9300      	str	r3, [sp, #0]
 8001916:	2301      	movs	r3, #1
 8001918:	f002 fc3a 	bl	8004190 <HAL_I2C_Mem_Read>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d10b      	bne.n	800193a <read_register16+0x54>
	{
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8001922:	7d7b      	ldrb	r3, [r7, #21]
 8001924:	021b      	lsls	r3, r3, #8
 8001926:	b21a      	sxth	r2, r3
 8001928:	7d3b      	ldrb	r3, [r7, #20]
 800192a:	b21b      	sxth	r3, r3
 800192c:	4313      	orrs	r3, r2
 800192e:	b21b      	sxth	r3, r3
 8001930:	b29a      	uxth	r2, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	801a      	strh	r2, [r3, #0]
		return true;
 8001936:	2301      	movs	r3, #1
 8001938:	e000      	b.n	800193c <read_register16+0x56>
	}
	else return false;
 800193a:	2300      	movs	r3, #0

}
 800193c:	4618      	mov	r0, r3
 800193e:	3718      	adds	r7, #24
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <read_calibration_data>:

static bool read_calibration_data(BMP280 *inst)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
	return (read_register16(inst, 0x88, &inst->dig_T1)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	330c      	adds	r3, #12
 8001950:	461a      	mov	r2, r3
 8001952:	2188      	movs	r1, #136	; 0x88
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f7ff ffc6 	bl	80018e6 <read_register16>
 800195a:	4603      	mov	r3, r0
	&& read_register16(inst, 0x94, (uint16_t *) &inst->dig_P4)
	&& read_register16(inst, 0x96, (uint16_t *) &inst->dig_P5)
	&& read_register16(inst, 0x98, (uint16_t *) &inst->dig_P6)
	&& read_register16(inst, 0x9a, (uint16_t *) &inst->dig_P7)
	&& read_register16(inst, 0x9c, (uint16_t *) &inst->dig_P8)
	&& read_register16(inst, 0x9e, (uint16_t *) &inst->dig_P9));
 800195c:	2b00      	cmp	r3, #0
 800195e:	d06f      	beq.n	8001a40 <read_calibration_data+0xfc>
	&& read_register16(inst, 0x8a, (uint16_t *) &inst->dig_T2)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	330e      	adds	r3, #14
 8001964:	461a      	mov	r2, r3
 8001966:	218a      	movs	r1, #138	; 0x8a
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f7ff ffbc 	bl	80018e6 <read_register16>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d065      	beq.n	8001a40 <read_calibration_data+0xfc>
	&& read_register16(inst, 0x8c, (uint16_t *) &inst->dig_T3)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	3310      	adds	r3, #16
 8001978:	461a      	mov	r2, r3
 800197a:	218c      	movs	r1, #140	; 0x8c
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff ffb2 	bl	80018e6 <read_register16>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d05b      	beq.n	8001a40 <read_calibration_data+0xfc>
	&& read_register16(inst, 0x8e, &inst->dig_P1)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3312      	adds	r3, #18
 800198c:	461a      	mov	r2, r3
 800198e:	218e      	movs	r1, #142	; 0x8e
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f7ff ffa8 	bl	80018e6 <read_register16>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d051      	beq.n	8001a40 <read_calibration_data+0xfc>
	&& read_register16(inst, 0x90, (uint16_t *) &inst->dig_P2)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3314      	adds	r3, #20
 80019a0:	461a      	mov	r2, r3
 80019a2:	2190      	movs	r1, #144	; 0x90
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f7ff ff9e 	bl	80018e6 <read_register16>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d047      	beq.n	8001a40 <read_calibration_data+0xfc>
	&& read_register16(inst, 0x92, (uint16_t *) &inst->dig_P3)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	3316      	adds	r3, #22
 80019b4:	461a      	mov	r2, r3
 80019b6:	2192      	movs	r1, #146	; 0x92
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f7ff ff94 	bl	80018e6 <read_register16>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d03d      	beq.n	8001a40 <read_calibration_data+0xfc>
	&& read_register16(inst, 0x94, (uint16_t *) &inst->dig_P4)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3318      	adds	r3, #24
 80019c8:	461a      	mov	r2, r3
 80019ca:	2194      	movs	r1, #148	; 0x94
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f7ff ff8a 	bl	80018e6 <read_register16>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d033      	beq.n	8001a40 <read_calibration_data+0xfc>
	&& read_register16(inst, 0x96, (uint16_t *) &inst->dig_P5)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	331a      	adds	r3, #26
 80019dc:	461a      	mov	r2, r3
 80019de:	2196      	movs	r1, #150	; 0x96
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f7ff ff80 	bl	80018e6 <read_register16>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d029      	beq.n	8001a40 <read_calibration_data+0xfc>
	&& read_register16(inst, 0x98, (uint16_t *) &inst->dig_P6)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	331c      	adds	r3, #28
 80019f0:	461a      	mov	r2, r3
 80019f2:	2198      	movs	r1, #152	; 0x98
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f7ff ff76 	bl	80018e6 <read_register16>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d01f      	beq.n	8001a40 <read_calibration_data+0xfc>
	&& read_register16(inst, 0x9a, (uint16_t *) &inst->dig_P7)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	331e      	adds	r3, #30
 8001a04:	461a      	mov	r2, r3
 8001a06:	219a      	movs	r1, #154	; 0x9a
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f7ff ff6c 	bl	80018e6 <read_register16>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d015      	beq.n	8001a40 <read_calibration_data+0xfc>
	&& read_register16(inst, 0x9c, (uint16_t *) &inst->dig_P8)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	3320      	adds	r3, #32
 8001a18:	461a      	mov	r2, r3
 8001a1a:	219c      	movs	r1, #156	; 0x9c
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7ff ff62 	bl	80018e6 <read_register16>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d00b      	beq.n	8001a40 <read_calibration_data+0xfc>
	&& read_register16(inst, 0x9e, (uint16_t *) &inst->dig_P9));
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	3322      	adds	r3, #34	; 0x22
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	219e      	movs	r1, #158	; 0x9e
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f7ff ff58 	bl	80018e6 <read_register16>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <read_calibration_data+0xfc>
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e000      	b.n	8001a42 <read_calibration_data+0xfe>
 8001a40:	2300      	movs	r3, #0
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	b2db      	uxtb	r3, r3
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <bmp280_init>:

bool bmp280_init(BMP280 *inst, BMP280_config *params)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
	uint16_t success = 0;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	81fb      	strh	r3, [r7, #14]

	success |= (inst->addr != BMP280_I2C_ADDRESS_0 && inst->addr != BMP280_I2C_ADDRESS_1);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	889b      	ldrh	r3, [r3, #4]
 8001a62:	2b76      	cmp	r3, #118	; 0x76
 8001a64:	d005      	beq.n	8001a72 <bmp280_init+0x22>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	889b      	ldrh	r3, [r3, #4]
 8001a6a:	2b77      	cmp	r3, #119	; 0x77
 8001a6c:	d001      	beq.n	8001a72 <bmp280_init+0x22>
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e000      	b.n	8001a74 <bmp280_init+0x24>
 8001a72:	2300      	movs	r3, #0
 8001a74:	b21a      	sxth	r2, r3
 8001a76:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	b21b      	sxth	r3, r3
 8001a7e:	81fb      	strh	r3, [r7, #14]
	success |= (read_data(inst, BMP280_REG_ID, &inst->id, 1));
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	1d9a      	adds	r2, r3, #6
 8001a84:	2301      	movs	r3, #1
 8001a86:	21d0      	movs	r1, #208	; 0xd0
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f7ff fede 	bl	800184a <read_data>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	b21a      	sxth	r2, r3
 8001a92:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	b21b      	sxth	r3, r3
 8001a9a:	81fb      	strh	r3, [r7, #14]
	success |= (inst->id != BMP280_CHIP_ID);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	799b      	ldrb	r3, [r3, #6]
 8001aa0:	2b58      	cmp	r3, #88	; 0x58
 8001aa2:	bf14      	ite	ne
 8001aa4:	2301      	movne	r3, #1
 8001aa6:	2300      	moveq	r3, #0
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	b21a      	sxth	r2, r3
 8001aac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	b21b      	sxth	r3, r3
 8001ab4:	81fb      	strh	r3, [r7, #14]

	// Soft reset.
	success |= (write_register8(inst, BMP280_REG_RESET, BMP280_RESET_VALUE));
 8001ab6:	22b6      	movs	r2, #182	; 0xb6
 8001ab8:	21e0      	movs	r1, #224	; 0xe0
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f7ff feee 	bl	800189c <write_register8>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	b21a      	sxth	r2, r3
 8001ac4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	b21b      	sxth	r3, r3
 8001acc:	81fb      	strh	r3, [r7, #14]

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(inst, BMP280_REG_STATUS, &status, 1) && (status & 1) == 0) break;
 8001ace:	f107 020b 	add.w	r2, r7, #11
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	21f3      	movs	r1, #243	; 0xf3
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f7ff feb7 	bl	800184a <read_data>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1f5      	bne.n	8001ace <bmp280_init+0x7e>
 8001ae2:	7afb      	ldrb	r3, [r7, #11]
 8001ae4:	f003 0301 	and.w	r3, r3, #1
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1f0      	bne.n	8001ace <bmp280_init+0x7e>
	}

	success |= (!read_calibration_data(inst));
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f7ff ff29 	bl	8001944 <read_calibration_data>
 8001af2:	4603      	mov	r3, r0
 8001af4:	f083 0301 	eor.w	r3, r3, #1
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	b21a      	sxth	r2, r3
 8001afc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	b21b      	sxth	r3, r3
 8001b04:	81fb      	strh	r3, [r7, #14]

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	791b      	ldrb	r3, [r3, #4]
 8001b0a:	015b      	lsls	r3, r3, #5
 8001b0c:	b25a      	sxtb	r2, r3
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	785b      	ldrb	r3, [r3, #1]
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	b25b      	sxtb	r3, r3
 8001b16:	4313      	orrs	r3, r2
 8001b18:	b25b      	sxtb	r3, r3
 8001b1a:	737b      	strb	r3, [r7, #13]
	if (write_register8(inst, BMP280_REG_CONFIG, config)) return false;
 8001b1c:	7b7b      	ldrb	r3, [r7, #13]
 8001b1e:	461a      	mov	r2, r3
 8001b20:	21f5      	movs	r1, #245	; 0xf5
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff feba 	bl	800189c <write_register8>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d100      	bne.n	8001b30 <bmp280_init+0xe0>
 8001b2e:	e001      	b.n	8001b34 <bmp280_init+0xe4>
 8001b30:	2300      	movs	r3, #0
 8001b32:	e022      	b.n	8001b7a <bmp280_init+0x12a>

	if (params->mode == BMP280_MODE_FORCED) {
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d102      	bne.n	8001b42 <bmp280_init+0xf2>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5) | (params->oversampling_pressure << 2) | (params->mode);
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	78db      	ldrb	r3, [r3, #3]
 8001b46:	015b      	lsls	r3, r3, #5
 8001b48:	b25a      	sxtb	r2, r3
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	789b      	ldrb	r3, [r3, #2]
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	b25b      	sxtb	r3, r3
 8001b52:	4313      	orrs	r3, r2
 8001b54:	b25a      	sxtb	r2, r3
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	b25b      	sxtb	r3, r3
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	b25b      	sxtb	r3, r3
 8001b60:	733b      	strb	r3, [r7, #12]

	success != (write_register8(inst, BMP280_REG_CTRL, ctrl));
 8001b62:	7b3b      	ldrb	r3, [r7, #12]
 8001b64:	461a      	mov	r2, r3
 8001b66:	21f4      	movs	r1, #244	; 0xf4
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f7ff fe97 	bl	800189c <write_register8>

	return (success == 0 ? true : false);
 8001b6e:	89fb      	ldrh	r3, [r7, #14]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	bf0c      	ite	eq
 8001b74:	2301      	moveq	r3, #1
 8001b76:	2300      	movne	r3, #0
 8001b78:	b2db      	uxtb	r3, r3
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280 *inst, int32_t adc_temp,
		int32_t *fine_temp) {
 8001b82:	b480      	push	{r7}
 8001b84:	b087      	sub	sp, #28
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	60f8      	str	r0, [r7, #12]
 8001b8a:	60b9      	str	r1, [r7, #8]
 8001b8c:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) inst->dig_T1 << 1)))
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	10da      	asrs	r2, r3, #3
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	899b      	ldrh	r3, [r3, #12]
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	1ad3      	subs	r3, r2, r3
			* (int32_t) inst->dig_T2) >> 11;
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8001ba0:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) inst->dig_T1 << 1)))
 8001ba4:	12db      	asrs	r3, r3, #11
 8001ba6:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) inst->dig_T1)
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	111b      	asrs	r3, r3, #4
 8001bac:	68fa      	ldr	r2, [r7, #12]
 8001bae:	8992      	ldrh	r2, [r2, #12]
 8001bb0:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) inst->dig_T1)) >> 12)
 8001bb2:	68ba      	ldr	r2, [r7, #8]
 8001bb4:	1112      	asrs	r2, r2, #4
 8001bb6:	68f9      	ldr	r1, [r7, #12]
 8001bb8:	8989      	ldrh	r1, [r1, #12]
 8001bba:	1a52      	subs	r2, r2, r1
 8001bbc:	fb02 f303 	mul.w	r3, r2, r3
 8001bc0:	131b      	asrs	r3, r3, #12
			* (int32_t) inst->dig_T3) >> 14;
 8001bc2:	68fa      	ldr	r2, [r7, #12]
 8001bc4:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8001bc8:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) inst->dig_T1)
 8001bcc:	139b      	asrs	r3, r3, #14
 8001bce:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8001bd0:	697a      	ldr	r2, [r7, #20]
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	441a      	add	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	4613      	mov	r3, r2
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	4413      	add	r3, r2
 8001be4:	3380      	adds	r3, #128	; 0x80
 8001be6:	121b      	asrs	r3, r3, #8
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	371c      	adds	r7, #28
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280 *inst, int32_t adc_press,
		int32_t fine_temp) {
 8001bf4:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8001bf8:	b08a      	sub	sp, #40	; 0x28
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	60f8      	str	r0, [r7, #12]
 8001bfe:	60b9      	str	r1, [r7, #8]
 8001c00:	607a      	str	r2, [r7, #4]
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4619      	mov	r1, r3
 8001c06:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001c0a:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 8001c0e:	f142 34ff 	adc.w	r4, r2, #4294967295
 8001c12:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = var1 * var1 * (int64_t) inst->dig_P6;
 8001c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c18:	6a3a      	ldr	r2, [r7, #32]
 8001c1a:	fb02 f203 	mul.w	r2, r2, r3
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	6a39      	ldr	r1, [r7, #32]
 8001c22:	fb01 f303 	mul.w	r3, r1, r3
 8001c26:	441a      	add	r2, r3
 8001c28:	6a39      	ldr	r1, [r7, #32]
 8001c2a:	6a3b      	ldr	r3, [r7, #32]
 8001c2c:	fba1 3403 	umull	r3, r4, r1, r3
 8001c30:	4422      	add	r2, r4
 8001c32:	4614      	mov	r4, r2
 8001c34:	68fa      	ldr	r2, [r7, #12]
 8001c36:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8001c3a:	b211      	sxth	r1, r2
 8001c3c:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001c40:	fb01 f504 	mul.w	r5, r1, r4
 8001c44:	fb03 f002 	mul.w	r0, r3, r2
 8001c48:	4428      	add	r0, r5
 8001c4a:	fba3 3401 	umull	r3, r4, r3, r1
 8001c4e:	1902      	adds	r2, r0, r4
 8001c50:	4614      	mov	r4, r2
 8001c52:	e9c7 3406 	strd	r3, r4, [r7, #24]
 8001c56:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + ((var1 * (int64_t) inst->dig_P5) << 17);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001c60:	b21b      	sxth	r3, r3
 8001c62:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001c66:	6a3a      	ldr	r2, [r7, #32]
 8001c68:	fb04 f102 	mul.w	r1, r4, r2
 8001c6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c6e:	fb03 f202 	mul.w	r2, r3, r2
 8001c72:	1888      	adds	r0, r1, r2
 8001c74:	6a3a      	ldr	r2, [r7, #32]
 8001c76:	fba2 1203 	umull	r1, r2, r2, r3
 8001c7a:	1883      	adds	r3, r0, r2
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	f04f 0500 	mov.w	r5, #0
 8001c82:	f04f 0600 	mov.w	r6, #0
 8001c86:	0456      	lsls	r6, r2, #17
 8001c88:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 8001c8c:	044d      	lsls	r5, r1, #17
 8001c8e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001c92:	186b      	adds	r3, r5, r1
 8001c94:	eb46 0402 	adc.w	r4, r6, r2
 8001c98:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + (((int64_t) inst->dig_P4) << 35);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001ca2:	b219      	sxth	r1, r3
 8001ca4:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001ca8:	f04f 0500 	mov.w	r5, #0
 8001cac:	f04f 0600 	mov.w	r6, #0
 8001cb0:	00ce      	lsls	r6, r1, #3
 8001cb2:	2500      	movs	r5, #0
 8001cb4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001cb8:	186b      	adds	r3, r5, r1
 8001cba:	eb46 0402 	adc.w	r4, r6, r2
 8001cbe:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var1 = ((var1 * var1 * (int64_t) inst->dig_P3) >> 8)
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc4:	6a3a      	ldr	r2, [r7, #32]
 8001cc6:	fb02 f203 	mul.w	r2, r2, r3
 8001cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ccc:	6a39      	ldr	r1, [r7, #32]
 8001cce:	fb01 f303 	mul.w	r3, r1, r3
 8001cd2:	441a      	add	r2, r3
 8001cd4:	6a39      	ldr	r1, [r7, #32]
 8001cd6:	6a3b      	ldr	r3, [r7, #32]
 8001cd8:	fba1 3403 	umull	r3, r4, r1, r3
 8001cdc:	4422      	add	r2, r4
 8001cde:	4614      	mov	r4, r2
 8001ce0:	68fa      	ldr	r2, [r7, #12]
 8001ce2:	f9b2 2016 	ldrsh.w	r2, [r2, #22]
 8001ce6:	b211      	sxth	r1, r2
 8001ce8:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001cec:	fb01 f504 	mul.w	r5, r1, r4
 8001cf0:	fb03 f002 	mul.w	r0, r3, r2
 8001cf4:	4428      	add	r0, r5
 8001cf6:	fba3 3401 	umull	r3, r4, r3, r1
 8001cfa:	1902      	adds	r2, r0, r4
 8001cfc:	4614      	mov	r4, r2
 8001cfe:	f04f 0100 	mov.w	r1, #0
 8001d02:	f04f 0200 	mov.w	r2, #0
 8001d06:	0a19      	lsrs	r1, r3, #8
 8001d08:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 8001d0c:	1222      	asrs	r2, r4, #8
			+ ((var1 * (int64_t) inst->dig_P2) << 12);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001d14:	b21b      	sxth	r3, r3
 8001d16:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001d1a:	6a38      	ldr	r0, [r7, #32]
 8001d1c:	fb04 f500 	mul.w	r5, r4, r0
 8001d20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001d22:	fb03 f000 	mul.w	r0, r3, r0
 8001d26:	4428      	add	r0, r5
 8001d28:	6a3d      	ldr	r5, [r7, #32]
 8001d2a:	fba5 5603 	umull	r5, r6, r5, r3
 8001d2e:	1983      	adds	r3, r0, r6
 8001d30:	461e      	mov	r6, r3
 8001d32:	f04f 0b00 	mov.w	fp, #0
 8001d36:	f04f 0c00 	mov.w	ip, #0
 8001d3a:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 8001d3e:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 8001d42:	ea4f 3b05 	mov.w	fp, r5, lsl #12
	var1 = ((var1 * var1 * (int64_t) inst->dig_P3) >> 8)
 8001d46:	eb1b 0301 	adds.w	r3, fp, r1
 8001d4a:	eb4c 0402 	adc.w	r4, ip, r2
 8001d4e:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) inst->dig_P1) >> 33;
 8001d52:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001d56:	1c19      	adds	r1, r3, #0
 8001d58:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	8a5b      	ldrh	r3, [r3, #18]
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	f04f 0400 	mov.w	r4, #0
 8001d66:	fb03 f502 	mul.w	r5, r3, r2
 8001d6a:	fb01 f004 	mul.w	r0, r1, r4
 8001d6e:	4428      	add	r0, r5
 8001d70:	fba1 3403 	umull	r3, r4, r1, r3
 8001d74:	1902      	adds	r2, r0, r4
 8001d76:	4614      	mov	r4, r2
 8001d78:	f04f 0100 	mov.w	r1, #0
 8001d7c:	f04f 0200 	mov.w	r2, #0
 8001d80:	1061      	asrs	r1, r4, #1
 8001d82:	17e2      	asrs	r2, r4, #31
 8001d84:	e9c7 1208 	strd	r1, r2, [r7, #32]

	if (var1 == 0) {
 8001d88:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001d8c:	4323      	orrs	r3, r4
 8001d8e:	d101      	bne.n	8001d94 <compensate_pressure+0x1a0>
		return 0;  // avoid exception caused by division by zero
 8001d90:	2300      	movs	r3, #0
 8001d92:	e0d4      	b.n	8001f3e <compensate_pressure+0x34a>
	}

	p = 1048576 - adc_press;
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001d9a:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001d9e:	e9c7 3404 	strd	r3, r4, [r7, #16]
	p = (((p << 31) - var2) * 3125) / var1;
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	ea4f 0963 	mov.w	r9, r3, asr #1
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	ea4f 78c3 	mov.w	r8, r3, lsl #31
 8001dae:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001db2:	4645      	mov	r5, r8
 8001db4:	464e      	mov	r6, r9
 8001db6:	1aed      	subs	r5, r5, r3
 8001db8:	eb66 0604 	sbc.w	r6, r6, r4
 8001dbc:	46a8      	mov	r8, r5
 8001dbe:	46b1      	mov	r9, r6
 8001dc0:	eb18 0308 	adds.w	r3, r8, r8
 8001dc4:	eb49 0409 	adc.w	r4, r9, r9
 8001dc8:	4698      	mov	r8, r3
 8001dca:	46a1      	mov	r9, r4
 8001dcc:	eb18 0805 	adds.w	r8, r8, r5
 8001dd0:	eb49 0906 	adc.w	r9, r9, r6
 8001dd4:	f04f 0100 	mov.w	r1, #0
 8001dd8:	f04f 0200 	mov.w	r2, #0
 8001ddc:	ea4f 1289 	mov.w	r2, r9, lsl #6
 8001de0:	ea42 6298 	orr.w	r2, r2, r8, lsr #26
 8001de4:	ea4f 1188 	mov.w	r1, r8, lsl #6
 8001de8:	eb18 0801 	adds.w	r8, r8, r1
 8001dec:	eb49 0902 	adc.w	r9, r9, r2
 8001df0:	f04f 0100 	mov.w	r1, #0
 8001df4:	f04f 0200 	mov.w	r2, #0
 8001df8:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8001dfc:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 8001e00:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8001e04:	4688      	mov	r8, r1
 8001e06:	4691      	mov	r9, r2
 8001e08:	eb18 0805 	adds.w	r8, r8, r5
 8001e0c:	eb49 0906 	adc.w	r9, r9, r6
 8001e10:	f04f 0100 	mov.w	r1, #0
 8001e14:	f04f 0200 	mov.w	r2, #0
 8001e18:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8001e1c:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 8001e20:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8001e24:	4688      	mov	r8, r1
 8001e26:	4691      	mov	r9, r2
 8001e28:	eb18 0005 	adds.w	r0, r8, r5
 8001e2c:	eb49 0106 	adc.w	r1, r9, r6
 8001e30:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e34:	f7fe ff28 	bl	8000c88 <__aeabi_ldivmod>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	460c      	mov	r4, r1
 8001e3c:	e9c7 3404 	strd	r3, r4, [r7, #16]
	var1 = ((int64_t) inst->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001e46:	b219      	sxth	r1, r3
 8001e48:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001e4c:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 8001e50:	f04f 0300 	mov.w	r3, #0
 8001e54:	f04f 0400 	mov.w	r4, #0
 8001e58:	0b6b      	lsrs	r3, r5, #13
 8001e5a:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8001e5e:	1374      	asrs	r4, r6, #13
 8001e60:	fb03 f502 	mul.w	r5, r3, r2
 8001e64:	fb01 f004 	mul.w	r0, r1, r4
 8001e68:	4428      	add	r0, r5
 8001e6a:	fba1 1203 	umull	r1, r2, r1, r3
 8001e6e:	1883      	adds	r3, r0, r2
 8001e70:	461a      	mov	r2, r3
 8001e72:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 8001e76:	f04f 0300 	mov.w	r3, #0
 8001e7a:	f04f 0400 	mov.w	r4, #0
 8001e7e:	0b6b      	lsrs	r3, r5, #13
 8001e80:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8001e84:	1374      	asrs	r4, r6, #13
 8001e86:	fb03 f502 	mul.w	r5, r3, r2
 8001e8a:	fb01 f004 	mul.w	r0, r1, r4
 8001e8e:	4428      	add	r0, r5
 8001e90:	fba1 1203 	umull	r1, r2, r1, r3
 8001e94:	1883      	adds	r3, r0, r2
 8001e96:	461a      	mov	r2, r3
 8001e98:	f04f 0300 	mov.w	r3, #0
 8001e9c:	f04f 0400 	mov.w	r4, #0
 8001ea0:	0e4b      	lsrs	r3, r1, #25
 8001ea2:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8001ea6:	1654      	asrs	r4, r2, #25
 8001ea8:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = ((int64_t) inst->dig_P8 * p) >> 19;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001eb2:	b21b      	sxth	r3, r3
 8001eb4:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	fb04 f102 	mul.w	r1, r4, r2
 8001ebe:	697a      	ldr	r2, [r7, #20]
 8001ec0:	fb03 f202 	mul.w	r2, r3, r2
 8001ec4:	1888      	adds	r0, r1, r2
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	fba2 1203 	umull	r1, r2, r2, r3
 8001ecc:	1883      	adds	r3, r0, r2
 8001ece:	461a      	mov	r2, r3
 8001ed0:	f04f 0300 	mov.w	r3, #0
 8001ed4:	f04f 0400 	mov.w	r4, #0
 8001ed8:	0ccb      	lsrs	r3, r1, #19
 8001eda:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8001ede:	14d4      	asrs	r4, r2, #19
 8001ee0:	e9c7 3406 	strd	r3, r4, [r7, #24]

	p = ((p + var1 + var2) >> 8) + ((int64_t) inst->dig_P7 << 4);
 8001ee4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001ee8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001eec:	eb11 0803 	adds.w	r8, r1, r3
 8001ef0:	eb42 0904 	adc.w	r9, r2, r4
 8001ef4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001ef8:	eb13 0508 	adds.w	r5, r3, r8
 8001efc:	eb44 0609 	adc.w	r6, r4, r9
 8001f00:	f04f 0100 	mov.w	r1, #0
 8001f04:	f04f 0200 	mov.w	r2, #0
 8001f08:	0a29      	lsrs	r1, r5, #8
 8001f0a:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 8001f0e:	1232      	asrs	r2, r6, #8
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001f16:	b21d      	sxth	r5, r3
 8001f18:	ea4f 76e5 	mov.w	r6, r5, asr #31
 8001f1c:	f04f 0800 	mov.w	r8, #0
 8001f20:	f04f 0900 	mov.w	r9, #0
 8001f24:	ea4f 1906 	mov.w	r9, r6, lsl #4
 8001f28:	ea49 7915 	orr.w	r9, r9, r5, lsr #28
 8001f2c:	ea4f 1805 	mov.w	r8, r5, lsl #4
 8001f30:	eb18 0301 	adds.w	r3, r8, r1
 8001f34:	eb49 0402 	adc.w	r4, r9, r2
 8001f38:	e9c7 3404 	strd	r3, r4, [r7, #16]
	return p;
 8001f3c:	693b      	ldr	r3, [r7, #16]
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3728      	adds	r7, #40	; 0x28
 8001f42:	46bd      	mov	sp, r7
 8001f44:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}

08001f48 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280 *inst, int32_t *temperature, uint32_t *pressure) {
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b08a      	sub	sp, #40	; 0x28
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[6];

	// Need to read in one sequence to ensure they match.
	size_t size = 6;
 8001f54:	2306      	movs	r3, #6
 8001f56:	627b      	str	r3, [r7, #36]	; 0x24
	if (read_data(inst, 0xf7, data, size)) return false;
 8001f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	f107 0214 	add.w	r2, r7, #20
 8001f60:	21f7      	movs	r1, #247	; 0xf7
 8001f62:	68f8      	ldr	r0, [r7, #12]
 8001f64:	f7ff fc71 	bl	800184a <read_data>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <bmp280_read_fixed+0x2a>
 8001f6e:	2300      	movs	r3, #0
 8001f70:	e027      	b.n	8001fc2 <bmp280_read_fixed+0x7a>

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001f72:	7d3b      	ldrb	r3, [r7, #20]
 8001f74:	031a      	lsls	r2, r3, #12
 8001f76:	7d7b      	ldrb	r3, [r7, #21]
 8001f78:	011b      	lsls	r3, r3, #4
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	7dba      	ldrb	r2, [r7, #22]
 8001f7e:	0912      	lsrs	r2, r2, #4
 8001f80:	b2d2      	uxtb	r2, r2
 8001f82:	4313      	orrs	r3, r2
 8001f84:	623b      	str	r3, [r7, #32]
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001f86:	7dfb      	ldrb	r3, [r7, #23]
 8001f88:	031a      	lsls	r2, r3, #12
 8001f8a:	7e3b      	ldrb	r3, [r7, #24]
 8001f8c:	011b      	lsls	r3, r3, #4
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	7e7a      	ldrb	r2, [r7, #25]
 8001f92:	0912      	lsrs	r2, r2, #4
 8001f94:	b2d2      	uxtb	r2, r2
 8001f96:	4313      	orrs	r3, r2
 8001f98:	61fb      	str	r3, [r7, #28]

	int32_t fine_temp;
	*temperature = compensate_temperature(inst, adc_temp, &fine_temp);
 8001f9a:	f107 0310 	add.w	r3, r7, #16
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	69f9      	ldr	r1, [r7, #28]
 8001fa2:	68f8      	ldr	r0, [r7, #12]
 8001fa4:	f7ff fded 	bl	8001b82 <compensate_temperature>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(inst, adc_pressure, fine_temp);
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	6a39      	ldr	r1, [r7, #32]
 8001fb4:	68f8      	ldr	r0, [r7, #12]
 8001fb6:	f7ff fe1d 	bl	8001bf4 <compensate_pressure>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	601a      	str	r2, [r3, #0]

	return true;
 8001fc0:	2301      	movs	r3, #1
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3728      	adds	r7, #40	; 0x28
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
	...

08001fcc <bmp280_read_float>:

bool bmp280_read_float(BMP280 *inst, float *temperature, float *pressure)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	if (bmp280_read_fixed(inst, &fixed_temperature, &fixed_pressure))
 8001fd8:	f107 0210 	add.w	r2, r7, #16
 8001fdc:	f107 0314 	add.w	r3, r7, #20
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	68f8      	ldr	r0, [r7, #12]
 8001fe4:	f7ff ffb0 	bl	8001f48 <bmp280_read_fixed>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d019      	beq.n	8002022 <bmp280_read_float+0x56>
	{
		*temperature = (float) fixed_temperature / 100;
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	ee07 3a90 	vmov	s15, r3
 8001ff4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ff8:	eddf 6a0c 	vldr	s13, [pc, #48]	; 800202c <bmp280_read_float+0x60>
 8001ffc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	ee07 3a90 	vmov	s15, r3
 800200c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002010:	eddf 6a07 	vldr	s13, [pc, #28]	; 8002030 <bmp280_read_float+0x64>
 8002014:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	edc3 7a00 	vstr	s15, [r3]

		return true;
 800201e:	2301      	movs	r3, #1
 8002020:	e000      	b.n	8002024 <bmp280_read_float+0x58>
	}

	return false;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	3718      	adds	r7, #24
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	42c80000 	.word	0x42c80000
 8002030:	43800000 	.word	0x43800000

08002034 <print>:
static void setup();
static void loop();

static char printBuffer[256];
static inline void print(char* str)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
	CDC_Transmit_FS((uint8_t*) str, strlen(str));
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f7fe f8c7 	bl	80001d0 <strlen>
 8002042:	4603      	mov	r3, r0
 8002044:	b29b      	uxth	r3, r3
 8002046:	4619      	mov	r1, r3
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f00a fe41 	bl	800ccd0 <CDC_Transmit_FS>
};
 800204e:	bf00      	nop
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
	...

08002058 <setup>:
bool nextTX;
int message;
int message_length;

void setup()
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
	if (bmp280_begin())
 800205c:	f000 f8c8 	bl	80021f0 <bmp280_begin>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00c      	beq.n	8002080 <setup+0x28>
	{
		bmp280_read_float(&bmp280, &temperature, &pressure);
 8002066:	4a0f      	ldr	r2, [pc, #60]	; (80020a4 <setup+0x4c>)
 8002068:	490f      	ldr	r1, [pc, #60]	; (80020a8 <setup+0x50>)
 800206a:	4810      	ldr	r0, [pc, #64]	; (80020ac <setup+0x54>)
 800206c:	f7ff ffae 	bl	8001fcc <bmp280_read_float>
		HAL_GPIO_TogglePin(LEDA_GPIO_Port, LEDA_Pin);
 8002070:	2180      	movs	r1, #128	; 0x80
 8002072:	480f      	ldr	r0, [pc, #60]	; (80020b0 <setup+0x58>)
 8002074:	f001 fe27 	bl	8003cc6 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8002078:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800207c:	f000 ff88 	bl	8002f90 <HAL_Delay>
	}

	if (radio_begin())
 8002080:	f000 f8fe 	bl	8002280 <radio_begin>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d009      	beq.n	800209e <setup+0x46>
	{
		radio_procedure();	//starts radio loop, now radio wokrs dependend on DIO0 interrupt in ping-pong mode
 800208a:	f000 f877 	bl	800217c <radio_procedure>
		HAL_GPIO_TogglePin(LEDB_GPIO_Port, LEDB_Pin);
 800208e:	2140      	movs	r1, #64	; 0x40
 8002090:	4807      	ldr	r0, [pc, #28]	; (80020b0 <setup+0x58>)
 8002092:	f001 fe18 	bl	8003cc6 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8002096:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800209a:	f000 ff79 	bl	8002f90 <HAL_Delay>
	}
}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	200006a8 	.word	0x200006a8
 80020a8:	200006a0 	.word	0x200006a0
 80020ac:	200008e4 	.word	0x200008e4
 80020b0:	40020800 	.word	0x40020800

080020b4 <loop>:

void loop()
{
 80020b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af02      	add	r7, sp, #8
	if (bmp280_read_float(&bmp280, &temperature, &pressure))
 80020ba:	4a25      	ldr	r2, [pc, #148]	; (8002150 <loop+0x9c>)
 80020bc:	4925      	ldr	r1, [pc, #148]	; (8002154 <loop+0xa0>)
 80020be:	4826      	ldr	r0, [pc, #152]	; (8002158 <loop+0xa4>)
 80020c0:	f7ff ff84 	bl	8001fcc <bmp280_read_float>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d018      	beq.n	80020fc <loop+0x48>
	{
		sprintf(printBuffer, "Pressure: %.2f Pa, Temperature: %.2f C\r\n", pressure, temperature);
 80020ca:	4b21      	ldr	r3, [pc, #132]	; (8002150 <loop+0x9c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7fe fa3a 	bl	8000548 <__aeabi_f2d>
 80020d4:	4605      	mov	r5, r0
 80020d6:	460e      	mov	r6, r1
 80020d8:	4b1e      	ldr	r3, [pc, #120]	; (8002154 <loop+0xa0>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4618      	mov	r0, r3
 80020de:	f7fe fa33 	bl	8000548 <__aeabi_f2d>
 80020e2:	4603      	mov	r3, r0
 80020e4:	460c      	mov	r4, r1
 80020e6:	e9cd 3400 	strd	r3, r4, [sp]
 80020ea:	462a      	mov	r2, r5
 80020ec:	4633      	mov	r3, r6
 80020ee:	491b      	ldr	r1, [pc, #108]	; (800215c <loop+0xa8>)
 80020f0:	481b      	ldr	r0, [pc, #108]	; (8002160 <loop+0xac>)
 80020f2:	f00c f991 	bl	800e418 <siprintf>
		print(printBuffer);
 80020f6:	481a      	ldr	r0, [pc, #104]	; (8002160 <loop+0xac>)
 80020f8:	f7ff ff9c 	bl	8002034 <print>
		//HAL_Delay(50);
	}
	if (radio.newPacket)
 80020fc:	4b19      	ldr	r3, [pc, #100]	; (8002164 <loop+0xb0>)
 80020fe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00e      	beq.n	8002124 <loop+0x70>
	{
		printf("Received (%d @ %d):\t%s\r\n", radio.rxLen, radio.rssi, radio.rxBuffer);
 8002106:	4b17      	ldr	r3, [pc, #92]	; (8002164 <loop+0xb0>)
 8002108:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800210c:	4619      	mov	r1, r3
 800210e:	4b15      	ldr	r3, [pc, #84]	; (8002164 <loop+0xb0>)
 8002110:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002112:	4b15      	ldr	r3, [pc, #84]	; (8002168 <loop+0xb4>)
 8002114:	4815      	ldr	r0, [pc, #84]	; (800216c <loop+0xb8>)
 8002116:	f00c f951 	bl	800e3bc <iprintf>
		radio.newPacket = false;
 800211a:	4b12      	ldr	r3, [pc, #72]	; (8002164 <loop+0xb0>)
 800211c:	2200      	movs	r2, #0
 800211e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	{
		printf("Send: %s\r\n", sendBuffer);
		message += 1;
		radio.txDone = false;
	}
}
 8002122:	e011      	b.n	8002148 <loop+0x94>
	else if (radio.txDone)
 8002124:	4b0f      	ldr	r3, [pc, #60]	; (8002164 <loop+0xb0>)
 8002126:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800212a:	2b00      	cmp	r3, #0
 800212c:	d00c      	beq.n	8002148 <loop+0x94>
		printf("Send: %s\r\n", sendBuffer);
 800212e:	4910      	ldr	r1, [pc, #64]	; (8002170 <loop+0xbc>)
 8002130:	4810      	ldr	r0, [pc, #64]	; (8002174 <loop+0xc0>)
 8002132:	f00c f943 	bl	800e3bc <iprintf>
		message += 1;
 8002136:	4b10      	ldr	r3, [pc, #64]	; (8002178 <loop+0xc4>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	3301      	adds	r3, #1
 800213c:	4a0e      	ldr	r2, [pc, #56]	; (8002178 <loop+0xc4>)
 800213e:	6013      	str	r3, [r2, #0]
		radio.txDone = false;
 8002140:	4b08      	ldr	r3, [pc, #32]	; (8002164 <loop+0xb0>)
 8002142:	2200      	movs	r2, #0
 8002144:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8002148:	bf00      	nop
 800214a:	3704      	adds	r7, #4
 800214c:	46bd      	mov	sp, r7
 800214e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002150:	200006a8 	.word	0x200006a8
 8002154:	200006a0 	.word	0x200006a0
 8002158:	200008e4 	.word	0x200008e4
 800215c:	08011998 	.word	0x08011998
 8002160:	20000378 	.word	0x20000378
 8002164:	200006ac 	.word	0x200006ac
 8002168:	200006dd 	.word	0x200006dd
 800216c:	080119c4 	.word	0x080119c4
 8002170:	200007e0 	.word	0x200007e0
 8002174:	080119e0 	.word	0x080119e0
 8002178:	200006a4 	.word	0x200006a4

0800217c <radio_procedure>:

void radio_procedure()
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
	if (nextTX)
 8002180:	4b13      	ldr	r3, [pc, #76]	; (80021d0 <radio_procedure+0x54>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d018      	beq.n	80021ba <radio_procedure+0x3e>
	{
		message_length = sprintf(sendBuffer, "Hello %d", message);
 8002188:	4b12      	ldr	r3, [pc, #72]	; (80021d4 <radio_procedure+0x58>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	461a      	mov	r2, r3
 800218e:	4912      	ldr	r1, [pc, #72]	; (80021d8 <radio_procedure+0x5c>)
 8002190:	4812      	ldr	r0, [pc, #72]	; (80021dc <radio_procedure+0x60>)
 8002192:	f00c f941 	bl	800e418 <siprintf>
 8002196:	4602      	mov	r2, r0
 8002198:	4b11      	ldr	r3, [pc, #68]	; (80021e0 <radio_procedure+0x64>)
 800219a:	601a      	str	r2, [r3, #0]
		SX1278_transmit(&radio, (uint8_t*)sendBuffer, message_length);
 800219c:	4b10      	ldr	r3, [pc, #64]	; (80021e0 <radio_procedure+0x64>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	461a      	mov	r2, r3
 80021a4:	490d      	ldr	r1, [pc, #52]	; (80021dc <radio_procedure+0x60>)
 80021a6:	480f      	ldr	r0, [pc, #60]	; (80021e4 <radio_procedure+0x68>)
 80021a8:	f7ff f94c 	bl	8001444 <SX1278_transmit>
		print("Sending...\n");
 80021ac:	480e      	ldr	r0, [pc, #56]	; (80021e8 <radio_procedure+0x6c>)
 80021ae:	f7ff ff41 	bl	8002034 <print>
		nextTX = false;
 80021b2:	4b07      	ldr	r3, [pc, #28]	; (80021d0 <radio_procedure+0x54>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	701a      	strb	r2, [r3, #0]
	{
		SX1278_receive(&radio);
		print("Receiving...\n");
		nextTX = true;
	}
}
 80021b8:	e008      	b.n	80021cc <radio_procedure+0x50>
		SX1278_receive(&radio);
 80021ba:	480a      	ldr	r0, [pc, #40]	; (80021e4 <radio_procedure+0x68>)
 80021bc:	f7ff f97a 	bl	80014b4 <SX1278_receive>
		print("Receiving...\n");
 80021c0:	480a      	ldr	r0, [pc, #40]	; (80021ec <radio_procedure+0x70>)
 80021c2:	f7ff ff37 	bl	8002034 <print>
		nextTX = true;
 80021c6:	4b02      	ldr	r3, [pc, #8]	; (80021d0 <radio_procedure+0x54>)
 80021c8:	2201      	movs	r2, #1
 80021ca:	701a      	strb	r2, [r3, #0]
}
 80021cc:	bf00      	nop
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	200008e0 	.word	0x200008e0
 80021d4:	200006a4 	.word	0x200006a4
 80021d8:	080119ec 	.word	0x080119ec
 80021dc:	200007e0 	.word	0x200007e0
 80021e0:	2000069c 	.word	0x2000069c
 80021e4:	200006ac 	.word	0x200006ac
 80021e8:	080119f8 	.word	0x080119f8
 80021ec:	08011a04 	.word	0x08011a04

080021f0 <bmp280_begin>:

bool bmp280_begin()
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
	bmp280.params = bmp280_default_config;
 80021f4:	4b16      	ldr	r3, [pc, #88]	; (8002250 <bmp280_begin+0x60>)
 80021f6:	4a17      	ldr	r2, [pc, #92]	; (8002254 <bmp280_begin+0x64>)
 80021f8:	3307      	adds	r3, #7
 80021fa:	6810      	ldr	r0, [r2, #0]
 80021fc:	6018      	str	r0, [r3, #0]
 80021fe:	7912      	ldrb	r2, [r2, #4]
 8002200:	711a      	strb	r2, [r3, #4]
	bmp280.addr = BMP280_I2C_ADDRESS_0;
 8002202:	4b13      	ldr	r3, [pc, #76]	; (8002250 <bmp280_begin+0x60>)
 8002204:	2276      	movs	r2, #118	; 0x76
 8002206:	809a      	strh	r2, [r3, #4]
	bmp280.i2c = Get_I2C1_Instance();
 8002208:	f000 faee 	bl	80027e8 <Get_I2C1_Instance>
 800220c:	4602      	mov	r2, r0
 800220e:	4b10      	ldr	r3, [pc, #64]	; (8002250 <bmp280_begin+0x60>)
 8002210:	601a      	str	r2, [r3, #0]

	while (!bmp280_init(&bmp280, &bmp280.params)) {
 8002212:	bf00      	nop
 8002214:	4910      	ldr	r1, [pc, #64]	; (8002258 <bmp280_begin+0x68>)
 8002216:	480e      	ldr	r0, [pc, #56]	; (8002250 <bmp280_begin+0x60>)
 8002218:	f7ff fc1a 	bl	8001a50 <bmp280_init>
 800221c:	4603      	mov	r3, r0
 800221e:	f083 0301 	eor.w	r3, r3, #1
 8002222:	b2db      	uxtb	r3, r3
 8002224:	2b00      	cmp	r3, #0
 8002226:	d00d      	beq.n	8002244 <bmp280_begin+0x54>
		print("BMP280 initialization failed\n");
 8002228:	480c      	ldr	r0, [pc, #48]	; (800225c <bmp280_begin+0x6c>)
 800222a:	f7ff ff03 	bl	8002034 <print>

		HAL_GPIO_TogglePin(LEDC_GPIO_Port, LEDC_Pin);
 800222e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002232:	480b      	ldr	r0, [pc, #44]	; (8002260 <bmp280_begin+0x70>)
 8002234:	f001 fd47 	bl	8003cc6 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8002238:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800223c:	f000 fea8 	bl	8002f90 <HAL_Delay>
		return false;
 8002240:	2300      	movs	r3, #0
 8002242:	e003      	b.n	800224c <bmp280_begin+0x5c>
	}

	print("BMP280 found!\n");
 8002244:	4807      	ldr	r0, [pc, #28]	; (8002264 <bmp280_begin+0x74>)
 8002246:	f7ff fef5 	bl	8002034 <print>
	return true;
 800224a:	2301      	movs	r3, #1
}
 800224c:	4618      	mov	r0, r3
 800224e:	bd80      	pop	{r7, pc}
 8002250:	200008e4 	.word	0x200008e4
 8002254:	20000000 	.word	0x20000000
 8002258:	200008eb 	.word	0x200008eb
 800225c:	08011a14 	.word	0x08011a14
 8002260:	40020400 	.word	0x40020400
 8002264:	08011a34 	.word	0x08011a34

08002268 <dio0_IRQ>:


void dio0_IRQ()
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
	SX1278_dio0_IRQ(&radio);
 800226c:	4803      	ldr	r0, [pc, #12]	; (800227c <dio0_IRQ+0x14>)
 800226e:	f7ff fa6c 	bl	800174a <SX1278_dio0_IRQ>
	radio_procedure();
 8002272:	f7ff ff83 	bl	800217c <radio_procedure>
}
 8002276:	bf00      	nop
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	200006ac 	.word	0x200006ac

08002280 <radio_begin>:

bool radio_begin()
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
	radio.reset = LR_RESET_Pin;
 8002284:	4b2a      	ldr	r3, [pc, #168]	; (8002330 <radio_begin+0xb0>)
 8002286:	2220      	movs	r2, #32
 8002288:	815a      	strh	r2, [r3, #10]
	radio.dio0 = LR_DIO0_Pin;
 800228a:	4b29      	ldr	r3, [pc, #164]	; (8002330 <radio_begin+0xb0>)
 800228c:	2240      	movs	r2, #64	; 0x40
 800228e:	819a      	strh	r2, [r3, #12]
	radio.nss = LR_NSS_Pin;
 8002290:	4b27      	ldr	r3, [pc, #156]	; (8002330 <radio_begin+0xb0>)
 8002292:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002296:	81da      	strh	r2, [r3, #14]
	radio.reset_port = LR_RESET_GPIO_Port;
 8002298:	4b25      	ldr	r3, [pc, #148]	; (8002330 <radio_begin+0xb0>)
 800229a:	4a26      	ldr	r2, [pc, #152]	; (8002334 <radio_begin+0xb4>)
 800229c:	611a      	str	r2, [r3, #16]
	radio.dio0_port = LR_DIO0_GPIO_Port;
 800229e:	4b24      	ldr	r3, [pc, #144]	; (8002330 <radio_begin+0xb0>)
 80022a0:	4a25      	ldr	r2, [pc, #148]	; (8002338 <radio_begin+0xb8>)
 80022a2:	615a      	str	r2, [r3, #20]
	radio.nss = LR_NSS_GPIO_Port;
 80022a4:	4b22      	ldr	r3, [pc, #136]	; (8002330 <radio_begin+0xb0>)
 80022a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022aa:	81da      	strh	r2, [r3, #14]
	radio.spi = Get_SPI1_Instance();
 80022ac:	f000 faa6 	bl	80027fc <Get_SPI1_Instance>
 80022b0:	4602      	mov	r2, r0
 80022b2:	4b1f      	ldr	r3, [pc, #124]	; (8002330 <radio_begin+0xb0>)
 80022b4:	61da      	str	r2, [r3, #28]

	// to change
	radio.frequency = sx1278_default_config.frequency;
 80022b6:	4b21      	ldr	r3, [pc, #132]	; (800233c <radio_begin+0xbc>)
 80022b8:	881b      	ldrh	r3, [r3, #0]
 80022ba:	ee07 3a90 	vmov	s15, r3
 80022be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022c2:	4b1b      	ldr	r3, [pc, #108]	; (8002330 <radio_begin+0xb0>)
 80022c4:	edc3 7a00 	vstr	s15, [r3]
	radio.power = sx1278_default_config.power;
 80022c8:	4b1c      	ldr	r3, [pc, #112]	; (800233c <radio_begin+0xbc>)
 80022ca:	789a      	ldrb	r2, [r3, #2]
 80022cc:	4b18      	ldr	r3, [pc, #96]	; (8002330 <radio_begin+0xb0>)
 80022ce:	711a      	strb	r2, [r3, #4]
	radio.spreadingFactor = sx1278_default_config.spreadingFactor;
 80022d0:	4b1a      	ldr	r3, [pc, #104]	; (800233c <radio_begin+0xbc>)
 80022d2:	78da      	ldrb	r2, [r3, #3]
 80022d4:	4b16      	ldr	r3, [pc, #88]	; (8002330 <radio_begin+0xb0>)
 80022d6:	715a      	strb	r2, [r3, #5]
	radio.codingRate = sx1278_default_config.codingRate;
 80022d8:	4b18      	ldr	r3, [pc, #96]	; (800233c <radio_begin+0xbc>)
 80022da:	791a      	ldrb	r2, [r3, #4]
 80022dc:	4b14      	ldr	r3, [pc, #80]	; (8002330 <radio_begin+0xb0>)
 80022de:	719a      	strb	r2, [r3, #6]
	radio.bandWidth = sx1278_default_config.bandWidth;
 80022e0:	4b16      	ldr	r3, [pc, #88]	; (800233c <radio_begin+0xbc>)
 80022e2:	795a      	ldrb	r2, [r3, #5]
 80022e4:	4b12      	ldr	r3, [pc, #72]	; (8002330 <radio_begin+0xb0>)
 80022e6:	71da      	strb	r2, [r3, #7]
	radio.crc = sx1278_default_config.crc;
 80022e8:	4b14      	ldr	r3, [pc, #80]	; (800233c <radio_begin+0xbc>)
 80022ea:	799a      	ldrb	r2, [r3, #6]
 80022ec:	4b10      	ldr	r3, [pc, #64]	; (8002330 <radio_begin+0xb0>)
 80022ee:	721a      	strb	r2, [r3, #8]

	radio.useDio0IRQ = true;
 80022f0:	4b0f      	ldr	r3, [pc, #60]	; (8002330 <radio_begin+0xb0>)
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

	while (!SX1278_init(&radio))
 80022f8:	bf00      	nop
 80022fa:	480d      	ldr	r0, [pc, #52]	; (8002330 <radio_begin+0xb0>)
 80022fc:	f7fe ff9d 	bl	800123a <SX1278_init>
 8002300:	4603      	mov	r3, r0
 8002302:	f083 0301 	eor.w	r3, r3, #1
 8002306:	b2db      	uxtb	r3, r3
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00d      	beq.n	8002328 <radio_begin+0xa8>
	{
		print("SX1278 initialization failed\n");
 800230c:	480c      	ldr	r0, [pc, #48]	; (8002340 <radio_begin+0xc0>)
 800230e:	f7ff fe91 	bl	8002034 <print>

		HAL_GPIO_TogglePin(LEDC_GPIO_Port, LEDC_Pin);
 8002312:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002316:	480b      	ldr	r0, [pc, #44]	; (8002344 <radio_begin+0xc4>)
 8002318:	f001 fcd5 	bl	8003cc6 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 800231c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002320:	f000 fe36 	bl	8002f90 <HAL_Delay>

		return false;
 8002324:	2300      	movs	r3, #0
 8002326:	e000      	b.n	800232a <radio_begin+0xaa>
	}

	return true;
 8002328:	2301      	movs	r3, #1
}
 800232a:	4618      	mov	r0, r3
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	200006ac 	.word	0x200006ac
 8002334:	40020800 	.word	0x40020800
 8002338:	40020000 	.word	0x40020000
 800233c:	20000008 	.word	0x20000008
 8002340:	08011a44 	.word	0x08011a44
 8002344:	40020400 	.word	0x40020400

08002348 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800234c:	f000 fdae 	bl	8002eac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002350:	f000 f816 	bl	8002380 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002354:	f000 f954 	bl	8002600 <MX_GPIO_Init>
  MX_DMA_Init();
 8002358:	f000 f92a 	bl	80025b0 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 800235c:	f000 f8a8 	bl	80024b0 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8002360:	f008 fd74 	bl	800ae4c <MX_FATFS_Init>
  MX_I2C1_Init();
 8002364:	f000 f876 	bl	8002454 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8002368:	f00a fbbc 	bl	800cae4 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 800236c:	f000 f8c0 	bl	80024f0 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8002370:	f000 f8f4 	bl	800255c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  setup();
 8002374:	f7ff fe70 	bl	8002058 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	loop();
 8002378:	f7ff fe9c 	bl	80020b4 <loop>
 800237c:	e7fc      	b.n	8002378 <main+0x30>
	...

08002380 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b094      	sub	sp, #80	; 0x50
 8002384:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002386:	f107 0320 	add.w	r3, r7, #32
 800238a:	2230      	movs	r2, #48	; 0x30
 800238c:	2100      	movs	r1, #0
 800238e:	4618      	mov	r0, r3
 8002390:	f00b f925 	bl	800d5de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002394:	f107 030c 	add.w	r3, r7, #12
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	605a      	str	r2, [r3, #4]
 800239e:	609a      	str	r2, [r3, #8]
 80023a0:	60da      	str	r2, [r3, #12]
 80023a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80023a4:	2300      	movs	r3, #0
 80023a6:	60bb      	str	r3, [r7, #8]
 80023a8:	4b28      	ldr	r3, [pc, #160]	; (800244c <SystemClock_Config+0xcc>)
 80023aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ac:	4a27      	ldr	r2, [pc, #156]	; (800244c <SystemClock_Config+0xcc>)
 80023ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023b2:	6413      	str	r3, [r2, #64]	; 0x40
 80023b4:	4b25      	ldr	r3, [pc, #148]	; (800244c <SystemClock_Config+0xcc>)
 80023b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023bc:	60bb      	str	r3, [r7, #8]
 80023be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023c0:	2300      	movs	r3, #0
 80023c2:	607b      	str	r3, [r7, #4]
 80023c4:	4b22      	ldr	r3, [pc, #136]	; (8002450 <SystemClock_Config+0xd0>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a21      	ldr	r2, [pc, #132]	; (8002450 <SystemClock_Config+0xd0>)
 80023ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023ce:	6013      	str	r3, [r2, #0]
 80023d0:	4b1f      	ldr	r3, [pc, #124]	; (8002450 <SystemClock_Config+0xd0>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023d8:	607b      	str	r3, [r7, #4]
 80023da:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023dc:	2301      	movs	r3, #1
 80023de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023e6:	2302      	movs	r3, #2
 80023e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80023f0:	2306      	movs	r3, #6
 80023f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80023f4:	23a8      	movs	r3, #168	; 0xa8
 80023f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023f8:	2302      	movs	r3, #2
 80023fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80023fc:	2307      	movs	r3, #7
 80023fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002400:	f107 0320 	add.w	r3, r7, #32
 8002404:	4618      	mov	r0, r3
 8002406:	f003 fdcb 	bl	8005fa0 <HAL_RCC_OscConfig>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002410:	f000 fa0c 	bl	800282c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002414:	230f      	movs	r3, #15
 8002416:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002418:	2302      	movs	r3, #2
 800241a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800241c:	2300      	movs	r3, #0
 800241e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002420:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002424:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002426:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800242a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800242c:	f107 030c 	add.w	r3, r7, #12
 8002430:	2105      	movs	r1, #5
 8002432:	4618      	mov	r0, r3
 8002434:	f004 f824 	bl	8006480 <HAL_RCC_ClockConfig>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800243e:	f000 f9f5 	bl	800282c <Error_Handler>
  }
}
 8002442:	bf00      	nop
 8002444:	3750      	adds	r7, #80	; 0x50
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	40023800 	.word	0x40023800
 8002450:	40007000 	.word	0x40007000

08002454 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002458:	4b12      	ldr	r3, [pc, #72]	; (80024a4 <MX_I2C1_Init+0x50>)
 800245a:	4a13      	ldr	r2, [pc, #76]	; (80024a8 <MX_I2C1_Init+0x54>)
 800245c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800245e:	4b11      	ldr	r3, [pc, #68]	; (80024a4 <MX_I2C1_Init+0x50>)
 8002460:	4a12      	ldr	r2, [pc, #72]	; (80024ac <MX_I2C1_Init+0x58>)
 8002462:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002464:	4b0f      	ldr	r3, [pc, #60]	; (80024a4 <MX_I2C1_Init+0x50>)
 8002466:	2200      	movs	r2, #0
 8002468:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800246a:	4b0e      	ldr	r3, [pc, #56]	; (80024a4 <MX_I2C1_Init+0x50>)
 800246c:	2200      	movs	r2, #0
 800246e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002470:	4b0c      	ldr	r3, [pc, #48]	; (80024a4 <MX_I2C1_Init+0x50>)
 8002472:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002476:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002478:	4b0a      	ldr	r3, [pc, #40]	; (80024a4 <MX_I2C1_Init+0x50>)
 800247a:	2200      	movs	r2, #0
 800247c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800247e:	4b09      	ldr	r3, [pc, #36]	; (80024a4 <MX_I2C1_Init+0x50>)
 8002480:	2200      	movs	r2, #0
 8002482:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002484:	4b07      	ldr	r3, [pc, #28]	; (80024a4 <MX_I2C1_Init+0x50>)
 8002486:	2200      	movs	r2, #0
 8002488:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800248a:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <MX_I2C1_Init+0x50>)
 800248c:	2200      	movs	r2, #0
 800248e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002490:	4804      	ldr	r0, [pc, #16]	; (80024a4 <MX_I2C1_Init+0x50>)
 8002492:	f001 fc4b 	bl	8003d2c <HAL_I2C_Init>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800249c:	f000 f9c6 	bl	800282c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80024a0:	bf00      	nop
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	200009a8 	.word	0x200009a8
 80024a8:	40005400 	.word	0x40005400
 80024ac:	000186a0 	.word	0x000186a0

080024b0 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80024b4:	4b0c      	ldr	r3, [pc, #48]	; (80024e8 <MX_SDIO_SD_Init+0x38>)
 80024b6:	4a0d      	ldr	r2, [pc, #52]	; (80024ec <MX_SDIO_SD_Init+0x3c>)
 80024b8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80024ba:	4b0b      	ldr	r3, [pc, #44]	; (80024e8 <MX_SDIO_SD_Init+0x38>)
 80024bc:	2200      	movs	r2, #0
 80024be:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80024c0:	4b09      	ldr	r3, [pc, #36]	; (80024e8 <MX_SDIO_SD_Init+0x38>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80024c6:	4b08      	ldr	r3, [pc, #32]	; (80024e8 <MX_SDIO_SD_Init+0x38>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80024cc:	4b06      	ldr	r3, [pc, #24]	; (80024e8 <MX_SDIO_SD_Init+0x38>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80024d2:	4b05      	ldr	r3, [pc, #20]	; (80024e8 <MX_SDIO_SD_Init+0x38>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80024d8:	4b03      	ldr	r3, [pc, #12]	; (80024e8 <MX_SDIO_SD_Init+0x38>)
 80024da:	2200      	movs	r2, #0
 80024dc:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80024de:	bf00      	nop
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr
 80024e8:	20000a5c 	.word	0x20000a5c
 80024ec:	40012c00 	.word	0x40012c00

080024f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80024f4:	4b17      	ldr	r3, [pc, #92]	; (8002554 <MX_SPI1_Init+0x64>)
 80024f6:	4a18      	ldr	r2, [pc, #96]	; (8002558 <MX_SPI1_Init+0x68>)
 80024f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80024fa:	4b16      	ldr	r3, [pc, #88]	; (8002554 <MX_SPI1_Init+0x64>)
 80024fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002500:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002502:	4b14      	ldr	r3, [pc, #80]	; (8002554 <MX_SPI1_Init+0x64>)
 8002504:	2200      	movs	r2, #0
 8002506:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002508:	4b12      	ldr	r3, [pc, #72]	; (8002554 <MX_SPI1_Init+0x64>)
 800250a:	2200      	movs	r2, #0
 800250c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800250e:	4b11      	ldr	r3, [pc, #68]	; (8002554 <MX_SPI1_Init+0x64>)
 8002510:	2200      	movs	r2, #0
 8002512:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002514:	4b0f      	ldr	r3, [pc, #60]	; (8002554 <MX_SPI1_Init+0x64>)
 8002516:	2200      	movs	r2, #0
 8002518:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800251a:	4b0e      	ldr	r3, [pc, #56]	; (8002554 <MX_SPI1_Init+0x64>)
 800251c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002520:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002522:	4b0c      	ldr	r3, [pc, #48]	; (8002554 <MX_SPI1_Init+0x64>)
 8002524:	2200      	movs	r2, #0
 8002526:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002528:	4b0a      	ldr	r3, [pc, #40]	; (8002554 <MX_SPI1_Init+0x64>)
 800252a:	2200      	movs	r2, #0
 800252c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800252e:	4b09      	ldr	r3, [pc, #36]	; (8002554 <MX_SPI1_Init+0x64>)
 8002530:	2200      	movs	r2, #0
 8002532:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002534:	4b07      	ldr	r3, [pc, #28]	; (8002554 <MX_SPI1_Init+0x64>)
 8002536:	2200      	movs	r2, #0
 8002538:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800253a:	4b06      	ldr	r3, [pc, #24]	; (8002554 <MX_SPI1_Init+0x64>)
 800253c:	220a      	movs	r2, #10
 800253e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002540:	4804      	ldr	r0, [pc, #16]	; (8002554 <MX_SPI1_Init+0x64>)
 8002542:	f005 fc85 	bl	8007e50 <HAL_SPI_Init>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800254c:	f000 f96e 	bl	800282c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002550:	bf00      	nop
 8002552:	bd80      	pop	{r7, pc}
 8002554:	20000ae0 	.word	0x20000ae0
 8002558:	40013000 	.word	0x40013000

0800255c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002560:	4b11      	ldr	r3, [pc, #68]	; (80025a8 <MX_USART3_UART_Init+0x4c>)
 8002562:	4a12      	ldr	r2, [pc, #72]	; (80025ac <MX_USART3_UART_Init+0x50>)
 8002564:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002566:	4b10      	ldr	r3, [pc, #64]	; (80025a8 <MX_USART3_UART_Init+0x4c>)
 8002568:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800256c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800256e:	4b0e      	ldr	r3, [pc, #56]	; (80025a8 <MX_USART3_UART_Init+0x4c>)
 8002570:	2200      	movs	r2, #0
 8002572:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002574:	4b0c      	ldr	r3, [pc, #48]	; (80025a8 <MX_USART3_UART_Init+0x4c>)
 8002576:	2200      	movs	r2, #0
 8002578:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800257a:	4b0b      	ldr	r3, [pc, #44]	; (80025a8 <MX_USART3_UART_Init+0x4c>)
 800257c:	2200      	movs	r2, #0
 800257e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002580:	4b09      	ldr	r3, [pc, #36]	; (80025a8 <MX_USART3_UART_Init+0x4c>)
 8002582:	220c      	movs	r2, #12
 8002584:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002586:	4b08      	ldr	r3, [pc, #32]	; (80025a8 <MX_USART3_UART_Init+0x4c>)
 8002588:	2200      	movs	r2, #0
 800258a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800258c:	4b06      	ldr	r3, [pc, #24]	; (80025a8 <MX_USART3_UART_Init+0x4c>)
 800258e:	2200      	movs	r2, #0
 8002590:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002592:	4805      	ldr	r0, [pc, #20]	; (80025a8 <MX_USART3_UART_Init+0x4c>)
 8002594:	f006 f850 	bl	8008638 <HAL_UART_Init>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800259e:	f000 f945 	bl	800282c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80025a2:	bf00      	nop
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	20000968 	.word	0x20000968
 80025ac:	40004800 	.word	0x40004800

080025b0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80025b6:	2300      	movs	r3, #0
 80025b8:	607b      	str	r3, [r7, #4]
 80025ba:	4b10      	ldr	r3, [pc, #64]	; (80025fc <MX_DMA_Init+0x4c>)
 80025bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025be:	4a0f      	ldr	r2, [pc, #60]	; (80025fc <MX_DMA_Init+0x4c>)
 80025c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025c4:	6313      	str	r3, [r2, #48]	; 0x30
 80025c6:	4b0d      	ldr	r3, [pc, #52]	; (80025fc <MX_DMA_Init+0x4c>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ce:	607b      	str	r3, [r7, #4]
 80025d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80025d2:	2200      	movs	r2, #0
 80025d4:	2100      	movs	r1, #0
 80025d6:	203b      	movs	r0, #59	; 0x3b
 80025d8:	f000 fdd7 	bl	800318a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80025dc:	203b      	movs	r0, #59	; 0x3b
 80025de:	f000 fdf0 	bl	80031c2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80025e2:	2200      	movs	r2, #0
 80025e4:	2100      	movs	r1, #0
 80025e6:	2045      	movs	r0, #69	; 0x45
 80025e8:	f000 fdcf 	bl	800318a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80025ec:	2045      	movs	r0, #69	; 0x45
 80025ee:	f000 fde8 	bl	80031c2 <HAL_NVIC_EnableIRQ>

}
 80025f2:	bf00      	nop
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	40023800 	.word	0x40023800

08002600 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b08a      	sub	sp, #40	; 0x28
 8002604:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002606:	f107 0314 	add.w	r3, r7, #20
 800260a:	2200      	movs	r2, #0
 800260c:	601a      	str	r2, [r3, #0]
 800260e:	605a      	str	r2, [r3, #4]
 8002610:	609a      	str	r2, [r3, #8]
 8002612:	60da      	str	r2, [r3, #12]
 8002614:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	613b      	str	r3, [r7, #16]
 800261a:	4b6e      	ldr	r3, [pc, #440]	; (80027d4 <MX_GPIO_Init+0x1d4>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261e:	4a6d      	ldr	r2, [pc, #436]	; (80027d4 <MX_GPIO_Init+0x1d4>)
 8002620:	f043 0304 	orr.w	r3, r3, #4
 8002624:	6313      	str	r3, [r2, #48]	; 0x30
 8002626:	4b6b      	ldr	r3, [pc, #428]	; (80027d4 <MX_GPIO_Init+0x1d4>)
 8002628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262a:	f003 0304 	and.w	r3, r3, #4
 800262e:	613b      	str	r3, [r7, #16]
 8002630:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002632:	2300      	movs	r3, #0
 8002634:	60fb      	str	r3, [r7, #12]
 8002636:	4b67      	ldr	r3, [pc, #412]	; (80027d4 <MX_GPIO_Init+0x1d4>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263a:	4a66      	ldr	r2, [pc, #408]	; (80027d4 <MX_GPIO_Init+0x1d4>)
 800263c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002640:	6313      	str	r3, [r2, #48]	; 0x30
 8002642:	4b64      	ldr	r3, [pc, #400]	; (80027d4 <MX_GPIO_Init+0x1d4>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800264e:	2300      	movs	r3, #0
 8002650:	60bb      	str	r3, [r7, #8]
 8002652:	4b60      	ldr	r3, [pc, #384]	; (80027d4 <MX_GPIO_Init+0x1d4>)
 8002654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002656:	4a5f      	ldr	r2, [pc, #380]	; (80027d4 <MX_GPIO_Init+0x1d4>)
 8002658:	f043 0301 	orr.w	r3, r3, #1
 800265c:	6313      	str	r3, [r2, #48]	; 0x30
 800265e:	4b5d      	ldr	r3, [pc, #372]	; (80027d4 <MX_GPIO_Init+0x1d4>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	60bb      	str	r3, [r7, #8]
 8002668:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	607b      	str	r3, [r7, #4]
 800266e:	4b59      	ldr	r3, [pc, #356]	; (80027d4 <MX_GPIO_Init+0x1d4>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	4a58      	ldr	r2, [pc, #352]	; (80027d4 <MX_GPIO_Init+0x1d4>)
 8002674:	f043 0302 	orr.w	r3, r3, #2
 8002678:	6313      	str	r3, [r2, #48]	; 0x30
 800267a:	4b56      	ldr	r3, [pc, #344]	; (80027d4 <MX_GPIO_Init+0x1d4>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	607b      	str	r3, [r7, #4]
 8002684:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	603b      	str	r3, [r7, #0]
 800268a:	4b52      	ldr	r3, [pc, #328]	; (80027d4 <MX_GPIO_Init+0x1d4>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	4a51      	ldr	r2, [pc, #324]	; (80027d4 <MX_GPIO_Init+0x1d4>)
 8002690:	f043 0308 	orr.w	r3, r3, #8
 8002694:	6313      	str	r3, [r2, #48]	; 0x30
 8002696:	4b4f      	ldr	r3, [pc, #316]	; (80027d4 <MX_GPIO_Init+0x1d4>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269a:	f003 0308 	and.w	r3, r3, #8
 800269e:	603b      	str	r3, [r7, #0]
 80026a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, P1_Pin|P4_Pin|P2_Pin|P5_Pin 
 80026a2:	2200      	movs	r2, #0
 80026a4:	21ef      	movs	r1, #239	; 0xef
 80026a6:	484c      	ldr	r0, [pc, #304]	; (80027d8 <MX_GPIO_Init+0x1d8>)
 80026a8:	f001 faf4 	bl	8003c94 <HAL_GPIO_WritePin>
                          |LR_RESET_Pin|LEDB_Pin|LEDA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PH_L_Pin|EN_L_Pin|PH_R_Pin|EN_R_Pin 
 80026ac:	2200      	movs	r2, #0
 80026ae:	211f      	movs	r1, #31
 80026b0:	484a      	ldr	r0, [pc, #296]	; (80027dc <MX_GPIO_Init+0x1dc>)
 80026b2:	f001 faef 	bl	8003c94 <HAL_GPIO_WritePin>
                          |P7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, P6_Pin|P3_Pin|LEDD_Pin|LEDC_Pin 
 80026b6:	2200      	movs	r2, #0
 80026b8:	f243 2103 	movw	r1, #12803	; 0x3203
 80026bc:	4848      	ldr	r0, [pc, #288]	; (80027e0 <MX_GPIO_Init+0x1e0>)
 80026be:	f001 fae9 	bl	8003c94 <HAL_GPIO_WritePin>
                          |LR_NSS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : P1_Pin P4_Pin P2_Pin P5_Pin 
                           LR_RESET_Pin */
  GPIO_InitStruct.Pin = P1_Pin|P4_Pin|P2_Pin|P5_Pin 
 80026c2:	232f      	movs	r3, #47	; 0x2f
 80026c4:	617b      	str	r3, [r7, #20]
                          |LR_RESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026c6:	2301      	movs	r3, #1
 80026c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ca:	2300      	movs	r3, #0
 80026cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ce:	2300      	movs	r3, #0
 80026d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026d2:	f107 0314 	add.w	r3, r7, #20
 80026d6:	4619      	mov	r1, r3
 80026d8:	483f      	ldr	r0, [pc, #252]	; (80027d8 <MX_GPIO_Init+0x1d8>)
 80026da:	f001 f929 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH_L_Pin EN_L_Pin PH_R_Pin EN_R_Pin */
  GPIO_InitStruct.Pin = PH_L_Pin|EN_L_Pin|PH_R_Pin|EN_R_Pin;
 80026de:	230f      	movs	r3, #15
 80026e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026e2:	2301      	movs	r3, #1
 80026e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80026e6:	2302      	movs	r3, #2
 80026e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ea:	2300      	movs	r3, #0
 80026ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ee:	f107 0314 	add.w	r3, r7, #20
 80026f2:	4619      	mov	r1, r3
 80026f4:	4839      	ldr	r0, [pc, #228]	; (80027dc <MX_GPIO_Init+0x1dc>)
 80026f6:	f001 f91b 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pin : P7_Pin */
  GPIO_InitStruct.Pin = P7_Pin;
 80026fa:	2310      	movs	r3, #16
 80026fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026fe:	2301      	movs	r3, #1
 8002700:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002702:	2300      	movs	r3, #0
 8002704:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002706:	2300      	movs	r3, #0
 8002708:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(P7_GPIO_Port, &GPIO_InitStruct);
 800270a:	f107 0314 	add.w	r3, r7, #20
 800270e:	4619      	mov	r1, r3
 8002710:	4832      	ldr	r0, [pc, #200]	; (80027dc <MX_GPIO_Init+0x1dc>)
 8002712:	f001 f90d 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pin : LR_DIO0_Pin */
  GPIO_InitStruct.Pin = LR_DIO0_Pin;
 8002716:	2340      	movs	r3, #64	; 0x40
 8002718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800271a:	4b32      	ldr	r3, [pc, #200]	; (80027e4 <MX_GPIO_Init+0x1e4>)
 800271c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800271e:	2302      	movs	r3, #2
 8002720:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LR_DIO0_GPIO_Port, &GPIO_InitStruct);
 8002722:	f107 0314 	add.w	r3, r7, #20
 8002726:	4619      	mov	r1, r3
 8002728:	482c      	ldr	r0, [pc, #176]	; (80027dc <MX_GPIO_Init+0x1dc>)
 800272a:	f001 f901 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pins : P6_Pin P3_Pin LR_NSS_Pin */
  GPIO_InitStruct.Pin = P6_Pin|P3_Pin|LR_NSS_Pin;
 800272e:	f240 2303 	movw	r3, #515	; 0x203
 8002732:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002734:	2301      	movs	r3, #1
 8002736:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002738:	2300      	movs	r3, #0
 800273a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800273c:	2300      	movs	r3, #0
 800273e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002740:	f107 0314 	add.w	r3, r7, #20
 8002744:	4619      	mov	r1, r3
 8002746:	4826      	ldr	r0, [pc, #152]	; (80027e0 <MX_GPIO_Init+0x1e0>)
 8002748:	f001 f8f2 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDD_Pin LEDC_Pin */
  GPIO_InitStruct.Pin = LEDD_Pin|LEDC_Pin;
 800274c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002750:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002752:	2301      	movs	r3, #1
 8002754:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002756:	2302      	movs	r3, #2
 8002758:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800275a:	2300      	movs	r3, #0
 800275c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800275e:	f107 0314 	add.w	r3, r7, #20
 8002762:	4619      	mov	r1, r3
 8002764:	481e      	ldr	r0, [pc, #120]	; (80027e0 <MX_GPIO_Init+0x1e0>)
 8002766:	f001 f8e3 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDB_Pin LEDA_Pin */
  GPIO_InitStruct.Pin = LEDB_Pin|LEDA_Pin;
 800276a:	23c0      	movs	r3, #192	; 0xc0
 800276c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800276e:	2301      	movs	r3, #1
 8002770:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002772:	2302      	movs	r3, #2
 8002774:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002776:	2300      	movs	r3, #0
 8002778:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800277a:	f107 0314 	add.w	r3, r7, #20
 800277e:	4619      	mov	r1, r3
 8002780:	4815      	ldr	r0, [pc, #84]	; (80027d8 <MX_GPIO_Init+0x1d8>)
 8002782:	f001 f8d5 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_SW_Pin */
  GPIO_InitStruct.Pin = SDIO_SW_Pin;
 8002786:	f44f 7380 	mov.w	r3, #256	; 0x100
 800278a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800278c:	2300      	movs	r3, #0
 800278e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002790:	2300      	movs	r3, #0
 8002792:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDIO_SW_GPIO_Port, &GPIO_InitStruct);
 8002794:	f107 0314 	add.w	r3, r7, #20
 8002798:	4619      	mov	r1, r3
 800279a:	4810      	ldr	r0, [pc, #64]	; (80027dc <MX_GPIO_Init+0x1dc>)
 800279c:	f001 f8c8 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_USR_Pin */
  GPIO_InitStruct.Pin = BTN_USR_Pin;
 80027a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027a6:	2300      	movs	r3, #0
 80027a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027aa:	2301      	movs	r3, #1
 80027ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_USR_GPIO_Port, &GPIO_InitStruct);
 80027ae:	f107 0314 	add.w	r3, r7, #20
 80027b2:	4619      	mov	r1, r3
 80027b4:	4809      	ldr	r0, [pc, #36]	; (80027dc <MX_GPIO_Init+0x1dc>)
 80027b6:	f001 f8bb 	bl	8003930 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80027ba:	2200      	movs	r2, #0
 80027bc:	2100      	movs	r1, #0
 80027be:	2017      	movs	r0, #23
 80027c0:	f000 fce3 	bl	800318a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80027c4:	2017      	movs	r0, #23
 80027c6:	f000 fcfc 	bl	80031c2 <HAL_NVIC_EnableIRQ>

}
 80027ca:	bf00      	nop
 80027cc:	3728      	adds	r7, #40	; 0x28
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	40023800 	.word	0x40023800
 80027d8:	40020800 	.word	0x40020800
 80027dc:	40020000 	.word	0x40020000
 80027e0:	40020400 	.word	0x40020400
 80027e4:	10110000 	.word	0x10110000

080027e8 <Get_I2C1_Instance>:

/* USER CODE BEGIN 4 */

I2C_HandleTypeDef* Get_I2C1_Instance()
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
	return &hi2c1;
 80027ec:	4b02      	ldr	r3, [pc, #8]	; (80027f8 <Get_I2C1_Instance+0x10>)
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr
 80027f8:	200009a8 	.word	0x200009a8

080027fc <Get_SPI1_Instance>:

SPI_HandleTypeDef* Get_SPI1_Instance()
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
	return &hspi1;
 8002800:	4b02      	ldr	r3, [pc, #8]	; (800280c <Get_SPI1_Instance+0x10>)
}
 8002802:	4618      	mov	r0, r3
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	20000ae0 	.word	0x20000ae0

08002810 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	4603      	mov	r3, r0
 8002818:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == LR_DIO0_Pin)
 800281a:	88fb      	ldrh	r3, [r7, #6]
 800281c:	2b40      	cmp	r3, #64	; 0x40
 800281e:	d101      	bne.n	8002824 <HAL_GPIO_EXTI_Callback+0x14>
	{
		dio0_IRQ();
 8002820:	f7ff fd22 	bl	8002268 <dio0_IRQ>
	}
}
 8002824:	bf00      	nop
 8002826:	3708      	adds	r7, #8
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002830:	bf00      	nop
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
	...

0800283c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002842:	2300      	movs	r3, #0
 8002844:	607b      	str	r3, [r7, #4]
 8002846:	4b10      	ldr	r3, [pc, #64]	; (8002888 <HAL_MspInit+0x4c>)
 8002848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284a:	4a0f      	ldr	r2, [pc, #60]	; (8002888 <HAL_MspInit+0x4c>)
 800284c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002850:	6453      	str	r3, [r2, #68]	; 0x44
 8002852:	4b0d      	ldr	r3, [pc, #52]	; (8002888 <HAL_MspInit+0x4c>)
 8002854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002856:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800285a:	607b      	str	r3, [r7, #4]
 800285c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800285e:	2300      	movs	r3, #0
 8002860:	603b      	str	r3, [r7, #0]
 8002862:	4b09      	ldr	r3, [pc, #36]	; (8002888 <HAL_MspInit+0x4c>)
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002866:	4a08      	ldr	r2, [pc, #32]	; (8002888 <HAL_MspInit+0x4c>)
 8002868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800286c:	6413      	str	r3, [r2, #64]	; 0x40
 800286e:	4b06      	ldr	r3, [pc, #24]	; (8002888 <HAL_MspInit+0x4c>)
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002876:	603b      	str	r3, [r7, #0]
 8002878:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	40023800 	.word	0x40023800

0800288c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b08a      	sub	sp, #40	; 0x28
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002894:	f107 0314 	add.w	r3, r7, #20
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	605a      	str	r2, [r3, #4]
 800289e:	609a      	str	r2, [r3, #8]
 80028a0:	60da      	str	r2, [r3, #12]
 80028a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a19      	ldr	r2, [pc, #100]	; (8002910 <HAL_I2C_MspInit+0x84>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d12b      	bne.n	8002906 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ae:	2300      	movs	r3, #0
 80028b0:	613b      	str	r3, [r7, #16]
 80028b2:	4b18      	ldr	r3, [pc, #96]	; (8002914 <HAL_I2C_MspInit+0x88>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b6:	4a17      	ldr	r2, [pc, #92]	; (8002914 <HAL_I2C_MspInit+0x88>)
 80028b8:	f043 0302 	orr.w	r3, r3, #2
 80028bc:	6313      	str	r3, [r2, #48]	; 0x30
 80028be:	4b15      	ldr	r3, [pc, #84]	; (8002914 <HAL_I2C_MspInit+0x88>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	613b      	str	r3, [r7, #16]
 80028c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 80028ca:	23c0      	movs	r3, #192	; 0xc0
 80028cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028ce:	2312      	movs	r3, #18
 80028d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d2:	2300      	movs	r3, #0
 80028d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028d6:	2303      	movs	r3, #3
 80028d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80028da:	2304      	movs	r3, #4
 80028dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028de:	f107 0314 	add.w	r3, r7, #20
 80028e2:	4619      	mov	r1, r3
 80028e4:	480c      	ldr	r0, [pc, #48]	; (8002918 <HAL_I2C_MspInit+0x8c>)
 80028e6:	f001 f823 	bl	8003930 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028ea:	2300      	movs	r3, #0
 80028ec:	60fb      	str	r3, [r7, #12]
 80028ee:	4b09      	ldr	r3, [pc, #36]	; (8002914 <HAL_I2C_MspInit+0x88>)
 80028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f2:	4a08      	ldr	r2, [pc, #32]	; (8002914 <HAL_I2C_MspInit+0x88>)
 80028f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80028f8:	6413      	str	r3, [r2, #64]	; 0x40
 80028fa:	4b06      	ldr	r3, [pc, #24]	; (8002914 <HAL_I2C_MspInit+0x88>)
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002902:	60fb      	str	r3, [r7, #12]
 8002904:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002906:	bf00      	nop
 8002908:	3728      	adds	r7, #40	; 0x28
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	40005400 	.word	0x40005400
 8002914:	40023800 	.word	0x40023800
 8002918:	40020400 	.word	0x40020400

0800291c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b08a      	sub	sp, #40	; 0x28
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002924:	f107 0314 	add.w	r3, r7, #20
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	605a      	str	r2, [r3, #4]
 800292e:	609a      	str	r2, [r3, #8]
 8002930:	60da      	str	r2, [r3, #12]
 8002932:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a70      	ldr	r2, [pc, #448]	; (8002afc <HAL_SD_MspInit+0x1e0>)
 800293a:	4293      	cmp	r3, r2
 800293c:	f040 80da 	bne.w	8002af4 <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8002940:	2300      	movs	r3, #0
 8002942:	613b      	str	r3, [r7, #16]
 8002944:	4b6e      	ldr	r3, [pc, #440]	; (8002b00 <HAL_SD_MspInit+0x1e4>)
 8002946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002948:	4a6d      	ldr	r2, [pc, #436]	; (8002b00 <HAL_SD_MspInit+0x1e4>)
 800294a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800294e:	6453      	str	r3, [r2, #68]	; 0x44
 8002950:	4b6b      	ldr	r3, [pc, #428]	; (8002b00 <HAL_SD_MspInit+0x1e4>)
 8002952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002954:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002958:	613b      	str	r3, [r7, #16]
 800295a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800295c:	2300      	movs	r3, #0
 800295e:	60fb      	str	r3, [r7, #12]
 8002960:	4b67      	ldr	r3, [pc, #412]	; (8002b00 <HAL_SD_MspInit+0x1e4>)
 8002962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002964:	4a66      	ldr	r2, [pc, #408]	; (8002b00 <HAL_SD_MspInit+0x1e4>)
 8002966:	f043 0304 	orr.w	r3, r3, #4
 800296a:	6313      	str	r3, [r2, #48]	; 0x30
 800296c:	4b64      	ldr	r3, [pc, #400]	; (8002b00 <HAL_SD_MspInit+0x1e4>)
 800296e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002970:	f003 0304 	and.w	r3, r3, #4
 8002974:	60fb      	str	r3, [r7, #12]
 8002976:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002978:	2300      	movs	r3, #0
 800297a:	60bb      	str	r3, [r7, #8]
 800297c:	4b60      	ldr	r3, [pc, #384]	; (8002b00 <HAL_SD_MspInit+0x1e4>)
 800297e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002980:	4a5f      	ldr	r2, [pc, #380]	; (8002b00 <HAL_SD_MspInit+0x1e4>)
 8002982:	f043 0308 	orr.w	r3, r3, #8
 8002986:	6313      	str	r3, [r2, #48]	; 0x30
 8002988:	4b5d      	ldr	r3, [pc, #372]	; (8002b00 <HAL_SD_MspInit+0x1e4>)
 800298a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298c:	f003 0308 	and.w	r3, r3, #8
 8002990:	60bb      	str	r3, [r7, #8]
 8002992:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002994:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299a:	2302      	movs	r3, #2
 800299c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800299e:	2301      	movs	r3, #1
 80029a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a2:	2303      	movs	r3, #3
 80029a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80029a6:	230c      	movs	r3, #12
 80029a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029aa:	f107 0314 	add.w	r3, r7, #20
 80029ae:	4619      	mov	r1, r3
 80029b0:	4854      	ldr	r0, [pc, #336]	; (8002b04 <HAL_SD_MspInit+0x1e8>)
 80029b2:	f000 ffbd 	bl	8003930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80029b6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80029ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029bc:	2302      	movs	r3, #2
 80029be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c0:	2300      	movs	r3, #0
 80029c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029c4:	2303      	movs	r3, #3
 80029c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80029c8:	230c      	movs	r3, #12
 80029ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029cc:	f107 0314 	add.w	r3, r7, #20
 80029d0:	4619      	mov	r1, r3
 80029d2:	484c      	ldr	r0, [pc, #304]	; (8002b04 <HAL_SD_MspInit+0x1e8>)
 80029d4:	f000 ffac 	bl	8003930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80029d8:	2304      	movs	r3, #4
 80029da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029dc:	2302      	movs	r3, #2
 80029de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029e0:	2301      	movs	r3, #1
 80029e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029e4:	2303      	movs	r3, #3
 80029e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80029e8:	230c      	movs	r3, #12
 80029ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029ec:	f107 0314 	add.w	r3, r7, #20
 80029f0:	4619      	mov	r1, r3
 80029f2:	4845      	ldr	r0, [pc, #276]	; (8002b08 <HAL_SD_MspInit+0x1ec>)
 80029f4:	f000 ff9c 	bl	8003930 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80029f8:	4b44      	ldr	r3, [pc, #272]	; (8002b0c <HAL_SD_MspInit+0x1f0>)
 80029fa:	4a45      	ldr	r2, [pc, #276]	; (8002b10 <HAL_SD_MspInit+0x1f4>)
 80029fc:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80029fe:	4b43      	ldr	r3, [pc, #268]	; (8002b0c <HAL_SD_MspInit+0x1f0>)
 8002a00:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a04:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a06:	4b41      	ldr	r3, [pc, #260]	; (8002b0c <HAL_SD_MspInit+0x1f0>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a0c:	4b3f      	ldr	r3, [pc, #252]	; (8002b0c <HAL_SD_MspInit+0x1f0>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a12:	4b3e      	ldr	r3, [pc, #248]	; (8002b0c <HAL_SD_MspInit+0x1f0>)
 8002a14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a18:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002a1a:	4b3c      	ldr	r3, [pc, #240]	; (8002b0c <HAL_SD_MspInit+0x1f0>)
 8002a1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a20:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002a22:	4b3a      	ldr	r3, [pc, #232]	; (8002b0c <HAL_SD_MspInit+0x1f0>)
 8002a24:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a28:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8002a2a:	4b38      	ldr	r3, [pc, #224]	; (8002b0c <HAL_SD_MspInit+0x1f0>)
 8002a2c:	2220      	movs	r2, #32
 8002a2e:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a30:	4b36      	ldr	r3, [pc, #216]	; (8002b0c <HAL_SD_MspInit+0x1f0>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002a36:	4b35      	ldr	r3, [pc, #212]	; (8002b0c <HAL_SD_MspInit+0x1f0>)
 8002a38:	2204      	movs	r2, #4
 8002a3a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002a3c:	4b33      	ldr	r3, [pc, #204]	; (8002b0c <HAL_SD_MspInit+0x1f0>)
 8002a3e:	2203      	movs	r2, #3
 8002a40:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8002a42:	4b32      	ldr	r3, [pc, #200]	; (8002b0c <HAL_SD_MspInit+0x1f0>)
 8002a44:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002a48:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002a4a:	4b30      	ldr	r3, [pc, #192]	; (8002b0c <HAL_SD_MspInit+0x1f0>)
 8002a4c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002a50:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8002a52:	482e      	ldr	r0, [pc, #184]	; (8002b0c <HAL_SD_MspInit+0x1f0>)
 8002a54:	f000 fbd0 	bl	80031f8 <HAL_DMA_Init>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 8002a5e:	f7ff fee5 	bl	800282c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a29      	ldr	r2, [pc, #164]	; (8002b0c <HAL_SD_MspInit+0x1f0>)
 8002a66:	641a      	str	r2, [r3, #64]	; 0x40
 8002a68:	4a28      	ldr	r2, [pc, #160]	; (8002b0c <HAL_SD_MspInit+0x1f0>)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8002a6e:	4b29      	ldr	r3, [pc, #164]	; (8002b14 <HAL_SD_MspInit+0x1f8>)
 8002a70:	4a29      	ldr	r2, [pc, #164]	; (8002b18 <HAL_SD_MspInit+0x1fc>)
 8002a72:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8002a74:	4b27      	ldr	r3, [pc, #156]	; (8002b14 <HAL_SD_MspInit+0x1f8>)
 8002a76:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a7a:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a7c:	4b25      	ldr	r3, [pc, #148]	; (8002b14 <HAL_SD_MspInit+0x1f8>)
 8002a7e:	2240      	movs	r2, #64	; 0x40
 8002a80:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a82:	4b24      	ldr	r3, [pc, #144]	; (8002b14 <HAL_SD_MspInit+0x1f8>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a88:	4b22      	ldr	r3, [pc, #136]	; (8002b14 <HAL_SD_MspInit+0x1f8>)
 8002a8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a8e:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002a90:	4b20      	ldr	r3, [pc, #128]	; (8002b14 <HAL_SD_MspInit+0x1f8>)
 8002a92:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a96:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002a98:	4b1e      	ldr	r3, [pc, #120]	; (8002b14 <HAL_SD_MspInit+0x1f8>)
 8002a9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a9e:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8002aa0:	4b1c      	ldr	r3, [pc, #112]	; (8002b14 <HAL_SD_MspInit+0x1f8>)
 8002aa2:	2220      	movs	r2, #32
 8002aa4:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002aa6:	4b1b      	ldr	r3, [pc, #108]	; (8002b14 <HAL_SD_MspInit+0x1f8>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002aac:	4b19      	ldr	r3, [pc, #100]	; (8002b14 <HAL_SD_MspInit+0x1f8>)
 8002aae:	2204      	movs	r2, #4
 8002ab0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002ab2:	4b18      	ldr	r3, [pc, #96]	; (8002b14 <HAL_SD_MspInit+0x1f8>)
 8002ab4:	2203      	movs	r2, #3
 8002ab6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8002ab8:	4b16      	ldr	r3, [pc, #88]	; (8002b14 <HAL_SD_MspInit+0x1f8>)
 8002aba:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002abe:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002ac0:	4b14      	ldr	r3, [pc, #80]	; (8002b14 <HAL_SD_MspInit+0x1f8>)
 8002ac2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002ac6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8002ac8:	4812      	ldr	r0, [pc, #72]	; (8002b14 <HAL_SD_MspInit+0x1f8>)
 8002aca:	f000 fb95 	bl	80031f8 <HAL_DMA_Init>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 8002ad4:	f7ff feaa 	bl	800282c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a0e      	ldr	r2, [pc, #56]	; (8002b14 <HAL_SD_MspInit+0x1f8>)
 8002adc:	63da      	str	r2, [r3, #60]	; 0x3c
 8002ade:	4a0d      	ldr	r2, [pc, #52]	; (8002b14 <HAL_SD_MspInit+0x1f8>)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	2100      	movs	r1, #0
 8002ae8:	2031      	movs	r0, #49	; 0x31
 8002aea:	f000 fb4e 	bl	800318a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8002aee:	2031      	movs	r0, #49	; 0x31
 8002af0:	f000 fb67 	bl	80031c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8002af4:	bf00      	nop
 8002af6:	3728      	adds	r7, #40	; 0x28
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	40012c00 	.word	0x40012c00
 8002b00:	40023800 	.word	0x40023800
 8002b04:	40020800 	.word	0x40020800
 8002b08:	40020c00 	.word	0x40020c00
 8002b0c:	20000908 	.word	0x20000908
 8002b10:	40026458 	.word	0x40026458
 8002b14:	200009fc 	.word	0x200009fc
 8002b18:	400264a0 	.word	0x400264a0

08002b1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b08a      	sub	sp, #40	; 0x28
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b24:	f107 0314 	add.w	r3, r7, #20
 8002b28:	2200      	movs	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]
 8002b2c:	605a      	str	r2, [r3, #4]
 8002b2e:	609a      	str	r2, [r3, #8]
 8002b30:	60da      	str	r2, [r3, #12]
 8002b32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a19      	ldr	r2, [pc, #100]	; (8002ba0 <HAL_SPI_MspInit+0x84>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d12b      	bne.n	8002b96 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b3e:	2300      	movs	r3, #0
 8002b40:	613b      	str	r3, [r7, #16]
 8002b42:	4b18      	ldr	r3, [pc, #96]	; (8002ba4 <HAL_SPI_MspInit+0x88>)
 8002b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b46:	4a17      	ldr	r2, [pc, #92]	; (8002ba4 <HAL_SPI_MspInit+0x88>)
 8002b48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b4e:	4b15      	ldr	r3, [pc, #84]	; (8002ba4 <HAL_SPI_MspInit+0x88>)
 8002b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b56:	613b      	str	r3, [r7, #16]
 8002b58:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	60fb      	str	r3, [r7, #12]
 8002b5e:	4b11      	ldr	r3, [pc, #68]	; (8002ba4 <HAL_SPI_MspInit+0x88>)
 8002b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b62:	4a10      	ldr	r2, [pc, #64]	; (8002ba4 <HAL_SPI_MspInit+0x88>)
 8002b64:	f043 0302 	orr.w	r3, r3, #2
 8002b68:	6313      	str	r3, [r2, #48]	; 0x30
 8002b6a:	4b0e      	ldr	r3, [pc, #56]	; (8002ba4 <HAL_SPI_MspInit+0x88>)
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	60fb      	str	r3, [r7, #12]
 8002b74:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = LR_SCK_Pin|LR_MISO_Pin|LR_MOSI_Pin;
 8002b76:	2338      	movs	r3, #56	; 0x38
 8002b78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b82:	2303      	movs	r3, #3
 8002b84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b86:	2305      	movs	r3, #5
 8002b88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b8a:	f107 0314 	add.w	r3, r7, #20
 8002b8e:	4619      	mov	r1, r3
 8002b90:	4805      	ldr	r0, [pc, #20]	; (8002ba8 <HAL_SPI_MspInit+0x8c>)
 8002b92:	f000 fecd 	bl	8003930 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002b96:	bf00      	nop
 8002b98:	3728      	adds	r7, #40	; 0x28
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	40013000 	.word	0x40013000
 8002ba4:	40023800 	.word	0x40023800
 8002ba8:	40020400 	.word	0x40020400

08002bac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b08a      	sub	sp, #40	; 0x28
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb4:	f107 0314 	add.w	r3, r7, #20
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	605a      	str	r2, [r3, #4]
 8002bbe:	609a      	str	r2, [r3, #8]
 8002bc0:	60da      	str	r2, [r3, #12]
 8002bc2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a19      	ldr	r2, [pc, #100]	; (8002c30 <HAL_UART_MspInit+0x84>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d12c      	bne.n	8002c28 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002bce:	2300      	movs	r3, #0
 8002bd0:	613b      	str	r3, [r7, #16]
 8002bd2:	4b18      	ldr	r3, [pc, #96]	; (8002c34 <HAL_UART_MspInit+0x88>)
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd6:	4a17      	ldr	r2, [pc, #92]	; (8002c34 <HAL_UART_MspInit+0x88>)
 8002bd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bdc:	6413      	str	r3, [r2, #64]	; 0x40
 8002bde:	4b15      	ldr	r3, [pc, #84]	; (8002c34 <HAL_UART_MspInit+0x88>)
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002be6:	613b      	str	r3, [r7, #16]
 8002be8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bea:	2300      	movs	r3, #0
 8002bec:	60fb      	str	r3, [r7, #12]
 8002bee:	4b11      	ldr	r3, [pc, #68]	; (8002c34 <HAL_UART_MspInit+0x88>)
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf2:	4a10      	ldr	r2, [pc, #64]	; (8002c34 <HAL_UART_MspInit+0x88>)
 8002bf4:	f043 0302 	orr.w	r3, r3, #2
 8002bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bfa:	4b0e      	ldr	r3, [pc, #56]	; (8002c34 <HAL_UART_MspInit+0x88>)
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	60fb      	str	r3, [r7, #12]
 8002c04:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPS_RX_Pin|GPS_TX_Pin;
 8002c06:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002c0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c10:	2300      	movs	r3, #0
 8002c12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c14:	2303      	movs	r3, #3
 8002c16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002c18:	2307      	movs	r3, #7
 8002c1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c1c:	f107 0314 	add.w	r3, r7, #20
 8002c20:	4619      	mov	r1, r3
 8002c22:	4805      	ldr	r0, [pc, #20]	; (8002c38 <HAL_UART_MspInit+0x8c>)
 8002c24:	f000 fe84 	bl	8003930 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002c28:	bf00      	nop
 8002c2a:	3728      	adds	r7, #40	; 0x28
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	40004800 	.word	0x40004800
 8002c34:	40023800 	.word	0x40023800
 8002c38:	40020400 	.word	0x40020400

08002c3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002c40:	bf00      	nop
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c4e:	e7fe      	b.n	8002c4e <HardFault_Handler+0x4>

08002c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c54:	e7fe      	b.n	8002c54 <MemManage_Handler+0x4>

08002c56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c56:	b480      	push	{r7}
 8002c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c5a:	e7fe      	b.n	8002c5a <BusFault_Handler+0x4>

08002c5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c60:	e7fe      	b.n	8002c60 <UsageFault_Handler+0x4>

08002c62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c62:	b480      	push	{r7}
 8002c64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c66:	bf00      	nop
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c74:	bf00      	nop
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr

08002c7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c82:	bf00      	nop
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c90:	f000 f95e 	bl	8002f50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c94:	bf00      	nop
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002c9c:	2040      	movs	r0, #64	; 0x40
 8002c9e:	f001 f82d 	bl	8003cfc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002ca2:	bf00      	nop
 8002ca4:	bd80      	pop	{r7, pc}
	...

08002ca8 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8002cac:	4802      	ldr	r0, [pc, #8]	; (8002cb8 <SDIO_IRQHandler+0x10>)
 8002cae:	f004 f81d 	bl	8006cec <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8002cb2:	bf00      	nop
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	20000a5c 	.word	0x20000a5c

08002cbc <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8002cc0:	4802      	ldr	r0, [pc, #8]	; (8002ccc <DMA2_Stream3_IRQHandler+0x10>)
 8002cc2:	f000 fbc1 	bl	8003448 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002cc6:	bf00      	nop
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	20000908 	.word	0x20000908

08002cd0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002cd4:	4802      	ldr	r0, [pc, #8]	; (8002ce0 <OTG_FS_IRQHandler+0x10>)
 8002cd6:	f002 f928 	bl	8004f2a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002cda:	bf00      	nop
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	20002440 	.word	0x20002440

08002ce4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8002ce8:	4802      	ldr	r0, [pc, #8]	; (8002cf4 <DMA2_Stream6_IRQHandler+0x10>)
 8002cea:	f000 fbad 	bl	8003448 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002cee:	bf00      	nop
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	200009fc 	.word	0x200009fc

08002cf8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b086      	sub	sp, #24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d04:	2300      	movs	r3, #0
 8002d06:	617b      	str	r3, [r7, #20]
 8002d08:	e00a      	b.n	8002d20 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002d0a:	f3af 8000 	nop.w
 8002d0e:	4601      	mov	r1, r0
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	1c5a      	adds	r2, r3, #1
 8002d14:	60ba      	str	r2, [r7, #8]
 8002d16:	b2ca      	uxtb	r2, r1
 8002d18:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	617b      	str	r3, [r7, #20]
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	dbf0      	blt.n	8002d0a <_read+0x12>
	}

return len;
 8002d28:	687b      	ldr	r3, [r7, #4]
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3718      	adds	r7, #24
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b086      	sub	sp, #24
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	60f8      	str	r0, [r7, #12]
 8002d3a:	60b9      	str	r1, [r7, #8]
 8002d3c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d3e:	2300      	movs	r3, #0
 8002d40:	617b      	str	r3, [r7, #20]
 8002d42:	e009      	b.n	8002d58 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	1c5a      	adds	r2, r3, #1
 8002d48:	60ba      	str	r2, [r7, #8]
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	3301      	adds	r3, #1
 8002d56:	617b      	str	r3, [r7, #20]
 8002d58:	697a      	ldr	r2, [r7, #20]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	dbf1      	blt.n	8002d44 <_write+0x12>
	}
	return len;
 8002d60:	687b      	ldr	r3, [r7, #4]
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3718      	adds	r7, #24
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <_close>:

int _close(int file)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b083      	sub	sp, #12
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
	return -1;
 8002d72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	370c      	adds	r7, #12
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr

08002d82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d82:	b480      	push	{r7}
 8002d84:	b083      	sub	sp, #12
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
 8002d8a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d92:	605a      	str	r2, [r3, #4]
	return 0;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr

08002da2 <_isatty>:

int _isatty(int file)
{
 8002da2:	b480      	push	{r7}
 8002da4:	b083      	sub	sp, #12
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
	return 1;
 8002daa:	2301      	movs	r3, #1
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
	return 0;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3714      	adds	r7, #20
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
	...

08002dd4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002ddc:	4b11      	ldr	r3, [pc, #68]	; (8002e24 <_sbrk+0x50>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d102      	bne.n	8002dea <_sbrk+0x16>
		heap_end = &end;
 8002de4:	4b0f      	ldr	r3, [pc, #60]	; (8002e24 <_sbrk+0x50>)
 8002de6:	4a10      	ldr	r2, [pc, #64]	; (8002e28 <_sbrk+0x54>)
 8002de8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002dea:	4b0e      	ldr	r3, [pc, #56]	; (8002e24 <_sbrk+0x50>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002df0:	4b0c      	ldr	r3, [pc, #48]	; (8002e24 <_sbrk+0x50>)
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4413      	add	r3, r2
 8002df8:	466a      	mov	r2, sp
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d907      	bls.n	8002e0e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002dfe:	f00a fba9 	bl	800d554 <__errno>
 8002e02:	4602      	mov	r2, r0
 8002e04:	230c      	movs	r3, #12
 8002e06:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002e08:	f04f 33ff 	mov.w	r3, #4294967295
 8002e0c:	e006      	b.n	8002e1c <_sbrk+0x48>
	}

	heap_end += incr;
 8002e0e:	4b05      	ldr	r3, [pc, #20]	; (8002e24 <_sbrk+0x50>)
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4413      	add	r3, r2
 8002e16:	4a03      	ldr	r2, [pc, #12]	; (8002e24 <_sbrk+0x50>)
 8002e18:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3710      	adds	r7, #16
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	20000478 	.word	0x20000478
 8002e28:	20002850 	.word	0x20002850

08002e2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e30:	4b08      	ldr	r3, [pc, #32]	; (8002e54 <SystemInit+0x28>)
 8002e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e36:	4a07      	ldr	r2, [pc, #28]	; (8002e54 <SystemInit+0x28>)
 8002e38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002e40:	4b04      	ldr	r3, [pc, #16]	; (8002e54 <SystemInit+0x28>)
 8002e42:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e46:	609a      	str	r2, [r3, #8]
#endif
}
 8002e48:	bf00      	nop
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	e000ed00 	.word	0xe000ed00

08002e58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002e58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e90 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002e5c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002e5e:	e003      	b.n	8002e68 <LoopCopyDataInit>

08002e60 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002e60:	4b0c      	ldr	r3, [pc, #48]	; (8002e94 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002e62:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002e64:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002e66:	3104      	adds	r1, #4

08002e68 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002e68:	480b      	ldr	r0, [pc, #44]	; (8002e98 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002e6a:	4b0c      	ldr	r3, [pc, #48]	; (8002e9c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002e6c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002e6e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002e70:	d3f6      	bcc.n	8002e60 <CopyDataInit>
  ldr  r2, =_sbss
 8002e72:	4a0b      	ldr	r2, [pc, #44]	; (8002ea0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002e74:	e002      	b.n	8002e7c <LoopFillZerobss>

08002e76 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002e76:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002e78:	f842 3b04 	str.w	r3, [r2], #4

08002e7c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002e7c:	4b09      	ldr	r3, [pc, #36]	; (8002ea4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002e7e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002e80:	d3f9      	bcc.n	8002e76 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002e82:	f7ff ffd3 	bl	8002e2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e86:	f00a fb6b 	bl	800d560 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e8a:	f7ff fa5d 	bl	8002348 <main>
  bx  lr    
 8002e8e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002e90:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002e94:	08011e10 	.word	0x08011e10
  ldr  r0, =_sdata
 8002e98:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002e9c:	2000035c 	.word	0x2000035c
  ldr  r2, =_sbss
 8002ea0:	2000035c 	.word	0x2000035c
  ldr  r3, = _ebss
 8002ea4:	2000284c 	.word	0x2000284c

08002ea8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ea8:	e7fe      	b.n	8002ea8 <ADC_IRQHandler>
	...

08002eac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002eb0:	4b0e      	ldr	r3, [pc, #56]	; (8002eec <HAL_Init+0x40>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a0d      	ldr	r2, [pc, #52]	; (8002eec <HAL_Init+0x40>)
 8002eb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002eba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ebc:	4b0b      	ldr	r3, [pc, #44]	; (8002eec <HAL_Init+0x40>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a0a      	ldr	r2, [pc, #40]	; (8002eec <HAL_Init+0x40>)
 8002ec2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ec6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ec8:	4b08      	ldr	r3, [pc, #32]	; (8002eec <HAL_Init+0x40>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a07      	ldr	r2, [pc, #28]	; (8002eec <HAL_Init+0x40>)
 8002ece:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ed2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ed4:	2003      	movs	r0, #3
 8002ed6:	f000 f94d 	bl	8003174 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002eda:	2000      	movs	r0, #0
 8002edc:	f000 f808 	bl	8002ef0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ee0:	f7ff fcac 	bl	800283c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	40023c00 	.word	0x40023c00

08002ef0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ef8:	4b12      	ldr	r3, [pc, #72]	; (8002f44 <HAL_InitTick+0x54>)
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	4b12      	ldr	r3, [pc, #72]	; (8002f48 <HAL_InitTick+0x58>)
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	4619      	mov	r1, r3
 8002f02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f06:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f000 f965 	bl	80031de <HAL_SYSTICK_Config>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e00e      	b.n	8002f3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2b0f      	cmp	r3, #15
 8002f22:	d80a      	bhi.n	8002f3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f24:	2200      	movs	r2, #0
 8002f26:	6879      	ldr	r1, [r7, #4]
 8002f28:	f04f 30ff 	mov.w	r0, #4294967295
 8002f2c:	f000 f92d 	bl	800318a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f30:	4a06      	ldr	r2, [pc, #24]	; (8002f4c <HAL_InitTick+0x5c>)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f36:	2300      	movs	r3, #0
 8002f38:	e000      	b.n	8002f3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3708      	adds	r7, #8
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	20000010 	.word	0x20000010
 8002f48:	20000018 	.word	0x20000018
 8002f4c:	20000014 	.word	0x20000014

08002f50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f54:	4b06      	ldr	r3, [pc, #24]	; (8002f70 <HAL_IncTick+0x20>)
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	461a      	mov	r2, r3
 8002f5a:	4b06      	ldr	r3, [pc, #24]	; (8002f74 <HAL_IncTick+0x24>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4413      	add	r3, r2
 8002f60:	4a04      	ldr	r2, [pc, #16]	; (8002f74 <HAL_IncTick+0x24>)
 8002f62:	6013      	str	r3, [r2, #0]
}
 8002f64:	bf00      	nop
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	20000018 	.word	0x20000018
 8002f74:	20000b38 	.word	0x20000b38

08002f78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  return uwTick;
 8002f7c:	4b03      	ldr	r3, [pc, #12]	; (8002f8c <HAL_GetTick+0x14>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	20000b38 	.word	0x20000b38

08002f90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f98:	f7ff ffee 	bl	8002f78 <HAL_GetTick>
 8002f9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa8:	d005      	beq.n	8002fb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002faa:	4b09      	ldr	r3, [pc, #36]	; (8002fd0 <HAL_Delay+0x40>)
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	461a      	mov	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002fb6:	bf00      	nop
 8002fb8:	f7ff ffde 	bl	8002f78 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d8f7      	bhi.n	8002fb8 <HAL_Delay+0x28>
  {
  }
}
 8002fc8:	bf00      	nop
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	20000018 	.word	0x20000018

08002fd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f003 0307 	and.w	r3, r3, #7
 8002fe2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fe4:	4b0c      	ldr	r3, [pc, #48]	; (8003018 <__NVIC_SetPriorityGrouping+0x44>)
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fea:	68ba      	ldr	r2, [r7, #8]
 8002fec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ffc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003000:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003004:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003006:	4a04      	ldr	r2, [pc, #16]	; (8003018 <__NVIC_SetPriorityGrouping+0x44>)
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	60d3      	str	r3, [r2, #12]
}
 800300c:	bf00      	nop
 800300e:	3714      	adds	r7, #20
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr
 8003018:	e000ed00 	.word	0xe000ed00

0800301c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003020:	4b04      	ldr	r3, [pc, #16]	; (8003034 <__NVIC_GetPriorityGrouping+0x18>)
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	0a1b      	lsrs	r3, r3, #8
 8003026:	f003 0307 	and.w	r3, r3, #7
}
 800302a:	4618      	mov	r0, r3
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	e000ed00 	.word	0xe000ed00

08003038 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	4603      	mov	r3, r0
 8003040:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003046:	2b00      	cmp	r3, #0
 8003048:	db0b      	blt.n	8003062 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800304a:	79fb      	ldrb	r3, [r7, #7]
 800304c:	f003 021f 	and.w	r2, r3, #31
 8003050:	4907      	ldr	r1, [pc, #28]	; (8003070 <__NVIC_EnableIRQ+0x38>)
 8003052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003056:	095b      	lsrs	r3, r3, #5
 8003058:	2001      	movs	r0, #1
 800305a:	fa00 f202 	lsl.w	r2, r0, r2
 800305e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003062:	bf00      	nop
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	e000e100 	.word	0xe000e100

08003074 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	4603      	mov	r3, r0
 800307c:	6039      	str	r1, [r7, #0]
 800307e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003084:	2b00      	cmp	r3, #0
 8003086:	db0a      	blt.n	800309e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	b2da      	uxtb	r2, r3
 800308c:	490c      	ldr	r1, [pc, #48]	; (80030c0 <__NVIC_SetPriority+0x4c>)
 800308e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003092:	0112      	lsls	r2, r2, #4
 8003094:	b2d2      	uxtb	r2, r2
 8003096:	440b      	add	r3, r1
 8003098:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800309c:	e00a      	b.n	80030b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	b2da      	uxtb	r2, r3
 80030a2:	4908      	ldr	r1, [pc, #32]	; (80030c4 <__NVIC_SetPriority+0x50>)
 80030a4:	79fb      	ldrb	r3, [r7, #7]
 80030a6:	f003 030f 	and.w	r3, r3, #15
 80030aa:	3b04      	subs	r3, #4
 80030ac:	0112      	lsls	r2, r2, #4
 80030ae:	b2d2      	uxtb	r2, r2
 80030b0:	440b      	add	r3, r1
 80030b2:	761a      	strb	r2, [r3, #24]
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr
 80030c0:	e000e100 	.word	0xe000e100
 80030c4:	e000ed00 	.word	0xe000ed00

080030c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b089      	sub	sp, #36	; 0x24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f003 0307 	and.w	r3, r3, #7
 80030da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	f1c3 0307 	rsb	r3, r3, #7
 80030e2:	2b04      	cmp	r3, #4
 80030e4:	bf28      	it	cs
 80030e6:	2304      	movcs	r3, #4
 80030e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	3304      	adds	r3, #4
 80030ee:	2b06      	cmp	r3, #6
 80030f0:	d902      	bls.n	80030f8 <NVIC_EncodePriority+0x30>
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	3b03      	subs	r3, #3
 80030f6:	e000      	b.n	80030fa <NVIC_EncodePriority+0x32>
 80030f8:	2300      	movs	r3, #0
 80030fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	43da      	mvns	r2, r3
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	401a      	ands	r2, r3
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003110:	f04f 31ff 	mov.w	r1, #4294967295
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	fa01 f303 	lsl.w	r3, r1, r3
 800311a:	43d9      	mvns	r1, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003120:	4313      	orrs	r3, r2
         );
}
 8003122:	4618      	mov	r0, r3
 8003124:	3724      	adds	r7, #36	; 0x24
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
	...

08003130 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	3b01      	subs	r3, #1
 800313c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003140:	d301      	bcc.n	8003146 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003142:	2301      	movs	r3, #1
 8003144:	e00f      	b.n	8003166 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003146:	4a0a      	ldr	r2, [pc, #40]	; (8003170 <SysTick_Config+0x40>)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3b01      	subs	r3, #1
 800314c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800314e:	210f      	movs	r1, #15
 8003150:	f04f 30ff 	mov.w	r0, #4294967295
 8003154:	f7ff ff8e 	bl	8003074 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003158:	4b05      	ldr	r3, [pc, #20]	; (8003170 <SysTick_Config+0x40>)
 800315a:	2200      	movs	r2, #0
 800315c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800315e:	4b04      	ldr	r3, [pc, #16]	; (8003170 <SysTick_Config+0x40>)
 8003160:	2207      	movs	r2, #7
 8003162:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3708      	adds	r7, #8
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	e000e010 	.word	0xe000e010

08003174 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f7ff ff29 	bl	8002fd4 <__NVIC_SetPriorityGrouping>
}
 8003182:	bf00      	nop
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800318a:	b580      	push	{r7, lr}
 800318c:	b086      	sub	sp, #24
 800318e:	af00      	add	r7, sp, #0
 8003190:	4603      	mov	r3, r0
 8003192:	60b9      	str	r1, [r7, #8]
 8003194:	607a      	str	r2, [r7, #4]
 8003196:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003198:	2300      	movs	r3, #0
 800319a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800319c:	f7ff ff3e 	bl	800301c <__NVIC_GetPriorityGrouping>
 80031a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	68b9      	ldr	r1, [r7, #8]
 80031a6:	6978      	ldr	r0, [r7, #20]
 80031a8:	f7ff ff8e 	bl	80030c8 <NVIC_EncodePriority>
 80031ac:	4602      	mov	r2, r0
 80031ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031b2:	4611      	mov	r1, r2
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7ff ff5d 	bl	8003074 <__NVIC_SetPriority>
}
 80031ba:	bf00      	nop
 80031bc:	3718      	adds	r7, #24
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b082      	sub	sp, #8
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	4603      	mov	r3, r0
 80031ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7ff ff31 	bl	8003038 <__NVIC_EnableIRQ>
}
 80031d6:	bf00      	nop
 80031d8:	3708      	adds	r7, #8
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b082      	sub	sp, #8
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f7ff ffa2 	bl	8003130 <SysTick_Config>
 80031ec:	4603      	mov	r3, r0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
	...

080031f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003200:	2300      	movs	r3, #0
 8003202:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003204:	f7ff feb8 	bl	8002f78 <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d101      	bne.n	8003214 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e099      	b.n	8003348 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2202      	movs	r2, #2
 8003220:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 0201 	bic.w	r2, r2, #1
 8003232:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003234:	e00f      	b.n	8003256 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003236:	f7ff fe9f 	bl	8002f78 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	2b05      	cmp	r3, #5
 8003242:	d908      	bls.n	8003256 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2220      	movs	r2, #32
 8003248:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2203      	movs	r2, #3
 800324e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e078      	b.n	8003348 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1e8      	bne.n	8003236 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800326c:	697a      	ldr	r2, [r7, #20]
 800326e:	4b38      	ldr	r3, [pc, #224]	; (8003350 <HAL_DMA_Init+0x158>)
 8003270:	4013      	ands	r3, r2
 8003272:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685a      	ldr	r2, [r3, #4]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003282:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800328e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800329a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a1b      	ldr	r3, [r3, #32]
 80032a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032a2:	697a      	ldr	r2, [r7, #20]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ac:	2b04      	cmp	r3, #4
 80032ae:	d107      	bne.n	80032c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b8:	4313      	orrs	r3, r2
 80032ba:	697a      	ldr	r2, [r7, #20]
 80032bc:	4313      	orrs	r3, r2
 80032be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	697a      	ldr	r2, [r7, #20]
 80032c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	f023 0307 	bic.w	r3, r3, #7
 80032d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032dc:	697a      	ldr	r2, [r7, #20]
 80032de:	4313      	orrs	r3, r2
 80032e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e6:	2b04      	cmp	r3, #4
 80032e8:	d117      	bne.n	800331a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00e      	beq.n	800331a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f000 fa9d 	bl	800383c <DMA_CheckFifoParam>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d008      	beq.n	800331a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2240      	movs	r2, #64	; 0x40
 800330c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2201      	movs	r2, #1
 8003312:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003316:	2301      	movs	r3, #1
 8003318:	e016      	b.n	8003348 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 fa54 	bl	80037d0 <DMA_CalcBaseAndBitshift>
 8003328:	4603      	mov	r3, r0
 800332a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003330:	223f      	movs	r2, #63	; 0x3f
 8003332:	409a      	lsls	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2201      	movs	r2, #1
 8003342:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	3718      	adds	r7, #24
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	f010803f 	.word	0xf010803f

08003354 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b086      	sub	sp, #24
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
 8003360:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003362:	2300      	movs	r3, #0
 8003364:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800336a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003372:	2b01      	cmp	r3, #1
 8003374:	d101      	bne.n	800337a <HAL_DMA_Start_IT+0x26>
 8003376:	2302      	movs	r3, #2
 8003378:	e040      	b.n	80033fc <HAL_DMA_Start_IT+0xa8>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2201      	movs	r2, #1
 800337e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b01      	cmp	r3, #1
 800338c:	d12f      	bne.n	80033ee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2202      	movs	r2, #2
 8003392:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	68b9      	ldr	r1, [r7, #8]
 80033a2:	68f8      	ldr	r0, [r7, #12]
 80033a4:	f000 f9e6 	bl	8003774 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ac:	223f      	movs	r2, #63	; 0x3f
 80033ae:	409a      	lsls	r2, r3
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f042 0216 	orr.w	r2, r2, #22
 80033c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d007      	beq.n	80033dc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f042 0208 	orr.w	r2, r2, #8
 80033da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f042 0201 	orr.w	r2, r2, #1
 80033ea:	601a      	str	r2, [r3, #0]
 80033ec:	e005      	b.n	80033fa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80033f6:	2302      	movs	r3, #2
 80033f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80033fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3718      	adds	r7, #24
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003412:	b2db      	uxtb	r3, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d004      	beq.n	8003422 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2280      	movs	r2, #128	; 0x80
 800341c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e00c      	b.n	800343c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2205      	movs	r2, #5
 8003426:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f022 0201 	bic.w	r2, r2, #1
 8003438:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800343a:	2300      	movs	r3, #0
}
 800343c:	4618      	mov	r0, r3
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b086      	sub	sp, #24
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003450:	2300      	movs	r3, #0
 8003452:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003454:	4b92      	ldr	r3, [pc, #584]	; (80036a0 <HAL_DMA_IRQHandler+0x258>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a92      	ldr	r2, [pc, #584]	; (80036a4 <HAL_DMA_IRQHandler+0x25c>)
 800345a:	fba2 2303 	umull	r2, r3, r2, r3
 800345e:	0a9b      	lsrs	r3, r3, #10
 8003460:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003466:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003472:	2208      	movs	r2, #8
 8003474:	409a      	lsls	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	4013      	ands	r3, r2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d01a      	beq.n	80034b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0304 	and.w	r3, r3, #4
 8003488:	2b00      	cmp	r3, #0
 800348a:	d013      	beq.n	80034b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f022 0204 	bic.w	r2, r2, #4
 800349a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a0:	2208      	movs	r2, #8
 80034a2:	409a      	lsls	r2, r3
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ac:	f043 0201 	orr.w	r2, r3, #1
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b8:	2201      	movs	r2, #1
 80034ba:	409a      	lsls	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	4013      	ands	r3, r2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d012      	beq.n	80034ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00b      	beq.n	80034ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d6:	2201      	movs	r2, #1
 80034d8:	409a      	lsls	r2, r3
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e2:	f043 0202 	orr.w	r2, r3, #2
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ee:	2204      	movs	r2, #4
 80034f0:	409a      	lsls	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	4013      	ands	r3, r2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d012      	beq.n	8003520 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00b      	beq.n	8003520 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800350c:	2204      	movs	r2, #4
 800350e:	409a      	lsls	r2, r3
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003518:	f043 0204 	orr.w	r2, r3, #4
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003524:	2210      	movs	r2, #16
 8003526:	409a      	lsls	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	4013      	ands	r3, r2
 800352c:	2b00      	cmp	r3, #0
 800352e:	d043      	beq.n	80035b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0308 	and.w	r3, r3, #8
 800353a:	2b00      	cmp	r3, #0
 800353c:	d03c      	beq.n	80035b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003542:	2210      	movs	r2, #16
 8003544:	409a      	lsls	r2, r3
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d018      	beq.n	800358a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d108      	bne.n	8003578 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356a:	2b00      	cmp	r3, #0
 800356c:	d024      	beq.n	80035b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	4798      	blx	r3
 8003576:	e01f      	b.n	80035b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800357c:	2b00      	cmp	r3, #0
 800357e:	d01b      	beq.n	80035b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	4798      	blx	r3
 8003588:	e016      	b.n	80035b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003594:	2b00      	cmp	r3, #0
 8003596:	d107      	bne.n	80035a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f022 0208 	bic.w	r2, r2, #8
 80035a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d003      	beq.n	80035b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035bc:	2220      	movs	r2, #32
 80035be:	409a      	lsls	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	4013      	ands	r3, r2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f000 808e 	beq.w	80036e6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0310 	and.w	r3, r3, #16
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f000 8086 	beq.w	80036e6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035de:	2220      	movs	r2, #32
 80035e0:	409a      	lsls	r2, r3
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	2b05      	cmp	r3, #5
 80035f0:	d136      	bne.n	8003660 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 0216 	bic.w	r2, r2, #22
 8003600:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	695a      	ldr	r2, [r3, #20]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003610:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003616:	2b00      	cmp	r3, #0
 8003618:	d103      	bne.n	8003622 <HAL_DMA_IRQHandler+0x1da>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800361e:	2b00      	cmp	r3, #0
 8003620:	d007      	beq.n	8003632 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 0208 	bic.w	r2, r2, #8
 8003630:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003636:	223f      	movs	r2, #63	; 0x3f
 8003638:	409a      	lsls	r2, r3
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2201      	movs	r2, #1
 800364a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003652:	2b00      	cmp	r3, #0
 8003654:	d07d      	beq.n	8003752 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	4798      	blx	r3
        }
        return;
 800365e:	e078      	b.n	8003752 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d01c      	beq.n	80036a8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d108      	bne.n	800368e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003680:	2b00      	cmp	r3, #0
 8003682:	d030      	beq.n	80036e6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	4798      	blx	r3
 800368c:	e02b      	b.n	80036e6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003692:	2b00      	cmp	r3, #0
 8003694:	d027      	beq.n	80036e6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	4798      	blx	r3
 800369e:	e022      	b.n	80036e6 <HAL_DMA_IRQHandler+0x29e>
 80036a0:	20000010 	.word	0x20000010
 80036a4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d10f      	bne.n	80036d6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f022 0210 	bic.w	r2, r2, #16
 80036c4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d003      	beq.n	80036e6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d032      	beq.n	8003754 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d022      	beq.n	8003740 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2205      	movs	r2, #5
 80036fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 0201 	bic.w	r2, r2, #1
 8003710:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	3301      	adds	r3, #1
 8003716:	60bb      	str	r3, [r7, #8]
 8003718:	697a      	ldr	r2, [r7, #20]
 800371a:	429a      	cmp	r2, r3
 800371c:	d307      	bcc.n	800372e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0301 	and.w	r3, r3, #1
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1f2      	bne.n	8003712 <HAL_DMA_IRQHandler+0x2ca>
 800372c:	e000      	b.n	8003730 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800372e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003744:	2b00      	cmp	r3, #0
 8003746:	d005      	beq.n	8003754 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	4798      	blx	r3
 8003750:	e000      	b.n	8003754 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003752:	bf00      	nop
    }
  }
}
 8003754:	3718      	adds	r7, #24
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop

0800375c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003768:	4618      	mov	r0, r3
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	607a      	str	r2, [r7, #4]
 8003780:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003790:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	683a      	ldr	r2, [r7, #0]
 8003798:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	2b40      	cmp	r3, #64	; 0x40
 80037a0:	d108      	bne.n	80037b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68ba      	ldr	r2, [r7, #8]
 80037b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80037b2:	e007      	b.n	80037c4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68ba      	ldr	r2, [r7, #8]
 80037ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	60da      	str	r2, [r3, #12]
}
 80037c4:	bf00      	nop
 80037c6:	3714      	adds	r7, #20
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b085      	sub	sp, #20
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	3b10      	subs	r3, #16
 80037e0:	4a14      	ldr	r2, [pc, #80]	; (8003834 <DMA_CalcBaseAndBitshift+0x64>)
 80037e2:	fba2 2303 	umull	r2, r3, r2, r3
 80037e6:	091b      	lsrs	r3, r3, #4
 80037e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80037ea:	4a13      	ldr	r2, [pc, #76]	; (8003838 <DMA_CalcBaseAndBitshift+0x68>)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	4413      	add	r3, r2
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	461a      	mov	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2b03      	cmp	r3, #3
 80037fc:	d909      	bls.n	8003812 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003806:	f023 0303 	bic.w	r3, r3, #3
 800380a:	1d1a      	adds	r2, r3, #4
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	659a      	str	r2, [r3, #88]	; 0x58
 8003810:	e007      	b.n	8003822 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800381a:	f023 0303 	bic.w	r3, r3, #3
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003826:	4618      	mov	r0, r3
 8003828:	3714      	adds	r7, #20
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	aaaaaaab 	.word	0xaaaaaaab
 8003838:	08011ac4 	.word	0x08011ac4

0800383c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800383c:	b480      	push	{r7}
 800383e:	b085      	sub	sp, #20
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003844:	2300      	movs	r3, #0
 8003846:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d11f      	bne.n	8003896 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	2b03      	cmp	r3, #3
 800385a:	d855      	bhi.n	8003908 <DMA_CheckFifoParam+0xcc>
 800385c:	a201      	add	r2, pc, #4	; (adr r2, 8003864 <DMA_CheckFifoParam+0x28>)
 800385e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003862:	bf00      	nop
 8003864:	08003875 	.word	0x08003875
 8003868:	08003887 	.word	0x08003887
 800386c:	08003875 	.word	0x08003875
 8003870:	08003909 	.word	0x08003909
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003878:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d045      	beq.n	800390c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003884:	e042      	b.n	800390c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800388e:	d13f      	bne.n	8003910 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003894:	e03c      	b.n	8003910 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800389e:	d121      	bne.n	80038e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	2b03      	cmp	r3, #3
 80038a4:	d836      	bhi.n	8003914 <DMA_CheckFifoParam+0xd8>
 80038a6:	a201      	add	r2, pc, #4	; (adr r2, 80038ac <DMA_CheckFifoParam+0x70>)
 80038a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ac:	080038bd 	.word	0x080038bd
 80038b0:	080038c3 	.word	0x080038c3
 80038b4:	080038bd 	.word	0x080038bd
 80038b8:	080038d5 	.word	0x080038d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	73fb      	strb	r3, [r7, #15]
      break;
 80038c0:	e02f      	b.n	8003922 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d024      	beq.n	8003918 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038d2:	e021      	b.n	8003918 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038dc:	d11e      	bne.n	800391c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80038e2:	e01b      	b.n	800391c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d902      	bls.n	80038f0 <DMA_CheckFifoParam+0xb4>
 80038ea:	2b03      	cmp	r3, #3
 80038ec:	d003      	beq.n	80038f6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80038ee:	e018      	b.n	8003922 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	73fb      	strb	r3, [r7, #15]
      break;
 80038f4:	e015      	b.n	8003922 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00e      	beq.n	8003920 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	73fb      	strb	r3, [r7, #15]
      break;
 8003906:	e00b      	b.n	8003920 <DMA_CheckFifoParam+0xe4>
      break;
 8003908:	bf00      	nop
 800390a:	e00a      	b.n	8003922 <DMA_CheckFifoParam+0xe6>
      break;
 800390c:	bf00      	nop
 800390e:	e008      	b.n	8003922 <DMA_CheckFifoParam+0xe6>
      break;
 8003910:	bf00      	nop
 8003912:	e006      	b.n	8003922 <DMA_CheckFifoParam+0xe6>
      break;
 8003914:	bf00      	nop
 8003916:	e004      	b.n	8003922 <DMA_CheckFifoParam+0xe6>
      break;
 8003918:	bf00      	nop
 800391a:	e002      	b.n	8003922 <DMA_CheckFifoParam+0xe6>
      break;   
 800391c:	bf00      	nop
 800391e:	e000      	b.n	8003922 <DMA_CheckFifoParam+0xe6>
      break;
 8003920:	bf00      	nop
    }
  } 
  
  return status; 
 8003922:	7bfb      	ldrb	r3, [r7, #15]
}
 8003924:	4618      	mov	r0, r3
 8003926:	3714      	adds	r7, #20
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003930:	b480      	push	{r7}
 8003932:	b089      	sub	sp, #36	; 0x24
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800393a:	2300      	movs	r3, #0
 800393c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800393e:	2300      	movs	r3, #0
 8003940:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003942:	2300      	movs	r3, #0
 8003944:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003946:	2300      	movs	r3, #0
 8003948:	61fb      	str	r3, [r7, #28]
 800394a:	e16b      	b.n	8003c24 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800394c:	2201      	movs	r2, #1
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	fa02 f303 	lsl.w	r3, r2, r3
 8003954:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	697a      	ldr	r2, [r7, #20]
 800395c:	4013      	ands	r3, r2
 800395e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003960:	693a      	ldr	r2, [r7, #16]
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	429a      	cmp	r2, r3
 8003966:	f040 815a 	bne.w	8003c1e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d00b      	beq.n	800398a <HAL_GPIO_Init+0x5a>
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	2b02      	cmp	r3, #2
 8003978:	d007      	beq.n	800398a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800397e:	2b11      	cmp	r3, #17
 8003980:	d003      	beq.n	800398a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	2b12      	cmp	r3, #18
 8003988:	d130      	bne.n	80039ec <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	2203      	movs	r2, #3
 8003996:	fa02 f303 	lsl.w	r3, r2, r3
 800399a:	43db      	mvns	r3, r3
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	4013      	ands	r3, r2
 80039a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	68da      	ldr	r2, [r3, #12]
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	005b      	lsls	r3, r3, #1
 80039aa:	fa02 f303 	lsl.w	r3, r2, r3
 80039ae:	69ba      	ldr	r2, [r7, #24]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	69ba      	ldr	r2, [r7, #24]
 80039b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039c0:	2201      	movs	r2, #1
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	fa02 f303 	lsl.w	r3, r2, r3
 80039c8:	43db      	mvns	r3, r3
 80039ca:	69ba      	ldr	r2, [r7, #24]
 80039cc:	4013      	ands	r3, r2
 80039ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	091b      	lsrs	r3, r3, #4
 80039d6:	f003 0201 	and.w	r2, r3, #1
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	fa02 f303 	lsl.w	r3, r2, r3
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	005b      	lsls	r3, r3, #1
 80039f6:	2203      	movs	r2, #3
 80039f8:	fa02 f303 	lsl.w	r3, r2, r3
 80039fc:	43db      	mvns	r3, r3
 80039fe:	69ba      	ldr	r2, [r7, #24]
 8003a00:	4013      	ands	r3, r2
 8003a02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	689a      	ldr	r2, [r3, #8]
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	005b      	lsls	r3, r3, #1
 8003a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a10:	69ba      	ldr	r2, [r7, #24]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	69ba      	ldr	r2, [r7, #24]
 8003a1a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d003      	beq.n	8003a2c <HAL_GPIO_Init+0xfc>
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	2b12      	cmp	r3, #18
 8003a2a:	d123      	bne.n	8003a74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	08da      	lsrs	r2, r3, #3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	3208      	adds	r2, #8
 8003a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	f003 0307 	and.w	r3, r3, #7
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	220f      	movs	r2, #15
 8003a44:	fa02 f303 	lsl.w	r3, r2, r3
 8003a48:	43db      	mvns	r3, r3
 8003a4a:	69ba      	ldr	r2, [r7, #24]
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	691a      	ldr	r2, [r3, #16]
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	f003 0307 	and.w	r3, r3, #7
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	08da      	lsrs	r2, r3, #3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	3208      	adds	r2, #8
 8003a6e:	69b9      	ldr	r1, [r7, #24]
 8003a70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	2203      	movs	r2, #3
 8003a80:	fa02 f303 	lsl.w	r3, r2, r3
 8003a84:	43db      	mvns	r3, r3
 8003a86:	69ba      	ldr	r2, [r7, #24]
 8003a88:	4013      	ands	r3, r2
 8003a8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f003 0203 	and.w	r2, r3, #3
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	005b      	lsls	r3, r3, #1
 8003a98:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	f000 80b4 	beq.w	8003c1e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	60fb      	str	r3, [r7, #12]
 8003aba:	4b5f      	ldr	r3, [pc, #380]	; (8003c38 <HAL_GPIO_Init+0x308>)
 8003abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003abe:	4a5e      	ldr	r2, [pc, #376]	; (8003c38 <HAL_GPIO_Init+0x308>)
 8003ac0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ac6:	4b5c      	ldr	r3, [pc, #368]	; (8003c38 <HAL_GPIO_Init+0x308>)
 8003ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ace:	60fb      	str	r3, [r7, #12]
 8003ad0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ad2:	4a5a      	ldr	r2, [pc, #360]	; (8003c3c <HAL_GPIO_Init+0x30c>)
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	089b      	lsrs	r3, r3, #2
 8003ad8:	3302      	adds	r3, #2
 8003ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	f003 0303 	and.w	r3, r3, #3
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	220f      	movs	r2, #15
 8003aea:	fa02 f303 	lsl.w	r3, r2, r3
 8003aee:	43db      	mvns	r3, r3
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	4013      	ands	r3, r2
 8003af4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a51      	ldr	r2, [pc, #324]	; (8003c40 <HAL_GPIO_Init+0x310>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d02b      	beq.n	8003b56 <HAL_GPIO_Init+0x226>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a50      	ldr	r2, [pc, #320]	; (8003c44 <HAL_GPIO_Init+0x314>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d025      	beq.n	8003b52 <HAL_GPIO_Init+0x222>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a4f      	ldr	r2, [pc, #316]	; (8003c48 <HAL_GPIO_Init+0x318>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d01f      	beq.n	8003b4e <HAL_GPIO_Init+0x21e>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a4e      	ldr	r2, [pc, #312]	; (8003c4c <HAL_GPIO_Init+0x31c>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d019      	beq.n	8003b4a <HAL_GPIO_Init+0x21a>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a4d      	ldr	r2, [pc, #308]	; (8003c50 <HAL_GPIO_Init+0x320>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d013      	beq.n	8003b46 <HAL_GPIO_Init+0x216>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a4c      	ldr	r2, [pc, #304]	; (8003c54 <HAL_GPIO_Init+0x324>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d00d      	beq.n	8003b42 <HAL_GPIO_Init+0x212>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a4b      	ldr	r2, [pc, #300]	; (8003c58 <HAL_GPIO_Init+0x328>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d007      	beq.n	8003b3e <HAL_GPIO_Init+0x20e>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a4a      	ldr	r2, [pc, #296]	; (8003c5c <HAL_GPIO_Init+0x32c>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d101      	bne.n	8003b3a <HAL_GPIO_Init+0x20a>
 8003b36:	2307      	movs	r3, #7
 8003b38:	e00e      	b.n	8003b58 <HAL_GPIO_Init+0x228>
 8003b3a:	2308      	movs	r3, #8
 8003b3c:	e00c      	b.n	8003b58 <HAL_GPIO_Init+0x228>
 8003b3e:	2306      	movs	r3, #6
 8003b40:	e00a      	b.n	8003b58 <HAL_GPIO_Init+0x228>
 8003b42:	2305      	movs	r3, #5
 8003b44:	e008      	b.n	8003b58 <HAL_GPIO_Init+0x228>
 8003b46:	2304      	movs	r3, #4
 8003b48:	e006      	b.n	8003b58 <HAL_GPIO_Init+0x228>
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e004      	b.n	8003b58 <HAL_GPIO_Init+0x228>
 8003b4e:	2302      	movs	r3, #2
 8003b50:	e002      	b.n	8003b58 <HAL_GPIO_Init+0x228>
 8003b52:	2301      	movs	r3, #1
 8003b54:	e000      	b.n	8003b58 <HAL_GPIO_Init+0x228>
 8003b56:	2300      	movs	r3, #0
 8003b58:	69fa      	ldr	r2, [r7, #28]
 8003b5a:	f002 0203 	and.w	r2, r2, #3
 8003b5e:	0092      	lsls	r2, r2, #2
 8003b60:	4093      	lsls	r3, r2
 8003b62:	69ba      	ldr	r2, [r7, #24]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b68:	4934      	ldr	r1, [pc, #208]	; (8003c3c <HAL_GPIO_Init+0x30c>)
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	089b      	lsrs	r3, r3, #2
 8003b6e:	3302      	adds	r3, #2
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b76:	4b3a      	ldr	r3, [pc, #232]	; (8003c60 <HAL_GPIO_Init+0x330>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	43db      	mvns	r3, r3
 8003b80:	69ba      	ldr	r2, [r7, #24]
 8003b82:	4013      	ands	r3, r2
 8003b84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d003      	beq.n	8003b9a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003b92:	69ba      	ldr	r2, [r7, #24]
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b9a:	4a31      	ldr	r2, [pc, #196]	; (8003c60 <HAL_GPIO_Init+0x330>)
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003ba0:	4b2f      	ldr	r3, [pc, #188]	; (8003c60 <HAL_GPIO_Init+0x330>)
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	43db      	mvns	r3, r3
 8003baa:	69ba      	ldr	r2, [r7, #24]
 8003bac:	4013      	ands	r3, r2
 8003bae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d003      	beq.n	8003bc4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003bbc:	69ba      	ldr	r2, [r7, #24]
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003bc4:	4a26      	ldr	r2, [pc, #152]	; (8003c60 <HAL_GPIO_Init+0x330>)
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003bca:	4b25      	ldr	r3, [pc, #148]	; (8003c60 <HAL_GPIO_Init+0x330>)
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	43db      	mvns	r3, r3
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d003      	beq.n	8003bee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003be6:	69ba      	ldr	r2, [r7, #24]
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003bee:	4a1c      	ldr	r2, [pc, #112]	; (8003c60 <HAL_GPIO_Init+0x330>)
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003bf4:	4b1a      	ldr	r3, [pc, #104]	; (8003c60 <HAL_GPIO_Init+0x330>)
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	43db      	mvns	r3, r3
 8003bfe:	69ba      	ldr	r2, [r7, #24]
 8003c00:	4013      	ands	r3, r2
 8003c02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d003      	beq.n	8003c18 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003c10:	69ba      	ldr	r2, [r7, #24]
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c18:	4a11      	ldr	r2, [pc, #68]	; (8003c60 <HAL_GPIO_Init+0x330>)
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	3301      	adds	r3, #1
 8003c22:	61fb      	str	r3, [r7, #28]
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	2b0f      	cmp	r3, #15
 8003c28:	f67f ae90 	bls.w	800394c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c2c:	bf00      	nop
 8003c2e:	3724      	adds	r7, #36	; 0x24
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr
 8003c38:	40023800 	.word	0x40023800
 8003c3c:	40013800 	.word	0x40013800
 8003c40:	40020000 	.word	0x40020000
 8003c44:	40020400 	.word	0x40020400
 8003c48:	40020800 	.word	0x40020800
 8003c4c:	40020c00 	.word	0x40020c00
 8003c50:	40021000 	.word	0x40021000
 8003c54:	40021400 	.word	0x40021400
 8003c58:	40021800 	.word	0x40021800
 8003c5c:	40021c00 	.word	0x40021c00
 8003c60:	40013c00 	.word	0x40013c00

08003c64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	691a      	ldr	r2, [r3, #16]
 8003c74:	887b      	ldrh	r3, [r7, #2]
 8003c76:	4013      	ands	r3, r2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d002      	beq.n	8003c82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	73fb      	strb	r3, [r7, #15]
 8003c80:	e001      	b.n	8003c86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c82:	2300      	movs	r3, #0
 8003c84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3714      	adds	r7, #20
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	807b      	strh	r3, [r7, #2]
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ca4:	787b      	ldrb	r3, [r7, #1]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d003      	beq.n	8003cb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003caa:	887a      	ldrh	r2, [r7, #2]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003cb0:	e003      	b.n	8003cba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003cb2:	887b      	ldrh	r3, [r7, #2]
 8003cb4:	041a      	lsls	r2, r3, #16
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	619a      	str	r2, [r3, #24]
}
 8003cba:	bf00      	nop
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr

08003cc6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	b083      	sub	sp, #12
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
 8003cce:	460b      	mov	r3, r1
 8003cd0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	695a      	ldr	r2, [r3, #20]
 8003cd6:	887b      	ldrh	r3, [r7, #2]
 8003cd8:	401a      	ands	r2, r3
 8003cda:	887b      	ldrh	r3, [r7, #2]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d104      	bne.n	8003cea <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003ce0:	887b      	ldrh	r3, [r7, #2]
 8003ce2:	041a      	lsls	r2, r3, #16
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003ce8:	e002      	b.n	8003cf0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003cea:	887a      	ldrh	r2, [r7, #2]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	619a      	str	r2, [r3, #24]
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	4603      	mov	r3, r0
 8003d04:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003d06:	4b08      	ldr	r3, [pc, #32]	; (8003d28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d08:	695a      	ldr	r2, [r3, #20]
 8003d0a:	88fb      	ldrh	r3, [r7, #6]
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d006      	beq.n	8003d20 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d12:	4a05      	ldr	r2, [pc, #20]	; (8003d28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d14:	88fb      	ldrh	r3, [r7, #6]
 8003d16:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d18:	88fb      	ldrh	r3, [r7, #6]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7fe fd78 	bl	8002810 <HAL_GPIO_EXTI_Callback>
  }
}
 8003d20:	bf00      	nop
 8003d22:	3708      	adds	r7, #8
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	40013c00 	.word	0x40013c00

08003d2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d101      	bne.n	8003d3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e11f      	b.n	8003f7e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d106      	bne.n	8003d58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f7fe fd9a 	bl	800288c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2224      	movs	r2, #36	; 0x24
 8003d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f022 0201 	bic.w	r2, r2, #1
 8003d6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d90:	f002 fd1a 	bl	80067c8 <HAL_RCC_GetPCLK1Freq>
 8003d94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	4a7b      	ldr	r2, [pc, #492]	; (8003f88 <HAL_I2C_Init+0x25c>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d807      	bhi.n	8003db0 <HAL_I2C_Init+0x84>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	4a7a      	ldr	r2, [pc, #488]	; (8003f8c <HAL_I2C_Init+0x260>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	bf94      	ite	ls
 8003da8:	2301      	movls	r3, #1
 8003daa:	2300      	movhi	r3, #0
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	e006      	b.n	8003dbe <HAL_I2C_Init+0x92>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	4a77      	ldr	r2, [pc, #476]	; (8003f90 <HAL_I2C_Init+0x264>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	bf94      	ite	ls
 8003db8:	2301      	movls	r3, #1
 8003dba:	2300      	movhi	r3, #0
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d001      	beq.n	8003dc6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e0db      	b.n	8003f7e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	4a72      	ldr	r2, [pc, #456]	; (8003f94 <HAL_I2C_Init+0x268>)
 8003dca:	fba2 2303 	umull	r2, r3, r2, r3
 8003dce:	0c9b      	lsrs	r3, r3, #18
 8003dd0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68ba      	ldr	r2, [r7, #8]
 8003de2:	430a      	orrs	r2, r1
 8003de4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	6a1b      	ldr	r3, [r3, #32]
 8003dec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	4a64      	ldr	r2, [pc, #400]	; (8003f88 <HAL_I2C_Init+0x25c>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d802      	bhi.n	8003e00 <HAL_I2C_Init+0xd4>
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	e009      	b.n	8003e14 <HAL_I2C_Init+0xe8>
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e06:	fb02 f303 	mul.w	r3, r2, r3
 8003e0a:	4a63      	ldr	r2, [pc, #396]	; (8003f98 <HAL_I2C_Init+0x26c>)
 8003e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e10:	099b      	lsrs	r3, r3, #6
 8003e12:	3301      	adds	r3, #1
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	6812      	ldr	r2, [r2, #0]
 8003e18:	430b      	orrs	r3, r1
 8003e1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	69db      	ldr	r3, [r3, #28]
 8003e22:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003e26:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	4956      	ldr	r1, [pc, #344]	; (8003f88 <HAL_I2C_Init+0x25c>)
 8003e30:	428b      	cmp	r3, r1
 8003e32:	d80d      	bhi.n	8003e50 <HAL_I2C_Init+0x124>
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	1e59      	subs	r1, r3, #1
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	005b      	lsls	r3, r3, #1
 8003e3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e42:	3301      	adds	r3, #1
 8003e44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e48:	2b04      	cmp	r3, #4
 8003e4a:	bf38      	it	cc
 8003e4c:	2304      	movcc	r3, #4
 8003e4e:	e04f      	b.n	8003ef0 <HAL_I2C_Init+0x1c4>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d111      	bne.n	8003e7c <HAL_I2C_Init+0x150>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	1e58      	subs	r0, r3, #1
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6859      	ldr	r1, [r3, #4]
 8003e60:	460b      	mov	r3, r1
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	440b      	add	r3, r1
 8003e66:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	bf0c      	ite	eq
 8003e74:	2301      	moveq	r3, #1
 8003e76:	2300      	movne	r3, #0
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	e012      	b.n	8003ea2 <HAL_I2C_Init+0x176>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	1e58      	subs	r0, r3, #1
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6859      	ldr	r1, [r3, #4]
 8003e84:	460b      	mov	r3, r1
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	440b      	add	r3, r1
 8003e8a:	0099      	lsls	r1, r3, #2
 8003e8c:	440b      	add	r3, r1
 8003e8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e92:	3301      	adds	r3, #1
 8003e94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	bf0c      	ite	eq
 8003e9c:	2301      	moveq	r3, #1
 8003e9e:	2300      	movne	r3, #0
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <HAL_I2C_Init+0x17e>
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e022      	b.n	8003ef0 <HAL_I2C_Init+0x1c4>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d10e      	bne.n	8003ed0 <HAL_I2C_Init+0x1a4>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	1e58      	subs	r0, r3, #1
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6859      	ldr	r1, [r3, #4]
 8003eba:	460b      	mov	r3, r1
 8003ebc:	005b      	lsls	r3, r3, #1
 8003ebe:	440b      	add	r3, r1
 8003ec0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ece:	e00f      	b.n	8003ef0 <HAL_I2C_Init+0x1c4>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	1e58      	subs	r0, r3, #1
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6859      	ldr	r1, [r3, #4]
 8003ed8:	460b      	mov	r3, r1
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	440b      	add	r3, r1
 8003ede:	0099      	lsls	r1, r3, #2
 8003ee0:	440b      	add	r3, r1
 8003ee2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ef0:	6879      	ldr	r1, [r7, #4]
 8003ef2:	6809      	ldr	r1, [r1, #0]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	69da      	ldr	r2, [r3, #28]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a1b      	ldr	r3, [r3, #32]
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	430a      	orrs	r2, r1
 8003f12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003f1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	6911      	ldr	r1, [r2, #16]
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	68d2      	ldr	r2, [r2, #12]
 8003f2a:	4311      	orrs	r1, r2
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	6812      	ldr	r2, [r2, #0]
 8003f30:	430b      	orrs	r3, r1
 8003f32:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	695a      	ldr	r2, [r3, #20]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	431a      	orrs	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f042 0201 	orr.w	r2, r2, #1
 8003f5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2220      	movs	r2, #32
 8003f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3710      	adds	r7, #16
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	000186a0 	.word	0x000186a0
 8003f8c:	001e847f 	.word	0x001e847f
 8003f90:	003d08ff 	.word	0x003d08ff
 8003f94:	431bde83 	.word	0x431bde83
 8003f98:	10624dd3 	.word	0x10624dd3

08003f9c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b088      	sub	sp, #32
 8003fa0:	af02      	add	r7, sp, #8
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	4608      	mov	r0, r1
 8003fa6:	4611      	mov	r1, r2
 8003fa8:	461a      	mov	r2, r3
 8003faa:	4603      	mov	r3, r0
 8003fac:	817b      	strh	r3, [r7, #10]
 8003fae:	460b      	mov	r3, r1
 8003fb0:	813b      	strh	r3, [r7, #8]
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fb6:	f7fe ffdf 	bl	8002f78 <HAL_GetTick>
 8003fba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	2b20      	cmp	r3, #32
 8003fc6:	f040 80d9 	bne.w	800417c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	9300      	str	r3, [sp, #0]
 8003fce:	2319      	movs	r3, #25
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	496d      	ldr	r1, [pc, #436]	; (8004188 <HAL_I2C_Mem_Write+0x1ec>)
 8003fd4:	68f8      	ldr	r0, [r7, #12]
 8003fd6:	f000 fc7b 	bl	80048d0 <I2C_WaitOnFlagUntilTimeout>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d001      	beq.n	8003fe4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	e0cc      	b.n	800417e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d101      	bne.n	8003ff2 <HAL_I2C_Mem_Write+0x56>
 8003fee:	2302      	movs	r3, #2
 8003ff0:	e0c5      	b.n	800417e <HAL_I2C_Mem_Write+0x1e2>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0301 	and.w	r3, r3, #1
 8004004:	2b01      	cmp	r3, #1
 8004006:	d007      	beq.n	8004018 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f042 0201 	orr.w	r2, r2, #1
 8004016:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004026:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2221      	movs	r2, #33	; 0x21
 800402c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2240      	movs	r2, #64	; 0x40
 8004034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6a3a      	ldr	r2, [r7, #32]
 8004042:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004048:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800404e:	b29a      	uxth	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	4a4d      	ldr	r2, [pc, #308]	; (800418c <HAL_I2C_Mem_Write+0x1f0>)
 8004058:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800405a:	88f8      	ldrh	r0, [r7, #6]
 800405c:	893a      	ldrh	r2, [r7, #8]
 800405e:	8979      	ldrh	r1, [r7, #10]
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	9301      	str	r3, [sp, #4]
 8004064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004066:	9300      	str	r3, [sp, #0]
 8004068:	4603      	mov	r3, r0
 800406a:	68f8      	ldr	r0, [r7, #12]
 800406c:	f000 fab6 	bl	80045dc <I2C_RequestMemoryWrite>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d052      	beq.n	800411c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e081      	b.n	800417e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	f000 fcfc 	bl	8004a7c <I2C_WaitOnTXEFlagUntilTimeout>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00d      	beq.n	80040a6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408e:	2b04      	cmp	r3, #4
 8004090:	d107      	bne.n	80040a2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e06b      	b.n	800417e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040aa:	781a      	ldrb	r2, [r3, #0]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b6:	1c5a      	adds	r2, r3, #1
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c0:	3b01      	subs	r3, #1
 80040c2:	b29a      	uxth	r2, r3
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	3b01      	subs	r3, #1
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	695b      	ldr	r3, [r3, #20]
 80040dc:	f003 0304 	and.w	r3, r3, #4
 80040e0:	2b04      	cmp	r3, #4
 80040e2:	d11b      	bne.n	800411c <HAL_I2C_Mem_Write+0x180>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d017      	beq.n	800411c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f0:	781a      	ldrb	r2, [r3, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fc:	1c5a      	adds	r2, r3, #1
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004106:	3b01      	subs	r3, #1
 8004108:	b29a      	uxth	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004112:	b29b      	uxth	r3, r3
 8004114:	3b01      	subs	r3, #1
 8004116:	b29a      	uxth	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1aa      	bne.n	800407a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004124:	697a      	ldr	r2, [r7, #20]
 8004126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004128:	68f8      	ldr	r0, [r7, #12]
 800412a:	f000 fce8 	bl	8004afe <I2C_WaitOnBTFFlagUntilTimeout>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00d      	beq.n	8004150 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004138:	2b04      	cmp	r3, #4
 800413a:	d107      	bne.n	800414c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800414a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e016      	b.n	800417e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800415e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2220      	movs	r2, #32
 8004164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004178:	2300      	movs	r3, #0
 800417a:	e000      	b.n	800417e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800417c:	2302      	movs	r3, #2
  }
}
 800417e:	4618      	mov	r0, r3
 8004180:	3718      	adds	r7, #24
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	00100002 	.word	0x00100002
 800418c:	ffff0000 	.word	0xffff0000

08004190 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b08c      	sub	sp, #48	; 0x30
 8004194:	af02      	add	r7, sp, #8
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	4608      	mov	r0, r1
 800419a:	4611      	mov	r1, r2
 800419c:	461a      	mov	r2, r3
 800419e:	4603      	mov	r3, r0
 80041a0:	817b      	strh	r3, [r7, #10]
 80041a2:	460b      	mov	r3, r1
 80041a4:	813b      	strh	r3, [r7, #8]
 80041a6:	4613      	mov	r3, r2
 80041a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80041aa:	f7fe fee5 	bl	8002f78 <HAL_GetTick>
 80041ae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	2b20      	cmp	r3, #32
 80041ba:	f040 8208 	bne.w	80045ce <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c0:	9300      	str	r3, [sp, #0]
 80041c2:	2319      	movs	r3, #25
 80041c4:	2201      	movs	r2, #1
 80041c6:	497b      	ldr	r1, [pc, #492]	; (80043b4 <HAL_I2C_Mem_Read+0x224>)
 80041c8:	68f8      	ldr	r0, [r7, #12]
 80041ca:	f000 fb81 	bl	80048d0 <I2C_WaitOnFlagUntilTimeout>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d001      	beq.n	80041d8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80041d4:	2302      	movs	r3, #2
 80041d6:	e1fb      	b.n	80045d0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d101      	bne.n	80041e6 <HAL_I2C_Mem_Read+0x56>
 80041e2:	2302      	movs	r3, #2
 80041e4:	e1f4      	b.n	80045d0 <HAL_I2C_Mem_Read+0x440>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0301 	and.w	r3, r3, #1
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d007      	beq.n	800420c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f042 0201 	orr.w	r2, r2, #1
 800420a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800421a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2222      	movs	r2, #34	; 0x22
 8004220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2240      	movs	r2, #64	; 0x40
 8004228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2200      	movs	r2, #0
 8004230:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004236:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800423c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004242:	b29a      	uxth	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	4a5b      	ldr	r2, [pc, #364]	; (80043b8 <HAL_I2C_Mem_Read+0x228>)
 800424c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800424e:	88f8      	ldrh	r0, [r7, #6]
 8004250:	893a      	ldrh	r2, [r7, #8]
 8004252:	8979      	ldrh	r1, [r7, #10]
 8004254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004256:	9301      	str	r3, [sp, #4]
 8004258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800425a:	9300      	str	r3, [sp, #0]
 800425c:	4603      	mov	r3, r0
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	f000 fa50 	bl	8004704 <I2C_RequestMemoryRead>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d001      	beq.n	800426e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e1b0      	b.n	80045d0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004272:	2b00      	cmp	r3, #0
 8004274:	d113      	bne.n	800429e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004276:	2300      	movs	r3, #0
 8004278:	623b      	str	r3, [r7, #32]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	695b      	ldr	r3, [r3, #20]
 8004280:	623b      	str	r3, [r7, #32]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	623b      	str	r3, [r7, #32]
 800428a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800429a:	601a      	str	r2, [r3, #0]
 800429c:	e184      	b.n	80045a8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d11b      	bne.n	80042de <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042b6:	2300      	movs	r3, #0
 80042b8:	61fb      	str	r3, [r7, #28]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	695b      	ldr	r3, [r3, #20]
 80042c0:	61fb      	str	r3, [r7, #28]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	699b      	ldr	r3, [r3, #24]
 80042c8:	61fb      	str	r3, [r7, #28]
 80042ca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042da:	601a      	str	r2, [r3, #0]
 80042dc:	e164      	b.n	80045a8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d11b      	bne.n	800431e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042f4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004304:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004306:	2300      	movs	r3, #0
 8004308:	61bb      	str	r3, [r7, #24]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	695b      	ldr	r3, [r3, #20]
 8004310:	61bb      	str	r3, [r7, #24]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	61bb      	str	r3, [r7, #24]
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	e144      	b.n	80045a8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800431e:	2300      	movs	r3, #0
 8004320:	617b      	str	r3, [r7, #20]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	695b      	ldr	r3, [r3, #20]
 8004328:	617b      	str	r3, [r7, #20]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	617b      	str	r3, [r7, #20]
 8004332:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004334:	e138      	b.n	80045a8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800433a:	2b03      	cmp	r3, #3
 800433c:	f200 80f1 	bhi.w	8004522 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004344:	2b01      	cmp	r3, #1
 8004346:	d123      	bne.n	8004390 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800434a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800434c:	68f8      	ldr	r0, [r7, #12]
 800434e:	f000 fc17 	bl	8004b80 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d001      	beq.n	800435c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e139      	b.n	80045d0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	691a      	ldr	r2, [r3, #16]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004366:	b2d2      	uxtb	r2, r2
 8004368:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436e:	1c5a      	adds	r2, r3, #1
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004378:	3b01      	subs	r3, #1
 800437a:	b29a      	uxth	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004384:	b29b      	uxth	r3, r3
 8004386:	3b01      	subs	r3, #1
 8004388:	b29a      	uxth	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800438e:	e10b      	b.n	80045a8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004394:	2b02      	cmp	r3, #2
 8004396:	d14e      	bne.n	8004436 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439a:	9300      	str	r3, [sp, #0]
 800439c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800439e:	2200      	movs	r2, #0
 80043a0:	4906      	ldr	r1, [pc, #24]	; (80043bc <HAL_I2C_Mem_Read+0x22c>)
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	f000 fa94 	bl	80048d0 <I2C_WaitOnFlagUntilTimeout>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d008      	beq.n	80043c0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e10e      	b.n	80045d0 <HAL_I2C_Mem_Read+0x440>
 80043b2:	bf00      	nop
 80043b4:	00100002 	.word	0x00100002
 80043b8:	ffff0000 	.word	0xffff0000
 80043bc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	691a      	ldr	r2, [r3, #16]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043da:	b2d2      	uxtb	r2, r2
 80043dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e2:	1c5a      	adds	r2, r3, #1
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ec:	3b01      	subs	r3, #1
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	3b01      	subs	r3, #1
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	691a      	ldr	r2, [r3, #16]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440c:	b2d2      	uxtb	r2, r2
 800440e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004414:	1c5a      	adds	r2, r3, #1
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800441e:	3b01      	subs	r3, #1
 8004420:	b29a      	uxth	r2, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800442a:	b29b      	uxth	r3, r3
 800442c:	3b01      	subs	r3, #1
 800442e:	b29a      	uxth	r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004434:	e0b8      	b.n	80045a8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004438:	9300      	str	r3, [sp, #0]
 800443a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800443c:	2200      	movs	r2, #0
 800443e:	4966      	ldr	r1, [pc, #408]	; (80045d8 <HAL_I2C_Mem_Read+0x448>)
 8004440:	68f8      	ldr	r0, [r7, #12]
 8004442:	f000 fa45 	bl	80048d0 <I2C_WaitOnFlagUntilTimeout>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d001      	beq.n	8004450 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e0bf      	b.n	80045d0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800445e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	691a      	ldr	r2, [r3, #16]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446a:	b2d2      	uxtb	r2, r2
 800446c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004472:	1c5a      	adds	r2, r3, #1
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800447c:	3b01      	subs	r3, #1
 800447e:	b29a      	uxth	r2, r3
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004488:	b29b      	uxth	r3, r3
 800448a:	3b01      	subs	r3, #1
 800448c:	b29a      	uxth	r2, r3
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004494:	9300      	str	r3, [sp, #0]
 8004496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004498:	2200      	movs	r2, #0
 800449a:	494f      	ldr	r1, [pc, #316]	; (80045d8 <HAL_I2C_Mem_Read+0x448>)
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	f000 fa17 	bl	80048d0 <I2C_WaitOnFlagUntilTimeout>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d001      	beq.n	80044ac <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e091      	b.n	80045d0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	691a      	ldr	r2, [r3, #16]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c6:	b2d2      	uxtb	r2, r2
 80044c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ce:	1c5a      	adds	r2, r3, #1
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044d8:	3b01      	subs	r3, #1
 80044da:	b29a      	uxth	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	3b01      	subs	r3, #1
 80044e8:	b29a      	uxth	r2, r3
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	691a      	ldr	r2, [r3, #16]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f8:	b2d2      	uxtb	r2, r2
 80044fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004500:	1c5a      	adds	r2, r3, #1
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800450a:	3b01      	subs	r3, #1
 800450c:	b29a      	uxth	r2, r3
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004516:	b29b      	uxth	r3, r3
 8004518:	3b01      	subs	r3, #1
 800451a:	b29a      	uxth	r2, r3
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004520:	e042      	b.n	80045a8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004524:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004526:	68f8      	ldr	r0, [r7, #12]
 8004528:	f000 fb2a 	bl	8004b80 <I2C_WaitOnRXNEFlagUntilTimeout>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d001      	beq.n	8004536 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e04c      	b.n	80045d0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	691a      	ldr	r2, [r3, #16]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004540:	b2d2      	uxtb	r2, r2
 8004542:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004548:	1c5a      	adds	r2, r3, #1
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004552:	3b01      	subs	r3, #1
 8004554:	b29a      	uxth	r2, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800455e:	b29b      	uxth	r3, r3
 8004560:	3b01      	subs	r3, #1
 8004562:	b29a      	uxth	r2, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	f003 0304 	and.w	r3, r3, #4
 8004572:	2b04      	cmp	r3, #4
 8004574:	d118      	bne.n	80045a8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	691a      	ldr	r2, [r3, #16]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004580:	b2d2      	uxtb	r2, r2
 8004582:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004588:	1c5a      	adds	r2, r3, #1
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004592:	3b01      	subs	r3, #1
 8004594:	b29a      	uxth	r2, r3
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800459e:	b29b      	uxth	r3, r3
 80045a0:	3b01      	subs	r3, #1
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f47f aec2 	bne.w	8004336 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2220      	movs	r2, #32
 80045b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80045ca:	2300      	movs	r3, #0
 80045cc:	e000      	b.n	80045d0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80045ce:	2302      	movs	r3, #2
  }
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3728      	adds	r7, #40	; 0x28
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	00010004 	.word	0x00010004

080045dc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b088      	sub	sp, #32
 80045e0:	af02      	add	r7, sp, #8
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	4608      	mov	r0, r1
 80045e6:	4611      	mov	r1, r2
 80045e8:	461a      	mov	r2, r3
 80045ea:	4603      	mov	r3, r0
 80045ec:	817b      	strh	r3, [r7, #10]
 80045ee:	460b      	mov	r3, r1
 80045f0:	813b      	strh	r3, [r7, #8]
 80045f2:	4613      	mov	r3, r2
 80045f4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004604:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004608:	9300      	str	r3, [sp, #0]
 800460a:	6a3b      	ldr	r3, [r7, #32]
 800460c:	2200      	movs	r2, #0
 800460e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f000 f95c 	bl	80048d0 <I2C_WaitOnFlagUntilTimeout>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00c      	beq.n	8004638 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004628:	2b00      	cmp	r3, #0
 800462a:	d003      	beq.n	8004634 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004632:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e05f      	b.n	80046f8 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004638:	897b      	ldrh	r3, [r7, #10]
 800463a:	b2db      	uxtb	r3, r3
 800463c:	461a      	mov	r2, r3
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004646:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464a:	6a3a      	ldr	r2, [r7, #32]
 800464c:	492c      	ldr	r1, [pc, #176]	; (8004700 <I2C_RequestMemoryWrite+0x124>)
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	f000 f995 	bl	800497e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d001      	beq.n	800465e <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e04c      	b.n	80046f8 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800465e:	2300      	movs	r3, #0
 8004660:	617b      	str	r3, [r7, #20]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	695b      	ldr	r3, [r3, #20]
 8004668:	617b      	str	r3, [r7, #20]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	699b      	ldr	r3, [r3, #24]
 8004670:	617b      	str	r3, [r7, #20]
 8004672:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004674:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004676:	6a39      	ldr	r1, [r7, #32]
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f000 f9ff 	bl	8004a7c <I2C_WaitOnTXEFlagUntilTimeout>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00d      	beq.n	80046a0 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004688:	2b04      	cmp	r3, #4
 800468a:	d107      	bne.n	800469c <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800469a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e02b      	b.n	80046f8 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80046a0:	88fb      	ldrh	r3, [r7, #6]
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d105      	bne.n	80046b2 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046a6:	893b      	ldrh	r3, [r7, #8]
 80046a8:	b2da      	uxtb	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	611a      	str	r2, [r3, #16]
 80046b0:	e021      	b.n	80046f6 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80046b2:	893b      	ldrh	r3, [r7, #8]
 80046b4:	0a1b      	lsrs	r3, r3, #8
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	b2da      	uxtb	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046c2:	6a39      	ldr	r1, [r7, #32]
 80046c4:	68f8      	ldr	r0, [r7, #12]
 80046c6:	f000 f9d9 	bl	8004a7c <I2C_WaitOnTXEFlagUntilTimeout>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00d      	beq.n	80046ec <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d4:	2b04      	cmp	r3, #4
 80046d6:	d107      	bne.n	80046e8 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046e6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e005      	b.n	80046f8 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046ec:	893b      	ldrh	r3, [r7, #8]
 80046ee:	b2da      	uxtb	r2, r3
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3718      	adds	r7, #24
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	00010002 	.word	0x00010002

08004704 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b088      	sub	sp, #32
 8004708:	af02      	add	r7, sp, #8
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	4608      	mov	r0, r1
 800470e:	4611      	mov	r1, r2
 8004710:	461a      	mov	r2, r3
 8004712:	4603      	mov	r3, r0
 8004714:	817b      	strh	r3, [r7, #10]
 8004716:	460b      	mov	r3, r1
 8004718:	813b      	strh	r3, [r7, #8]
 800471a:	4613      	mov	r3, r2
 800471c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800472c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800473c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800473e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004740:	9300      	str	r3, [sp, #0]
 8004742:	6a3b      	ldr	r3, [r7, #32]
 8004744:	2200      	movs	r2, #0
 8004746:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800474a:	68f8      	ldr	r0, [r7, #12]
 800474c:	f000 f8c0 	bl	80048d0 <I2C_WaitOnFlagUntilTimeout>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00c      	beq.n	8004770 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004760:	2b00      	cmp	r3, #0
 8004762:	d003      	beq.n	800476c <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f44f 7200 	mov.w	r2, #512	; 0x200
 800476a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e0a9      	b.n	80048c4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004770:	897b      	ldrh	r3, [r7, #10]
 8004772:	b2db      	uxtb	r3, r3
 8004774:	461a      	mov	r2, r3
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800477e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004782:	6a3a      	ldr	r2, [r7, #32]
 8004784:	4951      	ldr	r1, [pc, #324]	; (80048cc <I2C_RequestMemoryRead+0x1c8>)
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f000 f8f9 	bl	800497e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d001      	beq.n	8004796 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e096      	b.n	80048c4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004796:	2300      	movs	r3, #0
 8004798:	617b      	str	r3, [r7, #20]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	695b      	ldr	r3, [r3, #20]
 80047a0:	617b      	str	r3, [r7, #20]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	699b      	ldr	r3, [r3, #24]
 80047a8:	617b      	str	r3, [r7, #20]
 80047aa:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ae:	6a39      	ldr	r1, [r7, #32]
 80047b0:	68f8      	ldr	r0, [r7, #12]
 80047b2:	f000 f963 	bl	8004a7c <I2C_WaitOnTXEFlagUntilTimeout>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d00d      	beq.n	80047d8 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c0:	2b04      	cmp	r3, #4
 80047c2:	d107      	bne.n	80047d4 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047d2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e075      	b.n	80048c4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80047d8:	88fb      	ldrh	r3, [r7, #6]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d105      	bne.n	80047ea <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80047de:	893b      	ldrh	r3, [r7, #8]
 80047e0:	b2da      	uxtb	r2, r3
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	611a      	str	r2, [r3, #16]
 80047e8:	e021      	b.n	800482e <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80047ea:	893b      	ldrh	r3, [r7, #8]
 80047ec:	0a1b      	lsrs	r3, r3, #8
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	b2da      	uxtb	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047fa:	6a39      	ldr	r1, [r7, #32]
 80047fc:	68f8      	ldr	r0, [r7, #12]
 80047fe:	f000 f93d 	bl	8004a7c <I2C_WaitOnTXEFlagUntilTimeout>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d00d      	beq.n	8004824 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480c:	2b04      	cmp	r3, #4
 800480e:	d107      	bne.n	8004820 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800481e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e04f      	b.n	80048c4 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004824:	893b      	ldrh	r3, [r7, #8]
 8004826:	b2da      	uxtb	r2, r3
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800482e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004830:	6a39      	ldr	r1, [r7, #32]
 8004832:	68f8      	ldr	r0, [r7, #12]
 8004834:	f000 f922 	bl	8004a7c <I2C_WaitOnTXEFlagUntilTimeout>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00d      	beq.n	800485a <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004842:	2b04      	cmp	r3, #4
 8004844:	d107      	bne.n	8004856 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004854:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e034      	b.n	80048c4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004868:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800486a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486c:	9300      	str	r3, [sp, #0]
 800486e:	6a3b      	ldr	r3, [r7, #32]
 8004870:	2200      	movs	r2, #0
 8004872:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	f000 f82a 	bl	80048d0 <I2C_WaitOnFlagUntilTimeout>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00c      	beq.n	800489c <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800488c:	2b00      	cmp	r3, #0
 800488e:	d003      	beq.n	8004898 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004896:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e013      	b.n	80048c4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800489c:	897b      	ldrh	r3, [r7, #10]
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	f043 0301 	orr.w	r3, r3, #1
 80048a4:	b2da      	uxtb	r2, r3
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ae:	6a3a      	ldr	r2, [r7, #32]
 80048b0:	4906      	ldr	r1, [pc, #24]	; (80048cc <I2C_RequestMemoryRead+0x1c8>)
 80048b2:	68f8      	ldr	r0, [r7, #12]
 80048b4:	f000 f863 	bl	800497e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d001      	beq.n	80048c2 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e000      	b.n	80048c4 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 80048c2:	2300      	movs	r3, #0
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3718      	adds	r7, #24
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	00010002 	.word	0x00010002

080048d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	60b9      	str	r1, [r7, #8]
 80048da:	603b      	str	r3, [r7, #0]
 80048dc:	4613      	mov	r3, r2
 80048de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048e0:	e025      	b.n	800492e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e8:	d021      	beq.n	800492e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048ea:	f7fe fb45 	bl	8002f78 <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	683a      	ldr	r2, [r7, #0]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d302      	bcc.n	8004900 <I2C_WaitOnFlagUntilTimeout+0x30>
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d116      	bne.n	800492e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2220      	movs	r2, #32
 800490a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2200      	movs	r2, #0
 8004912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491a:	f043 0220 	orr.w	r2, r3, #32
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e023      	b.n	8004976 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	0c1b      	lsrs	r3, r3, #16
 8004932:	b2db      	uxtb	r3, r3
 8004934:	2b01      	cmp	r3, #1
 8004936:	d10d      	bne.n	8004954 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	43da      	mvns	r2, r3
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	4013      	ands	r3, r2
 8004944:	b29b      	uxth	r3, r3
 8004946:	2b00      	cmp	r3, #0
 8004948:	bf0c      	ite	eq
 800494a:	2301      	moveq	r3, #1
 800494c:	2300      	movne	r3, #0
 800494e:	b2db      	uxtb	r3, r3
 8004950:	461a      	mov	r2, r3
 8004952:	e00c      	b.n	800496e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	43da      	mvns	r2, r3
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	4013      	ands	r3, r2
 8004960:	b29b      	uxth	r3, r3
 8004962:	2b00      	cmp	r3, #0
 8004964:	bf0c      	ite	eq
 8004966:	2301      	moveq	r3, #1
 8004968:	2300      	movne	r3, #0
 800496a:	b2db      	uxtb	r3, r3
 800496c:	461a      	mov	r2, r3
 800496e:	79fb      	ldrb	r3, [r7, #7]
 8004970:	429a      	cmp	r2, r3
 8004972:	d0b6      	beq.n	80048e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}

0800497e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800497e:	b580      	push	{r7, lr}
 8004980:	b084      	sub	sp, #16
 8004982:	af00      	add	r7, sp, #0
 8004984:	60f8      	str	r0, [r7, #12]
 8004986:	60b9      	str	r1, [r7, #8]
 8004988:	607a      	str	r2, [r7, #4]
 800498a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800498c:	e051      	b.n	8004a32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	695b      	ldr	r3, [r3, #20]
 8004994:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004998:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800499c:	d123      	bne.n	80049e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049ac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80049b6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2200      	movs	r2, #0
 80049bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2220      	movs	r2, #32
 80049c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d2:	f043 0204 	orr.w	r2, r3, #4
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e046      	b.n	8004a74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ec:	d021      	beq.n	8004a32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ee:	f7fe fac3 	bl	8002f78 <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d302      	bcc.n	8004a04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d116      	bne.n	8004a32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2220      	movs	r2, #32
 8004a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1e:	f043 0220 	orr.w	r2, r3, #32
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e020      	b.n	8004a74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	0c1b      	lsrs	r3, r3, #16
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d10c      	bne.n	8004a56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	695b      	ldr	r3, [r3, #20]
 8004a42:	43da      	mvns	r2, r3
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	4013      	ands	r3, r2
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	bf14      	ite	ne
 8004a4e:	2301      	movne	r3, #1
 8004a50:	2300      	moveq	r3, #0
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	e00b      	b.n	8004a6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	699b      	ldr	r3, [r3, #24]
 8004a5c:	43da      	mvns	r2, r3
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	4013      	ands	r3, r2
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	bf14      	ite	ne
 8004a68:	2301      	movne	r3, #1
 8004a6a:	2300      	moveq	r3, #0
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d18d      	bne.n	800498e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3710      	adds	r7, #16
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a88:	e02d      	b.n	8004ae6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a8a:	68f8      	ldr	r0, [r7, #12]
 8004a8c:	f000 f8ce 	bl	8004c2c <I2C_IsAcknowledgeFailed>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d001      	beq.n	8004a9a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e02d      	b.n	8004af6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa0:	d021      	beq.n	8004ae6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aa2:	f7fe fa69 	bl	8002f78 <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	68ba      	ldr	r2, [r7, #8]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d302      	bcc.n	8004ab8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d116      	bne.n	8004ae6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2200      	movs	r2, #0
 8004abc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2220      	movs	r2, #32
 8004ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad2:	f043 0220 	orr.w	r2, r3, #32
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e007      	b.n	8004af6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	695b      	ldr	r3, [r3, #20]
 8004aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004af0:	2b80      	cmp	r3, #128	; 0x80
 8004af2:	d1ca      	bne.n	8004a8a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3710      	adds	r7, #16
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b084      	sub	sp, #16
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	60f8      	str	r0, [r7, #12]
 8004b06:	60b9      	str	r1, [r7, #8]
 8004b08:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b0a:	e02d      	b.n	8004b68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b0c:	68f8      	ldr	r0, [r7, #12]
 8004b0e:	f000 f88d 	bl	8004c2c <I2C_IsAcknowledgeFailed>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d001      	beq.n	8004b1c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e02d      	b.n	8004b78 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b22:	d021      	beq.n	8004b68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b24:	f7fe fa28 	bl	8002f78 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	68ba      	ldr	r2, [r7, #8]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d302      	bcc.n	8004b3a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d116      	bne.n	8004b68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2220      	movs	r2, #32
 8004b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b54:	f043 0220 	orr.w	r2, r3, #32
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e007      	b.n	8004b78 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	695b      	ldr	r3, [r3, #20]
 8004b6e:	f003 0304 	and.w	r3, r3, #4
 8004b72:	2b04      	cmp	r3, #4
 8004b74:	d1ca      	bne.n	8004b0c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3710      	adds	r7, #16
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b8c:	e042      	b.n	8004c14 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	695b      	ldr	r3, [r3, #20]
 8004b94:	f003 0310 	and.w	r3, r3, #16
 8004b98:	2b10      	cmp	r3, #16
 8004b9a:	d119      	bne.n	8004bd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f06f 0210 	mvn.w	r2, #16
 8004ba4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2220      	movs	r2, #32
 8004bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e029      	b.n	8004c24 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bd0:	f7fe f9d2 	bl	8002f78 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	68ba      	ldr	r2, [r7, #8]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d302      	bcc.n	8004be6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d116      	bne.n	8004c14 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2220      	movs	r2, #32
 8004bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c00:	f043 0220 	orr.w	r2, r3, #32
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e007      	b.n	8004c24 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c1e:	2b40      	cmp	r3, #64	; 0x40
 8004c20:	d1b5      	bne.n	8004b8e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3710      	adds	r7, #16
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	695b      	ldr	r3, [r3, #20]
 8004c3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c42:	d11b      	bne.n	8004c7c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c4c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2220      	movs	r2, #32
 8004c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c68:	f043 0204 	orr.w	r2, r3, #4
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e000      	b.n	8004c7e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	370c      	adds	r7, #12
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr

08004c8a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004c8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c8c:	b08f      	sub	sp, #60	; 0x3c
 8004c8e:	af0a      	add	r7, sp, #40	; 0x28
 8004c90:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d101      	bne.n	8004c9c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e10f      	b.n	8004ebc <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d106      	bne.n	8004cbc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f008 f93e 	bl	800cf38 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2203      	movs	r2, #3
 8004cc0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d102      	bne.n	8004cd6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f004 feef 	bl	8009abe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	603b      	str	r3, [r7, #0]
 8004ce6:	687e      	ldr	r6, [r7, #4]
 8004ce8:	466d      	mov	r5, sp
 8004cea:	f106 0410 	add.w	r4, r6, #16
 8004cee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cf0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004cf2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cf4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004cf6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004cfa:	e885 0003 	stmia.w	r5, {r0, r1}
 8004cfe:	1d33      	adds	r3, r6, #4
 8004d00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d02:	6838      	ldr	r0, [r7, #0]
 8004d04:	f004 fdc6 	bl	8009894 <USB_CoreInit>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d005      	beq.n	8004d1a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2202      	movs	r2, #2
 8004d12:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e0d0      	b.n	8004ebc <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2100      	movs	r1, #0
 8004d20:	4618      	mov	r0, r3
 8004d22:	f004 fedd 	bl	8009ae0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d26:	2300      	movs	r3, #0
 8004d28:	73fb      	strb	r3, [r7, #15]
 8004d2a:	e04a      	b.n	8004dc2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004d2c:	7bfa      	ldrb	r2, [r7, #15]
 8004d2e:	6879      	ldr	r1, [r7, #4]
 8004d30:	4613      	mov	r3, r2
 8004d32:	00db      	lsls	r3, r3, #3
 8004d34:	1a9b      	subs	r3, r3, r2
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	440b      	add	r3, r1
 8004d3a:	333d      	adds	r3, #61	; 0x3d
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004d40:	7bfa      	ldrb	r2, [r7, #15]
 8004d42:	6879      	ldr	r1, [r7, #4]
 8004d44:	4613      	mov	r3, r2
 8004d46:	00db      	lsls	r3, r3, #3
 8004d48:	1a9b      	subs	r3, r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	440b      	add	r3, r1
 8004d4e:	333c      	adds	r3, #60	; 0x3c
 8004d50:	7bfa      	ldrb	r2, [r7, #15]
 8004d52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004d54:	7bfa      	ldrb	r2, [r7, #15]
 8004d56:	7bfb      	ldrb	r3, [r7, #15]
 8004d58:	b298      	uxth	r0, r3
 8004d5a:	6879      	ldr	r1, [r7, #4]
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	00db      	lsls	r3, r3, #3
 8004d60:	1a9b      	subs	r3, r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	440b      	add	r3, r1
 8004d66:	3342      	adds	r3, #66	; 0x42
 8004d68:	4602      	mov	r2, r0
 8004d6a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004d6c:	7bfa      	ldrb	r2, [r7, #15]
 8004d6e:	6879      	ldr	r1, [r7, #4]
 8004d70:	4613      	mov	r3, r2
 8004d72:	00db      	lsls	r3, r3, #3
 8004d74:	1a9b      	subs	r3, r3, r2
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	440b      	add	r3, r1
 8004d7a:	333f      	adds	r3, #63	; 0x3f
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004d80:	7bfa      	ldrb	r2, [r7, #15]
 8004d82:	6879      	ldr	r1, [r7, #4]
 8004d84:	4613      	mov	r3, r2
 8004d86:	00db      	lsls	r3, r3, #3
 8004d88:	1a9b      	subs	r3, r3, r2
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	440b      	add	r3, r1
 8004d8e:	3344      	adds	r3, #68	; 0x44
 8004d90:	2200      	movs	r2, #0
 8004d92:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004d94:	7bfa      	ldrb	r2, [r7, #15]
 8004d96:	6879      	ldr	r1, [r7, #4]
 8004d98:	4613      	mov	r3, r2
 8004d9a:	00db      	lsls	r3, r3, #3
 8004d9c:	1a9b      	subs	r3, r3, r2
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	440b      	add	r3, r1
 8004da2:	3348      	adds	r3, #72	; 0x48
 8004da4:	2200      	movs	r2, #0
 8004da6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004da8:	7bfa      	ldrb	r2, [r7, #15]
 8004daa:	6879      	ldr	r1, [r7, #4]
 8004dac:	4613      	mov	r3, r2
 8004dae:	00db      	lsls	r3, r3, #3
 8004db0:	1a9b      	subs	r3, r3, r2
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	440b      	add	r3, r1
 8004db6:	3350      	adds	r3, #80	; 0x50
 8004db8:	2200      	movs	r2, #0
 8004dba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004dbc:	7bfb      	ldrb	r3, [r7, #15]
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	73fb      	strb	r3, [r7, #15]
 8004dc2:	7bfa      	ldrb	r2, [r7, #15]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d3af      	bcc.n	8004d2c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004dcc:	2300      	movs	r3, #0
 8004dce:	73fb      	strb	r3, [r7, #15]
 8004dd0:	e044      	b.n	8004e5c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004dd2:	7bfa      	ldrb	r2, [r7, #15]
 8004dd4:	6879      	ldr	r1, [r7, #4]
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	00db      	lsls	r3, r3, #3
 8004dda:	1a9b      	subs	r3, r3, r2
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	440b      	add	r3, r1
 8004de0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004de4:	2200      	movs	r2, #0
 8004de6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004de8:	7bfa      	ldrb	r2, [r7, #15]
 8004dea:	6879      	ldr	r1, [r7, #4]
 8004dec:	4613      	mov	r3, r2
 8004dee:	00db      	lsls	r3, r3, #3
 8004df0:	1a9b      	subs	r3, r3, r2
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	440b      	add	r3, r1
 8004df6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004dfa:	7bfa      	ldrb	r2, [r7, #15]
 8004dfc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004dfe:	7bfa      	ldrb	r2, [r7, #15]
 8004e00:	6879      	ldr	r1, [r7, #4]
 8004e02:	4613      	mov	r3, r2
 8004e04:	00db      	lsls	r3, r3, #3
 8004e06:	1a9b      	subs	r3, r3, r2
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	440b      	add	r3, r1
 8004e0c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004e10:	2200      	movs	r2, #0
 8004e12:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004e14:	7bfa      	ldrb	r2, [r7, #15]
 8004e16:	6879      	ldr	r1, [r7, #4]
 8004e18:	4613      	mov	r3, r2
 8004e1a:	00db      	lsls	r3, r3, #3
 8004e1c:	1a9b      	subs	r3, r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	440b      	add	r3, r1
 8004e22:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004e26:	2200      	movs	r2, #0
 8004e28:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004e2a:	7bfa      	ldrb	r2, [r7, #15]
 8004e2c:	6879      	ldr	r1, [r7, #4]
 8004e2e:	4613      	mov	r3, r2
 8004e30:	00db      	lsls	r3, r3, #3
 8004e32:	1a9b      	subs	r3, r3, r2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	440b      	add	r3, r1
 8004e38:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004e40:	7bfa      	ldrb	r2, [r7, #15]
 8004e42:	6879      	ldr	r1, [r7, #4]
 8004e44:	4613      	mov	r3, r2
 8004e46:	00db      	lsls	r3, r3, #3
 8004e48:	1a9b      	subs	r3, r3, r2
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	440b      	add	r3, r1
 8004e4e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004e52:	2200      	movs	r2, #0
 8004e54:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e56:	7bfb      	ldrb	r3, [r7, #15]
 8004e58:	3301      	adds	r3, #1
 8004e5a:	73fb      	strb	r3, [r7, #15]
 8004e5c:	7bfa      	ldrb	r2, [r7, #15]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d3b5      	bcc.n	8004dd2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	603b      	str	r3, [r7, #0]
 8004e6c:	687e      	ldr	r6, [r7, #4]
 8004e6e:	466d      	mov	r5, sp
 8004e70:	f106 0410 	add.w	r4, r6, #16
 8004e74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e7c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004e80:	e885 0003 	stmia.w	r5, {r0, r1}
 8004e84:	1d33      	adds	r3, r6, #4
 8004e86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e88:	6838      	ldr	r0, [r7, #0]
 8004e8a:	f004 fe53 	bl	8009b34 <USB_DevInit>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d005      	beq.n	8004ea0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2202      	movs	r2, #2
 8004e98:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e00d      	b.n	8004ebc <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f005 fe48 	bl	800ab4a <USB_DevDisconnect>

  return HAL_OK;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3714      	adds	r7, #20
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004ec4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d101      	bne.n	8004ee0 <HAL_PCD_Start+0x1c>
 8004edc:	2302      	movs	r3, #2
 8004ede:	e020      	b.n	8004f22 <HAL_PCD_Start+0x5e>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d109      	bne.n	8004f04 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d005      	beq.n	8004f04 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f005 fe06 	bl	800ab1a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4618      	mov	r0, r3
 8004f14:	f004 fdc2 	bl	8009a9c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3710      	adds	r7, #16
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}

08004f2a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004f2a:	b590      	push	{r4, r7, lr}
 8004f2c:	b08d      	sub	sp, #52	; 0x34
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f38:	6a3b      	ldr	r3, [r7, #32]
 8004f3a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4618      	mov	r0, r3
 8004f42:	f005 fead 	bl	800aca0 <USB_GetMode>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	f040 838e 	bne.w	800566a <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4618      	mov	r0, r3
 8004f54:	f005 fe11 	bl	800ab7a <USB_ReadInterrupts>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	f000 8384 	beq.w	8005668 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4618      	mov	r0, r3
 8004f66:	f005 fe08 	bl	800ab7a <USB_ReadInterrupts>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	f003 0302 	and.w	r3, r3, #2
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d107      	bne.n	8004f84 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	695a      	ldr	r2, [r3, #20]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f002 0202 	and.w	r2, r2, #2
 8004f82:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f005 fdf6 	bl	800ab7a <USB_ReadInterrupts>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f94:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004f98:	d17b      	bne.n	8005092 <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f005 fdfc 	bl	800aba0 <USB_ReadDevAllOutEpInterrupt>
 8004fa8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004faa:	e06f      	b.n	800508c <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fae:	f003 0301 	and.w	r3, r3, #1
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d064      	beq.n	8005080 <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fbc:	b2d2      	uxtb	r2, r2
 8004fbe:	4611      	mov	r1, r2
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f005 fe21 	bl	800ac08 <USB_ReadDevOutEPInterrupt>
 8004fc6:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00c      	beq.n	8004fec <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd4:	015a      	lsls	r2, r3, #5
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	4413      	add	r3, r2
 8004fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fde:	461a      	mov	r2, r3
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004fe4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 fe0e 	bl	8005c08 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	f003 0308 	and.w	r3, r3, #8
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00c      	beq.n	8005010 <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004ff6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 ff0d 	bl	8005e18 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005000:	015a      	lsls	r2, r3, #5
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	4413      	add	r3, r2
 8005006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800500a:	461a      	mov	r2, r3
 800500c:	2308      	movs	r3, #8
 800500e:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	f003 0310 	and.w	r3, r3, #16
 8005016:	2b00      	cmp	r3, #0
 8005018:	d008      	beq.n	800502c <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800501a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501c:	015a      	lsls	r2, r3, #5
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	4413      	add	r3, r2
 8005022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005026:	461a      	mov	r2, r3
 8005028:	2310      	movs	r3, #16
 800502a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	f003 0320 	and.w	r3, r3, #32
 8005032:	2b00      	cmp	r3, #0
 8005034:	d015      	beq.n	8005062 <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	2b01      	cmp	r3, #1
 800503c:	d108      	bne.n	8005050 <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6818      	ldr	r0, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005048:	461a      	mov	r2, r3
 800504a:	2101      	movs	r1, #1
 800504c:	f005 fe6c 	bl	800ad28 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005052:	015a      	lsls	r2, r3, #5
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	4413      	add	r3, r2
 8005058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800505c:	461a      	mov	r2, r3
 800505e:	2320      	movs	r3, #32
 8005060:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d009      	beq.n	8005080 <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800506c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506e:	015a      	lsls	r2, r3, #5
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	4413      	add	r3, r2
 8005074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005078:	461a      	mov	r2, r3
 800507a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800507e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005082:	3301      	adds	r3, #1
 8005084:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005088:	085b      	lsrs	r3, r3, #1
 800508a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800508c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508e:	2b00      	cmp	r3, #0
 8005090:	d18c      	bne.n	8004fac <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4618      	mov	r0, r3
 8005098:	f005 fd6f 	bl	800ab7a <USB_ReadInterrupts>
 800509c:	4603      	mov	r3, r0
 800509e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80050a6:	f040 80c4 	bne.w	8005232 <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4618      	mov	r0, r3
 80050b0:	f005 fd90 	bl	800abd4 <USB_ReadDevAllInEpInterrupt>
 80050b4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80050b6:	2300      	movs	r3, #0
 80050b8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80050ba:	e0b6      	b.n	800522a <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80050bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050be:	f003 0301 	and.w	r3, r3, #1
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	f000 80ab 	beq.w	800521e <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ce:	b2d2      	uxtb	r2, r2
 80050d0:	4611      	mov	r1, r2
 80050d2:	4618      	mov	r0, r3
 80050d4:	f005 fdb6 	bl	800ac44 <USB_ReadDevInEPInterrupt>
 80050d8:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	f003 0301 	and.w	r3, r3, #1
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d05b      	beq.n	800519c <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80050e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e6:	f003 030f 	and.w	r3, r3, #15
 80050ea:	2201      	movs	r2, #1
 80050ec:	fa02 f303 	lsl.w	r3, r2, r3
 80050f0:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	43db      	mvns	r3, r3
 80050fe:	69f9      	ldr	r1, [r7, #28]
 8005100:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005104:	4013      	ands	r3, r2
 8005106:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510a:	015a      	lsls	r2, r3, #5
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	4413      	add	r3, r2
 8005110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005114:	461a      	mov	r2, r3
 8005116:	2301      	movs	r3, #1
 8005118:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	2b01      	cmp	r3, #1
 8005120:	d11b      	bne.n	800515a <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005122:	6879      	ldr	r1, [r7, #4]
 8005124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005126:	4613      	mov	r3, r2
 8005128:	00db      	lsls	r3, r3, #3
 800512a:	1a9b      	subs	r3, r3, r2
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	440b      	add	r3, r1
 8005130:	3348      	adds	r3, #72	; 0x48
 8005132:	6819      	ldr	r1, [r3, #0]
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005138:	4613      	mov	r3, r2
 800513a:	00db      	lsls	r3, r3, #3
 800513c:	1a9b      	subs	r3, r3, r2
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	4403      	add	r3, r0
 8005142:	3344      	adds	r3, #68	; 0x44
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4419      	add	r1, r3
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800514c:	4613      	mov	r3, r2
 800514e:	00db      	lsls	r3, r3, #3
 8005150:	1a9b      	subs	r3, r3, r2
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	4403      	add	r3, r0
 8005156:	3348      	adds	r3, #72	; 0x48
 8005158:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800515a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515c:	b2db      	uxtb	r3, r3
 800515e:	4619      	mov	r1, r3
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f007 ff78 	bl	800d056 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	2b01      	cmp	r3, #1
 800516c:	d116      	bne.n	800519c <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800516e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005170:	2b00      	cmp	r3, #0
 8005172:	d113      	bne.n	800519c <HAL_PCD_IRQHandler+0x272>
 8005174:	6879      	ldr	r1, [r7, #4]
 8005176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005178:	4613      	mov	r3, r2
 800517a:	00db      	lsls	r3, r3, #3
 800517c:	1a9b      	subs	r3, r3, r2
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	440b      	add	r3, r1
 8005182:	3350      	adds	r3, #80	; 0x50
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d108      	bne.n	800519c <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6818      	ldr	r0, [r3, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005194:	461a      	mov	r2, r3
 8005196:	2101      	movs	r1, #1
 8005198:	f005 fdc6 	bl	800ad28 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	f003 0308 	and.w	r3, r3, #8
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d008      	beq.n	80051b8 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80051a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a8:	015a      	lsls	r2, r3, #5
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	4413      	add	r3, r2
 80051ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051b2:	461a      	mov	r2, r3
 80051b4:	2308      	movs	r3, #8
 80051b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	f003 0310 	and.w	r3, r3, #16
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d008      	beq.n	80051d4 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80051c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c4:	015a      	lsls	r2, r3, #5
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	4413      	add	r3, r2
 80051ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ce:	461a      	mov	r2, r3
 80051d0:	2310      	movs	r3, #16
 80051d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d008      	beq.n	80051f0 <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80051de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e0:	015a      	lsls	r2, r3, #5
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	4413      	add	r3, r2
 80051e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ea:	461a      	mov	r2, r3
 80051ec:	2340      	movs	r3, #64	; 0x40
 80051ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	f003 0302 	and.w	r3, r3, #2
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d008      	beq.n	800520c <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80051fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fc:	015a      	lsls	r2, r3, #5
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	4413      	add	r3, r2
 8005202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005206:	461a      	mov	r2, r3
 8005208:	2302      	movs	r3, #2
 800520a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005212:	2b00      	cmp	r3, #0
 8005214:	d003      	beq.n	800521e <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005216:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 fc67 	bl	8005aec <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800521e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005220:	3301      	adds	r3, #1
 8005222:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005226:	085b      	lsrs	r3, r3, #1
 8005228:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800522a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800522c:	2b00      	cmp	r3, #0
 800522e:	f47f af45 	bne.w	80050bc <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4618      	mov	r0, r3
 8005238:	f005 fc9f 	bl	800ab7a <USB_ReadInterrupts>
 800523c:	4603      	mov	r3, r0
 800523e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005242:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005246:	d122      	bne.n	800528e <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	69fa      	ldr	r2, [r7, #28]
 8005252:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005256:	f023 0301 	bic.w	r3, r3, #1
 800525a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005262:	2b01      	cmp	r3, #1
 8005264:	d108      	bne.n	8005278 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800526e:	2100      	movs	r1, #0
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 fe89 	bl	8005f88 <HAL_PCDEx_LPM_Callback>
 8005276:	e002      	b.n	800527e <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f007 ff63 	bl	800d144 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	695a      	ldr	r2, [r3, #20]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800528c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4618      	mov	r0, r3
 8005294:	f005 fc71 	bl	800ab7a <USB_ReadInterrupts>
 8005298:	4603      	mov	r3, r0
 800529a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800529e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052a2:	d112      	bne.n	80052ca <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	f003 0301 	and.w	r3, r3, #1
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d102      	bne.n	80052ba <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f007 ff1f 	bl	800d0f8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	695a      	ldr	r2, [r3, #20]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80052c8:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4618      	mov	r0, r3
 80052d0:	f005 fc53 	bl	800ab7a <USB_ReadInterrupts>
 80052d4:	4603      	mov	r3, r0
 80052d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052de:	f040 80a7 	bne.w	8005430 <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	69fa      	ldr	r2, [r7, #28]
 80052ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052f0:	f023 0301 	bic.w	r3, r3, #1
 80052f4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	2110      	movs	r1, #16
 80052fc:	4618      	mov	r0, r3
 80052fe:	f004 fd8b 	bl	8009e18 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005302:	2300      	movs	r3, #0
 8005304:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005306:	e036      	b.n	8005376 <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800530a:	015a      	lsls	r2, r3, #5
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	4413      	add	r3, r2
 8005310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005314:	461a      	mov	r2, r3
 8005316:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800531a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800531c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800531e:	015a      	lsls	r2, r3, #5
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	4413      	add	r3, r2
 8005324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800532c:	0151      	lsls	r1, r2, #5
 800532e:	69fa      	ldr	r2, [r7, #28]
 8005330:	440a      	add	r2, r1
 8005332:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005336:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800533a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800533c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800533e:	015a      	lsls	r2, r3, #5
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	4413      	add	r3, r2
 8005344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005348:	461a      	mov	r2, r3
 800534a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800534e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005352:	015a      	lsls	r2, r3, #5
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	4413      	add	r3, r2
 8005358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005360:	0151      	lsls	r1, r2, #5
 8005362:	69fa      	ldr	r2, [r7, #28]
 8005364:	440a      	add	r2, r1
 8005366:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800536a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800536e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005372:	3301      	adds	r3, #1
 8005374:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800537c:	429a      	cmp	r2, r3
 800537e:	d3c3      	bcc.n	8005308 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005386:	69db      	ldr	r3, [r3, #28]
 8005388:	69fa      	ldr	r2, [r7, #28]
 800538a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800538e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005392:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005398:	2b00      	cmp	r3, #0
 800539a:	d016      	beq.n	80053ca <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053a6:	69fa      	ldr	r2, [r7, #28]
 80053a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053ac:	f043 030b 	orr.w	r3, r3, #11
 80053b0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053bc:	69fa      	ldr	r2, [r7, #28]
 80053be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053c2:	f043 030b 	orr.w	r3, r3, #11
 80053c6:	6453      	str	r3, [r2, #68]	; 0x44
 80053c8:	e015      	b.n	80053f6 <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053d0:	695b      	ldr	r3, [r3, #20]
 80053d2:	69fa      	ldr	r2, [r7, #28]
 80053d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80053dc:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80053e0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	69fa      	ldr	r2, [r7, #28]
 80053ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053f0:	f043 030b 	orr.w	r3, r3, #11
 80053f4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	69fa      	ldr	r2, [r7, #28]
 8005400:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005404:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005408:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6818      	ldr	r0, [r3, #0]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800541a:	461a      	mov	r2, r3
 800541c:	f005 fc84 	bl	800ad28 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	695a      	ldr	r2, [r3, #20]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800542e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4618      	mov	r0, r3
 8005436:	f005 fba0 	bl	800ab7a <USB_ReadInterrupts>
 800543a:	4603      	mov	r3, r0
 800543c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005440:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005444:	d124      	bne.n	8005490 <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4618      	mov	r0, r3
 800544c:	f005 fc36 	bl	800acbc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4618      	mov	r0, r3
 8005456:	f004 fd40 	bl	8009eda <USB_GetDevSpeed>
 800545a:	4603      	mov	r3, r0
 800545c:	461a      	mov	r2, r3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681c      	ldr	r4, [r3, #0]
 8005466:	f001 f9a3 	bl	80067b0 <HAL_RCC_GetHCLKFreq>
 800546a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005470:	b2db      	uxtb	r3, r3
 8005472:	461a      	mov	r2, r3
 8005474:	4620      	mov	r0, r4
 8005476:	f004 fa6f 	bl	8009958 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f007 fe13 	bl	800d0a6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	695a      	ldr	r2, [r3, #20]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800548e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4618      	mov	r0, r3
 8005496:	f005 fb70 	bl	800ab7a <USB_ReadInterrupts>
 800549a:	4603      	mov	r3, r0
 800549c:	f003 0310 	and.w	r3, r3, #16
 80054a0:	2b10      	cmp	r3, #16
 80054a2:	d161      	bne.n	8005568 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	699a      	ldr	r2, [r3, #24]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f022 0210 	bic.w	r2, r2, #16
 80054b2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80054b4:	6a3b      	ldr	r3, [r7, #32]
 80054b6:	6a1b      	ldr	r3, [r3, #32]
 80054b8:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	f003 020f 	and.w	r2, r3, #15
 80054c0:	4613      	mov	r3, r2
 80054c2:	00db      	lsls	r3, r3, #3
 80054c4:	1a9b      	subs	r3, r3, r2
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	4413      	add	r3, r2
 80054d0:	3304      	adds	r3, #4
 80054d2:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	0c5b      	lsrs	r3, r3, #17
 80054d8:	f003 030f 	and.w	r3, r3, #15
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d124      	bne.n	800552a <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80054e0:	693a      	ldr	r2, [r7, #16]
 80054e2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80054e6:	4013      	ands	r3, r2
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d035      	beq.n	8005558 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	091b      	lsrs	r3, r3, #4
 80054f4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80054f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	461a      	mov	r2, r3
 80054fe:	6a38      	ldr	r0, [r7, #32]
 8005500:	f005 f9e8 	bl	800a8d4 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	68da      	ldr	r2, [r3, #12]
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	091b      	lsrs	r3, r3, #4
 800550c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005510:	441a      	add	r2, r3
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	699a      	ldr	r2, [r3, #24]
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	091b      	lsrs	r3, r3, #4
 800551e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005522:	441a      	add	r2, r3
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	619a      	str	r2, [r3, #24]
 8005528:	e016      	b.n	8005558 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	0c5b      	lsrs	r3, r3, #17
 800552e:	f003 030f 	and.w	r3, r3, #15
 8005532:	2b06      	cmp	r3, #6
 8005534:	d110      	bne.n	8005558 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800553c:	2208      	movs	r2, #8
 800553e:	4619      	mov	r1, r3
 8005540:	6a38      	ldr	r0, [r7, #32]
 8005542:	f005 f9c7 	bl	800a8d4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	699a      	ldr	r2, [r3, #24]
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	091b      	lsrs	r3, r3, #4
 800554e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005552:	441a      	add	r2, r3
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	699a      	ldr	r2, [r3, #24]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f042 0210 	orr.w	r2, r2, #16
 8005566:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4618      	mov	r0, r3
 800556e:	f005 fb04 	bl	800ab7a <USB_ReadInterrupts>
 8005572:	4603      	mov	r3, r0
 8005574:	f003 0308 	and.w	r3, r3, #8
 8005578:	2b08      	cmp	r3, #8
 800557a:	d10a      	bne.n	8005592 <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f007 fd84 	bl	800d08a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	695a      	ldr	r2, [r3, #20]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f002 0208 	and.w	r2, r2, #8
 8005590:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4618      	mov	r0, r3
 8005598:	f005 faef 	bl	800ab7a <USB_ReadInterrupts>
 800559c:	4603      	mov	r3, r0
 800559e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055a6:	d10f      	bne.n	80055c8 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80055a8:	2300      	movs	r3, #0
 80055aa:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80055ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	4619      	mov	r1, r3
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f007 fde6 	bl	800d184 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	695a      	ldr	r2, [r3, #20]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80055c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4618      	mov	r0, r3
 80055ce:	f005 fad4 	bl	800ab7a <USB_ReadInterrupts>
 80055d2:	4603      	mov	r3, r0
 80055d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055dc:	d10f      	bne.n	80055fe <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80055de:	2300      	movs	r3, #0
 80055e0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80055e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	4619      	mov	r1, r3
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f007 fdb9 	bl	800d160 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	695a      	ldr	r2, [r3, #20]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80055fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4618      	mov	r0, r3
 8005604:	f005 fab9 	bl	800ab7a <USB_ReadInterrupts>
 8005608:	4603      	mov	r3, r0
 800560a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800560e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005612:	d10a      	bne.n	800562a <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f007 fdc7 	bl	800d1a8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	695a      	ldr	r2, [r3, #20]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005628:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4618      	mov	r0, r3
 8005630:	f005 faa3 	bl	800ab7a <USB_ReadInterrupts>
 8005634:	4603      	mov	r3, r0
 8005636:	f003 0304 	and.w	r3, r3, #4
 800563a:	2b04      	cmp	r3, #4
 800563c:	d115      	bne.n	800566a <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	f003 0304 	and.w	r3, r3, #4
 800564c:	2b00      	cmp	r3, #0
 800564e:	d002      	beq.n	8005656 <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f007 fdb7 	bl	800d1c4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	6859      	ldr	r1, [r3, #4]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	693a      	ldr	r2, [r7, #16]
 8005662:	430a      	orrs	r2, r1
 8005664:	605a      	str	r2, [r3, #4]
 8005666:	e000      	b.n	800566a <HAL_PCD_IRQHandler+0x740>
      return;
 8005668:	bf00      	nop
    }
  }
}
 800566a:	3734      	adds	r7, #52	; 0x34
 800566c:	46bd      	mov	sp, r7
 800566e:	bd90      	pop	{r4, r7, pc}

08005670 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	460b      	mov	r3, r1
 800567a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005682:	2b01      	cmp	r3, #1
 8005684:	d101      	bne.n	800568a <HAL_PCD_SetAddress+0x1a>
 8005686:	2302      	movs	r3, #2
 8005688:	e013      	b.n	80056b2 <HAL_PCD_SetAddress+0x42>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2201      	movs	r2, #1
 800568e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	78fa      	ldrb	r2, [r7, #3]
 8005696:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	78fa      	ldrb	r2, [r7, #3]
 80056a0:	4611      	mov	r1, r2
 80056a2:	4618      	mov	r0, r3
 80056a4:	f005 fa13 	bl	800aace <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3708      	adds	r7, #8
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80056ba:	b580      	push	{r7, lr}
 80056bc:	b084      	sub	sp, #16
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
 80056c2:	4608      	mov	r0, r1
 80056c4:	4611      	mov	r1, r2
 80056c6:	461a      	mov	r2, r3
 80056c8:	4603      	mov	r3, r0
 80056ca:	70fb      	strb	r3, [r7, #3]
 80056cc:	460b      	mov	r3, r1
 80056ce:	803b      	strh	r3, [r7, #0]
 80056d0:	4613      	mov	r3, r2
 80056d2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80056d4:	2300      	movs	r3, #0
 80056d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80056d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	da0f      	bge.n	8005700 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80056e0:	78fb      	ldrb	r3, [r7, #3]
 80056e2:	f003 020f 	and.w	r2, r3, #15
 80056e6:	4613      	mov	r3, r2
 80056e8:	00db      	lsls	r3, r3, #3
 80056ea:	1a9b      	subs	r3, r3, r2
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	3338      	adds	r3, #56	; 0x38
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	4413      	add	r3, r2
 80056f4:	3304      	adds	r3, #4
 80056f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2201      	movs	r2, #1
 80056fc:	705a      	strb	r2, [r3, #1]
 80056fe:	e00f      	b.n	8005720 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005700:	78fb      	ldrb	r3, [r7, #3]
 8005702:	f003 020f 	and.w	r2, r3, #15
 8005706:	4613      	mov	r3, r2
 8005708:	00db      	lsls	r3, r3, #3
 800570a:	1a9b      	subs	r3, r3, r2
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	4413      	add	r3, r2
 8005716:	3304      	adds	r3, #4
 8005718:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2200      	movs	r2, #0
 800571e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005720:	78fb      	ldrb	r3, [r7, #3]
 8005722:	f003 030f 	and.w	r3, r3, #15
 8005726:	b2da      	uxtb	r2, r3
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800572c:	883a      	ldrh	r2, [r7, #0]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	78ba      	ldrb	r2, [r7, #2]
 8005736:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	785b      	ldrb	r3, [r3, #1]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d004      	beq.n	800574a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	b29a      	uxth	r2, r3
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800574a:	78bb      	ldrb	r3, [r7, #2]
 800574c:	2b02      	cmp	r3, #2
 800574e:	d102      	bne.n	8005756 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800575c:	2b01      	cmp	r3, #1
 800575e:	d101      	bne.n	8005764 <HAL_PCD_EP_Open+0xaa>
 8005760:	2302      	movs	r3, #2
 8005762:	e00e      	b.n	8005782 <HAL_PCD_EP_Open+0xc8>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68f9      	ldr	r1, [r7, #12]
 8005772:	4618      	mov	r0, r3
 8005774:	f004 fbd6 	bl	8009f24 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8005780:	7afb      	ldrb	r3, [r7, #11]
}
 8005782:	4618      	mov	r0, r3
 8005784:	3710      	adds	r7, #16
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}

0800578a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800578a:	b580      	push	{r7, lr}
 800578c:	b084      	sub	sp, #16
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
 8005792:	460b      	mov	r3, r1
 8005794:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005796:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800579a:	2b00      	cmp	r3, #0
 800579c:	da0f      	bge.n	80057be <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800579e:	78fb      	ldrb	r3, [r7, #3]
 80057a0:	f003 020f 	and.w	r2, r3, #15
 80057a4:	4613      	mov	r3, r2
 80057a6:	00db      	lsls	r3, r3, #3
 80057a8:	1a9b      	subs	r3, r3, r2
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	3338      	adds	r3, #56	; 0x38
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	4413      	add	r3, r2
 80057b2:	3304      	adds	r3, #4
 80057b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2201      	movs	r2, #1
 80057ba:	705a      	strb	r2, [r3, #1]
 80057bc:	e00f      	b.n	80057de <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80057be:	78fb      	ldrb	r3, [r7, #3]
 80057c0:	f003 020f 	and.w	r2, r3, #15
 80057c4:	4613      	mov	r3, r2
 80057c6:	00db      	lsls	r3, r3, #3
 80057c8:	1a9b      	subs	r3, r3, r2
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	4413      	add	r3, r2
 80057d4:	3304      	adds	r3, #4
 80057d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2200      	movs	r2, #0
 80057dc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80057de:	78fb      	ldrb	r3, [r7, #3]
 80057e0:	f003 030f 	and.w	r3, r3, #15
 80057e4:	b2da      	uxtb	r2, r3
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d101      	bne.n	80057f8 <HAL_PCD_EP_Close+0x6e>
 80057f4:	2302      	movs	r3, #2
 80057f6:	e00e      	b.n	8005816 <HAL_PCD_EP_Close+0x8c>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68f9      	ldr	r1, [r7, #12]
 8005806:	4618      	mov	r0, r3
 8005808:	f004 fc14 	bl	800a034 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	3710      	adds	r7, #16
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}

0800581e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800581e:	b580      	push	{r7, lr}
 8005820:	b086      	sub	sp, #24
 8005822:	af00      	add	r7, sp, #0
 8005824:	60f8      	str	r0, [r7, #12]
 8005826:	607a      	str	r2, [r7, #4]
 8005828:	603b      	str	r3, [r7, #0]
 800582a:	460b      	mov	r3, r1
 800582c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800582e:	7afb      	ldrb	r3, [r7, #11]
 8005830:	f003 020f 	and.w	r2, r3, #15
 8005834:	4613      	mov	r3, r2
 8005836:	00db      	lsls	r3, r3, #3
 8005838:	1a9b      	subs	r3, r3, r2
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	4413      	add	r3, r2
 8005844:	3304      	adds	r3, #4
 8005846:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	683a      	ldr	r2, [r7, #0]
 8005852:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	2200      	movs	r2, #0
 8005858:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	2200      	movs	r2, #0
 800585e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005860:	7afb      	ldrb	r3, [r7, #11]
 8005862:	f003 030f 	and.w	r3, r3, #15
 8005866:	b2da      	uxtb	r2, r3
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	691b      	ldr	r3, [r3, #16]
 8005870:	2b01      	cmp	r3, #1
 8005872:	d102      	bne.n	800587a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800587a:	7afb      	ldrb	r3, [r7, #11]
 800587c:	f003 030f 	and.w	r3, r3, #15
 8005880:	2b00      	cmp	r3, #0
 8005882:	d109      	bne.n	8005898 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6818      	ldr	r0, [r3, #0]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	691b      	ldr	r3, [r3, #16]
 800588c:	b2db      	uxtb	r3, r3
 800588e:	461a      	mov	r2, r3
 8005890:	6979      	ldr	r1, [r7, #20]
 8005892:	f004 fe97 	bl	800a5c4 <USB_EP0StartXfer>
 8005896:	e008      	b.n	80058aa <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6818      	ldr	r0, [r3, #0]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	461a      	mov	r2, r3
 80058a4:	6979      	ldr	r1, [r7, #20]
 80058a6:	f004 fc49 	bl	800a13c <USB_EPStartXfer>
  }

  return HAL_OK;
 80058aa:	2300      	movs	r3, #0
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3718      	adds	r7, #24
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	460b      	mov	r3, r1
 80058be:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80058c0:	78fb      	ldrb	r3, [r7, #3]
 80058c2:	f003 020f 	and.w	r2, r3, #15
 80058c6:	6879      	ldr	r1, [r7, #4]
 80058c8:	4613      	mov	r3, r2
 80058ca:	00db      	lsls	r3, r3, #3
 80058cc:	1a9b      	subs	r3, r3, r2
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	440b      	add	r3, r1
 80058d2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80058d6:	681b      	ldr	r3, [r3, #0]
}
 80058d8:	4618      	mov	r0, r3
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b086      	sub	sp, #24
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	607a      	str	r2, [r7, #4]
 80058ee:	603b      	str	r3, [r7, #0]
 80058f0:	460b      	mov	r3, r1
 80058f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058f4:	7afb      	ldrb	r3, [r7, #11]
 80058f6:	f003 020f 	and.w	r2, r3, #15
 80058fa:	4613      	mov	r3, r2
 80058fc:	00db      	lsls	r3, r3, #3
 80058fe:	1a9b      	subs	r3, r3, r2
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	3338      	adds	r3, #56	; 0x38
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	4413      	add	r3, r2
 8005908:	3304      	adds	r3, #4
 800590a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	683a      	ldr	r2, [r7, #0]
 8005916:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	2200      	movs	r2, #0
 800591c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	2201      	movs	r2, #1
 8005922:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005924:	7afb      	ldrb	r3, [r7, #11]
 8005926:	f003 030f 	and.w	r3, r3, #15
 800592a:	b2da      	uxtb	r2, r3
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	2b01      	cmp	r3, #1
 8005936:	d102      	bne.n	800593e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800593e:	7afb      	ldrb	r3, [r7, #11]
 8005940:	f003 030f 	and.w	r3, r3, #15
 8005944:	2b00      	cmp	r3, #0
 8005946:	d109      	bne.n	800595c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6818      	ldr	r0, [r3, #0]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	691b      	ldr	r3, [r3, #16]
 8005950:	b2db      	uxtb	r3, r3
 8005952:	461a      	mov	r2, r3
 8005954:	6979      	ldr	r1, [r7, #20]
 8005956:	f004 fe35 	bl	800a5c4 <USB_EP0StartXfer>
 800595a:	e008      	b.n	800596e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6818      	ldr	r0, [r3, #0]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	b2db      	uxtb	r3, r3
 8005966:	461a      	mov	r2, r3
 8005968:	6979      	ldr	r1, [r7, #20]
 800596a:	f004 fbe7 	bl	800a13c <USB_EPStartXfer>
  }

  return HAL_OK;
 800596e:	2300      	movs	r3, #0
}
 8005970:	4618      	mov	r0, r3
 8005972:	3718      	adds	r7, #24
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	460b      	mov	r3, r1
 8005982:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005984:	78fb      	ldrb	r3, [r7, #3]
 8005986:	f003 020f 	and.w	r2, r3, #15
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	429a      	cmp	r2, r3
 8005990:	d901      	bls.n	8005996 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e050      	b.n	8005a38 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005996:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800599a:	2b00      	cmp	r3, #0
 800599c:	da0f      	bge.n	80059be <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800599e:	78fb      	ldrb	r3, [r7, #3]
 80059a0:	f003 020f 	and.w	r2, r3, #15
 80059a4:	4613      	mov	r3, r2
 80059a6:	00db      	lsls	r3, r3, #3
 80059a8:	1a9b      	subs	r3, r3, r2
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	3338      	adds	r3, #56	; 0x38
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	4413      	add	r3, r2
 80059b2:	3304      	adds	r3, #4
 80059b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2201      	movs	r2, #1
 80059ba:	705a      	strb	r2, [r3, #1]
 80059bc:	e00d      	b.n	80059da <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80059be:	78fa      	ldrb	r2, [r7, #3]
 80059c0:	4613      	mov	r3, r2
 80059c2:	00db      	lsls	r3, r3, #3
 80059c4:	1a9b      	subs	r3, r3, r2
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	4413      	add	r3, r2
 80059d0:	3304      	adds	r3, #4
 80059d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2200      	movs	r2, #0
 80059d8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2201      	movs	r2, #1
 80059de:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80059e0:	78fb      	ldrb	r3, [r7, #3]
 80059e2:	f003 030f 	and.w	r3, r3, #15
 80059e6:	b2da      	uxtb	r2, r3
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d101      	bne.n	80059fa <HAL_PCD_EP_SetStall+0x82>
 80059f6:	2302      	movs	r3, #2
 80059f8:	e01e      	b.n	8005a38 <HAL_PCD_EP_SetStall+0xc0>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2201      	movs	r2, #1
 80059fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68f9      	ldr	r1, [r7, #12]
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f004 ff8c 	bl	800a926 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005a0e:	78fb      	ldrb	r3, [r7, #3]
 8005a10:	f003 030f 	and.w	r3, r3, #15
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d10a      	bne.n	8005a2e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6818      	ldr	r0, [r3, #0]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	691b      	ldr	r3, [r3, #16]
 8005a20:	b2d9      	uxtb	r1, r3
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005a28:	461a      	mov	r2, r3
 8005a2a:	f005 f97d 	bl	800ad28 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005a36:	2300      	movs	r3, #0
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3710      	adds	r7, #16
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	460b      	mov	r3, r1
 8005a4a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005a4c:	78fb      	ldrb	r3, [r7, #3]
 8005a4e:	f003 020f 	and.w	r2, r3, #15
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d901      	bls.n	8005a5e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e042      	b.n	8005ae4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005a5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	da0f      	bge.n	8005a86 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a66:	78fb      	ldrb	r3, [r7, #3]
 8005a68:	f003 020f 	and.w	r2, r3, #15
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	00db      	lsls	r3, r3, #3
 8005a70:	1a9b      	subs	r3, r3, r2
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	3338      	adds	r3, #56	; 0x38
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	4413      	add	r3, r2
 8005a7a:	3304      	adds	r3, #4
 8005a7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2201      	movs	r2, #1
 8005a82:	705a      	strb	r2, [r3, #1]
 8005a84:	e00f      	b.n	8005aa6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a86:	78fb      	ldrb	r3, [r7, #3]
 8005a88:	f003 020f 	and.w	r2, r3, #15
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	00db      	lsls	r3, r3, #3
 8005a90:	1a9b      	subs	r3, r3, r2
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	3304      	adds	r3, #4
 8005a9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005aac:	78fb      	ldrb	r3, [r7, #3]
 8005aae:	f003 030f 	and.w	r3, r3, #15
 8005ab2:	b2da      	uxtb	r2, r3
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d101      	bne.n	8005ac6 <HAL_PCD_EP_ClrStall+0x86>
 8005ac2:	2302      	movs	r3, #2
 8005ac4:	e00e      	b.n	8005ae4 <HAL_PCD_EP_ClrStall+0xa4>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2201      	movs	r2, #1
 8005aca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	68f9      	ldr	r1, [r7, #12]
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f004 ff94 	bl	800aa02 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3710      	adds	r7, #16
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b08a      	sub	sp, #40	; 0x28
 8005af0:	af02      	add	r7, sp, #8
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005b00:	683a      	ldr	r2, [r7, #0]
 8005b02:	4613      	mov	r3, r2
 8005b04:	00db      	lsls	r3, r3, #3
 8005b06:	1a9b      	subs	r3, r3, r2
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	3338      	adds	r3, #56	; 0x38
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	4413      	add	r3, r2
 8005b10:	3304      	adds	r3, #4
 8005b12:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	699a      	ldr	r2, [r3, #24]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	695b      	ldr	r3, [r3, #20]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d901      	bls.n	8005b24 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e06c      	b.n	8005bfe <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	695a      	ldr	r2, [r3, #20]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	699b      	ldr	r3, [r3, #24]
 8005b2c:	1ad3      	subs	r3, r2, r3
 8005b2e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	69fa      	ldr	r2, [r7, #28]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d902      	bls.n	8005b40 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	3303      	adds	r3, #3
 8005b44:	089b      	lsrs	r3, r3, #2
 8005b46:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005b48:	e02b      	b.n	8005ba2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	695a      	ldr	r2, [r3, #20]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	699b      	ldr	r3, [r3, #24]
 8005b52:	1ad3      	subs	r3, r2, r3
 8005b54:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	69fa      	ldr	r2, [r7, #28]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d902      	bls.n	8005b66 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	3303      	adds	r3, #3
 8005b6a:	089b      	lsrs	r3, r3, #2
 8005b6c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	68d9      	ldr	r1, [r3, #12]
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	b2da      	uxtb	r2, r3
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	9300      	str	r3, [sp, #0]
 8005b82:	4603      	mov	r3, r0
 8005b84:	6978      	ldr	r0, [r7, #20]
 8005b86:	f004 fe70 	bl	800a86a <USB_WritePacket>

    ep->xfer_buff  += len;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	68da      	ldr	r2, [r3, #12]
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	441a      	add	r2, r3
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	699a      	ldr	r2, [r3, #24]
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	441a      	add	r2, r3
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	015a      	lsls	r2, r3, #5
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	4413      	add	r3, r2
 8005baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bae:	699b      	ldr	r3, [r3, #24]
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	69ba      	ldr	r2, [r7, #24]
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d809      	bhi.n	8005bcc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	699a      	ldr	r2, [r3, #24]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d203      	bcs.n	8005bcc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	695b      	ldr	r3, [r3, #20]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1be      	bne.n	8005b4a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	695a      	ldr	r2, [r3, #20]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	699b      	ldr	r3, [r3, #24]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d811      	bhi.n	8005bfc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	f003 030f 	and.w	r3, r3, #15
 8005bde:	2201      	movs	r2, #1
 8005be0:	fa02 f303 	lsl.w	r3, r2, r3
 8005be4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	43db      	mvns	r3, r3
 8005bf2:	6939      	ldr	r1, [r7, #16]
 8005bf4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3720      	adds	r7, #32
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
	...

08005c08 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b086      	sub	sp, #24
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	333c      	adds	r3, #60	; 0x3c
 8005c20:	3304      	adds	r3, #4
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	015a      	lsls	r2, r3, #5
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	f040 80b3 	bne.w	8005da6 <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	f003 0308 	and.w	r3, r3, #8
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d028      	beq.n	8005c9c <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	4a70      	ldr	r2, [pc, #448]	; (8005e10 <PCD_EP_OutXfrComplete_int+0x208>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d90e      	bls.n	8005c70 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d009      	beq.n	8005c70 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	015a      	lsls	r2, r3, #5
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	4413      	add	r3, r2
 8005c64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c68:	461a      	mov	r2, r3
 8005c6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c6e:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f007 f9c3 	bl	800cffc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6818      	ldr	r0, [r3, #0]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005c80:	461a      	mov	r2, r3
 8005c82:	2101      	movs	r1, #1
 8005c84:	f005 f850 	bl	800ad28 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	015a      	lsls	r2, r3, #5
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	4413      	add	r3, r2
 8005c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c94:	461a      	mov	r2, r3
 8005c96:	2308      	movs	r3, #8
 8005c98:	6093      	str	r3, [r2, #8]
 8005c9a:	e0b3      	b.n	8005e04 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	f003 0320 	and.w	r3, r3, #32
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d009      	beq.n	8005cba <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	015a      	lsls	r2, r3, #5
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	4413      	add	r3, r2
 8005cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	2320      	movs	r3, #32
 8005cb6:	6093      	str	r3, [r2, #8]
 8005cb8:	e0a4      	b.n	8005e04 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	f040 809f 	bne.w	8005e04 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	4a51      	ldr	r2, [pc, #324]	; (8005e10 <PCD_EP_OutXfrComplete_int+0x208>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d90f      	bls.n	8005cee <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d00a      	beq.n	8005cee <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	015a      	lsls	r2, r3, #5
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	4413      	add	r3, r2
 8005ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cea:	6093      	str	r3, [r2, #8]
 8005cec:	e08a      	b.n	8005e04 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005cee:	6879      	ldr	r1, [r7, #4]
 8005cf0:	683a      	ldr	r2, [r7, #0]
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	00db      	lsls	r3, r3, #3
 8005cf6:	1a9b      	subs	r3, r3, r2
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	440b      	add	r3, r1
 8005cfc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005d00:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	0159      	lsls	r1, r3, #5
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	440b      	add	r3, r1
 8005d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8005d14:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	683a      	ldr	r2, [r7, #0]
 8005d1a:	4613      	mov	r3, r2
 8005d1c:	00db      	lsls	r3, r3, #3
 8005d1e:	1a9b      	subs	r3, r3, r2
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	4403      	add	r3, r0
 8005d24:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005d28:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005d2a:	6879      	ldr	r1, [r7, #4]
 8005d2c:	683a      	ldr	r2, [r7, #0]
 8005d2e:	4613      	mov	r3, r2
 8005d30:	00db      	lsls	r3, r3, #3
 8005d32:	1a9b      	subs	r3, r3, r2
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	440b      	add	r3, r1
 8005d38:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005d3c:	6819      	ldr	r1, [r3, #0]
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	683a      	ldr	r2, [r7, #0]
 8005d42:	4613      	mov	r3, r2
 8005d44:	00db      	lsls	r3, r3, #3
 8005d46:	1a9b      	subs	r3, r3, r2
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	4403      	add	r3, r0
 8005d4c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4419      	add	r1, r3
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	683a      	ldr	r2, [r7, #0]
 8005d58:	4613      	mov	r3, r2
 8005d5a:	00db      	lsls	r3, r3, #3
 8005d5c:	1a9b      	subs	r3, r3, r2
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	4403      	add	r3, r0
 8005d62:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005d66:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f007 f956 	bl	800d020 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d144      	bne.n	8005e04 <PCD_EP_OutXfrComplete_int+0x1fc>
 8005d7a:	6879      	ldr	r1, [r7, #4]
 8005d7c:	683a      	ldr	r2, [r7, #0]
 8005d7e:	4613      	mov	r3, r2
 8005d80:	00db      	lsls	r3, r3, #3
 8005d82:	1a9b      	subs	r3, r3, r2
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	440b      	add	r3, r1
 8005d88:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d138      	bne.n	8005e04 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6818      	ldr	r0, [r3, #0]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	2101      	movs	r1, #1
 8005da0:	f004 ffc2 	bl	800ad28 <USB_EP0_OutStart>
 8005da4:	e02e      	b.n	8005e04 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	4a1a      	ldr	r2, [pc, #104]	; (8005e14 <PCD_EP_OutXfrComplete_int+0x20c>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d124      	bne.n	8005df8 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d00a      	beq.n	8005dce <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	015a      	lsls	r2, r3, #5
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	4413      	add	r3, r2
 8005dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dca:	6093      	str	r3, [r2, #8]
 8005dcc:	e01a      	b.n	8005e04 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	f003 0320 	and.w	r3, r3, #32
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d008      	beq.n	8005dea <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	015a      	lsls	r2, r3, #5
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	4413      	add	r3, r2
 8005de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005de4:	461a      	mov	r2, r3
 8005de6:	2320      	movs	r3, #32
 8005de8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	4619      	mov	r1, r3
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f007 f915 	bl	800d020 <HAL_PCD_DataOutStageCallback>
 8005df6:	e005      	b.n	8005e04 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f007 f90e 	bl	800d020 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3718      	adds	r7, #24
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	4f54300a 	.word	0x4f54300a
 8005e14:	4f54310a 	.word	0x4f54310a

08005e18 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b086      	sub	sp, #24
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	333c      	adds	r3, #60	; 0x3c
 8005e30:	3304      	adds	r3, #4
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	015a      	lsls	r2, r3, #5
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d113      	bne.n	8005e76 <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	4a1f      	ldr	r2, [pc, #124]	; (8005ed0 <PCD_EP_OutSetupPacket_int+0xb8>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d922      	bls.n	8005e9c <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d01d      	beq.n	8005e9c <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	015a      	lsls	r2, r3, #5
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	4413      	add	r3, r2
 8005e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e72:	6093      	str	r3, [r2, #8]
 8005e74:	e012      	b.n	8005e9c <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	4a16      	ldr	r2, [pc, #88]	; (8005ed4 <PCD_EP_OutSetupPacket_int+0xbc>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d10e      	bne.n	8005e9c <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d009      	beq.n	8005e9c <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	015a      	lsls	r2, r3, #5
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	4413      	add	r3, r2
 8005e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e94:	461a      	mov	r2, r3
 8005e96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e9a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f007 f8ad 	bl	800cffc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	4a0a      	ldr	r2, [pc, #40]	; (8005ed0 <PCD_EP_OutSetupPacket_int+0xb8>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d90c      	bls.n	8005ec4 <PCD_EP_OutSetupPacket_int+0xac>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d108      	bne.n	8005ec4 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6818      	ldr	r0, [r3, #0]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	2101      	movs	r1, #1
 8005ec0:	f004 ff32 	bl	800ad28 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3718      	adds	r7, #24
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	4f54300a 	.word	0x4f54300a
 8005ed4:	4f54310a 	.word	0x4f54310a

08005ed8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b085      	sub	sp, #20
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	460b      	mov	r3, r1
 8005ee2:	70fb      	strb	r3, [r7, #3]
 8005ee4:	4613      	mov	r3, r2
 8005ee6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eee:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005ef0:	78fb      	ldrb	r3, [r7, #3]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d107      	bne.n	8005f06 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005ef6:	883b      	ldrh	r3, [r7, #0]
 8005ef8:	0419      	lsls	r1, r3, #16
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68ba      	ldr	r2, [r7, #8]
 8005f00:	430a      	orrs	r2, r1
 8005f02:	629a      	str	r2, [r3, #40]	; 0x28
 8005f04:	e028      	b.n	8005f58 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f0c:	0c1b      	lsrs	r3, r3, #16
 8005f0e:	68ba      	ldr	r2, [r7, #8]
 8005f10:	4413      	add	r3, r2
 8005f12:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005f14:	2300      	movs	r3, #0
 8005f16:	73fb      	strb	r3, [r7, #15]
 8005f18:	e00d      	b.n	8005f36 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	7bfb      	ldrb	r3, [r7, #15]
 8005f20:	3340      	adds	r3, #64	; 0x40
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	4413      	add	r3, r2
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	0c1b      	lsrs	r3, r3, #16
 8005f2a:	68ba      	ldr	r2, [r7, #8]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005f30:	7bfb      	ldrb	r3, [r7, #15]
 8005f32:	3301      	adds	r3, #1
 8005f34:	73fb      	strb	r3, [r7, #15]
 8005f36:	7bfa      	ldrb	r2, [r7, #15]
 8005f38:	78fb      	ldrb	r3, [r7, #3]
 8005f3a:	3b01      	subs	r3, #1
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d3ec      	bcc.n	8005f1a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005f40:	883b      	ldrh	r3, [r7, #0]
 8005f42:	0418      	lsls	r0, r3, #16
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6819      	ldr	r1, [r3, #0]
 8005f48:	78fb      	ldrb	r3, [r7, #3]
 8005f4a:	3b01      	subs	r3, #1
 8005f4c:	68ba      	ldr	r2, [r7, #8]
 8005f4e:	4302      	orrs	r2, r0
 8005f50:	3340      	adds	r3, #64	; 0x40
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	440b      	add	r3, r1
 8005f56:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005f58:	2300      	movs	r3, #0
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3714      	adds	r7, #20
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr

08005f66 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005f66:	b480      	push	{r7}
 8005f68:	b083      	sub	sp, #12
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]
 8005f6e:	460b      	mov	r3, r1
 8005f70:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	887a      	ldrh	r2, [r7, #2]
 8005f78:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	460b      	mov	r3, r1
 8005f92:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005f94:	bf00      	nop
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b086      	sub	sp, #24
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d101      	bne.n	8005fb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e25b      	b.n	800646a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 0301 	and.w	r3, r3, #1
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d075      	beq.n	80060aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005fbe:	4ba3      	ldr	r3, [pc, #652]	; (800624c <HAL_RCC_OscConfig+0x2ac>)
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	f003 030c 	and.w	r3, r3, #12
 8005fc6:	2b04      	cmp	r3, #4
 8005fc8:	d00c      	beq.n	8005fe4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005fca:	4ba0      	ldr	r3, [pc, #640]	; (800624c <HAL_RCC_OscConfig+0x2ac>)
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005fd2:	2b08      	cmp	r3, #8
 8005fd4:	d112      	bne.n	8005ffc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005fd6:	4b9d      	ldr	r3, [pc, #628]	; (800624c <HAL_RCC_OscConfig+0x2ac>)
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005fe2:	d10b      	bne.n	8005ffc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fe4:	4b99      	ldr	r3, [pc, #612]	; (800624c <HAL_RCC_OscConfig+0x2ac>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d05b      	beq.n	80060a8 <HAL_RCC_OscConfig+0x108>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d157      	bne.n	80060a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e236      	b.n	800646a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006004:	d106      	bne.n	8006014 <HAL_RCC_OscConfig+0x74>
 8006006:	4b91      	ldr	r3, [pc, #580]	; (800624c <HAL_RCC_OscConfig+0x2ac>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a90      	ldr	r2, [pc, #576]	; (800624c <HAL_RCC_OscConfig+0x2ac>)
 800600c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006010:	6013      	str	r3, [r2, #0]
 8006012:	e01d      	b.n	8006050 <HAL_RCC_OscConfig+0xb0>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800601c:	d10c      	bne.n	8006038 <HAL_RCC_OscConfig+0x98>
 800601e:	4b8b      	ldr	r3, [pc, #556]	; (800624c <HAL_RCC_OscConfig+0x2ac>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a8a      	ldr	r2, [pc, #552]	; (800624c <HAL_RCC_OscConfig+0x2ac>)
 8006024:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006028:	6013      	str	r3, [r2, #0]
 800602a:	4b88      	ldr	r3, [pc, #544]	; (800624c <HAL_RCC_OscConfig+0x2ac>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a87      	ldr	r2, [pc, #540]	; (800624c <HAL_RCC_OscConfig+0x2ac>)
 8006030:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006034:	6013      	str	r3, [r2, #0]
 8006036:	e00b      	b.n	8006050 <HAL_RCC_OscConfig+0xb0>
 8006038:	4b84      	ldr	r3, [pc, #528]	; (800624c <HAL_RCC_OscConfig+0x2ac>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a83      	ldr	r2, [pc, #524]	; (800624c <HAL_RCC_OscConfig+0x2ac>)
 800603e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006042:	6013      	str	r3, [r2, #0]
 8006044:	4b81      	ldr	r3, [pc, #516]	; (800624c <HAL_RCC_OscConfig+0x2ac>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a80      	ldr	r2, [pc, #512]	; (800624c <HAL_RCC_OscConfig+0x2ac>)
 800604a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800604e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d013      	beq.n	8006080 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006058:	f7fc ff8e 	bl	8002f78 <HAL_GetTick>
 800605c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800605e:	e008      	b.n	8006072 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006060:	f7fc ff8a 	bl	8002f78 <HAL_GetTick>
 8006064:	4602      	mov	r2, r0
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	2b64      	cmp	r3, #100	; 0x64
 800606c:	d901      	bls.n	8006072 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800606e:	2303      	movs	r3, #3
 8006070:	e1fb      	b.n	800646a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006072:	4b76      	ldr	r3, [pc, #472]	; (800624c <HAL_RCC_OscConfig+0x2ac>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800607a:	2b00      	cmp	r3, #0
 800607c:	d0f0      	beq.n	8006060 <HAL_RCC_OscConfig+0xc0>
 800607e:	e014      	b.n	80060aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006080:	f7fc ff7a 	bl	8002f78 <HAL_GetTick>
 8006084:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006086:	e008      	b.n	800609a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006088:	f7fc ff76 	bl	8002f78 <HAL_GetTick>
 800608c:	4602      	mov	r2, r0
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	2b64      	cmp	r3, #100	; 0x64
 8006094:	d901      	bls.n	800609a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006096:	2303      	movs	r3, #3
 8006098:	e1e7      	b.n	800646a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800609a:	4b6c      	ldr	r3, [pc, #432]	; (800624c <HAL_RCC_OscConfig+0x2ac>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d1f0      	bne.n	8006088 <HAL_RCC_OscConfig+0xe8>
 80060a6:	e000      	b.n	80060aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f003 0302 	and.w	r3, r3, #2
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d063      	beq.n	800617e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80060b6:	4b65      	ldr	r3, [pc, #404]	; (800624c <HAL_RCC_OscConfig+0x2ac>)
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	f003 030c 	and.w	r3, r3, #12
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d00b      	beq.n	80060da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060c2:	4b62      	ldr	r3, [pc, #392]	; (800624c <HAL_RCC_OscConfig+0x2ac>)
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80060ca:	2b08      	cmp	r3, #8
 80060cc:	d11c      	bne.n	8006108 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060ce:	4b5f      	ldr	r3, [pc, #380]	; (800624c <HAL_RCC_OscConfig+0x2ac>)
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d116      	bne.n	8006108 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060da:	4b5c      	ldr	r3, [pc, #368]	; (800624c <HAL_RCC_OscConfig+0x2ac>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 0302 	and.w	r3, r3, #2
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d005      	beq.n	80060f2 <HAL_RCC_OscConfig+0x152>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d001      	beq.n	80060f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	e1bb      	b.n	800646a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060f2:	4b56      	ldr	r3, [pc, #344]	; (800624c <HAL_RCC_OscConfig+0x2ac>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	691b      	ldr	r3, [r3, #16]
 80060fe:	00db      	lsls	r3, r3, #3
 8006100:	4952      	ldr	r1, [pc, #328]	; (800624c <HAL_RCC_OscConfig+0x2ac>)
 8006102:	4313      	orrs	r3, r2
 8006104:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006106:	e03a      	b.n	800617e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d020      	beq.n	8006152 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006110:	4b4f      	ldr	r3, [pc, #316]	; (8006250 <HAL_RCC_OscConfig+0x2b0>)
 8006112:	2201      	movs	r2, #1
 8006114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006116:	f7fc ff2f 	bl	8002f78 <HAL_GetTick>
 800611a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800611c:	e008      	b.n	8006130 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800611e:	f7fc ff2b 	bl	8002f78 <HAL_GetTick>
 8006122:	4602      	mov	r2, r0
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	1ad3      	subs	r3, r2, r3
 8006128:	2b02      	cmp	r3, #2
 800612a:	d901      	bls.n	8006130 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800612c:	2303      	movs	r3, #3
 800612e:	e19c      	b.n	800646a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006130:	4b46      	ldr	r3, [pc, #280]	; (800624c <HAL_RCC_OscConfig+0x2ac>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 0302 	and.w	r3, r3, #2
 8006138:	2b00      	cmp	r3, #0
 800613a:	d0f0      	beq.n	800611e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800613c:	4b43      	ldr	r3, [pc, #268]	; (800624c <HAL_RCC_OscConfig+0x2ac>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	691b      	ldr	r3, [r3, #16]
 8006148:	00db      	lsls	r3, r3, #3
 800614a:	4940      	ldr	r1, [pc, #256]	; (800624c <HAL_RCC_OscConfig+0x2ac>)
 800614c:	4313      	orrs	r3, r2
 800614e:	600b      	str	r3, [r1, #0]
 8006150:	e015      	b.n	800617e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006152:	4b3f      	ldr	r3, [pc, #252]	; (8006250 <HAL_RCC_OscConfig+0x2b0>)
 8006154:	2200      	movs	r2, #0
 8006156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006158:	f7fc ff0e 	bl	8002f78 <HAL_GetTick>
 800615c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800615e:	e008      	b.n	8006172 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006160:	f7fc ff0a 	bl	8002f78 <HAL_GetTick>
 8006164:	4602      	mov	r2, r0
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	2b02      	cmp	r3, #2
 800616c:	d901      	bls.n	8006172 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800616e:	2303      	movs	r3, #3
 8006170:	e17b      	b.n	800646a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006172:	4b36      	ldr	r3, [pc, #216]	; (800624c <HAL_RCC_OscConfig+0x2ac>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f003 0302 	and.w	r3, r3, #2
 800617a:	2b00      	cmp	r3, #0
 800617c:	d1f0      	bne.n	8006160 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 0308 	and.w	r3, r3, #8
 8006186:	2b00      	cmp	r3, #0
 8006188:	d030      	beq.n	80061ec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	695b      	ldr	r3, [r3, #20]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d016      	beq.n	80061c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006192:	4b30      	ldr	r3, [pc, #192]	; (8006254 <HAL_RCC_OscConfig+0x2b4>)
 8006194:	2201      	movs	r2, #1
 8006196:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006198:	f7fc feee 	bl	8002f78 <HAL_GetTick>
 800619c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800619e:	e008      	b.n	80061b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061a0:	f7fc feea 	bl	8002f78 <HAL_GetTick>
 80061a4:	4602      	mov	r2, r0
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	2b02      	cmp	r3, #2
 80061ac:	d901      	bls.n	80061b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80061ae:	2303      	movs	r3, #3
 80061b0:	e15b      	b.n	800646a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061b2:	4b26      	ldr	r3, [pc, #152]	; (800624c <HAL_RCC_OscConfig+0x2ac>)
 80061b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061b6:	f003 0302 	and.w	r3, r3, #2
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d0f0      	beq.n	80061a0 <HAL_RCC_OscConfig+0x200>
 80061be:	e015      	b.n	80061ec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061c0:	4b24      	ldr	r3, [pc, #144]	; (8006254 <HAL_RCC_OscConfig+0x2b4>)
 80061c2:	2200      	movs	r2, #0
 80061c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061c6:	f7fc fed7 	bl	8002f78 <HAL_GetTick>
 80061ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061cc:	e008      	b.n	80061e0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061ce:	f7fc fed3 	bl	8002f78 <HAL_GetTick>
 80061d2:	4602      	mov	r2, r0
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	2b02      	cmp	r3, #2
 80061da:	d901      	bls.n	80061e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80061dc:	2303      	movs	r3, #3
 80061de:	e144      	b.n	800646a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061e0:	4b1a      	ldr	r3, [pc, #104]	; (800624c <HAL_RCC_OscConfig+0x2ac>)
 80061e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061e4:	f003 0302 	and.w	r3, r3, #2
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d1f0      	bne.n	80061ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f003 0304 	and.w	r3, r3, #4
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	f000 80a0 	beq.w	800633a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061fa:	2300      	movs	r3, #0
 80061fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061fe:	4b13      	ldr	r3, [pc, #76]	; (800624c <HAL_RCC_OscConfig+0x2ac>)
 8006200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006206:	2b00      	cmp	r3, #0
 8006208:	d10f      	bne.n	800622a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800620a:	2300      	movs	r3, #0
 800620c:	60bb      	str	r3, [r7, #8]
 800620e:	4b0f      	ldr	r3, [pc, #60]	; (800624c <HAL_RCC_OscConfig+0x2ac>)
 8006210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006212:	4a0e      	ldr	r2, [pc, #56]	; (800624c <HAL_RCC_OscConfig+0x2ac>)
 8006214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006218:	6413      	str	r3, [r2, #64]	; 0x40
 800621a:	4b0c      	ldr	r3, [pc, #48]	; (800624c <HAL_RCC_OscConfig+0x2ac>)
 800621c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006222:	60bb      	str	r3, [r7, #8]
 8006224:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006226:	2301      	movs	r3, #1
 8006228:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800622a:	4b0b      	ldr	r3, [pc, #44]	; (8006258 <HAL_RCC_OscConfig+0x2b8>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006232:	2b00      	cmp	r3, #0
 8006234:	d121      	bne.n	800627a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006236:	4b08      	ldr	r3, [pc, #32]	; (8006258 <HAL_RCC_OscConfig+0x2b8>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a07      	ldr	r2, [pc, #28]	; (8006258 <HAL_RCC_OscConfig+0x2b8>)
 800623c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006240:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006242:	f7fc fe99 	bl	8002f78 <HAL_GetTick>
 8006246:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006248:	e011      	b.n	800626e <HAL_RCC_OscConfig+0x2ce>
 800624a:	bf00      	nop
 800624c:	40023800 	.word	0x40023800
 8006250:	42470000 	.word	0x42470000
 8006254:	42470e80 	.word	0x42470e80
 8006258:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800625c:	f7fc fe8c 	bl	8002f78 <HAL_GetTick>
 8006260:	4602      	mov	r2, r0
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	1ad3      	subs	r3, r2, r3
 8006266:	2b02      	cmp	r3, #2
 8006268:	d901      	bls.n	800626e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800626a:	2303      	movs	r3, #3
 800626c:	e0fd      	b.n	800646a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800626e:	4b81      	ldr	r3, [pc, #516]	; (8006474 <HAL_RCC_OscConfig+0x4d4>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006276:	2b00      	cmp	r3, #0
 8006278:	d0f0      	beq.n	800625c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	2b01      	cmp	r3, #1
 8006280:	d106      	bne.n	8006290 <HAL_RCC_OscConfig+0x2f0>
 8006282:	4b7d      	ldr	r3, [pc, #500]	; (8006478 <HAL_RCC_OscConfig+0x4d8>)
 8006284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006286:	4a7c      	ldr	r2, [pc, #496]	; (8006478 <HAL_RCC_OscConfig+0x4d8>)
 8006288:	f043 0301 	orr.w	r3, r3, #1
 800628c:	6713      	str	r3, [r2, #112]	; 0x70
 800628e:	e01c      	b.n	80062ca <HAL_RCC_OscConfig+0x32a>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	2b05      	cmp	r3, #5
 8006296:	d10c      	bne.n	80062b2 <HAL_RCC_OscConfig+0x312>
 8006298:	4b77      	ldr	r3, [pc, #476]	; (8006478 <HAL_RCC_OscConfig+0x4d8>)
 800629a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800629c:	4a76      	ldr	r2, [pc, #472]	; (8006478 <HAL_RCC_OscConfig+0x4d8>)
 800629e:	f043 0304 	orr.w	r3, r3, #4
 80062a2:	6713      	str	r3, [r2, #112]	; 0x70
 80062a4:	4b74      	ldr	r3, [pc, #464]	; (8006478 <HAL_RCC_OscConfig+0x4d8>)
 80062a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062a8:	4a73      	ldr	r2, [pc, #460]	; (8006478 <HAL_RCC_OscConfig+0x4d8>)
 80062aa:	f043 0301 	orr.w	r3, r3, #1
 80062ae:	6713      	str	r3, [r2, #112]	; 0x70
 80062b0:	e00b      	b.n	80062ca <HAL_RCC_OscConfig+0x32a>
 80062b2:	4b71      	ldr	r3, [pc, #452]	; (8006478 <HAL_RCC_OscConfig+0x4d8>)
 80062b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062b6:	4a70      	ldr	r2, [pc, #448]	; (8006478 <HAL_RCC_OscConfig+0x4d8>)
 80062b8:	f023 0301 	bic.w	r3, r3, #1
 80062bc:	6713      	str	r3, [r2, #112]	; 0x70
 80062be:	4b6e      	ldr	r3, [pc, #440]	; (8006478 <HAL_RCC_OscConfig+0x4d8>)
 80062c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062c2:	4a6d      	ldr	r2, [pc, #436]	; (8006478 <HAL_RCC_OscConfig+0x4d8>)
 80062c4:	f023 0304 	bic.w	r3, r3, #4
 80062c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d015      	beq.n	80062fe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062d2:	f7fc fe51 	bl	8002f78 <HAL_GetTick>
 80062d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062d8:	e00a      	b.n	80062f0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062da:	f7fc fe4d 	bl	8002f78 <HAL_GetTick>
 80062de:	4602      	mov	r2, r0
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	1ad3      	subs	r3, r2, r3
 80062e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d901      	bls.n	80062f0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80062ec:	2303      	movs	r3, #3
 80062ee:	e0bc      	b.n	800646a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062f0:	4b61      	ldr	r3, [pc, #388]	; (8006478 <HAL_RCC_OscConfig+0x4d8>)
 80062f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062f4:	f003 0302 	and.w	r3, r3, #2
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d0ee      	beq.n	80062da <HAL_RCC_OscConfig+0x33a>
 80062fc:	e014      	b.n	8006328 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062fe:	f7fc fe3b 	bl	8002f78 <HAL_GetTick>
 8006302:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006304:	e00a      	b.n	800631c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006306:	f7fc fe37 	bl	8002f78 <HAL_GetTick>
 800630a:	4602      	mov	r2, r0
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	1ad3      	subs	r3, r2, r3
 8006310:	f241 3288 	movw	r2, #5000	; 0x1388
 8006314:	4293      	cmp	r3, r2
 8006316:	d901      	bls.n	800631c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006318:	2303      	movs	r3, #3
 800631a:	e0a6      	b.n	800646a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800631c:	4b56      	ldr	r3, [pc, #344]	; (8006478 <HAL_RCC_OscConfig+0x4d8>)
 800631e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006320:	f003 0302 	and.w	r3, r3, #2
 8006324:	2b00      	cmp	r3, #0
 8006326:	d1ee      	bne.n	8006306 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006328:	7dfb      	ldrb	r3, [r7, #23]
 800632a:	2b01      	cmp	r3, #1
 800632c:	d105      	bne.n	800633a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800632e:	4b52      	ldr	r3, [pc, #328]	; (8006478 <HAL_RCC_OscConfig+0x4d8>)
 8006330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006332:	4a51      	ldr	r2, [pc, #324]	; (8006478 <HAL_RCC_OscConfig+0x4d8>)
 8006334:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006338:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	699b      	ldr	r3, [r3, #24]
 800633e:	2b00      	cmp	r3, #0
 8006340:	f000 8092 	beq.w	8006468 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006344:	4b4c      	ldr	r3, [pc, #304]	; (8006478 <HAL_RCC_OscConfig+0x4d8>)
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	f003 030c 	and.w	r3, r3, #12
 800634c:	2b08      	cmp	r3, #8
 800634e:	d05c      	beq.n	800640a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	699b      	ldr	r3, [r3, #24]
 8006354:	2b02      	cmp	r3, #2
 8006356:	d141      	bne.n	80063dc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006358:	4b48      	ldr	r3, [pc, #288]	; (800647c <HAL_RCC_OscConfig+0x4dc>)
 800635a:	2200      	movs	r2, #0
 800635c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800635e:	f7fc fe0b 	bl	8002f78 <HAL_GetTick>
 8006362:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006364:	e008      	b.n	8006378 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006366:	f7fc fe07 	bl	8002f78 <HAL_GetTick>
 800636a:	4602      	mov	r2, r0
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	1ad3      	subs	r3, r2, r3
 8006370:	2b02      	cmp	r3, #2
 8006372:	d901      	bls.n	8006378 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006374:	2303      	movs	r3, #3
 8006376:	e078      	b.n	800646a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006378:	4b3f      	ldr	r3, [pc, #252]	; (8006478 <HAL_RCC_OscConfig+0x4d8>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006380:	2b00      	cmp	r3, #0
 8006382:	d1f0      	bne.n	8006366 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	69da      	ldr	r2, [r3, #28]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6a1b      	ldr	r3, [r3, #32]
 800638c:	431a      	orrs	r2, r3
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006392:	019b      	lsls	r3, r3, #6
 8006394:	431a      	orrs	r2, r3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800639a:	085b      	lsrs	r3, r3, #1
 800639c:	3b01      	subs	r3, #1
 800639e:	041b      	lsls	r3, r3, #16
 80063a0:	431a      	orrs	r2, r3
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a6:	061b      	lsls	r3, r3, #24
 80063a8:	4933      	ldr	r1, [pc, #204]	; (8006478 <HAL_RCC_OscConfig+0x4d8>)
 80063aa:	4313      	orrs	r3, r2
 80063ac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063ae:	4b33      	ldr	r3, [pc, #204]	; (800647c <HAL_RCC_OscConfig+0x4dc>)
 80063b0:	2201      	movs	r2, #1
 80063b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063b4:	f7fc fde0 	bl	8002f78 <HAL_GetTick>
 80063b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063ba:	e008      	b.n	80063ce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063bc:	f7fc fddc 	bl	8002f78 <HAL_GetTick>
 80063c0:	4602      	mov	r2, r0
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	1ad3      	subs	r3, r2, r3
 80063c6:	2b02      	cmp	r3, #2
 80063c8:	d901      	bls.n	80063ce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80063ca:	2303      	movs	r3, #3
 80063cc:	e04d      	b.n	800646a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063ce:	4b2a      	ldr	r3, [pc, #168]	; (8006478 <HAL_RCC_OscConfig+0x4d8>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d0f0      	beq.n	80063bc <HAL_RCC_OscConfig+0x41c>
 80063da:	e045      	b.n	8006468 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063dc:	4b27      	ldr	r3, [pc, #156]	; (800647c <HAL_RCC_OscConfig+0x4dc>)
 80063de:	2200      	movs	r2, #0
 80063e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063e2:	f7fc fdc9 	bl	8002f78 <HAL_GetTick>
 80063e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063e8:	e008      	b.n	80063fc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063ea:	f7fc fdc5 	bl	8002f78 <HAL_GetTick>
 80063ee:	4602      	mov	r2, r0
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	1ad3      	subs	r3, r2, r3
 80063f4:	2b02      	cmp	r3, #2
 80063f6:	d901      	bls.n	80063fc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80063f8:	2303      	movs	r3, #3
 80063fa:	e036      	b.n	800646a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063fc:	4b1e      	ldr	r3, [pc, #120]	; (8006478 <HAL_RCC_OscConfig+0x4d8>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006404:	2b00      	cmp	r3, #0
 8006406:	d1f0      	bne.n	80063ea <HAL_RCC_OscConfig+0x44a>
 8006408:	e02e      	b.n	8006468 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	699b      	ldr	r3, [r3, #24]
 800640e:	2b01      	cmp	r3, #1
 8006410:	d101      	bne.n	8006416 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e029      	b.n	800646a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006416:	4b18      	ldr	r3, [pc, #96]	; (8006478 <HAL_RCC_OscConfig+0x4d8>)
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	69db      	ldr	r3, [r3, #28]
 8006426:	429a      	cmp	r2, r3
 8006428:	d11c      	bne.n	8006464 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006434:	429a      	cmp	r2, r3
 8006436:	d115      	bne.n	8006464 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800643e:	4013      	ands	r3, r2
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006444:	4293      	cmp	r3, r2
 8006446:	d10d      	bne.n	8006464 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006452:	429a      	cmp	r2, r3
 8006454:	d106      	bne.n	8006464 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006460:	429a      	cmp	r2, r3
 8006462:	d001      	beq.n	8006468 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	e000      	b.n	800646a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006468:	2300      	movs	r3, #0
}
 800646a:	4618      	mov	r0, r3
 800646c:	3718      	adds	r7, #24
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	40007000 	.word	0x40007000
 8006478:	40023800 	.word	0x40023800
 800647c:	42470060 	.word	0x42470060

08006480 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d101      	bne.n	8006494 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	e0cc      	b.n	800662e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006494:	4b68      	ldr	r3, [pc, #416]	; (8006638 <HAL_RCC_ClockConfig+0x1b8>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 030f 	and.w	r3, r3, #15
 800649c:	683a      	ldr	r2, [r7, #0]
 800649e:	429a      	cmp	r2, r3
 80064a0:	d90c      	bls.n	80064bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064a2:	4b65      	ldr	r3, [pc, #404]	; (8006638 <HAL_RCC_ClockConfig+0x1b8>)
 80064a4:	683a      	ldr	r2, [r7, #0]
 80064a6:	b2d2      	uxtb	r2, r2
 80064a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064aa:	4b63      	ldr	r3, [pc, #396]	; (8006638 <HAL_RCC_ClockConfig+0x1b8>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f003 030f 	and.w	r3, r3, #15
 80064b2:	683a      	ldr	r2, [r7, #0]
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d001      	beq.n	80064bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	e0b8      	b.n	800662e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f003 0302 	and.w	r3, r3, #2
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d020      	beq.n	800650a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 0304 	and.w	r3, r3, #4
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d005      	beq.n	80064e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80064d4:	4b59      	ldr	r3, [pc, #356]	; (800663c <HAL_RCC_ClockConfig+0x1bc>)
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	4a58      	ldr	r2, [pc, #352]	; (800663c <HAL_RCC_ClockConfig+0x1bc>)
 80064da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80064de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 0308 	and.w	r3, r3, #8
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d005      	beq.n	80064f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80064ec:	4b53      	ldr	r3, [pc, #332]	; (800663c <HAL_RCC_ClockConfig+0x1bc>)
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	4a52      	ldr	r2, [pc, #328]	; (800663c <HAL_RCC_ClockConfig+0x1bc>)
 80064f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80064f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064f8:	4b50      	ldr	r3, [pc, #320]	; (800663c <HAL_RCC_ClockConfig+0x1bc>)
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	494d      	ldr	r1, [pc, #308]	; (800663c <HAL_RCC_ClockConfig+0x1bc>)
 8006506:	4313      	orrs	r3, r2
 8006508:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 0301 	and.w	r3, r3, #1
 8006512:	2b00      	cmp	r3, #0
 8006514:	d044      	beq.n	80065a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	2b01      	cmp	r3, #1
 800651c:	d107      	bne.n	800652e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800651e:	4b47      	ldr	r3, [pc, #284]	; (800663c <HAL_RCC_ClockConfig+0x1bc>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006526:	2b00      	cmp	r3, #0
 8006528:	d119      	bne.n	800655e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e07f      	b.n	800662e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	2b02      	cmp	r3, #2
 8006534:	d003      	beq.n	800653e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800653a:	2b03      	cmp	r3, #3
 800653c:	d107      	bne.n	800654e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800653e:	4b3f      	ldr	r3, [pc, #252]	; (800663c <HAL_RCC_ClockConfig+0x1bc>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006546:	2b00      	cmp	r3, #0
 8006548:	d109      	bne.n	800655e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e06f      	b.n	800662e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800654e:	4b3b      	ldr	r3, [pc, #236]	; (800663c <HAL_RCC_ClockConfig+0x1bc>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 0302 	and.w	r3, r3, #2
 8006556:	2b00      	cmp	r3, #0
 8006558:	d101      	bne.n	800655e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	e067      	b.n	800662e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800655e:	4b37      	ldr	r3, [pc, #220]	; (800663c <HAL_RCC_ClockConfig+0x1bc>)
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	f023 0203 	bic.w	r2, r3, #3
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	4934      	ldr	r1, [pc, #208]	; (800663c <HAL_RCC_ClockConfig+0x1bc>)
 800656c:	4313      	orrs	r3, r2
 800656e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006570:	f7fc fd02 	bl	8002f78 <HAL_GetTick>
 8006574:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006576:	e00a      	b.n	800658e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006578:	f7fc fcfe 	bl	8002f78 <HAL_GetTick>
 800657c:	4602      	mov	r2, r0
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	f241 3288 	movw	r2, #5000	; 0x1388
 8006586:	4293      	cmp	r3, r2
 8006588:	d901      	bls.n	800658e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800658a:	2303      	movs	r3, #3
 800658c:	e04f      	b.n	800662e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800658e:	4b2b      	ldr	r3, [pc, #172]	; (800663c <HAL_RCC_ClockConfig+0x1bc>)
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	f003 020c 	and.w	r2, r3, #12
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	429a      	cmp	r2, r3
 800659e:	d1eb      	bne.n	8006578 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80065a0:	4b25      	ldr	r3, [pc, #148]	; (8006638 <HAL_RCC_ClockConfig+0x1b8>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f003 030f 	and.w	r3, r3, #15
 80065a8:	683a      	ldr	r2, [r7, #0]
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d20c      	bcs.n	80065c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065ae:	4b22      	ldr	r3, [pc, #136]	; (8006638 <HAL_RCC_ClockConfig+0x1b8>)
 80065b0:	683a      	ldr	r2, [r7, #0]
 80065b2:	b2d2      	uxtb	r2, r2
 80065b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065b6:	4b20      	ldr	r3, [pc, #128]	; (8006638 <HAL_RCC_ClockConfig+0x1b8>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 030f 	and.w	r3, r3, #15
 80065be:	683a      	ldr	r2, [r7, #0]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d001      	beq.n	80065c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	e032      	b.n	800662e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 0304 	and.w	r3, r3, #4
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d008      	beq.n	80065e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065d4:	4b19      	ldr	r3, [pc, #100]	; (800663c <HAL_RCC_ClockConfig+0x1bc>)
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	68db      	ldr	r3, [r3, #12]
 80065e0:	4916      	ldr	r1, [pc, #88]	; (800663c <HAL_RCC_ClockConfig+0x1bc>)
 80065e2:	4313      	orrs	r3, r2
 80065e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f003 0308 	and.w	r3, r3, #8
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d009      	beq.n	8006606 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80065f2:	4b12      	ldr	r3, [pc, #72]	; (800663c <HAL_RCC_ClockConfig+0x1bc>)
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	00db      	lsls	r3, r3, #3
 8006600:	490e      	ldr	r1, [pc, #56]	; (800663c <HAL_RCC_ClockConfig+0x1bc>)
 8006602:	4313      	orrs	r3, r2
 8006604:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006606:	f000 f821 	bl	800664c <HAL_RCC_GetSysClockFreq>
 800660a:	4601      	mov	r1, r0
 800660c:	4b0b      	ldr	r3, [pc, #44]	; (800663c <HAL_RCC_ClockConfig+0x1bc>)
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	091b      	lsrs	r3, r3, #4
 8006612:	f003 030f 	and.w	r3, r3, #15
 8006616:	4a0a      	ldr	r2, [pc, #40]	; (8006640 <HAL_RCC_ClockConfig+0x1c0>)
 8006618:	5cd3      	ldrb	r3, [r2, r3]
 800661a:	fa21 f303 	lsr.w	r3, r1, r3
 800661e:	4a09      	ldr	r2, [pc, #36]	; (8006644 <HAL_RCC_ClockConfig+0x1c4>)
 8006620:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006622:	4b09      	ldr	r3, [pc, #36]	; (8006648 <HAL_RCC_ClockConfig+0x1c8>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4618      	mov	r0, r3
 8006628:	f7fc fc62 	bl	8002ef0 <HAL_InitTick>

  return HAL_OK;
 800662c:	2300      	movs	r3, #0
}
 800662e:	4618      	mov	r0, r3
 8006630:	3710      	adds	r7, #16
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop
 8006638:	40023c00 	.word	0x40023c00
 800663c:	40023800 	.word	0x40023800
 8006640:	08011aac 	.word	0x08011aac
 8006644:	20000010 	.word	0x20000010
 8006648:	20000014 	.word	0x20000014

0800664c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800664c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800664e:	b085      	sub	sp, #20
 8006650:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006652:	2300      	movs	r3, #0
 8006654:	607b      	str	r3, [r7, #4]
 8006656:	2300      	movs	r3, #0
 8006658:	60fb      	str	r3, [r7, #12]
 800665a:	2300      	movs	r3, #0
 800665c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800665e:	2300      	movs	r3, #0
 8006660:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006662:	4b50      	ldr	r3, [pc, #320]	; (80067a4 <HAL_RCC_GetSysClockFreq+0x158>)
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	f003 030c 	and.w	r3, r3, #12
 800666a:	2b04      	cmp	r3, #4
 800666c:	d007      	beq.n	800667e <HAL_RCC_GetSysClockFreq+0x32>
 800666e:	2b08      	cmp	r3, #8
 8006670:	d008      	beq.n	8006684 <HAL_RCC_GetSysClockFreq+0x38>
 8006672:	2b00      	cmp	r3, #0
 8006674:	f040 808d 	bne.w	8006792 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006678:	4b4b      	ldr	r3, [pc, #300]	; (80067a8 <HAL_RCC_GetSysClockFreq+0x15c>)
 800667a:	60bb      	str	r3, [r7, #8]
       break;
 800667c:	e08c      	b.n	8006798 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800667e:	4b4b      	ldr	r3, [pc, #300]	; (80067ac <HAL_RCC_GetSysClockFreq+0x160>)
 8006680:	60bb      	str	r3, [r7, #8]
      break;
 8006682:	e089      	b.n	8006798 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006684:	4b47      	ldr	r3, [pc, #284]	; (80067a4 <HAL_RCC_GetSysClockFreq+0x158>)
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800668c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800668e:	4b45      	ldr	r3, [pc, #276]	; (80067a4 <HAL_RCC_GetSysClockFreq+0x158>)
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006696:	2b00      	cmp	r3, #0
 8006698:	d023      	beq.n	80066e2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800669a:	4b42      	ldr	r3, [pc, #264]	; (80067a4 <HAL_RCC_GetSysClockFreq+0x158>)
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	099b      	lsrs	r3, r3, #6
 80066a0:	f04f 0400 	mov.w	r4, #0
 80066a4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80066a8:	f04f 0200 	mov.w	r2, #0
 80066ac:	ea03 0501 	and.w	r5, r3, r1
 80066b0:	ea04 0602 	and.w	r6, r4, r2
 80066b4:	4a3d      	ldr	r2, [pc, #244]	; (80067ac <HAL_RCC_GetSysClockFreq+0x160>)
 80066b6:	fb02 f106 	mul.w	r1, r2, r6
 80066ba:	2200      	movs	r2, #0
 80066bc:	fb02 f205 	mul.w	r2, r2, r5
 80066c0:	440a      	add	r2, r1
 80066c2:	493a      	ldr	r1, [pc, #232]	; (80067ac <HAL_RCC_GetSysClockFreq+0x160>)
 80066c4:	fba5 0101 	umull	r0, r1, r5, r1
 80066c8:	1853      	adds	r3, r2, r1
 80066ca:	4619      	mov	r1, r3
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f04f 0400 	mov.w	r4, #0
 80066d2:	461a      	mov	r2, r3
 80066d4:	4623      	mov	r3, r4
 80066d6:	f7fa fb27 	bl	8000d28 <__aeabi_uldivmod>
 80066da:	4603      	mov	r3, r0
 80066dc:	460c      	mov	r4, r1
 80066de:	60fb      	str	r3, [r7, #12]
 80066e0:	e049      	b.n	8006776 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066e2:	4b30      	ldr	r3, [pc, #192]	; (80067a4 <HAL_RCC_GetSysClockFreq+0x158>)
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	099b      	lsrs	r3, r3, #6
 80066e8:	f04f 0400 	mov.w	r4, #0
 80066ec:	f240 11ff 	movw	r1, #511	; 0x1ff
 80066f0:	f04f 0200 	mov.w	r2, #0
 80066f4:	ea03 0501 	and.w	r5, r3, r1
 80066f8:	ea04 0602 	and.w	r6, r4, r2
 80066fc:	4629      	mov	r1, r5
 80066fe:	4632      	mov	r2, r6
 8006700:	f04f 0300 	mov.w	r3, #0
 8006704:	f04f 0400 	mov.w	r4, #0
 8006708:	0154      	lsls	r4, r2, #5
 800670a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800670e:	014b      	lsls	r3, r1, #5
 8006710:	4619      	mov	r1, r3
 8006712:	4622      	mov	r2, r4
 8006714:	1b49      	subs	r1, r1, r5
 8006716:	eb62 0206 	sbc.w	r2, r2, r6
 800671a:	f04f 0300 	mov.w	r3, #0
 800671e:	f04f 0400 	mov.w	r4, #0
 8006722:	0194      	lsls	r4, r2, #6
 8006724:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006728:	018b      	lsls	r3, r1, #6
 800672a:	1a5b      	subs	r3, r3, r1
 800672c:	eb64 0402 	sbc.w	r4, r4, r2
 8006730:	f04f 0100 	mov.w	r1, #0
 8006734:	f04f 0200 	mov.w	r2, #0
 8006738:	00e2      	lsls	r2, r4, #3
 800673a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800673e:	00d9      	lsls	r1, r3, #3
 8006740:	460b      	mov	r3, r1
 8006742:	4614      	mov	r4, r2
 8006744:	195b      	adds	r3, r3, r5
 8006746:	eb44 0406 	adc.w	r4, r4, r6
 800674a:	f04f 0100 	mov.w	r1, #0
 800674e:	f04f 0200 	mov.w	r2, #0
 8006752:	02a2      	lsls	r2, r4, #10
 8006754:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006758:	0299      	lsls	r1, r3, #10
 800675a:	460b      	mov	r3, r1
 800675c:	4614      	mov	r4, r2
 800675e:	4618      	mov	r0, r3
 8006760:	4621      	mov	r1, r4
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f04f 0400 	mov.w	r4, #0
 8006768:	461a      	mov	r2, r3
 800676a:	4623      	mov	r3, r4
 800676c:	f7fa fadc 	bl	8000d28 <__aeabi_uldivmod>
 8006770:	4603      	mov	r3, r0
 8006772:	460c      	mov	r4, r1
 8006774:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006776:	4b0b      	ldr	r3, [pc, #44]	; (80067a4 <HAL_RCC_GetSysClockFreq+0x158>)
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	0c1b      	lsrs	r3, r3, #16
 800677c:	f003 0303 	and.w	r3, r3, #3
 8006780:	3301      	adds	r3, #1
 8006782:	005b      	lsls	r3, r3, #1
 8006784:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	fbb2 f3f3 	udiv	r3, r2, r3
 800678e:	60bb      	str	r3, [r7, #8]
      break;
 8006790:	e002      	b.n	8006798 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006792:	4b05      	ldr	r3, [pc, #20]	; (80067a8 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006794:	60bb      	str	r3, [r7, #8]
      break;
 8006796:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006798:	68bb      	ldr	r3, [r7, #8]
}
 800679a:	4618      	mov	r0, r3
 800679c:	3714      	adds	r7, #20
 800679e:	46bd      	mov	sp, r7
 80067a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067a2:	bf00      	nop
 80067a4:	40023800 	.word	0x40023800
 80067a8:	00f42400 	.word	0x00f42400
 80067ac:	00b71b00 	.word	0x00b71b00

080067b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067b0:	b480      	push	{r7}
 80067b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80067b4:	4b03      	ldr	r3, [pc, #12]	; (80067c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80067b6:	681b      	ldr	r3, [r3, #0]
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr
 80067c2:	bf00      	nop
 80067c4:	20000010 	.word	0x20000010

080067c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80067cc:	f7ff fff0 	bl	80067b0 <HAL_RCC_GetHCLKFreq>
 80067d0:	4601      	mov	r1, r0
 80067d2:	4b05      	ldr	r3, [pc, #20]	; (80067e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	0a9b      	lsrs	r3, r3, #10
 80067d8:	f003 0307 	and.w	r3, r3, #7
 80067dc:	4a03      	ldr	r2, [pc, #12]	; (80067ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80067de:	5cd3      	ldrb	r3, [r2, r3]
 80067e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	40023800 	.word	0x40023800
 80067ec:	08011abc 	.word	0x08011abc

080067f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80067f4:	f7ff ffdc 	bl	80067b0 <HAL_RCC_GetHCLKFreq>
 80067f8:	4601      	mov	r1, r0
 80067fa:	4b05      	ldr	r3, [pc, #20]	; (8006810 <HAL_RCC_GetPCLK2Freq+0x20>)
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	0b5b      	lsrs	r3, r3, #13
 8006800:	f003 0307 	and.w	r3, r3, #7
 8006804:	4a03      	ldr	r2, [pc, #12]	; (8006814 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006806:	5cd3      	ldrb	r3, [r2, r3]
 8006808:	fa21 f303 	lsr.w	r3, r1, r3
}
 800680c:	4618      	mov	r0, r3
 800680e:	bd80      	pop	{r7, pc}
 8006810:	40023800 	.word	0x40023800
 8006814:	08011abc 	.word	0x08011abc

08006818 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d101      	bne.n	800682a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e022      	b.n	8006870 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006830:	b2db      	uxtb	r3, r3
 8006832:	2b00      	cmp	r3, #0
 8006834:	d105      	bne.n	8006842 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f7fc f86d 	bl	800291c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2203      	movs	r2, #3
 8006846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 f814 	bl	8006878 <HAL_SD_InitCard>
 8006850:	4603      	mov	r3, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	d001      	beq.n	800685a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e00a      	b.n	8006870 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2200      	movs	r2, #0
 800685e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2201      	movs	r2, #1
 800686a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800686e:	2300      	movs	r3, #0
}
 8006870:	4618      	mov	r0, r3
 8006872:	3708      	adds	r7, #8
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006878:	b5b0      	push	{r4, r5, r7, lr}
 800687a:	b08e      	sub	sp, #56	; 0x38
 800687c:	af04      	add	r7, sp, #16
 800687e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8006880:	2300      	movs	r3, #0
 8006882:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8006884:	2300      	movs	r3, #0
 8006886:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006888:	2300      	movs	r3, #0
 800688a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800688c:	2300      	movs	r3, #0
 800688e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006890:	2300      	movs	r3, #0
 8006892:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8006894:	2376      	movs	r3, #118	; 0x76
 8006896:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681d      	ldr	r5, [r3, #0]
 800689c:	466c      	mov	r4, sp
 800689e:	f107 0314 	add.w	r3, r7, #20
 80068a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80068a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80068aa:	f107 0308 	add.w	r3, r7, #8
 80068ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80068b0:	4628      	mov	r0, r5
 80068b2:	f002 fa8b 	bl	8008dcc <SDIO_Init>
 80068b6:	4603      	mov	r3, r0
 80068b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80068bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d001      	beq.n	80068c8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	e031      	b.n	800692c <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80068c8:	4b1a      	ldr	r3, [pc, #104]	; (8006934 <HAL_SD_InitCard+0xbc>)
 80068ca:	2200      	movs	r2, #0
 80068cc:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4618      	mov	r0, r3
 80068d4:	f002 fac3 	bl	8008e5e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80068d8:	4b16      	ldr	r3, [pc, #88]	; (8006934 <HAL_SD_InitCard+0xbc>)
 80068da:	2201      	movs	r2, #1
 80068dc:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 fffa 	bl	80078d8 <SD_PowerON>
 80068e4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80068e6:	6a3b      	ldr	r3, [r7, #32]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d00b      	beq.n	8006904 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068f8:	6a3b      	ldr	r3, [r7, #32]
 80068fa:	431a      	orrs	r2, r3
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	e013      	b.n	800692c <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 ff19 	bl	800773c <SD_InitCard>
 800690a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800690c:	6a3b      	ldr	r3, [r7, #32]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d00b      	beq.n	800692a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2201      	movs	r2, #1
 8006916:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800691e:	6a3b      	ldr	r3, [r7, #32]
 8006920:	431a      	orrs	r2, r3
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e000      	b.n	800692c <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800692a:	2300      	movs	r3, #0
}
 800692c:	4618      	mov	r0, r3
 800692e:	3728      	adds	r7, #40	; 0x28
 8006930:	46bd      	mov	sp, r7
 8006932:	bdb0      	pop	{r4, r5, r7, pc}
 8006934:	422580a0 	.word	0x422580a0

08006938 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b08c      	sub	sp, #48	; 0x30
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	607a      	str	r2, [r7, #4]
 8006944:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d107      	bne.n	8006960 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006954:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	e0c9      	b.n	8006af4 <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006966:	b2db      	uxtb	r3, r3
 8006968:	2b01      	cmp	r3, #1
 800696a:	f040 80c2 	bne.w	8006af2 <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2200      	movs	r2, #0
 8006972:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006974:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	441a      	add	r2, r3
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800697e:	429a      	cmp	r2, r3
 8006980:	d907      	bls.n	8006992 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006986:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	e0b0      	b.n	8006af4 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2203      	movs	r2, #3
 8006996:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	2200      	movs	r2, #0
 80069a0:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069a8:	68fa      	ldr	r2, [r7, #12]
 80069aa:	6812      	ldr	r2, [r2, #0]
 80069ac:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 80069b0:	f043 0302 	orr.w	r3, r3, #2
 80069b4:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ba:	4a50      	ldr	r2, [pc, #320]	; (8006afc <HAL_SD_ReadBlocks_DMA+0x1c4>)
 80069bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c2:	4a4f      	ldr	r2, [pc, #316]	; (8006b00 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 80069c4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ca:	2200      	movs	r2, #0
 80069cc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	3380      	adds	r3, #128	; 0x80
 80069d8:	4619      	mov	r1, r3
 80069da:	68ba      	ldr	r2, [r7, #8]
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	025b      	lsls	r3, r3, #9
 80069e0:	089b      	lsrs	r3, r3, #2
 80069e2:	f7fc fcb7 	bl	8003354 <HAL_DMA_Start_IT>
 80069e6:	4603      	mov	r3, r0
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d017      	beq.n	8006a1c <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80069fa:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a40      	ldr	r2, [pc, #256]	; (8006b04 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8006a02:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a08:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e06b      	b.n	8006af4 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8006a1c:	4b3a      	ldr	r3, [pc, #232]	; (8006b08 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8006a1e:	2201      	movs	r2, #1
 8006a20:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d002      	beq.n	8006a30 <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 8006a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a2c:	025b      	lsls	r3, r3, #9
 8006a2e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f002 faa3 	bl	8008f84 <SDMMC_CmdBlockLength>
 8006a3e:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8006a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d00f      	beq.n	8006a66 <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a2e      	ldr	r2, [pc, #184]	; (8006b04 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8006a4c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a54:	431a      	orrs	r2, r3
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	e046      	b.n	8006af4 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006a66:	f04f 33ff 	mov.w	r3, #4294967295
 8006a6a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	025b      	lsls	r3, r3, #9
 8006a70:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006a72:	2390      	movs	r3, #144	; 0x90
 8006a74:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006a76:	2302      	movs	r3, #2
 8006a78:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f107 0210 	add.w	r2, r7, #16
 8006a8a:	4611      	mov	r1, r2
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f002 fa4d 	bl	8008f2c <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d90a      	bls.n	8006aae <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2282      	movs	r2, #130	; 0x82
 8006a9c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f002 fab1 	bl	800900c <SDMMC_CmdReadMultiBlock>
 8006aaa:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006aac:	e009      	b.n	8006ac2 <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2281      	movs	r2, #129	; 0x81
 8006ab2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006aba:	4618      	mov	r0, r3
 8006abc:	f002 fa84 	bl	8008fc8 <SDMMC_CmdReadSingleBlock>
 8006ac0:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8006ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d012      	beq.n	8006aee <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a0d      	ldr	r2, [pc, #52]	; (8006b04 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8006ace:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad6:	431a      	orrs	r2, r3
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	e002      	b.n	8006af4 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 8006aee:	2300      	movs	r3, #0
 8006af0:	e000      	b.n	8006af4 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 8006af2:	2302      	movs	r3, #2
  }
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3730      	adds	r7, #48	; 0x30
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	0800754b 	.word	0x0800754b
 8006b00:	080075bd 	.word	0x080075bd
 8006b04:	004005ff 	.word	0x004005ff
 8006b08:	4225858c 	.word	0x4225858c

08006b0c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b08c      	sub	sp, #48	; 0x30
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	607a      	str	r2, [r7, #4]
 8006b18:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d107      	bne.n	8006b34 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b28:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	e0ce      	b.n	8006cd2 <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	f040 80c7 	bne.w	8006cd0 <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2200      	movs	r2, #0
 8006b46:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006b48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	441a      	add	r2, r3
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d907      	bls.n	8006b66 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b5a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	e0b5      	b.n	8006cd2 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2203      	movs	r2, #3
 8006b6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	2200      	movs	r2, #0
 8006b74:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b7c:	68fa      	ldr	r2, [r7, #12]
 8006b7e:	6812      	ldr	r2, [r2, #0]
 8006b80:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8006b84:	f043 0302 	orr.w	r3, r3, #2
 8006b88:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b8e:	4a53      	ldr	r2, [pc, #332]	; (8006cdc <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8006b90:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b96:	4a52      	ldr	r2, [pc, #328]	; (8006ce0 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8006b98:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d002      	beq.n	8006bb0 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8006baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bac:	025b      	lsls	r3, r3, #9
 8006bae:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f002 f9e3 	bl	8008f84 <SDMMC_CmdBlockLength>
 8006bbe:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d00f      	beq.n	8006be6 <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a46      	ldr	r2, [pc, #280]	; (8006ce4 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8006bcc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd4:	431a      	orrs	r2, r3
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2201      	movs	r2, #1
 8006bde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	e075      	b.n	8006cd2 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d90a      	bls.n	8006c02 <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	22a0      	movs	r2, #160	; 0xa0
 8006bf0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f002 fa4b 	bl	8009094 <SDMMC_CmdWriteMultiBlock>
 8006bfe:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006c00:	e009      	b.n	8006c16 <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2290      	movs	r2, #144	; 0x90
 8006c06:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f002 fa1e 	bl	8009050 <SDMMC_CmdWriteSingleBlock>
 8006c14:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d012      	beq.n	8006c42 <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a30      	ldr	r2, [pc, #192]	; (8006ce4 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8006c22:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c2a:	431a      	orrs	r2, r3
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e047      	b.n	8006cd2 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8006c42:	4b29      	ldr	r3, [pc, #164]	; (8006ce8 <HAL_SD_WriteBlocks_DMA+0x1dc>)
 8006c44:	2201      	movs	r2, #1
 8006c46:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006c4c:	68b9      	ldr	r1, [r7, #8]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	3380      	adds	r3, #128	; 0x80
 8006c54:	461a      	mov	r2, r3
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	025b      	lsls	r3, r3, #9
 8006c5a:	089b      	lsrs	r3, r3, #2
 8006c5c:	f7fc fb7a 	bl	8003354 <HAL_DMA_Start_IT>
 8006c60:	4603      	mov	r3, r0
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d01c      	beq.n	8006ca0 <HAL_SD_WriteBlocks_DMA+0x194>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c6c:	68fa      	ldr	r2, [r7, #12]
 8006c6e:	6812      	ldr	r2, [r2, #0]
 8006c70:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8006c74:	f023 0302 	bic.w	r3, r3, #2
 8006c78:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a19      	ldr	r2, [pc, #100]	; (8006ce4 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8006c80:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c86:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2201      	movs	r2, #1
 8006c92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e018      	b.n	8006cd2 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8006ca4:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	025b      	lsls	r3, r3, #9
 8006caa:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006cac:	2390      	movs	r3, #144	; 0x90
 8006cae:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f107 0210 	add.w	r2, r7, #16
 8006cc4:	4611      	mov	r1, r2
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f002 f930 	bl	8008f2c <SDIO_ConfigData>

      return HAL_OK;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	e000      	b.n	8006cd2 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 8006cd0:	2302      	movs	r3, #2
  }
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3730      	adds	r7, #48	; 0x30
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	08007521 	.word	0x08007521
 8006ce0:	080075bd 	.word	0x080075bd
 8006ce4:	004005ff 	.word	0x004005ff
 8006ce8:	4225858c 	.word	0x4225858c

08006cec <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b084      	sub	sp, #16
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf8:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d008      	beq.n	8006d1a <HAL_SD_IRQHandler+0x2e>
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f003 0308 	and.w	r3, r3, #8
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d003      	beq.n	8006d1a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 fff6 	bl	8007d04 <SD_Read_IT>
 8006d18:	e165      	b.n	8006fe6 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	f000 808f 	beq.w	8006e48 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006d32:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	6812      	ldr	r2, [r2, #0]
 8006d3e:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8006d42:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8006d46:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f022 0201 	bic.w	r2, r2, #1
 8006d56:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f003 0308 	and.w	r3, r3, #8
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d039      	beq.n	8006dd6 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f003 0302 	and.w	r3, r3, #2
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d104      	bne.n	8006d76 <HAL_SD_IRQHandler+0x8a>
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f003 0320 	and.w	r3, r3, #32
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d011      	beq.n	8006d9a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f002 f9ac 	bl	80090d8 <SDMMC_CmdStopTransfer>
 8006d80:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d008      	beq.n	8006d9a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	431a      	orrs	r2, r3
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 f943 	bl	8007020 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f240 523a 	movw	r2, #1338	; 0x53a
 8006da2:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2201      	movs	r2, #1
 8006da8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f003 0301 	and.w	r3, r3, #1
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d104      	bne.n	8006dc6 <HAL_SD_IRQHandler+0xda>
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f003 0302 	and.w	r3, r3, #2
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d003      	beq.n	8006dce <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 f920 	bl	800700c <HAL_SD_RxCpltCallback>
 8006dcc:	e10b      	b.n	8006fe6 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 f912 	bl	8006ff8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006dd4:	e107      	b.n	8006fe6 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	f000 8102 	beq.w	8006fe6 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f003 0320 	and.w	r3, r3, #32
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d011      	beq.n	8006e10 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4618      	mov	r0, r3
 8006df2:	f002 f971 	bl	80090d8 <SDMMC_CmdStopTransfer>
 8006df6:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d008      	beq.n	8006e10 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	431a      	orrs	r2, r3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 f908 	bl	8007020 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f003 0301 	and.w	r3, r3, #1
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	f040 80e5 	bne.w	8006fe6 <HAL_SD_IRQHandler+0x2fa>
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f003 0302 	and.w	r3, r3, #2
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	f040 80df 	bne.w	8006fe6 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f022 0208 	bic.w	r2, r2, #8
 8006e36:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 f8d9 	bl	8006ff8 <HAL_SD_TxCpltCallback>
}
 8006e46:	e0ce      	b.n	8006fe6 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d008      	beq.n	8006e68 <HAL_SD_IRQHandler+0x17c>
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f003 0308 	and.w	r3, r3, #8
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d003      	beq.n	8006e68 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 ffa0 	bl	8007da6 <SD_Write_IT>
 8006e66:	e0be      	b.n	8006fe6 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e6e:	f240 233a 	movw	r3, #570	; 0x23a
 8006e72:	4013      	ands	r3, r2
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	f000 80b6 	beq.w	8006fe6 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e80:	f003 0302 	and.w	r3, r3, #2
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d005      	beq.n	8006e94 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e8c:	f043 0202 	orr.w	r2, r3, #2
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e9a:	f003 0308 	and.w	r3, r3, #8
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d005      	beq.n	8006eae <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea6:	f043 0208 	orr.w	r2, r3, #8
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eb4:	f003 0320 	and.w	r3, r3, #32
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d005      	beq.n	8006ec8 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec0:	f043 0220 	orr.w	r2, r3, #32
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ece:	f003 0310 	and.w	r3, r3, #16
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d005      	beq.n	8006ee2 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eda:	f043 0210 	orr.w	r2, r3, #16
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ee8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d005      	beq.n	8006efc <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef4:	f043 0208 	orr.w	r2, r3, #8
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f240 723a 	movw	r2, #1850	; 0x73a
 8006f04:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	6812      	ldr	r2, [r2, #0]
 8006f10:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8006f14:	f023 0302 	bic.w	r3, r3, #2
 8006f18:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f002 f8da 	bl	80090d8 <SDMMC_CmdStopTransfer>
 8006f24:	4602      	mov	r2, r0
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f2a:	431a      	orrs	r2, r3
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f003 0308 	and.w	r3, r3, #8
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d00a      	beq.n	8006f50 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f000 f869 	bl	8007020 <HAL_SD_ErrorCallback>
}
 8006f4e:	e04a      	b.n	8006fe6 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d045      	beq.n	8006fe6 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	f003 0310 	and.w	r3, r3, #16
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d104      	bne.n	8006f6e <HAL_SD_IRQHandler+0x282>
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f003 0320 	and.w	r3, r3, #32
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d011      	beq.n	8006f92 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f72:	4a1f      	ldr	r2, [pc, #124]	; (8006ff0 <HAL_SD_IRQHandler+0x304>)
 8006f74:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f7fc fa42 	bl	8003404 <HAL_DMA_Abort_IT>
 8006f80:	4603      	mov	r3, r0
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d02f      	beq.n	8006fe6 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f000 fb68 	bl	8007660 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006f90:	e029      	b.n	8006fe6 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f003 0301 	and.w	r3, r3, #1
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d104      	bne.n	8006fa6 <HAL_SD_IRQHandler+0x2ba>
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f003 0302 	and.w	r3, r3, #2
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d011      	beq.n	8006fca <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006faa:	4a12      	ldr	r2, [pc, #72]	; (8006ff4 <HAL_SD_IRQHandler+0x308>)
 8006fac:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f7fc fa26 	bl	8003404 <HAL_DMA_Abort_IT>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d013      	beq.n	8006fe6 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f000 fb83 	bl	80076ce <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006fc8:	e00d      	b.n	8006fe6 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 f828 	bl	8007034 <HAL_SD_AbortCallback>
}
 8006fe4:	e7ff      	b.n	8006fe6 <HAL_SD_IRQHandler+0x2fa>
 8006fe6:	bf00      	nop
 8006fe8:	3710      	adds	r7, #16
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	bf00      	nop
 8006ff0:	08007661 	.word	0x08007661
 8006ff4:	080076cf 	.word	0x080076cf

08006ff8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: Pointer to SD handle
  * @retval None
  */
__weak void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b083      	sub	sp, #12
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_TxCpltCallback can be implemented in the user file
   */
}
 8007000:	bf00      	nop
 8007002:	370c      	adds	r7, #12
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr

0800700c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800700c:	b480      	push	{r7}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_RxCpltCallback can be implemented in the user file
   */
}
 8007014:	bf00      	nop
 8007016:	370c      	adds	r7, #12
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr

08007020 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007028:	bf00      	nop
 800702a:	370c      	adds	r7, #12
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr

08007034 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_AbortCallback can be implemented in the user file
   */
}
 800703c:	bf00      	nop
 800703e:	370c      	adds	r7, #12
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007056:	0f9b      	lsrs	r3, r3, #30
 8007058:	b2da      	uxtb	r2, r3
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007062:	0e9b      	lsrs	r3, r3, #26
 8007064:	b2db      	uxtb	r3, r3
 8007066:	f003 030f 	and.w	r3, r3, #15
 800706a:	b2da      	uxtb	r2, r3
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007074:	0e1b      	lsrs	r3, r3, #24
 8007076:	b2db      	uxtb	r3, r3
 8007078:	f003 0303 	and.w	r3, r3, #3
 800707c:	b2da      	uxtb	r2, r3
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007086:	0c1b      	lsrs	r3, r3, #16
 8007088:	b2da      	uxtb	r2, r3
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007092:	0a1b      	lsrs	r3, r3, #8
 8007094:	b2da      	uxtb	r2, r3
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800709e:	b2da      	uxtb	r2, r3
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070a8:	0d1b      	lsrs	r3, r3, #20
 80070aa:	b29a      	uxth	r2, r3
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070b4:	0c1b      	lsrs	r3, r3, #16
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	f003 030f 	and.w	r3, r3, #15
 80070bc:	b2da      	uxtb	r2, r3
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070c6:	0bdb      	lsrs	r3, r3, #15
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	f003 0301 	and.w	r3, r3, #1
 80070ce:	b2da      	uxtb	r2, r3
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070d8:	0b9b      	lsrs	r3, r3, #14
 80070da:	b2db      	uxtb	r3, r3
 80070dc:	f003 0301 	and.w	r3, r3, #1
 80070e0:	b2da      	uxtb	r2, r3
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070ea:	0b5b      	lsrs	r3, r3, #13
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	f003 0301 	and.w	r3, r3, #1
 80070f2:	b2da      	uxtb	r2, r3
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070fc:	0b1b      	lsrs	r3, r3, #12
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	f003 0301 	and.w	r3, r3, #1
 8007104:	b2da      	uxtb	r2, r3
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	2200      	movs	r2, #0
 800710e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007114:	2b00      	cmp	r3, #0
 8007116:	d163      	bne.n	80071e0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800711c:	009a      	lsls	r2, r3, #2
 800711e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007122:	4013      	ands	r3, r2
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007128:	0f92      	lsrs	r2, r2, #30
 800712a:	431a      	orrs	r2, r3
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007134:	0edb      	lsrs	r3, r3, #27
 8007136:	b2db      	uxtb	r3, r3
 8007138:	f003 0307 	and.w	r3, r3, #7
 800713c:	b2da      	uxtb	r2, r3
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007146:	0e1b      	lsrs	r3, r3, #24
 8007148:	b2db      	uxtb	r3, r3
 800714a:	f003 0307 	and.w	r3, r3, #7
 800714e:	b2da      	uxtb	r2, r3
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007158:	0d5b      	lsrs	r3, r3, #21
 800715a:	b2db      	uxtb	r3, r3
 800715c:	f003 0307 	and.w	r3, r3, #7
 8007160:	b2da      	uxtb	r2, r3
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800716a:	0c9b      	lsrs	r3, r3, #18
 800716c:	b2db      	uxtb	r3, r3
 800716e:	f003 0307 	and.w	r3, r3, #7
 8007172:	b2da      	uxtb	r2, r3
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800717c:	0bdb      	lsrs	r3, r3, #15
 800717e:	b2db      	uxtb	r3, r3
 8007180:	f003 0307 	and.w	r3, r3, #7
 8007184:	b2da      	uxtb	r2, r3
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	691b      	ldr	r3, [r3, #16]
 800718e:	1c5a      	adds	r2, r3, #1
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	7e1b      	ldrb	r3, [r3, #24]
 8007198:	b2db      	uxtb	r3, r3
 800719a:	f003 0307 	and.w	r3, r3, #7
 800719e:	3302      	adds	r3, #2
 80071a0:	2201      	movs	r2, #1
 80071a2:	fa02 f303 	lsl.w	r3, r2, r3
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80071aa:	fb02 f203 	mul.w	r2, r2, r3
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	7a1b      	ldrb	r3, [r3, #8]
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	f003 030f 	and.w	r3, r3, #15
 80071bc:	2201      	movs	r2, #1
 80071be:	409a      	lsls	r2, r3
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80071cc:	0a52      	lsrs	r2, r2, #9
 80071ce:	fb02 f203 	mul.w	r2, r2, r3
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071dc:	661a      	str	r2, [r3, #96]	; 0x60
 80071de:	e031      	b.n	8007244 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d11d      	bne.n	8007224 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80071ec:	041b      	lsls	r3, r3, #16
 80071ee:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071f6:	0c1b      	lsrs	r3, r3, #16
 80071f8:	431a      	orrs	r2, r3
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	691b      	ldr	r3, [r3, #16]
 8007202:	3301      	adds	r3, #1
 8007204:	029a      	lsls	r2, r3, #10
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007218:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	661a      	str	r2, [r3, #96]	; 0x60
 8007222:	e00f      	b.n	8007244 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a58      	ldr	r2, [pc, #352]	; (800738c <HAL_SD_GetCardCSD+0x344>)
 800722a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007230:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2201      	movs	r2, #1
 800723c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	e09d      	b.n	8007380 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007248:	0b9b      	lsrs	r3, r3, #14
 800724a:	b2db      	uxtb	r3, r3
 800724c:	f003 0301 	and.w	r3, r3, #1
 8007250:	b2da      	uxtb	r2, r3
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800725a:	09db      	lsrs	r3, r3, #7
 800725c:	b2db      	uxtb	r3, r3
 800725e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007262:	b2da      	uxtb	r2, r3
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800726c:	b2db      	uxtb	r3, r3
 800726e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007272:	b2da      	uxtb	r2, r3
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800727c:	0fdb      	lsrs	r3, r3, #31
 800727e:	b2da      	uxtb	r2, r3
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007288:	0f5b      	lsrs	r3, r3, #29
 800728a:	b2db      	uxtb	r3, r3
 800728c:	f003 0303 	and.w	r3, r3, #3
 8007290:	b2da      	uxtb	r2, r3
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800729a:	0e9b      	lsrs	r3, r3, #26
 800729c:	b2db      	uxtb	r3, r3
 800729e:	f003 0307 	and.w	r3, r3, #7
 80072a2:	b2da      	uxtb	r2, r3
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ac:	0d9b      	lsrs	r3, r3, #22
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	f003 030f 	and.w	r3, r3, #15
 80072b4:	b2da      	uxtb	r2, r3
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072be:	0d5b      	lsrs	r3, r3, #21
 80072c0:	b2db      	uxtb	r3, r3
 80072c2:	f003 0301 	and.w	r3, r3, #1
 80072c6:	b2da      	uxtb	r2, r3
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	2200      	movs	r2, #0
 80072d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072da:	0c1b      	lsrs	r3, r3, #16
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	f003 0301 	and.w	r3, r3, #1
 80072e2:	b2da      	uxtb	r2, r3
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ee:	0bdb      	lsrs	r3, r3, #15
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	f003 0301 	and.w	r3, r3, #1
 80072f6:	b2da      	uxtb	r2, r3
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007302:	0b9b      	lsrs	r3, r3, #14
 8007304:	b2db      	uxtb	r3, r3
 8007306:	f003 0301 	and.w	r3, r3, #1
 800730a:	b2da      	uxtb	r2, r3
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007316:	0b5b      	lsrs	r3, r3, #13
 8007318:	b2db      	uxtb	r3, r3
 800731a:	f003 0301 	and.w	r3, r3, #1
 800731e:	b2da      	uxtb	r2, r3
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800732a:	0b1b      	lsrs	r3, r3, #12
 800732c:	b2db      	uxtb	r3, r3
 800732e:	f003 0301 	and.w	r3, r3, #1
 8007332:	b2da      	uxtb	r2, r3
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800733e:	0a9b      	lsrs	r3, r3, #10
 8007340:	b2db      	uxtb	r3, r3
 8007342:	f003 0303 	and.w	r3, r3, #3
 8007346:	b2da      	uxtb	r2, r3
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007352:	0a1b      	lsrs	r3, r3, #8
 8007354:	b2db      	uxtb	r3, r3
 8007356:	f003 0303 	and.w	r3, r3, #3
 800735a:	b2da      	uxtb	r2, r3
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007366:	085b      	lsrs	r3, r3, #1
 8007368:	b2db      	uxtb	r3, r3
 800736a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800736e:	b2da      	uxtb	r2, r3
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	2201      	movs	r2, #1
 800737a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800737e:	2300      	movs	r3, #0
}
 8007380:	4618      	mov	r0, r3
 8007382:	370c      	adds	r7, #12
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr
 800738c:	004005ff 	.word	0x004005ff

08007390 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007390:	b480      	push	{r7}
 8007392:	b083      	sub	sp, #12
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80073da:	2300      	movs	r3, #0
}
 80073dc:	4618      	mov	r0, r3
 80073de:	370c      	adds	r7, #12
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr

080073e8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80073e8:	b5b0      	push	{r4, r5, r7, lr}
 80073ea:	b08e      	sub	sp, #56	; 0x38
 80073ec:	af04      	add	r7, sp, #16
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2203      	movs	r2, #3
 80073f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073fe:	2b03      	cmp	r3, #3
 8007400:	d02e      	beq.n	8007460 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007408:	d106      	bne.n	8007418 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800740e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	639a      	str	r2, [r3, #56]	; 0x38
 8007416:	e029      	b.n	800746c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800741e:	d10a      	bne.n	8007436 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 fb0f 	bl	8007a44 <SD_WideBus_Enable>
 8007426:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800742c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742e:	431a      	orrs	r2, r3
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	639a      	str	r2, [r3, #56]	; 0x38
 8007434:	e01a      	b.n	800746c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d10a      	bne.n	8007452 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f000 fb4c 	bl	8007ada <SD_WideBus_Disable>
 8007442:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744a:	431a      	orrs	r2, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	639a      	str	r2, [r3, #56]	; 0x38
 8007450:	e00c      	b.n	800746c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007456:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	639a      	str	r2, [r3, #56]	; 0x38
 800745e:	e005      	b.n	800746c <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007464:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007470:	2b00      	cmp	r3, #0
 8007472:	d009      	beq.n	8007488 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a18      	ldr	r2, [pc, #96]	; (80074dc <HAL_SD_ConfigWideBusOperation+0xf4>)
 800747a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2201      	movs	r2, #1
 8007480:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007484:	2301      	movs	r3, #1
 8007486:	e024      	b.n	80074d2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	68db      	ldr	r3, [r3, #12]
 8007498:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	695b      	ldr	r3, [r3, #20]
 80074a2:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	699b      	ldr	r3, [r3, #24]
 80074a8:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681d      	ldr	r5, [r3, #0]
 80074ae:	466c      	mov	r4, sp
 80074b0:	f107 0318 	add.w	r3, r7, #24
 80074b4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80074b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80074bc:	f107 030c 	add.w	r3, r7, #12
 80074c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80074c2:	4628      	mov	r0, r5
 80074c4:	f001 fc82 	bl	8008dcc <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80074d0:	2300      	movs	r3, #0
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3728      	adds	r7, #40	; 0x28
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bdb0      	pop	{r4, r5, r7, pc}
 80074da:	bf00      	nop
 80074dc:	004005ff 	.word	0x004005ff

080074e0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b086      	sub	sp, #24
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80074e8:	2300      	movs	r3, #0
 80074ea:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80074ec:	f107 030c 	add.w	r3, r7, #12
 80074f0:	4619      	mov	r1, r3
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 fa7e 	bl	80079f4 <SD_SendStatus>
 80074f8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d005      	beq.n	800750c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	431a      	orrs	r2, r3
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	0a5b      	lsrs	r3, r3, #9
 8007510:	f003 030f 	and.w	r3, r3, #15
 8007514:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007516:	693b      	ldr	r3, [r7, #16]
}
 8007518:	4618      	mov	r0, r3
 800751a:	3718      	adds	r7, #24
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007520:	b480      	push	{r7}
 8007522:	b085      	sub	sp, #20
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800752c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800753c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800753e:	bf00      	nop
 8007540:	3714      	adds	r7, #20
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr

0800754a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800754a:	b580      	push	{r7, lr}
 800754c:	b084      	sub	sp, #16
 800754e:	af00      	add	r7, sp, #0
 8007550:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007556:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800755c:	2b82      	cmp	r3, #130	; 0x82
 800755e:	d111      	bne.n	8007584 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4618      	mov	r0, r3
 8007566:	f001 fdb7 	bl	80090d8 <SDMMC_CmdStopTransfer>
 800756a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d008      	beq.n	8007584 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	431a      	orrs	r2, r3
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800757e:	68f8      	ldr	r0, [r7, #12]
 8007580:	f7ff fd4e 	bl	8007020 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f022 0208 	bic.w	r2, r2, #8
 8007592:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f240 523a 	movw	r2, #1338	; 0x53a
 800759c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2201      	movs	r2, #1
 80075a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2200      	movs	r2, #0
 80075aa:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80075ac:	68f8      	ldr	r0, [r7, #12]
 80075ae:	f7ff fd2d 	bl	800700c <HAL_SD_RxCpltCallback>
#endif
}
 80075b2:	bf00      	nop
 80075b4:	3710      	adds	r7, #16
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
	...

080075bc <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b086      	sub	sp, #24
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075c8:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f7fc f8c6 	bl	800375c <HAL_DMA_GetError>
 80075d0:	4603      	mov	r3, r0
 80075d2:	2b02      	cmp	r3, #2
 80075d4:	d03e      	beq.n	8007654 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075dc:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075e4:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d002      	beq.n	80075f2 <SD_DMAError+0x36>
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d12d      	bne.n	800764e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a19      	ldr	r2, [pc, #100]	; (800765c <SD_DMAError+0xa0>)
 80075f8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007608:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800760e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8007616:	6978      	ldr	r0, [r7, #20]
 8007618:	f7ff ff62 	bl	80074e0 <HAL_SD_GetCardState>
 800761c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	2b06      	cmp	r3, #6
 8007622:	d002      	beq.n	800762a <SD_DMAError+0x6e>
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	2b05      	cmp	r3, #5
 8007628:	d10a      	bne.n	8007640 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4618      	mov	r0, r3
 8007630:	f001 fd52 	bl	80090d8 <SDMMC_CmdStopTransfer>
 8007634:	4602      	mov	r2, r0
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800763a:	431a      	orrs	r2, r3
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	2201      	movs	r2, #1
 8007644:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	2200      	movs	r2, #0
 800764c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800764e:	6978      	ldr	r0, [r7, #20]
 8007650:	f7ff fce6 	bl	8007020 <HAL_SD_ErrorCallback>
#endif
  }
}
 8007654:	bf00      	nop
 8007656:	3718      	adds	r7, #24
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}
 800765c:	004005ff 	.word	0x004005ff

08007660 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b084      	sub	sp, #16
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800766c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f240 523a 	movw	r2, #1338	; 0x53a
 8007676:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007678:	68f8      	ldr	r0, [r7, #12]
 800767a:	f7ff ff31 	bl	80074e0 <HAL_SD_GetCardState>
 800767e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2201      	movs	r2, #1
 8007684:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2200      	movs	r2, #0
 800768c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	2b06      	cmp	r3, #6
 8007692:	d002      	beq.n	800769a <SD_DMATxAbort+0x3a>
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	2b05      	cmp	r3, #5
 8007698:	d10a      	bne.n	80076b0 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4618      	mov	r0, r3
 80076a0:	f001 fd1a 	bl	80090d8 <SDMMC_CmdStopTransfer>
 80076a4:	4602      	mov	r2, r0
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076aa:	431a      	orrs	r2, r3
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d103      	bne.n	80076c0 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80076b8:	68f8      	ldr	r0, [r7, #12]
 80076ba:	f7ff fcbb 	bl	8007034 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80076be:	e002      	b.n	80076c6 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80076c0:	68f8      	ldr	r0, [r7, #12]
 80076c2:	f7ff fcad 	bl	8007020 <HAL_SD_ErrorCallback>
}
 80076c6:	bf00      	nop
 80076c8:	3710      	adds	r7, #16
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}

080076ce <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80076ce:	b580      	push	{r7, lr}
 80076d0:	b084      	sub	sp, #16
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076da:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f240 523a 	movw	r2, #1338	; 0x53a
 80076e4:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80076e6:	68f8      	ldr	r0, [r7, #12]
 80076e8:	f7ff fefa 	bl	80074e0 <HAL_SD_GetCardState>
 80076ec:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2201      	movs	r2, #1
 80076f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2200      	movs	r2, #0
 80076fa:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	2b06      	cmp	r3, #6
 8007700:	d002      	beq.n	8007708 <SD_DMARxAbort+0x3a>
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	2b05      	cmp	r3, #5
 8007706:	d10a      	bne.n	800771e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4618      	mov	r0, r3
 800770e:	f001 fce3 	bl	80090d8 <SDMMC_CmdStopTransfer>
 8007712:	4602      	mov	r2, r0
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007718:	431a      	orrs	r2, r3
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007722:	2b00      	cmp	r3, #0
 8007724:	d103      	bne.n	800772e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007726:	68f8      	ldr	r0, [r7, #12]
 8007728:	f7ff fc84 	bl	8007034 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800772c:	e002      	b.n	8007734 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800772e:	68f8      	ldr	r0, [r7, #12]
 8007730:	f7ff fc76 	bl	8007020 <HAL_SD_ErrorCallback>
}
 8007734:	bf00      	nop
 8007736:	3710      	adds	r7, #16
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800773c:	b5b0      	push	{r4, r5, r7, lr}
 800773e:	b094      	sub	sp, #80	; 0x50
 8007740:	af04      	add	r7, sp, #16
 8007742:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007744:	2301      	movs	r3, #1
 8007746:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4618      	mov	r0, r3
 800774e:	f001 fb95 	bl	8008e7c <SDIO_GetPowerState>
 8007752:	4603      	mov	r3, r0
 8007754:	2b00      	cmp	r3, #0
 8007756:	d102      	bne.n	800775e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007758:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800775c:	e0b7      	b.n	80078ce <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007762:	2b03      	cmp	r3, #3
 8007764:	d02f      	beq.n	80077c6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4618      	mov	r0, r3
 800776c:	f001 fdbe 	bl	80092ec <SDMMC_CmdSendCID>
 8007770:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007774:	2b00      	cmp	r3, #0
 8007776:	d001      	beq.n	800777c <SD_InitCard+0x40>
    {
      return errorstate;
 8007778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800777a:	e0a8      	b.n	80078ce <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	2100      	movs	r1, #0
 8007782:	4618      	mov	r0, r3
 8007784:	f001 fbbf 	bl	8008f06 <SDIO_GetResponse>
 8007788:	4602      	mov	r2, r0
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	2104      	movs	r1, #4
 8007794:	4618      	mov	r0, r3
 8007796:	f001 fbb6 	bl	8008f06 <SDIO_GetResponse>
 800779a:	4602      	mov	r2, r0
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	2108      	movs	r1, #8
 80077a6:	4618      	mov	r0, r3
 80077a8:	f001 fbad 	bl	8008f06 <SDIO_GetResponse>
 80077ac:	4602      	mov	r2, r0
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	210c      	movs	r1, #12
 80077b8:	4618      	mov	r0, r3
 80077ba:	f001 fba4 	bl	8008f06 <SDIO_GetResponse>
 80077be:	4602      	mov	r2, r0
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077ca:	2b03      	cmp	r3, #3
 80077cc:	d00d      	beq.n	80077ea <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f107 020e 	add.w	r2, r7, #14
 80077d6:	4611      	mov	r1, r2
 80077d8:	4618      	mov	r0, r3
 80077da:	f001 fdc4 	bl	8009366 <SDMMC_CmdSetRelAdd>
 80077de:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80077e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d001      	beq.n	80077ea <SD_InitCard+0xae>
    {
      return errorstate;
 80077e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077e8:	e071      	b.n	80078ce <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077ee:	2b03      	cmp	r3, #3
 80077f0:	d036      	beq.n	8007860 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80077f2:	89fb      	ldrh	r3, [r7, #14]
 80077f4:	461a      	mov	r2, r3
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681a      	ldr	r2, [r3, #0]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007802:	041b      	lsls	r3, r3, #16
 8007804:	4619      	mov	r1, r3
 8007806:	4610      	mov	r0, r2
 8007808:	f001 fd8e 	bl	8009328 <SDMMC_CmdSendCSD>
 800780c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800780e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007810:	2b00      	cmp	r3, #0
 8007812:	d001      	beq.n	8007818 <SD_InitCard+0xdc>
    {
      return errorstate;
 8007814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007816:	e05a      	b.n	80078ce <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	2100      	movs	r1, #0
 800781e:	4618      	mov	r0, r3
 8007820:	f001 fb71 	bl	8008f06 <SDIO_GetResponse>
 8007824:	4602      	mov	r2, r0
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	2104      	movs	r1, #4
 8007830:	4618      	mov	r0, r3
 8007832:	f001 fb68 	bl	8008f06 <SDIO_GetResponse>
 8007836:	4602      	mov	r2, r0
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	2108      	movs	r1, #8
 8007842:	4618      	mov	r0, r3
 8007844:	f001 fb5f 	bl	8008f06 <SDIO_GetResponse>
 8007848:	4602      	mov	r2, r0
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	210c      	movs	r1, #12
 8007854:	4618      	mov	r0, r3
 8007856:	f001 fb56 	bl	8008f06 <SDIO_GetResponse>
 800785a:	4602      	mov	r2, r0
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	2104      	movs	r1, #4
 8007866:	4618      	mov	r0, r3
 8007868:	f001 fb4d 	bl	8008f06 <SDIO_GetResponse>
 800786c:	4603      	mov	r3, r0
 800786e:	0d1a      	lsrs	r2, r3, #20
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007874:	f107 0310 	add.w	r3, r7, #16
 8007878:	4619      	mov	r1, r3
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f7ff fbe4 	bl	8007048 <HAL_SD_GetCardCSD>
 8007880:	4603      	mov	r3, r0
 8007882:	2b00      	cmp	r3, #0
 8007884:	d002      	beq.n	800788c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007886:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800788a:	e020      	b.n	80078ce <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6819      	ldr	r1, [r3, #0]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007894:	041b      	lsls	r3, r3, #16
 8007896:	f04f 0400 	mov.w	r4, #0
 800789a:	461a      	mov	r2, r3
 800789c:	4623      	mov	r3, r4
 800789e:	4608      	mov	r0, r1
 80078a0:	f001 fc3c 	bl	800911c <SDMMC_CmdSelDesel>
 80078a4:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80078a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d001      	beq.n	80078b0 <SD_InitCard+0x174>
  {
    return errorstate;
 80078ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078ae:	e00e      	b.n	80078ce <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681d      	ldr	r5, [r3, #0]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	466c      	mov	r4, sp
 80078b8:	f103 0210 	add.w	r2, r3, #16
 80078bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80078be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80078c2:	3304      	adds	r3, #4
 80078c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80078c6:	4628      	mov	r0, r5
 80078c8:	f001 fa80 	bl	8008dcc <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80078cc:	2300      	movs	r3, #0
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3740      	adds	r7, #64	; 0x40
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080078d8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b086      	sub	sp, #24
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80078e0:	2300      	movs	r3, #0
 80078e2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80078e4:	2300      	movs	r3, #0
 80078e6:	617b      	str	r3, [r7, #20]
 80078e8:	2300      	movs	r3, #0
 80078ea:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4618      	mov	r0, r3
 80078f2:	f001 fc36 	bl	8009162 <SDMMC_CmdGoIdleState>
 80078f6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d001      	beq.n	8007902 <SD_PowerON+0x2a>
  {
    return errorstate;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	e072      	b.n	80079e8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4618      	mov	r0, r3
 8007908:	f001 fc49 	bl	800919e <SDMMC_CmdOperCond>
 800790c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d00d      	beq.n	8007930 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2200      	movs	r2, #0
 8007918:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4618      	mov	r0, r3
 8007920:	f001 fc1f 	bl	8009162 <SDMMC_CmdGoIdleState>
 8007924:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d004      	beq.n	8007936 <SD_PowerON+0x5e>
    {
      return errorstate;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	e05b      	b.n	80079e8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2201      	movs	r2, #1
 8007934:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800793a:	2b01      	cmp	r3, #1
 800793c:	d137      	bne.n	80079ae <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	2100      	movs	r1, #0
 8007944:	4618      	mov	r0, r3
 8007946:	f001 fc49 	bl	80091dc <SDMMC_CmdAppCommand>
 800794a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d02d      	beq.n	80079ae <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007952:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007956:	e047      	b.n	80079e8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	2100      	movs	r1, #0
 800795e:	4618      	mov	r0, r3
 8007960:	f001 fc3c 	bl	80091dc <SDMMC_CmdAppCommand>
 8007964:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d001      	beq.n	8007970 <SD_PowerON+0x98>
    {
      return errorstate;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	e03b      	b.n	80079e8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	491e      	ldr	r1, [pc, #120]	; (80079f0 <SD_PowerON+0x118>)
 8007976:	4618      	mov	r0, r3
 8007978:	f001 fc52 	bl	8009220 <SDMMC_CmdAppOperCommand>
 800797c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d002      	beq.n	800798a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007984:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007988:	e02e      	b.n	80079e8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	2100      	movs	r1, #0
 8007990:	4618      	mov	r0, r3
 8007992:	f001 fab8 	bl	8008f06 <SDIO_GetResponse>
 8007996:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	0fdb      	lsrs	r3, r3, #31
 800799c:	2b01      	cmp	r3, #1
 800799e:	d101      	bne.n	80079a4 <SD_PowerON+0xcc>
 80079a0:	2301      	movs	r3, #1
 80079a2:	e000      	b.n	80079a6 <SD_PowerON+0xce>
 80079a4:	2300      	movs	r3, #0
 80079a6:	613b      	str	r3, [r7, #16]

    count++;
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	3301      	adds	r3, #1
 80079ac:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d802      	bhi.n	80079be <SD_PowerON+0xe6>
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d0cc      	beq.n	8007958 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d902      	bls.n	80079ce <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80079c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80079cc:	e00c      	b.n	80079e8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d003      	beq.n	80079e0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2201      	movs	r2, #1
 80079dc:	645a      	str	r2, [r3, #68]	; 0x44
 80079de:	e002      	b.n	80079e6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2200      	movs	r2, #0
 80079e4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80079e6:	2300      	movs	r3, #0
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3718      	adds	r7, #24
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}
 80079f0:	c1100000 	.word	0xc1100000

080079f4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b084      	sub	sp, #16
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d102      	bne.n	8007a0a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007a04:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007a08:	e018      	b.n	8007a3c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a12:	041b      	lsls	r3, r3, #16
 8007a14:	4619      	mov	r1, r3
 8007a16:	4610      	mov	r0, r2
 8007a18:	f001 fcc6 	bl	80093a8 <SDMMC_CmdSendStatus>
 8007a1c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d001      	beq.n	8007a28 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	e009      	b.n	8007a3c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	2100      	movs	r1, #0
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f001 fa69 	bl	8008f06 <SDIO_GetResponse>
 8007a34:	4602      	mov	r2, r0
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007a3a:	2300      	movs	r3, #0
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3710      	adds	r7, #16
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b086      	sub	sp, #24
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	60fb      	str	r3, [r7, #12]
 8007a50:	2300      	movs	r3, #0
 8007a52:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	2100      	movs	r1, #0
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f001 fa53 	bl	8008f06 <SDIO_GetResponse>
 8007a60:	4603      	mov	r3, r0
 8007a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a6a:	d102      	bne.n	8007a72 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007a6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007a70:	e02f      	b.n	8007ad2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007a72:	f107 030c 	add.w	r3, r7, #12
 8007a76:	4619      	mov	r1, r3
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f000 f879 	bl	8007b70 <SD_FindSCR>
 8007a7e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d001      	beq.n	8007a8a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	e023      	b.n	8007ad2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d01c      	beq.n	8007ace <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681a      	ldr	r2, [r3, #0]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a9c:	041b      	lsls	r3, r3, #16
 8007a9e:	4619      	mov	r1, r3
 8007aa0:	4610      	mov	r0, r2
 8007aa2:	f001 fb9b 	bl	80091dc <SDMMC_CmdAppCommand>
 8007aa6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d001      	beq.n	8007ab2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	e00f      	b.n	8007ad2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	2102      	movs	r1, #2
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f001 fbd4 	bl	8009266 <SDMMC_CmdBusWidth>
 8007abe:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d001      	beq.n	8007aca <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	e003      	b.n	8007ad2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007aca:	2300      	movs	r3, #0
 8007acc:	e001      	b.n	8007ad2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007ace:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3718      	adds	r7, #24
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}

08007ada <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007ada:	b580      	push	{r7, lr}
 8007adc:	b086      	sub	sp, #24
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	60fb      	str	r3, [r7, #12]
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	2100      	movs	r1, #0
 8007af0:	4618      	mov	r0, r3
 8007af2:	f001 fa08 	bl	8008f06 <SDIO_GetResponse>
 8007af6:	4603      	mov	r3, r0
 8007af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007afc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b00:	d102      	bne.n	8007b08 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007b02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007b06:	e02f      	b.n	8007b68 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007b08:	f107 030c 	add.w	r3, r7, #12
 8007b0c:	4619      	mov	r1, r3
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 f82e 	bl	8007b70 <SD_FindSCR>
 8007b14:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d001      	beq.n	8007b20 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	e023      	b.n	8007b68 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d01c      	beq.n	8007b64 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b32:	041b      	lsls	r3, r3, #16
 8007b34:	4619      	mov	r1, r3
 8007b36:	4610      	mov	r0, r2
 8007b38:	f001 fb50 	bl	80091dc <SDMMC_CmdAppCommand>
 8007b3c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d001      	beq.n	8007b48 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	e00f      	b.n	8007b68 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	2100      	movs	r1, #0
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f001 fb89 	bl	8009266 <SDMMC_CmdBusWidth>
 8007b54:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d001      	beq.n	8007b60 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	e003      	b.n	8007b68 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007b60:	2300      	movs	r3, #0
 8007b62:	e001      	b.n	8007b68 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007b64:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3718      	adds	r7, #24
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007b70:	b590      	push	{r4, r7, lr}
 8007b72:	b08f      	sub	sp, #60	; 0x3c
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007b7a:	f7fb f9fd 	bl	8002f78 <HAL_GetTick>
 8007b7e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007b80:	2300      	movs	r3, #0
 8007b82:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8007b84:	2300      	movs	r3, #0
 8007b86:	60bb      	str	r3, [r7, #8]
 8007b88:	2300      	movs	r3, #0
 8007b8a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	2108      	movs	r1, #8
 8007b96:	4618      	mov	r0, r3
 8007b98:	f001 f9f4 	bl	8008f84 <SDMMC_CmdBlockLength>
 8007b9c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d001      	beq.n	8007ba8 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba6:	e0a9      	b.n	8007cfc <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681a      	ldr	r2, [r3, #0]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bb0:	041b      	lsls	r3, r3, #16
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	4610      	mov	r0, r2
 8007bb6:	f001 fb11 	bl	80091dc <SDMMC_CmdAppCommand>
 8007bba:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d001      	beq.n	8007bc6 <SD_FindSCR+0x56>
  {
    return errorstate;
 8007bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc4:	e09a      	b.n	8007cfc <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8007bca:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007bcc:	2308      	movs	r3, #8
 8007bce:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8007bd0:	2330      	movs	r3, #48	; 0x30
 8007bd2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007bd4:	2302      	movs	r3, #2
 8007bd6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f107 0210 	add.w	r2, r7, #16
 8007be8:	4611      	mov	r1, r2
 8007bea:	4618      	mov	r0, r3
 8007bec:	f001 f99e 	bl	8008f2c <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f001 fb58 	bl	80092aa <SDMMC_CmdSendSCR>
 8007bfa:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d022      	beq.n	8007c48 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8007c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c04:	e07a      	b.n	8007cfc <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d00e      	beq.n	8007c32 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6819      	ldr	r1, [r3, #0]
 8007c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c1a:	009b      	lsls	r3, r3, #2
 8007c1c:	f107 0208 	add.w	r2, r7, #8
 8007c20:	18d4      	adds	r4, r2, r3
 8007c22:	4608      	mov	r0, r1
 8007c24:	f001 f8fd 	bl	8008e22 <SDIO_ReadFIFO>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	6023      	str	r3, [r4, #0]
      index++;
 8007c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c2e:	3301      	adds	r3, #1
 8007c30:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007c32:	f7fb f9a1 	bl	8002f78 <HAL_GetTick>
 8007c36:	4602      	mov	r2, r0
 8007c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c3a:	1ad3      	subs	r3, r2, r3
 8007c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c40:	d102      	bne.n	8007c48 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007c42:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007c46:	e059      	b.n	8007cfc <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c4e:	f240 432a 	movw	r3, #1066	; 0x42a
 8007c52:	4013      	ands	r3, r2
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d0d6      	beq.n	8007c06 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c5e:	f003 0308 	and.w	r3, r3, #8
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d005      	beq.n	8007c72 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	2208      	movs	r2, #8
 8007c6c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007c6e:	2308      	movs	r3, #8
 8007c70:	e044      	b.n	8007cfc <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c78:	f003 0302 	and.w	r3, r3, #2
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d005      	beq.n	8007c8c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	2202      	movs	r2, #2
 8007c86:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007c88:	2302      	movs	r3, #2
 8007c8a:	e037      	b.n	8007cfc <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c92:	f003 0320 	and.w	r3, r3, #32
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d005      	beq.n	8007ca6 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	2220      	movs	r2, #32
 8007ca0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007ca2:	2320      	movs	r3, #32
 8007ca4:	e02a      	b.n	8007cfc <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f240 523a 	movw	r2, #1338	; 0x53a
 8007cae:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	061a      	lsls	r2, r3, #24
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	021b      	lsls	r3, r3, #8
 8007cb8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007cbc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	0a1b      	lsrs	r3, r3, #8
 8007cc2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007cc6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	0e1b      	lsrs	r3, r3, #24
 8007ccc:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cd0:	601a      	str	r2, [r3, #0]
    scr++;
 8007cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cd4:	3304      	adds	r3, #4
 8007cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	061a      	lsls	r2, r3, #24
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	021b      	lsls	r3, r3, #8
 8007ce0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007ce4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	0a1b      	lsrs	r3, r3, #8
 8007cea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007cee:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	0e1b      	lsrs	r3, r3, #24
 8007cf4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007cfa:	2300      	movs	r3, #0
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	373c      	adds	r7, #60	; 0x3c
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd90      	pop	{r4, r7, pc}

08007d04 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b086      	sub	sp, #24
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d10:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d16:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d03f      	beq.n	8007d9e <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8007d1e:	2300      	movs	r3, #0
 8007d20:	617b      	str	r3, [r7, #20]
 8007d22:	e033      	b.n	8007d8c <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f001 f87a 	bl	8008e22 <SDIO_ReadFIFO>
 8007d2e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	b2da      	uxtb	r2, r3
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	3b01      	subs	r3, #1
 8007d42:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	0a1b      	lsrs	r3, r3, #8
 8007d48:	b2da      	uxtb	r2, r3
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	3301      	adds	r3, #1
 8007d52:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	3b01      	subs	r3, #1
 8007d58:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	0c1b      	lsrs	r3, r3, #16
 8007d5e:	b2da      	uxtb	r2, r3
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	3301      	adds	r3, #1
 8007d68:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	3b01      	subs	r3, #1
 8007d6e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	0e1b      	lsrs	r3, r3, #24
 8007d74:	b2da      	uxtb	r2, r3
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	3b01      	subs	r3, #1
 8007d84:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	3301      	adds	r3, #1
 8007d8a:	617b      	str	r3, [r7, #20]
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	2b07      	cmp	r3, #7
 8007d90:	d9c8      	bls.n	8007d24 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	68fa      	ldr	r2, [r7, #12]
 8007d96:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	693a      	ldr	r2, [r7, #16]
 8007d9c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8007d9e:	bf00      	nop
 8007da0:	3718      	adds	r7, #24
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}

08007da6 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007da6:	b580      	push	{r7, lr}
 8007da8:	b086      	sub	sp, #24
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6a1b      	ldr	r3, [r3, #32]
 8007db2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d043      	beq.n	8007e48 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	617b      	str	r3, [r7, #20]
 8007dc4:	e037      	b.n	8007e36 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	3301      	adds	r3, #1
 8007dd0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	3b01      	subs	r3, #1
 8007dd6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	021a      	lsls	r2, r3, #8
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	4313      	orrs	r3, r2
 8007de2:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	3301      	adds	r3, #1
 8007de8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	3b01      	subs	r3, #1
 8007dee:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	041a      	lsls	r2, r3, #16
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	3301      	adds	r3, #1
 8007e00:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	3b01      	subs	r3, #1
 8007e06:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	061a      	lsls	r2, r3, #24
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	4313      	orrs	r3, r2
 8007e12:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	3301      	adds	r3, #1
 8007e18:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	3b01      	subs	r3, #1
 8007e1e:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f107 0208 	add.w	r2, r7, #8
 8007e28:	4611      	mov	r1, r2
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f001 f806 	bl	8008e3c <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	3301      	adds	r3, #1
 8007e34:	617b      	str	r3, [r7, #20]
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	2b07      	cmp	r3, #7
 8007e3a:	d9c4      	bls.n	8007dc6 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	68fa      	ldr	r2, [r7, #12]
 8007e40:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	693a      	ldr	r2, [r7, #16]
 8007e46:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8007e48:	bf00      	nop
 8007e4a:	3718      	adds	r7, #24
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b082      	sub	sp, #8
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d101      	bne.n	8007e62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	e056      	b.n	8007f10 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2200      	movs	r2, #0
 8007e66:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e6e:	b2db      	uxtb	r3, r3
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d106      	bne.n	8007e82 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f7fa fe4d 	bl	8002b1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2202      	movs	r2, #2
 8007e86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	681a      	ldr	r2, [r3, #0]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e98:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	685a      	ldr	r2, [r3, #4]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	689b      	ldr	r3, [r3, #8]
 8007ea2:	431a      	orrs	r2, r3
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	68db      	ldr	r3, [r3, #12]
 8007ea8:	431a      	orrs	r2, r3
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	691b      	ldr	r3, [r3, #16]
 8007eae:	431a      	orrs	r2, r3
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	695b      	ldr	r3, [r3, #20]
 8007eb4:	431a      	orrs	r2, r3
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	699b      	ldr	r3, [r3, #24]
 8007eba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ebe:	431a      	orrs	r2, r3
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	69db      	ldr	r3, [r3, #28]
 8007ec4:	431a      	orrs	r2, r3
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6a1b      	ldr	r3, [r3, #32]
 8007eca:	ea42 0103 	orr.w	r1, r2, r3
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	430a      	orrs	r2, r1
 8007ed8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	699b      	ldr	r3, [r3, #24]
 8007ede:	0c1b      	lsrs	r3, r3, #16
 8007ee0:	f003 0104 	and.w	r1, r3, #4
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	430a      	orrs	r2, r1
 8007eee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	69da      	ldr	r2, [r3, #28]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007efe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2200      	movs	r2, #0
 8007f04:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2201      	movs	r2, #1
 8007f0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007f0e:	2300      	movs	r3, #0
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3708      	adds	r7, #8
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}

08007f18 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b088      	sub	sp, #32
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	60f8      	str	r0, [r7, #12]
 8007f20:	60b9      	str	r1, [r7, #8]
 8007f22:	603b      	str	r3, [r7, #0]
 8007f24:	4613      	mov	r3, r2
 8007f26:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	d101      	bne.n	8007f3a <HAL_SPI_Transmit+0x22>
 8007f36:	2302      	movs	r3, #2
 8007f38:	e11e      	b.n	8008178 <HAL_SPI_Transmit+0x260>
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2201      	movs	r2, #1
 8007f3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f42:	f7fb f819 	bl	8002f78 <HAL_GetTick>
 8007f46:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007f48:	88fb      	ldrh	r3, [r7, #6]
 8007f4a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f52:	b2db      	uxtb	r3, r3
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	d002      	beq.n	8007f5e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007f58:	2302      	movs	r3, #2
 8007f5a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007f5c:	e103      	b.n	8008166 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d002      	beq.n	8007f6a <HAL_SPI_Transmit+0x52>
 8007f64:	88fb      	ldrh	r3, [r7, #6]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d102      	bne.n	8007f70 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007f6e:	e0fa      	b.n	8008166 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2203      	movs	r2, #3
 8007f74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	68ba      	ldr	r2, [r7, #8]
 8007f82:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	88fa      	ldrh	r2, [r7, #6]
 8007f88:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	88fa      	ldrh	r2, [r7, #6]
 8007f8e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2200      	movs	r2, #0
 8007f94:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2200      	movs	r2, #0
 8007fac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	689b      	ldr	r3, [r3, #8]
 8007fb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fb6:	d107      	bne.n	8007fc8 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	681a      	ldr	r2, [r3, #0]
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007fc6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fd2:	2b40      	cmp	r3, #64	; 0x40
 8007fd4:	d007      	beq.n	8007fe6 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007fe4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	68db      	ldr	r3, [r3, #12]
 8007fea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fee:	d14b      	bne.n	8008088 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d002      	beq.n	8007ffe <HAL_SPI_Transmit+0xe6>
 8007ff8:	8afb      	ldrh	r3, [r7, #22]
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	d13e      	bne.n	800807c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008002:	881a      	ldrh	r2, [r3, #0]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800800e:	1c9a      	adds	r2, r3, #2
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008018:	b29b      	uxth	r3, r3
 800801a:	3b01      	subs	r3, #1
 800801c:	b29a      	uxth	r2, r3
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008022:	e02b      	b.n	800807c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	689b      	ldr	r3, [r3, #8]
 800802a:	f003 0302 	and.w	r3, r3, #2
 800802e:	2b02      	cmp	r3, #2
 8008030:	d112      	bne.n	8008058 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008036:	881a      	ldrh	r2, [r3, #0]
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008042:	1c9a      	adds	r2, r3, #2
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800804c:	b29b      	uxth	r3, r3
 800804e:	3b01      	subs	r3, #1
 8008050:	b29a      	uxth	r2, r3
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	86da      	strh	r2, [r3, #54]	; 0x36
 8008056:	e011      	b.n	800807c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008058:	f7fa ff8e 	bl	8002f78 <HAL_GetTick>
 800805c:	4602      	mov	r2, r0
 800805e:	69bb      	ldr	r3, [r7, #24]
 8008060:	1ad3      	subs	r3, r2, r3
 8008062:	683a      	ldr	r2, [r7, #0]
 8008064:	429a      	cmp	r2, r3
 8008066:	d803      	bhi.n	8008070 <HAL_SPI_Transmit+0x158>
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800806e:	d102      	bne.n	8008076 <HAL_SPI_Transmit+0x15e>
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d102      	bne.n	800807c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8008076:	2303      	movs	r3, #3
 8008078:	77fb      	strb	r3, [r7, #31]
          goto error;
 800807a:	e074      	b.n	8008166 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008080:	b29b      	uxth	r3, r3
 8008082:	2b00      	cmp	r3, #0
 8008084:	d1ce      	bne.n	8008024 <HAL_SPI_Transmit+0x10c>
 8008086:	e04c      	b.n	8008122 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d002      	beq.n	8008096 <HAL_SPI_Transmit+0x17e>
 8008090:	8afb      	ldrh	r3, [r7, #22]
 8008092:	2b01      	cmp	r3, #1
 8008094:	d140      	bne.n	8008118 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	330c      	adds	r3, #12
 80080a0:	7812      	ldrb	r2, [r2, #0]
 80080a2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080a8:	1c5a      	adds	r2, r3, #1
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	3b01      	subs	r3, #1
 80080b6:	b29a      	uxth	r2, r3
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80080bc:	e02c      	b.n	8008118 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	689b      	ldr	r3, [r3, #8]
 80080c4:	f003 0302 	and.w	r3, r3, #2
 80080c8:	2b02      	cmp	r3, #2
 80080ca:	d113      	bne.n	80080f4 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	330c      	adds	r3, #12
 80080d6:	7812      	ldrb	r2, [r2, #0]
 80080d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080de:	1c5a      	adds	r2, r3, #1
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	3b01      	subs	r3, #1
 80080ec:	b29a      	uxth	r2, r3
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	86da      	strh	r2, [r3, #54]	; 0x36
 80080f2:	e011      	b.n	8008118 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80080f4:	f7fa ff40 	bl	8002f78 <HAL_GetTick>
 80080f8:	4602      	mov	r2, r0
 80080fa:	69bb      	ldr	r3, [r7, #24]
 80080fc:	1ad3      	subs	r3, r2, r3
 80080fe:	683a      	ldr	r2, [r7, #0]
 8008100:	429a      	cmp	r2, r3
 8008102:	d803      	bhi.n	800810c <HAL_SPI_Transmit+0x1f4>
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800810a:	d102      	bne.n	8008112 <HAL_SPI_Transmit+0x1fa>
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d102      	bne.n	8008118 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8008112:	2303      	movs	r3, #3
 8008114:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008116:	e026      	b.n	8008166 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800811c:	b29b      	uxth	r3, r3
 800811e:	2b00      	cmp	r3, #0
 8008120:	d1cd      	bne.n	80080be <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008122:	69ba      	ldr	r2, [r7, #24]
 8008124:	6839      	ldr	r1, [r7, #0]
 8008126:	68f8      	ldr	r0, [r7, #12]
 8008128:	f000 fa44 	bl	80085b4 <SPI_EndRxTxTransaction>
 800812c:	4603      	mov	r3, r0
 800812e:	2b00      	cmp	r3, #0
 8008130:	d002      	beq.n	8008138 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2220      	movs	r2, #32
 8008136:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d10a      	bne.n	8008156 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008140:	2300      	movs	r3, #0
 8008142:	613b      	str	r3, [r7, #16]
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	68db      	ldr	r3, [r3, #12]
 800814a:	613b      	str	r3, [r7, #16]
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	613b      	str	r3, [r7, #16]
 8008154:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800815a:	2b00      	cmp	r3, #0
 800815c:	d002      	beq.n	8008164 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800815e:	2301      	movs	r3, #1
 8008160:	77fb      	strb	r3, [r7, #31]
 8008162:	e000      	b.n	8008166 <HAL_SPI_Transmit+0x24e>
  }

error:
 8008164:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	2201      	movs	r2, #1
 800816a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2200      	movs	r2, #0
 8008172:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008176:	7ffb      	ldrb	r3, [r7, #31]
}
 8008178:	4618      	mov	r0, r3
 800817a:	3720      	adds	r7, #32
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b08c      	sub	sp, #48	; 0x30
 8008184:	af00      	add	r7, sp, #0
 8008186:	60f8      	str	r0, [r7, #12]
 8008188:	60b9      	str	r1, [r7, #8]
 800818a:	607a      	str	r2, [r7, #4]
 800818c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800818e:	2301      	movs	r3, #1
 8008190:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008192:	2300      	movs	r3, #0
 8008194:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800819e:	2b01      	cmp	r3, #1
 80081a0:	d101      	bne.n	80081a6 <HAL_SPI_TransmitReceive+0x26>
 80081a2:	2302      	movs	r3, #2
 80081a4:	e18a      	b.n	80084bc <HAL_SPI_TransmitReceive+0x33c>
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2201      	movs	r2, #1
 80081aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80081ae:	f7fa fee3 	bl	8002f78 <HAL_GetTick>
 80081b2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80081ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80081c4:	887b      	ldrh	r3, [r7, #2]
 80081c6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80081c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d00f      	beq.n	80081f0 <HAL_SPI_TransmitReceive+0x70>
 80081d0:	69fb      	ldr	r3, [r7, #28]
 80081d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80081d6:	d107      	bne.n	80081e8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d103      	bne.n	80081e8 <HAL_SPI_TransmitReceive+0x68>
 80081e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80081e4:	2b04      	cmp	r3, #4
 80081e6:	d003      	beq.n	80081f0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80081e8:	2302      	movs	r3, #2
 80081ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80081ee:	e15b      	b.n	80084a8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d005      	beq.n	8008202 <HAL_SPI_TransmitReceive+0x82>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d002      	beq.n	8008202 <HAL_SPI_TransmitReceive+0x82>
 80081fc:	887b      	ldrh	r3, [r7, #2]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d103      	bne.n	800820a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008202:	2301      	movs	r3, #1
 8008204:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008208:	e14e      	b.n	80084a8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008210:	b2db      	uxtb	r3, r3
 8008212:	2b04      	cmp	r3, #4
 8008214:	d003      	beq.n	800821e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2205      	movs	r2, #5
 800821a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2200      	movs	r2, #0
 8008222:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	687a      	ldr	r2, [r7, #4]
 8008228:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	887a      	ldrh	r2, [r7, #2]
 800822e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	887a      	ldrh	r2, [r7, #2]
 8008234:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	68ba      	ldr	r2, [r7, #8]
 800823a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	887a      	ldrh	r2, [r7, #2]
 8008240:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	887a      	ldrh	r2, [r7, #2]
 8008246:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2200      	movs	r2, #0
 800824c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2200      	movs	r2, #0
 8008252:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800825e:	2b40      	cmp	r3, #64	; 0x40
 8008260:	d007      	beq.n	8008272 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	681a      	ldr	r2, [r3, #0]
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008270:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	68db      	ldr	r3, [r3, #12]
 8008276:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800827a:	d178      	bne.n	800836e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d002      	beq.n	800828a <HAL_SPI_TransmitReceive+0x10a>
 8008284:	8b7b      	ldrh	r3, [r7, #26]
 8008286:	2b01      	cmp	r3, #1
 8008288:	d166      	bne.n	8008358 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800828e:	881a      	ldrh	r2, [r3, #0]
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800829a:	1c9a      	adds	r2, r3, #2
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	3b01      	subs	r3, #1
 80082a8:	b29a      	uxth	r2, r3
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80082ae:	e053      	b.n	8008358 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	689b      	ldr	r3, [r3, #8]
 80082b6:	f003 0302 	and.w	r3, r3, #2
 80082ba:	2b02      	cmp	r3, #2
 80082bc:	d11b      	bne.n	80082f6 <HAL_SPI_TransmitReceive+0x176>
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d016      	beq.n	80082f6 <HAL_SPI_TransmitReceive+0x176>
 80082c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	d113      	bne.n	80082f6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082d2:	881a      	ldrh	r2, [r3, #0]
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082de:	1c9a      	adds	r2, r3, #2
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	3b01      	subs	r3, #1
 80082ec:	b29a      	uxth	r2, r3
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80082f2:	2300      	movs	r3, #0
 80082f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	689b      	ldr	r3, [r3, #8]
 80082fc:	f003 0301 	and.w	r3, r3, #1
 8008300:	2b01      	cmp	r3, #1
 8008302:	d119      	bne.n	8008338 <HAL_SPI_TransmitReceive+0x1b8>
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008308:	b29b      	uxth	r3, r3
 800830a:	2b00      	cmp	r3, #0
 800830c:	d014      	beq.n	8008338 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	68da      	ldr	r2, [r3, #12]
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008318:	b292      	uxth	r2, r2
 800831a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008320:	1c9a      	adds	r2, r3, #2
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800832a:	b29b      	uxth	r3, r3
 800832c:	3b01      	subs	r3, #1
 800832e:	b29a      	uxth	r2, r3
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008334:	2301      	movs	r3, #1
 8008336:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008338:	f7fa fe1e 	bl	8002f78 <HAL_GetTick>
 800833c:	4602      	mov	r2, r0
 800833e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008340:	1ad3      	subs	r3, r2, r3
 8008342:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008344:	429a      	cmp	r2, r3
 8008346:	d807      	bhi.n	8008358 <HAL_SPI_TransmitReceive+0x1d8>
 8008348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800834a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800834e:	d003      	beq.n	8008358 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008350:	2303      	movs	r3, #3
 8008352:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008356:	e0a7      	b.n	80084a8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800835c:	b29b      	uxth	r3, r3
 800835e:	2b00      	cmp	r3, #0
 8008360:	d1a6      	bne.n	80082b0 <HAL_SPI_TransmitReceive+0x130>
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008366:	b29b      	uxth	r3, r3
 8008368:	2b00      	cmp	r3, #0
 800836a:	d1a1      	bne.n	80082b0 <HAL_SPI_TransmitReceive+0x130>
 800836c:	e07c      	b.n	8008468 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d002      	beq.n	800837c <HAL_SPI_TransmitReceive+0x1fc>
 8008376:	8b7b      	ldrh	r3, [r7, #26]
 8008378:	2b01      	cmp	r3, #1
 800837a:	d16b      	bne.n	8008454 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	330c      	adds	r3, #12
 8008386:	7812      	ldrb	r2, [r2, #0]
 8008388:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800838e:	1c5a      	adds	r2, r3, #1
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008398:	b29b      	uxth	r3, r3
 800839a:	3b01      	subs	r3, #1
 800839c:	b29a      	uxth	r2, r3
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80083a2:	e057      	b.n	8008454 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	689b      	ldr	r3, [r3, #8]
 80083aa:	f003 0302 	and.w	r3, r3, #2
 80083ae:	2b02      	cmp	r3, #2
 80083b0:	d11c      	bne.n	80083ec <HAL_SPI_TransmitReceive+0x26c>
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d017      	beq.n	80083ec <HAL_SPI_TransmitReceive+0x26c>
 80083bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083be:	2b01      	cmp	r3, #1
 80083c0:	d114      	bne.n	80083ec <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	330c      	adds	r3, #12
 80083cc:	7812      	ldrb	r2, [r2, #0]
 80083ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083d4:	1c5a      	adds	r2, r3, #1
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083de:	b29b      	uxth	r3, r3
 80083e0:	3b01      	subs	r3, #1
 80083e2:	b29a      	uxth	r2, r3
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80083e8:	2300      	movs	r3, #0
 80083ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	689b      	ldr	r3, [r3, #8]
 80083f2:	f003 0301 	and.w	r3, r3, #1
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	d119      	bne.n	800842e <HAL_SPI_TransmitReceive+0x2ae>
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083fe:	b29b      	uxth	r3, r3
 8008400:	2b00      	cmp	r3, #0
 8008402:	d014      	beq.n	800842e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	68da      	ldr	r2, [r3, #12]
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800840e:	b2d2      	uxtb	r2, r2
 8008410:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008416:	1c5a      	adds	r2, r3, #1
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008420:	b29b      	uxth	r3, r3
 8008422:	3b01      	subs	r3, #1
 8008424:	b29a      	uxth	r2, r3
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800842a:	2301      	movs	r3, #1
 800842c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800842e:	f7fa fda3 	bl	8002f78 <HAL_GetTick>
 8008432:	4602      	mov	r2, r0
 8008434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008436:	1ad3      	subs	r3, r2, r3
 8008438:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800843a:	429a      	cmp	r2, r3
 800843c:	d803      	bhi.n	8008446 <HAL_SPI_TransmitReceive+0x2c6>
 800843e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008444:	d102      	bne.n	800844c <HAL_SPI_TransmitReceive+0x2cc>
 8008446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008448:	2b00      	cmp	r3, #0
 800844a:	d103      	bne.n	8008454 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800844c:	2303      	movs	r3, #3
 800844e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008452:	e029      	b.n	80084a8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008458:	b29b      	uxth	r3, r3
 800845a:	2b00      	cmp	r3, #0
 800845c:	d1a2      	bne.n	80083a4 <HAL_SPI_TransmitReceive+0x224>
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008462:	b29b      	uxth	r3, r3
 8008464:	2b00      	cmp	r3, #0
 8008466:	d19d      	bne.n	80083a4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800846a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800846c:	68f8      	ldr	r0, [r7, #12]
 800846e:	f000 f8a1 	bl	80085b4 <SPI_EndRxTxTransaction>
 8008472:	4603      	mov	r3, r0
 8008474:	2b00      	cmp	r3, #0
 8008476:	d006      	beq.n	8008486 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008478:	2301      	movs	r3, #1
 800847a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	2220      	movs	r2, #32
 8008482:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008484:	e010      	b.n	80084a8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	689b      	ldr	r3, [r3, #8]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d10b      	bne.n	80084a6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800848e:	2300      	movs	r3, #0
 8008490:	617b      	str	r3, [r7, #20]
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	68db      	ldr	r3, [r3, #12]
 8008498:	617b      	str	r3, [r7, #20]
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	689b      	ldr	r3, [r3, #8]
 80084a0:	617b      	str	r3, [r7, #20]
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	e000      	b.n	80084a8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80084a6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2201      	movs	r2, #1
 80084ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2200      	movs	r2, #0
 80084b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80084b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3730      	adds	r7, #48	; 0x30
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b083      	sub	sp, #12
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80084d2:	b2db      	uxtb	r3, r3
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	370c      	adds	r7, #12
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr

080084e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	60f8      	str	r0, [r7, #12]
 80084e8:	60b9      	str	r1, [r7, #8]
 80084ea:	603b      	str	r3, [r7, #0]
 80084ec:	4613      	mov	r3, r2
 80084ee:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80084f0:	e04c      	b.n	800858c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084f8:	d048      	beq.n	800858c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80084fa:	f7fa fd3d 	bl	8002f78 <HAL_GetTick>
 80084fe:	4602      	mov	r2, r0
 8008500:	69bb      	ldr	r3, [r7, #24]
 8008502:	1ad3      	subs	r3, r2, r3
 8008504:	683a      	ldr	r2, [r7, #0]
 8008506:	429a      	cmp	r2, r3
 8008508:	d902      	bls.n	8008510 <SPI_WaitFlagStateUntilTimeout+0x30>
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d13d      	bne.n	800858c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	685a      	ldr	r2, [r3, #4]
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800851e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008528:	d111      	bne.n	800854e <SPI_WaitFlagStateUntilTimeout+0x6e>
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	689b      	ldr	r3, [r3, #8]
 800852e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008532:	d004      	beq.n	800853e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	689b      	ldr	r3, [r3, #8]
 8008538:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800853c:	d107      	bne.n	800854e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800854c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008552:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008556:	d10f      	bne.n	8008578 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	681a      	ldr	r2, [r3, #0]
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008566:	601a      	str	r2, [r3, #0]
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	681a      	ldr	r2, [r3, #0]
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008576:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2201      	movs	r2, #1
 800857c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2200      	movs	r2, #0
 8008584:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008588:	2303      	movs	r3, #3
 800858a:	e00f      	b.n	80085ac <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	689a      	ldr	r2, [r3, #8]
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	4013      	ands	r3, r2
 8008596:	68ba      	ldr	r2, [r7, #8]
 8008598:	429a      	cmp	r2, r3
 800859a:	bf0c      	ite	eq
 800859c:	2301      	moveq	r3, #1
 800859e:	2300      	movne	r3, #0
 80085a0:	b2db      	uxtb	r3, r3
 80085a2:	461a      	mov	r2, r3
 80085a4:	79fb      	ldrb	r3, [r7, #7]
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d1a3      	bne.n	80084f2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80085aa:	2300      	movs	r3, #0
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3710      	adds	r7, #16
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b088      	sub	sp, #32
 80085b8:	af02      	add	r7, sp, #8
 80085ba:	60f8      	str	r0, [r7, #12]
 80085bc:	60b9      	str	r1, [r7, #8]
 80085be:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80085c0:	4b1b      	ldr	r3, [pc, #108]	; (8008630 <SPI_EndRxTxTransaction+0x7c>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a1b      	ldr	r2, [pc, #108]	; (8008634 <SPI_EndRxTxTransaction+0x80>)
 80085c6:	fba2 2303 	umull	r2, r3, r2, r3
 80085ca:	0d5b      	lsrs	r3, r3, #21
 80085cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80085d0:	fb02 f303 	mul.w	r3, r2, r3
 80085d4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80085de:	d112      	bne.n	8008606 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	9300      	str	r3, [sp, #0]
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	2200      	movs	r2, #0
 80085e8:	2180      	movs	r1, #128	; 0x80
 80085ea:	68f8      	ldr	r0, [r7, #12]
 80085ec:	f7ff ff78 	bl	80084e0 <SPI_WaitFlagStateUntilTimeout>
 80085f0:	4603      	mov	r3, r0
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d016      	beq.n	8008624 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085fa:	f043 0220 	orr.w	r2, r3, #32
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008602:	2303      	movs	r3, #3
 8008604:	e00f      	b.n	8008626 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d00a      	beq.n	8008622 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	3b01      	subs	r3, #1
 8008610:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	689b      	ldr	r3, [r3, #8]
 8008618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800861c:	2b80      	cmp	r3, #128	; 0x80
 800861e:	d0f2      	beq.n	8008606 <SPI_EndRxTxTransaction+0x52>
 8008620:	e000      	b.n	8008624 <SPI_EndRxTxTransaction+0x70>
        break;
 8008622:	bf00      	nop
  }

  return HAL_OK;
 8008624:	2300      	movs	r3, #0
}
 8008626:	4618      	mov	r0, r3
 8008628:	3718      	adds	r7, #24
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
 800862e:	bf00      	nop
 8008630:	20000010 	.word	0x20000010
 8008634:	165e9f81 	.word	0x165e9f81

08008638 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b082      	sub	sp, #8
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d101      	bne.n	800864a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008646:	2301      	movs	r3, #1
 8008648:	e03f      	b.n	80086ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008650:	b2db      	uxtb	r3, r3
 8008652:	2b00      	cmp	r3, #0
 8008654:	d106      	bne.n	8008664 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2200      	movs	r2, #0
 800865a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f7fa faa4 	bl	8002bac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2224      	movs	r2, #36	; 0x24
 8008668:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	68da      	ldr	r2, [r3, #12]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800867a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 f829 	bl	80086d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	691a      	ldr	r2, [r3, #16]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008690:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	695a      	ldr	r2, [r3, #20]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80086a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	68da      	ldr	r2, [r3, #12]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80086b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2200      	movs	r2, #0
 80086b6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2220      	movs	r2, #32
 80086bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2220      	movs	r2, #32
 80086c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80086c8:	2300      	movs	r3, #0
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3708      	adds	r7, #8
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
	...

080086d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086d8:	b085      	sub	sp, #20
 80086da:	af00      	add	r7, sp, #0
 80086dc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	691b      	ldr	r3, [r3, #16]
 80086e4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	68da      	ldr	r2, [r3, #12]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	430a      	orrs	r2, r1
 80086f2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	689a      	ldr	r2, [r3, #8]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	691b      	ldr	r3, [r3, #16]
 80086fc:	431a      	orrs	r2, r3
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	695b      	ldr	r3, [r3, #20]
 8008702:	431a      	orrs	r2, r3
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	69db      	ldr	r3, [r3, #28]
 8008708:	4313      	orrs	r3, r2
 800870a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	68db      	ldr	r3, [r3, #12]
 8008712:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008716:	f023 030c 	bic.w	r3, r3, #12
 800871a:	687a      	ldr	r2, [r7, #4]
 800871c:	6812      	ldr	r2, [r2, #0]
 800871e:	68f9      	ldr	r1, [r7, #12]
 8008720:	430b      	orrs	r3, r1
 8008722:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	695b      	ldr	r3, [r3, #20]
 800872a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	699a      	ldr	r2, [r3, #24]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	430a      	orrs	r2, r1
 8008738:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	69db      	ldr	r3, [r3, #28]
 800873e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008742:	f040 818b 	bne.w	8008a5c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4ac1      	ldr	r2, [pc, #772]	; (8008a50 <UART_SetConfig+0x37c>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d005      	beq.n	800875c <UART_SetConfig+0x88>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4abf      	ldr	r2, [pc, #764]	; (8008a54 <UART_SetConfig+0x380>)
 8008756:	4293      	cmp	r3, r2
 8008758:	f040 80bd 	bne.w	80088d6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800875c:	f7fe f848 	bl	80067f0 <HAL_RCC_GetPCLK2Freq>
 8008760:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	461d      	mov	r5, r3
 8008766:	f04f 0600 	mov.w	r6, #0
 800876a:	46a8      	mov	r8, r5
 800876c:	46b1      	mov	r9, r6
 800876e:	eb18 0308 	adds.w	r3, r8, r8
 8008772:	eb49 0409 	adc.w	r4, r9, r9
 8008776:	4698      	mov	r8, r3
 8008778:	46a1      	mov	r9, r4
 800877a:	eb18 0805 	adds.w	r8, r8, r5
 800877e:	eb49 0906 	adc.w	r9, r9, r6
 8008782:	f04f 0100 	mov.w	r1, #0
 8008786:	f04f 0200 	mov.w	r2, #0
 800878a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800878e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008792:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008796:	4688      	mov	r8, r1
 8008798:	4691      	mov	r9, r2
 800879a:	eb18 0005 	adds.w	r0, r8, r5
 800879e:	eb49 0106 	adc.w	r1, r9, r6
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	461d      	mov	r5, r3
 80087a8:	f04f 0600 	mov.w	r6, #0
 80087ac:	196b      	adds	r3, r5, r5
 80087ae:	eb46 0406 	adc.w	r4, r6, r6
 80087b2:	461a      	mov	r2, r3
 80087b4:	4623      	mov	r3, r4
 80087b6:	f7f8 fab7 	bl	8000d28 <__aeabi_uldivmod>
 80087ba:	4603      	mov	r3, r0
 80087bc:	460c      	mov	r4, r1
 80087be:	461a      	mov	r2, r3
 80087c0:	4ba5      	ldr	r3, [pc, #660]	; (8008a58 <UART_SetConfig+0x384>)
 80087c2:	fba3 2302 	umull	r2, r3, r3, r2
 80087c6:	095b      	lsrs	r3, r3, #5
 80087c8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	461d      	mov	r5, r3
 80087d0:	f04f 0600 	mov.w	r6, #0
 80087d4:	46a9      	mov	r9, r5
 80087d6:	46b2      	mov	sl, r6
 80087d8:	eb19 0309 	adds.w	r3, r9, r9
 80087dc:	eb4a 040a 	adc.w	r4, sl, sl
 80087e0:	4699      	mov	r9, r3
 80087e2:	46a2      	mov	sl, r4
 80087e4:	eb19 0905 	adds.w	r9, r9, r5
 80087e8:	eb4a 0a06 	adc.w	sl, sl, r6
 80087ec:	f04f 0100 	mov.w	r1, #0
 80087f0:	f04f 0200 	mov.w	r2, #0
 80087f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80087f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80087fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008800:	4689      	mov	r9, r1
 8008802:	4692      	mov	sl, r2
 8008804:	eb19 0005 	adds.w	r0, r9, r5
 8008808:	eb4a 0106 	adc.w	r1, sl, r6
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	461d      	mov	r5, r3
 8008812:	f04f 0600 	mov.w	r6, #0
 8008816:	196b      	adds	r3, r5, r5
 8008818:	eb46 0406 	adc.w	r4, r6, r6
 800881c:	461a      	mov	r2, r3
 800881e:	4623      	mov	r3, r4
 8008820:	f7f8 fa82 	bl	8000d28 <__aeabi_uldivmod>
 8008824:	4603      	mov	r3, r0
 8008826:	460c      	mov	r4, r1
 8008828:	461a      	mov	r2, r3
 800882a:	4b8b      	ldr	r3, [pc, #556]	; (8008a58 <UART_SetConfig+0x384>)
 800882c:	fba3 1302 	umull	r1, r3, r3, r2
 8008830:	095b      	lsrs	r3, r3, #5
 8008832:	2164      	movs	r1, #100	; 0x64
 8008834:	fb01 f303 	mul.w	r3, r1, r3
 8008838:	1ad3      	subs	r3, r2, r3
 800883a:	00db      	lsls	r3, r3, #3
 800883c:	3332      	adds	r3, #50	; 0x32
 800883e:	4a86      	ldr	r2, [pc, #536]	; (8008a58 <UART_SetConfig+0x384>)
 8008840:	fba2 2303 	umull	r2, r3, r2, r3
 8008844:	095b      	lsrs	r3, r3, #5
 8008846:	005b      	lsls	r3, r3, #1
 8008848:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800884c:	4498      	add	r8, r3
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	461d      	mov	r5, r3
 8008852:	f04f 0600 	mov.w	r6, #0
 8008856:	46a9      	mov	r9, r5
 8008858:	46b2      	mov	sl, r6
 800885a:	eb19 0309 	adds.w	r3, r9, r9
 800885e:	eb4a 040a 	adc.w	r4, sl, sl
 8008862:	4699      	mov	r9, r3
 8008864:	46a2      	mov	sl, r4
 8008866:	eb19 0905 	adds.w	r9, r9, r5
 800886a:	eb4a 0a06 	adc.w	sl, sl, r6
 800886e:	f04f 0100 	mov.w	r1, #0
 8008872:	f04f 0200 	mov.w	r2, #0
 8008876:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800887a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800887e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008882:	4689      	mov	r9, r1
 8008884:	4692      	mov	sl, r2
 8008886:	eb19 0005 	adds.w	r0, r9, r5
 800888a:	eb4a 0106 	adc.w	r1, sl, r6
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	685b      	ldr	r3, [r3, #4]
 8008892:	461d      	mov	r5, r3
 8008894:	f04f 0600 	mov.w	r6, #0
 8008898:	196b      	adds	r3, r5, r5
 800889a:	eb46 0406 	adc.w	r4, r6, r6
 800889e:	461a      	mov	r2, r3
 80088a0:	4623      	mov	r3, r4
 80088a2:	f7f8 fa41 	bl	8000d28 <__aeabi_uldivmod>
 80088a6:	4603      	mov	r3, r0
 80088a8:	460c      	mov	r4, r1
 80088aa:	461a      	mov	r2, r3
 80088ac:	4b6a      	ldr	r3, [pc, #424]	; (8008a58 <UART_SetConfig+0x384>)
 80088ae:	fba3 1302 	umull	r1, r3, r3, r2
 80088b2:	095b      	lsrs	r3, r3, #5
 80088b4:	2164      	movs	r1, #100	; 0x64
 80088b6:	fb01 f303 	mul.w	r3, r1, r3
 80088ba:	1ad3      	subs	r3, r2, r3
 80088bc:	00db      	lsls	r3, r3, #3
 80088be:	3332      	adds	r3, #50	; 0x32
 80088c0:	4a65      	ldr	r2, [pc, #404]	; (8008a58 <UART_SetConfig+0x384>)
 80088c2:	fba2 2303 	umull	r2, r3, r2, r3
 80088c6:	095b      	lsrs	r3, r3, #5
 80088c8:	f003 0207 	and.w	r2, r3, #7
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4442      	add	r2, r8
 80088d2:	609a      	str	r2, [r3, #8]
 80088d4:	e26f      	b.n	8008db6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80088d6:	f7fd ff77 	bl	80067c8 <HAL_RCC_GetPCLK1Freq>
 80088da:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	461d      	mov	r5, r3
 80088e0:	f04f 0600 	mov.w	r6, #0
 80088e4:	46a8      	mov	r8, r5
 80088e6:	46b1      	mov	r9, r6
 80088e8:	eb18 0308 	adds.w	r3, r8, r8
 80088ec:	eb49 0409 	adc.w	r4, r9, r9
 80088f0:	4698      	mov	r8, r3
 80088f2:	46a1      	mov	r9, r4
 80088f4:	eb18 0805 	adds.w	r8, r8, r5
 80088f8:	eb49 0906 	adc.w	r9, r9, r6
 80088fc:	f04f 0100 	mov.w	r1, #0
 8008900:	f04f 0200 	mov.w	r2, #0
 8008904:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008908:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800890c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008910:	4688      	mov	r8, r1
 8008912:	4691      	mov	r9, r2
 8008914:	eb18 0005 	adds.w	r0, r8, r5
 8008918:	eb49 0106 	adc.w	r1, r9, r6
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	461d      	mov	r5, r3
 8008922:	f04f 0600 	mov.w	r6, #0
 8008926:	196b      	adds	r3, r5, r5
 8008928:	eb46 0406 	adc.w	r4, r6, r6
 800892c:	461a      	mov	r2, r3
 800892e:	4623      	mov	r3, r4
 8008930:	f7f8 f9fa 	bl	8000d28 <__aeabi_uldivmod>
 8008934:	4603      	mov	r3, r0
 8008936:	460c      	mov	r4, r1
 8008938:	461a      	mov	r2, r3
 800893a:	4b47      	ldr	r3, [pc, #284]	; (8008a58 <UART_SetConfig+0x384>)
 800893c:	fba3 2302 	umull	r2, r3, r3, r2
 8008940:	095b      	lsrs	r3, r3, #5
 8008942:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	461d      	mov	r5, r3
 800894a:	f04f 0600 	mov.w	r6, #0
 800894e:	46a9      	mov	r9, r5
 8008950:	46b2      	mov	sl, r6
 8008952:	eb19 0309 	adds.w	r3, r9, r9
 8008956:	eb4a 040a 	adc.w	r4, sl, sl
 800895a:	4699      	mov	r9, r3
 800895c:	46a2      	mov	sl, r4
 800895e:	eb19 0905 	adds.w	r9, r9, r5
 8008962:	eb4a 0a06 	adc.w	sl, sl, r6
 8008966:	f04f 0100 	mov.w	r1, #0
 800896a:	f04f 0200 	mov.w	r2, #0
 800896e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008972:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008976:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800897a:	4689      	mov	r9, r1
 800897c:	4692      	mov	sl, r2
 800897e:	eb19 0005 	adds.w	r0, r9, r5
 8008982:	eb4a 0106 	adc.w	r1, sl, r6
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	461d      	mov	r5, r3
 800898c:	f04f 0600 	mov.w	r6, #0
 8008990:	196b      	adds	r3, r5, r5
 8008992:	eb46 0406 	adc.w	r4, r6, r6
 8008996:	461a      	mov	r2, r3
 8008998:	4623      	mov	r3, r4
 800899a:	f7f8 f9c5 	bl	8000d28 <__aeabi_uldivmod>
 800899e:	4603      	mov	r3, r0
 80089a0:	460c      	mov	r4, r1
 80089a2:	461a      	mov	r2, r3
 80089a4:	4b2c      	ldr	r3, [pc, #176]	; (8008a58 <UART_SetConfig+0x384>)
 80089a6:	fba3 1302 	umull	r1, r3, r3, r2
 80089aa:	095b      	lsrs	r3, r3, #5
 80089ac:	2164      	movs	r1, #100	; 0x64
 80089ae:	fb01 f303 	mul.w	r3, r1, r3
 80089b2:	1ad3      	subs	r3, r2, r3
 80089b4:	00db      	lsls	r3, r3, #3
 80089b6:	3332      	adds	r3, #50	; 0x32
 80089b8:	4a27      	ldr	r2, [pc, #156]	; (8008a58 <UART_SetConfig+0x384>)
 80089ba:	fba2 2303 	umull	r2, r3, r2, r3
 80089be:	095b      	lsrs	r3, r3, #5
 80089c0:	005b      	lsls	r3, r3, #1
 80089c2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80089c6:	4498      	add	r8, r3
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	461d      	mov	r5, r3
 80089cc:	f04f 0600 	mov.w	r6, #0
 80089d0:	46a9      	mov	r9, r5
 80089d2:	46b2      	mov	sl, r6
 80089d4:	eb19 0309 	adds.w	r3, r9, r9
 80089d8:	eb4a 040a 	adc.w	r4, sl, sl
 80089dc:	4699      	mov	r9, r3
 80089de:	46a2      	mov	sl, r4
 80089e0:	eb19 0905 	adds.w	r9, r9, r5
 80089e4:	eb4a 0a06 	adc.w	sl, sl, r6
 80089e8:	f04f 0100 	mov.w	r1, #0
 80089ec:	f04f 0200 	mov.w	r2, #0
 80089f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80089f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80089f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80089fc:	4689      	mov	r9, r1
 80089fe:	4692      	mov	sl, r2
 8008a00:	eb19 0005 	adds.w	r0, r9, r5
 8008a04:	eb4a 0106 	adc.w	r1, sl, r6
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	461d      	mov	r5, r3
 8008a0e:	f04f 0600 	mov.w	r6, #0
 8008a12:	196b      	adds	r3, r5, r5
 8008a14:	eb46 0406 	adc.w	r4, r6, r6
 8008a18:	461a      	mov	r2, r3
 8008a1a:	4623      	mov	r3, r4
 8008a1c:	f7f8 f984 	bl	8000d28 <__aeabi_uldivmod>
 8008a20:	4603      	mov	r3, r0
 8008a22:	460c      	mov	r4, r1
 8008a24:	461a      	mov	r2, r3
 8008a26:	4b0c      	ldr	r3, [pc, #48]	; (8008a58 <UART_SetConfig+0x384>)
 8008a28:	fba3 1302 	umull	r1, r3, r3, r2
 8008a2c:	095b      	lsrs	r3, r3, #5
 8008a2e:	2164      	movs	r1, #100	; 0x64
 8008a30:	fb01 f303 	mul.w	r3, r1, r3
 8008a34:	1ad3      	subs	r3, r2, r3
 8008a36:	00db      	lsls	r3, r3, #3
 8008a38:	3332      	adds	r3, #50	; 0x32
 8008a3a:	4a07      	ldr	r2, [pc, #28]	; (8008a58 <UART_SetConfig+0x384>)
 8008a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8008a40:	095b      	lsrs	r3, r3, #5
 8008a42:	f003 0207 	and.w	r2, r3, #7
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4442      	add	r2, r8
 8008a4c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8008a4e:	e1b2      	b.n	8008db6 <UART_SetConfig+0x6e2>
 8008a50:	40011000 	.word	0x40011000
 8008a54:	40011400 	.word	0x40011400
 8008a58:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4ad7      	ldr	r2, [pc, #860]	; (8008dc0 <UART_SetConfig+0x6ec>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d005      	beq.n	8008a72 <UART_SetConfig+0x39e>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4ad6      	ldr	r2, [pc, #856]	; (8008dc4 <UART_SetConfig+0x6f0>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	f040 80d1 	bne.w	8008c14 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008a72:	f7fd febd 	bl	80067f0 <HAL_RCC_GetPCLK2Freq>
 8008a76:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	469a      	mov	sl, r3
 8008a7c:	f04f 0b00 	mov.w	fp, #0
 8008a80:	46d0      	mov	r8, sl
 8008a82:	46d9      	mov	r9, fp
 8008a84:	eb18 0308 	adds.w	r3, r8, r8
 8008a88:	eb49 0409 	adc.w	r4, r9, r9
 8008a8c:	4698      	mov	r8, r3
 8008a8e:	46a1      	mov	r9, r4
 8008a90:	eb18 080a 	adds.w	r8, r8, sl
 8008a94:	eb49 090b 	adc.w	r9, r9, fp
 8008a98:	f04f 0100 	mov.w	r1, #0
 8008a9c:	f04f 0200 	mov.w	r2, #0
 8008aa0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008aa4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008aa8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008aac:	4688      	mov	r8, r1
 8008aae:	4691      	mov	r9, r2
 8008ab0:	eb1a 0508 	adds.w	r5, sl, r8
 8008ab4:	eb4b 0609 	adc.w	r6, fp, r9
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	4619      	mov	r1, r3
 8008abe:	f04f 0200 	mov.w	r2, #0
 8008ac2:	f04f 0300 	mov.w	r3, #0
 8008ac6:	f04f 0400 	mov.w	r4, #0
 8008aca:	0094      	lsls	r4, r2, #2
 8008acc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008ad0:	008b      	lsls	r3, r1, #2
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	4623      	mov	r3, r4
 8008ad6:	4628      	mov	r0, r5
 8008ad8:	4631      	mov	r1, r6
 8008ada:	f7f8 f925 	bl	8000d28 <__aeabi_uldivmod>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	460c      	mov	r4, r1
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	4bb8      	ldr	r3, [pc, #736]	; (8008dc8 <UART_SetConfig+0x6f4>)
 8008ae6:	fba3 2302 	umull	r2, r3, r3, r2
 8008aea:	095b      	lsrs	r3, r3, #5
 8008aec:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	469b      	mov	fp, r3
 8008af4:	f04f 0c00 	mov.w	ip, #0
 8008af8:	46d9      	mov	r9, fp
 8008afa:	46e2      	mov	sl, ip
 8008afc:	eb19 0309 	adds.w	r3, r9, r9
 8008b00:	eb4a 040a 	adc.w	r4, sl, sl
 8008b04:	4699      	mov	r9, r3
 8008b06:	46a2      	mov	sl, r4
 8008b08:	eb19 090b 	adds.w	r9, r9, fp
 8008b0c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008b10:	f04f 0100 	mov.w	r1, #0
 8008b14:	f04f 0200 	mov.w	r2, #0
 8008b18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008b1c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008b20:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008b24:	4689      	mov	r9, r1
 8008b26:	4692      	mov	sl, r2
 8008b28:	eb1b 0509 	adds.w	r5, fp, r9
 8008b2c:	eb4c 060a 	adc.w	r6, ip, sl
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	4619      	mov	r1, r3
 8008b36:	f04f 0200 	mov.w	r2, #0
 8008b3a:	f04f 0300 	mov.w	r3, #0
 8008b3e:	f04f 0400 	mov.w	r4, #0
 8008b42:	0094      	lsls	r4, r2, #2
 8008b44:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008b48:	008b      	lsls	r3, r1, #2
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	4623      	mov	r3, r4
 8008b4e:	4628      	mov	r0, r5
 8008b50:	4631      	mov	r1, r6
 8008b52:	f7f8 f8e9 	bl	8000d28 <__aeabi_uldivmod>
 8008b56:	4603      	mov	r3, r0
 8008b58:	460c      	mov	r4, r1
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	4b9a      	ldr	r3, [pc, #616]	; (8008dc8 <UART_SetConfig+0x6f4>)
 8008b5e:	fba3 1302 	umull	r1, r3, r3, r2
 8008b62:	095b      	lsrs	r3, r3, #5
 8008b64:	2164      	movs	r1, #100	; 0x64
 8008b66:	fb01 f303 	mul.w	r3, r1, r3
 8008b6a:	1ad3      	subs	r3, r2, r3
 8008b6c:	011b      	lsls	r3, r3, #4
 8008b6e:	3332      	adds	r3, #50	; 0x32
 8008b70:	4a95      	ldr	r2, [pc, #596]	; (8008dc8 <UART_SetConfig+0x6f4>)
 8008b72:	fba2 2303 	umull	r2, r3, r2, r3
 8008b76:	095b      	lsrs	r3, r3, #5
 8008b78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008b7c:	4498      	add	r8, r3
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	469b      	mov	fp, r3
 8008b82:	f04f 0c00 	mov.w	ip, #0
 8008b86:	46d9      	mov	r9, fp
 8008b88:	46e2      	mov	sl, ip
 8008b8a:	eb19 0309 	adds.w	r3, r9, r9
 8008b8e:	eb4a 040a 	adc.w	r4, sl, sl
 8008b92:	4699      	mov	r9, r3
 8008b94:	46a2      	mov	sl, r4
 8008b96:	eb19 090b 	adds.w	r9, r9, fp
 8008b9a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008b9e:	f04f 0100 	mov.w	r1, #0
 8008ba2:	f04f 0200 	mov.w	r2, #0
 8008ba6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008baa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008bae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008bb2:	4689      	mov	r9, r1
 8008bb4:	4692      	mov	sl, r2
 8008bb6:	eb1b 0509 	adds.w	r5, fp, r9
 8008bba:	eb4c 060a 	adc.w	r6, ip, sl
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	4619      	mov	r1, r3
 8008bc4:	f04f 0200 	mov.w	r2, #0
 8008bc8:	f04f 0300 	mov.w	r3, #0
 8008bcc:	f04f 0400 	mov.w	r4, #0
 8008bd0:	0094      	lsls	r4, r2, #2
 8008bd2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008bd6:	008b      	lsls	r3, r1, #2
 8008bd8:	461a      	mov	r2, r3
 8008bda:	4623      	mov	r3, r4
 8008bdc:	4628      	mov	r0, r5
 8008bde:	4631      	mov	r1, r6
 8008be0:	f7f8 f8a2 	bl	8000d28 <__aeabi_uldivmod>
 8008be4:	4603      	mov	r3, r0
 8008be6:	460c      	mov	r4, r1
 8008be8:	461a      	mov	r2, r3
 8008bea:	4b77      	ldr	r3, [pc, #476]	; (8008dc8 <UART_SetConfig+0x6f4>)
 8008bec:	fba3 1302 	umull	r1, r3, r3, r2
 8008bf0:	095b      	lsrs	r3, r3, #5
 8008bf2:	2164      	movs	r1, #100	; 0x64
 8008bf4:	fb01 f303 	mul.w	r3, r1, r3
 8008bf8:	1ad3      	subs	r3, r2, r3
 8008bfa:	011b      	lsls	r3, r3, #4
 8008bfc:	3332      	adds	r3, #50	; 0x32
 8008bfe:	4a72      	ldr	r2, [pc, #456]	; (8008dc8 <UART_SetConfig+0x6f4>)
 8008c00:	fba2 2303 	umull	r2, r3, r2, r3
 8008c04:	095b      	lsrs	r3, r3, #5
 8008c06:	f003 020f 	and.w	r2, r3, #15
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	4442      	add	r2, r8
 8008c10:	609a      	str	r2, [r3, #8]
 8008c12:	e0d0      	b.n	8008db6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008c14:	f7fd fdd8 	bl	80067c8 <HAL_RCC_GetPCLK1Freq>
 8008c18:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	469a      	mov	sl, r3
 8008c1e:	f04f 0b00 	mov.w	fp, #0
 8008c22:	46d0      	mov	r8, sl
 8008c24:	46d9      	mov	r9, fp
 8008c26:	eb18 0308 	adds.w	r3, r8, r8
 8008c2a:	eb49 0409 	adc.w	r4, r9, r9
 8008c2e:	4698      	mov	r8, r3
 8008c30:	46a1      	mov	r9, r4
 8008c32:	eb18 080a 	adds.w	r8, r8, sl
 8008c36:	eb49 090b 	adc.w	r9, r9, fp
 8008c3a:	f04f 0100 	mov.w	r1, #0
 8008c3e:	f04f 0200 	mov.w	r2, #0
 8008c42:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008c46:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008c4a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008c4e:	4688      	mov	r8, r1
 8008c50:	4691      	mov	r9, r2
 8008c52:	eb1a 0508 	adds.w	r5, sl, r8
 8008c56:	eb4b 0609 	adc.w	r6, fp, r9
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	4619      	mov	r1, r3
 8008c60:	f04f 0200 	mov.w	r2, #0
 8008c64:	f04f 0300 	mov.w	r3, #0
 8008c68:	f04f 0400 	mov.w	r4, #0
 8008c6c:	0094      	lsls	r4, r2, #2
 8008c6e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008c72:	008b      	lsls	r3, r1, #2
 8008c74:	461a      	mov	r2, r3
 8008c76:	4623      	mov	r3, r4
 8008c78:	4628      	mov	r0, r5
 8008c7a:	4631      	mov	r1, r6
 8008c7c:	f7f8 f854 	bl	8000d28 <__aeabi_uldivmod>
 8008c80:	4603      	mov	r3, r0
 8008c82:	460c      	mov	r4, r1
 8008c84:	461a      	mov	r2, r3
 8008c86:	4b50      	ldr	r3, [pc, #320]	; (8008dc8 <UART_SetConfig+0x6f4>)
 8008c88:	fba3 2302 	umull	r2, r3, r3, r2
 8008c8c:	095b      	lsrs	r3, r3, #5
 8008c8e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	469b      	mov	fp, r3
 8008c96:	f04f 0c00 	mov.w	ip, #0
 8008c9a:	46d9      	mov	r9, fp
 8008c9c:	46e2      	mov	sl, ip
 8008c9e:	eb19 0309 	adds.w	r3, r9, r9
 8008ca2:	eb4a 040a 	adc.w	r4, sl, sl
 8008ca6:	4699      	mov	r9, r3
 8008ca8:	46a2      	mov	sl, r4
 8008caa:	eb19 090b 	adds.w	r9, r9, fp
 8008cae:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008cb2:	f04f 0100 	mov.w	r1, #0
 8008cb6:	f04f 0200 	mov.w	r2, #0
 8008cba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008cbe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008cc2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008cc6:	4689      	mov	r9, r1
 8008cc8:	4692      	mov	sl, r2
 8008cca:	eb1b 0509 	adds.w	r5, fp, r9
 8008cce:	eb4c 060a 	adc.w	r6, ip, sl
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	f04f 0200 	mov.w	r2, #0
 8008cdc:	f04f 0300 	mov.w	r3, #0
 8008ce0:	f04f 0400 	mov.w	r4, #0
 8008ce4:	0094      	lsls	r4, r2, #2
 8008ce6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008cea:	008b      	lsls	r3, r1, #2
 8008cec:	461a      	mov	r2, r3
 8008cee:	4623      	mov	r3, r4
 8008cf0:	4628      	mov	r0, r5
 8008cf2:	4631      	mov	r1, r6
 8008cf4:	f7f8 f818 	bl	8000d28 <__aeabi_uldivmod>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	460c      	mov	r4, r1
 8008cfc:	461a      	mov	r2, r3
 8008cfe:	4b32      	ldr	r3, [pc, #200]	; (8008dc8 <UART_SetConfig+0x6f4>)
 8008d00:	fba3 1302 	umull	r1, r3, r3, r2
 8008d04:	095b      	lsrs	r3, r3, #5
 8008d06:	2164      	movs	r1, #100	; 0x64
 8008d08:	fb01 f303 	mul.w	r3, r1, r3
 8008d0c:	1ad3      	subs	r3, r2, r3
 8008d0e:	011b      	lsls	r3, r3, #4
 8008d10:	3332      	adds	r3, #50	; 0x32
 8008d12:	4a2d      	ldr	r2, [pc, #180]	; (8008dc8 <UART_SetConfig+0x6f4>)
 8008d14:	fba2 2303 	umull	r2, r3, r2, r3
 8008d18:	095b      	lsrs	r3, r3, #5
 8008d1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d1e:	4498      	add	r8, r3
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	469b      	mov	fp, r3
 8008d24:	f04f 0c00 	mov.w	ip, #0
 8008d28:	46d9      	mov	r9, fp
 8008d2a:	46e2      	mov	sl, ip
 8008d2c:	eb19 0309 	adds.w	r3, r9, r9
 8008d30:	eb4a 040a 	adc.w	r4, sl, sl
 8008d34:	4699      	mov	r9, r3
 8008d36:	46a2      	mov	sl, r4
 8008d38:	eb19 090b 	adds.w	r9, r9, fp
 8008d3c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008d40:	f04f 0100 	mov.w	r1, #0
 8008d44:	f04f 0200 	mov.w	r2, #0
 8008d48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008d4c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008d50:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008d54:	4689      	mov	r9, r1
 8008d56:	4692      	mov	sl, r2
 8008d58:	eb1b 0509 	adds.w	r5, fp, r9
 8008d5c:	eb4c 060a 	adc.w	r6, ip, sl
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	4619      	mov	r1, r3
 8008d66:	f04f 0200 	mov.w	r2, #0
 8008d6a:	f04f 0300 	mov.w	r3, #0
 8008d6e:	f04f 0400 	mov.w	r4, #0
 8008d72:	0094      	lsls	r4, r2, #2
 8008d74:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008d78:	008b      	lsls	r3, r1, #2
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	4623      	mov	r3, r4
 8008d7e:	4628      	mov	r0, r5
 8008d80:	4631      	mov	r1, r6
 8008d82:	f7f7 ffd1 	bl	8000d28 <__aeabi_uldivmod>
 8008d86:	4603      	mov	r3, r0
 8008d88:	460c      	mov	r4, r1
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	4b0e      	ldr	r3, [pc, #56]	; (8008dc8 <UART_SetConfig+0x6f4>)
 8008d8e:	fba3 1302 	umull	r1, r3, r3, r2
 8008d92:	095b      	lsrs	r3, r3, #5
 8008d94:	2164      	movs	r1, #100	; 0x64
 8008d96:	fb01 f303 	mul.w	r3, r1, r3
 8008d9a:	1ad3      	subs	r3, r2, r3
 8008d9c:	011b      	lsls	r3, r3, #4
 8008d9e:	3332      	adds	r3, #50	; 0x32
 8008da0:	4a09      	ldr	r2, [pc, #36]	; (8008dc8 <UART_SetConfig+0x6f4>)
 8008da2:	fba2 2303 	umull	r2, r3, r2, r3
 8008da6:	095b      	lsrs	r3, r3, #5
 8008da8:	f003 020f 	and.w	r2, r3, #15
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4442      	add	r2, r8
 8008db2:	609a      	str	r2, [r3, #8]
}
 8008db4:	e7ff      	b.n	8008db6 <UART_SetConfig+0x6e2>
 8008db6:	bf00      	nop
 8008db8:	3714      	adds	r7, #20
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dc0:	40011000 	.word	0x40011000
 8008dc4:	40011400 	.word	0x40011400
 8008dc8:	51eb851f 	.word	0x51eb851f

08008dcc <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8008dcc:	b084      	sub	sp, #16
 8008dce:	b480      	push	{r7}
 8008dd0:	b085      	sub	sp, #20
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	6078      	str	r0, [r7, #4]
 8008dd6:	f107 001c 	add.w	r0, r7, #28
 8008dda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008dde:	2300      	movs	r3, #0
 8008de0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8008de2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8008de4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8008de6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8008de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8008dea:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8008dee:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8008df2:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8008df6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008df8:	68fa      	ldr	r2, [r7, #12]
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8008e06:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008e0a:	68fa      	ldr	r2, [r7, #12]
 8008e0c:	431a      	orrs	r2, r3
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008e12:	2300      	movs	r3, #0
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	3714      	adds	r7, #20
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	b004      	add	sp, #16
 8008e20:	4770      	bx	lr

08008e22 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8008e22:	b480      	push	{r7}
 8008e24:	b083      	sub	sp, #12
 8008e26:	af00      	add	r7, sp, #0
 8008e28:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	370c      	adds	r7, #12
 8008e34:	46bd      	mov	sp, r7
 8008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3a:	4770      	bx	lr

08008e3c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8008e3c:	b480      	push	{r7}
 8008e3e:	b083      	sub	sp, #12
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
 8008e44:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	681a      	ldr	r2, [r3, #0]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008e50:	2300      	movs	r3, #0
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	370c      	adds	r7, #12
 8008e56:	46bd      	mov	sp, r7
 8008e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5c:	4770      	bx	lr

08008e5e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8008e5e:	b580      	push	{r7, lr}
 8008e60:	b082      	sub	sp, #8
 8008e62:	af00      	add	r7, sp, #0
 8008e64:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2203      	movs	r2, #3
 8008e6a:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8008e6c:	2002      	movs	r0, #2
 8008e6e:	f7fa f88f 	bl	8002f90 <HAL_Delay>
  
  return HAL_OK;
 8008e72:	2300      	movs	r3, #0
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3708      	adds	r7, #8
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}

08008e7c <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b083      	sub	sp, #12
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f003 0303 	and.w	r3, r3, #3
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	370c      	adds	r7, #12
 8008e90:	46bd      	mov	sp, r7
 8008e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e96:	4770      	bx	lr

08008e98 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b085      	sub	sp, #20
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	681a      	ldr	r2, [r3, #0]
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008eb6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008ebc:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008ec2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008ec4:	68fa      	ldr	r2, [r7, #12]
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	68db      	ldr	r3, [r3, #12]
 8008ece:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008ed2:	f023 030f 	bic.w	r3, r3, #15
 8008ed6:	68fa      	ldr	r2, [r7, #12]
 8008ed8:	431a      	orrs	r2, r3
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8008ede:	2300      	movs	r3, #0
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3714      	adds	r7, #20
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr

08008eec <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b083      	sub	sp, #12
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	691b      	ldr	r3, [r3, #16]
 8008ef8:	b2db      	uxtb	r3, r3
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	370c      	adds	r7, #12
 8008efe:	46bd      	mov	sp, r7
 8008f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f04:	4770      	bx	lr

08008f06 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8008f06:	b480      	push	{r7}
 8008f08:	b085      	sub	sp, #20
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	6078      	str	r0, [r7, #4]
 8008f0e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	3314      	adds	r3, #20
 8008f14:	461a      	mov	r2, r3
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	4413      	add	r3, r2
 8008f1a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
}  
 8008f20:	4618      	mov	r0, r3
 8008f22:	3714      	adds	r7, #20
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr

08008f2c <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b085      	sub	sp, #20
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008f36:	2300      	movs	r3, #0
 8008f38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	681a      	ldr	r2, [r3, #0]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	685a      	ldr	r2, [r3, #4]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008f52:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008f58:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008f5e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008f60:	68fa      	ldr	r2, [r7, #12]
 8008f62:	4313      	orrs	r3, r2
 8008f64:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f6a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	431a      	orrs	r2, r3
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008f76:	2300      	movs	r3, #0

}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3714      	adds	r7, #20
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr

08008f84 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b088      	sub	sp, #32
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008f92:	2310      	movs	r3, #16
 8008f94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008f96:	2340      	movs	r3, #64	; 0x40
 8008f98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008f9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008fa2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008fa4:	f107 0308 	add.w	r3, r7, #8
 8008fa8:	4619      	mov	r1, r3
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f7ff ff74 	bl	8008e98 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8008fb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fb4:	2110      	movs	r1, #16
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f000 fa40 	bl	800943c <SDMMC_GetCmdResp1>
 8008fbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008fbe:	69fb      	ldr	r3, [r7, #28]
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3720      	adds	r7, #32
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}

08008fc8 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b088      	sub	sp, #32
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008fd6:	2311      	movs	r3, #17
 8008fd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008fda:	2340      	movs	r3, #64	; 0x40
 8008fdc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008fe2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008fe6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008fe8:	f107 0308 	add.w	r3, r7, #8
 8008fec:	4619      	mov	r1, r3
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f7ff ff52 	bl	8008e98 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ff8:	2111      	movs	r1, #17
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f000 fa1e 	bl	800943c <SDMMC_GetCmdResp1>
 8009000:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009002:	69fb      	ldr	r3, [r7, #28]
}
 8009004:	4618      	mov	r0, r3
 8009006:	3720      	adds	r7, #32
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}

0800900c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b088      	sub	sp, #32
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800901a:	2312      	movs	r3, #18
 800901c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800901e:	2340      	movs	r3, #64	; 0x40
 8009020:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009022:	2300      	movs	r3, #0
 8009024:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009026:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800902a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800902c:	f107 0308 	add.w	r3, r7, #8
 8009030:	4619      	mov	r1, r3
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f7ff ff30 	bl	8008e98 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009038:	f241 3288 	movw	r2, #5000	; 0x1388
 800903c:	2112      	movs	r1, #18
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f000 f9fc 	bl	800943c <SDMMC_GetCmdResp1>
 8009044:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009046:	69fb      	ldr	r3, [r7, #28]
}
 8009048:	4618      	mov	r0, r3
 800904a:	3720      	adds	r7, #32
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}

08009050 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b088      	sub	sp, #32
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800905e:	2318      	movs	r3, #24
 8009060:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009062:	2340      	movs	r3, #64	; 0x40
 8009064:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009066:	2300      	movs	r3, #0
 8009068:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800906a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800906e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009070:	f107 0308 	add.w	r3, r7, #8
 8009074:	4619      	mov	r1, r3
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f7ff ff0e 	bl	8008e98 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800907c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009080:	2118      	movs	r1, #24
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f000 f9da 	bl	800943c <SDMMC_GetCmdResp1>
 8009088:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800908a:	69fb      	ldr	r3, [r7, #28]
}
 800908c:	4618      	mov	r0, r3
 800908e:	3720      	adds	r7, #32
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}

08009094 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b088      	sub	sp, #32
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
 800909c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80090a2:	2319      	movs	r3, #25
 80090a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80090a6:	2340      	movs	r3, #64	; 0x40
 80090a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80090aa:	2300      	movs	r3, #0
 80090ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80090ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80090b4:	f107 0308 	add.w	r3, r7, #8
 80090b8:	4619      	mov	r1, r3
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f7ff feec 	bl	8008e98 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80090c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80090c4:	2119      	movs	r1, #25
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f000 f9b8 	bl	800943c <SDMMC_GetCmdResp1>
 80090cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090ce:	69fb      	ldr	r3, [r7, #28]
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3720      	adds	r7, #32
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}

080090d8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b088      	sub	sp, #32
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80090e0:	2300      	movs	r3, #0
 80090e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80090e4:	230c      	movs	r3, #12
 80090e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80090e8:	2340      	movs	r3, #64	; 0x40
 80090ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80090ec:	2300      	movs	r3, #0
 80090ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80090f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090f4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80090f6:	f107 0308 	add.w	r3, r7, #8
 80090fa:	4619      	mov	r1, r3
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f7ff fecb 	bl	8008e98 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8009102:	4a05      	ldr	r2, [pc, #20]	; (8009118 <SDMMC_CmdStopTransfer+0x40>)
 8009104:	210c      	movs	r1, #12
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 f998 	bl	800943c <SDMMC_GetCmdResp1>
 800910c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800910e:	69fb      	ldr	r3, [r7, #28]
}
 8009110:	4618      	mov	r0, r3
 8009112:	3720      	adds	r7, #32
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}
 8009118:	05f5e100 	.word	0x05f5e100

0800911c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b08a      	sub	sp, #40	; 0x28
 8009120:	af00      	add	r7, sp, #0
 8009122:	60f8      	str	r0, [r7, #12]
 8009124:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800912c:	2307      	movs	r3, #7
 800912e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009130:	2340      	movs	r3, #64	; 0x40
 8009132:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009134:	2300      	movs	r3, #0
 8009136:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009138:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800913c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800913e:	f107 0310 	add.w	r3, r7, #16
 8009142:	4619      	mov	r1, r3
 8009144:	68f8      	ldr	r0, [r7, #12]
 8009146:	f7ff fea7 	bl	8008e98 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800914a:	f241 3288 	movw	r2, #5000	; 0x1388
 800914e:	2107      	movs	r1, #7
 8009150:	68f8      	ldr	r0, [r7, #12]
 8009152:	f000 f973 	bl	800943c <SDMMC_GetCmdResp1>
 8009156:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8009158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800915a:	4618      	mov	r0, r3
 800915c:	3728      	adds	r7, #40	; 0x28
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}

08009162 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8009162:	b580      	push	{r7, lr}
 8009164:	b088      	sub	sp, #32
 8009166:	af00      	add	r7, sp, #0
 8009168:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800916a:	2300      	movs	r3, #0
 800916c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800916e:	2300      	movs	r3, #0
 8009170:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8009172:	2300      	movs	r3, #0
 8009174:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009176:	2300      	movs	r3, #0
 8009178:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800917a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800917e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009180:	f107 0308 	add.w	r3, r7, #8
 8009184:	4619      	mov	r1, r3
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f7ff fe86 	bl	8008e98 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f000 f92d 	bl	80093ec <SDMMC_GetCmdError>
 8009192:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009194:	69fb      	ldr	r3, [r7, #28]
}
 8009196:	4618      	mov	r0, r3
 8009198:	3720      	adds	r7, #32
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}

0800919e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800919e:	b580      	push	{r7, lr}
 80091a0:	b088      	sub	sp, #32
 80091a2:	af00      	add	r7, sp, #0
 80091a4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80091a6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80091aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80091ac:	2308      	movs	r3, #8
 80091ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80091b0:	2340      	movs	r3, #64	; 0x40
 80091b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80091b4:	2300      	movs	r3, #0
 80091b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80091b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091bc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80091be:	f107 0308 	add.w	r3, r7, #8
 80091c2:	4619      	mov	r1, r3
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f7ff fe67 	bl	8008e98 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f000 fb16 	bl	80097fc <SDMMC_GetCmdResp7>
 80091d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091d2:	69fb      	ldr	r3, [r7, #28]
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3720      	adds	r7, #32
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}

080091dc <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b088      	sub	sp, #32
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80091ea:	2337      	movs	r3, #55	; 0x37
 80091ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80091ee:	2340      	movs	r3, #64	; 0x40
 80091f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80091f2:	2300      	movs	r3, #0
 80091f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80091f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80091fc:	f107 0308 	add.w	r3, r7, #8
 8009200:	4619      	mov	r1, r3
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f7ff fe48 	bl	8008e98 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8009208:	f241 3288 	movw	r2, #5000	; 0x1388
 800920c:	2137      	movs	r1, #55	; 0x37
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f000 f914 	bl	800943c <SDMMC_GetCmdResp1>
 8009214:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009216:	69fb      	ldr	r3, [r7, #28]
}
 8009218:	4618      	mov	r0, r3
 800921a:	3720      	adds	r7, #32
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}

08009220 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b088      	sub	sp, #32
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
 8009228:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009230:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009234:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009236:	2329      	movs	r3, #41	; 0x29
 8009238:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800923a:	2340      	movs	r3, #64	; 0x40
 800923c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800923e:	2300      	movs	r3, #0
 8009240:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009242:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009246:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009248:	f107 0308 	add.w	r3, r7, #8
 800924c:	4619      	mov	r1, r3
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f7ff fe22 	bl	8008e98 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f000 fa23 	bl	80096a0 <SDMMC_GetCmdResp3>
 800925a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800925c:	69fb      	ldr	r3, [r7, #28]
}
 800925e:	4618      	mov	r0, r3
 8009260:	3720      	adds	r7, #32
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}

08009266 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8009266:	b580      	push	{r7, lr}
 8009268:	b088      	sub	sp, #32
 800926a:	af00      	add	r7, sp, #0
 800926c:	6078      	str	r0, [r7, #4]
 800926e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009274:	2306      	movs	r3, #6
 8009276:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009278:	2340      	movs	r3, #64	; 0x40
 800927a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800927c:	2300      	movs	r3, #0
 800927e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009280:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009284:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009286:	f107 0308 	add.w	r3, r7, #8
 800928a:	4619      	mov	r1, r3
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f7ff fe03 	bl	8008e98 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8009292:	f241 3288 	movw	r2, #5000	; 0x1388
 8009296:	2106      	movs	r1, #6
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f000 f8cf 	bl	800943c <SDMMC_GetCmdResp1>
 800929e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80092a0:	69fb      	ldr	r3, [r7, #28]
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	3720      	adds	r7, #32
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}

080092aa <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80092aa:	b580      	push	{r7, lr}
 80092ac:	b088      	sub	sp, #32
 80092ae:	af00      	add	r7, sp, #0
 80092b0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80092b2:	2300      	movs	r3, #0
 80092b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80092b6:	2333      	movs	r3, #51	; 0x33
 80092b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80092ba:	2340      	movs	r3, #64	; 0x40
 80092bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80092be:	2300      	movs	r3, #0
 80092c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80092c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092c6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80092c8:	f107 0308 	add.w	r3, r7, #8
 80092cc:	4619      	mov	r1, r3
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f7ff fde2 	bl	8008e98 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80092d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80092d8:	2133      	movs	r1, #51	; 0x33
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f000 f8ae 	bl	800943c <SDMMC_GetCmdResp1>
 80092e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80092e2:	69fb      	ldr	r3, [r7, #28]
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3720      	adds	r7, #32
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}

080092ec <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b088      	sub	sp, #32
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80092f4:	2300      	movs	r3, #0
 80092f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80092f8:	2302      	movs	r3, #2
 80092fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80092fc:	23c0      	movs	r3, #192	; 0xc0
 80092fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009300:	2300      	movs	r3, #0
 8009302:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009304:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009308:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800930a:	f107 0308 	add.w	r3, r7, #8
 800930e:	4619      	mov	r1, r3
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f7ff fdc1 	bl	8008e98 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 f97c 	bl	8009614 <SDMMC_GetCmdResp2>
 800931c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800931e:	69fb      	ldr	r3, [r7, #28]
}
 8009320:	4618      	mov	r0, r3
 8009322:	3720      	adds	r7, #32
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}

08009328 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b088      	sub	sp, #32
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009336:	2309      	movs	r3, #9
 8009338:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800933a:	23c0      	movs	r3, #192	; 0xc0
 800933c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800933e:	2300      	movs	r3, #0
 8009340:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009342:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009346:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009348:	f107 0308 	add.w	r3, r7, #8
 800934c:	4619      	mov	r1, r3
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f7ff fda2 	bl	8008e98 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f000 f95d 	bl	8009614 <SDMMC_GetCmdResp2>
 800935a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800935c:	69fb      	ldr	r3, [r7, #28]
}
 800935e:	4618      	mov	r0, r3
 8009360:	3720      	adds	r7, #32
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}

08009366 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8009366:	b580      	push	{r7, lr}
 8009368:	b088      	sub	sp, #32
 800936a:	af00      	add	r7, sp, #0
 800936c:	6078      	str	r0, [r7, #4]
 800936e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009370:	2300      	movs	r3, #0
 8009372:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009374:	2303      	movs	r3, #3
 8009376:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009378:	2340      	movs	r3, #64	; 0x40
 800937a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800937c:	2300      	movs	r3, #0
 800937e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009380:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009384:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009386:	f107 0308 	add.w	r3, r7, #8
 800938a:	4619      	mov	r1, r3
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f7ff fd83 	bl	8008e98 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009392:	683a      	ldr	r2, [r7, #0]
 8009394:	2103      	movs	r1, #3
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 f9bc 	bl	8009714 <SDMMC_GetCmdResp6>
 800939c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800939e:	69fb      	ldr	r3, [r7, #28]
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3720      	adds	r7, #32
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}

080093a8 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b088      	sub	sp, #32
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
 80093b0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80093b6:	230d      	movs	r3, #13
 80093b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80093ba:	2340      	movs	r3, #64	; 0x40
 80093bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80093be:	2300      	movs	r3, #0
 80093c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80093c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093c6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80093c8:	f107 0308 	add.w	r3, r7, #8
 80093cc:	4619      	mov	r1, r3
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f7ff fd62 	bl	8008e98 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80093d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80093d8:	210d      	movs	r1, #13
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f000 f82e 	bl	800943c <SDMMC_GetCmdResp1>
 80093e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80093e2:	69fb      	ldr	r3, [r7, #28]
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	3720      	adds	r7, #32
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}

080093ec <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80093ec:	b490      	push	{r4, r7}
 80093ee:	b082      	sub	sp, #8
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80093f4:	4b0f      	ldr	r3, [pc, #60]	; (8009434 <SDMMC_GetCmdError+0x48>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	4a0f      	ldr	r2, [pc, #60]	; (8009438 <SDMMC_GetCmdError+0x4c>)
 80093fa:	fba2 2303 	umull	r2, r3, r2, r3
 80093fe:	0a5b      	lsrs	r3, r3, #9
 8009400:	f241 3288 	movw	r2, #5000	; 0x1388
 8009404:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009408:	4623      	mov	r3, r4
 800940a:	1e5c      	subs	r4, r3, #1
 800940c:	2b00      	cmp	r3, #0
 800940e:	d102      	bne.n	8009416 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009410:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009414:	e009      	b.n	800942a <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800941a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800941e:	2b00      	cmp	r3, #0
 8009420:	d0f2      	beq.n	8009408 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	22c5      	movs	r2, #197	; 0xc5
 8009426:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8009428:	2300      	movs	r3, #0
}
 800942a:	4618      	mov	r0, r3
 800942c:	3708      	adds	r7, #8
 800942e:	46bd      	mov	sp, r7
 8009430:	bc90      	pop	{r4, r7}
 8009432:	4770      	bx	lr
 8009434:	20000010 	.word	0x20000010
 8009438:	10624dd3 	.word	0x10624dd3

0800943c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800943c:	b590      	push	{r4, r7, lr}
 800943e:	b087      	sub	sp, #28
 8009440:	af00      	add	r7, sp, #0
 8009442:	60f8      	str	r0, [r7, #12]
 8009444:	460b      	mov	r3, r1
 8009446:	607a      	str	r2, [r7, #4]
 8009448:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800944a:	4b6f      	ldr	r3, [pc, #444]	; (8009608 <SDMMC_GetCmdResp1+0x1cc>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	4a6f      	ldr	r2, [pc, #444]	; (800960c <SDMMC_GetCmdResp1+0x1d0>)
 8009450:	fba2 2303 	umull	r2, r3, r2, r3
 8009454:	0a5b      	lsrs	r3, r3, #9
 8009456:	687a      	ldr	r2, [r7, #4]
 8009458:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800945c:	4623      	mov	r3, r4
 800945e:	1e5c      	subs	r4, r3, #1
 8009460:	2b00      	cmp	r3, #0
 8009462:	d102      	bne.n	800946a <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009464:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009468:	e0c9      	b.n	80095fe <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800946e:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009476:	2b00      	cmp	r3, #0
 8009478:	d0f0      	beq.n	800945c <SDMMC_GetCmdResp1+0x20>
 800947a:	697b      	ldr	r3, [r7, #20]
 800947c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009480:	2b00      	cmp	r3, #0
 8009482:	d1eb      	bne.n	800945c <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009488:	f003 0304 	and.w	r3, r3, #4
 800948c:	2b00      	cmp	r3, #0
 800948e:	d004      	beq.n	800949a <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2204      	movs	r2, #4
 8009494:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009496:	2304      	movs	r3, #4
 8009498:	e0b1      	b.n	80095fe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800949e:	f003 0301 	and.w	r3, r3, #1
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d004      	beq.n	80094b0 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	2201      	movs	r2, #1
 80094aa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80094ac:	2301      	movs	r3, #1
 80094ae:	e0a6      	b.n	80095fe <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	22c5      	movs	r2, #197	; 0xc5
 80094b4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80094b6:	68f8      	ldr	r0, [r7, #12]
 80094b8:	f7ff fd18 	bl	8008eec <SDIO_GetCommandResponse>
 80094bc:	4603      	mov	r3, r0
 80094be:	461a      	mov	r2, r3
 80094c0:	7afb      	ldrb	r3, [r7, #11]
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d001      	beq.n	80094ca <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80094c6:	2301      	movs	r3, #1
 80094c8:	e099      	b.n	80095fe <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80094ca:	2100      	movs	r1, #0
 80094cc:	68f8      	ldr	r0, [r7, #12]
 80094ce:	f7ff fd1a 	bl	8008f06 <SDIO_GetResponse>
 80094d2:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80094d4:	693a      	ldr	r2, [r7, #16]
 80094d6:	4b4e      	ldr	r3, [pc, #312]	; (8009610 <SDMMC_GetCmdResp1+0x1d4>)
 80094d8:	4013      	ands	r3, r2
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d101      	bne.n	80094e2 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 80094de:	2300      	movs	r3, #0
 80094e0:	e08d      	b.n	80095fe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	da02      	bge.n	80094ee <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80094e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80094ec:	e087      	b.n	80095fe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80094ee:	693b      	ldr	r3, [r7, #16]
 80094f0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d001      	beq.n	80094fc <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80094f8:	2340      	movs	r3, #64	; 0x40
 80094fa:	e080      	b.n	80095fe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009502:	2b00      	cmp	r3, #0
 8009504:	d001      	beq.n	800950a <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009506:	2380      	movs	r3, #128	; 0x80
 8009508:	e079      	b.n	80095fe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800950a:	693b      	ldr	r3, [r7, #16]
 800950c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009510:	2b00      	cmp	r3, #0
 8009512:	d002      	beq.n	800951a <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009514:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009518:	e071      	b.n	80095fe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009520:	2b00      	cmp	r3, #0
 8009522:	d002      	beq.n	800952a <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009524:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009528:	e069      	b.n	80095fe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800952a:	693b      	ldr	r3, [r7, #16]
 800952c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009530:	2b00      	cmp	r3, #0
 8009532:	d002      	beq.n	800953a <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009534:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009538:	e061      	b.n	80095fe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009540:	2b00      	cmp	r3, #0
 8009542:	d002      	beq.n	800954a <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009544:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009548:	e059      	b.n	80095fe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009550:	2b00      	cmp	r3, #0
 8009552:	d002      	beq.n	800955a <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009554:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009558:	e051      	b.n	80095fe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009560:	2b00      	cmp	r3, #0
 8009562:	d002      	beq.n	800956a <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009564:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009568:	e049      	b.n	80095fe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800956a:	693b      	ldr	r3, [r7, #16]
 800956c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009570:	2b00      	cmp	r3, #0
 8009572:	d002      	beq.n	800957a <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009574:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009578:	e041      	b.n	80095fe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009580:	2b00      	cmp	r3, #0
 8009582:	d002      	beq.n	800958a <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8009584:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009588:	e039      	b.n	80095fe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009590:	2b00      	cmp	r3, #0
 8009592:	d002      	beq.n	800959a <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009594:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009598:	e031      	b.n	80095fe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d002      	beq.n	80095aa <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80095a4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80095a8:	e029      	b.n	80095fe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d002      	beq.n	80095ba <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80095b4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80095b8:	e021      	b.n	80095fe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80095ba:	693b      	ldr	r3, [r7, #16]
 80095bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d002      	beq.n	80095ca <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80095c4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80095c8:	e019      	b.n	80095fe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d002      	beq.n	80095da <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80095d4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80095d8:	e011      	b.n	80095fe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d002      	beq.n	80095ea <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80095e4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80095e8:	e009      	b.n	80095fe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	f003 0308 	and.w	r3, r3, #8
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d002      	beq.n	80095fa <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80095f4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80095f8:	e001      	b.n	80095fe <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80095fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80095fe:	4618      	mov	r0, r3
 8009600:	371c      	adds	r7, #28
 8009602:	46bd      	mov	sp, r7
 8009604:	bd90      	pop	{r4, r7, pc}
 8009606:	bf00      	nop
 8009608:	20000010 	.word	0x20000010
 800960c:	10624dd3 	.word	0x10624dd3
 8009610:	fdffe008 	.word	0xfdffe008

08009614 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8009614:	b490      	push	{r4, r7}
 8009616:	b084      	sub	sp, #16
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800961c:	4b1e      	ldr	r3, [pc, #120]	; (8009698 <SDMMC_GetCmdResp2+0x84>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4a1e      	ldr	r2, [pc, #120]	; (800969c <SDMMC_GetCmdResp2+0x88>)
 8009622:	fba2 2303 	umull	r2, r3, r2, r3
 8009626:	0a5b      	lsrs	r3, r3, #9
 8009628:	f241 3288 	movw	r2, #5000	; 0x1388
 800962c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009630:	4623      	mov	r3, r4
 8009632:	1e5c      	subs	r4, r3, #1
 8009634:	2b00      	cmp	r3, #0
 8009636:	d102      	bne.n	800963e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009638:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800963c:	e026      	b.n	800968c <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009642:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800964a:	2b00      	cmp	r3, #0
 800964c:	d0f0      	beq.n	8009630 <SDMMC_GetCmdResp2+0x1c>
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009654:	2b00      	cmp	r3, #0
 8009656:	d1eb      	bne.n	8009630 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800965c:	f003 0304 	and.w	r3, r3, #4
 8009660:	2b00      	cmp	r3, #0
 8009662:	d004      	beq.n	800966e <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2204      	movs	r2, #4
 8009668:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800966a:	2304      	movs	r3, #4
 800966c:	e00e      	b.n	800968c <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009672:	f003 0301 	and.w	r3, r3, #1
 8009676:	2b00      	cmp	r3, #0
 8009678:	d004      	beq.n	8009684 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2201      	movs	r2, #1
 800967e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009680:	2301      	movs	r3, #1
 8009682:	e003      	b.n	800968c <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	22c5      	movs	r2, #197	; 0xc5
 8009688:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800968a:	2300      	movs	r3, #0
}
 800968c:	4618      	mov	r0, r3
 800968e:	3710      	adds	r7, #16
 8009690:	46bd      	mov	sp, r7
 8009692:	bc90      	pop	{r4, r7}
 8009694:	4770      	bx	lr
 8009696:	bf00      	nop
 8009698:	20000010 	.word	0x20000010
 800969c:	10624dd3 	.word	0x10624dd3

080096a0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80096a0:	b490      	push	{r4, r7}
 80096a2:	b084      	sub	sp, #16
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80096a8:	4b18      	ldr	r3, [pc, #96]	; (800970c <SDMMC_GetCmdResp3+0x6c>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4a18      	ldr	r2, [pc, #96]	; (8009710 <SDMMC_GetCmdResp3+0x70>)
 80096ae:	fba2 2303 	umull	r2, r3, r2, r3
 80096b2:	0a5b      	lsrs	r3, r3, #9
 80096b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80096b8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80096bc:	4623      	mov	r3, r4
 80096be:	1e5c      	subs	r4, r3, #1
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d102      	bne.n	80096ca <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80096c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80096c8:	e01b      	b.n	8009702 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096ce:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d0f0      	beq.n	80096bc <SDMMC_GetCmdResp3+0x1c>
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d1eb      	bne.n	80096bc <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096e8:	f003 0304 	and.w	r3, r3, #4
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d004      	beq.n	80096fa <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2204      	movs	r2, #4
 80096f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80096f6:	2304      	movs	r3, #4
 80096f8:	e003      	b.n	8009702 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	22c5      	movs	r2, #197	; 0xc5
 80096fe:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009700:	2300      	movs	r3, #0
}
 8009702:	4618      	mov	r0, r3
 8009704:	3710      	adds	r7, #16
 8009706:	46bd      	mov	sp, r7
 8009708:	bc90      	pop	{r4, r7}
 800970a:	4770      	bx	lr
 800970c:	20000010 	.word	0x20000010
 8009710:	10624dd3 	.word	0x10624dd3

08009714 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009714:	b590      	push	{r4, r7, lr}
 8009716:	b087      	sub	sp, #28
 8009718:	af00      	add	r7, sp, #0
 800971a:	60f8      	str	r0, [r7, #12]
 800971c:	460b      	mov	r3, r1
 800971e:	607a      	str	r2, [r7, #4]
 8009720:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009722:	4b34      	ldr	r3, [pc, #208]	; (80097f4 <SDMMC_GetCmdResp6+0xe0>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	4a34      	ldr	r2, [pc, #208]	; (80097f8 <SDMMC_GetCmdResp6+0xe4>)
 8009728:	fba2 2303 	umull	r2, r3, r2, r3
 800972c:	0a5b      	lsrs	r3, r3, #9
 800972e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009732:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009736:	4623      	mov	r3, r4
 8009738:	1e5c      	subs	r4, r3, #1
 800973a:	2b00      	cmp	r3, #0
 800973c:	d102      	bne.n	8009744 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800973e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009742:	e052      	b.n	80097ea <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009748:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009750:	2b00      	cmp	r3, #0
 8009752:	d0f0      	beq.n	8009736 <SDMMC_GetCmdResp6+0x22>
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800975a:	2b00      	cmp	r3, #0
 800975c:	d1eb      	bne.n	8009736 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009762:	f003 0304 	and.w	r3, r3, #4
 8009766:	2b00      	cmp	r3, #0
 8009768:	d004      	beq.n	8009774 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	2204      	movs	r2, #4
 800976e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009770:	2304      	movs	r3, #4
 8009772:	e03a      	b.n	80097ea <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009778:	f003 0301 	and.w	r3, r3, #1
 800977c:	2b00      	cmp	r3, #0
 800977e:	d004      	beq.n	800978a <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	2201      	movs	r2, #1
 8009784:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009786:	2301      	movs	r3, #1
 8009788:	e02f      	b.n	80097ea <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800978a:	68f8      	ldr	r0, [r7, #12]
 800978c:	f7ff fbae 	bl	8008eec <SDIO_GetCommandResponse>
 8009790:	4603      	mov	r3, r0
 8009792:	461a      	mov	r2, r3
 8009794:	7afb      	ldrb	r3, [r7, #11]
 8009796:	4293      	cmp	r3, r2
 8009798:	d001      	beq.n	800979e <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800979a:	2301      	movs	r3, #1
 800979c:	e025      	b.n	80097ea <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	22c5      	movs	r2, #197	; 0xc5
 80097a2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80097a4:	2100      	movs	r1, #0
 80097a6:	68f8      	ldr	r0, [r7, #12]
 80097a8:	f7ff fbad 	bl	8008f06 <SDIO_GetResponse>
 80097ac:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80097ae:	693b      	ldr	r3, [r7, #16]
 80097b0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d106      	bne.n	80097c6 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	0c1b      	lsrs	r3, r3, #16
 80097bc:	b29a      	uxth	r2, r3
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80097c2:	2300      	movs	r3, #0
 80097c4:	e011      	b.n	80097ea <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80097c6:	693b      	ldr	r3, [r7, #16]
 80097c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d002      	beq.n	80097d6 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80097d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80097d4:	e009      	b.n	80097ea <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80097d6:	693b      	ldr	r3, [r7, #16]
 80097d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d002      	beq.n	80097e6 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80097e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80097e4:	e001      	b.n	80097ea <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80097e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	371c      	adds	r7, #28
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd90      	pop	{r4, r7, pc}
 80097f2:	bf00      	nop
 80097f4:	20000010 	.word	0x20000010
 80097f8:	10624dd3 	.word	0x10624dd3

080097fc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80097fc:	b490      	push	{r4, r7}
 80097fe:	b084      	sub	sp, #16
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009804:	4b21      	ldr	r3, [pc, #132]	; (800988c <SDMMC_GetCmdResp7+0x90>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	4a21      	ldr	r2, [pc, #132]	; (8009890 <SDMMC_GetCmdResp7+0x94>)
 800980a:	fba2 2303 	umull	r2, r3, r2, r3
 800980e:	0a5b      	lsrs	r3, r3, #9
 8009810:	f241 3288 	movw	r2, #5000	; 0x1388
 8009814:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009818:	4623      	mov	r3, r4
 800981a:	1e5c      	subs	r4, r3, #1
 800981c:	2b00      	cmp	r3, #0
 800981e:	d102      	bne.n	8009826 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009820:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009824:	e02c      	b.n	8009880 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800982a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009832:	2b00      	cmp	r3, #0
 8009834:	d0f0      	beq.n	8009818 <SDMMC_GetCmdResp7+0x1c>
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800983c:	2b00      	cmp	r3, #0
 800983e:	d1eb      	bne.n	8009818 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009844:	f003 0304 	and.w	r3, r3, #4
 8009848:	2b00      	cmp	r3, #0
 800984a:	d004      	beq.n	8009856 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2204      	movs	r2, #4
 8009850:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009852:	2304      	movs	r3, #4
 8009854:	e014      	b.n	8009880 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800985a:	f003 0301 	and.w	r3, r3, #1
 800985e:	2b00      	cmp	r3, #0
 8009860:	d004      	beq.n	800986c <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2201      	movs	r2, #1
 8009866:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009868:	2301      	movs	r3, #1
 800986a:	e009      	b.n	8009880 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009874:	2b00      	cmp	r3, #0
 8009876:	d002      	beq.n	800987e <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2240      	movs	r2, #64	; 0x40
 800987c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800987e:	2300      	movs	r3, #0
  
}
 8009880:	4618      	mov	r0, r3
 8009882:	3710      	adds	r7, #16
 8009884:	46bd      	mov	sp, r7
 8009886:	bc90      	pop	{r4, r7}
 8009888:	4770      	bx	lr
 800988a:	bf00      	nop
 800988c:	20000010 	.word	0x20000010
 8009890:	10624dd3 	.word	0x10624dd3

08009894 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009894:	b084      	sub	sp, #16
 8009896:	b580      	push	{r7, lr}
 8009898:	b084      	sub	sp, #16
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
 800989e:	f107 001c 	add.w	r0, r7, #28
 80098a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80098a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098a8:	2b01      	cmp	r3, #1
 80098aa:	d122      	bne.n	80098f2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	68db      	ldr	r3, [r3, #12]
 80098bc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80098c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098c4:	687a      	ldr	r2, [r7, #4]
 80098c6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	68db      	ldr	r3, [r3, #12]
 80098cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80098d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098d6:	2b01      	cmp	r3, #1
 80098d8:	d105      	bne.n	80098e6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	68db      	ldr	r3, [r3, #12]
 80098de:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f001 fa7c 	bl	800ade4 <USB_CoreReset>
 80098ec:	4603      	mov	r3, r0
 80098ee:	73fb      	strb	r3, [r7, #15]
 80098f0:	e01a      	b.n	8009928 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	68db      	ldr	r3, [r3, #12]
 80098f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f001 fa70 	bl	800ade4 <USB_CoreReset>
 8009904:	4603      	mov	r3, r0
 8009906:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009908:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800990a:	2b00      	cmp	r3, #0
 800990c:	d106      	bne.n	800991c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009912:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	639a      	str	r2, [r3, #56]	; 0x38
 800991a:	e005      	b.n	8009928 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009920:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800992a:	2b01      	cmp	r3, #1
 800992c:	d10b      	bne.n	8009946 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	689b      	ldr	r3, [r3, #8]
 8009932:	f043 0206 	orr.w	r2, r3, #6
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	689b      	ldr	r3, [r3, #8]
 800993e:	f043 0220 	orr.w	r2, r3, #32
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009946:	7bfb      	ldrb	r3, [r7, #15]
}
 8009948:	4618      	mov	r0, r3
 800994a:	3710      	adds	r7, #16
 800994c:	46bd      	mov	sp, r7
 800994e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009952:	b004      	add	sp, #16
 8009954:	4770      	bx	lr
	...

08009958 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009958:	b480      	push	{r7}
 800995a:	b087      	sub	sp, #28
 800995c:	af00      	add	r7, sp, #0
 800995e:	60f8      	str	r0, [r7, #12]
 8009960:	60b9      	str	r1, [r7, #8]
 8009962:	4613      	mov	r3, r2
 8009964:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009966:	79fb      	ldrb	r3, [r7, #7]
 8009968:	2b02      	cmp	r3, #2
 800996a:	d165      	bne.n	8009a38 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	4a41      	ldr	r2, [pc, #260]	; (8009a74 <USB_SetTurnaroundTime+0x11c>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d906      	bls.n	8009982 <USB_SetTurnaroundTime+0x2a>
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	4a40      	ldr	r2, [pc, #256]	; (8009a78 <USB_SetTurnaroundTime+0x120>)
 8009978:	4293      	cmp	r3, r2
 800997a:	d802      	bhi.n	8009982 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800997c:	230f      	movs	r3, #15
 800997e:	617b      	str	r3, [r7, #20]
 8009980:	e062      	b.n	8009a48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	4a3c      	ldr	r2, [pc, #240]	; (8009a78 <USB_SetTurnaroundTime+0x120>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d906      	bls.n	8009998 <USB_SetTurnaroundTime+0x40>
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	4a3b      	ldr	r2, [pc, #236]	; (8009a7c <USB_SetTurnaroundTime+0x124>)
 800998e:	4293      	cmp	r3, r2
 8009990:	d802      	bhi.n	8009998 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009992:	230e      	movs	r3, #14
 8009994:	617b      	str	r3, [r7, #20]
 8009996:	e057      	b.n	8009a48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	4a38      	ldr	r2, [pc, #224]	; (8009a7c <USB_SetTurnaroundTime+0x124>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d906      	bls.n	80099ae <USB_SetTurnaroundTime+0x56>
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	4a37      	ldr	r2, [pc, #220]	; (8009a80 <USB_SetTurnaroundTime+0x128>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d802      	bhi.n	80099ae <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80099a8:	230d      	movs	r3, #13
 80099aa:	617b      	str	r3, [r7, #20]
 80099ac:	e04c      	b.n	8009a48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	4a33      	ldr	r2, [pc, #204]	; (8009a80 <USB_SetTurnaroundTime+0x128>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d906      	bls.n	80099c4 <USB_SetTurnaroundTime+0x6c>
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	4a32      	ldr	r2, [pc, #200]	; (8009a84 <USB_SetTurnaroundTime+0x12c>)
 80099ba:	4293      	cmp	r3, r2
 80099bc:	d802      	bhi.n	80099c4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80099be:	230c      	movs	r3, #12
 80099c0:	617b      	str	r3, [r7, #20]
 80099c2:	e041      	b.n	8009a48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	4a2f      	ldr	r2, [pc, #188]	; (8009a84 <USB_SetTurnaroundTime+0x12c>)
 80099c8:	4293      	cmp	r3, r2
 80099ca:	d906      	bls.n	80099da <USB_SetTurnaroundTime+0x82>
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	4a2e      	ldr	r2, [pc, #184]	; (8009a88 <USB_SetTurnaroundTime+0x130>)
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d802      	bhi.n	80099da <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80099d4:	230b      	movs	r3, #11
 80099d6:	617b      	str	r3, [r7, #20]
 80099d8:	e036      	b.n	8009a48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	4a2a      	ldr	r2, [pc, #168]	; (8009a88 <USB_SetTurnaroundTime+0x130>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d906      	bls.n	80099f0 <USB_SetTurnaroundTime+0x98>
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	4a29      	ldr	r2, [pc, #164]	; (8009a8c <USB_SetTurnaroundTime+0x134>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d802      	bhi.n	80099f0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80099ea:	230a      	movs	r3, #10
 80099ec:	617b      	str	r3, [r7, #20]
 80099ee:	e02b      	b.n	8009a48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	4a26      	ldr	r2, [pc, #152]	; (8009a8c <USB_SetTurnaroundTime+0x134>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d906      	bls.n	8009a06 <USB_SetTurnaroundTime+0xae>
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	4a25      	ldr	r2, [pc, #148]	; (8009a90 <USB_SetTurnaroundTime+0x138>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d802      	bhi.n	8009a06 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009a00:	2309      	movs	r3, #9
 8009a02:	617b      	str	r3, [r7, #20]
 8009a04:	e020      	b.n	8009a48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	4a21      	ldr	r2, [pc, #132]	; (8009a90 <USB_SetTurnaroundTime+0x138>)
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d906      	bls.n	8009a1c <USB_SetTurnaroundTime+0xc4>
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	4a20      	ldr	r2, [pc, #128]	; (8009a94 <USB_SetTurnaroundTime+0x13c>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d802      	bhi.n	8009a1c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009a16:	2308      	movs	r3, #8
 8009a18:	617b      	str	r3, [r7, #20]
 8009a1a:	e015      	b.n	8009a48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	4a1d      	ldr	r2, [pc, #116]	; (8009a94 <USB_SetTurnaroundTime+0x13c>)
 8009a20:	4293      	cmp	r3, r2
 8009a22:	d906      	bls.n	8009a32 <USB_SetTurnaroundTime+0xda>
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	4a1c      	ldr	r2, [pc, #112]	; (8009a98 <USB_SetTurnaroundTime+0x140>)
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	d802      	bhi.n	8009a32 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009a2c:	2307      	movs	r3, #7
 8009a2e:	617b      	str	r3, [r7, #20]
 8009a30:	e00a      	b.n	8009a48 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009a32:	2306      	movs	r3, #6
 8009a34:	617b      	str	r3, [r7, #20]
 8009a36:	e007      	b.n	8009a48 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009a38:	79fb      	ldrb	r3, [r7, #7]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d102      	bne.n	8009a44 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009a3e:	2309      	movs	r3, #9
 8009a40:	617b      	str	r3, [r7, #20]
 8009a42:	e001      	b.n	8009a48 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009a44:	2309      	movs	r3, #9
 8009a46:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	68db      	ldr	r3, [r3, #12]
 8009a4c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	68da      	ldr	r2, [r3, #12]
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	029b      	lsls	r3, r3, #10
 8009a5c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009a60:	431a      	orrs	r2, r3
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009a66:	2300      	movs	r3, #0
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	371c      	adds	r7, #28
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a72:	4770      	bx	lr
 8009a74:	00d8acbf 	.word	0x00d8acbf
 8009a78:	00e4e1bf 	.word	0x00e4e1bf
 8009a7c:	00f423ff 	.word	0x00f423ff
 8009a80:	0106737f 	.word	0x0106737f
 8009a84:	011a499f 	.word	0x011a499f
 8009a88:	01312cff 	.word	0x01312cff
 8009a8c:	014ca43f 	.word	0x014ca43f
 8009a90:	016e35ff 	.word	0x016e35ff
 8009a94:	01a6ab1f 	.word	0x01a6ab1f
 8009a98:	01e847ff 	.word	0x01e847ff

08009a9c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b083      	sub	sp, #12
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	689b      	ldr	r3, [r3, #8]
 8009aa8:	f043 0201 	orr.w	r2, r3, #1
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009ab0:	2300      	movs	r3, #0
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	370c      	adds	r7, #12
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abc:	4770      	bx	lr

08009abe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009abe:	b480      	push	{r7}
 8009ac0:	b083      	sub	sp, #12
 8009ac2:	af00      	add	r7, sp, #0
 8009ac4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	689b      	ldr	r3, [r3, #8]
 8009aca:	f023 0201 	bic.w	r2, r3, #1
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009ad2:	2300      	movs	r3, #0
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	370c      	adds	r7, #12
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ade:	4770      	bx	lr

08009ae0 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b082      	sub	sp, #8
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
 8009ae8:	460b      	mov	r3, r1
 8009aea:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	68db      	ldr	r3, [r3, #12]
 8009af0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009af8:	78fb      	ldrb	r3, [r7, #3]
 8009afa:	2b01      	cmp	r3, #1
 8009afc:	d106      	bne.n	8009b0c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	68db      	ldr	r3, [r3, #12]
 8009b02:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	60da      	str	r2, [r3, #12]
 8009b0a:	e00b      	b.n	8009b24 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8009b0c:	78fb      	ldrb	r3, [r7, #3]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d106      	bne.n	8009b20 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	68db      	ldr	r3, [r3, #12]
 8009b16:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	60da      	str	r2, [r3, #12]
 8009b1e:	e001      	b.n	8009b24 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8009b20:	2301      	movs	r3, #1
 8009b22:	e003      	b.n	8009b2c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8009b24:	2032      	movs	r0, #50	; 0x32
 8009b26:	f7f9 fa33 	bl	8002f90 <HAL_Delay>

  return HAL_OK;
 8009b2a:	2300      	movs	r3, #0
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3708      	adds	r7, #8
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}

08009b34 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009b34:	b084      	sub	sp, #16
 8009b36:	b580      	push	{r7, lr}
 8009b38:	b086      	sub	sp, #24
 8009b3a:	af00      	add	r7, sp, #0
 8009b3c:	6078      	str	r0, [r7, #4]
 8009b3e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009b42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009b46:	2300      	movs	r3, #0
 8009b48:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009b4e:	2300      	movs	r3, #0
 8009b50:	613b      	str	r3, [r7, #16]
 8009b52:	e009      	b.n	8009b68 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009b54:	687a      	ldr	r2, [r7, #4]
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	3340      	adds	r3, #64	; 0x40
 8009b5a:	009b      	lsls	r3, r3, #2
 8009b5c:	4413      	add	r3, r2
 8009b5e:	2200      	movs	r2, #0
 8009b60:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009b62:	693b      	ldr	r3, [r7, #16]
 8009b64:	3301      	adds	r3, #1
 8009b66:	613b      	str	r3, [r7, #16]
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	2b0e      	cmp	r3, #14
 8009b6c:	d9f2      	bls.n	8009b54 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009b6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d112      	bne.n	8009b9a <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b78:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b84:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b90:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	639a      	str	r2, [r3, #56]	; 0x38
 8009b98:	e00b      	b.n	8009bb2 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009baa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009bb8:	461a      	mov	r2, r3
 8009bba:	2300      	movs	r3, #0
 8009bbc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bc4:	4619      	mov	r1, r3
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bcc:	461a      	mov	r2, r3
 8009bce:	680b      	ldr	r3, [r1, #0]
 8009bd0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bd4:	2b01      	cmp	r3, #1
 8009bd6:	d10c      	bne.n	8009bf2 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d104      	bne.n	8009be8 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009bde:	2100      	movs	r1, #0
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	f000 f961 	bl	8009ea8 <USB_SetDevSpeed>
 8009be6:	e008      	b.n	8009bfa <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009be8:	2101      	movs	r1, #1
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f000 f95c 	bl	8009ea8 <USB_SetDevSpeed>
 8009bf0:	e003      	b.n	8009bfa <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009bf2:	2103      	movs	r1, #3
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f000 f957 	bl	8009ea8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009bfa:	2110      	movs	r1, #16
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f000 f90b 	bl	8009e18 <USB_FlushTxFifo>
 8009c02:	4603      	mov	r3, r0
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d001      	beq.n	8009c0c <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8009c08:	2301      	movs	r3, #1
 8009c0a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f000 f929 	bl	8009e64 <USB_FlushRxFifo>
 8009c12:	4603      	mov	r3, r0
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d001      	beq.n	8009c1c <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8009c18:	2301      	movs	r3, #1
 8009c1a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c22:	461a      	mov	r2, r3
 8009c24:	2300      	movs	r3, #0
 8009c26:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c2e:	461a      	mov	r2, r3
 8009c30:	2300      	movs	r3, #0
 8009c32:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c3a:	461a      	mov	r2, r3
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009c40:	2300      	movs	r3, #0
 8009c42:	613b      	str	r3, [r7, #16]
 8009c44:	e043      	b.n	8009cce <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009c46:	693b      	ldr	r3, [r7, #16]
 8009c48:	015a      	lsls	r2, r3, #5
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	4413      	add	r3, r2
 8009c4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009c58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009c5c:	d118      	bne.n	8009c90 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d10a      	bne.n	8009c7a <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	015a      	lsls	r2, r3, #5
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	4413      	add	r3, r2
 8009c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c70:	461a      	mov	r2, r3
 8009c72:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009c76:	6013      	str	r3, [r2, #0]
 8009c78:	e013      	b.n	8009ca2 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	015a      	lsls	r2, r3, #5
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	4413      	add	r3, r2
 8009c82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c86:	461a      	mov	r2, r3
 8009c88:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009c8c:	6013      	str	r3, [r2, #0]
 8009c8e:	e008      	b.n	8009ca2 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	015a      	lsls	r2, r3, #5
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	4413      	add	r3, r2
 8009c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c9c:	461a      	mov	r2, r3
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009ca2:	693b      	ldr	r3, [r7, #16]
 8009ca4:	015a      	lsls	r2, r3, #5
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	4413      	add	r3, r2
 8009caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cae:	461a      	mov	r2, r3
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009cb4:	693b      	ldr	r3, [r7, #16]
 8009cb6:	015a      	lsls	r2, r3, #5
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	4413      	add	r3, r2
 8009cbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cc0:	461a      	mov	r2, r3
 8009cc2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009cc6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	3301      	adds	r3, #1
 8009ccc:	613b      	str	r3, [r7, #16]
 8009cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd0:	693a      	ldr	r2, [r7, #16]
 8009cd2:	429a      	cmp	r2, r3
 8009cd4:	d3b7      	bcc.n	8009c46 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	613b      	str	r3, [r7, #16]
 8009cda:	e043      	b.n	8009d64 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009cdc:	693b      	ldr	r3, [r7, #16]
 8009cde:	015a      	lsls	r2, r3, #5
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	4413      	add	r3, r2
 8009ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009cee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009cf2:	d118      	bne.n	8009d26 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d10a      	bne.n	8009d10 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	015a      	lsls	r2, r3, #5
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	4413      	add	r3, r2
 8009d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d06:	461a      	mov	r2, r3
 8009d08:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009d0c:	6013      	str	r3, [r2, #0]
 8009d0e:	e013      	b.n	8009d38 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009d10:	693b      	ldr	r3, [r7, #16]
 8009d12:	015a      	lsls	r2, r3, #5
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	4413      	add	r3, r2
 8009d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d1c:	461a      	mov	r2, r3
 8009d1e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009d22:	6013      	str	r3, [r2, #0]
 8009d24:	e008      	b.n	8009d38 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009d26:	693b      	ldr	r3, [r7, #16]
 8009d28:	015a      	lsls	r2, r3, #5
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	4413      	add	r3, r2
 8009d2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d32:	461a      	mov	r2, r3
 8009d34:	2300      	movs	r3, #0
 8009d36:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009d38:	693b      	ldr	r3, [r7, #16]
 8009d3a:	015a      	lsls	r2, r3, #5
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	4413      	add	r3, r2
 8009d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d44:	461a      	mov	r2, r3
 8009d46:	2300      	movs	r3, #0
 8009d48:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009d4a:	693b      	ldr	r3, [r7, #16]
 8009d4c:	015a      	lsls	r2, r3, #5
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	4413      	add	r3, r2
 8009d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d56:	461a      	mov	r2, r3
 8009d58:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009d5c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	3301      	adds	r3, #1
 8009d62:	613b      	str	r3, [r7, #16]
 8009d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d66:	693a      	ldr	r2, [r7, #16]
 8009d68:	429a      	cmp	r2, r3
 8009d6a:	d3b7      	bcc.n	8009cdc <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d72:	691b      	ldr	r3, [r3, #16]
 8009d74:	68fa      	ldr	r2, [r7, #12]
 8009d76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d7e:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8009d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d82:	2b01      	cmp	r3, #1
 8009d84:	d111      	bne.n	8009daa <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d8c:	461a      	mov	r2, r3
 8009d8e:	4b20      	ldr	r3, [pc, #128]	; (8009e10 <USB_DevInit+0x2dc>)
 8009d90:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d9a:	68fa      	ldr	r2, [r7, #12]
 8009d9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009da4:	f043 0303 	orr.w	r3, r3, #3
 8009da8:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2200      	movs	r2, #0
 8009dae:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009db6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d105      	bne.n	8009dca <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	699b      	ldr	r3, [r3, #24]
 8009dc2:	f043 0210 	orr.w	r2, r3, #16
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	699a      	ldr	r2, [r3, #24]
 8009dce:	4b11      	ldr	r3, [pc, #68]	; (8009e14 <USB_DevInit+0x2e0>)
 8009dd0:	4313      	orrs	r3, r2
 8009dd2:	687a      	ldr	r2, [r7, #4]
 8009dd4:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009dd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d005      	beq.n	8009de8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	699b      	ldr	r3, [r3, #24]
 8009de0:	f043 0208 	orr.w	r2, r3, #8
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009de8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009dea:	2b01      	cmp	r3, #1
 8009dec:	d107      	bne.n	8009dfe <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	699b      	ldr	r3, [r3, #24]
 8009df2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009df6:	f043 0304 	orr.w	r3, r3, #4
 8009dfa:	687a      	ldr	r2, [r7, #4]
 8009dfc:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009dfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3718      	adds	r7, #24
 8009e04:	46bd      	mov	sp, r7
 8009e06:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009e0a:	b004      	add	sp, #16
 8009e0c:	4770      	bx	lr
 8009e0e:	bf00      	nop
 8009e10:	00800100 	.word	0x00800100
 8009e14:	803c3800 	.word	0x803c3800

08009e18 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b085      	sub	sp, #20
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
 8009e20:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8009e22:	2300      	movs	r3, #0
 8009e24:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	019b      	lsls	r3, r3, #6
 8009e2a:	f043 0220 	orr.w	r2, r3, #32
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	3301      	adds	r3, #1
 8009e36:	60fb      	str	r3, [r7, #12]
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	4a09      	ldr	r2, [pc, #36]	; (8009e60 <USB_FlushTxFifo+0x48>)
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d901      	bls.n	8009e44 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009e40:	2303      	movs	r3, #3
 8009e42:	e006      	b.n	8009e52 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	691b      	ldr	r3, [r3, #16]
 8009e48:	f003 0320 	and.w	r3, r3, #32
 8009e4c:	2b20      	cmp	r3, #32
 8009e4e:	d0f0      	beq.n	8009e32 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009e50:	2300      	movs	r3, #0
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	3714      	adds	r7, #20
 8009e56:	46bd      	mov	sp, r7
 8009e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5c:	4770      	bx	lr
 8009e5e:	bf00      	nop
 8009e60:	00030d40 	.word	0x00030d40

08009e64 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009e64:	b480      	push	{r7}
 8009e66:	b085      	sub	sp, #20
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2210      	movs	r2, #16
 8009e74:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	3301      	adds	r3, #1
 8009e7a:	60fb      	str	r3, [r7, #12]
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	4a09      	ldr	r2, [pc, #36]	; (8009ea4 <USB_FlushRxFifo+0x40>)
 8009e80:	4293      	cmp	r3, r2
 8009e82:	d901      	bls.n	8009e88 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009e84:	2303      	movs	r3, #3
 8009e86:	e006      	b.n	8009e96 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	691b      	ldr	r3, [r3, #16]
 8009e8c:	f003 0310 	and.w	r3, r3, #16
 8009e90:	2b10      	cmp	r3, #16
 8009e92:	d0f0      	beq.n	8009e76 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009e94:	2300      	movs	r3, #0
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3714      	adds	r7, #20
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea0:	4770      	bx	lr
 8009ea2:	bf00      	nop
 8009ea4:	00030d40 	.word	0x00030d40

08009ea8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b085      	sub	sp, #20
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
 8009eb0:	460b      	mov	r3, r1
 8009eb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ebe:	681a      	ldr	r2, [r3, #0]
 8009ec0:	78fb      	ldrb	r3, [r7, #3]
 8009ec2:	68f9      	ldr	r1, [r7, #12]
 8009ec4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009ecc:	2300      	movs	r3, #0
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3714      	adds	r7, #20
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed8:	4770      	bx	lr

08009eda <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009eda:	b480      	push	{r7}
 8009edc:	b087      	sub	sp, #28
 8009ede:	af00      	add	r7, sp, #0
 8009ee0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009ee6:	693b      	ldr	r3, [r7, #16]
 8009ee8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009eec:	689b      	ldr	r3, [r3, #8]
 8009eee:	f003 0306 	and.w	r3, r3, #6
 8009ef2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d102      	bne.n	8009f00 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009efa:	2300      	movs	r3, #0
 8009efc:	75fb      	strb	r3, [r7, #23]
 8009efe:	e00a      	b.n	8009f16 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	2b02      	cmp	r3, #2
 8009f04:	d002      	beq.n	8009f0c <USB_GetDevSpeed+0x32>
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	2b06      	cmp	r3, #6
 8009f0a:	d102      	bne.n	8009f12 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009f0c:	2302      	movs	r3, #2
 8009f0e:	75fb      	strb	r3, [r7, #23]
 8009f10:	e001      	b.n	8009f16 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009f12:	230f      	movs	r3, #15
 8009f14:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009f16:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	371c      	adds	r7, #28
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f22:	4770      	bx	lr

08009f24 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009f24:	b480      	push	{r7}
 8009f26:	b085      	sub	sp, #20
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	781b      	ldrb	r3, [r3, #0]
 8009f36:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	785b      	ldrb	r3, [r3, #1]
 8009f3c:	2b01      	cmp	r3, #1
 8009f3e:	d13a      	bne.n	8009fb6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f46:	69da      	ldr	r2, [r3, #28]
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	781b      	ldrb	r3, [r3, #0]
 8009f4c:	f003 030f 	and.w	r3, r3, #15
 8009f50:	2101      	movs	r1, #1
 8009f52:	fa01 f303 	lsl.w	r3, r1, r3
 8009f56:	b29b      	uxth	r3, r3
 8009f58:	68f9      	ldr	r1, [r7, #12]
 8009f5a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f5e:	4313      	orrs	r3, r2
 8009f60:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	015a      	lsls	r2, r3, #5
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	4413      	add	r3, r2
 8009f6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d155      	bne.n	800a024 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	015a      	lsls	r2, r3, #5
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	4413      	add	r3, r2
 8009f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f84:	681a      	ldr	r2, [r3, #0]
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	689b      	ldr	r3, [r3, #8]
 8009f8a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	78db      	ldrb	r3, [r3, #3]
 8009f92:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009f94:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	059b      	lsls	r3, r3, #22
 8009f9a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009f9c:	4313      	orrs	r3, r2
 8009f9e:	68ba      	ldr	r2, [r7, #8]
 8009fa0:	0151      	lsls	r1, r2, #5
 8009fa2:	68fa      	ldr	r2, [r7, #12]
 8009fa4:	440a      	add	r2, r1
 8009fa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009faa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009fae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009fb2:	6013      	str	r3, [r2, #0]
 8009fb4:	e036      	b.n	800a024 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fbc:	69da      	ldr	r2, [r3, #28]
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	781b      	ldrb	r3, [r3, #0]
 8009fc2:	f003 030f 	and.w	r3, r3, #15
 8009fc6:	2101      	movs	r1, #1
 8009fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8009fcc:	041b      	lsls	r3, r3, #16
 8009fce:	68f9      	ldr	r1, [r7, #12]
 8009fd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009fd4:	4313      	orrs	r3, r2
 8009fd6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	015a      	lsls	r2, r3, #5
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	4413      	add	r3, r2
 8009fe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d11a      	bne.n	800a024 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	015a      	lsls	r2, r3, #5
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	4413      	add	r3, r2
 8009ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ffa:	681a      	ldr	r2, [r3, #0]
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	689b      	ldr	r3, [r3, #8]
 800a000:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	78db      	ldrb	r3, [r3, #3]
 800a008:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a00a:	430b      	orrs	r3, r1
 800a00c:	4313      	orrs	r3, r2
 800a00e:	68ba      	ldr	r2, [r7, #8]
 800a010:	0151      	lsls	r1, r2, #5
 800a012:	68fa      	ldr	r2, [r7, #12]
 800a014:	440a      	add	r2, r1
 800a016:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a01a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a01e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a022:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a024:	2300      	movs	r3, #0
}
 800a026:	4618      	mov	r0, r3
 800a028:	3714      	adds	r7, #20
 800a02a:	46bd      	mov	sp, r7
 800a02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a030:	4770      	bx	lr
	...

0800a034 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a034:	b480      	push	{r7}
 800a036:	b085      	sub	sp, #20
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
 800a03c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	781b      	ldrb	r3, [r3, #0]
 800a046:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	785b      	ldrb	r3, [r3, #1]
 800a04c:	2b01      	cmp	r3, #1
 800a04e:	d135      	bne.n	800a0bc <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a056:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	781b      	ldrb	r3, [r3, #0]
 800a05c:	f003 030f 	and.w	r3, r3, #15
 800a060:	2101      	movs	r1, #1
 800a062:	fa01 f303 	lsl.w	r3, r1, r3
 800a066:	b29b      	uxth	r3, r3
 800a068:	43db      	mvns	r3, r3
 800a06a:	68f9      	ldr	r1, [r7, #12]
 800a06c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a070:	4013      	ands	r3, r2
 800a072:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a07a:	69da      	ldr	r2, [r3, #28]
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	781b      	ldrb	r3, [r3, #0]
 800a080:	f003 030f 	and.w	r3, r3, #15
 800a084:	2101      	movs	r1, #1
 800a086:	fa01 f303 	lsl.w	r3, r1, r3
 800a08a:	b29b      	uxth	r3, r3
 800a08c:	43db      	mvns	r3, r3
 800a08e:	68f9      	ldr	r1, [r7, #12]
 800a090:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a094:	4013      	ands	r3, r2
 800a096:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	015a      	lsls	r2, r3, #5
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	4413      	add	r3, r2
 800a0a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0a4:	681a      	ldr	r2, [r3, #0]
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	0159      	lsls	r1, r3, #5
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	440b      	add	r3, r1
 800a0ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0b2:	4619      	mov	r1, r3
 800a0b4:	4b1f      	ldr	r3, [pc, #124]	; (800a134 <USB_DeactivateEndpoint+0x100>)
 800a0b6:	4013      	ands	r3, r2
 800a0b8:	600b      	str	r3, [r1, #0]
 800a0ba:	e034      	b.n	800a126 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	781b      	ldrb	r3, [r3, #0]
 800a0c8:	f003 030f 	and.w	r3, r3, #15
 800a0cc:	2101      	movs	r1, #1
 800a0ce:	fa01 f303 	lsl.w	r3, r1, r3
 800a0d2:	041b      	lsls	r3, r3, #16
 800a0d4:	43db      	mvns	r3, r3
 800a0d6:	68f9      	ldr	r1, [r7, #12]
 800a0d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a0dc:	4013      	ands	r3, r2
 800a0de:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0e6:	69da      	ldr	r2, [r3, #28]
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	781b      	ldrb	r3, [r3, #0]
 800a0ec:	f003 030f 	and.w	r3, r3, #15
 800a0f0:	2101      	movs	r1, #1
 800a0f2:	fa01 f303 	lsl.w	r3, r1, r3
 800a0f6:	041b      	lsls	r3, r3, #16
 800a0f8:	43db      	mvns	r3, r3
 800a0fa:	68f9      	ldr	r1, [r7, #12]
 800a0fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a100:	4013      	ands	r3, r2
 800a102:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	015a      	lsls	r2, r3, #5
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	4413      	add	r3, r2
 800a10c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a110:	681a      	ldr	r2, [r3, #0]
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	0159      	lsls	r1, r3, #5
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	440b      	add	r3, r1
 800a11a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a11e:	4619      	mov	r1, r3
 800a120:	4b05      	ldr	r3, [pc, #20]	; (800a138 <USB_DeactivateEndpoint+0x104>)
 800a122:	4013      	ands	r3, r2
 800a124:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a126:	2300      	movs	r3, #0
}
 800a128:	4618      	mov	r0, r3
 800a12a:	3714      	adds	r7, #20
 800a12c:	46bd      	mov	sp, r7
 800a12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a132:	4770      	bx	lr
 800a134:	ec337800 	.word	0xec337800
 800a138:	eff37800 	.word	0xeff37800

0800a13c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b08a      	sub	sp, #40	; 0x28
 800a140:	af02      	add	r7, sp, #8
 800a142:	60f8      	str	r0, [r7, #12]
 800a144:	60b9      	str	r1, [r7, #8]
 800a146:	4613      	mov	r3, r2
 800a148:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a14e:	68bb      	ldr	r3, [r7, #8]
 800a150:	781b      	ldrb	r3, [r3, #0]
 800a152:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	785b      	ldrb	r3, [r3, #1]
 800a158:	2b01      	cmp	r3, #1
 800a15a:	f040 815c 	bne.w	800a416 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	695b      	ldr	r3, [r3, #20]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d132      	bne.n	800a1cc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a166:	69bb      	ldr	r3, [r7, #24]
 800a168:	015a      	lsls	r2, r3, #5
 800a16a:	69fb      	ldr	r3, [r7, #28]
 800a16c:	4413      	add	r3, r2
 800a16e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a172:	691b      	ldr	r3, [r3, #16]
 800a174:	69ba      	ldr	r2, [r7, #24]
 800a176:	0151      	lsls	r1, r2, #5
 800a178:	69fa      	ldr	r2, [r7, #28]
 800a17a:	440a      	add	r2, r1
 800a17c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a180:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a184:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a188:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a18a:	69bb      	ldr	r3, [r7, #24]
 800a18c:	015a      	lsls	r2, r3, #5
 800a18e:	69fb      	ldr	r3, [r7, #28]
 800a190:	4413      	add	r3, r2
 800a192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a196:	691b      	ldr	r3, [r3, #16]
 800a198:	69ba      	ldr	r2, [r7, #24]
 800a19a:	0151      	lsls	r1, r2, #5
 800a19c:	69fa      	ldr	r2, [r7, #28]
 800a19e:	440a      	add	r2, r1
 800a1a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a1a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a1aa:	69bb      	ldr	r3, [r7, #24]
 800a1ac:	015a      	lsls	r2, r3, #5
 800a1ae:	69fb      	ldr	r3, [r7, #28]
 800a1b0:	4413      	add	r3, r2
 800a1b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1b6:	691b      	ldr	r3, [r3, #16]
 800a1b8:	69ba      	ldr	r2, [r7, #24]
 800a1ba:	0151      	lsls	r1, r2, #5
 800a1bc:	69fa      	ldr	r2, [r7, #28]
 800a1be:	440a      	add	r2, r1
 800a1c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1c4:	0cdb      	lsrs	r3, r3, #19
 800a1c6:	04db      	lsls	r3, r3, #19
 800a1c8:	6113      	str	r3, [r2, #16]
 800a1ca:	e074      	b.n	800a2b6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a1cc:	69bb      	ldr	r3, [r7, #24]
 800a1ce:	015a      	lsls	r2, r3, #5
 800a1d0:	69fb      	ldr	r3, [r7, #28]
 800a1d2:	4413      	add	r3, r2
 800a1d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1d8:	691b      	ldr	r3, [r3, #16]
 800a1da:	69ba      	ldr	r2, [r7, #24]
 800a1dc:	0151      	lsls	r1, r2, #5
 800a1de:	69fa      	ldr	r2, [r7, #28]
 800a1e0:	440a      	add	r2, r1
 800a1e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1e6:	0cdb      	lsrs	r3, r3, #19
 800a1e8:	04db      	lsls	r3, r3, #19
 800a1ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a1ec:	69bb      	ldr	r3, [r7, #24]
 800a1ee:	015a      	lsls	r2, r3, #5
 800a1f0:	69fb      	ldr	r3, [r7, #28]
 800a1f2:	4413      	add	r3, r2
 800a1f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1f8:	691b      	ldr	r3, [r3, #16]
 800a1fa:	69ba      	ldr	r2, [r7, #24]
 800a1fc:	0151      	lsls	r1, r2, #5
 800a1fe:	69fa      	ldr	r2, [r7, #28]
 800a200:	440a      	add	r2, r1
 800a202:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a206:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a20a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a20e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a210:	69bb      	ldr	r3, [r7, #24]
 800a212:	015a      	lsls	r2, r3, #5
 800a214:	69fb      	ldr	r3, [r7, #28]
 800a216:	4413      	add	r3, r2
 800a218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a21c:	691a      	ldr	r2, [r3, #16]
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	6959      	ldr	r1, [r3, #20]
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	689b      	ldr	r3, [r3, #8]
 800a226:	440b      	add	r3, r1
 800a228:	1e59      	subs	r1, r3, #1
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	689b      	ldr	r3, [r3, #8]
 800a22e:	fbb1 f3f3 	udiv	r3, r1, r3
 800a232:	04d9      	lsls	r1, r3, #19
 800a234:	4b9d      	ldr	r3, [pc, #628]	; (800a4ac <USB_EPStartXfer+0x370>)
 800a236:	400b      	ands	r3, r1
 800a238:	69b9      	ldr	r1, [r7, #24]
 800a23a:	0148      	lsls	r0, r1, #5
 800a23c:	69f9      	ldr	r1, [r7, #28]
 800a23e:	4401      	add	r1, r0
 800a240:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a244:	4313      	orrs	r3, r2
 800a246:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a248:	69bb      	ldr	r3, [r7, #24]
 800a24a:	015a      	lsls	r2, r3, #5
 800a24c:	69fb      	ldr	r3, [r7, #28]
 800a24e:	4413      	add	r3, r2
 800a250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a254:	691a      	ldr	r2, [r3, #16]
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	695b      	ldr	r3, [r3, #20]
 800a25a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a25e:	69b9      	ldr	r1, [r7, #24]
 800a260:	0148      	lsls	r0, r1, #5
 800a262:	69f9      	ldr	r1, [r7, #28]
 800a264:	4401      	add	r1, r0
 800a266:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a26a:	4313      	orrs	r3, r2
 800a26c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	78db      	ldrb	r3, [r3, #3]
 800a272:	2b01      	cmp	r3, #1
 800a274:	d11f      	bne.n	800a2b6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a276:	69bb      	ldr	r3, [r7, #24]
 800a278:	015a      	lsls	r2, r3, #5
 800a27a:	69fb      	ldr	r3, [r7, #28]
 800a27c:	4413      	add	r3, r2
 800a27e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a282:	691b      	ldr	r3, [r3, #16]
 800a284:	69ba      	ldr	r2, [r7, #24]
 800a286:	0151      	lsls	r1, r2, #5
 800a288:	69fa      	ldr	r2, [r7, #28]
 800a28a:	440a      	add	r2, r1
 800a28c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a290:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a294:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a296:	69bb      	ldr	r3, [r7, #24]
 800a298:	015a      	lsls	r2, r3, #5
 800a29a:	69fb      	ldr	r3, [r7, #28]
 800a29c:	4413      	add	r3, r2
 800a29e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2a2:	691b      	ldr	r3, [r3, #16]
 800a2a4:	69ba      	ldr	r2, [r7, #24]
 800a2a6:	0151      	lsls	r1, r2, #5
 800a2a8:	69fa      	ldr	r2, [r7, #28]
 800a2aa:	440a      	add	r2, r1
 800a2ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a2b4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a2b6:	79fb      	ldrb	r3, [r7, #7]
 800a2b8:	2b01      	cmp	r3, #1
 800a2ba:	d14b      	bne.n	800a354 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	691b      	ldr	r3, [r3, #16]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d009      	beq.n	800a2d8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a2c4:	69bb      	ldr	r3, [r7, #24]
 800a2c6:	015a      	lsls	r2, r3, #5
 800a2c8:	69fb      	ldr	r3, [r7, #28]
 800a2ca:	4413      	add	r3, r2
 800a2cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2d0:	461a      	mov	r2, r3
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	691b      	ldr	r3, [r3, #16]
 800a2d6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	78db      	ldrb	r3, [r3, #3]
 800a2dc:	2b01      	cmp	r3, #1
 800a2de:	d128      	bne.n	800a332 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a2e0:	69fb      	ldr	r3, [r7, #28]
 800a2e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2e6:	689b      	ldr	r3, [r3, #8]
 800a2e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d110      	bne.n	800a312 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a2f0:	69bb      	ldr	r3, [r7, #24]
 800a2f2:	015a      	lsls	r2, r3, #5
 800a2f4:	69fb      	ldr	r3, [r7, #28]
 800a2f6:	4413      	add	r3, r2
 800a2f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	69ba      	ldr	r2, [r7, #24]
 800a300:	0151      	lsls	r1, r2, #5
 800a302:	69fa      	ldr	r2, [r7, #28]
 800a304:	440a      	add	r2, r1
 800a306:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a30a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a30e:	6013      	str	r3, [r2, #0]
 800a310:	e00f      	b.n	800a332 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a312:	69bb      	ldr	r3, [r7, #24]
 800a314:	015a      	lsls	r2, r3, #5
 800a316:	69fb      	ldr	r3, [r7, #28]
 800a318:	4413      	add	r3, r2
 800a31a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	69ba      	ldr	r2, [r7, #24]
 800a322:	0151      	lsls	r1, r2, #5
 800a324:	69fa      	ldr	r2, [r7, #28]
 800a326:	440a      	add	r2, r1
 800a328:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a32c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a330:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a332:	69bb      	ldr	r3, [r7, #24]
 800a334:	015a      	lsls	r2, r3, #5
 800a336:	69fb      	ldr	r3, [r7, #28]
 800a338:	4413      	add	r3, r2
 800a33a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	69ba      	ldr	r2, [r7, #24]
 800a342:	0151      	lsls	r1, r2, #5
 800a344:	69fa      	ldr	r2, [r7, #28]
 800a346:	440a      	add	r2, r1
 800a348:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a34c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a350:	6013      	str	r3, [r2, #0]
 800a352:	e12f      	b.n	800a5b4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a354:	69bb      	ldr	r3, [r7, #24]
 800a356:	015a      	lsls	r2, r3, #5
 800a358:	69fb      	ldr	r3, [r7, #28]
 800a35a:	4413      	add	r3, r2
 800a35c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	69ba      	ldr	r2, [r7, #24]
 800a364:	0151      	lsls	r1, r2, #5
 800a366:	69fa      	ldr	r2, [r7, #28]
 800a368:	440a      	add	r2, r1
 800a36a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a36e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a372:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a374:	68bb      	ldr	r3, [r7, #8]
 800a376:	78db      	ldrb	r3, [r3, #3]
 800a378:	2b01      	cmp	r3, #1
 800a37a:	d015      	beq.n	800a3a8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	695b      	ldr	r3, [r3, #20]
 800a380:	2b00      	cmp	r3, #0
 800a382:	f000 8117 	beq.w	800a5b4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a386:	69fb      	ldr	r3, [r7, #28]
 800a388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a38c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	781b      	ldrb	r3, [r3, #0]
 800a392:	f003 030f 	and.w	r3, r3, #15
 800a396:	2101      	movs	r1, #1
 800a398:	fa01 f303 	lsl.w	r3, r1, r3
 800a39c:	69f9      	ldr	r1, [r7, #28]
 800a39e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a3a2:	4313      	orrs	r3, r2
 800a3a4:	634b      	str	r3, [r1, #52]	; 0x34
 800a3a6:	e105      	b.n	800a5b4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a3a8:	69fb      	ldr	r3, [r7, #28]
 800a3aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3ae:	689b      	ldr	r3, [r3, #8]
 800a3b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d110      	bne.n	800a3da <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a3b8:	69bb      	ldr	r3, [r7, #24]
 800a3ba:	015a      	lsls	r2, r3, #5
 800a3bc:	69fb      	ldr	r3, [r7, #28]
 800a3be:	4413      	add	r3, r2
 800a3c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	69ba      	ldr	r2, [r7, #24]
 800a3c8:	0151      	lsls	r1, r2, #5
 800a3ca:	69fa      	ldr	r2, [r7, #28]
 800a3cc:	440a      	add	r2, r1
 800a3ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a3d6:	6013      	str	r3, [r2, #0]
 800a3d8:	e00f      	b.n	800a3fa <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a3da:	69bb      	ldr	r3, [r7, #24]
 800a3dc:	015a      	lsls	r2, r3, #5
 800a3de:	69fb      	ldr	r3, [r7, #28]
 800a3e0:	4413      	add	r3, r2
 800a3e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	69ba      	ldr	r2, [r7, #24]
 800a3ea:	0151      	lsls	r1, r2, #5
 800a3ec:	69fa      	ldr	r2, [r7, #28]
 800a3ee:	440a      	add	r2, r1
 800a3f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a3f8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	68d9      	ldr	r1, [r3, #12]
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	781a      	ldrb	r2, [r3, #0]
 800a402:	68bb      	ldr	r3, [r7, #8]
 800a404:	695b      	ldr	r3, [r3, #20]
 800a406:	b298      	uxth	r0, r3
 800a408:	79fb      	ldrb	r3, [r7, #7]
 800a40a:	9300      	str	r3, [sp, #0]
 800a40c:	4603      	mov	r3, r0
 800a40e:	68f8      	ldr	r0, [r7, #12]
 800a410:	f000 fa2b 	bl	800a86a <USB_WritePacket>
 800a414:	e0ce      	b.n	800a5b4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a416:	69bb      	ldr	r3, [r7, #24]
 800a418:	015a      	lsls	r2, r3, #5
 800a41a:	69fb      	ldr	r3, [r7, #28]
 800a41c:	4413      	add	r3, r2
 800a41e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a422:	691b      	ldr	r3, [r3, #16]
 800a424:	69ba      	ldr	r2, [r7, #24]
 800a426:	0151      	lsls	r1, r2, #5
 800a428:	69fa      	ldr	r2, [r7, #28]
 800a42a:	440a      	add	r2, r1
 800a42c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a430:	0cdb      	lsrs	r3, r3, #19
 800a432:	04db      	lsls	r3, r3, #19
 800a434:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a436:	69bb      	ldr	r3, [r7, #24]
 800a438:	015a      	lsls	r2, r3, #5
 800a43a:	69fb      	ldr	r3, [r7, #28]
 800a43c:	4413      	add	r3, r2
 800a43e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a442:	691b      	ldr	r3, [r3, #16]
 800a444:	69ba      	ldr	r2, [r7, #24]
 800a446:	0151      	lsls	r1, r2, #5
 800a448:	69fa      	ldr	r2, [r7, #28]
 800a44a:	440a      	add	r2, r1
 800a44c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a450:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a454:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a458:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	695b      	ldr	r3, [r3, #20]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d126      	bne.n	800a4b0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a462:	69bb      	ldr	r3, [r7, #24]
 800a464:	015a      	lsls	r2, r3, #5
 800a466:	69fb      	ldr	r3, [r7, #28]
 800a468:	4413      	add	r3, r2
 800a46a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a46e:	691a      	ldr	r2, [r3, #16]
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	689b      	ldr	r3, [r3, #8]
 800a474:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a478:	69b9      	ldr	r1, [r7, #24]
 800a47a:	0148      	lsls	r0, r1, #5
 800a47c:	69f9      	ldr	r1, [r7, #28]
 800a47e:	4401      	add	r1, r0
 800a480:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a484:	4313      	orrs	r3, r2
 800a486:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a488:	69bb      	ldr	r3, [r7, #24]
 800a48a:	015a      	lsls	r2, r3, #5
 800a48c:	69fb      	ldr	r3, [r7, #28]
 800a48e:	4413      	add	r3, r2
 800a490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a494:	691b      	ldr	r3, [r3, #16]
 800a496:	69ba      	ldr	r2, [r7, #24]
 800a498:	0151      	lsls	r1, r2, #5
 800a49a:	69fa      	ldr	r2, [r7, #28]
 800a49c:	440a      	add	r2, r1
 800a49e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a4a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a4a6:	6113      	str	r3, [r2, #16]
 800a4a8:	e036      	b.n	800a518 <USB_EPStartXfer+0x3dc>
 800a4aa:	bf00      	nop
 800a4ac:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	695a      	ldr	r2, [r3, #20]
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	689b      	ldr	r3, [r3, #8]
 800a4b8:	4413      	add	r3, r2
 800a4ba:	1e5a      	subs	r2, r3, #1
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	689b      	ldr	r3, [r3, #8]
 800a4c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4c4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a4c6:	69bb      	ldr	r3, [r7, #24]
 800a4c8:	015a      	lsls	r2, r3, #5
 800a4ca:	69fb      	ldr	r3, [r7, #28]
 800a4cc:	4413      	add	r3, r2
 800a4ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4d2:	691a      	ldr	r2, [r3, #16]
 800a4d4:	8afb      	ldrh	r3, [r7, #22]
 800a4d6:	04d9      	lsls	r1, r3, #19
 800a4d8:	4b39      	ldr	r3, [pc, #228]	; (800a5c0 <USB_EPStartXfer+0x484>)
 800a4da:	400b      	ands	r3, r1
 800a4dc:	69b9      	ldr	r1, [r7, #24]
 800a4de:	0148      	lsls	r0, r1, #5
 800a4e0:	69f9      	ldr	r1, [r7, #28]
 800a4e2:	4401      	add	r1, r0
 800a4e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a4e8:	4313      	orrs	r3, r2
 800a4ea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800a4ec:	69bb      	ldr	r3, [r7, #24]
 800a4ee:	015a      	lsls	r2, r3, #5
 800a4f0:	69fb      	ldr	r3, [r7, #28]
 800a4f2:	4413      	add	r3, r2
 800a4f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4f8:	691a      	ldr	r2, [r3, #16]
 800a4fa:	68bb      	ldr	r3, [r7, #8]
 800a4fc:	689b      	ldr	r3, [r3, #8]
 800a4fe:	8af9      	ldrh	r1, [r7, #22]
 800a500:	fb01 f303 	mul.w	r3, r1, r3
 800a504:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a508:	69b9      	ldr	r1, [r7, #24]
 800a50a:	0148      	lsls	r0, r1, #5
 800a50c:	69f9      	ldr	r1, [r7, #28]
 800a50e:	4401      	add	r1, r0
 800a510:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a514:	4313      	orrs	r3, r2
 800a516:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a518:	79fb      	ldrb	r3, [r7, #7]
 800a51a:	2b01      	cmp	r3, #1
 800a51c:	d10d      	bne.n	800a53a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	68db      	ldr	r3, [r3, #12]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d009      	beq.n	800a53a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	68d9      	ldr	r1, [r3, #12]
 800a52a:	69bb      	ldr	r3, [r7, #24]
 800a52c:	015a      	lsls	r2, r3, #5
 800a52e:	69fb      	ldr	r3, [r7, #28]
 800a530:	4413      	add	r3, r2
 800a532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a536:	460a      	mov	r2, r1
 800a538:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	78db      	ldrb	r3, [r3, #3]
 800a53e:	2b01      	cmp	r3, #1
 800a540:	d128      	bne.n	800a594 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a542:	69fb      	ldr	r3, [r7, #28]
 800a544:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a548:	689b      	ldr	r3, [r3, #8]
 800a54a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d110      	bne.n	800a574 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a552:	69bb      	ldr	r3, [r7, #24]
 800a554:	015a      	lsls	r2, r3, #5
 800a556:	69fb      	ldr	r3, [r7, #28]
 800a558:	4413      	add	r3, r2
 800a55a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	69ba      	ldr	r2, [r7, #24]
 800a562:	0151      	lsls	r1, r2, #5
 800a564:	69fa      	ldr	r2, [r7, #28]
 800a566:	440a      	add	r2, r1
 800a568:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a56c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a570:	6013      	str	r3, [r2, #0]
 800a572:	e00f      	b.n	800a594 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a574:	69bb      	ldr	r3, [r7, #24]
 800a576:	015a      	lsls	r2, r3, #5
 800a578:	69fb      	ldr	r3, [r7, #28]
 800a57a:	4413      	add	r3, r2
 800a57c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	69ba      	ldr	r2, [r7, #24]
 800a584:	0151      	lsls	r1, r2, #5
 800a586:	69fa      	ldr	r2, [r7, #28]
 800a588:	440a      	add	r2, r1
 800a58a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a58e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a592:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a594:	69bb      	ldr	r3, [r7, #24]
 800a596:	015a      	lsls	r2, r3, #5
 800a598:	69fb      	ldr	r3, [r7, #28]
 800a59a:	4413      	add	r3, r2
 800a59c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	69ba      	ldr	r2, [r7, #24]
 800a5a4:	0151      	lsls	r1, r2, #5
 800a5a6:	69fa      	ldr	r2, [r7, #28]
 800a5a8:	440a      	add	r2, r1
 800a5aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a5ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a5b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a5b4:	2300      	movs	r3, #0
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	3720      	adds	r7, #32
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}
 800a5be:	bf00      	nop
 800a5c0:	1ff80000 	.word	0x1ff80000

0800a5c4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	b087      	sub	sp, #28
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	60f8      	str	r0, [r7, #12]
 800a5cc:	60b9      	str	r1, [r7, #8]
 800a5ce:	4613      	mov	r3, r2
 800a5d0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	781b      	ldrb	r3, [r3, #0]
 800a5da:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	785b      	ldrb	r3, [r3, #1]
 800a5e0:	2b01      	cmp	r3, #1
 800a5e2:	f040 80cd 	bne.w	800a780 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	695b      	ldr	r3, [r3, #20]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d132      	bne.n	800a654 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a5ee:	693b      	ldr	r3, [r7, #16]
 800a5f0:	015a      	lsls	r2, r3, #5
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	4413      	add	r3, r2
 800a5f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5fa:	691b      	ldr	r3, [r3, #16]
 800a5fc:	693a      	ldr	r2, [r7, #16]
 800a5fe:	0151      	lsls	r1, r2, #5
 800a600:	697a      	ldr	r2, [r7, #20]
 800a602:	440a      	add	r2, r1
 800a604:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a608:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a60c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a610:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a612:	693b      	ldr	r3, [r7, #16]
 800a614:	015a      	lsls	r2, r3, #5
 800a616:	697b      	ldr	r3, [r7, #20]
 800a618:	4413      	add	r3, r2
 800a61a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a61e:	691b      	ldr	r3, [r3, #16]
 800a620:	693a      	ldr	r2, [r7, #16]
 800a622:	0151      	lsls	r1, r2, #5
 800a624:	697a      	ldr	r2, [r7, #20]
 800a626:	440a      	add	r2, r1
 800a628:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a62c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a630:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a632:	693b      	ldr	r3, [r7, #16]
 800a634:	015a      	lsls	r2, r3, #5
 800a636:	697b      	ldr	r3, [r7, #20]
 800a638:	4413      	add	r3, r2
 800a63a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a63e:	691b      	ldr	r3, [r3, #16]
 800a640:	693a      	ldr	r2, [r7, #16]
 800a642:	0151      	lsls	r1, r2, #5
 800a644:	697a      	ldr	r2, [r7, #20]
 800a646:	440a      	add	r2, r1
 800a648:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a64c:	0cdb      	lsrs	r3, r3, #19
 800a64e:	04db      	lsls	r3, r3, #19
 800a650:	6113      	str	r3, [r2, #16]
 800a652:	e04e      	b.n	800a6f2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a654:	693b      	ldr	r3, [r7, #16]
 800a656:	015a      	lsls	r2, r3, #5
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	4413      	add	r3, r2
 800a65c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a660:	691b      	ldr	r3, [r3, #16]
 800a662:	693a      	ldr	r2, [r7, #16]
 800a664:	0151      	lsls	r1, r2, #5
 800a666:	697a      	ldr	r2, [r7, #20]
 800a668:	440a      	add	r2, r1
 800a66a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a66e:	0cdb      	lsrs	r3, r3, #19
 800a670:	04db      	lsls	r3, r3, #19
 800a672:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a674:	693b      	ldr	r3, [r7, #16]
 800a676:	015a      	lsls	r2, r3, #5
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	4413      	add	r3, r2
 800a67c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a680:	691b      	ldr	r3, [r3, #16]
 800a682:	693a      	ldr	r2, [r7, #16]
 800a684:	0151      	lsls	r1, r2, #5
 800a686:	697a      	ldr	r2, [r7, #20]
 800a688:	440a      	add	r2, r1
 800a68a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a68e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a692:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a696:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	695a      	ldr	r2, [r3, #20]
 800a69c:	68bb      	ldr	r3, [r7, #8]
 800a69e:	689b      	ldr	r3, [r3, #8]
 800a6a0:	429a      	cmp	r2, r3
 800a6a2:	d903      	bls.n	800a6ac <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	689a      	ldr	r2, [r3, #8]
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a6ac:	693b      	ldr	r3, [r7, #16]
 800a6ae:	015a      	lsls	r2, r3, #5
 800a6b0:	697b      	ldr	r3, [r7, #20]
 800a6b2:	4413      	add	r3, r2
 800a6b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6b8:	691b      	ldr	r3, [r3, #16]
 800a6ba:	693a      	ldr	r2, [r7, #16]
 800a6bc:	0151      	lsls	r1, r2, #5
 800a6be:	697a      	ldr	r2, [r7, #20]
 800a6c0:	440a      	add	r2, r1
 800a6c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a6ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a6cc:	693b      	ldr	r3, [r7, #16]
 800a6ce:	015a      	lsls	r2, r3, #5
 800a6d0:	697b      	ldr	r3, [r7, #20]
 800a6d2:	4413      	add	r3, r2
 800a6d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6d8:	691a      	ldr	r2, [r3, #16]
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	695b      	ldr	r3, [r3, #20]
 800a6de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a6e2:	6939      	ldr	r1, [r7, #16]
 800a6e4:	0148      	lsls	r0, r1, #5
 800a6e6:	6979      	ldr	r1, [r7, #20]
 800a6e8:	4401      	add	r1, r0
 800a6ea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a6ee:	4313      	orrs	r3, r2
 800a6f0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a6f2:	79fb      	ldrb	r3, [r7, #7]
 800a6f4:	2b01      	cmp	r3, #1
 800a6f6:	d11e      	bne.n	800a736 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	691b      	ldr	r3, [r3, #16]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d009      	beq.n	800a714 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a700:	693b      	ldr	r3, [r7, #16]
 800a702:	015a      	lsls	r2, r3, #5
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	4413      	add	r3, r2
 800a708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a70c:	461a      	mov	r2, r3
 800a70e:	68bb      	ldr	r3, [r7, #8]
 800a710:	691b      	ldr	r3, [r3, #16]
 800a712:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	015a      	lsls	r2, r3, #5
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	4413      	add	r3, r2
 800a71c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	693a      	ldr	r2, [r7, #16]
 800a724:	0151      	lsls	r1, r2, #5
 800a726:	697a      	ldr	r2, [r7, #20]
 800a728:	440a      	add	r2, r1
 800a72a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a72e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a732:	6013      	str	r3, [r2, #0]
 800a734:	e092      	b.n	800a85c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a736:	693b      	ldr	r3, [r7, #16]
 800a738:	015a      	lsls	r2, r3, #5
 800a73a:	697b      	ldr	r3, [r7, #20]
 800a73c:	4413      	add	r3, r2
 800a73e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	693a      	ldr	r2, [r7, #16]
 800a746:	0151      	lsls	r1, r2, #5
 800a748:	697a      	ldr	r2, [r7, #20]
 800a74a:	440a      	add	r2, r1
 800a74c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a750:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a754:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	695b      	ldr	r3, [r3, #20]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d07e      	beq.n	800a85c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a75e:	697b      	ldr	r3, [r7, #20]
 800a760:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a764:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	781b      	ldrb	r3, [r3, #0]
 800a76a:	f003 030f 	and.w	r3, r3, #15
 800a76e:	2101      	movs	r1, #1
 800a770:	fa01 f303 	lsl.w	r3, r1, r3
 800a774:	6979      	ldr	r1, [r7, #20]
 800a776:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a77a:	4313      	orrs	r3, r2
 800a77c:	634b      	str	r3, [r1, #52]	; 0x34
 800a77e:	e06d      	b.n	800a85c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a780:	693b      	ldr	r3, [r7, #16]
 800a782:	015a      	lsls	r2, r3, #5
 800a784:	697b      	ldr	r3, [r7, #20]
 800a786:	4413      	add	r3, r2
 800a788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a78c:	691b      	ldr	r3, [r3, #16]
 800a78e:	693a      	ldr	r2, [r7, #16]
 800a790:	0151      	lsls	r1, r2, #5
 800a792:	697a      	ldr	r2, [r7, #20]
 800a794:	440a      	add	r2, r1
 800a796:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a79a:	0cdb      	lsrs	r3, r3, #19
 800a79c:	04db      	lsls	r3, r3, #19
 800a79e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a7a0:	693b      	ldr	r3, [r7, #16]
 800a7a2:	015a      	lsls	r2, r3, #5
 800a7a4:	697b      	ldr	r3, [r7, #20]
 800a7a6:	4413      	add	r3, r2
 800a7a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7ac:	691b      	ldr	r3, [r3, #16]
 800a7ae:	693a      	ldr	r2, [r7, #16]
 800a7b0:	0151      	lsls	r1, r2, #5
 800a7b2:	697a      	ldr	r2, [r7, #20]
 800a7b4:	440a      	add	r2, r1
 800a7b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7ba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a7be:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a7c2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	695b      	ldr	r3, [r3, #20]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d003      	beq.n	800a7d4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	689a      	ldr	r2, [r3, #8]
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a7d4:	693b      	ldr	r3, [r7, #16]
 800a7d6:	015a      	lsls	r2, r3, #5
 800a7d8:	697b      	ldr	r3, [r7, #20]
 800a7da:	4413      	add	r3, r2
 800a7dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7e0:	691b      	ldr	r3, [r3, #16]
 800a7e2:	693a      	ldr	r2, [r7, #16]
 800a7e4:	0151      	lsls	r1, r2, #5
 800a7e6:	697a      	ldr	r2, [r7, #20]
 800a7e8:	440a      	add	r2, r1
 800a7ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a7f2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800a7f4:	693b      	ldr	r3, [r7, #16]
 800a7f6:	015a      	lsls	r2, r3, #5
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	4413      	add	r3, r2
 800a7fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a800:	691a      	ldr	r2, [r3, #16]
 800a802:	68bb      	ldr	r3, [r7, #8]
 800a804:	689b      	ldr	r3, [r3, #8]
 800a806:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a80a:	6939      	ldr	r1, [r7, #16]
 800a80c:	0148      	lsls	r0, r1, #5
 800a80e:	6979      	ldr	r1, [r7, #20]
 800a810:	4401      	add	r1, r0
 800a812:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a816:	4313      	orrs	r3, r2
 800a818:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a81a:	79fb      	ldrb	r3, [r7, #7]
 800a81c:	2b01      	cmp	r3, #1
 800a81e:	d10d      	bne.n	800a83c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a820:	68bb      	ldr	r3, [r7, #8]
 800a822:	68db      	ldr	r3, [r3, #12]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d009      	beq.n	800a83c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a828:	68bb      	ldr	r3, [r7, #8]
 800a82a:	68d9      	ldr	r1, [r3, #12]
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	015a      	lsls	r2, r3, #5
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	4413      	add	r3, r2
 800a834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a838:	460a      	mov	r2, r1
 800a83a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	015a      	lsls	r2, r3, #5
 800a840:	697b      	ldr	r3, [r7, #20]
 800a842:	4413      	add	r3, r2
 800a844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	693a      	ldr	r2, [r7, #16]
 800a84c:	0151      	lsls	r1, r2, #5
 800a84e:	697a      	ldr	r2, [r7, #20]
 800a850:	440a      	add	r2, r1
 800a852:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a856:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a85a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a85c:	2300      	movs	r3, #0
}
 800a85e:	4618      	mov	r0, r3
 800a860:	371c      	adds	r7, #28
 800a862:	46bd      	mov	sp, r7
 800a864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a868:	4770      	bx	lr

0800a86a <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a86a:	b480      	push	{r7}
 800a86c:	b089      	sub	sp, #36	; 0x24
 800a86e:	af00      	add	r7, sp, #0
 800a870:	60f8      	str	r0, [r7, #12]
 800a872:	60b9      	str	r1, [r7, #8]
 800a874:	4611      	mov	r1, r2
 800a876:	461a      	mov	r2, r3
 800a878:	460b      	mov	r3, r1
 800a87a:	71fb      	strb	r3, [r7, #7]
 800a87c:	4613      	mov	r3, r2
 800a87e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800a888:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d11a      	bne.n	800a8c6 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a890:	88bb      	ldrh	r3, [r7, #4]
 800a892:	3303      	adds	r3, #3
 800a894:	089b      	lsrs	r3, r3, #2
 800a896:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a898:	2300      	movs	r3, #0
 800a89a:	61bb      	str	r3, [r7, #24]
 800a89c:	e00f      	b.n	800a8be <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a89e:	79fb      	ldrb	r3, [r7, #7]
 800a8a0:	031a      	lsls	r2, r3, #12
 800a8a2:	697b      	ldr	r3, [r7, #20]
 800a8a4:	4413      	add	r3, r2
 800a8a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8aa:	461a      	mov	r2, r3
 800a8ac:	69fb      	ldr	r3, [r7, #28]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a8b2:	69fb      	ldr	r3, [r7, #28]
 800a8b4:	3304      	adds	r3, #4
 800a8b6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a8b8:	69bb      	ldr	r3, [r7, #24]
 800a8ba:	3301      	adds	r3, #1
 800a8bc:	61bb      	str	r3, [r7, #24]
 800a8be:	69ba      	ldr	r2, [r7, #24]
 800a8c0:	693b      	ldr	r3, [r7, #16]
 800a8c2:	429a      	cmp	r2, r3
 800a8c4:	d3eb      	bcc.n	800a89e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a8c6:	2300      	movs	r3, #0
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	3724      	adds	r7, #36	; 0x24
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d2:	4770      	bx	lr

0800a8d4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b089      	sub	sp, #36	; 0x24
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	60f8      	str	r0, [r7, #12]
 800a8dc:	60b9      	str	r1, [r7, #8]
 800a8de:	4613      	mov	r3, r2
 800a8e0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800a8e6:	68bb      	ldr	r3, [r7, #8]
 800a8e8:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800a8ea:	88fb      	ldrh	r3, [r7, #6]
 800a8ec:	3303      	adds	r3, #3
 800a8ee:	089b      	lsrs	r3, r3, #2
 800a8f0:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	61bb      	str	r3, [r7, #24]
 800a8f6:	e00b      	b.n	800a910 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a8f8:	697b      	ldr	r3, [r7, #20]
 800a8fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8fe:	681a      	ldr	r2, [r3, #0]
 800a900:	69fb      	ldr	r3, [r7, #28]
 800a902:	601a      	str	r2, [r3, #0]
    pDest++;
 800a904:	69fb      	ldr	r3, [r7, #28]
 800a906:	3304      	adds	r3, #4
 800a908:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800a90a:	69bb      	ldr	r3, [r7, #24]
 800a90c:	3301      	adds	r3, #1
 800a90e:	61bb      	str	r3, [r7, #24]
 800a910:	69ba      	ldr	r2, [r7, #24]
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	429a      	cmp	r2, r3
 800a916:	d3ef      	bcc.n	800a8f8 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800a918:	69fb      	ldr	r3, [r7, #28]
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	3724      	adds	r7, #36	; 0x24
 800a91e:	46bd      	mov	sp, r7
 800a920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a924:	4770      	bx	lr

0800a926 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a926:	b480      	push	{r7}
 800a928:	b085      	sub	sp, #20
 800a92a:	af00      	add	r7, sp, #0
 800a92c:	6078      	str	r0, [r7, #4]
 800a92e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	781b      	ldrb	r3, [r3, #0]
 800a938:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	785b      	ldrb	r3, [r3, #1]
 800a93e:	2b01      	cmp	r3, #1
 800a940:	d12c      	bne.n	800a99c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	015a      	lsls	r2, r3, #5
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	4413      	add	r3, r2
 800a94a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	2b00      	cmp	r3, #0
 800a952:	db12      	blt.n	800a97a <USB_EPSetStall+0x54>
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d00f      	beq.n	800a97a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a95a:	68bb      	ldr	r3, [r7, #8]
 800a95c:	015a      	lsls	r2, r3, #5
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	4413      	add	r3, r2
 800a962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	68ba      	ldr	r2, [r7, #8]
 800a96a:	0151      	lsls	r1, r2, #5
 800a96c:	68fa      	ldr	r2, [r7, #12]
 800a96e:	440a      	add	r2, r1
 800a970:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a974:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a978:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	015a      	lsls	r2, r3, #5
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	4413      	add	r3, r2
 800a982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	68ba      	ldr	r2, [r7, #8]
 800a98a:	0151      	lsls	r1, r2, #5
 800a98c:	68fa      	ldr	r2, [r7, #12]
 800a98e:	440a      	add	r2, r1
 800a990:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a994:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a998:	6013      	str	r3, [r2, #0]
 800a99a:	e02b      	b.n	800a9f4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	015a      	lsls	r2, r3, #5
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	4413      	add	r3, r2
 800a9a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	db12      	blt.n	800a9d4 <USB_EPSetStall+0xae>
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d00f      	beq.n	800a9d4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	015a      	lsls	r2, r3, #5
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	4413      	add	r3, r2
 800a9bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	68ba      	ldr	r2, [r7, #8]
 800a9c4:	0151      	lsls	r1, r2, #5
 800a9c6:	68fa      	ldr	r2, [r7, #12]
 800a9c8:	440a      	add	r2, r1
 800a9ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a9d2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	015a      	lsls	r2, r3, #5
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	4413      	add	r3, r2
 800a9dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	68ba      	ldr	r2, [r7, #8]
 800a9e4:	0151      	lsls	r1, r2, #5
 800a9e6:	68fa      	ldr	r2, [r7, #12]
 800a9e8:	440a      	add	r2, r1
 800a9ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a9f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a9f4:	2300      	movs	r3, #0
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	3714      	adds	r7, #20
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa00:	4770      	bx	lr

0800aa02 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800aa02:	b480      	push	{r7}
 800aa04:	b085      	sub	sp, #20
 800aa06:	af00      	add	r7, sp, #0
 800aa08:	6078      	str	r0, [r7, #4]
 800aa0a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	781b      	ldrb	r3, [r3, #0]
 800aa14:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	785b      	ldrb	r3, [r3, #1]
 800aa1a:	2b01      	cmp	r3, #1
 800aa1c:	d128      	bne.n	800aa70 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	015a      	lsls	r2, r3, #5
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	4413      	add	r3, r2
 800aa26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	68ba      	ldr	r2, [r7, #8]
 800aa2e:	0151      	lsls	r1, r2, #5
 800aa30:	68fa      	ldr	r2, [r7, #12]
 800aa32:	440a      	add	r2, r1
 800aa34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa38:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800aa3c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	78db      	ldrb	r3, [r3, #3]
 800aa42:	2b03      	cmp	r3, #3
 800aa44:	d003      	beq.n	800aa4e <USB_EPClearStall+0x4c>
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	78db      	ldrb	r3, [r3, #3]
 800aa4a:	2b02      	cmp	r3, #2
 800aa4c:	d138      	bne.n	800aac0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	015a      	lsls	r2, r3, #5
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	4413      	add	r3, r2
 800aa56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	68ba      	ldr	r2, [r7, #8]
 800aa5e:	0151      	lsls	r1, r2, #5
 800aa60:	68fa      	ldr	r2, [r7, #12]
 800aa62:	440a      	add	r2, r1
 800aa64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa6c:	6013      	str	r3, [r2, #0]
 800aa6e:	e027      	b.n	800aac0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800aa70:	68bb      	ldr	r3, [r7, #8]
 800aa72:	015a      	lsls	r2, r3, #5
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	4413      	add	r3, r2
 800aa78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	68ba      	ldr	r2, [r7, #8]
 800aa80:	0151      	lsls	r1, r2, #5
 800aa82:	68fa      	ldr	r2, [r7, #12]
 800aa84:	440a      	add	r2, r1
 800aa86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa8a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800aa8e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	78db      	ldrb	r3, [r3, #3]
 800aa94:	2b03      	cmp	r3, #3
 800aa96:	d003      	beq.n	800aaa0 <USB_EPClearStall+0x9e>
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	78db      	ldrb	r3, [r3, #3]
 800aa9c:	2b02      	cmp	r3, #2
 800aa9e:	d10f      	bne.n	800aac0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	015a      	lsls	r2, r3, #5
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	4413      	add	r3, r2
 800aaa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	68ba      	ldr	r2, [r7, #8]
 800aab0:	0151      	lsls	r1, r2, #5
 800aab2:	68fa      	ldr	r2, [r7, #12]
 800aab4:	440a      	add	r2, r1
 800aab6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aaba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aabe:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800aac0:	2300      	movs	r3, #0
}
 800aac2:	4618      	mov	r0, r3
 800aac4:	3714      	adds	r7, #20
 800aac6:	46bd      	mov	sp, r7
 800aac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aacc:	4770      	bx	lr

0800aace <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800aace:	b480      	push	{r7}
 800aad0:	b085      	sub	sp, #20
 800aad2:	af00      	add	r7, sp, #0
 800aad4:	6078      	str	r0, [r7, #4]
 800aad6:	460b      	mov	r3, r1
 800aad8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	68fa      	ldr	r2, [r7, #12]
 800aae8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aaec:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800aaf0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aaf8:	681a      	ldr	r2, [r3, #0]
 800aafa:	78fb      	ldrb	r3, [r7, #3]
 800aafc:	011b      	lsls	r3, r3, #4
 800aafe:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800ab02:	68f9      	ldr	r1, [r7, #12]
 800ab04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ab08:	4313      	orrs	r3, r2
 800ab0a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ab0c:	2300      	movs	r3, #0
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3714      	adds	r7, #20
 800ab12:	46bd      	mov	sp, r7
 800ab14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab18:	4770      	bx	lr

0800ab1a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ab1a:	b580      	push	{r7, lr}
 800ab1c:	b084      	sub	sp, #16
 800ab1e:	af00      	add	r7, sp, #0
 800ab20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab2c:	685b      	ldr	r3, [r3, #4]
 800ab2e:	68fa      	ldr	r2, [r7, #12]
 800ab30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ab34:	f023 0302 	bic.w	r3, r3, #2
 800ab38:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800ab3a:	2003      	movs	r0, #3
 800ab3c:	f7f8 fa28 	bl	8002f90 <HAL_Delay>

  return HAL_OK;
 800ab40:	2300      	movs	r3, #0
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	3710      	adds	r7, #16
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}

0800ab4a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ab4a:	b580      	push	{r7, lr}
 800ab4c:	b084      	sub	sp, #16
 800ab4e:	af00      	add	r7, sp, #0
 800ab50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab5c:	685b      	ldr	r3, [r3, #4]
 800ab5e:	68fa      	ldr	r2, [r7, #12]
 800ab60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ab64:	f043 0302 	orr.w	r3, r3, #2
 800ab68:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800ab6a:	2003      	movs	r0, #3
 800ab6c:	f7f8 fa10 	bl	8002f90 <HAL_Delay>

  return HAL_OK;
 800ab70:	2300      	movs	r3, #0
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3710      	adds	r7, #16
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}

0800ab7a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ab7a:	b480      	push	{r7}
 800ab7c:	b085      	sub	sp, #20
 800ab7e:	af00      	add	r7, sp, #0
 800ab80:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	695b      	ldr	r3, [r3, #20]
 800ab86:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	699b      	ldr	r3, [r3, #24]
 800ab8c:	68fa      	ldr	r2, [r7, #12]
 800ab8e:	4013      	ands	r3, r2
 800ab90:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ab92:	68fb      	ldr	r3, [r7, #12]
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	3714      	adds	r7, #20
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9e:	4770      	bx	lr

0800aba0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800aba0:	b480      	push	{r7}
 800aba2:	b085      	sub	sp, #20
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abb2:	699b      	ldr	r3, [r3, #24]
 800abb4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abbc:	69db      	ldr	r3, [r3, #28]
 800abbe:	68ba      	ldr	r2, [r7, #8]
 800abc0:	4013      	ands	r3, r2
 800abc2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	0c1b      	lsrs	r3, r3, #16
}
 800abc8:	4618      	mov	r0, r3
 800abca:	3714      	adds	r7, #20
 800abcc:	46bd      	mov	sp, r7
 800abce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd2:	4770      	bx	lr

0800abd4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800abd4:	b480      	push	{r7}
 800abd6:	b085      	sub	sp, #20
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abe6:	699b      	ldr	r3, [r3, #24]
 800abe8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abf0:	69db      	ldr	r3, [r3, #28]
 800abf2:	68ba      	ldr	r2, [r7, #8]
 800abf4:	4013      	ands	r3, r2
 800abf6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	b29b      	uxth	r3, r3
}
 800abfc:	4618      	mov	r0, r3
 800abfe:	3714      	adds	r7, #20
 800ac00:	46bd      	mov	sp, r7
 800ac02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac06:	4770      	bx	lr

0800ac08 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b085      	sub	sp, #20
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
 800ac10:	460b      	mov	r3, r1
 800ac12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ac18:	78fb      	ldrb	r3, [r7, #3]
 800ac1a:	015a      	lsls	r2, r3, #5
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	4413      	add	r3, r2
 800ac20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac24:	689b      	ldr	r3, [r3, #8]
 800ac26:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac2e:	695b      	ldr	r3, [r3, #20]
 800ac30:	68ba      	ldr	r2, [r7, #8]
 800ac32:	4013      	ands	r3, r2
 800ac34:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ac36:	68bb      	ldr	r3, [r7, #8]
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	3714      	adds	r7, #20
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac42:	4770      	bx	lr

0800ac44 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ac44:	b480      	push	{r7}
 800ac46:	b087      	sub	sp, #28
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
 800ac4c:	460b      	mov	r3, r1
 800ac4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ac54:	697b      	ldr	r3, [r7, #20]
 800ac56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac5a:	691b      	ldr	r3, [r3, #16]
 800ac5c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ac5e:	697b      	ldr	r3, [r7, #20]
 800ac60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac66:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ac68:	78fb      	ldrb	r3, [r7, #3]
 800ac6a:	f003 030f 	and.w	r3, r3, #15
 800ac6e:	68fa      	ldr	r2, [r7, #12]
 800ac70:	fa22 f303 	lsr.w	r3, r2, r3
 800ac74:	01db      	lsls	r3, r3, #7
 800ac76:	b2db      	uxtb	r3, r3
 800ac78:	693a      	ldr	r2, [r7, #16]
 800ac7a:	4313      	orrs	r3, r2
 800ac7c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ac7e:	78fb      	ldrb	r3, [r7, #3]
 800ac80:	015a      	lsls	r2, r3, #5
 800ac82:	697b      	ldr	r3, [r7, #20]
 800ac84:	4413      	add	r3, r2
 800ac86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac8a:	689b      	ldr	r3, [r3, #8]
 800ac8c:	693a      	ldr	r2, [r7, #16]
 800ac8e:	4013      	ands	r3, r2
 800ac90:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ac92:	68bb      	ldr	r3, [r7, #8]
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	371c      	adds	r7, #28
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9e:	4770      	bx	lr

0800aca0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800aca0:	b480      	push	{r7}
 800aca2:	b083      	sub	sp, #12
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	695b      	ldr	r3, [r3, #20]
 800acac:	f003 0301 	and.w	r3, r3, #1
}
 800acb0:	4618      	mov	r0, r3
 800acb2:	370c      	adds	r7, #12
 800acb4:	46bd      	mov	sp, r7
 800acb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acba:	4770      	bx	lr

0800acbc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800acbc:	b480      	push	{r7}
 800acbe:	b085      	sub	sp, #20
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	68fa      	ldr	r2, [r7, #12]
 800acd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800acd6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800acda:	f023 0307 	bic.w	r3, r3, #7
 800acde:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ace6:	689b      	ldr	r3, [r3, #8]
 800ace8:	f003 0306 	and.w	r3, r3, #6
 800acec:	2b04      	cmp	r3, #4
 800acee:	d109      	bne.n	800ad04 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	68fa      	ldr	r2, [r7, #12]
 800acfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800acfe:	f043 0303 	orr.w	r3, r3, #3
 800ad02:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad0a:	685b      	ldr	r3, [r3, #4]
 800ad0c:	68fa      	ldr	r2, [r7, #12]
 800ad0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ad12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ad16:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ad18:	2300      	movs	r3, #0
}
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	3714      	adds	r7, #20
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad24:	4770      	bx	lr
	...

0800ad28 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b087      	sub	sp, #28
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	60f8      	str	r0, [r7, #12]
 800ad30:	460b      	mov	r3, r1
 800ad32:	607a      	str	r2, [r7, #4]
 800ad34:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	333c      	adds	r3, #60	; 0x3c
 800ad3e:	3304      	adds	r3, #4
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ad44:	693b      	ldr	r3, [r7, #16]
 800ad46:	4a26      	ldr	r2, [pc, #152]	; (800ade0 <USB_EP0_OutStart+0xb8>)
 800ad48:	4293      	cmp	r3, r2
 800ad4a:	d90a      	bls.n	800ad62 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ad58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ad5c:	d101      	bne.n	800ad62 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	e037      	b.n	800add2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ad62:	697b      	ldr	r3, [r7, #20]
 800ad64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad68:	461a      	mov	r2, r3
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ad6e:	697b      	ldr	r3, [r7, #20]
 800ad70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad74:	691b      	ldr	r3, [r3, #16]
 800ad76:	697a      	ldr	r2, [r7, #20]
 800ad78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ad80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ad82:	697b      	ldr	r3, [r7, #20]
 800ad84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad88:	691b      	ldr	r3, [r3, #16]
 800ad8a:	697a      	ldr	r2, [r7, #20]
 800ad8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad90:	f043 0318 	orr.w	r3, r3, #24
 800ad94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ad96:	697b      	ldr	r3, [r7, #20]
 800ad98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad9c:	691b      	ldr	r3, [r3, #16]
 800ad9e:	697a      	ldr	r2, [r7, #20]
 800ada0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ada4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ada8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800adaa:	7afb      	ldrb	r3, [r7, #11]
 800adac:	2b01      	cmp	r3, #1
 800adae:	d10f      	bne.n	800add0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800adb0:	697b      	ldr	r3, [r7, #20]
 800adb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adb6:	461a      	mov	r2, r3
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	697a      	ldr	r2, [r7, #20]
 800adc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800adca:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800adce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800add0:	2300      	movs	r3, #0
}
 800add2:	4618      	mov	r0, r3
 800add4:	371c      	adds	r7, #28
 800add6:	46bd      	mov	sp, r7
 800add8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800addc:	4770      	bx	lr
 800adde:	bf00      	nop
 800ade0:	4f54300a 	.word	0x4f54300a

0800ade4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ade4:	b480      	push	{r7}
 800ade6:	b085      	sub	sp, #20
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800adec:	2300      	movs	r3, #0
 800adee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	3301      	adds	r3, #1
 800adf4:	60fb      	str	r3, [r7, #12]
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	4a13      	ldr	r2, [pc, #76]	; (800ae48 <USB_CoreReset+0x64>)
 800adfa:	4293      	cmp	r3, r2
 800adfc:	d901      	bls.n	800ae02 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800adfe:	2303      	movs	r3, #3
 800ae00:	e01b      	b.n	800ae3a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	691b      	ldr	r3, [r3, #16]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	daf2      	bge.n	800adf0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	691b      	ldr	r3, [r3, #16]
 800ae12:	f043 0201 	orr.w	r2, r3, #1
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	3301      	adds	r3, #1
 800ae1e:	60fb      	str	r3, [r7, #12]
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	4a09      	ldr	r2, [pc, #36]	; (800ae48 <USB_CoreReset+0x64>)
 800ae24:	4293      	cmp	r3, r2
 800ae26:	d901      	bls.n	800ae2c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ae28:	2303      	movs	r3, #3
 800ae2a:	e006      	b.n	800ae3a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	691b      	ldr	r3, [r3, #16]
 800ae30:	f003 0301 	and.w	r3, r3, #1
 800ae34:	2b01      	cmp	r3, #1
 800ae36:	d0f0      	beq.n	800ae1a <USB_CoreReset+0x36>

  return HAL_OK;
 800ae38:	2300      	movs	r3, #0
}
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	3714      	adds	r7, #20
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae44:	4770      	bx	lr
 800ae46:	bf00      	nop
 800ae48:	00030d40 	.word	0x00030d40

0800ae4c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ae50:	4904      	ldr	r1, [pc, #16]	; (800ae64 <MX_FATFS_Init+0x18>)
 800ae52:	4805      	ldr	r0, [pc, #20]	; (800ae68 <MX_FATFS_Init+0x1c>)
 800ae54:	f001 fe36 	bl	800cac4 <FATFS_LinkDriver>
 800ae58:	4603      	mov	r3, r0
 800ae5a:	461a      	mov	r2, r3
 800ae5c:	4b03      	ldr	r3, [pc, #12]	; (800ae6c <MX_FATFS_Init+0x20>)
 800ae5e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800ae60:	bf00      	nop
 800ae62:	bd80      	pop	{r7, pc}
 800ae64:	20000b40 	.word	0x20000b40
 800ae68:	08011acc 	.word	0x08011acc
 800ae6c:	20000b3c 	.word	0x20000b3c

0800ae70 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b082      	sub	sp, #8
 800ae74:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ae76:	2300      	movs	r3, #0
 800ae78:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ae7a:	f000 f871 	bl	800af60 <BSP_SD_IsDetected>
 800ae7e:	4603      	mov	r3, r0
 800ae80:	2b01      	cmp	r3, #1
 800ae82:	d001      	beq.n	800ae88 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800ae84:	2301      	movs	r3, #1
 800ae86:	e012      	b.n	800aeae <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800ae88:	480b      	ldr	r0, [pc, #44]	; (800aeb8 <BSP_SD_Init+0x48>)
 800ae8a:	f7fb fcc5 	bl	8006818 <HAL_SD_Init>
 800ae8e:	4603      	mov	r3, r0
 800ae90:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800ae92:	79fb      	ldrb	r3, [r7, #7]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d109      	bne.n	800aeac <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800ae98:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ae9c:	4806      	ldr	r0, [pc, #24]	; (800aeb8 <BSP_SD_Init+0x48>)
 800ae9e:	f7fc faa3 	bl	80073e8 <HAL_SD_ConfigWideBusOperation>
 800aea2:	4603      	mov	r3, r0
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d001      	beq.n	800aeac <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800aea8:	2301      	movs	r3, #1
 800aeaa:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800aeac:	79fb      	ldrb	r3, [r7, #7]
}
 800aeae:	4618      	mov	r0, r3
 800aeb0:	3708      	adds	r7, #8
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}
 800aeb6:	bf00      	nop
 800aeb8:	20000a5c 	.word	0x20000a5c

0800aebc <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b086      	sub	sp, #24
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	60f8      	str	r0, [r7, #12]
 800aec4:	60b9      	str	r1, [r7, #8]
 800aec6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800aec8:	2300      	movs	r3, #0
 800aeca:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	68ba      	ldr	r2, [r7, #8]
 800aed0:	68f9      	ldr	r1, [r7, #12]
 800aed2:	4806      	ldr	r0, [pc, #24]	; (800aeec <BSP_SD_ReadBlocks_DMA+0x30>)
 800aed4:	f7fb fd30 	bl	8006938 <HAL_SD_ReadBlocks_DMA>
 800aed8:	4603      	mov	r3, r0
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d001      	beq.n	800aee2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800aede:	2301      	movs	r3, #1
 800aee0:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800aee2:	7dfb      	ldrb	r3, [r7, #23]
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	3718      	adds	r7, #24
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}
 800aeec:	20000a5c 	.word	0x20000a5c

0800aef0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b086      	sub	sp, #24
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	60f8      	str	r0, [r7, #12]
 800aef8:	60b9      	str	r1, [r7, #8]
 800aefa:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800aefc:	2300      	movs	r3, #0
 800aefe:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	68ba      	ldr	r2, [r7, #8]
 800af04:	68f9      	ldr	r1, [r7, #12]
 800af06:	4806      	ldr	r0, [pc, #24]	; (800af20 <BSP_SD_WriteBlocks_DMA+0x30>)
 800af08:	f7fb fe00 	bl	8006b0c <HAL_SD_WriteBlocks_DMA>
 800af0c:	4603      	mov	r3, r0
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d001      	beq.n	800af16 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800af12:	2301      	movs	r3, #1
 800af14:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800af16:	7dfb      	ldrb	r3, [r7, #23]
}
 800af18:	4618      	mov	r0, r3
 800af1a:	3718      	adds	r7, #24
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}
 800af20:	20000a5c 	.word	0x20000a5c

0800af24 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800af28:	4805      	ldr	r0, [pc, #20]	; (800af40 <BSP_SD_GetCardState+0x1c>)
 800af2a:	f7fc fad9 	bl	80074e0 <HAL_SD_GetCardState>
 800af2e:	4603      	mov	r3, r0
 800af30:	2b04      	cmp	r3, #4
 800af32:	bf14      	ite	ne
 800af34:	2301      	movne	r3, #1
 800af36:	2300      	moveq	r3, #0
 800af38:	b2db      	uxtb	r3, r3
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	bd80      	pop	{r7, pc}
 800af3e:	bf00      	nop
 800af40:	20000a5c 	.word	0x20000a5c

0800af44 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b082      	sub	sp, #8
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800af4c:	6879      	ldr	r1, [r7, #4]
 800af4e:	4803      	ldr	r0, [pc, #12]	; (800af5c <BSP_SD_GetCardInfo+0x18>)
 800af50:	f7fc fa1e 	bl	8007390 <HAL_SD_GetCardInfo>
}
 800af54:	bf00      	nop
 800af56:	3708      	adds	r7, #8
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}
 800af5c:	20000a5c 	.word	0x20000a5c

0800af60 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b082      	sub	sp, #8
 800af64:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800af66:	2301      	movs	r3, #1
 800af68:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800af6a:	f000 f80b 	bl	800af84 <BSP_PlatformIsDetected>
 800af6e:	4603      	mov	r3, r0
 800af70:	2b00      	cmp	r3, #0
 800af72:	d101      	bne.n	800af78 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800af74:	2300      	movs	r3, #0
 800af76:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800af78:	79fb      	ldrb	r3, [r7, #7]
 800af7a:	b2db      	uxtb	r3, r3
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	3708      	adds	r7, #8
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}

0800af84 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800af84:	b580      	push	{r7, lr}
 800af86:	b082      	sub	sp, #8
 800af88:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800af8a:	2301      	movs	r3, #1
 800af8c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800af8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800af92:	4806      	ldr	r0, [pc, #24]	; (800afac <BSP_PlatformIsDetected+0x28>)
 800af94:	f7f8 fe66 	bl	8003c64 <HAL_GPIO_ReadPin>
 800af98:	4603      	mov	r3, r0
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d001      	beq.n	800afa2 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800af9e:	2300      	movs	r3, #0
 800afa0:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800afa2:	79fb      	ldrb	r3, [r7, #7]
}  
 800afa4:	4618      	mov	r0, r3
 800afa6:	3708      	adds	r7, #8
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd80      	pop	{r7, pc}
 800afac:	40020000 	.word	0x40020000

0800afb0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b084      	sub	sp, #16
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800afb8:	f7f7 ffde 	bl	8002f78 <HAL_GetTick>
 800afbc:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800afbe:	e006      	b.n	800afce <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800afc0:	f7ff ffb0 	bl	800af24 <BSP_SD_GetCardState>
 800afc4:	4603      	mov	r3, r0
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d101      	bne.n	800afce <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800afca:	2300      	movs	r3, #0
 800afcc:	e009      	b.n	800afe2 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800afce:	f7f7 ffd3 	bl	8002f78 <HAL_GetTick>
 800afd2:	4602      	mov	r2, r0
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	1ad3      	subs	r3, r2, r3
 800afd8:	687a      	ldr	r2, [r7, #4]
 800afda:	429a      	cmp	r2, r3
 800afdc:	d8f0      	bhi.n	800afc0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800afde:	f04f 33ff 	mov.w	r3, #4294967295
}
 800afe2:	4618      	mov	r0, r3
 800afe4:	3710      	adds	r7, #16
 800afe6:	46bd      	mov	sp, r7
 800afe8:	bd80      	pop	{r7, pc}
	...

0800afec <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b082      	sub	sp, #8
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	4603      	mov	r3, r0
 800aff4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800aff6:	4b0b      	ldr	r3, [pc, #44]	; (800b024 <SD_CheckStatus+0x38>)
 800aff8:	2201      	movs	r2, #1
 800affa:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800affc:	f7ff ff92 	bl	800af24 <BSP_SD_GetCardState>
 800b000:	4603      	mov	r3, r0
 800b002:	2b00      	cmp	r3, #0
 800b004:	d107      	bne.n	800b016 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b006:	4b07      	ldr	r3, [pc, #28]	; (800b024 <SD_CheckStatus+0x38>)
 800b008:	781b      	ldrb	r3, [r3, #0]
 800b00a:	b2db      	uxtb	r3, r3
 800b00c:	f023 0301 	bic.w	r3, r3, #1
 800b010:	b2da      	uxtb	r2, r3
 800b012:	4b04      	ldr	r3, [pc, #16]	; (800b024 <SD_CheckStatus+0x38>)
 800b014:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b016:	4b03      	ldr	r3, [pc, #12]	; (800b024 <SD_CheckStatus+0x38>)
 800b018:	781b      	ldrb	r3, [r3, #0]
 800b01a:	b2db      	uxtb	r3, r3
}
 800b01c:	4618      	mov	r0, r3
 800b01e:	3708      	adds	r7, #8
 800b020:	46bd      	mov	sp, r7
 800b022:	bd80      	pop	{r7, pc}
 800b024:	20000019 	.word	0x20000019

0800b028 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b082      	sub	sp, #8
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	4603      	mov	r3, r0
 800b030:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800b032:	f7ff ff1d 	bl	800ae70 <BSP_SD_Init>
 800b036:	4603      	mov	r3, r0
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d107      	bne.n	800b04c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800b03c:	79fb      	ldrb	r3, [r7, #7]
 800b03e:	4618      	mov	r0, r3
 800b040:	f7ff ffd4 	bl	800afec <SD_CheckStatus>
 800b044:	4603      	mov	r3, r0
 800b046:	461a      	mov	r2, r3
 800b048:	4b04      	ldr	r3, [pc, #16]	; (800b05c <SD_initialize+0x34>)
 800b04a:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 800b04c:	4b03      	ldr	r3, [pc, #12]	; (800b05c <SD_initialize+0x34>)
 800b04e:	781b      	ldrb	r3, [r3, #0]
 800b050:	b2db      	uxtb	r3, r3
}
 800b052:	4618      	mov	r0, r3
 800b054:	3708      	adds	r7, #8
 800b056:	46bd      	mov	sp, r7
 800b058:	bd80      	pop	{r7, pc}
 800b05a:	bf00      	nop
 800b05c:	20000019 	.word	0x20000019

0800b060 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b082      	sub	sp, #8
 800b064:	af00      	add	r7, sp, #0
 800b066:	4603      	mov	r3, r0
 800b068:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b06a:	79fb      	ldrb	r3, [r7, #7]
 800b06c:	4618      	mov	r0, r3
 800b06e:	f7ff ffbd 	bl	800afec <SD_CheckStatus>
 800b072:	4603      	mov	r3, r0
}
 800b074:	4618      	mov	r0, r3
 800b076:	3708      	adds	r7, #8
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}

0800b07c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b088      	sub	sp, #32
 800b080:	af00      	add	r7, sp, #0
 800b082:	60b9      	str	r1, [r7, #8]
 800b084:	607a      	str	r2, [r7, #4]
 800b086:	603b      	str	r3, [r7, #0]
 800b088:	4603      	mov	r3, r0
 800b08a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b08c:	2301      	movs	r3, #1
 800b08e:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b090:	f247 5030 	movw	r0, #30000	; 0x7530
 800b094:	f7ff ff8c 	bl	800afb0 <SD_CheckStatusWithTimeout>
 800b098:	4603      	mov	r3, r0
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	da01      	bge.n	800b0a2 <SD_read+0x26>
  {
    return res;
 800b09e:	7ffb      	ldrb	r3, [r7, #31]
 800b0a0:	e08b      	b.n	800b1ba <SD_read+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800b0a2:	68bb      	ldr	r3, [r7, #8]
 800b0a4:	f003 0303 	and.w	r3, r3, #3
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	f040 8085 	bne.w	800b1b8 <SD_read+0x13c>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800b0ae:	683a      	ldr	r2, [r7, #0]
 800b0b0:	6879      	ldr	r1, [r7, #4]
 800b0b2:	68b8      	ldr	r0, [r7, #8]
 800b0b4:	f7ff ff02 	bl	800aebc <BSP_SD_ReadBlocks_DMA>
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d133      	bne.n	800b126 <SD_read+0xaa>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800b0be:	4b41      	ldr	r3, [pc, #260]	; (800b1c4 <SD_read+0x148>)
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800b0c4:	f7f7 ff58 	bl	8002f78 <HAL_GetTick>
 800b0c8:	6178      	str	r0, [r7, #20]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b0ca:	bf00      	nop
 800b0cc:	4b3d      	ldr	r3, [pc, #244]	; (800b1c4 <SD_read+0x148>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d108      	bne.n	800b0e6 <SD_read+0x6a>
 800b0d4:	f7f7 ff50 	bl	8002f78 <HAL_GetTick>
 800b0d8:	4602      	mov	r2, r0
 800b0da:	697b      	ldr	r3, [r7, #20]
 800b0dc:	1ad3      	subs	r3, r2, r3
 800b0de:	f247 522f 	movw	r2, #29999	; 0x752f
 800b0e2:	4293      	cmp	r3, r2
 800b0e4:	d9f2      	bls.n	800b0cc <SD_read+0x50>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800b0e6:	4b37      	ldr	r3, [pc, #220]	; (800b1c4 <SD_read+0x148>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d102      	bne.n	800b0f4 <SD_read+0x78>
      {
        res = RES_ERROR;
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	77fb      	strb	r3, [r7, #31]
 800b0f2:	e061      	b.n	800b1b8 <SD_read+0x13c>
      }
      else
      {
        ReadStatus = 0;
 800b0f4:	4b33      	ldr	r3, [pc, #204]	; (800b1c4 <SD_read+0x148>)
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800b0fa:	f7f7 ff3d 	bl	8002f78 <HAL_GetTick>
 800b0fe:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b100:	e007      	b.n	800b112 <SD_read+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b102:	f7ff ff0f 	bl	800af24 <BSP_SD_GetCardState>
 800b106:	4603      	mov	r3, r0
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d102      	bne.n	800b112 <SD_read+0x96>
          {
            res = RES_OK;
 800b10c:	2300      	movs	r3, #0
 800b10e:	77fb      	strb	r3, [r7, #31]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800b110:	e052      	b.n	800b1b8 <SD_read+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b112:	f7f7 ff31 	bl	8002f78 <HAL_GetTick>
 800b116:	4602      	mov	r2, r0
 800b118:	697b      	ldr	r3, [r7, #20]
 800b11a:	1ad3      	subs	r3, r2, r3
 800b11c:	f247 522f 	movw	r2, #29999	; 0x752f
 800b120:	4293      	cmp	r3, r2
 800b122:	d9ee      	bls.n	800b102 <SD_read+0x86>
 800b124:	e048      	b.n	800b1b8 <SD_read+0x13c>
#if defined(ENABLE_SCRATCH_BUFFER)
    else {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 800b126:	2300      	movs	r3, #0
 800b128:	61bb      	str	r3, [r7, #24]
 800b12a:	e034      	b.n	800b196 <SD_read+0x11a>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	1c5a      	adds	r2, r3, #1
 800b130:	607a      	str	r2, [r7, #4]
 800b132:	2201      	movs	r2, #1
 800b134:	4619      	mov	r1, r3
 800b136:	4824      	ldr	r0, [pc, #144]	; (800b1c8 <SD_read+0x14c>)
 800b138:	f7ff fec0 	bl	800aebc <BSP_SD_ReadBlocks_DMA>
 800b13c:	4603      	mov	r3, r0
 800b13e:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 800b140:	7fbb      	ldrb	r3, [r7, #30]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d12c      	bne.n	800b1a0 <SD_read+0x124>
          /* wait until the read is successful or a timeout occurs */

          ReadStatus = 0;
 800b146:	4b1f      	ldr	r3, [pc, #124]	; (800b1c4 <SD_read+0x148>)
 800b148:	2200      	movs	r2, #0
 800b14a:	601a      	str	r2, [r3, #0]
          timeout = HAL_GetTick();
 800b14c:	f7f7 ff14 	bl	8002f78 <HAL_GetTick>
 800b150:	6178      	str	r0, [r7, #20]
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b152:	bf00      	nop
 800b154:	4b1b      	ldr	r3, [pc, #108]	; (800b1c4 <SD_read+0x148>)
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d108      	bne.n	800b16e <SD_read+0xf2>
 800b15c:	f7f7 ff0c 	bl	8002f78 <HAL_GetTick>
 800b160:	4602      	mov	r2, r0
 800b162:	697b      	ldr	r3, [r7, #20]
 800b164:	1ad3      	subs	r3, r2, r3
 800b166:	f247 522f 	movw	r2, #29999	; 0x752f
 800b16a:	4293      	cmp	r3, r2
 800b16c:	d9f2      	bls.n	800b154 <SD_read+0xd8>
          {
          }
          if (ReadStatus == 0)
 800b16e:	4b15      	ldr	r3, [pc, #84]	; (800b1c4 <SD_read+0x148>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d016      	beq.n	800b1a4 <SD_read+0x128>
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	4a13      	ldr	r2, [pc, #76]	; (800b1c8 <SD_read+0x14c>)
 800b17a:	4618      	mov	r0, r3
 800b17c:	4611      	mov	r1, r2
 800b17e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b182:	461a      	mov	r2, r3
 800b184:	f002 fa20 	bl	800d5c8 <memcpy>
          buff += BLOCKSIZE;
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b18e:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 800b190:	69bb      	ldr	r3, [r7, #24]
 800b192:	3301      	adds	r3, #1
 800b194:	61bb      	str	r3, [r7, #24]
 800b196:	69bb      	ldr	r3, [r7, #24]
 800b198:	683a      	ldr	r2, [r7, #0]
 800b19a:	429a      	cmp	r2, r3
 800b19c:	d8c6      	bhi.n	800b12c <SD_read+0xb0>
 800b19e:	e002      	b.n	800b1a6 <SD_read+0x12a>
        }
        else
        {
          break;
 800b1a0:	bf00      	nop
 800b1a2:	e000      	b.n	800b1a6 <SD_read+0x12a>
            break;
 800b1a4:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 800b1a6:	69bb      	ldr	r3, [r7, #24]
 800b1a8:	683a      	ldr	r2, [r7, #0]
 800b1aa:	429a      	cmp	r2, r3
 800b1ac:	d104      	bne.n	800b1b8 <SD_read+0x13c>
 800b1ae:	7fbb      	ldrb	r3, [r7, #30]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d101      	bne.n	800b1b8 <SD_read+0x13c>
        res = RES_OK;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	77fb      	strb	r3, [r7, #31]
    }
#endif
  }

  return res;
 800b1b8:	7ffb      	ldrb	r3, [r7, #31]
}
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	3720      	adds	r7, #32
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bd80      	pop	{r7, pc}
 800b1c2:	bf00      	nop
 800b1c4:	20000680 	.word	0x20000680
 800b1c8:	2000047c 	.word	0x2000047c

0800b1cc <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b088      	sub	sp, #32
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	60b9      	str	r1, [r7, #8]
 800b1d4:	607a      	str	r2, [r7, #4]
 800b1d6:	603b      	str	r3, [r7, #0]
 800b1d8:	4603      	mov	r3, r0
 800b1da:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b1dc:	2301      	movs	r3, #1
 800b1de:	77fb      	strb	r3, [r7, #31]
  uint32_t timeout;
  uint8_t ret;
  int i;

   WriteStatus = 0;
 800b1e0:	4b4c      	ldr	r3, [pc, #304]	; (800b314 <SD_write+0x148>)
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b1e6:	f247 5030 	movw	r0, #30000	; 0x7530
 800b1ea:	f7ff fee1 	bl	800afb0 <SD_CheckStatusWithTimeout>
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	da01      	bge.n	800b1f8 <SD_write+0x2c>
  {
    return res;
 800b1f4:	7ffb      	ldrb	r3, [r7, #31]
 800b1f6:	e088      	b.n	800b30a <SD_write+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800b1f8:	68bb      	ldr	r3, [r7, #8]
 800b1fa:	f003 0303 	and.w	r3, r3, #3
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	f040 8082 	bne.w	800b308 <SD_write+0x13c>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800b204:	683a      	ldr	r2, [r7, #0]
 800b206:	6879      	ldr	r1, [r7, #4]
 800b208:	68b8      	ldr	r0, [r7, #8]
 800b20a:	f7ff fe71 	bl	800aef0 <BSP_SD_WriteBlocks_DMA>
 800b20e:	4603      	mov	r3, r0
 800b210:	2b00      	cmp	r3, #0
 800b212:	d130      	bne.n	800b276 <SD_write+0xaa>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800b214:	f7f7 feb0 	bl	8002f78 <HAL_GetTick>
 800b218:	6178      	str	r0, [r7, #20]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b21a:	bf00      	nop
 800b21c:	4b3d      	ldr	r3, [pc, #244]	; (800b314 <SD_write+0x148>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d108      	bne.n	800b236 <SD_write+0x6a>
 800b224:	f7f7 fea8 	bl	8002f78 <HAL_GetTick>
 800b228:	4602      	mov	r2, r0
 800b22a:	697b      	ldr	r3, [r7, #20]
 800b22c:	1ad3      	subs	r3, r2, r3
 800b22e:	f247 522f 	movw	r2, #29999	; 0x752f
 800b232:	4293      	cmp	r3, r2
 800b234:	d9f2      	bls.n	800b21c <SD_write+0x50>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800b236:	4b37      	ldr	r3, [pc, #220]	; (800b314 <SD_write+0x148>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d102      	bne.n	800b244 <SD_write+0x78>
      {
        res = RES_ERROR;
 800b23e:	2301      	movs	r3, #1
 800b240:	77fb      	strb	r3, [r7, #31]
 800b242:	e061      	b.n	800b308 <SD_write+0x13c>
      }
      else
      {
        WriteStatus = 0;
 800b244:	4b33      	ldr	r3, [pc, #204]	; (800b314 <SD_write+0x148>)
 800b246:	2200      	movs	r2, #0
 800b248:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800b24a:	f7f7 fe95 	bl	8002f78 <HAL_GetTick>
 800b24e:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b250:	e007      	b.n	800b262 <SD_write+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b252:	f7ff fe67 	bl	800af24 <BSP_SD_GetCardState>
 800b256:	4603      	mov	r3, r0
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d102      	bne.n	800b262 <SD_write+0x96>
          {
            res = RES_OK;
 800b25c:	2300      	movs	r3, #0
 800b25e:	77fb      	strb	r3, [r7, #31]
            break;
 800b260:	e052      	b.n	800b308 <SD_write+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b262:	f7f7 fe89 	bl	8002f78 <HAL_GetTick>
 800b266:	4602      	mov	r2, r0
 800b268:	697b      	ldr	r3, [r7, #20]
 800b26a:	1ad3      	subs	r3, r2, r3
 800b26c:	f247 522f 	movw	r2, #29999	; 0x752f
 800b270:	4293      	cmp	r3, r2
 800b272:	d9ee      	bls.n	800b252 <SD_write+0x86>
 800b274:	e048      	b.n	800b308 <SD_write+0x13c>
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 800b276:	2300      	movs	r3, #0
 800b278:	61bb      	str	r3, [r7, #24]
 800b27a:	e034      	b.n	800b2e6 <SD_write+0x11a>
      {
        WriteStatus = 0;
 800b27c:	4b25      	ldr	r3, [pc, #148]	; (800b314 <SD_write+0x148>)
 800b27e:	2200      	movs	r2, #0
 800b280:	601a      	str	r2, [r3, #0]
        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	1c5a      	adds	r2, r3, #1
 800b286:	607a      	str	r2, [r7, #4]
 800b288:	2201      	movs	r2, #1
 800b28a:	4619      	mov	r1, r3
 800b28c:	4822      	ldr	r0, [pc, #136]	; (800b318 <SD_write+0x14c>)
 800b28e:	f7ff fe2f 	bl	800aef0 <BSP_SD_WriteBlocks_DMA>
 800b292:	4603      	mov	r3, r0
 800b294:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 800b296:	7fbb      	ldrb	r3, [r7, #30]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d129      	bne.n	800b2f0 <SD_write+0x124>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 800b29c:	f7f7 fe6c 	bl	8002f78 <HAL_GetTick>
 800b2a0:	6178      	str	r0, [r7, #20]
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b2a2:	bf00      	nop
 800b2a4:	4b1b      	ldr	r3, [pc, #108]	; (800b314 <SD_write+0x148>)
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d108      	bne.n	800b2be <SD_write+0xf2>
 800b2ac:	f7f7 fe64 	bl	8002f78 <HAL_GetTick>
 800b2b0:	4602      	mov	r2, r0
 800b2b2:	697b      	ldr	r3, [r7, #20]
 800b2b4:	1ad3      	subs	r3, r2, r3
 800b2b6:	f247 522f 	movw	r2, #29999	; 0x752f
 800b2ba:	4293      	cmp	r3, r2
 800b2bc:	d9f2      	bls.n	800b2a4 <SD_write+0xd8>
          {
          }
          if (WriteStatus == 0)
 800b2be:	4b15      	ldr	r3, [pc, #84]	; (800b314 <SD_write+0x148>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d016      	beq.n	800b2f4 <SD_write+0x128>
          {
            break;
          }

          memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	4a13      	ldr	r2, [pc, #76]	; (800b318 <SD_write+0x14c>)
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	4611      	mov	r1, r2
 800b2ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b2d2:	461a      	mov	r2, r3
 800b2d4:	f002 f978 	bl	800d5c8 <memcpy>
          buff += BLOCKSIZE;
 800b2d8:	68bb      	ldr	r3, [r7, #8]
 800b2da:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b2de:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++)
 800b2e0:	69bb      	ldr	r3, [r7, #24]
 800b2e2:	3301      	adds	r3, #1
 800b2e4:	61bb      	str	r3, [r7, #24]
 800b2e6:	69bb      	ldr	r3, [r7, #24]
 800b2e8:	683a      	ldr	r2, [r7, #0]
 800b2ea:	429a      	cmp	r2, r3
 800b2ec:	d8c6      	bhi.n	800b27c <SD_write+0xb0>
 800b2ee:	e002      	b.n	800b2f6 <SD_write+0x12a>
        }
        else
        {
          break;
 800b2f0:	bf00      	nop
 800b2f2:	e000      	b.n	800b2f6 <SD_write+0x12a>
            break;
 800b2f4:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 800b2f6:	69bb      	ldr	r3, [r7, #24]
 800b2f8:	683a      	ldr	r2, [r7, #0]
 800b2fa:	429a      	cmp	r2, r3
 800b2fc:	d104      	bne.n	800b308 <SD_write+0x13c>
 800b2fe:	7fbb      	ldrb	r3, [r7, #30]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d101      	bne.n	800b308 <SD_write+0x13c>
        res = RES_OK;
 800b304:	2300      	movs	r3, #0
 800b306:	77fb      	strb	r3, [r7, #31]
    }

  }
  return res;
 800b308:	7ffb      	ldrb	r3, [r7, #31]
}
 800b30a:	4618      	mov	r0, r3
 800b30c:	3720      	adds	r7, #32
 800b30e:	46bd      	mov	sp, r7
 800b310:	bd80      	pop	{r7, pc}
 800b312:	bf00      	nop
 800b314:	2000067c 	.word	0x2000067c
 800b318:	2000047c 	.word	0x2000047c

0800b31c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b08c      	sub	sp, #48	; 0x30
 800b320:	af00      	add	r7, sp, #0
 800b322:	4603      	mov	r3, r0
 800b324:	603a      	str	r2, [r7, #0]
 800b326:	71fb      	strb	r3, [r7, #7]
 800b328:	460b      	mov	r3, r1
 800b32a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b32c:	2301      	movs	r3, #1
 800b32e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b332:	4b25      	ldr	r3, [pc, #148]	; (800b3c8 <SD_ioctl+0xac>)
 800b334:	781b      	ldrb	r3, [r3, #0]
 800b336:	b2db      	uxtb	r3, r3
 800b338:	f003 0301 	and.w	r3, r3, #1
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d001      	beq.n	800b344 <SD_ioctl+0x28>
 800b340:	2303      	movs	r3, #3
 800b342:	e03c      	b.n	800b3be <SD_ioctl+0xa2>

  switch (cmd)
 800b344:	79bb      	ldrb	r3, [r7, #6]
 800b346:	2b03      	cmp	r3, #3
 800b348:	d834      	bhi.n	800b3b4 <SD_ioctl+0x98>
 800b34a:	a201      	add	r2, pc, #4	; (adr r2, 800b350 <SD_ioctl+0x34>)
 800b34c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b350:	0800b361 	.word	0x0800b361
 800b354:	0800b369 	.word	0x0800b369
 800b358:	0800b381 	.word	0x0800b381
 800b35c:	0800b39b 	.word	0x0800b39b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b360:	2300      	movs	r3, #0
 800b362:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b366:	e028      	b.n	800b3ba <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b368:	f107 030c 	add.w	r3, r7, #12
 800b36c:	4618      	mov	r0, r3
 800b36e:	f7ff fde9 	bl	800af44 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b378:	2300      	movs	r3, #0
 800b37a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b37e:	e01c      	b.n	800b3ba <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b380:	f107 030c 	add.w	r3, r7, #12
 800b384:	4618      	mov	r0, r3
 800b386:	f7ff fddd 	bl	800af44 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b38a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b38c:	b29a      	uxth	r2, r3
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b392:	2300      	movs	r3, #0
 800b394:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b398:	e00f      	b.n	800b3ba <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b39a:	f107 030c 	add.w	r3, r7, #12
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f7ff fdd0 	bl	800af44 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b3a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3a6:	0a5a      	lsrs	r2, r3, #9
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b3b2:	e002      	b.n	800b3ba <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b3b4:	2304      	movs	r3, #4
 800b3b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800b3ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	3730      	adds	r7, #48	; 0x30
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd80      	pop	{r7, pc}
 800b3c6:	bf00      	nop
 800b3c8:	20000019 	.word	0x20000019

0800b3cc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b084      	sub	sp, #16
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
 800b3d4:	460b      	mov	r3, r1
 800b3d6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b3d8:	2300      	movs	r3, #0
 800b3da:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	7c1b      	ldrb	r3, [r3, #16]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d115      	bne.n	800b410 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b3e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b3e8:	2202      	movs	r2, #2
 800b3ea:	2181      	movs	r1, #129	; 0x81
 800b3ec:	6878      	ldr	r0, [r7, #4]
 800b3ee:	f001 ff5e 	bl	800d2ae <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2201      	movs	r2, #1
 800b3f6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b3f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b3fc:	2202      	movs	r2, #2
 800b3fe:	2101      	movs	r1, #1
 800b400:	6878      	ldr	r0, [r7, #4]
 800b402:	f001 ff54 	bl	800d2ae <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2201      	movs	r2, #1
 800b40a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800b40e:	e012      	b.n	800b436 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b410:	2340      	movs	r3, #64	; 0x40
 800b412:	2202      	movs	r2, #2
 800b414:	2181      	movs	r1, #129	; 0x81
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f001 ff49 	bl	800d2ae <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2201      	movs	r2, #1
 800b420:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b422:	2340      	movs	r3, #64	; 0x40
 800b424:	2202      	movs	r2, #2
 800b426:	2101      	movs	r1, #1
 800b428:	6878      	ldr	r0, [r7, #4]
 800b42a:	f001 ff40 	bl	800d2ae <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2201      	movs	r2, #1
 800b432:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b436:	2308      	movs	r3, #8
 800b438:	2203      	movs	r2, #3
 800b43a:	2182      	movs	r1, #130	; 0x82
 800b43c:	6878      	ldr	r0, [r7, #4]
 800b43e:	f001 ff36 	bl	800d2ae <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2201      	movs	r2, #1
 800b446:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800b448:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b44c:	f002 f8ac 	bl	800d5a8 <malloc>
 800b450:	4603      	mov	r3, r0
 800b452:	461a      	mov	r2, r3
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b460:	2b00      	cmp	r3, #0
 800b462:	d102      	bne.n	800b46a <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 800b464:	2301      	movs	r3, #1
 800b466:	73fb      	strb	r3, [r7, #15]
 800b468:	e026      	b.n	800b4b8 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b470:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	2200      	movs	r2, #0
 800b480:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800b484:	68bb      	ldr	r3, [r7, #8]
 800b486:	2200      	movs	r2, #0
 800b488:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	7c1b      	ldrb	r3, [r3, #16]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d109      	bne.n	800b4a8 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b494:	68bb      	ldr	r3, [r7, #8]
 800b496:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b49a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b49e:	2101      	movs	r1, #1
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	f001 fff5 	bl	800d490 <USBD_LL_PrepareReceive>
 800b4a6:	e007      	b.n	800b4b8 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b4ae:	2340      	movs	r3, #64	; 0x40
 800b4b0:	2101      	movs	r1, #1
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	f001 ffec 	bl	800d490 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800b4b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	3710      	adds	r7, #16
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	bd80      	pop	{r7, pc}

0800b4c2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b4c2:	b580      	push	{r7, lr}
 800b4c4:	b084      	sub	sp, #16
 800b4c6:	af00      	add	r7, sp, #0
 800b4c8:	6078      	str	r0, [r7, #4]
 800b4ca:	460b      	mov	r3, r1
 800b4cc:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b4d2:	2181      	movs	r1, #129	; 0x81
 800b4d4:	6878      	ldr	r0, [r7, #4]
 800b4d6:	f001 ff10 	bl	800d2fa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2200      	movs	r2, #0
 800b4de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b4e0:	2101      	movs	r1, #1
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	f001 ff09 	bl	800d2fa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b4f0:	2182      	movs	r1, #130	; 0x82
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f001 ff01 	bl	800d2fa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b504:	2b00      	cmp	r3, #0
 800b506:	d00e      	beq.n	800b526 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b50e:	685b      	ldr	r3, [r3, #4]
 800b510:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b518:	4618      	mov	r0, r3
 800b51a:	f002 f84d 	bl	800d5b8 <free>
    pdev->pClassData = NULL;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2200      	movs	r2, #0
 800b522:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800b526:	7bfb      	ldrb	r3, [r7, #15]
}
 800b528:	4618      	mov	r0, r3
 800b52a:	3710      	adds	r7, #16
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd80      	pop	{r7, pc}

0800b530 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b086      	sub	sp, #24
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
 800b538:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b540:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800b542:	2300      	movs	r3, #0
 800b544:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800b546:	2300      	movs	r3, #0
 800b548:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800b54a:	2300      	movs	r3, #0
 800b54c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b54e:	683b      	ldr	r3, [r7, #0]
 800b550:	781b      	ldrb	r3, [r3, #0]
 800b552:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b556:	2b00      	cmp	r3, #0
 800b558:	d039      	beq.n	800b5ce <USBD_CDC_Setup+0x9e>
 800b55a:	2b20      	cmp	r3, #32
 800b55c:	d17c      	bne.n	800b658 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	88db      	ldrh	r3, [r3, #6]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d029      	beq.n	800b5ba <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	781b      	ldrb	r3, [r3, #0]
 800b56a:	b25b      	sxtb	r3, r3
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	da11      	bge.n	800b594 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b576:	689b      	ldr	r3, [r3, #8]
 800b578:	683a      	ldr	r2, [r7, #0]
 800b57a:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800b57c:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b57e:	683a      	ldr	r2, [r7, #0]
 800b580:	88d2      	ldrh	r2, [r2, #6]
 800b582:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b584:	6939      	ldr	r1, [r7, #16]
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	88db      	ldrh	r3, [r3, #6]
 800b58a:	461a      	mov	r2, r3
 800b58c:	6878      	ldr	r0, [r7, #4]
 800b58e:	f001 f9c9 	bl	800c924 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800b592:	e068      	b.n	800b666 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	785a      	ldrb	r2, [r3, #1]
 800b598:	693b      	ldr	r3, [r7, #16]
 800b59a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	88db      	ldrh	r3, [r3, #6]
 800b5a2:	b2da      	uxtb	r2, r3
 800b5a4:	693b      	ldr	r3, [r7, #16]
 800b5a6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b5aa:	6939      	ldr	r1, [r7, #16]
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	88db      	ldrh	r3, [r3, #6]
 800b5b0:	461a      	mov	r2, r3
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f001 f9e4 	bl	800c980 <USBD_CtlPrepareRx>
    break;
 800b5b8:	e055      	b.n	800b666 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b5c0:	689b      	ldr	r3, [r3, #8]
 800b5c2:	683a      	ldr	r2, [r7, #0]
 800b5c4:	7850      	ldrb	r0, [r2, #1]
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	6839      	ldr	r1, [r7, #0]
 800b5ca:	4798      	blx	r3
    break;
 800b5cc:	e04b      	b.n	800b666 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	785b      	ldrb	r3, [r3, #1]
 800b5d2:	2b0a      	cmp	r3, #10
 800b5d4:	d017      	beq.n	800b606 <USBD_CDC_Setup+0xd6>
 800b5d6:	2b0b      	cmp	r3, #11
 800b5d8:	d029      	beq.n	800b62e <USBD_CDC_Setup+0xfe>
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d133      	bne.n	800b646 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800b5e4:	2b03      	cmp	r3, #3
 800b5e6:	d107      	bne.n	800b5f8 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800b5e8:	f107 030c 	add.w	r3, r7, #12
 800b5ec:	2202      	movs	r2, #2
 800b5ee:	4619      	mov	r1, r3
 800b5f0:	6878      	ldr	r0, [r7, #4]
 800b5f2:	f001 f997 	bl	800c924 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800b5f6:	e02e      	b.n	800b656 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800b5f8:	6839      	ldr	r1, [r7, #0]
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f001 f927 	bl	800c84e <USBD_CtlError>
			  ret = USBD_FAIL;
 800b600:	2302      	movs	r3, #2
 800b602:	75fb      	strb	r3, [r7, #23]
      break;
 800b604:	e027      	b.n	800b656 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800b60c:	2b03      	cmp	r3, #3
 800b60e:	d107      	bne.n	800b620 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800b610:	f107 030f 	add.w	r3, r7, #15
 800b614:	2201      	movs	r2, #1
 800b616:	4619      	mov	r1, r3
 800b618:	6878      	ldr	r0, [r7, #4]
 800b61a:	f001 f983 	bl	800c924 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800b61e:	e01a      	b.n	800b656 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800b620:	6839      	ldr	r1, [r7, #0]
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f001 f913 	bl	800c84e <USBD_CtlError>
			  ret = USBD_FAIL;
 800b628:	2302      	movs	r3, #2
 800b62a:	75fb      	strb	r3, [r7, #23]
      break;
 800b62c:	e013      	b.n	800b656 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800b634:	2b03      	cmp	r3, #3
 800b636:	d00d      	beq.n	800b654 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 800b638:	6839      	ldr	r1, [r7, #0]
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f001 f907 	bl	800c84e <USBD_CtlError>
			  ret = USBD_FAIL;
 800b640:	2302      	movs	r3, #2
 800b642:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800b644:	e006      	b.n	800b654 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 800b646:	6839      	ldr	r1, [r7, #0]
 800b648:	6878      	ldr	r0, [r7, #4]
 800b64a:	f001 f900 	bl	800c84e <USBD_CtlError>
      ret = USBD_FAIL;
 800b64e:	2302      	movs	r3, #2
 800b650:	75fb      	strb	r3, [r7, #23]
      break;
 800b652:	e000      	b.n	800b656 <USBD_CDC_Setup+0x126>
      break;
 800b654:	bf00      	nop
    }
    break;
 800b656:	e006      	b.n	800b666 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 800b658:	6839      	ldr	r1, [r7, #0]
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f001 f8f7 	bl	800c84e <USBD_CtlError>
    ret = USBD_FAIL;
 800b660:	2302      	movs	r3, #2
 800b662:	75fb      	strb	r3, [r7, #23]
    break;
 800b664:	bf00      	nop
  }

  return ret;
 800b666:	7dfb      	ldrb	r3, [r7, #23]
}
 800b668:	4618      	mov	r0, r3
 800b66a:	3718      	adds	r7, #24
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bd80      	pop	{r7, pc}

0800b670 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b084      	sub	sp, #16
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
 800b678:	460b      	mov	r3, r1
 800b67a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b682:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800b68a:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b692:	2b00      	cmp	r3, #0
 800b694:	d03a      	beq.n	800b70c <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b696:	78fa      	ldrb	r2, [r7, #3]
 800b698:	6879      	ldr	r1, [r7, #4]
 800b69a:	4613      	mov	r3, r2
 800b69c:	009b      	lsls	r3, r3, #2
 800b69e:	4413      	add	r3, r2
 800b6a0:	009b      	lsls	r3, r3, #2
 800b6a2:	440b      	add	r3, r1
 800b6a4:	331c      	adds	r3, #28
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d029      	beq.n	800b700 <USBD_CDC_DataIn+0x90>
 800b6ac:	78fa      	ldrb	r2, [r7, #3]
 800b6ae:	6879      	ldr	r1, [r7, #4]
 800b6b0:	4613      	mov	r3, r2
 800b6b2:	009b      	lsls	r3, r3, #2
 800b6b4:	4413      	add	r3, r2
 800b6b6:	009b      	lsls	r3, r3, #2
 800b6b8:	440b      	add	r3, r1
 800b6ba:	331c      	adds	r3, #28
 800b6bc:	681a      	ldr	r2, [r3, #0]
 800b6be:	78f9      	ldrb	r1, [r7, #3]
 800b6c0:	68b8      	ldr	r0, [r7, #8]
 800b6c2:	460b      	mov	r3, r1
 800b6c4:	00db      	lsls	r3, r3, #3
 800b6c6:	1a5b      	subs	r3, r3, r1
 800b6c8:	009b      	lsls	r3, r3, #2
 800b6ca:	4403      	add	r3, r0
 800b6cc:	3344      	adds	r3, #68	; 0x44
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	fbb2 f1f3 	udiv	r1, r2, r3
 800b6d4:	fb03 f301 	mul.w	r3, r3, r1
 800b6d8:	1ad3      	subs	r3, r2, r3
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d110      	bne.n	800b700 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800b6de:	78fa      	ldrb	r2, [r7, #3]
 800b6e0:	6879      	ldr	r1, [r7, #4]
 800b6e2:	4613      	mov	r3, r2
 800b6e4:	009b      	lsls	r3, r3, #2
 800b6e6:	4413      	add	r3, r2
 800b6e8:	009b      	lsls	r3, r3, #2
 800b6ea:	440b      	add	r3, r1
 800b6ec:	331c      	adds	r3, #28
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800b6f2:	78f9      	ldrb	r1, [r7, #3]
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	6878      	ldr	r0, [r7, #4]
 800b6fa:	f001 fea6 	bl	800d44a <USBD_LL_Transmit>
 800b6fe:	e003      	b.n	800b708 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	2200      	movs	r2, #0
 800b704:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800b708:	2300      	movs	r3, #0
 800b70a:	e000      	b.n	800b70e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800b70c:	2302      	movs	r3, #2
  }
}
 800b70e:	4618      	mov	r0, r3
 800b710:	3710      	adds	r7, #16
 800b712:	46bd      	mov	sp, r7
 800b714:	bd80      	pop	{r7, pc}

0800b716 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b716:	b580      	push	{r7, lr}
 800b718:	b084      	sub	sp, #16
 800b71a:	af00      	add	r7, sp, #0
 800b71c:	6078      	str	r0, [r7, #4]
 800b71e:	460b      	mov	r3, r1
 800b720:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b728:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800b72a:	78fb      	ldrb	r3, [r7, #3]
 800b72c:	4619      	mov	r1, r3
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f001 fed1 	bl	800d4d6 <USBD_LL_GetRxDataSize>
 800b734:	4602      	mov	r2, r0
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b742:	2b00      	cmp	r3, #0
 800b744:	d00d      	beq.n	800b762 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b74c:	68db      	ldr	r3, [r3, #12]
 800b74e:	68fa      	ldr	r2, [r7, #12]
 800b750:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b754:	68fa      	ldr	r2, [r7, #12]
 800b756:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b75a:	4611      	mov	r1, r2
 800b75c:	4798      	blx	r3

    return USBD_OK;
 800b75e:	2300      	movs	r3, #0
 800b760:	e000      	b.n	800b764 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800b762:	2302      	movs	r3, #2
  }
}
 800b764:	4618      	mov	r0, r3
 800b766:	3710      	adds	r7, #16
 800b768:	46bd      	mov	sp, r7
 800b76a:	bd80      	pop	{r7, pc}

0800b76c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b084      	sub	sp, #16
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b77a:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b782:	2b00      	cmp	r3, #0
 800b784:	d015      	beq.n	800b7b2 <USBD_CDC_EP0_RxReady+0x46>
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b78c:	2bff      	cmp	r3, #255	; 0xff
 800b78e:	d010      	beq.n	800b7b2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b796:	689b      	ldr	r3, [r3, #8]
 800b798:	68fa      	ldr	r2, [r7, #12]
 800b79a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800b79e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b7a0:	68fa      	ldr	r2, [r7, #12]
 800b7a2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b7a6:	b292      	uxth	r2, r2
 800b7a8:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	22ff      	movs	r2, #255	; 0xff
 800b7ae:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800b7b2:	2300      	movs	r3, #0
}
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	3710      	adds	r7, #16
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	bd80      	pop	{r7, pc}

0800b7bc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800b7bc:	b480      	push	{r7}
 800b7be:	b083      	sub	sp, #12
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2243      	movs	r2, #67	; 0x43
 800b7c8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800b7ca:	4b03      	ldr	r3, [pc, #12]	; (800b7d8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	370c      	adds	r7, #12
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d6:	4770      	bx	lr
 800b7d8:	200000a4 	.word	0x200000a4

0800b7dc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800b7dc:	b480      	push	{r7}
 800b7de:	b083      	sub	sp, #12
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2243      	movs	r2, #67	; 0x43
 800b7e8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800b7ea:	4b03      	ldr	r3, [pc, #12]	; (800b7f8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	370c      	adds	r7, #12
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f6:	4770      	bx	lr
 800b7f8:	20000060 	.word	0x20000060

0800b7fc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800b7fc:	b480      	push	{r7}
 800b7fe:	b083      	sub	sp, #12
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2243      	movs	r2, #67	; 0x43
 800b808:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800b80a:	4b03      	ldr	r3, [pc, #12]	; (800b818 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b80c:	4618      	mov	r0, r3
 800b80e:	370c      	adds	r7, #12
 800b810:	46bd      	mov	sp, r7
 800b812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b816:	4770      	bx	lr
 800b818:	200000e8 	.word	0x200000e8

0800b81c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800b81c:	b480      	push	{r7}
 800b81e:	b083      	sub	sp, #12
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	220a      	movs	r2, #10
 800b828:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800b82a:	4b03      	ldr	r3, [pc, #12]	; (800b838 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b82c:	4618      	mov	r0, r3
 800b82e:	370c      	adds	r7, #12
 800b830:	46bd      	mov	sp, r7
 800b832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b836:	4770      	bx	lr
 800b838:	2000001c 	.word	0x2000001c

0800b83c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800b83c:	b480      	push	{r7}
 800b83e:	b085      	sub	sp, #20
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
 800b844:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800b846:	2302      	movs	r3, #2
 800b848:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d005      	beq.n	800b85c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	683a      	ldr	r2, [r7, #0]
 800b854:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 800b858:	2300      	movs	r3, #0
 800b85a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b85c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b85e:	4618      	mov	r0, r3
 800b860:	3714      	adds	r7, #20
 800b862:	46bd      	mov	sp, r7
 800b864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b868:	4770      	bx	lr

0800b86a <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800b86a:	b480      	push	{r7}
 800b86c:	b087      	sub	sp, #28
 800b86e:	af00      	add	r7, sp, #0
 800b870:	60f8      	str	r0, [r7, #12]
 800b872:	60b9      	str	r1, [r7, #8]
 800b874:	4613      	mov	r3, r2
 800b876:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b87e:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b880:	697b      	ldr	r3, [r7, #20]
 800b882:	68ba      	ldr	r2, [r7, #8]
 800b884:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b888:	88fa      	ldrh	r2, [r7, #6]
 800b88a:	697b      	ldr	r3, [r7, #20]
 800b88c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800b890:	2300      	movs	r3, #0
}
 800b892:	4618      	mov	r0, r3
 800b894:	371c      	adds	r7, #28
 800b896:	46bd      	mov	sp, r7
 800b898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89c:	4770      	bx	lr

0800b89e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800b89e:	b480      	push	{r7}
 800b8a0:	b085      	sub	sp, #20
 800b8a2:	af00      	add	r7, sp, #0
 800b8a4:	6078      	str	r0, [r7, #4]
 800b8a6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b8ae:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	683a      	ldr	r2, [r7, #0]
 800b8b4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800b8b8:	2300      	movs	r3, #0
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	3714      	adds	r7, #20
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c4:	4770      	bx	lr

0800b8c6 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b8c6:	b580      	push	{r7, lr}
 800b8c8:	b084      	sub	sp, #16
 800b8ca:	af00      	add	r7, sp, #0
 800b8cc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b8d4:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d01c      	beq.n	800b91a <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d115      	bne.n	800b916 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	2201      	movs	r2, #1
 800b8ee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b908:	b29b      	uxth	r3, r3
 800b90a:	2181      	movs	r1, #129	; 0x81
 800b90c:	6878      	ldr	r0, [r7, #4]
 800b90e:	f001 fd9c 	bl	800d44a <USBD_LL_Transmit>

      return USBD_OK;
 800b912:	2300      	movs	r3, #0
 800b914:	e002      	b.n	800b91c <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800b916:	2301      	movs	r3, #1
 800b918:	e000      	b.n	800b91c <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800b91a:	2302      	movs	r3, #2
  }
}
 800b91c:	4618      	mov	r0, r3
 800b91e:	3710      	adds	r7, #16
 800b920:	46bd      	mov	sp, r7
 800b922:	bd80      	pop	{r7, pc}

0800b924 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b084      	sub	sp, #16
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b932:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d017      	beq.n	800b96e <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	7c1b      	ldrb	r3, [r3, #16]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d109      	bne.n	800b95a <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b94c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b950:	2101      	movs	r1, #1
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f001 fd9c 	bl	800d490 <USBD_LL_PrepareReceive>
 800b958:	e007      	b.n	800b96a <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b960:	2340      	movs	r3, #64	; 0x40
 800b962:	2101      	movs	r1, #1
 800b964:	6878      	ldr	r0, [r7, #4]
 800b966:	f001 fd93 	bl	800d490 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800b96a:	2300      	movs	r3, #0
 800b96c:	e000      	b.n	800b970 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800b96e:	2302      	movs	r3, #2
  }
}
 800b970:	4618      	mov	r0, r3
 800b972:	3710      	adds	r7, #16
 800b974:	46bd      	mov	sp, r7
 800b976:	bd80      	pop	{r7, pc}

0800b978 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b084      	sub	sp, #16
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	60f8      	str	r0, [r7, #12]
 800b980:	60b9      	str	r1, [r7, #8]
 800b982:	4613      	mov	r3, r2
 800b984:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d101      	bne.n	800b990 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b98c:	2302      	movs	r3, #2
 800b98e:	e01a      	b.n	800b9c6 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b996:	2b00      	cmp	r3, #0
 800b998:	d003      	beq.n	800b9a2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	2200      	movs	r2, #0
 800b99e:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d003      	beq.n	800b9b0 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	68ba      	ldr	r2, [r7, #8]
 800b9ac:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	2201      	movs	r2, #1
 800b9b4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	79fa      	ldrb	r2, [r7, #7]
 800b9bc:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b9be:	68f8      	ldr	r0, [r7, #12]
 800b9c0:	f001 fc0e 	bl	800d1e0 <USBD_LL_Init>

  return USBD_OK;
 800b9c4:	2300      	movs	r3, #0
}
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	3710      	adds	r7, #16
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	bd80      	pop	{r7, pc}

0800b9ce <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b9ce:	b480      	push	{r7}
 800b9d0:	b085      	sub	sp, #20
 800b9d2:	af00      	add	r7, sp, #0
 800b9d4:	6078      	str	r0, [r7, #4]
 800b9d6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800b9d8:	2300      	movs	r3, #0
 800b9da:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d006      	beq.n	800b9f0 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	683a      	ldr	r2, [r7, #0]
 800b9e6:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	73fb      	strb	r3, [r7, #15]
 800b9ee:	e001      	b.n	800b9f4 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800b9f0:	2302      	movs	r3, #2
 800b9f2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b9f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	3714      	adds	r7, #20
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba00:	4770      	bx	lr

0800ba02 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800ba02:	b580      	push	{r7, lr}
 800ba04:	b082      	sub	sp, #8
 800ba06:	af00      	add	r7, sp, #0
 800ba08:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800ba0a:	6878      	ldr	r0, [r7, #4]
 800ba0c:	f001 fc34 	bl	800d278 <USBD_LL_Start>

  return USBD_OK;
 800ba10:	2300      	movs	r3, #0
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	3708      	adds	r7, #8
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd80      	pop	{r7, pc}

0800ba1a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800ba1a:	b480      	push	{r7}
 800ba1c:	b083      	sub	sp, #12
 800ba1e:	af00      	add	r7, sp, #0
 800ba20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ba22:	2300      	movs	r3, #0
}
 800ba24:	4618      	mov	r0, r3
 800ba26:	370c      	adds	r7, #12
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2e:	4770      	bx	lr

0800ba30 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b084      	sub	sp, #16
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
 800ba38:	460b      	mov	r3, r1
 800ba3a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800ba3c:	2302      	movs	r3, #2
 800ba3e:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d00c      	beq.n	800ba64 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	78fa      	ldrb	r2, [r7, #3]
 800ba54:	4611      	mov	r1, r2
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	4798      	blx	r3
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d101      	bne.n	800ba64 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800ba60:	2300      	movs	r3, #0
 800ba62:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800ba64:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	3710      	adds	r7, #16
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}

0800ba6e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800ba6e:	b580      	push	{r7, lr}
 800ba70:	b082      	sub	sp, #8
 800ba72:	af00      	add	r7, sp, #0
 800ba74:	6078      	str	r0, [r7, #4]
 800ba76:	460b      	mov	r3, r1
 800ba78:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ba80:	685b      	ldr	r3, [r3, #4]
 800ba82:	78fa      	ldrb	r2, [r7, #3]
 800ba84:	4611      	mov	r1, r2
 800ba86:	6878      	ldr	r0, [r7, #4]
 800ba88:	4798      	blx	r3
  return USBD_OK;
 800ba8a:	2300      	movs	r3, #0
}
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	3708      	adds	r7, #8
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd80      	pop	{r7, pc}

0800ba94 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b082      	sub	sp, #8
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
 800ba9c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800baa4:	6839      	ldr	r1, [r7, #0]
 800baa6:	4618      	mov	r0, r3
 800baa8:	f000 fe94 	bl	800c7d4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2201      	movs	r2, #1
 800bab0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800baba:	461a      	mov	r2, r3
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800bac8:	f003 031f 	and.w	r3, r3, #31
 800bacc:	2b01      	cmp	r3, #1
 800bace:	d00c      	beq.n	800baea <USBD_LL_SetupStage+0x56>
 800bad0:	2b01      	cmp	r3, #1
 800bad2:	d302      	bcc.n	800bada <USBD_LL_SetupStage+0x46>
 800bad4:	2b02      	cmp	r3, #2
 800bad6:	d010      	beq.n	800bafa <USBD_LL_SetupStage+0x66>
 800bad8:	e017      	b.n	800bb0a <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800bae0:	4619      	mov	r1, r3
 800bae2:	6878      	ldr	r0, [r7, #4]
 800bae4:	f000 fa04 	bl	800bef0 <USBD_StdDevReq>
    break;
 800bae8:	e01a      	b.n	800bb20 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800baf0:	4619      	mov	r1, r3
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f000 fa66 	bl	800bfc4 <USBD_StdItfReq>
    break;
 800baf8:	e012      	b.n	800bb20 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800bb00:	4619      	mov	r1, r3
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f000 faa4 	bl	800c050 <USBD_StdEPReq>
    break;
 800bb08:	e00a      	b.n	800bb20 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800bb10:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bb14:	b2db      	uxtb	r3, r3
 800bb16:	4619      	mov	r1, r3
 800bb18:	6878      	ldr	r0, [r7, #4]
 800bb1a:	f001 fc0d 	bl	800d338 <USBD_LL_StallEP>
    break;
 800bb1e:	bf00      	nop
  }

  return USBD_OK;
 800bb20:	2300      	movs	r3, #0
}
 800bb22:	4618      	mov	r0, r3
 800bb24:	3708      	adds	r7, #8
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bd80      	pop	{r7, pc}

0800bb2a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bb2a:	b580      	push	{r7, lr}
 800bb2c:	b086      	sub	sp, #24
 800bb2e:	af00      	add	r7, sp, #0
 800bb30:	60f8      	str	r0, [r7, #12]
 800bb32:	460b      	mov	r3, r1
 800bb34:	607a      	str	r2, [r7, #4]
 800bb36:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800bb38:	7afb      	ldrb	r3, [r7, #11]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d14b      	bne.n	800bbd6 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800bb44:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800bb4c:	2b03      	cmp	r3, #3
 800bb4e:	d134      	bne.n	800bbba <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800bb50:	697b      	ldr	r3, [r7, #20]
 800bb52:	68da      	ldr	r2, [r3, #12]
 800bb54:	697b      	ldr	r3, [r7, #20]
 800bb56:	691b      	ldr	r3, [r3, #16]
 800bb58:	429a      	cmp	r2, r3
 800bb5a:	d919      	bls.n	800bb90 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800bb5c:	697b      	ldr	r3, [r7, #20]
 800bb5e:	68da      	ldr	r2, [r3, #12]
 800bb60:	697b      	ldr	r3, [r7, #20]
 800bb62:	691b      	ldr	r3, [r3, #16]
 800bb64:	1ad2      	subs	r2, r2, r3
 800bb66:	697b      	ldr	r3, [r7, #20]
 800bb68:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800bb6a:	697b      	ldr	r3, [r7, #20]
 800bb6c:	68da      	ldr	r2, [r3, #12]
 800bb6e:	697b      	ldr	r3, [r7, #20]
 800bb70:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800bb72:	429a      	cmp	r2, r3
 800bb74:	d203      	bcs.n	800bb7e <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800bb76:	697b      	ldr	r3, [r7, #20]
 800bb78:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800bb7a:	b29b      	uxth	r3, r3
 800bb7c:	e002      	b.n	800bb84 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800bb7e:	697b      	ldr	r3, [r7, #20]
 800bb80:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800bb82:	b29b      	uxth	r3, r3
 800bb84:	461a      	mov	r2, r3
 800bb86:	6879      	ldr	r1, [r7, #4]
 800bb88:	68f8      	ldr	r0, [r7, #12]
 800bb8a:	f000 ff17 	bl	800c9bc <USBD_CtlContinueRx>
 800bb8e:	e038      	b.n	800bc02 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800bb96:	691b      	ldr	r3, [r3, #16]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d00a      	beq.n	800bbb2 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800bba2:	2b03      	cmp	r3, #3
 800bba4:	d105      	bne.n	800bbb2 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800bbac:	691b      	ldr	r3, [r3, #16]
 800bbae:	68f8      	ldr	r0, [r7, #12]
 800bbb0:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800bbb2:	68f8      	ldr	r0, [r7, #12]
 800bbb4:	f000 ff14 	bl	800c9e0 <USBD_CtlSendStatus>
 800bbb8:	e023      	b.n	800bc02 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800bbc0:	2b05      	cmp	r3, #5
 800bbc2:	d11e      	bne.n	800bc02 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800bbcc:	2100      	movs	r1, #0
 800bbce:	68f8      	ldr	r0, [r7, #12]
 800bbd0:	f001 fbb2 	bl	800d338 <USBD_LL_StallEP>
 800bbd4:	e015      	b.n	800bc02 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800bbdc:	699b      	ldr	r3, [r3, #24]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d00d      	beq.n	800bbfe <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800bbe8:	2b03      	cmp	r3, #3
 800bbea:	d108      	bne.n	800bbfe <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800bbf2:	699b      	ldr	r3, [r3, #24]
 800bbf4:	7afa      	ldrb	r2, [r7, #11]
 800bbf6:	4611      	mov	r1, r2
 800bbf8:	68f8      	ldr	r0, [r7, #12]
 800bbfa:	4798      	blx	r3
 800bbfc:	e001      	b.n	800bc02 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bbfe:	2302      	movs	r3, #2
 800bc00:	e000      	b.n	800bc04 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800bc02:	2300      	movs	r3, #0
}
 800bc04:	4618      	mov	r0, r3
 800bc06:	3718      	adds	r7, #24
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	bd80      	pop	{r7, pc}

0800bc0c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b086      	sub	sp, #24
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	60f8      	str	r0, [r7, #12]
 800bc14:	460b      	mov	r3, r1
 800bc16:	607a      	str	r2, [r7, #4]
 800bc18:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800bc1a:	7afb      	ldrb	r3, [r7, #11]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d17f      	bne.n	800bd20 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	3314      	adds	r3, #20
 800bc24:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800bc2c:	2b02      	cmp	r3, #2
 800bc2e:	d15c      	bne.n	800bcea <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800bc30:	697b      	ldr	r3, [r7, #20]
 800bc32:	68da      	ldr	r2, [r3, #12]
 800bc34:	697b      	ldr	r3, [r7, #20]
 800bc36:	691b      	ldr	r3, [r3, #16]
 800bc38:	429a      	cmp	r2, r3
 800bc3a:	d915      	bls.n	800bc68 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800bc3c:	697b      	ldr	r3, [r7, #20]
 800bc3e:	68da      	ldr	r2, [r3, #12]
 800bc40:	697b      	ldr	r3, [r7, #20]
 800bc42:	691b      	ldr	r3, [r3, #16]
 800bc44:	1ad2      	subs	r2, r2, r3
 800bc46:	697b      	ldr	r3, [r7, #20]
 800bc48:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800bc4a:	697b      	ldr	r3, [r7, #20]
 800bc4c:	68db      	ldr	r3, [r3, #12]
 800bc4e:	b29b      	uxth	r3, r3
 800bc50:	461a      	mov	r2, r3
 800bc52:	6879      	ldr	r1, [r7, #4]
 800bc54:	68f8      	ldr	r0, [r7, #12]
 800bc56:	f000 fe81 	bl	800c95c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	2100      	movs	r1, #0
 800bc60:	68f8      	ldr	r0, [r7, #12]
 800bc62:	f001 fc15 	bl	800d490 <USBD_LL_PrepareReceive>
 800bc66:	e04e      	b.n	800bd06 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800bc68:	697b      	ldr	r3, [r7, #20]
 800bc6a:	689b      	ldr	r3, [r3, #8]
 800bc6c:	697a      	ldr	r2, [r7, #20]
 800bc6e:	6912      	ldr	r2, [r2, #16]
 800bc70:	fbb3 f1f2 	udiv	r1, r3, r2
 800bc74:	fb02 f201 	mul.w	r2, r2, r1
 800bc78:	1a9b      	subs	r3, r3, r2
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d11c      	bne.n	800bcb8 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800bc7e:	697b      	ldr	r3, [r7, #20]
 800bc80:	689a      	ldr	r2, [r3, #8]
 800bc82:	697b      	ldr	r3, [r7, #20]
 800bc84:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800bc86:	429a      	cmp	r2, r3
 800bc88:	d316      	bcc.n	800bcb8 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800bc8a:	697b      	ldr	r3, [r7, #20]
 800bc8c:	689a      	ldr	r2, [r3, #8]
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800bc94:	429a      	cmp	r2, r3
 800bc96:	d20f      	bcs.n	800bcb8 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bc98:	2200      	movs	r2, #0
 800bc9a:	2100      	movs	r1, #0
 800bc9c:	68f8      	ldr	r0, [r7, #12]
 800bc9e:	f000 fe5d 	bl	800c95c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	2200      	movs	r2, #0
 800bca6:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800bcaa:	2300      	movs	r3, #0
 800bcac:	2200      	movs	r2, #0
 800bcae:	2100      	movs	r1, #0
 800bcb0:	68f8      	ldr	r0, [r7, #12]
 800bcb2:	f001 fbed 	bl	800d490 <USBD_LL_PrepareReceive>
 800bcb6:	e026      	b.n	800bd06 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800bcbe:	68db      	ldr	r3, [r3, #12]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d00a      	beq.n	800bcda <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800bcca:	2b03      	cmp	r3, #3
 800bccc:	d105      	bne.n	800bcda <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800bcd4:	68db      	ldr	r3, [r3, #12]
 800bcd6:	68f8      	ldr	r0, [r7, #12]
 800bcd8:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800bcda:	2180      	movs	r1, #128	; 0x80
 800bcdc:	68f8      	ldr	r0, [r7, #12]
 800bcde:	f001 fb2b 	bl	800d338 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800bce2:	68f8      	ldr	r0, [r7, #12]
 800bce4:	f000 fe8f 	bl	800ca06 <USBD_CtlReceiveStatus>
 800bce8:	e00d      	b.n	800bd06 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800bcf0:	2b04      	cmp	r3, #4
 800bcf2:	d004      	beq.n	800bcfe <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d103      	bne.n	800bd06 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800bcfe:	2180      	movs	r1, #128	; 0x80
 800bd00:	68f8      	ldr	r0, [r7, #12]
 800bd02:	f001 fb19 	bl	800d338 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800bd0c:	2b01      	cmp	r3, #1
 800bd0e:	d11d      	bne.n	800bd4c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800bd10:	68f8      	ldr	r0, [r7, #12]
 800bd12:	f7ff fe82 	bl	800ba1a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	2200      	movs	r2, #0
 800bd1a:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800bd1e:	e015      	b.n	800bd4c <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800bd26:	695b      	ldr	r3, [r3, #20]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d00d      	beq.n	800bd48 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800bd32:	2b03      	cmp	r3, #3
 800bd34:	d108      	bne.n	800bd48 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800bd3c:	695b      	ldr	r3, [r3, #20]
 800bd3e:	7afa      	ldrb	r2, [r7, #11]
 800bd40:	4611      	mov	r1, r2
 800bd42:	68f8      	ldr	r0, [r7, #12]
 800bd44:	4798      	blx	r3
 800bd46:	e001      	b.n	800bd4c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bd48:	2302      	movs	r3, #2
 800bd4a:	e000      	b.n	800bd4e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800bd4c:	2300      	movs	r3, #0
}
 800bd4e:	4618      	mov	r0, r3
 800bd50:	3718      	adds	r7, #24
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}

0800bd56 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800bd56:	b580      	push	{r7, lr}
 800bd58:	b082      	sub	sp, #8
 800bd5a:	af00      	add	r7, sp, #0
 800bd5c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bd5e:	2340      	movs	r3, #64	; 0x40
 800bd60:	2200      	movs	r2, #0
 800bd62:	2100      	movs	r1, #0
 800bd64:	6878      	ldr	r0, [r7, #4]
 800bd66:	f001 faa2 	bl	800d2ae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	2201      	movs	r2, #1
 800bd6e:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2240      	movs	r2, #64	; 0x40
 800bd76:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bd7a:	2340      	movs	r3, #64	; 0x40
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	2180      	movs	r1, #128	; 0x80
 800bd80:	6878      	ldr	r0, [r7, #4]
 800bd82:	f001 fa94 	bl	800d2ae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	2201      	movs	r2, #1
 800bd8a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2240      	movs	r2, #64	; 0x40
 800bd90:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	2201      	movs	r2, #1
 800bd96:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	2200      	movs	r2, #0
 800bda6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2200      	movs	r2, #0
 800bdac:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d009      	beq.n	800bdce <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800bdc0:	685b      	ldr	r3, [r3, #4]
 800bdc2:	687a      	ldr	r2, [r7, #4]
 800bdc4:	6852      	ldr	r2, [r2, #4]
 800bdc6:	b2d2      	uxtb	r2, r2
 800bdc8:	4611      	mov	r1, r2
 800bdca:	6878      	ldr	r0, [r7, #4]
 800bdcc:	4798      	blx	r3
  }

  return USBD_OK;
 800bdce:	2300      	movs	r3, #0
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	3708      	adds	r7, #8
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bd80      	pop	{r7, pc}

0800bdd8 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800bdd8:	b480      	push	{r7}
 800bdda:	b083      	sub	sp, #12
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
 800bde0:	460b      	mov	r3, r1
 800bde2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	78fa      	ldrb	r2, [r7, #3]
 800bde8:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800bdea:	2300      	movs	r3, #0
}
 800bdec:	4618      	mov	r0, r3
 800bdee:	370c      	adds	r7, #12
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf6:	4770      	bx	lr

0800bdf8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800bdf8:	b480      	push	{r7}
 800bdfa:	b083      	sub	sp, #12
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2204      	movs	r2, #4
 800be10:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800be14:	2300      	movs	r3, #0
}
 800be16:	4618      	mov	r0, r3
 800be18:	370c      	adds	r7, #12
 800be1a:	46bd      	mov	sp, r7
 800be1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be20:	4770      	bx	lr

0800be22 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800be22:	b480      	push	{r7}
 800be24:	b083      	sub	sp, #12
 800be26:	af00      	add	r7, sp, #0
 800be28:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800be36:	2300      	movs	r3, #0
}
 800be38:	4618      	mov	r0, r3
 800be3a:	370c      	adds	r7, #12
 800be3c:	46bd      	mov	sp, r7
 800be3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be42:	4770      	bx	lr

0800be44 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b082      	sub	sp, #8
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800be52:	2b03      	cmp	r3, #3
 800be54:	d10b      	bne.n	800be6e <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800be5c:	69db      	ldr	r3, [r3, #28]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d005      	beq.n	800be6e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800be68:	69db      	ldr	r3, [r3, #28]
 800be6a:	6878      	ldr	r0, [r7, #4]
 800be6c:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800be6e:	2300      	movs	r3, #0
}
 800be70:	4618      	mov	r0, r3
 800be72:	3708      	adds	r7, #8
 800be74:	46bd      	mov	sp, r7
 800be76:	bd80      	pop	{r7, pc}

0800be78 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800be78:	b480      	push	{r7}
 800be7a:	b083      	sub	sp, #12
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
 800be80:	460b      	mov	r3, r1
 800be82:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800be84:	2300      	movs	r3, #0
}
 800be86:	4618      	mov	r0, r3
 800be88:	370c      	adds	r7, #12
 800be8a:	46bd      	mov	sp, r7
 800be8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be90:	4770      	bx	lr

0800be92 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800be92:	b480      	push	{r7}
 800be94:	b083      	sub	sp, #12
 800be96:	af00      	add	r7, sp, #0
 800be98:	6078      	str	r0, [r7, #4]
 800be9a:	460b      	mov	r3, r1
 800be9c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800be9e:	2300      	movs	r3, #0
}
 800bea0:	4618      	mov	r0, r3
 800bea2:	370c      	adds	r7, #12
 800bea4:	46bd      	mov	sp, r7
 800bea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beaa:	4770      	bx	lr

0800beac <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 800beac:	b480      	push	{r7}
 800beae:	b083      	sub	sp, #12
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800beb4:	2300      	movs	r3, #0
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	370c      	adds	r7, #12
 800beba:	46bd      	mov	sp, r7
 800bebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec0:	4770      	bx	lr

0800bec2 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 800bec2:	b580      	push	{r7, lr}
 800bec4:	b082      	sub	sp, #8
 800bec6:	af00      	add	r7, sp, #0
 800bec8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	2201      	movs	r2, #1
 800bece:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800bed8:	685b      	ldr	r3, [r3, #4]
 800beda:	687a      	ldr	r2, [r7, #4]
 800bedc:	6852      	ldr	r2, [r2, #4]
 800bede:	b2d2      	uxtb	r2, r2
 800bee0:	4611      	mov	r1, r2
 800bee2:	6878      	ldr	r0, [r7, #4]
 800bee4:	4798      	blx	r3

  return USBD_OK;
 800bee6:	2300      	movs	r3, #0
}
 800bee8:	4618      	mov	r0, r3
 800beea:	3708      	adds	r7, #8
 800beec:	46bd      	mov	sp, r7
 800beee:	bd80      	pop	{r7, pc}

0800bef0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b084      	sub	sp, #16
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
 800bef8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800befa:	2300      	movs	r3, #0
 800befc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	781b      	ldrb	r3, [r3, #0]
 800bf02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bf06:	2b20      	cmp	r3, #32
 800bf08:	d004      	beq.n	800bf14 <USBD_StdDevReq+0x24>
 800bf0a:	2b40      	cmp	r3, #64	; 0x40
 800bf0c:	d002      	beq.n	800bf14 <USBD_StdDevReq+0x24>
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d008      	beq.n	800bf24 <USBD_StdDevReq+0x34>
 800bf12:	e04c      	b.n	800bfae <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800bf1a:	689b      	ldr	r3, [r3, #8]
 800bf1c:	6839      	ldr	r1, [r7, #0]
 800bf1e:	6878      	ldr	r0, [r7, #4]
 800bf20:	4798      	blx	r3
    break;
 800bf22:	e049      	b.n	800bfb8 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	785b      	ldrb	r3, [r3, #1]
 800bf28:	2b09      	cmp	r3, #9
 800bf2a:	d83a      	bhi.n	800bfa2 <USBD_StdDevReq+0xb2>
 800bf2c:	a201      	add	r2, pc, #4	; (adr r2, 800bf34 <USBD_StdDevReq+0x44>)
 800bf2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf32:	bf00      	nop
 800bf34:	0800bf85 	.word	0x0800bf85
 800bf38:	0800bf99 	.word	0x0800bf99
 800bf3c:	0800bfa3 	.word	0x0800bfa3
 800bf40:	0800bf8f 	.word	0x0800bf8f
 800bf44:	0800bfa3 	.word	0x0800bfa3
 800bf48:	0800bf67 	.word	0x0800bf67
 800bf4c:	0800bf5d 	.word	0x0800bf5d
 800bf50:	0800bfa3 	.word	0x0800bfa3
 800bf54:	0800bf7b 	.word	0x0800bf7b
 800bf58:	0800bf71 	.word	0x0800bf71
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800bf5c:	6839      	ldr	r1, [r7, #0]
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	f000 f9d2 	bl	800c308 <USBD_GetDescriptor>
      break;
 800bf64:	e022      	b.n	800bfac <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800bf66:	6839      	ldr	r1, [r7, #0]
 800bf68:	6878      	ldr	r0, [r7, #4]
 800bf6a:	f000 fac7 	bl	800c4fc <USBD_SetAddress>
      break;
 800bf6e:	e01d      	b.n	800bfac <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800bf70:	6839      	ldr	r1, [r7, #0]
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	f000 fb04 	bl	800c580 <USBD_SetConfig>
      break;
 800bf78:	e018      	b.n	800bfac <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800bf7a:	6839      	ldr	r1, [r7, #0]
 800bf7c:	6878      	ldr	r0, [r7, #4]
 800bf7e:	f000 fb8d 	bl	800c69c <USBD_GetConfig>
      break;
 800bf82:	e013      	b.n	800bfac <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800bf84:	6839      	ldr	r1, [r7, #0]
 800bf86:	6878      	ldr	r0, [r7, #4]
 800bf88:	f000 fbbc 	bl	800c704 <USBD_GetStatus>
      break;
 800bf8c:	e00e      	b.n	800bfac <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800bf8e:	6839      	ldr	r1, [r7, #0]
 800bf90:	6878      	ldr	r0, [r7, #4]
 800bf92:	f000 fbea 	bl	800c76a <USBD_SetFeature>
      break;
 800bf96:	e009      	b.n	800bfac <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800bf98:	6839      	ldr	r1, [r7, #0]
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	f000 fbf9 	bl	800c792 <USBD_ClrFeature>
      break;
 800bfa0:	e004      	b.n	800bfac <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800bfa2:	6839      	ldr	r1, [r7, #0]
 800bfa4:	6878      	ldr	r0, [r7, #4]
 800bfa6:	f000 fc52 	bl	800c84e <USBD_CtlError>
      break;
 800bfaa:	bf00      	nop
    }
    break;
 800bfac:	e004      	b.n	800bfb8 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800bfae:	6839      	ldr	r1, [r7, #0]
 800bfb0:	6878      	ldr	r0, [r7, #4]
 800bfb2:	f000 fc4c 	bl	800c84e <USBD_CtlError>
    break;
 800bfb6:	bf00      	nop
  }

  return ret;
 800bfb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfba:	4618      	mov	r0, r3
 800bfbc:	3710      	adds	r7, #16
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	bd80      	pop	{r7, pc}
 800bfc2:	bf00      	nop

0800bfc4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b084      	sub	sp, #16
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
 800bfcc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bfce:	2300      	movs	r3, #0
 800bfd0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	781b      	ldrb	r3, [r3, #0]
 800bfd6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bfda:	2b20      	cmp	r3, #32
 800bfdc:	d003      	beq.n	800bfe6 <USBD_StdItfReq+0x22>
 800bfde:	2b40      	cmp	r3, #64	; 0x40
 800bfe0:	d001      	beq.n	800bfe6 <USBD_StdItfReq+0x22>
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d12a      	bne.n	800c03c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800bfec:	3b01      	subs	r3, #1
 800bfee:	2b02      	cmp	r3, #2
 800bff0:	d81d      	bhi.n	800c02e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bff2:	683b      	ldr	r3, [r7, #0]
 800bff4:	889b      	ldrh	r3, [r3, #4]
 800bff6:	b2db      	uxtb	r3, r3
 800bff8:	2b01      	cmp	r3, #1
 800bffa:	d813      	bhi.n	800c024 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c002:	689b      	ldr	r3, [r3, #8]
 800c004:	6839      	ldr	r1, [r7, #0]
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	4798      	blx	r3
 800c00a:	4603      	mov	r3, r0
 800c00c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	88db      	ldrh	r3, [r3, #6]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d110      	bne.n	800c038 <USBD_StdItfReq+0x74>
 800c016:	7bfb      	ldrb	r3, [r7, #15]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d10d      	bne.n	800c038 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 800c01c:	6878      	ldr	r0, [r7, #4]
 800c01e:	f000 fcdf 	bl	800c9e0 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800c022:	e009      	b.n	800c038 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800c024:	6839      	ldr	r1, [r7, #0]
 800c026:	6878      	ldr	r0, [r7, #4]
 800c028:	f000 fc11 	bl	800c84e <USBD_CtlError>
      break;
 800c02c:	e004      	b.n	800c038 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800c02e:	6839      	ldr	r1, [r7, #0]
 800c030:	6878      	ldr	r0, [r7, #4]
 800c032:	f000 fc0c 	bl	800c84e <USBD_CtlError>
      break;
 800c036:	e000      	b.n	800c03a <USBD_StdItfReq+0x76>
      break;
 800c038:	bf00      	nop
    }
    break;
 800c03a:	e004      	b.n	800c046 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800c03c:	6839      	ldr	r1, [r7, #0]
 800c03e:	6878      	ldr	r0, [r7, #4]
 800c040:	f000 fc05 	bl	800c84e <USBD_CtlError>
    break;
 800c044:	bf00      	nop
  }

  return USBD_OK;
 800c046:	2300      	movs	r3, #0
}
 800c048:	4618      	mov	r0, r3
 800c04a:	3710      	adds	r7, #16
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bd80      	pop	{r7, pc}

0800c050 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b084      	sub	sp, #16
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
 800c058:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c05a:	2300      	movs	r3, #0
 800c05c:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800c05e:	683b      	ldr	r3, [r7, #0]
 800c060:	889b      	ldrh	r3, [r3, #4]
 800c062:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	781b      	ldrb	r3, [r3, #0]
 800c068:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c06c:	2b20      	cmp	r3, #32
 800c06e:	d004      	beq.n	800c07a <USBD_StdEPReq+0x2a>
 800c070:	2b40      	cmp	r3, #64	; 0x40
 800c072:	d002      	beq.n	800c07a <USBD_StdEPReq+0x2a>
 800c074:	2b00      	cmp	r3, #0
 800c076:	d008      	beq.n	800c08a <USBD_StdEPReq+0x3a>
 800c078:	e13b      	b.n	800c2f2 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c080:	689b      	ldr	r3, [r3, #8]
 800c082:	6839      	ldr	r1, [r7, #0]
 800c084:	6878      	ldr	r0, [r7, #4]
 800c086:	4798      	blx	r3
    break;
 800c088:	e138      	b.n	800c2fc <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	781b      	ldrb	r3, [r3, #0]
 800c08e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c092:	2b20      	cmp	r3, #32
 800c094:	d10a      	bne.n	800c0ac <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c09c:	689b      	ldr	r3, [r3, #8]
 800c09e:	6839      	ldr	r1, [r7, #0]
 800c0a0:	6878      	ldr	r0, [r7, #4]
 800c0a2:	4798      	blx	r3
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	73fb      	strb	r3, [r7, #15]

      return ret;
 800c0a8:	7bfb      	ldrb	r3, [r7, #15]
 800c0aa:	e128      	b.n	800c2fe <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	785b      	ldrb	r3, [r3, #1]
 800c0b0:	2b01      	cmp	r3, #1
 800c0b2:	d03e      	beq.n	800c132 <USBD_StdEPReq+0xe2>
 800c0b4:	2b03      	cmp	r3, #3
 800c0b6:	d002      	beq.n	800c0be <USBD_StdEPReq+0x6e>
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d070      	beq.n	800c19e <USBD_StdEPReq+0x14e>
 800c0bc:	e113      	b.n	800c2e6 <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c0c4:	2b02      	cmp	r3, #2
 800c0c6:	d002      	beq.n	800c0ce <USBD_StdEPReq+0x7e>
 800c0c8:	2b03      	cmp	r3, #3
 800c0ca:	d015      	beq.n	800c0f8 <USBD_StdEPReq+0xa8>
 800c0cc:	e02b      	b.n	800c126 <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c0ce:	7bbb      	ldrb	r3, [r7, #14]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d00c      	beq.n	800c0ee <USBD_StdEPReq+0x9e>
 800c0d4:	7bbb      	ldrb	r3, [r7, #14]
 800c0d6:	2b80      	cmp	r3, #128	; 0x80
 800c0d8:	d009      	beq.n	800c0ee <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800c0da:	7bbb      	ldrb	r3, [r7, #14]
 800c0dc:	4619      	mov	r1, r3
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	f001 f92a 	bl	800d338 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800c0e4:	2180      	movs	r1, #128	; 0x80
 800c0e6:	6878      	ldr	r0, [r7, #4]
 800c0e8:	f001 f926 	bl	800d338 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c0ec:	e020      	b.n	800c130 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 800c0ee:	6839      	ldr	r1, [r7, #0]
 800c0f0:	6878      	ldr	r0, [r7, #4]
 800c0f2:	f000 fbac 	bl	800c84e <USBD_CtlError>
        break;
 800c0f6:	e01b      	b.n	800c130 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	885b      	ldrh	r3, [r3, #2]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d10e      	bne.n	800c11e <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c100:	7bbb      	ldrb	r3, [r7, #14]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d00b      	beq.n	800c11e <USBD_StdEPReq+0xce>
 800c106:	7bbb      	ldrb	r3, [r7, #14]
 800c108:	2b80      	cmp	r3, #128	; 0x80
 800c10a:	d008      	beq.n	800c11e <USBD_StdEPReq+0xce>
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	88db      	ldrh	r3, [r3, #6]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d104      	bne.n	800c11e <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800c114:	7bbb      	ldrb	r3, [r7, #14]
 800c116:	4619      	mov	r1, r3
 800c118:	6878      	ldr	r0, [r7, #4]
 800c11a:	f001 f90d 	bl	800d338 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800c11e:	6878      	ldr	r0, [r7, #4]
 800c120:	f000 fc5e 	bl	800c9e0 <USBD_CtlSendStatus>

        break;
 800c124:	e004      	b.n	800c130 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 800c126:	6839      	ldr	r1, [r7, #0]
 800c128:	6878      	ldr	r0, [r7, #4]
 800c12a:	f000 fb90 	bl	800c84e <USBD_CtlError>
        break;
 800c12e:	bf00      	nop
      }
      break;
 800c130:	e0de      	b.n	800c2f0 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c138:	2b02      	cmp	r3, #2
 800c13a:	d002      	beq.n	800c142 <USBD_StdEPReq+0xf2>
 800c13c:	2b03      	cmp	r3, #3
 800c13e:	d015      	beq.n	800c16c <USBD_StdEPReq+0x11c>
 800c140:	e026      	b.n	800c190 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c142:	7bbb      	ldrb	r3, [r7, #14]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d00c      	beq.n	800c162 <USBD_StdEPReq+0x112>
 800c148:	7bbb      	ldrb	r3, [r7, #14]
 800c14a:	2b80      	cmp	r3, #128	; 0x80
 800c14c:	d009      	beq.n	800c162 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800c14e:	7bbb      	ldrb	r3, [r7, #14]
 800c150:	4619      	mov	r1, r3
 800c152:	6878      	ldr	r0, [r7, #4]
 800c154:	f001 f8f0 	bl	800d338 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800c158:	2180      	movs	r1, #128	; 0x80
 800c15a:	6878      	ldr	r0, [r7, #4]
 800c15c:	f001 f8ec 	bl	800d338 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c160:	e01c      	b.n	800c19c <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800c162:	6839      	ldr	r1, [r7, #0]
 800c164:	6878      	ldr	r0, [r7, #4]
 800c166:	f000 fb72 	bl	800c84e <USBD_CtlError>
        break;
 800c16a:	e017      	b.n	800c19c <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	885b      	ldrh	r3, [r3, #2]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d112      	bne.n	800c19a <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800c174:	7bbb      	ldrb	r3, [r7, #14]
 800c176:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d004      	beq.n	800c188 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800c17e:	7bbb      	ldrb	r3, [r7, #14]
 800c180:	4619      	mov	r1, r3
 800c182:	6878      	ldr	r0, [r7, #4]
 800c184:	f001 f8f7 	bl	800d376 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f000 fc29 	bl	800c9e0 <USBD_CtlSendStatus>
        }
        break;
 800c18e:	e004      	b.n	800c19a <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800c190:	6839      	ldr	r1, [r7, #0]
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	f000 fb5b 	bl	800c84e <USBD_CtlError>
        break;
 800c198:	e000      	b.n	800c19c <USBD_StdEPReq+0x14c>
        break;
 800c19a:	bf00      	nop
      }
      break;
 800c19c:	e0a8      	b.n	800c2f0 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c1a4:	2b02      	cmp	r3, #2
 800c1a6:	d002      	beq.n	800c1ae <USBD_StdEPReq+0x15e>
 800c1a8:	2b03      	cmp	r3, #3
 800c1aa:	d031      	beq.n	800c210 <USBD_StdEPReq+0x1c0>
 800c1ac:	e095      	b.n	800c2da <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c1ae:	7bbb      	ldrb	r3, [r7, #14]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d007      	beq.n	800c1c4 <USBD_StdEPReq+0x174>
 800c1b4:	7bbb      	ldrb	r3, [r7, #14]
 800c1b6:	2b80      	cmp	r3, #128	; 0x80
 800c1b8:	d004      	beq.n	800c1c4 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800c1ba:	6839      	ldr	r1, [r7, #0]
 800c1bc:	6878      	ldr	r0, [r7, #4]
 800c1be:	f000 fb46 	bl	800c84e <USBD_CtlError>
          break;
 800c1c2:	e08f      	b.n	800c2e4 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800c1c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	da0b      	bge.n	800c1e4 <USBD_StdEPReq+0x194>
 800c1cc:	7bbb      	ldrb	r3, [r7, #14]
 800c1ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c1d2:	4613      	mov	r3, r2
 800c1d4:	009b      	lsls	r3, r3, #2
 800c1d6:	4413      	add	r3, r2
 800c1d8:	009b      	lsls	r3, r3, #2
 800c1da:	3310      	adds	r3, #16
 800c1dc:	687a      	ldr	r2, [r7, #4]
 800c1de:	4413      	add	r3, r2
 800c1e0:	3304      	adds	r3, #4
 800c1e2:	e00a      	b.n	800c1fa <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 800c1e4:	7bbb      	ldrb	r3, [r7, #14]
 800c1e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800c1ea:	4613      	mov	r3, r2
 800c1ec:	009b      	lsls	r3, r3, #2
 800c1ee:	4413      	add	r3, r2
 800c1f0:	009b      	lsls	r3, r3, #2
 800c1f2:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800c1f6:	687a      	ldr	r2, [r7, #4]
 800c1f8:	4413      	add	r3, r2
 800c1fa:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800c1fc:	68bb      	ldr	r3, [r7, #8]
 800c1fe:	2200      	movs	r2, #0
 800c200:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c202:	68bb      	ldr	r3, [r7, #8]
 800c204:	2202      	movs	r2, #2
 800c206:	4619      	mov	r1, r3
 800c208:	6878      	ldr	r0, [r7, #4]
 800c20a:	f000 fb8b 	bl	800c924 <USBD_CtlSendData>
          break;
 800c20e:	e069      	b.n	800c2e4 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800c210:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c214:	2b00      	cmp	r3, #0
 800c216:	da11      	bge.n	800c23c <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c218:	7bbb      	ldrb	r3, [r7, #14]
 800c21a:	f003 020f 	and.w	r2, r3, #15
 800c21e:	6879      	ldr	r1, [r7, #4]
 800c220:	4613      	mov	r3, r2
 800c222:	009b      	lsls	r3, r3, #2
 800c224:	4413      	add	r3, r2
 800c226:	009b      	lsls	r3, r3, #2
 800c228:	440b      	add	r3, r1
 800c22a:	3318      	adds	r3, #24
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d117      	bne.n	800c262 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800c232:	6839      	ldr	r1, [r7, #0]
 800c234:	6878      	ldr	r0, [r7, #4]
 800c236:	f000 fb0a 	bl	800c84e <USBD_CtlError>
            break;
 800c23a:	e053      	b.n	800c2e4 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c23c:	7bbb      	ldrb	r3, [r7, #14]
 800c23e:	f003 020f 	and.w	r2, r3, #15
 800c242:	6879      	ldr	r1, [r7, #4]
 800c244:	4613      	mov	r3, r2
 800c246:	009b      	lsls	r3, r3, #2
 800c248:	4413      	add	r3, r2
 800c24a:	009b      	lsls	r3, r3, #2
 800c24c:	440b      	add	r3, r1
 800c24e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d104      	bne.n	800c262 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800c258:	6839      	ldr	r1, [r7, #0]
 800c25a:	6878      	ldr	r0, [r7, #4]
 800c25c:	f000 faf7 	bl	800c84e <USBD_CtlError>
            break;
 800c260:	e040      	b.n	800c2e4 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800c262:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c266:	2b00      	cmp	r3, #0
 800c268:	da0b      	bge.n	800c282 <USBD_StdEPReq+0x232>
 800c26a:	7bbb      	ldrb	r3, [r7, #14]
 800c26c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c270:	4613      	mov	r3, r2
 800c272:	009b      	lsls	r3, r3, #2
 800c274:	4413      	add	r3, r2
 800c276:	009b      	lsls	r3, r3, #2
 800c278:	3310      	adds	r3, #16
 800c27a:	687a      	ldr	r2, [r7, #4]
 800c27c:	4413      	add	r3, r2
 800c27e:	3304      	adds	r3, #4
 800c280:	e00a      	b.n	800c298 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 800c282:	7bbb      	ldrb	r3, [r7, #14]
 800c284:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800c288:	4613      	mov	r3, r2
 800c28a:	009b      	lsls	r3, r3, #2
 800c28c:	4413      	add	r3, r2
 800c28e:	009b      	lsls	r3, r3, #2
 800c290:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800c294:	687a      	ldr	r2, [r7, #4]
 800c296:	4413      	add	r3, r2
 800c298:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c29a:	7bbb      	ldrb	r3, [r7, #14]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d002      	beq.n	800c2a6 <USBD_StdEPReq+0x256>
 800c2a0:	7bbb      	ldrb	r3, [r7, #14]
 800c2a2:	2b80      	cmp	r3, #128	; 0x80
 800c2a4:	d103      	bne.n	800c2ae <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 800c2a6:	68bb      	ldr	r3, [r7, #8]
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	601a      	str	r2, [r3, #0]
 800c2ac:	e00e      	b.n	800c2cc <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800c2ae:	7bbb      	ldrb	r3, [r7, #14]
 800c2b0:	4619      	mov	r1, r3
 800c2b2:	6878      	ldr	r0, [r7, #4]
 800c2b4:	f001 f87e 	bl	800d3b4 <USBD_LL_IsStallEP>
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d003      	beq.n	800c2c6 <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	2201      	movs	r2, #1
 800c2c2:	601a      	str	r2, [r3, #0]
 800c2c4:	e002      	b.n	800c2cc <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 800c2c6:	68bb      	ldr	r3, [r7, #8]
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	2202      	movs	r2, #2
 800c2d0:	4619      	mov	r1, r3
 800c2d2:	6878      	ldr	r0, [r7, #4]
 800c2d4:	f000 fb26 	bl	800c924 <USBD_CtlSendData>
          break;
 800c2d8:	e004      	b.n	800c2e4 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 800c2da:	6839      	ldr	r1, [r7, #0]
 800c2dc:	6878      	ldr	r0, [r7, #4]
 800c2de:	f000 fab6 	bl	800c84e <USBD_CtlError>
        break;
 800c2e2:	bf00      	nop
      }
      break;
 800c2e4:	e004      	b.n	800c2f0 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 800c2e6:	6839      	ldr	r1, [r7, #0]
 800c2e8:	6878      	ldr	r0, [r7, #4]
 800c2ea:	f000 fab0 	bl	800c84e <USBD_CtlError>
      break;
 800c2ee:	bf00      	nop
    }
    break;
 800c2f0:	e004      	b.n	800c2fc <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 800c2f2:	6839      	ldr	r1, [r7, #0]
 800c2f4:	6878      	ldr	r0, [r7, #4]
 800c2f6:	f000 faaa 	bl	800c84e <USBD_CtlError>
    break;
 800c2fa:	bf00      	nop
  }

  return ret;
 800c2fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2fe:	4618      	mov	r0, r3
 800c300:	3710      	adds	r7, #16
 800c302:	46bd      	mov	sp, r7
 800c304:	bd80      	pop	{r7, pc}
	...

0800c308 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b084      	sub	sp, #16
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
 800c310:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	885b      	ldrh	r3, [r3, #2]
 800c316:	0a1b      	lsrs	r3, r3, #8
 800c318:	b29b      	uxth	r3, r3
 800c31a:	3b01      	subs	r3, #1
 800c31c:	2b06      	cmp	r3, #6
 800c31e:	f200 80c9 	bhi.w	800c4b4 <USBD_GetDescriptor+0x1ac>
 800c322:	a201      	add	r2, pc, #4	; (adr r2, 800c328 <USBD_GetDescriptor+0x20>)
 800c324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c328:	0800c345 	.word	0x0800c345
 800c32c:	0800c35d 	.word	0x0800c35d
 800c330:	0800c39d 	.word	0x0800c39d
 800c334:	0800c4b5 	.word	0x0800c4b5
 800c338:	0800c4b5 	.word	0x0800c4b5
 800c33c:	0800c461 	.word	0x0800c461
 800c340:	0800c487 	.word	0x0800c487
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	687a      	ldr	r2, [r7, #4]
 800c34e:	7c12      	ldrb	r2, [r2, #16]
 800c350:	f107 010a 	add.w	r1, r7, #10
 800c354:	4610      	mov	r0, r2
 800c356:	4798      	blx	r3
 800c358:	60f8      	str	r0, [r7, #12]
    break;
 800c35a:	e0b0      	b.n	800c4be <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	7c1b      	ldrb	r3, [r3, #16]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d10d      	bne.n	800c380 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c36a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c36c:	f107 020a 	add.w	r2, r7, #10
 800c370:	4610      	mov	r0, r2
 800c372:	4798      	blx	r3
 800c374:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	3301      	adds	r3, #1
 800c37a:	2202      	movs	r2, #2
 800c37c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800c37e:	e09e      	b.n	800c4be <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c388:	f107 020a 	add.w	r2, r7, #10
 800c38c:	4610      	mov	r0, r2
 800c38e:	4798      	blx	r3
 800c390:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	3301      	adds	r3, #1
 800c396:	2202      	movs	r2, #2
 800c398:	701a      	strb	r2, [r3, #0]
    break;
 800c39a:	e090      	b.n	800c4be <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	885b      	ldrh	r3, [r3, #2]
 800c3a0:	b2db      	uxtb	r3, r3
 800c3a2:	2b05      	cmp	r3, #5
 800c3a4:	d856      	bhi.n	800c454 <USBD_GetDescriptor+0x14c>
 800c3a6:	a201      	add	r2, pc, #4	; (adr r2, 800c3ac <USBD_GetDescriptor+0xa4>)
 800c3a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3ac:	0800c3c5 	.word	0x0800c3c5
 800c3b0:	0800c3dd 	.word	0x0800c3dd
 800c3b4:	0800c3f5 	.word	0x0800c3f5
 800c3b8:	0800c40d 	.word	0x0800c40d
 800c3bc:	0800c425 	.word	0x0800c425
 800c3c0:	0800c43d 	.word	0x0800c43d
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800c3ca:	685b      	ldr	r3, [r3, #4]
 800c3cc:	687a      	ldr	r2, [r7, #4]
 800c3ce:	7c12      	ldrb	r2, [r2, #16]
 800c3d0:	f107 010a 	add.w	r1, r7, #10
 800c3d4:	4610      	mov	r0, r2
 800c3d6:	4798      	blx	r3
 800c3d8:	60f8      	str	r0, [r7, #12]
      break;
 800c3da:	e040      	b.n	800c45e <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800c3e2:	689b      	ldr	r3, [r3, #8]
 800c3e4:	687a      	ldr	r2, [r7, #4]
 800c3e6:	7c12      	ldrb	r2, [r2, #16]
 800c3e8:	f107 010a 	add.w	r1, r7, #10
 800c3ec:	4610      	mov	r0, r2
 800c3ee:	4798      	blx	r3
 800c3f0:	60f8      	str	r0, [r7, #12]
      break;
 800c3f2:	e034      	b.n	800c45e <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800c3fa:	68db      	ldr	r3, [r3, #12]
 800c3fc:	687a      	ldr	r2, [r7, #4]
 800c3fe:	7c12      	ldrb	r2, [r2, #16]
 800c400:	f107 010a 	add.w	r1, r7, #10
 800c404:	4610      	mov	r0, r2
 800c406:	4798      	blx	r3
 800c408:	60f8      	str	r0, [r7, #12]
      break;
 800c40a:	e028      	b.n	800c45e <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800c412:	691b      	ldr	r3, [r3, #16]
 800c414:	687a      	ldr	r2, [r7, #4]
 800c416:	7c12      	ldrb	r2, [r2, #16]
 800c418:	f107 010a 	add.w	r1, r7, #10
 800c41c:	4610      	mov	r0, r2
 800c41e:	4798      	blx	r3
 800c420:	60f8      	str	r0, [r7, #12]
      break;
 800c422:	e01c      	b.n	800c45e <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800c42a:	695b      	ldr	r3, [r3, #20]
 800c42c:	687a      	ldr	r2, [r7, #4]
 800c42e:	7c12      	ldrb	r2, [r2, #16]
 800c430:	f107 010a 	add.w	r1, r7, #10
 800c434:	4610      	mov	r0, r2
 800c436:	4798      	blx	r3
 800c438:	60f8      	str	r0, [r7, #12]
      break;
 800c43a:	e010      	b.n	800c45e <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800c442:	699b      	ldr	r3, [r3, #24]
 800c444:	687a      	ldr	r2, [r7, #4]
 800c446:	7c12      	ldrb	r2, [r2, #16]
 800c448:	f107 010a 	add.w	r1, r7, #10
 800c44c:	4610      	mov	r0, r2
 800c44e:	4798      	blx	r3
 800c450:	60f8      	str	r0, [r7, #12]
      break;
 800c452:	e004      	b.n	800c45e <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800c454:	6839      	ldr	r1, [r7, #0]
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	f000 f9f9 	bl	800c84e <USBD_CtlError>
      return;
 800c45c:	e04b      	b.n	800c4f6 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800c45e:	e02e      	b.n	800c4be <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	7c1b      	ldrb	r3, [r3, #16]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d109      	bne.n	800c47c <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c46e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c470:	f107 020a 	add.w	r2, r7, #10
 800c474:	4610      	mov	r0, r2
 800c476:	4798      	blx	r3
 800c478:	60f8      	str	r0, [r7, #12]
      break;
 800c47a:	e020      	b.n	800c4be <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800c47c:	6839      	ldr	r1, [r7, #0]
 800c47e:	6878      	ldr	r0, [r7, #4]
 800c480:	f000 f9e5 	bl	800c84e <USBD_CtlError>
      return;
 800c484:	e037      	b.n	800c4f6 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	7c1b      	ldrb	r3, [r3, #16]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d10d      	bne.n	800c4aa <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c496:	f107 020a 	add.w	r2, r7, #10
 800c49a:	4610      	mov	r0, r2
 800c49c:	4798      	blx	r3
 800c49e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	3301      	adds	r3, #1
 800c4a4:	2207      	movs	r2, #7
 800c4a6:	701a      	strb	r2, [r3, #0]
      break;
 800c4a8:	e009      	b.n	800c4be <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800c4aa:	6839      	ldr	r1, [r7, #0]
 800c4ac:	6878      	ldr	r0, [r7, #4]
 800c4ae:	f000 f9ce 	bl	800c84e <USBD_CtlError>
      return;
 800c4b2:	e020      	b.n	800c4f6 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 800c4b4:	6839      	ldr	r1, [r7, #0]
 800c4b6:	6878      	ldr	r0, [r7, #4]
 800c4b8:	f000 f9c9 	bl	800c84e <USBD_CtlError>
    return;
 800c4bc:	e01b      	b.n	800c4f6 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800c4be:	897b      	ldrh	r3, [r7, #10]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d011      	beq.n	800c4e8 <USBD_GetDescriptor+0x1e0>
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	88db      	ldrh	r3, [r3, #6]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d00d      	beq.n	800c4e8 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 800c4cc:	683b      	ldr	r3, [r7, #0]
 800c4ce:	88da      	ldrh	r2, [r3, #6]
 800c4d0:	897b      	ldrh	r3, [r7, #10]
 800c4d2:	4293      	cmp	r3, r2
 800c4d4:	bf28      	it	cs
 800c4d6:	4613      	movcs	r3, r2
 800c4d8:	b29b      	uxth	r3, r3
 800c4da:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800c4dc:	897b      	ldrh	r3, [r7, #10]
 800c4de:	461a      	mov	r2, r3
 800c4e0:	68f9      	ldr	r1, [r7, #12]
 800c4e2:	6878      	ldr	r0, [r7, #4]
 800c4e4:	f000 fa1e 	bl	800c924 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 800c4e8:	683b      	ldr	r3, [r7, #0]
 800c4ea:	88db      	ldrh	r3, [r3, #6]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d102      	bne.n	800c4f6 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800c4f0:	6878      	ldr	r0, [r7, #4]
 800c4f2:	f000 fa75 	bl	800c9e0 <USBD_CtlSendStatus>
  }
}
 800c4f6:	3710      	adds	r7, #16
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	bd80      	pop	{r7, pc}

0800c4fc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b084      	sub	sp, #16
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
 800c504:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c506:	683b      	ldr	r3, [r7, #0]
 800c508:	889b      	ldrh	r3, [r3, #4]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d130      	bne.n	800c570 <USBD_SetAddress+0x74>
 800c50e:	683b      	ldr	r3, [r7, #0]
 800c510:	88db      	ldrh	r3, [r3, #6]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d12c      	bne.n	800c570 <USBD_SetAddress+0x74>
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	885b      	ldrh	r3, [r3, #2]
 800c51a:	2b7f      	cmp	r3, #127	; 0x7f
 800c51c:	d828      	bhi.n	800c570 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	885b      	ldrh	r3, [r3, #2]
 800c522:	b2db      	uxtb	r3, r3
 800c524:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c528:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c530:	2b03      	cmp	r3, #3
 800c532:	d104      	bne.n	800c53e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800c534:	6839      	ldr	r1, [r7, #0]
 800c536:	6878      	ldr	r0, [r7, #4]
 800c538:	f000 f989 	bl	800c84e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c53c:	e01c      	b.n	800c578 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	7bfa      	ldrb	r2, [r7, #15]
 800c542:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c546:	7bfb      	ldrb	r3, [r7, #15]
 800c548:	4619      	mov	r1, r3
 800c54a:	6878      	ldr	r0, [r7, #4]
 800c54c:	f000 ff5e 	bl	800d40c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800c550:	6878      	ldr	r0, [r7, #4]
 800c552:	f000 fa45 	bl	800c9e0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c556:	7bfb      	ldrb	r3, [r7, #15]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d004      	beq.n	800c566 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	2202      	movs	r2, #2
 800c560:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c564:	e008      	b.n	800c578 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2201      	movs	r2, #1
 800c56a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c56e:	e003      	b.n	800c578 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c570:	6839      	ldr	r1, [r7, #0]
 800c572:	6878      	ldr	r0, [r7, #4]
 800c574:	f000 f96b 	bl	800c84e <USBD_CtlError>
  }
}
 800c578:	bf00      	nop
 800c57a:	3710      	adds	r7, #16
 800c57c:	46bd      	mov	sp, r7
 800c57e:	bd80      	pop	{r7, pc}

0800c580 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b082      	sub	sp, #8
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
 800c588:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c58a:	683b      	ldr	r3, [r7, #0]
 800c58c:	885b      	ldrh	r3, [r3, #2]
 800c58e:	b2da      	uxtb	r2, r3
 800c590:	4b41      	ldr	r3, [pc, #260]	; (800c698 <USBD_SetConfig+0x118>)
 800c592:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c594:	4b40      	ldr	r3, [pc, #256]	; (800c698 <USBD_SetConfig+0x118>)
 800c596:	781b      	ldrb	r3, [r3, #0]
 800c598:	2b01      	cmp	r3, #1
 800c59a:	d904      	bls.n	800c5a6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800c59c:	6839      	ldr	r1, [r7, #0]
 800c59e:	6878      	ldr	r0, [r7, #4]
 800c5a0:	f000 f955 	bl	800c84e <USBD_CtlError>
 800c5a4:	e075      	b.n	800c692 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c5ac:	2b02      	cmp	r3, #2
 800c5ae:	d002      	beq.n	800c5b6 <USBD_SetConfig+0x36>
 800c5b0:	2b03      	cmp	r3, #3
 800c5b2:	d023      	beq.n	800c5fc <USBD_SetConfig+0x7c>
 800c5b4:	e062      	b.n	800c67c <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800c5b6:	4b38      	ldr	r3, [pc, #224]	; (800c698 <USBD_SetConfig+0x118>)
 800c5b8:	781b      	ldrb	r3, [r3, #0]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d01a      	beq.n	800c5f4 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800c5be:	4b36      	ldr	r3, [pc, #216]	; (800c698 <USBD_SetConfig+0x118>)
 800c5c0:	781b      	ldrb	r3, [r3, #0]
 800c5c2:	461a      	mov	r2, r3
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	2203      	movs	r2, #3
 800c5cc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c5d0:	4b31      	ldr	r3, [pc, #196]	; (800c698 <USBD_SetConfig+0x118>)
 800c5d2:	781b      	ldrb	r3, [r3, #0]
 800c5d4:	4619      	mov	r1, r3
 800c5d6:	6878      	ldr	r0, [r7, #4]
 800c5d8:	f7ff fa2a 	bl	800ba30 <USBD_SetClassConfig>
 800c5dc:	4603      	mov	r3, r0
 800c5de:	2b02      	cmp	r3, #2
 800c5e0:	d104      	bne.n	800c5ec <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800c5e2:	6839      	ldr	r1, [r7, #0]
 800c5e4:	6878      	ldr	r0, [r7, #4]
 800c5e6:	f000 f932 	bl	800c84e <USBD_CtlError>
          return;
 800c5ea:	e052      	b.n	800c692 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800c5ec:	6878      	ldr	r0, [r7, #4]
 800c5ee:	f000 f9f7 	bl	800c9e0 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800c5f2:	e04e      	b.n	800c692 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800c5f4:	6878      	ldr	r0, [r7, #4]
 800c5f6:	f000 f9f3 	bl	800c9e0 <USBD_CtlSendStatus>
      break;
 800c5fa:	e04a      	b.n	800c692 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c5fc:	4b26      	ldr	r3, [pc, #152]	; (800c698 <USBD_SetConfig+0x118>)
 800c5fe:	781b      	ldrb	r3, [r3, #0]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d112      	bne.n	800c62a <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2202      	movs	r2, #2
 800c608:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800c60c:	4b22      	ldr	r3, [pc, #136]	; (800c698 <USBD_SetConfig+0x118>)
 800c60e:	781b      	ldrb	r3, [r3, #0]
 800c610:	461a      	mov	r2, r3
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800c616:	4b20      	ldr	r3, [pc, #128]	; (800c698 <USBD_SetConfig+0x118>)
 800c618:	781b      	ldrb	r3, [r3, #0]
 800c61a:	4619      	mov	r1, r3
 800c61c:	6878      	ldr	r0, [r7, #4]
 800c61e:	f7ff fa26 	bl	800ba6e <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800c622:	6878      	ldr	r0, [r7, #4]
 800c624:	f000 f9dc 	bl	800c9e0 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800c628:	e033      	b.n	800c692 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800c62a:	4b1b      	ldr	r3, [pc, #108]	; (800c698 <USBD_SetConfig+0x118>)
 800c62c:	781b      	ldrb	r3, [r3, #0]
 800c62e:	461a      	mov	r2, r3
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	685b      	ldr	r3, [r3, #4]
 800c634:	429a      	cmp	r2, r3
 800c636:	d01d      	beq.n	800c674 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	685b      	ldr	r3, [r3, #4]
 800c63c:	b2db      	uxtb	r3, r3
 800c63e:	4619      	mov	r1, r3
 800c640:	6878      	ldr	r0, [r7, #4]
 800c642:	f7ff fa14 	bl	800ba6e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c646:	4b14      	ldr	r3, [pc, #80]	; (800c698 <USBD_SetConfig+0x118>)
 800c648:	781b      	ldrb	r3, [r3, #0]
 800c64a:	461a      	mov	r2, r3
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c650:	4b11      	ldr	r3, [pc, #68]	; (800c698 <USBD_SetConfig+0x118>)
 800c652:	781b      	ldrb	r3, [r3, #0]
 800c654:	4619      	mov	r1, r3
 800c656:	6878      	ldr	r0, [r7, #4]
 800c658:	f7ff f9ea 	bl	800ba30 <USBD_SetClassConfig>
 800c65c:	4603      	mov	r3, r0
 800c65e:	2b02      	cmp	r3, #2
 800c660:	d104      	bne.n	800c66c <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800c662:	6839      	ldr	r1, [r7, #0]
 800c664:	6878      	ldr	r0, [r7, #4]
 800c666:	f000 f8f2 	bl	800c84e <USBD_CtlError>
          return;
 800c66a:	e012      	b.n	800c692 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800c66c:	6878      	ldr	r0, [r7, #4]
 800c66e:	f000 f9b7 	bl	800c9e0 <USBD_CtlSendStatus>
      break;
 800c672:	e00e      	b.n	800c692 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800c674:	6878      	ldr	r0, [r7, #4]
 800c676:	f000 f9b3 	bl	800c9e0 <USBD_CtlSendStatus>
      break;
 800c67a:	e00a      	b.n	800c692 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800c67c:	6839      	ldr	r1, [r7, #0]
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	f000 f8e5 	bl	800c84e <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800c684:	4b04      	ldr	r3, [pc, #16]	; (800c698 <USBD_SetConfig+0x118>)
 800c686:	781b      	ldrb	r3, [r3, #0]
 800c688:	4619      	mov	r1, r3
 800c68a:	6878      	ldr	r0, [r7, #4]
 800c68c:	f7ff f9ef 	bl	800ba6e <USBD_ClrClassConfig>
      break;
 800c690:	bf00      	nop
    }
  }
}
 800c692:	3708      	adds	r7, #8
 800c694:	46bd      	mov	sp, r7
 800c696:	bd80      	pop	{r7, pc}
 800c698:	20000684 	.word	0x20000684

0800c69c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b082      	sub	sp, #8
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
 800c6a4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	88db      	ldrh	r3, [r3, #6]
 800c6aa:	2b01      	cmp	r3, #1
 800c6ac:	d004      	beq.n	800c6b8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800c6ae:	6839      	ldr	r1, [r7, #0]
 800c6b0:	6878      	ldr	r0, [r7, #4]
 800c6b2:	f000 f8cc 	bl	800c84e <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800c6b6:	e021      	b.n	800c6fc <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c6be:	2b01      	cmp	r3, #1
 800c6c0:	db17      	blt.n	800c6f2 <USBD_GetConfig+0x56>
 800c6c2:	2b02      	cmp	r3, #2
 800c6c4:	dd02      	ble.n	800c6cc <USBD_GetConfig+0x30>
 800c6c6:	2b03      	cmp	r3, #3
 800c6c8:	d00b      	beq.n	800c6e2 <USBD_GetConfig+0x46>
 800c6ca:	e012      	b.n	800c6f2 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	3308      	adds	r3, #8
 800c6d6:	2201      	movs	r2, #1
 800c6d8:	4619      	mov	r1, r3
 800c6da:	6878      	ldr	r0, [r7, #4]
 800c6dc:	f000 f922 	bl	800c924 <USBD_CtlSendData>
      break;
 800c6e0:	e00c      	b.n	800c6fc <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	3304      	adds	r3, #4
 800c6e6:	2201      	movs	r2, #1
 800c6e8:	4619      	mov	r1, r3
 800c6ea:	6878      	ldr	r0, [r7, #4]
 800c6ec:	f000 f91a 	bl	800c924 <USBD_CtlSendData>
      break;
 800c6f0:	e004      	b.n	800c6fc <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 800c6f2:	6839      	ldr	r1, [r7, #0]
 800c6f4:	6878      	ldr	r0, [r7, #4]
 800c6f6:	f000 f8aa 	bl	800c84e <USBD_CtlError>
      break;
 800c6fa:	bf00      	nop
}
 800c6fc:	bf00      	nop
 800c6fe:	3708      	adds	r7, #8
 800c700:	46bd      	mov	sp, r7
 800c702:	bd80      	pop	{r7, pc}

0800c704 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b082      	sub	sp, #8
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
 800c70c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c714:	3b01      	subs	r3, #1
 800c716:	2b02      	cmp	r3, #2
 800c718:	d81e      	bhi.n	800c758 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800c71a:	683b      	ldr	r3, [r7, #0]
 800c71c:	88db      	ldrh	r3, [r3, #6]
 800c71e:	2b02      	cmp	r3, #2
 800c720:	d004      	beq.n	800c72c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800c722:	6839      	ldr	r1, [r7, #0]
 800c724:	6878      	ldr	r0, [r7, #4]
 800c726:	f000 f892 	bl	800c84e <USBD_CtlError>
      break;
 800c72a:	e01a      	b.n	800c762 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	2201      	movs	r2, #1
 800c730:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d005      	beq.n	800c748 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	68db      	ldr	r3, [r3, #12]
 800c740:	f043 0202 	orr.w	r2, r3, #2
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	330c      	adds	r3, #12
 800c74c:	2202      	movs	r2, #2
 800c74e:	4619      	mov	r1, r3
 800c750:	6878      	ldr	r0, [r7, #4]
 800c752:	f000 f8e7 	bl	800c924 <USBD_CtlSendData>
    break;
 800c756:	e004      	b.n	800c762 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800c758:	6839      	ldr	r1, [r7, #0]
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f000 f877 	bl	800c84e <USBD_CtlError>
    break;
 800c760:	bf00      	nop
  }
}
 800c762:	bf00      	nop
 800c764:	3708      	adds	r7, #8
 800c766:	46bd      	mov	sp, r7
 800c768:	bd80      	pop	{r7, pc}

0800c76a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800c76a:	b580      	push	{r7, lr}
 800c76c:	b082      	sub	sp, #8
 800c76e:	af00      	add	r7, sp, #0
 800c770:	6078      	str	r0, [r7, #4]
 800c772:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	885b      	ldrh	r3, [r3, #2]
 800c778:	2b01      	cmp	r3, #1
 800c77a:	d106      	bne.n	800c78a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	2201      	movs	r2, #1
 800c780:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800c784:	6878      	ldr	r0, [r7, #4]
 800c786:	f000 f92b 	bl	800c9e0 <USBD_CtlSendStatus>
  }

}
 800c78a:	bf00      	nop
 800c78c:	3708      	adds	r7, #8
 800c78e:	46bd      	mov	sp, r7
 800c790:	bd80      	pop	{r7, pc}

0800c792 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800c792:	b580      	push	{r7, lr}
 800c794:	b082      	sub	sp, #8
 800c796:	af00      	add	r7, sp, #0
 800c798:	6078      	str	r0, [r7, #4]
 800c79a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c7a2:	3b01      	subs	r3, #1
 800c7a4:	2b02      	cmp	r3, #2
 800c7a6:	d80b      	bhi.n	800c7c0 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c7a8:	683b      	ldr	r3, [r7, #0]
 800c7aa:	885b      	ldrh	r3, [r3, #2]
 800c7ac:	2b01      	cmp	r3, #1
 800c7ae:	d10c      	bne.n	800c7ca <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	f000 f911 	bl	800c9e0 <USBD_CtlSendStatus>
    }
    break;
 800c7be:	e004      	b.n	800c7ca <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800c7c0:	6839      	ldr	r1, [r7, #0]
 800c7c2:	6878      	ldr	r0, [r7, #4]
 800c7c4:	f000 f843 	bl	800c84e <USBD_CtlError>
    break;
 800c7c8:	e000      	b.n	800c7cc <USBD_ClrFeature+0x3a>
    break;
 800c7ca:	bf00      	nop
  }
}
 800c7cc:	bf00      	nop
 800c7ce:	3708      	adds	r7, #8
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	bd80      	pop	{r7, pc}

0800c7d4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c7d4:	b480      	push	{r7}
 800c7d6:	b083      	sub	sp, #12
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
 800c7dc:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800c7de:	683b      	ldr	r3, [r7, #0]
 800c7e0:	781a      	ldrb	r2, [r3, #0]
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	785a      	ldrb	r2, [r3, #1]
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800c7ee:	683b      	ldr	r3, [r7, #0]
 800c7f0:	3302      	adds	r3, #2
 800c7f2:	781b      	ldrb	r3, [r3, #0]
 800c7f4:	b29a      	uxth	r2, r3
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	3303      	adds	r3, #3
 800c7fa:	781b      	ldrb	r3, [r3, #0]
 800c7fc:	b29b      	uxth	r3, r3
 800c7fe:	021b      	lsls	r3, r3, #8
 800c800:	b29b      	uxth	r3, r3
 800c802:	4413      	add	r3, r2
 800c804:	b29a      	uxth	r2, r3
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800c80a:	683b      	ldr	r3, [r7, #0]
 800c80c:	3304      	adds	r3, #4
 800c80e:	781b      	ldrb	r3, [r3, #0]
 800c810:	b29a      	uxth	r2, r3
 800c812:	683b      	ldr	r3, [r7, #0]
 800c814:	3305      	adds	r3, #5
 800c816:	781b      	ldrb	r3, [r3, #0]
 800c818:	b29b      	uxth	r3, r3
 800c81a:	021b      	lsls	r3, r3, #8
 800c81c:	b29b      	uxth	r3, r3
 800c81e:	4413      	add	r3, r2
 800c820:	b29a      	uxth	r2, r3
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	3306      	adds	r3, #6
 800c82a:	781b      	ldrb	r3, [r3, #0]
 800c82c:	b29a      	uxth	r2, r3
 800c82e:	683b      	ldr	r3, [r7, #0]
 800c830:	3307      	adds	r3, #7
 800c832:	781b      	ldrb	r3, [r3, #0]
 800c834:	b29b      	uxth	r3, r3
 800c836:	021b      	lsls	r3, r3, #8
 800c838:	b29b      	uxth	r3, r3
 800c83a:	4413      	add	r3, r2
 800c83c:	b29a      	uxth	r2, r3
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	80da      	strh	r2, [r3, #6]

}
 800c842:	bf00      	nop
 800c844:	370c      	adds	r7, #12
 800c846:	46bd      	mov	sp, r7
 800c848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84c:	4770      	bx	lr

0800c84e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800c84e:	b580      	push	{r7, lr}
 800c850:	b082      	sub	sp, #8
 800c852:	af00      	add	r7, sp, #0
 800c854:	6078      	str	r0, [r7, #4]
 800c856:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800c858:	2180      	movs	r1, #128	; 0x80
 800c85a:	6878      	ldr	r0, [r7, #4]
 800c85c:	f000 fd6c 	bl	800d338 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800c860:	2100      	movs	r1, #0
 800c862:	6878      	ldr	r0, [r7, #4]
 800c864:	f000 fd68 	bl	800d338 <USBD_LL_StallEP>
}
 800c868:	bf00      	nop
 800c86a:	3708      	adds	r7, #8
 800c86c:	46bd      	mov	sp, r7
 800c86e:	bd80      	pop	{r7, pc}

0800c870 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b086      	sub	sp, #24
 800c874:	af00      	add	r7, sp, #0
 800c876:	60f8      	str	r0, [r7, #12]
 800c878:	60b9      	str	r1, [r7, #8]
 800c87a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c87c:	2300      	movs	r3, #0
 800c87e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d032      	beq.n	800c8ec <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800c886:	68f8      	ldr	r0, [r7, #12]
 800c888:	f000 f834 	bl	800c8f4 <USBD_GetLen>
 800c88c:	4603      	mov	r3, r0
 800c88e:	3301      	adds	r3, #1
 800c890:	b29b      	uxth	r3, r3
 800c892:	005b      	lsls	r3, r3, #1
 800c894:	b29a      	uxth	r2, r3
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800c89a:	7dfb      	ldrb	r3, [r7, #23]
 800c89c:	1c5a      	adds	r2, r3, #1
 800c89e:	75fa      	strb	r2, [r7, #23]
 800c8a0:	461a      	mov	r2, r3
 800c8a2:	68bb      	ldr	r3, [r7, #8]
 800c8a4:	4413      	add	r3, r2
 800c8a6:	687a      	ldr	r2, [r7, #4]
 800c8a8:	7812      	ldrb	r2, [r2, #0]
 800c8aa:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800c8ac:	7dfb      	ldrb	r3, [r7, #23]
 800c8ae:	1c5a      	adds	r2, r3, #1
 800c8b0:	75fa      	strb	r2, [r7, #23]
 800c8b2:	461a      	mov	r2, r3
 800c8b4:	68bb      	ldr	r3, [r7, #8]
 800c8b6:	4413      	add	r3, r2
 800c8b8:	2203      	movs	r2, #3
 800c8ba:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800c8bc:	e012      	b.n	800c8e4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	1c5a      	adds	r2, r3, #1
 800c8c2:	60fa      	str	r2, [r7, #12]
 800c8c4:	7dfa      	ldrb	r2, [r7, #23]
 800c8c6:	1c51      	adds	r1, r2, #1
 800c8c8:	75f9      	strb	r1, [r7, #23]
 800c8ca:	4611      	mov	r1, r2
 800c8cc:	68ba      	ldr	r2, [r7, #8]
 800c8ce:	440a      	add	r2, r1
 800c8d0:	781b      	ldrb	r3, [r3, #0]
 800c8d2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800c8d4:	7dfb      	ldrb	r3, [r7, #23]
 800c8d6:	1c5a      	adds	r2, r3, #1
 800c8d8:	75fa      	strb	r2, [r7, #23]
 800c8da:	461a      	mov	r2, r3
 800c8dc:	68bb      	ldr	r3, [r7, #8]
 800c8de:	4413      	add	r3, r2
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	781b      	ldrb	r3, [r3, #0]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d1e8      	bne.n	800c8be <USBD_GetString+0x4e>
    }
  }
}
 800c8ec:	bf00      	nop
 800c8ee:	3718      	adds	r7, #24
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	bd80      	pop	{r7, pc}

0800c8f4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c8f4:	b480      	push	{r7}
 800c8f6:	b085      	sub	sp, #20
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800c900:	e005      	b.n	800c90e <USBD_GetLen+0x1a>
    {
        len++;
 800c902:	7bfb      	ldrb	r3, [r7, #15]
 800c904:	3301      	adds	r3, #1
 800c906:	73fb      	strb	r3, [r7, #15]
        buf++;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	3301      	adds	r3, #1
 800c90c:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	781b      	ldrb	r3, [r3, #0]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d1f5      	bne.n	800c902 <USBD_GetLen+0xe>
    }

    return len;
 800c916:	7bfb      	ldrb	r3, [r7, #15]
}
 800c918:	4618      	mov	r0, r3
 800c91a:	3714      	adds	r7, #20
 800c91c:	46bd      	mov	sp, r7
 800c91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c922:	4770      	bx	lr

0800c924 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b084      	sub	sp, #16
 800c928:	af00      	add	r7, sp, #0
 800c92a:	60f8      	str	r0, [r7, #12]
 800c92c:	60b9      	str	r1, [r7, #8]
 800c92e:	4613      	mov	r3, r2
 800c930:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	2202      	movs	r2, #2
 800c936:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800c93a:	88fa      	ldrh	r2, [r7, #6]
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800c940:	88fa      	ldrh	r2, [r7, #6]
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800c946:	88fb      	ldrh	r3, [r7, #6]
 800c948:	68ba      	ldr	r2, [r7, #8]
 800c94a:	2100      	movs	r1, #0
 800c94c:	68f8      	ldr	r0, [r7, #12]
 800c94e:	f000 fd7c 	bl	800d44a <USBD_LL_Transmit>

  return USBD_OK;
 800c952:	2300      	movs	r3, #0
}
 800c954:	4618      	mov	r0, r3
 800c956:	3710      	adds	r7, #16
 800c958:	46bd      	mov	sp, r7
 800c95a:	bd80      	pop	{r7, pc}

0800c95c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b084      	sub	sp, #16
 800c960:	af00      	add	r7, sp, #0
 800c962:	60f8      	str	r0, [r7, #12]
 800c964:	60b9      	str	r1, [r7, #8]
 800c966:	4613      	mov	r3, r2
 800c968:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800c96a:	88fb      	ldrh	r3, [r7, #6]
 800c96c:	68ba      	ldr	r2, [r7, #8]
 800c96e:	2100      	movs	r1, #0
 800c970:	68f8      	ldr	r0, [r7, #12]
 800c972:	f000 fd6a 	bl	800d44a <USBD_LL_Transmit>

  return USBD_OK;
 800c976:	2300      	movs	r3, #0
}
 800c978:	4618      	mov	r0, r3
 800c97a:	3710      	adds	r7, #16
 800c97c:	46bd      	mov	sp, r7
 800c97e:	bd80      	pop	{r7, pc}

0800c980 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b084      	sub	sp, #16
 800c984:	af00      	add	r7, sp, #0
 800c986:	60f8      	str	r0, [r7, #12]
 800c988:	60b9      	str	r1, [r7, #8]
 800c98a:	4613      	mov	r3, r2
 800c98c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	2203      	movs	r2, #3
 800c992:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800c996:	88fa      	ldrh	r2, [r7, #6]
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800c99e:	88fa      	ldrh	r2, [r7, #6]
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800c9a6:	88fb      	ldrh	r3, [r7, #6]
 800c9a8:	68ba      	ldr	r2, [r7, #8]
 800c9aa:	2100      	movs	r1, #0
 800c9ac:	68f8      	ldr	r0, [r7, #12]
 800c9ae:	f000 fd6f 	bl	800d490 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c9b2:	2300      	movs	r3, #0
}
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	3710      	adds	r7, #16
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	bd80      	pop	{r7, pc}

0800c9bc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b084      	sub	sp, #16
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	60f8      	str	r0, [r7, #12]
 800c9c4:	60b9      	str	r1, [r7, #8]
 800c9c6:	4613      	mov	r3, r2
 800c9c8:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c9ca:	88fb      	ldrh	r3, [r7, #6]
 800c9cc:	68ba      	ldr	r2, [r7, #8]
 800c9ce:	2100      	movs	r1, #0
 800c9d0:	68f8      	ldr	r0, [r7, #12]
 800c9d2:	f000 fd5d 	bl	800d490 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c9d6:	2300      	movs	r3, #0
}
 800c9d8:	4618      	mov	r0, r3
 800c9da:	3710      	adds	r7, #16
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	bd80      	pop	{r7, pc}

0800c9e0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b082      	sub	sp, #8
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	2204      	movs	r2, #4
 800c9ec:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	2100      	movs	r1, #0
 800c9f6:	6878      	ldr	r0, [r7, #4]
 800c9f8:	f000 fd27 	bl	800d44a <USBD_LL_Transmit>

  return USBD_OK;
 800c9fc:	2300      	movs	r3, #0
}
 800c9fe:	4618      	mov	r0, r3
 800ca00:	3708      	adds	r7, #8
 800ca02:	46bd      	mov	sp, r7
 800ca04:	bd80      	pop	{r7, pc}

0800ca06 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800ca06:	b580      	push	{r7, lr}
 800ca08:	b082      	sub	sp, #8
 800ca0a:	af00      	add	r7, sp, #0
 800ca0c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	2205      	movs	r2, #5
 800ca12:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800ca16:	2300      	movs	r3, #0
 800ca18:	2200      	movs	r2, #0
 800ca1a:	2100      	movs	r1, #0
 800ca1c:	6878      	ldr	r0, [r7, #4]
 800ca1e:	f000 fd37 	bl	800d490 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ca22:	2300      	movs	r3, #0
}
 800ca24:	4618      	mov	r0, r3
 800ca26:	3708      	adds	r7, #8
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	bd80      	pop	{r7, pc}

0800ca2c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ca2c:	b480      	push	{r7}
 800ca2e:	b087      	sub	sp, #28
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	60f8      	str	r0, [r7, #12]
 800ca34:	60b9      	str	r1, [r7, #8]
 800ca36:	4613      	mov	r3, r2
 800ca38:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ca3a:	2301      	movs	r3, #1
 800ca3c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ca3e:	2300      	movs	r3, #0
 800ca40:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ca42:	4b1f      	ldr	r3, [pc, #124]	; (800cac0 <FATFS_LinkDriverEx+0x94>)
 800ca44:	7a5b      	ldrb	r3, [r3, #9]
 800ca46:	b2db      	uxtb	r3, r3
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d131      	bne.n	800cab0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ca4c:	4b1c      	ldr	r3, [pc, #112]	; (800cac0 <FATFS_LinkDriverEx+0x94>)
 800ca4e:	7a5b      	ldrb	r3, [r3, #9]
 800ca50:	b2db      	uxtb	r3, r3
 800ca52:	461a      	mov	r2, r3
 800ca54:	4b1a      	ldr	r3, [pc, #104]	; (800cac0 <FATFS_LinkDriverEx+0x94>)
 800ca56:	2100      	movs	r1, #0
 800ca58:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ca5a:	4b19      	ldr	r3, [pc, #100]	; (800cac0 <FATFS_LinkDriverEx+0x94>)
 800ca5c:	7a5b      	ldrb	r3, [r3, #9]
 800ca5e:	b2db      	uxtb	r3, r3
 800ca60:	4a17      	ldr	r2, [pc, #92]	; (800cac0 <FATFS_LinkDriverEx+0x94>)
 800ca62:	009b      	lsls	r3, r3, #2
 800ca64:	4413      	add	r3, r2
 800ca66:	68fa      	ldr	r2, [r7, #12]
 800ca68:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ca6a:	4b15      	ldr	r3, [pc, #84]	; (800cac0 <FATFS_LinkDriverEx+0x94>)
 800ca6c:	7a5b      	ldrb	r3, [r3, #9]
 800ca6e:	b2db      	uxtb	r3, r3
 800ca70:	461a      	mov	r2, r3
 800ca72:	4b13      	ldr	r3, [pc, #76]	; (800cac0 <FATFS_LinkDriverEx+0x94>)
 800ca74:	4413      	add	r3, r2
 800ca76:	79fa      	ldrb	r2, [r7, #7]
 800ca78:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ca7a:	4b11      	ldr	r3, [pc, #68]	; (800cac0 <FATFS_LinkDriverEx+0x94>)
 800ca7c:	7a5b      	ldrb	r3, [r3, #9]
 800ca7e:	b2db      	uxtb	r3, r3
 800ca80:	1c5a      	adds	r2, r3, #1
 800ca82:	b2d1      	uxtb	r1, r2
 800ca84:	4a0e      	ldr	r2, [pc, #56]	; (800cac0 <FATFS_LinkDriverEx+0x94>)
 800ca86:	7251      	strb	r1, [r2, #9]
 800ca88:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ca8a:	7dbb      	ldrb	r3, [r7, #22]
 800ca8c:	3330      	adds	r3, #48	; 0x30
 800ca8e:	b2da      	uxtb	r2, r3
 800ca90:	68bb      	ldr	r3, [r7, #8]
 800ca92:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ca94:	68bb      	ldr	r3, [r7, #8]
 800ca96:	3301      	adds	r3, #1
 800ca98:	223a      	movs	r2, #58	; 0x3a
 800ca9a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ca9c:	68bb      	ldr	r3, [r7, #8]
 800ca9e:	3302      	adds	r3, #2
 800caa0:	222f      	movs	r2, #47	; 0x2f
 800caa2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800caa4:	68bb      	ldr	r3, [r7, #8]
 800caa6:	3303      	adds	r3, #3
 800caa8:	2200      	movs	r2, #0
 800caaa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800caac:	2300      	movs	r3, #0
 800caae:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800cab0:	7dfb      	ldrb	r3, [r7, #23]
}
 800cab2:	4618      	mov	r0, r3
 800cab4:	371c      	adds	r7, #28
 800cab6:	46bd      	mov	sp, r7
 800cab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cabc:	4770      	bx	lr
 800cabe:	bf00      	nop
 800cac0:	20000688 	.word	0x20000688

0800cac4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b082      	sub	sp, #8
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
 800cacc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cace:	2200      	movs	r2, #0
 800cad0:	6839      	ldr	r1, [r7, #0]
 800cad2:	6878      	ldr	r0, [r7, #4]
 800cad4:	f7ff ffaa 	bl	800ca2c <FATFS_LinkDriverEx>
 800cad8:	4603      	mov	r3, r0
}
 800cada:	4618      	mov	r0, r3
 800cadc:	3708      	adds	r7, #8
 800cade:	46bd      	mov	sp, r7
 800cae0:	bd80      	pop	{r7, pc}
	...

0800cae4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cae8:	2200      	movs	r2, #0
 800caea:	4912      	ldr	r1, [pc, #72]	; (800cb34 <MX_USB_DEVICE_Init+0x50>)
 800caec:	4812      	ldr	r0, [pc, #72]	; (800cb38 <MX_USB_DEVICE_Init+0x54>)
 800caee:	f7fe ff43 	bl	800b978 <USBD_Init>
 800caf2:	4603      	mov	r3, r0
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d001      	beq.n	800cafc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800caf8:	f7f5 fe98 	bl	800282c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cafc:	490f      	ldr	r1, [pc, #60]	; (800cb3c <MX_USB_DEVICE_Init+0x58>)
 800cafe:	480e      	ldr	r0, [pc, #56]	; (800cb38 <MX_USB_DEVICE_Init+0x54>)
 800cb00:	f7fe ff65 	bl	800b9ce <USBD_RegisterClass>
 800cb04:	4603      	mov	r3, r0
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d001      	beq.n	800cb0e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cb0a:	f7f5 fe8f 	bl	800282c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cb0e:	490c      	ldr	r1, [pc, #48]	; (800cb40 <MX_USB_DEVICE_Init+0x5c>)
 800cb10:	4809      	ldr	r0, [pc, #36]	; (800cb38 <MX_USB_DEVICE_Init+0x54>)
 800cb12:	f7fe fe93 	bl	800b83c <USBD_CDC_RegisterInterface>
 800cb16:	4603      	mov	r3, r0
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d001      	beq.n	800cb20 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cb1c:	f7f5 fe86 	bl	800282c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cb20:	4805      	ldr	r0, [pc, #20]	; (800cb38 <MX_USB_DEVICE_Init+0x54>)
 800cb22:	f7fe ff6e 	bl	800ba02 <USBD_Start>
 800cb26:	4603      	mov	r3, r0
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d001      	beq.n	800cb30 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cb2c:	f7f5 fe7e 	bl	800282c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cb30:	bf00      	nop
 800cb32:	bd80      	pop	{r7, pc}
 800cb34:	2000013c 	.word	0x2000013c
 800cb38:	20000fa4 	.word	0x20000fa4
 800cb3c:	20000028 	.word	0x20000028
 800cb40:	2000012c 	.word	0x2000012c

0800cb44 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cb48:	2200      	movs	r2, #0
 800cb4a:	4905      	ldr	r1, [pc, #20]	; (800cb60 <CDC_Init_FS+0x1c>)
 800cb4c:	4805      	ldr	r0, [pc, #20]	; (800cb64 <CDC_Init_FS+0x20>)
 800cb4e:	f7fe fe8c 	bl	800b86a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cb52:	4905      	ldr	r1, [pc, #20]	; (800cb68 <CDC_Init_FS+0x24>)
 800cb54:	4803      	ldr	r0, [pc, #12]	; (800cb64 <CDC_Init_FS+0x20>)
 800cb56:	f7fe fea2 	bl	800b89e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cb5a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	bd80      	pop	{r7, pc}
 800cb60:	20001a40 	.word	0x20001a40
 800cb64:	20000fa4 	.word	0x20000fa4
 800cb68:	20001240 	.word	0x20001240

0800cb6c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cb6c:	b480      	push	{r7}
 800cb6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cb70:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cb72:	4618      	mov	r0, r3
 800cb74:	46bd      	mov	sp, r7
 800cb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7a:	4770      	bx	lr

0800cb7c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cb7c:	b480      	push	{r7}
 800cb7e:	b085      	sub	sp, #20
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	4603      	mov	r3, r0
 800cb84:	6039      	str	r1, [r7, #0]
 800cb86:	71fb      	strb	r3, [r7, #7]
 800cb88:	4613      	mov	r3, r2
 800cb8a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t tempbuf[7] = {0,0,0,0,0,0,0};
 800cb8c:	f107 0308 	add.w	r3, r7, #8
 800cb90:	2200      	movs	r2, #0
 800cb92:	601a      	str	r2, [r3, #0]
 800cb94:	f8c3 2003 	str.w	r2, [r3, #3]
  switch(cmd)
 800cb98:	79fb      	ldrb	r3, [r7, #7]
 800cb9a:	2b23      	cmp	r3, #35	; 0x23
 800cb9c:	d87c      	bhi.n	800cc98 <CDC_Control_FS+0x11c>
 800cb9e:	a201      	add	r2, pc, #4	; (adr r2, 800cba4 <CDC_Control_FS+0x28>)
 800cba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cba4:	0800cc99 	.word	0x0800cc99
 800cba8:	0800cc99 	.word	0x0800cc99
 800cbac:	0800cc99 	.word	0x0800cc99
 800cbb0:	0800cc99 	.word	0x0800cc99
 800cbb4:	0800cc99 	.word	0x0800cc99
 800cbb8:	0800cc99 	.word	0x0800cc99
 800cbbc:	0800cc99 	.word	0x0800cc99
 800cbc0:	0800cc99 	.word	0x0800cc99
 800cbc4:	0800cc99 	.word	0x0800cc99
 800cbc8:	0800cc99 	.word	0x0800cc99
 800cbcc:	0800cc99 	.word	0x0800cc99
 800cbd0:	0800cc99 	.word	0x0800cc99
 800cbd4:	0800cc99 	.word	0x0800cc99
 800cbd8:	0800cc99 	.word	0x0800cc99
 800cbdc:	0800cc99 	.word	0x0800cc99
 800cbe0:	0800cc99 	.word	0x0800cc99
 800cbe4:	0800cc99 	.word	0x0800cc99
 800cbe8:	0800cc99 	.word	0x0800cc99
 800cbec:	0800cc99 	.word	0x0800cc99
 800cbf0:	0800cc99 	.word	0x0800cc99
 800cbf4:	0800cc99 	.word	0x0800cc99
 800cbf8:	0800cc99 	.word	0x0800cc99
 800cbfc:	0800cc99 	.word	0x0800cc99
 800cc00:	0800cc99 	.word	0x0800cc99
 800cc04:	0800cc99 	.word	0x0800cc99
 800cc08:	0800cc99 	.word	0x0800cc99
 800cc0c:	0800cc99 	.word	0x0800cc99
 800cc10:	0800cc99 	.word	0x0800cc99
 800cc14:	0800cc99 	.word	0x0800cc99
 800cc18:	0800cc99 	.word	0x0800cc99
 800cc1c:	0800cc99 	.word	0x0800cc99
 800cc20:	0800cc99 	.word	0x0800cc99
 800cc24:	0800cc35 	.word	0x0800cc35
 800cc28:	0800cc61 	.word	0x0800cc61
 800cc2c:	0800cc99 	.word	0x0800cc99
 800cc30:	0800cc99 	.word	0x0800cc99
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      	tempbuf[0] = pbuf[0];
 800cc34:	683b      	ldr	r3, [r7, #0]
 800cc36:	781b      	ldrb	r3, [r3, #0]
 800cc38:	723b      	strb	r3, [r7, #8]
      	tempbuf[1] = pbuf[1];
 800cc3a:	683b      	ldr	r3, [r7, #0]
 800cc3c:	785b      	ldrb	r3, [r3, #1]
 800cc3e:	727b      	strb	r3, [r7, #9]
      	tempbuf[2] = pbuf[2];
 800cc40:	683b      	ldr	r3, [r7, #0]
 800cc42:	789b      	ldrb	r3, [r3, #2]
 800cc44:	72bb      	strb	r3, [r7, #10]
      	tempbuf[3] = pbuf[3];
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	78db      	ldrb	r3, [r3, #3]
 800cc4a:	72fb      	strb	r3, [r7, #11]
      	tempbuf[4] = pbuf[4];
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	791b      	ldrb	r3, [r3, #4]
 800cc50:	733b      	strb	r3, [r7, #12]
      	tempbuf[5] = pbuf[5];
 800cc52:	683b      	ldr	r3, [r7, #0]
 800cc54:	795b      	ldrb	r3, [r3, #5]
 800cc56:	737b      	strb	r3, [r7, #13]
      	tempbuf[6] = pbuf[6];
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	799b      	ldrb	r3, [r3, #6]
 800cc5c:	73bb      	strb	r3, [r7, #14]
      	break;
 800cc5e:	e01c      	b.n	800cc9a <CDC_Control_FS+0x11e>

      case CDC_GET_LINE_CODING:
      	pbuf[0] = tempbuf[0];
 800cc60:	7a3a      	ldrb	r2, [r7, #8]
 800cc62:	683b      	ldr	r3, [r7, #0]
 800cc64:	701a      	strb	r2, [r3, #0]
      	pbuf[1] = tempbuf[1];
 800cc66:	683b      	ldr	r3, [r7, #0]
 800cc68:	3301      	adds	r3, #1
 800cc6a:	7a7a      	ldrb	r2, [r7, #9]
 800cc6c:	701a      	strb	r2, [r3, #0]
      	pbuf[2] = tempbuf[2];
 800cc6e:	683b      	ldr	r3, [r7, #0]
 800cc70:	3302      	adds	r3, #2
 800cc72:	7aba      	ldrb	r2, [r7, #10]
 800cc74:	701a      	strb	r2, [r3, #0]
      	pbuf[3] = tempbuf[3];
 800cc76:	683b      	ldr	r3, [r7, #0]
 800cc78:	3303      	adds	r3, #3
 800cc7a:	7afa      	ldrb	r2, [r7, #11]
 800cc7c:	701a      	strb	r2, [r3, #0]
      	pbuf[4] = tempbuf[4];
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	3304      	adds	r3, #4
 800cc82:	7b3a      	ldrb	r2, [r7, #12]
 800cc84:	701a      	strb	r2, [r3, #0]
      	pbuf[5] = tempbuf[5];
 800cc86:	683b      	ldr	r3, [r7, #0]
 800cc88:	3305      	adds	r3, #5
 800cc8a:	7b7a      	ldrb	r2, [r7, #13]
 800cc8c:	701a      	strb	r2, [r3, #0]
      	pbuf[6] = tempbuf[6];
 800cc8e:	683b      	ldr	r3, [r7, #0]
 800cc90:	3306      	adds	r3, #6
 800cc92:	7bba      	ldrb	r2, [r7, #14]
 800cc94:	701a      	strb	r2, [r3, #0]
      	break;
 800cc96:	e000      	b.n	800cc9a <CDC_Control_FS+0x11e>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cc98:	bf00      	nop
  }

  return (USBD_OK);
 800cc9a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	3714      	adds	r7, #20
 800cca0:	46bd      	mov	sp, r7
 800cca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca6:	4770      	bx	lr

0800cca8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b082      	sub	sp, #8
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
 800ccb0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ccb2:	6879      	ldr	r1, [r7, #4]
 800ccb4:	4805      	ldr	r0, [pc, #20]	; (800cccc <CDC_Receive_FS+0x24>)
 800ccb6:	f7fe fdf2 	bl	800b89e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ccba:	4804      	ldr	r0, [pc, #16]	; (800cccc <CDC_Receive_FS+0x24>)
 800ccbc:	f7fe fe32 	bl	800b924 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ccc0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	3708      	adds	r7, #8
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	bd80      	pop	{r7, pc}
 800ccca:	bf00      	nop
 800cccc:	20000fa4 	.word	0x20000fa4

0800ccd0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b084      	sub	sp, #16
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
 800ccd8:	460b      	mov	r3, r1
 800ccda:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ccdc:	2300      	movs	r3, #0
 800ccde:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cce0:	4b0d      	ldr	r3, [pc, #52]	; (800cd18 <CDC_Transmit_FS+0x48>)
 800cce2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cce6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800cce8:	68bb      	ldr	r3, [r7, #8]
 800ccea:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d001      	beq.n	800ccf6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ccf2:	2301      	movs	r3, #1
 800ccf4:	e00b      	b.n	800cd0e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ccf6:	887b      	ldrh	r3, [r7, #2]
 800ccf8:	461a      	mov	r2, r3
 800ccfa:	6879      	ldr	r1, [r7, #4]
 800ccfc:	4806      	ldr	r0, [pc, #24]	; (800cd18 <CDC_Transmit_FS+0x48>)
 800ccfe:	f7fe fdb4 	bl	800b86a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cd02:	4805      	ldr	r0, [pc, #20]	; (800cd18 <CDC_Transmit_FS+0x48>)
 800cd04:	f7fe fddf 	bl	800b8c6 <USBD_CDC_TransmitPacket>
 800cd08:	4603      	mov	r3, r0
 800cd0a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800cd0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd0e:	4618      	mov	r0, r3
 800cd10:	3710      	adds	r7, #16
 800cd12:	46bd      	mov	sp, r7
 800cd14:	bd80      	pop	{r7, pc}
 800cd16:	bf00      	nop
 800cd18:	20000fa4 	.word	0x20000fa4

0800cd1c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd1c:	b480      	push	{r7}
 800cd1e:	b083      	sub	sp, #12
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	4603      	mov	r3, r0
 800cd24:	6039      	str	r1, [r7, #0]
 800cd26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cd28:	683b      	ldr	r3, [r7, #0]
 800cd2a:	2212      	movs	r2, #18
 800cd2c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cd2e:	4b03      	ldr	r3, [pc, #12]	; (800cd3c <USBD_FS_DeviceDescriptor+0x20>)
}
 800cd30:	4618      	mov	r0, r3
 800cd32:	370c      	adds	r7, #12
 800cd34:	46bd      	mov	sp, r7
 800cd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3a:	4770      	bx	lr
 800cd3c:	20000158 	.word	0x20000158

0800cd40 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd40:	b480      	push	{r7}
 800cd42:	b083      	sub	sp, #12
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	4603      	mov	r3, r0
 800cd48:	6039      	str	r1, [r7, #0]
 800cd4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	2204      	movs	r2, #4
 800cd50:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cd52:	4b03      	ldr	r3, [pc, #12]	; (800cd60 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cd54:	4618      	mov	r0, r3
 800cd56:	370c      	adds	r7, #12
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5e:	4770      	bx	lr
 800cd60:	2000016c 	.word	0x2000016c

0800cd64 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b082      	sub	sp, #8
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	4603      	mov	r3, r0
 800cd6c:	6039      	str	r1, [r7, #0]
 800cd6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cd70:	79fb      	ldrb	r3, [r7, #7]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d105      	bne.n	800cd82 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cd76:	683a      	ldr	r2, [r7, #0]
 800cd78:	4907      	ldr	r1, [pc, #28]	; (800cd98 <USBD_FS_ProductStrDescriptor+0x34>)
 800cd7a:	4808      	ldr	r0, [pc, #32]	; (800cd9c <USBD_FS_ProductStrDescriptor+0x38>)
 800cd7c:	f7ff fd78 	bl	800c870 <USBD_GetString>
 800cd80:	e004      	b.n	800cd8c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cd82:	683a      	ldr	r2, [r7, #0]
 800cd84:	4904      	ldr	r1, [pc, #16]	; (800cd98 <USBD_FS_ProductStrDescriptor+0x34>)
 800cd86:	4805      	ldr	r0, [pc, #20]	; (800cd9c <USBD_FS_ProductStrDescriptor+0x38>)
 800cd88:	f7ff fd72 	bl	800c870 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cd8c:	4b02      	ldr	r3, [pc, #8]	; (800cd98 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cd8e:	4618      	mov	r0, r3
 800cd90:	3708      	adds	r7, #8
 800cd92:	46bd      	mov	sp, r7
 800cd94:	bd80      	pop	{r7, pc}
 800cd96:	bf00      	nop
 800cd98:	20002240 	.word	0x20002240
 800cd9c:	08011a64 	.word	0x08011a64

0800cda0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b082      	sub	sp, #8
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	4603      	mov	r3, r0
 800cda8:	6039      	str	r1, [r7, #0]
 800cdaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cdac:	683a      	ldr	r2, [r7, #0]
 800cdae:	4904      	ldr	r1, [pc, #16]	; (800cdc0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cdb0:	4804      	ldr	r0, [pc, #16]	; (800cdc4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cdb2:	f7ff fd5d 	bl	800c870 <USBD_GetString>
  return USBD_StrDesc;
 800cdb6:	4b02      	ldr	r3, [pc, #8]	; (800cdc0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cdb8:	4618      	mov	r0, r3
 800cdba:	3708      	adds	r7, #8
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	bd80      	pop	{r7, pc}
 800cdc0:	20002240 	.word	0x20002240
 800cdc4:	08011a7c 	.word	0x08011a7c

0800cdc8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b082      	sub	sp, #8
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	4603      	mov	r3, r0
 800cdd0:	6039      	str	r1, [r7, #0]
 800cdd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	221a      	movs	r2, #26
 800cdd8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cdda:	f000 f843 	bl	800ce64 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cdde:	4b02      	ldr	r3, [pc, #8]	; (800cde8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cde0:	4618      	mov	r0, r3
 800cde2:	3708      	adds	r7, #8
 800cde4:	46bd      	mov	sp, r7
 800cde6:	bd80      	pop	{r7, pc}
 800cde8:	20000170 	.word	0x20000170

0800cdec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b082      	sub	sp, #8
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	6039      	str	r1, [r7, #0]
 800cdf6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cdf8:	79fb      	ldrb	r3, [r7, #7]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d105      	bne.n	800ce0a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cdfe:	683a      	ldr	r2, [r7, #0]
 800ce00:	4907      	ldr	r1, [pc, #28]	; (800ce20 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ce02:	4808      	ldr	r0, [pc, #32]	; (800ce24 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ce04:	f7ff fd34 	bl	800c870 <USBD_GetString>
 800ce08:	e004      	b.n	800ce14 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ce0a:	683a      	ldr	r2, [r7, #0]
 800ce0c:	4904      	ldr	r1, [pc, #16]	; (800ce20 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ce0e:	4805      	ldr	r0, [pc, #20]	; (800ce24 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ce10:	f7ff fd2e 	bl	800c870 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ce14:	4b02      	ldr	r3, [pc, #8]	; (800ce20 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ce16:	4618      	mov	r0, r3
 800ce18:	3708      	adds	r7, #8
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	bd80      	pop	{r7, pc}
 800ce1e:	bf00      	nop
 800ce20:	20002240 	.word	0x20002240
 800ce24:	08011a90 	.word	0x08011a90

0800ce28 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b082      	sub	sp, #8
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	4603      	mov	r3, r0
 800ce30:	6039      	str	r1, [r7, #0]
 800ce32:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ce34:	79fb      	ldrb	r3, [r7, #7]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d105      	bne.n	800ce46 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ce3a:	683a      	ldr	r2, [r7, #0]
 800ce3c:	4907      	ldr	r1, [pc, #28]	; (800ce5c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ce3e:	4808      	ldr	r0, [pc, #32]	; (800ce60 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ce40:	f7ff fd16 	bl	800c870 <USBD_GetString>
 800ce44:	e004      	b.n	800ce50 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ce46:	683a      	ldr	r2, [r7, #0]
 800ce48:	4904      	ldr	r1, [pc, #16]	; (800ce5c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ce4a:	4805      	ldr	r0, [pc, #20]	; (800ce60 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ce4c:	f7ff fd10 	bl	800c870 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ce50:	4b02      	ldr	r3, [pc, #8]	; (800ce5c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ce52:	4618      	mov	r0, r3
 800ce54:	3708      	adds	r7, #8
 800ce56:	46bd      	mov	sp, r7
 800ce58:	bd80      	pop	{r7, pc}
 800ce5a:	bf00      	nop
 800ce5c:	20002240 	.word	0x20002240
 800ce60:	08011a9c 	.word	0x08011a9c

0800ce64 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b084      	sub	sp, #16
 800ce68:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ce6a:	4b0f      	ldr	r3, [pc, #60]	; (800cea8 <Get_SerialNum+0x44>)
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ce70:	4b0e      	ldr	r3, [pc, #56]	; (800ceac <Get_SerialNum+0x48>)
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ce76:	4b0e      	ldr	r3, [pc, #56]	; (800ceb0 <Get_SerialNum+0x4c>)
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ce7c:	68fa      	ldr	r2, [r7, #12]
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	4413      	add	r3, r2
 800ce82:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d009      	beq.n	800ce9e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ce8a:	2208      	movs	r2, #8
 800ce8c:	4909      	ldr	r1, [pc, #36]	; (800ceb4 <Get_SerialNum+0x50>)
 800ce8e:	68f8      	ldr	r0, [r7, #12]
 800ce90:	f000 f814 	bl	800cebc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ce94:	2204      	movs	r2, #4
 800ce96:	4908      	ldr	r1, [pc, #32]	; (800ceb8 <Get_SerialNum+0x54>)
 800ce98:	68b8      	ldr	r0, [r7, #8]
 800ce9a:	f000 f80f 	bl	800cebc <IntToUnicode>
  }
}
 800ce9e:	bf00      	nop
 800cea0:	3710      	adds	r7, #16
 800cea2:	46bd      	mov	sp, r7
 800cea4:	bd80      	pop	{r7, pc}
 800cea6:	bf00      	nop
 800cea8:	1fff7a10 	.word	0x1fff7a10
 800ceac:	1fff7a14 	.word	0x1fff7a14
 800ceb0:	1fff7a18 	.word	0x1fff7a18
 800ceb4:	20000172 	.word	0x20000172
 800ceb8:	20000182 	.word	0x20000182

0800cebc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cebc:	b480      	push	{r7}
 800cebe:	b087      	sub	sp, #28
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	60f8      	str	r0, [r7, #12]
 800cec4:	60b9      	str	r1, [r7, #8]
 800cec6:	4613      	mov	r3, r2
 800cec8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ceca:	2300      	movs	r3, #0
 800cecc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cece:	2300      	movs	r3, #0
 800ced0:	75fb      	strb	r3, [r7, #23]
 800ced2:	e027      	b.n	800cf24 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	0f1b      	lsrs	r3, r3, #28
 800ced8:	2b09      	cmp	r3, #9
 800ceda:	d80b      	bhi.n	800cef4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	0f1b      	lsrs	r3, r3, #28
 800cee0:	b2da      	uxtb	r2, r3
 800cee2:	7dfb      	ldrb	r3, [r7, #23]
 800cee4:	005b      	lsls	r3, r3, #1
 800cee6:	4619      	mov	r1, r3
 800cee8:	68bb      	ldr	r3, [r7, #8]
 800ceea:	440b      	add	r3, r1
 800ceec:	3230      	adds	r2, #48	; 0x30
 800ceee:	b2d2      	uxtb	r2, r2
 800cef0:	701a      	strb	r2, [r3, #0]
 800cef2:	e00a      	b.n	800cf0a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	0f1b      	lsrs	r3, r3, #28
 800cef8:	b2da      	uxtb	r2, r3
 800cefa:	7dfb      	ldrb	r3, [r7, #23]
 800cefc:	005b      	lsls	r3, r3, #1
 800cefe:	4619      	mov	r1, r3
 800cf00:	68bb      	ldr	r3, [r7, #8]
 800cf02:	440b      	add	r3, r1
 800cf04:	3237      	adds	r2, #55	; 0x37
 800cf06:	b2d2      	uxtb	r2, r2
 800cf08:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	011b      	lsls	r3, r3, #4
 800cf0e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cf10:	7dfb      	ldrb	r3, [r7, #23]
 800cf12:	005b      	lsls	r3, r3, #1
 800cf14:	3301      	adds	r3, #1
 800cf16:	68ba      	ldr	r2, [r7, #8]
 800cf18:	4413      	add	r3, r2
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cf1e:	7dfb      	ldrb	r3, [r7, #23]
 800cf20:	3301      	adds	r3, #1
 800cf22:	75fb      	strb	r3, [r7, #23]
 800cf24:	7dfa      	ldrb	r2, [r7, #23]
 800cf26:	79fb      	ldrb	r3, [r7, #7]
 800cf28:	429a      	cmp	r2, r3
 800cf2a:	d3d3      	bcc.n	800ced4 <IntToUnicode+0x18>
  }
}
 800cf2c:	bf00      	nop
 800cf2e:	371c      	adds	r7, #28
 800cf30:	46bd      	mov	sp, r7
 800cf32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf36:	4770      	bx	lr

0800cf38 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b08a      	sub	sp, #40	; 0x28
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cf40:	f107 0314 	add.w	r3, r7, #20
 800cf44:	2200      	movs	r2, #0
 800cf46:	601a      	str	r2, [r3, #0]
 800cf48:	605a      	str	r2, [r3, #4]
 800cf4a:	609a      	str	r2, [r3, #8]
 800cf4c:	60da      	str	r2, [r3, #12]
 800cf4e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cf58:	d147      	bne.n	800cfea <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	613b      	str	r3, [r7, #16]
 800cf5e:	4b25      	ldr	r3, [pc, #148]	; (800cff4 <HAL_PCD_MspInit+0xbc>)
 800cf60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf62:	4a24      	ldr	r2, [pc, #144]	; (800cff4 <HAL_PCD_MspInit+0xbc>)
 800cf64:	f043 0301 	orr.w	r3, r3, #1
 800cf68:	6313      	str	r3, [r2, #48]	; 0x30
 800cf6a:	4b22      	ldr	r3, [pc, #136]	; (800cff4 <HAL_PCD_MspInit+0xbc>)
 800cf6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf6e:	f003 0301 	and.w	r3, r3, #1
 800cf72:	613b      	str	r3, [r7, #16]
 800cf74:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800cf76:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cf7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf80:	2300      	movs	r3, #0
 800cf82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cf84:	f107 0314 	add.w	r3, r7, #20
 800cf88:	4619      	mov	r1, r3
 800cf8a:	481b      	ldr	r0, [pc, #108]	; (800cff8 <HAL_PCD_MspInit+0xc0>)
 800cf8c:	f7f6 fcd0 	bl	8003930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800cf90:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800cf94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cf96:	2302      	movs	r3, #2
 800cf98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cf9e:	2303      	movs	r3, #3
 800cfa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800cfa2:	230a      	movs	r3, #10
 800cfa4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cfa6:	f107 0314 	add.w	r3, r7, #20
 800cfaa:	4619      	mov	r1, r3
 800cfac:	4812      	ldr	r0, [pc, #72]	; (800cff8 <HAL_PCD_MspInit+0xc0>)
 800cfae:	f7f6 fcbf 	bl	8003930 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800cfb2:	4b10      	ldr	r3, [pc, #64]	; (800cff4 <HAL_PCD_MspInit+0xbc>)
 800cfb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfb6:	4a0f      	ldr	r2, [pc, #60]	; (800cff4 <HAL_PCD_MspInit+0xbc>)
 800cfb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cfbc:	6353      	str	r3, [r2, #52]	; 0x34
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	60fb      	str	r3, [r7, #12]
 800cfc2:	4b0c      	ldr	r3, [pc, #48]	; (800cff4 <HAL_PCD_MspInit+0xbc>)
 800cfc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cfc6:	4a0b      	ldr	r2, [pc, #44]	; (800cff4 <HAL_PCD_MspInit+0xbc>)
 800cfc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cfcc:	6453      	str	r3, [r2, #68]	; 0x44
 800cfce:	4b09      	ldr	r3, [pc, #36]	; (800cff4 <HAL_PCD_MspInit+0xbc>)
 800cfd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cfd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cfd6:	60fb      	str	r3, [r7, #12]
 800cfd8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800cfda:	2200      	movs	r2, #0
 800cfdc:	2100      	movs	r1, #0
 800cfde:	2043      	movs	r0, #67	; 0x43
 800cfe0:	f7f6 f8d3 	bl	800318a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800cfe4:	2043      	movs	r0, #67	; 0x43
 800cfe6:	f7f6 f8ec 	bl	80031c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800cfea:	bf00      	nop
 800cfec:	3728      	adds	r7, #40	; 0x28
 800cfee:	46bd      	mov	sp, r7
 800cff0:	bd80      	pop	{r7, pc}
 800cff2:	bf00      	nop
 800cff4:	40023800 	.word	0x40023800
 800cff8:	40020000 	.word	0x40020000

0800cffc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b082      	sub	sp, #8
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d010:	4619      	mov	r1, r3
 800d012:	4610      	mov	r0, r2
 800d014:	f7fe fd3e 	bl	800ba94 <USBD_LL_SetupStage>
}
 800d018:	bf00      	nop
 800d01a:	3708      	adds	r7, #8
 800d01c:	46bd      	mov	sp, r7
 800d01e:	bd80      	pop	{r7, pc}

0800d020 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b082      	sub	sp, #8
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
 800d028:	460b      	mov	r3, r1
 800d02a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800d032:	78fa      	ldrb	r2, [r7, #3]
 800d034:	6879      	ldr	r1, [r7, #4]
 800d036:	4613      	mov	r3, r2
 800d038:	00db      	lsls	r3, r3, #3
 800d03a:	1a9b      	subs	r3, r3, r2
 800d03c:	009b      	lsls	r3, r3, #2
 800d03e:	440b      	add	r3, r1
 800d040:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d044:	681a      	ldr	r2, [r3, #0]
 800d046:	78fb      	ldrb	r3, [r7, #3]
 800d048:	4619      	mov	r1, r3
 800d04a:	f7fe fd6e 	bl	800bb2a <USBD_LL_DataOutStage>
}
 800d04e:	bf00      	nop
 800d050:	3708      	adds	r7, #8
 800d052:	46bd      	mov	sp, r7
 800d054:	bd80      	pop	{r7, pc}

0800d056 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d056:	b580      	push	{r7, lr}
 800d058:	b082      	sub	sp, #8
 800d05a:	af00      	add	r7, sp, #0
 800d05c:	6078      	str	r0, [r7, #4]
 800d05e:	460b      	mov	r3, r1
 800d060:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800d068:	78fa      	ldrb	r2, [r7, #3]
 800d06a:	6879      	ldr	r1, [r7, #4]
 800d06c:	4613      	mov	r3, r2
 800d06e:	00db      	lsls	r3, r3, #3
 800d070:	1a9b      	subs	r3, r3, r2
 800d072:	009b      	lsls	r3, r3, #2
 800d074:	440b      	add	r3, r1
 800d076:	3348      	adds	r3, #72	; 0x48
 800d078:	681a      	ldr	r2, [r3, #0]
 800d07a:	78fb      	ldrb	r3, [r7, #3]
 800d07c:	4619      	mov	r1, r3
 800d07e:	f7fe fdc5 	bl	800bc0c <USBD_LL_DataInStage>
}
 800d082:	bf00      	nop
 800d084:	3708      	adds	r7, #8
 800d086:	46bd      	mov	sp, r7
 800d088:	bd80      	pop	{r7, pc}

0800d08a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d08a:	b580      	push	{r7, lr}
 800d08c:	b082      	sub	sp, #8
 800d08e:	af00      	add	r7, sp, #0
 800d090:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d098:	4618      	mov	r0, r3
 800d09a:	f7fe fed3 	bl	800be44 <USBD_LL_SOF>
}
 800d09e:	bf00      	nop
 800d0a0:	3708      	adds	r7, #8
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	bd80      	pop	{r7, pc}

0800d0a6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800d0a6:	b580      	push	{r7, lr}
 800d0a8:	b084      	sub	sp, #16
 800d0aa:	af00      	add	r7, sp, #0
 800d0ac:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d0ae:	2301      	movs	r3, #1
 800d0b0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	68db      	ldr	r3, [r3, #12]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d102      	bne.n	800d0c0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	73fb      	strb	r3, [r7, #15]
 800d0be:	e008      	b.n	800d0d2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	68db      	ldr	r3, [r3, #12]
 800d0c4:	2b02      	cmp	r3, #2
 800d0c6:	d102      	bne.n	800d0ce <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d0c8:	2301      	movs	r3, #1
 800d0ca:	73fb      	strb	r3, [r7, #15]
 800d0cc:	e001      	b.n	800d0d2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d0ce:	f7f5 fbad 	bl	800282c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d0d8:	7bfa      	ldrb	r2, [r7, #15]
 800d0da:	4611      	mov	r1, r2
 800d0dc:	4618      	mov	r0, r3
 800d0de:	f7fe fe7b 	bl	800bdd8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	f7fe fe34 	bl	800bd56 <USBD_LL_Reset>
}
 800d0ee:	bf00      	nop
 800d0f0:	3710      	adds	r7, #16
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	bd80      	pop	{r7, pc}
	...

0800d0f8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b082      	sub	sp, #8
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d106:	4618      	mov	r0, r3
 800d108:	f7fe fe76 	bl	800bdf8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	687a      	ldr	r2, [r7, #4]
 800d118:	6812      	ldr	r2, [r2, #0]
 800d11a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d11e:	f043 0301 	orr.w	r3, r3, #1
 800d122:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	6a1b      	ldr	r3, [r3, #32]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d005      	beq.n	800d138 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d12c:	4b04      	ldr	r3, [pc, #16]	; (800d140 <HAL_PCD_SuspendCallback+0x48>)
 800d12e:	691b      	ldr	r3, [r3, #16]
 800d130:	4a03      	ldr	r2, [pc, #12]	; (800d140 <HAL_PCD_SuspendCallback+0x48>)
 800d132:	f043 0306 	orr.w	r3, r3, #6
 800d136:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d138:	bf00      	nop
 800d13a:	3708      	adds	r7, #8
 800d13c:	46bd      	mov	sp, r7
 800d13e:	bd80      	pop	{r7, pc}
 800d140:	e000ed00 	.word	0xe000ed00

0800d144 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d144:	b580      	push	{r7, lr}
 800d146:	b082      	sub	sp, #8
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d152:	4618      	mov	r0, r3
 800d154:	f7fe fe65 	bl	800be22 <USBD_LL_Resume>
}
 800d158:	bf00      	nop
 800d15a:	3708      	adds	r7, #8
 800d15c:	46bd      	mov	sp, r7
 800d15e:	bd80      	pop	{r7, pc}

0800d160 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b082      	sub	sp, #8
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
 800d168:	460b      	mov	r3, r1
 800d16a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d172:	78fa      	ldrb	r2, [r7, #3]
 800d174:	4611      	mov	r1, r2
 800d176:	4618      	mov	r0, r3
 800d178:	f7fe fe8b 	bl	800be92 <USBD_LL_IsoOUTIncomplete>
}
 800d17c:	bf00      	nop
 800d17e:	3708      	adds	r7, #8
 800d180:	46bd      	mov	sp, r7
 800d182:	bd80      	pop	{r7, pc}

0800d184 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d184:	b580      	push	{r7, lr}
 800d186:	b082      	sub	sp, #8
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
 800d18c:	460b      	mov	r3, r1
 800d18e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d196:	78fa      	ldrb	r2, [r7, #3]
 800d198:	4611      	mov	r1, r2
 800d19a:	4618      	mov	r0, r3
 800d19c:	f7fe fe6c 	bl	800be78 <USBD_LL_IsoINIncomplete>
}
 800d1a0:	bf00      	nop
 800d1a2:	3708      	adds	r7, #8
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	bd80      	pop	{r7, pc}

0800d1a8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b082      	sub	sp, #8
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	f7fe fe78 	bl	800beac <USBD_LL_DevConnected>
}
 800d1bc:	bf00      	nop
 800d1be:	3708      	adds	r7, #8
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	bd80      	pop	{r7, pc}

0800d1c4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b082      	sub	sp, #8
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	f7fe fe75 	bl	800bec2 <USBD_LL_DevDisconnected>
}
 800d1d8:	bf00      	nop
 800d1da:	3708      	adds	r7, #8
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	bd80      	pop	{r7, pc}

0800d1e0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b082      	sub	sp, #8
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	781b      	ldrb	r3, [r3, #0]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d13c      	bne.n	800d26a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d1f0:	4a20      	ldr	r2, [pc, #128]	; (800d274 <USBD_LL_Init+0x94>)
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	4a1e      	ldr	r2, [pc, #120]	; (800d274 <USBD_LL_Init+0x94>)
 800d1fc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d200:	4b1c      	ldr	r3, [pc, #112]	; (800d274 <USBD_LL_Init+0x94>)
 800d202:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d206:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d208:	4b1a      	ldr	r3, [pc, #104]	; (800d274 <USBD_LL_Init+0x94>)
 800d20a:	2204      	movs	r2, #4
 800d20c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d20e:	4b19      	ldr	r3, [pc, #100]	; (800d274 <USBD_LL_Init+0x94>)
 800d210:	2202      	movs	r2, #2
 800d212:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d214:	4b17      	ldr	r3, [pc, #92]	; (800d274 <USBD_LL_Init+0x94>)
 800d216:	2200      	movs	r2, #0
 800d218:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d21a:	4b16      	ldr	r3, [pc, #88]	; (800d274 <USBD_LL_Init+0x94>)
 800d21c:	2202      	movs	r2, #2
 800d21e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d220:	4b14      	ldr	r3, [pc, #80]	; (800d274 <USBD_LL_Init+0x94>)
 800d222:	2200      	movs	r2, #0
 800d224:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d226:	4b13      	ldr	r3, [pc, #76]	; (800d274 <USBD_LL_Init+0x94>)
 800d228:	2200      	movs	r2, #0
 800d22a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d22c:	4b11      	ldr	r3, [pc, #68]	; (800d274 <USBD_LL_Init+0x94>)
 800d22e:	2200      	movs	r2, #0
 800d230:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800d232:	4b10      	ldr	r3, [pc, #64]	; (800d274 <USBD_LL_Init+0x94>)
 800d234:	2201      	movs	r2, #1
 800d236:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d238:	4b0e      	ldr	r3, [pc, #56]	; (800d274 <USBD_LL_Init+0x94>)
 800d23a:	2200      	movs	r2, #0
 800d23c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d23e:	480d      	ldr	r0, [pc, #52]	; (800d274 <USBD_LL_Init+0x94>)
 800d240:	f7f7 fd23 	bl	8004c8a <HAL_PCD_Init>
 800d244:	4603      	mov	r3, r0
 800d246:	2b00      	cmp	r3, #0
 800d248:	d001      	beq.n	800d24e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d24a:	f7f5 faef 	bl	800282c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d24e:	2180      	movs	r1, #128	; 0x80
 800d250:	4808      	ldr	r0, [pc, #32]	; (800d274 <USBD_LL_Init+0x94>)
 800d252:	f7f8 fe88 	bl	8005f66 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d256:	2240      	movs	r2, #64	; 0x40
 800d258:	2100      	movs	r1, #0
 800d25a:	4806      	ldr	r0, [pc, #24]	; (800d274 <USBD_LL_Init+0x94>)
 800d25c:	f7f8 fe3c 	bl	8005ed8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d260:	2280      	movs	r2, #128	; 0x80
 800d262:	2101      	movs	r1, #1
 800d264:	4803      	ldr	r0, [pc, #12]	; (800d274 <USBD_LL_Init+0x94>)
 800d266:	f7f8 fe37 	bl	8005ed8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d26a:	2300      	movs	r3, #0
}
 800d26c:	4618      	mov	r0, r3
 800d26e:	3708      	adds	r7, #8
 800d270:	46bd      	mov	sp, r7
 800d272:	bd80      	pop	{r7, pc}
 800d274:	20002440 	.word	0x20002440

0800d278 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b084      	sub	sp, #16
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d280:	2300      	movs	r3, #0
 800d282:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d284:	2300      	movs	r3, #0
 800d286:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800d28e:	4618      	mov	r0, r3
 800d290:	f7f7 fe18 	bl	8004ec4 <HAL_PCD_Start>
 800d294:	4603      	mov	r3, r0
 800d296:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 800d298:	7bfb      	ldrb	r3, [r7, #15]
 800d29a:	4618      	mov	r0, r3
 800d29c:	f000 f92e 	bl	800d4fc <USBD_Get_USB_Status>
 800d2a0:	4603      	mov	r3, r0
 800d2a2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800d2a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	3710      	adds	r7, #16
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	bd80      	pop	{r7, pc}

0800d2ae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d2ae:	b580      	push	{r7, lr}
 800d2b0:	b084      	sub	sp, #16
 800d2b2:	af00      	add	r7, sp, #0
 800d2b4:	6078      	str	r0, [r7, #4]
 800d2b6:	4608      	mov	r0, r1
 800d2b8:	4611      	mov	r1, r2
 800d2ba:	461a      	mov	r2, r3
 800d2bc:	4603      	mov	r3, r0
 800d2be:	70fb      	strb	r3, [r7, #3]
 800d2c0:	460b      	mov	r3, r1
 800d2c2:	70bb      	strb	r3, [r7, #2]
 800d2c4:	4613      	mov	r3, r2
 800d2c6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800d2d6:	78bb      	ldrb	r3, [r7, #2]
 800d2d8:	883a      	ldrh	r2, [r7, #0]
 800d2da:	78f9      	ldrb	r1, [r7, #3]
 800d2dc:	f7f8 f9ed 	bl	80056ba <HAL_PCD_EP_Open>
 800d2e0:	4603      	mov	r3, r0
 800d2e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2e4:	7bfb      	ldrb	r3, [r7, #15]
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	f000 f908 	bl	800d4fc <USBD_Get_USB_Status>
 800d2ec:	4603      	mov	r3, r0
 800d2ee:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800d2f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	3710      	adds	r7, #16
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	bd80      	pop	{r7, pc}

0800d2fa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d2fa:	b580      	push	{r7, lr}
 800d2fc:	b084      	sub	sp, #16
 800d2fe:	af00      	add	r7, sp, #0
 800d300:	6078      	str	r0, [r7, #4]
 800d302:	460b      	mov	r3, r1
 800d304:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d306:	2300      	movs	r3, #0
 800d308:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d30a:	2300      	movs	r3, #0
 800d30c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800d314:	78fa      	ldrb	r2, [r7, #3]
 800d316:	4611      	mov	r1, r2
 800d318:	4618      	mov	r0, r3
 800d31a:	f7f8 fa36 	bl	800578a <HAL_PCD_EP_Close>
 800d31e:	4603      	mov	r3, r0
 800d320:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800d322:	7bfb      	ldrb	r3, [r7, #15]
 800d324:	4618      	mov	r0, r3
 800d326:	f000 f8e9 	bl	800d4fc <USBD_Get_USB_Status>
 800d32a:	4603      	mov	r3, r0
 800d32c:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800d32e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d330:	4618      	mov	r0, r3
 800d332:	3710      	adds	r7, #16
 800d334:	46bd      	mov	sp, r7
 800d336:	bd80      	pop	{r7, pc}

0800d338 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d338:	b580      	push	{r7, lr}
 800d33a:	b084      	sub	sp, #16
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]
 800d340:	460b      	mov	r3, r1
 800d342:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d344:	2300      	movs	r3, #0
 800d346:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d348:	2300      	movs	r3, #0
 800d34a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800d352:	78fa      	ldrb	r2, [r7, #3]
 800d354:	4611      	mov	r1, r2
 800d356:	4618      	mov	r0, r3
 800d358:	f7f8 fb0e 	bl	8005978 <HAL_PCD_EP_SetStall>
 800d35c:	4603      	mov	r3, r0
 800d35e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d360:	7bfb      	ldrb	r3, [r7, #15]
 800d362:	4618      	mov	r0, r3
 800d364:	f000 f8ca 	bl	800d4fc <USBD_Get_USB_Status>
 800d368:	4603      	mov	r3, r0
 800d36a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800d36c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d36e:	4618      	mov	r0, r3
 800d370:	3710      	adds	r7, #16
 800d372:	46bd      	mov	sp, r7
 800d374:	bd80      	pop	{r7, pc}

0800d376 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d376:	b580      	push	{r7, lr}
 800d378:	b084      	sub	sp, #16
 800d37a:	af00      	add	r7, sp, #0
 800d37c:	6078      	str	r0, [r7, #4]
 800d37e:	460b      	mov	r3, r1
 800d380:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d382:	2300      	movs	r3, #0
 800d384:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d386:	2300      	movs	r3, #0
 800d388:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800d390:	78fa      	ldrb	r2, [r7, #3]
 800d392:	4611      	mov	r1, r2
 800d394:	4618      	mov	r0, r3
 800d396:	f7f8 fb53 	bl	8005a40 <HAL_PCD_EP_ClrStall>
 800d39a:	4603      	mov	r3, r0
 800d39c:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800d39e:	7bfb      	ldrb	r3, [r7, #15]
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	f000 f8ab 	bl	800d4fc <USBD_Get_USB_Status>
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800d3aa:	7bbb      	ldrb	r3, [r7, #14]
}
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	3710      	adds	r7, #16
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	bd80      	pop	{r7, pc}

0800d3b4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d3b4:	b480      	push	{r7}
 800d3b6:	b085      	sub	sp, #20
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	6078      	str	r0, [r7, #4]
 800d3bc:	460b      	mov	r3, r1
 800d3be:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800d3c6:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800d3c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	da0b      	bge.n	800d3e8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800d3d0:	78fb      	ldrb	r3, [r7, #3]
 800d3d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d3d6:	68f9      	ldr	r1, [r7, #12]
 800d3d8:	4613      	mov	r3, r2
 800d3da:	00db      	lsls	r3, r3, #3
 800d3dc:	1a9b      	subs	r3, r3, r2
 800d3de:	009b      	lsls	r3, r3, #2
 800d3e0:	440b      	add	r3, r1
 800d3e2:	333e      	adds	r3, #62	; 0x3e
 800d3e4:	781b      	ldrb	r3, [r3, #0]
 800d3e6:	e00b      	b.n	800d400 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800d3e8:	78fb      	ldrb	r3, [r7, #3]
 800d3ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d3ee:	68f9      	ldr	r1, [r7, #12]
 800d3f0:	4613      	mov	r3, r2
 800d3f2:	00db      	lsls	r3, r3, #3
 800d3f4:	1a9b      	subs	r3, r3, r2
 800d3f6:	009b      	lsls	r3, r3, #2
 800d3f8:	440b      	add	r3, r1
 800d3fa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d3fe:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d400:	4618      	mov	r0, r3
 800d402:	3714      	adds	r7, #20
 800d404:	46bd      	mov	sp, r7
 800d406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d40a:	4770      	bx	lr

0800d40c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b084      	sub	sp, #16
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
 800d414:	460b      	mov	r3, r1
 800d416:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d418:	2300      	movs	r3, #0
 800d41a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d41c:	2300      	movs	r3, #0
 800d41e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800d426:	78fa      	ldrb	r2, [r7, #3]
 800d428:	4611      	mov	r1, r2
 800d42a:	4618      	mov	r0, r3
 800d42c:	f7f8 f920 	bl	8005670 <HAL_PCD_SetAddress>
 800d430:	4603      	mov	r3, r0
 800d432:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d434:	7bfb      	ldrb	r3, [r7, #15]
 800d436:	4618      	mov	r0, r3
 800d438:	f000 f860 	bl	800d4fc <USBD_Get_USB_Status>
 800d43c:	4603      	mov	r3, r0
 800d43e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800d440:	7bbb      	ldrb	r3, [r7, #14]
}
 800d442:	4618      	mov	r0, r3
 800d444:	3710      	adds	r7, #16
 800d446:	46bd      	mov	sp, r7
 800d448:	bd80      	pop	{r7, pc}

0800d44a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d44a:	b580      	push	{r7, lr}
 800d44c:	b086      	sub	sp, #24
 800d44e:	af00      	add	r7, sp, #0
 800d450:	60f8      	str	r0, [r7, #12]
 800d452:	607a      	str	r2, [r7, #4]
 800d454:	461a      	mov	r2, r3
 800d456:	460b      	mov	r3, r1
 800d458:	72fb      	strb	r3, [r7, #11]
 800d45a:	4613      	mov	r3, r2
 800d45c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d45e:	2300      	movs	r3, #0
 800d460:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d462:	2300      	movs	r3, #0
 800d464:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800d46c:	893b      	ldrh	r3, [r7, #8]
 800d46e:	7af9      	ldrb	r1, [r7, #11]
 800d470:	687a      	ldr	r2, [r7, #4]
 800d472:	f7f8 fa37 	bl	80058e4 <HAL_PCD_EP_Transmit>
 800d476:	4603      	mov	r3, r0
 800d478:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800d47a:	7dfb      	ldrb	r3, [r7, #23]
 800d47c:	4618      	mov	r0, r3
 800d47e:	f000 f83d 	bl	800d4fc <USBD_Get_USB_Status>
 800d482:	4603      	mov	r3, r0
 800d484:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800d486:	7dbb      	ldrb	r3, [r7, #22]
}
 800d488:	4618      	mov	r0, r3
 800d48a:	3718      	adds	r7, #24
 800d48c:	46bd      	mov	sp, r7
 800d48e:	bd80      	pop	{r7, pc}

0800d490 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b086      	sub	sp, #24
 800d494:	af00      	add	r7, sp, #0
 800d496:	60f8      	str	r0, [r7, #12]
 800d498:	607a      	str	r2, [r7, #4]
 800d49a:	461a      	mov	r2, r3
 800d49c:	460b      	mov	r3, r1
 800d49e:	72fb      	strb	r3, [r7, #11]
 800d4a0:	4613      	mov	r3, r2
 800d4a2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800d4b2:	893b      	ldrh	r3, [r7, #8]
 800d4b4:	7af9      	ldrb	r1, [r7, #11]
 800d4b6:	687a      	ldr	r2, [r7, #4]
 800d4b8:	f7f8 f9b1 	bl	800581e <HAL_PCD_EP_Receive>
 800d4bc:	4603      	mov	r3, r0
 800d4be:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800d4c0:	7dfb      	ldrb	r3, [r7, #23]
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	f000 f81a 	bl	800d4fc <USBD_Get_USB_Status>
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 800d4cc:	7dbb      	ldrb	r3, [r7, #22]
}
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	3718      	adds	r7, #24
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	bd80      	pop	{r7, pc}

0800d4d6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d4d6:	b580      	push	{r7, lr}
 800d4d8:	b082      	sub	sp, #8
 800d4da:	af00      	add	r7, sp, #0
 800d4dc:	6078      	str	r0, [r7, #4]
 800d4de:	460b      	mov	r3, r1
 800d4e0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800d4e8:	78fa      	ldrb	r2, [r7, #3]
 800d4ea:	4611      	mov	r1, r2
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	f7f8 f9e1 	bl	80058b4 <HAL_PCD_EP_GetRxCount>
 800d4f2:	4603      	mov	r3, r0
}
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	3708      	adds	r7, #8
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	bd80      	pop	{r7, pc}

0800d4fc <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d4fc:	b480      	push	{r7}
 800d4fe:	b085      	sub	sp, #20
 800d500:	af00      	add	r7, sp, #0
 800d502:	4603      	mov	r3, r0
 800d504:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d506:	2300      	movs	r3, #0
 800d508:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d50a:	79fb      	ldrb	r3, [r7, #7]
 800d50c:	2b03      	cmp	r3, #3
 800d50e:	d817      	bhi.n	800d540 <USBD_Get_USB_Status+0x44>
 800d510:	a201      	add	r2, pc, #4	; (adr r2, 800d518 <USBD_Get_USB_Status+0x1c>)
 800d512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d516:	bf00      	nop
 800d518:	0800d529 	.word	0x0800d529
 800d51c:	0800d52f 	.word	0x0800d52f
 800d520:	0800d535 	.word	0x0800d535
 800d524:	0800d53b 	.word	0x0800d53b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d528:	2300      	movs	r3, #0
 800d52a:	73fb      	strb	r3, [r7, #15]
    break;
 800d52c:	e00b      	b.n	800d546 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d52e:	2302      	movs	r3, #2
 800d530:	73fb      	strb	r3, [r7, #15]
    break;
 800d532:	e008      	b.n	800d546 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d534:	2301      	movs	r3, #1
 800d536:	73fb      	strb	r3, [r7, #15]
    break;
 800d538:	e005      	b.n	800d546 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d53a:	2302      	movs	r3, #2
 800d53c:	73fb      	strb	r3, [r7, #15]
    break;
 800d53e:	e002      	b.n	800d546 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d540:	2302      	movs	r3, #2
 800d542:	73fb      	strb	r3, [r7, #15]
    break;
 800d544:	bf00      	nop
  }
  return usb_status;
 800d546:	7bfb      	ldrb	r3, [r7, #15]
}
 800d548:	4618      	mov	r0, r3
 800d54a:	3714      	adds	r7, #20
 800d54c:	46bd      	mov	sp, r7
 800d54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d552:	4770      	bx	lr

0800d554 <__errno>:
 800d554:	4b01      	ldr	r3, [pc, #4]	; (800d55c <__errno+0x8>)
 800d556:	6818      	ldr	r0, [r3, #0]
 800d558:	4770      	bx	lr
 800d55a:	bf00      	nop
 800d55c:	2000018c 	.word	0x2000018c

0800d560 <__libc_init_array>:
 800d560:	b570      	push	{r4, r5, r6, lr}
 800d562:	4e0d      	ldr	r6, [pc, #52]	; (800d598 <__libc_init_array+0x38>)
 800d564:	4c0d      	ldr	r4, [pc, #52]	; (800d59c <__libc_init_array+0x3c>)
 800d566:	1ba4      	subs	r4, r4, r6
 800d568:	10a4      	asrs	r4, r4, #2
 800d56a:	2500      	movs	r5, #0
 800d56c:	42a5      	cmp	r5, r4
 800d56e:	d109      	bne.n	800d584 <__libc_init_array+0x24>
 800d570:	4e0b      	ldr	r6, [pc, #44]	; (800d5a0 <__libc_init_array+0x40>)
 800d572:	4c0c      	ldr	r4, [pc, #48]	; (800d5a4 <__libc_init_array+0x44>)
 800d574:	f004 fa04 	bl	8011980 <_init>
 800d578:	1ba4      	subs	r4, r4, r6
 800d57a:	10a4      	asrs	r4, r4, #2
 800d57c:	2500      	movs	r5, #0
 800d57e:	42a5      	cmp	r5, r4
 800d580:	d105      	bne.n	800d58e <__libc_init_array+0x2e>
 800d582:	bd70      	pop	{r4, r5, r6, pc}
 800d584:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d588:	4798      	blx	r3
 800d58a:	3501      	adds	r5, #1
 800d58c:	e7ee      	b.n	800d56c <__libc_init_array+0xc>
 800d58e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d592:	4798      	blx	r3
 800d594:	3501      	adds	r5, #1
 800d596:	e7f2      	b.n	800d57e <__libc_init_array+0x1e>
 800d598:	08011e08 	.word	0x08011e08
 800d59c:	08011e08 	.word	0x08011e08
 800d5a0:	08011e08 	.word	0x08011e08
 800d5a4:	08011e0c 	.word	0x08011e0c

0800d5a8 <malloc>:
 800d5a8:	4b02      	ldr	r3, [pc, #8]	; (800d5b4 <malloc+0xc>)
 800d5aa:	4601      	mov	r1, r0
 800d5ac:	6818      	ldr	r0, [r3, #0]
 800d5ae:	f000 b86d 	b.w	800d68c <_malloc_r>
 800d5b2:	bf00      	nop
 800d5b4:	2000018c 	.word	0x2000018c

0800d5b8 <free>:
 800d5b8:	4b02      	ldr	r3, [pc, #8]	; (800d5c4 <free+0xc>)
 800d5ba:	4601      	mov	r1, r0
 800d5bc:	6818      	ldr	r0, [r3, #0]
 800d5be:	f000 b817 	b.w	800d5f0 <_free_r>
 800d5c2:	bf00      	nop
 800d5c4:	2000018c 	.word	0x2000018c

0800d5c8 <memcpy>:
 800d5c8:	b510      	push	{r4, lr}
 800d5ca:	1e43      	subs	r3, r0, #1
 800d5cc:	440a      	add	r2, r1
 800d5ce:	4291      	cmp	r1, r2
 800d5d0:	d100      	bne.n	800d5d4 <memcpy+0xc>
 800d5d2:	bd10      	pop	{r4, pc}
 800d5d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d5d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d5dc:	e7f7      	b.n	800d5ce <memcpy+0x6>

0800d5de <memset>:
 800d5de:	4402      	add	r2, r0
 800d5e0:	4603      	mov	r3, r0
 800d5e2:	4293      	cmp	r3, r2
 800d5e4:	d100      	bne.n	800d5e8 <memset+0xa>
 800d5e6:	4770      	bx	lr
 800d5e8:	f803 1b01 	strb.w	r1, [r3], #1
 800d5ec:	e7f9      	b.n	800d5e2 <memset+0x4>
	...

0800d5f0 <_free_r>:
 800d5f0:	b538      	push	{r3, r4, r5, lr}
 800d5f2:	4605      	mov	r5, r0
 800d5f4:	2900      	cmp	r1, #0
 800d5f6:	d045      	beq.n	800d684 <_free_r+0x94>
 800d5f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d5fc:	1f0c      	subs	r4, r1, #4
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	bfb8      	it	lt
 800d602:	18e4      	addlt	r4, r4, r3
 800d604:	f003 f832 	bl	801066c <__malloc_lock>
 800d608:	4a1f      	ldr	r2, [pc, #124]	; (800d688 <_free_r+0x98>)
 800d60a:	6813      	ldr	r3, [r2, #0]
 800d60c:	4610      	mov	r0, r2
 800d60e:	b933      	cbnz	r3, 800d61e <_free_r+0x2e>
 800d610:	6063      	str	r3, [r4, #4]
 800d612:	6014      	str	r4, [r2, #0]
 800d614:	4628      	mov	r0, r5
 800d616:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d61a:	f003 b828 	b.w	801066e <__malloc_unlock>
 800d61e:	42a3      	cmp	r3, r4
 800d620:	d90c      	bls.n	800d63c <_free_r+0x4c>
 800d622:	6821      	ldr	r1, [r4, #0]
 800d624:	1862      	adds	r2, r4, r1
 800d626:	4293      	cmp	r3, r2
 800d628:	bf04      	itt	eq
 800d62a:	681a      	ldreq	r2, [r3, #0]
 800d62c:	685b      	ldreq	r3, [r3, #4]
 800d62e:	6063      	str	r3, [r4, #4]
 800d630:	bf04      	itt	eq
 800d632:	1852      	addeq	r2, r2, r1
 800d634:	6022      	streq	r2, [r4, #0]
 800d636:	6004      	str	r4, [r0, #0]
 800d638:	e7ec      	b.n	800d614 <_free_r+0x24>
 800d63a:	4613      	mov	r3, r2
 800d63c:	685a      	ldr	r2, [r3, #4]
 800d63e:	b10a      	cbz	r2, 800d644 <_free_r+0x54>
 800d640:	42a2      	cmp	r2, r4
 800d642:	d9fa      	bls.n	800d63a <_free_r+0x4a>
 800d644:	6819      	ldr	r1, [r3, #0]
 800d646:	1858      	adds	r0, r3, r1
 800d648:	42a0      	cmp	r0, r4
 800d64a:	d10b      	bne.n	800d664 <_free_r+0x74>
 800d64c:	6820      	ldr	r0, [r4, #0]
 800d64e:	4401      	add	r1, r0
 800d650:	1858      	adds	r0, r3, r1
 800d652:	4282      	cmp	r2, r0
 800d654:	6019      	str	r1, [r3, #0]
 800d656:	d1dd      	bne.n	800d614 <_free_r+0x24>
 800d658:	6810      	ldr	r0, [r2, #0]
 800d65a:	6852      	ldr	r2, [r2, #4]
 800d65c:	605a      	str	r2, [r3, #4]
 800d65e:	4401      	add	r1, r0
 800d660:	6019      	str	r1, [r3, #0]
 800d662:	e7d7      	b.n	800d614 <_free_r+0x24>
 800d664:	d902      	bls.n	800d66c <_free_r+0x7c>
 800d666:	230c      	movs	r3, #12
 800d668:	602b      	str	r3, [r5, #0]
 800d66a:	e7d3      	b.n	800d614 <_free_r+0x24>
 800d66c:	6820      	ldr	r0, [r4, #0]
 800d66e:	1821      	adds	r1, r4, r0
 800d670:	428a      	cmp	r2, r1
 800d672:	bf04      	itt	eq
 800d674:	6811      	ldreq	r1, [r2, #0]
 800d676:	6852      	ldreq	r2, [r2, #4]
 800d678:	6062      	str	r2, [r4, #4]
 800d67a:	bf04      	itt	eq
 800d67c:	1809      	addeq	r1, r1, r0
 800d67e:	6021      	streq	r1, [r4, #0]
 800d680:	605c      	str	r4, [r3, #4]
 800d682:	e7c7      	b.n	800d614 <_free_r+0x24>
 800d684:	bd38      	pop	{r3, r4, r5, pc}
 800d686:	bf00      	nop
 800d688:	20000694 	.word	0x20000694

0800d68c <_malloc_r>:
 800d68c:	b570      	push	{r4, r5, r6, lr}
 800d68e:	1ccd      	adds	r5, r1, #3
 800d690:	f025 0503 	bic.w	r5, r5, #3
 800d694:	3508      	adds	r5, #8
 800d696:	2d0c      	cmp	r5, #12
 800d698:	bf38      	it	cc
 800d69a:	250c      	movcc	r5, #12
 800d69c:	2d00      	cmp	r5, #0
 800d69e:	4606      	mov	r6, r0
 800d6a0:	db01      	blt.n	800d6a6 <_malloc_r+0x1a>
 800d6a2:	42a9      	cmp	r1, r5
 800d6a4:	d903      	bls.n	800d6ae <_malloc_r+0x22>
 800d6a6:	230c      	movs	r3, #12
 800d6a8:	6033      	str	r3, [r6, #0]
 800d6aa:	2000      	movs	r0, #0
 800d6ac:	bd70      	pop	{r4, r5, r6, pc}
 800d6ae:	f002 ffdd 	bl	801066c <__malloc_lock>
 800d6b2:	4a21      	ldr	r2, [pc, #132]	; (800d738 <_malloc_r+0xac>)
 800d6b4:	6814      	ldr	r4, [r2, #0]
 800d6b6:	4621      	mov	r1, r4
 800d6b8:	b991      	cbnz	r1, 800d6e0 <_malloc_r+0x54>
 800d6ba:	4c20      	ldr	r4, [pc, #128]	; (800d73c <_malloc_r+0xb0>)
 800d6bc:	6823      	ldr	r3, [r4, #0]
 800d6be:	b91b      	cbnz	r3, 800d6c8 <_malloc_r+0x3c>
 800d6c0:	4630      	mov	r0, r6
 800d6c2:	f000 fe93 	bl	800e3ec <_sbrk_r>
 800d6c6:	6020      	str	r0, [r4, #0]
 800d6c8:	4629      	mov	r1, r5
 800d6ca:	4630      	mov	r0, r6
 800d6cc:	f000 fe8e 	bl	800e3ec <_sbrk_r>
 800d6d0:	1c43      	adds	r3, r0, #1
 800d6d2:	d124      	bne.n	800d71e <_malloc_r+0x92>
 800d6d4:	230c      	movs	r3, #12
 800d6d6:	6033      	str	r3, [r6, #0]
 800d6d8:	4630      	mov	r0, r6
 800d6da:	f002 ffc8 	bl	801066e <__malloc_unlock>
 800d6de:	e7e4      	b.n	800d6aa <_malloc_r+0x1e>
 800d6e0:	680b      	ldr	r3, [r1, #0]
 800d6e2:	1b5b      	subs	r3, r3, r5
 800d6e4:	d418      	bmi.n	800d718 <_malloc_r+0x8c>
 800d6e6:	2b0b      	cmp	r3, #11
 800d6e8:	d90f      	bls.n	800d70a <_malloc_r+0x7e>
 800d6ea:	600b      	str	r3, [r1, #0]
 800d6ec:	50cd      	str	r5, [r1, r3]
 800d6ee:	18cc      	adds	r4, r1, r3
 800d6f0:	4630      	mov	r0, r6
 800d6f2:	f002 ffbc 	bl	801066e <__malloc_unlock>
 800d6f6:	f104 000b 	add.w	r0, r4, #11
 800d6fa:	1d23      	adds	r3, r4, #4
 800d6fc:	f020 0007 	bic.w	r0, r0, #7
 800d700:	1ac3      	subs	r3, r0, r3
 800d702:	d0d3      	beq.n	800d6ac <_malloc_r+0x20>
 800d704:	425a      	negs	r2, r3
 800d706:	50e2      	str	r2, [r4, r3]
 800d708:	e7d0      	b.n	800d6ac <_malloc_r+0x20>
 800d70a:	428c      	cmp	r4, r1
 800d70c:	684b      	ldr	r3, [r1, #4]
 800d70e:	bf16      	itet	ne
 800d710:	6063      	strne	r3, [r4, #4]
 800d712:	6013      	streq	r3, [r2, #0]
 800d714:	460c      	movne	r4, r1
 800d716:	e7eb      	b.n	800d6f0 <_malloc_r+0x64>
 800d718:	460c      	mov	r4, r1
 800d71a:	6849      	ldr	r1, [r1, #4]
 800d71c:	e7cc      	b.n	800d6b8 <_malloc_r+0x2c>
 800d71e:	1cc4      	adds	r4, r0, #3
 800d720:	f024 0403 	bic.w	r4, r4, #3
 800d724:	42a0      	cmp	r0, r4
 800d726:	d005      	beq.n	800d734 <_malloc_r+0xa8>
 800d728:	1a21      	subs	r1, r4, r0
 800d72a:	4630      	mov	r0, r6
 800d72c:	f000 fe5e 	bl	800e3ec <_sbrk_r>
 800d730:	3001      	adds	r0, #1
 800d732:	d0cf      	beq.n	800d6d4 <_malloc_r+0x48>
 800d734:	6025      	str	r5, [r4, #0]
 800d736:	e7db      	b.n	800d6f0 <_malloc_r+0x64>
 800d738:	20000694 	.word	0x20000694
 800d73c:	20000698 	.word	0x20000698

0800d740 <__cvt>:
 800d740:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d744:	ec55 4b10 	vmov	r4, r5, d0
 800d748:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800d74a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d74e:	2d00      	cmp	r5, #0
 800d750:	460e      	mov	r6, r1
 800d752:	4691      	mov	r9, r2
 800d754:	4619      	mov	r1, r3
 800d756:	bfb8      	it	lt
 800d758:	4622      	movlt	r2, r4
 800d75a:	462b      	mov	r3, r5
 800d75c:	f027 0720 	bic.w	r7, r7, #32
 800d760:	bfbb      	ittet	lt
 800d762:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d766:	461d      	movlt	r5, r3
 800d768:	2300      	movge	r3, #0
 800d76a:	232d      	movlt	r3, #45	; 0x2d
 800d76c:	bfb8      	it	lt
 800d76e:	4614      	movlt	r4, r2
 800d770:	2f46      	cmp	r7, #70	; 0x46
 800d772:	700b      	strb	r3, [r1, #0]
 800d774:	d004      	beq.n	800d780 <__cvt+0x40>
 800d776:	2f45      	cmp	r7, #69	; 0x45
 800d778:	d100      	bne.n	800d77c <__cvt+0x3c>
 800d77a:	3601      	adds	r6, #1
 800d77c:	2102      	movs	r1, #2
 800d77e:	e000      	b.n	800d782 <__cvt+0x42>
 800d780:	2103      	movs	r1, #3
 800d782:	ab03      	add	r3, sp, #12
 800d784:	9301      	str	r3, [sp, #4]
 800d786:	ab02      	add	r3, sp, #8
 800d788:	9300      	str	r3, [sp, #0]
 800d78a:	4632      	mov	r2, r6
 800d78c:	4653      	mov	r3, sl
 800d78e:	ec45 4b10 	vmov	d0, r4, r5
 800d792:	f001 fd9d 	bl	800f2d0 <_dtoa_r>
 800d796:	2f47      	cmp	r7, #71	; 0x47
 800d798:	4680      	mov	r8, r0
 800d79a:	d102      	bne.n	800d7a2 <__cvt+0x62>
 800d79c:	f019 0f01 	tst.w	r9, #1
 800d7a0:	d026      	beq.n	800d7f0 <__cvt+0xb0>
 800d7a2:	2f46      	cmp	r7, #70	; 0x46
 800d7a4:	eb08 0906 	add.w	r9, r8, r6
 800d7a8:	d111      	bne.n	800d7ce <__cvt+0x8e>
 800d7aa:	f898 3000 	ldrb.w	r3, [r8]
 800d7ae:	2b30      	cmp	r3, #48	; 0x30
 800d7b0:	d10a      	bne.n	800d7c8 <__cvt+0x88>
 800d7b2:	2200      	movs	r2, #0
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	4620      	mov	r0, r4
 800d7b8:	4629      	mov	r1, r5
 800d7ba:	f7f3 f985 	bl	8000ac8 <__aeabi_dcmpeq>
 800d7be:	b918      	cbnz	r0, 800d7c8 <__cvt+0x88>
 800d7c0:	f1c6 0601 	rsb	r6, r6, #1
 800d7c4:	f8ca 6000 	str.w	r6, [sl]
 800d7c8:	f8da 3000 	ldr.w	r3, [sl]
 800d7cc:	4499      	add	r9, r3
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	4620      	mov	r0, r4
 800d7d4:	4629      	mov	r1, r5
 800d7d6:	f7f3 f977 	bl	8000ac8 <__aeabi_dcmpeq>
 800d7da:	b938      	cbnz	r0, 800d7ec <__cvt+0xac>
 800d7dc:	2230      	movs	r2, #48	; 0x30
 800d7de:	9b03      	ldr	r3, [sp, #12]
 800d7e0:	454b      	cmp	r3, r9
 800d7e2:	d205      	bcs.n	800d7f0 <__cvt+0xb0>
 800d7e4:	1c59      	adds	r1, r3, #1
 800d7e6:	9103      	str	r1, [sp, #12]
 800d7e8:	701a      	strb	r2, [r3, #0]
 800d7ea:	e7f8      	b.n	800d7de <__cvt+0x9e>
 800d7ec:	f8cd 900c 	str.w	r9, [sp, #12]
 800d7f0:	9b03      	ldr	r3, [sp, #12]
 800d7f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d7f4:	eba3 0308 	sub.w	r3, r3, r8
 800d7f8:	4640      	mov	r0, r8
 800d7fa:	6013      	str	r3, [r2, #0]
 800d7fc:	b004      	add	sp, #16
 800d7fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800d802 <__exponent>:
 800d802:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d804:	2900      	cmp	r1, #0
 800d806:	4604      	mov	r4, r0
 800d808:	bfba      	itte	lt
 800d80a:	4249      	neglt	r1, r1
 800d80c:	232d      	movlt	r3, #45	; 0x2d
 800d80e:	232b      	movge	r3, #43	; 0x2b
 800d810:	2909      	cmp	r1, #9
 800d812:	f804 2b02 	strb.w	r2, [r4], #2
 800d816:	7043      	strb	r3, [r0, #1]
 800d818:	dd20      	ble.n	800d85c <__exponent+0x5a>
 800d81a:	f10d 0307 	add.w	r3, sp, #7
 800d81e:	461f      	mov	r7, r3
 800d820:	260a      	movs	r6, #10
 800d822:	fb91 f5f6 	sdiv	r5, r1, r6
 800d826:	fb06 1115 	mls	r1, r6, r5, r1
 800d82a:	3130      	adds	r1, #48	; 0x30
 800d82c:	2d09      	cmp	r5, #9
 800d82e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d832:	f103 32ff 	add.w	r2, r3, #4294967295
 800d836:	4629      	mov	r1, r5
 800d838:	dc09      	bgt.n	800d84e <__exponent+0x4c>
 800d83a:	3130      	adds	r1, #48	; 0x30
 800d83c:	3b02      	subs	r3, #2
 800d83e:	f802 1c01 	strb.w	r1, [r2, #-1]
 800d842:	42bb      	cmp	r3, r7
 800d844:	4622      	mov	r2, r4
 800d846:	d304      	bcc.n	800d852 <__exponent+0x50>
 800d848:	1a10      	subs	r0, r2, r0
 800d84a:	b003      	add	sp, #12
 800d84c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d84e:	4613      	mov	r3, r2
 800d850:	e7e7      	b.n	800d822 <__exponent+0x20>
 800d852:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d856:	f804 2b01 	strb.w	r2, [r4], #1
 800d85a:	e7f2      	b.n	800d842 <__exponent+0x40>
 800d85c:	2330      	movs	r3, #48	; 0x30
 800d85e:	4419      	add	r1, r3
 800d860:	7083      	strb	r3, [r0, #2]
 800d862:	1d02      	adds	r2, r0, #4
 800d864:	70c1      	strb	r1, [r0, #3]
 800d866:	e7ef      	b.n	800d848 <__exponent+0x46>

0800d868 <_printf_float>:
 800d868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d86c:	b08d      	sub	sp, #52	; 0x34
 800d86e:	460c      	mov	r4, r1
 800d870:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800d874:	4616      	mov	r6, r2
 800d876:	461f      	mov	r7, r3
 800d878:	4605      	mov	r5, r0
 800d87a:	f002 fed7 	bl	801062c <_localeconv_r>
 800d87e:	6803      	ldr	r3, [r0, #0]
 800d880:	9304      	str	r3, [sp, #16]
 800d882:	4618      	mov	r0, r3
 800d884:	f7f2 fca4 	bl	80001d0 <strlen>
 800d888:	2300      	movs	r3, #0
 800d88a:	930a      	str	r3, [sp, #40]	; 0x28
 800d88c:	f8d8 3000 	ldr.w	r3, [r8]
 800d890:	9005      	str	r0, [sp, #20]
 800d892:	3307      	adds	r3, #7
 800d894:	f023 0307 	bic.w	r3, r3, #7
 800d898:	f103 0208 	add.w	r2, r3, #8
 800d89c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d8a0:	f8d4 b000 	ldr.w	fp, [r4]
 800d8a4:	f8c8 2000 	str.w	r2, [r8]
 800d8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ac:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d8b0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d8b4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d8b8:	9307      	str	r3, [sp, #28]
 800d8ba:	f8cd 8018 	str.w	r8, [sp, #24]
 800d8be:	f04f 32ff 	mov.w	r2, #4294967295
 800d8c2:	4ba7      	ldr	r3, [pc, #668]	; (800db60 <_printf_float+0x2f8>)
 800d8c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d8c8:	f7f3 f930 	bl	8000b2c <__aeabi_dcmpun>
 800d8cc:	bb70      	cbnz	r0, 800d92c <_printf_float+0xc4>
 800d8ce:	f04f 32ff 	mov.w	r2, #4294967295
 800d8d2:	4ba3      	ldr	r3, [pc, #652]	; (800db60 <_printf_float+0x2f8>)
 800d8d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d8d8:	f7f3 f90a 	bl	8000af0 <__aeabi_dcmple>
 800d8dc:	bb30      	cbnz	r0, 800d92c <_printf_float+0xc4>
 800d8de:	2200      	movs	r2, #0
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	4640      	mov	r0, r8
 800d8e4:	4649      	mov	r1, r9
 800d8e6:	f7f3 f8f9 	bl	8000adc <__aeabi_dcmplt>
 800d8ea:	b110      	cbz	r0, 800d8f2 <_printf_float+0x8a>
 800d8ec:	232d      	movs	r3, #45	; 0x2d
 800d8ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d8f2:	4a9c      	ldr	r2, [pc, #624]	; (800db64 <_printf_float+0x2fc>)
 800d8f4:	4b9c      	ldr	r3, [pc, #624]	; (800db68 <_printf_float+0x300>)
 800d8f6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800d8fa:	bf8c      	ite	hi
 800d8fc:	4690      	movhi	r8, r2
 800d8fe:	4698      	movls	r8, r3
 800d900:	2303      	movs	r3, #3
 800d902:	f02b 0204 	bic.w	r2, fp, #4
 800d906:	6123      	str	r3, [r4, #16]
 800d908:	6022      	str	r2, [r4, #0]
 800d90a:	f04f 0900 	mov.w	r9, #0
 800d90e:	9700      	str	r7, [sp, #0]
 800d910:	4633      	mov	r3, r6
 800d912:	aa0b      	add	r2, sp, #44	; 0x2c
 800d914:	4621      	mov	r1, r4
 800d916:	4628      	mov	r0, r5
 800d918:	f000 f9e6 	bl	800dce8 <_printf_common>
 800d91c:	3001      	adds	r0, #1
 800d91e:	f040 808d 	bne.w	800da3c <_printf_float+0x1d4>
 800d922:	f04f 30ff 	mov.w	r0, #4294967295
 800d926:	b00d      	add	sp, #52	; 0x34
 800d928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d92c:	4642      	mov	r2, r8
 800d92e:	464b      	mov	r3, r9
 800d930:	4640      	mov	r0, r8
 800d932:	4649      	mov	r1, r9
 800d934:	f7f3 f8fa 	bl	8000b2c <__aeabi_dcmpun>
 800d938:	b110      	cbz	r0, 800d940 <_printf_float+0xd8>
 800d93a:	4a8c      	ldr	r2, [pc, #560]	; (800db6c <_printf_float+0x304>)
 800d93c:	4b8c      	ldr	r3, [pc, #560]	; (800db70 <_printf_float+0x308>)
 800d93e:	e7da      	b.n	800d8f6 <_printf_float+0x8e>
 800d940:	6861      	ldr	r1, [r4, #4]
 800d942:	1c4b      	adds	r3, r1, #1
 800d944:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800d948:	a80a      	add	r0, sp, #40	; 0x28
 800d94a:	d13e      	bne.n	800d9ca <_printf_float+0x162>
 800d94c:	2306      	movs	r3, #6
 800d94e:	6063      	str	r3, [r4, #4]
 800d950:	2300      	movs	r3, #0
 800d952:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800d956:	ab09      	add	r3, sp, #36	; 0x24
 800d958:	9300      	str	r3, [sp, #0]
 800d95a:	ec49 8b10 	vmov	d0, r8, r9
 800d95e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d962:	6022      	str	r2, [r4, #0]
 800d964:	f8cd a004 	str.w	sl, [sp, #4]
 800d968:	6861      	ldr	r1, [r4, #4]
 800d96a:	4628      	mov	r0, r5
 800d96c:	f7ff fee8 	bl	800d740 <__cvt>
 800d970:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800d974:	2b47      	cmp	r3, #71	; 0x47
 800d976:	4680      	mov	r8, r0
 800d978:	d109      	bne.n	800d98e <_printf_float+0x126>
 800d97a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d97c:	1cd8      	adds	r0, r3, #3
 800d97e:	db02      	blt.n	800d986 <_printf_float+0x11e>
 800d980:	6862      	ldr	r2, [r4, #4]
 800d982:	4293      	cmp	r3, r2
 800d984:	dd47      	ble.n	800da16 <_printf_float+0x1ae>
 800d986:	f1aa 0a02 	sub.w	sl, sl, #2
 800d98a:	fa5f fa8a 	uxtb.w	sl, sl
 800d98e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800d992:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d994:	d824      	bhi.n	800d9e0 <_printf_float+0x178>
 800d996:	3901      	subs	r1, #1
 800d998:	4652      	mov	r2, sl
 800d99a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d99e:	9109      	str	r1, [sp, #36]	; 0x24
 800d9a0:	f7ff ff2f 	bl	800d802 <__exponent>
 800d9a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d9a6:	1813      	adds	r3, r2, r0
 800d9a8:	2a01      	cmp	r2, #1
 800d9aa:	4681      	mov	r9, r0
 800d9ac:	6123      	str	r3, [r4, #16]
 800d9ae:	dc02      	bgt.n	800d9b6 <_printf_float+0x14e>
 800d9b0:	6822      	ldr	r2, [r4, #0]
 800d9b2:	07d1      	lsls	r1, r2, #31
 800d9b4:	d501      	bpl.n	800d9ba <_printf_float+0x152>
 800d9b6:	3301      	adds	r3, #1
 800d9b8:	6123      	str	r3, [r4, #16]
 800d9ba:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d0a5      	beq.n	800d90e <_printf_float+0xa6>
 800d9c2:	232d      	movs	r3, #45	; 0x2d
 800d9c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d9c8:	e7a1      	b.n	800d90e <_printf_float+0xa6>
 800d9ca:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800d9ce:	f000 8177 	beq.w	800dcc0 <_printf_float+0x458>
 800d9d2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800d9d6:	d1bb      	bne.n	800d950 <_printf_float+0xe8>
 800d9d8:	2900      	cmp	r1, #0
 800d9da:	d1b9      	bne.n	800d950 <_printf_float+0xe8>
 800d9dc:	2301      	movs	r3, #1
 800d9de:	e7b6      	b.n	800d94e <_printf_float+0xe6>
 800d9e0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800d9e4:	d119      	bne.n	800da1a <_printf_float+0x1b2>
 800d9e6:	2900      	cmp	r1, #0
 800d9e8:	6863      	ldr	r3, [r4, #4]
 800d9ea:	dd0c      	ble.n	800da06 <_printf_float+0x19e>
 800d9ec:	6121      	str	r1, [r4, #16]
 800d9ee:	b913      	cbnz	r3, 800d9f6 <_printf_float+0x18e>
 800d9f0:	6822      	ldr	r2, [r4, #0]
 800d9f2:	07d2      	lsls	r2, r2, #31
 800d9f4:	d502      	bpl.n	800d9fc <_printf_float+0x194>
 800d9f6:	3301      	adds	r3, #1
 800d9f8:	440b      	add	r3, r1
 800d9fa:	6123      	str	r3, [r4, #16]
 800d9fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9fe:	65a3      	str	r3, [r4, #88]	; 0x58
 800da00:	f04f 0900 	mov.w	r9, #0
 800da04:	e7d9      	b.n	800d9ba <_printf_float+0x152>
 800da06:	b913      	cbnz	r3, 800da0e <_printf_float+0x1a6>
 800da08:	6822      	ldr	r2, [r4, #0]
 800da0a:	07d0      	lsls	r0, r2, #31
 800da0c:	d501      	bpl.n	800da12 <_printf_float+0x1aa>
 800da0e:	3302      	adds	r3, #2
 800da10:	e7f3      	b.n	800d9fa <_printf_float+0x192>
 800da12:	2301      	movs	r3, #1
 800da14:	e7f1      	b.n	800d9fa <_printf_float+0x192>
 800da16:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800da1a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800da1e:	4293      	cmp	r3, r2
 800da20:	db05      	blt.n	800da2e <_printf_float+0x1c6>
 800da22:	6822      	ldr	r2, [r4, #0]
 800da24:	6123      	str	r3, [r4, #16]
 800da26:	07d1      	lsls	r1, r2, #31
 800da28:	d5e8      	bpl.n	800d9fc <_printf_float+0x194>
 800da2a:	3301      	adds	r3, #1
 800da2c:	e7e5      	b.n	800d9fa <_printf_float+0x192>
 800da2e:	2b00      	cmp	r3, #0
 800da30:	bfd4      	ite	le
 800da32:	f1c3 0302 	rsble	r3, r3, #2
 800da36:	2301      	movgt	r3, #1
 800da38:	4413      	add	r3, r2
 800da3a:	e7de      	b.n	800d9fa <_printf_float+0x192>
 800da3c:	6823      	ldr	r3, [r4, #0]
 800da3e:	055a      	lsls	r2, r3, #21
 800da40:	d407      	bmi.n	800da52 <_printf_float+0x1ea>
 800da42:	6923      	ldr	r3, [r4, #16]
 800da44:	4642      	mov	r2, r8
 800da46:	4631      	mov	r1, r6
 800da48:	4628      	mov	r0, r5
 800da4a:	47b8      	blx	r7
 800da4c:	3001      	adds	r0, #1
 800da4e:	d12b      	bne.n	800daa8 <_printf_float+0x240>
 800da50:	e767      	b.n	800d922 <_printf_float+0xba>
 800da52:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800da56:	f240 80dc 	bls.w	800dc12 <_printf_float+0x3aa>
 800da5a:	2200      	movs	r2, #0
 800da5c:	2300      	movs	r3, #0
 800da5e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800da62:	f7f3 f831 	bl	8000ac8 <__aeabi_dcmpeq>
 800da66:	2800      	cmp	r0, #0
 800da68:	d033      	beq.n	800dad2 <_printf_float+0x26a>
 800da6a:	2301      	movs	r3, #1
 800da6c:	4a41      	ldr	r2, [pc, #260]	; (800db74 <_printf_float+0x30c>)
 800da6e:	4631      	mov	r1, r6
 800da70:	4628      	mov	r0, r5
 800da72:	47b8      	blx	r7
 800da74:	3001      	adds	r0, #1
 800da76:	f43f af54 	beq.w	800d922 <_printf_float+0xba>
 800da7a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800da7e:	429a      	cmp	r2, r3
 800da80:	db02      	blt.n	800da88 <_printf_float+0x220>
 800da82:	6823      	ldr	r3, [r4, #0]
 800da84:	07d8      	lsls	r0, r3, #31
 800da86:	d50f      	bpl.n	800daa8 <_printf_float+0x240>
 800da88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800da8c:	4631      	mov	r1, r6
 800da8e:	4628      	mov	r0, r5
 800da90:	47b8      	blx	r7
 800da92:	3001      	adds	r0, #1
 800da94:	f43f af45 	beq.w	800d922 <_printf_float+0xba>
 800da98:	f04f 0800 	mov.w	r8, #0
 800da9c:	f104 091a 	add.w	r9, r4, #26
 800daa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800daa2:	3b01      	subs	r3, #1
 800daa4:	4543      	cmp	r3, r8
 800daa6:	dc09      	bgt.n	800dabc <_printf_float+0x254>
 800daa8:	6823      	ldr	r3, [r4, #0]
 800daaa:	079b      	lsls	r3, r3, #30
 800daac:	f100 8103 	bmi.w	800dcb6 <_printf_float+0x44e>
 800dab0:	68e0      	ldr	r0, [r4, #12]
 800dab2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dab4:	4298      	cmp	r0, r3
 800dab6:	bfb8      	it	lt
 800dab8:	4618      	movlt	r0, r3
 800daba:	e734      	b.n	800d926 <_printf_float+0xbe>
 800dabc:	2301      	movs	r3, #1
 800dabe:	464a      	mov	r2, r9
 800dac0:	4631      	mov	r1, r6
 800dac2:	4628      	mov	r0, r5
 800dac4:	47b8      	blx	r7
 800dac6:	3001      	adds	r0, #1
 800dac8:	f43f af2b 	beq.w	800d922 <_printf_float+0xba>
 800dacc:	f108 0801 	add.w	r8, r8, #1
 800dad0:	e7e6      	b.n	800daa0 <_printf_float+0x238>
 800dad2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	dc2b      	bgt.n	800db30 <_printf_float+0x2c8>
 800dad8:	2301      	movs	r3, #1
 800dada:	4a26      	ldr	r2, [pc, #152]	; (800db74 <_printf_float+0x30c>)
 800dadc:	4631      	mov	r1, r6
 800dade:	4628      	mov	r0, r5
 800dae0:	47b8      	blx	r7
 800dae2:	3001      	adds	r0, #1
 800dae4:	f43f af1d 	beq.w	800d922 <_printf_float+0xba>
 800dae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800daea:	b923      	cbnz	r3, 800daf6 <_printf_float+0x28e>
 800daec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800daee:	b913      	cbnz	r3, 800daf6 <_printf_float+0x28e>
 800daf0:	6823      	ldr	r3, [r4, #0]
 800daf2:	07d9      	lsls	r1, r3, #31
 800daf4:	d5d8      	bpl.n	800daa8 <_printf_float+0x240>
 800daf6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dafa:	4631      	mov	r1, r6
 800dafc:	4628      	mov	r0, r5
 800dafe:	47b8      	blx	r7
 800db00:	3001      	adds	r0, #1
 800db02:	f43f af0e 	beq.w	800d922 <_printf_float+0xba>
 800db06:	f04f 0900 	mov.w	r9, #0
 800db0a:	f104 0a1a 	add.w	sl, r4, #26
 800db0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db10:	425b      	negs	r3, r3
 800db12:	454b      	cmp	r3, r9
 800db14:	dc01      	bgt.n	800db1a <_printf_float+0x2b2>
 800db16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db18:	e794      	b.n	800da44 <_printf_float+0x1dc>
 800db1a:	2301      	movs	r3, #1
 800db1c:	4652      	mov	r2, sl
 800db1e:	4631      	mov	r1, r6
 800db20:	4628      	mov	r0, r5
 800db22:	47b8      	blx	r7
 800db24:	3001      	adds	r0, #1
 800db26:	f43f aefc 	beq.w	800d922 <_printf_float+0xba>
 800db2a:	f109 0901 	add.w	r9, r9, #1
 800db2e:	e7ee      	b.n	800db0e <_printf_float+0x2a6>
 800db30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800db32:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800db34:	429a      	cmp	r2, r3
 800db36:	bfa8      	it	ge
 800db38:	461a      	movge	r2, r3
 800db3a:	2a00      	cmp	r2, #0
 800db3c:	4691      	mov	r9, r2
 800db3e:	dd07      	ble.n	800db50 <_printf_float+0x2e8>
 800db40:	4613      	mov	r3, r2
 800db42:	4631      	mov	r1, r6
 800db44:	4642      	mov	r2, r8
 800db46:	4628      	mov	r0, r5
 800db48:	47b8      	blx	r7
 800db4a:	3001      	adds	r0, #1
 800db4c:	f43f aee9 	beq.w	800d922 <_printf_float+0xba>
 800db50:	f104 031a 	add.w	r3, r4, #26
 800db54:	f04f 0b00 	mov.w	fp, #0
 800db58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800db5c:	9306      	str	r3, [sp, #24]
 800db5e:	e015      	b.n	800db8c <_printf_float+0x324>
 800db60:	7fefffff 	.word	0x7fefffff
 800db64:	08011ae8 	.word	0x08011ae8
 800db68:	08011ae4 	.word	0x08011ae4
 800db6c:	08011af0 	.word	0x08011af0
 800db70:	08011aec 	.word	0x08011aec
 800db74:	08011af4 	.word	0x08011af4
 800db78:	2301      	movs	r3, #1
 800db7a:	9a06      	ldr	r2, [sp, #24]
 800db7c:	4631      	mov	r1, r6
 800db7e:	4628      	mov	r0, r5
 800db80:	47b8      	blx	r7
 800db82:	3001      	adds	r0, #1
 800db84:	f43f aecd 	beq.w	800d922 <_printf_float+0xba>
 800db88:	f10b 0b01 	add.w	fp, fp, #1
 800db8c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800db90:	ebaa 0309 	sub.w	r3, sl, r9
 800db94:	455b      	cmp	r3, fp
 800db96:	dcef      	bgt.n	800db78 <_printf_float+0x310>
 800db98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800db9c:	429a      	cmp	r2, r3
 800db9e:	44d0      	add	r8, sl
 800dba0:	db15      	blt.n	800dbce <_printf_float+0x366>
 800dba2:	6823      	ldr	r3, [r4, #0]
 800dba4:	07da      	lsls	r2, r3, #31
 800dba6:	d412      	bmi.n	800dbce <_printf_float+0x366>
 800dba8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dbaa:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dbac:	eba3 020a 	sub.w	r2, r3, sl
 800dbb0:	eba3 0a01 	sub.w	sl, r3, r1
 800dbb4:	4592      	cmp	sl, r2
 800dbb6:	bfa8      	it	ge
 800dbb8:	4692      	movge	sl, r2
 800dbba:	f1ba 0f00 	cmp.w	sl, #0
 800dbbe:	dc0e      	bgt.n	800dbde <_printf_float+0x376>
 800dbc0:	f04f 0800 	mov.w	r8, #0
 800dbc4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dbc8:	f104 091a 	add.w	r9, r4, #26
 800dbcc:	e019      	b.n	800dc02 <_printf_float+0x39a>
 800dbce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dbd2:	4631      	mov	r1, r6
 800dbd4:	4628      	mov	r0, r5
 800dbd6:	47b8      	blx	r7
 800dbd8:	3001      	adds	r0, #1
 800dbda:	d1e5      	bne.n	800dba8 <_printf_float+0x340>
 800dbdc:	e6a1      	b.n	800d922 <_printf_float+0xba>
 800dbde:	4653      	mov	r3, sl
 800dbe0:	4642      	mov	r2, r8
 800dbe2:	4631      	mov	r1, r6
 800dbe4:	4628      	mov	r0, r5
 800dbe6:	47b8      	blx	r7
 800dbe8:	3001      	adds	r0, #1
 800dbea:	d1e9      	bne.n	800dbc0 <_printf_float+0x358>
 800dbec:	e699      	b.n	800d922 <_printf_float+0xba>
 800dbee:	2301      	movs	r3, #1
 800dbf0:	464a      	mov	r2, r9
 800dbf2:	4631      	mov	r1, r6
 800dbf4:	4628      	mov	r0, r5
 800dbf6:	47b8      	blx	r7
 800dbf8:	3001      	adds	r0, #1
 800dbfa:	f43f ae92 	beq.w	800d922 <_printf_float+0xba>
 800dbfe:	f108 0801 	add.w	r8, r8, #1
 800dc02:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dc06:	1a9b      	subs	r3, r3, r2
 800dc08:	eba3 030a 	sub.w	r3, r3, sl
 800dc0c:	4543      	cmp	r3, r8
 800dc0e:	dcee      	bgt.n	800dbee <_printf_float+0x386>
 800dc10:	e74a      	b.n	800daa8 <_printf_float+0x240>
 800dc12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dc14:	2a01      	cmp	r2, #1
 800dc16:	dc01      	bgt.n	800dc1c <_printf_float+0x3b4>
 800dc18:	07db      	lsls	r3, r3, #31
 800dc1a:	d53a      	bpl.n	800dc92 <_printf_float+0x42a>
 800dc1c:	2301      	movs	r3, #1
 800dc1e:	4642      	mov	r2, r8
 800dc20:	4631      	mov	r1, r6
 800dc22:	4628      	mov	r0, r5
 800dc24:	47b8      	blx	r7
 800dc26:	3001      	adds	r0, #1
 800dc28:	f43f ae7b 	beq.w	800d922 <_printf_float+0xba>
 800dc2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dc30:	4631      	mov	r1, r6
 800dc32:	4628      	mov	r0, r5
 800dc34:	47b8      	blx	r7
 800dc36:	3001      	adds	r0, #1
 800dc38:	f108 0801 	add.w	r8, r8, #1
 800dc3c:	f43f ae71 	beq.w	800d922 <_printf_float+0xba>
 800dc40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc42:	2200      	movs	r2, #0
 800dc44:	f103 3aff 	add.w	sl, r3, #4294967295
 800dc48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	f7f2 ff3b 	bl	8000ac8 <__aeabi_dcmpeq>
 800dc52:	b9c8      	cbnz	r0, 800dc88 <_printf_float+0x420>
 800dc54:	4653      	mov	r3, sl
 800dc56:	4642      	mov	r2, r8
 800dc58:	4631      	mov	r1, r6
 800dc5a:	4628      	mov	r0, r5
 800dc5c:	47b8      	blx	r7
 800dc5e:	3001      	adds	r0, #1
 800dc60:	d10e      	bne.n	800dc80 <_printf_float+0x418>
 800dc62:	e65e      	b.n	800d922 <_printf_float+0xba>
 800dc64:	2301      	movs	r3, #1
 800dc66:	4652      	mov	r2, sl
 800dc68:	4631      	mov	r1, r6
 800dc6a:	4628      	mov	r0, r5
 800dc6c:	47b8      	blx	r7
 800dc6e:	3001      	adds	r0, #1
 800dc70:	f43f ae57 	beq.w	800d922 <_printf_float+0xba>
 800dc74:	f108 0801 	add.w	r8, r8, #1
 800dc78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc7a:	3b01      	subs	r3, #1
 800dc7c:	4543      	cmp	r3, r8
 800dc7e:	dcf1      	bgt.n	800dc64 <_printf_float+0x3fc>
 800dc80:	464b      	mov	r3, r9
 800dc82:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800dc86:	e6de      	b.n	800da46 <_printf_float+0x1de>
 800dc88:	f04f 0800 	mov.w	r8, #0
 800dc8c:	f104 0a1a 	add.w	sl, r4, #26
 800dc90:	e7f2      	b.n	800dc78 <_printf_float+0x410>
 800dc92:	2301      	movs	r3, #1
 800dc94:	e7df      	b.n	800dc56 <_printf_float+0x3ee>
 800dc96:	2301      	movs	r3, #1
 800dc98:	464a      	mov	r2, r9
 800dc9a:	4631      	mov	r1, r6
 800dc9c:	4628      	mov	r0, r5
 800dc9e:	47b8      	blx	r7
 800dca0:	3001      	adds	r0, #1
 800dca2:	f43f ae3e 	beq.w	800d922 <_printf_float+0xba>
 800dca6:	f108 0801 	add.w	r8, r8, #1
 800dcaa:	68e3      	ldr	r3, [r4, #12]
 800dcac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dcae:	1a9b      	subs	r3, r3, r2
 800dcb0:	4543      	cmp	r3, r8
 800dcb2:	dcf0      	bgt.n	800dc96 <_printf_float+0x42e>
 800dcb4:	e6fc      	b.n	800dab0 <_printf_float+0x248>
 800dcb6:	f04f 0800 	mov.w	r8, #0
 800dcba:	f104 0919 	add.w	r9, r4, #25
 800dcbe:	e7f4      	b.n	800dcaa <_printf_float+0x442>
 800dcc0:	2900      	cmp	r1, #0
 800dcc2:	f43f ae8b 	beq.w	800d9dc <_printf_float+0x174>
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800dccc:	ab09      	add	r3, sp, #36	; 0x24
 800dcce:	9300      	str	r3, [sp, #0]
 800dcd0:	ec49 8b10 	vmov	d0, r8, r9
 800dcd4:	6022      	str	r2, [r4, #0]
 800dcd6:	f8cd a004 	str.w	sl, [sp, #4]
 800dcda:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800dcde:	4628      	mov	r0, r5
 800dce0:	f7ff fd2e 	bl	800d740 <__cvt>
 800dce4:	4680      	mov	r8, r0
 800dce6:	e648      	b.n	800d97a <_printf_float+0x112>

0800dce8 <_printf_common>:
 800dce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dcec:	4691      	mov	r9, r2
 800dcee:	461f      	mov	r7, r3
 800dcf0:	688a      	ldr	r2, [r1, #8]
 800dcf2:	690b      	ldr	r3, [r1, #16]
 800dcf4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dcf8:	4293      	cmp	r3, r2
 800dcfa:	bfb8      	it	lt
 800dcfc:	4613      	movlt	r3, r2
 800dcfe:	f8c9 3000 	str.w	r3, [r9]
 800dd02:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dd06:	4606      	mov	r6, r0
 800dd08:	460c      	mov	r4, r1
 800dd0a:	b112      	cbz	r2, 800dd12 <_printf_common+0x2a>
 800dd0c:	3301      	adds	r3, #1
 800dd0e:	f8c9 3000 	str.w	r3, [r9]
 800dd12:	6823      	ldr	r3, [r4, #0]
 800dd14:	0699      	lsls	r1, r3, #26
 800dd16:	bf42      	ittt	mi
 800dd18:	f8d9 3000 	ldrmi.w	r3, [r9]
 800dd1c:	3302      	addmi	r3, #2
 800dd1e:	f8c9 3000 	strmi.w	r3, [r9]
 800dd22:	6825      	ldr	r5, [r4, #0]
 800dd24:	f015 0506 	ands.w	r5, r5, #6
 800dd28:	d107      	bne.n	800dd3a <_printf_common+0x52>
 800dd2a:	f104 0a19 	add.w	sl, r4, #25
 800dd2e:	68e3      	ldr	r3, [r4, #12]
 800dd30:	f8d9 2000 	ldr.w	r2, [r9]
 800dd34:	1a9b      	subs	r3, r3, r2
 800dd36:	42ab      	cmp	r3, r5
 800dd38:	dc28      	bgt.n	800dd8c <_printf_common+0xa4>
 800dd3a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800dd3e:	6822      	ldr	r2, [r4, #0]
 800dd40:	3300      	adds	r3, #0
 800dd42:	bf18      	it	ne
 800dd44:	2301      	movne	r3, #1
 800dd46:	0692      	lsls	r2, r2, #26
 800dd48:	d42d      	bmi.n	800dda6 <_printf_common+0xbe>
 800dd4a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dd4e:	4639      	mov	r1, r7
 800dd50:	4630      	mov	r0, r6
 800dd52:	47c0      	blx	r8
 800dd54:	3001      	adds	r0, #1
 800dd56:	d020      	beq.n	800dd9a <_printf_common+0xb2>
 800dd58:	6823      	ldr	r3, [r4, #0]
 800dd5a:	68e5      	ldr	r5, [r4, #12]
 800dd5c:	f8d9 2000 	ldr.w	r2, [r9]
 800dd60:	f003 0306 	and.w	r3, r3, #6
 800dd64:	2b04      	cmp	r3, #4
 800dd66:	bf08      	it	eq
 800dd68:	1aad      	subeq	r5, r5, r2
 800dd6a:	68a3      	ldr	r3, [r4, #8]
 800dd6c:	6922      	ldr	r2, [r4, #16]
 800dd6e:	bf0c      	ite	eq
 800dd70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dd74:	2500      	movne	r5, #0
 800dd76:	4293      	cmp	r3, r2
 800dd78:	bfc4      	itt	gt
 800dd7a:	1a9b      	subgt	r3, r3, r2
 800dd7c:	18ed      	addgt	r5, r5, r3
 800dd7e:	f04f 0900 	mov.w	r9, #0
 800dd82:	341a      	adds	r4, #26
 800dd84:	454d      	cmp	r5, r9
 800dd86:	d11a      	bne.n	800ddbe <_printf_common+0xd6>
 800dd88:	2000      	movs	r0, #0
 800dd8a:	e008      	b.n	800dd9e <_printf_common+0xb6>
 800dd8c:	2301      	movs	r3, #1
 800dd8e:	4652      	mov	r2, sl
 800dd90:	4639      	mov	r1, r7
 800dd92:	4630      	mov	r0, r6
 800dd94:	47c0      	blx	r8
 800dd96:	3001      	adds	r0, #1
 800dd98:	d103      	bne.n	800dda2 <_printf_common+0xba>
 800dd9a:	f04f 30ff 	mov.w	r0, #4294967295
 800dd9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dda2:	3501      	adds	r5, #1
 800dda4:	e7c3      	b.n	800dd2e <_printf_common+0x46>
 800dda6:	18e1      	adds	r1, r4, r3
 800dda8:	1c5a      	adds	r2, r3, #1
 800ddaa:	2030      	movs	r0, #48	; 0x30
 800ddac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ddb0:	4422      	add	r2, r4
 800ddb2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ddb6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ddba:	3302      	adds	r3, #2
 800ddbc:	e7c5      	b.n	800dd4a <_printf_common+0x62>
 800ddbe:	2301      	movs	r3, #1
 800ddc0:	4622      	mov	r2, r4
 800ddc2:	4639      	mov	r1, r7
 800ddc4:	4630      	mov	r0, r6
 800ddc6:	47c0      	blx	r8
 800ddc8:	3001      	adds	r0, #1
 800ddca:	d0e6      	beq.n	800dd9a <_printf_common+0xb2>
 800ddcc:	f109 0901 	add.w	r9, r9, #1
 800ddd0:	e7d8      	b.n	800dd84 <_printf_common+0x9c>
	...

0800ddd4 <_printf_i>:
 800ddd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ddd8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800dddc:	460c      	mov	r4, r1
 800ddde:	7e09      	ldrb	r1, [r1, #24]
 800dde0:	b085      	sub	sp, #20
 800dde2:	296e      	cmp	r1, #110	; 0x6e
 800dde4:	4617      	mov	r7, r2
 800dde6:	4606      	mov	r6, r0
 800dde8:	4698      	mov	r8, r3
 800ddea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ddec:	f000 80b3 	beq.w	800df56 <_printf_i+0x182>
 800ddf0:	d822      	bhi.n	800de38 <_printf_i+0x64>
 800ddf2:	2963      	cmp	r1, #99	; 0x63
 800ddf4:	d036      	beq.n	800de64 <_printf_i+0x90>
 800ddf6:	d80a      	bhi.n	800de0e <_printf_i+0x3a>
 800ddf8:	2900      	cmp	r1, #0
 800ddfa:	f000 80b9 	beq.w	800df70 <_printf_i+0x19c>
 800ddfe:	2958      	cmp	r1, #88	; 0x58
 800de00:	f000 8083 	beq.w	800df0a <_printf_i+0x136>
 800de04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800de08:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800de0c:	e032      	b.n	800de74 <_printf_i+0xa0>
 800de0e:	2964      	cmp	r1, #100	; 0x64
 800de10:	d001      	beq.n	800de16 <_printf_i+0x42>
 800de12:	2969      	cmp	r1, #105	; 0x69
 800de14:	d1f6      	bne.n	800de04 <_printf_i+0x30>
 800de16:	6820      	ldr	r0, [r4, #0]
 800de18:	6813      	ldr	r3, [r2, #0]
 800de1a:	0605      	lsls	r5, r0, #24
 800de1c:	f103 0104 	add.w	r1, r3, #4
 800de20:	d52a      	bpl.n	800de78 <_printf_i+0xa4>
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	6011      	str	r1, [r2, #0]
 800de26:	2b00      	cmp	r3, #0
 800de28:	da03      	bge.n	800de32 <_printf_i+0x5e>
 800de2a:	222d      	movs	r2, #45	; 0x2d
 800de2c:	425b      	negs	r3, r3
 800de2e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800de32:	486f      	ldr	r0, [pc, #444]	; (800dff0 <_printf_i+0x21c>)
 800de34:	220a      	movs	r2, #10
 800de36:	e039      	b.n	800deac <_printf_i+0xd8>
 800de38:	2973      	cmp	r1, #115	; 0x73
 800de3a:	f000 809d 	beq.w	800df78 <_printf_i+0x1a4>
 800de3e:	d808      	bhi.n	800de52 <_printf_i+0x7e>
 800de40:	296f      	cmp	r1, #111	; 0x6f
 800de42:	d020      	beq.n	800de86 <_printf_i+0xb2>
 800de44:	2970      	cmp	r1, #112	; 0x70
 800de46:	d1dd      	bne.n	800de04 <_printf_i+0x30>
 800de48:	6823      	ldr	r3, [r4, #0]
 800de4a:	f043 0320 	orr.w	r3, r3, #32
 800de4e:	6023      	str	r3, [r4, #0]
 800de50:	e003      	b.n	800de5a <_printf_i+0x86>
 800de52:	2975      	cmp	r1, #117	; 0x75
 800de54:	d017      	beq.n	800de86 <_printf_i+0xb2>
 800de56:	2978      	cmp	r1, #120	; 0x78
 800de58:	d1d4      	bne.n	800de04 <_printf_i+0x30>
 800de5a:	2378      	movs	r3, #120	; 0x78
 800de5c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800de60:	4864      	ldr	r0, [pc, #400]	; (800dff4 <_printf_i+0x220>)
 800de62:	e055      	b.n	800df10 <_printf_i+0x13c>
 800de64:	6813      	ldr	r3, [r2, #0]
 800de66:	1d19      	adds	r1, r3, #4
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	6011      	str	r1, [r2, #0]
 800de6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800de70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800de74:	2301      	movs	r3, #1
 800de76:	e08c      	b.n	800df92 <_printf_i+0x1be>
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	6011      	str	r1, [r2, #0]
 800de7c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800de80:	bf18      	it	ne
 800de82:	b21b      	sxthne	r3, r3
 800de84:	e7cf      	b.n	800de26 <_printf_i+0x52>
 800de86:	6813      	ldr	r3, [r2, #0]
 800de88:	6825      	ldr	r5, [r4, #0]
 800de8a:	1d18      	adds	r0, r3, #4
 800de8c:	6010      	str	r0, [r2, #0]
 800de8e:	0628      	lsls	r0, r5, #24
 800de90:	d501      	bpl.n	800de96 <_printf_i+0xc2>
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	e002      	b.n	800de9c <_printf_i+0xc8>
 800de96:	0668      	lsls	r0, r5, #25
 800de98:	d5fb      	bpl.n	800de92 <_printf_i+0xbe>
 800de9a:	881b      	ldrh	r3, [r3, #0]
 800de9c:	4854      	ldr	r0, [pc, #336]	; (800dff0 <_printf_i+0x21c>)
 800de9e:	296f      	cmp	r1, #111	; 0x6f
 800dea0:	bf14      	ite	ne
 800dea2:	220a      	movne	r2, #10
 800dea4:	2208      	moveq	r2, #8
 800dea6:	2100      	movs	r1, #0
 800dea8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800deac:	6865      	ldr	r5, [r4, #4]
 800deae:	60a5      	str	r5, [r4, #8]
 800deb0:	2d00      	cmp	r5, #0
 800deb2:	f2c0 8095 	blt.w	800dfe0 <_printf_i+0x20c>
 800deb6:	6821      	ldr	r1, [r4, #0]
 800deb8:	f021 0104 	bic.w	r1, r1, #4
 800debc:	6021      	str	r1, [r4, #0]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d13d      	bne.n	800df3e <_printf_i+0x16a>
 800dec2:	2d00      	cmp	r5, #0
 800dec4:	f040 808e 	bne.w	800dfe4 <_printf_i+0x210>
 800dec8:	4665      	mov	r5, ip
 800deca:	2a08      	cmp	r2, #8
 800decc:	d10b      	bne.n	800dee6 <_printf_i+0x112>
 800dece:	6823      	ldr	r3, [r4, #0]
 800ded0:	07db      	lsls	r3, r3, #31
 800ded2:	d508      	bpl.n	800dee6 <_printf_i+0x112>
 800ded4:	6923      	ldr	r3, [r4, #16]
 800ded6:	6862      	ldr	r2, [r4, #4]
 800ded8:	429a      	cmp	r2, r3
 800deda:	bfde      	ittt	le
 800dedc:	2330      	movle	r3, #48	; 0x30
 800dede:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dee2:	f105 35ff 	addle.w	r5, r5, #4294967295
 800dee6:	ebac 0305 	sub.w	r3, ip, r5
 800deea:	6123      	str	r3, [r4, #16]
 800deec:	f8cd 8000 	str.w	r8, [sp]
 800def0:	463b      	mov	r3, r7
 800def2:	aa03      	add	r2, sp, #12
 800def4:	4621      	mov	r1, r4
 800def6:	4630      	mov	r0, r6
 800def8:	f7ff fef6 	bl	800dce8 <_printf_common>
 800defc:	3001      	adds	r0, #1
 800defe:	d14d      	bne.n	800df9c <_printf_i+0x1c8>
 800df00:	f04f 30ff 	mov.w	r0, #4294967295
 800df04:	b005      	add	sp, #20
 800df06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df0a:	4839      	ldr	r0, [pc, #228]	; (800dff0 <_printf_i+0x21c>)
 800df0c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800df10:	6813      	ldr	r3, [r2, #0]
 800df12:	6821      	ldr	r1, [r4, #0]
 800df14:	1d1d      	adds	r5, r3, #4
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	6015      	str	r5, [r2, #0]
 800df1a:	060a      	lsls	r2, r1, #24
 800df1c:	d50b      	bpl.n	800df36 <_printf_i+0x162>
 800df1e:	07ca      	lsls	r2, r1, #31
 800df20:	bf44      	itt	mi
 800df22:	f041 0120 	orrmi.w	r1, r1, #32
 800df26:	6021      	strmi	r1, [r4, #0]
 800df28:	b91b      	cbnz	r3, 800df32 <_printf_i+0x15e>
 800df2a:	6822      	ldr	r2, [r4, #0]
 800df2c:	f022 0220 	bic.w	r2, r2, #32
 800df30:	6022      	str	r2, [r4, #0]
 800df32:	2210      	movs	r2, #16
 800df34:	e7b7      	b.n	800dea6 <_printf_i+0xd2>
 800df36:	064d      	lsls	r5, r1, #25
 800df38:	bf48      	it	mi
 800df3a:	b29b      	uxthmi	r3, r3
 800df3c:	e7ef      	b.n	800df1e <_printf_i+0x14a>
 800df3e:	4665      	mov	r5, ip
 800df40:	fbb3 f1f2 	udiv	r1, r3, r2
 800df44:	fb02 3311 	mls	r3, r2, r1, r3
 800df48:	5cc3      	ldrb	r3, [r0, r3]
 800df4a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800df4e:	460b      	mov	r3, r1
 800df50:	2900      	cmp	r1, #0
 800df52:	d1f5      	bne.n	800df40 <_printf_i+0x16c>
 800df54:	e7b9      	b.n	800deca <_printf_i+0xf6>
 800df56:	6813      	ldr	r3, [r2, #0]
 800df58:	6825      	ldr	r5, [r4, #0]
 800df5a:	6961      	ldr	r1, [r4, #20]
 800df5c:	1d18      	adds	r0, r3, #4
 800df5e:	6010      	str	r0, [r2, #0]
 800df60:	0628      	lsls	r0, r5, #24
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	d501      	bpl.n	800df6a <_printf_i+0x196>
 800df66:	6019      	str	r1, [r3, #0]
 800df68:	e002      	b.n	800df70 <_printf_i+0x19c>
 800df6a:	066a      	lsls	r2, r5, #25
 800df6c:	d5fb      	bpl.n	800df66 <_printf_i+0x192>
 800df6e:	8019      	strh	r1, [r3, #0]
 800df70:	2300      	movs	r3, #0
 800df72:	6123      	str	r3, [r4, #16]
 800df74:	4665      	mov	r5, ip
 800df76:	e7b9      	b.n	800deec <_printf_i+0x118>
 800df78:	6813      	ldr	r3, [r2, #0]
 800df7a:	1d19      	adds	r1, r3, #4
 800df7c:	6011      	str	r1, [r2, #0]
 800df7e:	681d      	ldr	r5, [r3, #0]
 800df80:	6862      	ldr	r2, [r4, #4]
 800df82:	2100      	movs	r1, #0
 800df84:	4628      	mov	r0, r5
 800df86:	f7f2 f92b 	bl	80001e0 <memchr>
 800df8a:	b108      	cbz	r0, 800df90 <_printf_i+0x1bc>
 800df8c:	1b40      	subs	r0, r0, r5
 800df8e:	6060      	str	r0, [r4, #4]
 800df90:	6863      	ldr	r3, [r4, #4]
 800df92:	6123      	str	r3, [r4, #16]
 800df94:	2300      	movs	r3, #0
 800df96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800df9a:	e7a7      	b.n	800deec <_printf_i+0x118>
 800df9c:	6923      	ldr	r3, [r4, #16]
 800df9e:	462a      	mov	r2, r5
 800dfa0:	4639      	mov	r1, r7
 800dfa2:	4630      	mov	r0, r6
 800dfa4:	47c0      	blx	r8
 800dfa6:	3001      	adds	r0, #1
 800dfa8:	d0aa      	beq.n	800df00 <_printf_i+0x12c>
 800dfaa:	6823      	ldr	r3, [r4, #0]
 800dfac:	079b      	lsls	r3, r3, #30
 800dfae:	d413      	bmi.n	800dfd8 <_printf_i+0x204>
 800dfb0:	68e0      	ldr	r0, [r4, #12]
 800dfb2:	9b03      	ldr	r3, [sp, #12]
 800dfb4:	4298      	cmp	r0, r3
 800dfb6:	bfb8      	it	lt
 800dfb8:	4618      	movlt	r0, r3
 800dfba:	e7a3      	b.n	800df04 <_printf_i+0x130>
 800dfbc:	2301      	movs	r3, #1
 800dfbe:	464a      	mov	r2, r9
 800dfc0:	4639      	mov	r1, r7
 800dfc2:	4630      	mov	r0, r6
 800dfc4:	47c0      	blx	r8
 800dfc6:	3001      	adds	r0, #1
 800dfc8:	d09a      	beq.n	800df00 <_printf_i+0x12c>
 800dfca:	3501      	adds	r5, #1
 800dfcc:	68e3      	ldr	r3, [r4, #12]
 800dfce:	9a03      	ldr	r2, [sp, #12]
 800dfd0:	1a9b      	subs	r3, r3, r2
 800dfd2:	42ab      	cmp	r3, r5
 800dfd4:	dcf2      	bgt.n	800dfbc <_printf_i+0x1e8>
 800dfd6:	e7eb      	b.n	800dfb0 <_printf_i+0x1dc>
 800dfd8:	2500      	movs	r5, #0
 800dfda:	f104 0919 	add.w	r9, r4, #25
 800dfde:	e7f5      	b.n	800dfcc <_printf_i+0x1f8>
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d1ac      	bne.n	800df3e <_printf_i+0x16a>
 800dfe4:	7803      	ldrb	r3, [r0, #0]
 800dfe6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dfea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dfee:	e76c      	b.n	800deca <_printf_i+0xf6>
 800dff0:	08011af6 	.word	0x08011af6
 800dff4:	08011b07 	.word	0x08011b07

0800dff8 <_scanf_float>:
 800dff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dffc:	469a      	mov	sl, r3
 800dffe:	688b      	ldr	r3, [r1, #8]
 800e000:	4616      	mov	r6, r2
 800e002:	1e5a      	subs	r2, r3, #1
 800e004:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e008:	b087      	sub	sp, #28
 800e00a:	bf83      	ittte	hi
 800e00c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800e010:	189b      	addhi	r3, r3, r2
 800e012:	9301      	strhi	r3, [sp, #4]
 800e014:	2300      	movls	r3, #0
 800e016:	bf86      	itte	hi
 800e018:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e01c:	608b      	strhi	r3, [r1, #8]
 800e01e:	9301      	strls	r3, [sp, #4]
 800e020:	680b      	ldr	r3, [r1, #0]
 800e022:	4688      	mov	r8, r1
 800e024:	f04f 0b00 	mov.w	fp, #0
 800e028:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800e02c:	f848 3b1c 	str.w	r3, [r8], #28
 800e030:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800e034:	4607      	mov	r7, r0
 800e036:	460c      	mov	r4, r1
 800e038:	4645      	mov	r5, r8
 800e03a:	465a      	mov	r2, fp
 800e03c:	46d9      	mov	r9, fp
 800e03e:	f8cd b008 	str.w	fp, [sp, #8]
 800e042:	68a1      	ldr	r1, [r4, #8]
 800e044:	b181      	cbz	r1, 800e068 <_scanf_float+0x70>
 800e046:	6833      	ldr	r3, [r6, #0]
 800e048:	781b      	ldrb	r3, [r3, #0]
 800e04a:	2b49      	cmp	r3, #73	; 0x49
 800e04c:	d071      	beq.n	800e132 <_scanf_float+0x13a>
 800e04e:	d84d      	bhi.n	800e0ec <_scanf_float+0xf4>
 800e050:	2b39      	cmp	r3, #57	; 0x39
 800e052:	d840      	bhi.n	800e0d6 <_scanf_float+0xde>
 800e054:	2b31      	cmp	r3, #49	; 0x31
 800e056:	f080 8088 	bcs.w	800e16a <_scanf_float+0x172>
 800e05a:	2b2d      	cmp	r3, #45	; 0x2d
 800e05c:	f000 8090 	beq.w	800e180 <_scanf_float+0x188>
 800e060:	d815      	bhi.n	800e08e <_scanf_float+0x96>
 800e062:	2b2b      	cmp	r3, #43	; 0x2b
 800e064:	f000 808c 	beq.w	800e180 <_scanf_float+0x188>
 800e068:	f1b9 0f00 	cmp.w	r9, #0
 800e06c:	d003      	beq.n	800e076 <_scanf_float+0x7e>
 800e06e:	6823      	ldr	r3, [r4, #0]
 800e070:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e074:	6023      	str	r3, [r4, #0]
 800e076:	3a01      	subs	r2, #1
 800e078:	2a01      	cmp	r2, #1
 800e07a:	f200 80ea 	bhi.w	800e252 <_scanf_float+0x25a>
 800e07e:	4545      	cmp	r5, r8
 800e080:	f200 80dc 	bhi.w	800e23c <_scanf_float+0x244>
 800e084:	2601      	movs	r6, #1
 800e086:	4630      	mov	r0, r6
 800e088:	b007      	add	sp, #28
 800e08a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e08e:	2b2e      	cmp	r3, #46	; 0x2e
 800e090:	f000 809f 	beq.w	800e1d2 <_scanf_float+0x1da>
 800e094:	2b30      	cmp	r3, #48	; 0x30
 800e096:	d1e7      	bne.n	800e068 <_scanf_float+0x70>
 800e098:	6820      	ldr	r0, [r4, #0]
 800e09a:	f410 7f80 	tst.w	r0, #256	; 0x100
 800e09e:	d064      	beq.n	800e16a <_scanf_float+0x172>
 800e0a0:	9b01      	ldr	r3, [sp, #4]
 800e0a2:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800e0a6:	6020      	str	r0, [r4, #0]
 800e0a8:	f109 0901 	add.w	r9, r9, #1
 800e0ac:	b11b      	cbz	r3, 800e0b6 <_scanf_float+0xbe>
 800e0ae:	3b01      	subs	r3, #1
 800e0b0:	3101      	adds	r1, #1
 800e0b2:	9301      	str	r3, [sp, #4]
 800e0b4:	60a1      	str	r1, [r4, #8]
 800e0b6:	68a3      	ldr	r3, [r4, #8]
 800e0b8:	3b01      	subs	r3, #1
 800e0ba:	60a3      	str	r3, [r4, #8]
 800e0bc:	6923      	ldr	r3, [r4, #16]
 800e0be:	3301      	adds	r3, #1
 800e0c0:	6123      	str	r3, [r4, #16]
 800e0c2:	6873      	ldr	r3, [r6, #4]
 800e0c4:	3b01      	subs	r3, #1
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	6073      	str	r3, [r6, #4]
 800e0ca:	f340 80ac 	ble.w	800e226 <_scanf_float+0x22e>
 800e0ce:	6833      	ldr	r3, [r6, #0]
 800e0d0:	3301      	adds	r3, #1
 800e0d2:	6033      	str	r3, [r6, #0]
 800e0d4:	e7b5      	b.n	800e042 <_scanf_float+0x4a>
 800e0d6:	2b45      	cmp	r3, #69	; 0x45
 800e0d8:	f000 8085 	beq.w	800e1e6 <_scanf_float+0x1ee>
 800e0dc:	2b46      	cmp	r3, #70	; 0x46
 800e0de:	d06a      	beq.n	800e1b6 <_scanf_float+0x1be>
 800e0e0:	2b41      	cmp	r3, #65	; 0x41
 800e0e2:	d1c1      	bne.n	800e068 <_scanf_float+0x70>
 800e0e4:	2a01      	cmp	r2, #1
 800e0e6:	d1bf      	bne.n	800e068 <_scanf_float+0x70>
 800e0e8:	2202      	movs	r2, #2
 800e0ea:	e046      	b.n	800e17a <_scanf_float+0x182>
 800e0ec:	2b65      	cmp	r3, #101	; 0x65
 800e0ee:	d07a      	beq.n	800e1e6 <_scanf_float+0x1ee>
 800e0f0:	d818      	bhi.n	800e124 <_scanf_float+0x12c>
 800e0f2:	2b54      	cmp	r3, #84	; 0x54
 800e0f4:	d066      	beq.n	800e1c4 <_scanf_float+0x1cc>
 800e0f6:	d811      	bhi.n	800e11c <_scanf_float+0x124>
 800e0f8:	2b4e      	cmp	r3, #78	; 0x4e
 800e0fa:	d1b5      	bne.n	800e068 <_scanf_float+0x70>
 800e0fc:	2a00      	cmp	r2, #0
 800e0fe:	d146      	bne.n	800e18e <_scanf_float+0x196>
 800e100:	f1b9 0f00 	cmp.w	r9, #0
 800e104:	d145      	bne.n	800e192 <_scanf_float+0x19a>
 800e106:	6821      	ldr	r1, [r4, #0]
 800e108:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800e10c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800e110:	d13f      	bne.n	800e192 <_scanf_float+0x19a>
 800e112:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800e116:	6021      	str	r1, [r4, #0]
 800e118:	2201      	movs	r2, #1
 800e11a:	e02e      	b.n	800e17a <_scanf_float+0x182>
 800e11c:	2b59      	cmp	r3, #89	; 0x59
 800e11e:	d01e      	beq.n	800e15e <_scanf_float+0x166>
 800e120:	2b61      	cmp	r3, #97	; 0x61
 800e122:	e7de      	b.n	800e0e2 <_scanf_float+0xea>
 800e124:	2b6e      	cmp	r3, #110	; 0x6e
 800e126:	d0e9      	beq.n	800e0fc <_scanf_float+0x104>
 800e128:	d815      	bhi.n	800e156 <_scanf_float+0x15e>
 800e12a:	2b66      	cmp	r3, #102	; 0x66
 800e12c:	d043      	beq.n	800e1b6 <_scanf_float+0x1be>
 800e12e:	2b69      	cmp	r3, #105	; 0x69
 800e130:	d19a      	bne.n	800e068 <_scanf_float+0x70>
 800e132:	f1bb 0f00 	cmp.w	fp, #0
 800e136:	d138      	bne.n	800e1aa <_scanf_float+0x1b2>
 800e138:	f1b9 0f00 	cmp.w	r9, #0
 800e13c:	d197      	bne.n	800e06e <_scanf_float+0x76>
 800e13e:	6821      	ldr	r1, [r4, #0]
 800e140:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800e144:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800e148:	d195      	bne.n	800e076 <_scanf_float+0x7e>
 800e14a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800e14e:	6021      	str	r1, [r4, #0]
 800e150:	f04f 0b01 	mov.w	fp, #1
 800e154:	e011      	b.n	800e17a <_scanf_float+0x182>
 800e156:	2b74      	cmp	r3, #116	; 0x74
 800e158:	d034      	beq.n	800e1c4 <_scanf_float+0x1cc>
 800e15a:	2b79      	cmp	r3, #121	; 0x79
 800e15c:	d184      	bne.n	800e068 <_scanf_float+0x70>
 800e15e:	f1bb 0f07 	cmp.w	fp, #7
 800e162:	d181      	bne.n	800e068 <_scanf_float+0x70>
 800e164:	f04f 0b08 	mov.w	fp, #8
 800e168:	e007      	b.n	800e17a <_scanf_float+0x182>
 800e16a:	eb12 0f0b 	cmn.w	r2, fp
 800e16e:	f47f af7b 	bne.w	800e068 <_scanf_float+0x70>
 800e172:	6821      	ldr	r1, [r4, #0]
 800e174:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800e178:	6021      	str	r1, [r4, #0]
 800e17a:	702b      	strb	r3, [r5, #0]
 800e17c:	3501      	adds	r5, #1
 800e17e:	e79a      	b.n	800e0b6 <_scanf_float+0xbe>
 800e180:	6821      	ldr	r1, [r4, #0]
 800e182:	0608      	lsls	r0, r1, #24
 800e184:	f57f af70 	bpl.w	800e068 <_scanf_float+0x70>
 800e188:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800e18c:	e7f4      	b.n	800e178 <_scanf_float+0x180>
 800e18e:	2a02      	cmp	r2, #2
 800e190:	d047      	beq.n	800e222 <_scanf_float+0x22a>
 800e192:	f1bb 0f01 	cmp.w	fp, #1
 800e196:	d003      	beq.n	800e1a0 <_scanf_float+0x1a8>
 800e198:	f1bb 0f04 	cmp.w	fp, #4
 800e19c:	f47f af64 	bne.w	800e068 <_scanf_float+0x70>
 800e1a0:	f10b 0b01 	add.w	fp, fp, #1
 800e1a4:	fa5f fb8b 	uxtb.w	fp, fp
 800e1a8:	e7e7      	b.n	800e17a <_scanf_float+0x182>
 800e1aa:	f1bb 0f03 	cmp.w	fp, #3
 800e1ae:	d0f7      	beq.n	800e1a0 <_scanf_float+0x1a8>
 800e1b0:	f1bb 0f05 	cmp.w	fp, #5
 800e1b4:	e7f2      	b.n	800e19c <_scanf_float+0x1a4>
 800e1b6:	f1bb 0f02 	cmp.w	fp, #2
 800e1ba:	f47f af55 	bne.w	800e068 <_scanf_float+0x70>
 800e1be:	f04f 0b03 	mov.w	fp, #3
 800e1c2:	e7da      	b.n	800e17a <_scanf_float+0x182>
 800e1c4:	f1bb 0f06 	cmp.w	fp, #6
 800e1c8:	f47f af4e 	bne.w	800e068 <_scanf_float+0x70>
 800e1cc:	f04f 0b07 	mov.w	fp, #7
 800e1d0:	e7d3      	b.n	800e17a <_scanf_float+0x182>
 800e1d2:	6821      	ldr	r1, [r4, #0]
 800e1d4:	0588      	lsls	r0, r1, #22
 800e1d6:	f57f af47 	bpl.w	800e068 <_scanf_float+0x70>
 800e1da:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800e1de:	6021      	str	r1, [r4, #0]
 800e1e0:	f8cd 9008 	str.w	r9, [sp, #8]
 800e1e4:	e7c9      	b.n	800e17a <_scanf_float+0x182>
 800e1e6:	6821      	ldr	r1, [r4, #0]
 800e1e8:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800e1ec:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800e1f0:	d006      	beq.n	800e200 <_scanf_float+0x208>
 800e1f2:	0548      	lsls	r0, r1, #21
 800e1f4:	f57f af38 	bpl.w	800e068 <_scanf_float+0x70>
 800e1f8:	f1b9 0f00 	cmp.w	r9, #0
 800e1fc:	f43f af3b 	beq.w	800e076 <_scanf_float+0x7e>
 800e200:	0588      	lsls	r0, r1, #22
 800e202:	bf58      	it	pl
 800e204:	9802      	ldrpl	r0, [sp, #8]
 800e206:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800e20a:	bf58      	it	pl
 800e20c:	eba9 0000 	subpl.w	r0, r9, r0
 800e210:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800e214:	bf58      	it	pl
 800e216:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800e21a:	6021      	str	r1, [r4, #0]
 800e21c:	f04f 0900 	mov.w	r9, #0
 800e220:	e7ab      	b.n	800e17a <_scanf_float+0x182>
 800e222:	2203      	movs	r2, #3
 800e224:	e7a9      	b.n	800e17a <_scanf_float+0x182>
 800e226:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e22a:	9205      	str	r2, [sp, #20]
 800e22c:	4631      	mov	r1, r6
 800e22e:	4638      	mov	r0, r7
 800e230:	4798      	blx	r3
 800e232:	9a05      	ldr	r2, [sp, #20]
 800e234:	2800      	cmp	r0, #0
 800e236:	f43f af04 	beq.w	800e042 <_scanf_float+0x4a>
 800e23a:	e715      	b.n	800e068 <_scanf_float+0x70>
 800e23c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e240:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800e244:	4632      	mov	r2, r6
 800e246:	4638      	mov	r0, r7
 800e248:	4798      	blx	r3
 800e24a:	6923      	ldr	r3, [r4, #16]
 800e24c:	3b01      	subs	r3, #1
 800e24e:	6123      	str	r3, [r4, #16]
 800e250:	e715      	b.n	800e07e <_scanf_float+0x86>
 800e252:	f10b 33ff 	add.w	r3, fp, #4294967295
 800e256:	2b06      	cmp	r3, #6
 800e258:	d80a      	bhi.n	800e270 <_scanf_float+0x278>
 800e25a:	f1bb 0f02 	cmp.w	fp, #2
 800e25e:	d968      	bls.n	800e332 <_scanf_float+0x33a>
 800e260:	f1ab 0b03 	sub.w	fp, fp, #3
 800e264:	fa5f fb8b 	uxtb.w	fp, fp
 800e268:	eba5 0b0b 	sub.w	fp, r5, fp
 800e26c:	455d      	cmp	r5, fp
 800e26e:	d14b      	bne.n	800e308 <_scanf_float+0x310>
 800e270:	6823      	ldr	r3, [r4, #0]
 800e272:	05da      	lsls	r2, r3, #23
 800e274:	d51f      	bpl.n	800e2b6 <_scanf_float+0x2be>
 800e276:	055b      	lsls	r3, r3, #21
 800e278:	d468      	bmi.n	800e34c <_scanf_float+0x354>
 800e27a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800e27e:	6923      	ldr	r3, [r4, #16]
 800e280:	2965      	cmp	r1, #101	; 0x65
 800e282:	f103 33ff 	add.w	r3, r3, #4294967295
 800e286:	f105 3bff 	add.w	fp, r5, #4294967295
 800e28a:	6123      	str	r3, [r4, #16]
 800e28c:	d00d      	beq.n	800e2aa <_scanf_float+0x2b2>
 800e28e:	2945      	cmp	r1, #69	; 0x45
 800e290:	d00b      	beq.n	800e2aa <_scanf_float+0x2b2>
 800e292:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e296:	4632      	mov	r2, r6
 800e298:	4638      	mov	r0, r7
 800e29a:	4798      	blx	r3
 800e29c:	6923      	ldr	r3, [r4, #16]
 800e29e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800e2a2:	3b01      	subs	r3, #1
 800e2a4:	f1a5 0b02 	sub.w	fp, r5, #2
 800e2a8:	6123      	str	r3, [r4, #16]
 800e2aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e2ae:	4632      	mov	r2, r6
 800e2b0:	4638      	mov	r0, r7
 800e2b2:	4798      	blx	r3
 800e2b4:	465d      	mov	r5, fp
 800e2b6:	6826      	ldr	r6, [r4, #0]
 800e2b8:	f016 0610 	ands.w	r6, r6, #16
 800e2bc:	d17a      	bne.n	800e3b4 <_scanf_float+0x3bc>
 800e2be:	702e      	strb	r6, [r5, #0]
 800e2c0:	6823      	ldr	r3, [r4, #0]
 800e2c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800e2c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e2ca:	d142      	bne.n	800e352 <_scanf_float+0x35a>
 800e2cc:	9b02      	ldr	r3, [sp, #8]
 800e2ce:	eba9 0303 	sub.w	r3, r9, r3
 800e2d2:	425a      	negs	r2, r3
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d149      	bne.n	800e36c <_scanf_float+0x374>
 800e2d8:	2200      	movs	r2, #0
 800e2da:	4641      	mov	r1, r8
 800e2dc:	4638      	mov	r0, r7
 800e2de:	f000 fecb 	bl	800f078 <_strtod_r>
 800e2e2:	6825      	ldr	r5, [r4, #0]
 800e2e4:	f8da 3000 	ldr.w	r3, [sl]
 800e2e8:	f015 0f02 	tst.w	r5, #2
 800e2ec:	f103 0204 	add.w	r2, r3, #4
 800e2f0:	ec59 8b10 	vmov	r8, r9, d0
 800e2f4:	f8ca 2000 	str.w	r2, [sl]
 800e2f8:	d043      	beq.n	800e382 <_scanf_float+0x38a>
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	e9c3 8900 	strd	r8, r9, [r3]
 800e300:	68e3      	ldr	r3, [r4, #12]
 800e302:	3301      	adds	r3, #1
 800e304:	60e3      	str	r3, [r4, #12]
 800e306:	e6be      	b.n	800e086 <_scanf_float+0x8e>
 800e308:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e30c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800e310:	4632      	mov	r2, r6
 800e312:	4638      	mov	r0, r7
 800e314:	4798      	blx	r3
 800e316:	6923      	ldr	r3, [r4, #16]
 800e318:	3b01      	subs	r3, #1
 800e31a:	6123      	str	r3, [r4, #16]
 800e31c:	e7a6      	b.n	800e26c <_scanf_float+0x274>
 800e31e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e322:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800e326:	4632      	mov	r2, r6
 800e328:	4638      	mov	r0, r7
 800e32a:	4798      	blx	r3
 800e32c:	6923      	ldr	r3, [r4, #16]
 800e32e:	3b01      	subs	r3, #1
 800e330:	6123      	str	r3, [r4, #16]
 800e332:	4545      	cmp	r5, r8
 800e334:	d8f3      	bhi.n	800e31e <_scanf_float+0x326>
 800e336:	e6a5      	b.n	800e084 <_scanf_float+0x8c>
 800e338:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e33c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800e340:	4632      	mov	r2, r6
 800e342:	4638      	mov	r0, r7
 800e344:	4798      	blx	r3
 800e346:	6923      	ldr	r3, [r4, #16]
 800e348:	3b01      	subs	r3, #1
 800e34a:	6123      	str	r3, [r4, #16]
 800e34c:	4545      	cmp	r5, r8
 800e34e:	d8f3      	bhi.n	800e338 <_scanf_float+0x340>
 800e350:	e698      	b.n	800e084 <_scanf_float+0x8c>
 800e352:	9b03      	ldr	r3, [sp, #12]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d0bf      	beq.n	800e2d8 <_scanf_float+0x2e0>
 800e358:	9904      	ldr	r1, [sp, #16]
 800e35a:	230a      	movs	r3, #10
 800e35c:	4632      	mov	r2, r6
 800e35e:	3101      	adds	r1, #1
 800e360:	4638      	mov	r0, r7
 800e362:	f000 ff15 	bl	800f190 <_strtol_r>
 800e366:	9b03      	ldr	r3, [sp, #12]
 800e368:	9d04      	ldr	r5, [sp, #16]
 800e36a:	1ac2      	subs	r2, r0, r3
 800e36c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800e370:	429d      	cmp	r5, r3
 800e372:	bf28      	it	cs
 800e374:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800e378:	490f      	ldr	r1, [pc, #60]	; (800e3b8 <_scanf_float+0x3c0>)
 800e37a:	4628      	mov	r0, r5
 800e37c:	f000 f84c 	bl	800e418 <siprintf>
 800e380:	e7aa      	b.n	800e2d8 <_scanf_float+0x2e0>
 800e382:	f015 0504 	ands.w	r5, r5, #4
 800e386:	d1b8      	bne.n	800e2fa <_scanf_float+0x302>
 800e388:	681f      	ldr	r7, [r3, #0]
 800e38a:	ee10 2a10 	vmov	r2, s0
 800e38e:	464b      	mov	r3, r9
 800e390:	ee10 0a10 	vmov	r0, s0
 800e394:	4649      	mov	r1, r9
 800e396:	f7f2 fbc9 	bl	8000b2c <__aeabi_dcmpun>
 800e39a:	b128      	cbz	r0, 800e3a8 <_scanf_float+0x3b0>
 800e39c:	4628      	mov	r0, r5
 800e39e:	f000 f835 	bl	800e40c <nanf>
 800e3a2:	ed87 0a00 	vstr	s0, [r7]
 800e3a6:	e7ab      	b.n	800e300 <_scanf_float+0x308>
 800e3a8:	4640      	mov	r0, r8
 800e3aa:	4649      	mov	r1, r9
 800e3ac:	f7f2 fc1c 	bl	8000be8 <__aeabi_d2f>
 800e3b0:	6038      	str	r0, [r7, #0]
 800e3b2:	e7a5      	b.n	800e300 <_scanf_float+0x308>
 800e3b4:	2600      	movs	r6, #0
 800e3b6:	e666      	b.n	800e086 <_scanf_float+0x8e>
 800e3b8:	08011b18 	.word	0x08011b18

0800e3bc <iprintf>:
 800e3bc:	b40f      	push	{r0, r1, r2, r3}
 800e3be:	4b0a      	ldr	r3, [pc, #40]	; (800e3e8 <iprintf+0x2c>)
 800e3c0:	b513      	push	{r0, r1, r4, lr}
 800e3c2:	681c      	ldr	r4, [r3, #0]
 800e3c4:	b124      	cbz	r4, 800e3d0 <iprintf+0x14>
 800e3c6:	69a3      	ldr	r3, [r4, #24]
 800e3c8:	b913      	cbnz	r3, 800e3d0 <iprintf+0x14>
 800e3ca:	4620      	mov	r0, r4
 800e3cc:	f001 fd78 	bl	800fec0 <__sinit>
 800e3d0:	ab05      	add	r3, sp, #20
 800e3d2:	9a04      	ldr	r2, [sp, #16]
 800e3d4:	68a1      	ldr	r1, [r4, #8]
 800e3d6:	9301      	str	r3, [sp, #4]
 800e3d8:	4620      	mov	r0, r4
 800e3da:	f002 fed3 	bl	8011184 <_vfiprintf_r>
 800e3de:	b002      	add	sp, #8
 800e3e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e3e4:	b004      	add	sp, #16
 800e3e6:	4770      	bx	lr
 800e3e8:	2000018c 	.word	0x2000018c

0800e3ec <_sbrk_r>:
 800e3ec:	b538      	push	{r3, r4, r5, lr}
 800e3ee:	4c06      	ldr	r4, [pc, #24]	; (800e408 <_sbrk_r+0x1c>)
 800e3f0:	2300      	movs	r3, #0
 800e3f2:	4605      	mov	r5, r0
 800e3f4:	4608      	mov	r0, r1
 800e3f6:	6023      	str	r3, [r4, #0]
 800e3f8:	f7f4 fcec 	bl	8002dd4 <_sbrk>
 800e3fc:	1c43      	adds	r3, r0, #1
 800e3fe:	d102      	bne.n	800e406 <_sbrk_r+0x1a>
 800e400:	6823      	ldr	r3, [r4, #0]
 800e402:	b103      	cbz	r3, 800e406 <_sbrk_r+0x1a>
 800e404:	602b      	str	r3, [r5, #0]
 800e406:	bd38      	pop	{r3, r4, r5, pc}
 800e408:	20002848 	.word	0x20002848

0800e40c <nanf>:
 800e40c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e414 <nanf+0x8>
 800e410:	4770      	bx	lr
 800e412:	bf00      	nop
 800e414:	7fc00000 	.word	0x7fc00000

0800e418 <siprintf>:
 800e418:	b40e      	push	{r1, r2, r3}
 800e41a:	b500      	push	{lr}
 800e41c:	b09c      	sub	sp, #112	; 0x70
 800e41e:	ab1d      	add	r3, sp, #116	; 0x74
 800e420:	9002      	str	r0, [sp, #8]
 800e422:	9006      	str	r0, [sp, #24]
 800e424:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e428:	4809      	ldr	r0, [pc, #36]	; (800e450 <siprintf+0x38>)
 800e42a:	9107      	str	r1, [sp, #28]
 800e42c:	9104      	str	r1, [sp, #16]
 800e42e:	4909      	ldr	r1, [pc, #36]	; (800e454 <siprintf+0x3c>)
 800e430:	f853 2b04 	ldr.w	r2, [r3], #4
 800e434:	9105      	str	r1, [sp, #20]
 800e436:	6800      	ldr	r0, [r0, #0]
 800e438:	9301      	str	r3, [sp, #4]
 800e43a:	a902      	add	r1, sp, #8
 800e43c:	f002 fd80 	bl	8010f40 <_svfiprintf_r>
 800e440:	9b02      	ldr	r3, [sp, #8]
 800e442:	2200      	movs	r2, #0
 800e444:	701a      	strb	r2, [r3, #0]
 800e446:	b01c      	add	sp, #112	; 0x70
 800e448:	f85d eb04 	ldr.w	lr, [sp], #4
 800e44c:	b003      	add	sp, #12
 800e44e:	4770      	bx	lr
 800e450:	2000018c 	.word	0x2000018c
 800e454:	ffff0208 	.word	0xffff0208

0800e458 <sulp>:
 800e458:	b570      	push	{r4, r5, r6, lr}
 800e45a:	4604      	mov	r4, r0
 800e45c:	460d      	mov	r5, r1
 800e45e:	ec45 4b10 	vmov	d0, r4, r5
 800e462:	4616      	mov	r6, r2
 800e464:	f002 fbd0 	bl	8010c08 <__ulp>
 800e468:	ec51 0b10 	vmov	r0, r1, d0
 800e46c:	b17e      	cbz	r6, 800e48e <sulp+0x36>
 800e46e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e472:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e476:	2b00      	cmp	r3, #0
 800e478:	dd09      	ble.n	800e48e <sulp+0x36>
 800e47a:	051b      	lsls	r3, r3, #20
 800e47c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800e480:	2400      	movs	r4, #0
 800e482:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800e486:	4622      	mov	r2, r4
 800e488:	462b      	mov	r3, r5
 800e48a:	f7f2 f8b5 	bl	80005f8 <__aeabi_dmul>
 800e48e:	bd70      	pop	{r4, r5, r6, pc}

0800e490 <_strtod_l>:
 800e490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e494:	461f      	mov	r7, r3
 800e496:	b0a1      	sub	sp, #132	; 0x84
 800e498:	2300      	movs	r3, #0
 800e49a:	4681      	mov	r9, r0
 800e49c:	4638      	mov	r0, r7
 800e49e:	460e      	mov	r6, r1
 800e4a0:	9217      	str	r2, [sp, #92]	; 0x5c
 800e4a2:	931c      	str	r3, [sp, #112]	; 0x70
 800e4a4:	f002 f8bf 	bl	8010626 <__localeconv_l>
 800e4a8:	4680      	mov	r8, r0
 800e4aa:	6800      	ldr	r0, [r0, #0]
 800e4ac:	f7f1 fe90 	bl	80001d0 <strlen>
 800e4b0:	f04f 0a00 	mov.w	sl, #0
 800e4b4:	4604      	mov	r4, r0
 800e4b6:	f04f 0b00 	mov.w	fp, #0
 800e4ba:	961b      	str	r6, [sp, #108]	; 0x6c
 800e4bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e4be:	781a      	ldrb	r2, [r3, #0]
 800e4c0:	2a0d      	cmp	r2, #13
 800e4c2:	d832      	bhi.n	800e52a <_strtod_l+0x9a>
 800e4c4:	2a09      	cmp	r2, #9
 800e4c6:	d236      	bcs.n	800e536 <_strtod_l+0xa6>
 800e4c8:	2a00      	cmp	r2, #0
 800e4ca:	d03e      	beq.n	800e54a <_strtod_l+0xba>
 800e4cc:	2300      	movs	r3, #0
 800e4ce:	930d      	str	r3, [sp, #52]	; 0x34
 800e4d0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800e4d2:	782b      	ldrb	r3, [r5, #0]
 800e4d4:	2b30      	cmp	r3, #48	; 0x30
 800e4d6:	f040 80ac 	bne.w	800e632 <_strtod_l+0x1a2>
 800e4da:	786b      	ldrb	r3, [r5, #1]
 800e4dc:	2b58      	cmp	r3, #88	; 0x58
 800e4de:	d001      	beq.n	800e4e4 <_strtod_l+0x54>
 800e4e0:	2b78      	cmp	r3, #120	; 0x78
 800e4e2:	d167      	bne.n	800e5b4 <_strtod_l+0x124>
 800e4e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e4e6:	9301      	str	r3, [sp, #4]
 800e4e8:	ab1c      	add	r3, sp, #112	; 0x70
 800e4ea:	9300      	str	r3, [sp, #0]
 800e4ec:	9702      	str	r7, [sp, #8]
 800e4ee:	ab1d      	add	r3, sp, #116	; 0x74
 800e4f0:	4a88      	ldr	r2, [pc, #544]	; (800e714 <_strtod_l+0x284>)
 800e4f2:	a91b      	add	r1, sp, #108	; 0x6c
 800e4f4:	4648      	mov	r0, r9
 800e4f6:	f001 fdbc 	bl	8010072 <__gethex>
 800e4fa:	f010 0407 	ands.w	r4, r0, #7
 800e4fe:	4606      	mov	r6, r0
 800e500:	d005      	beq.n	800e50e <_strtod_l+0x7e>
 800e502:	2c06      	cmp	r4, #6
 800e504:	d12b      	bne.n	800e55e <_strtod_l+0xce>
 800e506:	3501      	adds	r5, #1
 800e508:	2300      	movs	r3, #0
 800e50a:	951b      	str	r5, [sp, #108]	; 0x6c
 800e50c:	930d      	str	r3, [sp, #52]	; 0x34
 800e50e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e510:	2b00      	cmp	r3, #0
 800e512:	f040 859a 	bne.w	800f04a <_strtod_l+0xbba>
 800e516:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e518:	b1e3      	cbz	r3, 800e554 <_strtod_l+0xc4>
 800e51a:	4652      	mov	r2, sl
 800e51c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e520:	ec43 2b10 	vmov	d0, r2, r3
 800e524:	b021      	add	sp, #132	; 0x84
 800e526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e52a:	2a2b      	cmp	r2, #43	; 0x2b
 800e52c:	d015      	beq.n	800e55a <_strtod_l+0xca>
 800e52e:	2a2d      	cmp	r2, #45	; 0x2d
 800e530:	d004      	beq.n	800e53c <_strtod_l+0xac>
 800e532:	2a20      	cmp	r2, #32
 800e534:	d1ca      	bne.n	800e4cc <_strtod_l+0x3c>
 800e536:	3301      	adds	r3, #1
 800e538:	931b      	str	r3, [sp, #108]	; 0x6c
 800e53a:	e7bf      	b.n	800e4bc <_strtod_l+0x2c>
 800e53c:	2201      	movs	r2, #1
 800e53e:	920d      	str	r2, [sp, #52]	; 0x34
 800e540:	1c5a      	adds	r2, r3, #1
 800e542:	921b      	str	r2, [sp, #108]	; 0x6c
 800e544:	785b      	ldrb	r3, [r3, #1]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d1c2      	bne.n	800e4d0 <_strtod_l+0x40>
 800e54a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e54c:	961b      	str	r6, [sp, #108]	; 0x6c
 800e54e:	2b00      	cmp	r3, #0
 800e550:	f040 8579 	bne.w	800f046 <_strtod_l+0xbb6>
 800e554:	4652      	mov	r2, sl
 800e556:	465b      	mov	r3, fp
 800e558:	e7e2      	b.n	800e520 <_strtod_l+0x90>
 800e55a:	2200      	movs	r2, #0
 800e55c:	e7ef      	b.n	800e53e <_strtod_l+0xae>
 800e55e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800e560:	b13a      	cbz	r2, 800e572 <_strtod_l+0xe2>
 800e562:	2135      	movs	r1, #53	; 0x35
 800e564:	a81e      	add	r0, sp, #120	; 0x78
 800e566:	f002 fc47 	bl	8010df8 <__copybits>
 800e56a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800e56c:	4648      	mov	r0, r9
 800e56e:	f002 f8b3 	bl	80106d8 <_Bfree>
 800e572:	3c01      	subs	r4, #1
 800e574:	2c04      	cmp	r4, #4
 800e576:	d806      	bhi.n	800e586 <_strtod_l+0xf6>
 800e578:	e8df f004 	tbb	[pc, r4]
 800e57c:	1714030a 	.word	0x1714030a
 800e580:	0a          	.byte	0x0a
 800e581:	00          	.byte	0x00
 800e582:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800e586:	0730      	lsls	r0, r6, #28
 800e588:	d5c1      	bpl.n	800e50e <_strtod_l+0x7e>
 800e58a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800e58e:	e7be      	b.n	800e50e <_strtod_l+0x7e>
 800e590:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800e594:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800e596:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e59a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e59e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e5a2:	e7f0      	b.n	800e586 <_strtod_l+0xf6>
 800e5a4:	f8df b170 	ldr.w	fp, [pc, #368]	; 800e718 <_strtod_l+0x288>
 800e5a8:	e7ed      	b.n	800e586 <_strtod_l+0xf6>
 800e5aa:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800e5ae:	f04f 3aff 	mov.w	sl, #4294967295
 800e5b2:	e7e8      	b.n	800e586 <_strtod_l+0xf6>
 800e5b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e5b6:	1c5a      	adds	r2, r3, #1
 800e5b8:	921b      	str	r2, [sp, #108]	; 0x6c
 800e5ba:	785b      	ldrb	r3, [r3, #1]
 800e5bc:	2b30      	cmp	r3, #48	; 0x30
 800e5be:	d0f9      	beq.n	800e5b4 <_strtod_l+0x124>
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d0a4      	beq.n	800e50e <_strtod_l+0x7e>
 800e5c4:	2301      	movs	r3, #1
 800e5c6:	2500      	movs	r5, #0
 800e5c8:	9306      	str	r3, [sp, #24]
 800e5ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e5cc:	9308      	str	r3, [sp, #32]
 800e5ce:	9507      	str	r5, [sp, #28]
 800e5d0:	9505      	str	r5, [sp, #20]
 800e5d2:	220a      	movs	r2, #10
 800e5d4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800e5d6:	7807      	ldrb	r7, [r0, #0]
 800e5d8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800e5dc:	b2d9      	uxtb	r1, r3
 800e5de:	2909      	cmp	r1, #9
 800e5e0:	d929      	bls.n	800e636 <_strtod_l+0x1a6>
 800e5e2:	4622      	mov	r2, r4
 800e5e4:	f8d8 1000 	ldr.w	r1, [r8]
 800e5e8:	f002 ff25 	bl	8011436 <strncmp>
 800e5ec:	2800      	cmp	r0, #0
 800e5ee:	d031      	beq.n	800e654 <_strtod_l+0x1c4>
 800e5f0:	2000      	movs	r0, #0
 800e5f2:	9c05      	ldr	r4, [sp, #20]
 800e5f4:	9004      	str	r0, [sp, #16]
 800e5f6:	463b      	mov	r3, r7
 800e5f8:	4602      	mov	r2, r0
 800e5fa:	2b65      	cmp	r3, #101	; 0x65
 800e5fc:	d001      	beq.n	800e602 <_strtod_l+0x172>
 800e5fe:	2b45      	cmp	r3, #69	; 0x45
 800e600:	d114      	bne.n	800e62c <_strtod_l+0x19c>
 800e602:	b924      	cbnz	r4, 800e60e <_strtod_l+0x17e>
 800e604:	b910      	cbnz	r0, 800e60c <_strtod_l+0x17c>
 800e606:	9b06      	ldr	r3, [sp, #24]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d09e      	beq.n	800e54a <_strtod_l+0xba>
 800e60c:	2400      	movs	r4, #0
 800e60e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800e610:	1c73      	adds	r3, r6, #1
 800e612:	931b      	str	r3, [sp, #108]	; 0x6c
 800e614:	7873      	ldrb	r3, [r6, #1]
 800e616:	2b2b      	cmp	r3, #43	; 0x2b
 800e618:	d078      	beq.n	800e70c <_strtod_l+0x27c>
 800e61a:	2b2d      	cmp	r3, #45	; 0x2d
 800e61c:	d070      	beq.n	800e700 <_strtod_l+0x270>
 800e61e:	f04f 0c00 	mov.w	ip, #0
 800e622:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800e626:	2f09      	cmp	r7, #9
 800e628:	d97c      	bls.n	800e724 <_strtod_l+0x294>
 800e62a:	961b      	str	r6, [sp, #108]	; 0x6c
 800e62c:	f04f 0e00 	mov.w	lr, #0
 800e630:	e09a      	b.n	800e768 <_strtod_l+0x2d8>
 800e632:	2300      	movs	r3, #0
 800e634:	e7c7      	b.n	800e5c6 <_strtod_l+0x136>
 800e636:	9905      	ldr	r1, [sp, #20]
 800e638:	2908      	cmp	r1, #8
 800e63a:	bfdd      	ittte	le
 800e63c:	9907      	ldrle	r1, [sp, #28]
 800e63e:	fb02 3301 	mlale	r3, r2, r1, r3
 800e642:	9307      	strle	r3, [sp, #28]
 800e644:	fb02 3505 	mlagt	r5, r2, r5, r3
 800e648:	9b05      	ldr	r3, [sp, #20]
 800e64a:	3001      	adds	r0, #1
 800e64c:	3301      	adds	r3, #1
 800e64e:	9305      	str	r3, [sp, #20]
 800e650:	901b      	str	r0, [sp, #108]	; 0x6c
 800e652:	e7bf      	b.n	800e5d4 <_strtod_l+0x144>
 800e654:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e656:	191a      	adds	r2, r3, r4
 800e658:	921b      	str	r2, [sp, #108]	; 0x6c
 800e65a:	9a05      	ldr	r2, [sp, #20]
 800e65c:	5d1b      	ldrb	r3, [r3, r4]
 800e65e:	2a00      	cmp	r2, #0
 800e660:	d037      	beq.n	800e6d2 <_strtod_l+0x242>
 800e662:	9c05      	ldr	r4, [sp, #20]
 800e664:	4602      	mov	r2, r0
 800e666:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800e66a:	2909      	cmp	r1, #9
 800e66c:	d913      	bls.n	800e696 <_strtod_l+0x206>
 800e66e:	2101      	movs	r1, #1
 800e670:	9104      	str	r1, [sp, #16]
 800e672:	e7c2      	b.n	800e5fa <_strtod_l+0x16a>
 800e674:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e676:	1c5a      	adds	r2, r3, #1
 800e678:	921b      	str	r2, [sp, #108]	; 0x6c
 800e67a:	785b      	ldrb	r3, [r3, #1]
 800e67c:	3001      	adds	r0, #1
 800e67e:	2b30      	cmp	r3, #48	; 0x30
 800e680:	d0f8      	beq.n	800e674 <_strtod_l+0x1e4>
 800e682:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800e686:	2a08      	cmp	r2, #8
 800e688:	f200 84e4 	bhi.w	800f054 <_strtod_l+0xbc4>
 800e68c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800e68e:	9208      	str	r2, [sp, #32]
 800e690:	4602      	mov	r2, r0
 800e692:	2000      	movs	r0, #0
 800e694:	4604      	mov	r4, r0
 800e696:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800e69a:	f100 0101 	add.w	r1, r0, #1
 800e69e:	d012      	beq.n	800e6c6 <_strtod_l+0x236>
 800e6a0:	440a      	add	r2, r1
 800e6a2:	eb00 0c04 	add.w	ip, r0, r4
 800e6a6:	4621      	mov	r1, r4
 800e6a8:	270a      	movs	r7, #10
 800e6aa:	458c      	cmp	ip, r1
 800e6ac:	d113      	bne.n	800e6d6 <_strtod_l+0x246>
 800e6ae:	1821      	adds	r1, r4, r0
 800e6b0:	2908      	cmp	r1, #8
 800e6b2:	f104 0401 	add.w	r4, r4, #1
 800e6b6:	4404      	add	r4, r0
 800e6b8:	dc19      	bgt.n	800e6ee <_strtod_l+0x25e>
 800e6ba:	9b07      	ldr	r3, [sp, #28]
 800e6bc:	210a      	movs	r1, #10
 800e6be:	fb01 e303 	mla	r3, r1, r3, lr
 800e6c2:	9307      	str	r3, [sp, #28]
 800e6c4:	2100      	movs	r1, #0
 800e6c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e6c8:	1c58      	adds	r0, r3, #1
 800e6ca:	901b      	str	r0, [sp, #108]	; 0x6c
 800e6cc:	785b      	ldrb	r3, [r3, #1]
 800e6ce:	4608      	mov	r0, r1
 800e6d0:	e7c9      	b.n	800e666 <_strtod_l+0x1d6>
 800e6d2:	9805      	ldr	r0, [sp, #20]
 800e6d4:	e7d3      	b.n	800e67e <_strtod_l+0x1ee>
 800e6d6:	2908      	cmp	r1, #8
 800e6d8:	f101 0101 	add.w	r1, r1, #1
 800e6dc:	dc03      	bgt.n	800e6e6 <_strtod_l+0x256>
 800e6de:	9b07      	ldr	r3, [sp, #28]
 800e6e0:	437b      	muls	r3, r7
 800e6e2:	9307      	str	r3, [sp, #28]
 800e6e4:	e7e1      	b.n	800e6aa <_strtod_l+0x21a>
 800e6e6:	2910      	cmp	r1, #16
 800e6e8:	bfd8      	it	le
 800e6ea:	437d      	mulle	r5, r7
 800e6ec:	e7dd      	b.n	800e6aa <_strtod_l+0x21a>
 800e6ee:	2c10      	cmp	r4, #16
 800e6f0:	bfdc      	itt	le
 800e6f2:	210a      	movle	r1, #10
 800e6f4:	fb01 e505 	mlale	r5, r1, r5, lr
 800e6f8:	e7e4      	b.n	800e6c4 <_strtod_l+0x234>
 800e6fa:	2301      	movs	r3, #1
 800e6fc:	9304      	str	r3, [sp, #16]
 800e6fe:	e781      	b.n	800e604 <_strtod_l+0x174>
 800e700:	f04f 0c01 	mov.w	ip, #1
 800e704:	1cb3      	adds	r3, r6, #2
 800e706:	931b      	str	r3, [sp, #108]	; 0x6c
 800e708:	78b3      	ldrb	r3, [r6, #2]
 800e70a:	e78a      	b.n	800e622 <_strtod_l+0x192>
 800e70c:	f04f 0c00 	mov.w	ip, #0
 800e710:	e7f8      	b.n	800e704 <_strtod_l+0x274>
 800e712:	bf00      	nop
 800e714:	08011b20 	.word	0x08011b20
 800e718:	7ff00000 	.word	0x7ff00000
 800e71c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e71e:	1c5f      	adds	r7, r3, #1
 800e720:	971b      	str	r7, [sp, #108]	; 0x6c
 800e722:	785b      	ldrb	r3, [r3, #1]
 800e724:	2b30      	cmp	r3, #48	; 0x30
 800e726:	d0f9      	beq.n	800e71c <_strtod_l+0x28c>
 800e728:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800e72c:	2f08      	cmp	r7, #8
 800e72e:	f63f af7d 	bhi.w	800e62c <_strtod_l+0x19c>
 800e732:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800e736:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e738:	930a      	str	r3, [sp, #40]	; 0x28
 800e73a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e73c:	1c5f      	adds	r7, r3, #1
 800e73e:	971b      	str	r7, [sp, #108]	; 0x6c
 800e740:	785b      	ldrb	r3, [r3, #1]
 800e742:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800e746:	f1b8 0f09 	cmp.w	r8, #9
 800e74a:	d937      	bls.n	800e7bc <_strtod_l+0x32c>
 800e74c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e74e:	1a7f      	subs	r7, r7, r1
 800e750:	2f08      	cmp	r7, #8
 800e752:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800e756:	dc37      	bgt.n	800e7c8 <_strtod_l+0x338>
 800e758:	45be      	cmp	lr, r7
 800e75a:	bfa8      	it	ge
 800e75c:	46be      	movge	lr, r7
 800e75e:	f1bc 0f00 	cmp.w	ip, #0
 800e762:	d001      	beq.n	800e768 <_strtod_l+0x2d8>
 800e764:	f1ce 0e00 	rsb	lr, lr, #0
 800e768:	2c00      	cmp	r4, #0
 800e76a:	d151      	bne.n	800e810 <_strtod_l+0x380>
 800e76c:	2800      	cmp	r0, #0
 800e76e:	f47f aece 	bne.w	800e50e <_strtod_l+0x7e>
 800e772:	9a06      	ldr	r2, [sp, #24]
 800e774:	2a00      	cmp	r2, #0
 800e776:	f47f aeca 	bne.w	800e50e <_strtod_l+0x7e>
 800e77a:	9a04      	ldr	r2, [sp, #16]
 800e77c:	2a00      	cmp	r2, #0
 800e77e:	f47f aee4 	bne.w	800e54a <_strtod_l+0xba>
 800e782:	2b4e      	cmp	r3, #78	; 0x4e
 800e784:	d027      	beq.n	800e7d6 <_strtod_l+0x346>
 800e786:	dc21      	bgt.n	800e7cc <_strtod_l+0x33c>
 800e788:	2b49      	cmp	r3, #73	; 0x49
 800e78a:	f47f aede 	bne.w	800e54a <_strtod_l+0xba>
 800e78e:	49a0      	ldr	r1, [pc, #640]	; (800ea10 <_strtod_l+0x580>)
 800e790:	a81b      	add	r0, sp, #108	; 0x6c
 800e792:	f001 fea1 	bl	80104d8 <__match>
 800e796:	2800      	cmp	r0, #0
 800e798:	f43f aed7 	beq.w	800e54a <_strtod_l+0xba>
 800e79c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e79e:	499d      	ldr	r1, [pc, #628]	; (800ea14 <_strtod_l+0x584>)
 800e7a0:	3b01      	subs	r3, #1
 800e7a2:	a81b      	add	r0, sp, #108	; 0x6c
 800e7a4:	931b      	str	r3, [sp, #108]	; 0x6c
 800e7a6:	f001 fe97 	bl	80104d8 <__match>
 800e7aa:	b910      	cbnz	r0, 800e7b2 <_strtod_l+0x322>
 800e7ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e7ae:	3301      	adds	r3, #1
 800e7b0:	931b      	str	r3, [sp, #108]	; 0x6c
 800e7b2:	f8df b274 	ldr.w	fp, [pc, #628]	; 800ea28 <_strtod_l+0x598>
 800e7b6:	f04f 0a00 	mov.w	sl, #0
 800e7ba:	e6a8      	b.n	800e50e <_strtod_l+0x7e>
 800e7bc:	210a      	movs	r1, #10
 800e7be:	fb01 3e0e 	mla	lr, r1, lr, r3
 800e7c2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800e7c6:	e7b8      	b.n	800e73a <_strtod_l+0x2aa>
 800e7c8:	46be      	mov	lr, r7
 800e7ca:	e7c8      	b.n	800e75e <_strtod_l+0x2ce>
 800e7cc:	2b69      	cmp	r3, #105	; 0x69
 800e7ce:	d0de      	beq.n	800e78e <_strtod_l+0x2fe>
 800e7d0:	2b6e      	cmp	r3, #110	; 0x6e
 800e7d2:	f47f aeba 	bne.w	800e54a <_strtod_l+0xba>
 800e7d6:	4990      	ldr	r1, [pc, #576]	; (800ea18 <_strtod_l+0x588>)
 800e7d8:	a81b      	add	r0, sp, #108	; 0x6c
 800e7da:	f001 fe7d 	bl	80104d8 <__match>
 800e7de:	2800      	cmp	r0, #0
 800e7e0:	f43f aeb3 	beq.w	800e54a <_strtod_l+0xba>
 800e7e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e7e6:	781b      	ldrb	r3, [r3, #0]
 800e7e8:	2b28      	cmp	r3, #40	; 0x28
 800e7ea:	d10e      	bne.n	800e80a <_strtod_l+0x37a>
 800e7ec:	aa1e      	add	r2, sp, #120	; 0x78
 800e7ee:	498b      	ldr	r1, [pc, #556]	; (800ea1c <_strtod_l+0x58c>)
 800e7f0:	a81b      	add	r0, sp, #108	; 0x6c
 800e7f2:	f001 fe85 	bl	8010500 <__hexnan>
 800e7f6:	2805      	cmp	r0, #5
 800e7f8:	d107      	bne.n	800e80a <_strtod_l+0x37a>
 800e7fa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e7fc:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800e800:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800e804:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800e808:	e681      	b.n	800e50e <_strtod_l+0x7e>
 800e80a:	f8df b224 	ldr.w	fp, [pc, #548]	; 800ea30 <_strtod_l+0x5a0>
 800e80e:	e7d2      	b.n	800e7b6 <_strtod_l+0x326>
 800e810:	ebae 0302 	sub.w	r3, lr, r2
 800e814:	9306      	str	r3, [sp, #24]
 800e816:	9b05      	ldr	r3, [sp, #20]
 800e818:	9807      	ldr	r0, [sp, #28]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	bf08      	it	eq
 800e81e:	4623      	moveq	r3, r4
 800e820:	2c10      	cmp	r4, #16
 800e822:	9305      	str	r3, [sp, #20]
 800e824:	46a0      	mov	r8, r4
 800e826:	bfa8      	it	ge
 800e828:	f04f 0810 	movge.w	r8, #16
 800e82c:	f7f1 fe6a 	bl	8000504 <__aeabi_ui2d>
 800e830:	2c09      	cmp	r4, #9
 800e832:	4682      	mov	sl, r0
 800e834:	468b      	mov	fp, r1
 800e836:	dc13      	bgt.n	800e860 <_strtod_l+0x3d0>
 800e838:	9b06      	ldr	r3, [sp, #24]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	f43f ae67 	beq.w	800e50e <_strtod_l+0x7e>
 800e840:	9b06      	ldr	r3, [sp, #24]
 800e842:	dd7a      	ble.n	800e93a <_strtod_l+0x4aa>
 800e844:	2b16      	cmp	r3, #22
 800e846:	dc61      	bgt.n	800e90c <_strtod_l+0x47c>
 800e848:	4a75      	ldr	r2, [pc, #468]	; (800ea20 <_strtod_l+0x590>)
 800e84a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800e84e:	e9de 0100 	ldrd	r0, r1, [lr]
 800e852:	4652      	mov	r2, sl
 800e854:	465b      	mov	r3, fp
 800e856:	f7f1 fecf 	bl	80005f8 <__aeabi_dmul>
 800e85a:	4682      	mov	sl, r0
 800e85c:	468b      	mov	fp, r1
 800e85e:	e656      	b.n	800e50e <_strtod_l+0x7e>
 800e860:	4b6f      	ldr	r3, [pc, #444]	; (800ea20 <_strtod_l+0x590>)
 800e862:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800e866:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800e86a:	f7f1 fec5 	bl	80005f8 <__aeabi_dmul>
 800e86e:	4606      	mov	r6, r0
 800e870:	4628      	mov	r0, r5
 800e872:	460f      	mov	r7, r1
 800e874:	f7f1 fe46 	bl	8000504 <__aeabi_ui2d>
 800e878:	4602      	mov	r2, r0
 800e87a:	460b      	mov	r3, r1
 800e87c:	4630      	mov	r0, r6
 800e87e:	4639      	mov	r1, r7
 800e880:	f7f1 fd04 	bl	800028c <__adddf3>
 800e884:	2c0f      	cmp	r4, #15
 800e886:	4682      	mov	sl, r0
 800e888:	468b      	mov	fp, r1
 800e88a:	ddd5      	ble.n	800e838 <_strtod_l+0x3a8>
 800e88c:	9b06      	ldr	r3, [sp, #24]
 800e88e:	eba4 0808 	sub.w	r8, r4, r8
 800e892:	4498      	add	r8, r3
 800e894:	f1b8 0f00 	cmp.w	r8, #0
 800e898:	f340 8096 	ble.w	800e9c8 <_strtod_l+0x538>
 800e89c:	f018 030f 	ands.w	r3, r8, #15
 800e8a0:	d00a      	beq.n	800e8b8 <_strtod_l+0x428>
 800e8a2:	495f      	ldr	r1, [pc, #380]	; (800ea20 <_strtod_l+0x590>)
 800e8a4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e8a8:	4652      	mov	r2, sl
 800e8aa:	465b      	mov	r3, fp
 800e8ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e8b0:	f7f1 fea2 	bl	80005f8 <__aeabi_dmul>
 800e8b4:	4682      	mov	sl, r0
 800e8b6:	468b      	mov	fp, r1
 800e8b8:	f038 080f 	bics.w	r8, r8, #15
 800e8bc:	d073      	beq.n	800e9a6 <_strtod_l+0x516>
 800e8be:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800e8c2:	dd47      	ble.n	800e954 <_strtod_l+0x4c4>
 800e8c4:	2400      	movs	r4, #0
 800e8c6:	46a0      	mov	r8, r4
 800e8c8:	9407      	str	r4, [sp, #28]
 800e8ca:	9405      	str	r4, [sp, #20]
 800e8cc:	2322      	movs	r3, #34	; 0x22
 800e8ce:	f8df b158 	ldr.w	fp, [pc, #344]	; 800ea28 <_strtod_l+0x598>
 800e8d2:	f8c9 3000 	str.w	r3, [r9]
 800e8d6:	f04f 0a00 	mov.w	sl, #0
 800e8da:	9b07      	ldr	r3, [sp, #28]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	f43f ae16 	beq.w	800e50e <_strtod_l+0x7e>
 800e8e2:	991c      	ldr	r1, [sp, #112]	; 0x70
 800e8e4:	4648      	mov	r0, r9
 800e8e6:	f001 fef7 	bl	80106d8 <_Bfree>
 800e8ea:	9905      	ldr	r1, [sp, #20]
 800e8ec:	4648      	mov	r0, r9
 800e8ee:	f001 fef3 	bl	80106d8 <_Bfree>
 800e8f2:	4641      	mov	r1, r8
 800e8f4:	4648      	mov	r0, r9
 800e8f6:	f001 feef 	bl	80106d8 <_Bfree>
 800e8fa:	9907      	ldr	r1, [sp, #28]
 800e8fc:	4648      	mov	r0, r9
 800e8fe:	f001 feeb 	bl	80106d8 <_Bfree>
 800e902:	4621      	mov	r1, r4
 800e904:	4648      	mov	r0, r9
 800e906:	f001 fee7 	bl	80106d8 <_Bfree>
 800e90a:	e600      	b.n	800e50e <_strtod_l+0x7e>
 800e90c:	9a06      	ldr	r2, [sp, #24]
 800e90e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800e912:	4293      	cmp	r3, r2
 800e914:	dbba      	blt.n	800e88c <_strtod_l+0x3fc>
 800e916:	4d42      	ldr	r5, [pc, #264]	; (800ea20 <_strtod_l+0x590>)
 800e918:	f1c4 040f 	rsb	r4, r4, #15
 800e91c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800e920:	4652      	mov	r2, sl
 800e922:	465b      	mov	r3, fp
 800e924:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e928:	f7f1 fe66 	bl	80005f8 <__aeabi_dmul>
 800e92c:	9b06      	ldr	r3, [sp, #24]
 800e92e:	1b1c      	subs	r4, r3, r4
 800e930:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800e934:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e938:	e78d      	b.n	800e856 <_strtod_l+0x3c6>
 800e93a:	f113 0f16 	cmn.w	r3, #22
 800e93e:	dba5      	blt.n	800e88c <_strtod_l+0x3fc>
 800e940:	4a37      	ldr	r2, [pc, #220]	; (800ea20 <_strtod_l+0x590>)
 800e942:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800e946:	e9d2 2300 	ldrd	r2, r3, [r2]
 800e94a:	4650      	mov	r0, sl
 800e94c:	4659      	mov	r1, fp
 800e94e:	f7f1 ff7d 	bl	800084c <__aeabi_ddiv>
 800e952:	e782      	b.n	800e85a <_strtod_l+0x3ca>
 800e954:	2300      	movs	r3, #0
 800e956:	4e33      	ldr	r6, [pc, #204]	; (800ea24 <_strtod_l+0x594>)
 800e958:	ea4f 1828 	mov.w	r8, r8, asr #4
 800e95c:	4650      	mov	r0, sl
 800e95e:	4659      	mov	r1, fp
 800e960:	461d      	mov	r5, r3
 800e962:	f1b8 0f01 	cmp.w	r8, #1
 800e966:	dc21      	bgt.n	800e9ac <_strtod_l+0x51c>
 800e968:	b10b      	cbz	r3, 800e96e <_strtod_l+0x4de>
 800e96a:	4682      	mov	sl, r0
 800e96c:	468b      	mov	fp, r1
 800e96e:	4b2d      	ldr	r3, [pc, #180]	; (800ea24 <_strtod_l+0x594>)
 800e970:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800e974:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800e978:	4652      	mov	r2, sl
 800e97a:	465b      	mov	r3, fp
 800e97c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e980:	f7f1 fe3a 	bl	80005f8 <__aeabi_dmul>
 800e984:	4b28      	ldr	r3, [pc, #160]	; (800ea28 <_strtod_l+0x598>)
 800e986:	460a      	mov	r2, r1
 800e988:	400b      	ands	r3, r1
 800e98a:	4928      	ldr	r1, [pc, #160]	; (800ea2c <_strtod_l+0x59c>)
 800e98c:	428b      	cmp	r3, r1
 800e98e:	4682      	mov	sl, r0
 800e990:	d898      	bhi.n	800e8c4 <_strtod_l+0x434>
 800e992:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e996:	428b      	cmp	r3, r1
 800e998:	bf86      	itte	hi
 800e99a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800ea34 <_strtod_l+0x5a4>
 800e99e:	f04f 3aff 	movhi.w	sl, #4294967295
 800e9a2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	9304      	str	r3, [sp, #16]
 800e9aa:	e077      	b.n	800ea9c <_strtod_l+0x60c>
 800e9ac:	f018 0f01 	tst.w	r8, #1
 800e9b0:	d006      	beq.n	800e9c0 <_strtod_l+0x530>
 800e9b2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800e9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9ba:	f7f1 fe1d 	bl	80005f8 <__aeabi_dmul>
 800e9be:	2301      	movs	r3, #1
 800e9c0:	3501      	adds	r5, #1
 800e9c2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e9c6:	e7cc      	b.n	800e962 <_strtod_l+0x4d2>
 800e9c8:	d0ed      	beq.n	800e9a6 <_strtod_l+0x516>
 800e9ca:	f1c8 0800 	rsb	r8, r8, #0
 800e9ce:	f018 020f 	ands.w	r2, r8, #15
 800e9d2:	d00a      	beq.n	800e9ea <_strtod_l+0x55a>
 800e9d4:	4b12      	ldr	r3, [pc, #72]	; (800ea20 <_strtod_l+0x590>)
 800e9d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e9da:	4650      	mov	r0, sl
 800e9dc:	4659      	mov	r1, fp
 800e9de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9e2:	f7f1 ff33 	bl	800084c <__aeabi_ddiv>
 800e9e6:	4682      	mov	sl, r0
 800e9e8:	468b      	mov	fp, r1
 800e9ea:	ea5f 1828 	movs.w	r8, r8, asr #4
 800e9ee:	d0da      	beq.n	800e9a6 <_strtod_l+0x516>
 800e9f0:	f1b8 0f1f 	cmp.w	r8, #31
 800e9f4:	dd20      	ble.n	800ea38 <_strtod_l+0x5a8>
 800e9f6:	2400      	movs	r4, #0
 800e9f8:	46a0      	mov	r8, r4
 800e9fa:	9407      	str	r4, [sp, #28]
 800e9fc:	9405      	str	r4, [sp, #20]
 800e9fe:	2322      	movs	r3, #34	; 0x22
 800ea00:	f04f 0a00 	mov.w	sl, #0
 800ea04:	f04f 0b00 	mov.w	fp, #0
 800ea08:	f8c9 3000 	str.w	r3, [r9]
 800ea0c:	e765      	b.n	800e8da <_strtod_l+0x44a>
 800ea0e:	bf00      	nop
 800ea10:	08011ae9 	.word	0x08011ae9
 800ea14:	08011b73 	.word	0x08011b73
 800ea18:	08011af1 	.word	0x08011af1
 800ea1c:	08011b34 	.word	0x08011b34
 800ea20:	08011c18 	.word	0x08011c18
 800ea24:	08011bf0 	.word	0x08011bf0
 800ea28:	7ff00000 	.word	0x7ff00000
 800ea2c:	7ca00000 	.word	0x7ca00000
 800ea30:	fff80000 	.word	0xfff80000
 800ea34:	7fefffff 	.word	0x7fefffff
 800ea38:	f018 0310 	ands.w	r3, r8, #16
 800ea3c:	bf18      	it	ne
 800ea3e:	236a      	movne	r3, #106	; 0x6a
 800ea40:	4da0      	ldr	r5, [pc, #640]	; (800ecc4 <_strtod_l+0x834>)
 800ea42:	9304      	str	r3, [sp, #16]
 800ea44:	4650      	mov	r0, sl
 800ea46:	4659      	mov	r1, fp
 800ea48:	2300      	movs	r3, #0
 800ea4a:	f1b8 0f00 	cmp.w	r8, #0
 800ea4e:	f300 810a 	bgt.w	800ec66 <_strtod_l+0x7d6>
 800ea52:	b10b      	cbz	r3, 800ea58 <_strtod_l+0x5c8>
 800ea54:	4682      	mov	sl, r0
 800ea56:	468b      	mov	fp, r1
 800ea58:	9b04      	ldr	r3, [sp, #16]
 800ea5a:	b1bb      	cbz	r3, 800ea8c <_strtod_l+0x5fc>
 800ea5c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800ea60:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	4659      	mov	r1, fp
 800ea68:	dd10      	ble.n	800ea8c <_strtod_l+0x5fc>
 800ea6a:	2b1f      	cmp	r3, #31
 800ea6c:	f340 8107 	ble.w	800ec7e <_strtod_l+0x7ee>
 800ea70:	2b34      	cmp	r3, #52	; 0x34
 800ea72:	bfde      	ittt	le
 800ea74:	3b20      	suble	r3, #32
 800ea76:	f04f 32ff 	movle.w	r2, #4294967295
 800ea7a:	fa02 f303 	lslle.w	r3, r2, r3
 800ea7e:	f04f 0a00 	mov.w	sl, #0
 800ea82:	bfcc      	ite	gt
 800ea84:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800ea88:	ea03 0b01 	andle.w	fp, r3, r1
 800ea8c:	2200      	movs	r2, #0
 800ea8e:	2300      	movs	r3, #0
 800ea90:	4650      	mov	r0, sl
 800ea92:	4659      	mov	r1, fp
 800ea94:	f7f2 f818 	bl	8000ac8 <__aeabi_dcmpeq>
 800ea98:	2800      	cmp	r0, #0
 800ea9a:	d1ac      	bne.n	800e9f6 <_strtod_l+0x566>
 800ea9c:	9b07      	ldr	r3, [sp, #28]
 800ea9e:	9300      	str	r3, [sp, #0]
 800eaa0:	9a05      	ldr	r2, [sp, #20]
 800eaa2:	9908      	ldr	r1, [sp, #32]
 800eaa4:	4623      	mov	r3, r4
 800eaa6:	4648      	mov	r0, r9
 800eaa8:	f001 fe68 	bl	801077c <__s2b>
 800eaac:	9007      	str	r0, [sp, #28]
 800eaae:	2800      	cmp	r0, #0
 800eab0:	f43f af08 	beq.w	800e8c4 <_strtod_l+0x434>
 800eab4:	9a06      	ldr	r2, [sp, #24]
 800eab6:	9b06      	ldr	r3, [sp, #24]
 800eab8:	2a00      	cmp	r2, #0
 800eaba:	f1c3 0300 	rsb	r3, r3, #0
 800eabe:	bfa8      	it	ge
 800eac0:	2300      	movge	r3, #0
 800eac2:	930e      	str	r3, [sp, #56]	; 0x38
 800eac4:	2400      	movs	r4, #0
 800eac6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800eaca:	9316      	str	r3, [sp, #88]	; 0x58
 800eacc:	46a0      	mov	r8, r4
 800eace:	9b07      	ldr	r3, [sp, #28]
 800ead0:	4648      	mov	r0, r9
 800ead2:	6859      	ldr	r1, [r3, #4]
 800ead4:	f001 fdcc 	bl	8010670 <_Balloc>
 800ead8:	9005      	str	r0, [sp, #20]
 800eada:	2800      	cmp	r0, #0
 800eadc:	f43f aef6 	beq.w	800e8cc <_strtod_l+0x43c>
 800eae0:	9b07      	ldr	r3, [sp, #28]
 800eae2:	691a      	ldr	r2, [r3, #16]
 800eae4:	3202      	adds	r2, #2
 800eae6:	f103 010c 	add.w	r1, r3, #12
 800eaea:	0092      	lsls	r2, r2, #2
 800eaec:	300c      	adds	r0, #12
 800eaee:	f7fe fd6b 	bl	800d5c8 <memcpy>
 800eaf2:	aa1e      	add	r2, sp, #120	; 0x78
 800eaf4:	a91d      	add	r1, sp, #116	; 0x74
 800eaf6:	ec4b ab10 	vmov	d0, sl, fp
 800eafa:	4648      	mov	r0, r9
 800eafc:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800eb00:	f002 f8f8 	bl	8010cf4 <__d2b>
 800eb04:	901c      	str	r0, [sp, #112]	; 0x70
 800eb06:	2800      	cmp	r0, #0
 800eb08:	f43f aee0 	beq.w	800e8cc <_strtod_l+0x43c>
 800eb0c:	2101      	movs	r1, #1
 800eb0e:	4648      	mov	r0, r9
 800eb10:	f001 fec0 	bl	8010894 <__i2b>
 800eb14:	4680      	mov	r8, r0
 800eb16:	2800      	cmp	r0, #0
 800eb18:	f43f aed8 	beq.w	800e8cc <_strtod_l+0x43c>
 800eb1c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800eb1e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800eb20:	2e00      	cmp	r6, #0
 800eb22:	bfab      	itete	ge
 800eb24:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800eb26:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800eb28:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800eb2a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800eb2c:	bfac      	ite	ge
 800eb2e:	18f7      	addge	r7, r6, r3
 800eb30:	1b9d      	sublt	r5, r3, r6
 800eb32:	9b04      	ldr	r3, [sp, #16]
 800eb34:	1af6      	subs	r6, r6, r3
 800eb36:	4416      	add	r6, r2
 800eb38:	4b63      	ldr	r3, [pc, #396]	; (800ecc8 <_strtod_l+0x838>)
 800eb3a:	3e01      	subs	r6, #1
 800eb3c:	429e      	cmp	r6, r3
 800eb3e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800eb42:	f280 80af 	bge.w	800eca4 <_strtod_l+0x814>
 800eb46:	1b9b      	subs	r3, r3, r6
 800eb48:	2b1f      	cmp	r3, #31
 800eb4a:	eba2 0203 	sub.w	r2, r2, r3
 800eb4e:	f04f 0101 	mov.w	r1, #1
 800eb52:	f300 809b 	bgt.w	800ec8c <_strtod_l+0x7fc>
 800eb56:	fa01 f303 	lsl.w	r3, r1, r3
 800eb5a:	930f      	str	r3, [sp, #60]	; 0x3c
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	930a      	str	r3, [sp, #40]	; 0x28
 800eb60:	18be      	adds	r6, r7, r2
 800eb62:	9b04      	ldr	r3, [sp, #16]
 800eb64:	42b7      	cmp	r7, r6
 800eb66:	4415      	add	r5, r2
 800eb68:	441d      	add	r5, r3
 800eb6a:	463b      	mov	r3, r7
 800eb6c:	bfa8      	it	ge
 800eb6e:	4633      	movge	r3, r6
 800eb70:	42ab      	cmp	r3, r5
 800eb72:	bfa8      	it	ge
 800eb74:	462b      	movge	r3, r5
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	bfc2      	ittt	gt
 800eb7a:	1af6      	subgt	r6, r6, r3
 800eb7c:	1aed      	subgt	r5, r5, r3
 800eb7e:	1aff      	subgt	r7, r7, r3
 800eb80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eb82:	b1bb      	cbz	r3, 800ebb4 <_strtod_l+0x724>
 800eb84:	4641      	mov	r1, r8
 800eb86:	461a      	mov	r2, r3
 800eb88:	4648      	mov	r0, r9
 800eb8a:	f001 ff23 	bl	80109d4 <__pow5mult>
 800eb8e:	4680      	mov	r8, r0
 800eb90:	2800      	cmp	r0, #0
 800eb92:	f43f ae9b 	beq.w	800e8cc <_strtod_l+0x43c>
 800eb96:	4601      	mov	r1, r0
 800eb98:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800eb9a:	4648      	mov	r0, r9
 800eb9c:	f001 fe83 	bl	80108a6 <__multiply>
 800eba0:	900c      	str	r0, [sp, #48]	; 0x30
 800eba2:	2800      	cmp	r0, #0
 800eba4:	f43f ae92 	beq.w	800e8cc <_strtod_l+0x43c>
 800eba8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ebaa:	4648      	mov	r0, r9
 800ebac:	f001 fd94 	bl	80106d8 <_Bfree>
 800ebb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ebb2:	931c      	str	r3, [sp, #112]	; 0x70
 800ebb4:	2e00      	cmp	r6, #0
 800ebb6:	dc7a      	bgt.n	800ecae <_strtod_l+0x81e>
 800ebb8:	9b06      	ldr	r3, [sp, #24]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	dd08      	ble.n	800ebd0 <_strtod_l+0x740>
 800ebbe:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ebc0:	9905      	ldr	r1, [sp, #20]
 800ebc2:	4648      	mov	r0, r9
 800ebc4:	f001 ff06 	bl	80109d4 <__pow5mult>
 800ebc8:	9005      	str	r0, [sp, #20]
 800ebca:	2800      	cmp	r0, #0
 800ebcc:	f43f ae7e 	beq.w	800e8cc <_strtod_l+0x43c>
 800ebd0:	2d00      	cmp	r5, #0
 800ebd2:	dd08      	ble.n	800ebe6 <_strtod_l+0x756>
 800ebd4:	462a      	mov	r2, r5
 800ebd6:	9905      	ldr	r1, [sp, #20]
 800ebd8:	4648      	mov	r0, r9
 800ebda:	f001 ff49 	bl	8010a70 <__lshift>
 800ebde:	9005      	str	r0, [sp, #20]
 800ebe0:	2800      	cmp	r0, #0
 800ebe2:	f43f ae73 	beq.w	800e8cc <_strtod_l+0x43c>
 800ebe6:	2f00      	cmp	r7, #0
 800ebe8:	dd08      	ble.n	800ebfc <_strtod_l+0x76c>
 800ebea:	4641      	mov	r1, r8
 800ebec:	463a      	mov	r2, r7
 800ebee:	4648      	mov	r0, r9
 800ebf0:	f001 ff3e 	bl	8010a70 <__lshift>
 800ebf4:	4680      	mov	r8, r0
 800ebf6:	2800      	cmp	r0, #0
 800ebf8:	f43f ae68 	beq.w	800e8cc <_strtod_l+0x43c>
 800ebfc:	9a05      	ldr	r2, [sp, #20]
 800ebfe:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ec00:	4648      	mov	r0, r9
 800ec02:	f001 ffa3 	bl	8010b4c <__mdiff>
 800ec06:	4604      	mov	r4, r0
 800ec08:	2800      	cmp	r0, #0
 800ec0a:	f43f ae5f 	beq.w	800e8cc <_strtod_l+0x43c>
 800ec0e:	68c3      	ldr	r3, [r0, #12]
 800ec10:	930c      	str	r3, [sp, #48]	; 0x30
 800ec12:	2300      	movs	r3, #0
 800ec14:	60c3      	str	r3, [r0, #12]
 800ec16:	4641      	mov	r1, r8
 800ec18:	f001 ff7e 	bl	8010b18 <__mcmp>
 800ec1c:	2800      	cmp	r0, #0
 800ec1e:	da55      	bge.n	800eccc <_strtod_l+0x83c>
 800ec20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ec22:	b9e3      	cbnz	r3, 800ec5e <_strtod_l+0x7ce>
 800ec24:	f1ba 0f00 	cmp.w	sl, #0
 800ec28:	d119      	bne.n	800ec5e <_strtod_l+0x7ce>
 800ec2a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ec2e:	b9b3      	cbnz	r3, 800ec5e <_strtod_l+0x7ce>
 800ec30:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ec34:	0d1b      	lsrs	r3, r3, #20
 800ec36:	051b      	lsls	r3, r3, #20
 800ec38:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ec3c:	d90f      	bls.n	800ec5e <_strtod_l+0x7ce>
 800ec3e:	6963      	ldr	r3, [r4, #20]
 800ec40:	b913      	cbnz	r3, 800ec48 <_strtod_l+0x7b8>
 800ec42:	6923      	ldr	r3, [r4, #16]
 800ec44:	2b01      	cmp	r3, #1
 800ec46:	dd0a      	ble.n	800ec5e <_strtod_l+0x7ce>
 800ec48:	4621      	mov	r1, r4
 800ec4a:	2201      	movs	r2, #1
 800ec4c:	4648      	mov	r0, r9
 800ec4e:	f001 ff0f 	bl	8010a70 <__lshift>
 800ec52:	4641      	mov	r1, r8
 800ec54:	4604      	mov	r4, r0
 800ec56:	f001 ff5f 	bl	8010b18 <__mcmp>
 800ec5a:	2800      	cmp	r0, #0
 800ec5c:	dc67      	bgt.n	800ed2e <_strtod_l+0x89e>
 800ec5e:	9b04      	ldr	r3, [sp, #16]
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d171      	bne.n	800ed48 <_strtod_l+0x8b8>
 800ec64:	e63d      	b.n	800e8e2 <_strtod_l+0x452>
 800ec66:	f018 0f01 	tst.w	r8, #1
 800ec6a:	d004      	beq.n	800ec76 <_strtod_l+0x7e6>
 800ec6c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ec70:	f7f1 fcc2 	bl	80005f8 <__aeabi_dmul>
 800ec74:	2301      	movs	r3, #1
 800ec76:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ec7a:	3508      	adds	r5, #8
 800ec7c:	e6e5      	b.n	800ea4a <_strtod_l+0x5ba>
 800ec7e:	f04f 32ff 	mov.w	r2, #4294967295
 800ec82:	fa02 f303 	lsl.w	r3, r2, r3
 800ec86:	ea03 0a0a 	and.w	sl, r3, sl
 800ec8a:	e6ff      	b.n	800ea8c <_strtod_l+0x5fc>
 800ec8c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800ec90:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800ec94:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800ec98:	36e2      	adds	r6, #226	; 0xe2
 800ec9a:	fa01 f306 	lsl.w	r3, r1, r6
 800ec9e:	930a      	str	r3, [sp, #40]	; 0x28
 800eca0:	910f      	str	r1, [sp, #60]	; 0x3c
 800eca2:	e75d      	b.n	800eb60 <_strtod_l+0x6d0>
 800eca4:	2300      	movs	r3, #0
 800eca6:	930a      	str	r3, [sp, #40]	; 0x28
 800eca8:	2301      	movs	r3, #1
 800ecaa:	930f      	str	r3, [sp, #60]	; 0x3c
 800ecac:	e758      	b.n	800eb60 <_strtod_l+0x6d0>
 800ecae:	4632      	mov	r2, r6
 800ecb0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ecb2:	4648      	mov	r0, r9
 800ecb4:	f001 fedc 	bl	8010a70 <__lshift>
 800ecb8:	901c      	str	r0, [sp, #112]	; 0x70
 800ecba:	2800      	cmp	r0, #0
 800ecbc:	f47f af7c 	bne.w	800ebb8 <_strtod_l+0x728>
 800ecc0:	e604      	b.n	800e8cc <_strtod_l+0x43c>
 800ecc2:	bf00      	nop
 800ecc4:	08011b48 	.word	0x08011b48
 800ecc8:	fffffc02 	.word	0xfffffc02
 800eccc:	465d      	mov	r5, fp
 800ecce:	f040 8086 	bne.w	800edde <_strtod_l+0x94e>
 800ecd2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ecd4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ecd8:	b32a      	cbz	r2, 800ed26 <_strtod_l+0x896>
 800ecda:	4aaf      	ldr	r2, [pc, #700]	; (800ef98 <_strtod_l+0xb08>)
 800ecdc:	4293      	cmp	r3, r2
 800ecde:	d153      	bne.n	800ed88 <_strtod_l+0x8f8>
 800ece0:	9b04      	ldr	r3, [sp, #16]
 800ece2:	4650      	mov	r0, sl
 800ece4:	b1d3      	cbz	r3, 800ed1c <_strtod_l+0x88c>
 800ece6:	4aad      	ldr	r2, [pc, #692]	; (800ef9c <_strtod_l+0xb0c>)
 800ece8:	402a      	ands	r2, r5
 800ecea:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800ecee:	f04f 31ff 	mov.w	r1, #4294967295
 800ecf2:	d816      	bhi.n	800ed22 <_strtod_l+0x892>
 800ecf4:	0d12      	lsrs	r2, r2, #20
 800ecf6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ecfa:	fa01 f303 	lsl.w	r3, r1, r3
 800ecfe:	4298      	cmp	r0, r3
 800ed00:	d142      	bne.n	800ed88 <_strtod_l+0x8f8>
 800ed02:	4ba7      	ldr	r3, [pc, #668]	; (800efa0 <_strtod_l+0xb10>)
 800ed04:	429d      	cmp	r5, r3
 800ed06:	d102      	bne.n	800ed0e <_strtod_l+0x87e>
 800ed08:	3001      	adds	r0, #1
 800ed0a:	f43f addf 	beq.w	800e8cc <_strtod_l+0x43c>
 800ed0e:	4ba3      	ldr	r3, [pc, #652]	; (800ef9c <_strtod_l+0xb0c>)
 800ed10:	402b      	ands	r3, r5
 800ed12:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800ed16:	f04f 0a00 	mov.w	sl, #0
 800ed1a:	e7a0      	b.n	800ec5e <_strtod_l+0x7ce>
 800ed1c:	f04f 33ff 	mov.w	r3, #4294967295
 800ed20:	e7ed      	b.n	800ecfe <_strtod_l+0x86e>
 800ed22:	460b      	mov	r3, r1
 800ed24:	e7eb      	b.n	800ecfe <_strtod_l+0x86e>
 800ed26:	bb7b      	cbnz	r3, 800ed88 <_strtod_l+0x8f8>
 800ed28:	f1ba 0f00 	cmp.w	sl, #0
 800ed2c:	d12c      	bne.n	800ed88 <_strtod_l+0x8f8>
 800ed2e:	9904      	ldr	r1, [sp, #16]
 800ed30:	4a9a      	ldr	r2, [pc, #616]	; (800ef9c <_strtod_l+0xb0c>)
 800ed32:	465b      	mov	r3, fp
 800ed34:	b1f1      	cbz	r1, 800ed74 <_strtod_l+0x8e4>
 800ed36:	ea02 010b 	and.w	r1, r2, fp
 800ed3a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ed3e:	dc19      	bgt.n	800ed74 <_strtod_l+0x8e4>
 800ed40:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ed44:	f77f ae5b 	ble.w	800e9fe <_strtod_l+0x56e>
 800ed48:	4a96      	ldr	r2, [pc, #600]	; (800efa4 <_strtod_l+0xb14>)
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800ed50:	4650      	mov	r0, sl
 800ed52:	4659      	mov	r1, fp
 800ed54:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ed58:	f7f1 fc4e 	bl	80005f8 <__aeabi_dmul>
 800ed5c:	4682      	mov	sl, r0
 800ed5e:	468b      	mov	fp, r1
 800ed60:	2900      	cmp	r1, #0
 800ed62:	f47f adbe 	bne.w	800e8e2 <_strtod_l+0x452>
 800ed66:	2800      	cmp	r0, #0
 800ed68:	f47f adbb 	bne.w	800e8e2 <_strtod_l+0x452>
 800ed6c:	2322      	movs	r3, #34	; 0x22
 800ed6e:	f8c9 3000 	str.w	r3, [r9]
 800ed72:	e5b6      	b.n	800e8e2 <_strtod_l+0x452>
 800ed74:	4013      	ands	r3, r2
 800ed76:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ed7a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ed7e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ed82:	f04f 3aff 	mov.w	sl, #4294967295
 800ed86:	e76a      	b.n	800ec5e <_strtod_l+0x7ce>
 800ed88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed8a:	b193      	cbz	r3, 800edb2 <_strtod_l+0x922>
 800ed8c:	422b      	tst	r3, r5
 800ed8e:	f43f af66 	beq.w	800ec5e <_strtod_l+0x7ce>
 800ed92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ed94:	9a04      	ldr	r2, [sp, #16]
 800ed96:	4650      	mov	r0, sl
 800ed98:	4659      	mov	r1, fp
 800ed9a:	b173      	cbz	r3, 800edba <_strtod_l+0x92a>
 800ed9c:	f7ff fb5c 	bl	800e458 <sulp>
 800eda0:	4602      	mov	r2, r0
 800eda2:	460b      	mov	r3, r1
 800eda4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800eda8:	f7f1 fa70 	bl	800028c <__adddf3>
 800edac:	4682      	mov	sl, r0
 800edae:	468b      	mov	fp, r1
 800edb0:	e755      	b.n	800ec5e <_strtod_l+0x7ce>
 800edb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800edb4:	ea13 0f0a 	tst.w	r3, sl
 800edb8:	e7e9      	b.n	800ed8e <_strtod_l+0x8fe>
 800edba:	f7ff fb4d 	bl	800e458 <sulp>
 800edbe:	4602      	mov	r2, r0
 800edc0:	460b      	mov	r3, r1
 800edc2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800edc6:	f7f1 fa5f 	bl	8000288 <__aeabi_dsub>
 800edca:	2200      	movs	r2, #0
 800edcc:	2300      	movs	r3, #0
 800edce:	4682      	mov	sl, r0
 800edd0:	468b      	mov	fp, r1
 800edd2:	f7f1 fe79 	bl	8000ac8 <__aeabi_dcmpeq>
 800edd6:	2800      	cmp	r0, #0
 800edd8:	f47f ae11 	bne.w	800e9fe <_strtod_l+0x56e>
 800eddc:	e73f      	b.n	800ec5e <_strtod_l+0x7ce>
 800edde:	4641      	mov	r1, r8
 800ede0:	4620      	mov	r0, r4
 800ede2:	f001 ffd6 	bl	8010d92 <__ratio>
 800ede6:	ec57 6b10 	vmov	r6, r7, d0
 800edea:	2200      	movs	r2, #0
 800edec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800edf0:	ee10 0a10 	vmov	r0, s0
 800edf4:	4639      	mov	r1, r7
 800edf6:	f7f1 fe7b 	bl	8000af0 <__aeabi_dcmple>
 800edfa:	2800      	cmp	r0, #0
 800edfc:	d077      	beq.n	800eeee <_strtod_l+0xa5e>
 800edfe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d04a      	beq.n	800ee9a <_strtod_l+0xa0a>
 800ee04:	4b68      	ldr	r3, [pc, #416]	; (800efa8 <_strtod_l+0xb18>)
 800ee06:	2200      	movs	r2, #0
 800ee08:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800ee0c:	4f66      	ldr	r7, [pc, #408]	; (800efa8 <_strtod_l+0xb18>)
 800ee0e:	2600      	movs	r6, #0
 800ee10:	4b62      	ldr	r3, [pc, #392]	; (800ef9c <_strtod_l+0xb0c>)
 800ee12:	402b      	ands	r3, r5
 800ee14:	930f      	str	r3, [sp, #60]	; 0x3c
 800ee16:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ee18:	4b64      	ldr	r3, [pc, #400]	; (800efac <_strtod_l+0xb1c>)
 800ee1a:	429a      	cmp	r2, r3
 800ee1c:	f040 80ce 	bne.w	800efbc <_strtod_l+0xb2c>
 800ee20:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ee24:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ee28:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800ee2c:	ec4b ab10 	vmov	d0, sl, fp
 800ee30:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800ee34:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ee38:	f001 fee6 	bl	8010c08 <__ulp>
 800ee3c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ee40:	ec53 2b10 	vmov	r2, r3, d0
 800ee44:	f7f1 fbd8 	bl	80005f8 <__aeabi_dmul>
 800ee48:	4652      	mov	r2, sl
 800ee4a:	465b      	mov	r3, fp
 800ee4c:	f7f1 fa1e 	bl	800028c <__adddf3>
 800ee50:	460b      	mov	r3, r1
 800ee52:	4952      	ldr	r1, [pc, #328]	; (800ef9c <_strtod_l+0xb0c>)
 800ee54:	4a56      	ldr	r2, [pc, #344]	; (800efb0 <_strtod_l+0xb20>)
 800ee56:	4019      	ands	r1, r3
 800ee58:	4291      	cmp	r1, r2
 800ee5a:	4682      	mov	sl, r0
 800ee5c:	d95b      	bls.n	800ef16 <_strtod_l+0xa86>
 800ee5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee60:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800ee64:	4293      	cmp	r3, r2
 800ee66:	d103      	bne.n	800ee70 <_strtod_l+0x9e0>
 800ee68:	9b08      	ldr	r3, [sp, #32]
 800ee6a:	3301      	adds	r3, #1
 800ee6c:	f43f ad2e 	beq.w	800e8cc <_strtod_l+0x43c>
 800ee70:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800efa0 <_strtod_l+0xb10>
 800ee74:	f04f 3aff 	mov.w	sl, #4294967295
 800ee78:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ee7a:	4648      	mov	r0, r9
 800ee7c:	f001 fc2c 	bl	80106d8 <_Bfree>
 800ee80:	9905      	ldr	r1, [sp, #20]
 800ee82:	4648      	mov	r0, r9
 800ee84:	f001 fc28 	bl	80106d8 <_Bfree>
 800ee88:	4641      	mov	r1, r8
 800ee8a:	4648      	mov	r0, r9
 800ee8c:	f001 fc24 	bl	80106d8 <_Bfree>
 800ee90:	4621      	mov	r1, r4
 800ee92:	4648      	mov	r0, r9
 800ee94:	f001 fc20 	bl	80106d8 <_Bfree>
 800ee98:	e619      	b.n	800eace <_strtod_l+0x63e>
 800ee9a:	f1ba 0f00 	cmp.w	sl, #0
 800ee9e:	d11a      	bne.n	800eed6 <_strtod_l+0xa46>
 800eea0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800eea4:	b9eb      	cbnz	r3, 800eee2 <_strtod_l+0xa52>
 800eea6:	2200      	movs	r2, #0
 800eea8:	4b3f      	ldr	r3, [pc, #252]	; (800efa8 <_strtod_l+0xb18>)
 800eeaa:	4630      	mov	r0, r6
 800eeac:	4639      	mov	r1, r7
 800eeae:	f7f1 fe15 	bl	8000adc <__aeabi_dcmplt>
 800eeb2:	b9c8      	cbnz	r0, 800eee8 <_strtod_l+0xa58>
 800eeb4:	4630      	mov	r0, r6
 800eeb6:	4639      	mov	r1, r7
 800eeb8:	2200      	movs	r2, #0
 800eeba:	4b3e      	ldr	r3, [pc, #248]	; (800efb4 <_strtod_l+0xb24>)
 800eebc:	f7f1 fb9c 	bl	80005f8 <__aeabi_dmul>
 800eec0:	4606      	mov	r6, r0
 800eec2:	460f      	mov	r7, r1
 800eec4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800eec8:	9618      	str	r6, [sp, #96]	; 0x60
 800eeca:	9319      	str	r3, [sp, #100]	; 0x64
 800eecc:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800eed0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800eed4:	e79c      	b.n	800ee10 <_strtod_l+0x980>
 800eed6:	f1ba 0f01 	cmp.w	sl, #1
 800eeda:	d102      	bne.n	800eee2 <_strtod_l+0xa52>
 800eedc:	2d00      	cmp	r5, #0
 800eede:	f43f ad8e 	beq.w	800e9fe <_strtod_l+0x56e>
 800eee2:	2200      	movs	r2, #0
 800eee4:	4b34      	ldr	r3, [pc, #208]	; (800efb8 <_strtod_l+0xb28>)
 800eee6:	e78f      	b.n	800ee08 <_strtod_l+0x978>
 800eee8:	2600      	movs	r6, #0
 800eeea:	4f32      	ldr	r7, [pc, #200]	; (800efb4 <_strtod_l+0xb24>)
 800eeec:	e7ea      	b.n	800eec4 <_strtod_l+0xa34>
 800eeee:	4b31      	ldr	r3, [pc, #196]	; (800efb4 <_strtod_l+0xb24>)
 800eef0:	4630      	mov	r0, r6
 800eef2:	4639      	mov	r1, r7
 800eef4:	2200      	movs	r2, #0
 800eef6:	f7f1 fb7f 	bl	80005f8 <__aeabi_dmul>
 800eefa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eefc:	4606      	mov	r6, r0
 800eefe:	460f      	mov	r7, r1
 800ef00:	b933      	cbnz	r3, 800ef10 <_strtod_l+0xa80>
 800ef02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ef06:	9010      	str	r0, [sp, #64]	; 0x40
 800ef08:	9311      	str	r3, [sp, #68]	; 0x44
 800ef0a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ef0e:	e7df      	b.n	800eed0 <_strtod_l+0xa40>
 800ef10:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800ef14:	e7f9      	b.n	800ef0a <_strtod_l+0xa7a>
 800ef16:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800ef1a:	9b04      	ldr	r3, [sp, #16]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d1ab      	bne.n	800ee78 <_strtod_l+0x9e8>
 800ef20:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ef24:	0d1b      	lsrs	r3, r3, #20
 800ef26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ef28:	051b      	lsls	r3, r3, #20
 800ef2a:	429a      	cmp	r2, r3
 800ef2c:	465d      	mov	r5, fp
 800ef2e:	d1a3      	bne.n	800ee78 <_strtod_l+0x9e8>
 800ef30:	4639      	mov	r1, r7
 800ef32:	4630      	mov	r0, r6
 800ef34:	f7f1 fe10 	bl	8000b58 <__aeabi_d2iz>
 800ef38:	f7f1 faf4 	bl	8000524 <__aeabi_i2d>
 800ef3c:	460b      	mov	r3, r1
 800ef3e:	4602      	mov	r2, r0
 800ef40:	4639      	mov	r1, r7
 800ef42:	4630      	mov	r0, r6
 800ef44:	f7f1 f9a0 	bl	8000288 <__aeabi_dsub>
 800ef48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ef4a:	4606      	mov	r6, r0
 800ef4c:	460f      	mov	r7, r1
 800ef4e:	b933      	cbnz	r3, 800ef5e <_strtod_l+0xace>
 800ef50:	f1ba 0f00 	cmp.w	sl, #0
 800ef54:	d103      	bne.n	800ef5e <_strtod_l+0xace>
 800ef56:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800ef5a:	2d00      	cmp	r5, #0
 800ef5c:	d06d      	beq.n	800f03a <_strtod_l+0xbaa>
 800ef5e:	a30a      	add	r3, pc, #40	; (adr r3, 800ef88 <_strtod_l+0xaf8>)
 800ef60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef64:	4630      	mov	r0, r6
 800ef66:	4639      	mov	r1, r7
 800ef68:	f7f1 fdb8 	bl	8000adc <__aeabi_dcmplt>
 800ef6c:	2800      	cmp	r0, #0
 800ef6e:	f47f acb8 	bne.w	800e8e2 <_strtod_l+0x452>
 800ef72:	a307      	add	r3, pc, #28	; (adr r3, 800ef90 <_strtod_l+0xb00>)
 800ef74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef78:	4630      	mov	r0, r6
 800ef7a:	4639      	mov	r1, r7
 800ef7c:	f7f1 fdcc 	bl	8000b18 <__aeabi_dcmpgt>
 800ef80:	2800      	cmp	r0, #0
 800ef82:	f43f af79 	beq.w	800ee78 <_strtod_l+0x9e8>
 800ef86:	e4ac      	b.n	800e8e2 <_strtod_l+0x452>
 800ef88:	94a03595 	.word	0x94a03595
 800ef8c:	3fdfffff 	.word	0x3fdfffff
 800ef90:	35afe535 	.word	0x35afe535
 800ef94:	3fe00000 	.word	0x3fe00000
 800ef98:	000fffff 	.word	0x000fffff
 800ef9c:	7ff00000 	.word	0x7ff00000
 800efa0:	7fefffff 	.word	0x7fefffff
 800efa4:	39500000 	.word	0x39500000
 800efa8:	3ff00000 	.word	0x3ff00000
 800efac:	7fe00000 	.word	0x7fe00000
 800efb0:	7c9fffff 	.word	0x7c9fffff
 800efb4:	3fe00000 	.word	0x3fe00000
 800efb8:	bff00000 	.word	0xbff00000
 800efbc:	9b04      	ldr	r3, [sp, #16]
 800efbe:	b333      	cbz	r3, 800f00e <_strtod_l+0xb7e>
 800efc0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800efc2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800efc6:	d822      	bhi.n	800f00e <_strtod_l+0xb7e>
 800efc8:	a327      	add	r3, pc, #156	; (adr r3, 800f068 <_strtod_l+0xbd8>)
 800efca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efce:	4630      	mov	r0, r6
 800efd0:	4639      	mov	r1, r7
 800efd2:	f7f1 fd8d 	bl	8000af0 <__aeabi_dcmple>
 800efd6:	b1a0      	cbz	r0, 800f002 <_strtod_l+0xb72>
 800efd8:	4639      	mov	r1, r7
 800efda:	4630      	mov	r0, r6
 800efdc:	f7f1 fde4 	bl	8000ba8 <__aeabi_d2uiz>
 800efe0:	2800      	cmp	r0, #0
 800efe2:	bf08      	it	eq
 800efe4:	2001      	moveq	r0, #1
 800efe6:	f7f1 fa8d 	bl	8000504 <__aeabi_ui2d>
 800efea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800efec:	4606      	mov	r6, r0
 800efee:	460f      	mov	r7, r1
 800eff0:	bb03      	cbnz	r3, 800f034 <_strtod_l+0xba4>
 800eff2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eff6:	9012      	str	r0, [sp, #72]	; 0x48
 800eff8:	9313      	str	r3, [sp, #76]	; 0x4c
 800effa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800effe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800f002:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f004:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f006:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800f00a:	1a9b      	subs	r3, r3, r2
 800f00c:	930b      	str	r3, [sp, #44]	; 0x2c
 800f00e:	ed9d 0b08 	vldr	d0, [sp, #32]
 800f012:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800f016:	f001 fdf7 	bl	8010c08 <__ulp>
 800f01a:	4650      	mov	r0, sl
 800f01c:	ec53 2b10 	vmov	r2, r3, d0
 800f020:	4659      	mov	r1, fp
 800f022:	f7f1 fae9 	bl	80005f8 <__aeabi_dmul>
 800f026:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f02a:	f7f1 f92f 	bl	800028c <__adddf3>
 800f02e:	4682      	mov	sl, r0
 800f030:	468b      	mov	fp, r1
 800f032:	e772      	b.n	800ef1a <_strtod_l+0xa8a>
 800f034:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800f038:	e7df      	b.n	800effa <_strtod_l+0xb6a>
 800f03a:	a30d      	add	r3, pc, #52	; (adr r3, 800f070 <_strtod_l+0xbe0>)
 800f03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f040:	f7f1 fd4c 	bl	8000adc <__aeabi_dcmplt>
 800f044:	e79c      	b.n	800ef80 <_strtod_l+0xaf0>
 800f046:	2300      	movs	r3, #0
 800f048:	930d      	str	r3, [sp, #52]	; 0x34
 800f04a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f04c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f04e:	6013      	str	r3, [r2, #0]
 800f050:	f7ff ba61 	b.w	800e516 <_strtod_l+0x86>
 800f054:	2b65      	cmp	r3, #101	; 0x65
 800f056:	f04f 0200 	mov.w	r2, #0
 800f05a:	f43f ab4e 	beq.w	800e6fa <_strtod_l+0x26a>
 800f05e:	2101      	movs	r1, #1
 800f060:	4614      	mov	r4, r2
 800f062:	9104      	str	r1, [sp, #16]
 800f064:	f7ff bacb 	b.w	800e5fe <_strtod_l+0x16e>
 800f068:	ffc00000 	.word	0xffc00000
 800f06c:	41dfffff 	.word	0x41dfffff
 800f070:	94a03595 	.word	0x94a03595
 800f074:	3fcfffff 	.word	0x3fcfffff

0800f078 <_strtod_r>:
 800f078:	4b05      	ldr	r3, [pc, #20]	; (800f090 <_strtod_r+0x18>)
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	b410      	push	{r4}
 800f07e:	6a1b      	ldr	r3, [r3, #32]
 800f080:	4c04      	ldr	r4, [pc, #16]	; (800f094 <_strtod_r+0x1c>)
 800f082:	2b00      	cmp	r3, #0
 800f084:	bf08      	it	eq
 800f086:	4623      	moveq	r3, r4
 800f088:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f08c:	f7ff ba00 	b.w	800e490 <_strtod_l>
 800f090:	2000018c 	.word	0x2000018c
 800f094:	200001f0 	.word	0x200001f0

0800f098 <_strtol_l.isra.0>:
 800f098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f09c:	4680      	mov	r8, r0
 800f09e:	4689      	mov	r9, r1
 800f0a0:	4692      	mov	sl, r2
 800f0a2:	461e      	mov	r6, r3
 800f0a4:	460f      	mov	r7, r1
 800f0a6:	463d      	mov	r5, r7
 800f0a8:	9808      	ldr	r0, [sp, #32]
 800f0aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f0ae:	f001 fab7 	bl	8010620 <__locale_ctype_ptr_l>
 800f0b2:	4420      	add	r0, r4
 800f0b4:	7843      	ldrb	r3, [r0, #1]
 800f0b6:	f013 0308 	ands.w	r3, r3, #8
 800f0ba:	d132      	bne.n	800f122 <_strtol_l.isra.0+0x8a>
 800f0bc:	2c2d      	cmp	r4, #45	; 0x2d
 800f0be:	d132      	bne.n	800f126 <_strtol_l.isra.0+0x8e>
 800f0c0:	787c      	ldrb	r4, [r7, #1]
 800f0c2:	1cbd      	adds	r5, r7, #2
 800f0c4:	2201      	movs	r2, #1
 800f0c6:	2e00      	cmp	r6, #0
 800f0c8:	d05d      	beq.n	800f186 <_strtol_l.isra.0+0xee>
 800f0ca:	2e10      	cmp	r6, #16
 800f0cc:	d109      	bne.n	800f0e2 <_strtol_l.isra.0+0x4a>
 800f0ce:	2c30      	cmp	r4, #48	; 0x30
 800f0d0:	d107      	bne.n	800f0e2 <_strtol_l.isra.0+0x4a>
 800f0d2:	782b      	ldrb	r3, [r5, #0]
 800f0d4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f0d8:	2b58      	cmp	r3, #88	; 0x58
 800f0da:	d14f      	bne.n	800f17c <_strtol_l.isra.0+0xe4>
 800f0dc:	786c      	ldrb	r4, [r5, #1]
 800f0de:	2610      	movs	r6, #16
 800f0e0:	3502      	adds	r5, #2
 800f0e2:	2a00      	cmp	r2, #0
 800f0e4:	bf14      	ite	ne
 800f0e6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800f0ea:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800f0ee:	2700      	movs	r7, #0
 800f0f0:	fbb1 fcf6 	udiv	ip, r1, r6
 800f0f4:	4638      	mov	r0, r7
 800f0f6:	fb06 1e1c 	mls	lr, r6, ip, r1
 800f0fa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800f0fe:	2b09      	cmp	r3, #9
 800f100:	d817      	bhi.n	800f132 <_strtol_l.isra.0+0x9a>
 800f102:	461c      	mov	r4, r3
 800f104:	42a6      	cmp	r6, r4
 800f106:	dd23      	ble.n	800f150 <_strtol_l.isra.0+0xb8>
 800f108:	1c7b      	adds	r3, r7, #1
 800f10a:	d007      	beq.n	800f11c <_strtol_l.isra.0+0x84>
 800f10c:	4584      	cmp	ip, r0
 800f10e:	d31c      	bcc.n	800f14a <_strtol_l.isra.0+0xb2>
 800f110:	d101      	bne.n	800f116 <_strtol_l.isra.0+0x7e>
 800f112:	45a6      	cmp	lr, r4
 800f114:	db19      	blt.n	800f14a <_strtol_l.isra.0+0xb2>
 800f116:	fb00 4006 	mla	r0, r0, r6, r4
 800f11a:	2701      	movs	r7, #1
 800f11c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f120:	e7eb      	b.n	800f0fa <_strtol_l.isra.0+0x62>
 800f122:	462f      	mov	r7, r5
 800f124:	e7bf      	b.n	800f0a6 <_strtol_l.isra.0+0xe>
 800f126:	2c2b      	cmp	r4, #43	; 0x2b
 800f128:	bf04      	itt	eq
 800f12a:	1cbd      	addeq	r5, r7, #2
 800f12c:	787c      	ldrbeq	r4, [r7, #1]
 800f12e:	461a      	mov	r2, r3
 800f130:	e7c9      	b.n	800f0c6 <_strtol_l.isra.0+0x2e>
 800f132:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800f136:	2b19      	cmp	r3, #25
 800f138:	d801      	bhi.n	800f13e <_strtol_l.isra.0+0xa6>
 800f13a:	3c37      	subs	r4, #55	; 0x37
 800f13c:	e7e2      	b.n	800f104 <_strtol_l.isra.0+0x6c>
 800f13e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800f142:	2b19      	cmp	r3, #25
 800f144:	d804      	bhi.n	800f150 <_strtol_l.isra.0+0xb8>
 800f146:	3c57      	subs	r4, #87	; 0x57
 800f148:	e7dc      	b.n	800f104 <_strtol_l.isra.0+0x6c>
 800f14a:	f04f 37ff 	mov.w	r7, #4294967295
 800f14e:	e7e5      	b.n	800f11c <_strtol_l.isra.0+0x84>
 800f150:	1c7b      	adds	r3, r7, #1
 800f152:	d108      	bne.n	800f166 <_strtol_l.isra.0+0xce>
 800f154:	2322      	movs	r3, #34	; 0x22
 800f156:	f8c8 3000 	str.w	r3, [r8]
 800f15a:	4608      	mov	r0, r1
 800f15c:	f1ba 0f00 	cmp.w	sl, #0
 800f160:	d107      	bne.n	800f172 <_strtol_l.isra.0+0xda>
 800f162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f166:	b102      	cbz	r2, 800f16a <_strtol_l.isra.0+0xd2>
 800f168:	4240      	negs	r0, r0
 800f16a:	f1ba 0f00 	cmp.w	sl, #0
 800f16e:	d0f8      	beq.n	800f162 <_strtol_l.isra.0+0xca>
 800f170:	b10f      	cbz	r7, 800f176 <_strtol_l.isra.0+0xde>
 800f172:	f105 39ff 	add.w	r9, r5, #4294967295
 800f176:	f8ca 9000 	str.w	r9, [sl]
 800f17a:	e7f2      	b.n	800f162 <_strtol_l.isra.0+0xca>
 800f17c:	2430      	movs	r4, #48	; 0x30
 800f17e:	2e00      	cmp	r6, #0
 800f180:	d1af      	bne.n	800f0e2 <_strtol_l.isra.0+0x4a>
 800f182:	2608      	movs	r6, #8
 800f184:	e7ad      	b.n	800f0e2 <_strtol_l.isra.0+0x4a>
 800f186:	2c30      	cmp	r4, #48	; 0x30
 800f188:	d0a3      	beq.n	800f0d2 <_strtol_l.isra.0+0x3a>
 800f18a:	260a      	movs	r6, #10
 800f18c:	e7a9      	b.n	800f0e2 <_strtol_l.isra.0+0x4a>
	...

0800f190 <_strtol_r>:
 800f190:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f192:	4c06      	ldr	r4, [pc, #24]	; (800f1ac <_strtol_r+0x1c>)
 800f194:	4d06      	ldr	r5, [pc, #24]	; (800f1b0 <_strtol_r+0x20>)
 800f196:	6824      	ldr	r4, [r4, #0]
 800f198:	6a24      	ldr	r4, [r4, #32]
 800f19a:	2c00      	cmp	r4, #0
 800f19c:	bf08      	it	eq
 800f19e:	462c      	moveq	r4, r5
 800f1a0:	9400      	str	r4, [sp, #0]
 800f1a2:	f7ff ff79 	bl	800f098 <_strtol_l.isra.0>
 800f1a6:	b003      	add	sp, #12
 800f1a8:	bd30      	pop	{r4, r5, pc}
 800f1aa:	bf00      	nop
 800f1ac:	2000018c 	.word	0x2000018c
 800f1b0:	200001f0 	.word	0x200001f0

0800f1b4 <quorem>:
 800f1b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1b8:	6903      	ldr	r3, [r0, #16]
 800f1ba:	690c      	ldr	r4, [r1, #16]
 800f1bc:	42a3      	cmp	r3, r4
 800f1be:	4680      	mov	r8, r0
 800f1c0:	f2c0 8082 	blt.w	800f2c8 <quorem+0x114>
 800f1c4:	3c01      	subs	r4, #1
 800f1c6:	f101 0714 	add.w	r7, r1, #20
 800f1ca:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800f1ce:	f100 0614 	add.w	r6, r0, #20
 800f1d2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800f1d6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800f1da:	eb06 030c 	add.w	r3, r6, ip
 800f1de:	3501      	adds	r5, #1
 800f1e0:	eb07 090c 	add.w	r9, r7, ip
 800f1e4:	9301      	str	r3, [sp, #4]
 800f1e6:	fbb0 f5f5 	udiv	r5, r0, r5
 800f1ea:	b395      	cbz	r5, 800f252 <quorem+0x9e>
 800f1ec:	f04f 0a00 	mov.w	sl, #0
 800f1f0:	4638      	mov	r0, r7
 800f1f2:	46b6      	mov	lr, r6
 800f1f4:	46d3      	mov	fp, sl
 800f1f6:	f850 2b04 	ldr.w	r2, [r0], #4
 800f1fa:	b293      	uxth	r3, r2
 800f1fc:	fb05 a303 	mla	r3, r5, r3, sl
 800f200:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f204:	b29b      	uxth	r3, r3
 800f206:	ebab 0303 	sub.w	r3, fp, r3
 800f20a:	0c12      	lsrs	r2, r2, #16
 800f20c:	f8de b000 	ldr.w	fp, [lr]
 800f210:	fb05 a202 	mla	r2, r5, r2, sl
 800f214:	fa13 f38b 	uxtah	r3, r3, fp
 800f218:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800f21c:	fa1f fb82 	uxth.w	fp, r2
 800f220:	f8de 2000 	ldr.w	r2, [lr]
 800f224:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800f228:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f22c:	b29b      	uxth	r3, r3
 800f22e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f232:	4581      	cmp	r9, r0
 800f234:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800f238:	f84e 3b04 	str.w	r3, [lr], #4
 800f23c:	d2db      	bcs.n	800f1f6 <quorem+0x42>
 800f23e:	f856 300c 	ldr.w	r3, [r6, ip]
 800f242:	b933      	cbnz	r3, 800f252 <quorem+0x9e>
 800f244:	9b01      	ldr	r3, [sp, #4]
 800f246:	3b04      	subs	r3, #4
 800f248:	429e      	cmp	r6, r3
 800f24a:	461a      	mov	r2, r3
 800f24c:	d330      	bcc.n	800f2b0 <quorem+0xfc>
 800f24e:	f8c8 4010 	str.w	r4, [r8, #16]
 800f252:	4640      	mov	r0, r8
 800f254:	f001 fc60 	bl	8010b18 <__mcmp>
 800f258:	2800      	cmp	r0, #0
 800f25a:	db25      	blt.n	800f2a8 <quorem+0xf4>
 800f25c:	3501      	adds	r5, #1
 800f25e:	4630      	mov	r0, r6
 800f260:	f04f 0c00 	mov.w	ip, #0
 800f264:	f857 2b04 	ldr.w	r2, [r7], #4
 800f268:	f8d0 e000 	ldr.w	lr, [r0]
 800f26c:	b293      	uxth	r3, r2
 800f26e:	ebac 0303 	sub.w	r3, ip, r3
 800f272:	0c12      	lsrs	r2, r2, #16
 800f274:	fa13 f38e 	uxtah	r3, r3, lr
 800f278:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f27c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f280:	b29b      	uxth	r3, r3
 800f282:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f286:	45b9      	cmp	r9, r7
 800f288:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f28c:	f840 3b04 	str.w	r3, [r0], #4
 800f290:	d2e8      	bcs.n	800f264 <quorem+0xb0>
 800f292:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800f296:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800f29a:	b92a      	cbnz	r2, 800f2a8 <quorem+0xf4>
 800f29c:	3b04      	subs	r3, #4
 800f29e:	429e      	cmp	r6, r3
 800f2a0:	461a      	mov	r2, r3
 800f2a2:	d30b      	bcc.n	800f2bc <quorem+0x108>
 800f2a4:	f8c8 4010 	str.w	r4, [r8, #16]
 800f2a8:	4628      	mov	r0, r5
 800f2aa:	b003      	add	sp, #12
 800f2ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2b0:	6812      	ldr	r2, [r2, #0]
 800f2b2:	3b04      	subs	r3, #4
 800f2b4:	2a00      	cmp	r2, #0
 800f2b6:	d1ca      	bne.n	800f24e <quorem+0x9a>
 800f2b8:	3c01      	subs	r4, #1
 800f2ba:	e7c5      	b.n	800f248 <quorem+0x94>
 800f2bc:	6812      	ldr	r2, [r2, #0]
 800f2be:	3b04      	subs	r3, #4
 800f2c0:	2a00      	cmp	r2, #0
 800f2c2:	d1ef      	bne.n	800f2a4 <quorem+0xf0>
 800f2c4:	3c01      	subs	r4, #1
 800f2c6:	e7ea      	b.n	800f29e <quorem+0xea>
 800f2c8:	2000      	movs	r0, #0
 800f2ca:	e7ee      	b.n	800f2aa <quorem+0xf6>
 800f2cc:	0000      	movs	r0, r0
	...

0800f2d0 <_dtoa_r>:
 800f2d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2d4:	ec57 6b10 	vmov	r6, r7, d0
 800f2d8:	b097      	sub	sp, #92	; 0x5c
 800f2da:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f2dc:	9106      	str	r1, [sp, #24]
 800f2de:	4604      	mov	r4, r0
 800f2e0:	920b      	str	r2, [sp, #44]	; 0x2c
 800f2e2:	9312      	str	r3, [sp, #72]	; 0x48
 800f2e4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f2e8:	e9cd 6700 	strd	r6, r7, [sp]
 800f2ec:	b93d      	cbnz	r5, 800f2fe <_dtoa_r+0x2e>
 800f2ee:	2010      	movs	r0, #16
 800f2f0:	f7fe f95a 	bl	800d5a8 <malloc>
 800f2f4:	6260      	str	r0, [r4, #36]	; 0x24
 800f2f6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f2fa:	6005      	str	r5, [r0, #0]
 800f2fc:	60c5      	str	r5, [r0, #12]
 800f2fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f300:	6819      	ldr	r1, [r3, #0]
 800f302:	b151      	cbz	r1, 800f31a <_dtoa_r+0x4a>
 800f304:	685a      	ldr	r2, [r3, #4]
 800f306:	604a      	str	r2, [r1, #4]
 800f308:	2301      	movs	r3, #1
 800f30a:	4093      	lsls	r3, r2
 800f30c:	608b      	str	r3, [r1, #8]
 800f30e:	4620      	mov	r0, r4
 800f310:	f001 f9e2 	bl	80106d8 <_Bfree>
 800f314:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f316:	2200      	movs	r2, #0
 800f318:	601a      	str	r2, [r3, #0]
 800f31a:	1e3b      	subs	r3, r7, #0
 800f31c:	bfbb      	ittet	lt
 800f31e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f322:	9301      	strlt	r3, [sp, #4]
 800f324:	2300      	movge	r3, #0
 800f326:	2201      	movlt	r2, #1
 800f328:	bfac      	ite	ge
 800f32a:	f8c8 3000 	strge.w	r3, [r8]
 800f32e:	f8c8 2000 	strlt.w	r2, [r8]
 800f332:	4baf      	ldr	r3, [pc, #700]	; (800f5f0 <_dtoa_r+0x320>)
 800f334:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f338:	ea33 0308 	bics.w	r3, r3, r8
 800f33c:	d114      	bne.n	800f368 <_dtoa_r+0x98>
 800f33e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f340:	f242 730f 	movw	r3, #9999	; 0x270f
 800f344:	6013      	str	r3, [r2, #0]
 800f346:	9b00      	ldr	r3, [sp, #0]
 800f348:	b923      	cbnz	r3, 800f354 <_dtoa_r+0x84>
 800f34a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800f34e:	2800      	cmp	r0, #0
 800f350:	f000 8542 	beq.w	800fdd8 <_dtoa_r+0xb08>
 800f354:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f356:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800f604 <_dtoa_r+0x334>
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	f000 8544 	beq.w	800fde8 <_dtoa_r+0xb18>
 800f360:	f10b 0303 	add.w	r3, fp, #3
 800f364:	f000 bd3e 	b.w	800fde4 <_dtoa_r+0xb14>
 800f368:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f36c:	2200      	movs	r2, #0
 800f36e:	2300      	movs	r3, #0
 800f370:	4630      	mov	r0, r6
 800f372:	4639      	mov	r1, r7
 800f374:	f7f1 fba8 	bl	8000ac8 <__aeabi_dcmpeq>
 800f378:	4681      	mov	r9, r0
 800f37a:	b168      	cbz	r0, 800f398 <_dtoa_r+0xc8>
 800f37c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f37e:	2301      	movs	r3, #1
 800f380:	6013      	str	r3, [r2, #0]
 800f382:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f384:	2b00      	cmp	r3, #0
 800f386:	f000 8524 	beq.w	800fdd2 <_dtoa_r+0xb02>
 800f38a:	4b9a      	ldr	r3, [pc, #616]	; (800f5f4 <_dtoa_r+0x324>)
 800f38c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f38e:	f103 3bff 	add.w	fp, r3, #4294967295
 800f392:	6013      	str	r3, [r2, #0]
 800f394:	f000 bd28 	b.w	800fde8 <_dtoa_r+0xb18>
 800f398:	aa14      	add	r2, sp, #80	; 0x50
 800f39a:	a915      	add	r1, sp, #84	; 0x54
 800f39c:	ec47 6b10 	vmov	d0, r6, r7
 800f3a0:	4620      	mov	r0, r4
 800f3a2:	f001 fca7 	bl	8010cf4 <__d2b>
 800f3a6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800f3aa:	9004      	str	r0, [sp, #16]
 800f3ac:	2d00      	cmp	r5, #0
 800f3ae:	d07c      	beq.n	800f4aa <_dtoa_r+0x1da>
 800f3b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f3b4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800f3b8:	46b2      	mov	sl, r6
 800f3ba:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800f3be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f3c2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800f3c6:	2200      	movs	r2, #0
 800f3c8:	4b8b      	ldr	r3, [pc, #556]	; (800f5f8 <_dtoa_r+0x328>)
 800f3ca:	4650      	mov	r0, sl
 800f3cc:	4659      	mov	r1, fp
 800f3ce:	f7f0 ff5b 	bl	8000288 <__aeabi_dsub>
 800f3d2:	a381      	add	r3, pc, #516	; (adr r3, 800f5d8 <_dtoa_r+0x308>)
 800f3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3d8:	f7f1 f90e 	bl	80005f8 <__aeabi_dmul>
 800f3dc:	a380      	add	r3, pc, #512	; (adr r3, 800f5e0 <_dtoa_r+0x310>)
 800f3de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3e2:	f7f0 ff53 	bl	800028c <__adddf3>
 800f3e6:	4606      	mov	r6, r0
 800f3e8:	4628      	mov	r0, r5
 800f3ea:	460f      	mov	r7, r1
 800f3ec:	f7f1 f89a 	bl	8000524 <__aeabi_i2d>
 800f3f0:	a37d      	add	r3, pc, #500	; (adr r3, 800f5e8 <_dtoa_r+0x318>)
 800f3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3f6:	f7f1 f8ff 	bl	80005f8 <__aeabi_dmul>
 800f3fa:	4602      	mov	r2, r0
 800f3fc:	460b      	mov	r3, r1
 800f3fe:	4630      	mov	r0, r6
 800f400:	4639      	mov	r1, r7
 800f402:	f7f0 ff43 	bl	800028c <__adddf3>
 800f406:	4606      	mov	r6, r0
 800f408:	460f      	mov	r7, r1
 800f40a:	f7f1 fba5 	bl	8000b58 <__aeabi_d2iz>
 800f40e:	2200      	movs	r2, #0
 800f410:	4682      	mov	sl, r0
 800f412:	2300      	movs	r3, #0
 800f414:	4630      	mov	r0, r6
 800f416:	4639      	mov	r1, r7
 800f418:	f7f1 fb60 	bl	8000adc <__aeabi_dcmplt>
 800f41c:	b148      	cbz	r0, 800f432 <_dtoa_r+0x162>
 800f41e:	4650      	mov	r0, sl
 800f420:	f7f1 f880 	bl	8000524 <__aeabi_i2d>
 800f424:	4632      	mov	r2, r6
 800f426:	463b      	mov	r3, r7
 800f428:	f7f1 fb4e 	bl	8000ac8 <__aeabi_dcmpeq>
 800f42c:	b908      	cbnz	r0, 800f432 <_dtoa_r+0x162>
 800f42e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f432:	f1ba 0f16 	cmp.w	sl, #22
 800f436:	d859      	bhi.n	800f4ec <_dtoa_r+0x21c>
 800f438:	4970      	ldr	r1, [pc, #448]	; (800f5fc <_dtoa_r+0x32c>)
 800f43a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800f43e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f442:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f446:	f7f1 fb67 	bl	8000b18 <__aeabi_dcmpgt>
 800f44a:	2800      	cmp	r0, #0
 800f44c:	d050      	beq.n	800f4f0 <_dtoa_r+0x220>
 800f44e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f452:	2300      	movs	r3, #0
 800f454:	930f      	str	r3, [sp, #60]	; 0x3c
 800f456:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f458:	1b5d      	subs	r5, r3, r5
 800f45a:	f1b5 0801 	subs.w	r8, r5, #1
 800f45e:	bf49      	itett	mi
 800f460:	f1c5 0301 	rsbmi	r3, r5, #1
 800f464:	2300      	movpl	r3, #0
 800f466:	9305      	strmi	r3, [sp, #20]
 800f468:	f04f 0800 	movmi.w	r8, #0
 800f46c:	bf58      	it	pl
 800f46e:	9305      	strpl	r3, [sp, #20]
 800f470:	f1ba 0f00 	cmp.w	sl, #0
 800f474:	db3e      	blt.n	800f4f4 <_dtoa_r+0x224>
 800f476:	2300      	movs	r3, #0
 800f478:	44d0      	add	r8, sl
 800f47a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800f47e:	9307      	str	r3, [sp, #28]
 800f480:	9b06      	ldr	r3, [sp, #24]
 800f482:	2b09      	cmp	r3, #9
 800f484:	f200 8090 	bhi.w	800f5a8 <_dtoa_r+0x2d8>
 800f488:	2b05      	cmp	r3, #5
 800f48a:	bfc4      	itt	gt
 800f48c:	3b04      	subgt	r3, #4
 800f48e:	9306      	strgt	r3, [sp, #24]
 800f490:	9b06      	ldr	r3, [sp, #24]
 800f492:	f1a3 0302 	sub.w	r3, r3, #2
 800f496:	bfcc      	ite	gt
 800f498:	2500      	movgt	r5, #0
 800f49a:	2501      	movle	r5, #1
 800f49c:	2b03      	cmp	r3, #3
 800f49e:	f200 808f 	bhi.w	800f5c0 <_dtoa_r+0x2f0>
 800f4a2:	e8df f003 	tbb	[pc, r3]
 800f4a6:	7f7d      	.short	0x7f7d
 800f4a8:	7131      	.short	0x7131
 800f4aa:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800f4ae:	441d      	add	r5, r3
 800f4b0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800f4b4:	2820      	cmp	r0, #32
 800f4b6:	dd13      	ble.n	800f4e0 <_dtoa_r+0x210>
 800f4b8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800f4bc:	9b00      	ldr	r3, [sp, #0]
 800f4be:	fa08 f800 	lsl.w	r8, r8, r0
 800f4c2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800f4c6:	fa23 f000 	lsr.w	r0, r3, r0
 800f4ca:	ea48 0000 	orr.w	r0, r8, r0
 800f4ce:	f7f1 f819 	bl	8000504 <__aeabi_ui2d>
 800f4d2:	2301      	movs	r3, #1
 800f4d4:	4682      	mov	sl, r0
 800f4d6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800f4da:	3d01      	subs	r5, #1
 800f4dc:	9313      	str	r3, [sp, #76]	; 0x4c
 800f4de:	e772      	b.n	800f3c6 <_dtoa_r+0xf6>
 800f4e0:	9b00      	ldr	r3, [sp, #0]
 800f4e2:	f1c0 0020 	rsb	r0, r0, #32
 800f4e6:	fa03 f000 	lsl.w	r0, r3, r0
 800f4ea:	e7f0      	b.n	800f4ce <_dtoa_r+0x1fe>
 800f4ec:	2301      	movs	r3, #1
 800f4ee:	e7b1      	b.n	800f454 <_dtoa_r+0x184>
 800f4f0:	900f      	str	r0, [sp, #60]	; 0x3c
 800f4f2:	e7b0      	b.n	800f456 <_dtoa_r+0x186>
 800f4f4:	9b05      	ldr	r3, [sp, #20]
 800f4f6:	eba3 030a 	sub.w	r3, r3, sl
 800f4fa:	9305      	str	r3, [sp, #20]
 800f4fc:	f1ca 0300 	rsb	r3, sl, #0
 800f500:	9307      	str	r3, [sp, #28]
 800f502:	2300      	movs	r3, #0
 800f504:	930e      	str	r3, [sp, #56]	; 0x38
 800f506:	e7bb      	b.n	800f480 <_dtoa_r+0x1b0>
 800f508:	2301      	movs	r3, #1
 800f50a:	930a      	str	r3, [sp, #40]	; 0x28
 800f50c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f50e:	2b00      	cmp	r3, #0
 800f510:	dd59      	ble.n	800f5c6 <_dtoa_r+0x2f6>
 800f512:	9302      	str	r3, [sp, #8]
 800f514:	4699      	mov	r9, r3
 800f516:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f518:	2200      	movs	r2, #0
 800f51a:	6072      	str	r2, [r6, #4]
 800f51c:	2204      	movs	r2, #4
 800f51e:	f102 0014 	add.w	r0, r2, #20
 800f522:	4298      	cmp	r0, r3
 800f524:	6871      	ldr	r1, [r6, #4]
 800f526:	d953      	bls.n	800f5d0 <_dtoa_r+0x300>
 800f528:	4620      	mov	r0, r4
 800f52a:	f001 f8a1 	bl	8010670 <_Balloc>
 800f52e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f530:	6030      	str	r0, [r6, #0]
 800f532:	f1b9 0f0e 	cmp.w	r9, #14
 800f536:	f8d3 b000 	ldr.w	fp, [r3]
 800f53a:	f200 80e6 	bhi.w	800f70a <_dtoa_r+0x43a>
 800f53e:	2d00      	cmp	r5, #0
 800f540:	f000 80e3 	beq.w	800f70a <_dtoa_r+0x43a>
 800f544:	ed9d 7b00 	vldr	d7, [sp]
 800f548:	f1ba 0f00 	cmp.w	sl, #0
 800f54c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800f550:	dd74      	ble.n	800f63c <_dtoa_r+0x36c>
 800f552:	4a2a      	ldr	r2, [pc, #168]	; (800f5fc <_dtoa_r+0x32c>)
 800f554:	f00a 030f 	and.w	r3, sl, #15
 800f558:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f55c:	ed93 7b00 	vldr	d7, [r3]
 800f560:	ea4f 162a 	mov.w	r6, sl, asr #4
 800f564:	06f0      	lsls	r0, r6, #27
 800f566:	ed8d 7b08 	vstr	d7, [sp, #32]
 800f56a:	d565      	bpl.n	800f638 <_dtoa_r+0x368>
 800f56c:	4b24      	ldr	r3, [pc, #144]	; (800f600 <_dtoa_r+0x330>)
 800f56e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f572:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f576:	f7f1 f969 	bl	800084c <__aeabi_ddiv>
 800f57a:	e9cd 0100 	strd	r0, r1, [sp]
 800f57e:	f006 060f 	and.w	r6, r6, #15
 800f582:	2503      	movs	r5, #3
 800f584:	4f1e      	ldr	r7, [pc, #120]	; (800f600 <_dtoa_r+0x330>)
 800f586:	e04c      	b.n	800f622 <_dtoa_r+0x352>
 800f588:	2301      	movs	r3, #1
 800f58a:	930a      	str	r3, [sp, #40]	; 0x28
 800f58c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f58e:	4453      	add	r3, sl
 800f590:	f103 0901 	add.w	r9, r3, #1
 800f594:	9302      	str	r3, [sp, #8]
 800f596:	464b      	mov	r3, r9
 800f598:	2b01      	cmp	r3, #1
 800f59a:	bfb8      	it	lt
 800f59c:	2301      	movlt	r3, #1
 800f59e:	e7ba      	b.n	800f516 <_dtoa_r+0x246>
 800f5a0:	2300      	movs	r3, #0
 800f5a2:	e7b2      	b.n	800f50a <_dtoa_r+0x23a>
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	e7f0      	b.n	800f58a <_dtoa_r+0x2ba>
 800f5a8:	2501      	movs	r5, #1
 800f5aa:	2300      	movs	r3, #0
 800f5ac:	9306      	str	r3, [sp, #24]
 800f5ae:	950a      	str	r5, [sp, #40]	; 0x28
 800f5b0:	f04f 33ff 	mov.w	r3, #4294967295
 800f5b4:	9302      	str	r3, [sp, #8]
 800f5b6:	4699      	mov	r9, r3
 800f5b8:	2200      	movs	r2, #0
 800f5ba:	2312      	movs	r3, #18
 800f5bc:	920b      	str	r2, [sp, #44]	; 0x2c
 800f5be:	e7aa      	b.n	800f516 <_dtoa_r+0x246>
 800f5c0:	2301      	movs	r3, #1
 800f5c2:	930a      	str	r3, [sp, #40]	; 0x28
 800f5c4:	e7f4      	b.n	800f5b0 <_dtoa_r+0x2e0>
 800f5c6:	2301      	movs	r3, #1
 800f5c8:	9302      	str	r3, [sp, #8]
 800f5ca:	4699      	mov	r9, r3
 800f5cc:	461a      	mov	r2, r3
 800f5ce:	e7f5      	b.n	800f5bc <_dtoa_r+0x2ec>
 800f5d0:	3101      	adds	r1, #1
 800f5d2:	6071      	str	r1, [r6, #4]
 800f5d4:	0052      	lsls	r2, r2, #1
 800f5d6:	e7a2      	b.n	800f51e <_dtoa_r+0x24e>
 800f5d8:	636f4361 	.word	0x636f4361
 800f5dc:	3fd287a7 	.word	0x3fd287a7
 800f5e0:	8b60c8b3 	.word	0x8b60c8b3
 800f5e4:	3fc68a28 	.word	0x3fc68a28
 800f5e8:	509f79fb 	.word	0x509f79fb
 800f5ec:	3fd34413 	.word	0x3fd34413
 800f5f0:	7ff00000 	.word	0x7ff00000
 800f5f4:	08011af5 	.word	0x08011af5
 800f5f8:	3ff80000 	.word	0x3ff80000
 800f5fc:	08011c18 	.word	0x08011c18
 800f600:	08011bf0 	.word	0x08011bf0
 800f604:	08011b79 	.word	0x08011b79
 800f608:	07f1      	lsls	r1, r6, #31
 800f60a:	d508      	bpl.n	800f61e <_dtoa_r+0x34e>
 800f60c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f610:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f614:	f7f0 fff0 	bl	80005f8 <__aeabi_dmul>
 800f618:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f61c:	3501      	adds	r5, #1
 800f61e:	1076      	asrs	r6, r6, #1
 800f620:	3708      	adds	r7, #8
 800f622:	2e00      	cmp	r6, #0
 800f624:	d1f0      	bne.n	800f608 <_dtoa_r+0x338>
 800f626:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f62a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f62e:	f7f1 f90d 	bl	800084c <__aeabi_ddiv>
 800f632:	e9cd 0100 	strd	r0, r1, [sp]
 800f636:	e01a      	b.n	800f66e <_dtoa_r+0x39e>
 800f638:	2502      	movs	r5, #2
 800f63a:	e7a3      	b.n	800f584 <_dtoa_r+0x2b4>
 800f63c:	f000 80a0 	beq.w	800f780 <_dtoa_r+0x4b0>
 800f640:	f1ca 0600 	rsb	r6, sl, #0
 800f644:	4b9f      	ldr	r3, [pc, #636]	; (800f8c4 <_dtoa_r+0x5f4>)
 800f646:	4fa0      	ldr	r7, [pc, #640]	; (800f8c8 <_dtoa_r+0x5f8>)
 800f648:	f006 020f 	and.w	r2, r6, #15
 800f64c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f650:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f654:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f658:	f7f0 ffce 	bl	80005f8 <__aeabi_dmul>
 800f65c:	e9cd 0100 	strd	r0, r1, [sp]
 800f660:	1136      	asrs	r6, r6, #4
 800f662:	2300      	movs	r3, #0
 800f664:	2502      	movs	r5, #2
 800f666:	2e00      	cmp	r6, #0
 800f668:	d17f      	bne.n	800f76a <_dtoa_r+0x49a>
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d1e1      	bne.n	800f632 <_dtoa_r+0x362>
 800f66e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f670:	2b00      	cmp	r3, #0
 800f672:	f000 8087 	beq.w	800f784 <_dtoa_r+0x4b4>
 800f676:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f67a:	2200      	movs	r2, #0
 800f67c:	4b93      	ldr	r3, [pc, #588]	; (800f8cc <_dtoa_r+0x5fc>)
 800f67e:	4630      	mov	r0, r6
 800f680:	4639      	mov	r1, r7
 800f682:	f7f1 fa2b 	bl	8000adc <__aeabi_dcmplt>
 800f686:	2800      	cmp	r0, #0
 800f688:	d07c      	beq.n	800f784 <_dtoa_r+0x4b4>
 800f68a:	f1b9 0f00 	cmp.w	r9, #0
 800f68e:	d079      	beq.n	800f784 <_dtoa_r+0x4b4>
 800f690:	9b02      	ldr	r3, [sp, #8]
 800f692:	2b00      	cmp	r3, #0
 800f694:	dd35      	ble.n	800f702 <_dtoa_r+0x432>
 800f696:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f69a:	9308      	str	r3, [sp, #32]
 800f69c:	4639      	mov	r1, r7
 800f69e:	2200      	movs	r2, #0
 800f6a0:	4b8b      	ldr	r3, [pc, #556]	; (800f8d0 <_dtoa_r+0x600>)
 800f6a2:	4630      	mov	r0, r6
 800f6a4:	f7f0 ffa8 	bl	80005f8 <__aeabi_dmul>
 800f6a8:	e9cd 0100 	strd	r0, r1, [sp]
 800f6ac:	9f02      	ldr	r7, [sp, #8]
 800f6ae:	3501      	adds	r5, #1
 800f6b0:	4628      	mov	r0, r5
 800f6b2:	f7f0 ff37 	bl	8000524 <__aeabi_i2d>
 800f6b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f6ba:	f7f0 ff9d 	bl	80005f8 <__aeabi_dmul>
 800f6be:	2200      	movs	r2, #0
 800f6c0:	4b84      	ldr	r3, [pc, #528]	; (800f8d4 <_dtoa_r+0x604>)
 800f6c2:	f7f0 fde3 	bl	800028c <__adddf3>
 800f6c6:	4605      	mov	r5, r0
 800f6c8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800f6cc:	2f00      	cmp	r7, #0
 800f6ce:	d15d      	bne.n	800f78c <_dtoa_r+0x4bc>
 800f6d0:	2200      	movs	r2, #0
 800f6d2:	4b81      	ldr	r3, [pc, #516]	; (800f8d8 <_dtoa_r+0x608>)
 800f6d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f6d8:	f7f0 fdd6 	bl	8000288 <__aeabi_dsub>
 800f6dc:	462a      	mov	r2, r5
 800f6de:	4633      	mov	r3, r6
 800f6e0:	e9cd 0100 	strd	r0, r1, [sp]
 800f6e4:	f7f1 fa18 	bl	8000b18 <__aeabi_dcmpgt>
 800f6e8:	2800      	cmp	r0, #0
 800f6ea:	f040 8288 	bne.w	800fbfe <_dtoa_r+0x92e>
 800f6ee:	462a      	mov	r2, r5
 800f6f0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800f6f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f6f8:	f7f1 f9f0 	bl	8000adc <__aeabi_dcmplt>
 800f6fc:	2800      	cmp	r0, #0
 800f6fe:	f040 827c 	bne.w	800fbfa <_dtoa_r+0x92a>
 800f702:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f706:	e9cd 2300 	strd	r2, r3, [sp]
 800f70a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	f2c0 8150 	blt.w	800f9b2 <_dtoa_r+0x6e2>
 800f712:	f1ba 0f0e 	cmp.w	sl, #14
 800f716:	f300 814c 	bgt.w	800f9b2 <_dtoa_r+0x6e2>
 800f71a:	4b6a      	ldr	r3, [pc, #424]	; (800f8c4 <_dtoa_r+0x5f4>)
 800f71c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f720:	ed93 7b00 	vldr	d7, [r3]
 800f724:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f726:	2b00      	cmp	r3, #0
 800f728:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f72c:	f280 80d8 	bge.w	800f8e0 <_dtoa_r+0x610>
 800f730:	f1b9 0f00 	cmp.w	r9, #0
 800f734:	f300 80d4 	bgt.w	800f8e0 <_dtoa_r+0x610>
 800f738:	f040 825e 	bne.w	800fbf8 <_dtoa_r+0x928>
 800f73c:	2200      	movs	r2, #0
 800f73e:	4b66      	ldr	r3, [pc, #408]	; (800f8d8 <_dtoa_r+0x608>)
 800f740:	ec51 0b17 	vmov	r0, r1, d7
 800f744:	f7f0 ff58 	bl	80005f8 <__aeabi_dmul>
 800f748:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f74c:	f7f1 f9da 	bl	8000b04 <__aeabi_dcmpge>
 800f750:	464f      	mov	r7, r9
 800f752:	464e      	mov	r6, r9
 800f754:	2800      	cmp	r0, #0
 800f756:	f040 8234 	bne.w	800fbc2 <_dtoa_r+0x8f2>
 800f75a:	2331      	movs	r3, #49	; 0x31
 800f75c:	f10b 0501 	add.w	r5, fp, #1
 800f760:	f88b 3000 	strb.w	r3, [fp]
 800f764:	f10a 0a01 	add.w	sl, sl, #1
 800f768:	e22f      	b.n	800fbca <_dtoa_r+0x8fa>
 800f76a:	07f2      	lsls	r2, r6, #31
 800f76c:	d505      	bpl.n	800f77a <_dtoa_r+0x4aa>
 800f76e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f772:	f7f0 ff41 	bl	80005f8 <__aeabi_dmul>
 800f776:	3501      	adds	r5, #1
 800f778:	2301      	movs	r3, #1
 800f77a:	1076      	asrs	r6, r6, #1
 800f77c:	3708      	adds	r7, #8
 800f77e:	e772      	b.n	800f666 <_dtoa_r+0x396>
 800f780:	2502      	movs	r5, #2
 800f782:	e774      	b.n	800f66e <_dtoa_r+0x39e>
 800f784:	f8cd a020 	str.w	sl, [sp, #32]
 800f788:	464f      	mov	r7, r9
 800f78a:	e791      	b.n	800f6b0 <_dtoa_r+0x3e0>
 800f78c:	4b4d      	ldr	r3, [pc, #308]	; (800f8c4 <_dtoa_r+0x5f4>)
 800f78e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f792:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800f796:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d047      	beq.n	800f82c <_dtoa_r+0x55c>
 800f79c:	4602      	mov	r2, r0
 800f79e:	460b      	mov	r3, r1
 800f7a0:	2000      	movs	r0, #0
 800f7a2:	494e      	ldr	r1, [pc, #312]	; (800f8dc <_dtoa_r+0x60c>)
 800f7a4:	f7f1 f852 	bl	800084c <__aeabi_ddiv>
 800f7a8:	462a      	mov	r2, r5
 800f7aa:	4633      	mov	r3, r6
 800f7ac:	f7f0 fd6c 	bl	8000288 <__aeabi_dsub>
 800f7b0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f7b4:	465d      	mov	r5, fp
 800f7b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f7ba:	f7f1 f9cd 	bl	8000b58 <__aeabi_d2iz>
 800f7be:	4606      	mov	r6, r0
 800f7c0:	f7f0 feb0 	bl	8000524 <__aeabi_i2d>
 800f7c4:	4602      	mov	r2, r0
 800f7c6:	460b      	mov	r3, r1
 800f7c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f7cc:	f7f0 fd5c 	bl	8000288 <__aeabi_dsub>
 800f7d0:	3630      	adds	r6, #48	; 0x30
 800f7d2:	f805 6b01 	strb.w	r6, [r5], #1
 800f7d6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f7da:	e9cd 0100 	strd	r0, r1, [sp]
 800f7de:	f7f1 f97d 	bl	8000adc <__aeabi_dcmplt>
 800f7e2:	2800      	cmp	r0, #0
 800f7e4:	d163      	bne.n	800f8ae <_dtoa_r+0x5de>
 800f7e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f7ea:	2000      	movs	r0, #0
 800f7ec:	4937      	ldr	r1, [pc, #220]	; (800f8cc <_dtoa_r+0x5fc>)
 800f7ee:	f7f0 fd4b 	bl	8000288 <__aeabi_dsub>
 800f7f2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f7f6:	f7f1 f971 	bl	8000adc <__aeabi_dcmplt>
 800f7fa:	2800      	cmp	r0, #0
 800f7fc:	f040 80b7 	bne.w	800f96e <_dtoa_r+0x69e>
 800f800:	eba5 030b 	sub.w	r3, r5, fp
 800f804:	429f      	cmp	r7, r3
 800f806:	f77f af7c 	ble.w	800f702 <_dtoa_r+0x432>
 800f80a:	2200      	movs	r2, #0
 800f80c:	4b30      	ldr	r3, [pc, #192]	; (800f8d0 <_dtoa_r+0x600>)
 800f80e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f812:	f7f0 fef1 	bl	80005f8 <__aeabi_dmul>
 800f816:	2200      	movs	r2, #0
 800f818:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f81c:	4b2c      	ldr	r3, [pc, #176]	; (800f8d0 <_dtoa_r+0x600>)
 800f81e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f822:	f7f0 fee9 	bl	80005f8 <__aeabi_dmul>
 800f826:	e9cd 0100 	strd	r0, r1, [sp]
 800f82a:	e7c4      	b.n	800f7b6 <_dtoa_r+0x4e6>
 800f82c:	462a      	mov	r2, r5
 800f82e:	4633      	mov	r3, r6
 800f830:	f7f0 fee2 	bl	80005f8 <__aeabi_dmul>
 800f834:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f838:	eb0b 0507 	add.w	r5, fp, r7
 800f83c:	465e      	mov	r6, fp
 800f83e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f842:	f7f1 f989 	bl	8000b58 <__aeabi_d2iz>
 800f846:	4607      	mov	r7, r0
 800f848:	f7f0 fe6c 	bl	8000524 <__aeabi_i2d>
 800f84c:	3730      	adds	r7, #48	; 0x30
 800f84e:	4602      	mov	r2, r0
 800f850:	460b      	mov	r3, r1
 800f852:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f856:	f7f0 fd17 	bl	8000288 <__aeabi_dsub>
 800f85a:	f806 7b01 	strb.w	r7, [r6], #1
 800f85e:	42ae      	cmp	r6, r5
 800f860:	e9cd 0100 	strd	r0, r1, [sp]
 800f864:	f04f 0200 	mov.w	r2, #0
 800f868:	d126      	bne.n	800f8b8 <_dtoa_r+0x5e8>
 800f86a:	4b1c      	ldr	r3, [pc, #112]	; (800f8dc <_dtoa_r+0x60c>)
 800f86c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f870:	f7f0 fd0c 	bl	800028c <__adddf3>
 800f874:	4602      	mov	r2, r0
 800f876:	460b      	mov	r3, r1
 800f878:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f87c:	f7f1 f94c 	bl	8000b18 <__aeabi_dcmpgt>
 800f880:	2800      	cmp	r0, #0
 800f882:	d174      	bne.n	800f96e <_dtoa_r+0x69e>
 800f884:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f888:	2000      	movs	r0, #0
 800f88a:	4914      	ldr	r1, [pc, #80]	; (800f8dc <_dtoa_r+0x60c>)
 800f88c:	f7f0 fcfc 	bl	8000288 <__aeabi_dsub>
 800f890:	4602      	mov	r2, r0
 800f892:	460b      	mov	r3, r1
 800f894:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f898:	f7f1 f920 	bl	8000adc <__aeabi_dcmplt>
 800f89c:	2800      	cmp	r0, #0
 800f89e:	f43f af30 	beq.w	800f702 <_dtoa_r+0x432>
 800f8a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f8a6:	2b30      	cmp	r3, #48	; 0x30
 800f8a8:	f105 32ff 	add.w	r2, r5, #4294967295
 800f8ac:	d002      	beq.n	800f8b4 <_dtoa_r+0x5e4>
 800f8ae:	f8dd a020 	ldr.w	sl, [sp, #32]
 800f8b2:	e04a      	b.n	800f94a <_dtoa_r+0x67a>
 800f8b4:	4615      	mov	r5, r2
 800f8b6:	e7f4      	b.n	800f8a2 <_dtoa_r+0x5d2>
 800f8b8:	4b05      	ldr	r3, [pc, #20]	; (800f8d0 <_dtoa_r+0x600>)
 800f8ba:	f7f0 fe9d 	bl	80005f8 <__aeabi_dmul>
 800f8be:	e9cd 0100 	strd	r0, r1, [sp]
 800f8c2:	e7bc      	b.n	800f83e <_dtoa_r+0x56e>
 800f8c4:	08011c18 	.word	0x08011c18
 800f8c8:	08011bf0 	.word	0x08011bf0
 800f8cc:	3ff00000 	.word	0x3ff00000
 800f8d0:	40240000 	.word	0x40240000
 800f8d4:	401c0000 	.word	0x401c0000
 800f8d8:	40140000 	.word	0x40140000
 800f8dc:	3fe00000 	.word	0x3fe00000
 800f8e0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f8e4:	465d      	mov	r5, fp
 800f8e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f8ea:	4630      	mov	r0, r6
 800f8ec:	4639      	mov	r1, r7
 800f8ee:	f7f0 ffad 	bl	800084c <__aeabi_ddiv>
 800f8f2:	f7f1 f931 	bl	8000b58 <__aeabi_d2iz>
 800f8f6:	4680      	mov	r8, r0
 800f8f8:	f7f0 fe14 	bl	8000524 <__aeabi_i2d>
 800f8fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f900:	f7f0 fe7a 	bl	80005f8 <__aeabi_dmul>
 800f904:	4602      	mov	r2, r0
 800f906:	460b      	mov	r3, r1
 800f908:	4630      	mov	r0, r6
 800f90a:	4639      	mov	r1, r7
 800f90c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800f910:	f7f0 fcba 	bl	8000288 <__aeabi_dsub>
 800f914:	f805 6b01 	strb.w	r6, [r5], #1
 800f918:	eba5 060b 	sub.w	r6, r5, fp
 800f91c:	45b1      	cmp	r9, r6
 800f91e:	4602      	mov	r2, r0
 800f920:	460b      	mov	r3, r1
 800f922:	d139      	bne.n	800f998 <_dtoa_r+0x6c8>
 800f924:	f7f0 fcb2 	bl	800028c <__adddf3>
 800f928:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f92c:	4606      	mov	r6, r0
 800f92e:	460f      	mov	r7, r1
 800f930:	f7f1 f8f2 	bl	8000b18 <__aeabi_dcmpgt>
 800f934:	b9c8      	cbnz	r0, 800f96a <_dtoa_r+0x69a>
 800f936:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f93a:	4630      	mov	r0, r6
 800f93c:	4639      	mov	r1, r7
 800f93e:	f7f1 f8c3 	bl	8000ac8 <__aeabi_dcmpeq>
 800f942:	b110      	cbz	r0, 800f94a <_dtoa_r+0x67a>
 800f944:	f018 0f01 	tst.w	r8, #1
 800f948:	d10f      	bne.n	800f96a <_dtoa_r+0x69a>
 800f94a:	9904      	ldr	r1, [sp, #16]
 800f94c:	4620      	mov	r0, r4
 800f94e:	f000 fec3 	bl	80106d8 <_Bfree>
 800f952:	2300      	movs	r3, #0
 800f954:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f956:	702b      	strb	r3, [r5, #0]
 800f958:	f10a 0301 	add.w	r3, sl, #1
 800f95c:	6013      	str	r3, [r2, #0]
 800f95e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f960:	2b00      	cmp	r3, #0
 800f962:	f000 8241 	beq.w	800fde8 <_dtoa_r+0xb18>
 800f966:	601d      	str	r5, [r3, #0]
 800f968:	e23e      	b.n	800fde8 <_dtoa_r+0xb18>
 800f96a:	f8cd a020 	str.w	sl, [sp, #32]
 800f96e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f972:	2a39      	cmp	r2, #57	; 0x39
 800f974:	f105 33ff 	add.w	r3, r5, #4294967295
 800f978:	d108      	bne.n	800f98c <_dtoa_r+0x6bc>
 800f97a:	459b      	cmp	fp, r3
 800f97c:	d10a      	bne.n	800f994 <_dtoa_r+0x6c4>
 800f97e:	9b08      	ldr	r3, [sp, #32]
 800f980:	3301      	adds	r3, #1
 800f982:	9308      	str	r3, [sp, #32]
 800f984:	2330      	movs	r3, #48	; 0x30
 800f986:	f88b 3000 	strb.w	r3, [fp]
 800f98a:	465b      	mov	r3, fp
 800f98c:	781a      	ldrb	r2, [r3, #0]
 800f98e:	3201      	adds	r2, #1
 800f990:	701a      	strb	r2, [r3, #0]
 800f992:	e78c      	b.n	800f8ae <_dtoa_r+0x5de>
 800f994:	461d      	mov	r5, r3
 800f996:	e7ea      	b.n	800f96e <_dtoa_r+0x69e>
 800f998:	2200      	movs	r2, #0
 800f99a:	4b9b      	ldr	r3, [pc, #620]	; (800fc08 <_dtoa_r+0x938>)
 800f99c:	f7f0 fe2c 	bl	80005f8 <__aeabi_dmul>
 800f9a0:	2200      	movs	r2, #0
 800f9a2:	2300      	movs	r3, #0
 800f9a4:	4606      	mov	r6, r0
 800f9a6:	460f      	mov	r7, r1
 800f9a8:	f7f1 f88e 	bl	8000ac8 <__aeabi_dcmpeq>
 800f9ac:	2800      	cmp	r0, #0
 800f9ae:	d09a      	beq.n	800f8e6 <_dtoa_r+0x616>
 800f9b0:	e7cb      	b.n	800f94a <_dtoa_r+0x67a>
 800f9b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f9b4:	2a00      	cmp	r2, #0
 800f9b6:	f000 808b 	beq.w	800fad0 <_dtoa_r+0x800>
 800f9ba:	9a06      	ldr	r2, [sp, #24]
 800f9bc:	2a01      	cmp	r2, #1
 800f9be:	dc6e      	bgt.n	800fa9e <_dtoa_r+0x7ce>
 800f9c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f9c2:	2a00      	cmp	r2, #0
 800f9c4:	d067      	beq.n	800fa96 <_dtoa_r+0x7c6>
 800f9c6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f9ca:	9f07      	ldr	r7, [sp, #28]
 800f9cc:	9d05      	ldr	r5, [sp, #20]
 800f9ce:	9a05      	ldr	r2, [sp, #20]
 800f9d0:	2101      	movs	r1, #1
 800f9d2:	441a      	add	r2, r3
 800f9d4:	4620      	mov	r0, r4
 800f9d6:	9205      	str	r2, [sp, #20]
 800f9d8:	4498      	add	r8, r3
 800f9da:	f000 ff5b 	bl	8010894 <__i2b>
 800f9de:	4606      	mov	r6, r0
 800f9e0:	2d00      	cmp	r5, #0
 800f9e2:	dd0c      	ble.n	800f9fe <_dtoa_r+0x72e>
 800f9e4:	f1b8 0f00 	cmp.w	r8, #0
 800f9e8:	dd09      	ble.n	800f9fe <_dtoa_r+0x72e>
 800f9ea:	4545      	cmp	r5, r8
 800f9ec:	9a05      	ldr	r2, [sp, #20]
 800f9ee:	462b      	mov	r3, r5
 800f9f0:	bfa8      	it	ge
 800f9f2:	4643      	movge	r3, r8
 800f9f4:	1ad2      	subs	r2, r2, r3
 800f9f6:	9205      	str	r2, [sp, #20]
 800f9f8:	1aed      	subs	r5, r5, r3
 800f9fa:	eba8 0803 	sub.w	r8, r8, r3
 800f9fe:	9b07      	ldr	r3, [sp, #28]
 800fa00:	b1eb      	cbz	r3, 800fa3e <_dtoa_r+0x76e>
 800fa02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d067      	beq.n	800fad8 <_dtoa_r+0x808>
 800fa08:	b18f      	cbz	r7, 800fa2e <_dtoa_r+0x75e>
 800fa0a:	4631      	mov	r1, r6
 800fa0c:	463a      	mov	r2, r7
 800fa0e:	4620      	mov	r0, r4
 800fa10:	f000 ffe0 	bl	80109d4 <__pow5mult>
 800fa14:	9a04      	ldr	r2, [sp, #16]
 800fa16:	4601      	mov	r1, r0
 800fa18:	4606      	mov	r6, r0
 800fa1a:	4620      	mov	r0, r4
 800fa1c:	f000 ff43 	bl	80108a6 <__multiply>
 800fa20:	9904      	ldr	r1, [sp, #16]
 800fa22:	9008      	str	r0, [sp, #32]
 800fa24:	4620      	mov	r0, r4
 800fa26:	f000 fe57 	bl	80106d8 <_Bfree>
 800fa2a:	9b08      	ldr	r3, [sp, #32]
 800fa2c:	9304      	str	r3, [sp, #16]
 800fa2e:	9b07      	ldr	r3, [sp, #28]
 800fa30:	1bda      	subs	r2, r3, r7
 800fa32:	d004      	beq.n	800fa3e <_dtoa_r+0x76e>
 800fa34:	9904      	ldr	r1, [sp, #16]
 800fa36:	4620      	mov	r0, r4
 800fa38:	f000 ffcc 	bl	80109d4 <__pow5mult>
 800fa3c:	9004      	str	r0, [sp, #16]
 800fa3e:	2101      	movs	r1, #1
 800fa40:	4620      	mov	r0, r4
 800fa42:	f000 ff27 	bl	8010894 <__i2b>
 800fa46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fa48:	4607      	mov	r7, r0
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	f000 81d0 	beq.w	800fdf0 <_dtoa_r+0xb20>
 800fa50:	461a      	mov	r2, r3
 800fa52:	4601      	mov	r1, r0
 800fa54:	4620      	mov	r0, r4
 800fa56:	f000 ffbd 	bl	80109d4 <__pow5mult>
 800fa5a:	9b06      	ldr	r3, [sp, #24]
 800fa5c:	2b01      	cmp	r3, #1
 800fa5e:	4607      	mov	r7, r0
 800fa60:	dc40      	bgt.n	800fae4 <_dtoa_r+0x814>
 800fa62:	9b00      	ldr	r3, [sp, #0]
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d139      	bne.n	800fadc <_dtoa_r+0x80c>
 800fa68:	9b01      	ldr	r3, [sp, #4]
 800fa6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d136      	bne.n	800fae0 <_dtoa_r+0x810>
 800fa72:	9b01      	ldr	r3, [sp, #4]
 800fa74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fa78:	0d1b      	lsrs	r3, r3, #20
 800fa7a:	051b      	lsls	r3, r3, #20
 800fa7c:	b12b      	cbz	r3, 800fa8a <_dtoa_r+0x7ba>
 800fa7e:	9b05      	ldr	r3, [sp, #20]
 800fa80:	3301      	adds	r3, #1
 800fa82:	9305      	str	r3, [sp, #20]
 800fa84:	f108 0801 	add.w	r8, r8, #1
 800fa88:	2301      	movs	r3, #1
 800fa8a:	9307      	str	r3, [sp, #28]
 800fa8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d12a      	bne.n	800fae8 <_dtoa_r+0x818>
 800fa92:	2001      	movs	r0, #1
 800fa94:	e030      	b.n	800faf8 <_dtoa_r+0x828>
 800fa96:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fa98:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800fa9c:	e795      	b.n	800f9ca <_dtoa_r+0x6fa>
 800fa9e:	9b07      	ldr	r3, [sp, #28]
 800faa0:	f109 37ff 	add.w	r7, r9, #4294967295
 800faa4:	42bb      	cmp	r3, r7
 800faa6:	bfbf      	itttt	lt
 800faa8:	9b07      	ldrlt	r3, [sp, #28]
 800faaa:	9707      	strlt	r7, [sp, #28]
 800faac:	1afa      	sublt	r2, r7, r3
 800faae:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800fab0:	bfbb      	ittet	lt
 800fab2:	189b      	addlt	r3, r3, r2
 800fab4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800fab6:	1bdf      	subge	r7, r3, r7
 800fab8:	2700      	movlt	r7, #0
 800faba:	f1b9 0f00 	cmp.w	r9, #0
 800fabe:	bfb5      	itete	lt
 800fac0:	9b05      	ldrlt	r3, [sp, #20]
 800fac2:	9d05      	ldrge	r5, [sp, #20]
 800fac4:	eba3 0509 	sublt.w	r5, r3, r9
 800fac8:	464b      	movge	r3, r9
 800faca:	bfb8      	it	lt
 800facc:	2300      	movlt	r3, #0
 800face:	e77e      	b.n	800f9ce <_dtoa_r+0x6fe>
 800fad0:	9f07      	ldr	r7, [sp, #28]
 800fad2:	9d05      	ldr	r5, [sp, #20]
 800fad4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800fad6:	e783      	b.n	800f9e0 <_dtoa_r+0x710>
 800fad8:	9a07      	ldr	r2, [sp, #28]
 800fada:	e7ab      	b.n	800fa34 <_dtoa_r+0x764>
 800fadc:	2300      	movs	r3, #0
 800fade:	e7d4      	b.n	800fa8a <_dtoa_r+0x7ba>
 800fae0:	9b00      	ldr	r3, [sp, #0]
 800fae2:	e7d2      	b.n	800fa8a <_dtoa_r+0x7ba>
 800fae4:	2300      	movs	r3, #0
 800fae6:	9307      	str	r3, [sp, #28]
 800fae8:	693b      	ldr	r3, [r7, #16]
 800faea:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800faee:	6918      	ldr	r0, [r3, #16]
 800faf0:	f000 fe82 	bl	80107f8 <__hi0bits>
 800faf4:	f1c0 0020 	rsb	r0, r0, #32
 800faf8:	4440      	add	r0, r8
 800fafa:	f010 001f 	ands.w	r0, r0, #31
 800fafe:	d047      	beq.n	800fb90 <_dtoa_r+0x8c0>
 800fb00:	f1c0 0320 	rsb	r3, r0, #32
 800fb04:	2b04      	cmp	r3, #4
 800fb06:	dd3b      	ble.n	800fb80 <_dtoa_r+0x8b0>
 800fb08:	9b05      	ldr	r3, [sp, #20]
 800fb0a:	f1c0 001c 	rsb	r0, r0, #28
 800fb0e:	4403      	add	r3, r0
 800fb10:	9305      	str	r3, [sp, #20]
 800fb12:	4405      	add	r5, r0
 800fb14:	4480      	add	r8, r0
 800fb16:	9b05      	ldr	r3, [sp, #20]
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	dd05      	ble.n	800fb28 <_dtoa_r+0x858>
 800fb1c:	461a      	mov	r2, r3
 800fb1e:	9904      	ldr	r1, [sp, #16]
 800fb20:	4620      	mov	r0, r4
 800fb22:	f000 ffa5 	bl	8010a70 <__lshift>
 800fb26:	9004      	str	r0, [sp, #16]
 800fb28:	f1b8 0f00 	cmp.w	r8, #0
 800fb2c:	dd05      	ble.n	800fb3a <_dtoa_r+0x86a>
 800fb2e:	4639      	mov	r1, r7
 800fb30:	4642      	mov	r2, r8
 800fb32:	4620      	mov	r0, r4
 800fb34:	f000 ff9c 	bl	8010a70 <__lshift>
 800fb38:	4607      	mov	r7, r0
 800fb3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fb3c:	b353      	cbz	r3, 800fb94 <_dtoa_r+0x8c4>
 800fb3e:	4639      	mov	r1, r7
 800fb40:	9804      	ldr	r0, [sp, #16]
 800fb42:	f000 ffe9 	bl	8010b18 <__mcmp>
 800fb46:	2800      	cmp	r0, #0
 800fb48:	da24      	bge.n	800fb94 <_dtoa_r+0x8c4>
 800fb4a:	2300      	movs	r3, #0
 800fb4c:	220a      	movs	r2, #10
 800fb4e:	9904      	ldr	r1, [sp, #16]
 800fb50:	4620      	mov	r0, r4
 800fb52:	f000 fdd8 	bl	8010706 <__multadd>
 800fb56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb58:	9004      	str	r0, [sp, #16]
 800fb5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	f000 814d 	beq.w	800fdfe <_dtoa_r+0xb2e>
 800fb64:	2300      	movs	r3, #0
 800fb66:	4631      	mov	r1, r6
 800fb68:	220a      	movs	r2, #10
 800fb6a:	4620      	mov	r0, r4
 800fb6c:	f000 fdcb 	bl	8010706 <__multadd>
 800fb70:	9b02      	ldr	r3, [sp, #8]
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	4606      	mov	r6, r0
 800fb76:	dc4f      	bgt.n	800fc18 <_dtoa_r+0x948>
 800fb78:	9b06      	ldr	r3, [sp, #24]
 800fb7a:	2b02      	cmp	r3, #2
 800fb7c:	dd4c      	ble.n	800fc18 <_dtoa_r+0x948>
 800fb7e:	e011      	b.n	800fba4 <_dtoa_r+0x8d4>
 800fb80:	d0c9      	beq.n	800fb16 <_dtoa_r+0x846>
 800fb82:	9a05      	ldr	r2, [sp, #20]
 800fb84:	331c      	adds	r3, #28
 800fb86:	441a      	add	r2, r3
 800fb88:	9205      	str	r2, [sp, #20]
 800fb8a:	441d      	add	r5, r3
 800fb8c:	4498      	add	r8, r3
 800fb8e:	e7c2      	b.n	800fb16 <_dtoa_r+0x846>
 800fb90:	4603      	mov	r3, r0
 800fb92:	e7f6      	b.n	800fb82 <_dtoa_r+0x8b2>
 800fb94:	f1b9 0f00 	cmp.w	r9, #0
 800fb98:	dc38      	bgt.n	800fc0c <_dtoa_r+0x93c>
 800fb9a:	9b06      	ldr	r3, [sp, #24]
 800fb9c:	2b02      	cmp	r3, #2
 800fb9e:	dd35      	ble.n	800fc0c <_dtoa_r+0x93c>
 800fba0:	f8cd 9008 	str.w	r9, [sp, #8]
 800fba4:	9b02      	ldr	r3, [sp, #8]
 800fba6:	b963      	cbnz	r3, 800fbc2 <_dtoa_r+0x8f2>
 800fba8:	4639      	mov	r1, r7
 800fbaa:	2205      	movs	r2, #5
 800fbac:	4620      	mov	r0, r4
 800fbae:	f000 fdaa 	bl	8010706 <__multadd>
 800fbb2:	4601      	mov	r1, r0
 800fbb4:	4607      	mov	r7, r0
 800fbb6:	9804      	ldr	r0, [sp, #16]
 800fbb8:	f000 ffae 	bl	8010b18 <__mcmp>
 800fbbc:	2800      	cmp	r0, #0
 800fbbe:	f73f adcc 	bgt.w	800f75a <_dtoa_r+0x48a>
 800fbc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fbc4:	465d      	mov	r5, fp
 800fbc6:	ea6f 0a03 	mvn.w	sl, r3
 800fbca:	f04f 0900 	mov.w	r9, #0
 800fbce:	4639      	mov	r1, r7
 800fbd0:	4620      	mov	r0, r4
 800fbd2:	f000 fd81 	bl	80106d8 <_Bfree>
 800fbd6:	2e00      	cmp	r6, #0
 800fbd8:	f43f aeb7 	beq.w	800f94a <_dtoa_r+0x67a>
 800fbdc:	f1b9 0f00 	cmp.w	r9, #0
 800fbe0:	d005      	beq.n	800fbee <_dtoa_r+0x91e>
 800fbe2:	45b1      	cmp	r9, r6
 800fbe4:	d003      	beq.n	800fbee <_dtoa_r+0x91e>
 800fbe6:	4649      	mov	r1, r9
 800fbe8:	4620      	mov	r0, r4
 800fbea:	f000 fd75 	bl	80106d8 <_Bfree>
 800fbee:	4631      	mov	r1, r6
 800fbf0:	4620      	mov	r0, r4
 800fbf2:	f000 fd71 	bl	80106d8 <_Bfree>
 800fbf6:	e6a8      	b.n	800f94a <_dtoa_r+0x67a>
 800fbf8:	2700      	movs	r7, #0
 800fbfa:	463e      	mov	r6, r7
 800fbfc:	e7e1      	b.n	800fbc2 <_dtoa_r+0x8f2>
 800fbfe:	f8dd a020 	ldr.w	sl, [sp, #32]
 800fc02:	463e      	mov	r6, r7
 800fc04:	e5a9      	b.n	800f75a <_dtoa_r+0x48a>
 800fc06:	bf00      	nop
 800fc08:	40240000 	.word	0x40240000
 800fc0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fc0e:	f8cd 9008 	str.w	r9, [sp, #8]
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	f000 80fa 	beq.w	800fe0c <_dtoa_r+0xb3c>
 800fc18:	2d00      	cmp	r5, #0
 800fc1a:	dd05      	ble.n	800fc28 <_dtoa_r+0x958>
 800fc1c:	4631      	mov	r1, r6
 800fc1e:	462a      	mov	r2, r5
 800fc20:	4620      	mov	r0, r4
 800fc22:	f000 ff25 	bl	8010a70 <__lshift>
 800fc26:	4606      	mov	r6, r0
 800fc28:	9b07      	ldr	r3, [sp, #28]
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d04c      	beq.n	800fcc8 <_dtoa_r+0x9f8>
 800fc2e:	6871      	ldr	r1, [r6, #4]
 800fc30:	4620      	mov	r0, r4
 800fc32:	f000 fd1d 	bl	8010670 <_Balloc>
 800fc36:	6932      	ldr	r2, [r6, #16]
 800fc38:	3202      	adds	r2, #2
 800fc3a:	4605      	mov	r5, r0
 800fc3c:	0092      	lsls	r2, r2, #2
 800fc3e:	f106 010c 	add.w	r1, r6, #12
 800fc42:	300c      	adds	r0, #12
 800fc44:	f7fd fcc0 	bl	800d5c8 <memcpy>
 800fc48:	2201      	movs	r2, #1
 800fc4a:	4629      	mov	r1, r5
 800fc4c:	4620      	mov	r0, r4
 800fc4e:	f000 ff0f 	bl	8010a70 <__lshift>
 800fc52:	9b00      	ldr	r3, [sp, #0]
 800fc54:	f8cd b014 	str.w	fp, [sp, #20]
 800fc58:	f003 0301 	and.w	r3, r3, #1
 800fc5c:	46b1      	mov	r9, r6
 800fc5e:	9307      	str	r3, [sp, #28]
 800fc60:	4606      	mov	r6, r0
 800fc62:	4639      	mov	r1, r7
 800fc64:	9804      	ldr	r0, [sp, #16]
 800fc66:	f7ff faa5 	bl	800f1b4 <quorem>
 800fc6a:	4649      	mov	r1, r9
 800fc6c:	4605      	mov	r5, r0
 800fc6e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800fc72:	9804      	ldr	r0, [sp, #16]
 800fc74:	f000 ff50 	bl	8010b18 <__mcmp>
 800fc78:	4632      	mov	r2, r6
 800fc7a:	9000      	str	r0, [sp, #0]
 800fc7c:	4639      	mov	r1, r7
 800fc7e:	4620      	mov	r0, r4
 800fc80:	f000 ff64 	bl	8010b4c <__mdiff>
 800fc84:	68c3      	ldr	r3, [r0, #12]
 800fc86:	4602      	mov	r2, r0
 800fc88:	bb03      	cbnz	r3, 800fccc <_dtoa_r+0x9fc>
 800fc8a:	4601      	mov	r1, r0
 800fc8c:	9008      	str	r0, [sp, #32]
 800fc8e:	9804      	ldr	r0, [sp, #16]
 800fc90:	f000 ff42 	bl	8010b18 <__mcmp>
 800fc94:	9a08      	ldr	r2, [sp, #32]
 800fc96:	4603      	mov	r3, r0
 800fc98:	4611      	mov	r1, r2
 800fc9a:	4620      	mov	r0, r4
 800fc9c:	9308      	str	r3, [sp, #32]
 800fc9e:	f000 fd1b 	bl	80106d8 <_Bfree>
 800fca2:	9b08      	ldr	r3, [sp, #32]
 800fca4:	b9a3      	cbnz	r3, 800fcd0 <_dtoa_r+0xa00>
 800fca6:	9a06      	ldr	r2, [sp, #24]
 800fca8:	b992      	cbnz	r2, 800fcd0 <_dtoa_r+0xa00>
 800fcaa:	9a07      	ldr	r2, [sp, #28]
 800fcac:	b982      	cbnz	r2, 800fcd0 <_dtoa_r+0xa00>
 800fcae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800fcb2:	d029      	beq.n	800fd08 <_dtoa_r+0xa38>
 800fcb4:	9b00      	ldr	r3, [sp, #0]
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	dd01      	ble.n	800fcbe <_dtoa_r+0x9ee>
 800fcba:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800fcbe:	9b05      	ldr	r3, [sp, #20]
 800fcc0:	1c5d      	adds	r5, r3, #1
 800fcc2:	f883 8000 	strb.w	r8, [r3]
 800fcc6:	e782      	b.n	800fbce <_dtoa_r+0x8fe>
 800fcc8:	4630      	mov	r0, r6
 800fcca:	e7c2      	b.n	800fc52 <_dtoa_r+0x982>
 800fccc:	2301      	movs	r3, #1
 800fcce:	e7e3      	b.n	800fc98 <_dtoa_r+0x9c8>
 800fcd0:	9a00      	ldr	r2, [sp, #0]
 800fcd2:	2a00      	cmp	r2, #0
 800fcd4:	db04      	blt.n	800fce0 <_dtoa_r+0xa10>
 800fcd6:	d125      	bne.n	800fd24 <_dtoa_r+0xa54>
 800fcd8:	9a06      	ldr	r2, [sp, #24]
 800fcda:	bb1a      	cbnz	r2, 800fd24 <_dtoa_r+0xa54>
 800fcdc:	9a07      	ldr	r2, [sp, #28]
 800fcde:	bb0a      	cbnz	r2, 800fd24 <_dtoa_r+0xa54>
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	ddec      	ble.n	800fcbe <_dtoa_r+0x9ee>
 800fce4:	2201      	movs	r2, #1
 800fce6:	9904      	ldr	r1, [sp, #16]
 800fce8:	4620      	mov	r0, r4
 800fcea:	f000 fec1 	bl	8010a70 <__lshift>
 800fcee:	4639      	mov	r1, r7
 800fcf0:	9004      	str	r0, [sp, #16]
 800fcf2:	f000 ff11 	bl	8010b18 <__mcmp>
 800fcf6:	2800      	cmp	r0, #0
 800fcf8:	dc03      	bgt.n	800fd02 <_dtoa_r+0xa32>
 800fcfa:	d1e0      	bne.n	800fcbe <_dtoa_r+0x9ee>
 800fcfc:	f018 0f01 	tst.w	r8, #1
 800fd00:	d0dd      	beq.n	800fcbe <_dtoa_r+0x9ee>
 800fd02:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800fd06:	d1d8      	bne.n	800fcba <_dtoa_r+0x9ea>
 800fd08:	9b05      	ldr	r3, [sp, #20]
 800fd0a:	9a05      	ldr	r2, [sp, #20]
 800fd0c:	1c5d      	adds	r5, r3, #1
 800fd0e:	2339      	movs	r3, #57	; 0x39
 800fd10:	7013      	strb	r3, [r2, #0]
 800fd12:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fd16:	2b39      	cmp	r3, #57	; 0x39
 800fd18:	f105 32ff 	add.w	r2, r5, #4294967295
 800fd1c:	d04f      	beq.n	800fdbe <_dtoa_r+0xaee>
 800fd1e:	3301      	adds	r3, #1
 800fd20:	7013      	strb	r3, [r2, #0]
 800fd22:	e754      	b.n	800fbce <_dtoa_r+0x8fe>
 800fd24:	9a05      	ldr	r2, [sp, #20]
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	f102 0501 	add.w	r5, r2, #1
 800fd2c:	dd06      	ble.n	800fd3c <_dtoa_r+0xa6c>
 800fd2e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800fd32:	d0e9      	beq.n	800fd08 <_dtoa_r+0xa38>
 800fd34:	f108 0801 	add.w	r8, r8, #1
 800fd38:	9b05      	ldr	r3, [sp, #20]
 800fd3a:	e7c2      	b.n	800fcc2 <_dtoa_r+0x9f2>
 800fd3c:	9a02      	ldr	r2, [sp, #8]
 800fd3e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800fd42:	eba5 030b 	sub.w	r3, r5, fp
 800fd46:	4293      	cmp	r3, r2
 800fd48:	d021      	beq.n	800fd8e <_dtoa_r+0xabe>
 800fd4a:	2300      	movs	r3, #0
 800fd4c:	220a      	movs	r2, #10
 800fd4e:	9904      	ldr	r1, [sp, #16]
 800fd50:	4620      	mov	r0, r4
 800fd52:	f000 fcd8 	bl	8010706 <__multadd>
 800fd56:	45b1      	cmp	r9, r6
 800fd58:	9004      	str	r0, [sp, #16]
 800fd5a:	f04f 0300 	mov.w	r3, #0
 800fd5e:	f04f 020a 	mov.w	r2, #10
 800fd62:	4649      	mov	r1, r9
 800fd64:	4620      	mov	r0, r4
 800fd66:	d105      	bne.n	800fd74 <_dtoa_r+0xaa4>
 800fd68:	f000 fccd 	bl	8010706 <__multadd>
 800fd6c:	4681      	mov	r9, r0
 800fd6e:	4606      	mov	r6, r0
 800fd70:	9505      	str	r5, [sp, #20]
 800fd72:	e776      	b.n	800fc62 <_dtoa_r+0x992>
 800fd74:	f000 fcc7 	bl	8010706 <__multadd>
 800fd78:	4631      	mov	r1, r6
 800fd7a:	4681      	mov	r9, r0
 800fd7c:	2300      	movs	r3, #0
 800fd7e:	220a      	movs	r2, #10
 800fd80:	4620      	mov	r0, r4
 800fd82:	f000 fcc0 	bl	8010706 <__multadd>
 800fd86:	4606      	mov	r6, r0
 800fd88:	e7f2      	b.n	800fd70 <_dtoa_r+0xaa0>
 800fd8a:	f04f 0900 	mov.w	r9, #0
 800fd8e:	2201      	movs	r2, #1
 800fd90:	9904      	ldr	r1, [sp, #16]
 800fd92:	4620      	mov	r0, r4
 800fd94:	f000 fe6c 	bl	8010a70 <__lshift>
 800fd98:	4639      	mov	r1, r7
 800fd9a:	9004      	str	r0, [sp, #16]
 800fd9c:	f000 febc 	bl	8010b18 <__mcmp>
 800fda0:	2800      	cmp	r0, #0
 800fda2:	dcb6      	bgt.n	800fd12 <_dtoa_r+0xa42>
 800fda4:	d102      	bne.n	800fdac <_dtoa_r+0xadc>
 800fda6:	f018 0f01 	tst.w	r8, #1
 800fdaa:	d1b2      	bne.n	800fd12 <_dtoa_r+0xa42>
 800fdac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fdb0:	2b30      	cmp	r3, #48	; 0x30
 800fdb2:	f105 32ff 	add.w	r2, r5, #4294967295
 800fdb6:	f47f af0a 	bne.w	800fbce <_dtoa_r+0x8fe>
 800fdba:	4615      	mov	r5, r2
 800fdbc:	e7f6      	b.n	800fdac <_dtoa_r+0xadc>
 800fdbe:	4593      	cmp	fp, r2
 800fdc0:	d105      	bne.n	800fdce <_dtoa_r+0xafe>
 800fdc2:	2331      	movs	r3, #49	; 0x31
 800fdc4:	f10a 0a01 	add.w	sl, sl, #1
 800fdc8:	f88b 3000 	strb.w	r3, [fp]
 800fdcc:	e6ff      	b.n	800fbce <_dtoa_r+0x8fe>
 800fdce:	4615      	mov	r5, r2
 800fdd0:	e79f      	b.n	800fd12 <_dtoa_r+0xa42>
 800fdd2:	f8df b064 	ldr.w	fp, [pc, #100]	; 800fe38 <_dtoa_r+0xb68>
 800fdd6:	e007      	b.n	800fde8 <_dtoa_r+0xb18>
 800fdd8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fdda:	f8df b060 	ldr.w	fp, [pc, #96]	; 800fe3c <_dtoa_r+0xb6c>
 800fdde:	b11b      	cbz	r3, 800fde8 <_dtoa_r+0xb18>
 800fde0:	f10b 0308 	add.w	r3, fp, #8
 800fde4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fde6:	6013      	str	r3, [r2, #0]
 800fde8:	4658      	mov	r0, fp
 800fdea:	b017      	add	sp, #92	; 0x5c
 800fdec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdf0:	9b06      	ldr	r3, [sp, #24]
 800fdf2:	2b01      	cmp	r3, #1
 800fdf4:	f77f ae35 	ble.w	800fa62 <_dtoa_r+0x792>
 800fdf8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fdfa:	9307      	str	r3, [sp, #28]
 800fdfc:	e649      	b.n	800fa92 <_dtoa_r+0x7c2>
 800fdfe:	9b02      	ldr	r3, [sp, #8]
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	dc03      	bgt.n	800fe0c <_dtoa_r+0xb3c>
 800fe04:	9b06      	ldr	r3, [sp, #24]
 800fe06:	2b02      	cmp	r3, #2
 800fe08:	f73f aecc 	bgt.w	800fba4 <_dtoa_r+0x8d4>
 800fe0c:	465d      	mov	r5, fp
 800fe0e:	4639      	mov	r1, r7
 800fe10:	9804      	ldr	r0, [sp, #16]
 800fe12:	f7ff f9cf 	bl	800f1b4 <quorem>
 800fe16:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800fe1a:	f805 8b01 	strb.w	r8, [r5], #1
 800fe1e:	9a02      	ldr	r2, [sp, #8]
 800fe20:	eba5 030b 	sub.w	r3, r5, fp
 800fe24:	429a      	cmp	r2, r3
 800fe26:	ddb0      	ble.n	800fd8a <_dtoa_r+0xaba>
 800fe28:	2300      	movs	r3, #0
 800fe2a:	220a      	movs	r2, #10
 800fe2c:	9904      	ldr	r1, [sp, #16]
 800fe2e:	4620      	mov	r0, r4
 800fe30:	f000 fc69 	bl	8010706 <__multadd>
 800fe34:	9004      	str	r0, [sp, #16]
 800fe36:	e7ea      	b.n	800fe0e <_dtoa_r+0xb3e>
 800fe38:	08011af4 	.word	0x08011af4
 800fe3c:	08011b70 	.word	0x08011b70

0800fe40 <std>:
 800fe40:	2300      	movs	r3, #0
 800fe42:	b510      	push	{r4, lr}
 800fe44:	4604      	mov	r4, r0
 800fe46:	e9c0 3300 	strd	r3, r3, [r0]
 800fe4a:	6083      	str	r3, [r0, #8]
 800fe4c:	8181      	strh	r1, [r0, #12]
 800fe4e:	6643      	str	r3, [r0, #100]	; 0x64
 800fe50:	81c2      	strh	r2, [r0, #14]
 800fe52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fe56:	6183      	str	r3, [r0, #24]
 800fe58:	4619      	mov	r1, r3
 800fe5a:	2208      	movs	r2, #8
 800fe5c:	305c      	adds	r0, #92	; 0x5c
 800fe5e:	f7fd fbbe 	bl	800d5de <memset>
 800fe62:	4b05      	ldr	r3, [pc, #20]	; (800fe78 <std+0x38>)
 800fe64:	6263      	str	r3, [r4, #36]	; 0x24
 800fe66:	4b05      	ldr	r3, [pc, #20]	; (800fe7c <std+0x3c>)
 800fe68:	62a3      	str	r3, [r4, #40]	; 0x28
 800fe6a:	4b05      	ldr	r3, [pc, #20]	; (800fe80 <std+0x40>)
 800fe6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fe6e:	4b05      	ldr	r3, [pc, #20]	; (800fe84 <std+0x44>)
 800fe70:	6224      	str	r4, [r4, #32]
 800fe72:	6323      	str	r3, [r4, #48]	; 0x30
 800fe74:	bd10      	pop	{r4, pc}
 800fe76:	bf00      	nop
 800fe78:	080113b1 	.word	0x080113b1
 800fe7c:	080113d3 	.word	0x080113d3
 800fe80:	0801140b 	.word	0x0801140b
 800fe84:	0801142f 	.word	0x0801142f

0800fe88 <_cleanup_r>:
 800fe88:	4901      	ldr	r1, [pc, #4]	; (800fe90 <_cleanup_r+0x8>)
 800fe8a:	f000 b885 	b.w	800ff98 <_fwalk_reent>
 800fe8e:	bf00      	nop
 800fe90:	08011749 	.word	0x08011749

0800fe94 <__sfmoreglue>:
 800fe94:	b570      	push	{r4, r5, r6, lr}
 800fe96:	1e4a      	subs	r2, r1, #1
 800fe98:	2568      	movs	r5, #104	; 0x68
 800fe9a:	4355      	muls	r5, r2
 800fe9c:	460e      	mov	r6, r1
 800fe9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fea2:	f7fd fbf3 	bl	800d68c <_malloc_r>
 800fea6:	4604      	mov	r4, r0
 800fea8:	b140      	cbz	r0, 800febc <__sfmoreglue+0x28>
 800feaa:	2100      	movs	r1, #0
 800feac:	e9c0 1600 	strd	r1, r6, [r0]
 800feb0:	300c      	adds	r0, #12
 800feb2:	60a0      	str	r0, [r4, #8]
 800feb4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800feb8:	f7fd fb91 	bl	800d5de <memset>
 800febc:	4620      	mov	r0, r4
 800febe:	bd70      	pop	{r4, r5, r6, pc}

0800fec0 <__sinit>:
 800fec0:	6983      	ldr	r3, [r0, #24]
 800fec2:	b510      	push	{r4, lr}
 800fec4:	4604      	mov	r4, r0
 800fec6:	bb33      	cbnz	r3, 800ff16 <__sinit+0x56>
 800fec8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800fecc:	6503      	str	r3, [r0, #80]	; 0x50
 800fece:	4b12      	ldr	r3, [pc, #72]	; (800ff18 <__sinit+0x58>)
 800fed0:	4a12      	ldr	r2, [pc, #72]	; (800ff1c <__sinit+0x5c>)
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	6282      	str	r2, [r0, #40]	; 0x28
 800fed6:	4298      	cmp	r0, r3
 800fed8:	bf04      	itt	eq
 800feda:	2301      	moveq	r3, #1
 800fedc:	6183      	streq	r3, [r0, #24]
 800fede:	f000 f81f 	bl	800ff20 <__sfp>
 800fee2:	6060      	str	r0, [r4, #4]
 800fee4:	4620      	mov	r0, r4
 800fee6:	f000 f81b 	bl	800ff20 <__sfp>
 800feea:	60a0      	str	r0, [r4, #8]
 800feec:	4620      	mov	r0, r4
 800feee:	f000 f817 	bl	800ff20 <__sfp>
 800fef2:	2200      	movs	r2, #0
 800fef4:	60e0      	str	r0, [r4, #12]
 800fef6:	2104      	movs	r1, #4
 800fef8:	6860      	ldr	r0, [r4, #4]
 800fefa:	f7ff ffa1 	bl	800fe40 <std>
 800fefe:	2201      	movs	r2, #1
 800ff00:	2109      	movs	r1, #9
 800ff02:	68a0      	ldr	r0, [r4, #8]
 800ff04:	f7ff ff9c 	bl	800fe40 <std>
 800ff08:	2202      	movs	r2, #2
 800ff0a:	2112      	movs	r1, #18
 800ff0c:	68e0      	ldr	r0, [r4, #12]
 800ff0e:	f7ff ff97 	bl	800fe40 <std>
 800ff12:	2301      	movs	r3, #1
 800ff14:	61a3      	str	r3, [r4, #24]
 800ff16:	bd10      	pop	{r4, pc}
 800ff18:	08011ae0 	.word	0x08011ae0
 800ff1c:	0800fe89 	.word	0x0800fe89

0800ff20 <__sfp>:
 800ff20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff22:	4b1b      	ldr	r3, [pc, #108]	; (800ff90 <__sfp+0x70>)
 800ff24:	681e      	ldr	r6, [r3, #0]
 800ff26:	69b3      	ldr	r3, [r6, #24]
 800ff28:	4607      	mov	r7, r0
 800ff2a:	b913      	cbnz	r3, 800ff32 <__sfp+0x12>
 800ff2c:	4630      	mov	r0, r6
 800ff2e:	f7ff ffc7 	bl	800fec0 <__sinit>
 800ff32:	3648      	adds	r6, #72	; 0x48
 800ff34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ff38:	3b01      	subs	r3, #1
 800ff3a:	d503      	bpl.n	800ff44 <__sfp+0x24>
 800ff3c:	6833      	ldr	r3, [r6, #0]
 800ff3e:	b133      	cbz	r3, 800ff4e <__sfp+0x2e>
 800ff40:	6836      	ldr	r6, [r6, #0]
 800ff42:	e7f7      	b.n	800ff34 <__sfp+0x14>
 800ff44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ff48:	b16d      	cbz	r5, 800ff66 <__sfp+0x46>
 800ff4a:	3468      	adds	r4, #104	; 0x68
 800ff4c:	e7f4      	b.n	800ff38 <__sfp+0x18>
 800ff4e:	2104      	movs	r1, #4
 800ff50:	4638      	mov	r0, r7
 800ff52:	f7ff ff9f 	bl	800fe94 <__sfmoreglue>
 800ff56:	6030      	str	r0, [r6, #0]
 800ff58:	2800      	cmp	r0, #0
 800ff5a:	d1f1      	bne.n	800ff40 <__sfp+0x20>
 800ff5c:	230c      	movs	r3, #12
 800ff5e:	603b      	str	r3, [r7, #0]
 800ff60:	4604      	mov	r4, r0
 800ff62:	4620      	mov	r0, r4
 800ff64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff66:	4b0b      	ldr	r3, [pc, #44]	; (800ff94 <__sfp+0x74>)
 800ff68:	6665      	str	r5, [r4, #100]	; 0x64
 800ff6a:	e9c4 5500 	strd	r5, r5, [r4]
 800ff6e:	60a5      	str	r5, [r4, #8]
 800ff70:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800ff74:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800ff78:	2208      	movs	r2, #8
 800ff7a:	4629      	mov	r1, r5
 800ff7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ff80:	f7fd fb2d 	bl	800d5de <memset>
 800ff84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ff88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ff8c:	e7e9      	b.n	800ff62 <__sfp+0x42>
 800ff8e:	bf00      	nop
 800ff90:	08011ae0 	.word	0x08011ae0
 800ff94:	ffff0001 	.word	0xffff0001

0800ff98 <_fwalk_reent>:
 800ff98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff9c:	4680      	mov	r8, r0
 800ff9e:	4689      	mov	r9, r1
 800ffa0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ffa4:	2600      	movs	r6, #0
 800ffa6:	b914      	cbnz	r4, 800ffae <_fwalk_reent+0x16>
 800ffa8:	4630      	mov	r0, r6
 800ffaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ffae:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800ffb2:	3f01      	subs	r7, #1
 800ffb4:	d501      	bpl.n	800ffba <_fwalk_reent+0x22>
 800ffb6:	6824      	ldr	r4, [r4, #0]
 800ffb8:	e7f5      	b.n	800ffa6 <_fwalk_reent+0xe>
 800ffba:	89ab      	ldrh	r3, [r5, #12]
 800ffbc:	2b01      	cmp	r3, #1
 800ffbe:	d907      	bls.n	800ffd0 <_fwalk_reent+0x38>
 800ffc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ffc4:	3301      	adds	r3, #1
 800ffc6:	d003      	beq.n	800ffd0 <_fwalk_reent+0x38>
 800ffc8:	4629      	mov	r1, r5
 800ffca:	4640      	mov	r0, r8
 800ffcc:	47c8      	blx	r9
 800ffce:	4306      	orrs	r6, r0
 800ffd0:	3568      	adds	r5, #104	; 0x68
 800ffd2:	e7ee      	b.n	800ffb2 <_fwalk_reent+0x1a>

0800ffd4 <rshift>:
 800ffd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ffd6:	6906      	ldr	r6, [r0, #16]
 800ffd8:	114b      	asrs	r3, r1, #5
 800ffda:	429e      	cmp	r6, r3
 800ffdc:	f100 0414 	add.w	r4, r0, #20
 800ffe0:	dd30      	ble.n	8010044 <rshift+0x70>
 800ffe2:	f011 011f 	ands.w	r1, r1, #31
 800ffe6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800ffea:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800ffee:	d108      	bne.n	8010002 <rshift+0x2e>
 800fff0:	4621      	mov	r1, r4
 800fff2:	42b2      	cmp	r2, r6
 800fff4:	460b      	mov	r3, r1
 800fff6:	d211      	bcs.n	801001c <rshift+0x48>
 800fff8:	f852 3b04 	ldr.w	r3, [r2], #4
 800fffc:	f841 3b04 	str.w	r3, [r1], #4
 8010000:	e7f7      	b.n	800fff2 <rshift+0x1e>
 8010002:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8010006:	f1c1 0c20 	rsb	ip, r1, #32
 801000a:	40cd      	lsrs	r5, r1
 801000c:	3204      	adds	r2, #4
 801000e:	4623      	mov	r3, r4
 8010010:	42b2      	cmp	r2, r6
 8010012:	4617      	mov	r7, r2
 8010014:	d30c      	bcc.n	8010030 <rshift+0x5c>
 8010016:	601d      	str	r5, [r3, #0]
 8010018:	b105      	cbz	r5, 801001c <rshift+0x48>
 801001a:	3304      	adds	r3, #4
 801001c:	1b1a      	subs	r2, r3, r4
 801001e:	42a3      	cmp	r3, r4
 8010020:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010024:	bf08      	it	eq
 8010026:	2300      	moveq	r3, #0
 8010028:	6102      	str	r2, [r0, #16]
 801002a:	bf08      	it	eq
 801002c:	6143      	streq	r3, [r0, #20]
 801002e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010030:	683f      	ldr	r7, [r7, #0]
 8010032:	fa07 f70c 	lsl.w	r7, r7, ip
 8010036:	433d      	orrs	r5, r7
 8010038:	f843 5b04 	str.w	r5, [r3], #4
 801003c:	f852 5b04 	ldr.w	r5, [r2], #4
 8010040:	40cd      	lsrs	r5, r1
 8010042:	e7e5      	b.n	8010010 <rshift+0x3c>
 8010044:	4623      	mov	r3, r4
 8010046:	e7e9      	b.n	801001c <rshift+0x48>

08010048 <__hexdig_fun>:
 8010048:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801004c:	2b09      	cmp	r3, #9
 801004e:	d802      	bhi.n	8010056 <__hexdig_fun+0xe>
 8010050:	3820      	subs	r0, #32
 8010052:	b2c0      	uxtb	r0, r0
 8010054:	4770      	bx	lr
 8010056:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801005a:	2b05      	cmp	r3, #5
 801005c:	d801      	bhi.n	8010062 <__hexdig_fun+0x1a>
 801005e:	3847      	subs	r0, #71	; 0x47
 8010060:	e7f7      	b.n	8010052 <__hexdig_fun+0xa>
 8010062:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010066:	2b05      	cmp	r3, #5
 8010068:	d801      	bhi.n	801006e <__hexdig_fun+0x26>
 801006a:	3827      	subs	r0, #39	; 0x27
 801006c:	e7f1      	b.n	8010052 <__hexdig_fun+0xa>
 801006e:	2000      	movs	r0, #0
 8010070:	4770      	bx	lr

08010072 <__gethex>:
 8010072:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010076:	b08b      	sub	sp, #44	; 0x2c
 8010078:	468a      	mov	sl, r1
 801007a:	9002      	str	r0, [sp, #8]
 801007c:	9816      	ldr	r0, [sp, #88]	; 0x58
 801007e:	9306      	str	r3, [sp, #24]
 8010080:	4690      	mov	r8, r2
 8010082:	f000 fad0 	bl	8010626 <__localeconv_l>
 8010086:	6803      	ldr	r3, [r0, #0]
 8010088:	9303      	str	r3, [sp, #12]
 801008a:	4618      	mov	r0, r3
 801008c:	f7f0 f8a0 	bl	80001d0 <strlen>
 8010090:	9b03      	ldr	r3, [sp, #12]
 8010092:	9001      	str	r0, [sp, #4]
 8010094:	4403      	add	r3, r0
 8010096:	f04f 0b00 	mov.w	fp, #0
 801009a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801009e:	9307      	str	r3, [sp, #28]
 80100a0:	f8da 3000 	ldr.w	r3, [sl]
 80100a4:	3302      	adds	r3, #2
 80100a6:	461f      	mov	r7, r3
 80100a8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80100ac:	2830      	cmp	r0, #48	; 0x30
 80100ae:	d06c      	beq.n	801018a <__gethex+0x118>
 80100b0:	f7ff ffca 	bl	8010048 <__hexdig_fun>
 80100b4:	4604      	mov	r4, r0
 80100b6:	2800      	cmp	r0, #0
 80100b8:	d16a      	bne.n	8010190 <__gethex+0x11e>
 80100ba:	9a01      	ldr	r2, [sp, #4]
 80100bc:	9903      	ldr	r1, [sp, #12]
 80100be:	4638      	mov	r0, r7
 80100c0:	f001 f9b9 	bl	8011436 <strncmp>
 80100c4:	2800      	cmp	r0, #0
 80100c6:	d166      	bne.n	8010196 <__gethex+0x124>
 80100c8:	9b01      	ldr	r3, [sp, #4]
 80100ca:	5cf8      	ldrb	r0, [r7, r3]
 80100cc:	18fe      	adds	r6, r7, r3
 80100ce:	f7ff ffbb 	bl	8010048 <__hexdig_fun>
 80100d2:	2800      	cmp	r0, #0
 80100d4:	d062      	beq.n	801019c <__gethex+0x12a>
 80100d6:	4633      	mov	r3, r6
 80100d8:	7818      	ldrb	r0, [r3, #0]
 80100da:	2830      	cmp	r0, #48	; 0x30
 80100dc:	461f      	mov	r7, r3
 80100de:	f103 0301 	add.w	r3, r3, #1
 80100e2:	d0f9      	beq.n	80100d8 <__gethex+0x66>
 80100e4:	f7ff ffb0 	bl	8010048 <__hexdig_fun>
 80100e8:	fab0 f580 	clz	r5, r0
 80100ec:	096d      	lsrs	r5, r5, #5
 80100ee:	4634      	mov	r4, r6
 80100f0:	f04f 0b01 	mov.w	fp, #1
 80100f4:	463a      	mov	r2, r7
 80100f6:	4616      	mov	r6, r2
 80100f8:	3201      	adds	r2, #1
 80100fa:	7830      	ldrb	r0, [r6, #0]
 80100fc:	f7ff ffa4 	bl	8010048 <__hexdig_fun>
 8010100:	2800      	cmp	r0, #0
 8010102:	d1f8      	bne.n	80100f6 <__gethex+0x84>
 8010104:	9a01      	ldr	r2, [sp, #4]
 8010106:	9903      	ldr	r1, [sp, #12]
 8010108:	4630      	mov	r0, r6
 801010a:	f001 f994 	bl	8011436 <strncmp>
 801010e:	b950      	cbnz	r0, 8010126 <__gethex+0xb4>
 8010110:	b954      	cbnz	r4, 8010128 <__gethex+0xb6>
 8010112:	9b01      	ldr	r3, [sp, #4]
 8010114:	18f4      	adds	r4, r6, r3
 8010116:	4622      	mov	r2, r4
 8010118:	4616      	mov	r6, r2
 801011a:	3201      	adds	r2, #1
 801011c:	7830      	ldrb	r0, [r6, #0]
 801011e:	f7ff ff93 	bl	8010048 <__hexdig_fun>
 8010122:	2800      	cmp	r0, #0
 8010124:	d1f8      	bne.n	8010118 <__gethex+0xa6>
 8010126:	b10c      	cbz	r4, 801012c <__gethex+0xba>
 8010128:	1ba4      	subs	r4, r4, r6
 801012a:	00a4      	lsls	r4, r4, #2
 801012c:	7833      	ldrb	r3, [r6, #0]
 801012e:	2b50      	cmp	r3, #80	; 0x50
 8010130:	d001      	beq.n	8010136 <__gethex+0xc4>
 8010132:	2b70      	cmp	r3, #112	; 0x70
 8010134:	d140      	bne.n	80101b8 <__gethex+0x146>
 8010136:	7873      	ldrb	r3, [r6, #1]
 8010138:	2b2b      	cmp	r3, #43	; 0x2b
 801013a:	d031      	beq.n	80101a0 <__gethex+0x12e>
 801013c:	2b2d      	cmp	r3, #45	; 0x2d
 801013e:	d033      	beq.n	80101a8 <__gethex+0x136>
 8010140:	1c71      	adds	r1, r6, #1
 8010142:	f04f 0900 	mov.w	r9, #0
 8010146:	7808      	ldrb	r0, [r1, #0]
 8010148:	f7ff ff7e 	bl	8010048 <__hexdig_fun>
 801014c:	1e43      	subs	r3, r0, #1
 801014e:	b2db      	uxtb	r3, r3
 8010150:	2b18      	cmp	r3, #24
 8010152:	d831      	bhi.n	80101b8 <__gethex+0x146>
 8010154:	f1a0 0210 	sub.w	r2, r0, #16
 8010158:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801015c:	f7ff ff74 	bl	8010048 <__hexdig_fun>
 8010160:	1e43      	subs	r3, r0, #1
 8010162:	b2db      	uxtb	r3, r3
 8010164:	2b18      	cmp	r3, #24
 8010166:	d922      	bls.n	80101ae <__gethex+0x13c>
 8010168:	f1b9 0f00 	cmp.w	r9, #0
 801016c:	d000      	beq.n	8010170 <__gethex+0xfe>
 801016e:	4252      	negs	r2, r2
 8010170:	4414      	add	r4, r2
 8010172:	f8ca 1000 	str.w	r1, [sl]
 8010176:	b30d      	cbz	r5, 80101bc <__gethex+0x14a>
 8010178:	f1bb 0f00 	cmp.w	fp, #0
 801017c:	bf0c      	ite	eq
 801017e:	2706      	moveq	r7, #6
 8010180:	2700      	movne	r7, #0
 8010182:	4638      	mov	r0, r7
 8010184:	b00b      	add	sp, #44	; 0x2c
 8010186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801018a:	f10b 0b01 	add.w	fp, fp, #1
 801018e:	e78a      	b.n	80100a6 <__gethex+0x34>
 8010190:	2500      	movs	r5, #0
 8010192:	462c      	mov	r4, r5
 8010194:	e7ae      	b.n	80100f4 <__gethex+0x82>
 8010196:	463e      	mov	r6, r7
 8010198:	2501      	movs	r5, #1
 801019a:	e7c7      	b.n	801012c <__gethex+0xba>
 801019c:	4604      	mov	r4, r0
 801019e:	e7fb      	b.n	8010198 <__gethex+0x126>
 80101a0:	f04f 0900 	mov.w	r9, #0
 80101a4:	1cb1      	adds	r1, r6, #2
 80101a6:	e7ce      	b.n	8010146 <__gethex+0xd4>
 80101a8:	f04f 0901 	mov.w	r9, #1
 80101ac:	e7fa      	b.n	80101a4 <__gethex+0x132>
 80101ae:	230a      	movs	r3, #10
 80101b0:	fb03 0202 	mla	r2, r3, r2, r0
 80101b4:	3a10      	subs	r2, #16
 80101b6:	e7cf      	b.n	8010158 <__gethex+0xe6>
 80101b8:	4631      	mov	r1, r6
 80101ba:	e7da      	b.n	8010172 <__gethex+0x100>
 80101bc:	1bf3      	subs	r3, r6, r7
 80101be:	3b01      	subs	r3, #1
 80101c0:	4629      	mov	r1, r5
 80101c2:	2b07      	cmp	r3, #7
 80101c4:	dc49      	bgt.n	801025a <__gethex+0x1e8>
 80101c6:	9802      	ldr	r0, [sp, #8]
 80101c8:	f000 fa52 	bl	8010670 <_Balloc>
 80101cc:	9b01      	ldr	r3, [sp, #4]
 80101ce:	f100 0914 	add.w	r9, r0, #20
 80101d2:	f04f 0b00 	mov.w	fp, #0
 80101d6:	f1c3 0301 	rsb	r3, r3, #1
 80101da:	4605      	mov	r5, r0
 80101dc:	f8cd 9010 	str.w	r9, [sp, #16]
 80101e0:	46da      	mov	sl, fp
 80101e2:	9308      	str	r3, [sp, #32]
 80101e4:	42b7      	cmp	r7, r6
 80101e6:	d33b      	bcc.n	8010260 <__gethex+0x1ee>
 80101e8:	9804      	ldr	r0, [sp, #16]
 80101ea:	f840 ab04 	str.w	sl, [r0], #4
 80101ee:	eba0 0009 	sub.w	r0, r0, r9
 80101f2:	1080      	asrs	r0, r0, #2
 80101f4:	6128      	str	r0, [r5, #16]
 80101f6:	0147      	lsls	r7, r0, #5
 80101f8:	4650      	mov	r0, sl
 80101fa:	f000 fafd 	bl	80107f8 <__hi0bits>
 80101fe:	f8d8 6000 	ldr.w	r6, [r8]
 8010202:	1a3f      	subs	r7, r7, r0
 8010204:	42b7      	cmp	r7, r6
 8010206:	dd64      	ble.n	80102d2 <__gethex+0x260>
 8010208:	1bbf      	subs	r7, r7, r6
 801020a:	4639      	mov	r1, r7
 801020c:	4628      	mov	r0, r5
 801020e:	f000 fe0d 	bl	8010e2c <__any_on>
 8010212:	4682      	mov	sl, r0
 8010214:	b178      	cbz	r0, 8010236 <__gethex+0x1c4>
 8010216:	1e7b      	subs	r3, r7, #1
 8010218:	1159      	asrs	r1, r3, #5
 801021a:	f003 021f 	and.w	r2, r3, #31
 801021e:	f04f 0a01 	mov.w	sl, #1
 8010222:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8010226:	fa0a f202 	lsl.w	r2, sl, r2
 801022a:	420a      	tst	r2, r1
 801022c:	d003      	beq.n	8010236 <__gethex+0x1c4>
 801022e:	4553      	cmp	r3, sl
 8010230:	dc46      	bgt.n	80102c0 <__gethex+0x24e>
 8010232:	f04f 0a02 	mov.w	sl, #2
 8010236:	4639      	mov	r1, r7
 8010238:	4628      	mov	r0, r5
 801023a:	f7ff fecb 	bl	800ffd4 <rshift>
 801023e:	443c      	add	r4, r7
 8010240:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010244:	42a3      	cmp	r3, r4
 8010246:	da52      	bge.n	80102ee <__gethex+0x27c>
 8010248:	4629      	mov	r1, r5
 801024a:	9802      	ldr	r0, [sp, #8]
 801024c:	f000 fa44 	bl	80106d8 <_Bfree>
 8010250:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010252:	2300      	movs	r3, #0
 8010254:	6013      	str	r3, [r2, #0]
 8010256:	27a3      	movs	r7, #163	; 0xa3
 8010258:	e793      	b.n	8010182 <__gethex+0x110>
 801025a:	3101      	adds	r1, #1
 801025c:	105b      	asrs	r3, r3, #1
 801025e:	e7b0      	b.n	80101c2 <__gethex+0x150>
 8010260:	1e73      	subs	r3, r6, #1
 8010262:	9305      	str	r3, [sp, #20]
 8010264:	9a07      	ldr	r2, [sp, #28]
 8010266:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801026a:	4293      	cmp	r3, r2
 801026c:	d018      	beq.n	80102a0 <__gethex+0x22e>
 801026e:	f1bb 0f20 	cmp.w	fp, #32
 8010272:	d107      	bne.n	8010284 <__gethex+0x212>
 8010274:	9b04      	ldr	r3, [sp, #16]
 8010276:	f8c3 a000 	str.w	sl, [r3]
 801027a:	3304      	adds	r3, #4
 801027c:	f04f 0a00 	mov.w	sl, #0
 8010280:	9304      	str	r3, [sp, #16]
 8010282:	46d3      	mov	fp, sl
 8010284:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8010288:	f7ff fede 	bl	8010048 <__hexdig_fun>
 801028c:	f000 000f 	and.w	r0, r0, #15
 8010290:	fa00 f00b 	lsl.w	r0, r0, fp
 8010294:	ea4a 0a00 	orr.w	sl, sl, r0
 8010298:	f10b 0b04 	add.w	fp, fp, #4
 801029c:	9b05      	ldr	r3, [sp, #20]
 801029e:	e00d      	b.n	80102bc <__gethex+0x24a>
 80102a0:	9b05      	ldr	r3, [sp, #20]
 80102a2:	9a08      	ldr	r2, [sp, #32]
 80102a4:	4413      	add	r3, r2
 80102a6:	42bb      	cmp	r3, r7
 80102a8:	d3e1      	bcc.n	801026e <__gethex+0x1fc>
 80102aa:	4618      	mov	r0, r3
 80102ac:	9a01      	ldr	r2, [sp, #4]
 80102ae:	9903      	ldr	r1, [sp, #12]
 80102b0:	9309      	str	r3, [sp, #36]	; 0x24
 80102b2:	f001 f8c0 	bl	8011436 <strncmp>
 80102b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102b8:	2800      	cmp	r0, #0
 80102ba:	d1d8      	bne.n	801026e <__gethex+0x1fc>
 80102bc:	461e      	mov	r6, r3
 80102be:	e791      	b.n	80101e4 <__gethex+0x172>
 80102c0:	1eb9      	subs	r1, r7, #2
 80102c2:	4628      	mov	r0, r5
 80102c4:	f000 fdb2 	bl	8010e2c <__any_on>
 80102c8:	2800      	cmp	r0, #0
 80102ca:	d0b2      	beq.n	8010232 <__gethex+0x1c0>
 80102cc:	f04f 0a03 	mov.w	sl, #3
 80102d0:	e7b1      	b.n	8010236 <__gethex+0x1c4>
 80102d2:	da09      	bge.n	80102e8 <__gethex+0x276>
 80102d4:	1bf7      	subs	r7, r6, r7
 80102d6:	4629      	mov	r1, r5
 80102d8:	463a      	mov	r2, r7
 80102da:	9802      	ldr	r0, [sp, #8]
 80102dc:	f000 fbc8 	bl	8010a70 <__lshift>
 80102e0:	1be4      	subs	r4, r4, r7
 80102e2:	4605      	mov	r5, r0
 80102e4:	f100 0914 	add.w	r9, r0, #20
 80102e8:	f04f 0a00 	mov.w	sl, #0
 80102ec:	e7a8      	b.n	8010240 <__gethex+0x1ce>
 80102ee:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80102f2:	42a0      	cmp	r0, r4
 80102f4:	dd6a      	ble.n	80103cc <__gethex+0x35a>
 80102f6:	1b04      	subs	r4, r0, r4
 80102f8:	42a6      	cmp	r6, r4
 80102fa:	dc2e      	bgt.n	801035a <__gethex+0x2e8>
 80102fc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010300:	2b02      	cmp	r3, #2
 8010302:	d022      	beq.n	801034a <__gethex+0x2d8>
 8010304:	2b03      	cmp	r3, #3
 8010306:	d024      	beq.n	8010352 <__gethex+0x2e0>
 8010308:	2b01      	cmp	r3, #1
 801030a:	d115      	bne.n	8010338 <__gethex+0x2c6>
 801030c:	42a6      	cmp	r6, r4
 801030e:	d113      	bne.n	8010338 <__gethex+0x2c6>
 8010310:	2e01      	cmp	r6, #1
 8010312:	dc0b      	bgt.n	801032c <__gethex+0x2ba>
 8010314:	9a06      	ldr	r2, [sp, #24]
 8010316:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801031a:	6013      	str	r3, [r2, #0]
 801031c:	2301      	movs	r3, #1
 801031e:	612b      	str	r3, [r5, #16]
 8010320:	f8c9 3000 	str.w	r3, [r9]
 8010324:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010326:	2762      	movs	r7, #98	; 0x62
 8010328:	601d      	str	r5, [r3, #0]
 801032a:	e72a      	b.n	8010182 <__gethex+0x110>
 801032c:	1e71      	subs	r1, r6, #1
 801032e:	4628      	mov	r0, r5
 8010330:	f000 fd7c 	bl	8010e2c <__any_on>
 8010334:	2800      	cmp	r0, #0
 8010336:	d1ed      	bne.n	8010314 <__gethex+0x2a2>
 8010338:	4629      	mov	r1, r5
 801033a:	9802      	ldr	r0, [sp, #8]
 801033c:	f000 f9cc 	bl	80106d8 <_Bfree>
 8010340:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010342:	2300      	movs	r3, #0
 8010344:	6013      	str	r3, [r2, #0]
 8010346:	2750      	movs	r7, #80	; 0x50
 8010348:	e71b      	b.n	8010182 <__gethex+0x110>
 801034a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801034c:	2b00      	cmp	r3, #0
 801034e:	d0e1      	beq.n	8010314 <__gethex+0x2a2>
 8010350:	e7f2      	b.n	8010338 <__gethex+0x2c6>
 8010352:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010354:	2b00      	cmp	r3, #0
 8010356:	d1dd      	bne.n	8010314 <__gethex+0x2a2>
 8010358:	e7ee      	b.n	8010338 <__gethex+0x2c6>
 801035a:	1e67      	subs	r7, r4, #1
 801035c:	f1ba 0f00 	cmp.w	sl, #0
 8010360:	d131      	bne.n	80103c6 <__gethex+0x354>
 8010362:	b127      	cbz	r7, 801036e <__gethex+0x2fc>
 8010364:	4639      	mov	r1, r7
 8010366:	4628      	mov	r0, r5
 8010368:	f000 fd60 	bl	8010e2c <__any_on>
 801036c:	4682      	mov	sl, r0
 801036e:	117a      	asrs	r2, r7, #5
 8010370:	2301      	movs	r3, #1
 8010372:	f007 071f 	and.w	r7, r7, #31
 8010376:	fa03 f707 	lsl.w	r7, r3, r7
 801037a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 801037e:	4621      	mov	r1, r4
 8010380:	421f      	tst	r7, r3
 8010382:	4628      	mov	r0, r5
 8010384:	bf18      	it	ne
 8010386:	f04a 0a02 	orrne.w	sl, sl, #2
 801038a:	1b36      	subs	r6, r6, r4
 801038c:	f7ff fe22 	bl	800ffd4 <rshift>
 8010390:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8010394:	2702      	movs	r7, #2
 8010396:	f1ba 0f00 	cmp.w	sl, #0
 801039a:	d048      	beq.n	801042e <__gethex+0x3bc>
 801039c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80103a0:	2b02      	cmp	r3, #2
 80103a2:	d015      	beq.n	80103d0 <__gethex+0x35e>
 80103a4:	2b03      	cmp	r3, #3
 80103a6:	d017      	beq.n	80103d8 <__gethex+0x366>
 80103a8:	2b01      	cmp	r3, #1
 80103aa:	d109      	bne.n	80103c0 <__gethex+0x34e>
 80103ac:	f01a 0f02 	tst.w	sl, #2
 80103b0:	d006      	beq.n	80103c0 <__gethex+0x34e>
 80103b2:	f8d9 3000 	ldr.w	r3, [r9]
 80103b6:	ea4a 0a03 	orr.w	sl, sl, r3
 80103ba:	f01a 0f01 	tst.w	sl, #1
 80103be:	d10e      	bne.n	80103de <__gethex+0x36c>
 80103c0:	f047 0710 	orr.w	r7, r7, #16
 80103c4:	e033      	b.n	801042e <__gethex+0x3bc>
 80103c6:	f04f 0a01 	mov.w	sl, #1
 80103ca:	e7d0      	b.n	801036e <__gethex+0x2fc>
 80103cc:	2701      	movs	r7, #1
 80103ce:	e7e2      	b.n	8010396 <__gethex+0x324>
 80103d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80103d2:	f1c3 0301 	rsb	r3, r3, #1
 80103d6:	9315      	str	r3, [sp, #84]	; 0x54
 80103d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d0f0      	beq.n	80103c0 <__gethex+0x34e>
 80103de:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80103e2:	f105 0314 	add.w	r3, r5, #20
 80103e6:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80103ea:	eb03 010a 	add.w	r1, r3, sl
 80103ee:	f04f 0c00 	mov.w	ip, #0
 80103f2:	4618      	mov	r0, r3
 80103f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80103f8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80103fc:	d01c      	beq.n	8010438 <__gethex+0x3c6>
 80103fe:	3201      	adds	r2, #1
 8010400:	6002      	str	r2, [r0, #0]
 8010402:	2f02      	cmp	r7, #2
 8010404:	f105 0314 	add.w	r3, r5, #20
 8010408:	d138      	bne.n	801047c <__gethex+0x40a>
 801040a:	f8d8 2000 	ldr.w	r2, [r8]
 801040e:	3a01      	subs	r2, #1
 8010410:	42b2      	cmp	r2, r6
 8010412:	d10a      	bne.n	801042a <__gethex+0x3b8>
 8010414:	1171      	asrs	r1, r6, #5
 8010416:	2201      	movs	r2, #1
 8010418:	f006 061f 	and.w	r6, r6, #31
 801041c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010420:	fa02 f606 	lsl.w	r6, r2, r6
 8010424:	421e      	tst	r6, r3
 8010426:	bf18      	it	ne
 8010428:	4617      	movne	r7, r2
 801042a:	f047 0720 	orr.w	r7, r7, #32
 801042e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010430:	601d      	str	r5, [r3, #0]
 8010432:	9b06      	ldr	r3, [sp, #24]
 8010434:	601c      	str	r4, [r3, #0]
 8010436:	e6a4      	b.n	8010182 <__gethex+0x110>
 8010438:	4299      	cmp	r1, r3
 801043a:	f843 cc04 	str.w	ip, [r3, #-4]
 801043e:	d8d8      	bhi.n	80103f2 <__gethex+0x380>
 8010440:	68ab      	ldr	r3, [r5, #8]
 8010442:	4599      	cmp	r9, r3
 8010444:	db12      	blt.n	801046c <__gethex+0x3fa>
 8010446:	6869      	ldr	r1, [r5, #4]
 8010448:	9802      	ldr	r0, [sp, #8]
 801044a:	3101      	adds	r1, #1
 801044c:	f000 f910 	bl	8010670 <_Balloc>
 8010450:	692a      	ldr	r2, [r5, #16]
 8010452:	3202      	adds	r2, #2
 8010454:	f105 010c 	add.w	r1, r5, #12
 8010458:	4683      	mov	fp, r0
 801045a:	0092      	lsls	r2, r2, #2
 801045c:	300c      	adds	r0, #12
 801045e:	f7fd f8b3 	bl	800d5c8 <memcpy>
 8010462:	4629      	mov	r1, r5
 8010464:	9802      	ldr	r0, [sp, #8]
 8010466:	f000 f937 	bl	80106d8 <_Bfree>
 801046a:	465d      	mov	r5, fp
 801046c:	692b      	ldr	r3, [r5, #16]
 801046e:	1c5a      	adds	r2, r3, #1
 8010470:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8010474:	612a      	str	r2, [r5, #16]
 8010476:	2201      	movs	r2, #1
 8010478:	615a      	str	r2, [r3, #20]
 801047a:	e7c2      	b.n	8010402 <__gethex+0x390>
 801047c:	692a      	ldr	r2, [r5, #16]
 801047e:	454a      	cmp	r2, r9
 8010480:	dd0b      	ble.n	801049a <__gethex+0x428>
 8010482:	2101      	movs	r1, #1
 8010484:	4628      	mov	r0, r5
 8010486:	f7ff fda5 	bl	800ffd4 <rshift>
 801048a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801048e:	3401      	adds	r4, #1
 8010490:	42a3      	cmp	r3, r4
 8010492:	f6ff aed9 	blt.w	8010248 <__gethex+0x1d6>
 8010496:	2701      	movs	r7, #1
 8010498:	e7c7      	b.n	801042a <__gethex+0x3b8>
 801049a:	f016 061f 	ands.w	r6, r6, #31
 801049e:	d0fa      	beq.n	8010496 <__gethex+0x424>
 80104a0:	449a      	add	sl, r3
 80104a2:	f1c6 0620 	rsb	r6, r6, #32
 80104a6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80104aa:	f000 f9a5 	bl	80107f8 <__hi0bits>
 80104ae:	42b0      	cmp	r0, r6
 80104b0:	dbe7      	blt.n	8010482 <__gethex+0x410>
 80104b2:	e7f0      	b.n	8010496 <__gethex+0x424>

080104b4 <L_shift>:
 80104b4:	f1c2 0208 	rsb	r2, r2, #8
 80104b8:	0092      	lsls	r2, r2, #2
 80104ba:	b570      	push	{r4, r5, r6, lr}
 80104bc:	f1c2 0620 	rsb	r6, r2, #32
 80104c0:	6843      	ldr	r3, [r0, #4]
 80104c2:	6804      	ldr	r4, [r0, #0]
 80104c4:	fa03 f506 	lsl.w	r5, r3, r6
 80104c8:	432c      	orrs	r4, r5
 80104ca:	40d3      	lsrs	r3, r2
 80104cc:	6004      	str	r4, [r0, #0]
 80104ce:	f840 3f04 	str.w	r3, [r0, #4]!
 80104d2:	4288      	cmp	r0, r1
 80104d4:	d3f4      	bcc.n	80104c0 <L_shift+0xc>
 80104d6:	bd70      	pop	{r4, r5, r6, pc}

080104d8 <__match>:
 80104d8:	b530      	push	{r4, r5, lr}
 80104da:	6803      	ldr	r3, [r0, #0]
 80104dc:	3301      	adds	r3, #1
 80104de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80104e2:	b914      	cbnz	r4, 80104ea <__match+0x12>
 80104e4:	6003      	str	r3, [r0, #0]
 80104e6:	2001      	movs	r0, #1
 80104e8:	bd30      	pop	{r4, r5, pc}
 80104ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80104ee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80104f2:	2d19      	cmp	r5, #25
 80104f4:	bf98      	it	ls
 80104f6:	3220      	addls	r2, #32
 80104f8:	42a2      	cmp	r2, r4
 80104fa:	d0f0      	beq.n	80104de <__match+0x6>
 80104fc:	2000      	movs	r0, #0
 80104fe:	e7f3      	b.n	80104e8 <__match+0x10>

08010500 <__hexnan>:
 8010500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010504:	680b      	ldr	r3, [r1, #0]
 8010506:	6801      	ldr	r1, [r0, #0]
 8010508:	115f      	asrs	r7, r3, #5
 801050a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801050e:	f013 031f 	ands.w	r3, r3, #31
 8010512:	b087      	sub	sp, #28
 8010514:	bf18      	it	ne
 8010516:	3704      	addne	r7, #4
 8010518:	2500      	movs	r5, #0
 801051a:	1f3e      	subs	r6, r7, #4
 801051c:	4682      	mov	sl, r0
 801051e:	4690      	mov	r8, r2
 8010520:	9301      	str	r3, [sp, #4]
 8010522:	f847 5c04 	str.w	r5, [r7, #-4]
 8010526:	46b1      	mov	r9, r6
 8010528:	4634      	mov	r4, r6
 801052a:	9502      	str	r5, [sp, #8]
 801052c:	46ab      	mov	fp, r5
 801052e:	784a      	ldrb	r2, [r1, #1]
 8010530:	1c4b      	adds	r3, r1, #1
 8010532:	9303      	str	r3, [sp, #12]
 8010534:	b342      	cbz	r2, 8010588 <__hexnan+0x88>
 8010536:	4610      	mov	r0, r2
 8010538:	9105      	str	r1, [sp, #20]
 801053a:	9204      	str	r2, [sp, #16]
 801053c:	f7ff fd84 	bl	8010048 <__hexdig_fun>
 8010540:	2800      	cmp	r0, #0
 8010542:	d143      	bne.n	80105cc <__hexnan+0xcc>
 8010544:	9a04      	ldr	r2, [sp, #16]
 8010546:	9905      	ldr	r1, [sp, #20]
 8010548:	2a20      	cmp	r2, #32
 801054a:	d818      	bhi.n	801057e <__hexnan+0x7e>
 801054c:	9b02      	ldr	r3, [sp, #8]
 801054e:	459b      	cmp	fp, r3
 8010550:	dd13      	ble.n	801057a <__hexnan+0x7a>
 8010552:	454c      	cmp	r4, r9
 8010554:	d206      	bcs.n	8010564 <__hexnan+0x64>
 8010556:	2d07      	cmp	r5, #7
 8010558:	dc04      	bgt.n	8010564 <__hexnan+0x64>
 801055a:	462a      	mov	r2, r5
 801055c:	4649      	mov	r1, r9
 801055e:	4620      	mov	r0, r4
 8010560:	f7ff ffa8 	bl	80104b4 <L_shift>
 8010564:	4544      	cmp	r4, r8
 8010566:	d944      	bls.n	80105f2 <__hexnan+0xf2>
 8010568:	2300      	movs	r3, #0
 801056a:	f1a4 0904 	sub.w	r9, r4, #4
 801056e:	f844 3c04 	str.w	r3, [r4, #-4]
 8010572:	f8cd b008 	str.w	fp, [sp, #8]
 8010576:	464c      	mov	r4, r9
 8010578:	461d      	mov	r5, r3
 801057a:	9903      	ldr	r1, [sp, #12]
 801057c:	e7d7      	b.n	801052e <__hexnan+0x2e>
 801057e:	2a29      	cmp	r2, #41	; 0x29
 8010580:	d14a      	bne.n	8010618 <__hexnan+0x118>
 8010582:	3102      	adds	r1, #2
 8010584:	f8ca 1000 	str.w	r1, [sl]
 8010588:	f1bb 0f00 	cmp.w	fp, #0
 801058c:	d044      	beq.n	8010618 <__hexnan+0x118>
 801058e:	454c      	cmp	r4, r9
 8010590:	d206      	bcs.n	80105a0 <__hexnan+0xa0>
 8010592:	2d07      	cmp	r5, #7
 8010594:	dc04      	bgt.n	80105a0 <__hexnan+0xa0>
 8010596:	462a      	mov	r2, r5
 8010598:	4649      	mov	r1, r9
 801059a:	4620      	mov	r0, r4
 801059c:	f7ff ff8a 	bl	80104b4 <L_shift>
 80105a0:	4544      	cmp	r4, r8
 80105a2:	d928      	bls.n	80105f6 <__hexnan+0xf6>
 80105a4:	4643      	mov	r3, r8
 80105a6:	f854 2b04 	ldr.w	r2, [r4], #4
 80105aa:	f843 2b04 	str.w	r2, [r3], #4
 80105ae:	42a6      	cmp	r6, r4
 80105b0:	d2f9      	bcs.n	80105a6 <__hexnan+0xa6>
 80105b2:	2200      	movs	r2, #0
 80105b4:	f843 2b04 	str.w	r2, [r3], #4
 80105b8:	429e      	cmp	r6, r3
 80105ba:	d2fb      	bcs.n	80105b4 <__hexnan+0xb4>
 80105bc:	6833      	ldr	r3, [r6, #0]
 80105be:	b91b      	cbnz	r3, 80105c8 <__hexnan+0xc8>
 80105c0:	4546      	cmp	r6, r8
 80105c2:	d127      	bne.n	8010614 <__hexnan+0x114>
 80105c4:	2301      	movs	r3, #1
 80105c6:	6033      	str	r3, [r6, #0]
 80105c8:	2005      	movs	r0, #5
 80105ca:	e026      	b.n	801061a <__hexnan+0x11a>
 80105cc:	3501      	adds	r5, #1
 80105ce:	2d08      	cmp	r5, #8
 80105d0:	f10b 0b01 	add.w	fp, fp, #1
 80105d4:	dd06      	ble.n	80105e4 <__hexnan+0xe4>
 80105d6:	4544      	cmp	r4, r8
 80105d8:	d9cf      	bls.n	801057a <__hexnan+0x7a>
 80105da:	2300      	movs	r3, #0
 80105dc:	f844 3c04 	str.w	r3, [r4, #-4]
 80105e0:	2501      	movs	r5, #1
 80105e2:	3c04      	subs	r4, #4
 80105e4:	6822      	ldr	r2, [r4, #0]
 80105e6:	f000 000f 	and.w	r0, r0, #15
 80105ea:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80105ee:	6020      	str	r0, [r4, #0]
 80105f0:	e7c3      	b.n	801057a <__hexnan+0x7a>
 80105f2:	2508      	movs	r5, #8
 80105f4:	e7c1      	b.n	801057a <__hexnan+0x7a>
 80105f6:	9b01      	ldr	r3, [sp, #4]
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d0df      	beq.n	80105bc <__hexnan+0xbc>
 80105fc:	f04f 32ff 	mov.w	r2, #4294967295
 8010600:	f1c3 0320 	rsb	r3, r3, #32
 8010604:	fa22 f303 	lsr.w	r3, r2, r3
 8010608:	f857 2c04 	ldr.w	r2, [r7, #-4]
 801060c:	401a      	ands	r2, r3
 801060e:	f847 2c04 	str.w	r2, [r7, #-4]
 8010612:	e7d3      	b.n	80105bc <__hexnan+0xbc>
 8010614:	3e04      	subs	r6, #4
 8010616:	e7d1      	b.n	80105bc <__hexnan+0xbc>
 8010618:	2004      	movs	r0, #4
 801061a:	b007      	add	sp, #28
 801061c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010620 <__locale_ctype_ptr_l>:
 8010620:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8010624:	4770      	bx	lr

08010626 <__localeconv_l>:
 8010626:	30f0      	adds	r0, #240	; 0xf0
 8010628:	4770      	bx	lr
	...

0801062c <_localeconv_r>:
 801062c:	4b04      	ldr	r3, [pc, #16]	; (8010640 <_localeconv_r+0x14>)
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	6a18      	ldr	r0, [r3, #32]
 8010632:	4b04      	ldr	r3, [pc, #16]	; (8010644 <_localeconv_r+0x18>)
 8010634:	2800      	cmp	r0, #0
 8010636:	bf08      	it	eq
 8010638:	4618      	moveq	r0, r3
 801063a:	30f0      	adds	r0, #240	; 0xf0
 801063c:	4770      	bx	lr
 801063e:	bf00      	nop
 8010640:	2000018c 	.word	0x2000018c
 8010644:	200001f0 	.word	0x200001f0

08010648 <__ascii_mbtowc>:
 8010648:	b082      	sub	sp, #8
 801064a:	b901      	cbnz	r1, 801064e <__ascii_mbtowc+0x6>
 801064c:	a901      	add	r1, sp, #4
 801064e:	b142      	cbz	r2, 8010662 <__ascii_mbtowc+0x1a>
 8010650:	b14b      	cbz	r3, 8010666 <__ascii_mbtowc+0x1e>
 8010652:	7813      	ldrb	r3, [r2, #0]
 8010654:	600b      	str	r3, [r1, #0]
 8010656:	7812      	ldrb	r2, [r2, #0]
 8010658:	1c10      	adds	r0, r2, #0
 801065a:	bf18      	it	ne
 801065c:	2001      	movne	r0, #1
 801065e:	b002      	add	sp, #8
 8010660:	4770      	bx	lr
 8010662:	4610      	mov	r0, r2
 8010664:	e7fb      	b.n	801065e <__ascii_mbtowc+0x16>
 8010666:	f06f 0001 	mvn.w	r0, #1
 801066a:	e7f8      	b.n	801065e <__ascii_mbtowc+0x16>

0801066c <__malloc_lock>:
 801066c:	4770      	bx	lr

0801066e <__malloc_unlock>:
 801066e:	4770      	bx	lr

08010670 <_Balloc>:
 8010670:	b570      	push	{r4, r5, r6, lr}
 8010672:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010674:	4604      	mov	r4, r0
 8010676:	460e      	mov	r6, r1
 8010678:	b93d      	cbnz	r5, 801068a <_Balloc+0x1a>
 801067a:	2010      	movs	r0, #16
 801067c:	f7fc ff94 	bl	800d5a8 <malloc>
 8010680:	6260      	str	r0, [r4, #36]	; 0x24
 8010682:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010686:	6005      	str	r5, [r0, #0]
 8010688:	60c5      	str	r5, [r0, #12]
 801068a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801068c:	68eb      	ldr	r3, [r5, #12]
 801068e:	b183      	cbz	r3, 80106b2 <_Balloc+0x42>
 8010690:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010692:	68db      	ldr	r3, [r3, #12]
 8010694:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8010698:	b9b8      	cbnz	r0, 80106ca <_Balloc+0x5a>
 801069a:	2101      	movs	r1, #1
 801069c:	fa01 f506 	lsl.w	r5, r1, r6
 80106a0:	1d6a      	adds	r2, r5, #5
 80106a2:	0092      	lsls	r2, r2, #2
 80106a4:	4620      	mov	r0, r4
 80106a6:	f000 fbe2 	bl	8010e6e <_calloc_r>
 80106aa:	b160      	cbz	r0, 80106c6 <_Balloc+0x56>
 80106ac:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80106b0:	e00e      	b.n	80106d0 <_Balloc+0x60>
 80106b2:	2221      	movs	r2, #33	; 0x21
 80106b4:	2104      	movs	r1, #4
 80106b6:	4620      	mov	r0, r4
 80106b8:	f000 fbd9 	bl	8010e6e <_calloc_r>
 80106bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80106be:	60e8      	str	r0, [r5, #12]
 80106c0:	68db      	ldr	r3, [r3, #12]
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d1e4      	bne.n	8010690 <_Balloc+0x20>
 80106c6:	2000      	movs	r0, #0
 80106c8:	bd70      	pop	{r4, r5, r6, pc}
 80106ca:	6802      	ldr	r2, [r0, #0]
 80106cc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80106d0:	2300      	movs	r3, #0
 80106d2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80106d6:	e7f7      	b.n	80106c8 <_Balloc+0x58>

080106d8 <_Bfree>:
 80106d8:	b570      	push	{r4, r5, r6, lr}
 80106da:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80106dc:	4606      	mov	r6, r0
 80106de:	460d      	mov	r5, r1
 80106e0:	b93c      	cbnz	r4, 80106f2 <_Bfree+0x1a>
 80106e2:	2010      	movs	r0, #16
 80106e4:	f7fc ff60 	bl	800d5a8 <malloc>
 80106e8:	6270      	str	r0, [r6, #36]	; 0x24
 80106ea:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80106ee:	6004      	str	r4, [r0, #0]
 80106f0:	60c4      	str	r4, [r0, #12]
 80106f2:	b13d      	cbz	r5, 8010704 <_Bfree+0x2c>
 80106f4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80106f6:	686a      	ldr	r2, [r5, #4]
 80106f8:	68db      	ldr	r3, [r3, #12]
 80106fa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80106fe:	6029      	str	r1, [r5, #0]
 8010700:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8010704:	bd70      	pop	{r4, r5, r6, pc}

08010706 <__multadd>:
 8010706:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801070a:	690d      	ldr	r5, [r1, #16]
 801070c:	461f      	mov	r7, r3
 801070e:	4606      	mov	r6, r0
 8010710:	460c      	mov	r4, r1
 8010712:	f101 0c14 	add.w	ip, r1, #20
 8010716:	2300      	movs	r3, #0
 8010718:	f8dc 0000 	ldr.w	r0, [ip]
 801071c:	b281      	uxth	r1, r0
 801071e:	fb02 7101 	mla	r1, r2, r1, r7
 8010722:	0c0f      	lsrs	r7, r1, #16
 8010724:	0c00      	lsrs	r0, r0, #16
 8010726:	fb02 7000 	mla	r0, r2, r0, r7
 801072a:	b289      	uxth	r1, r1
 801072c:	3301      	adds	r3, #1
 801072e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8010732:	429d      	cmp	r5, r3
 8010734:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8010738:	f84c 1b04 	str.w	r1, [ip], #4
 801073c:	dcec      	bgt.n	8010718 <__multadd+0x12>
 801073e:	b1d7      	cbz	r7, 8010776 <__multadd+0x70>
 8010740:	68a3      	ldr	r3, [r4, #8]
 8010742:	42ab      	cmp	r3, r5
 8010744:	dc12      	bgt.n	801076c <__multadd+0x66>
 8010746:	6861      	ldr	r1, [r4, #4]
 8010748:	4630      	mov	r0, r6
 801074a:	3101      	adds	r1, #1
 801074c:	f7ff ff90 	bl	8010670 <_Balloc>
 8010750:	6922      	ldr	r2, [r4, #16]
 8010752:	3202      	adds	r2, #2
 8010754:	f104 010c 	add.w	r1, r4, #12
 8010758:	4680      	mov	r8, r0
 801075a:	0092      	lsls	r2, r2, #2
 801075c:	300c      	adds	r0, #12
 801075e:	f7fc ff33 	bl	800d5c8 <memcpy>
 8010762:	4621      	mov	r1, r4
 8010764:	4630      	mov	r0, r6
 8010766:	f7ff ffb7 	bl	80106d8 <_Bfree>
 801076a:	4644      	mov	r4, r8
 801076c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010770:	3501      	adds	r5, #1
 8010772:	615f      	str	r7, [r3, #20]
 8010774:	6125      	str	r5, [r4, #16]
 8010776:	4620      	mov	r0, r4
 8010778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801077c <__s2b>:
 801077c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010780:	460c      	mov	r4, r1
 8010782:	4615      	mov	r5, r2
 8010784:	461f      	mov	r7, r3
 8010786:	2209      	movs	r2, #9
 8010788:	3308      	adds	r3, #8
 801078a:	4606      	mov	r6, r0
 801078c:	fb93 f3f2 	sdiv	r3, r3, r2
 8010790:	2100      	movs	r1, #0
 8010792:	2201      	movs	r2, #1
 8010794:	429a      	cmp	r2, r3
 8010796:	db20      	blt.n	80107da <__s2b+0x5e>
 8010798:	4630      	mov	r0, r6
 801079a:	f7ff ff69 	bl	8010670 <_Balloc>
 801079e:	9b08      	ldr	r3, [sp, #32]
 80107a0:	6143      	str	r3, [r0, #20]
 80107a2:	2d09      	cmp	r5, #9
 80107a4:	f04f 0301 	mov.w	r3, #1
 80107a8:	6103      	str	r3, [r0, #16]
 80107aa:	dd19      	ble.n	80107e0 <__s2b+0x64>
 80107ac:	f104 0809 	add.w	r8, r4, #9
 80107b0:	46c1      	mov	r9, r8
 80107b2:	442c      	add	r4, r5
 80107b4:	f819 3b01 	ldrb.w	r3, [r9], #1
 80107b8:	4601      	mov	r1, r0
 80107ba:	3b30      	subs	r3, #48	; 0x30
 80107bc:	220a      	movs	r2, #10
 80107be:	4630      	mov	r0, r6
 80107c0:	f7ff ffa1 	bl	8010706 <__multadd>
 80107c4:	45a1      	cmp	r9, r4
 80107c6:	d1f5      	bne.n	80107b4 <__s2b+0x38>
 80107c8:	eb08 0405 	add.w	r4, r8, r5
 80107cc:	3c08      	subs	r4, #8
 80107ce:	1b2d      	subs	r5, r5, r4
 80107d0:	1963      	adds	r3, r4, r5
 80107d2:	42bb      	cmp	r3, r7
 80107d4:	db07      	blt.n	80107e6 <__s2b+0x6a>
 80107d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80107da:	0052      	lsls	r2, r2, #1
 80107dc:	3101      	adds	r1, #1
 80107de:	e7d9      	b.n	8010794 <__s2b+0x18>
 80107e0:	340a      	adds	r4, #10
 80107e2:	2509      	movs	r5, #9
 80107e4:	e7f3      	b.n	80107ce <__s2b+0x52>
 80107e6:	f814 3b01 	ldrb.w	r3, [r4], #1
 80107ea:	4601      	mov	r1, r0
 80107ec:	3b30      	subs	r3, #48	; 0x30
 80107ee:	220a      	movs	r2, #10
 80107f0:	4630      	mov	r0, r6
 80107f2:	f7ff ff88 	bl	8010706 <__multadd>
 80107f6:	e7eb      	b.n	80107d0 <__s2b+0x54>

080107f8 <__hi0bits>:
 80107f8:	0c02      	lsrs	r2, r0, #16
 80107fa:	0412      	lsls	r2, r2, #16
 80107fc:	4603      	mov	r3, r0
 80107fe:	b9b2      	cbnz	r2, 801082e <__hi0bits+0x36>
 8010800:	0403      	lsls	r3, r0, #16
 8010802:	2010      	movs	r0, #16
 8010804:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8010808:	bf04      	itt	eq
 801080a:	021b      	lsleq	r3, r3, #8
 801080c:	3008      	addeq	r0, #8
 801080e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8010812:	bf04      	itt	eq
 8010814:	011b      	lsleq	r3, r3, #4
 8010816:	3004      	addeq	r0, #4
 8010818:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801081c:	bf04      	itt	eq
 801081e:	009b      	lsleq	r3, r3, #2
 8010820:	3002      	addeq	r0, #2
 8010822:	2b00      	cmp	r3, #0
 8010824:	db06      	blt.n	8010834 <__hi0bits+0x3c>
 8010826:	005b      	lsls	r3, r3, #1
 8010828:	d503      	bpl.n	8010832 <__hi0bits+0x3a>
 801082a:	3001      	adds	r0, #1
 801082c:	4770      	bx	lr
 801082e:	2000      	movs	r0, #0
 8010830:	e7e8      	b.n	8010804 <__hi0bits+0xc>
 8010832:	2020      	movs	r0, #32
 8010834:	4770      	bx	lr

08010836 <__lo0bits>:
 8010836:	6803      	ldr	r3, [r0, #0]
 8010838:	f013 0207 	ands.w	r2, r3, #7
 801083c:	4601      	mov	r1, r0
 801083e:	d00b      	beq.n	8010858 <__lo0bits+0x22>
 8010840:	07da      	lsls	r2, r3, #31
 8010842:	d423      	bmi.n	801088c <__lo0bits+0x56>
 8010844:	0798      	lsls	r0, r3, #30
 8010846:	bf49      	itett	mi
 8010848:	085b      	lsrmi	r3, r3, #1
 801084a:	089b      	lsrpl	r3, r3, #2
 801084c:	2001      	movmi	r0, #1
 801084e:	600b      	strmi	r3, [r1, #0]
 8010850:	bf5c      	itt	pl
 8010852:	600b      	strpl	r3, [r1, #0]
 8010854:	2002      	movpl	r0, #2
 8010856:	4770      	bx	lr
 8010858:	b298      	uxth	r0, r3
 801085a:	b9a8      	cbnz	r0, 8010888 <__lo0bits+0x52>
 801085c:	0c1b      	lsrs	r3, r3, #16
 801085e:	2010      	movs	r0, #16
 8010860:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010864:	bf04      	itt	eq
 8010866:	0a1b      	lsreq	r3, r3, #8
 8010868:	3008      	addeq	r0, #8
 801086a:	071a      	lsls	r2, r3, #28
 801086c:	bf04      	itt	eq
 801086e:	091b      	lsreq	r3, r3, #4
 8010870:	3004      	addeq	r0, #4
 8010872:	079a      	lsls	r2, r3, #30
 8010874:	bf04      	itt	eq
 8010876:	089b      	lsreq	r3, r3, #2
 8010878:	3002      	addeq	r0, #2
 801087a:	07da      	lsls	r2, r3, #31
 801087c:	d402      	bmi.n	8010884 <__lo0bits+0x4e>
 801087e:	085b      	lsrs	r3, r3, #1
 8010880:	d006      	beq.n	8010890 <__lo0bits+0x5a>
 8010882:	3001      	adds	r0, #1
 8010884:	600b      	str	r3, [r1, #0]
 8010886:	4770      	bx	lr
 8010888:	4610      	mov	r0, r2
 801088a:	e7e9      	b.n	8010860 <__lo0bits+0x2a>
 801088c:	2000      	movs	r0, #0
 801088e:	4770      	bx	lr
 8010890:	2020      	movs	r0, #32
 8010892:	4770      	bx	lr

08010894 <__i2b>:
 8010894:	b510      	push	{r4, lr}
 8010896:	460c      	mov	r4, r1
 8010898:	2101      	movs	r1, #1
 801089a:	f7ff fee9 	bl	8010670 <_Balloc>
 801089e:	2201      	movs	r2, #1
 80108a0:	6144      	str	r4, [r0, #20]
 80108a2:	6102      	str	r2, [r0, #16]
 80108a4:	bd10      	pop	{r4, pc}

080108a6 <__multiply>:
 80108a6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108aa:	4614      	mov	r4, r2
 80108ac:	690a      	ldr	r2, [r1, #16]
 80108ae:	6923      	ldr	r3, [r4, #16]
 80108b0:	429a      	cmp	r2, r3
 80108b2:	bfb8      	it	lt
 80108b4:	460b      	movlt	r3, r1
 80108b6:	4688      	mov	r8, r1
 80108b8:	bfbc      	itt	lt
 80108ba:	46a0      	movlt	r8, r4
 80108bc:	461c      	movlt	r4, r3
 80108be:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80108c2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80108c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80108ca:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80108ce:	eb07 0609 	add.w	r6, r7, r9
 80108d2:	42b3      	cmp	r3, r6
 80108d4:	bfb8      	it	lt
 80108d6:	3101      	addlt	r1, #1
 80108d8:	f7ff feca 	bl	8010670 <_Balloc>
 80108dc:	f100 0514 	add.w	r5, r0, #20
 80108e0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80108e4:	462b      	mov	r3, r5
 80108e6:	2200      	movs	r2, #0
 80108e8:	4573      	cmp	r3, lr
 80108ea:	d316      	bcc.n	801091a <__multiply+0x74>
 80108ec:	f104 0214 	add.w	r2, r4, #20
 80108f0:	f108 0114 	add.w	r1, r8, #20
 80108f4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80108f8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80108fc:	9300      	str	r3, [sp, #0]
 80108fe:	9b00      	ldr	r3, [sp, #0]
 8010900:	9201      	str	r2, [sp, #4]
 8010902:	4293      	cmp	r3, r2
 8010904:	d80c      	bhi.n	8010920 <__multiply+0x7a>
 8010906:	2e00      	cmp	r6, #0
 8010908:	dd03      	ble.n	8010912 <__multiply+0x6c>
 801090a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801090e:	2b00      	cmp	r3, #0
 8010910:	d05d      	beq.n	80109ce <__multiply+0x128>
 8010912:	6106      	str	r6, [r0, #16]
 8010914:	b003      	add	sp, #12
 8010916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801091a:	f843 2b04 	str.w	r2, [r3], #4
 801091e:	e7e3      	b.n	80108e8 <__multiply+0x42>
 8010920:	f8b2 b000 	ldrh.w	fp, [r2]
 8010924:	f1bb 0f00 	cmp.w	fp, #0
 8010928:	d023      	beq.n	8010972 <__multiply+0xcc>
 801092a:	4689      	mov	r9, r1
 801092c:	46ac      	mov	ip, r5
 801092e:	f04f 0800 	mov.w	r8, #0
 8010932:	f859 4b04 	ldr.w	r4, [r9], #4
 8010936:	f8dc a000 	ldr.w	sl, [ip]
 801093a:	b2a3      	uxth	r3, r4
 801093c:	fa1f fa8a 	uxth.w	sl, sl
 8010940:	fb0b a303 	mla	r3, fp, r3, sl
 8010944:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8010948:	f8dc 4000 	ldr.w	r4, [ip]
 801094c:	4443      	add	r3, r8
 801094e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8010952:	fb0b 840a 	mla	r4, fp, sl, r8
 8010956:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801095a:	46e2      	mov	sl, ip
 801095c:	b29b      	uxth	r3, r3
 801095e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010962:	454f      	cmp	r7, r9
 8010964:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8010968:	f84a 3b04 	str.w	r3, [sl], #4
 801096c:	d82b      	bhi.n	80109c6 <__multiply+0x120>
 801096e:	f8cc 8004 	str.w	r8, [ip, #4]
 8010972:	9b01      	ldr	r3, [sp, #4]
 8010974:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8010978:	3204      	adds	r2, #4
 801097a:	f1ba 0f00 	cmp.w	sl, #0
 801097e:	d020      	beq.n	80109c2 <__multiply+0x11c>
 8010980:	682b      	ldr	r3, [r5, #0]
 8010982:	4689      	mov	r9, r1
 8010984:	46a8      	mov	r8, r5
 8010986:	f04f 0b00 	mov.w	fp, #0
 801098a:	f8b9 c000 	ldrh.w	ip, [r9]
 801098e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8010992:	fb0a 440c 	mla	r4, sl, ip, r4
 8010996:	445c      	add	r4, fp
 8010998:	46c4      	mov	ip, r8
 801099a:	b29b      	uxth	r3, r3
 801099c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80109a0:	f84c 3b04 	str.w	r3, [ip], #4
 80109a4:	f859 3b04 	ldr.w	r3, [r9], #4
 80109a8:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80109ac:	0c1b      	lsrs	r3, r3, #16
 80109ae:	fb0a b303 	mla	r3, sl, r3, fp
 80109b2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80109b6:	454f      	cmp	r7, r9
 80109b8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80109bc:	d805      	bhi.n	80109ca <__multiply+0x124>
 80109be:	f8c8 3004 	str.w	r3, [r8, #4]
 80109c2:	3504      	adds	r5, #4
 80109c4:	e79b      	b.n	80108fe <__multiply+0x58>
 80109c6:	46d4      	mov	ip, sl
 80109c8:	e7b3      	b.n	8010932 <__multiply+0x8c>
 80109ca:	46e0      	mov	r8, ip
 80109cc:	e7dd      	b.n	801098a <__multiply+0xe4>
 80109ce:	3e01      	subs	r6, #1
 80109d0:	e799      	b.n	8010906 <__multiply+0x60>
	...

080109d4 <__pow5mult>:
 80109d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80109d8:	4615      	mov	r5, r2
 80109da:	f012 0203 	ands.w	r2, r2, #3
 80109de:	4606      	mov	r6, r0
 80109e0:	460f      	mov	r7, r1
 80109e2:	d007      	beq.n	80109f4 <__pow5mult+0x20>
 80109e4:	3a01      	subs	r2, #1
 80109e6:	4c21      	ldr	r4, [pc, #132]	; (8010a6c <__pow5mult+0x98>)
 80109e8:	2300      	movs	r3, #0
 80109ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80109ee:	f7ff fe8a 	bl	8010706 <__multadd>
 80109f2:	4607      	mov	r7, r0
 80109f4:	10ad      	asrs	r5, r5, #2
 80109f6:	d035      	beq.n	8010a64 <__pow5mult+0x90>
 80109f8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80109fa:	b93c      	cbnz	r4, 8010a0c <__pow5mult+0x38>
 80109fc:	2010      	movs	r0, #16
 80109fe:	f7fc fdd3 	bl	800d5a8 <malloc>
 8010a02:	6270      	str	r0, [r6, #36]	; 0x24
 8010a04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010a08:	6004      	str	r4, [r0, #0]
 8010a0a:	60c4      	str	r4, [r0, #12]
 8010a0c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010a10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010a14:	b94c      	cbnz	r4, 8010a2a <__pow5mult+0x56>
 8010a16:	f240 2171 	movw	r1, #625	; 0x271
 8010a1a:	4630      	mov	r0, r6
 8010a1c:	f7ff ff3a 	bl	8010894 <__i2b>
 8010a20:	2300      	movs	r3, #0
 8010a22:	f8c8 0008 	str.w	r0, [r8, #8]
 8010a26:	4604      	mov	r4, r0
 8010a28:	6003      	str	r3, [r0, #0]
 8010a2a:	f04f 0800 	mov.w	r8, #0
 8010a2e:	07eb      	lsls	r3, r5, #31
 8010a30:	d50a      	bpl.n	8010a48 <__pow5mult+0x74>
 8010a32:	4639      	mov	r1, r7
 8010a34:	4622      	mov	r2, r4
 8010a36:	4630      	mov	r0, r6
 8010a38:	f7ff ff35 	bl	80108a6 <__multiply>
 8010a3c:	4639      	mov	r1, r7
 8010a3e:	4681      	mov	r9, r0
 8010a40:	4630      	mov	r0, r6
 8010a42:	f7ff fe49 	bl	80106d8 <_Bfree>
 8010a46:	464f      	mov	r7, r9
 8010a48:	106d      	asrs	r5, r5, #1
 8010a4a:	d00b      	beq.n	8010a64 <__pow5mult+0x90>
 8010a4c:	6820      	ldr	r0, [r4, #0]
 8010a4e:	b938      	cbnz	r0, 8010a60 <__pow5mult+0x8c>
 8010a50:	4622      	mov	r2, r4
 8010a52:	4621      	mov	r1, r4
 8010a54:	4630      	mov	r0, r6
 8010a56:	f7ff ff26 	bl	80108a6 <__multiply>
 8010a5a:	6020      	str	r0, [r4, #0]
 8010a5c:	f8c0 8000 	str.w	r8, [r0]
 8010a60:	4604      	mov	r4, r0
 8010a62:	e7e4      	b.n	8010a2e <__pow5mult+0x5a>
 8010a64:	4638      	mov	r0, r7
 8010a66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a6a:	bf00      	nop
 8010a6c:	08011ce0 	.word	0x08011ce0

08010a70 <__lshift>:
 8010a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a74:	460c      	mov	r4, r1
 8010a76:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010a7a:	6923      	ldr	r3, [r4, #16]
 8010a7c:	6849      	ldr	r1, [r1, #4]
 8010a7e:	eb0a 0903 	add.w	r9, sl, r3
 8010a82:	68a3      	ldr	r3, [r4, #8]
 8010a84:	4607      	mov	r7, r0
 8010a86:	4616      	mov	r6, r2
 8010a88:	f109 0501 	add.w	r5, r9, #1
 8010a8c:	42ab      	cmp	r3, r5
 8010a8e:	db32      	blt.n	8010af6 <__lshift+0x86>
 8010a90:	4638      	mov	r0, r7
 8010a92:	f7ff fded 	bl	8010670 <_Balloc>
 8010a96:	2300      	movs	r3, #0
 8010a98:	4680      	mov	r8, r0
 8010a9a:	f100 0114 	add.w	r1, r0, #20
 8010a9e:	461a      	mov	r2, r3
 8010aa0:	4553      	cmp	r3, sl
 8010aa2:	db2b      	blt.n	8010afc <__lshift+0x8c>
 8010aa4:	6920      	ldr	r0, [r4, #16]
 8010aa6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010aaa:	f104 0314 	add.w	r3, r4, #20
 8010aae:	f016 021f 	ands.w	r2, r6, #31
 8010ab2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010ab6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010aba:	d025      	beq.n	8010b08 <__lshift+0x98>
 8010abc:	f1c2 0e20 	rsb	lr, r2, #32
 8010ac0:	2000      	movs	r0, #0
 8010ac2:	681e      	ldr	r6, [r3, #0]
 8010ac4:	468a      	mov	sl, r1
 8010ac6:	4096      	lsls	r6, r2
 8010ac8:	4330      	orrs	r0, r6
 8010aca:	f84a 0b04 	str.w	r0, [sl], #4
 8010ace:	f853 0b04 	ldr.w	r0, [r3], #4
 8010ad2:	459c      	cmp	ip, r3
 8010ad4:	fa20 f00e 	lsr.w	r0, r0, lr
 8010ad8:	d814      	bhi.n	8010b04 <__lshift+0x94>
 8010ada:	6048      	str	r0, [r1, #4]
 8010adc:	b108      	cbz	r0, 8010ae2 <__lshift+0x72>
 8010ade:	f109 0502 	add.w	r5, r9, #2
 8010ae2:	3d01      	subs	r5, #1
 8010ae4:	4638      	mov	r0, r7
 8010ae6:	f8c8 5010 	str.w	r5, [r8, #16]
 8010aea:	4621      	mov	r1, r4
 8010aec:	f7ff fdf4 	bl	80106d8 <_Bfree>
 8010af0:	4640      	mov	r0, r8
 8010af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010af6:	3101      	adds	r1, #1
 8010af8:	005b      	lsls	r3, r3, #1
 8010afa:	e7c7      	b.n	8010a8c <__lshift+0x1c>
 8010afc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8010b00:	3301      	adds	r3, #1
 8010b02:	e7cd      	b.n	8010aa0 <__lshift+0x30>
 8010b04:	4651      	mov	r1, sl
 8010b06:	e7dc      	b.n	8010ac2 <__lshift+0x52>
 8010b08:	3904      	subs	r1, #4
 8010b0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b0e:	f841 2f04 	str.w	r2, [r1, #4]!
 8010b12:	459c      	cmp	ip, r3
 8010b14:	d8f9      	bhi.n	8010b0a <__lshift+0x9a>
 8010b16:	e7e4      	b.n	8010ae2 <__lshift+0x72>

08010b18 <__mcmp>:
 8010b18:	6903      	ldr	r3, [r0, #16]
 8010b1a:	690a      	ldr	r2, [r1, #16]
 8010b1c:	1a9b      	subs	r3, r3, r2
 8010b1e:	b530      	push	{r4, r5, lr}
 8010b20:	d10c      	bne.n	8010b3c <__mcmp+0x24>
 8010b22:	0092      	lsls	r2, r2, #2
 8010b24:	3014      	adds	r0, #20
 8010b26:	3114      	adds	r1, #20
 8010b28:	1884      	adds	r4, r0, r2
 8010b2a:	4411      	add	r1, r2
 8010b2c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010b30:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010b34:	4295      	cmp	r5, r2
 8010b36:	d003      	beq.n	8010b40 <__mcmp+0x28>
 8010b38:	d305      	bcc.n	8010b46 <__mcmp+0x2e>
 8010b3a:	2301      	movs	r3, #1
 8010b3c:	4618      	mov	r0, r3
 8010b3e:	bd30      	pop	{r4, r5, pc}
 8010b40:	42a0      	cmp	r0, r4
 8010b42:	d3f3      	bcc.n	8010b2c <__mcmp+0x14>
 8010b44:	e7fa      	b.n	8010b3c <__mcmp+0x24>
 8010b46:	f04f 33ff 	mov.w	r3, #4294967295
 8010b4a:	e7f7      	b.n	8010b3c <__mcmp+0x24>

08010b4c <__mdiff>:
 8010b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b50:	460d      	mov	r5, r1
 8010b52:	4607      	mov	r7, r0
 8010b54:	4611      	mov	r1, r2
 8010b56:	4628      	mov	r0, r5
 8010b58:	4614      	mov	r4, r2
 8010b5a:	f7ff ffdd 	bl	8010b18 <__mcmp>
 8010b5e:	1e06      	subs	r6, r0, #0
 8010b60:	d108      	bne.n	8010b74 <__mdiff+0x28>
 8010b62:	4631      	mov	r1, r6
 8010b64:	4638      	mov	r0, r7
 8010b66:	f7ff fd83 	bl	8010670 <_Balloc>
 8010b6a:	2301      	movs	r3, #1
 8010b6c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8010b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b74:	bfa4      	itt	ge
 8010b76:	4623      	movge	r3, r4
 8010b78:	462c      	movge	r4, r5
 8010b7a:	4638      	mov	r0, r7
 8010b7c:	6861      	ldr	r1, [r4, #4]
 8010b7e:	bfa6      	itte	ge
 8010b80:	461d      	movge	r5, r3
 8010b82:	2600      	movge	r6, #0
 8010b84:	2601      	movlt	r6, #1
 8010b86:	f7ff fd73 	bl	8010670 <_Balloc>
 8010b8a:	692b      	ldr	r3, [r5, #16]
 8010b8c:	60c6      	str	r6, [r0, #12]
 8010b8e:	6926      	ldr	r6, [r4, #16]
 8010b90:	f105 0914 	add.w	r9, r5, #20
 8010b94:	f104 0214 	add.w	r2, r4, #20
 8010b98:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8010b9c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8010ba0:	f100 0514 	add.w	r5, r0, #20
 8010ba4:	f04f 0e00 	mov.w	lr, #0
 8010ba8:	f852 ab04 	ldr.w	sl, [r2], #4
 8010bac:	f859 4b04 	ldr.w	r4, [r9], #4
 8010bb0:	fa1e f18a 	uxtah	r1, lr, sl
 8010bb4:	b2a3      	uxth	r3, r4
 8010bb6:	1ac9      	subs	r1, r1, r3
 8010bb8:	0c23      	lsrs	r3, r4, #16
 8010bba:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8010bbe:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8010bc2:	b289      	uxth	r1, r1
 8010bc4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8010bc8:	45c8      	cmp	r8, r9
 8010bca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8010bce:	4694      	mov	ip, r2
 8010bd0:	f845 3b04 	str.w	r3, [r5], #4
 8010bd4:	d8e8      	bhi.n	8010ba8 <__mdiff+0x5c>
 8010bd6:	45bc      	cmp	ip, r7
 8010bd8:	d304      	bcc.n	8010be4 <__mdiff+0x98>
 8010bda:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8010bde:	b183      	cbz	r3, 8010c02 <__mdiff+0xb6>
 8010be0:	6106      	str	r6, [r0, #16]
 8010be2:	e7c5      	b.n	8010b70 <__mdiff+0x24>
 8010be4:	f85c 1b04 	ldr.w	r1, [ip], #4
 8010be8:	fa1e f381 	uxtah	r3, lr, r1
 8010bec:	141a      	asrs	r2, r3, #16
 8010bee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010bf2:	b29b      	uxth	r3, r3
 8010bf4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010bf8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8010bfc:	f845 3b04 	str.w	r3, [r5], #4
 8010c00:	e7e9      	b.n	8010bd6 <__mdiff+0x8a>
 8010c02:	3e01      	subs	r6, #1
 8010c04:	e7e9      	b.n	8010bda <__mdiff+0x8e>
	...

08010c08 <__ulp>:
 8010c08:	4b12      	ldr	r3, [pc, #72]	; (8010c54 <__ulp+0x4c>)
 8010c0a:	ee10 2a90 	vmov	r2, s1
 8010c0e:	401a      	ands	r2, r3
 8010c10:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	dd04      	ble.n	8010c22 <__ulp+0x1a>
 8010c18:	2000      	movs	r0, #0
 8010c1a:	4619      	mov	r1, r3
 8010c1c:	ec41 0b10 	vmov	d0, r0, r1
 8010c20:	4770      	bx	lr
 8010c22:	425b      	negs	r3, r3
 8010c24:	151b      	asrs	r3, r3, #20
 8010c26:	2b13      	cmp	r3, #19
 8010c28:	f04f 0000 	mov.w	r0, #0
 8010c2c:	f04f 0100 	mov.w	r1, #0
 8010c30:	dc04      	bgt.n	8010c3c <__ulp+0x34>
 8010c32:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8010c36:	fa42 f103 	asr.w	r1, r2, r3
 8010c3a:	e7ef      	b.n	8010c1c <__ulp+0x14>
 8010c3c:	3b14      	subs	r3, #20
 8010c3e:	2b1e      	cmp	r3, #30
 8010c40:	f04f 0201 	mov.w	r2, #1
 8010c44:	bfda      	itte	le
 8010c46:	f1c3 031f 	rsble	r3, r3, #31
 8010c4a:	fa02 f303 	lslle.w	r3, r2, r3
 8010c4e:	4613      	movgt	r3, r2
 8010c50:	4618      	mov	r0, r3
 8010c52:	e7e3      	b.n	8010c1c <__ulp+0x14>
 8010c54:	7ff00000 	.word	0x7ff00000

08010c58 <__b2d>:
 8010c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c5a:	6905      	ldr	r5, [r0, #16]
 8010c5c:	f100 0714 	add.w	r7, r0, #20
 8010c60:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8010c64:	1f2e      	subs	r6, r5, #4
 8010c66:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8010c6a:	4620      	mov	r0, r4
 8010c6c:	f7ff fdc4 	bl	80107f8 <__hi0bits>
 8010c70:	f1c0 0320 	rsb	r3, r0, #32
 8010c74:	280a      	cmp	r0, #10
 8010c76:	600b      	str	r3, [r1, #0]
 8010c78:	f8df c074 	ldr.w	ip, [pc, #116]	; 8010cf0 <__b2d+0x98>
 8010c7c:	dc14      	bgt.n	8010ca8 <__b2d+0x50>
 8010c7e:	f1c0 0e0b 	rsb	lr, r0, #11
 8010c82:	fa24 f10e 	lsr.w	r1, r4, lr
 8010c86:	42b7      	cmp	r7, r6
 8010c88:	ea41 030c 	orr.w	r3, r1, ip
 8010c8c:	bf34      	ite	cc
 8010c8e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010c92:	2100      	movcs	r1, #0
 8010c94:	3015      	adds	r0, #21
 8010c96:	fa04 f000 	lsl.w	r0, r4, r0
 8010c9a:	fa21 f10e 	lsr.w	r1, r1, lr
 8010c9e:	ea40 0201 	orr.w	r2, r0, r1
 8010ca2:	ec43 2b10 	vmov	d0, r2, r3
 8010ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ca8:	42b7      	cmp	r7, r6
 8010caa:	bf3a      	itte	cc
 8010cac:	f1a5 0608 	subcc.w	r6, r5, #8
 8010cb0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010cb4:	2100      	movcs	r1, #0
 8010cb6:	380b      	subs	r0, #11
 8010cb8:	d015      	beq.n	8010ce6 <__b2d+0x8e>
 8010cba:	4084      	lsls	r4, r0
 8010cbc:	f1c0 0520 	rsb	r5, r0, #32
 8010cc0:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8010cc4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8010cc8:	42be      	cmp	r6, r7
 8010cca:	fa21 fc05 	lsr.w	ip, r1, r5
 8010cce:	ea44 030c 	orr.w	r3, r4, ip
 8010cd2:	bf8c      	ite	hi
 8010cd4:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8010cd8:	2400      	movls	r4, #0
 8010cda:	fa01 f000 	lsl.w	r0, r1, r0
 8010cde:	40ec      	lsrs	r4, r5
 8010ce0:	ea40 0204 	orr.w	r2, r0, r4
 8010ce4:	e7dd      	b.n	8010ca2 <__b2d+0x4a>
 8010ce6:	ea44 030c 	orr.w	r3, r4, ip
 8010cea:	460a      	mov	r2, r1
 8010cec:	e7d9      	b.n	8010ca2 <__b2d+0x4a>
 8010cee:	bf00      	nop
 8010cf0:	3ff00000 	.word	0x3ff00000

08010cf4 <__d2b>:
 8010cf4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010cf8:	460e      	mov	r6, r1
 8010cfa:	2101      	movs	r1, #1
 8010cfc:	ec59 8b10 	vmov	r8, r9, d0
 8010d00:	4615      	mov	r5, r2
 8010d02:	f7ff fcb5 	bl	8010670 <_Balloc>
 8010d06:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8010d0a:	4607      	mov	r7, r0
 8010d0c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010d10:	bb34      	cbnz	r4, 8010d60 <__d2b+0x6c>
 8010d12:	9301      	str	r3, [sp, #4]
 8010d14:	f1b8 0300 	subs.w	r3, r8, #0
 8010d18:	d027      	beq.n	8010d6a <__d2b+0x76>
 8010d1a:	a802      	add	r0, sp, #8
 8010d1c:	f840 3d08 	str.w	r3, [r0, #-8]!
 8010d20:	f7ff fd89 	bl	8010836 <__lo0bits>
 8010d24:	9900      	ldr	r1, [sp, #0]
 8010d26:	b1f0      	cbz	r0, 8010d66 <__d2b+0x72>
 8010d28:	9a01      	ldr	r2, [sp, #4]
 8010d2a:	f1c0 0320 	rsb	r3, r0, #32
 8010d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8010d32:	430b      	orrs	r3, r1
 8010d34:	40c2      	lsrs	r2, r0
 8010d36:	617b      	str	r3, [r7, #20]
 8010d38:	9201      	str	r2, [sp, #4]
 8010d3a:	9b01      	ldr	r3, [sp, #4]
 8010d3c:	61bb      	str	r3, [r7, #24]
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	bf14      	ite	ne
 8010d42:	2102      	movne	r1, #2
 8010d44:	2101      	moveq	r1, #1
 8010d46:	6139      	str	r1, [r7, #16]
 8010d48:	b1c4      	cbz	r4, 8010d7c <__d2b+0x88>
 8010d4a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8010d4e:	4404      	add	r4, r0
 8010d50:	6034      	str	r4, [r6, #0]
 8010d52:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010d56:	6028      	str	r0, [r5, #0]
 8010d58:	4638      	mov	r0, r7
 8010d5a:	b003      	add	sp, #12
 8010d5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010d60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010d64:	e7d5      	b.n	8010d12 <__d2b+0x1e>
 8010d66:	6179      	str	r1, [r7, #20]
 8010d68:	e7e7      	b.n	8010d3a <__d2b+0x46>
 8010d6a:	a801      	add	r0, sp, #4
 8010d6c:	f7ff fd63 	bl	8010836 <__lo0bits>
 8010d70:	9b01      	ldr	r3, [sp, #4]
 8010d72:	617b      	str	r3, [r7, #20]
 8010d74:	2101      	movs	r1, #1
 8010d76:	6139      	str	r1, [r7, #16]
 8010d78:	3020      	adds	r0, #32
 8010d7a:	e7e5      	b.n	8010d48 <__d2b+0x54>
 8010d7c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8010d80:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010d84:	6030      	str	r0, [r6, #0]
 8010d86:	6918      	ldr	r0, [r3, #16]
 8010d88:	f7ff fd36 	bl	80107f8 <__hi0bits>
 8010d8c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8010d90:	e7e1      	b.n	8010d56 <__d2b+0x62>

08010d92 <__ratio>:
 8010d92:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d96:	4688      	mov	r8, r1
 8010d98:	4669      	mov	r1, sp
 8010d9a:	4681      	mov	r9, r0
 8010d9c:	f7ff ff5c 	bl	8010c58 <__b2d>
 8010da0:	a901      	add	r1, sp, #4
 8010da2:	4640      	mov	r0, r8
 8010da4:	ec57 6b10 	vmov	r6, r7, d0
 8010da8:	f7ff ff56 	bl	8010c58 <__b2d>
 8010dac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010db0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8010db4:	eba3 0c02 	sub.w	ip, r3, r2
 8010db8:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010dbc:	1a9b      	subs	r3, r3, r2
 8010dbe:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8010dc2:	ec5b ab10 	vmov	sl, fp, d0
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	bfce      	itee	gt
 8010dca:	463a      	movgt	r2, r7
 8010dcc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010dd0:	465a      	movle	r2, fp
 8010dd2:	4659      	mov	r1, fp
 8010dd4:	463d      	mov	r5, r7
 8010dd6:	bfd4      	ite	le
 8010dd8:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8010ddc:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8010de0:	4630      	mov	r0, r6
 8010de2:	ee10 2a10 	vmov	r2, s0
 8010de6:	460b      	mov	r3, r1
 8010de8:	4629      	mov	r1, r5
 8010dea:	f7ef fd2f 	bl	800084c <__aeabi_ddiv>
 8010dee:	ec41 0b10 	vmov	d0, r0, r1
 8010df2:	b003      	add	sp, #12
 8010df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010df8 <__copybits>:
 8010df8:	3901      	subs	r1, #1
 8010dfa:	b510      	push	{r4, lr}
 8010dfc:	1149      	asrs	r1, r1, #5
 8010dfe:	6914      	ldr	r4, [r2, #16]
 8010e00:	3101      	adds	r1, #1
 8010e02:	f102 0314 	add.w	r3, r2, #20
 8010e06:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010e0a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010e0e:	42a3      	cmp	r3, r4
 8010e10:	4602      	mov	r2, r0
 8010e12:	d303      	bcc.n	8010e1c <__copybits+0x24>
 8010e14:	2300      	movs	r3, #0
 8010e16:	428a      	cmp	r2, r1
 8010e18:	d305      	bcc.n	8010e26 <__copybits+0x2e>
 8010e1a:	bd10      	pop	{r4, pc}
 8010e1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e20:	f840 2b04 	str.w	r2, [r0], #4
 8010e24:	e7f3      	b.n	8010e0e <__copybits+0x16>
 8010e26:	f842 3b04 	str.w	r3, [r2], #4
 8010e2a:	e7f4      	b.n	8010e16 <__copybits+0x1e>

08010e2c <__any_on>:
 8010e2c:	f100 0214 	add.w	r2, r0, #20
 8010e30:	6900      	ldr	r0, [r0, #16]
 8010e32:	114b      	asrs	r3, r1, #5
 8010e34:	4298      	cmp	r0, r3
 8010e36:	b510      	push	{r4, lr}
 8010e38:	db11      	blt.n	8010e5e <__any_on+0x32>
 8010e3a:	dd0a      	ble.n	8010e52 <__any_on+0x26>
 8010e3c:	f011 011f 	ands.w	r1, r1, #31
 8010e40:	d007      	beq.n	8010e52 <__any_on+0x26>
 8010e42:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010e46:	fa24 f001 	lsr.w	r0, r4, r1
 8010e4a:	fa00 f101 	lsl.w	r1, r0, r1
 8010e4e:	428c      	cmp	r4, r1
 8010e50:	d10b      	bne.n	8010e6a <__any_on+0x3e>
 8010e52:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010e56:	4293      	cmp	r3, r2
 8010e58:	d803      	bhi.n	8010e62 <__any_on+0x36>
 8010e5a:	2000      	movs	r0, #0
 8010e5c:	bd10      	pop	{r4, pc}
 8010e5e:	4603      	mov	r3, r0
 8010e60:	e7f7      	b.n	8010e52 <__any_on+0x26>
 8010e62:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010e66:	2900      	cmp	r1, #0
 8010e68:	d0f5      	beq.n	8010e56 <__any_on+0x2a>
 8010e6a:	2001      	movs	r0, #1
 8010e6c:	e7f6      	b.n	8010e5c <__any_on+0x30>

08010e6e <_calloc_r>:
 8010e6e:	b538      	push	{r3, r4, r5, lr}
 8010e70:	fb02 f401 	mul.w	r4, r2, r1
 8010e74:	4621      	mov	r1, r4
 8010e76:	f7fc fc09 	bl	800d68c <_malloc_r>
 8010e7a:	4605      	mov	r5, r0
 8010e7c:	b118      	cbz	r0, 8010e86 <_calloc_r+0x18>
 8010e7e:	4622      	mov	r2, r4
 8010e80:	2100      	movs	r1, #0
 8010e82:	f7fc fbac 	bl	800d5de <memset>
 8010e86:	4628      	mov	r0, r5
 8010e88:	bd38      	pop	{r3, r4, r5, pc}

08010e8a <__ssputs_r>:
 8010e8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e8e:	688e      	ldr	r6, [r1, #8]
 8010e90:	429e      	cmp	r6, r3
 8010e92:	4682      	mov	sl, r0
 8010e94:	460c      	mov	r4, r1
 8010e96:	4690      	mov	r8, r2
 8010e98:	4699      	mov	r9, r3
 8010e9a:	d837      	bhi.n	8010f0c <__ssputs_r+0x82>
 8010e9c:	898a      	ldrh	r2, [r1, #12]
 8010e9e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010ea2:	d031      	beq.n	8010f08 <__ssputs_r+0x7e>
 8010ea4:	6825      	ldr	r5, [r4, #0]
 8010ea6:	6909      	ldr	r1, [r1, #16]
 8010ea8:	1a6f      	subs	r7, r5, r1
 8010eaa:	6965      	ldr	r5, [r4, #20]
 8010eac:	2302      	movs	r3, #2
 8010eae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010eb2:	fb95 f5f3 	sdiv	r5, r5, r3
 8010eb6:	f109 0301 	add.w	r3, r9, #1
 8010eba:	443b      	add	r3, r7
 8010ebc:	429d      	cmp	r5, r3
 8010ebe:	bf38      	it	cc
 8010ec0:	461d      	movcc	r5, r3
 8010ec2:	0553      	lsls	r3, r2, #21
 8010ec4:	d530      	bpl.n	8010f28 <__ssputs_r+0x9e>
 8010ec6:	4629      	mov	r1, r5
 8010ec8:	f7fc fbe0 	bl	800d68c <_malloc_r>
 8010ecc:	4606      	mov	r6, r0
 8010ece:	b950      	cbnz	r0, 8010ee6 <__ssputs_r+0x5c>
 8010ed0:	230c      	movs	r3, #12
 8010ed2:	f8ca 3000 	str.w	r3, [sl]
 8010ed6:	89a3      	ldrh	r3, [r4, #12]
 8010ed8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010edc:	81a3      	strh	r3, [r4, #12]
 8010ede:	f04f 30ff 	mov.w	r0, #4294967295
 8010ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ee6:	463a      	mov	r2, r7
 8010ee8:	6921      	ldr	r1, [r4, #16]
 8010eea:	f7fc fb6d 	bl	800d5c8 <memcpy>
 8010eee:	89a3      	ldrh	r3, [r4, #12]
 8010ef0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010ef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ef8:	81a3      	strh	r3, [r4, #12]
 8010efa:	6126      	str	r6, [r4, #16]
 8010efc:	6165      	str	r5, [r4, #20]
 8010efe:	443e      	add	r6, r7
 8010f00:	1bed      	subs	r5, r5, r7
 8010f02:	6026      	str	r6, [r4, #0]
 8010f04:	60a5      	str	r5, [r4, #8]
 8010f06:	464e      	mov	r6, r9
 8010f08:	454e      	cmp	r6, r9
 8010f0a:	d900      	bls.n	8010f0e <__ssputs_r+0x84>
 8010f0c:	464e      	mov	r6, r9
 8010f0e:	4632      	mov	r2, r6
 8010f10:	4641      	mov	r1, r8
 8010f12:	6820      	ldr	r0, [r4, #0]
 8010f14:	f000 fcb8 	bl	8011888 <memmove>
 8010f18:	68a3      	ldr	r3, [r4, #8]
 8010f1a:	1b9b      	subs	r3, r3, r6
 8010f1c:	60a3      	str	r3, [r4, #8]
 8010f1e:	6823      	ldr	r3, [r4, #0]
 8010f20:	441e      	add	r6, r3
 8010f22:	6026      	str	r6, [r4, #0]
 8010f24:	2000      	movs	r0, #0
 8010f26:	e7dc      	b.n	8010ee2 <__ssputs_r+0x58>
 8010f28:	462a      	mov	r2, r5
 8010f2a:	f000 fcc6 	bl	80118ba <_realloc_r>
 8010f2e:	4606      	mov	r6, r0
 8010f30:	2800      	cmp	r0, #0
 8010f32:	d1e2      	bne.n	8010efa <__ssputs_r+0x70>
 8010f34:	6921      	ldr	r1, [r4, #16]
 8010f36:	4650      	mov	r0, sl
 8010f38:	f7fc fb5a 	bl	800d5f0 <_free_r>
 8010f3c:	e7c8      	b.n	8010ed0 <__ssputs_r+0x46>
	...

08010f40 <_svfiprintf_r>:
 8010f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f44:	461d      	mov	r5, r3
 8010f46:	898b      	ldrh	r3, [r1, #12]
 8010f48:	061f      	lsls	r7, r3, #24
 8010f4a:	b09d      	sub	sp, #116	; 0x74
 8010f4c:	4680      	mov	r8, r0
 8010f4e:	460c      	mov	r4, r1
 8010f50:	4616      	mov	r6, r2
 8010f52:	d50f      	bpl.n	8010f74 <_svfiprintf_r+0x34>
 8010f54:	690b      	ldr	r3, [r1, #16]
 8010f56:	b96b      	cbnz	r3, 8010f74 <_svfiprintf_r+0x34>
 8010f58:	2140      	movs	r1, #64	; 0x40
 8010f5a:	f7fc fb97 	bl	800d68c <_malloc_r>
 8010f5e:	6020      	str	r0, [r4, #0]
 8010f60:	6120      	str	r0, [r4, #16]
 8010f62:	b928      	cbnz	r0, 8010f70 <_svfiprintf_r+0x30>
 8010f64:	230c      	movs	r3, #12
 8010f66:	f8c8 3000 	str.w	r3, [r8]
 8010f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8010f6e:	e0c8      	b.n	8011102 <_svfiprintf_r+0x1c2>
 8010f70:	2340      	movs	r3, #64	; 0x40
 8010f72:	6163      	str	r3, [r4, #20]
 8010f74:	2300      	movs	r3, #0
 8010f76:	9309      	str	r3, [sp, #36]	; 0x24
 8010f78:	2320      	movs	r3, #32
 8010f7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010f7e:	2330      	movs	r3, #48	; 0x30
 8010f80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010f84:	9503      	str	r5, [sp, #12]
 8010f86:	f04f 0b01 	mov.w	fp, #1
 8010f8a:	4637      	mov	r7, r6
 8010f8c:	463d      	mov	r5, r7
 8010f8e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010f92:	b10b      	cbz	r3, 8010f98 <_svfiprintf_r+0x58>
 8010f94:	2b25      	cmp	r3, #37	; 0x25
 8010f96:	d13e      	bne.n	8011016 <_svfiprintf_r+0xd6>
 8010f98:	ebb7 0a06 	subs.w	sl, r7, r6
 8010f9c:	d00b      	beq.n	8010fb6 <_svfiprintf_r+0x76>
 8010f9e:	4653      	mov	r3, sl
 8010fa0:	4632      	mov	r2, r6
 8010fa2:	4621      	mov	r1, r4
 8010fa4:	4640      	mov	r0, r8
 8010fa6:	f7ff ff70 	bl	8010e8a <__ssputs_r>
 8010faa:	3001      	adds	r0, #1
 8010fac:	f000 80a4 	beq.w	80110f8 <_svfiprintf_r+0x1b8>
 8010fb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010fb2:	4453      	add	r3, sl
 8010fb4:	9309      	str	r3, [sp, #36]	; 0x24
 8010fb6:	783b      	ldrb	r3, [r7, #0]
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	f000 809d 	beq.w	80110f8 <_svfiprintf_r+0x1b8>
 8010fbe:	2300      	movs	r3, #0
 8010fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8010fc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010fc8:	9304      	str	r3, [sp, #16]
 8010fca:	9307      	str	r3, [sp, #28]
 8010fcc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010fd0:	931a      	str	r3, [sp, #104]	; 0x68
 8010fd2:	462f      	mov	r7, r5
 8010fd4:	2205      	movs	r2, #5
 8010fd6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8010fda:	4850      	ldr	r0, [pc, #320]	; (801111c <_svfiprintf_r+0x1dc>)
 8010fdc:	f7ef f900 	bl	80001e0 <memchr>
 8010fe0:	9b04      	ldr	r3, [sp, #16]
 8010fe2:	b9d0      	cbnz	r0, 801101a <_svfiprintf_r+0xda>
 8010fe4:	06d9      	lsls	r1, r3, #27
 8010fe6:	bf44      	itt	mi
 8010fe8:	2220      	movmi	r2, #32
 8010fea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010fee:	071a      	lsls	r2, r3, #28
 8010ff0:	bf44      	itt	mi
 8010ff2:	222b      	movmi	r2, #43	; 0x2b
 8010ff4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010ff8:	782a      	ldrb	r2, [r5, #0]
 8010ffa:	2a2a      	cmp	r2, #42	; 0x2a
 8010ffc:	d015      	beq.n	801102a <_svfiprintf_r+0xea>
 8010ffe:	9a07      	ldr	r2, [sp, #28]
 8011000:	462f      	mov	r7, r5
 8011002:	2000      	movs	r0, #0
 8011004:	250a      	movs	r5, #10
 8011006:	4639      	mov	r1, r7
 8011008:	f811 3b01 	ldrb.w	r3, [r1], #1
 801100c:	3b30      	subs	r3, #48	; 0x30
 801100e:	2b09      	cmp	r3, #9
 8011010:	d94d      	bls.n	80110ae <_svfiprintf_r+0x16e>
 8011012:	b1b8      	cbz	r0, 8011044 <_svfiprintf_r+0x104>
 8011014:	e00f      	b.n	8011036 <_svfiprintf_r+0xf6>
 8011016:	462f      	mov	r7, r5
 8011018:	e7b8      	b.n	8010f8c <_svfiprintf_r+0x4c>
 801101a:	4a40      	ldr	r2, [pc, #256]	; (801111c <_svfiprintf_r+0x1dc>)
 801101c:	1a80      	subs	r0, r0, r2
 801101e:	fa0b f000 	lsl.w	r0, fp, r0
 8011022:	4318      	orrs	r0, r3
 8011024:	9004      	str	r0, [sp, #16]
 8011026:	463d      	mov	r5, r7
 8011028:	e7d3      	b.n	8010fd2 <_svfiprintf_r+0x92>
 801102a:	9a03      	ldr	r2, [sp, #12]
 801102c:	1d11      	adds	r1, r2, #4
 801102e:	6812      	ldr	r2, [r2, #0]
 8011030:	9103      	str	r1, [sp, #12]
 8011032:	2a00      	cmp	r2, #0
 8011034:	db01      	blt.n	801103a <_svfiprintf_r+0xfa>
 8011036:	9207      	str	r2, [sp, #28]
 8011038:	e004      	b.n	8011044 <_svfiprintf_r+0x104>
 801103a:	4252      	negs	r2, r2
 801103c:	f043 0302 	orr.w	r3, r3, #2
 8011040:	9207      	str	r2, [sp, #28]
 8011042:	9304      	str	r3, [sp, #16]
 8011044:	783b      	ldrb	r3, [r7, #0]
 8011046:	2b2e      	cmp	r3, #46	; 0x2e
 8011048:	d10c      	bne.n	8011064 <_svfiprintf_r+0x124>
 801104a:	787b      	ldrb	r3, [r7, #1]
 801104c:	2b2a      	cmp	r3, #42	; 0x2a
 801104e:	d133      	bne.n	80110b8 <_svfiprintf_r+0x178>
 8011050:	9b03      	ldr	r3, [sp, #12]
 8011052:	1d1a      	adds	r2, r3, #4
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	9203      	str	r2, [sp, #12]
 8011058:	2b00      	cmp	r3, #0
 801105a:	bfb8      	it	lt
 801105c:	f04f 33ff 	movlt.w	r3, #4294967295
 8011060:	3702      	adds	r7, #2
 8011062:	9305      	str	r3, [sp, #20]
 8011064:	4d2e      	ldr	r5, [pc, #184]	; (8011120 <_svfiprintf_r+0x1e0>)
 8011066:	7839      	ldrb	r1, [r7, #0]
 8011068:	2203      	movs	r2, #3
 801106a:	4628      	mov	r0, r5
 801106c:	f7ef f8b8 	bl	80001e0 <memchr>
 8011070:	b138      	cbz	r0, 8011082 <_svfiprintf_r+0x142>
 8011072:	2340      	movs	r3, #64	; 0x40
 8011074:	1b40      	subs	r0, r0, r5
 8011076:	fa03 f000 	lsl.w	r0, r3, r0
 801107a:	9b04      	ldr	r3, [sp, #16]
 801107c:	4303      	orrs	r3, r0
 801107e:	3701      	adds	r7, #1
 8011080:	9304      	str	r3, [sp, #16]
 8011082:	7839      	ldrb	r1, [r7, #0]
 8011084:	4827      	ldr	r0, [pc, #156]	; (8011124 <_svfiprintf_r+0x1e4>)
 8011086:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801108a:	2206      	movs	r2, #6
 801108c:	1c7e      	adds	r6, r7, #1
 801108e:	f7ef f8a7 	bl	80001e0 <memchr>
 8011092:	2800      	cmp	r0, #0
 8011094:	d038      	beq.n	8011108 <_svfiprintf_r+0x1c8>
 8011096:	4b24      	ldr	r3, [pc, #144]	; (8011128 <_svfiprintf_r+0x1e8>)
 8011098:	bb13      	cbnz	r3, 80110e0 <_svfiprintf_r+0x1a0>
 801109a:	9b03      	ldr	r3, [sp, #12]
 801109c:	3307      	adds	r3, #7
 801109e:	f023 0307 	bic.w	r3, r3, #7
 80110a2:	3308      	adds	r3, #8
 80110a4:	9303      	str	r3, [sp, #12]
 80110a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80110a8:	444b      	add	r3, r9
 80110aa:	9309      	str	r3, [sp, #36]	; 0x24
 80110ac:	e76d      	b.n	8010f8a <_svfiprintf_r+0x4a>
 80110ae:	fb05 3202 	mla	r2, r5, r2, r3
 80110b2:	2001      	movs	r0, #1
 80110b4:	460f      	mov	r7, r1
 80110b6:	e7a6      	b.n	8011006 <_svfiprintf_r+0xc6>
 80110b8:	2300      	movs	r3, #0
 80110ba:	3701      	adds	r7, #1
 80110bc:	9305      	str	r3, [sp, #20]
 80110be:	4619      	mov	r1, r3
 80110c0:	250a      	movs	r5, #10
 80110c2:	4638      	mov	r0, r7
 80110c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80110c8:	3a30      	subs	r2, #48	; 0x30
 80110ca:	2a09      	cmp	r2, #9
 80110cc:	d903      	bls.n	80110d6 <_svfiprintf_r+0x196>
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d0c8      	beq.n	8011064 <_svfiprintf_r+0x124>
 80110d2:	9105      	str	r1, [sp, #20]
 80110d4:	e7c6      	b.n	8011064 <_svfiprintf_r+0x124>
 80110d6:	fb05 2101 	mla	r1, r5, r1, r2
 80110da:	2301      	movs	r3, #1
 80110dc:	4607      	mov	r7, r0
 80110de:	e7f0      	b.n	80110c2 <_svfiprintf_r+0x182>
 80110e0:	ab03      	add	r3, sp, #12
 80110e2:	9300      	str	r3, [sp, #0]
 80110e4:	4622      	mov	r2, r4
 80110e6:	4b11      	ldr	r3, [pc, #68]	; (801112c <_svfiprintf_r+0x1ec>)
 80110e8:	a904      	add	r1, sp, #16
 80110ea:	4640      	mov	r0, r8
 80110ec:	f7fc fbbc 	bl	800d868 <_printf_float>
 80110f0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80110f4:	4681      	mov	r9, r0
 80110f6:	d1d6      	bne.n	80110a6 <_svfiprintf_r+0x166>
 80110f8:	89a3      	ldrh	r3, [r4, #12]
 80110fa:	065b      	lsls	r3, r3, #25
 80110fc:	f53f af35 	bmi.w	8010f6a <_svfiprintf_r+0x2a>
 8011100:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011102:	b01d      	add	sp, #116	; 0x74
 8011104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011108:	ab03      	add	r3, sp, #12
 801110a:	9300      	str	r3, [sp, #0]
 801110c:	4622      	mov	r2, r4
 801110e:	4b07      	ldr	r3, [pc, #28]	; (801112c <_svfiprintf_r+0x1ec>)
 8011110:	a904      	add	r1, sp, #16
 8011112:	4640      	mov	r0, r8
 8011114:	f7fc fe5e 	bl	800ddd4 <_printf_i>
 8011118:	e7ea      	b.n	80110f0 <_svfiprintf_r+0x1b0>
 801111a:	bf00      	nop
 801111c:	08011cec 	.word	0x08011cec
 8011120:	08011cf2 	.word	0x08011cf2
 8011124:	08011cf6 	.word	0x08011cf6
 8011128:	0800d869 	.word	0x0800d869
 801112c:	08010e8b 	.word	0x08010e8b

08011130 <__sfputc_r>:
 8011130:	6893      	ldr	r3, [r2, #8]
 8011132:	3b01      	subs	r3, #1
 8011134:	2b00      	cmp	r3, #0
 8011136:	b410      	push	{r4}
 8011138:	6093      	str	r3, [r2, #8]
 801113a:	da08      	bge.n	801114e <__sfputc_r+0x1e>
 801113c:	6994      	ldr	r4, [r2, #24]
 801113e:	42a3      	cmp	r3, r4
 8011140:	db01      	blt.n	8011146 <__sfputc_r+0x16>
 8011142:	290a      	cmp	r1, #10
 8011144:	d103      	bne.n	801114e <__sfputc_r+0x1e>
 8011146:	f85d 4b04 	ldr.w	r4, [sp], #4
 801114a:	f000 b987 	b.w	801145c <__swbuf_r>
 801114e:	6813      	ldr	r3, [r2, #0]
 8011150:	1c58      	adds	r0, r3, #1
 8011152:	6010      	str	r0, [r2, #0]
 8011154:	7019      	strb	r1, [r3, #0]
 8011156:	4608      	mov	r0, r1
 8011158:	f85d 4b04 	ldr.w	r4, [sp], #4
 801115c:	4770      	bx	lr

0801115e <__sfputs_r>:
 801115e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011160:	4606      	mov	r6, r0
 8011162:	460f      	mov	r7, r1
 8011164:	4614      	mov	r4, r2
 8011166:	18d5      	adds	r5, r2, r3
 8011168:	42ac      	cmp	r4, r5
 801116a:	d101      	bne.n	8011170 <__sfputs_r+0x12>
 801116c:	2000      	movs	r0, #0
 801116e:	e007      	b.n	8011180 <__sfputs_r+0x22>
 8011170:	463a      	mov	r2, r7
 8011172:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011176:	4630      	mov	r0, r6
 8011178:	f7ff ffda 	bl	8011130 <__sfputc_r>
 801117c:	1c43      	adds	r3, r0, #1
 801117e:	d1f3      	bne.n	8011168 <__sfputs_r+0xa>
 8011180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011184 <_vfiprintf_r>:
 8011184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011188:	460c      	mov	r4, r1
 801118a:	b09d      	sub	sp, #116	; 0x74
 801118c:	4617      	mov	r7, r2
 801118e:	461d      	mov	r5, r3
 8011190:	4606      	mov	r6, r0
 8011192:	b118      	cbz	r0, 801119c <_vfiprintf_r+0x18>
 8011194:	6983      	ldr	r3, [r0, #24]
 8011196:	b90b      	cbnz	r3, 801119c <_vfiprintf_r+0x18>
 8011198:	f7fe fe92 	bl	800fec0 <__sinit>
 801119c:	4b7c      	ldr	r3, [pc, #496]	; (8011390 <_vfiprintf_r+0x20c>)
 801119e:	429c      	cmp	r4, r3
 80111a0:	d158      	bne.n	8011254 <_vfiprintf_r+0xd0>
 80111a2:	6874      	ldr	r4, [r6, #4]
 80111a4:	89a3      	ldrh	r3, [r4, #12]
 80111a6:	0718      	lsls	r0, r3, #28
 80111a8:	d55e      	bpl.n	8011268 <_vfiprintf_r+0xe4>
 80111aa:	6923      	ldr	r3, [r4, #16]
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d05b      	beq.n	8011268 <_vfiprintf_r+0xe4>
 80111b0:	2300      	movs	r3, #0
 80111b2:	9309      	str	r3, [sp, #36]	; 0x24
 80111b4:	2320      	movs	r3, #32
 80111b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80111ba:	2330      	movs	r3, #48	; 0x30
 80111bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80111c0:	9503      	str	r5, [sp, #12]
 80111c2:	f04f 0b01 	mov.w	fp, #1
 80111c6:	46b8      	mov	r8, r7
 80111c8:	4645      	mov	r5, r8
 80111ca:	f815 3b01 	ldrb.w	r3, [r5], #1
 80111ce:	b10b      	cbz	r3, 80111d4 <_vfiprintf_r+0x50>
 80111d0:	2b25      	cmp	r3, #37	; 0x25
 80111d2:	d154      	bne.n	801127e <_vfiprintf_r+0xfa>
 80111d4:	ebb8 0a07 	subs.w	sl, r8, r7
 80111d8:	d00b      	beq.n	80111f2 <_vfiprintf_r+0x6e>
 80111da:	4653      	mov	r3, sl
 80111dc:	463a      	mov	r2, r7
 80111de:	4621      	mov	r1, r4
 80111e0:	4630      	mov	r0, r6
 80111e2:	f7ff ffbc 	bl	801115e <__sfputs_r>
 80111e6:	3001      	adds	r0, #1
 80111e8:	f000 80c2 	beq.w	8011370 <_vfiprintf_r+0x1ec>
 80111ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80111ee:	4453      	add	r3, sl
 80111f0:	9309      	str	r3, [sp, #36]	; 0x24
 80111f2:	f898 3000 	ldrb.w	r3, [r8]
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	f000 80ba 	beq.w	8011370 <_vfiprintf_r+0x1ec>
 80111fc:	2300      	movs	r3, #0
 80111fe:	f04f 32ff 	mov.w	r2, #4294967295
 8011202:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011206:	9304      	str	r3, [sp, #16]
 8011208:	9307      	str	r3, [sp, #28]
 801120a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801120e:	931a      	str	r3, [sp, #104]	; 0x68
 8011210:	46a8      	mov	r8, r5
 8011212:	2205      	movs	r2, #5
 8011214:	f818 1b01 	ldrb.w	r1, [r8], #1
 8011218:	485e      	ldr	r0, [pc, #376]	; (8011394 <_vfiprintf_r+0x210>)
 801121a:	f7ee ffe1 	bl	80001e0 <memchr>
 801121e:	9b04      	ldr	r3, [sp, #16]
 8011220:	bb78      	cbnz	r0, 8011282 <_vfiprintf_r+0xfe>
 8011222:	06d9      	lsls	r1, r3, #27
 8011224:	bf44      	itt	mi
 8011226:	2220      	movmi	r2, #32
 8011228:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801122c:	071a      	lsls	r2, r3, #28
 801122e:	bf44      	itt	mi
 8011230:	222b      	movmi	r2, #43	; 0x2b
 8011232:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011236:	782a      	ldrb	r2, [r5, #0]
 8011238:	2a2a      	cmp	r2, #42	; 0x2a
 801123a:	d02a      	beq.n	8011292 <_vfiprintf_r+0x10e>
 801123c:	9a07      	ldr	r2, [sp, #28]
 801123e:	46a8      	mov	r8, r5
 8011240:	2000      	movs	r0, #0
 8011242:	250a      	movs	r5, #10
 8011244:	4641      	mov	r1, r8
 8011246:	f811 3b01 	ldrb.w	r3, [r1], #1
 801124a:	3b30      	subs	r3, #48	; 0x30
 801124c:	2b09      	cmp	r3, #9
 801124e:	d969      	bls.n	8011324 <_vfiprintf_r+0x1a0>
 8011250:	b360      	cbz	r0, 80112ac <_vfiprintf_r+0x128>
 8011252:	e024      	b.n	801129e <_vfiprintf_r+0x11a>
 8011254:	4b50      	ldr	r3, [pc, #320]	; (8011398 <_vfiprintf_r+0x214>)
 8011256:	429c      	cmp	r4, r3
 8011258:	d101      	bne.n	801125e <_vfiprintf_r+0xda>
 801125a:	68b4      	ldr	r4, [r6, #8]
 801125c:	e7a2      	b.n	80111a4 <_vfiprintf_r+0x20>
 801125e:	4b4f      	ldr	r3, [pc, #316]	; (801139c <_vfiprintf_r+0x218>)
 8011260:	429c      	cmp	r4, r3
 8011262:	bf08      	it	eq
 8011264:	68f4      	ldreq	r4, [r6, #12]
 8011266:	e79d      	b.n	80111a4 <_vfiprintf_r+0x20>
 8011268:	4621      	mov	r1, r4
 801126a:	4630      	mov	r0, r6
 801126c:	f000 f968 	bl	8011540 <__swsetup_r>
 8011270:	2800      	cmp	r0, #0
 8011272:	d09d      	beq.n	80111b0 <_vfiprintf_r+0x2c>
 8011274:	f04f 30ff 	mov.w	r0, #4294967295
 8011278:	b01d      	add	sp, #116	; 0x74
 801127a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801127e:	46a8      	mov	r8, r5
 8011280:	e7a2      	b.n	80111c8 <_vfiprintf_r+0x44>
 8011282:	4a44      	ldr	r2, [pc, #272]	; (8011394 <_vfiprintf_r+0x210>)
 8011284:	1a80      	subs	r0, r0, r2
 8011286:	fa0b f000 	lsl.w	r0, fp, r0
 801128a:	4318      	orrs	r0, r3
 801128c:	9004      	str	r0, [sp, #16]
 801128e:	4645      	mov	r5, r8
 8011290:	e7be      	b.n	8011210 <_vfiprintf_r+0x8c>
 8011292:	9a03      	ldr	r2, [sp, #12]
 8011294:	1d11      	adds	r1, r2, #4
 8011296:	6812      	ldr	r2, [r2, #0]
 8011298:	9103      	str	r1, [sp, #12]
 801129a:	2a00      	cmp	r2, #0
 801129c:	db01      	blt.n	80112a2 <_vfiprintf_r+0x11e>
 801129e:	9207      	str	r2, [sp, #28]
 80112a0:	e004      	b.n	80112ac <_vfiprintf_r+0x128>
 80112a2:	4252      	negs	r2, r2
 80112a4:	f043 0302 	orr.w	r3, r3, #2
 80112a8:	9207      	str	r2, [sp, #28]
 80112aa:	9304      	str	r3, [sp, #16]
 80112ac:	f898 3000 	ldrb.w	r3, [r8]
 80112b0:	2b2e      	cmp	r3, #46	; 0x2e
 80112b2:	d10e      	bne.n	80112d2 <_vfiprintf_r+0x14e>
 80112b4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80112b8:	2b2a      	cmp	r3, #42	; 0x2a
 80112ba:	d138      	bne.n	801132e <_vfiprintf_r+0x1aa>
 80112bc:	9b03      	ldr	r3, [sp, #12]
 80112be:	1d1a      	adds	r2, r3, #4
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	9203      	str	r2, [sp, #12]
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	bfb8      	it	lt
 80112c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80112cc:	f108 0802 	add.w	r8, r8, #2
 80112d0:	9305      	str	r3, [sp, #20]
 80112d2:	4d33      	ldr	r5, [pc, #204]	; (80113a0 <_vfiprintf_r+0x21c>)
 80112d4:	f898 1000 	ldrb.w	r1, [r8]
 80112d8:	2203      	movs	r2, #3
 80112da:	4628      	mov	r0, r5
 80112dc:	f7ee ff80 	bl	80001e0 <memchr>
 80112e0:	b140      	cbz	r0, 80112f4 <_vfiprintf_r+0x170>
 80112e2:	2340      	movs	r3, #64	; 0x40
 80112e4:	1b40      	subs	r0, r0, r5
 80112e6:	fa03 f000 	lsl.w	r0, r3, r0
 80112ea:	9b04      	ldr	r3, [sp, #16]
 80112ec:	4303      	orrs	r3, r0
 80112ee:	f108 0801 	add.w	r8, r8, #1
 80112f2:	9304      	str	r3, [sp, #16]
 80112f4:	f898 1000 	ldrb.w	r1, [r8]
 80112f8:	482a      	ldr	r0, [pc, #168]	; (80113a4 <_vfiprintf_r+0x220>)
 80112fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80112fe:	2206      	movs	r2, #6
 8011300:	f108 0701 	add.w	r7, r8, #1
 8011304:	f7ee ff6c 	bl	80001e0 <memchr>
 8011308:	2800      	cmp	r0, #0
 801130a:	d037      	beq.n	801137c <_vfiprintf_r+0x1f8>
 801130c:	4b26      	ldr	r3, [pc, #152]	; (80113a8 <_vfiprintf_r+0x224>)
 801130e:	bb1b      	cbnz	r3, 8011358 <_vfiprintf_r+0x1d4>
 8011310:	9b03      	ldr	r3, [sp, #12]
 8011312:	3307      	adds	r3, #7
 8011314:	f023 0307 	bic.w	r3, r3, #7
 8011318:	3308      	adds	r3, #8
 801131a:	9303      	str	r3, [sp, #12]
 801131c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801131e:	444b      	add	r3, r9
 8011320:	9309      	str	r3, [sp, #36]	; 0x24
 8011322:	e750      	b.n	80111c6 <_vfiprintf_r+0x42>
 8011324:	fb05 3202 	mla	r2, r5, r2, r3
 8011328:	2001      	movs	r0, #1
 801132a:	4688      	mov	r8, r1
 801132c:	e78a      	b.n	8011244 <_vfiprintf_r+0xc0>
 801132e:	2300      	movs	r3, #0
 8011330:	f108 0801 	add.w	r8, r8, #1
 8011334:	9305      	str	r3, [sp, #20]
 8011336:	4619      	mov	r1, r3
 8011338:	250a      	movs	r5, #10
 801133a:	4640      	mov	r0, r8
 801133c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011340:	3a30      	subs	r2, #48	; 0x30
 8011342:	2a09      	cmp	r2, #9
 8011344:	d903      	bls.n	801134e <_vfiprintf_r+0x1ca>
 8011346:	2b00      	cmp	r3, #0
 8011348:	d0c3      	beq.n	80112d2 <_vfiprintf_r+0x14e>
 801134a:	9105      	str	r1, [sp, #20]
 801134c:	e7c1      	b.n	80112d2 <_vfiprintf_r+0x14e>
 801134e:	fb05 2101 	mla	r1, r5, r1, r2
 8011352:	2301      	movs	r3, #1
 8011354:	4680      	mov	r8, r0
 8011356:	e7f0      	b.n	801133a <_vfiprintf_r+0x1b6>
 8011358:	ab03      	add	r3, sp, #12
 801135a:	9300      	str	r3, [sp, #0]
 801135c:	4622      	mov	r2, r4
 801135e:	4b13      	ldr	r3, [pc, #76]	; (80113ac <_vfiprintf_r+0x228>)
 8011360:	a904      	add	r1, sp, #16
 8011362:	4630      	mov	r0, r6
 8011364:	f7fc fa80 	bl	800d868 <_printf_float>
 8011368:	f1b0 3fff 	cmp.w	r0, #4294967295
 801136c:	4681      	mov	r9, r0
 801136e:	d1d5      	bne.n	801131c <_vfiprintf_r+0x198>
 8011370:	89a3      	ldrh	r3, [r4, #12]
 8011372:	065b      	lsls	r3, r3, #25
 8011374:	f53f af7e 	bmi.w	8011274 <_vfiprintf_r+0xf0>
 8011378:	9809      	ldr	r0, [sp, #36]	; 0x24
 801137a:	e77d      	b.n	8011278 <_vfiprintf_r+0xf4>
 801137c:	ab03      	add	r3, sp, #12
 801137e:	9300      	str	r3, [sp, #0]
 8011380:	4622      	mov	r2, r4
 8011382:	4b0a      	ldr	r3, [pc, #40]	; (80113ac <_vfiprintf_r+0x228>)
 8011384:	a904      	add	r1, sp, #16
 8011386:	4630      	mov	r0, r6
 8011388:	f7fc fd24 	bl	800ddd4 <_printf_i>
 801138c:	e7ec      	b.n	8011368 <_vfiprintf_r+0x1e4>
 801138e:	bf00      	nop
 8011390:	08011ba0 	.word	0x08011ba0
 8011394:	08011cec 	.word	0x08011cec
 8011398:	08011bc0 	.word	0x08011bc0
 801139c:	08011b80 	.word	0x08011b80
 80113a0:	08011cf2 	.word	0x08011cf2
 80113a4:	08011cf6 	.word	0x08011cf6
 80113a8:	0800d869 	.word	0x0800d869
 80113ac:	0801115f 	.word	0x0801115f

080113b0 <__sread>:
 80113b0:	b510      	push	{r4, lr}
 80113b2:	460c      	mov	r4, r1
 80113b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80113b8:	f000 faa6 	bl	8011908 <_read_r>
 80113bc:	2800      	cmp	r0, #0
 80113be:	bfab      	itete	ge
 80113c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80113c2:	89a3      	ldrhlt	r3, [r4, #12]
 80113c4:	181b      	addge	r3, r3, r0
 80113c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80113ca:	bfac      	ite	ge
 80113cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80113ce:	81a3      	strhlt	r3, [r4, #12]
 80113d0:	bd10      	pop	{r4, pc}

080113d2 <__swrite>:
 80113d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113d6:	461f      	mov	r7, r3
 80113d8:	898b      	ldrh	r3, [r1, #12]
 80113da:	05db      	lsls	r3, r3, #23
 80113dc:	4605      	mov	r5, r0
 80113de:	460c      	mov	r4, r1
 80113e0:	4616      	mov	r6, r2
 80113e2:	d505      	bpl.n	80113f0 <__swrite+0x1e>
 80113e4:	2302      	movs	r3, #2
 80113e6:	2200      	movs	r2, #0
 80113e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80113ec:	f000 f9d6 	bl	801179c <_lseek_r>
 80113f0:	89a3      	ldrh	r3, [r4, #12]
 80113f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80113f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80113fa:	81a3      	strh	r3, [r4, #12]
 80113fc:	4632      	mov	r2, r6
 80113fe:	463b      	mov	r3, r7
 8011400:	4628      	mov	r0, r5
 8011402:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011406:	f000 b889 	b.w	801151c <_write_r>

0801140a <__sseek>:
 801140a:	b510      	push	{r4, lr}
 801140c:	460c      	mov	r4, r1
 801140e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011412:	f000 f9c3 	bl	801179c <_lseek_r>
 8011416:	1c43      	adds	r3, r0, #1
 8011418:	89a3      	ldrh	r3, [r4, #12]
 801141a:	bf15      	itete	ne
 801141c:	6560      	strne	r0, [r4, #84]	; 0x54
 801141e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011422:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011426:	81a3      	strheq	r3, [r4, #12]
 8011428:	bf18      	it	ne
 801142a:	81a3      	strhne	r3, [r4, #12]
 801142c:	bd10      	pop	{r4, pc}

0801142e <__sclose>:
 801142e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011432:	f000 b8f3 	b.w	801161c <_close_r>

08011436 <strncmp>:
 8011436:	b510      	push	{r4, lr}
 8011438:	b16a      	cbz	r2, 8011456 <strncmp+0x20>
 801143a:	3901      	subs	r1, #1
 801143c:	1884      	adds	r4, r0, r2
 801143e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8011442:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8011446:	4293      	cmp	r3, r2
 8011448:	d103      	bne.n	8011452 <strncmp+0x1c>
 801144a:	42a0      	cmp	r0, r4
 801144c:	d001      	beq.n	8011452 <strncmp+0x1c>
 801144e:	2b00      	cmp	r3, #0
 8011450:	d1f5      	bne.n	801143e <strncmp+0x8>
 8011452:	1a98      	subs	r0, r3, r2
 8011454:	bd10      	pop	{r4, pc}
 8011456:	4610      	mov	r0, r2
 8011458:	e7fc      	b.n	8011454 <strncmp+0x1e>
	...

0801145c <__swbuf_r>:
 801145c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801145e:	460e      	mov	r6, r1
 8011460:	4614      	mov	r4, r2
 8011462:	4605      	mov	r5, r0
 8011464:	b118      	cbz	r0, 801146e <__swbuf_r+0x12>
 8011466:	6983      	ldr	r3, [r0, #24]
 8011468:	b90b      	cbnz	r3, 801146e <__swbuf_r+0x12>
 801146a:	f7fe fd29 	bl	800fec0 <__sinit>
 801146e:	4b21      	ldr	r3, [pc, #132]	; (80114f4 <__swbuf_r+0x98>)
 8011470:	429c      	cmp	r4, r3
 8011472:	d12a      	bne.n	80114ca <__swbuf_r+0x6e>
 8011474:	686c      	ldr	r4, [r5, #4]
 8011476:	69a3      	ldr	r3, [r4, #24]
 8011478:	60a3      	str	r3, [r4, #8]
 801147a:	89a3      	ldrh	r3, [r4, #12]
 801147c:	071a      	lsls	r2, r3, #28
 801147e:	d52e      	bpl.n	80114de <__swbuf_r+0x82>
 8011480:	6923      	ldr	r3, [r4, #16]
 8011482:	b363      	cbz	r3, 80114de <__swbuf_r+0x82>
 8011484:	6923      	ldr	r3, [r4, #16]
 8011486:	6820      	ldr	r0, [r4, #0]
 8011488:	1ac0      	subs	r0, r0, r3
 801148a:	6963      	ldr	r3, [r4, #20]
 801148c:	b2f6      	uxtb	r6, r6
 801148e:	4283      	cmp	r3, r0
 8011490:	4637      	mov	r7, r6
 8011492:	dc04      	bgt.n	801149e <__swbuf_r+0x42>
 8011494:	4621      	mov	r1, r4
 8011496:	4628      	mov	r0, r5
 8011498:	f000 f956 	bl	8011748 <_fflush_r>
 801149c:	bb28      	cbnz	r0, 80114ea <__swbuf_r+0x8e>
 801149e:	68a3      	ldr	r3, [r4, #8]
 80114a0:	3b01      	subs	r3, #1
 80114a2:	60a3      	str	r3, [r4, #8]
 80114a4:	6823      	ldr	r3, [r4, #0]
 80114a6:	1c5a      	adds	r2, r3, #1
 80114a8:	6022      	str	r2, [r4, #0]
 80114aa:	701e      	strb	r6, [r3, #0]
 80114ac:	6963      	ldr	r3, [r4, #20]
 80114ae:	3001      	adds	r0, #1
 80114b0:	4283      	cmp	r3, r0
 80114b2:	d004      	beq.n	80114be <__swbuf_r+0x62>
 80114b4:	89a3      	ldrh	r3, [r4, #12]
 80114b6:	07db      	lsls	r3, r3, #31
 80114b8:	d519      	bpl.n	80114ee <__swbuf_r+0x92>
 80114ba:	2e0a      	cmp	r6, #10
 80114bc:	d117      	bne.n	80114ee <__swbuf_r+0x92>
 80114be:	4621      	mov	r1, r4
 80114c0:	4628      	mov	r0, r5
 80114c2:	f000 f941 	bl	8011748 <_fflush_r>
 80114c6:	b190      	cbz	r0, 80114ee <__swbuf_r+0x92>
 80114c8:	e00f      	b.n	80114ea <__swbuf_r+0x8e>
 80114ca:	4b0b      	ldr	r3, [pc, #44]	; (80114f8 <__swbuf_r+0x9c>)
 80114cc:	429c      	cmp	r4, r3
 80114ce:	d101      	bne.n	80114d4 <__swbuf_r+0x78>
 80114d0:	68ac      	ldr	r4, [r5, #8]
 80114d2:	e7d0      	b.n	8011476 <__swbuf_r+0x1a>
 80114d4:	4b09      	ldr	r3, [pc, #36]	; (80114fc <__swbuf_r+0xa0>)
 80114d6:	429c      	cmp	r4, r3
 80114d8:	bf08      	it	eq
 80114da:	68ec      	ldreq	r4, [r5, #12]
 80114dc:	e7cb      	b.n	8011476 <__swbuf_r+0x1a>
 80114de:	4621      	mov	r1, r4
 80114e0:	4628      	mov	r0, r5
 80114e2:	f000 f82d 	bl	8011540 <__swsetup_r>
 80114e6:	2800      	cmp	r0, #0
 80114e8:	d0cc      	beq.n	8011484 <__swbuf_r+0x28>
 80114ea:	f04f 37ff 	mov.w	r7, #4294967295
 80114ee:	4638      	mov	r0, r7
 80114f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80114f2:	bf00      	nop
 80114f4:	08011ba0 	.word	0x08011ba0
 80114f8:	08011bc0 	.word	0x08011bc0
 80114fc:	08011b80 	.word	0x08011b80

08011500 <__ascii_wctomb>:
 8011500:	b149      	cbz	r1, 8011516 <__ascii_wctomb+0x16>
 8011502:	2aff      	cmp	r2, #255	; 0xff
 8011504:	bf85      	ittet	hi
 8011506:	238a      	movhi	r3, #138	; 0x8a
 8011508:	6003      	strhi	r3, [r0, #0]
 801150a:	700a      	strbls	r2, [r1, #0]
 801150c:	f04f 30ff 	movhi.w	r0, #4294967295
 8011510:	bf98      	it	ls
 8011512:	2001      	movls	r0, #1
 8011514:	4770      	bx	lr
 8011516:	4608      	mov	r0, r1
 8011518:	4770      	bx	lr
	...

0801151c <_write_r>:
 801151c:	b538      	push	{r3, r4, r5, lr}
 801151e:	4c07      	ldr	r4, [pc, #28]	; (801153c <_write_r+0x20>)
 8011520:	4605      	mov	r5, r0
 8011522:	4608      	mov	r0, r1
 8011524:	4611      	mov	r1, r2
 8011526:	2200      	movs	r2, #0
 8011528:	6022      	str	r2, [r4, #0]
 801152a:	461a      	mov	r2, r3
 801152c:	f7f1 fc01 	bl	8002d32 <_write>
 8011530:	1c43      	adds	r3, r0, #1
 8011532:	d102      	bne.n	801153a <_write_r+0x1e>
 8011534:	6823      	ldr	r3, [r4, #0]
 8011536:	b103      	cbz	r3, 801153a <_write_r+0x1e>
 8011538:	602b      	str	r3, [r5, #0]
 801153a:	bd38      	pop	{r3, r4, r5, pc}
 801153c:	20002848 	.word	0x20002848

08011540 <__swsetup_r>:
 8011540:	4b32      	ldr	r3, [pc, #200]	; (801160c <__swsetup_r+0xcc>)
 8011542:	b570      	push	{r4, r5, r6, lr}
 8011544:	681d      	ldr	r5, [r3, #0]
 8011546:	4606      	mov	r6, r0
 8011548:	460c      	mov	r4, r1
 801154a:	b125      	cbz	r5, 8011556 <__swsetup_r+0x16>
 801154c:	69ab      	ldr	r3, [r5, #24]
 801154e:	b913      	cbnz	r3, 8011556 <__swsetup_r+0x16>
 8011550:	4628      	mov	r0, r5
 8011552:	f7fe fcb5 	bl	800fec0 <__sinit>
 8011556:	4b2e      	ldr	r3, [pc, #184]	; (8011610 <__swsetup_r+0xd0>)
 8011558:	429c      	cmp	r4, r3
 801155a:	d10f      	bne.n	801157c <__swsetup_r+0x3c>
 801155c:	686c      	ldr	r4, [r5, #4]
 801155e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011562:	b29a      	uxth	r2, r3
 8011564:	0715      	lsls	r5, r2, #28
 8011566:	d42c      	bmi.n	80115c2 <__swsetup_r+0x82>
 8011568:	06d0      	lsls	r0, r2, #27
 801156a:	d411      	bmi.n	8011590 <__swsetup_r+0x50>
 801156c:	2209      	movs	r2, #9
 801156e:	6032      	str	r2, [r6, #0]
 8011570:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011574:	81a3      	strh	r3, [r4, #12]
 8011576:	f04f 30ff 	mov.w	r0, #4294967295
 801157a:	e03e      	b.n	80115fa <__swsetup_r+0xba>
 801157c:	4b25      	ldr	r3, [pc, #148]	; (8011614 <__swsetup_r+0xd4>)
 801157e:	429c      	cmp	r4, r3
 8011580:	d101      	bne.n	8011586 <__swsetup_r+0x46>
 8011582:	68ac      	ldr	r4, [r5, #8]
 8011584:	e7eb      	b.n	801155e <__swsetup_r+0x1e>
 8011586:	4b24      	ldr	r3, [pc, #144]	; (8011618 <__swsetup_r+0xd8>)
 8011588:	429c      	cmp	r4, r3
 801158a:	bf08      	it	eq
 801158c:	68ec      	ldreq	r4, [r5, #12]
 801158e:	e7e6      	b.n	801155e <__swsetup_r+0x1e>
 8011590:	0751      	lsls	r1, r2, #29
 8011592:	d512      	bpl.n	80115ba <__swsetup_r+0x7a>
 8011594:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011596:	b141      	cbz	r1, 80115aa <__swsetup_r+0x6a>
 8011598:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801159c:	4299      	cmp	r1, r3
 801159e:	d002      	beq.n	80115a6 <__swsetup_r+0x66>
 80115a0:	4630      	mov	r0, r6
 80115a2:	f7fc f825 	bl	800d5f0 <_free_r>
 80115a6:	2300      	movs	r3, #0
 80115a8:	6363      	str	r3, [r4, #52]	; 0x34
 80115aa:	89a3      	ldrh	r3, [r4, #12]
 80115ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80115b0:	81a3      	strh	r3, [r4, #12]
 80115b2:	2300      	movs	r3, #0
 80115b4:	6063      	str	r3, [r4, #4]
 80115b6:	6923      	ldr	r3, [r4, #16]
 80115b8:	6023      	str	r3, [r4, #0]
 80115ba:	89a3      	ldrh	r3, [r4, #12]
 80115bc:	f043 0308 	orr.w	r3, r3, #8
 80115c0:	81a3      	strh	r3, [r4, #12]
 80115c2:	6923      	ldr	r3, [r4, #16]
 80115c4:	b94b      	cbnz	r3, 80115da <__swsetup_r+0x9a>
 80115c6:	89a3      	ldrh	r3, [r4, #12]
 80115c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80115cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80115d0:	d003      	beq.n	80115da <__swsetup_r+0x9a>
 80115d2:	4621      	mov	r1, r4
 80115d4:	4630      	mov	r0, r6
 80115d6:	f000 f917 	bl	8011808 <__smakebuf_r>
 80115da:	89a2      	ldrh	r2, [r4, #12]
 80115dc:	f012 0301 	ands.w	r3, r2, #1
 80115e0:	d00c      	beq.n	80115fc <__swsetup_r+0xbc>
 80115e2:	2300      	movs	r3, #0
 80115e4:	60a3      	str	r3, [r4, #8]
 80115e6:	6963      	ldr	r3, [r4, #20]
 80115e8:	425b      	negs	r3, r3
 80115ea:	61a3      	str	r3, [r4, #24]
 80115ec:	6923      	ldr	r3, [r4, #16]
 80115ee:	b953      	cbnz	r3, 8011606 <__swsetup_r+0xc6>
 80115f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80115f4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80115f8:	d1ba      	bne.n	8011570 <__swsetup_r+0x30>
 80115fa:	bd70      	pop	{r4, r5, r6, pc}
 80115fc:	0792      	lsls	r2, r2, #30
 80115fe:	bf58      	it	pl
 8011600:	6963      	ldrpl	r3, [r4, #20]
 8011602:	60a3      	str	r3, [r4, #8]
 8011604:	e7f2      	b.n	80115ec <__swsetup_r+0xac>
 8011606:	2000      	movs	r0, #0
 8011608:	e7f7      	b.n	80115fa <__swsetup_r+0xba>
 801160a:	bf00      	nop
 801160c:	2000018c 	.word	0x2000018c
 8011610:	08011ba0 	.word	0x08011ba0
 8011614:	08011bc0 	.word	0x08011bc0
 8011618:	08011b80 	.word	0x08011b80

0801161c <_close_r>:
 801161c:	b538      	push	{r3, r4, r5, lr}
 801161e:	4c06      	ldr	r4, [pc, #24]	; (8011638 <_close_r+0x1c>)
 8011620:	2300      	movs	r3, #0
 8011622:	4605      	mov	r5, r0
 8011624:	4608      	mov	r0, r1
 8011626:	6023      	str	r3, [r4, #0]
 8011628:	f7f1 fb9f 	bl	8002d6a <_close>
 801162c:	1c43      	adds	r3, r0, #1
 801162e:	d102      	bne.n	8011636 <_close_r+0x1a>
 8011630:	6823      	ldr	r3, [r4, #0]
 8011632:	b103      	cbz	r3, 8011636 <_close_r+0x1a>
 8011634:	602b      	str	r3, [r5, #0]
 8011636:	bd38      	pop	{r3, r4, r5, pc}
 8011638:	20002848 	.word	0x20002848

0801163c <__sflush_r>:
 801163c:	898a      	ldrh	r2, [r1, #12]
 801163e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011642:	4605      	mov	r5, r0
 8011644:	0710      	lsls	r0, r2, #28
 8011646:	460c      	mov	r4, r1
 8011648:	d458      	bmi.n	80116fc <__sflush_r+0xc0>
 801164a:	684b      	ldr	r3, [r1, #4]
 801164c:	2b00      	cmp	r3, #0
 801164e:	dc05      	bgt.n	801165c <__sflush_r+0x20>
 8011650:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011652:	2b00      	cmp	r3, #0
 8011654:	dc02      	bgt.n	801165c <__sflush_r+0x20>
 8011656:	2000      	movs	r0, #0
 8011658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801165c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801165e:	2e00      	cmp	r6, #0
 8011660:	d0f9      	beq.n	8011656 <__sflush_r+0x1a>
 8011662:	2300      	movs	r3, #0
 8011664:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011668:	682f      	ldr	r7, [r5, #0]
 801166a:	6a21      	ldr	r1, [r4, #32]
 801166c:	602b      	str	r3, [r5, #0]
 801166e:	d032      	beq.n	80116d6 <__sflush_r+0x9a>
 8011670:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011672:	89a3      	ldrh	r3, [r4, #12]
 8011674:	075a      	lsls	r2, r3, #29
 8011676:	d505      	bpl.n	8011684 <__sflush_r+0x48>
 8011678:	6863      	ldr	r3, [r4, #4]
 801167a:	1ac0      	subs	r0, r0, r3
 801167c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801167e:	b10b      	cbz	r3, 8011684 <__sflush_r+0x48>
 8011680:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011682:	1ac0      	subs	r0, r0, r3
 8011684:	2300      	movs	r3, #0
 8011686:	4602      	mov	r2, r0
 8011688:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801168a:	6a21      	ldr	r1, [r4, #32]
 801168c:	4628      	mov	r0, r5
 801168e:	47b0      	blx	r6
 8011690:	1c43      	adds	r3, r0, #1
 8011692:	89a3      	ldrh	r3, [r4, #12]
 8011694:	d106      	bne.n	80116a4 <__sflush_r+0x68>
 8011696:	6829      	ldr	r1, [r5, #0]
 8011698:	291d      	cmp	r1, #29
 801169a:	d848      	bhi.n	801172e <__sflush_r+0xf2>
 801169c:	4a29      	ldr	r2, [pc, #164]	; (8011744 <__sflush_r+0x108>)
 801169e:	40ca      	lsrs	r2, r1
 80116a0:	07d6      	lsls	r6, r2, #31
 80116a2:	d544      	bpl.n	801172e <__sflush_r+0xf2>
 80116a4:	2200      	movs	r2, #0
 80116a6:	6062      	str	r2, [r4, #4]
 80116a8:	04d9      	lsls	r1, r3, #19
 80116aa:	6922      	ldr	r2, [r4, #16]
 80116ac:	6022      	str	r2, [r4, #0]
 80116ae:	d504      	bpl.n	80116ba <__sflush_r+0x7e>
 80116b0:	1c42      	adds	r2, r0, #1
 80116b2:	d101      	bne.n	80116b8 <__sflush_r+0x7c>
 80116b4:	682b      	ldr	r3, [r5, #0]
 80116b6:	b903      	cbnz	r3, 80116ba <__sflush_r+0x7e>
 80116b8:	6560      	str	r0, [r4, #84]	; 0x54
 80116ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80116bc:	602f      	str	r7, [r5, #0]
 80116be:	2900      	cmp	r1, #0
 80116c0:	d0c9      	beq.n	8011656 <__sflush_r+0x1a>
 80116c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80116c6:	4299      	cmp	r1, r3
 80116c8:	d002      	beq.n	80116d0 <__sflush_r+0x94>
 80116ca:	4628      	mov	r0, r5
 80116cc:	f7fb ff90 	bl	800d5f0 <_free_r>
 80116d0:	2000      	movs	r0, #0
 80116d2:	6360      	str	r0, [r4, #52]	; 0x34
 80116d4:	e7c0      	b.n	8011658 <__sflush_r+0x1c>
 80116d6:	2301      	movs	r3, #1
 80116d8:	4628      	mov	r0, r5
 80116da:	47b0      	blx	r6
 80116dc:	1c41      	adds	r1, r0, #1
 80116de:	d1c8      	bne.n	8011672 <__sflush_r+0x36>
 80116e0:	682b      	ldr	r3, [r5, #0]
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d0c5      	beq.n	8011672 <__sflush_r+0x36>
 80116e6:	2b1d      	cmp	r3, #29
 80116e8:	d001      	beq.n	80116ee <__sflush_r+0xb2>
 80116ea:	2b16      	cmp	r3, #22
 80116ec:	d101      	bne.n	80116f2 <__sflush_r+0xb6>
 80116ee:	602f      	str	r7, [r5, #0]
 80116f0:	e7b1      	b.n	8011656 <__sflush_r+0x1a>
 80116f2:	89a3      	ldrh	r3, [r4, #12]
 80116f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80116f8:	81a3      	strh	r3, [r4, #12]
 80116fa:	e7ad      	b.n	8011658 <__sflush_r+0x1c>
 80116fc:	690f      	ldr	r7, [r1, #16]
 80116fe:	2f00      	cmp	r7, #0
 8011700:	d0a9      	beq.n	8011656 <__sflush_r+0x1a>
 8011702:	0793      	lsls	r3, r2, #30
 8011704:	680e      	ldr	r6, [r1, #0]
 8011706:	bf08      	it	eq
 8011708:	694b      	ldreq	r3, [r1, #20]
 801170a:	600f      	str	r7, [r1, #0]
 801170c:	bf18      	it	ne
 801170e:	2300      	movne	r3, #0
 8011710:	eba6 0807 	sub.w	r8, r6, r7
 8011714:	608b      	str	r3, [r1, #8]
 8011716:	f1b8 0f00 	cmp.w	r8, #0
 801171a:	dd9c      	ble.n	8011656 <__sflush_r+0x1a>
 801171c:	4643      	mov	r3, r8
 801171e:	463a      	mov	r2, r7
 8011720:	6a21      	ldr	r1, [r4, #32]
 8011722:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011724:	4628      	mov	r0, r5
 8011726:	47b0      	blx	r6
 8011728:	2800      	cmp	r0, #0
 801172a:	dc06      	bgt.n	801173a <__sflush_r+0xfe>
 801172c:	89a3      	ldrh	r3, [r4, #12]
 801172e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011732:	81a3      	strh	r3, [r4, #12]
 8011734:	f04f 30ff 	mov.w	r0, #4294967295
 8011738:	e78e      	b.n	8011658 <__sflush_r+0x1c>
 801173a:	4407      	add	r7, r0
 801173c:	eba8 0800 	sub.w	r8, r8, r0
 8011740:	e7e9      	b.n	8011716 <__sflush_r+0xda>
 8011742:	bf00      	nop
 8011744:	20400001 	.word	0x20400001

08011748 <_fflush_r>:
 8011748:	b538      	push	{r3, r4, r5, lr}
 801174a:	690b      	ldr	r3, [r1, #16]
 801174c:	4605      	mov	r5, r0
 801174e:	460c      	mov	r4, r1
 8011750:	b1db      	cbz	r3, 801178a <_fflush_r+0x42>
 8011752:	b118      	cbz	r0, 801175c <_fflush_r+0x14>
 8011754:	6983      	ldr	r3, [r0, #24]
 8011756:	b90b      	cbnz	r3, 801175c <_fflush_r+0x14>
 8011758:	f7fe fbb2 	bl	800fec0 <__sinit>
 801175c:	4b0c      	ldr	r3, [pc, #48]	; (8011790 <_fflush_r+0x48>)
 801175e:	429c      	cmp	r4, r3
 8011760:	d109      	bne.n	8011776 <_fflush_r+0x2e>
 8011762:	686c      	ldr	r4, [r5, #4]
 8011764:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011768:	b17b      	cbz	r3, 801178a <_fflush_r+0x42>
 801176a:	4621      	mov	r1, r4
 801176c:	4628      	mov	r0, r5
 801176e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011772:	f7ff bf63 	b.w	801163c <__sflush_r>
 8011776:	4b07      	ldr	r3, [pc, #28]	; (8011794 <_fflush_r+0x4c>)
 8011778:	429c      	cmp	r4, r3
 801177a:	d101      	bne.n	8011780 <_fflush_r+0x38>
 801177c:	68ac      	ldr	r4, [r5, #8]
 801177e:	e7f1      	b.n	8011764 <_fflush_r+0x1c>
 8011780:	4b05      	ldr	r3, [pc, #20]	; (8011798 <_fflush_r+0x50>)
 8011782:	429c      	cmp	r4, r3
 8011784:	bf08      	it	eq
 8011786:	68ec      	ldreq	r4, [r5, #12]
 8011788:	e7ec      	b.n	8011764 <_fflush_r+0x1c>
 801178a:	2000      	movs	r0, #0
 801178c:	bd38      	pop	{r3, r4, r5, pc}
 801178e:	bf00      	nop
 8011790:	08011ba0 	.word	0x08011ba0
 8011794:	08011bc0 	.word	0x08011bc0
 8011798:	08011b80 	.word	0x08011b80

0801179c <_lseek_r>:
 801179c:	b538      	push	{r3, r4, r5, lr}
 801179e:	4c07      	ldr	r4, [pc, #28]	; (80117bc <_lseek_r+0x20>)
 80117a0:	4605      	mov	r5, r0
 80117a2:	4608      	mov	r0, r1
 80117a4:	4611      	mov	r1, r2
 80117a6:	2200      	movs	r2, #0
 80117a8:	6022      	str	r2, [r4, #0]
 80117aa:	461a      	mov	r2, r3
 80117ac:	f7f1 fb04 	bl	8002db8 <_lseek>
 80117b0:	1c43      	adds	r3, r0, #1
 80117b2:	d102      	bne.n	80117ba <_lseek_r+0x1e>
 80117b4:	6823      	ldr	r3, [r4, #0]
 80117b6:	b103      	cbz	r3, 80117ba <_lseek_r+0x1e>
 80117b8:	602b      	str	r3, [r5, #0]
 80117ba:	bd38      	pop	{r3, r4, r5, pc}
 80117bc:	20002848 	.word	0x20002848

080117c0 <__swhatbuf_r>:
 80117c0:	b570      	push	{r4, r5, r6, lr}
 80117c2:	460e      	mov	r6, r1
 80117c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80117c8:	2900      	cmp	r1, #0
 80117ca:	b096      	sub	sp, #88	; 0x58
 80117cc:	4614      	mov	r4, r2
 80117ce:	461d      	mov	r5, r3
 80117d0:	da07      	bge.n	80117e2 <__swhatbuf_r+0x22>
 80117d2:	2300      	movs	r3, #0
 80117d4:	602b      	str	r3, [r5, #0]
 80117d6:	89b3      	ldrh	r3, [r6, #12]
 80117d8:	061a      	lsls	r2, r3, #24
 80117da:	d410      	bmi.n	80117fe <__swhatbuf_r+0x3e>
 80117dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80117e0:	e00e      	b.n	8011800 <__swhatbuf_r+0x40>
 80117e2:	466a      	mov	r2, sp
 80117e4:	f000 f8a2 	bl	801192c <_fstat_r>
 80117e8:	2800      	cmp	r0, #0
 80117ea:	dbf2      	blt.n	80117d2 <__swhatbuf_r+0x12>
 80117ec:	9a01      	ldr	r2, [sp, #4]
 80117ee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80117f2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80117f6:	425a      	negs	r2, r3
 80117f8:	415a      	adcs	r2, r3
 80117fa:	602a      	str	r2, [r5, #0]
 80117fc:	e7ee      	b.n	80117dc <__swhatbuf_r+0x1c>
 80117fe:	2340      	movs	r3, #64	; 0x40
 8011800:	2000      	movs	r0, #0
 8011802:	6023      	str	r3, [r4, #0]
 8011804:	b016      	add	sp, #88	; 0x58
 8011806:	bd70      	pop	{r4, r5, r6, pc}

08011808 <__smakebuf_r>:
 8011808:	898b      	ldrh	r3, [r1, #12]
 801180a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801180c:	079d      	lsls	r5, r3, #30
 801180e:	4606      	mov	r6, r0
 8011810:	460c      	mov	r4, r1
 8011812:	d507      	bpl.n	8011824 <__smakebuf_r+0x1c>
 8011814:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011818:	6023      	str	r3, [r4, #0]
 801181a:	6123      	str	r3, [r4, #16]
 801181c:	2301      	movs	r3, #1
 801181e:	6163      	str	r3, [r4, #20]
 8011820:	b002      	add	sp, #8
 8011822:	bd70      	pop	{r4, r5, r6, pc}
 8011824:	ab01      	add	r3, sp, #4
 8011826:	466a      	mov	r2, sp
 8011828:	f7ff ffca 	bl	80117c0 <__swhatbuf_r>
 801182c:	9900      	ldr	r1, [sp, #0]
 801182e:	4605      	mov	r5, r0
 8011830:	4630      	mov	r0, r6
 8011832:	f7fb ff2b 	bl	800d68c <_malloc_r>
 8011836:	b948      	cbnz	r0, 801184c <__smakebuf_r+0x44>
 8011838:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801183c:	059a      	lsls	r2, r3, #22
 801183e:	d4ef      	bmi.n	8011820 <__smakebuf_r+0x18>
 8011840:	f023 0303 	bic.w	r3, r3, #3
 8011844:	f043 0302 	orr.w	r3, r3, #2
 8011848:	81a3      	strh	r3, [r4, #12]
 801184a:	e7e3      	b.n	8011814 <__smakebuf_r+0xc>
 801184c:	4b0d      	ldr	r3, [pc, #52]	; (8011884 <__smakebuf_r+0x7c>)
 801184e:	62b3      	str	r3, [r6, #40]	; 0x28
 8011850:	89a3      	ldrh	r3, [r4, #12]
 8011852:	6020      	str	r0, [r4, #0]
 8011854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011858:	81a3      	strh	r3, [r4, #12]
 801185a:	9b00      	ldr	r3, [sp, #0]
 801185c:	6163      	str	r3, [r4, #20]
 801185e:	9b01      	ldr	r3, [sp, #4]
 8011860:	6120      	str	r0, [r4, #16]
 8011862:	b15b      	cbz	r3, 801187c <__smakebuf_r+0x74>
 8011864:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011868:	4630      	mov	r0, r6
 801186a:	f000 f871 	bl	8011950 <_isatty_r>
 801186e:	b128      	cbz	r0, 801187c <__smakebuf_r+0x74>
 8011870:	89a3      	ldrh	r3, [r4, #12]
 8011872:	f023 0303 	bic.w	r3, r3, #3
 8011876:	f043 0301 	orr.w	r3, r3, #1
 801187a:	81a3      	strh	r3, [r4, #12]
 801187c:	89a3      	ldrh	r3, [r4, #12]
 801187e:	431d      	orrs	r5, r3
 8011880:	81a5      	strh	r5, [r4, #12]
 8011882:	e7cd      	b.n	8011820 <__smakebuf_r+0x18>
 8011884:	0800fe89 	.word	0x0800fe89

08011888 <memmove>:
 8011888:	4288      	cmp	r0, r1
 801188a:	b510      	push	{r4, lr}
 801188c:	eb01 0302 	add.w	r3, r1, r2
 8011890:	d807      	bhi.n	80118a2 <memmove+0x1a>
 8011892:	1e42      	subs	r2, r0, #1
 8011894:	4299      	cmp	r1, r3
 8011896:	d00a      	beq.n	80118ae <memmove+0x26>
 8011898:	f811 4b01 	ldrb.w	r4, [r1], #1
 801189c:	f802 4f01 	strb.w	r4, [r2, #1]!
 80118a0:	e7f8      	b.n	8011894 <memmove+0xc>
 80118a2:	4283      	cmp	r3, r0
 80118a4:	d9f5      	bls.n	8011892 <memmove+0xa>
 80118a6:	1881      	adds	r1, r0, r2
 80118a8:	1ad2      	subs	r2, r2, r3
 80118aa:	42d3      	cmn	r3, r2
 80118ac:	d100      	bne.n	80118b0 <memmove+0x28>
 80118ae:	bd10      	pop	{r4, pc}
 80118b0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80118b4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80118b8:	e7f7      	b.n	80118aa <memmove+0x22>

080118ba <_realloc_r>:
 80118ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118bc:	4607      	mov	r7, r0
 80118be:	4614      	mov	r4, r2
 80118c0:	460e      	mov	r6, r1
 80118c2:	b921      	cbnz	r1, 80118ce <_realloc_r+0x14>
 80118c4:	4611      	mov	r1, r2
 80118c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80118ca:	f7fb bedf 	b.w	800d68c <_malloc_r>
 80118ce:	b922      	cbnz	r2, 80118da <_realloc_r+0x20>
 80118d0:	f7fb fe8e 	bl	800d5f0 <_free_r>
 80118d4:	4625      	mov	r5, r4
 80118d6:	4628      	mov	r0, r5
 80118d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80118da:	f000 f849 	bl	8011970 <_malloc_usable_size_r>
 80118de:	42a0      	cmp	r0, r4
 80118e0:	d20f      	bcs.n	8011902 <_realloc_r+0x48>
 80118e2:	4621      	mov	r1, r4
 80118e4:	4638      	mov	r0, r7
 80118e6:	f7fb fed1 	bl	800d68c <_malloc_r>
 80118ea:	4605      	mov	r5, r0
 80118ec:	2800      	cmp	r0, #0
 80118ee:	d0f2      	beq.n	80118d6 <_realloc_r+0x1c>
 80118f0:	4631      	mov	r1, r6
 80118f2:	4622      	mov	r2, r4
 80118f4:	f7fb fe68 	bl	800d5c8 <memcpy>
 80118f8:	4631      	mov	r1, r6
 80118fa:	4638      	mov	r0, r7
 80118fc:	f7fb fe78 	bl	800d5f0 <_free_r>
 8011900:	e7e9      	b.n	80118d6 <_realloc_r+0x1c>
 8011902:	4635      	mov	r5, r6
 8011904:	e7e7      	b.n	80118d6 <_realloc_r+0x1c>
	...

08011908 <_read_r>:
 8011908:	b538      	push	{r3, r4, r5, lr}
 801190a:	4c07      	ldr	r4, [pc, #28]	; (8011928 <_read_r+0x20>)
 801190c:	4605      	mov	r5, r0
 801190e:	4608      	mov	r0, r1
 8011910:	4611      	mov	r1, r2
 8011912:	2200      	movs	r2, #0
 8011914:	6022      	str	r2, [r4, #0]
 8011916:	461a      	mov	r2, r3
 8011918:	f7f1 f9ee 	bl	8002cf8 <_read>
 801191c:	1c43      	adds	r3, r0, #1
 801191e:	d102      	bne.n	8011926 <_read_r+0x1e>
 8011920:	6823      	ldr	r3, [r4, #0]
 8011922:	b103      	cbz	r3, 8011926 <_read_r+0x1e>
 8011924:	602b      	str	r3, [r5, #0]
 8011926:	bd38      	pop	{r3, r4, r5, pc}
 8011928:	20002848 	.word	0x20002848

0801192c <_fstat_r>:
 801192c:	b538      	push	{r3, r4, r5, lr}
 801192e:	4c07      	ldr	r4, [pc, #28]	; (801194c <_fstat_r+0x20>)
 8011930:	2300      	movs	r3, #0
 8011932:	4605      	mov	r5, r0
 8011934:	4608      	mov	r0, r1
 8011936:	4611      	mov	r1, r2
 8011938:	6023      	str	r3, [r4, #0]
 801193a:	f7f1 fa22 	bl	8002d82 <_fstat>
 801193e:	1c43      	adds	r3, r0, #1
 8011940:	d102      	bne.n	8011948 <_fstat_r+0x1c>
 8011942:	6823      	ldr	r3, [r4, #0]
 8011944:	b103      	cbz	r3, 8011948 <_fstat_r+0x1c>
 8011946:	602b      	str	r3, [r5, #0]
 8011948:	bd38      	pop	{r3, r4, r5, pc}
 801194a:	bf00      	nop
 801194c:	20002848 	.word	0x20002848

08011950 <_isatty_r>:
 8011950:	b538      	push	{r3, r4, r5, lr}
 8011952:	4c06      	ldr	r4, [pc, #24]	; (801196c <_isatty_r+0x1c>)
 8011954:	2300      	movs	r3, #0
 8011956:	4605      	mov	r5, r0
 8011958:	4608      	mov	r0, r1
 801195a:	6023      	str	r3, [r4, #0]
 801195c:	f7f1 fa21 	bl	8002da2 <_isatty>
 8011960:	1c43      	adds	r3, r0, #1
 8011962:	d102      	bne.n	801196a <_isatty_r+0x1a>
 8011964:	6823      	ldr	r3, [r4, #0]
 8011966:	b103      	cbz	r3, 801196a <_isatty_r+0x1a>
 8011968:	602b      	str	r3, [r5, #0]
 801196a:	bd38      	pop	{r3, r4, r5, pc}
 801196c:	20002848 	.word	0x20002848

08011970 <_malloc_usable_size_r>:
 8011970:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011974:	1f18      	subs	r0, r3, #4
 8011976:	2b00      	cmp	r3, #0
 8011978:	bfbc      	itt	lt
 801197a:	580b      	ldrlt	r3, [r1, r0]
 801197c:	18c0      	addlt	r0, r0, r3
 801197e:	4770      	bx	lr

08011980 <_init>:
 8011980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011982:	bf00      	nop
 8011984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011986:	bc08      	pop	{r3}
 8011988:	469e      	mov	lr, r3
 801198a:	4770      	bx	lr

0801198c <_fini>:
 801198c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801198e:	bf00      	nop
 8011990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011992:	bc08      	pop	{r3}
 8011994:	469e      	mov	lr, r3
 8011996:	4770      	bx	lr
