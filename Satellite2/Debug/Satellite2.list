
Satellite2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010374  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  08010508  08010508  00020508  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010980  08010980  00030350  2**0
                  CONTENTS
  4 .ARM          00000008  08010980  08010980  00020980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010988  08010988  00030350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010988  08010988  00020988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801098c  0801098c  0002098c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  08010990  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024e8  20000350  08010ce0  00030350  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002838  08010ce0  00032838  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030350  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027575  00000000  00000000  00030380  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004d36  00000000  00000000  000578f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001df8  00000000  00000000  0005c630  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001be0  00000000  00000000  0005e428  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000709c  00000000  00000000  00060008  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001d040  00000000  00000000  000670a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d38e7  00000000  00000000  000840e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001579cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008b54  00000000  00000000  00157a48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000350 	.word	0x20000350
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080104ec 	.word	0x080104ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000354 	.word	0x20000354
 80001cc:	080104ec 	.word	0x080104ec

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <println>:
static inline void print(char* str)
{
	CDC_Transmit_FS((uint8_t*) str, strlen(str));
};
static inline void println(char* str)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	CDC_Transmit_FS((uint8_t*) str, strlen(str));
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f7ff f91d 	bl	80001d0 <strlen>
 8000f96:	4603      	mov	r3, r0
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f00b f8f5 	bl	800c18c <CDC_Transmit_FS>
	CDC_Transmit_FS((uint8_t*) "\n\r", 2);
 8000fa2:	2102      	movs	r1, #2
 8000fa4:	4803      	ldr	r0, [pc, #12]	; (8000fb4 <println+0x2c>)
 8000fa6:	f00b f8f1 	bl	800c18c <CDC_Transmit_FS>
};
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	08010508 	.word	0x08010508

08000fb8 <setup>:
int8_t counterDir;
bool notPlayed;
int i;

void setup()
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_RESET);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	2180      	movs	r1, #128	; 0x80
 8000fc0:	4828      	ldr	r0, [pc, #160]	; (8001064 <setup+0xac>)
 8000fc2:	f002 f88d 	bl	80030e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2140      	movs	r1, #64	; 0x40
 8000fca:	4826      	ldr	r0, [pc, #152]	; (8001064 <setup+0xac>)
 8000fcc:	f002 f888 	bl	80030e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDC_GPIO_Port, LEDC_Pin, GPIO_PIN_RESET);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fd6:	4824      	ldr	r0, [pc, #144]	; (8001068 <setup+0xb0>)
 8000fd8:	f002 f882 	bl	80030e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDD_GPIO_Port, LEDD_Pin, GPIO_PIN_RESET);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fe2:	4821      	ldr	r0, [pc, #132]	; (8001068 <setup+0xb0>)
 8000fe4:	f002 f87c 	bl	80030e0 <HAL_GPIO_WritePin>
	HAL_Delay(750);
 8000fe8:	f240 20ee 	movw	r0, #750	; 0x2ee
 8000fec:	f001 f9f6 	bl	80023dc <HAL_Delay>

	HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_SET);
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	2180      	movs	r1, #128	; 0x80
 8000ff4:	481b      	ldr	r0, [pc, #108]	; (8001064 <setup+0xac>)
 8000ff6:	f002 f873 	bl	80030e0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000ffa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ffe:	f001 f9ed 	bl	80023dc <HAL_Delay>
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 8001002:	2201      	movs	r2, #1
 8001004:	2140      	movs	r1, #64	; 0x40
 8001006:	4817      	ldr	r0, [pc, #92]	; (8001064 <setup+0xac>)
 8001008:	f002 f86a 	bl	80030e0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800100c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001010:	f001 f9e4 	bl	80023dc <HAL_Delay>
	HAL_GPIO_WritePin(LEDC_GPIO_Port, LEDC_Pin, GPIO_PIN_SET);
 8001014:	2201      	movs	r2, #1
 8001016:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800101a:	4813      	ldr	r0, [pc, #76]	; (8001068 <setup+0xb0>)
 800101c:	f002 f860 	bl	80030e0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001020:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001024:	f001 f9da 	bl	80023dc <HAL_Delay>
	HAL_GPIO_WritePin(LEDD_GPIO_Port, LEDD_Pin, GPIO_PIN_SET);
 8001028:	2201      	movs	r2, #1
 800102a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800102e:	480e      	ldr	r0, [pc, #56]	; (8001068 <setup+0xb0>)
 8001030:	f002 f856 	bl	80030e0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001034:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001038:	f001 f9d0 	bl	80023dc <HAL_Delay>

	motL = 0;
 800103c:	4b0b      	ldr	r3, [pc, #44]	; (800106c <setup+0xb4>)
 800103e:	2200      	movs	r2, #0
 8001040:	701a      	strb	r2, [r3, #0]
	motR = 0;
 8001042:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <setup+0xb8>)
 8001044:	2200      	movs	r2, #0
 8001046:	701a      	strb	r2, [r3, #0]
	counterDir = 1;
 8001048:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <setup+0xbc>)
 800104a:	2201      	movs	r2, #1
 800104c:	701a      	strb	r2, [r3, #0]
	enableMotors();
 800104e:	f000 f9a1 	bl	8001394 <enableMotors>
	setPwmFrequency(100000);
 8001052:	4809      	ldr	r0, [pc, #36]	; (8001078 <setup+0xc0>)
 8001054:	f000 f9d8 	bl	8001408 <setPwmFrequency>
	notPlayed = true;
 8001058:	4b08      	ldr	r3, [pc, #32]	; (800107c <setup+0xc4>)
 800105a:	2201      	movs	r2, #1
 800105c:	701a      	strb	r2, [r3, #0]
		println("Radio init successful!");
		HAL_GPIO_TogglePin(LEDB_GPIO_Port, LEDB_Pin);
		HAL_Delay(500);
	}
	 */
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40020800 	.word	0x40020800
 8001068:	40020400 	.word	0x40020400
 800106c:	2000036c 	.word	0x2000036c
 8001070:	2000036d 	.word	0x2000036d
 8001074:	20000596 	.word	0x20000596
 8001078:	000186a0 	.word	0x000186a0
 800107c:	20000594 	.word	0x20000594

08001080 <loop>:

void loop()
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
	if (!HAL_GPIO_ReadPin(BTN_USR_GPIO_Port, BTN_USR_Pin))
 8001084:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001088:	4872      	ldr	r0, [pc, #456]	; (8001254 <loop+0x1d4>)
 800108a:	f002 f811 	bl	80030b0 <HAL_GPIO_ReadPin>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	f040 80d5 	bne.w	8001240 <loop+0x1c0>
	{
		//Hearing frequency: 20Hz - 20kHz
		if (notPlayed)
 8001096:	4b70      	ldr	r3, [pc, #448]	; (8001258 <loop+0x1d8>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b00      	cmp	r3, #0
 800109c:	f000 8097 	beq.w	80011ce <loop+0x14e>
		{
			notPlayed = false;
 80010a0:	4b6d      	ldr	r3, [pc, #436]	; (8001258 <loop+0x1d8>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < 100; i++)
 80010a6:	4b6d      	ldr	r3, [pc, #436]	; (800125c <loop+0x1dc>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	e00f      	b.n	80010ce <loop+0x4e>
			{
				setPwmFrequency(700);
 80010ae:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80010b2:	f000 f9a9 	bl	8001408 <setPwmFrequency>
				setMotors(80, 80);
 80010b6:	2150      	movs	r1, #80	; 0x50
 80010b8:	2050      	movs	r0, #80	; 0x50
 80010ba:	f000 f8e5 	bl	8001288 <setMotors>
				HAL_Delay(50);
 80010be:	2032      	movs	r0, #50	; 0x32
 80010c0:	f001 f98c 	bl	80023dc <HAL_Delay>
			for (i = 0; i < 100; i++)
 80010c4:	4b65      	ldr	r3, [pc, #404]	; (800125c <loop+0x1dc>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	3301      	adds	r3, #1
 80010ca:	4a64      	ldr	r2, [pc, #400]	; (800125c <loop+0x1dc>)
 80010cc:	6013      	str	r3, [r2, #0]
 80010ce:	4b63      	ldr	r3, [pc, #396]	; (800125c <loop+0x1dc>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	2b63      	cmp	r3, #99	; 0x63
 80010d4:	ddeb      	ble.n	80010ae <loop+0x2e>
			}
			for (i = 0; i < 100; i++)
 80010d6:	4b61      	ldr	r3, [pc, #388]	; (800125c <loop+0x1dc>)
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	e00f      	b.n	80010fe <loop+0x7e>
			{
				setPwmFrequency(2000);
 80010de:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80010e2:	f000 f991 	bl	8001408 <setPwmFrequency>
				setMotors(80, 80);
 80010e6:	2150      	movs	r1, #80	; 0x50
 80010e8:	2050      	movs	r0, #80	; 0x50
 80010ea:	f000 f8cd 	bl	8001288 <setMotors>
				HAL_Delay(50);
 80010ee:	2032      	movs	r0, #50	; 0x32
 80010f0:	f001 f974 	bl	80023dc <HAL_Delay>
			for (i = 0; i < 100; i++)
 80010f4:	4b59      	ldr	r3, [pc, #356]	; (800125c <loop+0x1dc>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	3301      	adds	r3, #1
 80010fa:	4a58      	ldr	r2, [pc, #352]	; (800125c <loop+0x1dc>)
 80010fc:	6013      	str	r3, [r2, #0]
 80010fe:	4b57      	ldr	r3, [pc, #348]	; (800125c <loop+0x1dc>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2b63      	cmp	r3, #99	; 0x63
 8001104:	ddeb      	ble.n	80010de <loop+0x5e>
			}
			for (i = 0; i < 100; i++)
 8001106:	4b55      	ldr	r3, [pc, #340]	; (800125c <loop+0x1dc>)
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	e00f      	b.n	800112e <loop+0xae>
			{
				setPwmFrequency(1100);
 800110e:	f240 404c 	movw	r0, #1100	; 0x44c
 8001112:	f000 f979 	bl	8001408 <setPwmFrequency>
				setMotors(80, 80);
 8001116:	2150      	movs	r1, #80	; 0x50
 8001118:	2050      	movs	r0, #80	; 0x50
 800111a:	f000 f8b5 	bl	8001288 <setMotors>
				HAL_Delay(50);
 800111e:	2032      	movs	r0, #50	; 0x32
 8001120:	f001 f95c 	bl	80023dc <HAL_Delay>
			for (i = 0; i < 100; i++)
 8001124:	4b4d      	ldr	r3, [pc, #308]	; (800125c <loop+0x1dc>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	3301      	adds	r3, #1
 800112a:	4a4c      	ldr	r2, [pc, #304]	; (800125c <loop+0x1dc>)
 800112c:	6013      	str	r3, [r2, #0]
 800112e:	4b4b      	ldr	r3, [pc, #300]	; (800125c <loop+0x1dc>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2b63      	cmp	r3, #99	; 0x63
 8001134:	ddeb      	ble.n	800110e <loop+0x8e>
			}
			for (i = 0; i < 100; i++)
 8001136:	4b49      	ldr	r3, [pc, #292]	; (800125c <loop+0x1dc>)
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	e00f      	b.n	800115e <loop+0xde>
			{
				setPwmFrequency(1700);
 800113e:	f240 60a4 	movw	r0, #1700	; 0x6a4
 8001142:	f000 f961 	bl	8001408 <setPwmFrequency>
				setMotors(80, 80);
 8001146:	2150      	movs	r1, #80	; 0x50
 8001148:	2050      	movs	r0, #80	; 0x50
 800114a:	f000 f89d 	bl	8001288 <setMotors>
				HAL_Delay(50);
 800114e:	2032      	movs	r0, #50	; 0x32
 8001150:	f001 f944 	bl	80023dc <HAL_Delay>
			for (i = 0; i < 100; i++)
 8001154:	4b41      	ldr	r3, [pc, #260]	; (800125c <loop+0x1dc>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	3301      	adds	r3, #1
 800115a:	4a40      	ldr	r2, [pc, #256]	; (800125c <loop+0x1dc>)
 800115c:	6013      	str	r3, [r2, #0]
 800115e:	4b3f      	ldr	r3, [pc, #252]	; (800125c <loop+0x1dc>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2b63      	cmp	r3, #99	; 0x63
 8001164:	ddeb      	ble.n	800113e <loop+0xbe>
			}
			HAL_Delay(500);
 8001166:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800116a:	f001 f937 	bl	80023dc <HAL_Delay>
			for (i = 0; i < 100; i++)
 800116e:	4b3b      	ldr	r3, [pc, #236]	; (800125c <loop+0x1dc>)
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	e00f      	b.n	8001196 <loop+0x116>
			{
				setPwmFrequency(1000);
 8001176:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800117a:	f000 f945 	bl	8001408 <setPwmFrequency>
				setMotors(80, 80);
 800117e:	2150      	movs	r1, #80	; 0x50
 8001180:	2050      	movs	r0, #80	; 0x50
 8001182:	f000 f881 	bl	8001288 <setMotors>
				HAL_Delay(50);
 8001186:	2032      	movs	r0, #50	; 0x32
 8001188:	f001 f928 	bl	80023dc <HAL_Delay>
			for (i = 0; i < 100; i++)
 800118c:	4b33      	ldr	r3, [pc, #204]	; (800125c <loop+0x1dc>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	3301      	adds	r3, #1
 8001192:	4a32      	ldr	r2, [pc, #200]	; (800125c <loop+0x1dc>)
 8001194:	6013      	str	r3, [r2, #0]
 8001196:	4b31      	ldr	r3, [pc, #196]	; (800125c <loop+0x1dc>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2b63      	cmp	r3, #99	; 0x63
 800119c:	ddeb      	ble.n	8001176 <loop+0xf6>
			}
			for (i = 0; i < 100; i++)
 800119e:	4b2f      	ldr	r3, [pc, #188]	; (800125c <loop+0x1dc>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	e00f      	b.n	80011c6 <loop+0x146>
			{
				setPwmFrequency(2400);
 80011a6:	f44f 6016 	mov.w	r0, #2400	; 0x960
 80011aa:	f000 f92d 	bl	8001408 <setPwmFrequency>
				setMotors(80, 80);
 80011ae:	2150      	movs	r1, #80	; 0x50
 80011b0:	2050      	movs	r0, #80	; 0x50
 80011b2:	f000 f869 	bl	8001288 <setMotors>
				HAL_Delay(50);
 80011b6:	2032      	movs	r0, #50	; 0x32
 80011b8:	f001 f910 	bl	80023dc <HAL_Delay>
			for (i = 0; i < 100; i++)
 80011bc:	4b27      	ldr	r3, [pc, #156]	; (800125c <loop+0x1dc>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	3301      	adds	r3, #1
 80011c2:	4a26      	ldr	r2, [pc, #152]	; (800125c <loop+0x1dc>)
 80011c4:	6013      	str	r3, [r2, #0]
 80011c6:	4b25      	ldr	r3, [pc, #148]	; (800125c <loop+0x1dc>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2b63      	cmp	r3, #99	; 0x63
 80011cc:	ddeb      	ble.n	80011a6 <loop+0x126>
			}

		}

		HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_SET);
 80011ce:	2201      	movs	r2, #1
 80011d0:	2180      	movs	r1, #128	; 0x80
 80011d2:	4823      	ldr	r0, [pc, #140]	; (8001260 <loop+0x1e0>)
 80011d4:	f001 ff84 	bl	80030e0 <HAL_GPIO_WritePin>
		counter += counterDir;
 80011d8:	4b22      	ldr	r3, [pc, #136]	; (8001264 <loop+0x1e4>)
 80011da:	781a      	ldrb	r2, [r3, #0]
 80011dc:	4b22      	ldr	r3, [pc, #136]	; (8001268 <loop+0x1e8>)
 80011de:	f993 3000 	ldrsb.w	r3, [r3]
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	4413      	add	r3, r2
 80011e6:	b2da      	uxtb	r2, r3
 80011e8:	4b1e      	ldr	r3, [pc, #120]	; (8001264 <loop+0x1e4>)
 80011ea:	701a      	strb	r2, [r3, #0]
		if (counter >= 255 || counter <= 0)
 80011ec:	4b1d      	ldr	r3, [pc, #116]	; (8001264 <loop+0x1e4>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2bff      	cmp	r3, #255	; 0xff
 80011f2:	d003      	beq.n	80011fc <loop+0x17c>
 80011f4:	4b1b      	ldr	r3, [pc, #108]	; (8001264 <loop+0x1e4>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d108      	bne.n	800120e <loop+0x18e>
		{
			counterDir = -counterDir;
 80011fc:	4b1a      	ldr	r3, [pc, #104]	; (8001268 <loop+0x1e8>)
 80011fe:	f993 3000 	ldrsb.w	r3, [r3]
 8001202:	b2db      	uxtb	r3, r3
 8001204:	425b      	negs	r3, r3
 8001206:	b2db      	uxtb	r3, r3
 8001208:	b25a      	sxtb	r2, r3
 800120a:	4b17      	ldr	r3, [pc, #92]	; (8001268 <loop+0x1e8>)
 800120c:	701a      	strb	r2, [r3, #0]
		}
		umotL = counter;
 800120e:	4b15      	ldr	r3, [pc, #84]	; (8001264 <loop+0x1e4>)
 8001210:	781a      	ldrb	r2, [r3, #0]
 8001212:	4b16      	ldr	r3, [pc, #88]	; (800126c <loop+0x1ec>)
 8001214:	701a      	strb	r2, [r3, #0]
		umotR = 255 - counter;
 8001216:	4b13      	ldr	r3, [pc, #76]	; (8001264 <loop+0x1e4>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	43db      	mvns	r3, r3
 800121c:	b2da      	uxtb	r2, r3
 800121e:	4b14      	ldr	r3, [pc, #80]	; (8001270 <loop+0x1f0>)
 8001220:	701a      	strb	r2, [r3, #0]
		setMotors(umotL, umotR);
 8001222:	4b12      	ldr	r3, [pc, #72]	; (800126c <loop+0x1ec>)
 8001224:	781a      	ldrb	r2, [r3, #0]
 8001226:	4b12      	ldr	r3, [pc, #72]	; (8001270 <loop+0x1f0>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	4619      	mov	r1, r3
 800122c:	4610      	mov	r0, r2
 800122e:	f000 f82b 	bl	8001288 <setMotors>
		HAL_Delay(15);
 8001232:	200f      	movs	r0, #15
 8001234:	f001 f8d2 	bl	80023dc <HAL_Delay>
		println("Setting motors");
 8001238:	480e      	ldr	r0, [pc, #56]	; (8001274 <loop+0x1f4>)
 800123a:	f7ff fea5 	bl	8000f88 <println>
		printv(printBuffer, printLen);
		message += 1;
		radio.txDone = false;
	}
	*/
}
 800123e:	e006      	b.n	800124e <loop+0x1ce>
		HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_RESET);
 8001240:	2200      	movs	r2, #0
 8001242:	2180      	movs	r1, #128	; 0x80
 8001244:	4806      	ldr	r0, [pc, #24]	; (8001260 <loop+0x1e0>)
 8001246:	f001 ff4b 	bl	80030e0 <HAL_GPIO_WritePin>
		haltMotors();
 800124a:	f000 f88f 	bl	800136c <haltMotors>
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40020000 	.word	0x40020000
 8001258:	20000594 	.word	0x20000594
 800125c:	200006e4 	.word	0x200006e4
 8001260:	40020800 	.word	0x40020800
 8001264:	200007e8 	.word	0x200007e8
 8001268:	20000596 	.word	0x20000596
 800126c:	20000810 	.word	0x20000810
 8001270:	200007e9 	.word	0x200007e9
 8001274:	0801050c 	.word	0x0801050c

08001278 <dio0_IRQ>:

	return true;
}

void dio0_IRQ()
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
		HAL_GPIO_TogglePin(LEDD_GPIO_Port, LEDD_Pin);
		SX1278_dio0_IRQ(&radio);
		radio_procedure();
	}
	*/
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
	...

08001288 <setMotors>:
// DRV8838 has max of 250kHz PWM frequency
// Motors will automatically turn off after (TIM3->ARR * 1ms) time, default 100ms
// Any new value applied will reset timeout timer

static void setMotors(uint8_t pwmL, uint8_t pwmR)
{
 8001288:	b5b0      	push	{r4, r5, r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	460a      	mov	r2, r1
 8001292:	71fb      	strb	r3, [r7, #7]
 8001294:	4613      	mov	r3, r2
 8001296:	71bb      	strb	r3, [r7, #6]
	//							some value	 / [0.0:1.0] duty cycle
	TIM2->CCR2 = (uint32_t)((float)TIM2->ARR / ((float)pwmL / 255.0));
 8001298:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800129c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800129e:	ee07 3a90 	vmov	s15, r3
 80012a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012a6:	ee17 0a90 	vmov	r0, s15
 80012aa:	f7ff f94d 	bl	8000548 <__aeabi_f2d>
 80012ae:	4604      	mov	r4, r0
 80012b0:	460d      	mov	r5, r1
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	ee07 3a90 	vmov	s15, r3
 80012b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012bc:	ee17 0a90 	vmov	r0, s15
 80012c0:	f7ff f942 	bl	8000548 <__aeabi_f2d>
 80012c4:	a327      	add	r3, pc, #156	; (adr r3, 8001364 <setMotors+0xdc>)
 80012c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ca:	f7ff fabf 	bl	800084c <__aeabi_ddiv>
 80012ce:	4602      	mov	r2, r0
 80012d0:	460b      	mov	r3, r1
 80012d2:	4620      	mov	r0, r4
 80012d4:	4629      	mov	r1, r5
 80012d6:	f7ff fab9 	bl	800084c <__aeabi_ddiv>
 80012da:	4603      	mov	r3, r0
 80012dc:	460c      	mov	r4, r1
 80012de:	461a      	mov	r2, r3
 80012e0:	4623      	mov	r3, r4
 80012e2:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80012e6:	4610      	mov	r0, r2
 80012e8:	4619      	mov	r1, r3
 80012ea:	f7ff fc5d 	bl	8000ba8 <__aeabi_d2uiz>
 80012ee:	4603      	mov	r3, r0
 80012f0:	63a3      	str	r3, [r4, #56]	; 0x38
	TIM2->CCR4 = (uint32_t)((float)TIM2->ARR / ((float)pwmR / 255.0));
 80012f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012f8:	ee07 3a90 	vmov	s15, r3
 80012fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001300:	ee17 0a90 	vmov	r0, s15
 8001304:	f7ff f920 	bl	8000548 <__aeabi_f2d>
 8001308:	4604      	mov	r4, r0
 800130a:	460d      	mov	r5, r1
 800130c:	79bb      	ldrb	r3, [r7, #6]
 800130e:	ee07 3a90 	vmov	s15, r3
 8001312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001316:	ee17 0a90 	vmov	r0, s15
 800131a:	f7ff f915 	bl	8000548 <__aeabi_f2d>
 800131e:	a311      	add	r3, pc, #68	; (adr r3, 8001364 <setMotors+0xdc>)
 8001320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001324:	f7ff fa92 	bl	800084c <__aeabi_ddiv>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	4620      	mov	r0, r4
 800132e:	4629      	mov	r1, r5
 8001330:	f7ff fa8c 	bl	800084c <__aeabi_ddiv>
 8001334:	4603      	mov	r3, r0
 8001336:	460c      	mov	r4, r1
 8001338:	461a      	mov	r2, r3
 800133a:	4623      	mov	r3, r4
 800133c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001340:	4610      	mov	r0, r2
 8001342:	4619      	mov	r1, r3
 8001344:	f7ff fc30 	bl	8000ba8 <__aeabi_d2uiz>
 8001348:	4603      	mov	r3, r0
 800134a:	6423      	str	r3, [r4, #64]	; 0x40
	TIM3->CNT = 0;	// reset timer counter -> clears motor timeout
 800134c:	4b04      	ldr	r3, [pc, #16]	; (8001360 <setMotors+0xd8>)
 800134e:	2200      	movs	r2, #0
 8001350:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bdb0      	pop	{r4, r5, r7, pc}
 800135a:	bf00      	nop
 800135c:	f3af 8000 	nop.w
 8001360:	40000400 	.word	0x40000400
 8001364:	00000000 	.word	0x00000000
 8001368:	406fe000 	.word	0x406fe000

0800136c <haltMotors>:

static void haltMotors()
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
	// Function called on TIM3 overflow interrupt
	TIM2->CCR2 = 0;
 8001370:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001374:	2200      	movs	r2, #0
 8001376:	639a      	str	r2, [r3, #56]	; 0x38
	TIM2->CCR4 = 0;
 8001378:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800137c:	2200      	movs	r2, #0
 800137e:	641a      	str	r2, [r3, #64]	; 0x40
	TIM3->CNT = 0;	// reset timer counter -> clears motor timeout
 8001380:	4b03      	ldr	r3, [pc, #12]	; (8001390 <haltMotors+0x24>)
 8001382:	2200      	movs	r2, #0
 8001384:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001386:	bf00      	nop
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	40000400 	.word	0x40000400

08001394 <enableMotors>:

static void enableMotors()
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
	haltMotors();
 8001398:	f7ff ffe8 	bl	800136c <haltMotors>
	motL_forward = true;
 800139c:	4b16      	ldr	r3, [pc, #88]	; (80013f8 <enableMotors+0x64>)
 800139e:	2201      	movs	r2, #1
 80013a0:	701a      	strb	r2, [r3, #0]
	motR_forward = true;
 80013a2:	4b16      	ldr	r3, [pc, #88]	; (80013fc <enableMotors+0x68>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	701a      	strb	r2, [r3, #0]

	// flip direction based on config
	HAL_GPIO_WritePin(PH_L_GPIO_Port, PH_L_Pin, motL_forward ^ MOTOR_L_DIR);
 80013a8:	4b13      	ldr	r3, [pc, #76]	; (80013f8 <enableMotors+0x64>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	f083 0301 	eor.w	r3, r3, #1
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	461a      	mov	r2, r3
 80013b4:	2101      	movs	r1, #1
 80013b6:	4812      	ldr	r0, [pc, #72]	; (8001400 <enableMotors+0x6c>)
 80013b8:	f001 fe92 	bl	80030e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PH_R_GPIO_Port, PH_R_Pin, motR_forward ^ MOTOR_R_DIR);
 80013bc:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <enableMotors+0x68>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	f083 0301 	eor.w	r3, r3, #1
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	461a      	mov	r2, r3
 80013c8:	2104      	movs	r1, #4
 80013ca:	480d      	ldr	r0, [pc, #52]	; (8001400 <enableMotors+0x6c>)
 80013cc:	f001 fe88 	bl	80030e0 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(Get_TIM2_Instance(), TIM_CHANNEL_2);
 80013d0:	f000 fc18 	bl	8001c04 <Get_TIM2_Instance>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2104      	movs	r1, #4
 80013d8:	4618      	mov	r0, r3
 80013da:	f005 fcff 	bl	8006ddc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Get_TIM2_Instance(), TIM_CHANNEL_4);
 80013de:	f000 fc11 	bl	8001c04 <Get_TIM2_Instance>
 80013e2:	4603      	mov	r3, r0
 80013e4:	210c      	movs	r1, #12
 80013e6:	4618      	mov	r0, r3
 80013e8:	f005 fcf8 	bl	8006ddc <HAL_TIM_PWM_Start>

	TIM3->CNT = 0;	// reset timer counter -> clears motor timeout
 80013ec:	4b05      	ldr	r3, [pc, #20]	; (8001404 <enableMotors+0x70>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000000 	.word	0x20000000
 80013fc:	20000001 	.word	0x20000001
 8001400:	40020000 	.word	0x40020000
 8001404:	40000400 	.word	0x40000400

08001408 <setPwmFrequency>:
	HAL_TIM_PWM_Stop(Get_TIM2_Instance(), TIM_CHANNEL_2);
	HAL_TIM_PWM_Stop(Get_TIM2_Instance(), TIM_CHANNEL_4);
}

static void setPwmFrequency(uint32_t f_hz)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
	// <=>
	// ARR = Clock frequency / (2 * Frequency)
	// Clock frequency (200kHz) = Source frequency / PSC

	//TIM2->ARR = (uint32_t)(42000000 / TIM2->PSC) / (2 * f_hz);
	TIM2->ARR = 200000 / (2 * f_hz);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001418:	4904      	ldr	r1, [pc, #16]	; (800142c <setPwmFrequency+0x24>)
 800141a:	fbb1 f3f3 	udiv	r3, r1, r3
 800141e:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8001420:	bf00      	nop
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	00030d40 	.word	0x00030d40

08001430 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001434:	f000 ff60 	bl	80022f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001438:	f000 f822 	bl	8001480 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800143c:	f000 faee 	bl	8001a1c <MX_GPIO_Init>
  MX_DMA_Init();
 8001440:	f000 fac4 	bl	80019cc <MX_DMA_Init>
  MX_SDIO_SD_Init();
 8001444:	f000 f926 	bl	8001694 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8001448:	f008 ff5e 	bl	800a308 <MX_FATFS_Init>
  MX_I2C1_Init();
 800144c:	f000 f89a 	bl	8001584 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8001450:	f00a fda6 	bl	800bfa0 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8001454:	f000 f93e 	bl	80016d4 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8001458:	f000 fa8e 	bl	8001978 <MX_USART3_UART_Init>
  MX_RTC_Init();
 800145c:	f000 f8c0 	bl	80015e0 <MX_RTC_Init>
  MX_TIM2_Init();
 8001460:	f000 f96e 	bl	8001740 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001464:	f000 fa3a 	bl	80018dc <MX_TIM5_Init>
  MX_TIM3_Init();
 8001468:	f000 f9ea 	bl	8001840 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  setup();
 800146c:	f7ff fda4 	bl	8000fb8 <setup>

  // Start motor timeout interrupt timer
  HAL_TIM_Base_Start(&htim3);
 8001470:	4802      	ldr	r0, [pc, #8]	; (800147c <main+0x4c>)
 8001472:	f005 fc5a 	bl	8006d2a <HAL_TIM_Base_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	loop();
 8001476:	f7ff fe03 	bl	8001080 <loop>
 800147a:	e7fc      	b.n	8001476 <main+0x46>
 800147c:	20000948 	.word	0x20000948

08001480 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b098      	sub	sp, #96	; 0x60
 8001484:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001486:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800148a:	2230      	movs	r2, #48	; 0x30
 800148c:	2100      	movs	r1, #0
 800148e:	4618      	mov	r0, r3
 8001490:	f00b faef 	bl	800ca72 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001494:	f107 031c 	add.w	r3, r7, #28
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014a4:	f107 030c 	add.w	r3, r7, #12
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	60bb      	str	r3, [r7, #8]
 80014b6:	4b31      	ldr	r3, [pc, #196]	; (800157c <SystemClock_Config+0xfc>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	4a30      	ldr	r2, [pc, #192]	; (800157c <SystemClock_Config+0xfc>)
 80014bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c0:	6413      	str	r3, [r2, #64]	; 0x40
 80014c2:	4b2e      	ldr	r3, [pc, #184]	; (800157c <SystemClock_Config+0xfc>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014ce:	2300      	movs	r3, #0
 80014d0:	607b      	str	r3, [r7, #4]
 80014d2:	4b2b      	ldr	r3, [pc, #172]	; (8001580 <SystemClock_Config+0x100>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a2a      	ldr	r2, [pc, #168]	; (8001580 <SystemClock_Config+0x100>)
 80014d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014dc:	6013      	str	r3, [r2, #0]
 80014de:	4b28      	ldr	r3, [pc, #160]	; (8001580 <SystemClock_Config+0x100>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014e6:	607b      	str	r3, [r7, #4]
 80014e8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80014ea:	2305      	movs	r3, #5
 80014ec:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80014f4:	2301      	movs	r3, #1
 80014f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014f8:	2302      	movs	r3, #2
 80014fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014fc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001500:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8001502:	2306      	movs	r3, #6
 8001504:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001506:	23a8      	movs	r3, #168	; 0xa8
 8001508:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800150a:	2302      	movs	r3, #2
 800150c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800150e:	2307      	movs	r3, #7
 8001510:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001512:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001516:	4618      	mov	r0, r3
 8001518:	f003 f8d6 	bl	80046c8 <HAL_RCC_OscConfig>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001522:	f000 fb99 	bl	8001c58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001526:	230f      	movs	r3, #15
 8001528:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800152a:	2302      	movs	r3, #2
 800152c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800152e:	2300      	movs	r3, #0
 8001530:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001532:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001536:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001538:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800153c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800153e:	f107 031c 	add.w	r3, r7, #28
 8001542:	2105      	movs	r1, #5
 8001544:	4618      	mov	r0, r3
 8001546:	f003 fb2f 	bl	8004ba8 <HAL_RCC_ClockConfig>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001550:	f000 fb82 	bl	8001c58 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001554:	2302      	movs	r3, #2
 8001556:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001558:	f44f 7380 	mov.w	r3, #256	; 0x100
 800155c:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800155e:	f107 030c 	add.w	r3, r7, #12
 8001562:	4618      	mov	r0, r3
 8001564:	f003 fcec 	bl	8004f40 <HAL_RCCEx_PeriphCLKConfig>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800156e:	f000 fb73 	bl	8001c58 <Error_Handler>
  }
}
 8001572:	bf00      	nop
 8001574:	3760      	adds	r7, #96	; 0x60
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40023800 	.word	0x40023800
 8001580:	40007000 	.word	0x40007000

08001584 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001588:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <MX_I2C1_Init+0x50>)
 800158a:	4a13      	ldr	r2, [pc, #76]	; (80015d8 <MX_I2C1_Init+0x54>)
 800158c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800158e:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <MX_I2C1_Init+0x50>)
 8001590:	4a12      	ldr	r2, [pc, #72]	; (80015dc <MX_I2C1_Init+0x58>)
 8001592:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001594:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <MX_I2C1_Init+0x50>)
 8001596:	2200      	movs	r2, #0
 8001598:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800159a:	4b0e      	ldr	r3, [pc, #56]	; (80015d4 <MX_I2C1_Init+0x50>)
 800159c:	2200      	movs	r2, #0
 800159e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015a0:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <MX_I2C1_Init+0x50>)
 80015a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015a8:	4b0a      	ldr	r3, [pc, #40]	; (80015d4 <MX_I2C1_Init+0x50>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015ae:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <MX_I2C1_Init+0x50>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015b4:	4b07      	ldr	r3, [pc, #28]	; (80015d4 <MX_I2C1_Init+0x50>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015ba:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <MX_I2C1_Init+0x50>)
 80015bc:	2200      	movs	r2, #0
 80015be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015c0:	4804      	ldr	r0, [pc, #16]	; (80015d4 <MX_I2C1_Init+0x50>)
 80015c2:	f001 fdbf 	bl	8003144 <HAL_I2C_Init>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015cc:	f000 fb44 	bl	8001c58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015d0:	bf00      	nop
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	200008b4 	.word	0x200008b4
 80015d8:	40005400 	.word	0x40005400
 80015dc:	000186a0 	.word	0x000186a0

080015e0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80015e6:	1d3b      	adds	r3, r7, #4
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80015f4:	2300      	movs	r3, #0
 80015f6:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80015f8:	4b24      	ldr	r3, [pc, #144]	; (800168c <MX_RTC_Init+0xac>)
 80015fa:	4a25      	ldr	r2, [pc, #148]	; (8001690 <MX_RTC_Init+0xb0>)
 80015fc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80015fe:	4b23      	ldr	r3, [pc, #140]	; (800168c <MX_RTC_Init+0xac>)
 8001600:	2200      	movs	r2, #0
 8001602:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001604:	4b21      	ldr	r3, [pc, #132]	; (800168c <MX_RTC_Init+0xac>)
 8001606:	227f      	movs	r2, #127	; 0x7f
 8001608:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800160a:	4b20      	ldr	r3, [pc, #128]	; (800168c <MX_RTC_Init+0xac>)
 800160c:	22ff      	movs	r2, #255	; 0xff
 800160e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001610:	4b1e      	ldr	r3, [pc, #120]	; (800168c <MX_RTC_Init+0xac>)
 8001612:	2200      	movs	r2, #0
 8001614:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001616:	4b1d      	ldr	r3, [pc, #116]	; (800168c <MX_RTC_Init+0xac>)
 8001618:	2200      	movs	r2, #0
 800161a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800161c:	4b1b      	ldr	r3, [pc, #108]	; (800168c <MX_RTC_Init+0xac>)
 800161e:	2200      	movs	r2, #0
 8001620:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001622:	481a      	ldr	r0, [pc, #104]	; (800168c <MX_RTC_Init+0xac>)
 8001624:	f003 fd6e 	bl	8005104 <HAL_RTC_Init>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800162e:	f000 fb13 	bl	8001c58 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8001632:	2300      	movs	r3, #0
 8001634:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001636:	2300      	movs	r3, #0
 8001638:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800163a:	2300      	movs	r3, #0
 800163c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800163e:	2300      	movs	r3, #0
 8001640:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001642:	2300      	movs	r3, #0
 8001644:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001646:	1d3b      	adds	r3, r7, #4
 8001648:	2201      	movs	r2, #1
 800164a:	4619      	mov	r1, r3
 800164c:	480f      	ldr	r0, [pc, #60]	; (800168c <MX_RTC_Init+0xac>)
 800164e:	f003 fdea 	bl	8005226 <HAL_RTC_SetTime>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001658:	f000 fafe 	bl	8001c58 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800165c:	2301      	movs	r3, #1
 800165e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001660:	2301      	movs	r3, #1
 8001662:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001664:	2301      	movs	r3, #1
 8001666:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x20;
 8001668:	2320      	movs	r3, #32
 800166a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800166c:	463b      	mov	r3, r7
 800166e:	2201      	movs	r2, #1
 8001670:	4619      	mov	r1, r3
 8001672:	4806      	ldr	r0, [pc, #24]	; (800168c <MX_RTC_Init+0xac>)
 8001674:	f003 fe94 	bl	80053a0 <HAL_RTC_SetDate>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800167e:	f000 faeb 	bl	8001c58 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001682:	bf00      	nop
 8001684:	3718      	adds	r7, #24
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	20000988 	.word	0x20000988
 8001690:	40002800 	.word	0x40002800

08001694 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001698:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <MX_SDIO_SD_Init+0x38>)
 800169a:	4a0d      	ldr	r2, [pc, #52]	; (80016d0 <MX_SDIO_SD_Init+0x3c>)
 800169c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800169e:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <MX_SDIO_SD_Init+0x38>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80016a4:	4b09      	ldr	r3, [pc, #36]	; (80016cc <MX_SDIO_SD_Init+0x38>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80016aa:	4b08      	ldr	r3, [pc, #32]	; (80016cc <MX_SDIO_SD_Init+0x38>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80016b0:	4b06      	ldr	r3, [pc, #24]	; (80016cc <MX_SDIO_SD_Init+0x38>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80016b6:	4b05      	ldr	r3, [pc, #20]	; (80016cc <MX_SDIO_SD_Init+0x38>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80016bc:	4b03      	ldr	r3, [pc, #12]	; (80016cc <MX_SDIO_SD_Init+0x38>)
 80016be:	2200      	movs	r2, #0
 80016c0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80016c2:	bf00      	nop
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	20000a08 	.word	0x20000a08
 80016d0:	40012c00 	.word	0x40012c00

080016d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016d8:	4b17      	ldr	r3, [pc, #92]	; (8001738 <MX_SPI1_Init+0x64>)
 80016da:	4a18      	ldr	r2, [pc, #96]	; (800173c <MX_SPI1_Init+0x68>)
 80016dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016de:	4b16      	ldr	r3, [pc, #88]	; (8001738 <MX_SPI1_Init+0x64>)
 80016e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016e6:	4b14      	ldr	r3, [pc, #80]	; (8001738 <MX_SPI1_Init+0x64>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016ec:	4b12      	ldr	r3, [pc, #72]	; (8001738 <MX_SPI1_Init+0x64>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016f2:	4b11      	ldr	r3, [pc, #68]	; (8001738 <MX_SPI1_Init+0x64>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016f8:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <MX_SPI1_Init+0x64>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016fe:	4b0e      	ldr	r3, [pc, #56]	; (8001738 <MX_SPI1_Init+0x64>)
 8001700:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001704:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001706:	4b0c      	ldr	r3, [pc, #48]	; (8001738 <MX_SPI1_Init+0x64>)
 8001708:	2200      	movs	r2, #0
 800170a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800170c:	4b0a      	ldr	r3, [pc, #40]	; (8001738 <MX_SPI1_Init+0x64>)
 800170e:	2200      	movs	r2, #0
 8001710:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001712:	4b09      	ldr	r3, [pc, #36]	; (8001738 <MX_SPI1_Init+0x64>)
 8001714:	2200      	movs	r2, #0
 8001716:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001718:	4b07      	ldr	r3, [pc, #28]	; (8001738 <MX_SPI1_Init+0x64>)
 800171a:	2200      	movs	r2, #0
 800171c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800171e:	4b06      	ldr	r3, [pc, #24]	; (8001738 <MX_SPI1_Init+0x64>)
 8001720:	220a      	movs	r2, #10
 8001722:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001724:	4804      	ldr	r0, [pc, #16]	; (8001738 <MX_SPI1_Init+0x64>)
 8001726:	f005 fa71 	bl	8006c0c <HAL_SPI_Init>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001730:	f000 fa92 	bl	8001c58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001734:	bf00      	nop
 8001736:	bd80      	pop	{r7, pc}
 8001738:	20000a8c 	.word	0x20000a8c
 800173c:	40013000 	.word	0x40013000

08001740 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b08e      	sub	sp, #56	; 0x38
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001746:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	605a      	str	r2, [r3, #4]
 8001750:	609a      	str	r2, [r3, #8]
 8001752:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001754:	f107 0320 	add.w	r3, r7, #32
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800175e:	1d3b      	adds	r3, r7, #4
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]
 800176a:	611a      	str	r2, [r3, #16]
 800176c:	615a      	str	r2, [r3, #20]
 800176e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001770:	4b32      	ldr	r3, [pc, #200]	; (800183c <MX_TIM2_Init+0xfc>)
 8001772:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001776:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 20999;
 8001778:	4b30      	ldr	r3, [pc, #192]	; (800183c <MX_TIM2_Init+0xfc>)
 800177a:	f245 2207 	movw	r2, #20999	; 0x5207
 800177e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001780:	4b2e      	ldr	r3, [pc, #184]	; (800183c <MX_TIM2_Init+0xfc>)
 8001782:	2200      	movs	r2, #0
 8001784:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8001786:	4b2d      	ldr	r3, [pc, #180]	; (800183c <MX_TIM2_Init+0xfc>)
 8001788:	2200      	movs	r2, #0
 800178a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800178c:	4b2b      	ldr	r3, [pc, #172]	; (800183c <MX_TIM2_Init+0xfc>)
 800178e:	2200      	movs	r2, #0
 8001790:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001792:	4b2a      	ldr	r3, [pc, #168]	; (800183c <MX_TIM2_Init+0xfc>)
 8001794:	2200      	movs	r2, #0
 8001796:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001798:	4828      	ldr	r0, [pc, #160]	; (800183c <MX_TIM2_Init+0xfc>)
 800179a:	f005 fa9b 	bl	8006cd4 <HAL_TIM_Base_Init>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80017a4:	f000 fa58 	bl	8001c58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ac:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017b2:	4619      	mov	r1, r3
 80017b4:	4821      	ldr	r0, [pc, #132]	; (800183c <MX_TIM2_Init+0xfc>)
 80017b6:	f005 fd1d 	bl	80071f4 <HAL_TIM_ConfigClockSource>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80017c0:	f000 fa4a 	bl	8001c58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80017c4:	481d      	ldr	r0, [pc, #116]	; (800183c <MX_TIM2_Init+0xfc>)
 80017c6:	f005 fad4 	bl	8006d72 <HAL_TIM_PWM_Init>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80017d0:	f000 fa42 	bl	8001c58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017d4:	2300      	movs	r3, #0
 80017d6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017d8:	2300      	movs	r3, #0
 80017da:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017dc:	f107 0320 	add.w	r3, r7, #32
 80017e0:	4619      	mov	r1, r3
 80017e2:	4816      	ldr	r0, [pc, #88]	; (800183c <MX_TIM2_Init+0xfc>)
 80017e4:	f006 f8f6 	bl	80079d4 <HAL_TIMEx_MasterConfigSynchronization>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80017ee:	f000 fa33 	bl	8001c58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80017f2:	2370      	movs	r3, #112	; 0x70
 80017f4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017f6:	2300      	movs	r3, #0
 80017f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017fa:	2300      	movs	r3, #0
 80017fc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017fe:	2300      	movs	r3, #0
 8001800:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001802:	1d3b      	adds	r3, r7, #4
 8001804:	2204      	movs	r2, #4
 8001806:	4619      	mov	r1, r3
 8001808:	480c      	ldr	r0, [pc, #48]	; (800183c <MX_TIM2_Init+0xfc>)
 800180a:	f005 fc2d 	bl	8007068 <HAL_TIM_PWM_ConfigChannel>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001814:	f000 fa20 	bl	8001c58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001818:	1d3b      	adds	r3, r7, #4
 800181a:	220c      	movs	r2, #12
 800181c:	4619      	mov	r1, r3
 800181e:	4807      	ldr	r0, [pc, #28]	; (800183c <MX_TIM2_Init+0xfc>)
 8001820:	f005 fc22 	bl	8007068 <HAL_TIM_PWM_ConfigChannel>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800182a:	f000 fa15 	bl	8001c58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800182e:	4803      	ldr	r0, [pc, #12]	; (800183c <MX_TIM2_Init+0xfc>)
 8001830:	f000 fc3a 	bl	80020a8 <HAL_TIM_MspPostInit>

}
 8001834:	bf00      	nop
 8001836:	3738      	adds	r7, #56	; 0x38
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	20000ae4 	.word	0x20000ae4

08001840 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001846:	f107 0308 	add.w	r3, r7, #8
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	605a      	str	r2, [r3, #4]
 8001850:	609a      	str	r2, [r3, #8]
 8001852:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001854:	463b      	mov	r3, r7
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800185c:	4b1d      	ldr	r3, [pc, #116]	; (80018d4 <MX_TIM3_Init+0x94>)
 800185e:	4a1e      	ldr	r2, [pc, #120]	; (80018d8 <MX_TIM3_Init+0x98>)
 8001860:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 41999;
 8001862:	4b1c      	ldr	r3, [pc, #112]	; (80018d4 <MX_TIM3_Init+0x94>)
 8001864:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8001868:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800186a:	4b1a      	ldr	r3, [pc, #104]	; (80018d4 <MX_TIM3_Init+0x94>)
 800186c:	2200      	movs	r2, #0
 800186e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8001870:	4b18      	ldr	r3, [pc, #96]	; (80018d4 <MX_TIM3_Init+0x94>)
 8001872:	2264      	movs	r2, #100	; 0x64
 8001874:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001876:	4b17      	ldr	r3, [pc, #92]	; (80018d4 <MX_TIM3_Init+0x94>)
 8001878:	2200      	movs	r2, #0
 800187a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800187c:	4b15      	ldr	r3, [pc, #84]	; (80018d4 <MX_TIM3_Init+0x94>)
 800187e:	2200      	movs	r2, #0
 8001880:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001882:	4814      	ldr	r0, [pc, #80]	; (80018d4 <MX_TIM3_Init+0x94>)
 8001884:	f005 fa26 	bl	8006cd4 <HAL_TIM_Base_Init>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800188e:	f000 f9e3 	bl	8001c58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001892:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001896:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001898:	f107 0308 	add.w	r3, r7, #8
 800189c:	4619      	mov	r1, r3
 800189e:	480d      	ldr	r0, [pc, #52]	; (80018d4 <MX_TIM3_Init+0x94>)
 80018a0:	f005 fca8 	bl	80071f4 <HAL_TIM_ConfigClockSource>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80018aa:	f000 f9d5 	bl	8001c58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ae:	2300      	movs	r3, #0
 80018b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018b2:	2300      	movs	r3, #0
 80018b4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018b6:	463b      	mov	r3, r7
 80018b8:	4619      	mov	r1, r3
 80018ba:	4806      	ldr	r0, [pc, #24]	; (80018d4 <MX_TIM3_Init+0x94>)
 80018bc:	f006 f88a 	bl	80079d4 <HAL_TIMEx_MasterConfigSynchronization>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80018c6:	f000 f9c7 	bl	8001c58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80018ca:	bf00      	nop
 80018cc:	3718      	adds	r7, #24
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20000948 	.word	0x20000948
 80018d8:	40000400 	.word	0x40000400

080018dc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018e2:	f107 0308 	add.w	r3, r7, #8
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	605a      	str	r2, [r3, #4]
 80018ec:	609a      	str	r2, [r3, #8]
 80018ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f0:	463b      	mov	r3, r7
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80018f8:	4b1d      	ldr	r3, [pc, #116]	; (8001970 <MX_TIM5_Init+0x94>)
 80018fa:	4a1e      	ldr	r2, [pc, #120]	; (8001974 <MX_TIM5_Init+0x98>)
 80018fc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 41999;
 80018fe:	4b1c      	ldr	r3, [pc, #112]	; (8001970 <MX_TIM5_Init+0x94>)
 8001900:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8001904:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001906:	4b1a      	ldr	r3, [pc, #104]	; (8001970 <MX_TIM5_Init+0x94>)
 8001908:	2200      	movs	r2, #0
 800190a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 800190c:	4b18      	ldr	r3, [pc, #96]	; (8001970 <MX_TIM5_Init+0x94>)
 800190e:	2200      	movs	r2, #0
 8001910:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001912:	4b17      	ldr	r3, [pc, #92]	; (8001970 <MX_TIM5_Init+0x94>)
 8001914:	2200      	movs	r2, #0
 8001916:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001918:	4b15      	ldr	r3, [pc, #84]	; (8001970 <MX_TIM5_Init+0x94>)
 800191a:	2200      	movs	r2, #0
 800191c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800191e:	4814      	ldr	r0, [pc, #80]	; (8001970 <MX_TIM5_Init+0x94>)
 8001920:	f005 f9d8 	bl	8006cd4 <HAL_TIM_Base_Init>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800192a:	f000 f995 	bl	8001c58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800192e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001932:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001934:	f107 0308 	add.w	r3, r7, #8
 8001938:	4619      	mov	r1, r3
 800193a:	480d      	ldr	r0, [pc, #52]	; (8001970 <MX_TIM5_Init+0x94>)
 800193c:	f005 fc5a 	bl	80071f4 <HAL_TIM_ConfigClockSource>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001946:	f000 f987 	bl	8001c58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800194a:	2300      	movs	r3, #0
 800194c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800194e:	2300      	movs	r3, #0
 8001950:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001952:	463b      	mov	r3, r7
 8001954:	4619      	mov	r1, r3
 8001956:	4806      	ldr	r0, [pc, #24]	; (8001970 <MX_TIM5_Init+0x94>)
 8001958:	f006 f83c 	bl	80079d4 <HAL_TIMEx_MasterConfigSynchronization>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001962:	f000 f979 	bl	8001c58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001966:	bf00      	nop
 8001968:	3718      	adds	r7, #24
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	20000908 	.word	0x20000908
 8001974:	40000c00 	.word	0x40000c00

08001978 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800197c:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <MX_USART3_UART_Init+0x4c>)
 800197e:	4a12      	ldr	r2, [pc, #72]	; (80019c8 <MX_USART3_UART_Init+0x50>)
 8001980:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001982:	4b10      	ldr	r3, [pc, #64]	; (80019c4 <MX_USART3_UART_Init+0x4c>)
 8001984:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001988:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800198a:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <MX_USART3_UART_Init+0x4c>)
 800198c:	2200      	movs	r2, #0
 800198e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001990:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <MX_USART3_UART_Init+0x4c>)
 8001992:	2200      	movs	r2, #0
 8001994:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001996:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <MX_USART3_UART_Init+0x4c>)
 8001998:	2200      	movs	r2, #0
 800199a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800199c:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <MX_USART3_UART_Init+0x4c>)
 800199e:	220c      	movs	r2, #12
 80019a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019a2:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <MX_USART3_UART_Init+0x4c>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80019a8:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <MX_USART3_UART_Init+0x4c>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80019ae:	4805      	ldr	r0, [pc, #20]	; (80019c4 <MX_USART3_UART_Init+0x4c>)
 80019b0:	f006 f8a0 	bl	8007af4 <HAL_UART_Init>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80019ba:	f000 f94d 	bl	8001c58 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000874 	.word	0x20000874
 80019c8:	40004800 	.word	0x40004800

080019cc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	607b      	str	r3, [r7, #4]
 80019d6:	4b10      	ldr	r3, [pc, #64]	; (8001a18 <MX_DMA_Init+0x4c>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	4a0f      	ldr	r2, [pc, #60]	; (8001a18 <MX_DMA_Init+0x4c>)
 80019dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019e0:	6313      	str	r3, [r2, #48]	; 0x30
 80019e2:	4b0d      	ldr	r3, [pc, #52]	; (8001a18 <MX_DMA_Init+0x4c>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ea:	607b      	str	r3, [r7, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80019ee:	2200      	movs	r2, #0
 80019f0:	2100      	movs	r1, #0
 80019f2:	203b      	movs	r0, #59	; 0x3b
 80019f4:	f000 fdef 	bl	80025d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80019f8:	203b      	movs	r0, #59	; 0x3b
 80019fa:	f000 fe08 	bl	800260e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80019fe:	2200      	movs	r2, #0
 8001a00:	2100      	movs	r1, #0
 8001a02:	2045      	movs	r0, #69	; 0x45
 8001a04:	f000 fde7 	bl	80025d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001a08:	2045      	movs	r0, #69	; 0x45
 8001a0a:	f000 fe00 	bl	800260e <HAL_NVIC_EnableIRQ>

}
 8001a0e:	bf00      	nop
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40023800 	.word	0x40023800

08001a1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b08a      	sub	sp, #40	; 0x28
 8001a20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a22:	f107 0314 	add.w	r3, r7, #20
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	605a      	str	r2, [r3, #4]
 8001a2c:	609a      	str	r2, [r3, #8]
 8001a2e:	60da      	str	r2, [r3, #12]
 8001a30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	613b      	str	r3, [r7, #16]
 8001a36:	4b6e      	ldr	r3, [pc, #440]	; (8001bf0 <MX_GPIO_Init+0x1d4>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	4a6d      	ldr	r2, [pc, #436]	; (8001bf0 <MX_GPIO_Init+0x1d4>)
 8001a3c:	f043 0304 	orr.w	r3, r3, #4
 8001a40:	6313      	str	r3, [r2, #48]	; 0x30
 8001a42:	4b6b      	ldr	r3, [pc, #428]	; (8001bf0 <MX_GPIO_Init+0x1d4>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	f003 0304 	and.w	r3, r3, #4
 8001a4a:	613b      	str	r3, [r7, #16]
 8001a4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	4b67      	ldr	r3, [pc, #412]	; (8001bf0 <MX_GPIO_Init+0x1d4>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	4a66      	ldr	r2, [pc, #408]	; (8001bf0 <MX_GPIO_Init+0x1d4>)
 8001a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5e:	4b64      	ldr	r3, [pc, #400]	; (8001bf0 <MX_GPIO_Init+0x1d4>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60bb      	str	r3, [r7, #8]
 8001a6e:	4b60      	ldr	r3, [pc, #384]	; (8001bf0 <MX_GPIO_Init+0x1d4>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	4a5f      	ldr	r2, [pc, #380]	; (8001bf0 <MX_GPIO_Init+0x1d4>)
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7a:	4b5d      	ldr	r3, [pc, #372]	; (8001bf0 <MX_GPIO_Init+0x1d4>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	60bb      	str	r3, [r7, #8]
 8001a84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	607b      	str	r3, [r7, #4]
 8001a8a:	4b59      	ldr	r3, [pc, #356]	; (8001bf0 <MX_GPIO_Init+0x1d4>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	4a58      	ldr	r2, [pc, #352]	; (8001bf0 <MX_GPIO_Init+0x1d4>)
 8001a90:	f043 0302 	orr.w	r3, r3, #2
 8001a94:	6313      	str	r3, [r2, #48]	; 0x30
 8001a96:	4b56      	ldr	r3, [pc, #344]	; (8001bf0 <MX_GPIO_Init+0x1d4>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	607b      	str	r3, [r7, #4]
 8001aa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	603b      	str	r3, [r7, #0]
 8001aa6:	4b52      	ldr	r3, [pc, #328]	; (8001bf0 <MX_GPIO_Init+0x1d4>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	4a51      	ldr	r2, [pc, #324]	; (8001bf0 <MX_GPIO_Init+0x1d4>)
 8001aac:	f043 0308 	orr.w	r3, r3, #8
 8001ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab2:	4b4f      	ldr	r3, [pc, #316]	; (8001bf0 <MX_GPIO_Init+0x1d4>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	f003 0308 	and.w	r3, r3, #8
 8001aba:	603b      	str	r3, [r7, #0]
 8001abc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, P1_Pin|P4_Pin|P2_Pin|P5_Pin 
 8001abe:	2200      	movs	r2, #0
 8001ac0:	21ef      	movs	r1, #239	; 0xef
 8001ac2:	484c      	ldr	r0, [pc, #304]	; (8001bf4 <MX_GPIO_Init+0x1d8>)
 8001ac4:	f001 fb0c 	bl	80030e0 <HAL_GPIO_WritePin>
                          |LR_RESET_Pin|LEDB_Pin|LEDA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PH_L_Pin|PH_R_Pin|P7_Pin, GPIO_PIN_RESET);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	2115      	movs	r1, #21
 8001acc:	484a      	ldr	r0, [pc, #296]	; (8001bf8 <MX_GPIO_Init+0x1dc>)
 8001ace:	f001 fb07 	bl	80030e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, P6_Pin|P3_Pin|LEDD_Pin|LEDC_Pin 
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f243 2103 	movw	r1, #12803	; 0x3203
 8001ad8:	4848      	ldr	r0, [pc, #288]	; (8001bfc <MX_GPIO_Init+0x1e0>)
 8001ada:	f001 fb01 	bl	80030e0 <HAL_GPIO_WritePin>
                          |LR_NSS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : P1_Pin P4_Pin P2_Pin P5_Pin 
                           LR_RESET_Pin */
  GPIO_InitStruct.Pin = P1_Pin|P4_Pin|P2_Pin|P5_Pin 
 8001ade:	232f      	movs	r3, #47	; 0x2f
 8001ae0:	617b      	str	r3, [r7, #20]
                          |LR_RESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aea:	2300      	movs	r3, #0
 8001aec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aee:	f107 0314 	add.w	r3, r7, #20
 8001af2:	4619      	mov	r1, r3
 8001af4:	483f      	ldr	r0, [pc, #252]	; (8001bf4 <MX_GPIO_Init+0x1d8>)
 8001af6:	f001 f941 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PH_L_Pin PH_R_Pin */
  GPIO_InitStruct.Pin = PH_L_Pin|PH_R_Pin;
 8001afa:	2305      	movs	r3, #5
 8001afc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001afe:	2301      	movs	r3, #1
 8001b00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b02:	2302      	movs	r3, #2
 8001b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b06:	2300      	movs	r3, #0
 8001b08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b0a:	f107 0314 	add.w	r3, r7, #20
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4839      	ldr	r0, [pc, #228]	; (8001bf8 <MX_GPIO_Init+0x1dc>)
 8001b12:	f001 f933 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : P7_Pin */
  GPIO_InitStruct.Pin = P7_Pin;
 8001b16:	2310      	movs	r3, #16
 8001b18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b22:	2300      	movs	r3, #0
 8001b24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(P7_GPIO_Port, &GPIO_InitStruct);
 8001b26:	f107 0314 	add.w	r3, r7, #20
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4832      	ldr	r0, [pc, #200]	; (8001bf8 <MX_GPIO_Init+0x1dc>)
 8001b2e:	f001 f925 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LR_DIO0_Pin */
  GPIO_InitStruct.Pin = LR_DIO0_Pin;
 8001b32:	2340      	movs	r3, #64	; 0x40
 8001b34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b36:	4b32      	ldr	r3, [pc, #200]	; (8001c00 <MX_GPIO_Init+0x1e4>)
 8001b38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LR_DIO0_GPIO_Port, &GPIO_InitStruct);
 8001b3e:	f107 0314 	add.w	r3, r7, #20
 8001b42:	4619      	mov	r1, r3
 8001b44:	482c      	ldr	r0, [pc, #176]	; (8001bf8 <MX_GPIO_Init+0x1dc>)
 8001b46:	f001 f919 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : P6_Pin P3_Pin LR_NSS_Pin */
  GPIO_InitStruct.Pin = P6_Pin|P3_Pin|LR_NSS_Pin;
 8001b4a:	f240 2303 	movw	r3, #515	; 0x203
 8001b4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b50:	2301      	movs	r3, #1
 8001b52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b5c:	f107 0314 	add.w	r3, r7, #20
 8001b60:	4619      	mov	r1, r3
 8001b62:	4826      	ldr	r0, [pc, #152]	; (8001bfc <MX_GPIO_Init+0x1e0>)
 8001b64:	f001 f90a 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDD_Pin LEDC_Pin */
  GPIO_InitStruct.Pin = LEDD_Pin|LEDC_Pin;
 8001b68:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001b6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b72:	2302      	movs	r3, #2
 8001b74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b76:	2300      	movs	r3, #0
 8001b78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b7a:	f107 0314 	add.w	r3, r7, #20
 8001b7e:	4619      	mov	r1, r3
 8001b80:	481e      	ldr	r0, [pc, #120]	; (8001bfc <MX_GPIO_Init+0x1e0>)
 8001b82:	f001 f8fb 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDB_Pin LEDA_Pin */
  GPIO_InitStruct.Pin = LEDB_Pin|LEDA_Pin;
 8001b86:	23c0      	movs	r3, #192	; 0xc0
 8001b88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b92:	2300      	movs	r3, #0
 8001b94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b96:	f107 0314 	add.w	r3, r7, #20
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4815      	ldr	r0, [pc, #84]	; (8001bf4 <MX_GPIO_Init+0x1d8>)
 8001b9e:	f001 f8ed 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_SW_Pin */
  GPIO_InitStruct.Pin = SDIO_SW_Pin;
 8001ba2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ba6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDIO_SW_GPIO_Port, &GPIO_InitStruct);
 8001bb0:	f107 0314 	add.w	r3, r7, #20
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4810      	ldr	r0, [pc, #64]	; (8001bf8 <MX_GPIO_Init+0x1dc>)
 8001bb8:	f001 f8e0 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_USR_Pin */
  GPIO_InitStruct.Pin = BTN_USR_Pin;
 8001bbc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_USR_GPIO_Port, &GPIO_InitStruct);
 8001bca:	f107 0314 	add.w	r3, r7, #20
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4809      	ldr	r0, [pc, #36]	; (8001bf8 <MX_GPIO_Init+0x1dc>)
 8001bd2:	f001 f8d3 	bl	8002d7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	2100      	movs	r1, #0
 8001bda:	2017      	movs	r0, #23
 8001bdc:	f000 fcfb 	bl	80025d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001be0:	2017      	movs	r0, #23
 8001be2:	f000 fd14 	bl	800260e <HAL_NVIC_EnableIRQ>

}
 8001be6:	bf00      	nop
 8001be8:	3728      	adds	r7, #40	; 0x28
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	40020800 	.word	0x40020800
 8001bf8:	40020000 	.word	0x40020000
 8001bfc:	40020400 	.word	0x40020400
 8001c00:	10110000 	.word	0x10110000

08001c04 <Get_TIM2_Instance>:
/* USER CODE BEGIN 4 */

I2C_HandleTypeDef* Get_I2C1_Instance() { return &hi2c1; }
SPI_HandleTypeDef* Get_SPI1_Instance() { return &hspi1; }
RTC_HandleTypeDef* Get_RTC_Instance() { return &hrtc; }
TIM_HandleTypeDef* Get_TIM2_Instance() { return &htim2; }
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	4b02      	ldr	r3, [pc, #8]	; (8001c14 <Get_TIM2_Instance+0x10>)
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	20000ae4 	.word	0x20000ae4

08001c18 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	80fb      	strh	r3, [r7, #6]
	//DIO0 Interrupt function
	if (GPIO_Pin == LR_DIO0_Pin)
 8001c22:	88fb      	ldrh	r3, [r7, #6]
 8001c24:	2b40      	cmp	r3, #64	; 0x40
 8001c26:	d101      	bne.n	8001c2c <HAL_GPIO_EXTI_Callback+0x14>
	{
		dio0_IRQ();
 8001c28:	f7ff fb26 	bl	8001278 <dio0_IRQ>
	}
}
 8001c2c:	bf00      	nop
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
	// motor interrupt in on TIM3
	if (htim->Instance == TIM3)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a04      	ldr	r2, [pc, #16]	; (8001c54 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d101      	bne.n	8001c4a <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		haltMotors();
 8001c46:	f7ff fb91 	bl	800136c <haltMotors>
	}

}
 8001c4a:	bf00      	nop
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40000400 	.word	0x40000400

08001c58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001c5c:	bf00      	nop
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
	...

08001c68 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c6e:	2300      	movs	r3, #0
 8001c70:	607b      	str	r3, [r7, #4]
 8001c72:	4b10      	ldr	r3, [pc, #64]	; (8001cb4 <HAL_MspInit+0x4c>)
 8001c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c76:	4a0f      	ldr	r2, [pc, #60]	; (8001cb4 <HAL_MspInit+0x4c>)
 8001c78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c7e:	4b0d      	ldr	r3, [pc, #52]	; (8001cb4 <HAL_MspInit+0x4c>)
 8001c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c86:	607b      	str	r3, [r7, #4]
 8001c88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	603b      	str	r3, [r7, #0]
 8001c8e:	4b09      	ldr	r3, [pc, #36]	; (8001cb4 <HAL_MspInit+0x4c>)
 8001c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c92:	4a08      	ldr	r2, [pc, #32]	; (8001cb4 <HAL_MspInit+0x4c>)
 8001c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c98:	6413      	str	r3, [r2, #64]	; 0x40
 8001c9a:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <HAL_MspInit+0x4c>)
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca2:	603b      	str	r3, [r7, #0]
 8001ca4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ca6:	bf00      	nop
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	40023800 	.word	0x40023800

08001cb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b08a      	sub	sp, #40	; 0x28
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc0:	f107 0314 	add.w	r3, r7, #20
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	605a      	str	r2, [r3, #4]
 8001cca:	609a      	str	r2, [r3, #8]
 8001ccc:	60da      	str	r2, [r3, #12]
 8001cce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a19      	ldr	r2, [pc, #100]	; (8001d3c <HAL_I2C_MspInit+0x84>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d12b      	bne.n	8001d32 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	613b      	str	r3, [r7, #16]
 8001cde:	4b18      	ldr	r3, [pc, #96]	; (8001d40 <HAL_I2C_MspInit+0x88>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	4a17      	ldr	r2, [pc, #92]	; (8001d40 <HAL_I2C_MspInit+0x88>)
 8001ce4:	f043 0302 	orr.w	r3, r3, #2
 8001ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cea:	4b15      	ldr	r3, [pc, #84]	; (8001d40 <HAL_I2C_MspInit+0x88>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	613b      	str	r3, [r7, #16]
 8001cf4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 8001cf6:	23c0      	movs	r3, #192	; 0xc0
 8001cf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cfa:	2312      	movs	r3, #18
 8001cfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d02:	2303      	movs	r3, #3
 8001d04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d06:	2304      	movs	r3, #4
 8001d08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d0a:	f107 0314 	add.w	r3, r7, #20
 8001d0e:	4619      	mov	r1, r3
 8001d10:	480c      	ldr	r0, [pc, #48]	; (8001d44 <HAL_I2C_MspInit+0x8c>)
 8001d12:	f001 f833 	bl	8002d7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	60fb      	str	r3, [r7, #12]
 8001d1a:	4b09      	ldr	r3, [pc, #36]	; (8001d40 <HAL_I2C_MspInit+0x88>)
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	4a08      	ldr	r2, [pc, #32]	; (8001d40 <HAL_I2C_MspInit+0x88>)
 8001d20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d24:	6413      	str	r3, [r2, #64]	; 0x40
 8001d26:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <HAL_I2C_MspInit+0x88>)
 8001d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d32:	bf00      	nop
 8001d34:	3728      	adds	r7, #40	; 0x28
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40005400 	.word	0x40005400
 8001d40:	40023800 	.word	0x40023800
 8001d44:	40020400 	.word	0x40020400

08001d48 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a05      	ldr	r2, [pc, #20]	; (8001d6c <HAL_RTC_MspInit+0x24>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d102      	bne.n	8001d60 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001d5a:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <HAL_RTC_MspInit+0x28>)
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	40002800 	.word	0x40002800
 8001d70:	42470e3c 	.word	0x42470e3c

08001d74 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b08a      	sub	sp, #40	; 0x28
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d7c:	f107 0314 	add.w	r3, r7, #20
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	609a      	str	r2, [r3, #8]
 8001d88:	60da      	str	r2, [r3, #12]
 8001d8a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a70      	ldr	r2, [pc, #448]	; (8001f54 <HAL_SD_MspInit+0x1e0>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	f040 80da 	bne.w	8001f4c <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001d98:	2300      	movs	r3, #0
 8001d9a:	613b      	str	r3, [r7, #16]
 8001d9c:	4b6e      	ldr	r3, [pc, #440]	; (8001f58 <HAL_SD_MspInit+0x1e4>)
 8001d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da0:	4a6d      	ldr	r2, [pc, #436]	; (8001f58 <HAL_SD_MspInit+0x1e4>)
 8001da2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001da6:	6453      	str	r3, [r2, #68]	; 0x44
 8001da8:	4b6b      	ldr	r3, [pc, #428]	; (8001f58 <HAL_SD_MspInit+0x1e4>)
 8001daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001db0:	613b      	str	r3, [r7, #16]
 8001db2:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001db4:	2300      	movs	r3, #0
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	4b67      	ldr	r3, [pc, #412]	; (8001f58 <HAL_SD_MspInit+0x1e4>)
 8001dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbc:	4a66      	ldr	r2, [pc, #408]	; (8001f58 <HAL_SD_MspInit+0x1e4>)
 8001dbe:	f043 0304 	orr.w	r3, r3, #4
 8001dc2:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc4:	4b64      	ldr	r3, [pc, #400]	; (8001f58 <HAL_SD_MspInit+0x1e4>)
 8001dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc8:	f003 0304 	and.w	r3, r3, #4
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	60bb      	str	r3, [r7, #8]
 8001dd4:	4b60      	ldr	r3, [pc, #384]	; (8001f58 <HAL_SD_MspInit+0x1e4>)
 8001dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd8:	4a5f      	ldr	r2, [pc, #380]	; (8001f58 <HAL_SD_MspInit+0x1e4>)
 8001dda:	f043 0308 	orr.w	r3, r3, #8
 8001dde:	6313      	str	r3, [r2, #48]	; 0x30
 8001de0:	4b5d      	ldr	r3, [pc, #372]	; (8001f58 <HAL_SD_MspInit+0x1e4>)
 8001de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de4:	f003 0308 	and.w	r3, r3, #8
 8001de8:	60bb      	str	r3, [r7, #8]
 8001dea:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001dec:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001df0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df2:	2302      	movs	r3, #2
 8001df4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001df6:	2301      	movs	r3, #1
 8001df8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001dfe:	230c      	movs	r3, #12
 8001e00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e02:	f107 0314 	add.w	r3, r7, #20
 8001e06:	4619      	mov	r1, r3
 8001e08:	4854      	ldr	r0, [pc, #336]	; (8001f5c <HAL_SD_MspInit+0x1e8>)
 8001e0a:	f000 ffb7 	bl	8002d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001e0e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001e12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e14:	2302      	movs	r3, #2
 8001e16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001e20:	230c      	movs	r3, #12
 8001e22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e24:	f107 0314 	add.w	r3, r7, #20
 8001e28:	4619      	mov	r1, r3
 8001e2a:	484c      	ldr	r0, [pc, #304]	; (8001f5c <HAL_SD_MspInit+0x1e8>)
 8001e2c:	f000 ffa6 	bl	8002d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e30:	2304      	movs	r3, #4
 8001e32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e34:	2302      	movs	r3, #2
 8001e36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001e40:	230c      	movs	r3, #12
 8001e42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e44:	f107 0314 	add.w	r3, r7, #20
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4845      	ldr	r0, [pc, #276]	; (8001f60 <HAL_SD_MspInit+0x1ec>)
 8001e4c:	f000 ff96 	bl	8002d7c <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8001e50:	4b44      	ldr	r3, [pc, #272]	; (8001f64 <HAL_SD_MspInit+0x1f0>)
 8001e52:	4a45      	ldr	r2, [pc, #276]	; (8001f68 <HAL_SD_MspInit+0x1f4>)
 8001e54:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8001e56:	4b43      	ldr	r3, [pc, #268]	; (8001f64 <HAL_SD_MspInit+0x1f0>)
 8001e58:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e5c:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e5e:	4b41      	ldr	r3, [pc, #260]	; (8001f64 <HAL_SD_MspInit+0x1f0>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e64:	4b3f      	ldr	r3, [pc, #252]	; (8001f64 <HAL_SD_MspInit+0x1f0>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e6a:	4b3e      	ldr	r3, [pc, #248]	; (8001f64 <HAL_SD_MspInit+0x1f0>)
 8001e6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e70:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e72:	4b3c      	ldr	r3, [pc, #240]	; (8001f64 <HAL_SD_MspInit+0x1f0>)
 8001e74:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e78:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001e7a:	4b3a      	ldr	r3, [pc, #232]	; (8001f64 <HAL_SD_MspInit+0x1f0>)
 8001e7c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e80:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8001e82:	4b38      	ldr	r3, [pc, #224]	; (8001f64 <HAL_SD_MspInit+0x1f0>)
 8001e84:	2220      	movs	r2, #32
 8001e86:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e88:	4b36      	ldr	r3, [pc, #216]	; (8001f64 <HAL_SD_MspInit+0x1f0>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001e8e:	4b35      	ldr	r3, [pc, #212]	; (8001f64 <HAL_SD_MspInit+0x1f0>)
 8001e90:	2204      	movs	r2, #4
 8001e92:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001e94:	4b33      	ldr	r3, [pc, #204]	; (8001f64 <HAL_SD_MspInit+0x1f0>)
 8001e96:	2203      	movs	r2, #3
 8001e98:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001e9a:	4b32      	ldr	r3, [pc, #200]	; (8001f64 <HAL_SD_MspInit+0x1f0>)
 8001e9c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001ea0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001ea2:	4b30      	ldr	r3, [pc, #192]	; (8001f64 <HAL_SD_MspInit+0x1f0>)
 8001ea4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001ea8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8001eaa:	482e      	ldr	r0, [pc, #184]	; (8001f64 <HAL_SD_MspInit+0x1f0>)
 8001eac:	f000 fbca 	bl	8002644 <HAL_DMA_Init>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 8001eb6:	f7ff fecf 	bl	8001c58 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a29      	ldr	r2, [pc, #164]	; (8001f64 <HAL_SD_MspInit+0x1f0>)
 8001ebe:	641a      	str	r2, [r3, #64]	; 0x40
 8001ec0:	4a28      	ldr	r2, [pc, #160]	; (8001f64 <HAL_SD_MspInit+0x1f0>)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8001ec6:	4b29      	ldr	r3, [pc, #164]	; (8001f6c <HAL_SD_MspInit+0x1f8>)
 8001ec8:	4a29      	ldr	r2, [pc, #164]	; (8001f70 <HAL_SD_MspInit+0x1fc>)
 8001eca:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8001ecc:	4b27      	ldr	r3, [pc, #156]	; (8001f6c <HAL_SD_MspInit+0x1f8>)
 8001ece:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ed2:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ed4:	4b25      	ldr	r3, [pc, #148]	; (8001f6c <HAL_SD_MspInit+0x1f8>)
 8001ed6:	2240      	movs	r2, #64	; 0x40
 8001ed8:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001eda:	4b24      	ldr	r3, [pc, #144]	; (8001f6c <HAL_SD_MspInit+0x1f8>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ee0:	4b22      	ldr	r3, [pc, #136]	; (8001f6c <HAL_SD_MspInit+0x1f8>)
 8001ee2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ee6:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001ee8:	4b20      	ldr	r3, [pc, #128]	; (8001f6c <HAL_SD_MspInit+0x1f8>)
 8001eea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001eee:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ef0:	4b1e      	ldr	r3, [pc, #120]	; (8001f6c <HAL_SD_MspInit+0x1f8>)
 8001ef2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ef6:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8001ef8:	4b1c      	ldr	r3, [pc, #112]	; (8001f6c <HAL_SD_MspInit+0x1f8>)
 8001efa:	2220      	movs	r2, #32
 8001efc:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001efe:	4b1b      	ldr	r3, [pc, #108]	; (8001f6c <HAL_SD_MspInit+0x1f8>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001f04:	4b19      	ldr	r3, [pc, #100]	; (8001f6c <HAL_SD_MspInit+0x1f8>)
 8001f06:	2204      	movs	r2, #4
 8001f08:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001f0a:	4b18      	ldr	r3, [pc, #96]	; (8001f6c <HAL_SD_MspInit+0x1f8>)
 8001f0c:	2203      	movs	r2, #3
 8001f0e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001f10:	4b16      	ldr	r3, [pc, #88]	; (8001f6c <HAL_SD_MspInit+0x1f8>)
 8001f12:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001f16:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001f18:	4b14      	ldr	r3, [pc, #80]	; (8001f6c <HAL_SD_MspInit+0x1f8>)
 8001f1a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001f1e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8001f20:	4812      	ldr	r0, [pc, #72]	; (8001f6c <HAL_SD_MspInit+0x1f8>)
 8001f22:	f000 fb8f 	bl	8002644 <HAL_DMA_Init>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 8001f2c:	f7ff fe94 	bl	8001c58 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a0e      	ldr	r2, [pc, #56]	; (8001f6c <HAL_SD_MspInit+0x1f8>)
 8001f34:	63da      	str	r2, [r3, #60]	; 0x3c
 8001f36:	4a0d      	ldr	r2, [pc, #52]	; (8001f6c <HAL_SD_MspInit+0x1f8>)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	2100      	movs	r1, #0
 8001f40:	2031      	movs	r0, #49	; 0x31
 8001f42:	f000 fb48 	bl	80025d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001f46:	2031      	movs	r0, #49	; 0x31
 8001f48:	f000 fb61 	bl	800260e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001f4c:	bf00      	nop
 8001f4e:	3728      	adds	r7, #40	; 0x28
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	40012c00 	.word	0x40012c00
 8001f58:	40023800 	.word	0x40023800
 8001f5c:	40020800 	.word	0x40020800
 8001f60:	40020c00 	.word	0x40020c00
 8001f64:	20000814 	.word	0x20000814
 8001f68:	40026458 	.word	0x40026458
 8001f6c:	200009a8 	.word	0x200009a8
 8001f70:	400264a0 	.word	0x400264a0

08001f74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b08a      	sub	sp, #40	; 0x28
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7c:	f107 0314 	add.w	r3, r7, #20
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	60da      	str	r2, [r3, #12]
 8001f8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a19      	ldr	r2, [pc, #100]	; (8001ff8 <HAL_SPI_MspInit+0x84>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d12b      	bne.n	8001fee <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	613b      	str	r3, [r7, #16]
 8001f9a:	4b18      	ldr	r3, [pc, #96]	; (8001ffc <HAL_SPI_MspInit+0x88>)
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9e:	4a17      	ldr	r2, [pc, #92]	; (8001ffc <HAL_SPI_MspInit+0x88>)
 8001fa0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fa4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fa6:	4b15      	ldr	r3, [pc, #84]	; (8001ffc <HAL_SPI_MspInit+0x88>)
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001faa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fae:	613b      	str	r3, [r7, #16]
 8001fb0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <HAL_SPI_MspInit+0x88>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	4a10      	ldr	r2, [pc, #64]	; (8001ffc <HAL_SPI_MspInit+0x88>)
 8001fbc:	f043 0302 	orr.w	r3, r3, #2
 8001fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc2:	4b0e      	ldr	r3, [pc, #56]	; (8001ffc <HAL_SPI_MspInit+0x88>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = LR_SCK_Pin|LR_MISO_Pin|LR_MOSI_Pin;
 8001fce:	2338      	movs	r3, #56	; 0x38
 8001fd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fde:	2305      	movs	r3, #5
 8001fe0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe2:	f107 0314 	add.w	r3, r7, #20
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4805      	ldr	r0, [pc, #20]	; (8002000 <HAL_SPI_MspInit+0x8c>)
 8001fea:	f000 fec7 	bl	8002d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001fee:	bf00      	nop
 8001ff0:	3728      	adds	r7, #40	; 0x28
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40013000 	.word	0x40013000
 8001ffc:	40023800 	.word	0x40023800
 8002000:	40020400 	.word	0x40020400

08002004 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002014:	d10e      	bne.n	8002034 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	617b      	str	r3, [r7, #20]
 800201a:	4b20      	ldr	r3, [pc, #128]	; (800209c <HAL_TIM_Base_MspInit+0x98>)
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	4a1f      	ldr	r2, [pc, #124]	; (800209c <HAL_TIM_Base_MspInit+0x98>)
 8002020:	f043 0301 	orr.w	r3, r3, #1
 8002024:	6413      	str	r3, [r2, #64]	; 0x40
 8002026:	4b1d      	ldr	r3, [pc, #116]	; (800209c <HAL_TIM_Base_MspInit+0x98>)
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	617b      	str	r3, [r7, #20]
 8002030:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002032:	e02e      	b.n	8002092 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a19      	ldr	r2, [pc, #100]	; (80020a0 <HAL_TIM_Base_MspInit+0x9c>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d116      	bne.n	800206c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800203e:	2300      	movs	r3, #0
 8002040:	613b      	str	r3, [r7, #16]
 8002042:	4b16      	ldr	r3, [pc, #88]	; (800209c <HAL_TIM_Base_MspInit+0x98>)
 8002044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002046:	4a15      	ldr	r2, [pc, #84]	; (800209c <HAL_TIM_Base_MspInit+0x98>)
 8002048:	f043 0302 	orr.w	r3, r3, #2
 800204c:	6413      	str	r3, [r2, #64]	; 0x40
 800204e:	4b13      	ldr	r3, [pc, #76]	; (800209c <HAL_TIM_Base_MspInit+0x98>)
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	613b      	str	r3, [r7, #16]
 8002058:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800205a:	2200      	movs	r2, #0
 800205c:	2100      	movs	r1, #0
 800205e:	201d      	movs	r0, #29
 8002060:	f000 fab9 	bl	80025d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002064:	201d      	movs	r0, #29
 8002066:	f000 fad2 	bl	800260e <HAL_NVIC_EnableIRQ>
}
 800206a:	e012      	b.n	8002092 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM5)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a0c      	ldr	r2, [pc, #48]	; (80020a4 <HAL_TIM_Base_MspInit+0xa0>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d10d      	bne.n	8002092 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	60fb      	str	r3, [r7, #12]
 800207a:	4b08      	ldr	r3, [pc, #32]	; (800209c <HAL_TIM_Base_MspInit+0x98>)
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	4a07      	ldr	r2, [pc, #28]	; (800209c <HAL_TIM_Base_MspInit+0x98>)
 8002080:	f043 0308 	orr.w	r3, r3, #8
 8002084:	6413      	str	r3, [r2, #64]	; 0x40
 8002086:	4b05      	ldr	r3, [pc, #20]	; (800209c <HAL_TIM_Base_MspInit+0x98>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	f003 0308 	and.w	r3, r3, #8
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	68fb      	ldr	r3, [r7, #12]
}
 8002092:	bf00      	nop
 8002094:	3718      	adds	r7, #24
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	40023800 	.word	0x40023800
 80020a0:	40000400 	.word	0x40000400
 80020a4:	40000c00 	.word	0x40000c00

080020a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b088      	sub	sp, #32
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b0:	f107 030c 	add.w	r3, r7, #12
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	605a      	str	r2, [r3, #4]
 80020ba:	609a      	str	r2, [r3, #8]
 80020bc:	60da      	str	r2, [r3, #12]
 80020be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020c8:	d11d      	bne.n	8002106 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	60bb      	str	r3, [r7, #8]
 80020ce:	4b10      	ldr	r3, [pc, #64]	; (8002110 <HAL_TIM_MspPostInit+0x68>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	4a0f      	ldr	r2, [pc, #60]	; (8002110 <HAL_TIM_MspPostInit+0x68>)
 80020d4:	f043 0301 	orr.w	r3, r3, #1
 80020d8:	6313      	str	r3, [r2, #48]	; 0x30
 80020da:	4b0d      	ldr	r3, [pc, #52]	; (8002110 <HAL_TIM_MspPostInit+0x68>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	60bb      	str	r3, [r7, #8]
 80020e4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA1     ------> TIM2_CH2
    PA3     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = EN_L_Pin|EN_R_Pin;
 80020e6:	230a      	movs	r3, #10
 80020e8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ea:	2302      	movs	r3, #2
 80020ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ee:	2300      	movs	r3, #0
 80020f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f2:	2300      	movs	r3, #0
 80020f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020f6:	2301      	movs	r3, #1
 80020f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020fa:	f107 030c 	add.w	r3, r7, #12
 80020fe:	4619      	mov	r1, r3
 8002100:	4804      	ldr	r0, [pc, #16]	; (8002114 <HAL_TIM_MspPostInit+0x6c>)
 8002102:	f000 fe3b 	bl	8002d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002106:	bf00      	nop
 8002108:	3720      	adds	r7, #32
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40023800 	.word	0x40023800
 8002114:	40020000 	.word	0x40020000

08002118 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b08a      	sub	sp, #40	; 0x28
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002120:	f107 0314 	add.w	r3, r7, #20
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	605a      	str	r2, [r3, #4]
 800212a:	609a      	str	r2, [r3, #8]
 800212c:	60da      	str	r2, [r3, #12]
 800212e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a19      	ldr	r2, [pc, #100]	; (800219c <HAL_UART_MspInit+0x84>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d12c      	bne.n	8002194 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	613b      	str	r3, [r7, #16]
 800213e:	4b18      	ldr	r3, [pc, #96]	; (80021a0 <HAL_UART_MspInit+0x88>)
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	4a17      	ldr	r2, [pc, #92]	; (80021a0 <HAL_UART_MspInit+0x88>)
 8002144:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002148:	6413      	str	r3, [r2, #64]	; 0x40
 800214a:	4b15      	ldr	r3, [pc, #84]	; (80021a0 <HAL_UART_MspInit+0x88>)
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002152:	613b      	str	r3, [r7, #16]
 8002154:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	4b11      	ldr	r3, [pc, #68]	; (80021a0 <HAL_UART_MspInit+0x88>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	4a10      	ldr	r2, [pc, #64]	; (80021a0 <HAL_UART_MspInit+0x88>)
 8002160:	f043 0302 	orr.w	r3, r3, #2
 8002164:	6313      	str	r3, [r2, #48]	; 0x30
 8002166:	4b0e      	ldr	r3, [pc, #56]	; (80021a0 <HAL_UART_MspInit+0x88>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPS_RX_Pin|GPS_TX_Pin;
 8002172:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002176:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002178:	2302      	movs	r3, #2
 800217a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217c:	2300      	movs	r3, #0
 800217e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002180:	2303      	movs	r3, #3
 8002182:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002184:	2307      	movs	r3, #7
 8002186:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002188:	f107 0314 	add.w	r3, r7, #20
 800218c:	4619      	mov	r1, r3
 800218e:	4805      	ldr	r0, [pc, #20]	; (80021a4 <HAL_UART_MspInit+0x8c>)
 8002190:	f000 fdf4 	bl	8002d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002194:	bf00      	nop
 8002196:	3728      	adds	r7, #40	; 0x28
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40004800 	.word	0x40004800
 80021a0:	40023800 	.word	0x40023800
 80021a4:	40020400 	.word	0x40020400

080021a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80021ac:	bf00      	nop
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021b6:	b480      	push	{r7}
 80021b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021ba:	e7fe      	b.n	80021ba <HardFault_Handler+0x4>

080021bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021c0:	e7fe      	b.n	80021c0 <MemManage_Handler+0x4>

080021c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021c2:	b480      	push	{r7}
 80021c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021c6:	e7fe      	b.n	80021c6 <BusFault_Handler+0x4>

080021c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021cc:	e7fe      	b.n	80021cc <UsageFault_Handler+0x4>

080021ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021ce:	b480      	push	{r7}
 80021d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021d2:	bf00      	nop
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021e0:	bf00      	nop
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021ea:	b480      	push	{r7}
 80021ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021ee:	bf00      	nop
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021fc:	f000 f8ce 	bl	800239c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002200:	bf00      	nop
 8002202:	bd80      	pop	{r7, pc}

08002204 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002208:	2040      	movs	r0, #64	; 0x40
 800220a:	f000 ff83 	bl	8003114 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800220e:	bf00      	nop
 8002210:	bd80      	pop	{r7, pc}
	...

08002214 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002218:	4802      	ldr	r0, [pc, #8]	; (8002224 <TIM3_IRQHandler+0x10>)
 800221a:	f004 fe1d 	bl	8006e58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	20000948 	.word	0x20000948

08002228 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800222c:	4802      	ldr	r0, [pc, #8]	; (8002238 <SDIO_IRQHandler+0x10>)
 800222e:	f003 fc3b 	bl	8005aa8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8002232:	bf00      	nop
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	20000a08 	.word	0x20000a08

0800223c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8002240:	4802      	ldr	r0, [pc, #8]	; (800224c <DMA2_Stream3_IRQHandler+0x10>)
 8002242:	f000 fb27 	bl	8002894 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002246:	bf00      	nop
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	20000814 	.word	0x20000814

08002250 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002254:	4802      	ldr	r0, [pc, #8]	; (8002260 <OTG_FS_IRQHandler+0x10>)
 8002256:	f001 f9fd 	bl	8003654 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800225a:	bf00      	nop
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	2000242c 	.word	0x2000242c

08002264 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8002268:	4802      	ldr	r0, [pc, #8]	; (8002274 <DMA2_Stream6_IRQHandler+0x10>)
 800226a:	f000 fb13 	bl	8002894 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800226e:	bf00      	nop
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	200009a8 	.word	0x200009a8

08002278 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800227c:	4b08      	ldr	r3, [pc, #32]	; (80022a0 <SystemInit+0x28>)
 800227e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002282:	4a07      	ldr	r2, [pc, #28]	; (80022a0 <SystemInit+0x28>)
 8002284:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002288:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800228c:	4b04      	ldr	r3, [pc, #16]	; (80022a0 <SystemInit+0x28>)
 800228e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002292:	609a      	str	r2, [r3, #8]
#endif
}
 8002294:	bf00      	nop
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	e000ed00 	.word	0xe000ed00

080022a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80022a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022dc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80022a8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80022aa:	e003      	b.n	80022b4 <LoopCopyDataInit>

080022ac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80022ac:	4b0c      	ldr	r3, [pc, #48]	; (80022e0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80022ae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80022b0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80022b2:	3104      	adds	r1, #4

080022b4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80022b4:	480b      	ldr	r0, [pc, #44]	; (80022e4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80022b6:	4b0c      	ldr	r3, [pc, #48]	; (80022e8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80022b8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80022ba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80022bc:	d3f6      	bcc.n	80022ac <CopyDataInit>
  ldr  r2, =_sbss
 80022be:	4a0b      	ldr	r2, [pc, #44]	; (80022ec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80022c0:	e002      	b.n	80022c8 <LoopFillZerobss>

080022c2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80022c2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80022c4:	f842 3b04 	str.w	r3, [r2], #4

080022c8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80022c8:	4b09      	ldr	r3, [pc, #36]	; (80022f0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80022ca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80022cc:	d3f9      	bcc.n	80022c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80022ce:	f7ff ffd3 	bl	8002278 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022d2:	f00a fb8f 	bl	800c9f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022d6:	f7ff f8ab 	bl	8001430 <main>
  bx  lr    
 80022da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80022dc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80022e0:	08010990 	.word	0x08010990
  ldr  r0, =_sdata
 80022e4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80022e8:	20000350 	.word	0x20000350
  ldr  r2, =_sbss
 80022ec:	20000350 	.word	0x20000350
  ldr  r3, = _ebss
 80022f0:	20002838 	.word	0x20002838

080022f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022f4:	e7fe      	b.n	80022f4 <ADC_IRQHandler>
	...

080022f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022fc:	4b0e      	ldr	r3, [pc, #56]	; (8002338 <HAL_Init+0x40>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a0d      	ldr	r2, [pc, #52]	; (8002338 <HAL_Init+0x40>)
 8002302:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002306:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002308:	4b0b      	ldr	r3, [pc, #44]	; (8002338 <HAL_Init+0x40>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a0a      	ldr	r2, [pc, #40]	; (8002338 <HAL_Init+0x40>)
 800230e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002312:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002314:	4b08      	ldr	r3, [pc, #32]	; (8002338 <HAL_Init+0x40>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a07      	ldr	r2, [pc, #28]	; (8002338 <HAL_Init+0x40>)
 800231a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800231e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002320:	2003      	movs	r0, #3
 8002322:	f000 f94d 	bl	80025c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002326:	2000      	movs	r0, #0
 8002328:	f000 f808 	bl	800233c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800232c:	f7ff fc9c 	bl	8001c68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	40023c00 	.word	0x40023c00

0800233c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002344:	4b12      	ldr	r3, [pc, #72]	; (8002390 <HAL_InitTick+0x54>)
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	4b12      	ldr	r3, [pc, #72]	; (8002394 <HAL_InitTick+0x58>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	4619      	mov	r1, r3
 800234e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002352:	fbb3 f3f1 	udiv	r3, r3, r1
 8002356:	fbb2 f3f3 	udiv	r3, r2, r3
 800235a:	4618      	mov	r0, r3
 800235c:	f000 f965 	bl	800262a <HAL_SYSTICK_Config>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e00e      	b.n	8002388 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2b0f      	cmp	r3, #15
 800236e:	d80a      	bhi.n	8002386 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002370:	2200      	movs	r2, #0
 8002372:	6879      	ldr	r1, [r7, #4]
 8002374:	f04f 30ff 	mov.w	r0, #4294967295
 8002378:	f000 f92d 	bl	80025d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800237c:	4a06      	ldr	r2, [pc, #24]	; (8002398 <HAL_InitTick+0x5c>)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002382:	2300      	movs	r3, #0
 8002384:	e000      	b.n	8002388 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
}
 8002388:	4618      	mov	r0, r3
 800238a:	3708      	adds	r7, #8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	20000004 	.word	0x20000004
 8002394:	2000000c 	.word	0x2000000c
 8002398:	20000008 	.word	0x20000008

0800239c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023a0:	4b06      	ldr	r3, [pc, #24]	; (80023bc <HAL_IncTick+0x20>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	461a      	mov	r2, r3
 80023a6:	4b06      	ldr	r3, [pc, #24]	; (80023c0 <HAL_IncTick+0x24>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4413      	add	r3, r2
 80023ac:	4a04      	ldr	r2, [pc, #16]	; (80023c0 <HAL_IncTick+0x24>)
 80023ae:	6013      	str	r3, [r2, #0]
}
 80023b0:	bf00      	nop
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	2000000c 	.word	0x2000000c
 80023c0:	20000b24 	.word	0x20000b24

080023c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  return uwTick;
 80023c8:	4b03      	ldr	r3, [pc, #12]	; (80023d8 <HAL_GetTick+0x14>)
 80023ca:	681b      	ldr	r3, [r3, #0]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	20000b24 	.word	0x20000b24

080023dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023e4:	f7ff ffee 	bl	80023c4 <HAL_GetTick>
 80023e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f4:	d005      	beq.n	8002402 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023f6:	4b09      	ldr	r3, [pc, #36]	; (800241c <HAL_Delay+0x40>)
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	461a      	mov	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	4413      	add	r3, r2
 8002400:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002402:	bf00      	nop
 8002404:	f7ff ffde 	bl	80023c4 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	429a      	cmp	r2, r3
 8002412:	d8f7      	bhi.n	8002404 <HAL_Delay+0x28>
  {
  }
}
 8002414:	bf00      	nop
 8002416:	3710      	adds	r7, #16
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	2000000c 	.word	0x2000000c

08002420 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f003 0307 	and.w	r3, r3, #7
 800242e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002430:	4b0c      	ldr	r3, [pc, #48]	; (8002464 <__NVIC_SetPriorityGrouping+0x44>)
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002436:	68ba      	ldr	r2, [r7, #8]
 8002438:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800243c:	4013      	ands	r3, r2
 800243e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002448:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800244c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002450:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002452:	4a04      	ldr	r2, [pc, #16]	; (8002464 <__NVIC_SetPriorityGrouping+0x44>)
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	60d3      	str	r3, [r2, #12]
}
 8002458:	bf00      	nop
 800245a:	3714      	adds	r7, #20
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	e000ed00 	.word	0xe000ed00

08002468 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800246c:	4b04      	ldr	r3, [pc, #16]	; (8002480 <__NVIC_GetPriorityGrouping+0x18>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	0a1b      	lsrs	r3, r3, #8
 8002472:	f003 0307 	and.w	r3, r3, #7
}
 8002476:	4618      	mov	r0, r3
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	e000ed00 	.word	0xe000ed00

08002484 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	4603      	mov	r3, r0
 800248c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800248e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002492:	2b00      	cmp	r3, #0
 8002494:	db0b      	blt.n	80024ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002496:	79fb      	ldrb	r3, [r7, #7]
 8002498:	f003 021f 	and.w	r2, r3, #31
 800249c:	4907      	ldr	r1, [pc, #28]	; (80024bc <__NVIC_EnableIRQ+0x38>)
 800249e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a2:	095b      	lsrs	r3, r3, #5
 80024a4:	2001      	movs	r0, #1
 80024a6:	fa00 f202 	lsl.w	r2, r0, r2
 80024aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024ae:	bf00      	nop
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	e000e100 	.word	0xe000e100

080024c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	4603      	mov	r3, r0
 80024c8:	6039      	str	r1, [r7, #0]
 80024ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	db0a      	blt.n	80024ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	b2da      	uxtb	r2, r3
 80024d8:	490c      	ldr	r1, [pc, #48]	; (800250c <__NVIC_SetPriority+0x4c>)
 80024da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024de:	0112      	lsls	r2, r2, #4
 80024e0:	b2d2      	uxtb	r2, r2
 80024e2:	440b      	add	r3, r1
 80024e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024e8:	e00a      	b.n	8002500 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	b2da      	uxtb	r2, r3
 80024ee:	4908      	ldr	r1, [pc, #32]	; (8002510 <__NVIC_SetPriority+0x50>)
 80024f0:	79fb      	ldrb	r3, [r7, #7]
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	3b04      	subs	r3, #4
 80024f8:	0112      	lsls	r2, r2, #4
 80024fa:	b2d2      	uxtb	r2, r2
 80024fc:	440b      	add	r3, r1
 80024fe:	761a      	strb	r2, [r3, #24]
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	e000e100 	.word	0xe000e100
 8002510:	e000ed00 	.word	0xe000ed00

08002514 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002514:	b480      	push	{r7}
 8002516:	b089      	sub	sp, #36	; 0x24
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f003 0307 	and.w	r3, r3, #7
 8002526:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	f1c3 0307 	rsb	r3, r3, #7
 800252e:	2b04      	cmp	r3, #4
 8002530:	bf28      	it	cs
 8002532:	2304      	movcs	r3, #4
 8002534:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	3304      	adds	r3, #4
 800253a:	2b06      	cmp	r3, #6
 800253c:	d902      	bls.n	8002544 <NVIC_EncodePriority+0x30>
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	3b03      	subs	r3, #3
 8002542:	e000      	b.n	8002546 <NVIC_EncodePriority+0x32>
 8002544:	2300      	movs	r3, #0
 8002546:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002548:	f04f 32ff 	mov.w	r2, #4294967295
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	43da      	mvns	r2, r3
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	401a      	ands	r2, r3
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800255c:	f04f 31ff 	mov.w	r1, #4294967295
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	fa01 f303 	lsl.w	r3, r1, r3
 8002566:	43d9      	mvns	r1, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800256c:	4313      	orrs	r3, r2
         );
}
 800256e:	4618      	mov	r0, r3
 8002570:	3724      	adds	r7, #36	; 0x24
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
	...

0800257c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	3b01      	subs	r3, #1
 8002588:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800258c:	d301      	bcc.n	8002592 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800258e:	2301      	movs	r3, #1
 8002590:	e00f      	b.n	80025b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002592:	4a0a      	ldr	r2, [pc, #40]	; (80025bc <SysTick_Config+0x40>)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3b01      	subs	r3, #1
 8002598:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800259a:	210f      	movs	r1, #15
 800259c:	f04f 30ff 	mov.w	r0, #4294967295
 80025a0:	f7ff ff8e 	bl	80024c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025a4:	4b05      	ldr	r3, [pc, #20]	; (80025bc <SysTick_Config+0x40>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025aa:	4b04      	ldr	r3, [pc, #16]	; (80025bc <SysTick_Config+0x40>)
 80025ac:	2207      	movs	r2, #7
 80025ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	e000e010 	.word	0xe000e010

080025c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f7ff ff29 	bl	8002420 <__NVIC_SetPriorityGrouping>
}
 80025ce:	bf00      	nop
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b086      	sub	sp, #24
 80025da:	af00      	add	r7, sp, #0
 80025dc:	4603      	mov	r3, r0
 80025de:	60b9      	str	r1, [r7, #8]
 80025e0:	607a      	str	r2, [r7, #4]
 80025e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025e4:	2300      	movs	r3, #0
 80025e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025e8:	f7ff ff3e 	bl	8002468 <__NVIC_GetPriorityGrouping>
 80025ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	68b9      	ldr	r1, [r7, #8]
 80025f2:	6978      	ldr	r0, [r7, #20]
 80025f4:	f7ff ff8e 	bl	8002514 <NVIC_EncodePriority>
 80025f8:	4602      	mov	r2, r0
 80025fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025fe:	4611      	mov	r1, r2
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff ff5d 	bl	80024c0 <__NVIC_SetPriority>
}
 8002606:	bf00      	nop
 8002608:	3718      	adds	r7, #24
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b082      	sub	sp, #8
 8002612:	af00      	add	r7, sp, #0
 8002614:	4603      	mov	r3, r0
 8002616:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff ff31 	bl	8002484 <__NVIC_EnableIRQ>
}
 8002622:	bf00      	nop
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b082      	sub	sp, #8
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7ff ffa2 	bl	800257c <SysTick_Config>
 8002638:	4603      	mov	r3, r0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
	...

08002644 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002650:	f7ff feb8 	bl	80023c4 <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d101      	bne.n	8002660 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e099      	b.n	8002794 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2202      	movs	r2, #2
 800266c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f022 0201 	bic.w	r2, r2, #1
 800267e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002680:	e00f      	b.n	80026a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002682:	f7ff fe9f 	bl	80023c4 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b05      	cmp	r3, #5
 800268e:	d908      	bls.n	80026a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2220      	movs	r2, #32
 8002694:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2203      	movs	r2, #3
 800269a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e078      	b.n	8002794 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1e8      	bne.n	8002682 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80026b8:	697a      	ldr	r2, [r7, #20]
 80026ba:	4b38      	ldr	r3, [pc, #224]	; (800279c <HAL_DMA_Init+0x158>)
 80026bc:	4013      	ands	r3, r2
 80026be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685a      	ldr	r2, [r3, #4]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f8:	2b04      	cmp	r3, #4
 80026fa:	d107      	bne.n	800270c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002704:	4313      	orrs	r3, r2
 8002706:	697a      	ldr	r2, [r7, #20]
 8002708:	4313      	orrs	r3, r2
 800270a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	697a      	ldr	r2, [r7, #20]
 8002712:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	f023 0307 	bic.w	r3, r3, #7
 8002722:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002728:	697a      	ldr	r2, [r7, #20]
 800272a:	4313      	orrs	r3, r2
 800272c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002732:	2b04      	cmp	r3, #4
 8002734:	d117      	bne.n	8002766 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273a:	697a      	ldr	r2, [r7, #20]
 800273c:	4313      	orrs	r3, r2
 800273e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00e      	beq.n	8002766 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f000 fa9d 	bl	8002c88 <DMA_CheckFifoParam>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d008      	beq.n	8002766 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2240      	movs	r2, #64	; 0x40
 8002758:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2201      	movs	r2, #1
 800275e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002762:	2301      	movs	r3, #1
 8002764:	e016      	b.n	8002794 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	697a      	ldr	r2, [r7, #20]
 800276c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 fa54 	bl	8002c1c <DMA_CalcBaseAndBitshift>
 8002774:	4603      	mov	r3, r0
 8002776:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800277c:	223f      	movs	r2, #63	; 0x3f
 800277e:	409a      	lsls	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	3718      	adds	r7, #24
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	f010803f 	.word	0xf010803f

080027a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
 80027ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027ae:	2300      	movs	r3, #0
 80027b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d101      	bne.n	80027c6 <HAL_DMA_Start_IT+0x26>
 80027c2:	2302      	movs	r3, #2
 80027c4:	e040      	b.n	8002848 <HAL_DMA_Start_IT+0xa8>
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2201      	movs	r2, #1
 80027ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d12f      	bne.n	800283a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2202      	movs	r2, #2
 80027de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2200      	movs	r2, #0
 80027e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	68b9      	ldr	r1, [r7, #8]
 80027ee:	68f8      	ldr	r0, [r7, #12]
 80027f0:	f000 f9e6 	bl	8002bc0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f8:	223f      	movs	r2, #63	; 0x3f
 80027fa:	409a      	lsls	r2, r3
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f042 0216 	orr.w	r2, r2, #22
 800280e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002814:	2b00      	cmp	r3, #0
 8002816:	d007      	beq.n	8002828 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f042 0208 	orr.w	r2, r2, #8
 8002826:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f042 0201 	orr.w	r2, r2, #1
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	e005      	b.n	8002846 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002842:	2302      	movs	r3, #2
 8002844:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002846:	7dfb      	ldrb	r3, [r7, #23]
}
 8002848:	4618      	mov	r0, r3
 800284a:	3718      	adds	r7, #24
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800285e:	b2db      	uxtb	r3, r3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d004      	beq.n	800286e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2280      	movs	r2, #128	; 0x80
 8002868:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e00c      	b.n	8002888 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2205      	movs	r2, #5
 8002872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f022 0201 	bic.w	r2, r2, #1
 8002884:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800289c:	2300      	movs	r3, #0
 800289e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80028a0:	4b92      	ldr	r3, [pc, #584]	; (8002aec <HAL_DMA_IRQHandler+0x258>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a92      	ldr	r2, [pc, #584]	; (8002af0 <HAL_DMA_IRQHandler+0x25c>)
 80028a6:	fba2 2303 	umull	r2, r3, r2, r3
 80028aa:	0a9b      	lsrs	r3, r3, #10
 80028ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028be:	2208      	movs	r2, #8
 80028c0:	409a      	lsls	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	4013      	ands	r3, r2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d01a      	beq.n	8002900 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0304 	and.w	r3, r3, #4
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d013      	beq.n	8002900 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f022 0204 	bic.w	r2, r2, #4
 80028e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ec:	2208      	movs	r2, #8
 80028ee:	409a      	lsls	r2, r3
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f8:	f043 0201 	orr.w	r2, r3, #1
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002904:	2201      	movs	r2, #1
 8002906:	409a      	lsls	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	4013      	ands	r3, r2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d012      	beq.n	8002936 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800291a:	2b00      	cmp	r3, #0
 800291c:	d00b      	beq.n	8002936 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002922:	2201      	movs	r2, #1
 8002924:	409a      	lsls	r2, r3
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800292e:	f043 0202 	orr.w	r2, r3, #2
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800293a:	2204      	movs	r2, #4
 800293c:	409a      	lsls	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	4013      	ands	r3, r2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d012      	beq.n	800296c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d00b      	beq.n	800296c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002958:	2204      	movs	r2, #4
 800295a:	409a      	lsls	r2, r3
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002964:	f043 0204 	orr.w	r2, r3, #4
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002970:	2210      	movs	r2, #16
 8002972:	409a      	lsls	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	4013      	ands	r3, r2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d043      	beq.n	8002a04 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0308 	and.w	r3, r3, #8
 8002986:	2b00      	cmp	r3, #0
 8002988:	d03c      	beq.n	8002a04 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800298e:	2210      	movs	r2, #16
 8002990:	409a      	lsls	r2, r3
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d018      	beq.n	80029d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d108      	bne.n	80029c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d024      	beq.n	8002a04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	4798      	blx	r3
 80029c2:	e01f      	b.n	8002a04 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d01b      	beq.n	8002a04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	4798      	blx	r3
 80029d4:	e016      	b.n	8002a04 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d107      	bne.n	80029f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f022 0208 	bic.w	r2, r2, #8
 80029f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d003      	beq.n	8002a04 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a08:	2220      	movs	r2, #32
 8002a0a:	409a      	lsls	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f000 808e 	beq.w	8002b32 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0310 	and.w	r3, r3, #16
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f000 8086 	beq.w	8002b32 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a2a:	2220      	movs	r2, #32
 8002a2c:	409a      	lsls	r2, r3
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b05      	cmp	r3, #5
 8002a3c:	d136      	bne.n	8002aac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f022 0216 	bic.w	r2, r2, #22
 8002a4c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	695a      	ldr	r2, [r3, #20]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a5c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d103      	bne.n	8002a6e <HAL_DMA_IRQHandler+0x1da>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d007      	beq.n	8002a7e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 0208 	bic.w	r2, r2, #8
 8002a7c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a82:	223f      	movs	r2, #63	; 0x3f
 8002a84:	409a      	lsls	r2, r3
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2201      	movs	r2, #1
 8002a96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d07d      	beq.n	8002b9e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	4798      	blx	r3
        }
        return;
 8002aaa:	e078      	b.n	8002b9e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d01c      	beq.n	8002af4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d108      	bne.n	8002ada <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d030      	beq.n	8002b32 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	4798      	blx	r3
 8002ad8:	e02b      	b.n	8002b32 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d027      	beq.n	8002b32 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	4798      	blx	r3
 8002aea:	e022      	b.n	8002b32 <HAL_DMA_IRQHandler+0x29e>
 8002aec:	20000004 	.word	0x20000004
 8002af0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d10f      	bne.n	8002b22 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 0210 	bic.w	r2, r2, #16
 8002b10:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d032      	beq.n	8002ba0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d022      	beq.n	8002b8c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2205      	movs	r2, #5
 8002b4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f022 0201 	bic.w	r2, r2, #1
 8002b5c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	3301      	adds	r3, #1
 8002b62:	60bb      	str	r3, [r7, #8]
 8002b64:	697a      	ldr	r2, [r7, #20]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d307      	bcc.n	8002b7a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1f2      	bne.n	8002b5e <HAL_DMA_IRQHandler+0x2ca>
 8002b78:	e000      	b.n	8002b7c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002b7a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d005      	beq.n	8002ba0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	4798      	blx	r3
 8002b9c:	e000      	b.n	8002ba0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002b9e:	bf00      	nop
    }
  }
}
 8002ba0:	3718      	adds	r7, #24
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop

08002ba8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]
 8002bcc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002bdc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	2b40      	cmp	r3, #64	; 0x40
 8002bec:	d108      	bne.n	8002c00 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68ba      	ldr	r2, [r7, #8]
 8002bfc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002bfe:	e007      	b.n	8002c10 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68ba      	ldr	r2, [r7, #8]
 8002c06:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	60da      	str	r2, [r3, #12]
}
 8002c10:	bf00      	nop
 8002c12:	3714      	adds	r7, #20
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	3b10      	subs	r3, #16
 8002c2c:	4a14      	ldr	r2, [pc, #80]	; (8002c80 <DMA_CalcBaseAndBitshift+0x64>)
 8002c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c32:	091b      	lsrs	r3, r3, #4
 8002c34:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c36:	4a13      	ldr	r2, [pc, #76]	; (8002c84 <DMA_CalcBaseAndBitshift+0x68>)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	461a      	mov	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2b03      	cmp	r3, #3
 8002c48:	d909      	bls.n	8002c5e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c52:	f023 0303 	bic.w	r3, r3, #3
 8002c56:	1d1a      	adds	r2, r3, #4
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	659a      	str	r2, [r3, #88]	; 0x58
 8002c5c:	e007      	b.n	8002c6e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c66:	f023 0303 	bic.w	r3, r3, #3
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3714      	adds	r7, #20
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	aaaaaaab 	.word	0xaaaaaaab
 8002c84:	080106ac 	.word	0x080106ac

08002c88 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c90:	2300      	movs	r3, #0
 8002c92:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c98:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d11f      	bne.n	8002ce2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	2b03      	cmp	r3, #3
 8002ca6:	d855      	bhi.n	8002d54 <DMA_CheckFifoParam+0xcc>
 8002ca8:	a201      	add	r2, pc, #4	; (adr r2, 8002cb0 <DMA_CheckFifoParam+0x28>)
 8002caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cae:	bf00      	nop
 8002cb0:	08002cc1 	.word	0x08002cc1
 8002cb4:	08002cd3 	.word	0x08002cd3
 8002cb8:	08002cc1 	.word	0x08002cc1
 8002cbc:	08002d55 	.word	0x08002d55
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d045      	beq.n	8002d58 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cd0:	e042      	b.n	8002d58 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002cda:	d13f      	bne.n	8002d5c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ce0:	e03c      	b.n	8002d5c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cea:	d121      	bne.n	8002d30 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	2b03      	cmp	r3, #3
 8002cf0:	d836      	bhi.n	8002d60 <DMA_CheckFifoParam+0xd8>
 8002cf2:	a201      	add	r2, pc, #4	; (adr r2, 8002cf8 <DMA_CheckFifoParam+0x70>)
 8002cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cf8:	08002d09 	.word	0x08002d09
 8002cfc:	08002d0f 	.word	0x08002d0f
 8002d00:	08002d09 	.word	0x08002d09
 8002d04:	08002d21 	.word	0x08002d21
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d0c:	e02f      	b.n	8002d6e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d024      	beq.n	8002d64 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d1e:	e021      	b.n	8002d64 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d24:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d28:	d11e      	bne.n	8002d68 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d2e:	e01b      	b.n	8002d68 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d902      	bls.n	8002d3c <DMA_CheckFifoParam+0xb4>
 8002d36:	2b03      	cmp	r3, #3
 8002d38:	d003      	beq.n	8002d42 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d3a:	e018      	b.n	8002d6e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d40:	e015      	b.n	8002d6e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00e      	beq.n	8002d6c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	73fb      	strb	r3, [r7, #15]
      break;
 8002d52:	e00b      	b.n	8002d6c <DMA_CheckFifoParam+0xe4>
      break;
 8002d54:	bf00      	nop
 8002d56:	e00a      	b.n	8002d6e <DMA_CheckFifoParam+0xe6>
      break;
 8002d58:	bf00      	nop
 8002d5a:	e008      	b.n	8002d6e <DMA_CheckFifoParam+0xe6>
      break;
 8002d5c:	bf00      	nop
 8002d5e:	e006      	b.n	8002d6e <DMA_CheckFifoParam+0xe6>
      break;
 8002d60:	bf00      	nop
 8002d62:	e004      	b.n	8002d6e <DMA_CheckFifoParam+0xe6>
      break;
 8002d64:	bf00      	nop
 8002d66:	e002      	b.n	8002d6e <DMA_CheckFifoParam+0xe6>
      break;   
 8002d68:	bf00      	nop
 8002d6a:	e000      	b.n	8002d6e <DMA_CheckFifoParam+0xe6>
      break;
 8002d6c:	bf00      	nop
    }
  } 
  
  return status; 
 8002d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3714      	adds	r7, #20
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b089      	sub	sp, #36	; 0x24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d86:	2300      	movs	r3, #0
 8002d88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d92:	2300      	movs	r3, #0
 8002d94:	61fb      	str	r3, [r7, #28]
 8002d96:	e16b      	b.n	8003070 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d98:	2201      	movs	r2, #1
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	4013      	ands	r3, r2
 8002daa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002dac:	693a      	ldr	r2, [r7, #16]
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	f040 815a 	bne.w	800306a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d00b      	beq.n	8002dd6 <HAL_GPIO_Init+0x5a>
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d007      	beq.n	8002dd6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002dca:	2b11      	cmp	r3, #17
 8002dcc:	d003      	beq.n	8002dd6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	2b12      	cmp	r3, #18
 8002dd4:	d130      	bne.n	8002e38 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	2203      	movs	r2, #3
 8002de2:	fa02 f303 	lsl.w	r3, r2, r3
 8002de6:	43db      	mvns	r3, r3
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	4013      	ands	r3, r2
 8002dec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	68da      	ldr	r2, [r3, #12]
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	43db      	mvns	r3, r3
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	091b      	lsrs	r3, r3, #4
 8002e22:	f003 0201 	and.w	r2, r3, #1
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	2203      	movs	r2, #3
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	43db      	mvns	r3, r3
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d003      	beq.n	8002e78 <HAL_GPIO_Init+0xfc>
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	2b12      	cmp	r3, #18
 8002e76:	d123      	bne.n	8002ec0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	08da      	lsrs	r2, r3, #3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	3208      	adds	r2, #8
 8002e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	f003 0307 	and.w	r3, r3, #7
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	220f      	movs	r2, #15
 8002e90:	fa02 f303 	lsl.w	r3, r2, r3
 8002e94:	43db      	mvns	r3, r3
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	4013      	ands	r3, r2
 8002e9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	691a      	ldr	r2, [r3, #16]
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	f003 0307 	and.w	r3, r3, #7
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	08da      	lsrs	r2, r3, #3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	3208      	adds	r2, #8
 8002eba:	69b9      	ldr	r1, [r7, #24]
 8002ebc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	2203      	movs	r2, #3
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f003 0203 	and.w	r2, r3, #3
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f000 80b4 	beq.w	800306a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f02:	2300      	movs	r3, #0
 8002f04:	60fb      	str	r3, [r7, #12]
 8002f06:	4b5f      	ldr	r3, [pc, #380]	; (8003084 <HAL_GPIO_Init+0x308>)
 8002f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0a:	4a5e      	ldr	r2, [pc, #376]	; (8003084 <HAL_GPIO_Init+0x308>)
 8002f0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f10:	6453      	str	r3, [r2, #68]	; 0x44
 8002f12:	4b5c      	ldr	r3, [pc, #368]	; (8003084 <HAL_GPIO_Init+0x308>)
 8002f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f1a:	60fb      	str	r3, [r7, #12]
 8002f1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f1e:	4a5a      	ldr	r2, [pc, #360]	; (8003088 <HAL_GPIO_Init+0x30c>)
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	089b      	lsrs	r3, r3, #2
 8002f24:	3302      	adds	r3, #2
 8002f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	f003 0303 	and.w	r3, r3, #3
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	220f      	movs	r2, #15
 8002f36:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3a:	43db      	mvns	r3, r3
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a51      	ldr	r2, [pc, #324]	; (800308c <HAL_GPIO_Init+0x310>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d02b      	beq.n	8002fa2 <HAL_GPIO_Init+0x226>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a50      	ldr	r2, [pc, #320]	; (8003090 <HAL_GPIO_Init+0x314>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d025      	beq.n	8002f9e <HAL_GPIO_Init+0x222>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a4f      	ldr	r2, [pc, #316]	; (8003094 <HAL_GPIO_Init+0x318>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d01f      	beq.n	8002f9a <HAL_GPIO_Init+0x21e>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a4e      	ldr	r2, [pc, #312]	; (8003098 <HAL_GPIO_Init+0x31c>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d019      	beq.n	8002f96 <HAL_GPIO_Init+0x21a>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a4d      	ldr	r2, [pc, #308]	; (800309c <HAL_GPIO_Init+0x320>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d013      	beq.n	8002f92 <HAL_GPIO_Init+0x216>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a4c      	ldr	r2, [pc, #304]	; (80030a0 <HAL_GPIO_Init+0x324>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d00d      	beq.n	8002f8e <HAL_GPIO_Init+0x212>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a4b      	ldr	r2, [pc, #300]	; (80030a4 <HAL_GPIO_Init+0x328>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d007      	beq.n	8002f8a <HAL_GPIO_Init+0x20e>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a4a      	ldr	r2, [pc, #296]	; (80030a8 <HAL_GPIO_Init+0x32c>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d101      	bne.n	8002f86 <HAL_GPIO_Init+0x20a>
 8002f82:	2307      	movs	r3, #7
 8002f84:	e00e      	b.n	8002fa4 <HAL_GPIO_Init+0x228>
 8002f86:	2308      	movs	r3, #8
 8002f88:	e00c      	b.n	8002fa4 <HAL_GPIO_Init+0x228>
 8002f8a:	2306      	movs	r3, #6
 8002f8c:	e00a      	b.n	8002fa4 <HAL_GPIO_Init+0x228>
 8002f8e:	2305      	movs	r3, #5
 8002f90:	e008      	b.n	8002fa4 <HAL_GPIO_Init+0x228>
 8002f92:	2304      	movs	r3, #4
 8002f94:	e006      	b.n	8002fa4 <HAL_GPIO_Init+0x228>
 8002f96:	2303      	movs	r3, #3
 8002f98:	e004      	b.n	8002fa4 <HAL_GPIO_Init+0x228>
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	e002      	b.n	8002fa4 <HAL_GPIO_Init+0x228>
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e000      	b.n	8002fa4 <HAL_GPIO_Init+0x228>
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	69fa      	ldr	r2, [r7, #28]
 8002fa6:	f002 0203 	and.w	r2, r2, #3
 8002faa:	0092      	lsls	r2, r2, #2
 8002fac:	4093      	lsls	r3, r2
 8002fae:	69ba      	ldr	r2, [r7, #24]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fb4:	4934      	ldr	r1, [pc, #208]	; (8003088 <HAL_GPIO_Init+0x30c>)
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	089b      	lsrs	r3, r3, #2
 8002fba:	3302      	adds	r3, #2
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fc2:	4b3a      	ldr	r3, [pc, #232]	; (80030ac <HAL_GPIO_Init+0x330>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	43db      	mvns	r3, r3
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fe6:	4a31      	ldr	r2, [pc, #196]	; (80030ac <HAL_GPIO_Init+0x330>)
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002fec:	4b2f      	ldr	r3, [pc, #188]	; (80030ac <HAL_GPIO_Init+0x330>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d003      	beq.n	8003010 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	4313      	orrs	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003010:	4a26      	ldr	r2, [pc, #152]	; (80030ac <HAL_GPIO_Init+0x330>)
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003016:	4b25      	ldr	r3, [pc, #148]	; (80030ac <HAL_GPIO_Init+0x330>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	43db      	mvns	r3, r3
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	4013      	ands	r3, r2
 8003024:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d003      	beq.n	800303a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	4313      	orrs	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800303a:	4a1c      	ldr	r2, [pc, #112]	; (80030ac <HAL_GPIO_Init+0x330>)
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003040:	4b1a      	ldr	r3, [pc, #104]	; (80030ac <HAL_GPIO_Init+0x330>)
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	43db      	mvns	r3, r3
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	4013      	ands	r3, r2
 800304e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d003      	beq.n	8003064 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	4313      	orrs	r3, r2
 8003062:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003064:	4a11      	ldr	r2, [pc, #68]	; (80030ac <HAL_GPIO_Init+0x330>)
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	3301      	adds	r3, #1
 800306e:	61fb      	str	r3, [r7, #28]
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	2b0f      	cmp	r3, #15
 8003074:	f67f ae90 	bls.w	8002d98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003078:	bf00      	nop
 800307a:	3724      	adds	r7, #36	; 0x24
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr
 8003084:	40023800 	.word	0x40023800
 8003088:	40013800 	.word	0x40013800
 800308c:	40020000 	.word	0x40020000
 8003090:	40020400 	.word	0x40020400
 8003094:	40020800 	.word	0x40020800
 8003098:	40020c00 	.word	0x40020c00
 800309c:	40021000 	.word	0x40021000
 80030a0:	40021400 	.word	0x40021400
 80030a4:	40021800 	.word	0x40021800
 80030a8:	40021c00 	.word	0x40021c00
 80030ac:	40013c00 	.word	0x40013c00

080030b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b085      	sub	sp, #20
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	460b      	mov	r3, r1
 80030ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	691a      	ldr	r2, [r3, #16]
 80030c0:	887b      	ldrh	r3, [r7, #2]
 80030c2:	4013      	ands	r3, r2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d002      	beq.n	80030ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80030c8:	2301      	movs	r3, #1
 80030ca:	73fb      	strb	r3, [r7, #15]
 80030cc:	e001      	b.n	80030d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80030ce:	2300      	movs	r3, #0
 80030d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80030d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3714      	adds	r7, #20
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	460b      	mov	r3, r1
 80030ea:	807b      	strh	r3, [r7, #2]
 80030ec:	4613      	mov	r3, r2
 80030ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030f0:	787b      	ldrb	r3, [r7, #1]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030f6:	887a      	ldrh	r2, [r7, #2]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030fc:	e003      	b.n	8003106 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030fe:	887b      	ldrh	r3, [r7, #2]
 8003100:	041a      	lsls	r2, r3, #16
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	619a      	str	r2, [r3, #24]
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
	...

08003114 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	4603      	mov	r3, r0
 800311c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800311e:	4b08      	ldr	r3, [pc, #32]	; (8003140 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003120:	695a      	ldr	r2, [r3, #20]
 8003122:	88fb      	ldrh	r3, [r7, #6]
 8003124:	4013      	ands	r3, r2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d006      	beq.n	8003138 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800312a:	4a05      	ldr	r2, [pc, #20]	; (8003140 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800312c:	88fb      	ldrh	r3, [r7, #6]
 800312e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003130:	88fb      	ldrh	r3, [r7, #6]
 8003132:	4618      	mov	r0, r3
 8003134:	f7fe fd70 	bl	8001c18 <HAL_GPIO_EXTI_Callback>
  }
}
 8003138:	bf00      	nop
 800313a:	3708      	adds	r7, #8
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	40013c00 	.word	0x40013c00

08003144 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e11f      	b.n	8003396 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d106      	bne.n	8003170 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f7fe fda4 	bl	8001cb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2224      	movs	r2, #36	; 0x24
 8003174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f022 0201 	bic.w	r2, r2, #1
 8003186:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003196:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80031a8:	f001 fea2 	bl	8004ef0 <HAL_RCC_GetPCLK1Freq>
 80031ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	4a7b      	ldr	r2, [pc, #492]	; (80033a0 <HAL_I2C_Init+0x25c>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d807      	bhi.n	80031c8 <HAL_I2C_Init+0x84>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	4a7a      	ldr	r2, [pc, #488]	; (80033a4 <HAL_I2C_Init+0x260>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	bf94      	ite	ls
 80031c0:	2301      	movls	r3, #1
 80031c2:	2300      	movhi	r3, #0
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	e006      	b.n	80031d6 <HAL_I2C_Init+0x92>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	4a77      	ldr	r2, [pc, #476]	; (80033a8 <HAL_I2C_Init+0x264>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	bf94      	ite	ls
 80031d0:	2301      	movls	r3, #1
 80031d2:	2300      	movhi	r3, #0
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e0db      	b.n	8003396 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	4a72      	ldr	r2, [pc, #456]	; (80033ac <HAL_I2C_Init+0x268>)
 80031e2:	fba2 2303 	umull	r2, r3, r2, r3
 80031e6:	0c9b      	lsrs	r3, r3, #18
 80031e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	68ba      	ldr	r2, [r7, #8]
 80031fa:	430a      	orrs	r2, r1
 80031fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	6a1b      	ldr	r3, [r3, #32]
 8003204:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	4a64      	ldr	r2, [pc, #400]	; (80033a0 <HAL_I2C_Init+0x25c>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d802      	bhi.n	8003218 <HAL_I2C_Init+0xd4>
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	3301      	adds	r3, #1
 8003216:	e009      	b.n	800322c <HAL_I2C_Init+0xe8>
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800321e:	fb02 f303 	mul.w	r3, r2, r3
 8003222:	4a63      	ldr	r2, [pc, #396]	; (80033b0 <HAL_I2C_Init+0x26c>)
 8003224:	fba2 2303 	umull	r2, r3, r2, r3
 8003228:	099b      	lsrs	r3, r3, #6
 800322a:	3301      	adds	r3, #1
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	6812      	ldr	r2, [r2, #0]
 8003230:	430b      	orrs	r3, r1
 8003232:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	69db      	ldr	r3, [r3, #28]
 800323a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800323e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	4956      	ldr	r1, [pc, #344]	; (80033a0 <HAL_I2C_Init+0x25c>)
 8003248:	428b      	cmp	r3, r1
 800324a:	d80d      	bhi.n	8003268 <HAL_I2C_Init+0x124>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	1e59      	subs	r1, r3, #1
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	fbb1 f3f3 	udiv	r3, r1, r3
 800325a:	3301      	adds	r3, #1
 800325c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003260:	2b04      	cmp	r3, #4
 8003262:	bf38      	it	cc
 8003264:	2304      	movcc	r3, #4
 8003266:	e04f      	b.n	8003308 <HAL_I2C_Init+0x1c4>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d111      	bne.n	8003294 <HAL_I2C_Init+0x150>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	1e58      	subs	r0, r3, #1
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6859      	ldr	r1, [r3, #4]
 8003278:	460b      	mov	r3, r1
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	440b      	add	r3, r1
 800327e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003282:	3301      	adds	r3, #1
 8003284:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003288:	2b00      	cmp	r3, #0
 800328a:	bf0c      	ite	eq
 800328c:	2301      	moveq	r3, #1
 800328e:	2300      	movne	r3, #0
 8003290:	b2db      	uxtb	r3, r3
 8003292:	e012      	b.n	80032ba <HAL_I2C_Init+0x176>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	1e58      	subs	r0, r3, #1
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6859      	ldr	r1, [r3, #4]
 800329c:	460b      	mov	r3, r1
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	440b      	add	r3, r1
 80032a2:	0099      	lsls	r1, r3, #2
 80032a4:	440b      	add	r3, r1
 80032a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80032aa:	3301      	adds	r3, #1
 80032ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	bf0c      	ite	eq
 80032b4:	2301      	moveq	r3, #1
 80032b6:	2300      	movne	r3, #0
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <HAL_I2C_Init+0x17e>
 80032be:	2301      	movs	r3, #1
 80032c0:	e022      	b.n	8003308 <HAL_I2C_Init+0x1c4>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d10e      	bne.n	80032e8 <HAL_I2C_Init+0x1a4>
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	1e58      	subs	r0, r3, #1
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6859      	ldr	r1, [r3, #4]
 80032d2:	460b      	mov	r3, r1
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	440b      	add	r3, r1
 80032d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80032dc:	3301      	adds	r3, #1
 80032de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032e6:	e00f      	b.n	8003308 <HAL_I2C_Init+0x1c4>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	1e58      	subs	r0, r3, #1
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6859      	ldr	r1, [r3, #4]
 80032f0:	460b      	mov	r3, r1
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	440b      	add	r3, r1
 80032f6:	0099      	lsls	r1, r3, #2
 80032f8:	440b      	add	r3, r1
 80032fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80032fe:	3301      	adds	r3, #1
 8003300:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003304:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003308:	6879      	ldr	r1, [r7, #4]
 800330a:	6809      	ldr	r1, [r1, #0]
 800330c:	4313      	orrs	r3, r2
 800330e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	69da      	ldr	r2, [r3, #28]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	431a      	orrs	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	430a      	orrs	r2, r1
 800332a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003336:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	6911      	ldr	r1, [r2, #16]
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	68d2      	ldr	r2, [r2, #12]
 8003342:	4311      	orrs	r1, r2
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	6812      	ldr	r2, [r2, #0]
 8003348:	430b      	orrs	r3, r1
 800334a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	695a      	ldr	r2, [r3, #20]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	431a      	orrs	r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	430a      	orrs	r2, r1
 8003366:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f042 0201 	orr.w	r2, r2, #1
 8003376:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2220      	movs	r2, #32
 8003382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3710      	adds	r7, #16
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	000186a0 	.word	0x000186a0
 80033a4:	001e847f 	.word	0x001e847f
 80033a8:	003d08ff 	.word	0x003d08ff
 80033ac:	431bde83 	.word	0x431bde83
 80033b0:	10624dd3 	.word	0x10624dd3

080033b4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80033b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033b6:	b08f      	sub	sp, #60	; 0x3c
 80033b8:	af0a      	add	r7, sp, #40	; 0x28
 80033ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e10f      	b.n	80035e6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d106      	bne.n	80033e6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f009 f807 	bl	800c3f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2203      	movs	r2, #3
 80033ea:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d102      	bne.n	8003400 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4618      	mov	r0, r3
 8003406:	f005 fdb8 	bl	8008f7a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	603b      	str	r3, [r7, #0]
 8003410:	687e      	ldr	r6, [r7, #4]
 8003412:	466d      	mov	r5, sp
 8003414:	f106 0410 	add.w	r4, r6, #16
 8003418:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800341a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800341c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800341e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003420:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003424:	e885 0003 	stmia.w	r5, {r0, r1}
 8003428:	1d33      	adds	r3, r6, #4
 800342a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800342c:	6838      	ldr	r0, [r7, #0]
 800342e:	f005 fc8f 	bl	8008d50 <USB_CoreInit>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d005      	beq.n	8003444 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2202      	movs	r2, #2
 800343c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e0d0      	b.n	80035e6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2100      	movs	r1, #0
 800344a:	4618      	mov	r0, r3
 800344c:	f005 fda6 	bl	8008f9c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003450:	2300      	movs	r3, #0
 8003452:	73fb      	strb	r3, [r7, #15]
 8003454:	e04a      	b.n	80034ec <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003456:	7bfa      	ldrb	r2, [r7, #15]
 8003458:	6879      	ldr	r1, [r7, #4]
 800345a:	4613      	mov	r3, r2
 800345c:	00db      	lsls	r3, r3, #3
 800345e:	1a9b      	subs	r3, r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	440b      	add	r3, r1
 8003464:	333d      	adds	r3, #61	; 0x3d
 8003466:	2201      	movs	r2, #1
 8003468:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800346a:	7bfa      	ldrb	r2, [r7, #15]
 800346c:	6879      	ldr	r1, [r7, #4]
 800346e:	4613      	mov	r3, r2
 8003470:	00db      	lsls	r3, r3, #3
 8003472:	1a9b      	subs	r3, r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	440b      	add	r3, r1
 8003478:	333c      	adds	r3, #60	; 0x3c
 800347a:	7bfa      	ldrb	r2, [r7, #15]
 800347c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800347e:	7bfa      	ldrb	r2, [r7, #15]
 8003480:	7bfb      	ldrb	r3, [r7, #15]
 8003482:	b298      	uxth	r0, r3
 8003484:	6879      	ldr	r1, [r7, #4]
 8003486:	4613      	mov	r3, r2
 8003488:	00db      	lsls	r3, r3, #3
 800348a:	1a9b      	subs	r3, r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	440b      	add	r3, r1
 8003490:	3342      	adds	r3, #66	; 0x42
 8003492:	4602      	mov	r2, r0
 8003494:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003496:	7bfa      	ldrb	r2, [r7, #15]
 8003498:	6879      	ldr	r1, [r7, #4]
 800349a:	4613      	mov	r3, r2
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	1a9b      	subs	r3, r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	440b      	add	r3, r1
 80034a4:	333f      	adds	r3, #63	; 0x3f
 80034a6:	2200      	movs	r2, #0
 80034a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80034aa:	7bfa      	ldrb	r2, [r7, #15]
 80034ac:	6879      	ldr	r1, [r7, #4]
 80034ae:	4613      	mov	r3, r2
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	1a9b      	subs	r3, r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	440b      	add	r3, r1
 80034b8:	3344      	adds	r3, #68	; 0x44
 80034ba:	2200      	movs	r2, #0
 80034bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80034be:	7bfa      	ldrb	r2, [r7, #15]
 80034c0:	6879      	ldr	r1, [r7, #4]
 80034c2:	4613      	mov	r3, r2
 80034c4:	00db      	lsls	r3, r3, #3
 80034c6:	1a9b      	subs	r3, r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	440b      	add	r3, r1
 80034cc:	3348      	adds	r3, #72	; 0x48
 80034ce:	2200      	movs	r2, #0
 80034d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80034d2:	7bfa      	ldrb	r2, [r7, #15]
 80034d4:	6879      	ldr	r1, [r7, #4]
 80034d6:	4613      	mov	r3, r2
 80034d8:	00db      	lsls	r3, r3, #3
 80034da:	1a9b      	subs	r3, r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	440b      	add	r3, r1
 80034e0:	3350      	adds	r3, #80	; 0x50
 80034e2:	2200      	movs	r2, #0
 80034e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034e6:	7bfb      	ldrb	r3, [r7, #15]
 80034e8:	3301      	adds	r3, #1
 80034ea:	73fb      	strb	r3, [r7, #15]
 80034ec:	7bfa      	ldrb	r2, [r7, #15]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d3af      	bcc.n	8003456 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034f6:	2300      	movs	r3, #0
 80034f8:	73fb      	strb	r3, [r7, #15]
 80034fa:	e044      	b.n	8003586 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80034fc:	7bfa      	ldrb	r2, [r7, #15]
 80034fe:	6879      	ldr	r1, [r7, #4]
 8003500:	4613      	mov	r3, r2
 8003502:	00db      	lsls	r3, r3, #3
 8003504:	1a9b      	subs	r3, r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	440b      	add	r3, r1
 800350a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800350e:	2200      	movs	r2, #0
 8003510:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003512:	7bfa      	ldrb	r2, [r7, #15]
 8003514:	6879      	ldr	r1, [r7, #4]
 8003516:	4613      	mov	r3, r2
 8003518:	00db      	lsls	r3, r3, #3
 800351a:	1a9b      	subs	r3, r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	440b      	add	r3, r1
 8003520:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003524:	7bfa      	ldrb	r2, [r7, #15]
 8003526:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003528:	7bfa      	ldrb	r2, [r7, #15]
 800352a:	6879      	ldr	r1, [r7, #4]
 800352c:	4613      	mov	r3, r2
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	1a9b      	subs	r3, r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	440b      	add	r3, r1
 8003536:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800353a:	2200      	movs	r2, #0
 800353c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800353e:	7bfa      	ldrb	r2, [r7, #15]
 8003540:	6879      	ldr	r1, [r7, #4]
 8003542:	4613      	mov	r3, r2
 8003544:	00db      	lsls	r3, r3, #3
 8003546:	1a9b      	subs	r3, r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	440b      	add	r3, r1
 800354c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003550:	2200      	movs	r2, #0
 8003552:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003554:	7bfa      	ldrb	r2, [r7, #15]
 8003556:	6879      	ldr	r1, [r7, #4]
 8003558:	4613      	mov	r3, r2
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	1a9b      	subs	r3, r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	440b      	add	r3, r1
 8003562:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003566:	2200      	movs	r2, #0
 8003568:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800356a:	7bfa      	ldrb	r2, [r7, #15]
 800356c:	6879      	ldr	r1, [r7, #4]
 800356e:	4613      	mov	r3, r2
 8003570:	00db      	lsls	r3, r3, #3
 8003572:	1a9b      	subs	r3, r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	440b      	add	r3, r1
 8003578:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003580:	7bfb      	ldrb	r3, [r7, #15]
 8003582:	3301      	adds	r3, #1
 8003584:	73fb      	strb	r3, [r7, #15]
 8003586:	7bfa      	ldrb	r2, [r7, #15]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	429a      	cmp	r2, r3
 800358e:	d3b5      	bcc.n	80034fc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	603b      	str	r3, [r7, #0]
 8003596:	687e      	ldr	r6, [r7, #4]
 8003598:	466d      	mov	r5, sp
 800359a:	f106 0410 	add.w	r4, r6, #16
 800359e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80035aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80035ae:	1d33      	adds	r3, r6, #4
 80035b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035b2:	6838      	ldr	r0, [r7, #0]
 80035b4:	f005 fd1c 	bl	8008ff0 <USB_DevInit>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d005      	beq.n	80035ca <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2202      	movs	r2, #2
 80035c2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e00d      	b.n	80035e6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4618      	mov	r0, r3
 80035e0:	f006 fd11 	bl	800a006 <USB_DevDisconnect>

  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3714      	adds	r7, #20
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080035ee <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b084      	sub	sp, #16
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003602:	2b01      	cmp	r3, #1
 8003604:	d101      	bne.n	800360a <HAL_PCD_Start+0x1c>
 8003606:	2302      	movs	r3, #2
 8003608:	e020      	b.n	800364c <HAL_PCD_Start+0x5e>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2201      	movs	r2, #1
 800360e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003616:	2b01      	cmp	r3, #1
 8003618:	d109      	bne.n	800362e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800361e:	2b01      	cmp	r3, #1
 8003620:	d005      	beq.n	800362e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003626:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4618      	mov	r0, r3
 8003634:	f006 fccf 	bl	8009fd6 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4618      	mov	r0, r3
 800363e:	f005 fc8b 	bl	8008f58 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3710      	adds	r7, #16
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003654:	b590      	push	{r4, r7, lr}
 8003656:	b08d      	sub	sp, #52	; 0x34
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003662:	6a3b      	ldr	r3, [r7, #32]
 8003664:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4618      	mov	r0, r3
 800366c:	f006 fd76 	bl	800a15c <USB_GetMode>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	f040 838e 	bne.w	8003d94 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4618      	mov	r0, r3
 800367e:	f006 fcda 	bl	800a036 <USB_ReadInterrupts>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	f000 8384 	beq.w	8003d92 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4618      	mov	r0, r3
 8003690:	f006 fcd1 	bl	800a036 <USB_ReadInterrupts>
 8003694:	4603      	mov	r3, r0
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b02      	cmp	r3, #2
 800369c:	d107      	bne.n	80036ae <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	695a      	ldr	r2, [r3, #20]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f002 0202 	and.w	r2, r2, #2
 80036ac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f006 fcbf 	bl	800a036 <USB_ReadInterrupts>
 80036b8:	4603      	mov	r3, r0
 80036ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036be:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80036c2:	d17b      	bne.n	80037bc <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 80036c4:	2300      	movs	r3, #0
 80036c6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4618      	mov	r0, r3
 80036ce:	f006 fcc5 	bl	800a05c <USB_ReadDevAllOutEpInterrupt>
 80036d2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80036d4:	e06f      	b.n	80037b6 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 80036d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d064      	beq.n	80037aa <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036e6:	b2d2      	uxtb	r2, r2
 80036e8:	4611      	mov	r1, r2
 80036ea:	4618      	mov	r0, r3
 80036ec:	f006 fcea 	bl	800a0c4 <USB_ReadDevOutEPInterrupt>
 80036f0:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00c      	beq.n	8003716 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80036fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fe:	015a      	lsls	r2, r3, #5
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	4413      	add	r3, r2
 8003704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003708:	461a      	mov	r2, r3
 800370a:	2301      	movs	r3, #1
 800370c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800370e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 fe0d 	bl	8004330 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	f003 0308 	and.w	r3, r3, #8
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00c      	beq.n	800373a <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003720:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 ff0c 	bl	8004540 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372a:	015a      	lsls	r2, r3, #5
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	4413      	add	r3, r2
 8003730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003734:	461a      	mov	r2, r3
 8003736:	2308      	movs	r3, #8
 8003738:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	f003 0310 	and.w	r3, r3, #16
 8003740:	2b00      	cmp	r3, #0
 8003742:	d008      	beq.n	8003756 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003746:	015a      	lsls	r2, r3, #5
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	4413      	add	r3, r2
 800374c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003750:	461a      	mov	r2, r3
 8003752:	2310      	movs	r3, #16
 8003754:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	f003 0320 	and.w	r3, r3, #32
 800375c:	2b00      	cmp	r3, #0
 800375e:	d015      	beq.n	800378c <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d108      	bne.n	800377a <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6818      	ldr	r0, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003772:	461a      	mov	r2, r3
 8003774:	2101      	movs	r1, #1
 8003776:	f006 fd35 	bl	800a1e4 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800377a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377c:	015a      	lsls	r2, r3, #5
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	4413      	add	r3, r2
 8003782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003786:	461a      	mov	r2, r3
 8003788:	2320      	movs	r3, #32
 800378a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d009      	beq.n	80037aa <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003798:	015a      	lsls	r2, r3, #5
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	4413      	add	r3, r2
 800379e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037a2:	461a      	mov	r2, r3
 80037a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80037a8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80037aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ac:	3301      	adds	r3, #1
 80037ae:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80037b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b2:	085b      	lsrs	r3, r3, #1
 80037b4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80037b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d18c      	bne.n	80036d6 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f006 fc38 	bl	800a036 <USB_ReadInterrupts>
 80037c6:	4603      	mov	r3, r0
 80037c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80037d0:	f040 80c4 	bne.w	800395c <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4618      	mov	r0, r3
 80037da:	f006 fc59 	bl	800a090 <USB_ReadDevAllInEpInterrupt>
 80037de:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80037e0:	2300      	movs	r3, #0
 80037e2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80037e4:	e0b6      	b.n	8003954 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80037e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e8:	f003 0301 	and.w	r3, r3, #1
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f000 80ab 	beq.w	8003948 <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037f8:	b2d2      	uxtb	r2, r2
 80037fa:	4611      	mov	r1, r2
 80037fc:	4618      	mov	r0, r3
 80037fe:	f006 fc7f 	bl	800a100 <USB_ReadDevInEPInterrupt>
 8003802:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	2b00      	cmp	r3, #0
 800380c:	d05b      	beq.n	80038c6 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800380e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003810:	f003 030f 	and.w	r3, r3, #15
 8003814:	2201      	movs	r2, #1
 8003816:	fa02 f303 	lsl.w	r3, r2, r3
 800381a:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003822:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	43db      	mvns	r3, r3
 8003828:	69f9      	ldr	r1, [r7, #28]
 800382a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800382e:	4013      	ands	r3, r2
 8003830:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003834:	015a      	lsls	r2, r3, #5
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	4413      	add	r3, r2
 800383a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800383e:	461a      	mov	r2, r3
 8003840:	2301      	movs	r3, #1
 8003842:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d11b      	bne.n	8003884 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800384c:	6879      	ldr	r1, [r7, #4]
 800384e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003850:	4613      	mov	r3, r2
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	1a9b      	subs	r3, r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	440b      	add	r3, r1
 800385a:	3348      	adds	r3, #72	; 0x48
 800385c:	6819      	ldr	r1, [r3, #0]
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003862:	4613      	mov	r3, r2
 8003864:	00db      	lsls	r3, r3, #3
 8003866:	1a9b      	subs	r3, r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	4403      	add	r3, r0
 800386c:	3344      	adds	r3, #68	; 0x44
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4419      	add	r1, r3
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003876:	4613      	mov	r3, r2
 8003878:	00db      	lsls	r3, r3, #3
 800387a:	1a9b      	subs	r3, r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	4403      	add	r3, r0
 8003880:	3348      	adds	r3, #72	; 0x48
 8003882:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003886:	b2db      	uxtb	r3, r3
 8003888:	4619      	mov	r1, r3
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f008 fe33 	bl	800c4f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d116      	bne.n	80038c6 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389a:	2b00      	cmp	r3, #0
 800389c:	d113      	bne.n	80038c6 <HAL_PCD_IRQHandler+0x272>
 800389e:	6879      	ldr	r1, [r7, #4]
 80038a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038a2:	4613      	mov	r3, r2
 80038a4:	00db      	lsls	r3, r3, #3
 80038a6:	1a9b      	subs	r3, r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	440b      	add	r3, r1
 80038ac:	3350      	adds	r3, #80	; 0x50
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d108      	bne.n	80038c6 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6818      	ldr	r0, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80038be:	461a      	mov	r2, r3
 80038c0:	2101      	movs	r1, #1
 80038c2:	f006 fc8f 	bl	800a1e4 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	f003 0308 	and.w	r3, r3, #8
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d008      	beq.n	80038e2 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80038d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d2:	015a      	lsls	r2, r3, #5
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	4413      	add	r3, r2
 80038d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038dc:	461a      	mov	r2, r3
 80038de:	2308      	movs	r3, #8
 80038e0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	f003 0310 	and.w	r3, r3, #16
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d008      	beq.n	80038fe <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80038ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ee:	015a      	lsls	r2, r3, #5
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	4413      	add	r3, r2
 80038f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038f8:	461a      	mov	r2, r3
 80038fa:	2310      	movs	r3, #16
 80038fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003904:	2b00      	cmp	r3, #0
 8003906:	d008      	beq.n	800391a <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390a:	015a      	lsls	r2, r3, #5
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	4413      	add	r3, r2
 8003910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003914:	461a      	mov	r2, r3
 8003916:	2340      	movs	r3, #64	; 0x40
 8003918:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	f003 0302 	and.w	r3, r3, #2
 8003920:	2b00      	cmp	r3, #0
 8003922:	d008      	beq.n	8003936 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003926:	015a      	lsls	r2, r3, #5
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	4413      	add	r3, r2
 800392c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003930:	461a      	mov	r2, r3
 8003932:	2302      	movs	r3, #2
 8003934:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800393c:	2b00      	cmp	r3, #0
 800393e:	d003      	beq.n	8003948 <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003940:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 fc67 	bl	8004216 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394a:	3301      	adds	r3, #1
 800394c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800394e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003950:	085b      	lsrs	r3, r3, #1
 8003952:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003956:	2b00      	cmp	r3, #0
 8003958:	f47f af45 	bne.w	80037e6 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4618      	mov	r0, r3
 8003962:	f006 fb68 	bl	800a036 <USB_ReadInterrupts>
 8003966:	4603      	mov	r3, r0
 8003968:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800396c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003970:	d122      	bne.n	80039b8 <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	69fa      	ldr	r2, [r7, #28]
 800397c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003980:	f023 0301 	bic.w	r3, r3, #1
 8003984:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800398c:	2b01      	cmp	r3, #1
 800398e:	d108      	bne.n	80039a2 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003998:	2100      	movs	r1, #0
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 fe88 	bl	80046b0 <HAL_PCDEx_LPM_Callback>
 80039a0:	e002      	b.n	80039a8 <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f008 fe1e 	bl	800c5e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	695a      	ldr	r2, [r3, #20]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80039b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4618      	mov	r0, r3
 80039be:	f006 fb3a 	bl	800a036 <USB_ReadInterrupts>
 80039c2:	4603      	mov	r3, r0
 80039c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039cc:	d112      	bne.n	80039f4 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d102      	bne.n	80039e4 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f008 fdda 	bl	800c598 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	695a      	ldr	r2, [r3, #20]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80039f2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4618      	mov	r0, r3
 80039fa:	f006 fb1c 	bl	800a036 <USB_ReadInterrupts>
 80039fe:	4603      	mov	r3, r0
 8003a00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a08:	f040 80a7 	bne.w	8003b5a <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	69fa      	ldr	r2, [r7, #28]
 8003a16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a1a:	f023 0301 	bic.w	r3, r3, #1
 8003a1e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2110      	movs	r1, #16
 8003a26:	4618      	mov	r0, r3
 8003a28:	f005 fc54 	bl	80092d4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a30:	e036      	b.n	8003aa0 <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a34:	015a      	lsls	r2, r3, #5
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	4413      	add	r3, r2
 8003a3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a3e:	461a      	mov	r2, r3
 8003a40:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a44:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a48:	015a      	lsls	r2, r3, #5
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a56:	0151      	lsls	r1, r2, #5
 8003a58:	69fa      	ldr	r2, [r7, #28]
 8003a5a:	440a      	add	r2, r1
 8003a5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a60:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003a64:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a68:	015a      	lsls	r2, r3, #5
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a72:	461a      	mov	r2, r3
 8003a74:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a78:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a7c:	015a      	lsls	r2, r3, #5
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	4413      	add	r3, r2
 8003a82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a8a:	0151      	lsls	r1, r2, #5
 8003a8c:	69fa      	ldr	r2, [r7, #28]
 8003a8e:	440a      	add	r2, r1
 8003a90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a94:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003a98:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d3c3      	bcc.n	8003a32 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ab0:	69db      	ldr	r3, [r3, #28]
 8003ab2:	69fa      	ldr	r2, [r7, #28]
 8003ab4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ab8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003abc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d016      	beq.n	8003af4 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003acc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ad0:	69fa      	ldr	r2, [r7, #28]
 8003ad2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ad6:	f043 030b 	orr.w	r3, r3, #11
 8003ada:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae6:	69fa      	ldr	r2, [r7, #28]
 8003ae8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003aec:	f043 030b 	orr.w	r3, r3, #11
 8003af0:	6453      	str	r3, [r2, #68]	; 0x44
 8003af2:	e015      	b.n	8003b20 <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003afa:	695b      	ldr	r3, [r3, #20]
 8003afc:	69fa      	ldr	r2, [r7, #28]
 8003afe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b02:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003b06:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003b0a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	69fa      	ldr	r2, [r7, #28]
 8003b16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b1a:	f043 030b 	orr.w	r3, r3, #11
 8003b1e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	69fa      	ldr	r2, [r7, #28]
 8003b2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b2e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003b32:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6818      	ldr	r0, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003b44:	461a      	mov	r2, r3
 8003b46:	f006 fb4d 	bl	800a1e4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	695a      	ldr	r2, [r3, #20]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003b58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f006 fa69 	bl	800a036 <USB_ReadInterrupts>
 8003b64:	4603      	mov	r3, r0
 8003b66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b6e:	d124      	bne.n	8003bba <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4618      	mov	r0, r3
 8003b76:	f006 faff 	bl	800a178 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f005 fc09 	bl	8009396 <USB_GetDevSpeed>
 8003b84:	4603      	mov	r3, r0
 8003b86:	461a      	mov	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681c      	ldr	r4, [r3, #0]
 8003b90:	f001 f9a2 	bl	8004ed8 <HAL_RCC_GetHCLKFreq>
 8003b94:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	4620      	mov	r0, r4
 8003ba0:	f005 f938 	bl	8008e14 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f008 fcce 	bl	800c546 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	695a      	ldr	r2, [r3, #20]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003bb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f006 fa39 	bl	800a036 <USB_ReadInterrupts>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	f003 0310 	and.w	r3, r3, #16
 8003bca:	2b10      	cmp	r3, #16
 8003bcc:	d161      	bne.n	8003c92 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	699a      	ldr	r2, [r3, #24]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f022 0210 	bic.w	r2, r2, #16
 8003bdc:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003bde:	6a3b      	ldr	r3, [r7, #32]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	f003 020f 	and.w	r2, r3, #15
 8003bea:	4613      	mov	r3, r2
 8003bec:	00db      	lsls	r3, r3, #3
 8003bee:	1a9b      	subs	r3, r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	3304      	adds	r3, #4
 8003bfc:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	0c5b      	lsrs	r3, r3, #17
 8003c02:	f003 030f 	and.w	r3, r3, #15
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d124      	bne.n	8003c54 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003c10:	4013      	ands	r3, r2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d035      	beq.n	8003c82 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	091b      	lsrs	r3, r3, #4
 8003c1e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003c20:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	461a      	mov	r2, r3
 8003c28:	6a38      	ldr	r0, [r7, #32]
 8003c2a:	f006 f8b1 	bl	8009d90 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	68da      	ldr	r2, [r3, #12]
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	091b      	lsrs	r3, r3, #4
 8003c36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c3a:	441a      	add	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	699a      	ldr	r2, [r3, #24]
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	091b      	lsrs	r3, r3, #4
 8003c48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c4c:	441a      	add	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	619a      	str	r2, [r3, #24]
 8003c52:	e016      	b.n	8003c82 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	0c5b      	lsrs	r3, r3, #17
 8003c58:	f003 030f 	and.w	r3, r3, #15
 8003c5c:	2b06      	cmp	r3, #6
 8003c5e:	d110      	bne.n	8003c82 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003c66:	2208      	movs	r2, #8
 8003c68:	4619      	mov	r1, r3
 8003c6a:	6a38      	ldr	r0, [r7, #32]
 8003c6c:	f006 f890 	bl	8009d90 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	699a      	ldr	r2, [r3, #24]
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	091b      	lsrs	r3, r3, #4
 8003c78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c7c:	441a      	add	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	699a      	ldr	r2, [r3, #24]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f042 0210 	orr.w	r2, r2, #16
 8003c90:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f006 f9cd 	bl	800a036 <USB_ReadInterrupts>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	f003 0308 	and.w	r3, r3, #8
 8003ca2:	2b08      	cmp	r3, #8
 8003ca4:	d10a      	bne.n	8003cbc <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f008 fc3f 	bl	800c52a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	695a      	ldr	r2, [r3, #20]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f002 0208 	and.w	r2, r2, #8
 8003cba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f006 f9b8 	bl	800a036 <USB_ReadInterrupts>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ccc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cd0:	d10f      	bne.n	8003cf2 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	4619      	mov	r1, r3
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f008 fca1 	bl	800c624 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	695a      	ldr	r2, [r3, #20]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003cf0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f006 f99d 	bl	800a036 <USB_ReadInterrupts>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d06:	d10f      	bne.n	8003d28 <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	4619      	mov	r1, r3
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f008 fc74 	bl	800c600 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	695a      	ldr	r2, [r3, #20]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003d26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f006 f982 	bl	800a036 <USB_ReadInterrupts>
 8003d32:	4603      	mov	r3, r0
 8003d34:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003d38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d3c:	d10a      	bne.n	8003d54 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f008 fc82 	bl	800c648 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	695a      	ldr	r2, [r3, #20]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003d52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f006 f96c 	bl	800a036 <USB_ReadInterrupts>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	f003 0304 	and.w	r3, r3, #4
 8003d64:	2b04      	cmp	r3, #4
 8003d66:	d115      	bne.n	8003d94 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	f003 0304 	and.w	r3, r3, #4
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d002      	beq.n	8003d80 <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f008 fc72 	bl	800c664 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	6859      	ldr	r1, [r3, #4]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	605a      	str	r2, [r3, #4]
 8003d90:	e000      	b.n	8003d94 <HAL_PCD_IRQHandler+0x740>
      return;
 8003d92:	bf00      	nop
    }
  }
}
 8003d94:	3734      	adds	r7, #52	; 0x34
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd90      	pop	{r4, r7, pc}

08003d9a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003d9a:	b580      	push	{r7, lr}
 8003d9c:	b082      	sub	sp, #8
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
 8003da2:	460b      	mov	r3, r1
 8003da4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d101      	bne.n	8003db4 <HAL_PCD_SetAddress+0x1a>
 8003db0:	2302      	movs	r3, #2
 8003db2:	e013      	b.n	8003ddc <HAL_PCD_SetAddress+0x42>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	78fa      	ldrb	r2, [r7, #3]
 8003dc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	78fa      	ldrb	r2, [r7, #3]
 8003dca:	4611      	mov	r1, r2
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f006 f8dc 	bl	8009f8a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3708      	adds	r7, #8
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	4608      	mov	r0, r1
 8003dee:	4611      	mov	r1, r2
 8003df0:	461a      	mov	r2, r3
 8003df2:	4603      	mov	r3, r0
 8003df4:	70fb      	strb	r3, [r7, #3]
 8003df6:	460b      	mov	r3, r1
 8003df8:	803b      	strh	r3, [r7, #0]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	da0f      	bge.n	8003e2a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e0a:	78fb      	ldrb	r3, [r7, #3]
 8003e0c:	f003 020f 	and.w	r2, r3, #15
 8003e10:	4613      	mov	r3, r2
 8003e12:	00db      	lsls	r3, r3, #3
 8003e14:	1a9b      	subs	r3, r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	3338      	adds	r3, #56	; 0x38
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	3304      	adds	r3, #4
 8003e20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2201      	movs	r2, #1
 8003e26:	705a      	strb	r2, [r3, #1]
 8003e28:	e00f      	b.n	8003e4a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e2a:	78fb      	ldrb	r3, [r7, #3]
 8003e2c:	f003 020f 	and.w	r2, r3, #15
 8003e30:	4613      	mov	r3, r2
 8003e32:	00db      	lsls	r3, r3, #3
 8003e34:	1a9b      	subs	r3, r3, r2
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	4413      	add	r3, r2
 8003e40:	3304      	adds	r3, #4
 8003e42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003e4a:	78fb      	ldrb	r3, [r7, #3]
 8003e4c:	f003 030f 	and.w	r3, r3, #15
 8003e50:	b2da      	uxtb	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003e56:	883a      	ldrh	r2, [r7, #0]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	78ba      	ldrb	r2, [r7, #2]
 8003e60:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	785b      	ldrb	r3, [r3, #1]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d004      	beq.n	8003e74 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	b29a      	uxth	r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003e74:	78bb      	ldrb	r3, [r7, #2]
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d102      	bne.n	8003e80 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d101      	bne.n	8003e8e <HAL_PCD_EP_Open+0xaa>
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	e00e      	b.n	8003eac <HAL_PCD_EP_Open+0xc8>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2201      	movs	r2, #1
 8003e92:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68f9      	ldr	r1, [r7, #12]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f005 fa9f 	bl	80093e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003eaa:	7afb      	ldrb	r3, [r7, #11]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3710      	adds	r7, #16
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ec0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	da0f      	bge.n	8003ee8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ec8:	78fb      	ldrb	r3, [r7, #3]
 8003eca:	f003 020f 	and.w	r2, r3, #15
 8003ece:	4613      	mov	r3, r2
 8003ed0:	00db      	lsls	r3, r3, #3
 8003ed2:	1a9b      	subs	r3, r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	3338      	adds	r3, #56	; 0x38
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	4413      	add	r3, r2
 8003edc:	3304      	adds	r3, #4
 8003ede:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	705a      	strb	r2, [r3, #1]
 8003ee6:	e00f      	b.n	8003f08 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ee8:	78fb      	ldrb	r3, [r7, #3]
 8003eea:	f003 020f 	and.w	r2, r3, #15
 8003eee:	4613      	mov	r3, r2
 8003ef0:	00db      	lsls	r3, r3, #3
 8003ef2:	1a9b      	subs	r3, r3, r2
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	4413      	add	r3, r2
 8003efe:	3304      	adds	r3, #4
 8003f00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2200      	movs	r2, #0
 8003f06:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003f08:	78fb      	ldrb	r3, [r7, #3]
 8003f0a:	f003 030f 	and.w	r3, r3, #15
 8003f0e:	b2da      	uxtb	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d101      	bne.n	8003f22 <HAL_PCD_EP_Close+0x6e>
 8003f1e:	2302      	movs	r3, #2
 8003f20:	e00e      	b.n	8003f40 <HAL_PCD_EP_Close+0x8c>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68f9      	ldr	r1, [r7, #12]
 8003f30:	4618      	mov	r0, r3
 8003f32:	f005 fadd 	bl	80094f0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3710      	adds	r7, #16
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	607a      	str	r2, [r7, #4]
 8003f52:	603b      	str	r3, [r7, #0]
 8003f54:	460b      	mov	r3, r1
 8003f56:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f58:	7afb      	ldrb	r3, [r7, #11]
 8003f5a:	f003 020f 	and.w	r2, r3, #15
 8003f5e:	4613      	mov	r3, r2
 8003f60:	00db      	lsls	r3, r3, #3
 8003f62:	1a9b      	subs	r3, r3, r2
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	3304      	adds	r3, #4
 8003f70:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	683a      	ldr	r2, [r7, #0]
 8003f7c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	2200      	movs	r2, #0
 8003f82:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	2200      	movs	r2, #0
 8003f88:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f8a:	7afb      	ldrb	r3, [r7, #11]
 8003f8c:	f003 030f 	and.w	r3, r3, #15
 8003f90:	b2da      	uxtb	r2, r3
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d102      	bne.n	8003fa4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003fa4:	7afb      	ldrb	r3, [r7, #11]
 8003fa6:	f003 030f 	and.w	r3, r3, #15
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d109      	bne.n	8003fc2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6818      	ldr	r0, [r3, #0]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	461a      	mov	r2, r3
 8003fba:	6979      	ldr	r1, [r7, #20]
 8003fbc:	f005 fd60 	bl	8009a80 <USB_EP0StartXfer>
 8003fc0:	e008      	b.n	8003fd4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6818      	ldr	r0, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	461a      	mov	r2, r3
 8003fce:	6979      	ldr	r1, [r7, #20]
 8003fd0:	f005 fb12 	bl	80095f8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3718      	adds	r7, #24
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003fde:	b480      	push	{r7}
 8003fe0:	b083      	sub	sp, #12
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003fea:	78fb      	ldrb	r3, [r7, #3]
 8003fec:	f003 020f 	and.w	r2, r3, #15
 8003ff0:	6879      	ldr	r1, [r7, #4]
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	00db      	lsls	r3, r3, #3
 8003ff6:	1a9b      	subs	r3, r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	440b      	add	r3, r1
 8003ffc:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004000:	681b      	ldr	r3, [r3, #0]
}
 8004002:	4618      	mov	r0, r3
 8004004:	370c      	adds	r7, #12
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr

0800400e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800400e:	b580      	push	{r7, lr}
 8004010:	b086      	sub	sp, #24
 8004012:	af00      	add	r7, sp, #0
 8004014:	60f8      	str	r0, [r7, #12]
 8004016:	607a      	str	r2, [r7, #4]
 8004018:	603b      	str	r3, [r7, #0]
 800401a:	460b      	mov	r3, r1
 800401c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800401e:	7afb      	ldrb	r3, [r7, #11]
 8004020:	f003 020f 	and.w	r2, r3, #15
 8004024:	4613      	mov	r3, r2
 8004026:	00db      	lsls	r3, r3, #3
 8004028:	1a9b      	subs	r3, r3, r2
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	3338      	adds	r3, #56	; 0x38
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	4413      	add	r3, r2
 8004032:	3304      	adds	r3, #4
 8004034:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	2200      	movs	r2, #0
 8004046:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	2201      	movs	r2, #1
 800404c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800404e:	7afb      	ldrb	r3, [r7, #11]
 8004050:	f003 030f 	and.w	r3, r3, #15
 8004054:	b2da      	uxtb	r2, r3
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	2b01      	cmp	r3, #1
 8004060:	d102      	bne.n	8004068 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004068:	7afb      	ldrb	r3, [r7, #11]
 800406a:	f003 030f 	and.w	r3, r3, #15
 800406e:	2b00      	cmp	r3, #0
 8004070:	d109      	bne.n	8004086 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6818      	ldr	r0, [r3, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	b2db      	uxtb	r3, r3
 800407c:	461a      	mov	r2, r3
 800407e:	6979      	ldr	r1, [r7, #20]
 8004080:	f005 fcfe 	bl	8009a80 <USB_EP0StartXfer>
 8004084:	e008      	b.n	8004098 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6818      	ldr	r0, [r3, #0]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	b2db      	uxtb	r3, r3
 8004090:	461a      	mov	r2, r3
 8004092:	6979      	ldr	r1, [r7, #20]
 8004094:	f005 fab0 	bl	80095f8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3718      	adds	r7, #24
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b084      	sub	sp, #16
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
 80040aa:	460b      	mov	r3, r1
 80040ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80040ae:	78fb      	ldrb	r3, [r7, #3]
 80040b0:	f003 020f 	and.w	r2, r3, #15
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d901      	bls.n	80040c0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e050      	b.n	8004162 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80040c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	da0f      	bge.n	80040e8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040c8:	78fb      	ldrb	r3, [r7, #3]
 80040ca:	f003 020f 	and.w	r2, r3, #15
 80040ce:	4613      	mov	r3, r2
 80040d0:	00db      	lsls	r3, r3, #3
 80040d2:	1a9b      	subs	r3, r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	3338      	adds	r3, #56	; 0x38
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	4413      	add	r3, r2
 80040dc:	3304      	adds	r3, #4
 80040de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2201      	movs	r2, #1
 80040e4:	705a      	strb	r2, [r3, #1]
 80040e6:	e00d      	b.n	8004104 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80040e8:	78fa      	ldrb	r2, [r7, #3]
 80040ea:	4613      	mov	r3, r2
 80040ec:	00db      	lsls	r3, r3, #3
 80040ee:	1a9b      	subs	r3, r3, r2
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	4413      	add	r3, r2
 80040fa:	3304      	adds	r3, #4
 80040fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2201      	movs	r2, #1
 8004108:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800410a:	78fb      	ldrb	r3, [r7, #3]
 800410c:	f003 030f 	and.w	r3, r3, #15
 8004110:	b2da      	uxtb	r2, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800411c:	2b01      	cmp	r3, #1
 800411e:	d101      	bne.n	8004124 <HAL_PCD_EP_SetStall+0x82>
 8004120:	2302      	movs	r3, #2
 8004122:	e01e      	b.n	8004162 <HAL_PCD_EP_SetStall+0xc0>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68f9      	ldr	r1, [r7, #12]
 8004132:	4618      	mov	r0, r3
 8004134:	f005 fe55 	bl	8009de2 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004138:	78fb      	ldrb	r3, [r7, #3]
 800413a:	f003 030f 	and.w	r3, r3, #15
 800413e:	2b00      	cmp	r3, #0
 8004140:	d10a      	bne.n	8004158 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6818      	ldr	r0, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	b2d9      	uxtb	r1, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004152:	461a      	mov	r2, r3
 8004154:	f006 f846 	bl	800a1e4 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3710      	adds	r7, #16
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}

0800416a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800416a:	b580      	push	{r7, lr}
 800416c:	b084      	sub	sp, #16
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
 8004172:	460b      	mov	r3, r1
 8004174:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004176:	78fb      	ldrb	r3, [r7, #3]
 8004178:	f003 020f 	and.w	r2, r3, #15
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	429a      	cmp	r2, r3
 8004182:	d901      	bls.n	8004188 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e042      	b.n	800420e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004188:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800418c:	2b00      	cmp	r3, #0
 800418e:	da0f      	bge.n	80041b0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004190:	78fb      	ldrb	r3, [r7, #3]
 8004192:	f003 020f 	and.w	r2, r3, #15
 8004196:	4613      	mov	r3, r2
 8004198:	00db      	lsls	r3, r3, #3
 800419a:	1a9b      	subs	r3, r3, r2
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	3338      	adds	r3, #56	; 0x38
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	4413      	add	r3, r2
 80041a4:	3304      	adds	r3, #4
 80041a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2201      	movs	r2, #1
 80041ac:	705a      	strb	r2, [r3, #1]
 80041ae:	e00f      	b.n	80041d0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041b0:	78fb      	ldrb	r3, [r7, #3]
 80041b2:	f003 020f 	and.w	r2, r3, #15
 80041b6:	4613      	mov	r3, r2
 80041b8:	00db      	lsls	r3, r3, #3
 80041ba:	1a9b      	subs	r3, r3, r2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	4413      	add	r3, r2
 80041c6:	3304      	adds	r3, #4
 80041c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2200      	movs	r2, #0
 80041ce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2200      	movs	r2, #0
 80041d4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041d6:	78fb      	ldrb	r3, [r7, #3]
 80041d8:	f003 030f 	and.w	r3, r3, #15
 80041dc:	b2da      	uxtb	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d101      	bne.n	80041f0 <HAL_PCD_EP_ClrStall+0x86>
 80041ec:	2302      	movs	r3, #2
 80041ee:	e00e      	b.n	800420e <HAL_PCD_EP_ClrStall+0xa4>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68f9      	ldr	r1, [r7, #12]
 80041fe:	4618      	mov	r0, r3
 8004200:	f005 fe5d 	bl	8009ebe <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}

08004216 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004216:	b580      	push	{r7, lr}
 8004218:	b08a      	sub	sp, #40	; 0x28
 800421a:	af02      	add	r7, sp, #8
 800421c:	6078      	str	r0, [r7, #4]
 800421e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800422a:	683a      	ldr	r2, [r7, #0]
 800422c:	4613      	mov	r3, r2
 800422e:	00db      	lsls	r3, r3, #3
 8004230:	1a9b      	subs	r3, r3, r2
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	3338      	adds	r3, #56	; 0x38
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	4413      	add	r3, r2
 800423a:	3304      	adds	r3, #4
 800423c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	699a      	ldr	r2, [r3, #24]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	429a      	cmp	r2, r3
 8004248:	d901      	bls.n	800424e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e06c      	b.n	8004328 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	695a      	ldr	r2, [r3, #20]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	69fa      	ldr	r2, [r7, #28]
 8004260:	429a      	cmp	r2, r3
 8004262:	d902      	bls.n	800426a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	3303      	adds	r3, #3
 800426e:	089b      	lsrs	r3, r3, #2
 8004270:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004272:	e02b      	b.n	80042cc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	695a      	ldr	r2, [r3, #20]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	69fa      	ldr	r2, [r7, #28]
 8004286:	429a      	cmp	r2, r3
 8004288:	d902      	bls.n	8004290 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	3303      	adds	r3, #3
 8004294:	089b      	lsrs	r3, r3, #2
 8004296:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	68d9      	ldr	r1, [r3, #12]
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	b2da      	uxtb	r2, r3
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	9300      	str	r3, [sp, #0]
 80042ac:	4603      	mov	r3, r0
 80042ae:	6978      	ldr	r0, [r7, #20]
 80042b0:	f005 fd39 	bl	8009d26 <USB_WritePacket>

    ep->xfer_buff  += len;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	68da      	ldr	r2, [r3, #12]
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	441a      	add	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	699a      	ldr	r2, [r3, #24]
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	441a      	add	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	015a      	lsls	r2, r3, #5
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	4413      	add	r3, r2
 80042d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	b29b      	uxth	r3, r3
 80042dc:	69ba      	ldr	r2, [r7, #24]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d809      	bhi.n	80042f6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	699a      	ldr	r2, [r3, #24]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d203      	bcs.n	80042f6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1be      	bne.n	8004274 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	695a      	ldr	r2, [r3, #20]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d811      	bhi.n	8004326 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	f003 030f 	and.w	r3, r3, #15
 8004308:	2201      	movs	r2, #1
 800430a:	fa02 f303 	lsl.w	r3, r2, r3
 800430e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004316:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	43db      	mvns	r3, r3
 800431c:	6939      	ldr	r1, [r7, #16]
 800431e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004322:	4013      	ands	r3, r2
 8004324:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	3720      	adds	r7, #32
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	333c      	adds	r3, #60	; 0x3c
 8004348:	3304      	adds	r3, #4
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	015a      	lsls	r2, r3, #5
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	4413      	add	r3, r2
 8004356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	2b01      	cmp	r3, #1
 8004364:	f040 80b3 	bne.w	80044ce <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	f003 0308 	and.w	r3, r3, #8
 800436e:	2b00      	cmp	r3, #0
 8004370:	d028      	beq.n	80043c4 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	4a70      	ldr	r2, [pc, #448]	; (8004538 <PCD_EP_OutXfrComplete_int+0x208>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d90e      	bls.n	8004398 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004380:	2b00      	cmp	r3, #0
 8004382:	d009      	beq.n	8004398 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	015a      	lsls	r2, r3, #5
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	4413      	add	r3, r2
 800438c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004390:	461a      	mov	r2, r3
 8004392:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004396:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f008 f87f 	bl	800c49c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6818      	ldr	r0, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80043a8:	461a      	mov	r2, r3
 80043aa:	2101      	movs	r1, #1
 80043ac:	f005 ff1a 	bl	800a1e4 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	015a      	lsls	r2, r3, #5
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	4413      	add	r3, r2
 80043b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043bc:	461a      	mov	r2, r3
 80043be:	2308      	movs	r3, #8
 80043c0:	6093      	str	r3, [r2, #8]
 80043c2:	e0b3      	b.n	800452c <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	f003 0320 	and.w	r3, r3, #32
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d009      	beq.n	80043e2 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	015a      	lsls	r2, r3, #5
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	4413      	add	r3, r2
 80043d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043da:	461a      	mov	r2, r3
 80043dc:	2320      	movs	r3, #32
 80043de:	6093      	str	r3, [r2, #8]
 80043e0:	e0a4      	b.n	800452c <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f040 809f 	bne.w	800452c <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	4a51      	ldr	r2, [pc, #324]	; (8004538 <PCD_EP_OutXfrComplete_int+0x208>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d90f      	bls.n	8004416 <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00a      	beq.n	8004416 <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	015a      	lsls	r2, r3, #5
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	4413      	add	r3, r2
 8004408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800440c:	461a      	mov	r2, r3
 800440e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004412:	6093      	str	r3, [r2, #8]
 8004414:	e08a      	b.n	800452c <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004416:	6879      	ldr	r1, [r7, #4]
 8004418:	683a      	ldr	r2, [r7, #0]
 800441a:	4613      	mov	r3, r2
 800441c:	00db      	lsls	r3, r3, #3
 800441e:	1a9b      	subs	r3, r3, r2
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	440b      	add	r3, r1
 8004424:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004428:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	0159      	lsls	r1, r3, #5
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	440b      	add	r3, r1
 8004432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800443c:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	683a      	ldr	r2, [r7, #0]
 8004442:	4613      	mov	r3, r2
 8004444:	00db      	lsls	r3, r3, #3
 8004446:	1a9b      	subs	r3, r3, r2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	4403      	add	r3, r0
 800444c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004450:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004452:	6879      	ldr	r1, [r7, #4]
 8004454:	683a      	ldr	r2, [r7, #0]
 8004456:	4613      	mov	r3, r2
 8004458:	00db      	lsls	r3, r3, #3
 800445a:	1a9b      	subs	r3, r3, r2
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	440b      	add	r3, r1
 8004460:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004464:	6819      	ldr	r1, [r3, #0]
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	683a      	ldr	r2, [r7, #0]
 800446a:	4613      	mov	r3, r2
 800446c:	00db      	lsls	r3, r3, #3
 800446e:	1a9b      	subs	r3, r3, r2
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	4403      	add	r3, r0
 8004474:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4419      	add	r1, r3
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	683a      	ldr	r2, [r7, #0]
 8004480:	4613      	mov	r3, r2
 8004482:	00db      	lsls	r3, r3, #3
 8004484:	1a9b      	subs	r3, r3, r2
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	4403      	add	r3, r0
 800448a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800448e:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	b2db      	uxtb	r3, r3
 8004494:	4619      	mov	r1, r3
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f008 f812 	bl	800c4c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d144      	bne.n	800452c <PCD_EP_OutXfrComplete_int+0x1fc>
 80044a2:	6879      	ldr	r1, [r7, #4]
 80044a4:	683a      	ldr	r2, [r7, #0]
 80044a6:	4613      	mov	r3, r2
 80044a8:	00db      	lsls	r3, r3, #3
 80044aa:	1a9b      	subs	r3, r3, r2
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	440b      	add	r3, r1
 80044b0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d138      	bne.n	800452c <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6818      	ldr	r0, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80044c4:	461a      	mov	r2, r3
 80044c6:	2101      	movs	r1, #1
 80044c8:	f005 fe8c 	bl	800a1e4 <USB_EP0_OutStart>
 80044cc:	e02e      	b.n	800452c <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	4a1a      	ldr	r2, [pc, #104]	; (800453c <PCD_EP_OutXfrComplete_int+0x20c>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d124      	bne.n	8004520 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d00a      	beq.n	80044f6 <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	015a      	lsls	r2, r3, #5
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	4413      	add	r3, r2
 80044e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ec:	461a      	mov	r2, r3
 80044ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044f2:	6093      	str	r3, [r2, #8]
 80044f4:	e01a      	b.n	800452c <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	f003 0320 	and.w	r3, r3, #32
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d008      	beq.n	8004512 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	015a      	lsls	r2, r3, #5
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	4413      	add	r3, r2
 8004508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800450c:	461a      	mov	r2, r3
 800450e:	2320      	movs	r3, #32
 8004510:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	b2db      	uxtb	r3, r3
 8004516:	4619      	mov	r1, r3
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f007 ffd1 	bl	800c4c0 <HAL_PCD_DataOutStageCallback>
 800451e:	e005      	b.n	800452c <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	b2db      	uxtb	r3, r3
 8004524:	4619      	mov	r1, r3
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f007 ffca 	bl	800c4c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3718      	adds	r7, #24
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	4f54300a 	.word	0x4f54300a
 800453c:	4f54310a 	.word	0x4f54310a

08004540 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b086      	sub	sp, #24
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	333c      	adds	r3, #60	; 0x3c
 8004558:	3304      	adds	r3, #4
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	015a      	lsls	r2, r3, #5
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	4413      	add	r3, r2
 8004566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	2b01      	cmp	r3, #1
 8004574:	d113      	bne.n	800459e <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	4a1f      	ldr	r2, [pc, #124]	; (80045f8 <PCD_EP_OutSetupPacket_int+0xb8>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d922      	bls.n	80045c4 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004584:	2b00      	cmp	r3, #0
 8004586:	d01d      	beq.n	80045c4 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	015a      	lsls	r2, r3, #5
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	4413      	add	r3, r2
 8004590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004594:	461a      	mov	r2, r3
 8004596:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800459a:	6093      	str	r3, [r2, #8]
 800459c:	e012      	b.n	80045c4 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	4a16      	ldr	r2, [pc, #88]	; (80045fc <PCD_EP_OutSetupPacket_int+0xbc>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d10e      	bne.n	80045c4 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d009      	beq.n	80045c4 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	015a      	lsls	r2, r3, #5
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	4413      	add	r3, r2
 80045b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045bc:	461a      	mov	r2, r3
 80045be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045c2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f007 ff69 	bl	800c49c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	4a0a      	ldr	r2, [pc, #40]	; (80045f8 <PCD_EP_OutSetupPacket_int+0xb8>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d90c      	bls.n	80045ec <PCD_EP_OutSetupPacket_int+0xac>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d108      	bne.n	80045ec <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6818      	ldr	r0, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80045e4:	461a      	mov	r2, r3
 80045e6:	2101      	movs	r1, #1
 80045e8:	f005 fdfc 	bl	800a1e4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3718      	adds	r7, #24
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	4f54300a 	.word	0x4f54300a
 80045fc:	4f54310a 	.word	0x4f54310a

08004600 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	460b      	mov	r3, r1
 800460a:	70fb      	strb	r3, [r7, #3]
 800460c:	4613      	mov	r3, r2
 800460e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004616:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004618:	78fb      	ldrb	r3, [r7, #3]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d107      	bne.n	800462e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800461e:	883b      	ldrh	r3, [r7, #0]
 8004620:	0419      	lsls	r1, r3, #16
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68ba      	ldr	r2, [r7, #8]
 8004628:	430a      	orrs	r2, r1
 800462a:	629a      	str	r2, [r3, #40]	; 0x28
 800462c:	e028      	b.n	8004680 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004634:	0c1b      	lsrs	r3, r3, #16
 8004636:	68ba      	ldr	r2, [r7, #8]
 8004638:	4413      	add	r3, r2
 800463a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800463c:	2300      	movs	r3, #0
 800463e:	73fb      	strb	r3, [r7, #15]
 8004640:	e00d      	b.n	800465e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	7bfb      	ldrb	r3, [r7, #15]
 8004648:	3340      	adds	r3, #64	; 0x40
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	4413      	add	r3, r2
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	0c1b      	lsrs	r3, r3, #16
 8004652:	68ba      	ldr	r2, [r7, #8]
 8004654:	4413      	add	r3, r2
 8004656:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004658:	7bfb      	ldrb	r3, [r7, #15]
 800465a:	3301      	adds	r3, #1
 800465c:	73fb      	strb	r3, [r7, #15]
 800465e:	7bfa      	ldrb	r2, [r7, #15]
 8004660:	78fb      	ldrb	r3, [r7, #3]
 8004662:	3b01      	subs	r3, #1
 8004664:	429a      	cmp	r2, r3
 8004666:	d3ec      	bcc.n	8004642 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004668:	883b      	ldrh	r3, [r7, #0]
 800466a:	0418      	lsls	r0, r3, #16
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6819      	ldr	r1, [r3, #0]
 8004670:	78fb      	ldrb	r3, [r7, #3]
 8004672:	3b01      	subs	r3, #1
 8004674:	68ba      	ldr	r2, [r7, #8]
 8004676:	4302      	orrs	r2, r0
 8004678:	3340      	adds	r3, #64	; 0x40
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	440b      	add	r3, r1
 800467e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3714      	adds	r7, #20
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr

0800468e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800468e:	b480      	push	{r7}
 8004690:	b083      	sub	sp, #12
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
 8004696:	460b      	mov	r3, r1
 8004698:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	887a      	ldrh	r2, [r7, #2]
 80046a0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	460b      	mov	r3, r1
 80046ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80046bc:	bf00      	nop
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b086      	sub	sp, #24
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d101      	bne.n	80046da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e25b      	b.n	8004b92 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d075      	beq.n	80047d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046e6:	4ba3      	ldr	r3, [pc, #652]	; (8004974 <HAL_RCC_OscConfig+0x2ac>)
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f003 030c 	and.w	r3, r3, #12
 80046ee:	2b04      	cmp	r3, #4
 80046f0:	d00c      	beq.n	800470c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046f2:	4ba0      	ldr	r3, [pc, #640]	; (8004974 <HAL_RCC_OscConfig+0x2ac>)
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046fa:	2b08      	cmp	r3, #8
 80046fc:	d112      	bne.n	8004724 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046fe:	4b9d      	ldr	r3, [pc, #628]	; (8004974 <HAL_RCC_OscConfig+0x2ac>)
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004706:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800470a:	d10b      	bne.n	8004724 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800470c:	4b99      	ldr	r3, [pc, #612]	; (8004974 <HAL_RCC_OscConfig+0x2ac>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d05b      	beq.n	80047d0 <HAL_RCC_OscConfig+0x108>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d157      	bne.n	80047d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e236      	b.n	8004b92 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800472c:	d106      	bne.n	800473c <HAL_RCC_OscConfig+0x74>
 800472e:	4b91      	ldr	r3, [pc, #580]	; (8004974 <HAL_RCC_OscConfig+0x2ac>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a90      	ldr	r2, [pc, #576]	; (8004974 <HAL_RCC_OscConfig+0x2ac>)
 8004734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004738:	6013      	str	r3, [r2, #0]
 800473a:	e01d      	b.n	8004778 <HAL_RCC_OscConfig+0xb0>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004744:	d10c      	bne.n	8004760 <HAL_RCC_OscConfig+0x98>
 8004746:	4b8b      	ldr	r3, [pc, #556]	; (8004974 <HAL_RCC_OscConfig+0x2ac>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a8a      	ldr	r2, [pc, #552]	; (8004974 <HAL_RCC_OscConfig+0x2ac>)
 800474c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004750:	6013      	str	r3, [r2, #0]
 8004752:	4b88      	ldr	r3, [pc, #544]	; (8004974 <HAL_RCC_OscConfig+0x2ac>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a87      	ldr	r2, [pc, #540]	; (8004974 <HAL_RCC_OscConfig+0x2ac>)
 8004758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800475c:	6013      	str	r3, [r2, #0]
 800475e:	e00b      	b.n	8004778 <HAL_RCC_OscConfig+0xb0>
 8004760:	4b84      	ldr	r3, [pc, #528]	; (8004974 <HAL_RCC_OscConfig+0x2ac>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a83      	ldr	r2, [pc, #524]	; (8004974 <HAL_RCC_OscConfig+0x2ac>)
 8004766:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800476a:	6013      	str	r3, [r2, #0]
 800476c:	4b81      	ldr	r3, [pc, #516]	; (8004974 <HAL_RCC_OscConfig+0x2ac>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a80      	ldr	r2, [pc, #512]	; (8004974 <HAL_RCC_OscConfig+0x2ac>)
 8004772:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004776:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d013      	beq.n	80047a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004780:	f7fd fe20 	bl	80023c4 <HAL_GetTick>
 8004784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004786:	e008      	b.n	800479a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004788:	f7fd fe1c 	bl	80023c4 <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	2b64      	cmp	r3, #100	; 0x64
 8004794:	d901      	bls.n	800479a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e1fb      	b.n	8004b92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800479a:	4b76      	ldr	r3, [pc, #472]	; (8004974 <HAL_RCC_OscConfig+0x2ac>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d0f0      	beq.n	8004788 <HAL_RCC_OscConfig+0xc0>
 80047a6:	e014      	b.n	80047d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a8:	f7fd fe0c 	bl	80023c4 <HAL_GetTick>
 80047ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047ae:	e008      	b.n	80047c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047b0:	f7fd fe08 	bl	80023c4 <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	2b64      	cmp	r3, #100	; 0x64
 80047bc:	d901      	bls.n	80047c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e1e7      	b.n	8004b92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047c2:	4b6c      	ldr	r3, [pc, #432]	; (8004974 <HAL_RCC_OscConfig+0x2ac>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d1f0      	bne.n	80047b0 <HAL_RCC_OscConfig+0xe8>
 80047ce:	e000      	b.n	80047d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0302 	and.w	r3, r3, #2
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d063      	beq.n	80048a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047de:	4b65      	ldr	r3, [pc, #404]	; (8004974 <HAL_RCC_OscConfig+0x2ac>)
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f003 030c 	and.w	r3, r3, #12
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00b      	beq.n	8004802 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047ea:	4b62      	ldr	r3, [pc, #392]	; (8004974 <HAL_RCC_OscConfig+0x2ac>)
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047f2:	2b08      	cmp	r3, #8
 80047f4:	d11c      	bne.n	8004830 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047f6:	4b5f      	ldr	r3, [pc, #380]	; (8004974 <HAL_RCC_OscConfig+0x2ac>)
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d116      	bne.n	8004830 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004802:	4b5c      	ldr	r3, [pc, #368]	; (8004974 <HAL_RCC_OscConfig+0x2ac>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0302 	and.w	r3, r3, #2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d005      	beq.n	800481a <HAL_RCC_OscConfig+0x152>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d001      	beq.n	800481a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e1bb      	b.n	8004b92 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800481a:	4b56      	ldr	r3, [pc, #344]	; (8004974 <HAL_RCC_OscConfig+0x2ac>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	00db      	lsls	r3, r3, #3
 8004828:	4952      	ldr	r1, [pc, #328]	; (8004974 <HAL_RCC_OscConfig+0x2ac>)
 800482a:	4313      	orrs	r3, r2
 800482c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800482e:	e03a      	b.n	80048a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d020      	beq.n	800487a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004838:	4b4f      	ldr	r3, [pc, #316]	; (8004978 <HAL_RCC_OscConfig+0x2b0>)
 800483a:	2201      	movs	r2, #1
 800483c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800483e:	f7fd fdc1 	bl	80023c4 <HAL_GetTick>
 8004842:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004844:	e008      	b.n	8004858 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004846:	f7fd fdbd 	bl	80023c4 <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	2b02      	cmp	r3, #2
 8004852:	d901      	bls.n	8004858 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	e19c      	b.n	8004b92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004858:	4b46      	ldr	r3, [pc, #280]	; (8004974 <HAL_RCC_OscConfig+0x2ac>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0302 	and.w	r3, r3, #2
 8004860:	2b00      	cmp	r3, #0
 8004862:	d0f0      	beq.n	8004846 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004864:	4b43      	ldr	r3, [pc, #268]	; (8004974 <HAL_RCC_OscConfig+0x2ac>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	691b      	ldr	r3, [r3, #16]
 8004870:	00db      	lsls	r3, r3, #3
 8004872:	4940      	ldr	r1, [pc, #256]	; (8004974 <HAL_RCC_OscConfig+0x2ac>)
 8004874:	4313      	orrs	r3, r2
 8004876:	600b      	str	r3, [r1, #0]
 8004878:	e015      	b.n	80048a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800487a:	4b3f      	ldr	r3, [pc, #252]	; (8004978 <HAL_RCC_OscConfig+0x2b0>)
 800487c:	2200      	movs	r2, #0
 800487e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004880:	f7fd fda0 	bl	80023c4 <HAL_GetTick>
 8004884:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004886:	e008      	b.n	800489a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004888:	f7fd fd9c 	bl	80023c4 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	2b02      	cmp	r3, #2
 8004894:	d901      	bls.n	800489a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e17b      	b.n	8004b92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800489a:	4b36      	ldr	r3, [pc, #216]	; (8004974 <HAL_RCC_OscConfig+0x2ac>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0302 	and.w	r3, r3, #2
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1f0      	bne.n	8004888 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0308 	and.w	r3, r3, #8
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d030      	beq.n	8004914 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	695b      	ldr	r3, [r3, #20]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d016      	beq.n	80048e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048ba:	4b30      	ldr	r3, [pc, #192]	; (800497c <HAL_RCC_OscConfig+0x2b4>)
 80048bc:	2201      	movs	r2, #1
 80048be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048c0:	f7fd fd80 	bl	80023c4 <HAL_GetTick>
 80048c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048c6:	e008      	b.n	80048da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048c8:	f7fd fd7c 	bl	80023c4 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d901      	bls.n	80048da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e15b      	b.n	8004b92 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048da:	4b26      	ldr	r3, [pc, #152]	; (8004974 <HAL_RCC_OscConfig+0x2ac>)
 80048dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d0f0      	beq.n	80048c8 <HAL_RCC_OscConfig+0x200>
 80048e6:	e015      	b.n	8004914 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048e8:	4b24      	ldr	r3, [pc, #144]	; (800497c <HAL_RCC_OscConfig+0x2b4>)
 80048ea:	2200      	movs	r2, #0
 80048ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048ee:	f7fd fd69 	bl	80023c4 <HAL_GetTick>
 80048f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048f4:	e008      	b.n	8004908 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048f6:	f7fd fd65 	bl	80023c4 <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	2b02      	cmp	r3, #2
 8004902:	d901      	bls.n	8004908 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e144      	b.n	8004b92 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004908:	4b1a      	ldr	r3, [pc, #104]	; (8004974 <HAL_RCC_OscConfig+0x2ac>)
 800490a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800490c:	f003 0302 	and.w	r3, r3, #2
 8004910:	2b00      	cmp	r3, #0
 8004912:	d1f0      	bne.n	80048f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0304 	and.w	r3, r3, #4
 800491c:	2b00      	cmp	r3, #0
 800491e:	f000 80a0 	beq.w	8004a62 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004922:	2300      	movs	r3, #0
 8004924:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004926:	4b13      	ldr	r3, [pc, #76]	; (8004974 <HAL_RCC_OscConfig+0x2ac>)
 8004928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d10f      	bne.n	8004952 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004932:	2300      	movs	r3, #0
 8004934:	60bb      	str	r3, [r7, #8]
 8004936:	4b0f      	ldr	r3, [pc, #60]	; (8004974 <HAL_RCC_OscConfig+0x2ac>)
 8004938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493a:	4a0e      	ldr	r2, [pc, #56]	; (8004974 <HAL_RCC_OscConfig+0x2ac>)
 800493c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004940:	6413      	str	r3, [r2, #64]	; 0x40
 8004942:	4b0c      	ldr	r3, [pc, #48]	; (8004974 <HAL_RCC_OscConfig+0x2ac>)
 8004944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800494a:	60bb      	str	r3, [r7, #8]
 800494c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800494e:	2301      	movs	r3, #1
 8004950:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004952:	4b0b      	ldr	r3, [pc, #44]	; (8004980 <HAL_RCC_OscConfig+0x2b8>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800495a:	2b00      	cmp	r3, #0
 800495c:	d121      	bne.n	80049a2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800495e:	4b08      	ldr	r3, [pc, #32]	; (8004980 <HAL_RCC_OscConfig+0x2b8>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a07      	ldr	r2, [pc, #28]	; (8004980 <HAL_RCC_OscConfig+0x2b8>)
 8004964:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004968:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800496a:	f7fd fd2b 	bl	80023c4 <HAL_GetTick>
 800496e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004970:	e011      	b.n	8004996 <HAL_RCC_OscConfig+0x2ce>
 8004972:	bf00      	nop
 8004974:	40023800 	.word	0x40023800
 8004978:	42470000 	.word	0x42470000
 800497c:	42470e80 	.word	0x42470e80
 8004980:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004984:	f7fd fd1e 	bl	80023c4 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2b02      	cmp	r3, #2
 8004990:	d901      	bls.n	8004996 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e0fd      	b.n	8004b92 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004996:	4b81      	ldr	r3, [pc, #516]	; (8004b9c <HAL_RCC_OscConfig+0x4d4>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d0f0      	beq.n	8004984 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d106      	bne.n	80049b8 <HAL_RCC_OscConfig+0x2f0>
 80049aa:	4b7d      	ldr	r3, [pc, #500]	; (8004ba0 <HAL_RCC_OscConfig+0x4d8>)
 80049ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ae:	4a7c      	ldr	r2, [pc, #496]	; (8004ba0 <HAL_RCC_OscConfig+0x4d8>)
 80049b0:	f043 0301 	orr.w	r3, r3, #1
 80049b4:	6713      	str	r3, [r2, #112]	; 0x70
 80049b6:	e01c      	b.n	80049f2 <HAL_RCC_OscConfig+0x32a>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	2b05      	cmp	r3, #5
 80049be:	d10c      	bne.n	80049da <HAL_RCC_OscConfig+0x312>
 80049c0:	4b77      	ldr	r3, [pc, #476]	; (8004ba0 <HAL_RCC_OscConfig+0x4d8>)
 80049c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c4:	4a76      	ldr	r2, [pc, #472]	; (8004ba0 <HAL_RCC_OscConfig+0x4d8>)
 80049c6:	f043 0304 	orr.w	r3, r3, #4
 80049ca:	6713      	str	r3, [r2, #112]	; 0x70
 80049cc:	4b74      	ldr	r3, [pc, #464]	; (8004ba0 <HAL_RCC_OscConfig+0x4d8>)
 80049ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d0:	4a73      	ldr	r2, [pc, #460]	; (8004ba0 <HAL_RCC_OscConfig+0x4d8>)
 80049d2:	f043 0301 	orr.w	r3, r3, #1
 80049d6:	6713      	str	r3, [r2, #112]	; 0x70
 80049d8:	e00b      	b.n	80049f2 <HAL_RCC_OscConfig+0x32a>
 80049da:	4b71      	ldr	r3, [pc, #452]	; (8004ba0 <HAL_RCC_OscConfig+0x4d8>)
 80049dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049de:	4a70      	ldr	r2, [pc, #448]	; (8004ba0 <HAL_RCC_OscConfig+0x4d8>)
 80049e0:	f023 0301 	bic.w	r3, r3, #1
 80049e4:	6713      	str	r3, [r2, #112]	; 0x70
 80049e6:	4b6e      	ldr	r3, [pc, #440]	; (8004ba0 <HAL_RCC_OscConfig+0x4d8>)
 80049e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ea:	4a6d      	ldr	r2, [pc, #436]	; (8004ba0 <HAL_RCC_OscConfig+0x4d8>)
 80049ec:	f023 0304 	bic.w	r3, r3, #4
 80049f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d015      	beq.n	8004a26 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049fa:	f7fd fce3 	bl	80023c4 <HAL_GetTick>
 80049fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a00:	e00a      	b.n	8004a18 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a02:	f7fd fcdf 	bl	80023c4 <HAL_GetTick>
 8004a06:	4602      	mov	r2, r0
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d901      	bls.n	8004a18 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	e0bc      	b.n	8004b92 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a18:	4b61      	ldr	r3, [pc, #388]	; (8004ba0 <HAL_RCC_OscConfig+0x4d8>)
 8004a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a1c:	f003 0302 	and.w	r3, r3, #2
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d0ee      	beq.n	8004a02 <HAL_RCC_OscConfig+0x33a>
 8004a24:	e014      	b.n	8004a50 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a26:	f7fd fccd 	bl	80023c4 <HAL_GetTick>
 8004a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a2c:	e00a      	b.n	8004a44 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a2e:	f7fd fcc9 	bl	80023c4 <HAL_GetTick>
 8004a32:	4602      	mov	r2, r0
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d901      	bls.n	8004a44 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e0a6      	b.n	8004b92 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a44:	4b56      	ldr	r3, [pc, #344]	; (8004ba0 <HAL_RCC_OscConfig+0x4d8>)
 8004a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a48:	f003 0302 	and.w	r3, r3, #2
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d1ee      	bne.n	8004a2e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a50:	7dfb      	ldrb	r3, [r7, #23]
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d105      	bne.n	8004a62 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a56:	4b52      	ldr	r3, [pc, #328]	; (8004ba0 <HAL_RCC_OscConfig+0x4d8>)
 8004a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5a:	4a51      	ldr	r2, [pc, #324]	; (8004ba0 <HAL_RCC_OscConfig+0x4d8>)
 8004a5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a60:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	f000 8092 	beq.w	8004b90 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a6c:	4b4c      	ldr	r3, [pc, #304]	; (8004ba0 <HAL_RCC_OscConfig+0x4d8>)
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	f003 030c 	and.w	r3, r3, #12
 8004a74:	2b08      	cmp	r3, #8
 8004a76:	d05c      	beq.n	8004b32 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	699b      	ldr	r3, [r3, #24]
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d141      	bne.n	8004b04 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a80:	4b48      	ldr	r3, [pc, #288]	; (8004ba4 <HAL_RCC_OscConfig+0x4dc>)
 8004a82:	2200      	movs	r2, #0
 8004a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a86:	f7fd fc9d 	bl	80023c4 <HAL_GetTick>
 8004a8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a8c:	e008      	b.n	8004aa0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a8e:	f7fd fc99 	bl	80023c4 <HAL_GetTick>
 8004a92:	4602      	mov	r2, r0
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d901      	bls.n	8004aa0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e078      	b.n	8004b92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aa0:	4b3f      	ldr	r3, [pc, #252]	; (8004ba0 <HAL_RCC_OscConfig+0x4d8>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1f0      	bne.n	8004a8e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	69da      	ldr	r2, [r3, #28]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a1b      	ldr	r3, [r3, #32]
 8004ab4:	431a      	orrs	r2, r3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aba:	019b      	lsls	r3, r3, #6
 8004abc:	431a      	orrs	r2, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac2:	085b      	lsrs	r3, r3, #1
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	041b      	lsls	r3, r3, #16
 8004ac8:	431a      	orrs	r2, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ace:	061b      	lsls	r3, r3, #24
 8004ad0:	4933      	ldr	r1, [pc, #204]	; (8004ba0 <HAL_RCC_OscConfig+0x4d8>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ad6:	4b33      	ldr	r3, [pc, #204]	; (8004ba4 <HAL_RCC_OscConfig+0x4dc>)
 8004ad8:	2201      	movs	r2, #1
 8004ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004adc:	f7fd fc72 	bl	80023c4 <HAL_GetTick>
 8004ae0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ae2:	e008      	b.n	8004af6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ae4:	f7fd fc6e 	bl	80023c4 <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d901      	bls.n	8004af6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e04d      	b.n	8004b92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004af6:	4b2a      	ldr	r3, [pc, #168]	; (8004ba0 <HAL_RCC_OscConfig+0x4d8>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d0f0      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x41c>
 8004b02:	e045      	b.n	8004b90 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b04:	4b27      	ldr	r3, [pc, #156]	; (8004ba4 <HAL_RCC_OscConfig+0x4dc>)
 8004b06:	2200      	movs	r2, #0
 8004b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b0a:	f7fd fc5b 	bl	80023c4 <HAL_GetTick>
 8004b0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b10:	e008      	b.n	8004b24 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b12:	f7fd fc57 	bl	80023c4 <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	d901      	bls.n	8004b24 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e036      	b.n	8004b92 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b24:	4b1e      	ldr	r3, [pc, #120]	; (8004ba0 <HAL_RCC_OscConfig+0x4d8>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d1f0      	bne.n	8004b12 <HAL_RCC_OscConfig+0x44a>
 8004b30:	e02e      	b.n	8004b90 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d101      	bne.n	8004b3e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e029      	b.n	8004b92 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004b3e:	4b18      	ldr	r3, [pc, #96]	; (8004ba0 <HAL_RCC_OscConfig+0x4d8>)
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	69db      	ldr	r3, [r3, #28]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d11c      	bne.n	8004b8c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d115      	bne.n	8004b8c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b66:	4013      	ands	r3, r2
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d10d      	bne.n	8004b8c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d106      	bne.n	8004b8c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d001      	beq.n	8004b90 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e000      	b.n	8004b92 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3718      	adds	r7, #24
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	40007000 	.word	0x40007000
 8004ba0:	40023800 	.word	0x40023800
 8004ba4:	42470060 	.word	0x42470060

08004ba8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d101      	bne.n	8004bbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e0cc      	b.n	8004d56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bbc:	4b68      	ldr	r3, [pc, #416]	; (8004d60 <HAL_RCC_ClockConfig+0x1b8>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 030f 	and.w	r3, r3, #15
 8004bc4:	683a      	ldr	r2, [r7, #0]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d90c      	bls.n	8004be4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bca:	4b65      	ldr	r3, [pc, #404]	; (8004d60 <HAL_RCC_ClockConfig+0x1b8>)
 8004bcc:	683a      	ldr	r2, [r7, #0]
 8004bce:	b2d2      	uxtb	r2, r2
 8004bd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bd2:	4b63      	ldr	r3, [pc, #396]	; (8004d60 <HAL_RCC_ClockConfig+0x1b8>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 030f 	and.w	r3, r3, #15
 8004bda:	683a      	ldr	r2, [r7, #0]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d001      	beq.n	8004be4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e0b8      	b.n	8004d56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0302 	and.w	r3, r3, #2
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d020      	beq.n	8004c32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0304 	and.w	r3, r3, #4
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d005      	beq.n	8004c08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bfc:	4b59      	ldr	r3, [pc, #356]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	4a58      	ldr	r2, [pc, #352]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0308 	and.w	r3, r3, #8
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d005      	beq.n	8004c20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c14:	4b53      	ldr	r3, [pc, #332]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	4a52      	ldr	r2, [pc, #328]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c20:	4b50      	ldr	r3, [pc, #320]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	494d      	ldr	r1, [pc, #308]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d044      	beq.n	8004cc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d107      	bne.n	8004c56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c46:	4b47      	ldr	r3, [pc, #284]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d119      	bne.n	8004c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e07f      	b.n	8004d56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d003      	beq.n	8004c66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c62:	2b03      	cmp	r3, #3
 8004c64:	d107      	bne.n	8004c76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c66:	4b3f      	ldr	r3, [pc, #252]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d109      	bne.n	8004c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e06f      	b.n	8004d56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c76:	4b3b      	ldr	r3, [pc, #236]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0302 	and.w	r3, r3, #2
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e067      	b.n	8004d56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c86:	4b37      	ldr	r3, [pc, #220]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f023 0203 	bic.w	r2, r3, #3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	4934      	ldr	r1, [pc, #208]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c98:	f7fd fb94 	bl	80023c4 <HAL_GetTick>
 8004c9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c9e:	e00a      	b.n	8004cb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ca0:	f7fd fb90 	bl	80023c4 <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e04f      	b.n	8004d56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cb6:	4b2b      	ldr	r3, [pc, #172]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f003 020c 	and.w	r2, r3, #12
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d1eb      	bne.n	8004ca0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cc8:	4b25      	ldr	r3, [pc, #148]	; (8004d60 <HAL_RCC_ClockConfig+0x1b8>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 030f 	and.w	r3, r3, #15
 8004cd0:	683a      	ldr	r2, [r7, #0]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d20c      	bcs.n	8004cf0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cd6:	4b22      	ldr	r3, [pc, #136]	; (8004d60 <HAL_RCC_ClockConfig+0x1b8>)
 8004cd8:	683a      	ldr	r2, [r7, #0]
 8004cda:	b2d2      	uxtb	r2, r2
 8004cdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cde:	4b20      	ldr	r3, [pc, #128]	; (8004d60 <HAL_RCC_ClockConfig+0x1b8>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 030f 	and.w	r3, r3, #15
 8004ce6:	683a      	ldr	r2, [r7, #0]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d001      	beq.n	8004cf0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e032      	b.n	8004d56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0304 	and.w	r3, r3, #4
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d008      	beq.n	8004d0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cfc:	4b19      	ldr	r3, [pc, #100]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	4916      	ldr	r1, [pc, #88]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0308 	and.w	r3, r3, #8
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d009      	beq.n	8004d2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d1a:	4b12      	ldr	r3, [pc, #72]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	00db      	lsls	r3, r3, #3
 8004d28:	490e      	ldr	r1, [pc, #56]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d2e:	f000 f821 	bl	8004d74 <HAL_RCC_GetSysClockFreq>
 8004d32:	4601      	mov	r1, r0
 8004d34:	4b0b      	ldr	r3, [pc, #44]	; (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	091b      	lsrs	r3, r3, #4
 8004d3a:	f003 030f 	and.w	r3, r3, #15
 8004d3e:	4a0a      	ldr	r2, [pc, #40]	; (8004d68 <HAL_RCC_ClockConfig+0x1c0>)
 8004d40:	5cd3      	ldrb	r3, [r2, r3]
 8004d42:	fa21 f303 	lsr.w	r3, r1, r3
 8004d46:	4a09      	ldr	r2, [pc, #36]	; (8004d6c <HAL_RCC_ClockConfig+0x1c4>)
 8004d48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d4a:	4b09      	ldr	r3, [pc, #36]	; (8004d70 <HAL_RCC_ClockConfig+0x1c8>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7fd faf4 	bl	800233c <HAL_InitTick>

  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3710      	adds	r7, #16
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	40023c00 	.word	0x40023c00
 8004d64:	40023800 	.word	0x40023800
 8004d68:	08010694 	.word	0x08010694
 8004d6c:	20000004 	.word	0x20000004
 8004d70:	20000008 	.word	0x20000008

08004d74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d76:	b085      	sub	sp, #20
 8004d78:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	607b      	str	r3, [r7, #4]
 8004d7e:	2300      	movs	r3, #0
 8004d80:	60fb      	str	r3, [r7, #12]
 8004d82:	2300      	movs	r3, #0
 8004d84:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004d86:	2300      	movs	r3, #0
 8004d88:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d8a:	4b50      	ldr	r3, [pc, #320]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x158>)
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	f003 030c 	and.w	r3, r3, #12
 8004d92:	2b04      	cmp	r3, #4
 8004d94:	d007      	beq.n	8004da6 <HAL_RCC_GetSysClockFreq+0x32>
 8004d96:	2b08      	cmp	r3, #8
 8004d98:	d008      	beq.n	8004dac <HAL_RCC_GetSysClockFreq+0x38>
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	f040 808d 	bne.w	8004eba <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004da0:	4b4b      	ldr	r3, [pc, #300]	; (8004ed0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004da2:	60bb      	str	r3, [r7, #8]
       break;
 8004da4:	e08c      	b.n	8004ec0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004da6:	4b4b      	ldr	r3, [pc, #300]	; (8004ed4 <HAL_RCC_GetSysClockFreq+0x160>)
 8004da8:	60bb      	str	r3, [r7, #8]
      break;
 8004daa:	e089      	b.n	8004ec0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004dac:	4b47      	ldr	r3, [pc, #284]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x158>)
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004db4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004db6:	4b45      	ldr	r3, [pc, #276]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x158>)
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d023      	beq.n	8004e0a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dc2:	4b42      	ldr	r3, [pc, #264]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x158>)
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	099b      	lsrs	r3, r3, #6
 8004dc8:	f04f 0400 	mov.w	r4, #0
 8004dcc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004dd0:	f04f 0200 	mov.w	r2, #0
 8004dd4:	ea03 0501 	and.w	r5, r3, r1
 8004dd8:	ea04 0602 	and.w	r6, r4, r2
 8004ddc:	4a3d      	ldr	r2, [pc, #244]	; (8004ed4 <HAL_RCC_GetSysClockFreq+0x160>)
 8004dde:	fb02 f106 	mul.w	r1, r2, r6
 8004de2:	2200      	movs	r2, #0
 8004de4:	fb02 f205 	mul.w	r2, r2, r5
 8004de8:	440a      	add	r2, r1
 8004dea:	493a      	ldr	r1, [pc, #232]	; (8004ed4 <HAL_RCC_GetSysClockFreq+0x160>)
 8004dec:	fba5 0101 	umull	r0, r1, r5, r1
 8004df0:	1853      	adds	r3, r2, r1
 8004df2:	4619      	mov	r1, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f04f 0400 	mov.w	r4, #0
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	4623      	mov	r3, r4
 8004dfe:	f7fb ff43 	bl	8000c88 <__aeabi_uldivmod>
 8004e02:	4603      	mov	r3, r0
 8004e04:	460c      	mov	r4, r1
 8004e06:	60fb      	str	r3, [r7, #12]
 8004e08:	e049      	b.n	8004e9e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e0a:	4b30      	ldr	r3, [pc, #192]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x158>)
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	099b      	lsrs	r3, r3, #6
 8004e10:	f04f 0400 	mov.w	r4, #0
 8004e14:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004e18:	f04f 0200 	mov.w	r2, #0
 8004e1c:	ea03 0501 	and.w	r5, r3, r1
 8004e20:	ea04 0602 	and.w	r6, r4, r2
 8004e24:	4629      	mov	r1, r5
 8004e26:	4632      	mov	r2, r6
 8004e28:	f04f 0300 	mov.w	r3, #0
 8004e2c:	f04f 0400 	mov.w	r4, #0
 8004e30:	0154      	lsls	r4, r2, #5
 8004e32:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004e36:	014b      	lsls	r3, r1, #5
 8004e38:	4619      	mov	r1, r3
 8004e3a:	4622      	mov	r2, r4
 8004e3c:	1b49      	subs	r1, r1, r5
 8004e3e:	eb62 0206 	sbc.w	r2, r2, r6
 8004e42:	f04f 0300 	mov.w	r3, #0
 8004e46:	f04f 0400 	mov.w	r4, #0
 8004e4a:	0194      	lsls	r4, r2, #6
 8004e4c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004e50:	018b      	lsls	r3, r1, #6
 8004e52:	1a5b      	subs	r3, r3, r1
 8004e54:	eb64 0402 	sbc.w	r4, r4, r2
 8004e58:	f04f 0100 	mov.w	r1, #0
 8004e5c:	f04f 0200 	mov.w	r2, #0
 8004e60:	00e2      	lsls	r2, r4, #3
 8004e62:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004e66:	00d9      	lsls	r1, r3, #3
 8004e68:	460b      	mov	r3, r1
 8004e6a:	4614      	mov	r4, r2
 8004e6c:	195b      	adds	r3, r3, r5
 8004e6e:	eb44 0406 	adc.w	r4, r4, r6
 8004e72:	f04f 0100 	mov.w	r1, #0
 8004e76:	f04f 0200 	mov.w	r2, #0
 8004e7a:	02a2      	lsls	r2, r4, #10
 8004e7c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004e80:	0299      	lsls	r1, r3, #10
 8004e82:	460b      	mov	r3, r1
 8004e84:	4614      	mov	r4, r2
 8004e86:	4618      	mov	r0, r3
 8004e88:	4621      	mov	r1, r4
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f04f 0400 	mov.w	r4, #0
 8004e90:	461a      	mov	r2, r3
 8004e92:	4623      	mov	r3, r4
 8004e94:	f7fb fef8 	bl	8000c88 <__aeabi_uldivmod>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	460c      	mov	r4, r1
 8004e9c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e9e:	4b0b      	ldr	r3, [pc, #44]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x158>)
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	0c1b      	lsrs	r3, r3, #16
 8004ea4:	f003 0303 	and.w	r3, r3, #3
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	005b      	lsls	r3, r3, #1
 8004eac:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb6:	60bb      	str	r3, [r7, #8]
      break;
 8004eb8:	e002      	b.n	8004ec0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004eba:	4b05      	ldr	r3, [pc, #20]	; (8004ed0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004ebc:	60bb      	str	r3, [r7, #8]
      break;
 8004ebe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ec0:	68bb      	ldr	r3, [r7, #8]
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3714      	adds	r7, #20
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	40023800 	.word	0x40023800
 8004ed0:	00f42400 	.word	0x00f42400
 8004ed4:	00b71b00 	.word	0x00b71b00

08004ed8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004edc:	4b03      	ldr	r3, [pc, #12]	; (8004eec <HAL_RCC_GetHCLKFreq+0x14>)
 8004ede:	681b      	ldr	r3, [r3, #0]
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	20000004 	.word	0x20000004

08004ef0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ef4:	f7ff fff0 	bl	8004ed8 <HAL_RCC_GetHCLKFreq>
 8004ef8:	4601      	mov	r1, r0
 8004efa:	4b05      	ldr	r3, [pc, #20]	; (8004f10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	0a9b      	lsrs	r3, r3, #10
 8004f00:	f003 0307 	and.w	r3, r3, #7
 8004f04:	4a03      	ldr	r2, [pc, #12]	; (8004f14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f06:	5cd3      	ldrb	r3, [r2, r3]
 8004f08:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	40023800 	.word	0x40023800
 8004f14:	080106a4 	.word	0x080106a4

08004f18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f1c:	f7ff ffdc 	bl	8004ed8 <HAL_RCC_GetHCLKFreq>
 8004f20:	4601      	mov	r1, r0
 8004f22:	4b05      	ldr	r3, [pc, #20]	; (8004f38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	0b5b      	lsrs	r3, r3, #13
 8004f28:	f003 0307 	and.w	r3, r3, #7
 8004f2c:	4a03      	ldr	r2, [pc, #12]	; (8004f3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f2e:	5cd3      	ldrb	r3, [r2, r3]
 8004f30:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	40023800 	.word	0x40023800
 8004f3c:	080106a4 	.word	0x080106a4

08004f40 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b086      	sub	sp, #24
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0301 	and.w	r3, r3, #1
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d105      	bne.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d035      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004f68:	4b62      	ldr	r3, [pc, #392]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f6e:	f7fd fa29 	bl	80023c4 <HAL_GetTick>
 8004f72:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f74:	e008      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004f76:	f7fd fa25 	bl	80023c4 <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d901      	bls.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e0b0      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f88:	4b5b      	ldr	r3, [pc, #364]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1f0      	bne.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	019a      	lsls	r2, r3, #6
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	071b      	lsls	r3, r3, #28
 8004fa0:	4955      	ldr	r1, [pc, #340]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004fa8:	4b52      	ldr	r3, [pc, #328]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004faa:	2201      	movs	r2, #1
 8004fac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004fae:	f7fd fa09 	bl	80023c4 <HAL_GetTick>
 8004fb2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fb4:	e008      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004fb6:	f7fd fa05 	bl	80023c4 <HAL_GetTick>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d901      	bls.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e090      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fc8:	4b4b      	ldr	r3, [pc, #300]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d0f0      	beq.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0302 	and.w	r3, r3, #2
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f000 8083 	beq.w	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	60fb      	str	r3, [r7, #12]
 8004fe6:	4b44      	ldr	r3, [pc, #272]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fea:	4a43      	ldr	r2, [pc, #268]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ff2:	4b41      	ldr	r3, [pc, #260]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ffa:	60fb      	str	r3, [r7, #12]
 8004ffc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004ffe:	4b3f      	ldr	r3, [pc, #252]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a3e      	ldr	r2, [pc, #248]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005004:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005008:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800500a:	f7fd f9db 	bl	80023c4 <HAL_GetTick>
 800500e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005010:	e008      	b.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005012:	f7fd f9d7 	bl	80023c4 <HAL_GetTick>
 8005016:	4602      	mov	r2, r0
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	2b02      	cmp	r3, #2
 800501e:	d901      	bls.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e062      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005024:	4b35      	ldr	r3, [pc, #212]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800502c:	2b00      	cmp	r3, #0
 800502e:	d0f0      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005030:	4b31      	ldr	r3, [pc, #196]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005034:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005038:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d02f      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005048:	693a      	ldr	r2, [r7, #16]
 800504a:	429a      	cmp	r2, r3
 800504c:	d028      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800504e:	4b2a      	ldr	r3, [pc, #168]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005052:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005056:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005058:	4b29      	ldr	r3, [pc, #164]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800505a:	2201      	movs	r2, #1
 800505c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800505e:	4b28      	ldr	r3, [pc, #160]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005060:	2200      	movs	r2, #0
 8005062:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005064:	4a24      	ldr	r2, [pc, #144]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800506a:	4b23      	ldr	r3, [pc, #140]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800506c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800506e:	f003 0301 	and.w	r3, r3, #1
 8005072:	2b01      	cmp	r3, #1
 8005074:	d114      	bne.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005076:	f7fd f9a5 	bl	80023c4 <HAL_GetTick>
 800507a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800507c:	e00a      	b.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800507e:	f7fd f9a1 	bl	80023c4 <HAL_GetTick>
 8005082:	4602      	mov	r2, r0
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	1ad3      	subs	r3, r2, r3
 8005088:	f241 3288 	movw	r2, #5000	; 0x1388
 800508c:	4293      	cmp	r3, r2
 800508e:	d901      	bls.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005090:	2303      	movs	r3, #3
 8005092:	e02a      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005094:	4b18      	ldr	r3, [pc, #96]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005098:	f003 0302 	and.w	r3, r3, #2
 800509c:	2b00      	cmp	r3, #0
 800509e:	d0ee      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050ac:	d10d      	bne.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80050ae:	4b12      	ldr	r3, [pc, #72]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80050be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050c2:	490d      	ldr	r1, [pc, #52]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050c4:	4313      	orrs	r3, r2
 80050c6:	608b      	str	r3, [r1, #8]
 80050c8:	e005      	b.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80050ca:	4b0b      	ldr	r3, [pc, #44]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	4a0a      	ldr	r2, [pc, #40]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050d0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80050d4:	6093      	str	r3, [r2, #8]
 80050d6:	4b08      	ldr	r3, [pc, #32]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050e2:	4905      	ldr	r1, [pc, #20]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050e4:	4313      	orrs	r3, r2
 80050e6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3718      	adds	r7, #24
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	42470068 	.word	0x42470068
 80050f8:	40023800 	.word	0x40023800
 80050fc:	40007000 	.word	0x40007000
 8005100:	42470e40 	.word	0x42470e40

08005104 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d101      	bne.n	8005116 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e083      	b.n	800521e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	7f5b      	ldrb	r3, [r3, #29]
 800511a:	b2db      	uxtb	r3, r3
 800511c:	2b00      	cmp	r3, #0
 800511e:	d105      	bne.n	800512c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f7fc fe0e 	bl	8001d48 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2202      	movs	r2, #2
 8005130:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	22ca      	movs	r2, #202	; 0xca
 8005138:	625a      	str	r2, [r3, #36]	; 0x24
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2253      	movs	r2, #83	; 0x53
 8005140:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 f9fb 	bl	800553e <RTC_EnterInitMode>
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d008      	beq.n	8005160 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	22ff      	movs	r2, #255	; 0xff
 8005154:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2204      	movs	r2, #4
 800515a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	e05e      	b.n	800521e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	6812      	ldr	r2, [r2, #0]
 800516a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800516e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005172:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	6899      	ldr	r1, [r3, #8]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	685a      	ldr	r2, [r3, #4]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	431a      	orrs	r2, r3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	695b      	ldr	r3, [r3, #20]
 8005188:	431a      	orrs	r2, r3
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	430a      	orrs	r2, r1
 8005190:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	68d2      	ldr	r2, [r2, #12]
 800519a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	6919      	ldr	r1, [r3, #16]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	041a      	lsls	r2, r3, #16
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	430a      	orrs	r2, r1
 80051ae:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68da      	ldr	r2, [r3, #12]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051be:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	f003 0320 	and.w	r3, r3, #32
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d10e      	bne.n	80051ec <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 f98d 	bl	80054ee <HAL_RTC_WaitForSynchro>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d008      	beq.n	80051ec <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	22ff      	movs	r2, #255	; 0xff
 80051e0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2204      	movs	r2, #4
 80051e6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e018      	b.n	800521e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80051fa:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	699a      	ldr	r2, [r3, #24]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	430a      	orrs	r2, r1
 800520c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	22ff      	movs	r2, #255	; 0xff
 8005214:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2201      	movs	r2, #1
 800521a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800521c:	2300      	movs	r3, #0
  }
}
 800521e:	4618      	mov	r0, r3
 8005220:	3708      	adds	r7, #8
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}

08005226 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005226:	b590      	push	{r4, r7, lr}
 8005228:	b087      	sub	sp, #28
 800522a:	af00      	add	r7, sp, #0
 800522c:	60f8      	str	r0, [r7, #12]
 800522e:	60b9      	str	r1, [r7, #8]
 8005230:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005232:	2300      	movs	r3, #0
 8005234:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	7f1b      	ldrb	r3, [r3, #28]
 800523a:	2b01      	cmp	r3, #1
 800523c:	d101      	bne.n	8005242 <HAL_RTC_SetTime+0x1c>
 800523e:	2302      	movs	r3, #2
 8005240:	e0aa      	b.n	8005398 <HAL_RTC_SetTime+0x172>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2201      	movs	r2, #1
 8005246:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2202      	movs	r2, #2
 800524c:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d126      	bne.n	80052a2 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800525e:	2b00      	cmp	r3, #0
 8005260:	d102      	bne.n	8005268 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	2200      	movs	r2, #0
 8005266:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	4618      	mov	r0, r3
 800526e:	f000 f992 	bl	8005596 <RTC_ByteToBcd2>
 8005272:	4603      	mov	r3, r0
 8005274:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	785b      	ldrb	r3, [r3, #1]
 800527a:	4618      	mov	r0, r3
 800527c:	f000 f98b 	bl	8005596 <RTC_ByteToBcd2>
 8005280:	4603      	mov	r3, r0
 8005282:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005284:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	789b      	ldrb	r3, [r3, #2]
 800528a:	4618      	mov	r0, r3
 800528c:	f000 f983 	bl	8005596 <RTC_ByteToBcd2>
 8005290:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005292:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	78db      	ldrb	r3, [r3, #3]
 800529a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800529c:	4313      	orrs	r3, r2
 800529e:	617b      	str	r3, [r7, #20]
 80052a0:	e018      	b.n	80052d4 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d102      	bne.n	80052b6 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	2200      	movs	r2, #0
 80052b4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	785b      	ldrb	r3, [r3, #1]
 80052c0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80052c2:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80052c4:	68ba      	ldr	r2, [r7, #8]
 80052c6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80052c8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	78db      	ldrb	r3, [r3, #3]
 80052ce:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80052d0:	4313      	orrs	r3, r2
 80052d2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	22ca      	movs	r2, #202	; 0xca
 80052da:	625a      	str	r2, [r3, #36]	; 0x24
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2253      	movs	r2, #83	; 0x53
 80052e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80052e4:	68f8      	ldr	r0, [r7, #12]
 80052e6:	f000 f92a 	bl	800553e <RTC_EnterInitMode>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d00b      	beq.n	8005308 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	22ff      	movs	r2, #255	; 0xff
 80052f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2204      	movs	r2, #4
 80052fc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e047      	b.n	8005398 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005312:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005316:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	689a      	ldr	r2, [r3, #8]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005326:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6899      	ldr	r1, [r3, #8]
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	68da      	ldr	r2, [r3, #12]
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	431a      	orrs	r2, r3
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	430a      	orrs	r2, r1
 800533e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68da      	ldr	r2, [r3, #12]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800534e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	f003 0320 	and.w	r3, r3, #32
 800535a:	2b00      	cmp	r3, #0
 800535c:	d111      	bne.n	8005382 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800535e:	68f8      	ldr	r0, [r7, #12]
 8005360:	f000 f8c5 	bl	80054ee <HAL_RTC_WaitForSynchro>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d00b      	beq.n	8005382 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	22ff      	movs	r2, #255	; 0xff
 8005370:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2204      	movs	r2, #4
 8005376:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2200      	movs	r2, #0
 800537c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e00a      	b.n	8005398 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	22ff      	movs	r2, #255	; 0xff
 8005388:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2201      	movs	r2, #1
 800538e:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2200      	movs	r2, #0
 8005394:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8005396:	2300      	movs	r3, #0
  }
}
 8005398:	4618      	mov	r0, r3
 800539a:	371c      	adds	r7, #28
 800539c:	46bd      	mov	sp, r7
 800539e:	bd90      	pop	{r4, r7, pc}

080053a0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80053a0:	b590      	push	{r4, r7, lr}
 80053a2:	b087      	sub	sp, #28
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80053ac:	2300      	movs	r3, #0
 80053ae:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	7f1b      	ldrb	r3, [r3, #28]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d101      	bne.n	80053bc <HAL_RTC_SetDate+0x1c>
 80053b8:	2302      	movs	r3, #2
 80053ba:	e094      	b.n	80054e6 <HAL_RTC_SetDate+0x146>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2201      	movs	r2, #1
 80053c0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2202      	movs	r2, #2
 80053c6:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d10e      	bne.n	80053ec <HAL_RTC_SetDate+0x4c>
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	785b      	ldrb	r3, [r3, #1]
 80053d2:	f003 0310 	and.w	r3, r3, #16
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d008      	beq.n	80053ec <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	785b      	ldrb	r3, [r3, #1]
 80053de:	f023 0310 	bic.w	r3, r3, #16
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	330a      	adds	r3, #10
 80053e6:	b2da      	uxtb	r2, r3
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d11c      	bne.n	800542c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	78db      	ldrb	r3, [r3, #3]
 80053f6:	4618      	mov	r0, r3
 80053f8:	f000 f8cd 	bl	8005596 <RTC_ByteToBcd2>
 80053fc:	4603      	mov	r3, r0
 80053fe:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	785b      	ldrb	r3, [r3, #1]
 8005404:	4618      	mov	r0, r3
 8005406:	f000 f8c6 	bl	8005596 <RTC_ByteToBcd2>
 800540a:	4603      	mov	r3, r0
 800540c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800540e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	789b      	ldrb	r3, [r3, #2]
 8005414:	4618      	mov	r0, r3
 8005416:	f000 f8be 	bl	8005596 <RTC_ByteToBcd2>
 800541a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800541c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005426:	4313      	orrs	r3, r2
 8005428:	617b      	str	r3, [r7, #20]
 800542a:	e00e      	b.n	800544a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	78db      	ldrb	r3, [r3, #3]
 8005430:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	785b      	ldrb	r3, [r3, #1]
 8005436:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005438:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800543a:	68ba      	ldr	r2, [r7, #8]
 800543c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800543e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005446:	4313      	orrs	r3, r2
 8005448:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	22ca      	movs	r2, #202	; 0xca
 8005450:	625a      	str	r2, [r3, #36]	; 0x24
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2253      	movs	r2, #83	; 0x53
 8005458:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800545a:	68f8      	ldr	r0, [r7, #12]
 800545c:	f000 f86f 	bl	800553e <RTC_EnterInitMode>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00b      	beq.n	800547e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	22ff      	movs	r2, #255	; 0xff
 800546c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2204      	movs	r2, #4
 8005472:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2200      	movs	r2, #0
 8005478:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e033      	b.n	80054e6 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005488:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800548c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68da      	ldr	r2, [r3, #12]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800549c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	f003 0320 	and.w	r3, r3, #32
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d111      	bne.n	80054d0 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80054ac:	68f8      	ldr	r0, [r7, #12]
 80054ae:	f000 f81e 	bl	80054ee <HAL_RTC_WaitForSynchro>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00b      	beq.n	80054d0 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	22ff      	movs	r2, #255	; 0xff
 80054be:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2204      	movs	r2, #4
 80054c4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e00a      	b.n	80054e6 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	22ff      	movs	r2, #255	; 0xff
 80054d6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2201      	movs	r2, #1
 80054dc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80054e4:	2300      	movs	r3, #0
  }
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	371c      	adds	r7, #28
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd90      	pop	{r4, r7, pc}

080054ee <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80054ee:	b580      	push	{r7, lr}
 80054f0:	b084      	sub	sp, #16
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80054f6:	2300      	movs	r3, #0
 80054f8:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68da      	ldr	r2, [r3, #12]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005508:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800550a:	f7fc ff5b 	bl	80023c4 <HAL_GetTick>
 800550e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005510:	e009      	b.n	8005526 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005512:	f7fc ff57 	bl	80023c4 <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005520:	d901      	bls.n	8005526 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e007      	b.n	8005536 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	f003 0320 	and.w	r3, r3, #32
 8005530:	2b00      	cmp	r3, #0
 8005532:	d0ee      	beq.n	8005512 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3710      	adds	r7, #16
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}

0800553e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800553e:	b580      	push	{r7, lr}
 8005540:	b084      	sub	sp, #16
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005546:	2300      	movs	r3, #0
 8005548:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005554:	2b00      	cmp	r3, #0
 8005556:	d119      	bne.n	800558c <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f04f 32ff 	mov.w	r2, #4294967295
 8005560:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005562:	f7fc ff2f 	bl	80023c4 <HAL_GetTick>
 8005566:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005568:	e009      	b.n	800557e <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800556a:	f7fc ff2b 	bl	80023c4 <HAL_GetTick>
 800556e:	4602      	mov	r2, r0
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005578:	d901      	bls.n	800557e <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e007      	b.n	800558e <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005588:	2b00      	cmp	r3, #0
 800558a:	d0ee      	beq.n	800556a <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3710      	adds	r7, #16
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}

08005596 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005596:	b480      	push	{r7}
 8005598:	b085      	sub	sp, #20
 800559a:	af00      	add	r7, sp, #0
 800559c:	4603      	mov	r3, r0
 800559e:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80055a0:	2300      	movs	r3, #0
 80055a2:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80055a4:	e005      	b.n	80055b2 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	3301      	adds	r3, #1
 80055aa:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80055ac:	79fb      	ldrb	r3, [r7, #7]
 80055ae:	3b0a      	subs	r3, #10
 80055b0:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80055b2:	79fb      	ldrb	r3, [r7, #7]
 80055b4:	2b09      	cmp	r3, #9
 80055b6:	d8f6      	bhi.n	80055a6 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	011b      	lsls	r3, r3, #4
 80055be:	b2da      	uxtb	r2, r3
 80055c0:	79fb      	ldrb	r3, [r7, #7]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	b2db      	uxtb	r3, r3
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3714      	adds	r7, #20
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr

080055d2 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b082      	sub	sp, #8
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d101      	bne.n	80055e4 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e022      	b.n	800562a <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d105      	bne.n	80055fc <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f7fc fbbc 	bl	8001d74 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2203      	movs	r2, #3
 8005600:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f000 f815 	bl	8005634 <HAL_SD_InitCard>
 800560a:	4603      	mov	r3, r0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d001      	beq.n	8005614 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e00a      	b.n	800562a <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	3708      	adds	r7, #8
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
	...

08005634 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005634:	b5b0      	push	{r4, r5, r7, lr}
 8005636:	b08e      	sub	sp, #56	; 0x38
 8005638:	af04      	add	r7, sp, #16
 800563a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800563c:	2300      	movs	r3, #0
 800563e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8005640:	2300      	movs	r3, #0
 8005642:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005644:	2300      	movs	r3, #0
 8005646:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8005648:	2300      	movs	r3, #0
 800564a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800564c:	2300      	movs	r3, #0
 800564e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8005650:	2376      	movs	r3, #118	; 0x76
 8005652:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681d      	ldr	r5, [r3, #0]
 8005658:	466c      	mov	r4, sp
 800565a:	f107 0314 	add.w	r3, r7, #20
 800565e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005662:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005666:	f107 0308 	add.w	r3, r7, #8
 800566a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800566c:	4628      	mov	r0, r5
 800566e:	f002 fe0b 	bl	8008288 <SDIO_Init>
 8005672:	4603      	mov	r3, r0
 8005674:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8005678:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800567c:	2b00      	cmp	r3, #0
 800567e:	d001      	beq.n	8005684 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	e031      	b.n	80056e8 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8005684:	4b1a      	ldr	r3, [pc, #104]	; (80056f0 <HAL_SD_InitCard+0xbc>)
 8005686:	2200      	movs	r2, #0
 8005688:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4618      	mov	r0, r3
 8005690:	f002 fe43 	bl	800831a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8005694:	4b16      	ldr	r3, [pc, #88]	; (80056f0 <HAL_SD_InitCard+0xbc>)
 8005696:	2201      	movs	r2, #1
 8005698:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 fffa 	bl	8006694 <SD_PowerON>
 80056a0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80056a2:	6a3b      	ldr	r3, [r7, #32]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d00b      	beq.n	80056c0 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056b4:	6a3b      	ldr	r3, [r7, #32]
 80056b6:	431a      	orrs	r2, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e013      	b.n	80056e8 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 ff19 	bl	80064f8 <SD_InitCard>
 80056c6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80056c8:	6a3b      	ldr	r3, [r7, #32]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d00b      	beq.n	80056e6 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2201      	movs	r2, #1
 80056d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056da:	6a3b      	ldr	r3, [r7, #32]
 80056dc:	431a      	orrs	r2, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e000      	b.n	80056e8 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 80056e6:	2300      	movs	r3, #0
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3728      	adds	r7, #40	; 0x28
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bdb0      	pop	{r4, r5, r7, pc}
 80056f0:	422580a0 	.word	0x422580a0

080056f4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b08c      	sub	sp, #48	; 0x30
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	607a      	str	r2, [r7, #4]
 8005700:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d107      	bne.n	800571c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005710:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e0c9      	b.n	80058b0 <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005722:	b2db      	uxtb	r3, r3
 8005724:	2b01      	cmp	r3, #1
 8005726:	f040 80c2 	bne.w	80058ae <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005730:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	441a      	add	r2, r3
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800573a:	429a      	cmp	r2, r3
 800573c:	d907      	bls.n	800574e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005742:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e0b0      	b.n	80058b0 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2203      	movs	r2, #3
 8005752:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2200      	movs	r2, #0
 800575c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	6812      	ldr	r2, [r2, #0]
 8005768:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 800576c:	f043 0302 	orr.w	r3, r3, #2
 8005770:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005776:	4a50      	ldr	r2, [pc, #320]	; (80058b8 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 8005778:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577e:	4a4f      	ldr	r2, [pc, #316]	; (80058bc <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8005780:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005786:	2200      	movs	r2, #0
 8005788:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	3380      	adds	r3, #128	; 0x80
 8005794:	4619      	mov	r1, r3
 8005796:	68ba      	ldr	r2, [r7, #8]
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	025b      	lsls	r3, r3, #9
 800579c:	089b      	lsrs	r3, r3, #2
 800579e:	f7fc ffff 	bl	80027a0 <HAL_DMA_Start_IT>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d017      	beq.n	80057d8 <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80057b6:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a40      	ldr	r2, [pc, #256]	; (80058c0 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 80057be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e06b      	b.n	80058b0 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80057d8:	4b3a      	ldr	r3, [pc, #232]	; (80058c4 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 80057da:	2201      	movs	r2, #1
 80057dc:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d002      	beq.n	80057ec <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 80057e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e8:	025b      	lsls	r3, r3, #9
 80057ea:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80057f4:	4618      	mov	r0, r3
 80057f6:	f002 fe23 	bl	8008440 <SDMMC_CmdBlockLength>
 80057fa:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 80057fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00f      	beq.n	8005822 <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a2e      	ldr	r2, [pc, #184]	; (80058c0 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8005808:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800580e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005810:	431a      	orrs	r2, r3
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2201      	movs	r2, #1
 800581a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e046      	b.n	80058b0 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005822:	f04f 33ff 	mov.w	r3, #4294967295
 8005826:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	025b      	lsls	r3, r3, #9
 800582c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800582e:	2390      	movs	r3, #144	; 0x90
 8005830:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005832:	2302      	movs	r3, #2
 8005834:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005836:	2300      	movs	r3, #0
 8005838:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800583a:	2301      	movs	r3, #1
 800583c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f107 0210 	add.w	r2, r7, #16
 8005846:	4611      	mov	r1, r2
 8005848:	4618      	mov	r0, r3
 800584a:	f002 fdcd 	bl	80083e8 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	2b01      	cmp	r3, #1
 8005852:	d90a      	bls.n	800586a <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2282      	movs	r2, #130	; 0x82
 8005858:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005860:	4618      	mov	r0, r3
 8005862:	f002 fe31 	bl	80084c8 <SDMMC_CmdReadMultiBlock>
 8005866:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005868:	e009      	b.n	800587e <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2281      	movs	r2, #129	; 0x81
 800586e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005876:	4618      	mov	r0, r3
 8005878:	f002 fe04 	bl	8008484 <SDMMC_CmdReadSingleBlock>
 800587c:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800587e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005880:	2b00      	cmp	r3, #0
 8005882:	d012      	beq.n	80058aa <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a0d      	ldr	r2, [pc, #52]	; (80058c0 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800588a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005892:	431a      	orrs	r2, r3
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2200      	movs	r2, #0
 80058a4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e002      	b.n	80058b0 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 80058aa:	2300      	movs	r3, #0
 80058ac:	e000      	b.n	80058b0 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 80058ae:	2302      	movs	r3, #2
  }
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3730      	adds	r7, #48	; 0x30
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	08006307 	.word	0x08006307
 80058bc:	08006379 	.word	0x08006379
 80058c0:	004005ff 	.word	0x004005ff
 80058c4:	4225858c 	.word	0x4225858c

080058c8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b08c      	sub	sp, #48	; 0x30
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	607a      	str	r2, [r7, #4]
 80058d4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d107      	bne.n	80058f0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e0ce      	b.n	8005a8e <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	f040 80c7 	bne.w	8005a8c <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2200      	movs	r2, #0
 8005902:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005904:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	441a      	add	r2, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800590e:	429a      	cmp	r2, r3
 8005910:	d907      	bls.n	8005922 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005916:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e0b5      	b.n	8005a8e <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2203      	movs	r2, #3
 8005926:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2200      	movs	r2, #0
 8005930:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	6812      	ldr	r2, [r2, #0]
 800593c:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8005940:	f043 0302 	orr.w	r3, r3, #2
 8005944:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800594a:	4a53      	ldr	r2, [pc, #332]	; (8005a98 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800594c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005952:	4a52      	ldr	r2, [pc, #328]	; (8005a9c <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8005954:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800595a:	2200      	movs	r2, #0
 800595c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005962:	2b01      	cmp	r3, #1
 8005964:	d002      	beq.n	800596c <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8005966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005968:	025b      	lsls	r3, r3, #9
 800596a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005974:	4618      	mov	r0, r3
 8005976:	f002 fd63 	bl	8008440 <SDMMC_CmdBlockLength>
 800597a:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800597c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00f      	beq.n	80059a2 <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a46      	ldr	r2, [pc, #280]	; (8005aa0 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8005988:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800598e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005990:	431a      	orrs	r2, r3
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2201      	movs	r2, #1
 800599a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e075      	b.n	8005a8e <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d90a      	bls.n	80059be <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	22a0      	movs	r2, #160	; 0xa0
 80059ac:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059b4:	4618      	mov	r0, r3
 80059b6:	f002 fdcb 	bl	8008550 <SDMMC_CmdWriteMultiBlock>
 80059ba:	62f8      	str	r0, [r7, #44]	; 0x2c
 80059bc:	e009      	b.n	80059d2 <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2290      	movs	r2, #144	; 0x90
 80059c2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059ca:	4618      	mov	r0, r3
 80059cc:	f002 fd9e 	bl	800850c <SDMMC_CmdWriteSingleBlock>
 80059d0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80059d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d012      	beq.n	80059fe <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a30      	ldr	r2, [pc, #192]	; (8005aa0 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80059de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e6:	431a      	orrs	r2, r3
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e047      	b.n	8005a8e <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80059fe:	4b29      	ldr	r3, [pc, #164]	; (8005aa4 <HAL_SD_WriteBlocks_DMA+0x1dc>)
 8005a00:	2201      	movs	r2, #1
 8005a02:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005a08:	68b9      	ldr	r1, [r7, #8]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	3380      	adds	r3, #128	; 0x80
 8005a10:	461a      	mov	r2, r3
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	025b      	lsls	r3, r3, #9
 8005a16:	089b      	lsrs	r3, r3, #2
 8005a18:	f7fc fec2 	bl	80027a0 <HAL_DMA_Start_IT>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d01c      	beq.n	8005a5c <HAL_SD_WriteBlocks_DMA+0x194>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	6812      	ldr	r2, [r2, #0]
 8005a2c:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8005a30:	f023 0302 	bic.w	r3, r3, #2
 8005a34:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a19      	ldr	r2, [pc, #100]	; (8005aa0 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8005a3c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a42:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2200      	movs	r2, #0
 8005a56:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e018      	b.n	8005a8e <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8005a60:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	025b      	lsls	r3, r3, #9
 8005a66:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005a68:	2390      	movs	r3, #144	; 0x90
 8005a6a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005a70:	2300      	movs	r3, #0
 8005a72:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8005a74:	2301      	movs	r3, #1
 8005a76:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f107 0210 	add.w	r2, r7, #16
 8005a80:	4611      	mov	r1, r2
 8005a82:	4618      	mov	r0, r3
 8005a84:	f002 fcb0 	bl	80083e8 <SDIO_ConfigData>

      return HAL_OK;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	e000      	b.n	8005a8e <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 8005a8c:	2302      	movs	r3, #2
  }
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3730      	adds	r7, #48	; 0x30
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	bf00      	nop
 8005a98:	080062dd 	.word	0x080062dd
 8005a9c:	08006379 	.word	0x08006379
 8005aa0:	004005ff 	.word	0x004005ff
 8005aa4:	4225858c 	.word	0x4225858c

08005aa8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab4:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005abc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d008      	beq.n	8005ad6 <HAL_SD_IRQHandler+0x2e>
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f003 0308 	and.w	r3, r3, #8
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d003      	beq.n	8005ad6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 fff6 	bl	8006ac0 <SD_Read_IT>
 8005ad4:	e165      	b.n	8005da2 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	f000 808f 	beq.w	8005c04 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005aee:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	6812      	ldr	r2, [r2, #0]
 8005afa:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8005afe:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8005b02:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f022 0201 	bic.w	r2, r2, #1
 8005b12:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f003 0308 	and.w	r3, r3, #8
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d039      	beq.n	8005b92 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f003 0302 	and.w	r3, r3, #2
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d104      	bne.n	8005b32 <HAL_SD_IRQHandler+0x8a>
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f003 0320 	and.w	r3, r3, #32
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d011      	beq.n	8005b56 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4618      	mov	r0, r3
 8005b38:	f002 fd2c 	bl	8008594 <SDMMC_CmdStopTransfer>
 8005b3c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d008      	beq.n	8005b56 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	431a      	orrs	r2, r3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 f943 	bl	8005ddc <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f240 523a 	movw	r2, #1338	; 0x53a
 8005b5e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f003 0301 	and.w	r3, r3, #1
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d104      	bne.n	8005b82 <HAL_SD_IRQHandler+0xda>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f003 0302 	and.w	r3, r3, #2
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d003      	beq.n	8005b8a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 f920 	bl	8005dc8 <HAL_SD_RxCpltCallback>
 8005b88:	e10b      	b.n	8005da2 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f000 f912 	bl	8005db4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005b90:	e107      	b.n	8005da2 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	f000 8102 	beq.w	8005da2 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f003 0320 	and.w	r3, r3, #32
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d011      	beq.n	8005bcc <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4618      	mov	r0, r3
 8005bae:	f002 fcf1 	bl	8008594 <SDMMC_CmdStopTransfer>
 8005bb2:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d008      	beq.n	8005bcc <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	431a      	orrs	r2, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 f908 	bl	8005ddc <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f003 0301 	and.w	r3, r3, #1
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	f040 80e5 	bne.w	8005da2 <HAL_SD_IRQHandler+0x2fa>
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f003 0302 	and.w	r3, r3, #2
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	f040 80df 	bne.w	8005da2 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f022 0208 	bic.w	r2, r2, #8
 8005bf2:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f000 f8d9 	bl	8005db4 <HAL_SD_TxCpltCallback>
}
 8005c02:	e0ce      	b.n	8005da2 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d008      	beq.n	8005c24 <HAL_SD_IRQHandler+0x17c>
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f003 0308 	and.w	r3, r3, #8
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d003      	beq.n	8005c24 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 ffa0 	bl	8006b62 <SD_Write_IT>
 8005c22:	e0be      	b.n	8005da2 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c2a:	f240 233a 	movw	r3, #570	; 0x23a
 8005c2e:	4013      	ands	r3, r2
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	f000 80b6 	beq.w	8005da2 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c3c:	f003 0302 	and.w	r3, r3, #2
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d005      	beq.n	8005c50 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c48:	f043 0202 	orr.w	r2, r3, #2
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c56:	f003 0308 	and.w	r3, r3, #8
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d005      	beq.n	8005c6a <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c62:	f043 0208 	orr.w	r2, r3, #8
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c70:	f003 0320 	and.w	r3, r3, #32
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d005      	beq.n	8005c84 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c7c:	f043 0220 	orr.w	r2, r3, #32
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c8a:	f003 0310 	and.w	r3, r3, #16
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d005      	beq.n	8005c9e <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c96:	f043 0210 	orr.w	r2, r3, #16
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ca4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d005      	beq.n	8005cb8 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb0:	f043 0208 	orr.w	r2, r3, #8
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f240 723a 	movw	r2, #1850	; 0x73a
 8005cc0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	6812      	ldr	r2, [r2, #0]
 8005ccc:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8005cd0:	f023 0302 	bic.w	r3, r3, #2
 8005cd4:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f002 fc5a 	bl	8008594 <SDMMC_CmdStopTransfer>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce6:	431a      	orrs	r2, r3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f003 0308 	and.w	r3, r3, #8
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d00a      	beq.n	8005d0c <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 f869 	bl	8005ddc <HAL_SD_ErrorCallback>
}
 8005d0a:	e04a      	b.n	8005da2 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d045      	beq.n	8005da2 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f003 0310 	and.w	r3, r3, #16
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d104      	bne.n	8005d2a <HAL_SD_IRQHandler+0x282>
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f003 0320 	and.w	r3, r3, #32
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d011      	beq.n	8005d4e <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d2e:	4a1f      	ldr	r2, [pc, #124]	; (8005dac <HAL_SD_IRQHandler+0x304>)
 8005d30:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d36:	4618      	mov	r0, r3
 8005d38:	f7fc fd8a 	bl	8002850 <HAL_DMA_Abort_IT>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d02f      	beq.n	8005da2 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d46:	4618      	mov	r0, r3
 8005d48:	f000 fb68 	bl	800641c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005d4c:	e029      	b.n	8005da2 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f003 0301 	and.w	r3, r3, #1
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d104      	bne.n	8005d62 <HAL_SD_IRQHandler+0x2ba>
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f003 0302 	and.w	r3, r3, #2
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d011      	beq.n	8005d86 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d66:	4a12      	ldr	r2, [pc, #72]	; (8005db0 <HAL_SD_IRQHandler+0x308>)
 8005d68:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f7fc fd6e 	bl	8002850 <HAL_DMA_Abort_IT>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d013      	beq.n	8005da2 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f000 fb83 	bl	800648a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005d84:	e00d      	b.n	8005da2 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 f828 	bl	8005df0 <HAL_SD_AbortCallback>
}
 8005da0:	e7ff      	b.n	8005da2 <HAL_SD_IRQHandler+0x2fa>
 8005da2:	bf00      	nop
 8005da4:	3710      	adds	r7, #16
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	0800641d 	.word	0x0800641d
 8005db0:	0800648b 	.word	0x0800648b

08005db4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: Pointer to SD handle
  * @retval None
  */
__weak void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_TxCpltCallback can be implemented in the user file
   */
}
 8005dbc:	bf00      	nop
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_RxCpltCallback can be implemented in the user file
   */
}
 8005dd0:	bf00      	nop
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8005de4:	bf00      	nop
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_AbortCallback can be implemented in the user file
   */
}
 8005df8:	bf00      	nop
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e12:	0f9b      	lsrs	r3, r3, #30
 8005e14:	b2da      	uxtb	r2, r3
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e1e:	0e9b      	lsrs	r3, r3, #26
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	f003 030f 	and.w	r3, r3, #15
 8005e26:	b2da      	uxtb	r2, r3
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e30:	0e1b      	lsrs	r3, r3, #24
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	f003 0303 	and.w	r3, r3, #3
 8005e38:	b2da      	uxtb	r2, r3
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e42:	0c1b      	lsrs	r3, r3, #16
 8005e44:	b2da      	uxtb	r2, r3
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e4e:	0a1b      	lsrs	r3, r3, #8
 8005e50:	b2da      	uxtb	r2, r3
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e5a:	b2da      	uxtb	r2, r3
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e64:	0d1b      	lsrs	r3, r3, #20
 8005e66:	b29a      	uxth	r2, r3
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e70:	0c1b      	lsrs	r3, r3, #16
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	f003 030f 	and.w	r3, r3, #15
 8005e78:	b2da      	uxtb	r2, r3
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e82:	0bdb      	lsrs	r3, r3, #15
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	f003 0301 	and.w	r3, r3, #1
 8005e8a:	b2da      	uxtb	r2, r3
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e94:	0b9b      	lsrs	r3, r3, #14
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	f003 0301 	and.w	r3, r3, #1
 8005e9c:	b2da      	uxtb	r2, r3
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ea6:	0b5b      	lsrs	r3, r3, #13
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	f003 0301 	and.w	r3, r3, #1
 8005eae:	b2da      	uxtb	r2, r3
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005eb8:	0b1b      	lsrs	r3, r3, #12
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	f003 0301 	and.w	r3, r3, #1
 8005ec0:	b2da      	uxtb	r2, r3
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d163      	bne.n	8005f9c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ed8:	009a      	lsls	r2, r3, #2
 8005eda:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005ede:	4013      	ands	r3, r2
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005ee4:	0f92      	lsrs	r2, r2, #30
 8005ee6:	431a      	orrs	r2, r3
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ef0:	0edb      	lsrs	r3, r3, #27
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	f003 0307 	and.w	r3, r3, #7
 8005ef8:	b2da      	uxtb	r2, r3
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f02:	0e1b      	lsrs	r3, r3, #24
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	f003 0307 	and.w	r3, r3, #7
 8005f0a:	b2da      	uxtb	r2, r3
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f14:	0d5b      	lsrs	r3, r3, #21
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	f003 0307 	and.w	r3, r3, #7
 8005f1c:	b2da      	uxtb	r2, r3
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f26:	0c9b      	lsrs	r3, r3, #18
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	f003 0307 	and.w	r3, r3, #7
 8005f2e:	b2da      	uxtb	r2, r3
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f38:	0bdb      	lsrs	r3, r3, #15
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	f003 0307 	and.w	r3, r3, #7
 8005f40:	b2da      	uxtb	r2, r3
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	1c5a      	adds	r2, r3, #1
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	7e1b      	ldrb	r3, [r3, #24]
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	f003 0307 	and.w	r3, r3, #7
 8005f5a:	3302      	adds	r3, #2
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005f66:	fb02 f203 	mul.w	r2, r2, r3
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	7a1b      	ldrb	r3, [r3, #8]
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	f003 030f 	and.w	r3, r3, #15
 8005f78:	2201      	movs	r2, #1
 8005f7a:	409a      	lsls	r2, r3
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005f88:	0a52      	lsrs	r2, r2, #9
 8005f8a:	fb02 f203 	mul.w	r2, r2, r3
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f98:	661a      	str	r2, [r3, #96]	; 0x60
 8005f9a:	e031      	b.n	8006000 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d11d      	bne.n	8005fe0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fa8:	041b      	lsls	r3, r3, #16
 8005faa:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fb2:	0c1b      	lsrs	r3, r3, #16
 8005fb4:	431a      	orrs	r2, r3
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	691b      	ldr	r3, [r3, #16]
 8005fbe:	3301      	adds	r3, #1
 8005fc0:	029a      	lsls	r2, r3, #10
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fd4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	661a      	str	r2, [r3, #96]	; 0x60
 8005fde:	e00f      	b.n	8006000 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a58      	ldr	r2, [pc, #352]	; (8006148 <HAL_SD_GetCardCSD+0x344>)
 8005fe6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e09d      	b.n	800613c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006004:	0b9b      	lsrs	r3, r3, #14
 8006006:	b2db      	uxtb	r3, r3
 8006008:	f003 0301 	and.w	r3, r3, #1
 800600c:	b2da      	uxtb	r2, r3
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006016:	09db      	lsrs	r3, r3, #7
 8006018:	b2db      	uxtb	r3, r3
 800601a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800601e:	b2da      	uxtb	r2, r3
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006028:	b2db      	uxtb	r3, r3
 800602a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800602e:	b2da      	uxtb	r2, r3
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006038:	0fdb      	lsrs	r3, r3, #31
 800603a:	b2da      	uxtb	r2, r3
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006044:	0f5b      	lsrs	r3, r3, #29
 8006046:	b2db      	uxtb	r3, r3
 8006048:	f003 0303 	and.w	r3, r3, #3
 800604c:	b2da      	uxtb	r2, r3
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006056:	0e9b      	lsrs	r3, r3, #26
 8006058:	b2db      	uxtb	r3, r3
 800605a:	f003 0307 	and.w	r3, r3, #7
 800605e:	b2da      	uxtb	r2, r3
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006068:	0d9b      	lsrs	r3, r3, #22
 800606a:	b2db      	uxtb	r3, r3
 800606c:	f003 030f 	and.w	r3, r3, #15
 8006070:	b2da      	uxtb	r2, r3
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800607a:	0d5b      	lsrs	r3, r3, #21
 800607c:	b2db      	uxtb	r3, r3
 800607e:	f003 0301 	and.w	r3, r3, #1
 8006082:	b2da      	uxtb	r2, r3
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006096:	0c1b      	lsrs	r3, r3, #16
 8006098:	b2db      	uxtb	r3, r3
 800609a:	f003 0301 	and.w	r3, r3, #1
 800609e:	b2da      	uxtb	r2, r3
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060aa:	0bdb      	lsrs	r3, r3, #15
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	f003 0301 	and.w	r3, r3, #1
 80060b2:	b2da      	uxtb	r2, r3
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060be:	0b9b      	lsrs	r3, r3, #14
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	f003 0301 	and.w	r3, r3, #1
 80060c6:	b2da      	uxtb	r2, r3
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060d2:	0b5b      	lsrs	r3, r3, #13
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	f003 0301 	and.w	r3, r3, #1
 80060da:	b2da      	uxtb	r2, r3
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060e6:	0b1b      	lsrs	r3, r3, #12
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	f003 0301 	and.w	r3, r3, #1
 80060ee:	b2da      	uxtb	r2, r3
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060fa:	0a9b      	lsrs	r3, r3, #10
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	f003 0303 	and.w	r3, r3, #3
 8006102:	b2da      	uxtb	r2, r3
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800610e:	0a1b      	lsrs	r3, r3, #8
 8006110:	b2db      	uxtb	r3, r3
 8006112:	f003 0303 	and.w	r3, r3, #3
 8006116:	b2da      	uxtb	r2, r3
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006122:	085b      	lsrs	r3, r3, #1
 8006124:	b2db      	uxtb	r3, r3
 8006126:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800612a:	b2da      	uxtb	r2, r3
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	2201      	movs	r2, #1
 8006136:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	4618      	mov	r0, r3
 800613e:	370c      	adds	r7, #12
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr
 8006148:	004005ff 	.word	0x004005ff

0800614c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006196:	2300      	movs	r3, #0
}
 8006198:	4618      	mov	r0, r3
 800619a:	370c      	adds	r7, #12
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80061a4:	b5b0      	push	{r4, r5, r7, lr}
 80061a6:	b08e      	sub	sp, #56	; 0x38
 80061a8:	af04      	add	r7, sp, #16
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2203      	movs	r2, #3
 80061b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ba:	2b03      	cmp	r3, #3
 80061bc:	d02e      	beq.n	800621c <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061c4:	d106      	bne.n	80061d4 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ca:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	639a      	str	r2, [r3, #56]	; 0x38
 80061d2:	e029      	b.n	8006228 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061da:	d10a      	bne.n	80061f2 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f000 fb0f 	bl	8006800 <SD_WideBus_Enable>
 80061e2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ea:	431a      	orrs	r2, r3
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	639a      	str	r2, [r3, #56]	; 0x38
 80061f0:	e01a      	b.n	8006228 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d10a      	bne.n	800620e <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 fb4c 	bl	8006896 <SD_WideBus_Disable>
 80061fe:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006206:	431a      	orrs	r2, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	639a      	str	r2, [r3, #56]	; 0x38
 800620c:	e00c      	b.n	8006228 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006212:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	639a      	str	r2, [r3, #56]	; 0x38
 800621a:	e005      	b.n	8006228 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006220:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800622c:	2b00      	cmp	r3, #0
 800622e:	d009      	beq.n	8006244 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a18      	ldr	r2, [pc, #96]	; (8006298 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8006236:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	e024      	b.n	800628e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	695b      	ldr	r3, [r3, #20]
 800625e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	699b      	ldr	r3, [r3, #24]
 8006264:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681d      	ldr	r5, [r3, #0]
 800626a:	466c      	mov	r4, sp
 800626c:	f107 0318 	add.w	r3, r7, #24
 8006270:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006274:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006278:	f107 030c 	add.w	r3, r7, #12
 800627c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800627e:	4628      	mov	r0, r5
 8006280:	f002 f802 	bl	8008288 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800628c:	2300      	movs	r3, #0
}
 800628e:	4618      	mov	r0, r3
 8006290:	3728      	adds	r7, #40	; 0x28
 8006292:	46bd      	mov	sp, r7
 8006294:	bdb0      	pop	{r4, r5, r7, pc}
 8006296:	bf00      	nop
 8006298:	004005ff 	.word	0x004005ff

0800629c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b086      	sub	sp, #24
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80062a4:	2300      	movs	r3, #0
 80062a6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80062a8:	f107 030c 	add.w	r3, r7, #12
 80062ac:	4619      	mov	r1, r3
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 fa7e 	bl	80067b0 <SD_SendStatus>
 80062b4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d005      	beq.n	80062c8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	431a      	orrs	r2, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	0a5b      	lsrs	r3, r3, #9
 80062cc:	f003 030f 	and.w	r3, r3, #15
 80062d0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80062d2:	693b      	ldr	r3, [r7, #16]
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3718      	adds	r7, #24
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80062dc:	b480      	push	{r7}
 80062de:	b085      	sub	sp, #20
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062f8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80062fa:	bf00      	nop
 80062fc:	3714      	adds	r7, #20
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr

08006306 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006306:	b580      	push	{r7, lr}
 8006308:	b084      	sub	sp, #16
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006312:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006318:	2b82      	cmp	r3, #130	; 0x82
 800631a:	d111      	bne.n	8006340 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4618      	mov	r0, r3
 8006322:	f002 f937 	bl	8008594 <SDMMC_CmdStopTransfer>
 8006326:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d008      	beq.n	8006340 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	431a      	orrs	r2, r3
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800633a:	68f8      	ldr	r0, [r7, #12]
 800633c:	f7ff fd4e 	bl	8005ddc <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f022 0208 	bic.w	r2, r2, #8
 800634e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f240 523a 	movw	r2, #1338	; 0x53a
 8006358:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2201      	movs	r2, #1
 800635e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2200      	movs	r2, #0
 8006366:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8006368:	68f8      	ldr	r0, [r7, #12]
 800636a:	f7ff fd2d 	bl	8005dc8 <HAL_SD_RxCpltCallback>
#endif
}
 800636e:	bf00      	nop
 8006370:	3710      	adds	r7, #16
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
	...

08006378 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b086      	sub	sp, #24
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006384:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f7fc fc0e 	bl	8002ba8 <HAL_DMA_GetError>
 800638c:	4603      	mov	r3, r0
 800638e:	2b02      	cmp	r3, #2
 8006390:	d03e      	beq.n	8006410 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006398:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800639e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063a0:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d002      	beq.n	80063ae <SD_DMAError+0x36>
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d12d      	bne.n	800640a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a19      	ldr	r2, [pc, #100]	; (8006418 <SD_DMAError+0xa0>)
 80063b4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80063c4:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80063d2:	6978      	ldr	r0, [r7, #20]
 80063d4:	f7ff ff62 	bl	800629c <HAL_SD_GetCardState>
 80063d8:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	2b06      	cmp	r3, #6
 80063de:	d002      	beq.n	80063e6 <SD_DMAError+0x6e>
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	2b05      	cmp	r3, #5
 80063e4:	d10a      	bne.n	80063fc <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4618      	mov	r0, r3
 80063ec:	f002 f8d2 	bl	8008594 <SDMMC_CmdStopTransfer>
 80063f0:	4602      	mov	r2, r0
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f6:	431a      	orrs	r2, r3
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	2201      	movs	r2, #1
 8006400:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	2200      	movs	r2, #0
 8006408:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800640a:	6978      	ldr	r0, [r7, #20]
 800640c:	f7ff fce6 	bl	8005ddc <HAL_SD_ErrorCallback>
#endif
  }
}
 8006410:	bf00      	nop
 8006412:	3718      	adds	r7, #24
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}
 8006418:	004005ff 	.word	0x004005ff

0800641c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006428:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f240 523a 	movw	r2, #1338	; 0x53a
 8006432:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006434:	68f8      	ldr	r0, [r7, #12]
 8006436:	f7ff ff31 	bl	800629c <HAL_SD_GetCardState>
 800643a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2200      	movs	r2, #0
 8006448:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	2b06      	cmp	r3, #6
 800644e:	d002      	beq.n	8006456 <SD_DMATxAbort+0x3a>
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	2b05      	cmp	r3, #5
 8006454:	d10a      	bne.n	800646c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4618      	mov	r0, r3
 800645c:	f002 f89a 	bl	8008594 <SDMMC_CmdStopTransfer>
 8006460:	4602      	mov	r2, r0
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006466:	431a      	orrs	r2, r3
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006470:	2b00      	cmp	r3, #0
 8006472:	d103      	bne.n	800647c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006474:	68f8      	ldr	r0, [r7, #12]
 8006476:	f7ff fcbb 	bl	8005df0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800647a:	e002      	b.n	8006482 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800647c:	68f8      	ldr	r0, [r7, #12]
 800647e:	f7ff fcad 	bl	8005ddc <HAL_SD_ErrorCallback>
}
 8006482:	bf00      	nop
 8006484:	3710      	adds	r7, #16
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}

0800648a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800648a:	b580      	push	{r7, lr}
 800648c:	b084      	sub	sp, #16
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006496:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f240 523a 	movw	r2, #1338	; 0x53a
 80064a0:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80064a2:	68f8      	ldr	r0, [r7, #12]
 80064a4:	f7ff fefa 	bl	800629c <HAL_SD_GetCardState>
 80064a8:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2201      	movs	r2, #1
 80064ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	2b06      	cmp	r3, #6
 80064bc:	d002      	beq.n	80064c4 <SD_DMARxAbort+0x3a>
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	2b05      	cmp	r3, #5
 80064c2:	d10a      	bne.n	80064da <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4618      	mov	r0, r3
 80064ca:	f002 f863 	bl	8008594 <SDMMC_CmdStopTransfer>
 80064ce:	4602      	mov	r2, r0
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d4:	431a      	orrs	r2, r3
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d103      	bne.n	80064ea <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80064e2:	68f8      	ldr	r0, [r7, #12]
 80064e4:	f7ff fc84 	bl	8005df0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80064e8:	e002      	b.n	80064f0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80064ea:	68f8      	ldr	r0, [r7, #12]
 80064ec:	f7ff fc76 	bl	8005ddc <HAL_SD_ErrorCallback>
}
 80064f0:	bf00      	nop
 80064f2:	3710      	adds	r7, #16
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80064f8:	b5b0      	push	{r4, r5, r7, lr}
 80064fa:	b094      	sub	sp, #80	; 0x50
 80064fc:	af04      	add	r7, sp, #16
 80064fe:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006500:	2301      	movs	r3, #1
 8006502:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4618      	mov	r0, r3
 800650a:	f001 ff15 	bl	8008338 <SDIO_GetPowerState>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d102      	bne.n	800651a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006514:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006518:	e0b7      	b.n	800668a <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800651e:	2b03      	cmp	r3, #3
 8006520:	d02f      	beq.n	8006582 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4618      	mov	r0, r3
 8006528:	f002 f93e 	bl	80087a8 <SDMMC_CmdSendCID>
 800652c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800652e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006530:	2b00      	cmp	r3, #0
 8006532:	d001      	beq.n	8006538 <SD_InitCard+0x40>
    {
      return errorstate;
 8006534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006536:	e0a8      	b.n	800668a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	2100      	movs	r1, #0
 800653e:	4618      	mov	r0, r3
 8006540:	f001 ff3f 	bl	80083c2 <SDIO_GetResponse>
 8006544:	4602      	mov	r2, r0
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2104      	movs	r1, #4
 8006550:	4618      	mov	r0, r3
 8006552:	f001 ff36 	bl	80083c2 <SDIO_GetResponse>
 8006556:	4602      	mov	r2, r0
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	2108      	movs	r1, #8
 8006562:	4618      	mov	r0, r3
 8006564:	f001 ff2d 	bl	80083c2 <SDIO_GetResponse>
 8006568:	4602      	mov	r2, r0
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	210c      	movs	r1, #12
 8006574:	4618      	mov	r0, r3
 8006576:	f001 ff24 	bl	80083c2 <SDIO_GetResponse>
 800657a:	4602      	mov	r2, r0
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006586:	2b03      	cmp	r3, #3
 8006588:	d00d      	beq.n	80065a6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f107 020e 	add.w	r2, r7, #14
 8006592:	4611      	mov	r1, r2
 8006594:	4618      	mov	r0, r3
 8006596:	f002 f944 	bl	8008822 <SDMMC_CmdSetRelAdd>
 800659a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800659c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d001      	beq.n	80065a6 <SD_InitCard+0xae>
    {
      return errorstate;
 80065a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065a4:	e071      	b.n	800668a <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065aa:	2b03      	cmp	r3, #3
 80065ac:	d036      	beq.n	800661c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80065ae:	89fb      	ldrh	r3, [r7, #14]
 80065b0:	461a      	mov	r2, r3
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065be:	041b      	lsls	r3, r3, #16
 80065c0:	4619      	mov	r1, r3
 80065c2:	4610      	mov	r0, r2
 80065c4:	f002 f90e 	bl	80087e4 <SDMMC_CmdSendCSD>
 80065c8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80065ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d001      	beq.n	80065d4 <SD_InitCard+0xdc>
    {
      return errorstate;
 80065d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065d2:	e05a      	b.n	800668a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2100      	movs	r1, #0
 80065da:	4618      	mov	r0, r3
 80065dc:	f001 fef1 	bl	80083c2 <SDIO_GetResponse>
 80065e0:	4602      	mov	r2, r0
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2104      	movs	r1, #4
 80065ec:	4618      	mov	r0, r3
 80065ee:	f001 fee8 	bl	80083c2 <SDIO_GetResponse>
 80065f2:	4602      	mov	r2, r0
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	2108      	movs	r1, #8
 80065fe:	4618      	mov	r0, r3
 8006600:	f001 fedf 	bl	80083c2 <SDIO_GetResponse>
 8006604:	4602      	mov	r2, r0
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	210c      	movs	r1, #12
 8006610:	4618      	mov	r0, r3
 8006612:	f001 fed6 	bl	80083c2 <SDIO_GetResponse>
 8006616:	4602      	mov	r2, r0
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2104      	movs	r1, #4
 8006622:	4618      	mov	r0, r3
 8006624:	f001 fecd 	bl	80083c2 <SDIO_GetResponse>
 8006628:	4603      	mov	r3, r0
 800662a:	0d1a      	lsrs	r2, r3, #20
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006630:	f107 0310 	add.w	r3, r7, #16
 8006634:	4619      	mov	r1, r3
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f7ff fbe4 	bl	8005e04 <HAL_SD_GetCardCSD>
 800663c:	4603      	mov	r3, r0
 800663e:	2b00      	cmp	r3, #0
 8006640:	d002      	beq.n	8006648 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006642:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006646:	e020      	b.n	800668a <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6819      	ldr	r1, [r3, #0]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006650:	041b      	lsls	r3, r3, #16
 8006652:	f04f 0400 	mov.w	r4, #0
 8006656:	461a      	mov	r2, r3
 8006658:	4623      	mov	r3, r4
 800665a:	4608      	mov	r0, r1
 800665c:	f001 ffbc 	bl	80085d8 <SDMMC_CmdSelDesel>
 8006660:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006664:	2b00      	cmp	r3, #0
 8006666:	d001      	beq.n	800666c <SD_InitCard+0x174>
  {
    return errorstate;
 8006668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800666a:	e00e      	b.n	800668a <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681d      	ldr	r5, [r3, #0]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	466c      	mov	r4, sp
 8006674:	f103 0210 	add.w	r2, r3, #16
 8006678:	ca07      	ldmia	r2, {r0, r1, r2}
 800667a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800667e:	3304      	adds	r3, #4
 8006680:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006682:	4628      	mov	r0, r5
 8006684:	f001 fe00 	bl	8008288 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006688:	2300      	movs	r3, #0
}
 800668a:	4618      	mov	r0, r3
 800668c:	3740      	adds	r7, #64	; 0x40
 800668e:	46bd      	mov	sp, r7
 8006690:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006694 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b086      	sub	sp, #24
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800669c:	2300      	movs	r3, #0
 800669e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80066a0:	2300      	movs	r3, #0
 80066a2:	617b      	str	r3, [r7, #20]
 80066a4:	2300      	movs	r3, #0
 80066a6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4618      	mov	r0, r3
 80066ae:	f001 ffb6 	bl	800861e <SDMMC_CmdGoIdleState>
 80066b2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d001      	beq.n	80066be <SD_PowerON+0x2a>
  {
    return errorstate;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	e072      	b.n	80067a4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4618      	mov	r0, r3
 80066c4:	f001 ffc9 	bl	800865a <SDMMC_CmdOperCond>
 80066c8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d00d      	beq.n	80066ec <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4618      	mov	r0, r3
 80066dc:	f001 ff9f 	bl	800861e <SDMMC_CmdGoIdleState>
 80066e0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d004      	beq.n	80066f2 <SD_PowerON+0x5e>
    {
      return errorstate;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	e05b      	b.n	80067a4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2201      	movs	r2, #1
 80066f0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d137      	bne.n	800676a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	2100      	movs	r1, #0
 8006700:	4618      	mov	r0, r3
 8006702:	f001 ffc9 	bl	8008698 <SDMMC_CmdAppCommand>
 8006706:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d02d      	beq.n	800676a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800670e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006712:	e047      	b.n	80067a4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	2100      	movs	r1, #0
 800671a:	4618      	mov	r0, r3
 800671c:	f001 ffbc 	bl	8008698 <SDMMC_CmdAppCommand>
 8006720:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d001      	beq.n	800672c <SD_PowerON+0x98>
    {
      return errorstate;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	e03b      	b.n	80067a4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	491e      	ldr	r1, [pc, #120]	; (80067ac <SD_PowerON+0x118>)
 8006732:	4618      	mov	r0, r3
 8006734:	f001 ffd2 	bl	80086dc <SDMMC_CmdAppOperCommand>
 8006738:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d002      	beq.n	8006746 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006740:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006744:	e02e      	b.n	80067a4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2100      	movs	r1, #0
 800674c:	4618      	mov	r0, r3
 800674e:	f001 fe38 	bl	80083c2 <SDIO_GetResponse>
 8006752:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	0fdb      	lsrs	r3, r3, #31
 8006758:	2b01      	cmp	r3, #1
 800675a:	d101      	bne.n	8006760 <SD_PowerON+0xcc>
 800675c:	2301      	movs	r3, #1
 800675e:	e000      	b.n	8006762 <SD_PowerON+0xce>
 8006760:	2300      	movs	r3, #0
 8006762:	613b      	str	r3, [r7, #16]

    count++;
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	3301      	adds	r3, #1
 8006768:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006770:	4293      	cmp	r3, r2
 8006772:	d802      	bhi.n	800677a <SD_PowerON+0xe6>
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d0cc      	beq.n	8006714 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006780:	4293      	cmp	r3, r2
 8006782:	d902      	bls.n	800678a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006784:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006788:	e00c      	b.n	80067a4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006790:	2b00      	cmp	r3, #0
 8006792:	d003      	beq.n	800679c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	645a      	str	r2, [r3, #68]	; 0x44
 800679a:	e002      	b.n	80067a2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80067a2:	2300      	movs	r3, #0
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3718      	adds	r7, #24
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	c1100000 	.word	0xc1100000

080067b0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d102      	bne.n	80067c6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80067c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80067c4:	e018      	b.n	80067f8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067ce:	041b      	lsls	r3, r3, #16
 80067d0:	4619      	mov	r1, r3
 80067d2:	4610      	mov	r0, r2
 80067d4:	f002 f846 	bl	8008864 <SDMMC_CmdSendStatus>
 80067d8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d001      	beq.n	80067e4 <SD_SendStatus+0x34>
  {
    return errorstate;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	e009      	b.n	80067f8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2100      	movs	r1, #0
 80067ea:	4618      	mov	r0, r3
 80067ec:	f001 fde9 	bl	80083c2 <SDIO_GetResponse>
 80067f0:	4602      	mov	r2, r0
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80067f6:	2300      	movs	r3, #0
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3710      	adds	r7, #16
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b086      	sub	sp, #24
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006808:	2300      	movs	r3, #0
 800680a:	60fb      	str	r3, [r7, #12]
 800680c:	2300      	movs	r3, #0
 800680e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	2100      	movs	r1, #0
 8006816:	4618      	mov	r0, r3
 8006818:	f001 fdd3 	bl	80083c2 <SDIO_GetResponse>
 800681c:	4603      	mov	r3, r0
 800681e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006822:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006826:	d102      	bne.n	800682e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006828:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800682c:	e02f      	b.n	800688e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800682e:	f107 030c 	add.w	r3, r7, #12
 8006832:	4619      	mov	r1, r3
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 f879 	bl	800692c <SD_FindSCR>
 800683a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d001      	beq.n	8006846 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	e023      	b.n	800688e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800684c:	2b00      	cmp	r3, #0
 800684e:	d01c      	beq.n	800688a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006858:	041b      	lsls	r3, r3, #16
 800685a:	4619      	mov	r1, r3
 800685c:	4610      	mov	r0, r2
 800685e:	f001 ff1b 	bl	8008698 <SDMMC_CmdAppCommand>
 8006862:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d001      	beq.n	800686e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	e00f      	b.n	800688e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	2102      	movs	r1, #2
 8006874:	4618      	mov	r0, r3
 8006876:	f001 ff54 	bl	8008722 <SDMMC_CmdBusWidth>
 800687a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d001      	beq.n	8006886 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	e003      	b.n	800688e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006886:	2300      	movs	r3, #0
 8006888:	e001      	b.n	800688e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800688a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800688e:	4618      	mov	r0, r3
 8006890:	3718      	adds	r7, #24
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}

08006896 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006896:	b580      	push	{r7, lr}
 8006898:	b086      	sub	sp, #24
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800689e:	2300      	movs	r3, #0
 80068a0:	60fb      	str	r3, [r7, #12]
 80068a2:	2300      	movs	r3, #0
 80068a4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	2100      	movs	r1, #0
 80068ac:	4618      	mov	r0, r3
 80068ae:	f001 fd88 	bl	80083c2 <SDIO_GetResponse>
 80068b2:	4603      	mov	r3, r0
 80068b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068bc:	d102      	bne.n	80068c4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80068be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80068c2:	e02f      	b.n	8006924 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80068c4:	f107 030c 	add.w	r3, r7, #12
 80068c8:	4619      	mov	r1, r3
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 f82e 	bl	800692c <SD_FindSCR>
 80068d0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d001      	beq.n	80068dc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	e023      	b.n	8006924 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d01c      	beq.n	8006920 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068ee:	041b      	lsls	r3, r3, #16
 80068f0:	4619      	mov	r1, r3
 80068f2:	4610      	mov	r0, r2
 80068f4:	f001 fed0 	bl	8008698 <SDMMC_CmdAppCommand>
 80068f8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d001      	beq.n	8006904 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	e00f      	b.n	8006924 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	2100      	movs	r1, #0
 800690a:	4618      	mov	r0, r3
 800690c:	f001 ff09 	bl	8008722 <SDMMC_CmdBusWidth>
 8006910:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d001      	beq.n	800691c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	e003      	b.n	8006924 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800691c:	2300      	movs	r3, #0
 800691e:	e001      	b.n	8006924 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006920:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006924:	4618      	mov	r0, r3
 8006926:	3718      	adds	r7, #24
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800692c:	b590      	push	{r4, r7, lr}
 800692e:	b08f      	sub	sp, #60	; 0x3c
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006936:	f7fb fd45 	bl	80023c4 <HAL_GetTick>
 800693a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800693c:	2300      	movs	r3, #0
 800693e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8006940:	2300      	movs	r3, #0
 8006942:	60bb      	str	r3, [r7, #8]
 8006944:	2300      	movs	r3, #0
 8006946:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	2108      	movs	r1, #8
 8006952:	4618      	mov	r0, r3
 8006954:	f001 fd74 	bl	8008440 <SDMMC_CmdBlockLength>
 8006958:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800695a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800695c:	2b00      	cmp	r3, #0
 800695e:	d001      	beq.n	8006964 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006962:	e0a9      	b.n	8006ab8 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800696c:	041b      	lsls	r3, r3, #16
 800696e:	4619      	mov	r1, r3
 8006970:	4610      	mov	r0, r2
 8006972:	f001 fe91 	bl	8008698 <SDMMC_CmdAppCommand>
 8006976:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697a:	2b00      	cmp	r3, #0
 800697c:	d001      	beq.n	8006982 <SD_FindSCR+0x56>
  {
    return errorstate;
 800697e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006980:	e09a      	b.n	8006ab8 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006982:	f04f 33ff 	mov.w	r3, #4294967295
 8006986:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006988:	2308      	movs	r3, #8
 800698a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800698c:	2330      	movs	r3, #48	; 0x30
 800698e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006990:	2302      	movs	r3, #2
 8006992:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006994:	2300      	movs	r3, #0
 8006996:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8006998:	2301      	movs	r3, #1
 800699a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f107 0210 	add.w	r2, r7, #16
 80069a4:	4611      	mov	r1, r2
 80069a6:	4618      	mov	r0, r3
 80069a8:	f001 fd1e 	bl	80083e8 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4618      	mov	r0, r3
 80069b2:	f001 fed8 	bl	8008766 <SDMMC_CmdSendSCR>
 80069b6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80069b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d022      	beq.n	8006a04 <SD_FindSCR+0xd8>
  {
    return errorstate;
 80069be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c0:	e07a      	b.n	8006ab8 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d00e      	beq.n	80069ee <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6819      	ldr	r1, [r3, #0]
 80069d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	f107 0208 	add.w	r2, r7, #8
 80069dc:	18d4      	adds	r4, r2, r3
 80069de:	4608      	mov	r0, r1
 80069e0:	f001 fc7d 	bl	80082de <SDIO_ReadFIFO>
 80069e4:	4603      	mov	r3, r0
 80069e6:	6023      	str	r3, [r4, #0]
      index++;
 80069e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069ea:	3301      	adds	r3, #1
 80069ec:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80069ee:	f7fb fce9 	bl	80023c4 <HAL_GetTick>
 80069f2:	4602      	mov	r2, r0
 80069f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f6:	1ad3      	subs	r3, r2, r3
 80069f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069fc:	d102      	bne.n	8006a04 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80069fe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006a02:	e059      	b.n	8006ab8 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a0a:	f240 432a 	movw	r3, #1066	; 0x42a
 8006a0e:	4013      	ands	r3, r2
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d0d6      	beq.n	80069c2 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a1a:	f003 0308 	and.w	r3, r3, #8
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d005      	beq.n	8006a2e <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	2208      	movs	r2, #8
 8006a28:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006a2a:	2308      	movs	r3, #8
 8006a2c:	e044      	b.n	8006ab8 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a34:	f003 0302 	and.w	r3, r3, #2
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d005      	beq.n	8006a48 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	2202      	movs	r2, #2
 8006a42:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006a44:	2302      	movs	r3, #2
 8006a46:	e037      	b.n	8006ab8 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a4e:	f003 0320 	and.w	r3, r3, #32
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d005      	beq.n	8006a62 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	2220      	movs	r2, #32
 8006a5c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006a5e:	2320      	movs	r3, #32
 8006a60:	e02a      	b.n	8006ab8 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f240 523a 	movw	r2, #1338	; 0x53a
 8006a6a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	061a      	lsls	r2, r3, #24
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	021b      	lsls	r3, r3, #8
 8006a74:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006a78:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	0a1b      	lsrs	r3, r3, #8
 8006a7e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006a82:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	0e1b      	lsrs	r3, r3, #24
 8006a88:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a8c:	601a      	str	r2, [r3, #0]
    scr++;
 8006a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a90:	3304      	adds	r3, #4
 8006a92:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	061a      	lsls	r2, r3, #24
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	021b      	lsls	r3, r3, #8
 8006a9c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006aa0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	0a1b      	lsrs	r3, r3, #8
 8006aa6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006aaa:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	0e1b      	lsrs	r3, r3, #24
 8006ab0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006ab6:	2300      	movs	r3, #0
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	373c      	adds	r7, #60	; 0x3c
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd90      	pop	{r4, r7, pc}

08006ac0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b086      	sub	sp, #24
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006acc:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d03f      	beq.n	8006b5a <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8006ada:	2300      	movs	r3, #0
 8006adc:	617b      	str	r3, [r7, #20]
 8006ade:	e033      	b.n	8006b48 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f001 fbfa 	bl	80082de <SDIO_ReadFIFO>
 8006aea:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	b2da      	uxtb	r2, r3
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	3301      	adds	r3, #1
 8006af8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	3b01      	subs	r3, #1
 8006afe:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	0a1b      	lsrs	r3, r3, #8
 8006b04:	b2da      	uxtb	r2, r3
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	3301      	adds	r3, #1
 8006b0e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	3b01      	subs	r3, #1
 8006b14:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	0c1b      	lsrs	r3, r3, #16
 8006b1a:	b2da      	uxtb	r2, r3
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	3301      	adds	r3, #1
 8006b24:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	3b01      	subs	r3, #1
 8006b2a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	0e1b      	lsrs	r3, r3, #24
 8006b30:	b2da      	uxtb	r2, r3
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	3301      	adds	r3, #1
 8006b3a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	3b01      	subs	r3, #1
 8006b40:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	3301      	adds	r3, #1
 8006b46:	617b      	str	r3, [r7, #20]
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	2b07      	cmp	r3, #7
 8006b4c:	d9c8      	bls.n	8006ae0 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	693a      	ldr	r2, [r7, #16]
 8006b58:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8006b5a:	bf00      	nop
 8006b5c:	3718      	adds	r7, #24
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}

08006b62 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b086      	sub	sp, #24
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6a1b      	ldr	r3, [r3, #32]
 8006b6e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b74:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d043      	beq.n	8006c04 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	617b      	str	r3, [r7, #20]
 8006b80:	e037      	b.n	8006bf2 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	3b01      	subs	r3, #1
 8006b92:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	021a      	lsls	r2, r3, #8
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	3b01      	subs	r3, #1
 8006baa:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	041a      	lsls	r2, r3, #16
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	3301      	adds	r3, #1
 8006bbc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	3b01      	subs	r3, #1
 8006bc2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	061a      	lsls	r2, r3, #24
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	3b01      	subs	r3, #1
 8006bda:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f107 0208 	add.w	r2, r7, #8
 8006be4:	4611      	mov	r1, r2
 8006be6:	4618      	mov	r0, r3
 8006be8:	f001 fb86 	bl	80082f8 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	3301      	adds	r3, #1
 8006bf0:	617b      	str	r3, [r7, #20]
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	2b07      	cmp	r3, #7
 8006bf6:	d9c4      	bls.n	8006b82 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	693a      	ldr	r2, [r7, #16]
 8006c02:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8006c04:	bf00      	nop
 8006c06:	3718      	adds	r7, #24
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b082      	sub	sp, #8
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d101      	bne.n	8006c1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e056      	b.n	8006ccc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d106      	bne.n	8006c3e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f7fb f99b 	bl	8001f74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2202      	movs	r2, #2
 8006c42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c54:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	685a      	ldr	r2, [r3, #4]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	431a      	orrs	r2, r3
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	431a      	orrs	r2, r3
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	691b      	ldr	r3, [r3, #16]
 8006c6a:	431a      	orrs	r2, r3
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	695b      	ldr	r3, [r3, #20]
 8006c70:	431a      	orrs	r2, r3
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	699b      	ldr	r3, [r3, #24]
 8006c76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c7a:	431a      	orrs	r2, r3
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	69db      	ldr	r3, [r3, #28]
 8006c80:	431a      	orrs	r2, r3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6a1b      	ldr	r3, [r3, #32]
 8006c86:	ea42 0103 	orr.w	r1, r2, r3
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	430a      	orrs	r2, r1
 8006c94:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	699b      	ldr	r3, [r3, #24]
 8006c9a:	0c1b      	lsrs	r3, r3, #16
 8006c9c:	f003 0104 	and.w	r1, r3, #4
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	430a      	orrs	r2, r1
 8006caa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	69da      	ldr	r2, [r3, #28]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006cba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006cca:	2300      	movs	r3, #0
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3708      	adds	r7, #8
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b082      	sub	sp, #8
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d101      	bne.n	8006ce6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e01d      	b.n	8006d22 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d106      	bne.n	8006d00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f7fb f982 	bl	8002004 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2202      	movs	r2, #2
 8006d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	3304      	adds	r3, #4
 8006d10:	4619      	mov	r1, r3
 8006d12:	4610      	mov	r0, r2
 8006d14:	f000 fb4e 	bl	80073b4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d20:	2300      	movs	r3, #0
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3708      	adds	r7, #8
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}

08006d2a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006d2a:	b480      	push	{r7}
 8006d2c:	b085      	sub	sp, #20
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2202      	movs	r2, #2
 8006d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	f003 0307 	and.w	r3, r3, #7
 8006d44:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2b06      	cmp	r3, #6
 8006d4a:	d007      	beq.n	8006d5c <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f042 0201 	orr.w	r2, r2, #1
 8006d5a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006d64:	2300      	movs	r3, #0
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3714      	adds	r7, #20
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr

08006d72 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006d72:	b580      	push	{r7, lr}
 8006d74:	b082      	sub	sp, #8
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d101      	bne.n	8006d84 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006d80:	2301      	movs	r3, #1
 8006d82:	e01d      	b.n	8006dc0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d8a:	b2db      	uxtb	r3, r3
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d106      	bne.n	8006d9e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 f815 	bl	8006dc8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2202      	movs	r2, #2
 8006da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	3304      	adds	r3, #4
 8006dae:	4619      	mov	r1, r3
 8006db0:	4610      	mov	r0, r2
 8006db2:	f000 faff 	bl	80073b4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2201      	movs	r2, #1
 8006dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006dbe:	2300      	movs	r3, #0
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3708      	adds	r7, #8
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b083      	sub	sp, #12
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006dd0:	bf00      	nop
 8006dd2:	370c      	adds	r7, #12
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr

08006ddc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	2201      	movs	r2, #1
 8006dec:	6839      	ldr	r1, [r7, #0]
 8006dee:	4618      	mov	r0, r3
 8006df0:	f000 fdca 	bl	8007988 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a15      	ldr	r2, [pc, #84]	; (8006e50 <HAL_TIM_PWM_Start+0x74>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d004      	beq.n	8006e08 <HAL_TIM_PWM_Start+0x2c>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a14      	ldr	r2, [pc, #80]	; (8006e54 <HAL_TIM_PWM_Start+0x78>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d101      	bne.n	8006e0c <HAL_TIM_PWM_Start+0x30>
 8006e08:	2301      	movs	r3, #1
 8006e0a:	e000      	b.n	8006e0e <HAL_TIM_PWM_Start+0x32>
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d007      	beq.n	8006e22 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e20:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	f003 0307 	and.w	r3, r3, #7
 8006e2c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2b06      	cmp	r3, #6
 8006e32:	d007      	beq.n	8006e44 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f042 0201 	orr.w	r2, r2, #1
 8006e42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e44:	2300      	movs	r3, #0
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3710      	adds	r7, #16
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	bf00      	nop
 8006e50:	40010000 	.word	0x40010000
 8006e54:	40010400 	.word	0x40010400

08006e58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b082      	sub	sp, #8
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	691b      	ldr	r3, [r3, #16]
 8006e66:	f003 0302 	and.w	r3, r3, #2
 8006e6a:	2b02      	cmp	r3, #2
 8006e6c:	d122      	bne.n	8006eb4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	f003 0302 	and.w	r3, r3, #2
 8006e78:	2b02      	cmp	r3, #2
 8006e7a:	d11b      	bne.n	8006eb4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f06f 0202 	mvn.w	r2, #2
 8006e84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2201      	movs	r2, #1
 8006e8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	699b      	ldr	r3, [r3, #24]
 8006e92:	f003 0303 	and.w	r3, r3, #3
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d003      	beq.n	8006ea2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 fa6b 	bl	8007376 <HAL_TIM_IC_CaptureCallback>
 8006ea0:	e005      	b.n	8006eae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 fa5d 	bl	8007362 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f000 fa6e 	bl	800738a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	f003 0304 	and.w	r3, r3, #4
 8006ebe:	2b04      	cmp	r3, #4
 8006ec0:	d122      	bne.n	8006f08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	68db      	ldr	r3, [r3, #12]
 8006ec8:	f003 0304 	and.w	r3, r3, #4
 8006ecc:	2b04      	cmp	r3, #4
 8006ece:	d11b      	bne.n	8006f08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f06f 0204 	mvn.w	r2, #4
 8006ed8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2202      	movs	r2, #2
 8006ede:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	699b      	ldr	r3, [r3, #24]
 8006ee6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d003      	beq.n	8006ef6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 fa41 	bl	8007376 <HAL_TIM_IC_CaptureCallback>
 8006ef4:	e005      	b.n	8006f02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 fa33 	bl	8007362 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 fa44 	bl	800738a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	691b      	ldr	r3, [r3, #16]
 8006f0e:	f003 0308 	and.w	r3, r3, #8
 8006f12:	2b08      	cmp	r3, #8
 8006f14:	d122      	bne.n	8006f5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	68db      	ldr	r3, [r3, #12]
 8006f1c:	f003 0308 	and.w	r3, r3, #8
 8006f20:	2b08      	cmp	r3, #8
 8006f22:	d11b      	bne.n	8006f5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f06f 0208 	mvn.w	r2, #8
 8006f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2204      	movs	r2, #4
 8006f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	69db      	ldr	r3, [r3, #28]
 8006f3a:	f003 0303 	and.w	r3, r3, #3
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d003      	beq.n	8006f4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 fa17 	bl	8007376 <HAL_TIM_IC_CaptureCallback>
 8006f48:	e005      	b.n	8006f56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 fa09 	bl	8007362 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 fa1a 	bl	800738a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	691b      	ldr	r3, [r3, #16]
 8006f62:	f003 0310 	and.w	r3, r3, #16
 8006f66:	2b10      	cmp	r3, #16
 8006f68:	d122      	bne.n	8006fb0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	f003 0310 	and.w	r3, r3, #16
 8006f74:	2b10      	cmp	r3, #16
 8006f76:	d11b      	bne.n	8006fb0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f06f 0210 	mvn.w	r2, #16
 8006f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2208      	movs	r2, #8
 8006f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	69db      	ldr	r3, [r3, #28]
 8006f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d003      	beq.n	8006f9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 f9ed 	bl	8007376 <HAL_TIM_IC_CaptureCallback>
 8006f9c:	e005      	b.n	8006faa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 f9df 	bl	8007362 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 f9f0 	bl	800738a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	691b      	ldr	r3, [r3, #16]
 8006fb6:	f003 0301 	and.w	r3, r3, #1
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d10e      	bne.n	8006fdc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	f003 0301 	and.w	r3, r3, #1
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d107      	bne.n	8006fdc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f06f 0201 	mvn.w	r2, #1
 8006fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f7fa fe2c 	bl	8001c34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fe6:	2b80      	cmp	r3, #128	; 0x80
 8006fe8:	d10e      	bne.n	8007008 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ff4:	2b80      	cmp	r3, #128	; 0x80
 8006ff6:	d107      	bne.n	8007008 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 fd6c 	bl	8007ae0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	691b      	ldr	r3, [r3, #16]
 800700e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007012:	2b40      	cmp	r3, #64	; 0x40
 8007014:	d10e      	bne.n	8007034 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007020:	2b40      	cmp	r3, #64	; 0x40
 8007022:	d107      	bne.n	8007034 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800702c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 f9b5 	bl	800739e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	691b      	ldr	r3, [r3, #16]
 800703a:	f003 0320 	and.w	r3, r3, #32
 800703e:	2b20      	cmp	r3, #32
 8007040:	d10e      	bne.n	8007060 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	f003 0320 	and.w	r3, r3, #32
 800704c:	2b20      	cmp	r3, #32
 800704e:	d107      	bne.n	8007060 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f06f 0220 	mvn.w	r2, #32
 8007058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 fd36 	bl	8007acc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007060:	bf00      	nop
 8007062:	3708      	adds	r7, #8
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	60f8      	str	r0, [r7, #12]
 8007070:	60b9      	str	r1, [r7, #8]
 8007072:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800707a:	2b01      	cmp	r3, #1
 800707c:	d101      	bne.n	8007082 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800707e:	2302      	movs	r3, #2
 8007080:	e0b4      	b.n	80071ec <HAL_TIM_PWM_ConfigChannel+0x184>
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2201      	movs	r2, #1
 8007086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2202      	movs	r2, #2
 800708e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2b0c      	cmp	r3, #12
 8007096:	f200 809f 	bhi.w	80071d8 <HAL_TIM_PWM_ConfigChannel+0x170>
 800709a:	a201      	add	r2, pc, #4	; (adr r2, 80070a0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800709c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070a0:	080070d5 	.word	0x080070d5
 80070a4:	080071d9 	.word	0x080071d9
 80070a8:	080071d9 	.word	0x080071d9
 80070ac:	080071d9 	.word	0x080071d9
 80070b0:	08007115 	.word	0x08007115
 80070b4:	080071d9 	.word	0x080071d9
 80070b8:	080071d9 	.word	0x080071d9
 80070bc:	080071d9 	.word	0x080071d9
 80070c0:	08007157 	.word	0x08007157
 80070c4:	080071d9 	.word	0x080071d9
 80070c8:	080071d9 	.word	0x080071d9
 80070cc:	080071d9 	.word	0x080071d9
 80070d0:	08007197 	.word	0x08007197
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	68b9      	ldr	r1, [r7, #8]
 80070da:	4618      	mov	r0, r3
 80070dc:	f000 fa0a 	bl	80074f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	699a      	ldr	r2, [r3, #24]
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f042 0208 	orr.w	r2, r2, #8
 80070ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	699a      	ldr	r2, [r3, #24]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f022 0204 	bic.w	r2, r2, #4
 80070fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	6999      	ldr	r1, [r3, #24]
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	691a      	ldr	r2, [r3, #16]
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	430a      	orrs	r2, r1
 8007110:	619a      	str	r2, [r3, #24]
      break;
 8007112:	e062      	b.n	80071da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	68b9      	ldr	r1, [r7, #8]
 800711a:	4618      	mov	r0, r3
 800711c:	f000 fa5a 	bl	80075d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	699a      	ldr	r2, [r3, #24]
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800712e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	699a      	ldr	r2, [r3, #24]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800713e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	6999      	ldr	r1, [r3, #24]
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	691b      	ldr	r3, [r3, #16]
 800714a:	021a      	lsls	r2, r3, #8
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	430a      	orrs	r2, r1
 8007152:	619a      	str	r2, [r3, #24]
      break;
 8007154:	e041      	b.n	80071da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	68b9      	ldr	r1, [r7, #8]
 800715c:	4618      	mov	r0, r3
 800715e:	f000 faaf 	bl	80076c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	69da      	ldr	r2, [r3, #28]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f042 0208 	orr.w	r2, r2, #8
 8007170:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	69da      	ldr	r2, [r3, #28]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f022 0204 	bic.w	r2, r2, #4
 8007180:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	69d9      	ldr	r1, [r3, #28]
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	691a      	ldr	r2, [r3, #16]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	430a      	orrs	r2, r1
 8007192:	61da      	str	r2, [r3, #28]
      break;
 8007194:	e021      	b.n	80071da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	68b9      	ldr	r1, [r7, #8]
 800719c:	4618      	mov	r0, r3
 800719e:	f000 fb03 	bl	80077a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	69da      	ldr	r2, [r3, #28]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	69da      	ldr	r2, [r3, #28]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	69d9      	ldr	r1, [r3, #28]
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	691b      	ldr	r3, [r3, #16]
 80071cc:	021a      	lsls	r2, r3, #8
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	430a      	orrs	r2, r1
 80071d4:	61da      	str	r2, [r3, #28]
      break;
 80071d6:	e000      	b.n	80071da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80071d8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2201      	movs	r2, #1
 80071de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2200      	movs	r2, #0
 80071e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071ea:	2300      	movs	r3, #0
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3710      	adds	r7, #16
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007204:	2b01      	cmp	r3, #1
 8007206:	d101      	bne.n	800720c <HAL_TIM_ConfigClockSource+0x18>
 8007208:	2302      	movs	r3, #2
 800720a:	e0a6      	b.n	800735a <HAL_TIM_ConfigClockSource+0x166>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2201      	movs	r2, #1
 8007210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2202      	movs	r2, #2
 8007218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800722a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007232:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	68fa      	ldr	r2, [r7, #12]
 800723a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	2b40      	cmp	r3, #64	; 0x40
 8007242:	d067      	beq.n	8007314 <HAL_TIM_ConfigClockSource+0x120>
 8007244:	2b40      	cmp	r3, #64	; 0x40
 8007246:	d80b      	bhi.n	8007260 <HAL_TIM_ConfigClockSource+0x6c>
 8007248:	2b10      	cmp	r3, #16
 800724a:	d073      	beq.n	8007334 <HAL_TIM_ConfigClockSource+0x140>
 800724c:	2b10      	cmp	r3, #16
 800724e:	d802      	bhi.n	8007256 <HAL_TIM_ConfigClockSource+0x62>
 8007250:	2b00      	cmp	r3, #0
 8007252:	d06f      	beq.n	8007334 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007254:	e078      	b.n	8007348 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007256:	2b20      	cmp	r3, #32
 8007258:	d06c      	beq.n	8007334 <HAL_TIM_ConfigClockSource+0x140>
 800725a:	2b30      	cmp	r3, #48	; 0x30
 800725c:	d06a      	beq.n	8007334 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800725e:	e073      	b.n	8007348 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007260:	2b70      	cmp	r3, #112	; 0x70
 8007262:	d00d      	beq.n	8007280 <HAL_TIM_ConfigClockSource+0x8c>
 8007264:	2b70      	cmp	r3, #112	; 0x70
 8007266:	d804      	bhi.n	8007272 <HAL_TIM_ConfigClockSource+0x7e>
 8007268:	2b50      	cmp	r3, #80	; 0x50
 800726a:	d033      	beq.n	80072d4 <HAL_TIM_ConfigClockSource+0xe0>
 800726c:	2b60      	cmp	r3, #96	; 0x60
 800726e:	d041      	beq.n	80072f4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007270:	e06a      	b.n	8007348 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007276:	d066      	beq.n	8007346 <HAL_TIM_ConfigClockSource+0x152>
 8007278:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800727c:	d017      	beq.n	80072ae <HAL_TIM_ConfigClockSource+0xba>
      break;
 800727e:	e063      	b.n	8007348 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6818      	ldr	r0, [r3, #0]
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	6899      	ldr	r1, [r3, #8]
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	685a      	ldr	r2, [r3, #4]
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	68db      	ldr	r3, [r3, #12]
 8007290:	f000 fb5a 	bl	8007948 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80072a2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	68fa      	ldr	r2, [r7, #12]
 80072aa:	609a      	str	r2, [r3, #8]
      break;
 80072ac:	e04c      	b.n	8007348 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6818      	ldr	r0, [r3, #0]
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	6899      	ldr	r1, [r3, #8]
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	685a      	ldr	r2, [r3, #4]
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	f000 fb43 	bl	8007948 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	689a      	ldr	r2, [r3, #8]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80072d0:	609a      	str	r2, [r3, #8]
      break;
 80072d2:	e039      	b.n	8007348 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6818      	ldr	r0, [r3, #0]
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	6859      	ldr	r1, [r3, #4]
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	461a      	mov	r2, r3
 80072e2:	f000 fab7 	bl	8007854 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	2150      	movs	r1, #80	; 0x50
 80072ec:	4618      	mov	r0, r3
 80072ee:	f000 fb10 	bl	8007912 <TIM_ITRx_SetConfig>
      break;
 80072f2:	e029      	b.n	8007348 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6818      	ldr	r0, [r3, #0]
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	6859      	ldr	r1, [r3, #4]
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	461a      	mov	r2, r3
 8007302:	f000 fad6 	bl	80078b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	2160      	movs	r1, #96	; 0x60
 800730c:	4618      	mov	r0, r3
 800730e:	f000 fb00 	bl	8007912 <TIM_ITRx_SetConfig>
      break;
 8007312:	e019      	b.n	8007348 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6818      	ldr	r0, [r3, #0]
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	6859      	ldr	r1, [r3, #4]
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	461a      	mov	r2, r3
 8007322:	f000 fa97 	bl	8007854 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	2140      	movs	r1, #64	; 0x40
 800732c:	4618      	mov	r0, r3
 800732e:	f000 faf0 	bl	8007912 <TIM_ITRx_SetConfig>
      break;
 8007332:	e009      	b.n	8007348 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4619      	mov	r1, r3
 800733e:	4610      	mov	r0, r2
 8007340:	f000 fae7 	bl	8007912 <TIM_ITRx_SetConfig>
      break;
 8007344:	e000      	b.n	8007348 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8007346:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2201      	movs	r2, #1
 800734c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007358:	2300      	movs	r3, #0
}
 800735a:	4618      	mov	r0, r3
 800735c:	3710      	adds	r7, #16
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}

08007362 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007362:	b480      	push	{r7}
 8007364:	b083      	sub	sp, #12
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800736a:	bf00      	nop
 800736c:	370c      	adds	r7, #12
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr

08007376 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007376:	b480      	push	{r7}
 8007378:	b083      	sub	sp, #12
 800737a:	af00      	add	r7, sp, #0
 800737c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800737e:	bf00      	nop
 8007380:	370c      	adds	r7, #12
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr

0800738a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800738a:	b480      	push	{r7}
 800738c:	b083      	sub	sp, #12
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007392:	bf00      	nop
 8007394:	370c      	adds	r7, #12
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr

0800739e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800739e:	b480      	push	{r7}
 80073a0:	b083      	sub	sp, #12
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80073a6:	bf00      	nop
 80073a8:	370c      	adds	r7, #12
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr
	...

080073b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b085      	sub	sp, #20
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	4a40      	ldr	r2, [pc, #256]	; (80074c8 <TIM_Base_SetConfig+0x114>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d013      	beq.n	80073f4 <TIM_Base_SetConfig+0x40>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073d2:	d00f      	beq.n	80073f4 <TIM_Base_SetConfig+0x40>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	4a3d      	ldr	r2, [pc, #244]	; (80074cc <TIM_Base_SetConfig+0x118>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d00b      	beq.n	80073f4 <TIM_Base_SetConfig+0x40>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	4a3c      	ldr	r2, [pc, #240]	; (80074d0 <TIM_Base_SetConfig+0x11c>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d007      	beq.n	80073f4 <TIM_Base_SetConfig+0x40>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	4a3b      	ldr	r2, [pc, #236]	; (80074d4 <TIM_Base_SetConfig+0x120>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d003      	beq.n	80073f4 <TIM_Base_SetConfig+0x40>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	4a3a      	ldr	r2, [pc, #232]	; (80074d8 <TIM_Base_SetConfig+0x124>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d108      	bne.n	8007406 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	68fa      	ldr	r2, [r7, #12]
 8007402:	4313      	orrs	r3, r2
 8007404:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	4a2f      	ldr	r2, [pc, #188]	; (80074c8 <TIM_Base_SetConfig+0x114>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d02b      	beq.n	8007466 <TIM_Base_SetConfig+0xb2>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007414:	d027      	beq.n	8007466 <TIM_Base_SetConfig+0xb2>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	4a2c      	ldr	r2, [pc, #176]	; (80074cc <TIM_Base_SetConfig+0x118>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d023      	beq.n	8007466 <TIM_Base_SetConfig+0xb2>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	4a2b      	ldr	r2, [pc, #172]	; (80074d0 <TIM_Base_SetConfig+0x11c>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d01f      	beq.n	8007466 <TIM_Base_SetConfig+0xb2>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	4a2a      	ldr	r2, [pc, #168]	; (80074d4 <TIM_Base_SetConfig+0x120>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d01b      	beq.n	8007466 <TIM_Base_SetConfig+0xb2>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	4a29      	ldr	r2, [pc, #164]	; (80074d8 <TIM_Base_SetConfig+0x124>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d017      	beq.n	8007466 <TIM_Base_SetConfig+0xb2>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	4a28      	ldr	r2, [pc, #160]	; (80074dc <TIM_Base_SetConfig+0x128>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d013      	beq.n	8007466 <TIM_Base_SetConfig+0xb2>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	4a27      	ldr	r2, [pc, #156]	; (80074e0 <TIM_Base_SetConfig+0x12c>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d00f      	beq.n	8007466 <TIM_Base_SetConfig+0xb2>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	4a26      	ldr	r2, [pc, #152]	; (80074e4 <TIM_Base_SetConfig+0x130>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d00b      	beq.n	8007466 <TIM_Base_SetConfig+0xb2>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	4a25      	ldr	r2, [pc, #148]	; (80074e8 <TIM_Base_SetConfig+0x134>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d007      	beq.n	8007466 <TIM_Base_SetConfig+0xb2>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	4a24      	ldr	r2, [pc, #144]	; (80074ec <TIM_Base_SetConfig+0x138>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d003      	beq.n	8007466 <TIM_Base_SetConfig+0xb2>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	4a23      	ldr	r2, [pc, #140]	; (80074f0 <TIM_Base_SetConfig+0x13c>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d108      	bne.n	8007478 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800746c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	68db      	ldr	r3, [r3, #12]
 8007472:	68fa      	ldr	r2, [r7, #12]
 8007474:	4313      	orrs	r3, r2
 8007476:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	695b      	ldr	r3, [r3, #20]
 8007482:	4313      	orrs	r3, r2
 8007484:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	68fa      	ldr	r2, [r7, #12]
 800748a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	689a      	ldr	r2, [r3, #8]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	4a0a      	ldr	r2, [pc, #40]	; (80074c8 <TIM_Base_SetConfig+0x114>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d003      	beq.n	80074ac <TIM_Base_SetConfig+0xf8>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	4a0c      	ldr	r2, [pc, #48]	; (80074d8 <TIM_Base_SetConfig+0x124>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d103      	bne.n	80074b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	691a      	ldr	r2, [r3, #16]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2201      	movs	r2, #1
 80074b8:	615a      	str	r2, [r3, #20]
}
 80074ba:	bf00      	nop
 80074bc:	3714      	adds	r7, #20
 80074be:	46bd      	mov	sp, r7
 80074c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c4:	4770      	bx	lr
 80074c6:	bf00      	nop
 80074c8:	40010000 	.word	0x40010000
 80074cc:	40000400 	.word	0x40000400
 80074d0:	40000800 	.word	0x40000800
 80074d4:	40000c00 	.word	0x40000c00
 80074d8:	40010400 	.word	0x40010400
 80074dc:	40014000 	.word	0x40014000
 80074e0:	40014400 	.word	0x40014400
 80074e4:	40014800 	.word	0x40014800
 80074e8:	40001800 	.word	0x40001800
 80074ec:	40001c00 	.word	0x40001c00
 80074f0:	40002000 	.word	0x40002000

080074f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b087      	sub	sp, #28
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6a1b      	ldr	r3, [r3, #32]
 8007502:	f023 0201 	bic.w	r2, r3, #1
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6a1b      	ldr	r3, [r3, #32]
 800750e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	699b      	ldr	r3, [r3, #24]
 800751a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f023 0303 	bic.w	r3, r3, #3
 800752a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	68fa      	ldr	r2, [r7, #12]
 8007532:	4313      	orrs	r3, r2
 8007534:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	f023 0302 	bic.w	r3, r3, #2
 800753c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	697a      	ldr	r2, [r7, #20]
 8007544:	4313      	orrs	r3, r2
 8007546:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	4a20      	ldr	r2, [pc, #128]	; (80075cc <TIM_OC1_SetConfig+0xd8>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d003      	beq.n	8007558 <TIM_OC1_SetConfig+0x64>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	4a1f      	ldr	r2, [pc, #124]	; (80075d0 <TIM_OC1_SetConfig+0xdc>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d10c      	bne.n	8007572 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	f023 0308 	bic.w	r3, r3, #8
 800755e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	68db      	ldr	r3, [r3, #12]
 8007564:	697a      	ldr	r2, [r7, #20]
 8007566:	4313      	orrs	r3, r2
 8007568:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	f023 0304 	bic.w	r3, r3, #4
 8007570:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4a15      	ldr	r2, [pc, #84]	; (80075cc <TIM_OC1_SetConfig+0xd8>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d003      	beq.n	8007582 <TIM_OC1_SetConfig+0x8e>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	4a14      	ldr	r2, [pc, #80]	; (80075d0 <TIM_OC1_SetConfig+0xdc>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d111      	bne.n	80075a6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007588:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007590:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	695b      	ldr	r3, [r3, #20]
 8007596:	693a      	ldr	r2, [r7, #16]
 8007598:	4313      	orrs	r3, r2
 800759a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	699b      	ldr	r3, [r3, #24]
 80075a0:	693a      	ldr	r2, [r7, #16]
 80075a2:	4313      	orrs	r3, r2
 80075a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	693a      	ldr	r2, [r7, #16]
 80075aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	68fa      	ldr	r2, [r7, #12]
 80075b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	685a      	ldr	r2, [r3, #4]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	697a      	ldr	r2, [r7, #20]
 80075be:	621a      	str	r2, [r3, #32]
}
 80075c0:	bf00      	nop
 80075c2:	371c      	adds	r7, #28
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr
 80075cc:	40010000 	.word	0x40010000
 80075d0:	40010400 	.word	0x40010400

080075d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b087      	sub	sp, #28
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6a1b      	ldr	r3, [r3, #32]
 80075e2:	f023 0210 	bic.w	r2, r3, #16
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6a1b      	ldr	r3, [r3, #32]
 80075ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	699b      	ldr	r3, [r3, #24]
 80075fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800760a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	021b      	lsls	r3, r3, #8
 8007612:	68fa      	ldr	r2, [r7, #12]
 8007614:	4313      	orrs	r3, r2
 8007616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	f023 0320 	bic.w	r3, r3, #32
 800761e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	011b      	lsls	r3, r3, #4
 8007626:	697a      	ldr	r2, [r7, #20]
 8007628:	4313      	orrs	r3, r2
 800762a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	4a22      	ldr	r2, [pc, #136]	; (80076b8 <TIM_OC2_SetConfig+0xe4>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d003      	beq.n	800763c <TIM_OC2_SetConfig+0x68>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	4a21      	ldr	r2, [pc, #132]	; (80076bc <TIM_OC2_SetConfig+0xe8>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d10d      	bne.n	8007658 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007642:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	68db      	ldr	r3, [r3, #12]
 8007648:	011b      	lsls	r3, r3, #4
 800764a:	697a      	ldr	r2, [r7, #20]
 800764c:	4313      	orrs	r3, r2
 800764e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007656:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	4a17      	ldr	r2, [pc, #92]	; (80076b8 <TIM_OC2_SetConfig+0xe4>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d003      	beq.n	8007668 <TIM_OC2_SetConfig+0x94>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	4a16      	ldr	r2, [pc, #88]	; (80076bc <TIM_OC2_SetConfig+0xe8>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d113      	bne.n	8007690 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800766e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007676:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	695b      	ldr	r3, [r3, #20]
 800767c:	009b      	lsls	r3, r3, #2
 800767e:	693a      	ldr	r2, [r7, #16]
 8007680:	4313      	orrs	r3, r2
 8007682:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	699b      	ldr	r3, [r3, #24]
 8007688:	009b      	lsls	r3, r3, #2
 800768a:	693a      	ldr	r2, [r7, #16]
 800768c:	4313      	orrs	r3, r2
 800768e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	693a      	ldr	r2, [r7, #16]
 8007694:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	68fa      	ldr	r2, [r7, #12]
 800769a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	685a      	ldr	r2, [r3, #4]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	697a      	ldr	r2, [r7, #20]
 80076a8:	621a      	str	r2, [r3, #32]
}
 80076aa:	bf00      	nop
 80076ac:	371c      	adds	r7, #28
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr
 80076b6:	bf00      	nop
 80076b8:	40010000 	.word	0x40010000
 80076bc:	40010400 	.word	0x40010400

080076c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b087      	sub	sp, #28
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6a1b      	ldr	r3, [r3, #32]
 80076ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6a1b      	ldr	r3, [r3, #32]
 80076da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	69db      	ldr	r3, [r3, #28]
 80076e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f023 0303 	bic.w	r3, r3, #3
 80076f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	68fa      	ldr	r2, [r7, #12]
 80076fe:	4313      	orrs	r3, r2
 8007700:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007708:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	021b      	lsls	r3, r3, #8
 8007710:	697a      	ldr	r2, [r7, #20]
 8007712:	4313      	orrs	r3, r2
 8007714:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	4a21      	ldr	r2, [pc, #132]	; (80077a0 <TIM_OC3_SetConfig+0xe0>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d003      	beq.n	8007726 <TIM_OC3_SetConfig+0x66>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	4a20      	ldr	r2, [pc, #128]	; (80077a4 <TIM_OC3_SetConfig+0xe4>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d10d      	bne.n	8007742 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800772c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	68db      	ldr	r3, [r3, #12]
 8007732:	021b      	lsls	r3, r3, #8
 8007734:	697a      	ldr	r2, [r7, #20]
 8007736:	4313      	orrs	r3, r2
 8007738:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007740:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4a16      	ldr	r2, [pc, #88]	; (80077a0 <TIM_OC3_SetConfig+0xe0>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d003      	beq.n	8007752 <TIM_OC3_SetConfig+0x92>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4a15      	ldr	r2, [pc, #84]	; (80077a4 <TIM_OC3_SetConfig+0xe4>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d113      	bne.n	800777a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007758:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007760:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	695b      	ldr	r3, [r3, #20]
 8007766:	011b      	lsls	r3, r3, #4
 8007768:	693a      	ldr	r2, [r7, #16]
 800776a:	4313      	orrs	r3, r2
 800776c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	699b      	ldr	r3, [r3, #24]
 8007772:	011b      	lsls	r3, r3, #4
 8007774:	693a      	ldr	r2, [r7, #16]
 8007776:	4313      	orrs	r3, r2
 8007778:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	693a      	ldr	r2, [r7, #16]
 800777e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	68fa      	ldr	r2, [r7, #12]
 8007784:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	685a      	ldr	r2, [r3, #4]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	697a      	ldr	r2, [r7, #20]
 8007792:	621a      	str	r2, [r3, #32]
}
 8007794:	bf00      	nop
 8007796:	371c      	adds	r7, #28
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr
 80077a0:	40010000 	.word	0x40010000
 80077a4:	40010400 	.word	0x40010400

080077a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b087      	sub	sp, #28
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6a1b      	ldr	r3, [r3, #32]
 80077b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6a1b      	ldr	r3, [r3, #32]
 80077c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	69db      	ldr	r3, [r3, #28]
 80077ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	021b      	lsls	r3, r3, #8
 80077e6:	68fa      	ldr	r2, [r7, #12]
 80077e8:	4313      	orrs	r3, r2
 80077ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80077f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	689b      	ldr	r3, [r3, #8]
 80077f8:	031b      	lsls	r3, r3, #12
 80077fa:	693a      	ldr	r2, [r7, #16]
 80077fc:	4313      	orrs	r3, r2
 80077fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	4a12      	ldr	r2, [pc, #72]	; (800784c <TIM_OC4_SetConfig+0xa4>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d003      	beq.n	8007810 <TIM_OC4_SetConfig+0x68>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	4a11      	ldr	r2, [pc, #68]	; (8007850 <TIM_OC4_SetConfig+0xa8>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d109      	bne.n	8007824 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007816:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	695b      	ldr	r3, [r3, #20]
 800781c:	019b      	lsls	r3, r3, #6
 800781e:	697a      	ldr	r2, [r7, #20]
 8007820:	4313      	orrs	r3, r2
 8007822:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	697a      	ldr	r2, [r7, #20]
 8007828:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	68fa      	ldr	r2, [r7, #12]
 800782e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	685a      	ldr	r2, [r3, #4]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	693a      	ldr	r2, [r7, #16]
 800783c:	621a      	str	r2, [r3, #32]
}
 800783e:	bf00      	nop
 8007840:	371c      	adds	r7, #28
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr
 800784a:	bf00      	nop
 800784c:	40010000 	.word	0x40010000
 8007850:	40010400 	.word	0x40010400

08007854 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007854:	b480      	push	{r7}
 8007856:	b087      	sub	sp, #28
 8007858:	af00      	add	r7, sp, #0
 800785a:	60f8      	str	r0, [r7, #12]
 800785c:	60b9      	str	r1, [r7, #8]
 800785e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	6a1b      	ldr	r3, [r3, #32]
 8007864:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	6a1b      	ldr	r3, [r3, #32]
 800786a:	f023 0201 	bic.w	r2, r3, #1
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	699b      	ldr	r3, [r3, #24]
 8007876:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800787e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	011b      	lsls	r3, r3, #4
 8007884:	693a      	ldr	r2, [r7, #16]
 8007886:	4313      	orrs	r3, r2
 8007888:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	f023 030a 	bic.w	r3, r3, #10
 8007890:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007892:	697a      	ldr	r2, [r7, #20]
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	4313      	orrs	r3, r2
 8007898:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	693a      	ldr	r2, [r7, #16]
 800789e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	697a      	ldr	r2, [r7, #20]
 80078a4:	621a      	str	r2, [r3, #32]
}
 80078a6:	bf00      	nop
 80078a8:	371c      	adds	r7, #28
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr

080078b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078b2:	b480      	push	{r7}
 80078b4:	b087      	sub	sp, #28
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	60f8      	str	r0, [r7, #12]
 80078ba:	60b9      	str	r1, [r7, #8]
 80078bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	6a1b      	ldr	r3, [r3, #32]
 80078c2:	f023 0210 	bic.w	r2, r3, #16
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	699b      	ldr	r3, [r3, #24]
 80078ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	6a1b      	ldr	r3, [r3, #32]
 80078d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80078dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	031b      	lsls	r3, r3, #12
 80078e2:	697a      	ldr	r2, [r7, #20]
 80078e4:	4313      	orrs	r3, r2
 80078e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80078ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	011b      	lsls	r3, r3, #4
 80078f4:	693a      	ldr	r2, [r7, #16]
 80078f6:	4313      	orrs	r3, r2
 80078f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	697a      	ldr	r2, [r7, #20]
 80078fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	693a      	ldr	r2, [r7, #16]
 8007904:	621a      	str	r2, [r3, #32]
}
 8007906:	bf00      	nop
 8007908:	371c      	adds	r7, #28
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr

08007912 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007912:	b480      	push	{r7}
 8007914:	b085      	sub	sp, #20
 8007916:	af00      	add	r7, sp, #0
 8007918:	6078      	str	r0, [r7, #4]
 800791a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	689b      	ldr	r3, [r3, #8]
 8007920:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007928:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800792a:	683a      	ldr	r2, [r7, #0]
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	4313      	orrs	r3, r2
 8007930:	f043 0307 	orr.w	r3, r3, #7
 8007934:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	68fa      	ldr	r2, [r7, #12]
 800793a:	609a      	str	r2, [r3, #8]
}
 800793c:	bf00      	nop
 800793e:	3714      	adds	r7, #20
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr

08007948 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007948:	b480      	push	{r7}
 800794a:	b087      	sub	sp, #28
 800794c:	af00      	add	r7, sp, #0
 800794e:	60f8      	str	r0, [r7, #12]
 8007950:	60b9      	str	r1, [r7, #8]
 8007952:	607a      	str	r2, [r7, #4]
 8007954:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	689b      	ldr	r3, [r3, #8]
 800795a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007962:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	021a      	lsls	r2, r3, #8
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	431a      	orrs	r2, r3
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	4313      	orrs	r3, r2
 8007970:	697a      	ldr	r2, [r7, #20]
 8007972:	4313      	orrs	r3, r2
 8007974:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	697a      	ldr	r2, [r7, #20]
 800797a:	609a      	str	r2, [r3, #8]
}
 800797c:	bf00      	nop
 800797e:	371c      	adds	r7, #28
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr

08007988 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007988:	b480      	push	{r7}
 800798a:	b087      	sub	sp, #28
 800798c:	af00      	add	r7, sp, #0
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	60b9      	str	r1, [r7, #8]
 8007992:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	f003 031f 	and.w	r3, r3, #31
 800799a:	2201      	movs	r2, #1
 800799c:	fa02 f303 	lsl.w	r3, r2, r3
 80079a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	6a1a      	ldr	r2, [r3, #32]
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	43db      	mvns	r3, r3
 80079aa:	401a      	ands	r2, r3
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	6a1a      	ldr	r2, [r3, #32]
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	f003 031f 	and.w	r3, r3, #31
 80079ba:	6879      	ldr	r1, [r7, #4]
 80079bc:	fa01 f303 	lsl.w	r3, r1, r3
 80079c0:	431a      	orrs	r2, r3
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	621a      	str	r2, [r3, #32]
}
 80079c6:	bf00      	nop
 80079c8:	371c      	adds	r7, #28
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr
	...

080079d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b085      	sub	sp, #20
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d101      	bne.n	80079ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80079e8:	2302      	movs	r3, #2
 80079ea:	e05a      	b.n	8007aa2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2201      	movs	r2, #1
 80079f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2202      	movs	r2, #2
 80079f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	68fa      	ldr	r2, [r7, #12]
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	68fa      	ldr	r2, [r7, #12]
 8007a24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a21      	ldr	r2, [pc, #132]	; (8007ab0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d022      	beq.n	8007a76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a38:	d01d      	beq.n	8007a76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a1d      	ldr	r2, [pc, #116]	; (8007ab4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d018      	beq.n	8007a76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a1b      	ldr	r2, [pc, #108]	; (8007ab8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d013      	beq.n	8007a76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a1a      	ldr	r2, [pc, #104]	; (8007abc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d00e      	beq.n	8007a76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a18      	ldr	r2, [pc, #96]	; (8007ac0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d009      	beq.n	8007a76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a17      	ldr	r2, [pc, #92]	; (8007ac4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d004      	beq.n	8007a76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a15      	ldr	r2, [pc, #84]	; (8007ac8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d10c      	bne.n	8007a90 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	68ba      	ldr	r2, [r7, #8]
 8007a84:	4313      	orrs	r3, r2
 8007a86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	68ba      	ldr	r2, [r7, #8]
 8007a8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2201      	movs	r2, #1
 8007a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007aa0:	2300      	movs	r3, #0
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3714      	adds	r7, #20
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr
 8007aae:	bf00      	nop
 8007ab0:	40010000 	.word	0x40010000
 8007ab4:	40000400 	.word	0x40000400
 8007ab8:	40000800 	.word	0x40000800
 8007abc:	40000c00 	.word	0x40000c00
 8007ac0:	40010400 	.word	0x40010400
 8007ac4:	40014000 	.word	0x40014000
 8007ac8:	40001800 	.word	0x40001800

08007acc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b083      	sub	sp, #12
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ad4:	bf00      	nop
 8007ad6:	370c      	adds	r7, #12
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr

08007ae0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b083      	sub	sp, #12
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ae8:	bf00      	nop
 8007aea:	370c      	adds	r7, #12
 8007aec:	46bd      	mov	sp, r7
 8007aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af2:	4770      	bx	lr

08007af4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b082      	sub	sp, #8
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d101      	bne.n	8007b06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b02:	2301      	movs	r3, #1
 8007b04:	e03f      	b.n	8007b86 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d106      	bne.n	8007b20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2200      	movs	r2, #0
 8007b16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f7fa fafc 	bl	8002118 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2224      	movs	r2, #36	; 0x24
 8007b24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	68da      	ldr	r2, [r3, #12]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007b36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f000 f829 	bl	8007b90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	691a      	ldr	r2, [r3, #16]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007b4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	695a      	ldr	r2, [r3, #20]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007b5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	68da      	ldr	r2, [r3, #12]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2220      	movs	r2, #32
 8007b78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2220      	movs	r2, #32
 8007b80:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007b84:	2300      	movs	r3, #0
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3708      	adds	r7, #8
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
	...

08007b90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b94:	b085      	sub	sp, #20
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	691b      	ldr	r3, [r3, #16]
 8007ba0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	68da      	ldr	r2, [r3, #12]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	430a      	orrs	r2, r1
 8007bae:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	689a      	ldr	r2, [r3, #8]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	691b      	ldr	r3, [r3, #16]
 8007bb8:	431a      	orrs	r2, r3
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	695b      	ldr	r3, [r3, #20]
 8007bbe:	431a      	orrs	r2, r3
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	69db      	ldr	r3, [r3, #28]
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	68db      	ldr	r3, [r3, #12]
 8007bce:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007bd2:	f023 030c 	bic.w	r3, r3, #12
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	6812      	ldr	r2, [r2, #0]
 8007bda:	68f9      	ldr	r1, [r7, #12]
 8007bdc:	430b      	orrs	r3, r1
 8007bde:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	695b      	ldr	r3, [r3, #20]
 8007be6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	699a      	ldr	r2, [r3, #24]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	430a      	orrs	r2, r1
 8007bf4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	69db      	ldr	r3, [r3, #28]
 8007bfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bfe:	f040 818b 	bne.w	8007f18 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4ac1      	ldr	r2, [pc, #772]	; (8007f0c <UART_SetConfig+0x37c>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d005      	beq.n	8007c18 <UART_SetConfig+0x88>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4abf      	ldr	r2, [pc, #764]	; (8007f10 <UART_SetConfig+0x380>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	f040 80bd 	bne.w	8007d92 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007c18:	f7fd f97e 	bl	8004f18 <HAL_RCC_GetPCLK2Freq>
 8007c1c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	461d      	mov	r5, r3
 8007c22:	f04f 0600 	mov.w	r6, #0
 8007c26:	46a8      	mov	r8, r5
 8007c28:	46b1      	mov	r9, r6
 8007c2a:	eb18 0308 	adds.w	r3, r8, r8
 8007c2e:	eb49 0409 	adc.w	r4, r9, r9
 8007c32:	4698      	mov	r8, r3
 8007c34:	46a1      	mov	r9, r4
 8007c36:	eb18 0805 	adds.w	r8, r8, r5
 8007c3a:	eb49 0906 	adc.w	r9, r9, r6
 8007c3e:	f04f 0100 	mov.w	r1, #0
 8007c42:	f04f 0200 	mov.w	r2, #0
 8007c46:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007c4a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007c4e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007c52:	4688      	mov	r8, r1
 8007c54:	4691      	mov	r9, r2
 8007c56:	eb18 0005 	adds.w	r0, r8, r5
 8007c5a:	eb49 0106 	adc.w	r1, r9, r6
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	461d      	mov	r5, r3
 8007c64:	f04f 0600 	mov.w	r6, #0
 8007c68:	196b      	adds	r3, r5, r5
 8007c6a:	eb46 0406 	adc.w	r4, r6, r6
 8007c6e:	461a      	mov	r2, r3
 8007c70:	4623      	mov	r3, r4
 8007c72:	f7f9 f809 	bl	8000c88 <__aeabi_uldivmod>
 8007c76:	4603      	mov	r3, r0
 8007c78:	460c      	mov	r4, r1
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	4ba5      	ldr	r3, [pc, #660]	; (8007f14 <UART_SetConfig+0x384>)
 8007c7e:	fba3 2302 	umull	r2, r3, r3, r2
 8007c82:	095b      	lsrs	r3, r3, #5
 8007c84:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	461d      	mov	r5, r3
 8007c8c:	f04f 0600 	mov.w	r6, #0
 8007c90:	46a9      	mov	r9, r5
 8007c92:	46b2      	mov	sl, r6
 8007c94:	eb19 0309 	adds.w	r3, r9, r9
 8007c98:	eb4a 040a 	adc.w	r4, sl, sl
 8007c9c:	4699      	mov	r9, r3
 8007c9e:	46a2      	mov	sl, r4
 8007ca0:	eb19 0905 	adds.w	r9, r9, r5
 8007ca4:	eb4a 0a06 	adc.w	sl, sl, r6
 8007ca8:	f04f 0100 	mov.w	r1, #0
 8007cac:	f04f 0200 	mov.w	r2, #0
 8007cb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007cb4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007cb8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007cbc:	4689      	mov	r9, r1
 8007cbe:	4692      	mov	sl, r2
 8007cc0:	eb19 0005 	adds.w	r0, r9, r5
 8007cc4:	eb4a 0106 	adc.w	r1, sl, r6
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	461d      	mov	r5, r3
 8007cce:	f04f 0600 	mov.w	r6, #0
 8007cd2:	196b      	adds	r3, r5, r5
 8007cd4:	eb46 0406 	adc.w	r4, r6, r6
 8007cd8:	461a      	mov	r2, r3
 8007cda:	4623      	mov	r3, r4
 8007cdc:	f7f8 ffd4 	bl	8000c88 <__aeabi_uldivmod>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	460c      	mov	r4, r1
 8007ce4:	461a      	mov	r2, r3
 8007ce6:	4b8b      	ldr	r3, [pc, #556]	; (8007f14 <UART_SetConfig+0x384>)
 8007ce8:	fba3 1302 	umull	r1, r3, r3, r2
 8007cec:	095b      	lsrs	r3, r3, #5
 8007cee:	2164      	movs	r1, #100	; 0x64
 8007cf0:	fb01 f303 	mul.w	r3, r1, r3
 8007cf4:	1ad3      	subs	r3, r2, r3
 8007cf6:	00db      	lsls	r3, r3, #3
 8007cf8:	3332      	adds	r3, #50	; 0x32
 8007cfa:	4a86      	ldr	r2, [pc, #536]	; (8007f14 <UART_SetConfig+0x384>)
 8007cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8007d00:	095b      	lsrs	r3, r3, #5
 8007d02:	005b      	lsls	r3, r3, #1
 8007d04:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007d08:	4498      	add	r8, r3
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	461d      	mov	r5, r3
 8007d0e:	f04f 0600 	mov.w	r6, #0
 8007d12:	46a9      	mov	r9, r5
 8007d14:	46b2      	mov	sl, r6
 8007d16:	eb19 0309 	adds.w	r3, r9, r9
 8007d1a:	eb4a 040a 	adc.w	r4, sl, sl
 8007d1e:	4699      	mov	r9, r3
 8007d20:	46a2      	mov	sl, r4
 8007d22:	eb19 0905 	adds.w	r9, r9, r5
 8007d26:	eb4a 0a06 	adc.w	sl, sl, r6
 8007d2a:	f04f 0100 	mov.w	r1, #0
 8007d2e:	f04f 0200 	mov.w	r2, #0
 8007d32:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007d36:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007d3a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007d3e:	4689      	mov	r9, r1
 8007d40:	4692      	mov	sl, r2
 8007d42:	eb19 0005 	adds.w	r0, r9, r5
 8007d46:	eb4a 0106 	adc.w	r1, sl, r6
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	461d      	mov	r5, r3
 8007d50:	f04f 0600 	mov.w	r6, #0
 8007d54:	196b      	adds	r3, r5, r5
 8007d56:	eb46 0406 	adc.w	r4, r6, r6
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	4623      	mov	r3, r4
 8007d5e:	f7f8 ff93 	bl	8000c88 <__aeabi_uldivmod>
 8007d62:	4603      	mov	r3, r0
 8007d64:	460c      	mov	r4, r1
 8007d66:	461a      	mov	r2, r3
 8007d68:	4b6a      	ldr	r3, [pc, #424]	; (8007f14 <UART_SetConfig+0x384>)
 8007d6a:	fba3 1302 	umull	r1, r3, r3, r2
 8007d6e:	095b      	lsrs	r3, r3, #5
 8007d70:	2164      	movs	r1, #100	; 0x64
 8007d72:	fb01 f303 	mul.w	r3, r1, r3
 8007d76:	1ad3      	subs	r3, r2, r3
 8007d78:	00db      	lsls	r3, r3, #3
 8007d7a:	3332      	adds	r3, #50	; 0x32
 8007d7c:	4a65      	ldr	r2, [pc, #404]	; (8007f14 <UART_SetConfig+0x384>)
 8007d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8007d82:	095b      	lsrs	r3, r3, #5
 8007d84:	f003 0207 	and.w	r2, r3, #7
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4442      	add	r2, r8
 8007d8e:	609a      	str	r2, [r3, #8]
 8007d90:	e26f      	b.n	8008272 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007d92:	f7fd f8ad 	bl	8004ef0 <HAL_RCC_GetPCLK1Freq>
 8007d96:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	461d      	mov	r5, r3
 8007d9c:	f04f 0600 	mov.w	r6, #0
 8007da0:	46a8      	mov	r8, r5
 8007da2:	46b1      	mov	r9, r6
 8007da4:	eb18 0308 	adds.w	r3, r8, r8
 8007da8:	eb49 0409 	adc.w	r4, r9, r9
 8007dac:	4698      	mov	r8, r3
 8007dae:	46a1      	mov	r9, r4
 8007db0:	eb18 0805 	adds.w	r8, r8, r5
 8007db4:	eb49 0906 	adc.w	r9, r9, r6
 8007db8:	f04f 0100 	mov.w	r1, #0
 8007dbc:	f04f 0200 	mov.w	r2, #0
 8007dc0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007dc4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007dc8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007dcc:	4688      	mov	r8, r1
 8007dce:	4691      	mov	r9, r2
 8007dd0:	eb18 0005 	adds.w	r0, r8, r5
 8007dd4:	eb49 0106 	adc.w	r1, r9, r6
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	461d      	mov	r5, r3
 8007dde:	f04f 0600 	mov.w	r6, #0
 8007de2:	196b      	adds	r3, r5, r5
 8007de4:	eb46 0406 	adc.w	r4, r6, r6
 8007de8:	461a      	mov	r2, r3
 8007dea:	4623      	mov	r3, r4
 8007dec:	f7f8 ff4c 	bl	8000c88 <__aeabi_uldivmod>
 8007df0:	4603      	mov	r3, r0
 8007df2:	460c      	mov	r4, r1
 8007df4:	461a      	mov	r2, r3
 8007df6:	4b47      	ldr	r3, [pc, #284]	; (8007f14 <UART_SetConfig+0x384>)
 8007df8:	fba3 2302 	umull	r2, r3, r3, r2
 8007dfc:	095b      	lsrs	r3, r3, #5
 8007dfe:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	461d      	mov	r5, r3
 8007e06:	f04f 0600 	mov.w	r6, #0
 8007e0a:	46a9      	mov	r9, r5
 8007e0c:	46b2      	mov	sl, r6
 8007e0e:	eb19 0309 	adds.w	r3, r9, r9
 8007e12:	eb4a 040a 	adc.w	r4, sl, sl
 8007e16:	4699      	mov	r9, r3
 8007e18:	46a2      	mov	sl, r4
 8007e1a:	eb19 0905 	adds.w	r9, r9, r5
 8007e1e:	eb4a 0a06 	adc.w	sl, sl, r6
 8007e22:	f04f 0100 	mov.w	r1, #0
 8007e26:	f04f 0200 	mov.w	r2, #0
 8007e2a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e2e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007e32:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007e36:	4689      	mov	r9, r1
 8007e38:	4692      	mov	sl, r2
 8007e3a:	eb19 0005 	adds.w	r0, r9, r5
 8007e3e:	eb4a 0106 	adc.w	r1, sl, r6
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	461d      	mov	r5, r3
 8007e48:	f04f 0600 	mov.w	r6, #0
 8007e4c:	196b      	adds	r3, r5, r5
 8007e4e:	eb46 0406 	adc.w	r4, r6, r6
 8007e52:	461a      	mov	r2, r3
 8007e54:	4623      	mov	r3, r4
 8007e56:	f7f8 ff17 	bl	8000c88 <__aeabi_uldivmod>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	460c      	mov	r4, r1
 8007e5e:	461a      	mov	r2, r3
 8007e60:	4b2c      	ldr	r3, [pc, #176]	; (8007f14 <UART_SetConfig+0x384>)
 8007e62:	fba3 1302 	umull	r1, r3, r3, r2
 8007e66:	095b      	lsrs	r3, r3, #5
 8007e68:	2164      	movs	r1, #100	; 0x64
 8007e6a:	fb01 f303 	mul.w	r3, r1, r3
 8007e6e:	1ad3      	subs	r3, r2, r3
 8007e70:	00db      	lsls	r3, r3, #3
 8007e72:	3332      	adds	r3, #50	; 0x32
 8007e74:	4a27      	ldr	r2, [pc, #156]	; (8007f14 <UART_SetConfig+0x384>)
 8007e76:	fba2 2303 	umull	r2, r3, r2, r3
 8007e7a:	095b      	lsrs	r3, r3, #5
 8007e7c:	005b      	lsls	r3, r3, #1
 8007e7e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007e82:	4498      	add	r8, r3
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	461d      	mov	r5, r3
 8007e88:	f04f 0600 	mov.w	r6, #0
 8007e8c:	46a9      	mov	r9, r5
 8007e8e:	46b2      	mov	sl, r6
 8007e90:	eb19 0309 	adds.w	r3, r9, r9
 8007e94:	eb4a 040a 	adc.w	r4, sl, sl
 8007e98:	4699      	mov	r9, r3
 8007e9a:	46a2      	mov	sl, r4
 8007e9c:	eb19 0905 	adds.w	r9, r9, r5
 8007ea0:	eb4a 0a06 	adc.w	sl, sl, r6
 8007ea4:	f04f 0100 	mov.w	r1, #0
 8007ea8:	f04f 0200 	mov.w	r2, #0
 8007eac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007eb0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007eb4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007eb8:	4689      	mov	r9, r1
 8007eba:	4692      	mov	sl, r2
 8007ebc:	eb19 0005 	adds.w	r0, r9, r5
 8007ec0:	eb4a 0106 	adc.w	r1, sl, r6
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	461d      	mov	r5, r3
 8007eca:	f04f 0600 	mov.w	r6, #0
 8007ece:	196b      	adds	r3, r5, r5
 8007ed0:	eb46 0406 	adc.w	r4, r6, r6
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	4623      	mov	r3, r4
 8007ed8:	f7f8 fed6 	bl	8000c88 <__aeabi_uldivmod>
 8007edc:	4603      	mov	r3, r0
 8007ede:	460c      	mov	r4, r1
 8007ee0:	461a      	mov	r2, r3
 8007ee2:	4b0c      	ldr	r3, [pc, #48]	; (8007f14 <UART_SetConfig+0x384>)
 8007ee4:	fba3 1302 	umull	r1, r3, r3, r2
 8007ee8:	095b      	lsrs	r3, r3, #5
 8007eea:	2164      	movs	r1, #100	; 0x64
 8007eec:	fb01 f303 	mul.w	r3, r1, r3
 8007ef0:	1ad3      	subs	r3, r2, r3
 8007ef2:	00db      	lsls	r3, r3, #3
 8007ef4:	3332      	adds	r3, #50	; 0x32
 8007ef6:	4a07      	ldr	r2, [pc, #28]	; (8007f14 <UART_SetConfig+0x384>)
 8007ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8007efc:	095b      	lsrs	r3, r3, #5
 8007efe:	f003 0207 	and.w	r2, r3, #7
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4442      	add	r2, r8
 8007f08:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007f0a:	e1b2      	b.n	8008272 <UART_SetConfig+0x6e2>
 8007f0c:	40011000 	.word	0x40011000
 8007f10:	40011400 	.word	0x40011400
 8007f14:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4ad7      	ldr	r2, [pc, #860]	; (800827c <UART_SetConfig+0x6ec>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d005      	beq.n	8007f2e <UART_SetConfig+0x39e>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4ad6      	ldr	r2, [pc, #856]	; (8008280 <UART_SetConfig+0x6f0>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	f040 80d1 	bne.w	80080d0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007f2e:	f7fc fff3 	bl	8004f18 <HAL_RCC_GetPCLK2Freq>
 8007f32:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	469a      	mov	sl, r3
 8007f38:	f04f 0b00 	mov.w	fp, #0
 8007f3c:	46d0      	mov	r8, sl
 8007f3e:	46d9      	mov	r9, fp
 8007f40:	eb18 0308 	adds.w	r3, r8, r8
 8007f44:	eb49 0409 	adc.w	r4, r9, r9
 8007f48:	4698      	mov	r8, r3
 8007f4a:	46a1      	mov	r9, r4
 8007f4c:	eb18 080a 	adds.w	r8, r8, sl
 8007f50:	eb49 090b 	adc.w	r9, r9, fp
 8007f54:	f04f 0100 	mov.w	r1, #0
 8007f58:	f04f 0200 	mov.w	r2, #0
 8007f5c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007f60:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007f64:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007f68:	4688      	mov	r8, r1
 8007f6a:	4691      	mov	r9, r2
 8007f6c:	eb1a 0508 	adds.w	r5, sl, r8
 8007f70:	eb4b 0609 	adc.w	r6, fp, r9
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	4619      	mov	r1, r3
 8007f7a:	f04f 0200 	mov.w	r2, #0
 8007f7e:	f04f 0300 	mov.w	r3, #0
 8007f82:	f04f 0400 	mov.w	r4, #0
 8007f86:	0094      	lsls	r4, r2, #2
 8007f88:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007f8c:	008b      	lsls	r3, r1, #2
 8007f8e:	461a      	mov	r2, r3
 8007f90:	4623      	mov	r3, r4
 8007f92:	4628      	mov	r0, r5
 8007f94:	4631      	mov	r1, r6
 8007f96:	f7f8 fe77 	bl	8000c88 <__aeabi_uldivmod>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	460c      	mov	r4, r1
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	4bb8      	ldr	r3, [pc, #736]	; (8008284 <UART_SetConfig+0x6f4>)
 8007fa2:	fba3 2302 	umull	r2, r3, r3, r2
 8007fa6:	095b      	lsrs	r3, r3, #5
 8007fa8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	469b      	mov	fp, r3
 8007fb0:	f04f 0c00 	mov.w	ip, #0
 8007fb4:	46d9      	mov	r9, fp
 8007fb6:	46e2      	mov	sl, ip
 8007fb8:	eb19 0309 	adds.w	r3, r9, r9
 8007fbc:	eb4a 040a 	adc.w	r4, sl, sl
 8007fc0:	4699      	mov	r9, r3
 8007fc2:	46a2      	mov	sl, r4
 8007fc4:	eb19 090b 	adds.w	r9, r9, fp
 8007fc8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007fcc:	f04f 0100 	mov.w	r1, #0
 8007fd0:	f04f 0200 	mov.w	r2, #0
 8007fd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007fd8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007fdc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007fe0:	4689      	mov	r9, r1
 8007fe2:	4692      	mov	sl, r2
 8007fe4:	eb1b 0509 	adds.w	r5, fp, r9
 8007fe8:	eb4c 060a 	adc.w	r6, ip, sl
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	4619      	mov	r1, r3
 8007ff2:	f04f 0200 	mov.w	r2, #0
 8007ff6:	f04f 0300 	mov.w	r3, #0
 8007ffa:	f04f 0400 	mov.w	r4, #0
 8007ffe:	0094      	lsls	r4, r2, #2
 8008000:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008004:	008b      	lsls	r3, r1, #2
 8008006:	461a      	mov	r2, r3
 8008008:	4623      	mov	r3, r4
 800800a:	4628      	mov	r0, r5
 800800c:	4631      	mov	r1, r6
 800800e:	f7f8 fe3b 	bl	8000c88 <__aeabi_uldivmod>
 8008012:	4603      	mov	r3, r0
 8008014:	460c      	mov	r4, r1
 8008016:	461a      	mov	r2, r3
 8008018:	4b9a      	ldr	r3, [pc, #616]	; (8008284 <UART_SetConfig+0x6f4>)
 800801a:	fba3 1302 	umull	r1, r3, r3, r2
 800801e:	095b      	lsrs	r3, r3, #5
 8008020:	2164      	movs	r1, #100	; 0x64
 8008022:	fb01 f303 	mul.w	r3, r1, r3
 8008026:	1ad3      	subs	r3, r2, r3
 8008028:	011b      	lsls	r3, r3, #4
 800802a:	3332      	adds	r3, #50	; 0x32
 800802c:	4a95      	ldr	r2, [pc, #596]	; (8008284 <UART_SetConfig+0x6f4>)
 800802e:	fba2 2303 	umull	r2, r3, r2, r3
 8008032:	095b      	lsrs	r3, r3, #5
 8008034:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008038:	4498      	add	r8, r3
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	469b      	mov	fp, r3
 800803e:	f04f 0c00 	mov.w	ip, #0
 8008042:	46d9      	mov	r9, fp
 8008044:	46e2      	mov	sl, ip
 8008046:	eb19 0309 	adds.w	r3, r9, r9
 800804a:	eb4a 040a 	adc.w	r4, sl, sl
 800804e:	4699      	mov	r9, r3
 8008050:	46a2      	mov	sl, r4
 8008052:	eb19 090b 	adds.w	r9, r9, fp
 8008056:	eb4a 0a0c 	adc.w	sl, sl, ip
 800805a:	f04f 0100 	mov.w	r1, #0
 800805e:	f04f 0200 	mov.w	r2, #0
 8008062:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008066:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800806a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800806e:	4689      	mov	r9, r1
 8008070:	4692      	mov	sl, r2
 8008072:	eb1b 0509 	adds.w	r5, fp, r9
 8008076:	eb4c 060a 	adc.w	r6, ip, sl
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	4619      	mov	r1, r3
 8008080:	f04f 0200 	mov.w	r2, #0
 8008084:	f04f 0300 	mov.w	r3, #0
 8008088:	f04f 0400 	mov.w	r4, #0
 800808c:	0094      	lsls	r4, r2, #2
 800808e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008092:	008b      	lsls	r3, r1, #2
 8008094:	461a      	mov	r2, r3
 8008096:	4623      	mov	r3, r4
 8008098:	4628      	mov	r0, r5
 800809a:	4631      	mov	r1, r6
 800809c:	f7f8 fdf4 	bl	8000c88 <__aeabi_uldivmod>
 80080a0:	4603      	mov	r3, r0
 80080a2:	460c      	mov	r4, r1
 80080a4:	461a      	mov	r2, r3
 80080a6:	4b77      	ldr	r3, [pc, #476]	; (8008284 <UART_SetConfig+0x6f4>)
 80080a8:	fba3 1302 	umull	r1, r3, r3, r2
 80080ac:	095b      	lsrs	r3, r3, #5
 80080ae:	2164      	movs	r1, #100	; 0x64
 80080b0:	fb01 f303 	mul.w	r3, r1, r3
 80080b4:	1ad3      	subs	r3, r2, r3
 80080b6:	011b      	lsls	r3, r3, #4
 80080b8:	3332      	adds	r3, #50	; 0x32
 80080ba:	4a72      	ldr	r2, [pc, #456]	; (8008284 <UART_SetConfig+0x6f4>)
 80080bc:	fba2 2303 	umull	r2, r3, r2, r3
 80080c0:	095b      	lsrs	r3, r3, #5
 80080c2:	f003 020f 	and.w	r2, r3, #15
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4442      	add	r2, r8
 80080cc:	609a      	str	r2, [r3, #8]
 80080ce:	e0d0      	b.n	8008272 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80080d0:	f7fc ff0e 	bl	8004ef0 <HAL_RCC_GetPCLK1Freq>
 80080d4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	469a      	mov	sl, r3
 80080da:	f04f 0b00 	mov.w	fp, #0
 80080de:	46d0      	mov	r8, sl
 80080e0:	46d9      	mov	r9, fp
 80080e2:	eb18 0308 	adds.w	r3, r8, r8
 80080e6:	eb49 0409 	adc.w	r4, r9, r9
 80080ea:	4698      	mov	r8, r3
 80080ec:	46a1      	mov	r9, r4
 80080ee:	eb18 080a 	adds.w	r8, r8, sl
 80080f2:	eb49 090b 	adc.w	r9, r9, fp
 80080f6:	f04f 0100 	mov.w	r1, #0
 80080fa:	f04f 0200 	mov.w	r2, #0
 80080fe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008102:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008106:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800810a:	4688      	mov	r8, r1
 800810c:	4691      	mov	r9, r2
 800810e:	eb1a 0508 	adds.w	r5, sl, r8
 8008112:	eb4b 0609 	adc.w	r6, fp, r9
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	4619      	mov	r1, r3
 800811c:	f04f 0200 	mov.w	r2, #0
 8008120:	f04f 0300 	mov.w	r3, #0
 8008124:	f04f 0400 	mov.w	r4, #0
 8008128:	0094      	lsls	r4, r2, #2
 800812a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800812e:	008b      	lsls	r3, r1, #2
 8008130:	461a      	mov	r2, r3
 8008132:	4623      	mov	r3, r4
 8008134:	4628      	mov	r0, r5
 8008136:	4631      	mov	r1, r6
 8008138:	f7f8 fda6 	bl	8000c88 <__aeabi_uldivmod>
 800813c:	4603      	mov	r3, r0
 800813e:	460c      	mov	r4, r1
 8008140:	461a      	mov	r2, r3
 8008142:	4b50      	ldr	r3, [pc, #320]	; (8008284 <UART_SetConfig+0x6f4>)
 8008144:	fba3 2302 	umull	r2, r3, r3, r2
 8008148:	095b      	lsrs	r3, r3, #5
 800814a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	469b      	mov	fp, r3
 8008152:	f04f 0c00 	mov.w	ip, #0
 8008156:	46d9      	mov	r9, fp
 8008158:	46e2      	mov	sl, ip
 800815a:	eb19 0309 	adds.w	r3, r9, r9
 800815e:	eb4a 040a 	adc.w	r4, sl, sl
 8008162:	4699      	mov	r9, r3
 8008164:	46a2      	mov	sl, r4
 8008166:	eb19 090b 	adds.w	r9, r9, fp
 800816a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800816e:	f04f 0100 	mov.w	r1, #0
 8008172:	f04f 0200 	mov.w	r2, #0
 8008176:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800817a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800817e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008182:	4689      	mov	r9, r1
 8008184:	4692      	mov	sl, r2
 8008186:	eb1b 0509 	adds.w	r5, fp, r9
 800818a:	eb4c 060a 	adc.w	r6, ip, sl
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	4619      	mov	r1, r3
 8008194:	f04f 0200 	mov.w	r2, #0
 8008198:	f04f 0300 	mov.w	r3, #0
 800819c:	f04f 0400 	mov.w	r4, #0
 80081a0:	0094      	lsls	r4, r2, #2
 80081a2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80081a6:	008b      	lsls	r3, r1, #2
 80081a8:	461a      	mov	r2, r3
 80081aa:	4623      	mov	r3, r4
 80081ac:	4628      	mov	r0, r5
 80081ae:	4631      	mov	r1, r6
 80081b0:	f7f8 fd6a 	bl	8000c88 <__aeabi_uldivmod>
 80081b4:	4603      	mov	r3, r0
 80081b6:	460c      	mov	r4, r1
 80081b8:	461a      	mov	r2, r3
 80081ba:	4b32      	ldr	r3, [pc, #200]	; (8008284 <UART_SetConfig+0x6f4>)
 80081bc:	fba3 1302 	umull	r1, r3, r3, r2
 80081c0:	095b      	lsrs	r3, r3, #5
 80081c2:	2164      	movs	r1, #100	; 0x64
 80081c4:	fb01 f303 	mul.w	r3, r1, r3
 80081c8:	1ad3      	subs	r3, r2, r3
 80081ca:	011b      	lsls	r3, r3, #4
 80081cc:	3332      	adds	r3, #50	; 0x32
 80081ce:	4a2d      	ldr	r2, [pc, #180]	; (8008284 <UART_SetConfig+0x6f4>)
 80081d0:	fba2 2303 	umull	r2, r3, r2, r3
 80081d4:	095b      	lsrs	r3, r3, #5
 80081d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80081da:	4498      	add	r8, r3
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	469b      	mov	fp, r3
 80081e0:	f04f 0c00 	mov.w	ip, #0
 80081e4:	46d9      	mov	r9, fp
 80081e6:	46e2      	mov	sl, ip
 80081e8:	eb19 0309 	adds.w	r3, r9, r9
 80081ec:	eb4a 040a 	adc.w	r4, sl, sl
 80081f0:	4699      	mov	r9, r3
 80081f2:	46a2      	mov	sl, r4
 80081f4:	eb19 090b 	adds.w	r9, r9, fp
 80081f8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80081fc:	f04f 0100 	mov.w	r1, #0
 8008200:	f04f 0200 	mov.w	r2, #0
 8008204:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008208:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800820c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008210:	4689      	mov	r9, r1
 8008212:	4692      	mov	sl, r2
 8008214:	eb1b 0509 	adds.w	r5, fp, r9
 8008218:	eb4c 060a 	adc.w	r6, ip, sl
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	4619      	mov	r1, r3
 8008222:	f04f 0200 	mov.w	r2, #0
 8008226:	f04f 0300 	mov.w	r3, #0
 800822a:	f04f 0400 	mov.w	r4, #0
 800822e:	0094      	lsls	r4, r2, #2
 8008230:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008234:	008b      	lsls	r3, r1, #2
 8008236:	461a      	mov	r2, r3
 8008238:	4623      	mov	r3, r4
 800823a:	4628      	mov	r0, r5
 800823c:	4631      	mov	r1, r6
 800823e:	f7f8 fd23 	bl	8000c88 <__aeabi_uldivmod>
 8008242:	4603      	mov	r3, r0
 8008244:	460c      	mov	r4, r1
 8008246:	461a      	mov	r2, r3
 8008248:	4b0e      	ldr	r3, [pc, #56]	; (8008284 <UART_SetConfig+0x6f4>)
 800824a:	fba3 1302 	umull	r1, r3, r3, r2
 800824e:	095b      	lsrs	r3, r3, #5
 8008250:	2164      	movs	r1, #100	; 0x64
 8008252:	fb01 f303 	mul.w	r3, r1, r3
 8008256:	1ad3      	subs	r3, r2, r3
 8008258:	011b      	lsls	r3, r3, #4
 800825a:	3332      	adds	r3, #50	; 0x32
 800825c:	4a09      	ldr	r2, [pc, #36]	; (8008284 <UART_SetConfig+0x6f4>)
 800825e:	fba2 2303 	umull	r2, r3, r2, r3
 8008262:	095b      	lsrs	r3, r3, #5
 8008264:	f003 020f 	and.w	r2, r3, #15
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4442      	add	r2, r8
 800826e:	609a      	str	r2, [r3, #8]
}
 8008270:	e7ff      	b.n	8008272 <UART_SetConfig+0x6e2>
 8008272:	bf00      	nop
 8008274:	3714      	adds	r7, #20
 8008276:	46bd      	mov	sp, r7
 8008278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800827c:	40011000 	.word	0x40011000
 8008280:	40011400 	.word	0x40011400
 8008284:	51eb851f 	.word	0x51eb851f

08008288 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8008288:	b084      	sub	sp, #16
 800828a:	b480      	push	{r7}
 800828c:	b085      	sub	sp, #20
 800828e:	af00      	add	r7, sp, #0
 8008290:	6078      	str	r0, [r7, #4]
 8008292:	f107 001c 	add.w	r0, r7, #28
 8008296:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800829a:	2300      	movs	r3, #0
 800829c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800829e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80082a0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80082a2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80082a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80082a6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80082a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80082aa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80082ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80082ae:	431a      	orrs	r2, r3
             Init.ClockDiv
 80082b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80082b2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80082b4:	68fa      	ldr	r2, [r7, #12]
 80082b6:	4313      	orrs	r3, r2
 80082b8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80082c2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80082c6:	68fa      	ldr	r2, [r7, #12]
 80082c8:	431a      	orrs	r2, r3
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80082ce:	2300      	movs	r3, #0
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3714      	adds	r7, #20
 80082d4:	46bd      	mov	sp, r7
 80082d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082da:	b004      	add	sp, #16
 80082dc:	4770      	bx	lr

080082de <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80082de:	b480      	push	{r7}
 80082e0:	b083      	sub	sp, #12
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	370c      	adds	r7, #12
 80082f0:	46bd      	mov	sp, r7
 80082f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f6:	4770      	bx	lr

080082f8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80082f8:	b480      	push	{r7}
 80082fa:	b083      	sub	sp, #12
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	681a      	ldr	r2, [r3, #0]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800830c:	2300      	movs	r3, #0
}
 800830e:	4618      	mov	r0, r3
 8008310:	370c      	adds	r7, #12
 8008312:	46bd      	mov	sp, r7
 8008314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008318:	4770      	bx	lr

0800831a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800831a:	b580      	push	{r7, lr}
 800831c:	b082      	sub	sp, #8
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2203      	movs	r2, #3
 8008326:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8008328:	2002      	movs	r0, #2
 800832a:	f7fa f857 	bl	80023dc <HAL_Delay>
  
  return HAL_OK;
 800832e:	2300      	movs	r3, #0
}
 8008330:	4618      	mov	r0, r3
 8008332:	3708      	adds	r7, #8
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}

08008338 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8008338:	b480      	push	{r7}
 800833a:	b083      	sub	sp, #12
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f003 0303 	and.w	r3, r3, #3
}
 8008348:	4618      	mov	r0, r3
 800834a:	370c      	adds	r7, #12
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr

08008354 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8008354:	b480      	push	{r7}
 8008356:	b085      	sub	sp, #20
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800835e:	2300      	movs	r3, #0
 8008360:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	681a      	ldr	r2, [r3, #0]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008372:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008378:	431a      	orrs	r2, r3
                       Command->CPSM);
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800837e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008380:	68fa      	ldr	r2, [r7, #12]
 8008382:	4313      	orrs	r3, r2
 8008384:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	68db      	ldr	r3, [r3, #12]
 800838a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800838e:	f023 030f 	bic.w	r3, r3, #15
 8008392:	68fa      	ldr	r2, [r7, #12]
 8008394:	431a      	orrs	r2, r3
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800839a:	2300      	movs	r3, #0
}
 800839c:	4618      	mov	r0, r3
 800839e:	3714      	adds	r7, #20
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr

080083a8 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b083      	sub	sp, #12
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	691b      	ldr	r3, [r3, #16]
 80083b4:	b2db      	uxtb	r3, r3
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	370c      	adds	r7, #12
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr

080083c2 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80083c2:	b480      	push	{r7}
 80083c4:	b085      	sub	sp, #20
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	6078      	str	r0, [r7, #4]
 80083ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	3314      	adds	r3, #20
 80083d0:	461a      	mov	r2, r3
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	4413      	add	r3, r2
 80083d6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
}  
 80083dc:	4618      	mov	r0, r3
 80083de:	3714      	adds	r7, #20
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr

080083e8 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b085      	sub	sp, #20
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80083f2:	2300      	movs	r3, #0
 80083f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	681a      	ldr	r2, [r3, #0]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	685a      	ldr	r2, [r3, #4]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800840e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008414:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800841a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800841c:	68fa      	ldr	r2, [r7, #12]
 800841e:	4313      	orrs	r3, r2
 8008420:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008426:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	431a      	orrs	r2, r3
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008432:	2300      	movs	r3, #0

}
 8008434:	4618      	mov	r0, r3
 8008436:	3714      	adds	r7, #20
 8008438:	46bd      	mov	sp, r7
 800843a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843e:	4770      	bx	lr

08008440 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b088      	sub	sp, #32
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800844e:	2310      	movs	r3, #16
 8008450:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008452:	2340      	movs	r3, #64	; 0x40
 8008454:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008456:	2300      	movs	r3, #0
 8008458:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800845a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800845e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008460:	f107 0308 	add.w	r3, r7, #8
 8008464:	4619      	mov	r1, r3
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f7ff ff74 	bl	8008354 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800846c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008470:	2110      	movs	r1, #16
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f000 fa40 	bl	80088f8 <SDMMC_GetCmdResp1>
 8008478:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800847a:	69fb      	ldr	r3, [r7, #28]
}
 800847c:	4618      	mov	r0, r3
 800847e:	3720      	adds	r7, #32
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b088      	sub	sp, #32
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008492:	2311      	movs	r3, #17
 8008494:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008496:	2340      	movs	r3, #64	; 0x40
 8008498:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800849a:	2300      	movs	r3, #0
 800849c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800849e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084a2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80084a4:	f107 0308 	add.w	r3, r7, #8
 80084a8:	4619      	mov	r1, r3
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f7ff ff52 	bl	8008354 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80084b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80084b4:	2111      	movs	r1, #17
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f000 fa1e 	bl	80088f8 <SDMMC_GetCmdResp1>
 80084bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80084be:	69fb      	ldr	r3, [r7, #28]
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3720      	adds	r7, #32
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}

080084c8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b088      	sub	sp, #32
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80084d6:	2312      	movs	r3, #18
 80084d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80084da:	2340      	movs	r3, #64	; 0x40
 80084dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80084de:	2300      	movs	r3, #0
 80084e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80084e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084e6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80084e8:	f107 0308 	add.w	r3, r7, #8
 80084ec:	4619      	mov	r1, r3
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f7ff ff30 	bl	8008354 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80084f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80084f8:	2112      	movs	r1, #18
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 f9fc 	bl	80088f8 <SDMMC_GetCmdResp1>
 8008500:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008502:	69fb      	ldr	r3, [r7, #28]
}
 8008504:	4618      	mov	r0, r3
 8008506:	3720      	adds	r7, #32
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b088      	sub	sp, #32
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800851a:	2318      	movs	r3, #24
 800851c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800851e:	2340      	movs	r3, #64	; 0x40
 8008520:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008522:	2300      	movs	r3, #0
 8008524:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008526:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800852a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800852c:	f107 0308 	add.w	r3, r7, #8
 8008530:	4619      	mov	r1, r3
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f7ff ff0e 	bl	8008354 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008538:	f241 3288 	movw	r2, #5000	; 0x1388
 800853c:	2118      	movs	r1, #24
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 f9da 	bl	80088f8 <SDMMC_GetCmdResp1>
 8008544:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008546:	69fb      	ldr	r3, [r7, #28]
}
 8008548:	4618      	mov	r0, r3
 800854a:	3720      	adds	r7, #32
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}

08008550 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b088      	sub	sp, #32
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800855e:	2319      	movs	r3, #25
 8008560:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008562:	2340      	movs	r3, #64	; 0x40
 8008564:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008566:	2300      	movs	r3, #0
 8008568:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800856a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800856e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008570:	f107 0308 	add.w	r3, r7, #8
 8008574:	4619      	mov	r1, r3
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f7ff feec 	bl	8008354 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800857c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008580:	2119      	movs	r1, #25
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f000 f9b8 	bl	80088f8 <SDMMC_GetCmdResp1>
 8008588:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800858a:	69fb      	ldr	r3, [r7, #28]
}
 800858c:	4618      	mov	r0, r3
 800858e:	3720      	adds	r7, #32
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b088      	sub	sp, #32
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800859c:	2300      	movs	r3, #0
 800859e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80085a0:	230c      	movs	r3, #12
 80085a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80085a4:	2340      	movs	r3, #64	; 0x40
 80085a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80085a8:	2300      	movs	r3, #0
 80085aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80085ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085b0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80085b2:	f107 0308 	add.w	r3, r7, #8
 80085b6:	4619      	mov	r1, r3
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f7ff fecb 	bl	8008354 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80085be:	4a05      	ldr	r2, [pc, #20]	; (80085d4 <SDMMC_CmdStopTransfer+0x40>)
 80085c0:	210c      	movs	r1, #12
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 f998 	bl	80088f8 <SDMMC_GetCmdResp1>
 80085c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80085ca:	69fb      	ldr	r3, [r7, #28]
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3720      	adds	r7, #32
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}
 80085d4:	05f5e100 	.word	0x05f5e100

080085d8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b08a      	sub	sp, #40	; 0x28
 80085dc:	af00      	add	r7, sp, #0
 80085de:	60f8      	str	r0, [r7, #12]
 80085e0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80085e8:	2307      	movs	r3, #7
 80085ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80085ec:	2340      	movs	r3, #64	; 0x40
 80085ee:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80085f0:	2300      	movs	r3, #0
 80085f2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80085f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085f8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80085fa:	f107 0310 	add.w	r3, r7, #16
 80085fe:	4619      	mov	r1, r3
 8008600:	68f8      	ldr	r0, [r7, #12]
 8008602:	f7ff fea7 	bl	8008354 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8008606:	f241 3288 	movw	r2, #5000	; 0x1388
 800860a:	2107      	movs	r1, #7
 800860c:	68f8      	ldr	r0, [r7, #12]
 800860e:	f000 f973 	bl	80088f8 <SDMMC_GetCmdResp1>
 8008612:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008616:	4618      	mov	r0, r3
 8008618:	3728      	adds	r7, #40	; 0x28
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}

0800861e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800861e:	b580      	push	{r7, lr}
 8008620:	b088      	sub	sp, #32
 8008622:	af00      	add	r7, sp, #0
 8008624:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8008626:	2300      	movs	r3, #0
 8008628:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800862a:	2300      	movs	r3, #0
 800862c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800862e:	2300      	movs	r3, #0
 8008630:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008632:	2300      	movs	r3, #0
 8008634:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008636:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800863a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800863c:	f107 0308 	add.w	r3, r7, #8
 8008640:	4619      	mov	r1, r3
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f7ff fe86 	bl	8008354 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f000 f92d 	bl	80088a8 <SDMMC_GetCmdError>
 800864e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008650:	69fb      	ldr	r3, [r7, #28]
}
 8008652:	4618      	mov	r0, r3
 8008654:	3720      	adds	r7, #32
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}

0800865a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800865a:	b580      	push	{r7, lr}
 800865c:	b088      	sub	sp, #32
 800865e:	af00      	add	r7, sp, #0
 8008660:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008662:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008666:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008668:	2308      	movs	r3, #8
 800866a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800866c:	2340      	movs	r3, #64	; 0x40
 800866e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008670:	2300      	movs	r3, #0
 8008672:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008674:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008678:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800867a:	f107 0308 	add.w	r3, r7, #8
 800867e:	4619      	mov	r1, r3
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f7ff fe67 	bl	8008354 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f000 fb16 	bl	8008cb8 <SDMMC_GetCmdResp7>
 800868c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800868e:	69fb      	ldr	r3, [r7, #28]
}
 8008690:	4618      	mov	r0, r3
 8008692:	3720      	adds	r7, #32
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}

08008698 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b088      	sub	sp, #32
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80086a6:	2337      	movs	r3, #55	; 0x37
 80086a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80086aa:	2340      	movs	r3, #64	; 0x40
 80086ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80086ae:	2300      	movs	r3, #0
 80086b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80086b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086b6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80086b8:	f107 0308 	add.w	r3, r7, #8
 80086bc:	4619      	mov	r1, r3
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f7ff fe48 	bl	8008354 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80086c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80086c8:	2137      	movs	r1, #55	; 0x37
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f000 f914 	bl	80088f8 <SDMMC_GetCmdResp1>
 80086d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80086d2:	69fb      	ldr	r3, [r7, #28]
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3720      	adds	r7, #32
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}

080086dc <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b088      	sub	sp, #32
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80086ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80086f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80086f2:	2329      	movs	r3, #41	; 0x29
 80086f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80086f6:	2340      	movs	r3, #64	; 0x40
 80086f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80086fa:	2300      	movs	r3, #0
 80086fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80086fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008702:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008704:	f107 0308 	add.w	r3, r7, #8
 8008708:	4619      	mov	r1, r3
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f7ff fe22 	bl	8008354 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f000 fa23 	bl	8008b5c <SDMMC_GetCmdResp3>
 8008716:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008718:	69fb      	ldr	r3, [r7, #28]
}
 800871a:	4618      	mov	r0, r3
 800871c:	3720      	adds	r7, #32
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}

08008722 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8008722:	b580      	push	{r7, lr}
 8008724:	b088      	sub	sp, #32
 8008726:	af00      	add	r7, sp, #0
 8008728:	6078      	str	r0, [r7, #4]
 800872a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008730:	2306      	movs	r3, #6
 8008732:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008734:	2340      	movs	r3, #64	; 0x40
 8008736:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008738:	2300      	movs	r3, #0
 800873a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800873c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008740:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008742:	f107 0308 	add.w	r3, r7, #8
 8008746:	4619      	mov	r1, r3
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f7ff fe03 	bl	8008354 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800874e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008752:	2106      	movs	r1, #6
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f000 f8cf 	bl	80088f8 <SDMMC_GetCmdResp1>
 800875a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800875c:	69fb      	ldr	r3, [r7, #28]
}
 800875e:	4618      	mov	r0, r3
 8008760:	3720      	adds	r7, #32
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}

08008766 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8008766:	b580      	push	{r7, lr}
 8008768:	b088      	sub	sp, #32
 800876a:	af00      	add	r7, sp, #0
 800876c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800876e:	2300      	movs	r3, #0
 8008770:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008772:	2333      	movs	r3, #51	; 0x33
 8008774:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008776:	2340      	movs	r3, #64	; 0x40
 8008778:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800877a:	2300      	movs	r3, #0
 800877c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800877e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008782:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008784:	f107 0308 	add.w	r3, r7, #8
 8008788:	4619      	mov	r1, r3
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f7ff fde2 	bl	8008354 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8008790:	f241 3288 	movw	r2, #5000	; 0x1388
 8008794:	2133      	movs	r1, #51	; 0x33
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f000 f8ae 	bl	80088f8 <SDMMC_GetCmdResp1>
 800879c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800879e:	69fb      	ldr	r3, [r7, #28]
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3720      	adds	r7, #32
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b088      	sub	sp, #32
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80087b0:	2300      	movs	r3, #0
 80087b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80087b4:	2302      	movs	r3, #2
 80087b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80087b8:	23c0      	movs	r3, #192	; 0xc0
 80087ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80087bc:	2300      	movs	r3, #0
 80087be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80087c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087c4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80087c6:	f107 0308 	add.w	r3, r7, #8
 80087ca:	4619      	mov	r1, r3
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f7ff fdc1 	bl	8008354 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f000 f97c 	bl	8008ad0 <SDMMC_GetCmdResp2>
 80087d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80087da:	69fb      	ldr	r3, [r7, #28]
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3720      	adds	r7, #32
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b088      	sub	sp, #32
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80087f2:	2309      	movs	r3, #9
 80087f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80087f6:	23c0      	movs	r3, #192	; 0xc0
 80087f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80087fa:	2300      	movs	r3, #0
 80087fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80087fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008802:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008804:	f107 0308 	add.w	r3, r7, #8
 8008808:	4619      	mov	r1, r3
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f7ff fda2 	bl	8008354 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 f95d 	bl	8008ad0 <SDMMC_GetCmdResp2>
 8008816:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008818:	69fb      	ldr	r3, [r7, #28]
}
 800881a:	4618      	mov	r0, r3
 800881c:	3720      	adds	r7, #32
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}

08008822 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8008822:	b580      	push	{r7, lr}
 8008824:	b088      	sub	sp, #32
 8008826:	af00      	add	r7, sp, #0
 8008828:	6078      	str	r0, [r7, #4]
 800882a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800882c:	2300      	movs	r3, #0
 800882e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008830:	2303      	movs	r3, #3
 8008832:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008834:	2340      	movs	r3, #64	; 0x40
 8008836:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008838:	2300      	movs	r3, #0
 800883a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800883c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008840:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008842:	f107 0308 	add.w	r3, r7, #8
 8008846:	4619      	mov	r1, r3
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f7ff fd83 	bl	8008354 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800884e:	683a      	ldr	r2, [r7, #0]
 8008850:	2103      	movs	r1, #3
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 f9bc 	bl	8008bd0 <SDMMC_GetCmdResp6>
 8008858:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800885a:	69fb      	ldr	r3, [r7, #28]
}
 800885c:	4618      	mov	r0, r3
 800885e:	3720      	adds	r7, #32
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}

08008864 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b088      	sub	sp, #32
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008872:	230d      	movs	r3, #13
 8008874:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008876:	2340      	movs	r3, #64	; 0x40
 8008878:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800887a:	2300      	movs	r3, #0
 800887c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800887e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008882:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008884:	f107 0308 	add.w	r3, r7, #8
 8008888:	4619      	mov	r1, r3
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f7ff fd62 	bl	8008354 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8008890:	f241 3288 	movw	r2, #5000	; 0x1388
 8008894:	210d      	movs	r1, #13
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f000 f82e 	bl	80088f8 <SDMMC_GetCmdResp1>
 800889c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800889e:	69fb      	ldr	r3, [r7, #28]
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3720      	adds	r7, #32
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80088a8:	b490      	push	{r4, r7}
 80088aa:	b082      	sub	sp, #8
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80088b0:	4b0f      	ldr	r3, [pc, #60]	; (80088f0 <SDMMC_GetCmdError+0x48>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4a0f      	ldr	r2, [pc, #60]	; (80088f4 <SDMMC_GetCmdError+0x4c>)
 80088b6:	fba2 2303 	umull	r2, r3, r2, r3
 80088ba:	0a5b      	lsrs	r3, r3, #9
 80088bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80088c0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80088c4:	4623      	mov	r3, r4
 80088c6:	1e5c      	subs	r4, r3, #1
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d102      	bne.n	80088d2 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80088cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80088d0:	e009      	b.n	80088e6 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d0f2      	beq.n	80088c4 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	22c5      	movs	r2, #197	; 0xc5
 80088e2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80088e4:	2300      	movs	r3, #0
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3708      	adds	r7, #8
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bc90      	pop	{r4, r7}
 80088ee:	4770      	bx	lr
 80088f0:	20000004 	.word	0x20000004
 80088f4:	10624dd3 	.word	0x10624dd3

080088f8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80088f8:	b590      	push	{r4, r7, lr}
 80088fa:	b087      	sub	sp, #28
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	60f8      	str	r0, [r7, #12]
 8008900:	460b      	mov	r3, r1
 8008902:	607a      	str	r2, [r7, #4]
 8008904:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008906:	4b6f      	ldr	r3, [pc, #444]	; (8008ac4 <SDMMC_GetCmdResp1+0x1cc>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a6f      	ldr	r2, [pc, #444]	; (8008ac8 <SDMMC_GetCmdResp1+0x1d0>)
 800890c:	fba2 2303 	umull	r2, r3, r2, r3
 8008910:	0a5b      	lsrs	r3, r3, #9
 8008912:	687a      	ldr	r2, [r7, #4]
 8008914:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008918:	4623      	mov	r3, r4
 800891a:	1e5c      	subs	r4, r3, #1
 800891c:	2b00      	cmp	r3, #0
 800891e:	d102      	bne.n	8008926 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008920:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008924:	e0c9      	b.n	8008aba <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800892a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008932:	2b00      	cmp	r3, #0
 8008934:	d0f0      	beq.n	8008918 <SDMMC_GetCmdResp1+0x20>
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800893c:	2b00      	cmp	r3, #0
 800893e:	d1eb      	bne.n	8008918 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008944:	f003 0304 	and.w	r3, r3, #4
 8008948:	2b00      	cmp	r3, #0
 800894a:	d004      	beq.n	8008956 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	2204      	movs	r2, #4
 8008950:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008952:	2304      	movs	r3, #4
 8008954:	e0b1      	b.n	8008aba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800895a:	f003 0301 	and.w	r3, r3, #1
 800895e:	2b00      	cmp	r3, #0
 8008960:	d004      	beq.n	800896c <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2201      	movs	r2, #1
 8008966:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008968:	2301      	movs	r3, #1
 800896a:	e0a6      	b.n	8008aba <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	22c5      	movs	r2, #197	; 0xc5
 8008970:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008972:	68f8      	ldr	r0, [r7, #12]
 8008974:	f7ff fd18 	bl	80083a8 <SDIO_GetCommandResponse>
 8008978:	4603      	mov	r3, r0
 800897a:	461a      	mov	r2, r3
 800897c:	7afb      	ldrb	r3, [r7, #11]
 800897e:	4293      	cmp	r3, r2
 8008980:	d001      	beq.n	8008986 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008982:	2301      	movs	r3, #1
 8008984:	e099      	b.n	8008aba <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008986:	2100      	movs	r1, #0
 8008988:	68f8      	ldr	r0, [r7, #12]
 800898a:	f7ff fd1a 	bl	80083c2 <SDIO_GetResponse>
 800898e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008990:	693a      	ldr	r2, [r7, #16]
 8008992:	4b4e      	ldr	r3, [pc, #312]	; (8008acc <SDMMC_GetCmdResp1+0x1d4>)
 8008994:	4013      	ands	r3, r2
 8008996:	2b00      	cmp	r3, #0
 8008998:	d101      	bne.n	800899e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800899a:	2300      	movs	r3, #0
 800899c:	e08d      	b.n	8008aba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	da02      	bge.n	80089aa <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80089a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80089a8:	e087      	b.n	8008aba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d001      	beq.n	80089b8 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80089b4:	2340      	movs	r3, #64	; 0x40
 80089b6:	e080      	b.n	8008aba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d001      	beq.n	80089c6 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80089c2:	2380      	movs	r3, #128	; 0x80
 80089c4:	e079      	b.n	8008aba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d002      	beq.n	80089d6 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80089d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80089d4:	e071      	b.n	8008aba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d002      	beq.n	80089e6 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80089e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80089e4:	e069      	b.n	8008aba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d002      	beq.n	80089f6 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80089f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089f4:	e061      	b.n	8008aba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d002      	beq.n	8008a06 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008a00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008a04:	e059      	b.n	8008aba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d002      	beq.n	8008a16 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008a10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a14:	e051      	b.n	8008aba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d002      	beq.n	8008a26 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008a20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008a24:	e049      	b.n	8008aba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d002      	beq.n	8008a36 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008a30:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008a34:	e041      	b.n	8008aba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d002      	beq.n	8008a46 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8008a40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a44:	e039      	b.n	8008aba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008a46:	693b      	ldr	r3, [r7, #16]
 8008a48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d002      	beq.n	8008a56 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008a50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008a54:	e031      	b.n	8008aba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d002      	beq.n	8008a66 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008a60:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008a64:	e029      	b.n	8008aba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d002      	beq.n	8008a76 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008a70:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008a74:	e021      	b.n	8008aba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d002      	beq.n	8008a86 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008a80:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008a84:	e019      	b.n	8008aba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d002      	beq.n	8008a96 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008a90:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008a94:	e011      	b.n	8008aba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d002      	beq.n	8008aa6 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008aa0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008aa4:	e009      	b.n	8008aba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	f003 0308 	and.w	r3, r3, #8
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d002      	beq.n	8008ab6 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008ab0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008ab4:	e001      	b.n	8008aba <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008ab6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	371c      	adds	r7, #28
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd90      	pop	{r4, r7, pc}
 8008ac2:	bf00      	nop
 8008ac4:	20000004 	.word	0x20000004
 8008ac8:	10624dd3 	.word	0x10624dd3
 8008acc:	fdffe008 	.word	0xfdffe008

08008ad0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8008ad0:	b490      	push	{r4, r7}
 8008ad2:	b084      	sub	sp, #16
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008ad8:	4b1e      	ldr	r3, [pc, #120]	; (8008b54 <SDMMC_GetCmdResp2+0x84>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4a1e      	ldr	r2, [pc, #120]	; (8008b58 <SDMMC_GetCmdResp2+0x88>)
 8008ade:	fba2 2303 	umull	r2, r3, r2, r3
 8008ae2:	0a5b      	lsrs	r3, r3, #9
 8008ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ae8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008aec:	4623      	mov	r3, r4
 8008aee:	1e5c      	subs	r4, r3, #1
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d102      	bne.n	8008afa <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008af4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008af8:	e026      	b.n	8008b48 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008afe:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d0f0      	beq.n	8008aec <SDMMC_GetCmdResp2+0x1c>
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d1eb      	bne.n	8008aec <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b18:	f003 0304 	and.w	r3, r3, #4
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d004      	beq.n	8008b2a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2204      	movs	r2, #4
 8008b24:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008b26:	2304      	movs	r3, #4
 8008b28:	e00e      	b.n	8008b48 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b2e:	f003 0301 	and.w	r3, r3, #1
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d004      	beq.n	8008b40 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2201      	movs	r2, #1
 8008b3a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	e003      	b.n	8008b48 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	22c5      	movs	r2, #197	; 0xc5
 8008b44:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008b46:	2300      	movs	r3, #0
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3710      	adds	r7, #16
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bc90      	pop	{r4, r7}
 8008b50:	4770      	bx	lr
 8008b52:	bf00      	nop
 8008b54:	20000004 	.word	0x20000004
 8008b58:	10624dd3 	.word	0x10624dd3

08008b5c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8008b5c:	b490      	push	{r4, r7}
 8008b5e:	b084      	sub	sp, #16
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008b64:	4b18      	ldr	r3, [pc, #96]	; (8008bc8 <SDMMC_GetCmdResp3+0x6c>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4a18      	ldr	r2, [pc, #96]	; (8008bcc <SDMMC_GetCmdResp3+0x70>)
 8008b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8008b6e:	0a5b      	lsrs	r3, r3, #9
 8008b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b74:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008b78:	4623      	mov	r3, r4
 8008b7a:	1e5c      	subs	r4, r3, #1
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d102      	bne.n	8008b86 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008b80:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008b84:	e01b      	b.n	8008bbe <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b8a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d0f0      	beq.n	8008b78 <SDMMC_GetCmdResp3+0x1c>
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d1eb      	bne.n	8008b78 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ba4:	f003 0304 	and.w	r3, r3, #4
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d004      	beq.n	8008bb6 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2204      	movs	r2, #4
 8008bb0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008bb2:	2304      	movs	r3, #4
 8008bb4:	e003      	b.n	8008bbe <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	22c5      	movs	r2, #197	; 0xc5
 8008bba:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008bbc:	2300      	movs	r3, #0
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3710      	adds	r7, #16
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bc90      	pop	{r4, r7}
 8008bc6:	4770      	bx	lr
 8008bc8:	20000004 	.word	0x20000004
 8008bcc:	10624dd3 	.word	0x10624dd3

08008bd0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008bd0:	b590      	push	{r4, r7, lr}
 8008bd2:	b087      	sub	sp, #28
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	60f8      	str	r0, [r7, #12]
 8008bd8:	460b      	mov	r3, r1
 8008bda:	607a      	str	r2, [r7, #4]
 8008bdc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008bde:	4b34      	ldr	r3, [pc, #208]	; (8008cb0 <SDMMC_GetCmdResp6+0xe0>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	4a34      	ldr	r2, [pc, #208]	; (8008cb4 <SDMMC_GetCmdResp6+0xe4>)
 8008be4:	fba2 2303 	umull	r2, r3, r2, r3
 8008be8:	0a5b      	lsrs	r3, r3, #9
 8008bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bee:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008bf2:	4623      	mov	r3, r4
 8008bf4:	1e5c      	subs	r4, r3, #1
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d102      	bne.n	8008c00 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008bfa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008bfe:	e052      	b.n	8008ca6 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c04:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d0f0      	beq.n	8008bf2 <SDMMC_GetCmdResp6+0x22>
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d1eb      	bne.n	8008bf2 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c1e:	f003 0304 	and.w	r3, r3, #4
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d004      	beq.n	8008c30 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	2204      	movs	r2, #4
 8008c2a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008c2c:	2304      	movs	r3, #4
 8008c2e:	e03a      	b.n	8008ca6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c34:	f003 0301 	and.w	r3, r3, #1
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d004      	beq.n	8008c46 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2201      	movs	r2, #1
 8008c40:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008c42:	2301      	movs	r3, #1
 8008c44:	e02f      	b.n	8008ca6 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008c46:	68f8      	ldr	r0, [r7, #12]
 8008c48:	f7ff fbae 	bl	80083a8 <SDIO_GetCommandResponse>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	461a      	mov	r2, r3
 8008c50:	7afb      	ldrb	r3, [r7, #11]
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d001      	beq.n	8008c5a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008c56:	2301      	movs	r3, #1
 8008c58:	e025      	b.n	8008ca6 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	22c5      	movs	r2, #197	; 0xc5
 8008c5e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008c60:	2100      	movs	r1, #0
 8008c62:	68f8      	ldr	r0, [r7, #12]
 8008c64:	f7ff fbad 	bl	80083c2 <SDIO_GetResponse>
 8008c68:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d106      	bne.n	8008c82 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	0c1b      	lsrs	r3, r3, #16
 8008c78:	b29a      	uxth	r2, r3
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	e011      	b.n	8008ca6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d002      	beq.n	8008c92 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008c8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008c90:	e009      	b.n	8008ca6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d002      	beq.n	8008ca2 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008c9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ca0:	e001      	b.n	8008ca6 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008ca2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	371c      	adds	r7, #28
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd90      	pop	{r4, r7, pc}
 8008cae:	bf00      	nop
 8008cb0:	20000004 	.word	0x20000004
 8008cb4:	10624dd3 	.word	0x10624dd3

08008cb8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8008cb8:	b490      	push	{r4, r7}
 8008cba:	b084      	sub	sp, #16
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008cc0:	4b21      	ldr	r3, [pc, #132]	; (8008d48 <SDMMC_GetCmdResp7+0x90>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4a21      	ldr	r2, [pc, #132]	; (8008d4c <SDMMC_GetCmdResp7+0x94>)
 8008cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8008cca:	0a5b      	lsrs	r3, r3, #9
 8008ccc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cd0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008cd4:	4623      	mov	r3, r4
 8008cd6:	1e5c      	subs	r4, r3, #1
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d102      	bne.n	8008ce2 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008cdc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008ce0:	e02c      	b.n	8008d3c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ce6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d0f0      	beq.n	8008cd4 <SDMMC_GetCmdResp7+0x1c>
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d1eb      	bne.n	8008cd4 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d00:	f003 0304 	and.w	r3, r3, #4
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d004      	beq.n	8008d12 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2204      	movs	r2, #4
 8008d0c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008d0e:	2304      	movs	r3, #4
 8008d10:	e014      	b.n	8008d3c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d16:	f003 0301 	and.w	r3, r3, #1
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d004      	beq.n	8008d28 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2201      	movs	r2, #1
 8008d22:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008d24:	2301      	movs	r3, #1
 8008d26:	e009      	b.n	8008d3c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d002      	beq.n	8008d3a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2240      	movs	r2, #64	; 0x40
 8008d38:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008d3a:	2300      	movs	r3, #0
  
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3710      	adds	r7, #16
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bc90      	pop	{r4, r7}
 8008d44:	4770      	bx	lr
 8008d46:	bf00      	nop
 8008d48:	20000004 	.word	0x20000004
 8008d4c:	10624dd3 	.word	0x10624dd3

08008d50 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008d50:	b084      	sub	sp, #16
 8008d52:	b580      	push	{r7, lr}
 8008d54:	b084      	sub	sp, #16
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
 8008d5a:	f107 001c 	add.w	r0, r7, #28
 8008d5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	d122      	bne.n	8008dae <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	68db      	ldr	r3, [r3, #12]
 8008d78:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008d7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	68db      	ldr	r3, [r3, #12]
 8008d88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008d90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d92:	2b01      	cmp	r3, #1
 8008d94:	d105      	bne.n	8008da2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	68db      	ldr	r3, [r3, #12]
 8008d9a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f001 fa7c 	bl	800a2a0 <USB_CoreReset>
 8008da8:	4603      	mov	r3, r0
 8008daa:	73fb      	strb	r3, [r7, #15]
 8008dac:	e01a      	b.n	8008de4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	68db      	ldr	r3, [r3, #12]
 8008db2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f001 fa70 	bl	800a2a0 <USB_CoreReset>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008dc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d106      	bne.n	8008dd8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	639a      	str	r2, [r3, #56]	; 0x38
 8008dd6:	e005      	b.n	8008de4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ddc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	d10b      	bne.n	8008e02 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	689b      	ldr	r3, [r3, #8]
 8008dee:	f043 0206 	orr.w	r2, r3, #6
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	689b      	ldr	r3, [r3, #8]
 8008dfa:	f043 0220 	orr.w	r2, r3, #32
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3710      	adds	r7, #16
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e0e:	b004      	add	sp, #16
 8008e10:	4770      	bx	lr
	...

08008e14 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b087      	sub	sp, #28
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	60f8      	str	r0, [r7, #12]
 8008e1c:	60b9      	str	r1, [r7, #8]
 8008e1e:	4613      	mov	r3, r2
 8008e20:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008e22:	79fb      	ldrb	r3, [r7, #7]
 8008e24:	2b02      	cmp	r3, #2
 8008e26:	d165      	bne.n	8008ef4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	4a41      	ldr	r2, [pc, #260]	; (8008f30 <USB_SetTurnaroundTime+0x11c>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d906      	bls.n	8008e3e <USB_SetTurnaroundTime+0x2a>
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	4a40      	ldr	r2, [pc, #256]	; (8008f34 <USB_SetTurnaroundTime+0x120>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d802      	bhi.n	8008e3e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008e38:	230f      	movs	r3, #15
 8008e3a:	617b      	str	r3, [r7, #20]
 8008e3c:	e062      	b.n	8008f04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	4a3c      	ldr	r2, [pc, #240]	; (8008f34 <USB_SetTurnaroundTime+0x120>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d906      	bls.n	8008e54 <USB_SetTurnaroundTime+0x40>
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	4a3b      	ldr	r2, [pc, #236]	; (8008f38 <USB_SetTurnaroundTime+0x124>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d802      	bhi.n	8008e54 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008e4e:	230e      	movs	r3, #14
 8008e50:	617b      	str	r3, [r7, #20]
 8008e52:	e057      	b.n	8008f04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	4a38      	ldr	r2, [pc, #224]	; (8008f38 <USB_SetTurnaroundTime+0x124>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d906      	bls.n	8008e6a <USB_SetTurnaroundTime+0x56>
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	4a37      	ldr	r2, [pc, #220]	; (8008f3c <USB_SetTurnaroundTime+0x128>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d802      	bhi.n	8008e6a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008e64:	230d      	movs	r3, #13
 8008e66:	617b      	str	r3, [r7, #20]
 8008e68:	e04c      	b.n	8008f04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	4a33      	ldr	r2, [pc, #204]	; (8008f3c <USB_SetTurnaroundTime+0x128>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d906      	bls.n	8008e80 <USB_SetTurnaroundTime+0x6c>
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	4a32      	ldr	r2, [pc, #200]	; (8008f40 <USB_SetTurnaroundTime+0x12c>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d802      	bhi.n	8008e80 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008e7a:	230c      	movs	r3, #12
 8008e7c:	617b      	str	r3, [r7, #20]
 8008e7e:	e041      	b.n	8008f04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	4a2f      	ldr	r2, [pc, #188]	; (8008f40 <USB_SetTurnaroundTime+0x12c>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d906      	bls.n	8008e96 <USB_SetTurnaroundTime+0x82>
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	4a2e      	ldr	r2, [pc, #184]	; (8008f44 <USB_SetTurnaroundTime+0x130>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d802      	bhi.n	8008e96 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008e90:	230b      	movs	r3, #11
 8008e92:	617b      	str	r3, [r7, #20]
 8008e94:	e036      	b.n	8008f04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	4a2a      	ldr	r2, [pc, #168]	; (8008f44 <USB_SetTurnaroundTime+0x130>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d906      	bls.n	8008eac <USB_SetTurnaroundTime+0x98>
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	4a29      	ldr	r2, [pc, #164]	; (8008f48 <USB_SetTurnaroundTime+0x134>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d802      	bhi.n	8008eac <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008ea6:	230a      	movs	r3, #10
 8008ea8:	617b      	str	r3, [r7, #20]
 8008eaa:	e02b      	b.n	8008f04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	4a26      	ldr	r2, [pc, #152]	; (8008f48 <USB_SetTurnaroundTime+0x134>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d906      	bls.n	8008ec2 <USB_SetTurnaroundTime+0xae>
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	4a25      	ldr	r2, [pc, #148]	; (8008f4c <USB_SetTurnaroundTime+0x138>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d802      	bhi.n	8008ec2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008ebc:	2309      	movs	r3, #9
 8008ebe:	617b      	str	r3, [r7, #20]
 8008ec0:	e020      	b.n	8008f04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	4a21      	ldr	r2, [pc, #132]	; (8008f4c <USB_SetTurnaroundTime+0x138>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d906      	bls.n	8008ed8 <USB_SetTurnaroundTime+0xc4>
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	4a20      	ldr	r2, [pc, #128]	; (8008f50 <USB_SetTurnaroundTime+0x13c>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d802      	bhi.n	8008ed8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008ed2:	2308      	movs	r3, #8
 8008ed4:	617b      	str	r3, [r7, #20]
 8008ed6:	e015      	b.n	8008f04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	4a1d      	ldr	r2, [pc, #116]	; (8008f50 <USB_SetTurnaroundTime+0x13c>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d906      	bls.n	8008eee <USB_SetTurnaroundTime+0xda>
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	4a1c      	ldr	r2, [pc, #112]	; (8008f54 <USB_SetTurnaroundTime+0x140>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d802      	bhi.n	8008eee <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008ee8:	2307      	movs	r3, #7
 8008eea:	617b      	str	r3, [r7, #20]
 8008eec:	e00a      	b.n	8008f04 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008eee:	2306      	movs	r3, #6
 8008ef0:	617b      	str	r3, [r7, #20]
 8008ef2:	e007      	b.n	8008f04 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008ef4:	79fb      	ldrb	r3, [r7, #7]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d102      	bne.n	8008f00 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008efa:	2309      	movs	r3, #9
 8008efc:	617b      	str	r3, [r7, #20]
 8008efe:	e001      	b.n	8008f04 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008f00:	2309      	movs	r3, #9
 8008f02:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	68db      	ldr	r3, [r3, #12]
 8008f08:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	68da      	ldr	r2, [r3, #12]
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	029b      	lsls	r3, r3, #10
 8008f18:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008f1c:	431a      	orrs	r2, r3
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008f22:	2300      	movs	r3, #0
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	371c      	adds	r7, #28
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2e:	4770      	bx	lr
 8008f30:	00d8acbf 	.word	0x00d8acbf
 8008f34:	00e4e1bf 	.word	0x00e4e1bf
 8008f38:	00f423ff 	.word	0x00f423ff
 8008f3c:	0106737f 	.word	0x0106737f
 8008f40:	011a499f 	.word	0x011a499f
 8008f44:	01312cff 	.word	0x01312cff
 8008f48:	014ca43f 	.word	0x014ca43f
 8008f4c:	016e35ff 	.word	0x016e35ff
 8008f50:	01a6ab1f 	.word	0x01a6ab1f
 8008f54:	01e847ff 	.word	0x01e847ff

08008f58 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b083      	sub	sp, #12
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	689b      	ldr	r3, [r3, #8]
 8008f64:	f043 0201 	orr.w	r2, r3, #1
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008f6c:	2300      	movs	r3, #0
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	370c      	adds	r7, #12
 8008f72:	46bd      	mov	sp, r7
 8008f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f78:	4770      	bx	lr

08008f7a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008f7a:	b480      	push	{r7}
 8008f7c:	b083      	sub	sp, #12
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	689b      	ldr	r3, [r3, #8]
 8008f86:	f023 0201 	bic.w	r2, r3, #1
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008f8e:	2300      	movs	r3, #0
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	370c      	adds	r7, #12
 8008f94:	46bd      	mov	sp, r7
 8008f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9a:	4770      	bx	lr

08008f9c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b082      	sub	sp, #8
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
 8008fa4:	460b      	mov	r3, r1
 8008fa6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	68db      	ldr	r3, [r3, #12]
 8008fac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008fb4:	78fb      	ldrb	r3, [r7, #3]
 8008fb6:	2b01      	cmp	r3, #1
 8008fb8:	d106      	bne.n	8008fc8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	68db      	ldr	r3, [r3, #12]
 8008fbe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	60da      	str	r2, [r3, #12]
 8008fc6:	e00b      	b.n	8008fe0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008fc8:	78fb      	ldrb	r3, [r7, #3]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d106      	bne.n	8008fdc <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	68db      	ldr	r3, [r3, #12]
 8008fd2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	60da      	str	r2, [r3, #12]
 8008fda:	e001      	b.n	8008fe0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008fdc:	2301      	movs	r3, #1
 8008fde:	e003      	b.n	8008fe8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008fe0:	2032      	movs	r0, #50	; 0x32
 8008fe2:	f7f9 f9fb 	bl	80023dc <HAL_Delay>

  return HAL_OK;
 8008fe6:	2300      	movs	r3, #0
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3708      	adds	r7, #8
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008ff0:	b084      	sub	sp, #16
 8008ff2:	b580      	push	{r7, lr}
 8008ff4:	b086      	sub	sp, #24
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	6078      	str	r0, [r7, #4]
 8008ffa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008ffe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009002:	2300      	movs	r3, #0
 8009004:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800900a:	2300      	movs	r3, #0
 800900c:	613b      	str	r3, [r7, #16]
 800900e:	e009      	b.n	8009024 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009010:	687a      	ldr	r2, [r7, #4]
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	3340      	adds	r3, #64	; 0x40
 8009016:	009b      	lsls	r3, r3, #2
 8009018:	4413      	add	r3, r2
 800901a:	2200      	movs	r2, #0
 800901c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800901e:	693b      	ldr	r3, [r7, #16]
 8009020:	3301      	adds	r3, #1
 8009022:	613b      	str	r3, [r7, #16]
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	2b0e      	cmp	r3, #14
 8009028:	d9f2      	bls.n	8009010 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800902a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800902c:	2b00      	cmp	r3, #0
 800902e:	d112      	bne.n	8009056 <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009034:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009040:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800904c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	639a      	str	r2, [r3, #56]	; 0x38
 8009054:	e00b      	b.n	800906e <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009066:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009074:	461a      	mov	r2, r3
 8009076:	2300      	movs	r3, #0
 8009078:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009080:	4619      	mov	r1, r3
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009088:	461a      	mov	r2, r3
 800908a:	680b      	ldr	r3, [r1, #0]
 800908c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800908e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009090:	2b01      	cmp	r3, #1
 8009092:	d10c      	bne.n	80090ae <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009096:	2b00      	cmp	r3, #0
 8009098:	d104      	bne.n	80090a4 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800909a:	2100      	movs	r1, #0
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f000 f961 	bl	8009364 <USB_SetDevSpeed>
 80090a2:	e008      	b.n	80090b6 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80090a4:	2101      	movs	r1, #1
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f000 f95c 	bl	8009364 <USB_SetDevSpeed>
 80090ac:	e003      	b.n	80090b6 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80090ae:	2103      	movs	r1, #3
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f000 f957 	bl	8009364 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80090b6:	2110      	movs	r1, #16
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f000 f90b 	bl	80092d4 <USB_FlushTxFifo>
 80090be:	4603      	mov	r3, r0
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d001      	beq.n	80090c8 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 80090c4:	2301      	movs	r3, #1
 80090c6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f000 f929 	bl	8009320 <USB_FlushRxFifo>
 80090ce:	4603      	mov	r3, r0
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d001      	beq.n	80090d8 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 80090d4:	2301      	movs	r3, #1
 80090d6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090de:	461a      	mov	r2, r3
 80090e0:	2300      	movs	r3, #0
 80090e2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090ea:	461a      	mov	r2, r3
 80090ec:	2300      	movs	r3, #0
 80090ee:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090f6:	461a      	mov	r2, r3
 80090f8:	2300      	movs	r3, #0
 80090fa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80090fc:	2300      	movs	r3, #0
 80090fe:	613b      	str	r3, [r7, #16]
 8009100:	e043      	b.n	800918a <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	015a      	lsls	r2, r3, #5
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	4413      	add	r3, r2
 800910a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009114:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009118:	d118      	bne.n	800914c <USB_DevInit+0x15c>
    {
      if (i == 0U)
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d10a      	bne.n	8009136 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	015a      	lsls	r2, r3, #5
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	4413      	add	r3, r2
 8009128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800912c:	461a      	mov	r2, r3
 800912e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009132:	6013      	str	r3, [r2, #0]
 8009134:	e013      	b.n	800915e <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	015a      	lsls	r2, r3, #5
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	4413      	add	r3, r2
 800913e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009142:	461a      	mov	r2, r3
 8009144:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009148:	6013      	str	r3, [r2, #0]
 800914a:	e008      	b.n	800915e <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	015a      	lsls	r2, r3, #5
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	4413      	add	r3, r2
 8009154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009158:	461a      	mov	r2, r3
 800915a:	2300      	movs	r3, #0
 800915c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	015a      	lsls	r2, r3, #5
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	4413      	add	r3, r2
 8009166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800916a:	461a      	mov	r2, r3
 800916c:	2300      	movs	r3, #0
 800916e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	015a      	lsls	r2, r3, #5
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	4413      	add	r3, r2
 8009178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800917c:	461a      	mov	r2, r3
 800917e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009182:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	3301      	adds	r3, #1
 8009188:	613b      	str	r3, [r7, #16]
 800918a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800918c:	693a      	ldr	r2, [r7, #16]
 800918e:	429a      	cmp	r2, r3
 8009190:	d3b7      	bcc.n	8009102 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009192:	2300      	movs	r3, #0
 8009194:	613b      	str	r3, [r7, #16]
 8009196:	e043      	b.n	8009220 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	015a      	lsls	r2, r3, #5
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	4413      	add	r3, r2
 80091a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80091ae:	d118      	bne.n	80091e2 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d10a      	bne.n	80091cc <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	015a      	lsls	r2, r3, #5
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	4413      	add	r3, r2
 80091be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091c2:	461a      	mov	r2, r3
 80091c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80091c8:	6013      	str	r3, [r2, #0]
 80091ca:	e013      	b.n	80091f4 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	015a      	lsls	r2, r3, #5
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	4413      	add	r3, r2
 80091d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091d8:	461a      	mov	r2, r3
 80091da:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80091de:	6013      	str	r3, [r2, #0]
 80091e0:	e008      	b.n	80091f4 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	015a      	lsls	r2, r3, #5
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	4413      	add	r3, r2
 80091ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091ee:	461a      	mov	r2, r3
 80091f0:	2300      	movs	r3, #0
 80091f2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	015a      	lsls	r2, r3, #5
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	4413      	add	r3, r2
 80091fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009200:	461a      	mov	r2, r3
 8009202:	2300      	movs	r3, #0
 8009204:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	015a      	lsls	r2, r3, #5
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	4413      	add	r3, r2
 800920e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009212:	461a      	mov	r2, r3
 8009214:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009218:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800921a:	693b      	ldr	r3, [r7, #16]
 800921c:	3301      	adds	r3, #1
 800921e:	613b      	str	r3, [r7, #16]
 8009220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009222:	693a      	ldr	r2, [r7, #16]
 8009224:	429a      	cmp	r2, r3
 8009226:	d3b7      	bcc.n	8009198 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800922e:	691b      	ldr	r3, [r3, #16]
 8009230:	68fa      	ldr	r2, [r7, #12]
 8009232:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009236:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800923a:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 800923c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800923e:	2b01      	cmp	r3, #1
 8009240:	d111      	bne.n	8009266 <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009248:	461a      	mov	r2, r3
 800924a:	4b20      	ldr	r3, [pc, #128]	; (80092cc <USB_DevInit+0x2dc>)
 800924c:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009256:	68fa      	ldr	r2, [r7, #12]
 8009258:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800925c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009260:	f043 0303 	orr.w	r3, r3, #3
 8009264:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2200      	movs	r2, #0
 800926a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009272:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009276:	2b00      	cmp	r3, #0
 8009278:	d105      	bne.n	8009286 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	699b      	ldr	r3, [r3, #24]
 800927e:	f043 0210 	orr.w	r2, r3, #16
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	699a      	ldr	r2, [r3, #24]
 800928a:	4b11      	ldr	r3, [pc, #68]	; (80092d0 <USB_DevInit+0x2e0>)
 800928c:	4313      	orrs	r3, r2
 800928e:	687a      	ldr	r2, [r7, #4]
 8009290:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009294:	2b00      	cmp	r3, #0
 8009296:	d005      	beq.n	80092a4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	699b      	ldr	r3, [r3, #24]
 800929c:	f043 0208 	orr.w	r2, r3, #8
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80092a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092a6:	2b01      	cmp	r3, #1
 80092a8:	d107      	bne.n	80092ba <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	699b      	ldr	r3, [r3, #24]
 80092ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80092b2:	f043 0304 	orr.w	r3, r3, #4
 80092b6:	687a      	ldr	r2, [r7, #4]
 80092b8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80092ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3718      	adds	r7, #24
 80092c0:	46bd      	mov	sp, r7
 80092c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80092c6:	b004      	add	sp, #16
 80092c8:	4770      	bx	lr
 80092ca:	bf00      	nop
 80092cc:	00800100 	.word	0x00800100
 80092d0:	803c3800 	.word	0x803c3800

080092d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b085      	sub	sp, #20
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
 80092dc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80092de:	2300      	movs	r3, #0
 80092e0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	019b      	lsls	r3, r3, #6
 80092e6:	f043 0220 	orr.w	r2, r3, #32
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	3301      	adds	r3, #1
 80092f2:	60fb      	str	r3, [r7, #12]
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	4a09      	ldr	r2, [pc, #36]	; (800931c <USB_FlushTxFifo+0x48>)
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d901      	bls.n	8009300 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80092fc:	2303      	movs	r3, #3
 80092fe:	e006      	b.n	800930e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	691b      	ldr	r3, [r3, #16]
 8009304:	f003 0320 	and.w	r3, r3, #32
 8009308:	2b20      	cmp	r3, #32
 800930a:	d0f0      	beq.n	80092ee <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800930c:	2300      	movs	r3, #0
}
 800930e:	4618      	mov	r0, r3
 8009310:	3714      	adds	r7, #20
 8009312:	46bd      	mov	sp, r7
 8009314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009318:	4770      	bx	lr
 800931a:	bf00      	nop
 800931c:	00030d40 	.word	0x00030d40

08009320 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009320:	b480      	push	{r7}
 8009322:	b085      	sub	sp, #20
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009328:	2300      	movs	r3, #0
 800932a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2210      	movs	r2, #16
 8009330:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	3301      	adds	r3, #1
 8009336:	60fb      	str	r3, [r7, #12]
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	4a09      	ldr	r2, [pc, #36]	; (8009360 <USB_FlushRxFifo+0x40>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d901      	bls.n	8009344 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009340:	2303      	movs	r3, #3
 8009342:	e006      	b.n	8009352 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	691b      	ldr	r3, [r3, #16]
 8009348:	f003 0310 	and.w	r3, r3, #16
 800934c:	2b10      	cmp	r3, #16
 800934e:	d0f0      	beq.n	8009332 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009350:	2300      	movs	r3, #0
}
 8009352:	4618      	mov	r0, r3
 8009354:	3714      	adds	r7, #20
 8009356:	46bd      	mov	sp, r7
 8009358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935c:	4770      	bx	lr
 800935e:	bf00      	nop
 8009360:	00030d40 	.word	0x00030d40

08009364 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009364:	b480      	push	{r7}
 8009366:	b085      	sub	sp, #20
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
 800936c:	460b      	mov	r3, r1
 800936e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800937a:	681a      	ldr	r2, [r3, #0]
 800937c:	78fb      	ldrb	r3, [r7, #3]
 800937e:	68f9      	ldr	r1, [r7, #12]
 8009380:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009384:	4313      	orrs	r3, r2
 8009386:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009388:	2300      	movs	r3, #0
}
 800938a:	4618      	mov	r0, r3
 800938c:	3714      	adds	r7, #20
 800938e:	46bd      	mov	sp, r7
 8009390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009394:	4770      	bx	lr

08009396 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009396:	b480      	push	{r7}
 8009398:	b087      	sub	sp, #28
 800939a:	af00      	add	r7, sp, #0
 800939c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093a8:	689b      	ldr	r3, [r3, #8]
 80093aa:	f003 0306 	and.w	r3, r3, #6
 80093ae:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d102      	bne.n	80093bc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80093b6:	2300      	movs	r3, #0
 80093b8:	75fb      	strb	r3, [r7, #23]
 80093ba:	e00a      	b.n	80093d2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	2b02      	cmp	r3, #2
 80093c0:	d002      	beq.n	80093c8 <USB_GetDevSpeed+0x32>
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	2b06      	cmp	r3, #6
 80093c6:	d102      	bne.n	80093ce <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80093c8:	2302      	movs	r3, #2
 80093ca:	75fb      	strb	r3, [r7, #23]
 80093cc:	e001      	b.n	80093d2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80093ce:	230f      	movs	r3, #15
 80093d0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80093d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	371c      	adds	r7, #28
 80093d8:	46bd      	mov	sp, r7
 80093da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093de:	4770      	bx	lr

080093e0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b085      	sub	sp, #20
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	781b      	ldrb	r3, [r3, #0]
 80093f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	785b      	ldrb	r3, [r3, #1]
 80093f8:	2b01      	cmp	r3, #1
 80093fa:	d13a      	bne.n	8009472 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009402:	69da      	ldr	r2, [r3, #28]
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	781b      	ldrb	r3, [r3, #0]
 8009408:	f003 030f 	and.w	r3, r3, #15
 800940c:	2101      	movs	r1, #1
 800940e:	fa01 f303 	lsl.w	r3, r1, r3
 8009412:	b29b      	uxth	r3, r3
 8009414:	68f9      	ldr	r1, [r7, #12]
 8009416:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800941a:	4313      	orrs	r3, r2
 800941c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	015a      	lsls	r2, r3, #5
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	4413      	add	r3, r2
 8009426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009430:	2b00      	cmp	r3, #0
 8009432:	d155      	bne.n	80094e0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	015a      	lsls	r2, r3, #5
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	4413      	add	r3, r2
 800943c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009440:	681a      	ldr	r2, [r3, #0]
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	689b      	ldr	r3, [r3, #8]
 8009446:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	78db      	ldrb	r3, [r3, #3]
 800944e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009450:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	059b      	lsls	r3, r3, #22
 8009456:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009458:	4313      	orrs	r3, r2
 800945a:	68ba      	ldr	r2, [r7, #8]
 800945c:	0151      	lsls	r1, r2, #5
 800945e:	68fa      	ldr	r2, [r7, #12]
 8009460:	440a      	add	r2, r1
 8009462:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009466:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800946a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800946e:	6013      	str	r3, [r2, #0]
 8009470:	e036      	b.n	80094e0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009478:	69da      	ldr	r2, [r3, #28]
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	781b      	ldrb	r3, [r3, #0]
 800947e:	f003 030f 	and.w	r3, r3, #15
 8009482:	2101      	movs	r1, #1
 8009484:	fa01 f303 	lsl.w	r3, r1, r3
 8009488:	041b      	lsls	r3, r3, #16
 800948a:	68f9      	ldr	r1, [r7, #12]
 800948c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009490:	4313      	orrs	r3, r2
 8009492:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	015a      	lsls	r2, r3, #5
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	4413      	add	r3, r2
 800949c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d11a      	bne.n	80094e0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	015a      	lsls	r2, r3, #5
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	4413      	add	r3, r2
 80094b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094b6:	681a      	ldr	r2, [r3, #0]
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	689b      	ldr	r3, [r3, #8]
 80094bc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	78db      	ldrb	r3, [r3, #3]
 80094c4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80094c6:	430b      	orrs	r3, r1
 80094c8:	4313      	orrs	r3, r2
 80094ca:	68ba      	ldr	r2, [r7, #8]
 80094cc:	0151      	lsls	r1, r2, #5
 80094ce:	68fa      	ldr	r2, [r7, #12]
 80094d0:	440a      	add	r2, r1
 80094d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094de:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80094e0:	2300      	movs	r3, #0
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3714      	adds	r7, #20
 80094e6:	46bd      	mov	sp, r7
 80094e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ec:	4770      	bx	lr
	...

080094f0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80094f0:	b480      	push	{r7}
 80094f2:	b085      	sub	sp, #20
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
 80094f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	781b      	ldrb	r3, [r3, #0]
 8009502:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	785b      	ldrb	r3, [r3, #1]
 8009508:	2b01      	cmp	r3, #1
 800950a:	d135      	bne.n	8009578 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009512:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	781b      	ldrb	r3, [r3, #0]
 8009518:	f003 030f 	and.w	r3, r3, #15
 800951c:	2101      	movs	r1, #1
 800951e:	fa01 f303 	lsl.w	r3, r1, r3
 8009522:	b29b      	uxth	r3, r3
 8009524:	43db      	mvns	r3, r3
 8009526:	68f9      	ldr	r1, [r7, #12]
 8009528:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800952c:	4013      	ands	r3, r2
 800952e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009536:	69da      	ldr	r2, [r3, #28]
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	781b      	ldrb	r3, [r3, #0]
 800953c:	f003 030f 	and.w	r3, r3, #15
 8009540:	2101      	movs	r1, #1
 8009542:	fa01 f303 	lsl.w	r3, r1, r3
 8009546:	b29b      	uxth	r3, r3
 8009548:	43db      	mvns	r3, r3
 800954a:	68f9      	ldr	r1, [r7, #12]
 800954c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009550:	4013      	ands	r3, r2
 8009552:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	015a      	lsls	r2, r3, #5
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	4413      	add	r3, r2
 800955c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009560:	681a      	ldr	r2, [r3, #0]
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	0159      	lsls	r1, r3, #5
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	440b      	add	r3, r1
 800956a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800956e:	4619      	mov	r1, r3
 8009570:	4b1f      	ldr	r3, [pc, #124]	; (80095f0 <USB_DeactivateEndpoint+0x100>)
 8009572:	4013      	ands	r3, r2
 8009574:	600b      	str	r3, [r1, #0]
 8009576:	e034      	b.n	80095e2 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800957e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	781b      	ldrb	r3, [r3, #0]
 8009584:	f003 030f 	and.w	r3, r3, #15
 8009588:	2101      	movs	r1, #1
 800958a:	fa01 f303 	lsl.w	r3, r1, r3
 800958e:	041b      	lsls	r3, r3, #16
 8009590:	43db      	mvns	r3, r3
 8009592:	68f9      	ldr	r1, [r7, #12]
 8009594:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009598:	4013      	ands	r3, r2
 800959a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095a2:	69da      	ldr	r2, [r3, #28]
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	781b      	ldrb	r3, [r3, #0]
 80095a8:	f003 030f 	and.w	r3, r3, #15
 80095ac:	2101      	movs	r1, #1
 80095ae:	fa01 f303 	lsl.w	r3, r1, r3
 80095b2:	041b      	lsls	r3, r3, #16
 80095b4:	43db      	mvns	r3, r3
 80095b6:	68f9      	ldr	r1, [r7, #12]
 80095b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80095bc:	4013      	ands	r3, r2
 80095be:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	015a      	lsls	r2, r3, #5
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	4413      	add	r3, r2
 80095c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095cc:	681a      	ldr	r2, [r3, #0]
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	0159      	lsls	r1, r3, #5
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	440b      	add	r3, r1
 80095d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095da:	4619      	mov	r1, r3
 80095dc:	4b05      	ldr	r3, [pc, #20]	; (80095f4 <USB_DeactivateEndpoint+0x104>)
 80095de:	4013      	ands	r3, r2
 80095e0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80095e2:	2300      	movs	r3, #0
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3714      	adds	r7, #20
 80095e8:	46bd      	mov	sp, r7
 80095ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ee:	4770      	bx	lr
 80095f0:	ec337800 	.word	0xec337800
 80095f4:	eff37800 	.word	0xeff37800

080095f8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b08a      	sub	sp, #40	; 0x28
 80095fc:	af02      	add	r7, sp, #8
 80095fe:	60f8      	str	r0, [r7, #12]
 8009600:	60b9      	str	r1, [r7, #8]
 8009602:	4613      	mov	r3, r2
 8009604:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	781b      	ldrb	r3, [r3, #0]
 800960e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	785b      	ldrb	r3, [r3, #1]
 8009614:	2b01      	cmp	r3, #1
 8009616:	f040 815c 	bne.w	80098d2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	695b      	ldr	r3, [r3, #20]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d132      	bne.n	8009688 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009622:	69bb      	ldr	r3, [r7, #24]
 8009624:	015a      	lsls	r2, r3, #5
 8009626:	69fb      	ldr	r3, [r7, #28]
 8009628:	4413      	add	r3, r2
 800962a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800962e:	691b      	ldr	r3, [r3, #16]
 8009630:	69ba      	ldr	r2, [r7, #24]
 8009632:	0151      	lsls	r1, r2, #5
 8009634:	69fa      	ldr	r2, [r7, #28]
 8009636:	440a      	add	r2, r1
 8009638:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800963c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009640:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009644:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009646:	69bb      	ldr	r3, [r7, #24]
 8009648:	015a      	lsls	r2, r3, #5
 800964a:	69fb      	ldr	r3, [r7, #28]
 800964c:	4413      	add	r3, r2
 800964e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009652:	691b      	ldr	r3, [r3, #16]
 8009654:	69ba      	ldr	r2, [r7, #24]
 8009656:	0151      	lsls	r1, r2, #5
 8009658:	69fa      	ldr	r2, [r7, #28]
 800965a:	440a      	add	r2, r1
 800965c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009660:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009664:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009666:	69bb      	ldr	r3, [r7, #24]
 8009668:	015a      	lsls	r2, r3, #5
 800966a:	69fb      	ldr	r3, [r7, #28]
 800966c:	4413      	add	r3, r2
 800966e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009672:	691b      	ldr	r3, [r3, #16]
 8009674:	69ba      	ldr	r2, [r7, #24]
 8009676:	0151      	lsls	r1, r2, #5
 8009678:	69fa      	ldr	r2, [r7, #28]
 800967a:	440a      	add	r2, r1
 800967c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009680:	0cdb      	lsrs	r3, r3, #19
 8009682:	04db      	lsls	r3, r3, #19
 8009684:	6113      	str	r3, [r2, #16]
 8009686:	e074      	b.n	8009772 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009688:	69bb      	ldr	r3, [r7, #24]
 800968a:	015a      	lsls	r2, r3, #5
 800968c:	69fb      	ldr	r3, [r7, #28]
 800968e:	4413      	add	r3, r2
 8009690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009694:	691b      	ldr	r3, [r3, #16]
 8009696:	69ba      	ldr	r2, [r7, #24]
 8009698:	0151      	lsls	r1, r2, #5
 800969a:	69fa      	ldr	r2, [r7, #28]
 800969c:	440a      	add	r2, r1
 800969e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096a2:	0cdb      	lsrs	r3, r3, #19
 80096a4:	04db      	lsls	r3, r3, #19
 80096a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80096a8:	69bb      	ldr	r3, [r7, #24]
 80096aa:	015a      	lsls	r2, r3, #5
 80096ac:	69fb      	ldr	r3, [r7, #28]
 80096ae:	4413      	add	r3, r2
 80096b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096b4:	691b      	ldr	r3, [r3, #16]
 80096b6:	69ba      	ldr	r2, [r7, #24]
 80096b8:	0151      	lsls	r1, r2, #5
 80096ba:	69fa      	ldr	r2, [r7, #28]
 80096bc:	440a      	add	r2, r1
 80096be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096c2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80096c6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80096ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80096cc:	69bb      	ldr	r3, [r7, #24]
 80096ce:	015a      	lsls	r2, r3, #5
 80096d0:	69fb      	ldr	r3, [r7, #28]
 80096d2:	4413      	add	r3, r2
 80096d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096d8:	691a      	ldr	r2, [r3, #16]
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	6959      	ldr	r1, [r3, #20]
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	689b      	ldr	r3, [r3, #8]
 80096e2:	440b      	add	r3, r1
 80096e4:	1e59      	subs	r1, r3, #1
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	689b      	ldr	r3, [r3, #8]
 80096ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80096ee:	04d9      	lsls	r1, r3, #19
 80096f0:	4b9d      	ldr	r3, [pc, #628]	; (8009968 <USB_EPStartXfer+0x370>)
 80096f2:	400b      	ands	r3, r1
 80096f4:	69b9      	ldr	r1, [r7, #24]
 80096f6:	0148      	lsls	r0, r1, #5
 80096f8:	69f9      	ldr	r1, [r7, #28]
 80096fa:	4401      	add	r1, r0
 80096fc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009700:	4313      	orrs	r3, r2
 8009702:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009704:	69bb      	ldr	r3, [r7, #24]
 8009706:	015a      	lsls	r2, r3, #5
 8009708:	69fb      	ldr	r3, [r7, #28]
 800970a:	4413      	add	r3, r2
 800970c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009710:	691a      	ldr	r2, [r3, #16]
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	695b      	ldr	r3, [r3, #20]
 8009716:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800971a:	69b9      	ldr	r1, [r7, #24]
 800971c:	0148      	lsls	r0, r1, #5
 800971e:	69f9      	ldr	r1, [r7, #28]
 8009720:	4401      	add	r1, r0
 8009722:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009726:	4313      	orrs	r3, r2
 8009728:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	78db      	ldrb	r3, [r3, #3]
 800972e:	2b01      	cmp	r3, #1
 8009730:	d11f      	bne.n	8009772 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009732:	69bb      	ldr	r3, [r7, #24]
 8009734:	015a      	lsls	r2, r3, #5
 8009736:	69fb      	ldr	r3, [r7, #28]
 8009738:	4413      	add	r3, r2
 800973a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800973e:	691b      	ldr	r3, [r3, #16]
 8009740:	69ba      	ldr	r2, [r7, #24]
 8009742:	0151      	lsls	r1, r2, #5
 8009744:	69fa      	ldr	r2, [r7, #28]
 8009746:	440a      	add	r2, r1
 8009748:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800974c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009750:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009752:	69bb      	ldr	r3, [r7, #24]
 8009754:	015a      	lsls	r2, r3, #5
 8009756:	69fb      	ldr	r3, [r7, #28]
 8009758:	4413      	add	r3, r2
 800975a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800975e:	691b      	ldr	r3, [r3, #16]
 8009760:	69ba      	ldr	r2, [r7, #24]
 8009762:	0151      	lsls	r1, r2, #5
 8009764:	69fa      	ldr	r2, [r7, #28]
 8009766:	440a      	add	r2, r1
 8009768:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800976c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009770:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009772:	79fb      	ldrb	r3, [r7, #7]
 8009774:	2b01      	cmp	r3, #1
 8009776:	d14b      	bne.n	8009810 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	691b      	ldr	r3, [r3, #16]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d009      	beq.n	8009794 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009780:	69bb      	ldr	r3, [r7, #24]
 8009782:	015a      	lsls	r2, r3, #5
 8009784:	69fb      	ldr	r3, [r7, #28]
 8009786:	4413      	add	r3, r2
 8009788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800978c:	461a      	mov	r2, r3
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	691b      	ldr	r3, [r3, #16]
 8009792:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	78db      	ldrb	r3, [r3, #3]
 8009798:	2b01      	cmp	r3, #1
 800979a:	d128      	bne.n	80097ee <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800979c:	69fb      	ldr	r3, [r7, #28]
 800979e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097a2:	689b      	ldr	r3, [r3, #8]
 80097a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d110      	bne.n	80097ce <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80097ac:	69bb      	ldr	r3, [r7, #24]
 80097ae:	015a      	lsls	r2, r3, #5
 80097b0:	69fb      	ldr	r3, [r7, #28]
 80097b2:	4413      	add	r3, r2
 80097b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	69ba      	ldr	r2, [r7, #24]
 80097bc:	0151      	lsls	r1, r2, #5
 80097be:	69fa      	ldr	r2, [r7, #28]
 80097c0:	440a      	add	r2, r1
 80097c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80097ca:	6013      	str	r3, [r2, #0]
 80097cc:	e00f      	b.n	80097ee <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80097ce:	69bb      	ldr	r3, [r7, #24]
 80097d0:	015a      	lsls	r2, r3, #5
 80097d2:	69fb      	ldr	r3, [r7, #28]
 80097d4:	4413      	add	r3, r2
 80097d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	69ba      	ldr	r2, [r7, #24]
 80097de:	0151      	lsls	r1, r2, #5
 80097e0:	69fa      	ldr	r2, [r7, #28]
 80097e2:	440a      	add	r2, r1
 80097e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80097ec:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80097ee:	69bb      	ldr	r3, [r7, #24]
 80097f0:	015a      	lsls	r2, r3, #5
 80097f2:	69fb      	ldr	r3, [r7, #28]
 80097f4:	4413      	add	r3, r2
 80097f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	69ba      	ldr	r2, [r7, #24]
 80097fe:	0151      	lsls	r1, r2, #5
 8009800:	69fa      	ldr	r2, [r7, #28]
 8009802:	440a      	add	r2, r1
 8009804:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009808:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800980c:	6013      	str	r3, [r2, #0]
 800980e:	e12f      	b.n	8009a70 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009810:	69bb      	ldr	r3, [r7, #24]
 8009812:	015a      	lsls	r2, r3, #5
 8009814:	69fb      	ldr	r3, [r7, #28]
 8009816:	4413      	add	r3, r2
 8009818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	69ba      	ldr	r2, [r7, #24]
 8009820:	0151      	lsls	r1, r2, #5
 8009822:	69fa      	ldr	r2, [r7, #28]
 8009824:	440a      	add	r2, r1
 8009826:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800982a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800982e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	78db      	ldrb	r3, [r3, #3]
 8009834:	2b01      	cmp	r3, #1
 8009836:	d015      	beq.n	8009864 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	695b      	ldr	r3, [r3, #20]
 800983c:	2b00      	cmp	r3, #0
 800983e:	f000 8117 	beq.w	8009a70 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009842:	69fb      	ldr	r3, [r7, #28]
 8009844:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009848:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	781b      	ldrb	r3, [r3, #0]
 800984e:	f003 030f 	and.w	r3, r3, #15
 8009852:	2101      	movs	r1, #1
 8009854:	fa01 f303 	lsl.w	r3, r1, r3
 8009858:	69f9      	ldr	r1, [r7, #28]
 800985a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800985e:	4313      	orrs	r3, r2
 8009860:	634b      	str	r3, [r1, #52]	; 0x34
 8009862:	e105      	b.n	8009a70 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009864:	69fb      	ldr	r3, [r7, #28]
 8009866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800986a:	689b      	ldr	r3, [r3, #8]
 800986c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009870:	2b00      	cmp	r3, #0
 8009872:	d110      	bne.n	8009896 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009874:	69bb      	ldr	r3, [r7, #24]
 8009876:	015a      	lsls	r2, r3, #5
 8009878:	69fb      	ldr	r3, [r7, #28]
 800987a:	4413      	add	r3, r2
 800987c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	69ba      	ldr	r2, [r7, #24]
 8009884:	0151      	lsls	r1, r2, #5
 8009886:	69fa      	ldr	r2, [r7, #28]
 8009888:	440a      	add	r2, r1
 800988a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800988e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009892:	6013      	str	r3, [r2, #0]
 8009894:	e00f      	b.n	80098b6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009896:	69bb      	ldr	r3, [r7, #24]
 8009898:	015a      	lsls	r2, r3, #5
 800989a:	69fb      	ldr	r3, [r7, #28]
 800989c:	4413      	add	r3, r2
 800989e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	69ba      	ldr	r2, [r7, #24]
 80098a6:	0151      	lsls	r1, r2, #5
 80098a8:	69fa      	ldr	r2, [r7, #28]
 80098aa:	440a      	add	r2, r1
 80098ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80098b4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	68d9      	ldr	r1, [r3, #12]
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	781a      	ldrb	r2, [r3, #0]
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	695b      	ldr	r3, [r3, #20]
 80098c2:	b298      	uxth	r0, r3
 80098c4:	79fb      	ldrb	r3, [r7, #7]
 80098c6:	9300      	str	r3, [sp, #0]
 80098c8:	4603      	mov	r3, r0
 80098ca:	68f8      	ldr	r0, [r7, #12]
 80098cc:	f000 fa2b 	bl	8009d26 <USB_WritePacket>
 80098d0:	e0ce      	b.n	8009a70 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80098d2:	69bb      	ldr	r3, [r7, #24]
 80098d4:	015a      	lsls	r2, r3, #5
 80098d6:	69fb      	ldr	r3, [r7, #28]
 80098d8:	4413      	add	r3, r2
 80098da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098de:	691b      	ldr	r3, [r3, #16]
 80098e0:	69ba      	ldr	r2, [r7, #24]
 80098e2:	0151      	lsls	r1, r2, #5
 80098e4:	69fa      	ldr	r2, [r7, #28]
 80098e6:	440a      	add	r2, r1
 80098e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098ec:	0cdb      	lsrs	r3, r3, #19
 80098ee:	04db      	lsls	r3, r3, #19
 80098f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80098f2:	69bb      	ldr	r3, [r7, #24]
 80098f4:	015a      	lsls	r2, r3, #5
 80098f6:	69fb      	ldr	r3, [r7, #28]
 80098f8:	4413      	add	r3, r2
 80098fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098fe:	691b      	ldr	r3, [r3, #16]
 8009900:	69ba      	ldr	r2, [r7, #24]
 8009902:	0151      	lsls	r1, r2, #5
 8009904:	69fa      	ldr	r2, [r7, #28]
 8009906:	440a      	add	r2, r1
 8009908:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800990c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009910:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009914:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	695b      	ldr	r3, [r3, #20]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d126      	bne.n	800996c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800991e:	69bb      	ldr	r3, [r7, #24]
 8009920:	015a      	lsls	r2, r3, #5
 8009922:	69fb      	ldr	r3, [r7, #28]
 8009924:	4413      	add	r3, r2
 8009926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800992a:	691a      	ldr	r2, [r3, #16]
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	689b      	ldr	r3, [r3, #8]
 8009930:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009934:	69b9      	ldr	r1, [r7, #24]
 8009936:	0148      	lsls	r0, r1, #5
 8009938:	69f9      	ldr	r1, [r7, #28]
 800993a:	4401      	add	r1, r0
 800993c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009940:	4313      	orrs	r3, r2
 8009942:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009944:	69bb      	ldr	r3, [r7, #24]
 8009946:	015a      	lsls	r2, r3, #5
 8009948:	69fb      	ldr	r3, [r7, #28]
 800994a:	4413      	add	r3, r2
 800994c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009950:	691b      	ldr	r3, [r3, #16]
 8009952:	69ba      	ldr	r2, [r7, #24]
 8009954:	0151      	lsls	r1, r2, #5
 8009956:	69fa      	ldr	r2, [r7, #28]
 8009958:	440a      	add	r2, r1
 800995a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800995e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009962:	6113      	str	r3, [r2, #16]
 8009964:	e036      	b.n	80099d4 <USB_EPStartXfer+0x3dc>
 8009966:	bf00      	nop
 8009968:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	695a      	ldr	r2, [r3, #20]
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	689b      	ldr	r3, [r3, #8]
 8009974:	4413      	add	r3, r2
 8009976:	1e5a      	subs	r2, r3, #1
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	689b      	ldr	r3, [r3, #8]
 800997c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009980:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009982:	69bb      	ldr	r3, [r7, #24]
 8009984:	015a      	lsls	r2, r3, #5
 8009986:	69fb      	ldr	r3, [r7, #28]
 8009988:	4413      	add	r3, r2
 800998a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800998e:	691a      	ldr	r2, [r3, #16]
 8009990:	8afb      	ldrh	r3, [r7, #22]
 8009992:	04d9      	lsls	r1, r3, #19
 8009994:	4b39      	ldr	r3, [pc, #228]	; (8009a7c <USB_EPStartXfer+0x484>)
 8009996:	400b      	ands	r3, r1
 8009998:	69b9      	ldr	r1, [r7, #24]
 800999a:	0148      	lsls	r0, r1, #5
 800999c:	69f9      	ldr	r1, [r7, #28]
 800999e:	4401      	add	r1, r0
 80099a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80099a4:	4313      	orrs	r3, r2
 80099a6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80099a8:	69bb      	ldr	r3, [r7, #24]
 80099aa:	015a      	lsls	r2, r3, #5
 80099ac:	69fb      	ldr	r3, [r7, #28]
 80099ae:	4413      	add	r3, r2
 80099b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099b4:	691a      	ldr	r2, [r3, #16]
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	689b      	ldr	r3, [r3, #8]
 80099ba:	8af9      	ldrh	r1, [r7, #22]
 80099bc:	fb01 f303 	mul.w	r3, r1, r3
 80099c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80099c4:	69b9      	ldr	r1, [r7, #24]
 80099c6:	0148      	lsls	r0, r1, #5
 80099c8:	69f9      	ldr	r1, [r7, #28]
 80099ca:	4401      	add	r1, r0
 80099cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80099d0:	4313      	orrs	r3, r2
 80099d2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80099d4:	79fb      	ldrb	r3, [r7, #7]
 80099d6:	2b01      	cmp	r3, #1
 80099d8:	d10d      	bne.n	80099f6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	68db      	ldr	r3, [r3, #12]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d009      	beq.n	80099f6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	68d9      	ldr	r1, [r3, #12]
 80099e6:	69bb      	ldr	r3, [r7, #24]
 80099e8:	015a      	lsls	r2, r3, #5
 80099ea:	69fb      	ldr	r3, [r7, #28]
 80099ec:	4413      	add	r3, r2
 80099ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099f2:	460a      	mov	r2, r1
 80099f4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	78db      	ldrb	r3, [r3, #3]
 80099fa:	2b01      	cmp	r3, #1
 80099fc:	d128      	bne.n	8009a50 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80099fe:	69fb      	ldr	r3, [r7, #28]
 8009a00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a04:	689b      	ldr	r3, [r3, #8]
 8009a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d110      	bne.n	8009a30 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009a0e:	69bb      	ldr	r3, [r7, #24]
 8009a10:	015a      	lsls	r2, r3, #5
 8009a12:	69fb      	ldr	r3, [r7, #28]
 8009a14:	4413      	add	r3, r2
 8009a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	69ba      	ldr	r2, [r7, #24]
 8009a1e:	0151      	lsls	r1, r2, #5
 8009a20:	69fa      	ldr	r2, [r7, #28]
 8009a22:	440a      	add	r2, r1
 8009a24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a28:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009a2c:	6013      	str	r3, [r2, #0]
 8009a2e:	e00f      	b.n	8009a50 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009a30:	69bb      	ldr	r3, [r7, #24]
 8009a32:	015a      	lsls	r2, r3, #5
 8009a34:	69fb      	ldr	r3, [r7, #28]
 8009a36:	4413      	add	r3, r2
 8009a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	69ba      	ldr	r2, [r7, #24]
 8009a40:	0151      	lsls	r1, r2, #5
 8009a42:	69fa      	ldr	r2, [r7, #28]
 8009a44:	440a      	add	r2, r1
 8009a46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a4e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009a50:	69bb      	ldr	r3, [r7, #24]
 8009a52:	015a      	lsls	r2, r3, #5
 8009a54:	69fb      	ldr	r3, [r7, #28]
 8009a56:	4413      	add	r3, r2
 8009a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	69ba      	ldr	r2, [r7, #24]
 8009a60:	0151      	lsls	r1, r2, #5
 8009a62:	69fa      	ldr	r2, [r7, #28]
 8009a64:	440a      	add	r2, r1
 8009a66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a6a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009a6e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009a70:	2300      	movs	r3, #0
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	3720      	adds	r7, #32
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}
 8009a7a:	bf00      	nop
 8009a7c:	1ff80000 	.word	0x1ff80000

08009a80 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b087      	sub	sp, #28
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	60f8      	str	r0, [r7, #12]
 8009a88:	60b9      	str	r1, [r7, #8]
 8009a8a:	4613      	mov	r3, r2
 8009a8c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	781b      	ldrb	r3, [r3, #0]
 8009a96:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	785b      	ldrb	r3, [r3, #1]
 8009a9c:	2b01      	cmp	r3, #1
 8009a9e:	f040 80cd 	bne.w	8009c3c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	695b      	ldr	r3, [r3, #20]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d132      	bne.n	8009b10 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	015a      	lsls	r2, r3, #5
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	4413      	add	r3, r2
 8009ab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ab6:	691b      	ldr	r3, [r3, #16]
 8009ab8:	693a      	ldr	r2, [r7, #16]
 8009aba:	0151      	lsls	r1, r2, #5
 8009abc:	697a      	ldr	r2, [r7, #20]
 8009abe:	440a      	add	r2, r1
 8009ac0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ac4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009ac8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009acc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	015a      	lsls	r2, r3, #5
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	4413      	add	r3, r2
 8009ad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ada:	691b      	ldr	r3, [r3, #16]
 8009adc:	693a      	ldr	r2, [r7, #16]
 8009ade:	0151      	lsls	r1, r2, #5
 8009ae0:	697a      	ldr	r2, [r7, #20]
 8009ae2:	440a      	add	r2, r1
 8009ae4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ae8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009aec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	015a      	lsls	r2, r3, #5
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	4413      	add	r3, r2
 8009af6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009afa:	691b      	ldr	r3, [r3, #16]
 8009afc:	693a      	ldr	r2, [r7, #16]
 8009afe:	0151      	lsls	r1, r2, #5
 8009b00:	697a      	ldr	r2, [r7, #20]
 8009b02:	440a      	add	r2, r1
 8009b04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b08:	0cdb      	lsrs	r3, r3, #19
 8009b0a:	04db      	lsls	r3, r3, #19
 8009b0c:	6113      	str	r3, [r2, #16]
 8009b0e:	e04e      	b.n	8009bae <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	015a      	lsls	r2, r3, #5
 8009b14:	697b      	ldr	r3, [r7, #20]
 8009b16:	4413      	add	r3, r2
 8009b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b1c:	691b      	ldr	r3, [r3, #16]
 8009b1e:	693a      	ldr	r2, [r7, #16]
 8009b20:	0151      	lsls	r1, r2, #5
 8009b22:	697a      	ldr	r2, [r7, #20]
 8009b24:	440a      	add	r2, r1
 8009b26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b2a:	0cdb      	lsrs	r3, r3, #19
 8009b2c:	04db      	lsls	r3, r3, #19
 8009b2e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	015a      	lsls	r2, r3, #5
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	4413      	add	r3, r2
 8009b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b3c:	691b      	ldr	r3, [r3, #16]
 8009b3e:	693a      	ldr	r2, [r7, #16]
 8009b40:	0151      	lsls	r1, r2, #5
 8009b42:	697a      	ldr	r2, [r7, #20]
 8009b44:	440a      	add	r2, r1
 8009b46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b4a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009b4e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009b52:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	695a      	ldr	r2, [r3, #20]
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	689b      	ldr	r3, [r3, #8]
 8009b5c:	429a      	cmp	r2, r3
 8009b5e:	d903      	bls.n	8009b68 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	689a      	ldr	r2, [r3, #8]
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	015a      	lsls	r2, r3, #5
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	4413      	add	r3, r2
 8009b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b74:	691b      	ldr	r3, [r3, #16]
 8009b76:	693a      	ldr	r2, [r7, #16]
 8009b78:	0151      	lsls	r1, r2, #5
 8009b7a:	697a      	ldr	r2, [r7, #20]
 8009b7c:	440a      	add	r2, r1
 8009b7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009b86:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009b88:	693b      	ldr	r3, [r7, #16]
 8009b8a:	015a      	lsls	r2, r3, #5
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	4413      	add	r3, r2
 8009b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b94:	691a      	ldr	r2, [r3, #16]
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	695b      	ldr	r3, [r3, #20]
 8009b9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b9e:	6939      	ldr	r1, [r7, #16]
 8009ba0:	0148      	lsls	r0, r1, #5
 8009ba2:	6979      	ldr	r1, [r7, #20]
 8009ba4:	4401      	add	r1, r0
 8009ba6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009baa:	4313      	orrs	r3, r2
 8009bac:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009bae:	79fb      	ldrb	r3, [r7, #7]
 8009bb0:	2b01      	cmp	r3, #1
 8009bb2:	d11e      	bne.n	8009bf2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	691b      	ldr	r3, [r3, #16]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d009      	beq.n	8009bd0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	015a      	lsls	r2, r3, #5
 8009bc0:	697b      	ldr	r3, [r7, #20]
 8009bc2:	4413      	add	r3, r2
 8009bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bc8:	461a      	mov	r2, r3
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	691b      	ldr	r3, [r3, #16]
 8009bce:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	015a      	lsls	r2, r3, #5
 8009bd4:	697b      	ldr	r3, [r7, #20]
 8009bd6:	4413      	add	r3, r2
 8009bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	693a      	ldr	r2, [r7, #16]
 8009be0:	0151      	lsls	r1, r2, #5
 8009be2:	697a      	ldr	r2, [r7, #20]
 8009be4:	440a      	add	r2, r1
 8009be6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009bee:	6013      	str	r3, [r2, #0]
 8009bf0:	e092      	b.n	8009d18 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009bf2:	693b      	ldr	r3, [r7, #16]
 8009bf4:	015a      	lsls	r2, r3, #5
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	4413      	add	r3, r2
 8009bfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	693a      	ldr	r2, [r7, #16]
 8009c02:	0151      	lsls	r1, r2, #5
 8009c04:	697a      	ldr	r2, [r7, #20]
 8009c06:	440a      	add	r2, r1
 8009c08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c0c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009c10:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	695b      	ldr	r3, [r3, #20]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d07e      	beq.n	8009d18 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	781b      	ldrb	r3, [r3, #0]
 8009c26:	f003 030f 	and.w	r3, r3, #15
 8009c2a:	2101      	movs	r1, #1
 8009c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8009c30:	6979      	ldr	r1, [r7, #20]
 8009c32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009c36:	4313      	orrs	r3, r2
 8009c38:	634b      	str	r3, [r1, #52]	; 0x34
 8009c3a:	e06d      	b.n	8009d18 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009c3c:	693b      	ldr	r3, [r7, #16]
 8009c3e:	015a      	lsls	r2, r3, #5
 8009c40:	697b      	ldr	r3, [r7, #20]
 8009c42:	4413      	add	r3, r2
 8009c44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c48:	691b      	ldr	r3, [r3, #16]
 8009c4a:	693a      	ldr	r2, [r7, #16]
 8009c4c:	0151      	lsls	r1, r2, #5
 8009c4e:	697a      	ldr	r2, [r7, #20]
 8009c50:	440a      	add	r2, r1
 8009c52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c56:	0cdb      	lsrs	r3, r3, #19
 8009c58:	04db      	lsls	r3, r3, #19
 8009c5a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009c5c:	693b      	ldr	r3, [r7, #16]
 8009c5e:	015a      	lsls	r2, r3, #5
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	4413      	add	r3, r2
 8009c64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c68:	691b      	ldr	r3, [r3, #16]
 8009c6a:	693a      	ldr	r2, [r7, #16]
 8009c6c:	0151      	lsls	r1, r2, #5
 8009c6e:	697a      	ldr	r2, [r7, #20]
 8009c70:	440a      	add	r2, r1
 8009c72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c76:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009c7a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009c7e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	695b      	ldr	r3, [r3, #20]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d003      	beq.n	8009c90 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	689a      	ldr	r2, [r3, #8]
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	015a      	lsls	r2, r3, #5
 8009c94:	697b      	ldr	r3, [r7, #20]
 8009c96:	4413      	add	r3, r2
 8009c98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c9c:	691b      	ldr	r3, [r3, #16]
 8009c9e:	693a      	ldr	r2, [r7, #16]
 8009ca0:	0151      	lsls	r1, r2, #5
 8009ca2:	697a      	ldr	r2, [r7, #20]
 8009ca4:	440a      	add	r2, r1
 8009ca6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009caa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009cae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	015a      	lsls	r2, r3, #5
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	4413      	add	r3, r2
 8009cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cbc:	691a      	ldr	r2, [r3, #16]
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	689b      	ldr	r3, [r3, #8]
 8009cc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009cc6:	6939      	ldr	r1, [r7, #16]
 8009cc8:	0148      	lsls	r0, r1, #5
 8009cca:	6979      	ldr	r1, [r7, #20]
 8009ccc:	4401      	add	r1, r0
 8009cce:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009cd2:	4313      	orrs	r3, r2
 8009cd4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009cd6:	79fb      	ldrb	r3, [r7, #7]
 8009cd8:	2b01      	cmp	r3, #1
 8009cda:	d10d      	bne.n	8009cf8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	68db      	ldr	r3, [r3, #12]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d009      	beq.n	8009cf8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	68d9      	ldr	r1, [r3, #12]
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	015a      	lsls	r2, r3, #5
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	4413      	add	r3, r2
 8009cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cf4:	460a      	mov	r2, r1
 8009cf6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009cf8:	693b      	ldr	r3, [r7, #16]
 8009cfa:	015a      	lsls	r2, r3, #5
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	4413      	add	r3, r2
 8009d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	693a      	ldr	r2, [r7, #16]
 8009d08:	0151      	lsls	r1, r2, #5
 8009d0a:	697a      	ldr	r2, [r7, #20]
 8009d0c:	440a      	add	r2, r1
 8009d0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d12:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009d16:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009d18:	2300      	movs	r3, #0
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	371c      	adds	r7, #28
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d24:	4770      	bx	lr

08009d26 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009d26:	b480      	push	{r7}
 8009d28:	b089      	sub	sp, #36	; 0x24
 8009d2a:	af00      	add	r7, sp, #0
 8009d2c:	60f8      	str	r0, [r7, #12]
 8009d2e:	60b9      	str	r1, [r7, #8]
 8009d30:	4611      	mov	r1, r2
 8009d32:	461a      	mov	r2, r3
 8009d34:	460b      	mov	r3, r1
 8009d36:	71fb      	strb	r3, [r7, #7]
 8009d38:	4613      	mov	r3, r2
 8009d3a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8009d44:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d11a      	bne.n	8009d82 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009d4c:	88bb      	ldrh	r3, [r7, #4]
 8009d4e:	3303      	adds	r3, #3
 8009d50:	089b      	lsrs	r3, r3, #2
 8009d52:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009d54:	2300      	movs	r3, #0
 8009d56:	61bb      	str	r3, [r7, #24]
 8009d58:	e00f      	b.n	8009d7a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009d5a:	79fb      	ldrb	r3, [r7, #7]
 8009d5c:	031a      	lsls	r2, r3, #12
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	4413      	add	r3, r2
 8009d62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d66:	461a      	mov	r2, r3
 8009d68:	69fb      	ldr	r3, [r7, #28]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009d6e:	69fb      	ldr	r3, [r7, #28]
 8009d70:	3304      	adds	r3, #4
 8009d72:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009d74:	69bb      	ldr	r3, [r7, #24]
 8009d76:	3301      	adds	r3, #1
 8009d78:	61bb      	str	r3, [r7, #24]
 8009d7a:	69ba      	ldr	r2, [r7, #24]
 8009d7c:	693b      	ldr	r3, [r7, #16]
 8009d7e:	429a      	cmp	r2, r3
 8009d80:	d3eb      	bcc.n	8009d5a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009d82:	2300      	movs	r3, #0
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	3724      	adds	r7, #36	; 0x24
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8e:	4770      	bx	lr

08009d90 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009d90:	b480      	push	{r7}
 8009d92:	b089      	sub	sp, #36	; 0x24
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	60f8      	str	r0, [r7, #12]
 8009d98:	60b9      	str	r1, [r7, #8]
 8009d9a:	4613      	mov	r3, r2
 8009d9c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8009da6:	88fb      	ldrh	r3, [r7, #6]
 8009da8:	3303      	adds	r3, #3
 8009daa:	089b      	lsrs	r3, r3, #2
 8009dac:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8009dae:	2300      	movs	r3, #0
 8009db0:	61bb      	str	r3, [r7, #24]
 8009db2:	e00b      	b.n	8009dcc <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dba:	681a      	ldr	r2, [r3, #0]
 8009dbc:	69fb      	ldr	r3, [r7, #28]
 8009dbe:	601a      	str	r2, [r3, #0]
    pDest++;
 8009dc0:	69fb      	ldr	r3, [r7, #28]
 8009dc2:	3304      	adds	r3, #4
 8009dc4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8009dc6:	69bb      	ldr	r3, [r7, #24]
 8009dc8:	3301      	adds	r3, #1
 8009dca:	61bb      	str	r3, [r7, #24]
 8009dcc:	69ba      	ldr	r2, [r7, #24]
 8009dce:	693b      	ldr	r3, [r7, #16]
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	d3ef      	bcc.n	8009db4 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8009dd4:	69fb      	ldr	r3, [r7, #28]
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3724      	adds	r7, #36	; 0x24
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de0:	4770      	bx	lr

08009de2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009de2:	b480      	push	{r7}
 8009de4:	b085      	sub	sp, #20
 8009de6:	af00      	add	r7, sp, #0
 8009de8:	6078      	str	r0, [r7, #4]
 8009dea:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	781b      	ldrb	r3, [r3, #0]
 8009df4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	785b      	ldrb	r3, [r3, #1]
 8009dfa:	2b01      	cmp	r3, #1
 8009dfc:	d12c      	bne.n	8009e58 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	015a      	lsls	r2, r3, #5
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	4413      	add	r3, r2
 8009e06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	db12      	blt.n	8009e36 <USB_EPSetStall+0x54>
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d00f      	beq.n	8009e36 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009e16:	68bb      	ldr	r3, [r7, #8]
 8009e18:	015a      	lsls	r2, r3, #5
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	4413      	add	r3, r2
 8009e1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	68ba      	ldr	r2, [r7, #8]
 8009e26:	0151      	lsls	r1, r2, #5
 8009e28:	68fa      	ldr	r2, [r7, #12]
 8009e2a:	440a      	add	r2, r1
 8009e2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e30:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009e34:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	015a      	lsls	r2, r3, #5
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	4413      	add	r3, r2
 8009e3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	68ba      	ldr	r2, [r7, #8]
 8009e46:	0151      	lsls	r1, r2, #5
 8009e48:	68fa      	ldr	r2, [r7, #12]
 8009e4a:	440a      	add	r2, r1
 8009e4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009e54:	6013      	str	r3, [r2, #0]
 8009e56:	e02b      	b.n	8009eb0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	015a      	lsls	r2, r3, #5
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	4413      	add	r3, r2
 8009e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	db12      	blt.n	8009e90 <USB_EPSetStall+0xae>
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d00f      	beq.n	8009e90 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	015a      	lsls	r2, r3, #5
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	4413      	add	r3, r2
 8009e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	68ba      	ldr	r2, [r7, #8]
 8009e80:	0151      	lsls	r1, r2, #5
 8009e82:	68fa      	ldr	r2, [r7, #12]
 8009e84:	440a      	add	r2, r1
 8009e86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e8a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009e8e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	015a      	lsls	r2, r3, #5
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	4413      	add	r3, r2
 8009e98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	68ba      	ldr	r2, [r7, #8]
 8009ea0:	0151      	lsls	r1, r2, #5
 8009ea2:	68fa      	ldr	r2, [r7, #12]
 8009ea4:	440a      	add	r2, r1
 8009ea6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009eaa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009eae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009eb0:	2300      	movs	r3, #0
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3714      	adds	r7, #20
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebc:	4770      	bx	lr

08009ebe <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009ebe:	b480      	push	{r7}
 8009ec0:	b085      	sub	sp, #20
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	6078      	str	r0, [r7, #4]
 8009ec6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	781b      	ldrb	r3, [r3, #0]
 8009ed0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	785b      	ldrb	r3, [r3, #1]
 8009ed6:	2b01      	cmp	r3, #1
 8009ed8:	d128      	bne.n	8009f2c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	015a      	lsls	r2, r3, #5
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	4413      	add	r3, r2
 8009ee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	68ba      	ldr	r2, [r7, #8]
 8009eea:	0151      	lsls	r1, r2, #5
 8009eec:	68fa      	ldr	r2, [r7, #12]
 8009eee:	440a      	add	r2, r1
 8009ef0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ef4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009ef8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	78db      	ldrb	r3, [r3, #3]
 8009efe:	2b03      	cmp	r3, #3
 8009f00:	d003      	beq.n	8009f0a <USB_EPClearStall+0x4c>
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	78db      	ldrb	r3, [r3, #3]
 8009f06:	2b02      	cmp	r3, #2
 8009f08:	d138      	bne.n	8009f7c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	015a      	lsls	r2, r3, #5
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	4413      	add	r3, r2
 8009f12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	68ba      	ldr	r2, [r7, #8]
 8009f1a:	0151      	lsls	r1, r2, #5
 8009f1c:	68fa      	ldr	r2, [r7, #12]
 8009f1e:	440a      	add	r2, r1
 8009f20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f28:	6013      	str	r3, [r2, #0]
 8009f2a:	e027      	b.n	8009f7c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	015a      	lsls	r2, r3, #5
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	4413      	add	r3, r2
 8009f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	68ba      	ldr	r2, [r7, #8]
 8009f3c:	0151      	lsls	r1, r2, #5
 8009f3e:	68fa      	ldr	r2, [r7, #12]
 8009f40:	440a      	add	r2, r1
 8009f42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009f4a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	78db      	ldrb	r3, [r3, #3]
 8009f50:	2b03      	cmp	r3, #3
 8009f52:	d003      	beq.n	8009f5c <USB_EPClearStall+0x9e>
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	78db      	ldrb	r3, [r3, #3]
 8009f58:	2b02      	cmp	r3, #2
 8009f5a:	d10f      	bne.n	8009f7c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	015a      	lsls	r2, r3, #5
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	4413      	add	r3, r2
 8009f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	68ba      	ldr	r2, [r7, #8]
 8009f6c:	0151      	lsls	r1, r2, #5
 8009f6e:	68fa      	ldr	r2, [r7, #12]
 8009f70:	440a      	add	r2, r1
 8009f72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f7a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009f7c:	2300      	movs	r3, #0
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	3714      	adds	r7, #20
 8009f82:	46bd      	mov	sp, r7
 8009f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f88:	4770      	bx	lr

08009f8a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009f8a:	b480      	push	{r7}
 8009f8c:	b085      	sub	sp, #20
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	6078      	str	r0, [r7, #4]
 8009f92:	460b      	mov	r3, r1
 8009f94:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	68fa      	ldr	r2, [r7, #12]
 8009fa4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009fa8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009fac:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fb4:	681a      	ldr	r2, [r3, #0]
 8009fb6:	78fb      	ldrb	r3, [r7, #3]
 8009fb8:	011b      	lsls	r3, r3, #4
 8009fba:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009fbe:	68f9      	ldr	r1, [r7, #12]
 8009fc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009fc4:	4313      	orrs	r3, r2
 8009fc6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009fc8:	2300      	movs	r3, #0
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3714      	adds	r7, #20
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd4:	4770      	bx	lr

08009fd6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009fd6:	b580      	push	{r7, lr}
 8009fd8:	b084      	sub	sp, #16
 8009fda:	af00      	add	r7, sp, #0
 8009fdc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fe8:	685b      	ldr	r3, [r3, #4]
 8009fea:	68fa      	ldr	r2, [r7, #12]
 8009fec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ff0:	f023 0302 	bic.w	r3, r3, #2
 8009ff4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8009ff6:	2003      	movs	r0, #3
 8009ff8:	f7f8 f9f0 	bl	80023dc <HAL_Delay>

  return HAL_OK;
 8009ffc:	2300      	movs	r3, #0
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	3710      	adds	r7, #16
 800a002:	46bd      	mov	sp, r7
 800a004:	bd80      	pop	{r7, pc}

0800a006 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a006:	b580      	push	{r7, lr}
 800a008:	b084      	sub	sp, #16
 800a00a:	af00      	add	r7, sp, #0
 800a00c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a018:	685b      	ldr	r3, [r3, #4]
 800a01a:	68fa      	ldr	r2, [r7, #12]
 800a01c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a020:	f043 0302 	orr.w	r3, r3, #2
 800a024:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800a026:	2003      	movs	r0, #3
 800a028:	f7f8 f9d8 	bl	80023dc <HAL_Delay>

  return HAL_OK;
 800a02c:	2300      	movs	r3, #0
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3710      	adds	r7, #16
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}

0800a036 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a036:	b480      	push	{r7}
 800a038:	b085      	sub	sp, #20
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	695b      	ldr	r3, [r3, #20]
 800a042:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	699b      	ldr	r3, [r3, #24]
 800a048:	68fa      	ldr	r2, [r7, #12]
 800a04a:	4013      	ands	r3, r2
 800a04c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a04e:	68fb      	ldr	r3, [r7, #12]
}
 800a050:	4618      	mov	r0, r3
 800a052:	3714      	adds	r7, #20
 800a054:	46bd      	mov	sp, r7
 800a056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05a:	4770      	bx	lr

0800a05c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a05c:	b480      	push	{r7}
 800a05e:	b085      	sub	sp, #20
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a06e:	699b      	ldr	r3, [r3, #24]
 800a070:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a078:	69db      	ldr	r3, [r3, #28]
 800a07a:	68ba      	ldr	r2, [r7, #8]
 800a07c:	4013      	ands	r3, r2
 800a07e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	0c1b      	lsrs	r3, r3, #16
}
 800a084:	4618      	mov	r0, r3
 800a086:	3714      	adds	r7, #20
 800a088:	46bd      	mov	sp, r7
 800a08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08e:	4770      	bx	lr

0800a090 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a090:	b480      	push	{r7}
 800a092:	b085      	sub	sp, #20
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0a2:	699b      	ldr	r3, [r3, #24]
 800a0a4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0ac:	69db      	ldr	r3, [r3, #28]
 800a0ae:	68ba      	ldr	r2, [r7, #8]
 800a0b0:	4013      	ands	r3, r2
 800a0b2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	b29b      	uxth	r3, r3
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3714      	adds	r7, #20
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c2:	4770      	bx	lr

0800a0c4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b085      	sub	sp, #20
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
 800a0cc:	460b      	mov	r3, r1
 800a0ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a0d4:	78fb      	ldrb	r3, [r7, #3]
 800a0d6:	015a      	lsls	r2, r3, #5
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	4413      	add	r3, r2
 800a0dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0e0:	689b      	ldr	r3, [r3, #8]
 800a0e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0ea:	695b      	ldr	r3, [r3, #20]
 800a0ec:	68ba      	ldr	r2, [r7, #8]
 800a0ee:	4013      	ands	r3, r2
 800a0f0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a0f2:	68bb      	ldr	r3, [r7, #8]
}
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	3714      	adds	r7, #20
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fe:	4770      	bx	lr

0800a100 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a100:	b480      	push	{r7}
 800a102:	b087      	sub	sp, #28
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
 800a108:	460b      	mov	r3, r1
 800a10a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a110:	697b      	ldr	r3, [r7, #20]
 800a112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a116:	691b      	ldr	r3, [r3, #16]
 800a118:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a11a:	697b      	ldr	r3, [r7, #20]
 800a11c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a122:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a124:	78fb      	ldrb	r3, [r7, #3]
 800a126:	f003 030f 	and.w	r3, r3, #15
 800a12a:	68fa      	ldr	r2, [r7, #12]
 800a12c:	fa22 f303 	lsr.w	r3, r2, r3
 800a130:	01db      	lsls	r3, r3, #7
 800a132:	b2db      	uxtb	r3, r3
 800a134:	693a      	ldr	r2, [r7, #16]
 800a136:	4313      	orrs	r3, r2
 800a138:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a13a:	78fb      	ldrb	r3, [r7, #3]
 800a13c:	015a      	lsls	r2, r3, #5
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	4413      	add	r3, r2
 800a142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a146:	689b      	ldr	r3, [r3, #8]
 800a148:	693a      	ldr	r2, [r7, #16]
 800a14a:	4013      	ands	r3, r2
 800a14c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a14e:	68bb      	ldr	r3, [r7, #8]
}
 800a150:	4618      	mov	r0, r3
 800a152:	371c      	adds	r7, #28
 800a154:	46bd      	mov	sp, r7
 800a156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15a:	4770      	bx	lr

0800a15c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a15c:	b480      	push	{r7}
 800a15e:	b083      	sub	sp, #12
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	695b      	ldr	r3, [r3, #20]
 800a168:	f003 0301 	and.w	r3, r3, #1
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	370c      	adds	r7, #12
 800a170:	46bd      	mov	sp, r7
 800a172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a176:	4770      	bx	lr

0800a178 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a178:	b480      	push	{r7}
 800a17a:	b085      	sub	sp, #20
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	68fa      	ldr	r2, [r7, #12]
 800a18e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a192:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a196:	f023 0307 	bic.w	r3, r3, #7
 800a19a:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1a2:	689b      	ldr	r3, [r3, #8]
 800a1a4:	f003 0306 	and.w	r3, r3, #6
 800a1a8:	2b04      	cmp	r3, #4
 800a1aa:	d109      	bne.n	800a1c0 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	68fa      	ldr	r2, [r7, #12]
 800a1b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1ba:	f043 0303 	orr.w	r3, r3, #3
 800a1be:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1c6:	685b      	ldr	r3, [r3, #4]
 800a1c8:	68fa      	ldr	r2, [r7, #12]
 800a1ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a1ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a1d2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a1d4:	2300      	movs	r3, #0
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	3714      	adds	r7, #20
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e0:	4770      	bx	lr
	...

0800a1e4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b087      	sub	sp, #28
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	60f8      	str	r0, [r7, #12]
 800a1ec:	460b      	mov	r3, r1
 800a1ee:	607a      	str	r2, [r7, #4]
 800a1f0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	333c      	adds	r3, #60	; 0x3c
 800a1fa:	3304      	adds	r3, #4
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a200:	693b      	ldr	r3, [r7, #16]
 800a202:	4a26      	ldr	r2, [pc, #152]	; (800a29c <USB_EP0_OutStart+0xb8>)
 800a204:	4293      	cmp	r3, r2
 800a206:	d90a      	bls.n	800a21e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a208:	697b      	ldr	r3, [r7, #20]
 800a20a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a214:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a218:	d101      	bne.n	800a21e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a21a:	2300      	movs	r3, #0
 800a21c:	e037      	b.n	800a28e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a224:	461a      	mov	r2, r3
 800a226:	2300      	movs	r3, #0
 800a228:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a22a:	697b      	ldr	r3, [r7, #20]
 800a22c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a230:	691b      	ldr	r3, [r3, #16]
 800a232:	697a      	ldr	r2, [r7, #20]
 800a234:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a238:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a23c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a23e:	697b      	ldr	r3, [r7, #20]
 800a240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a244:	691b      	ldr	r3, [r3, #16]
 800a246:	697a      	ldr	r2, [r7, #20]
 800a248:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a24c:	f043 0318 	orr.w	r3, r3, #24
 800a250:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a258:	691b      	ldr	r3, [r3, #16]
 800a25a:	697a      	ldr	r2, [r7, #20]
 800a25c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a260:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a264:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a266:	7afb      	ldrb	r3, [r7, #11]
 800a268:	2b01      	cmp	r3, #1
 800a26a:	d10f      	bne.n	800a28c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a272:	461a      	mov	r2, r3
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	697a      	ldr	r2, [r7, #20]
 800a282:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a286:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a28a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a28c:	2300      	movs	r3, #0
}
 800a28e:	4618      	mov	r0, r3
 800a290:	371c      	adds	r7, #28
 800a292:	46bd      	mov	sp, r7
 800a294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a298:	4770      	bx	lr
 800a29a:	bf00      	nop
 800a29c:	4f54300a 	.word	0x4f54300a

0800a2a0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b085      	sub	sp, #20
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	3301      	adds	r3, #1
 800a2b0:	60fb      	str	r3, [r7, #12]
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	4a13      	ldr	r2, [pc, #76]	; (800a304 <USB_CoreReset+0x64>)
 800a2b6:	4293      	cmp	r3, r2
 800a2b8:	d901      	bls.n	800a2be <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a2ba:	2303      	movs	r3, #3
 800a2bc:	e01b      	b.n	800a2f6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	691b      	ldr	r3, [r3, #16]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	daf2      	bge.n	800a2ac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	691b      	ldr	r3, [r3, #16]
 800a2ce:	f043 0201 	orr.w	r2, r3, #1
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	3301      	adds	r3, #1
 800a2da:	60fb      	str	r3, [r7, #12]
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	4a09      	ldr	r2, [pc, #36]	; (800a304 <USB_CoreReset+0x64>)
 800a2e0:	4293      	cmp	r3, r2
 800a2e2:	d901      	bls.n	800a2e8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a2e4:	2303      	movs	r3, #3
 800a2e6:	e006      	b.n	800a2f6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	691b      	ldr	r3, [r3, #16]
 800a2ec:	f003 0301 	and.w	r3, r3, #1
 800a2f0:	2b01      	cmp	r3, #1
 800a2f2:	d0f0      	beq.n	800a2d6 <USB_CoreReset+0x36>

  return HAL_OK;
 800a2f4:	2300      	movs	r3, #0
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	3714      	adds	r7, #20
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a300:	4770      	bx	lr
 800a302:	bf00      	nop
 800a304:	00030d40 	.word	0x00030d40

0800a308 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a30c:	4904      	ldr	r1, [pc, #16]	; (800a320 <MX_FATFS_Init+0x18>)
 800a30e:	4805      	ldr	r0, [pc, #20]	; (800a324 <MX_FATFS_Init+0x1c>)
 800a310:	f001 fe36 	bl	800bf80 <FATFS_LinkDriver>
 800a314:	4603      	mov	r3, r0
 800a316:	461a      	mov	r2, r3
 800a318:	4b03      	ldr	r3, [pc, #12]	; (800a328 <MX_FATFS_Init+0x20>)
 800a31a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800a31c:	bf00      	nop
 800a31e:	bd80      	pop	{r7, pc}
 800a320:	20000b2c 	.word	0x20000b2c
 800a324:	080106b4 	.word	0x080106b4
 800a328:	20000b28 	.word	0x20000b28

0800a32c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b082      	sub	sp, #8
 800a330:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a332:	2300      	movs	r3, #0
 800a334:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a336:	f000 f871 	bl	800a41c <BSP_SD_IsDetected>
 800a33a:	4603      	mov	r3, r0
 800a33c:	2b01      	cmp	r3, #1
 800a33e:	d001      	beq.n	800a344 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800a340:	2301      	movs	r3, #1
 800a342:	e012      	b.n	800a36a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800a344:	480b      	ldr	r0, [pc, #44]	; (800a374 <BSP_SD_Init+0x48>)
 800a346:	f7fb f944 	bl	80055d2 <HAL_SD_Init>
 800a34a:	4603      	mov	r3, r0
 800a34c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800a34e:	79fb      	ldrb	r3, [r7, #7]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d109      	bne.n	800a368 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800a354:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a358:	4806      	ldr	r0, [pc, #24]	; (800a374 <BSP_SD_Init+0x48>)
 800a35a:	f7fb ff23 	bl	80061a4 <HAL_SD_ConfigWideBusOperation>
 800a35e:	4603      	mov	r3, r0
 800a360:	2b00      	cmp	r3, #0
 800a362:	d001      	beq.n	800a368 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800a364:	2301      	movs	r3, #1
 800a366:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800a368:	79fb      	ldrb	r3, [r7, #7]
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	3708      	adds	r7, #8
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}
 800a372:	bf00      	nop
 800a374:	20000a08 	.word	0x20000a08

0800a378 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b086      	sub	sp, #24
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	60f8      	str	r0, [r7, #12]
 800a380:	60b9      	str	r1, [r7, #8]
 800a382:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a384:	2300      	movs	r3, #0
 800a386:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	68ba      	ldr	r2, [r7, #8]
 800a38c:	68f9      	ldr	r1, [r7, #12]
 800a38e:	4806      	ldr	r0, [pc, #24]	; (800a3a8 <BSP_SD_ReadBlocks_DMA+0x30>)
 800a390:	f7fb f9b0 	bl	80056f4 <HAL_SD_ReadBlocks_DMA>
 800a394:	4603      	mov	r3, r0
 800a396:	2b00      	cmp	r3, #0
 800a398:	d001      	beq.n	800a39e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a39a:	2301      	movs	r3, #1
 800a39c:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800a39e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3718      	adds	r7, #24
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}
 800a3a8:	20000a08 	.word	0x20000a08

0800a3ac <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b086      	sub	sp, #24
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	60f8      	str	r0, [r7, #12]
 800a3b4:	60b9      	str	r1, [r7, #8]
 800a3b6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	68ba      	ldr	r2, [r7, #8]
 800a3c0:	68f9      	ldr	r1, [r7, #12]
 800a3c2:	4806      	ldr	r0, [pc, #24]	; (800a3dc <BSP_SD_WriteBlocks_DMA+0x30>)
 800a3c4:	f7fb fa80 	bl	80058c8 <HAL_SD_WriteBlocks_DMA>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d001      	beq.n	800a3d2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800a3d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	3718      	adds	r7, #24
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd80      	pop	{r7, pc}
 800a3dc:	20000a08 	.word	0x20000a08

0800a3e0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a3e4:	4805      	ldr	r0, [pc, #20]	; (800a3fc <BSP_SD_GetCardState+0x1c>)
 800a3e6:	f7fb ff59 	bl	800629c <HAL_SD_GetCardState>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	2b04      	cmp	r3, #4
 800a3ee:	bf14      	ite	ne
 800a3f0:	2301      	movne	r3, #1
 800a3f2:	2300      	moveq	r3, #0
 800a3f4:	b2db      	uxtb	r3, r3
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	bd80      	pop	{r7, pc}
 800a3fa:	bf00      	nop
 800a3fc:	20000a08 	.word	0x20000a08

0800a400 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b082      	sub	sp, #8
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800a408:	6879      	ldr	r1, [r7, #4]
 800a40a:	4803      	ldr	r0, [pc, #12]	; (800a418 <BSP_SD_GetCardInfo+0x18>)
 800a40c:	f7fb fe9e 	bl	800614c <HAL_SD_GetCardInfo>
}
 800a410:	bf00      	nop
 800a412:	3708      	adds	r7, #8
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}
 800a418:	20000a08 	.word	0x20000a08

0800a41c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b082      	sub	sp, #8
 800a420:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a422:	2301      	movs	r3, #1
 800a424:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800a426:	f000 f80b 	bl	800a440 <BSP_PlatformIsDetected>
 800a42a:	4603      	mov	r3, r0
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d101      	bne.n	800a434 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800a430:	2300      	movs	r3, #0
 800a432:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800a434:	79fb      	ldrb	r3, [r7, #7]
 800a436:	b2db      	uxtb	r3, r3
}
 800a438:	4618      	mov	r0, r3
 800a43a:	3708      	adds	r7, #8
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}

0800a440 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800a440:	b580      	push	{r7, lr}
 800a442:	b082      	sub	sp, #8
 800a444:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800a446:	2301      	movs	r3, #1
 800a448:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800a44a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a44e:	4806      	ldr	r0, [pc, #24]	; (800a468 <BSP_PlatformIsDetected+0x28>)
 800a450:	f7f8 fe2e 	bl	80030b0 <HAL_GPIO_ReadPin>
 800a454:	4603      	mov	r3, r0
 800a456:	2b00      	cmp	r3, #0
 800a458:	d001      	beq.n	800a45e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800a45a:	2300      	movs	r3, #0
 800a45c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800a45e:	79fb      	ldrb	r3, [r7, #7]
}  
 800a460:	4618      	mov	r0, r3
 800a462:	3708      	adds	r7, #8
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}
 800a468:	40020000 	.word	0x40020000

0800a46c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b084      	sub	sp, #16
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800a474:	f7f7 ffa6 	bl	80023c4 <HAL_GetTick>
 800a478:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800a47a:	e006      	b.n	800a48a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a47c:	f7ff ffb0 	bl	800a3e0 <BSP_SD_GetCardState>
 800a480:	4603      	mov	r3, r0
 800a482:	2b00      	cmp	r3, #0
 800a484:	d101      	bne.n	800a48a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800a486:	2300      	movs	r3, #0
 800a488:	e009      	b.n	800a49e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800a48a:	f7f7 ff9b 	bl	80023c4 <HAL_GetTick>
 800a48e:	4602      	mov	r2, r0
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	1ad3      	subs	r3, r2, r3
 800a494:	687a      	ldr	r2, [r7, #4]
 800a496:	429a      	cmp	r2, r3
 800a498:	d8f0      	bhi.n	800a47c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800a49a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	3710      	adds	r7, #16
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}
	...

0800a4a8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b082      	sub	sp, #8
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a4b2:	4b0b      	ldr	r3, [pc, #44]	; (800a4e0 <SD_CheckStatus+0x38>)
 800a4b4:	2201      	movs	r2, #1
 800a4b6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800a4b8:	f7ff ff92 	bl	800a3e0 <BSP_SD_GetCardState>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d107      	bne.n	800a4d2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a4c2:	4b07      	ldr	r3, [pc, #28]	; (800a4e0 <SD_CheckStatus+0x38>)
 800a4c4:	781b      	ldrb	r3, [r3, #0]
 800a4c6:	b2db      	uxtb	r3, r3
 800a4c8:	f023 0301 	bic.w	r3, r3, #1
 800a4cc:	b2da      	uxtb	r2, r3
 800a4ce:	4b04      	ldr	r3, [pc, #16]	; (800a4e0 <SD_CheckStatus+0x38>)
 800a4d0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a4d2:	4b03      	ldr	r3, [pc, #12]	; (800a4e0 <SD_CheckStatus+0x38>)
 800a4d4:	781b      	ldrb	r3, [r3, #0]
 800a4d6:	b2db      	uxtb	r3, r3
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3708      	adds	r7, #8
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}
 800a4e0:	2000000d 	.word	0x2000000d

0800a4e4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b082      	sub	sp, #8
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800a4ee:	f7ff ff1d 	bl	800a32c <BSP_SD_Init>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d107      	bne.n	800a508 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800a4f8:	79fb      	ldrb	r3, [r7, #7]
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f7ff ffd4 	bl	800a4a8 <SD_CheckStatus>
 800a500:	4603      	mov	r3, r0
 800a502:	461a      	mov	r2, r3
 800a504:	4b04      	ldr	r3, [pc, #16]	; (800a518 <SD_initialize+0x34>)
 800a506:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 800a508:	4b03      	ldr	r3, [pc, #12]	; (800a518 <SD_initialize+0x34>)
 800a50a:	781b      	ldrb	r3, [r3, #0]
 800a50c:	b2db      	uxtb	r3, r3
}
 800a50e:	4618      	mov	r0, r3
 800a510:	3708      	adds	r7, #8
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}
 800a516:	bf00      	nop
 800a518:	2000000d 	.word	0x2000000d

0800a51c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b082      	sub	sp, #8
 800a520:	af00      	add	r7, sp, #0
 800a522:	4603      	mov	r3, r0
 800a524:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a526:	79fb      	ldrb	r3, [r7, #7]
 800a528:	4618      	mov	r0, r3
 800a52a:	f7ff ffbd 	bl	800a4a8 <SD_CheckStatus>
 800a52e:	4603      	mov	r3, r0
}
 800a530:	4618      	mov	r0, r3
 800a532:	3708      	adds	r7, #8
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}

0800a538 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b088      	sub	sp, #32
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	60b9      	str	r1, [r7, #8]
 800a540:	607a      	str	r2, [r7, #4]
 800a542:	603b      	str	r3, [r7, #0]
 800a544:	4603      	mov	r3, r0
 800a546:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a548:	2301      	movs	r3, #1
 800a54a:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a54c:	f247 5030 	movw	r0, #30000	; 0x7530
 800a550:	f7ff ff8c 	bl	800a46c <SD_CheckStatusWithTimeout>
 800a554:	4603      	mov	r3, r0
 800a556:	2b00      	cmp	r3, #0
 800a558:	da01      	bge.n	800a55e <SD_read+0x26>
  {
    return res;
 800a55a:	7ffb      	ldrb	r3, [r7, #31]
 800a55c:	e08b      	b.n	800a676 <SD_read+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800a55e:	68bb      	ldr	r3, [r7, #8]
 800a560:	f003 0303 	and.w	r3, r3, #3
 800a564:	2b00      	cmp	r3, #0
 800a566:	f040 8085 	bne.w	800a674 <SD_read+0x13c>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800a56a:	683a      	ldr	r2, [r7, #0]
 800a56c:	6879      	ldr	r1, [r7, #4]
 800a56e:	68b8      	ldr	r0, [r7, #8]
 800a570:	f7ff ff02 	bl	800a378 <BSP_SD_ReadBlocks_DMA>
 800a574:	4603      	mov	r3, r0
 800a576:	2b00      	cmp	r3, #0
 800a578:	d133      	bne.n	800a5e2 <SD_read+0xaa>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800a57a:	4b41      	ldr	r3, [pc, #260]	; (800a680 <SD_read+0x148>)
 800a57c:	2200      	movs	r2, #0
 800a57e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800a580:	f7f7 ff20 	bl	80023c4 <HAL_GetTick>
 800a584:	6178      	str	r0, [r7, #20]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800a586:	bf00      	nop
 800a588:	4b3d      	ldr	r3, [pc, #244]	; (800a680 <SD_read+0x148>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d108      	bne.n	800a5a2 <SD_read+0x6a>
 800a590:	f7f7 ff18 	bl	80023c4 <HAL_GetTick>
 800a594:	4602      	mov	r2, r0
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	1ad3      	subs	r3, r2, r3
 800a59a:	f247 522f 	movw	r2, #29999	; 0x752f
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	d9f2      	bls.n	800a588 <SD_read+0x50>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800a5a2:	4b37      	ldr	r3, [pc, #220]	; (800a680 <SD_read+0x148>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d102      	bne.n	800a5b0 <SD_read+0x78>
      {
        res = RES_ERROR;
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	77fb      	strb	r3, [r7, #31]
 800a5ae:	e061      	b.n	800a674 <SD_read+0x13c>
      }
      else
      {
        ReadStatus = 0;
 800a5b0:	4b33      	ldr	r3, [pc, #204]	; (800a680 <SD_read+0x148>)
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800a5b6:	f7f7 ff05 	bl	80023c4 <HAL_GetTick>
 800a5ba:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a5bc:	e007      	b.n	800a5ce <SD_read+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a5be:	f7ff ff0f 	bl	800a3e0 <BSP_SD_GetCardState>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d102      	bne.n	800a5ce <SD_read+0x96>
          {
            res = RES_OK;
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	77fb      	strb	r3, [r7, #31]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800a5cc:	e052      	b.n	800a674 <SD_read+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a5ce:	f7f7 fef9 	bl	80023c4 <HAL_GetTick>
 800a5d2:	4602      	mov	r2, r0
 800a5d4:	697b      	ldr	r3, [r7, #20]
 800a5d6:	1ad3      	subs	r3, r2, r3
 800a5d8:	f247 522f 	movw	r2, #29999	; 0x752f
 800a5dc:	4293      	cmp	r3, r2
 800a5de:	d9ee      	bls.n	800a5be <SD_read+0x86>
 800a5e0:	e048      	b.n	800a674 <SD_read+0x13c>
#if defined(ENABLE_SCRATCH_BUFFER)
    else {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	61bb      	str	r3, [r7, #24]
 800a5e6:	e034      	b.n	800a652 <SD_read+0x11a>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	1c5a      	adds	r2, r3, #1
 800a5ec:	607a      	str	r2, [r7, #4]
 800a5ee:	2201      	movs	r2, #1
 800a5f0:	4619      	mov	r1, r3
 800a5f2:	4824      	ldr	r0, [pc, #144]	; (800a684 <SD_read+0x14c>)
 800a5f4:	f7ff fec0 	bl	800a378 <BSP_SD_ReadBlocks_DMA>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 800a5fc:	7fbb      	ldrb	r3, [r7, #30]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d12c      	bne.n	800a65c <SD_read+0x124>
          /* wait until the read is successful or a timeout occurs */

          ReadStatus = 0;
 800a602:	4b1f      	ldr	r3, [pc, #124]	; (800a680 <SD_read+0x148>)
 800a604:	2200      	movs	r2, #0
 800a606:	601a      	str	r2, [r3, #0]
          timeout = HAL_GetTick();
 800a608:	f7f7 fedc 	bl	80023c4 <HAL_GetTick>
 800a60c:	6178      	str	r0, [r7, #20]
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800a60e:	bf00      	nop
 800a610:	4b1b      	ldr	r3, [pc, #108]	; (800a680 <SD_read+0x148>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d108      	bne.n	800a62a <SD_read+0xf2>
 800a618:	f7f7 fed4 	bl	80023c4 <HAL_GetTick>
 800a61c:	4602      	mov	r2, r0
 800a61e:	697b      	ldr	r3, [r7, #20]
 800a620:	1ad3      	subs	r3, r2, r3
 800a622:	f247 522f 	movw	r2, #29999	; 0x752f
 800a626:	4293      	cmp	r3, r2
 800a628:	d9f2      	bls.n	800a610 <SD_read+0xd8>
          {
          }
          if (ReadStatus == 0)
 800a62a:	4b15      	ldr	r3, [pc, #84]	; (800a680 <SD_read+0x148>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d016      	beq.n	800a660 <SD_read+0x128>
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	4a13      	ldr	r2, [pc, #76]	; (800a684 <SD_read+0x14c>)
 800a636:	4618      	mov	r0, r3
 800a638:	4611      	mov	r1, r2
 800a63a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a63e:	461a      	mov	r2, r3
 800a640:	f002 fa0c 	bl	800ca5c <memcpy>
          buff += BLOCKSIZE;
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800a64a:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 800a64c:	69bb      	ldr	r3, [r7, #24]
 800a64e:	3301      	adds	r3, #1
 800a650:	61bb      	str	r3, [r7, #24]
 800a652:	69bb      	ldr	r3, [r7, #24]
 800a654:	683a      	ldr	r2, [r7, #0]
 800a656:	429a      	cmp	r2, r3
 800a658:	d8c6      	bhi.n	800a5e8 <SD_read+0xb0>
 800a65a:	e002      	b.n	800a662 <SD_read+0x12a>
        }
        else
        {
          break;
 800a65c:	bf00      	nop
 800a65e:	e000      	b.n	800a662 <SD_read+0x12a>
            break;
 800a660:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 800a662:	69bb      	ldr	r3, [r7, #24]
 800a664:	683a      	ldr	r2, [r7, #0]
 800a666:	429a      	cmp	r2, r3
 800a668:	d104      	bne.n	800a674 <SD_read+0x13c>
 800a66a:	7fbb      	ldrb	r3, [r7, #30]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d101      	bne.n	800a674 <SD_read+0x13c>
        res = RES_OK;
 800a670:	2300      	movs	r3, #0
 800a672:	77fb      	strb	r3, [r7, #31]
    }
#endif
  }

  return res;
 800a674:	7ffb      	ldrb	r3, [r7, #31]
}
 800a676:	4618      	mov	r0, r3
 800a678:	3720      	adds	r7, #32
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}
 800a67e:	bf00      	nop
 800a680:	20000574 	.word	0x20000574
 800a684:	20000370 	.word	0x20000370

0800a688 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b088      	sub	sp, #32
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	60b9      	str	r1, [r7, #8]
 800a690:	607a      	str	r2, [r7, #4]
 800a692:	603b      	str	r3, [r7, #0]
 800a694:	4603      	mov	r3, r0
 800a696:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a698:	2301      	movs	r3, #1
 800a69a:	77fb      	strb	r3, [r7, #31]
  uint32_t timeout;
  uint8_t ret;
  int i;

   WriteStatus = 0;
 800a69c:	4b4c      	ldr	r3, [pc, #304]	; (800a7d0 <SD_write+0x148>)
 800a69e:	2200      	movs	r2, #0
 800a6a0:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a6a2:	f247 5030 	movw	r0, #30000	; 0x7530
 800a6a6:	f7ff fee1 	bl	800a46c <SD_CheckStatusWithTimeout>
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	da01      	bge.n	800a6b4 <SD_write+0x2c>
  {
    return res;
 800a6b0:	7ffb      	ldrb	r3, [r7, #31]
 800a6b2:	e088      	b.n	800a7c6 <SD_write+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	f003 0303 	and.w	r3, r3, #3
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	f040 8082 	bne.w	800a7c4 <SD_write+0x13c>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800a6c0:	683a      	ldr	r2, [r7, #0]
 800a6c2:	6879      	ldr	r1, [r7, #4]
 800a6c4:	68b8      	ldr	r0, [r7, #8]
 800a6c6:	f7ff fe71 	bl	800a3ac <BSP_SD_WriteBlocks_DMA>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d130      	bne.n	800a732 <SD_write+0xaa>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800a6d0:	f7f7 fe78 	bl	80023c4 <HAL_GetTick>
 800a6d4:	6178      	str	r0, [r7, #20]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800a6d6:	bf00      	nop
 800a6d8:	4b3d      	ldr	r3, [pc, #244]	; (800a7d0 <SD_write+0x148>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d108      	bne.n	800a6f2 <SD_write+0x6a>
 800a6e0:	f7f7 fe70 	bl	80023c4 <HAL_GetTick>
 800a6e4:	4602      	mov	r2, r0
 800a6e6:	697b      	ldr	r3, [r7, #20]
 800a6e8:	1ad3      	subs	r3, r2, r3
 800a6ea:	f247 522f 	movw	r2, #29999	; 0x752f
 800a6ee:	4293      	cmp	r3, r2
 800a6f0:	d9f2      	bls.n	800a6d8 <SD_write+0x50>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800a6f2:	4b37      	ldr	r3, [pc, #220]	; (800a7d0 <SD_write+0x148>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d102      	bne.n	800a700 <SD_write+0x78>
      {
        res = RES_ERROR;
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	77fb      	strb	r3, [r7, #31]
 800a6fe:	e061      	b.n	800a7c4 <SD_write+0x13c>
      }
      else
      {
        WriteStatus = 0;
 800a700:	4b33      	ldr	r3, [pc, #204]	; (800a7d0 <SD_write+0x148>)
 800a702:	2200      	movs	r2, #0
 800a704:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800a706:	f7f7 fe5d 	bl	80023c4 <HAL_GetTick>
 800a70a:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a70c:	e007      	b.n	800a71e <SD_write+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a70e:	f7ff fe67 	bl	800a3e0 <BSP_SD_GetCardState>
 800a712:	4603      	mov	r3, r0
 800a714:	2b00      	cmp	r3, #0
 800a716:	d102      	bne.n	800a71e <SD_write+0x96>
          {
            res = RES_OK;
 800a718:	2300      	movs	r3, #0
 800a71a:	77fb      	strb	r3, [r7, #31]
            break;
 800a71c:	e052      	b.n	800a7c4 <SD_write+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a71e:	f7f7 fe51 	bl	80023c4 <HAL_GetTick>
 800a722:	4602      	mov	r2, r0
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	1ad3      	subs	r3, r2, r3
 800a728:	f247 522f 	movw	r2, #29999	; 0x752f
 800a72c:	4293      	cmp	r3, r2
 800a72e:	d9ee      	bls.n	800a70e <SD_write+0x86>
 800a730:	e048      	b.n	800a7c4 <SD_write+0x13c>
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 800a732:	2300      	movs	r3, #0
 800a734:	61bb      	str	r3, [r7, #24]
 800a736:	e034      	b.n	800a7a2 <SD_write+0x11a>
      {
        WriteStatus = 0;
 800a738:	4b25      	ldr	r3, [pc, #148]	; (800a7d0 <SD_write+0x148>)
 800a73a:	2200      	movs	r2, #0
 800a73c:	601a      	str	r2, [r3, #0]
        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	1c5a      	adds	r2, r3, #1
 800a742:	607a      	str	r2, [r7, #4]
 800a744:	2201      	movs	r2, #1
 800a746:	4619      	mov	r1, r3
 800a748:	4822      	ldr	r0, [pc, #136]	; (800a7d4 <SD_write+0x14c>)
 800a74a:	f7ff fe2f 	bl	800a3ac <BSP_SD_WriteBlocks_DMA>
 800a74e:	4603      	mov	r3, r0
 800a750:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 800a752:	7fbb      	ldrb	r3, [r7, #30]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d129      	bne.n	800a7ac <SD_write+0x124>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 800a758:	f7f7 fe34 	bl	80023c4 <HAL_GetTick>
 800a75c:	6178      	str	r0, [r7, #20]
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800a75e:	bf00      	nop
 800a760:	4b1b      	ldr	r3, [pc, #108]	; (800a7d0 <SD_write+0x148>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d108      	bne.n	800a77a <SD_write+0xf2>
 800a768:	f7f7 fe2c 	bl	80023c4 <HAL_GetTick>
 800a76c:	4602      	mov	r2, r0
 800a76e:	697b      	ldr	r3, [r7, #20]
 800a770:	1ad3      	subs	r3, r2, r3
 800a772:	f247 522f 	movw	r2, #29999	; 0x752f
 800a776:	4293      	cmp	r3, r2
 800a778:	d9f2      	bls.n	800a760 <SD_write+0xd8>
          {
          }
          if (WriteStatus == 0)
 800a77a:	4b15      	ldr	r3, [pc, #84]	; (800a7d0 <SD_write+0x148>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d016      	beq.n	800a7b0 <SD_write+0x128>
          {
            break;
          }

          memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	4a13      	ldr	r2, [pc, #76]	; (800a7d4 <SD_write+0x14c>)
 800a786:	4618      	mov	r0, r3
 800a788:	4611      	mov	r1, r2
 800a78a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a78e:	461a      	mov	r2, r3
 800a790:	f002 f964 	bl	800ca5c <memcpy>
          buff += BLOCKSIZE;
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800a79a:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++)
 800a79c:	69bb      	ldr	r3, [r7, #24]
 800a79e:	3301      	adds	r3, #1
 800a7a0:	61bb      	str	r3, [r7, #24]
 800a7a2:	69bb      	ldr	r3, [r7, #24]
 800a7a4:	683a      	ldr	r2, [r7, #0]
 800a7a6:	429a      	cmp	r2, r3
 800a7a8:	d8c6      	bhi.n	800a738 <SD_write+0xb0>
 800a7aa:	e002      	b.n	800a7b2 <SD_write+0x12a>
        }
        else
        {
          break;
 800a7ac:	bf00      	nop
 800a7ae:	e000      	b.n	800a7b2 <SD_write+0x12a>
            break;
 800a7b0:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 800a7b2:	69bb      	ldr	r3, [r7, #24]
 800a7b4:	683a      	ldr	r2, [r7, #0]
 800a7b6:	429a      	cmp	r2, r3
 800a7b8:	d104      	bne.n	800a7c4 <SD_write+0x13c>
 800a7ba:	7fbb      	ldrb	r3, [r7, #30]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d101      	bne.n	800a7c4 <SD_write+0x13c>
        res = RES_OK;
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	77fb      	strb	r3, [r7, #31]
    }

  }
  return res;
 800a7c4:	7ffb      	ldrb	r3, [r7, #31]
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	3720      	adds	r7, #32
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}
 800a7ce:	bf00      	nop
 800a7d0:	20000570 	.word	0x20000570
 800a7d4:	20000370 	.word	0x20000370

0800a7d8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b08c      	sub	sp, #48	; 0x30
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	4603      	mov	r3, r0
 800a7e0:	603a      	str	r2, [r7, #0]
 800a7e2:	71fb      	strb	r3, [r7, #7]
 800a7e4:	460b      	mov	r3, r1
 800a7e6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a7e8:	2301      	movs	r3, #1
 800a7ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a7ee:	4b25      	ldr	r3, [pc, #148]	; (800a884 <SD_ioctl+0xac>)
 800a7f0:	781b      	ldrb	r3, [r3, #0]
 800a7f2:	b2db      	uxtb	r3, r3
 800a7f4:	f003 0301 	and.w	r3, r3, #1
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d001      	beq.n	800a800 <SD_ioctl+0x28>
 800a7fc:	2303      	movs	r3, #3
 800a7fe:	e03c      	b.n	800a87a <SD_ioctl+0xa2>

  switch (cmd)
 800a800:	79bb      	ldrb	r3, [r7, #6]
 800a802:	2b03      	cmp	r3, #3
 800a804:	d834      	bhi.n	800a870 <SD_ioctl+0x98>
 800a806:	a201      	add	r2, pc, #4	; (adr r2, 800a80c <SD_ioctl+0x34>)
 800a808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a80c:	0800a81d 	.word	0x0800a81d
 800a810:	0800a825 	.word	0x0800a825
 800a814:	0800a83d 	.word	0x0800a83d
 800a818:	0800a857 	.word	0x0800a857
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a81c:	2300      	movs	r3, #0
 800a81e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a822:	e028      	b.n	800a876 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a824:	f107 030c 	add.w	r3, r7, #12
 800a828:	4618      	mov	r0, r3
 800a82a:	f7ff fde9 	bl	800a400 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a82e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a834:	2300      	movs	r3, #0
 800a836:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a83a:	e01c      	b.n	800a876 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a83c:	f107 030c 	add.w	r3, r7, #12
 800a840:	4618      	mov	r0, r3
 800a842:	f7ff fddd 	bl	800a400 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a848:	b29a      	uxth	r2, r3
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a84e:	2300      	movs	r3, #0
 800a850:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a854:	e00f      	b.n	800a876 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a856:	f107 030c 	add.w	r3, r7, #12
 800a85a:	4618      	mov	r0, r3
 800a85c:	f7ff fdd0 	bl	800a400 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a862:	0a5a      	lsrs	r2, r3, #9
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a868:	2300      	movs	r3, #0
 800a86a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a86e:	e002      	b.n	800a876 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a870:	2304      	movs	r3, #4
 800a872:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800a876:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	3730      	adds	r7, #48	; 0x30
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}
 800a882:	bf00      	nop
 800a884:	2000000d 	.word	0x2000000d

0800a888 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b084      	sub	sp, #16
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	460b      	mov	r3, r1
 800a892:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a894:	2300      	movs	r3, #0
 800a896:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	7c1b      	ldrb	r3, [r3, #16]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d115      	bne.n	800a8cc <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a8a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a8a4:	2202      	movs	r2, #2
 800a8a6:	2181      	movs	r1, #129	; 0x81
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f001 ff50 	bl	800c74e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	2201      	movs	r2, #1
 800a8b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a8b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a8b8:	2202      	movs	r2, #2
 800a8ba:	2101      	movs	r1, #1
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	f001 ff46 	bl	800c74e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2201      	movs	r2, #1
 800a8c6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800a8ca:	e012      	b.n	800a8f2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a8cc:	2340      	movs	r3, #64	; 0x40
 800a8ce:	2202      	movs	r2, #2
 800a8d0:	2181      	movs	r1, #129	; 0x81
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f001 ff3b 	bl	800c74e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2201      	movs	r2, #1
 800a8dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a8de:	2340      	movs	r3, #64	; 0x40
 800a8e0:	2202      	movs	r2, #2
 800a8e2:	2101      	movs	r1, #1
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f001 ff32 	bl	800c74e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2201      	movs	r2, #1
 800a8ee:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a8f2:	2308      	movs	r3, #8
 800a8f4:	2203      	movs	r2, #3
 800a8f6:	2182      	movs	r1, #130	; 0x82
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	f001 ff28 	bl	800c74e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2201      	movs	r2, #1
 800a902:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800a904:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a908:	f002 f898 	bl	800ca3c <malloc>
 800a90c:	4603      	mov	r3, r0
 800a90e:	461a      	mov	r2, r3
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d102      	bne.n	800a926 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 800a920:	2301      	movs	r3, #1
 800a922:	73fb      	strb	r3, [r7, #15]
 800a924:	e026      	b.n	800a974 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a92c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	2200      	movs	r2, #0
 800a93c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800a940:	68bb      	ldr	r3, [r7, #8]
 800a942:	2200      	movs	r2, #0
 800a944:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	7c1b      	ldrb	r3, [r3, #16]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d109      	bne.n	800a964 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a956:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a95a:	2101      	movs	r1, #1
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f001 ffe7 	bl	800c930 <USBD_LL_PrepareReceive>
 800a962:	e007      	b.n	800a974 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a96a:	2340      	movs	r3, #64	; 0x40
 800a96c:	2101      	movs	r1, #1
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f001 ffde 	bl	800c930 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800a974:	7bfb      	ldrb	r3, [r7, #15]
}
 800a976:	4618      	mov	r0, r3
 800a978:	3710      	adds	r7, #16
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}

0800a97e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a97e:	b580      	push	{r7, lr}
 800a980:	b084      	sub	sp, #16
 800a982:	af00      	add	r7, sp, #0
 800a984:	6078      	str	r0, [r7, #4]
 800a986:	460b      	mov	r3, r1
 800a988:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a98a:	2300      	movs	r3, #0
 800a98c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a98e:	2181      	movs	r1, #129	; 0x81
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f001 ff02 	bl	800c79a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2200      	movs	r2, #0
 800a99a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a99c:	2101      	movs	r1, #1
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f001 fefb 	bl	800c79a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a9ac:	2182      	movs	r1, #130	; 0x82
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f001 fef3 	bl	800c79a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d00e      	beq.n	800a9e2 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a9ca:	685b      	ldr	r3, [r3, #4]
 800a9cc:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	f002 f839 	bl	800ca4c <free>
    pdev->pClassData = NULL;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800a9e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	3710      	adds	r7, #16
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bd80      	pop	{r7, pc}

0800a9ec <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b086      	sub	sp, #24
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
 800a9f4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a9fc:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a9fe:	2300      	movs	r3, #0
 800aa00:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800aa02:	2300      	movs	r3, #0
 800aa04:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800aa06:	2300      	movs	r3, #0
 800aa08:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	781b      	ldrb	r3, [r3, #0]
 800aa0e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d039      	beq.n	800aa8a <USBD_CDC_Setup+0x9e>
 800aa16:	2b20      	cmp	r3, #32
 800aa18:	d17c      	bne.n	800ab14 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	88db      	ldrh	r3, [r3, #6]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d029      	beq.n	800aa76 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	781b      	ldrb	r3, [r3, #0]
 800aa26:	b25b      	sxtb	r3, r3
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	da11      	bge.n	800aa50 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800aa32:	689b      	ldr	r3, [r3, #8]
 800aa34:	683a      	ldr	r2, [r7, #0]
 800aa36:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800aa38:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800aa3a:	683a      	ldr	r2, [r7, #0]
 800aa3c:	88d2      	ldrh	r2, [r2, #6]
 800aa3e:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800aa40:	6939      	ldr	r1, [r7, #16]
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	88db      	ldrh	r3, [r3, #6]
 800aa46:	461a      	mov	r2, r3
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f001 f9c9 	bl	800bde0 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800aa4e:	e068      	b.n	800ab22 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	785a      	ldrb	r2, [r3, #1]
 800aa54:	693b      	ldr	r3, [r7, #16]
 800aa56:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	88db      	ldrh	r3, [r3, #6]
 800aa5e:	b2da      	uxtb	r2, r3
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800aa66:	6939      	ldr	r1, [r7, #16]
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	88db      	ldrh	r3, [r3, #6]
 800aa6c:	461a      	mov	r2, r3
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f001 f9e4 	bl	800be3c <USBD_CtlPrepareRx>
    break;
 800aa74:	e055      	b.n	800ab22 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800aa7c:	689b      	ldr	r3, [r3, #8]
 800aa7e:	683a      	ldr	r2, [r7, #0]
 800aa80:	7850      	ldrb	r0, [r2, #1]
 800aa82:	2200      	movs	r2, #0
 800aa84:	6839      	ldr	r1, [r7, #0]
 800aa86:	4798      	blx	r3
    break;
 800aa88:	e04b      	b.n	800ab22 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	785b      	ldrb	r3, [r3, #1]
 800aa8e:	2b0a      	cmp	r3, #10
 800aa90:	d017      	beq.n	800aac2 <USBD_CDC_Setup+0xd6>
 800aa92:	2b0b      	cmp	r3, #11
 800aa94:	d029      	beq.n	800aaea <USBD_CDC_Setup+0xfe>
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d133      	bne.n	800ab02 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800aaa0:	2b03      	cmp	r3, #3
 800aaa2:	d107      	bne.n	800aab4 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800aaa4:	f107 030c 	add.w	r3, r7, #12
 800aaa8:	2202      	movs	r2, #2
 800aaaa:	4619      	mov	r1, r3
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f001 f997 	bl	800bde0 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800aab2:	e02e      	b.n	800ab12 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800aab4:	6839      	ldr	r1, [r7, #0]
 800aab6:	6878      	ldr	r0, [r7, #4]
 800aab8:	f001 f927 	bl	800bd0a <USBD_CtlError>
			  ret = USBD_FAIL;
 800aabc:	2302      	movs	r3, #2
 800aabe:	75fb      	strb	r3, [r7, #23]
      break;
 800aac0:	e027      	b.n	800ab12 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800aac8:	2b03      	cmp	r3, #3
 800aaca:	d107      	bne.n	800aadc <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800aacc:	f107 030f 	add.w	r3, r7, #15
 800aad0:	2201      	movs	r2, #1
 800aad2:	4619      	mov	r1, r3
 800aad4:	6878      	ldr	r0, [r7, #4]
 800aad6:	f001 f983 	bl	800bde0 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800aada:	e01a      	b.n	800ab12 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800aadc:	6839      	ldr	r1, [r7, #0]
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f001 f913 	bl	800bd0a <USBD_CtlError>
			  ret = USBD_FAIL;
 800aae4:	2302      	movs	r3, #2
 800aae6:	75fb      	strb	r3, [r7, #23]
      break;
 800aae8:	e013      	b.n	800ab12 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800aaf0:	2b03      	cmp	r3, #3
 800aaf2:	d00d      	beq.n	800ab10 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 800aaf4:	6839      	ldr	r1, [r7, #0]
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	f001 f907 	bl	800bd0a <USBD_CtlError>
			  ret = USBD_FAIL;
 800aafc:	2302      	movs	r3, #2
 800aafe:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800ab00:	e006      	b.n	800ab10 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 800ab02:	6839      	ldr	r1, [r7, #0]
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f001 f900 	bl	800bd0a <USBD_CtlError>
      ret = USBD_FAIL;
 800ab0a:	2302      	movs	r3, #2
 800ab0c:	75fb      	strb	r3, [r7, #23]
      break;
 800ab0e:	e000      	b.n	800ab12 <USBD_CDC_Setup+0x126>
      break;
 800ab10:	bf00      	nop
    }
    break;
 800ab12:	e006      	b.n	800ab22 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 800ab14:	6839      	ldr	r1, [r7, #0]
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f001 f8f7 	bl	800bd0a <USBD_CtlError>
    ret = USBD_FAIL;
 800ab1c:	2302      	movs	r3, #2
 800ab1e:	75fb      	strb	r3, [r7, #23]
    break;
 800ab20:	bf00      	nop
  }

  return ret;
 800ab22:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3718      	adds	r7, #24
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}

0800ab2c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b084      	sub	sp, #16
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
 800ab34:	460b      	mov	r3, r1
 800ab36:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ab3e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800ab46:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d03a      	beq.n	800abc8 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800ab52:	78fa      	ldrb	r2, [r7, #3]
 800ab54:	6879      	ldr	r1, [r7, #4]
 800ab56:	4613      	mov	r3, r2
 800ab58:	009b      	lsls	r3, r3, #2
 800ab5a:	4413      	add	r3, r2
 800ab5c:	009b      	lsls	r3, r3, #2
 800ab5e:	440b      	add	r3, r1
 800ab60:	331c      	adds	r3, #28
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d029      	beq.n	800abbc <USBD_CDC_DataIn+0x90>
 800ab68:	78fa      	ldrb	r2, [r7, #3]
 800ab6a:	6879      	ldr	r1, [r7, #4]
 800ab6c:	4613      	mov	r3, r2
 800ab6e:	009b      	lsls	r3, r3, #2
 800ab70:	4413      	add	r3, r2
 800ab72:	009b      	lsls	r3, r3, #2
 800ab74:	440b      	add	r3, r1
 800ab76:	331c      	adds	r3, #28
 800ab78:	681a      	ldr	r2, [r3, #0]
 800ab7a:	78f9      	ldrb	r1, [r7, #3]
 800ab7c:	68b8      	ldr	r0, [r7, #8]
 800ab7e:	460b      	mov	r3, r1
 800ab80:	00db      	lsls	r3, r3, #3
 800ab82:	1a5b      	subs	r3, r3, r1
 800ab84:	009b      	lsls	r3, r3, #2
 800ab86:	4403      	add	r3, r0
 800ab88:	3344      	adds	r3, #68	; 0x44
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	fbb2 f1f3 	udiv	r1, r2, r3
 800ab90:	fb03 f301 	mul.w	r3, r3, r1
 800ab94:	1ad3      	subs	r3, r2, r3
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d110      	bne.n	800abbc <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800ab9a:	78fa      	ldrb	r2, [r7, #3]
 800ab9c:	6879      	ldr	r1, [r7, #4]
 800ab9e:	4613      	mov	r3, r2
 800aba0:	009b      	lsls	r3, r3, #2
 800aba2:	4413      	add	r3, r2
 800aba4:	009b      	lsls	r3, r3, #2
 800aba6:	440b      	add	r3, r1
 800aba8:	331c      	adds	r3, #28
 800abaa:	2200      	movs	r2, #0
 800abac:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800abae:	78f9      	ldrb	r1, [r7, #3]
 800abb0:	2300      	movs	r3, #0
 800abb2:	2200      	movs	r2, #0
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	f001 fe98 	bl	800c8ea <USBD_LL_Transmit>
 800abba:	e003      	b.n	800abc4 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	2200      	movs	r2, #0
 800abc0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800abc4:	2300      	movs	r3, #0
 800abc6:	e000      	b.n	800abca <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800abc8:	2302      	movs	r3, #2
  }
}
 800abca:	4618      	mov	r0, r3
 800abcc:	3710      	adds	r7, #16
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}

0800abd2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800abd2:	b580      	push	{r7, lr}
 800abd4:	b084      	sub	sp, #16
 800abd6:	af00      	add	r7, sp, #0
 800abd8:	6078      	str	r0, [r7, #4]
 800abda:	460b      	mov	r3, r1
 800abdc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800abe4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800abe6:	78fb      	ldrb	r3, [r7, #3]
 800abe8:	4619      	mov	r1, r3
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	f001 fec3 	bl	800c976 <USBD_LL_GetRxDataSize>
 800abf0:	4602      	mov	r2, r0
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d00d      	beq.n	800ac1e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ac08:	68db      	ldr	r3, [r3, #12]
 800ac0a:	68fa      	ldr	r2, [r7, #12]
 800ac0c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ac10:	68fa      	ldr	r2, [r7, #12]
 800ac12:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ac16:	4611      	mov	r1, r2
 800ac18:	4798      	blx	r3

    return USBD_OK;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	e000      	b.n	800ac20 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800ac1e:	2302      	movs	r3, #2
  }
}
 800ac20:	4618      	mov	r0, r3
 800ac22:	3710      	adds	r7, #16
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}

0800ac28 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b084      	sub	sp, #16
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ac36:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d015      	beq.n	800ac6e <USBD_CDC_EP0_RxReady+0x46>
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ac48:	2bff      	cmp	r3, #255	; 0xff
 800ac4a:	d010      	beq.n	800ac6e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ac52:	689b      	ldr	r3, [r3, #8]
 800ac54:	68fa      	ldr	r2, [r7, #12]
 800ac56:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800ac5a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800ac5c:	68fa      	ldr	r2, [r7, #12]
 800ac5e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ac62:	b292      	uxth	r2, r2
 800ac64:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	22ff      	movs	r2, #255	; 0xff
 800ac6a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800ac6e:	2300      	movs	r3, #0
}
 800ac70:	4618      	mov	r0, r3
 800ac72:	3710      	adds	r7, #16
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd80      	pop	{r7, pc}

0800ac78 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800ac78:	b480      	push	{r7}
 800ac7a:	b083      	sub	sp, #12
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2243      	movs	r2, #67	; 0x43
 800ac84:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800ac86:	4b03      	ldr	r3, [pc, #12]	; (800ac94 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	370c      	adds	r7, #12
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac92:	4770      	bx	lr
 800ac94:	20000098 	.word	0x20000098

0800ac98 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800ac98:	b480      	push	{r7}
 800ac9a:	b083      	sub	sp, #12
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2243      	movs	r2, #67	; 0x43
 800aca4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800aca6:	4b03      	ldr	r3, [pc, #12]	; (800acb4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800aca8:	4618      	mov	r0, r3
 800acaa:	370c      	adds	r7, #12
 800acac:	46bd      	mov	sp, r7
 800acae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb2:	4770      	bx	lr
 800acb4:	20000054 	.word	0x20000054

0800acb8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800acb8:	b480      	push	{r7}
 800acba:	b083      	sub	sp, #12
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2243      	movs	r2, #67	; 0x43
 800acc4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800acc6:	4b03      	ldr	r3, [pc, #12]	; (800acd4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800acc8:	4618      	mov	r0, r3
 800acca:	370c      	adds	r7, #12
 800accc:	46bd      	mov	sp, r7
 800acce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd2:	4770      	bx	lr
 800acd4:	200000dc 	.word	0x200000dc

0800acd8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800acd8:	b480      	push	{r7}
 800acda:	b083      	sub	sp, #12
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	220a      	movs	r2, #10
 800ace4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800ace6:	4b03      	ldr	r3, [pc, #12]	; (800acf4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ace8:	4618      	mov	r0, r3
 800acea:	370c      	adds	r7, #12
 800acec:	46bd      	mov	sp, r7
 800acee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf2:	4770      	bx	lr
 800acf4:	20000010 	.word	0x20000010

0800acf8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800acf8:	b480      	push	{r7}
 800acfa:	b085      	sub	sp, #20
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
 800ad00:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800ad02:	2302      	movs	r3, #2
 800ad04:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d005      	beq.n	800ad18 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	683a      	ldr	r2, [r7, #0]
 800ad10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 800ad14:	2300      	movs	r3, #0
 800ad16:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ad18:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	3714      	adds	r7, #20
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad24:	4770      	bx	lr

0800ad26 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800ad26:	b480      	push	{r7}
 800ad28:	b087      	sub	sp, #28
 800ad2a:	af00      	add	r7, sp, #0
 800ad2c:	60f8      	str	r0, [r7, #12]
 800ad2e:	60b9      	str	r1, [r7, #8]
 800ad30:	4613      	mov	r3, r2
 800ad32:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ad3a:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	68ba      	ldr	r2, [r7, #8]
 800ad40:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ad44:	88fa      	ldrh	r2, [r7, #6]
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800ad4c:	2300      	movs	r3, #0
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	371c      	adds	r7, #28
 800ad52:	46bd      	mov	sp, r7
 800ad54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad58:	4770      	bx	lr

0800ad5a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800ad5a:	b480      	push	{r7}
 800ad5c:	b085      	sub	sp, #20
 800ad5e:	af00      	add	r7, sp, #0
 800ad60:	6078      	str	r0, [r7, #4]
 800ad62:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ad6a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	683a      	ldr	r2, [r7, #0]
 800ad70:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800ad74:	2300      	movs	r3, #0
}
 800ad76:	4618      	mov	r0, r3
 800ad78:	3714      	adds	r7, #20
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad80:	4770      	bx	lr

0800ad82 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ad82:	b580      	push	{r7, lr}
 800ad84:	b084      	sub	sp, #16
 800ad86:	af00      	add	r7, sp, #0
 800ad88:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ad90:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d01c      	beq.n	800add6 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d115      	bne.n	800add2 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	2201      	movs	r2, #1
 800adaa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800adc4:	b29b      	uxth	r3, r3
 800adc6:	2181      	movs	r1, #129	; 0x81
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	f001 fd8e 	bl	800c8ea <USBD_LL_Transmit>

      return USBD_OK;
 800adce:	2300      	movs	r3, #0
 800add0:	e002      	b.n	800add8 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800add2:	2301      	movs	r3, #1
 800add4:	e000      	b.n	800add8 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800add6:	2302      	movs	r3, #2
  }
}
 800add8:	4618      	mov	r0, r3
 800adda:	3710      	adds	r7, #16
 800addc:	46bd      	mov	sp, r7
 800adde:	bd80      	pop	{r7, pc}

0800ade0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b084      	sub	sp, #16
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800adee:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d017      	beq.n	800ae2a <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	7c1b      	ldrb	r3, [r3, #16]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d109      	bne.n	800ae16 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ae08:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae0c:	2101      	movs	r1, #1
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	f001 fd8e 	bl	800c930 <USBD_LL_PrepareReceive>
 800ae14:	e007      	b.n	800ae26 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ae1c:	2340      	movs	r3, #64	; 0x40
 800ae1e:	2101      	movs	r1, #1
 800ae20:	6878      	ldr	r0, [r7, #4]
 800ae22:	f001 fd85 	bl	800c930 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800ae26:	2300      	movs	r3, #0
 800ae28:	e000      	b.n	800ae2c <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800ae2a:	2302      	movs	r3, #2
  }
}
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	3710      	adds	r7, #16
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bd80      	pop	{r7, pc}

0800ae34 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b084      	sub	sp, #16
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	60f8      	str	r0, [r7, #12]
 800ae3c:	60b9      	str	r1, [r7, #8]
 800ae3e:	4613      	mov	r3, r2
 800ae40:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d101      	bne.n	800ae4c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ae48:	2302      	movs	r3, #2
 800ae4a:	e01a      	b.n	800ae82 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d003      	beq.n	800ae5e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	2200      	movs	r2, #0
 800ae5a:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d003      	beq.n	800ae6c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	68ba      	ldr	r2, [r7, #8]
 800ae68:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	2201      	movs	r2, #1
 800ae70:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	79fa      	ldrb	r2, [r7, #7]
 800ae78:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800ae7a:	68f8      	ldr	r0, [r7, #12]
 800ae7c:	f001 fc00 	bl	800c680 <USBD_LL_Init>

  return USBD_OK;
 800ae80:	2300      	movs	r3, #0
}
 800ae82:	4618      	mov	r0, r3
 800ae84:	3710      	adds	r7, #16
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd80      	pop	{r7, pc}

0800ae8a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ae8a:	b480      	push	{r7}
 800ae8c:	b085      	sub	sp, #20
 800ae8e:	af00      	add	r7, sp, #0
 800ae90:	6078      	str	r0, [r7, #4]
 800ae92:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800ae94:	2300      	movs	r3, #0
 800ae96:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d006      	beq.n	800aeac <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	683a      	ldr	r2, [r7, #0]
 800aea2:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800aea6:	2300      	movs	r3, #0
 800aea8:	73fb      	strb	r3, [r7, #15]
 800aeaa:	e001      	b.n	800aeb0 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800aeac:	2302      	movs	r3, #2
 800aeae:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800aeb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	3714      	adds	r7, #20
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebc:	4770      	bx	lr

0800aebe <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800aebe:	b580      	push	{r7, lr}
 800aec0:	b082      	sub	sp, #8
 800aec2:	af00      	add	r7, sp, #0
 800aec4:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f001 fc26 	bl	800c718 <USBD_LL_Start>

  return USBD_OK;
 800aecc:	2300      	movs	r3, #0
}
 800aece:	4618      	mov	r0, r3
 800aed0:	3708      	adds	r7, #8
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}

0800aed6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800aed6:	b480      	push	{r7}
 800aed8:	b083      	sub	sp, #12
 800aeda:	af00      	add	r7, sp, #0
 800aedc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800aede:	2300      	movs	r3, #0
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	370c      	adds	r7, #12
 800aee4:	46bd      	mov	sp, r7
 800aee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeea:	4770      	bx	lr

0800aeec <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b084      	sub	sp, #16
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
 800aef4:	460b      	mov	r3, r1
 800aef6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800aef8:	2302      	movs	r3, #2
 800aefa:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800af02:	2b00      	cmp	r3, #0
 800af04:	d00c      	beq.n	800af20 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	78fa      	ldrb	r2, [r7, #3]
 800af10:	4611      	mov	r1, r2
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	4798      	blx	r3
 800af16:	4603      	mov	r3, r0
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d101      	bne.n	800af20 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800af1c:	2300      	movs	r3, #0
 800af1e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800af20:	7bfb      	ldrb	r3, [r7, #15]
}
 800af22:	4618      	mov	r0, r3
 800af24:	3710      	adds	r7, #16
 800af26:	46bd      	mov	sp, r7
 800af28:	bd80      	pop	{r7, pc}

0800af2a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800af2a:	b580      	push	{r7, lr}
 800af2c:	b082      	sub	sp, #8
 800af2e:	af00      	add	r7, sp, #0
 800af30:	6078      	str	r0, [r7, #4]
 800af32:	460b      	mov	r3, r1
 800af34:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800af3c:	685b      	ldr	r3, [r3, #4]
 800af3e:	78fa      	ldrb	r2, [r7, #3]
 800af40:	4611      	mov	r1, r2
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	4798      	blx	r3
  return USBD_OK;
 800af46:	2300      	movs	r3, #0
}
 800af48:	4618      	mov	r0, r3
 800af4a:	3708      	adds	r7, #8
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}

0800af50 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b082      	sub	sp, #8
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
 800af58:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800af60:	6839      	ldr	r1, [r7, #0]
 800af62:	4618      	mov	r0, r3
 800af64:	f000 fe94 	bl	800bc90 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2201      	movs	r2, #1
 800af6c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800af76:	461a      	mov	r2, r3
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800af84:	f003 031f 	and.w	r3, r3, #31
 800af88:	2b01      	cmp	r3, #1
 800af8a:	d00c      	beq.n	800afa6 <USBD_LL_SetupStage+0x56>
 800af8c:	2b01      	cmp	r3, #1
 800af8e:	d302      	bcc.n	800af96 <USBD_LL_SetupStage+0x46>
 800af90:	2b02      	cmp	r3, #2
 800af92:	d010      	beq.n	800afb6 <USBD_LL_SetupStage+0x66>
 800af94:	e017      	b.n	800afc6 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800af9c:	4619      	mov	r1, r3
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f000 fa04 	bl	800b3ac <USBD_StdDevReq>
    break;
 800afa4:	e01a      	b.n	800afdc <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800afac:	4619      	mov	r1, r3
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	f000 fa66 	bl	800b480 <USBD_StdItfReq>
    break;
 800afb4:	e012      	b.n	800afdc <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800afbc:	4619      	mov	r1, r3
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f000 faa4 	bl	800b50c <USBD_StdEPReq>
    break;
 800afc4:	e00a      	b.n	800afdc <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800afcc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800afd0:	b2db      	uxtb	r3, r3
 800afd2:	4619      	mov	r1, r3
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f001 fbff 	bl	800c7d8 <USBD_LL_StallEP>
    break;
 800afda:	bf00      	nop
  }

  return USBD_OK;
 800afdc:	2300      	movs	r3, #0
}
 800afde:	4618      	mov	r0, r3
 800afe0:	3708      	adds	r7, #8
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd80      	pop	{r7, pc}

0800afe6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800afe6:	b580      	push	{r7, lr}
 800afe8:	b086      	sub	sp, #24
 800afea:	af00      	add	r7, sp, #0
 800afec:	60f8      	str	r0, [r7, #12]
 800afee:	460b      	mov	r3, r1
 800aff0:	607a      	str	r2, [r7, #4]
 800aff2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800aff4:	7afb      	ldrb	r3, [r7, #11]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d14b      	bne.n	800b092 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800b000:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800b008:	2b03      	cmp	r3, #3
 800b00a:	d134      	bne.n	800b076 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	68da      	ldr	r2, [r3, #12]
 800b010:	697b      	ldr	r3, [r7, #20]
 800b012:	691b      	ldr	r3, [r3, #16]
 800b014:	429a      	cmp	r2, r3
 800b016:	d919      	bls.n	800b04c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800b018:	697b      	ldr	r3, [r7, #20]
 800b01a:	68da      	ldr	r2, [r3, #12]
 800b01c:	697b      	ldr	r3, [r7, #20]
 800b01e:	691b      	ldr	r3, [r3, #16]
 800b020:	1ad2      	subs	r2, r2, r3
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b026:	697b      	ldr	r3, [r7, #20]
 800b028:	68da      	ldr	r2, [r3, #12]
 800b02a:	697b      	ldr	r3, [r7, #20]
 800b02c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800b02e:	429a      	cmp	r2, r3
 800b030:	d203      	bcs.n	800b03a <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b032:	697b      	ldr	r3, [r7, #20]
 800b034:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800b036:	b29b      	uxth	r3, r3
 800b038:	e002      	b.n	800b040 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b03a:	697b      	ldr	r3, [r7, #20]
 800b03c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800b03e:	b29b      	uxth	r3, r3
 800b040:	461a      	mov	r2, r3
 800b042:	6879      	ldr	r1, [r7, #4]
 800b044:	68f8      	ldr	r0, [r7, #12]
 800b046:	f000 ff17 	bl	800be78 <USBD_CtlContinueRx>
 800b04a:	e038      	b.n	800b0be <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b052:	691b      	ldr	r3, [r3, #16]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d00a      	beq.n	800b06e <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800b05e:	2b03      	cmp	r3, #3
 800b060:	d105      	bne.n	800b06e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b068:	691b      	ldr	r3, [r3, #16]
 800b06a:	68f8      	ldr	r0, [r7, #12]
 800b06c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800b06e:	68f8      	ldr	r0, [r7, #12]
 800b070:	f000 ff14 	bl	800be9c <USBD_CtlSendStatus>
 800b074:	e023      	b.n	800b0be <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800b07c:	2b05      	cmp	r3, #5
 800b07e:	d11e      	bne.n	800b0be <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	2200      	movs	r2, #0
 800b084:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800b088:	2100      	movs	r1, #0
 800b08a:	68f8      	ldr	r0, [r7, #12]
 800b08c:	f001 fba4 	bl	800c7d8 <USBD_LL_StallEP>
 800b090:	e015      	b.n	800b0be <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b098:	699b      	ldr	r3, [r3, #24]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d00d      	beq.n	800b0ba <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800b0a4:	2b03      	cmp	r3, #3
 800b0a6:	d108      	bne.n	800b0ba <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b0ae:	699b      	ldr	r3, [r3, #24]
 800b0b0:	7afa      	ldrb	r2, [r7, #11]
 800b0b2:	4611      	mov	r1, r2
 800b0b4:	68f8      	ldr	r0, [r7, #12]
 800b0b6:	4798      	blx	r3
 800b0b8:	e001      	b.n	800b0be <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b0ba:	2302      	movs	r3, #2
 800b0bc:	e000      	b.n	800b0c0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800b0be:	2300      	movs	r3, #0
}
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	3718      	adds	r7, #24
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	bd80      	pop	{r7, pc}

0800b0c8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b086      	sub	sp, #24
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	60f8      	str	r0, [r7, #12]
 800b0d0:	460b      	mov	r3, r1
 800b0d2:	607a      	str	r2, [r7, #4]
 800b0d4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800b0d6:	7afb      	ldrb	r3, [r7, #11]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d17f      	bne.n	800b1dc <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	3314      	adds	r3, #20
 800b0e0:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800b0e8:	2b02      	cmp	r3, #2
 800b0ea:	d15c      	bne.n	800b1a6 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800b0ec:	697b      	ldr	r3, [r7, #20]
 800b0ee:	68da      	ldr	r2, [r3, #12]
 800b0f0:	697b      	ldr	r3, [r7, #20]
 800b0f2:	691b      	ldr	r3, [r3, #16]
 800b0f4:	429a      	cmp	r2, r3
 800b0f6:	d915      	bls.n	800b124 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800b0f8:	697b      	ldr	r3, [r7, #20]
 800b0fa:	68da      	ldr	r2, [r3, #12]
 800b0fc:	697b      	ldr	r3, [r7, #20]
 800b0fe:	691b      	ldr	r3, [r3, #16]
 800b100:	1ad2      	subs	r2, r2, r3
 800b102:	697b      	ldr	r3, [r7, #20]
 800b104:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800b106:	697b      	ldr	r3, [r7, #20]
 800b108:	68db      	ldr	r3, [r3, #12]
 800b10a:	b29b      	uxth	r3, r3
 800b10c:	461a      	mov	r2, r3
 800b10e:	6879      	ldr	r1, [r7, #4]
 800b110:	68f8      	ldr	r0, [r7, #12]
 800b112:	f000 fe81 	bl	800be18 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800b116:	2300      	movs	r3, #0
 800b118:	2200      	movs	r2, #0
 800b11a:	2100      	movs	r1, #0
 800b11c:	68f8      	ldr	r0, [r7, #12]
 800b11e:	f001 fc07 	bl	800c930 <USBD_LL_PrepareReceive>
 800b122:	e04e      	b.n	800b1c2 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800b124:	697b      	ldr	r3, [r7, #20]
 800b126:	689b      	ldr	r3, [r3, #8]
 800b128:	697a      	ldr	r2, [r7, #20]
 800b12a:	6912      	ldr	r2, [r2, #16]
 800b12c:	fbb3 f1f2 	udiv	r1, r3, r2
 800b130:	fb02 f201 	mul.w	r2, r2, r1
 800b134:	1a9b      	subs	r3, r3, r2
 800b136:	2b00      	cmp	r3, #0
 800b138:	d11c      	bne.n	800b174 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800b13a:	697b      	ldr	r3, [r7, #20]
 800b13c:	689a      	ldr	r2, [r3, #8]
 800b13e:	697b      	ldr	r3, [r7, #20]
 800b140:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800b142:	429a      	cmp	r2, r3
 800b144:	d316      	bcc.n	800b174 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800b146:	697b      	ldr	r3, [r7, #20]
 800b148:	689a      	ldr	r2, [r3, #8]
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800b150:	429a      	cmp	r2, r3
 800b152:	d20f      	bcs.n	800b174 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b154:	2200      	movs	r2, #0
 800b156:	2100      	movs	r1, #0
 800b158:	68f8      	ldr	r0, [r7, #12]
 800b15a:	f000 fe5d 	bl	800be18 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	2200      	movs	r2, #0
 800b162:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800b166:	2300      	movs	r3, #0
 800b168:	2200      	movs	r2, #0
 800b16a:	2100      	movs	r1, #0
 800b16c:	68f8      	ldr	r0, [r7, #12]
 800b16e:	f001 fbdf 	bl	800c930 <USBD_LL_PrepareReceive>
 800b172:	e026      	b.n	800b1c2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b17a:	68db      	ldr	r3, [r3, #12]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d00a      	beq.n	800b196 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800b186:	2b03      	cmp	r3, #3
 800b188:	d105      	bne.n	800b196 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b190:	68db      	ldr	r3, [r3, #12]
 800b192:	68f8      	ldr	r0, [r7, #12]
 800b194:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800b196:	2180      	movs	r1, #128	; 0x80
 800b198:	68f8      	ldr	r0, [r7, #12]
 800b19a:	f001 fb1d 	bl	800c7d8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b19e:	68f8      	ldr	r0, [r7, #12]
 800b1a0:	f000 fe8f 	bl	800bec2 <USBD_CtlReceiveStatus>
 800b1a4:	e00d      	b.n	800b1c2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800b1ac:	2b04      	cmp	r3, #4
 800b1ae:	d004      	beq.n	800b1ba <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d103      	bne.n	800b1c2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800b1ba:	2180      	movs	r1, #128	; 0x80
 800b1bc:	68f8      	ldr	r0, [r7, #12]
 800b1be:	f001 fb0b 	bl	800c7d8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800b1c8:	2b01      	cmp	r3, #1
 800b1ca:	d11d      	bne.n	800b208 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800b1cc:	68f8      	ldr	r0, [r7, #12]
 800b1ce:	f7ff fe82 	bl	800aed6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800b1da:	e015      	b.n	800b208 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b1e2:	695b      	ldr	r3, [r3, #20]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d00d      	beq.n	800b204 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800b1ee:	2b03      	cmp	r3, #3
 800b1f0:	d108      	bne.n	800b204 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b1f8:	695b      	ldr	r3, [r3, #20]
 800b1fa:	7afa      	ldrb	r2, [r7, #11]
 800b1fc:	4611      	mov	r1, r2
 800b1fe:	68f8      	ldr	r0, [r7, #12]
 800b200:	4798      	blx	r3
 800b202:	e001      	b.n	800b208 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b204:	2302      	movs	r3, #2
 800b206:	e000      	b.n	800b20a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800b208:	2300      	movs	r3, #0
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	3718      	adds	r7, #24
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}

0800b212 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800b212:	b580      	push	{r7, lr}
 800b214:	b082      	sub	sp, #8
 800b216:	af00      	add	r7, sp, #0
 800b218:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b21a:	2340      	movs	r3, #64	; 0x40
 800b21c:	2200      	movs	r2, #0
 800b21e:	2100      	movs	r1, #0
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	f001 fa94 	bl	800c74e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2201      	movs	r2, #1
 800b22a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2240      	movs	r2, #64	; 0x40
 800b232:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b236:	2340      	movs	r3, #64	; 0x40
 800b238:	2200      	movs	r2, #0
 800b23a:	2180      	movs	r1, #128	; 0x80
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f001 fa86 	bl	800c74e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	2201      	movs	r2, #1
 800b246:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2240      	movs	r2, #64	; 0x40
 800b24c:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2201      	movs	r2, #1
 800b252:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	2200      	movs	r2, #0
 800b25a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2200      	movs	r2, #0
 800b262:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2200      	movs	r2, #0
 800b268:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b272:	2b00      	cmp	r3, #0
 800b274:	d009      	beq.n	800b28a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b27c:	685b      	ldr	r3, [r3, #4]
 800b27e:	687a      	ldr	r2, [r7, #4]
 800b280:	6852      	ldr	r2, [r2, #4]
 800b282:	b2d2      	uxtb	r2, r2
 800b284:	4611      	mov	r1, r2
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	4798      	blx	r3
  }

  return USBD_OK;
 800b28a:	2300      	movs	r3, #0
}
 800b28c:	4618      	mov	r0, r3
 800b28e:	3708      	adds	r7, #8
 800b290:	46bd      	mov	sp, r7
 800b292:	bd80      	pop	{r7, pc}

0800b294 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800b294:	b480      	push	{r7}
 800b296:	b083      	sub	sp, #12
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
 800b29c:	460b      	mov	r3, r1
 800b29e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	78fa      	ldrb	r2, [r7, #3]
 800b2a4:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800b2a6:	2300      	movs	r3, #0
}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	370c      	adds	r7, #12
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b2:	4770      	bx	lr

0800b2b4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b083      	sub	sp, #12
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	2204      	movs	r2, #4
 800b2cc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800b2d0:	2300      	movs	r3, #0
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	370c      	adds	r7, #12
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2dc:	4770      	bx	lr

0800b2de <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800b2de:	b480      	push	{r7}
 800b2e0:	b083      	sub	sp, #12
 800b2e2:	af00      	add	r7, sp, #0
 800b2e4:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800b2f2:	2300      	movs	r3, #0
}
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	370c      	adds	r7, #12
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fe:	4770      	bx	lr

0800b300 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b082      	sub	sp, #8
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800b30e:	2b03      	cmp	r3, #3
 800b310:	d10b      	bne.n	800b32a <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b318:	69db      	ldr	r3, [r3, #28]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d005      	beq.n	800b32a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b324:	69db      	ldr	r3, [r3, #28]
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800b32a:	2300      	movs	r3, #0
}
 800b32c:	4618      	mov	r0, r3
 800b32e:	3708      	adds	r7, #8
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}

0800b334 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800b334:	b480      	push	{r7}
 800b336:	b083      	sub	sp, #12
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
 800b33c:	460b      	mov	r3, r1
 800b33e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800b340:	2300      	movs	r3, #0
}
 800b342:	4618      	mov	r0, r3
 800b344:	370c      	adds	r7, #12
 800b346:	46bd      	mov	sp, r7
 800b348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34c:	4770      	bx	lr

0800b34e <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800b34e:	b480      	push	{r7}
 800b350:	b083      	sub	sp, #12
 800b352:	af00      	add	r7, sp, #0
 800b354:	6078      	str	r0, [r7, #4]
 800b356:	460b      	mov	r3, r1
 800b358:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800b35a:	2300      	movs	r3, #0
}
 800b35c:	4618      	mov	r0, r3
 800b35e:	370c      	adds	r7, #12
 800b360:	46bd      	mov	sp, r7
 800b362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b366:	4770      	bx	lr

0800b368 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 800b368:	b480      	push	{r7}
 800b36a:	b083      	sub	sp, #12
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b370:	2300      	movs	r3, #0
}
 800b372:	4618      	mov	r0, r3
 800b374:	370c      	adds	r7, #12
 800b376:	46bd      	mov	sp, r7
 800b378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37c:	4770      	bx	lr

0800b37e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 800b37e:	b580      	push	{r7, lr}
 800b380:	b082      	sub	sp, #8
 800b382:	af00      	add	r7, sp, #0
 800b384:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2201      	movs	r2, #1
 800b38a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b394:	685b      	ldr	r3, [r3, #4]
 800b396:	687a      	ldr	r2, [r7, #4]
 800b398:	6852      	ldr	r2, [r2, #4]
 800b39a:	b2d2      	uxtb	r2, r2
 800b39c:	4611      	mov	r1, r2
 800b39e:	6878      	ldr	r0, [r7, #4]
 800b3a0:	4798      	blx	r3

  return USBD_OK;
 800b3a2:	2300      	movs	r3, #0
}
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	3708      	adds	r7, #8
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	bd80      	pop	{r7, pc}

0800b3ac <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b084      	sub	sp, #16
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
 800b3b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	781b      	ldrb	r3, [r3, #0]
 800b3be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b3c2:	2b20      	cmp	r3, #32
 800b3c4:	d004      	beq.n	800b3d0 <USBD_StdDevReq+0x24>
 800b3c6:	2b40      	cmp	r3, #64	; 0x40
 800b3c8:	d002      	beq.n	800b3d0 <USBD_StdDevReq+0x24>
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d008      	beq.n	800b3e0 <USBD_StdDevReq+0x34>
 800b3ce:	e04c      	b.n	800b46a <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b3d6:	689b      	ldr	r3, [r3, #8]
 800b3d8:	6839      	ldr	r1, [r7, #0]
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	4798      	blx	r3
    break;
 800b3de:	e049      	b.n	800b474 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	785b      	ldrb	r3, [r3, #1]
 800b3e4:	2b09      	cmp	r3, #9
 800b3e6:	d83a      	bhi.n	800b45e <USBD_StdDevReq+0xb2>
 800b3e8:	a201      	add	r2, pc, #4	; (adr r2, 800b3f0 <USBD_StdDevReq+0x44>)
 800b3ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3ee:	bf00      	nop
 800b3f0:	0800b441 	.word	0x0800b441
 800b3f4:	0800b455 	.word	0x0800b455
 800b3f8:	0800b45f 	.word	0x0800b45f
 800b3fc:	0800b44b 	.word	0x0800b44b
 800b400:	0800b45f 	.word	0x0800b45f
 800b404:	0800b423 	.word	0x0800b423
 800b408:	0800b419 	.word	0x0800b419
 800b40c:	0800b45f 	.word	0x0800b45f
 800b410:	0800b437 	.word	0x0800b437
 800b414:	0800b42d 	.word	0x0800b42d
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800b418:	6839      	ldr	r1, [r7, #0]
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f000 f9d2 	bl	800b7c4 <USBD_GetDescriptor>
      break;
 800b420:	e022      	b.n	800b468 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800b422:	6839      	ldr	r1, [r7, #0]
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f000 fac7 	bl	800b9b8 <USBD_SetAddress>
      break;
 800b42a:	e01d      	b.n	800b468 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800b42c:	6839      	ldr	r1, [r7, #0]
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	f000 fb04 	bl	800ba3c <USBD_SetConfig>
      break;
 800b434:	e018      	b.n	800b468 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800b436:	6839      	ldr	r1, [r7, #0]
 800b438:	6878      	ldr	r0, [r7, #4]
 800b43a:	f000 fb8d 	bl	800bb58 <USBD_GetConfig>
      break;
 800b43e:	e013      	b.n	800b468 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800b440:	6839      	ldr	r1, [r7, #0]
 800b442:	6878      	ldr	r0, [r7, #4]
 800b444:	f000 fbbc 	bl	800bbc0 <USBD_GetStatus>
      break;
 800b448:	e00e      	b.n	800b468 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800b44a:	6839      	ldr	r1, [r7, #0]
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f000 fbea 	bl	800bc26 <USBD_SetFeature>
      break;
 800b452:	e009      	b.n	800b468 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800b454:	6839      	ldr	r1, [r7, #0]
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	f000 fbf9 	bl	800bc4e <USBD_ClrFeature>
      break;
 800b45c:	e004      	b.n	800b468 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800b45e:	6839      	ldr	r1, [r7, #0]
 800b460:	6878      	ldr	r0, [r7, #4]
 800b462:	f000 fc52 	bl	800bd0a <USBD_CtlError>
      break;
 800b466:	bf00      	nop
    }
    break;
 800b468:	e004      	b.n	800b474 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800b46a:	6839      	ldr	r1, [r7, #0]
 800b46c:	6878      	ldr	r0, [r7, #4]
 800b46e:	f000 fc4c 	bl	800bd0a <USBD_CtlError>
    break;
 800b472:	bf00      	nop
  }

  return ret;
 800b474:	7bfb      	ldrb	r3, [r7, #15]
}
 800b476:	4618      	mov	r0, r3
 800b478:	3710      	adds	r7, #16
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}
 800b47e:	bf00      	nop

0800b480 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b084      	sub	sp, #16
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
 800b488:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b48a:	2300      	movs	r3, #0
 800b48c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	781b      	ldrb	r3, [r3, #0]
 800b492:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b496:	2b20      	cmp	r3, #32
 800b498:	d003      	beq.n	800b4a2 <USBD_StdItfReq+0x22>
 800b49a:	2b40      	cmp	r3, #64	; 0x40
 800b49c:	d001      	beq.n	800b4a2 <USBD_StdItfReq+0x22>
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d12a      	bne.n	800b4f8 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800b4a8:	3b01      	subs	r3, #1
 800b4aa:	2b02      	cmp	r3, #2
 800b4ac:	d81d      	bhi.n	800b4ea <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	889b      	ldrh	r3, [r3, #4]
 800b4b2:	b2db      	uxtb	r3, r3
 800b4b4:	2b01      	cmp	r3, #1
 800b4b6:	d813      	bhi.n	800b4e0 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b4be:	689b      	ldr	r3, [r3, #8]
 800b4c0:	6839      	ldr	r1, [r7, #0]
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	4798      	blx	r3
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	88db      	ldrh	r3, [r3, #6]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d110      	bne.n	800b4f4 <USBD_StdItfReq+0x74>
 800b4d2:	7bfb      	ldrb	r3, [r7, #15]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d10d      	bne.n	800b4f4 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 800b4d8:	6878      	ldr	r0, [r7, #4]
 800b4da:	f000 fcdf 	bl	800be9c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800b4de:	e009      	b.n	800b4f4 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800b4e0:	6839      	ldr	r1, [r7, #0]
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	f000 fc11 	bl	800bd0a <USBD_CtlError>
      break;
 800b4e8:	e004      	b.n	800b4f4 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800b4ea:	6839      	ldr	r1, [r7, #0]
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	f000 fc0c 	bl	800bd0a <USBD_CtlError>
      break;
 800b4f2:	e000      	b.n	800b4f6 <USBD_StdItfReq+0x76>
      break;
 800b4f4:	bf00      	nop
    }
    break;
 800b4f6:	e004      	b.n	800b502 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800b4f8:	6839      	ldr	r1, [r7, #0]
 800b4fa:	6878      	ldr	r0, [r7, #4]
 800b4fc:	f000 fc05 	bl	800bd0a <USBD_CtlError>
    break;
 800b500:	bf00      	nop
  }

  return USBD_OK;
 800b502:	2300      	movs	r3, #0
}
 800b504:	4618      	mov	r0, r3
 800b506:	3710      	adds	r7, #16
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}

0800b50c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b084      	sub	sp, #16
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
 800b514:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b516:	2300      	movs	r3, #0
 800b518:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	889b      	ldrh	r3, [r3, #4]
 800b51e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b520:	683b      	ldr	r3, [r7, #0]
 800b522:	781b      	ldrb	r3, [r3, #0]
 800b524:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b528:	2b20      	cmp	r3, #32
 800b52a:	d004      	beq.n	800b536 <USBD_StdEPReq+0x2a>
 800b52c:	2b40      	cmp	r3, #64	; 0x40
 800b52e:	d002      	beq.n	800b536 <USBD_StdEPReq+0x2a>
 800b530:	2b00      	cmp	r3, #0
 800b532:	d008      	beq.n	800b546 <USBD_StdEPReq+0x3a>
 800b534:	e13b      	b.n	800b7ae <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b53c:	689b      	ldr	r3, [r3, #8]
 800b53e:	6839      	ldr	r1, [r7, #0]
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	4798      	blx	r3
    break;
 800b544:	e138      	b.n	800b7b8 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	781b      	ldrb	r3, [r3, #0]
 800b54a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b54e:	2b20      	cmp	r3, #32
 800b550:	d10a      	bne.n	800b568 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b558:	689b      	ldr	r3, [r3, #8]
 800b55a:	6839      	ldr	r1, [r7, #0]
 800b55c:	6878      	ldr	r0, [r7, #4]
 800b55e:	4798      	blx	r3
 800b560:	4603      	mov	r3, r0
 800b562:	73fb      	strb	r3, [r7, #15]

      return ret;
 800b564:	7bfb      	ldrb	r3, [r7, #15]
 800b566:	e128      	b.n	800b7ba <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	785b      	ldrb	r3, [r3, #1]
 800b56c:	2b01      	cmp	r3, #1
 800b56e:	d03e      	beq.n	800b5ee <USBD_StdEPReq+0xe2>
 800b570:	2b03      	cmp	r3, #3
 800b572:	d002      	beq.n	800b57a <USBD_StdEPReq+0x6e>
 800b574:	2b00      	cmp	r3, #0
 800b576:	d070      	beq.n	800b65a <USBD_StdEPReq+0x14e>
 800b578:	e113      	b.n	800b7a2 <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800b580:	2b02      	cmp	r3, #2
 800b582:	d002      	beq.n	800b58a <USBD_StdEPReq+0x7e>
 800b584:	2b03      	cmp	r3, #3
 800b586:	d015      	beq.n	800b5b4 <USBD_StdEPReq+0xa8>
 800b588:	e02b      	b.n	800b5e2 <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b58a:	7bbb      	ldrb	r3, [r7, #14]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d00c      	beq.n	800b5aa <USBD_StdEPReq+0x9e>
 800b590:	7bbb      	ldrb	r3, [r7, #14]
 800b592:	2b80      	cmp	r3, #128	; 0x80
 800b594:	d009      	beq.n	800b5aa <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800b596:	7bbb      	ldrb	r3, [r7, #14]
 800b598:	4619      	mov	r1, r3
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f001 f91c 	bl	800c7d8 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800b5a0:	2180      	movs	r1, #128	; 0x80
 800b5a2:	6878      	ldr	r0, [r7, #4]
 800b5a4:	f001 f918 	bl	800c7d8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800b5a8:	e020      	b.n	800b5ec <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 800b5aa:	6839      	ldr	r1, [r7, #0]
 800b5ac:	6878      	ldr	r0, [r7, #4]
 800b5ae:	f000 fbac 	bl	800bd0a <USBD_CtlError>
        break;
 800b5b2:	e01b      	b.n	800b5ec <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	885b      	ldrh	r3, [r3, #2]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d10e      	bne.n	800b5da <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b5bc:	7bbb      	ldrb	r3, [r7, #14]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d00b      	beq.n	800b5da <USBD_StdEPReq+0xce>
 800b5c2:	7bbb      	ldrb	r3, [r7, #14]
 800b5c4:	2b80      	cmp	r3, #128	; 0x80
 800b5c6:	d008      	beq.n	800b5da <USBD_StdEPReq+0xce>
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	88db      	ldrh	r3, [r3, #6]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d104      	bne.n	800b5da <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800b5d0:	7bbb      	ldrb	r3, [r7, #14]
 800b5d2:	4619      	mov	r1, r3
 800b5d4:	6878      	ldr	r0, [r7, #4]
 800b5d6:	f001 f8ff 	bl	800c7d8 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f000 fc5e 	bl	800be9c <USBD_CtlSendStatus>

        break;
 800b5e0:	e004      	b.n	800b5ec <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 800b5e2:	6839      	ldr	r1, [r7, #0]
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	f000 fb90 	bl	800bd0a <USBD_CtlError>
        break;
 800b5ea:	bf00      	nop
      }
      break;
 800b5ec:	e0de      	b.n	800b7ac <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800b5f4:	2b02      	cmp	r3, #2
 800b5f6:	d002      	beq.n	800b5fe <USBD_StdEPReq+0xf2>
 800b5f8:	2b03      	cmp	r3, #3
 800b5fa:	d015      	beq.n	800b628 <USBD_StdEPReq+0x11c>
 800b5fc:	e026      	b.n	800b64c <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b5fe:	7bbb      	ldrb	r3, [r7, #14]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d00c      	beq.n	800b61e <USBD_StdEPReq+0x112>
 800b604:	7bbb      	ldrb	r3, [r7, #14]
 800b606:	2b80      	cmp	r3, #128	; 0x80
 800b608:	d009      	beq.n	800b61e <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800b60a:	7bbb      	ldrb	r3, [r7, #14]
 800b60c:	4619      	mov	r1, r3
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f001 f8e2 	bl	800c7d8 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800b614:	2180      	movs	r1, #128	; 0x80
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f001 f8de 	bl	800c7d8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800b61c:	e01c      	b.n	800b658 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800b61e:	6839      	ldr	r1, [r7, #0]
 800b620:	6878      	ldr	r0, [r7, #4]
 800b622:	f000 fb72 	bl	800bd0a <USBD_CtlError>
        break;
 800b626:	e017      	b.n	800b658 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	885b      	ldrh	r3, [r3, #2]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d112      	bne.n	800b656 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800b630:	7bbb      	ldrb	r3, [r7, #14]
 800b632:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b636:	2b00      	cmp	r3, #0
 800b638:	d004      	beq.n	800b644 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800b63a:	7bbb      	ldrb	r3, [r7, #14]
 800b63c:	4619      	mov	r1, r3
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f001 f8e9 	bl	800c816 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f000 fc29 	bl	800be9c <USBD_CtlSendStatus>
        }
        break;
 800b64a:	e004      	b.n	800b656 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800b64c:	6839      	ldr	r1, [r7, #0]
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f000 fb5b 	bl	800bd0a <USBD_CtlError>
        break;
 800b654:	e000      	b.n	800b658 <USBD_StdEPReq+0x14c>
        break;
 800b656:	bf00      	nop
      }
      break;
 800b658:	e0a8      	b.n	800b7ac <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800b660:	2b02      	cmp	r3, #2
 800b662:	d002      	beq.n	800b66a <USBD_StdEPReq+0x15e>
 800b664:	2b03      	cmp	r3, #3
 800b666:	d031      	beq.n	800b6cc <USBD_StdEPReq+0x1c0>
 800b668:	e095      	b.n	800b796 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b66a:	7bbb      	ldrb	r3, [r7, #14]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d007      	beq.n	800b680 <USBD_StdEPReq+0x174>
 800b670:	7bbb      	ldrb	r3, [r7, #14]
 800b672:	2b80      	cmp	r3, #128	; 0x80
 800b674:	d004      	beq.n	800b680 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800b676:	6839      	ldr	r1, [r7, #0]
 800b678:	6878      	ldr	r0, [r7, #4]
 800b67a:	f000 fb46 	bl	800bd0a <USBD_CtlError>
          break;
 800b67e:	e08f      	b.n	800b7a0 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800b680:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b684:	2b00      	cmp	r3, #0
 800b686:	da0b      	bge.n	800b6a0 <USBD_StdEPReq+0x194>
 800b688:	7bbb      	ldrb	r3, [r7, #14]
 800b68a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b68e:	4613      	mov	r3, r2
 800b690:	009b      	lsls	r3, r3, #2
 800b692:	4413      	add	r3, r2
 800b694:	009b      	lsls	r3, r3, #2
 800b696:	3310      	adds	r3, #16
 800b698:	687a      	ldr	r2, [r7, #4]
 800b69a:	4413      	add	r3, r2
 800b69c:	3304      	adds	r3, #4
 800b69e:	e00a      	b.n	800b6b6 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 800b6a0:	7bbb      	ldrb	r3, [r7, #14]
 800b6a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800b6a6:	4613      	mov	r3, r2
 800b6a8:	009b      	lsls	r3, r3, #2
 800b6aa:	4413      	add	r3, r2
 800b6ac:	009b      	lsls	r3, r3, #2
 800b6ae:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800b6b2:	687a      	ldr	r2, [r7, #4]
 800b6b4:	4413      	add	r3, r2
 800b6b6:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b6be:	68bb      	ldr	r3, [r7, #8]
 800b6c0:	2202      	movs	r2, #2
 800b6c2:	4619      	mov	r1, r3
 800b6c4:	6878      	ldr	r0, [r7, #4]
 800b6c6:	f000 fb8b 	bl	800bde0 <USBD_CtlSendData>
          break;
 800b6ca:	e069      	b.n	800b7a0 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800b6cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	da11      	bge.n	800b6f8 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b6d4:	7bbb      	ldrb	r3, [r7, #14]
 800b6d6:	f003 020f 	and.w	r2, r3, #15
 800b6da:	6879      	ldr	r1, [r7, #4]
 800b6dc:	4613      	mov	r3, r2
 800b6de:	009b      	lsls	r3, r3, #2
 800b6e0:	4413      	add	r3, r2
 800b6e2:	009b      	lsls	r3, r3, #2
 800b6e4:	440b      	add	r3, r1
 800b6e6:	3318      	adds	r3, #24
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d117      	bne.n	800b71e <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800b6ee:	6839      	ldr	r1, [r7, #0]
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	f000 fb0a 	bl	800bd0a <USBD_CtlError>
            break;
 800b6f6:	e053      	b.n	800b7a0 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b6f8:	7bbb      	ldrb	r3, [r7, #14]
 800b6fa:	f003 020f 	and.w	r2, r3, #15
 800b6fe:	6879      	ldr	r1, [r7, #4]
 800b700:	4613      	mov	r3, r2
 800b702:	009b      	lsls	r3, r3, #2
 800b704:	4413      	add	r3, r2
 800b706:	009b      	lsls	r3, r3, #2
 800b708:	440b      	add	r3, r1
 800b70a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d104      	bne.n	800b71e <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800b714:	6839      	ldr	r1, [r7, #0]
 800b716:	6878      	ldr	r0, [r7, #4]
 800b718:	f000 faf7 	bl	800bd0a <USBD_CtlError>
            break;
 800b71c:	e040      	b.n	800b7a0 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800b71e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b722:	2b00      	cmp	r3, #0
 800b724:	da0b      	bge.n	800b73e <USBD_StdEPReq+0x232>
 800b726:	7bbb      	ldrb	r3, [r7, #14]
 800b728:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b72c:	4613      	mov	r3, r2
 800b72e:	009b      	lsls	r3, r3, #2
 800b730:	4413      	add	r3, r2
 800b732:	009b      	lsls	r3, r3, #2
 800b734:	3310      	adds	r3, #16
 800b736:	687a      	ldr	r2, [r7, #4]
 800b738:	4413      	add	r3, r2
 800b73a:	3304      	adds	r3, #4
 800b73c:	e00a      	b.n	800b754 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 800b73e:	7bbb      	ldrb	r3, [r7, #14]
 800b740:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800b744:	4613      	mov	r3, r2
 800b746:	009b      	lsls	r3, r3, #2
 800b748:	4413      	add	r3, r2
 800b74a:	009b      	lsls	r3, r3, #2
 800b74c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800b750:	687a      	ldr	r2, [r7, #4]
 800b752:	4413      	add	r3, r2
 800b754:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b756:	7bbb      	ldrb	r3, [r7, #14]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d002      	beq.n	800b762 <USBD_StdEPReq+0x256>
 800b75c:	7bbb      	ldrb	r3, [r7, #14]
 800b75e:	2b80      	cmp	r3, #128	; 0x80
 800b760:	d103      	bne.n	800b76a <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 800b762:	68bb      	ldr	r3, [r7, #8]
 800b764:	2200      	movs	r2, #0
 800b766:	601a      	str	r2, [r3, #0]
 800b768:	e00e      	b.n	800b788 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800b76a:	7bbb      	ldrb	r3, [r7, #14]
 800b76c:	4619      	mov	r1, r3
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f001 f870 	bl	800c854 <USBD_LL_IsStallEP>
 800b774:	4603      	mov	r3, r0
 800b776:	2b00      	cmp	r3, #0
 800b778:	d003      	beq.n	800b782 <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	2201      	movs	r2, #1
 800b77e:	601a      	str	r2, [r3, #0]
 800b780:	e002      	b.n	800b788 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	2200      	movs	r2, #0
 800b786:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b788:	68bb      	ldr	r3, [r7, #8]
 800b78a:	2202      	movs	r2, #2
 800b78c:	4619      	mov	r1, r3
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f000 fb26 	bl	800bde0 <USBD_CtlSendData>
          break;
 800b794:	e004      	b.n	800b7a0 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 800b796:	6839      	ldr	r1, [r7, #0]
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f000 fab6 	bl	800bd0a <USBD_CtlError>
        break;
 800b79e:	bf00      	nop
      }
      break;
 800b7a0:	e004      	b.n	800b7ac <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 800b7a2:	6839      	ldr	r1, [r7, #0]
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	f000 fab0 	bl	800bd0a <USBD_CtlError>
      break;
 800b7aa:	bf00      	nop
    }
    break;
 800b7ac:	e004      	b.n	800b7b8 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 800b7ae:	6839      	ldr	r1, [r7, #0]
 800b7b0:	6878      	ldr	r0, [r7, #4]
 800b7b2:	f000 faaa 	bl	800bd0a <USBD_CtlError>
    break;
 800b7b6:	bf00      	nop
  }

  return ret;
 800b7b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	3710      	adds	r7, #16
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}
	...

0800b7c4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b084      	sub	sp, #16
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
 800b7cc:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800b7ce:	683b      	ldr	r3, [r7, #0]
 800b7d0:	885b      	ldrh	r3, [r3, #2]
 800b7d2:	0a1b      	lsrs	r3, r3, #8
 800b7d4:	b29b      	uxth	r3, r3
 800b7d6:	3b01      	subs	r3, #1
 800b7d8:	2b06      	cmp	r3, #6
 800b7da:	f200 80c9 	bhi.w	800b970 <USBD_GetDescriptor+0x1ac>
 800b7de:	a201      	add	r2, pc, #4	; (adr r2, 800b7e4 <USBD_GetDescriptor+0x20>)
 800b7e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7e4:	0800b801 	.word	0x0800b801
 800b7e8:	0800b819 	.word	0x0800b819
 800b7ec:	0800b859 	.word	0x0800b859
 800b7f0:	0800b971 	.word	0x0800b971
 800b7f4:	0800b971 	.word	0x0800b971
 800b7f8:	0800b91d 	.word	0x0800b91d
 800b7fc:	0800b943 	.word	0x0800b943
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	687a      	ldr	r2, [r7, #4]
 800b80a:	7c12      	ldrb	r2, [r2, #16]
 800b80c:	f107 010a 	add.w	r1, r7, #10
 800b810:	4610      	mov	r0, r2
 800b812:	4798      	blx	r3
 800b814:	60f8      	str	r0, [r7, #12]
    break;
 800b816:	e0b0      	b.n	800b97a <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	7c1b      	ldrb	r3, [r3, #16]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d10d      	bne.n	800b83c <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b828:	f107 020a 	add.w	r2, r7, #10
 800b82c:	4610      	mov	r0, r2
 800b82e:	4798      	blx	r3
 800b830:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	3301      	adds	r3, #1
 800b836:	2202      	movs	r2, #2
 800b838:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800b83a:	e09e      	b.n	800b97a <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b844:	f107 020a 	add.w	r2, r7, #10
 800b848:	4610      	mov	r0, r2
 800b84a:	4798      	blx	r3
 800b84c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	3301      	adds	r3, #1
 800b852:	2202      	movs	r2, #2
 800b854:	701a      	strb	r2, [r3, #0]
    break;
 800b856:	e090      	b.n	800b97a <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	885b      	ldrh	r3, [r3, #2]
 800b85c:	b2db      	uxtb	r3, r3
 800b85e:	2b05      	cmp	r3, #5
 800b860:	d856      	bhi.n	800b910 <USBD_GetDescriptor+0x14c>
 800b862:	a201      	add	r2, pc, #4	; (adr r2, 800b868 <USBD_GetDescriptor+0xa4>)
 800b864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b868:	0800b881 	.word	0x0800b881
 800b86c:	0800b899 	.word	0x0800b899
 800b870:	0800b8b1 	.word	0x0800b8b1
 800b874:	0800b8c9 	.word	0x0800b8c9
 800b878:	0800b8e1 	.word	0x0800b8e1
 800b87c:	0800b8f9 	.word	0x0800b8f9
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800b886:	685b      	ldr	r3, [r3, #4]
 800b888:	687a      	ldr	r2, [r7, #4]
 800b88a:	7c12      	ldrb	r2, [r2, #16]
 800b88c:	f107 010a 	add.w	r1, r7, #10
 800b890:	4610      	mov	r0, r2
 800b892:	4798      	blx	r3
 800b894:	60f8      	str	r0, [r7, #12]
      break;
 800b896:	e040      	b.n	800b91a <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800b89e:	689b      	ldr	r3, [r3, #8]
 800b8a0:	687a      	ldr	r2, [r7, #4]
 800b8a2:	7c12      	ldrb	r2, [r2, #16]
 800b8a4:	f107 010a 	add.w	r1, r7, #10
 800b8a8:	4610      	mov	r0, r2
 800b8aa:	4798      	blx	r3
 800b8ac:	60f8      	str	r0, [r7, #12]
      break;
 800b8ae:	e034      	b.n	800b91a <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800b8b6:	68db      	ldr	r3, [r3, #12]
 800b8b8:	687a      	ldr	r2, [r7, #4]
 800b8ba:	7c12      	ldrb	r2, [r2, #16]
 800b8bc:	f107 010a 	add.w	r1, r7, #10
 800b8c0:	4610      	mov	r0, r2
 800b8c2:	4798      	blx	r3
 800b8c4:	60f8      	str	r0, [r7, #12]
      break;
 800b8c6:	e028      	b.n	800b91a <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800b8ce:	691b      	ldr	r3, [r3, #16]
 800b8d0:	687a      	ldr	r2, [r7, #4]
 800b8d2:	7c12      	ldrb	r2, [r2, #16]
 800b8d4:	f107 010a 	add.w	r1, r7, #10
 800b8d8:	4610      	mov	r0, r2
 800b8da:	4798      	blx	r3
 800b8dc:	60f8      	str	r0, [r7, #12]
      break;
 800b8de:	e01c      	b.n	800b91a <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800b8e6:	695b      	ldr	r3, [r3, #20]
 800b8e8:	687a      	ldr	r2, [r7, #4]
 800b8ea:	7c12      	ldrb	r2, [r2, #16]
 800b8ec:	f107 010a 	add.w	r1, r7, #10
 800b8f0:	4610      	mov	r0, r2
 800b8f2:	4798      	blx	r3
 800b8f4:	60f8      	str	r0, [r7, #12]
      break;
 800b8f6:	e010      	b.n	800b91a <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800b8fe:	699b      	ldr	r3, [r3, #24]
 800b900:	687a      	ldr	r2, [r7, #4]
 800b902:	7c12      	ldrb	r2, [r2, #16]
 800b904:	f107 010a 	add.w	r1, r7, #10
 800b908:	4610      	mov	r0, r2
 800b90a:	4798      	blx	r3
 800b90c:	60f8      	str	r0, [r7, #12]
      break;
 800b90e:	e004      	b.n	800b91a <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800b910:	6839      	ldr	r1, [r7, #0]
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f000 f9f9 	bl	800bd0a <USBD_CtlError>
      return;
 800b918:	e04b      	b.n	800b9b2 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800b91a:	e02e      	b.n	800b97a <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	7c1b      	ldrb	r3, [r3, #16]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d109      	bne.n	800b938 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b92a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b92c:	f107 020a 	add.w	r2, r7, #10
 800b930:	4610      	mov	r0, r2
 800b932:	4798      	blx	r3
 800b934:	60f8      	str	r0, [r7, #12]
      break;
 800b936:	e020      	b.n	800b97a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800b938:	6839      	ldr	r1, [r7, #0]
 800b93a:	6878      	ldr	r0, [r7, #4]
 800b93c:	f000 f9e5 	bl	800bd0a <USBD_CtlError>
      return;
 800b940:	e037      	b.n	800b9b2 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	7c1b      	ldrb	r3, [r3, #16]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d10d      	bne.n	800b966 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b952:	f107 020a 	add.w	r2, r7, #10
 800b956:	4610      	mov	r0, r2
 800b958:	4798      	blx	r3
 800b95a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	3301      	adds	r3, #1
 800b960:	2207      	movs	r2, #7
 800b962:	701a      	strb	r2, [r3, #0]
      break;
 800b964:	e009      	b.n	800b97a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800b966:	6839      	ldr	r1, [r7, #0]
 800b968:	6878      	ldr	r0, [r7, #4]
 800b96a:	f000 f9ce 	bl	800bd0a <USBD_CtlError>
      return;
 800b96e:	e020      	b.n	800b9b2 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 800b970:	6839      	ldr	r1, [r7, #0]
 800b972:	6878      	ldr	r0, [r7, #4]
 800b974:	f000 f9c9 	bl	800bd0a <USBD_CtlError>
    return;
 800b978:	e01b      	b.n	800b9b2 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800b97a:	897b      	ldrh	r3, [r7, #10]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d011      	beq.n	800b9a4 <USBD_GetDescriptor+0x1e0>
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	88db      	ldrh	r3, [r3, #6]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d00d      	beq.n	800b9a4 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	88da      	ldrh	r2, [r3, #6]
 800b98c:	897b      	ldrh	r3, [r7, #10]
 800b98e:	4293      	cmp	r3, r2
 800b990:	bf28      	it	cs
 800b992:	4613      	movcs	r3, r2
 800b994:	b29b      	uxth	r3, r3
 800b996:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800b998:	897b      	ldrh	r3, [r7, #10]
 800b99a:	461a      	mov	r2, r3
 800b99c:	68f9      	ldr	r1, [r7, #12]
 800b99e:	6878      	ldr	r0, [r7, #4]
 800b9a0:	f000 fa1e 	bl	800bde0 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	88db      	ldrh	r3, [r3, #6]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d102      	bne.n	800b9b2 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800b9ac:	6878      	ldr	r0, [r7, #4]
 800b9ae:	f000 fa75 	bl	800be9c <USBD_CtlSendStatus>
  }
}
 800b9b2:	3710      	adds	r7, #16
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	bd80      	pop	{r7, pc}

0800b9b8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b084      	sub	sp, #16
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
 800b9c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	889b      	ldrh	r3, [r3, #4]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d130      	bne.n	800ba2c <USBD_SetAddress+0x74>
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	88db      	ldrh	r3, [r3, #6]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d12c      	bne.n	800ba2c <USBD_SetAddress+0x74>
 800b9d2:	683b      	ldr	r3, [r7, #0]
 800b9d4:	885b      	ldrh	r3, [r3, #2]
 800b9d6:	2b7f      	cmp	r3, #127	; 0x7f
 800b9d8:	d828      	bhi.n	800ba2c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b9da:	683b      	ldr	r3, [r7, #0]
 800b9dc:	885b      	ldrh	r3, [r3, #2]
 800b9de:	b2db      	uxtb	r3, r3
 800b9e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9e4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800b9ec:	2b03      	cmp	r3, #3
 800b9ee:	d104      	bne.n	800b9fa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800b9f0:	6839      	ldr	r1, [r7, #0]
 800b9f2:	6878      	ldr	r0, [r7, #4]
 800b9f4:	f000 f989 	bl	800bd0a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9f8:	e01c      	b.n	800ba34 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	7bfa      	ldrb	r2, [r7, #15]
 800b9fe:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ba02:	7bfb      	ldrb	r3, [r7, #15]
 800ba04:	4619      	mov	r1, r3
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f000 ff50 	bl	800c8ac <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800ba0c:	6878      	ldr	r0, [r7, #4]
 800ba0e:	f000 fa45 	bl	800be9c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ba12:	7bfb      	ldrb	r3, [r7, #15]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d004      	beq.n	800ba22 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2202      	movs	r2, #2
 800ba1c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba20:	e008      	b.n	800ba34 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	2201      	movs	r2, #1
 800ba26:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba2a:	e003      	b.n	800ba34 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ba2c:	6839      	ldr	r1, [r7, #0]
 800ba2e:	6878      	ldr	r0, [r7, #4]
 800ba30:	f000 f96b 	bl	800bd0a <USBD_CtlError>
  }
}
 800ba34:	bf00      	nop
 800ba36:	3710      	adds	r7, #16
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd80      	pop	{r7, pc}

0800ba3c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b082      	sub	sp, #8
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
 800ba44:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	885b      	ldrh	r3, [r3, #2]
 800ba4a:	b2da      	uxtb	r2, r3
 800ba4c:	4b41      	ldr	r3, [pc, #260]	; (800bb54 <USBD_SetConfig+0x118>)
 800ba4e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ba50:	4b40      	ldr	r3, [pc, #256]	; (800bb54 <USBD_SetConfig+0x118>)
 800ba52:	781b      	ldrb	r3, [r3, #0]
 800ba54:	2b01      	cmp	r3, #1
 800ba56:	d904      	bls.n	800ba62 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800ba58:	6839      	ldr	r1, [r7, #0]
 800ba5a:	6878      	ldr	r0, [r7, #4]
 800ba5c:	f000 f955 	bl	800bd0a <USBD_CtlError>
 800ba60:	e075      	b.n	800bb4e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ba68:	2b02      	cmp	r3, #2
 800ba6a:	d002      	beq.n	800ba72 <USBD_SetConfig+0x36>
 800ba6c:	2b03      	cmp	r3, #3
 800ba6e:	d023      	beq.n	800bab8 <USBD_SetConfig+0x7c>
 800ba70:	e062      	b.n	800bb38 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800ba72:	4b38      	ldr	r3, [pc, #224]	; (800bb54 <USBD_SetConfig+0x118>)
 800ba74:	781b      	ldrb	r3, [r3, #0]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d01a      	beq.n	800bab0 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800ba7a:	4b36      	ldr	r3, [pc, #216]	; (800bb54 <USBD_SetConfig+0x118>)
 800ba7c:	781b      	ldrb	r3, [r3, #0]
 800ba7e:	461a      	mov	r2, r3
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2203      	movs	r2, #3
 800ba88:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ba8c:	4b31      	ldr	r3, [pc, #196]	; (800bb54 <USBD_SetConfig+0x118>)
 800ba8e:	781b      	ldrb	r3, [r3, #0]
 800ba90:	4619      	mov	r1, r3
 800ba92:	6878      	ldr	r0, [r7, #4]
 800ba94:	f7ff fa2a 	bl	800aeec <USBD_SetClassConfig>
 800ba98:	4603      	mov	r3, r0
 800ba9a:	2b02      	cmp	r3, #2
 800ba9c:	d104      	bne.n	800baa8 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800ba9e:	6839      	ldr	r1, [r7, #0]
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	f000 f932 	bl	800bd0a <USBD_CtlError>
          return;
 800baa6:	e052      	b.n	800bb4e <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800baa8:	6878      	ldr	r0, [r7, #4]
 800baaa:	f000 f9f7 	bl	800be9c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800baae:	e04e      	b.n	800bb4e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	f000 f9f3 	bl	800be9c <USBD_CtlSendStatus>
      break;
 800bab6:	e04a      	b.n	800bb4e <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bab8:	4b26      	ldr	r3, [pc, #152]	; (800bb54 <USBD_SetConfig+0x118>)
 800baba:	781b      	ldrb	r3, [r3, #0]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d112      	bne.n	800bae6 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2202      	movs	r2, #2
 800bac4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800bac8:	4b22      	ldr	r3, [pc, #136]	; (800bb54 <USBD_SetConfig+0x118>)
 800baca:	781b      	ldrb	r3, [r3, #0]
 800bacc:	461a      	mov	r2, r3
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800bad2:	4b20      	ldr	r3, [pc, #128]	; (800bb54 <USBD_SetConfig+0x118>)
 800bad4:	781b      	ldrb	r3, [r3, #0]
 800bad6:	4619      	mov	r1, r3
 800bad8:	6878      	ldr	r0, [r7, #4]
 800bada:	f7ff fa26 	bl	800af2a <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800bade:	6878      	ldr	r0, [r7, #4]
 800bae0:	f000 f9dc 	bl	800be9c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800bae4:	e033      	b.n	800bb4e <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800bae6:	4b1b      	ldr	r3, [pc, #108]	; (800bb54 <USBD_SetConfig+0x118>)
 800bae8:	781b      	ldrb	r3, [r3, #0]
 800baea:	461a      	mov	r2, r3
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	685b      	ldr	r3, [r3, #4]
 800baf0:	429a      	cmp	r2, r3
 800baf2:	d01d      	beq.n	800bb30 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	685b      	ldr	r3, [r3, #4]
 800baf8:	b2db      	uxtb	r3, r3
 800bafa:	4619      	mov	r1, r3
 800bafc:	6878      	ldr	r0, [r7, #4]
 800bafe:	f7ff fa14 	bl	800af2a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bb02:	4b14      	ldr	r3, [pc, #80]	; (800bb54 <USBD_SetConfig+0x118>)
 800bb04:	781b      	ldrb	r3, [r3, #0]
 800bb06:	461a      	mov	r2, r3
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800bb0c:	4b11      	ldr	r3, [pc, #68]	; (800bb54 <USBD_SetConfig+0x118>)
 800bb0e:	781b      	ldrb	r3, [r3, #0]
 800bb10:	4619      	mov	r1, r3
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f7ff f9ea 	bl	800aeec <USBD_SetClassConfig>
 800bb18:	4603      	mov	r3, r0
 800bb1a:	2b02      	cmp	r3, #2
 800bb1c:	d104      	bne.n	800bb28 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800bb1e:	6839      	ldr	r1, [r7, #0]
 800bb20:	6878      	ldr	r0, [r7, #4]
 800bb22:	f000 f8f2 	bl	800bd0a <USBD_CtlError>
          return;
 800bb26:	e012      	b.n	800bb4e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800bb28:	6878      	ldr	r0, [r7, #4]
 800bb2a:	f000 f9b7 	bl	800be9c <USBD_CtlSendStatus>
      break;
 800bb2e:	e00e      	b.n	800bb4e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	f000 f9b3 	bl	800be9c <USBD_CtlSendStatus>
      break;
 800bb36:	e00a      	b.n	800bb4e <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800bb38:	6839      	ldr	r1, [r7, #0]
 800bb3a:	6878      	ldr	r0, [r7, #4]
 800bb3c:	f000 f8e5 	bl	800bd0a <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800bb40:	4b04      	ldr	r3, [pc, #16]	; (800bb54 <USBD_SetConfig+0x118>)
 800bb42:	781b      	ldrb	r3, [r3, #0]
 800bb44:	4619      	mov	r1, r3
 800bb46:	6878      	ldr	r0, [r7, #4]
 800bb48:	f7ff f9ef 	bl	800af2a <USBD_ClrClassConfig>
      break;
 800bb4c:	bf00      	nop
    }
  }
}
 800bb4e:	3708      	adds	r7, #8
 800bb50:	46bd      	mov	sp, r7
 800bb52:	bd80      	pop	{r7, pc}
 800bb54:	20000578 	.word	0x20000578

0800bb58 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b082      	sub	sp, #8
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
 800bb60:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	88db      	ldrh	r3, [r3, #6]
 800bb66:	2b01      	cmp	r3, #1
 800bb68:	d004      	beq.n	800bb74 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800bb6a:	6839      	ldr	r1, [r7, #0]
 800bb6c:	6878      	ldr	r0, [r7, #4]
 800bb6e:	f000 f8cc 	bl	800bd0a <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800bb72:	e021      	b.n	800bbb8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800bb7a:	2b01      	cmp	r3, #1
 800bb7c:	db17      	blt.n	800bbae <USBD_GetConfig+0x56>
 800bb7e:	2b02      	cmp	r3, #2
 800bb80:	dd02      	ble.n	800bb88 <USBD_GetConfig+0x30>
 800bb82:	2b03      	cmp	r3, #3
 800bb84:	d00b      	beq.n	800bb9e <USBD_GetConfig+0x46>
 800bb86:	e012      	b.n	800bbae <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	3308      	adds	r3, #8
 800bb92:	2201      	movs	r2, #1
 800bb94:	4619      	mov	r1, r3
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f000 f922 	bl	800bde0 <USBD_CtlSendData>
      break;
 800bb9c:	e00c      	b.n	800bbb8 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	3304      	adds	r3, #4
 800bba2:	2201      	movs	r2, #1
 800bba4:	4619      	mov	r1, r3
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	f000 f91a 	bl	800bde0 <USBD_CtlSendData>
      break;
 800bbac:	e004      	b.n	800bbb8 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 800bbae:	6839      	ldr	r1, [r7, #0]
 800bbb0:	6878      	ldr	r0, [r7, #4]
 800bbb2:	f000 f8aa 	bl	800bd0a <USBD_CtlError>
      break;
 800bbb6:	bf00      	nop
}
 800bbb8:	bf00      	nop
 800bbba:	3708      	adds	r7, #8
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	bd80      	pop	{r7, pc}

0800bbc0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b082      	sub	sp, #8
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
 800bbc8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800bbd0:	3b01      	subs	r3, #1
 800bbd2:	2b02      	cmp	r3, #2
 800bbd4:	d81e      	bhi.n	800bc14 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	88db      	ldrh	r3, [r3, #6]
 800bbda:	2b02      	cmp	r3, #2
 800bbdc:	d004      	beq.n	800bbe8 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800bbde:	6839      	ldr	r1, [r7, #0]
 800bbe0:	6878      	ldr	r0, [r7, #4]
 800bbe2:	f000 f892 	bl	800bd0a <USBD_CtlError>
      break;
 800bbe6:	e01a      	b.n	800bc1e <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2201      	movs	r2, #1
 800bbec:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d005      	beq.n	800bc04 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	68db      	ldr	r3, [r3, #12]
 800bbfc:	f043 0202 	orr.w	r2, r3, #2
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	330c      	adds	r3, #12
 800bc08:	2202      	movs	r2, #2
 800bc0a:	4619      	mov	r1, r3
 800bc0c:	6878      	ldr	r0, [r7, #4]
 800bc0e:	f000 f8e7 	bl	800bde0 <USBD_CtlSendData>
    break;
 800bc12:	e004      	b.n	800bc1e <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800bc14:	6839      	ldr	r1, [r7, #0]
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f000 f877 	bl	800bd0a <USBD_CtlError>
    break;
 800bc1c:	bf00      	nop
  }
}
 800bc1e:	bf00      	nop
 800bc20:	3708      	adds	r7, #8
 800bc22:	46bd      	mov	sp, r7
 800bc24:	bd80      	pop	{r7, pc}

0800bc26 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800bc26:	b580      	push	{r7, lr}
 800bc28:	b082      	sub	sp, #8
 800bc2a:	af00      	add	r7, sp, #0
 800bc2c:	6078      	str	r0, [r7, #4]
 800bc2e:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	885b      	ldrh	r3, [r3, #2]
 800bc34:	2b01      	cmp	r3, #1
 800bc36:	d106      	bne.n	800bc46 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2201      	movs	r2, #1
 800bc3c:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800bc40:	6878      	ldr	r0, [r7, #4]
 800bc42:	f000 f92b 	bl	800be9c <USBD_CtlSendStatus>
  }

}
 800bc46:	bf00      	nop
 800bc48:	3708      	adds	r7, #8
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd80      	pop	{r7, pc}

0800bc4e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800bc4e:	b580      	push	{r7, lr}
 800bc50:	b082      	sub	sp, #8
 800bc52:	af00      	add	r7, sp, #0
 800bc54:	6078      	str	r0, [r7, #4]
 800bc56:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800bc5e:	3b01      	subs	r3, #1
 800bc60:	2b02      	cmp	r3, #2
 800bc62:	d80b      	bhi.n	800bc7c <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	885b      	ldrh	r3, [r3, #2]
 800bc68:	2b01      	cmp	r3, #1
 800bc6a:	d10c      	bne.n	800bc86 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2200      	movs	r2, #0
 800bc70:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f000 f911 	bl	800be9c <USBD_CtlSendStatus>
    }
    break;
 800bc7a:	e004      	b.n	800bc86 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800bc7c:	6839      	ldr	r1, [r7, #0]
 800bc7e:	6878      	ldr	r0, [r7, #4]
 800bc80:	f000 f843 	bl	800bd0a <USBD_CtlError>
    break;
 800bc84:	e000      	b.n	800bc88 <USBD_ClrFeature+0x3a>
    break;
 800bc86:	bf00      	nop
  }
}
 800bc88:	bf00      	nop
 800bc8a:	3708      	adds	r7, #8
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}

0800bc90 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bc90:	b480      	push	{r7}
 800bc92:	b083      	sub	sp, #12
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
 800bc98:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	781a      	ldrb	r2, [r3, #0]
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	785a      	ldrb	r2, [r3, #1]
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	3302      	adds	r3, #2
 800bcae:	781b      	ldrb	r3, [r3, #0]
 800bcb0:	b29a      	uxth	r2, r3
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	3303      	adds	r3, #3
 800bcb6:	781b      	ldrb	r3, [r3, #0]
 800bcb8:	b29b      	uxth	r3, r3
 800bcba:	021b      	lsls	r3, r3, #8
 800bcbc:	b29b      	uxth	r3, r3
 800bcbe:	4413      	add	r3, r2
 800bcc0:	b29a      	uxth	r2, r3
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	3304      	adds	r3, #4
 800bcca:	781b      	ldrb	r3, [r3, #0]
 800bccc:	b29a      	uxth	r2, r3
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	3305      	adds	r3, #5
 800bcd2:	781b      	ldrb	r3, [r3, #0]
 800bcd4:	b29b      	uxth	r3, r3
 800bcd6:	021b      	lsls	r3, r3, #8
 800bcd8:	b29b      	uxth	r3, r3
 800bcda:	4413      	add	r3, r2
 800bcdc:	b29a      	uxth	r2, r3
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800bce2:	683b      	ldr	r3, [r7, #0]
 800bce4:	3306      	adds	r3, #6
 800bce6:	781b      	ldrb	r3, [r3, #0]
 800bce8:	b29a      	uxth	r2, r3
 800bcea:	683b      	ldr	r3, [r7, #0]
 800bcec:	3307      	adds	r3, #7
 800bcee:	781b      	ldrb	r3, [r3, #0]
 800bcf0:	b29b      	uxth	r3, r3
 800bcf2:	021b      	lsls	r3, r3, #8
 800bcf4:	b29b      	uxth	r3, r3
 800bcf6:	4413      	add	r3, r2
 800bcf8:	b29a      	uxth	r2, r3
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	80da      	strh	r2, [r3, #6]

}
 800bcfe:	bf00      	nop
 800bd00:	370c      	adds	r7, #12
 800bd02:	46bd      	mov	sp, r7
 800bd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd08:	4770      	bx	lr

0800bd0a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800bd0a:	b580      	push	{r7, lr}
 800bd0c:	b082      	sub	sp, #8
 800bd0e:	af00      	add	r7, sp, #0
 800bd10:	6078      	str	r0, [r7, #4]
 800bd12:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800bd14:	2180      	movs	r1, #128	; 0x80
 800bd16:	6878      	ldr	r0, [r7, #4]
 800bd18:	f000 fd5e 	bl	800c7d8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800bd1c:	2100      	movs	r1, #0
 800bd1e:	6878      	ldr	r0, [r7, #4]
 800bd20:	f000 fd5a 	bl	800c7d8 <USBD_LL_StallEP>
}
 800bd24:	bf00      	nop
 800bd26:	3708      	adds	r7, #8
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bd80      	pop	{r7, pc}

0800bd2c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b086      	sub	sp, #24
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	60f8      	str	r0, [r7, #12]
 800bd34:	60b9      	str	r1, [r7, #8]
 800bd36:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bd38:	2300      	movs	r3, #0
 800bd3a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d032      	beq.n	800bda8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800bd42:	68f8      	ldr	r0, [r7, #12]
 800bd44:	f000 f834 	bl	800bdb0 <USBD_GetLen>
 800bd48:	4603      	mov	r3, r0
 800bd4a:	3301      	adds	r3, #1
 800bd4c:	b29b      	uxth	r3, r3
 800bd4e:	005b      	lsls	r3, r3, #1
 800bd50:	b29a      	uxth	r2, r3
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800bd56:	7dfb      	ldrb	r3, [r7, #23]
 800bd58:	1c5a      	adds	r2, r3, #1
 800bd5a:	75fa      	strb	r2, [r7, #23]
 800bd5c:	461a      	mov	r2, r3
 800bd5e:	68bb      	ldr	r3, [r7, #8]
 800bd60:	4413      	add	r3, r2
 800bd62:	687a      	ldr	r2, [r7, #4]
 800bd64:	7812      	ldrb	r2, [r2, #0]
 800bd66:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800bd68:	7dfb      	ldrb	r3, [r7, #23]
 800bd6a:	1c5a      	adds	r2, r3, #1
 800bd6c:	75fa      	strb	r2, [r7, #23]
 800bd6e:	461a      	mov	r2, r3
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	4413      	add	r3, r2
 800bd74:	2203      	movs	r2, #3
 800bd76:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800bd78:	e012      	b.n	800bda0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	1c5a      	adds	r2, r3, #1
 800bd7e:	60fa      	str	r2, [r7, #12]
 800bd80:	7dfa      	ldrb	r2, [r7, #23]
 800bd82:	1c51      	adds	r1, r2, #1
 800bd84:	75f9      	strb	r1, [r7, #23]
 800bd86:	4611      	mov	r1, r2
 800bd88:	68ba      	ldr	r2, [r7, #8]
 800bd8a:	440a      	add	r2, r1
 800bd8c:	781b      	ldrb	r3, [r3, #0]
 800bd8e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800bd90:	7dfb      	ldrb	r3, [r7, #23]
 800bd92:	1c5a      	adds	r2, r3, #1
 800bd94:	75fa      	strb	r2, [r7, #23]
 800bd96:	461a      	mov	r2, r3
 800bd98:	68bb      	ldr	r3, [r7, #8]
 800bd9a:	4413      	add	r3, r2
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	781b      	ldrb	r3, [r3, #0]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d1e8      	bne.n	800bd7a <USBD_GetString+0x4e>
    }
  }
}
 800bda8:	bf00      	nop
 800bdaa:	3718      	adds	r7, #24
 800bdac:	46bd      	mov	sp, r7
 800bdae:	bd80      	pop	{r7, pc}

0800bdb0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bdb0:	b480      	push	{r7}
 800bdb2:	b085      	sub	sp, #20
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800bdb8:	2300      	movs	r3, #0
 800bdba:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800bdbc:	e005      	b.n	800bdca <USBD_GetLen+0x1a>
    {
        len++;
 800bdbe:	7bfb      	ldrb	r3, [r7, #15]
 800bdc0:	3301      	adds	r3, #1
 800bdc2:	73fb      	strb	r3, [r7, #15]
        buf++;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	3301      	adds	r3, #1
 800bdc8:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	781b      	ldrb	r3, [r3, #0]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d1f5      	bne.n	800bdbe <USBD_GetLen+0xe>
    }

    return len;
 800bdd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	3714      	adds	r7, #20
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdde:	4770      	bx	lr

0800bde0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b084      	sub	sp, #16
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	60f8      	str	r0, [r7, #12]
 800bde8:	60b9      	str	r1, [r7, #8]
 800bdea:	4613      	mov	r3, r2
 800bdec:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	2202      	movs	r2, #2
 800bdf2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800bdf6:	88fa      	ldrh	r2, [r7, #6]
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800bdfc:	88fa      	ldrh	r2, [r7, #6]
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800be02:	88fb      	ldrh	r3, [r7, #6]
 800be04:	68ba      	ldr	r2, [r7, #8]
 800be06:	2100      	movs	r1, #0
 800be08:	68f8      	ldr	r0, [r7, #12]
 800be0a:	f000 fd6e 	bl	800c8ea <USBD_LL_Transmit>

  return USBD_OK;
 800be0e:	2300      	movs	r3, #0
}
 800be10:	4618      	mov	r0, r3
 800be12:	3710      	adds	r7, #16
 800be14:	46bd      	mov	sp, r7
 800be16:	bd80      	pop	{r7, pc}

0800be18 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b084      	sub	sp, #16
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	60f8      	str	r0, [r7, #12]
 800be20:	60b9      	str	r1, [r7, #8]
 800be22:	4613      	mov	r3, r2
 800be24:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800be26:	88fb      	ldrh	r3, [r7, #6]
 800be28:	68ba      	ldr	r2, [r7, #8]
 800be2a:	2100      	movs	r1, #0
 800be2c:	68f8      	ldr	r0, [r7, #12]
 800be2e:	f000 fd5c 	bl	800c8ea <USBD_LL_Transmit>

  return USBD_OK;
 800be32:	2300      	movs	r3, #0
}
 800be34:	4618      	mov	r0, r3
 800be36:	3710      	adds	r7, #16
 800be38:	46bd      	mov	sp, r7
 800be3a:	bd80      	pop	{r7, pc}

0800be3c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b084      	sub	sp, #16
 800be40:	af00      	add	r7, sp, #0
 800be42:	60f8      	str	r0, [r7, #12]
 800be44:	60b9      	str	r1, [r7, #8]
 800be46:	4613      	mov	r3, r2
 800be48:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	2203      	movs	r2, #3
 800be4e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800be52:	88fa      	ldrh	r2, [r7, #6]
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800be5a:	88fa      	ldrh	r2, [r7, #6]
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800be62:	88fb      	ldrh	r3, [r7, #6]
 800be64:	68ba      	ldr	r2, [r7, #8]
 800be66:	2100      	movs	r1, #0
 800be68:	68f8      	ldr	r0, [r7, #12]
 800be6a:	f000 fd61 	bl	800c930 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800be6e:	2300      	movs	r3, #0
}
 800be70:	4618      	mov	r0, r3
 800be72:	3710      	adds	r7, #16
 800be74:	46bd      	mov	sp, r7
 800be76:	bd80      	pop	{r7, pc}

0800be78 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b084      	sub	sp, #16
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	60f8      	str	r0, [r7, #12]
 800be80:	60b9      	str	r1, [r7, #8]
 800be82:	4613      	mov	r3, r2
 800be84:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800be86:	88fb      	ldrh	r3, [r7, #6]
 800be88:	68ba      	ldr	r2, [r7, #8]
 800be8a:	2100      	movs	r1, #0
 800be8c:	68f8      	ldr	r0, [r7, #12]
 800be8e:	f000 fd4f 	bl	800c930 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800be92:	2300      	movs	r3, #0
}
 800be94:	4618      	mov	r0, r3
 800be96:	3710      	adds	r7, #16
 800be98:	46bd      	mov	sp, r7
 800be9a:	bd80      	pop	{r7, pc}

0800be9c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b082      	sub	sp, #8
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2204      	movs	r2, #4
 800bea8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800beac:	2300      	movs	r3, #0
 800beae:	2200      	movs	r2, #0
 800beb0:	2100      	movs	r1, #0
 800beb2:	6878      	ldr	r0, [r7, #4]
 800beb4:	f000 fd19 	bl	800c8ea <USBD_LL_Transmit>

  return USBD_OK;
 800beb8:	2300      	movs	r3, #0
}
 800beba:	4618      	mov	r0, r3
 800bebc:	3708      	adds	r7, #8
 800bebe:	46bd      	mov	sp, r7
 800bec0:	bd80      	pop	{r7, pc}

0800bec2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800bec2:	b580      	push	{r7, lr}
 800bec4:	b082      	sub	sp, #8
 800bec6:	af00      	add	r7, sp, #0
 800bec8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	2205      	movs	r2, #5
 800bece:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800bed2:	2300      	movs	r3, #0
 800bed4:	2200      	movs	r2, #0
 800bed6:	2100      	movs	r1, #0
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	f000 fd29 	bl	800c930 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bede:	2300      	movs	r3, #0
}
 800bee0:	4618      	mov	r0, r3
 800bee2:	3708      	adds	r7, #8
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bd80      	pop	{r7, pc}

0800bee8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800bee8:	b480      	push	{r7}
 800beea:	b087      	sub	sp, #28
 800beec:	af00      	add	r7, sp, #0
 800beee:	60f8      	str	r0, [r7, #12]
 800bef0:	60b9      	str	r1, [r7, #8]
 800bef2:	4613      	mov	r3, r2
 800bef4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800bef6:	2301      	movs	r3, #1
 800bef8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800befa:	2300      	movs	r3, #0
 800befc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800befe:	4b1f      	ldr	r3, [pc, #124]	; (800bf7c <FATFS_LinkDriverEx+0x94>)
 800bf00:	7a5b      	ldrb	r3, [r3, #9]
 800bf02:	b2db      	uxtb	r3, r3
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d131      	bne.n	800bf6c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800bf08:	4b1c      	ldr	r3, [pc, #112]	; (800bf7c <FATFS_LinkDriverEx+0x94>)
 800bf0a:	7a5b      	ldrb	r3, [r3, #9]
 800bf0c:	b2db      	uxtb	r3, r3
 800bf0e:	461a      	mov	r2, r3
 800bf10:	4b1a      	ldr	r3, [pc, #104]	; (800bf7c <FATFS_LinkDriverEx+0x94>)
 800bf12:	2100      	movs	r1, #0
 800bf14:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800bf16:	4b19      	ldr	r3, [pc, #100]	; (800bf7c <FATFS_LinkDriverEx+0x94>)
 800bf18:	7a5b      	ldrb	r3, [r3, #9]
 800bf1a:	b2db      	uxtb	r3, r3
 800bf1c:	4a17      	ldr	r2, [pc, #92]	; (800bf7c <FATFS_LinkDriverEx+0x94>)
 800bf1e:	009b      	lsls	r3, r3, #2
 800bf20:	4413      	add	r3, r2
 800bf22:	68fa      	ldr	r2, [r7, #12]
 800bf24:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800bf26:	4b15      	ldr	r3, [pc, #84]	; (800bf7c <FATFS_LinkDriverEx+0x94>)
 800bf28:	7a5b      	ldrb	r3, [r3, #9]
 800bf2a:	b2db      	uxtb	r3, r3
 800bf2c:	461a      	mov	r2, r3
 800bf2e:	4b13      	ldr	r3, [pc, #76]	; (800bf7c <FATFS_LinkDriverEx+0x94>)
 800bf30:	4413      	add	r3, r2
 800bf32:	79fa      	ldrb	r2, [r7, #7]
 800bf34:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800bf36:	4b11      	ldr	r3, [pc, #68]	; (800bf7c <FATFS_LinkDriverEx+0x94>)
 800bf38:	7a5b      	ldrb	r3, [r3, #9]
 800bf3a:	b2db      	uxtb	r3, r3
 800bf3c:	1c5a      	adds	r2, r3, #1
 800bf3e:	b2d1      	uxtb	r1, r2
 800bf40:	4a0e      	ldr	r2, [pc, #56]	; (800bf7c <FATFS_LinkDriverEx+0x94>)
 800bf42:	7251      	strb	r1, [r2, #9]
 800bf44:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800bf46:	7dbb      	ldrb	r3, [r7, #22]
 800bf48:	3330      	adds	r3, #48	; 0x30
 800bf4a:	b2da      	uxtb	r2, r3
 800bf4c:	68bb      	ldr	r3, [r7, #8]
 800bf4e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800bf50:	68bb      	ldr	r3, [r7, #8]
 800bf52:	3301      	adds	r3, #1
 800bf54:	223a      	movs	r2, #58	; 0x3a
 800bf56:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800bf58:	68bb      	ldr	r3, [r7, #8]
 800bf5a:	3302      	adds	r3, #2
 800bf5c:	222f      	movs	r2, #47	; 0x2f
 800bf5e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bf60:	68bb      	ldr	r3, [r7, #8]
 800bf62:	3303      	adds	r3, #3
 800bf64:	2200      	movs	r2, #0
 800bf66:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bf68:	2300      	movs	r3, #0
 800bf6a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800bf6c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf6e:	4618      	mov	r0, r3
 800bf70:	371c      	adds	r7, #28
 800bf72:	46bd      	mov	sp, r7
 800bf74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf78:	4770      	bx	lr
 800bf7a:	bf00      	nop
 800bf7c:	2000057c 	.word	0x2000057c

0800bf80 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b082      	sub	sp, #8
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
 800bf88:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	6839      	ldr	r1, [r7, #0]
 800bf8e:	6878      	ldr	r0, [r7, #4]
 800bf90:	f7ff ffaa 	bl	800bee8 <FATFS_LinkDriverEx>
 800bf94:	4603      	mov	r3, r0
}
 800bf96:	4618      	mov	r0, r3
 800bf98:	3708      	adds	r7, #8
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bd80      	pop	{r7, pc}
	...

0800bfa0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	4912      	ldr	r1, [pc, #72]	; (800bff0 <MX_USB_DEVICE_Init+0x50>)
 800bfa8:	4812      	ldr	r0, [pc, #72]	; (800bff4 <MX_USB_DEVICE_Init+0x54>)
 800bfaa:	f7fe ff43 	bl	800ae34 <USBD_Init>
 800bfae:	4603      	mov	r3, r0
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d001      	beq.n	800bfb8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bfb4:	f7f5 fe50 	bl	8001c58 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bfb8:	490f      	ldr	r1, [pc, #60]	; (800bff8 <MX_USB_DEVICE_Init+0x58>)
 800bfba:	480e      	ldr	r0, [pc, #56]	; (800bff4 <MX_USB_DEVICE_Init+0x54>)
 800bfbc:	f7fe ff65 	bl	800ae8a <USBD_RegisterClass>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d001      	beq.n	800bfca <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bfc6:	f7f5 fe47 	bl	8001c58 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bfca:	490c      	ldr	r1, [pc, #48]	; (800bffc <MX_USB_DEVICE_Init+0x5c>)
 800bfcc:	4809      	ldr	r0, [pc, #36]	; (800bff4 <MX_USB_DEVICE_Init+0x54>)
 800bfce:	f7fe fe93 	bl	800acf8 <USBD_CDC_RegisterInterface>
 800bfd2:	4603      	mov	r3, r0
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d001      	beq.n	800bfdc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bfd8:	f7f5 fe3e 	bl	8001c58 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bfdc:	4805      	ldr	r0, [pc, #20]	; (800bff4 <MX_USB_DEVICE_Init+0x54>)
 800bfde:	f7fe ff6e 	bl	800aebe <USBD_Start>
 800bfe2:	4603      	mov	r3, r0
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d001      	beq.n	800bfec <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bfe8:	f7f5 fe36 	bl	8001c58 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bfec:	bf00      	nop
 800bfee:	bd80      	pop	{r7, pc}
 800bff0:	20000130 	.word	0x20000130
 800bff4:	20000f90 	.word	0x20000f90
 800bff8:	2000001c 	.word	0x2000001c
 800bffc:	20000120 	.word	0x20000120

0800c000 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c004:	2200      	movs	r2, #0
 800c006:	4905      	ldr	r1, [pc, #20]	; (800c01c <CDC_Init_FS+0x1c>)
 800c008:	4805      	ldr	r0, [pc, #20]	; (800c020 <CDC_Init_FS+0x20>)
 800c00a:	f7fe fe8c 	bl	800ad26 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c00e:	4905      	ldr	r1, [pc, #20]	; (800c024 <CDC_Init_FS+0x24>)
 800c010:	4803      	ldr	r0, [pc, #12]	; (800c020 <CDC_Init_FS+0x20>)
 800c012:	f7fe fea2 	bl	800ad5a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c016:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c018:	4618      	mov	r0, r3
 800c01a:	bd80      	pop	{r7, pc}
 800c01c:	20001a2c 	.word	0x20001a2c
 800c020:	20000f90 	.word	0x20000f90
 800c024:	2000122c 	.word	0x2000122c

0800c028 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c028:	b480      	push	{r7}
 800c02a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c02c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c02e:	4618      	mov	r0, r3
 800c030:	46bd      	mov	sp, r7
 800c032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c036:	4770      	bx	lr

0800c038 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c038:	b480      	push	{r7}
 800c03a:	b085      	sub	sp, #20
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	4603      	mov	r3, r0
 800c040:	6039      	str	r1, [r7, #0]
 800c042:	71fb      	strb	r3, [r7, #7]
 800c044:	4613      	mov	r3, r2
 800c046:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint8_t tempbuf[7] = {0,0,0,0,0,0,0};
 800c048:	f107 0308 	add.w	r3, r7, #8
 800c04c:	2200      	movs	r2, #0
 800c04e:	601a      	str	r2, [r3, #0]
 800c050:	f8c3 2003 	str.w	r2, [r3, #3]
  switch(cmd)
 800c054:	79fb      	ldrb	r3, [r7, #7]
 800c056:	2b23      	cmp	r3, #35	; 0x23
 800c058:	d87c      	bhi.n	800c154 <CDC_Control_FS+0x11c>
 800c05a:	a201      	add	r2, pc, #4	; (adr r2, 800c060 <CDC_Control_FS+0x28>)
 800c05c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c060:	0800c155 	.word	0x0800c155
 800c064:	0800c155 	.word	0x0800c155
 800c068:	0800c155 	.word	0x0800c155
 800c06c:	0800c155 	.word	0x0800c155
 800c070:	0800c155 	.word	0x0800c155
 800c074:	0800c155 	.word	0x0800c155
 800c078:	0800c155 	.word	0x0800c155
 800c07c:	0800c155 	.word	0x0800c155
 800c080:	0800c155 	.word	0x0800c155
 800c084:	0800c155 	.word	0x0800c155
 800c088:	0800c155 	.word	0x0800c155
 800c08c:	0800c155 	.word	0x0800c155
 800c090:	0800c155 	.word	0x0800c155
 800c094:	0800c155 	.word	0x0800c155
 800c098:	0800c155 	.word	0x0800c155
 800c09c:	0800c155 	.word	0x0800c155
 800c0a0:	0800c155 	.word	0x0800c155
 800c0a4:	0800c155 	.word	0x0800c155
 800c0a8:	0800c155 	.word	0x0800c155
 800c0ac:	0800c155 	.word	0x0800c155
 800c0b0:	0800c155 	.word	0x0800c155
 800c0b4:	0800c155 	.word	0x0800c155
 800c0b8:	0800c155 	.word	0x0800c155
 800c0bc:	0800c155 	.word	0x0800c155
 800c0c0:	0800c155 	.word	0x0800c155
 800c0c4:	0800c155 	.word	0x0800c155
 800c0c8:	0800c155 	.word	0x0800c155
 800c0cc:	0800c155 	.word	0x0800c155
 800c0d0:	0800c155 	.word	0x0800c155
 800c0d4:	0800c155 	.word	0x0800c155
 800c0d8:	0800c155 	.word	0x0800c155
 800c0dc:	0800c155 	.word	0x0800c155
 800c0e0:	0800c0f1 	.word	0x0800c0f1
 800c0e4:	0800c11d 	.word	0x0800c11d
 800c0e8:	0800c155 	.word	0x0800c155
 800c0ec:	0800c155 	.word	0x0800c155
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      	tempbuf[0] = pbuf[0];
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	781b      	ldrb	r3, [r3, #0]
 800c0f4:	723b      	strb	r3, [r7, #8]
      	tempbuf[1] = pbuf[1];
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	785b      	ldrb	r3, [r3, #1]
 800c0fa:	727b      	strb	r3, [r7, #9]
      	tempbuf[2] = pbuf[2];
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	789b      	ldrb	r3, [r3, #2]
 800c100:	72bb      	strb	r3, [r7, #10]
      	tempbuf[3] = pbuf[3];
 800c102:	683b      	ldr	r3, [r7, #0]
 800c104:	78db      	ldrb	r3, [r3, #3]
 800c106:	72fb      	strb	r3, [r7, #11]
      	tempbuf[4] = pbuf[4];
 800c108:	683b      	ldr	r3, [r7, #0]
 800c10a:	791b      	ldrb	r3, [r3, #4]
 800c10c:	733b      	strb	r3, [r7, #12]
      	tempbuf[5] = pbuf[5];
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	795b      	ldrb	r3, [r3, #5]
 800c112:	737b      	strb	r3, [r7, #13]
      	tempbuf[6] = pbuf[6];
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	799b      	ldrb	r3, [r3, #6]
 800c118:	73bb      	strb	r3, [r7, #14]
      	break;
 800c11a:	e01c      	b.n	800c156 <CDC_Control_FS+0x11e>

    case CDC_GET_LINE_CODING:
      	pbuf[0] = tempbuf[0];
 800c11c:	7a3a      	ldrb	r2, [r7, #8]
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	701a      	strb	r2, [r3, #0]
      	pbuf[1] = tempbuf[1];
 800c122:	683b      	ldr	r3, [r7, #0]
 800c124:	3301      	adds	r3, #1
 800c126:	7a7a      	ldrb	r2, [r7, #9]
 800c128:	701a      	strb	r2, [r3, #0]
      	pbuf[2] = tempbuf[2];
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	3302      	adds	r3, #2
 800c12e:	7aba      	ldrb	r2, [r7, #10]
 800c130:	701a      	strb	r2, [r3, #0]
      	pbuf[3] = tempbuf[3];
 800c132:	683b      	ldr	r3, [r7, #0]
 800c134:	3303      	adds	r3, #3
 800c136:	7afa      	ldrb	r2, [r7, #11]
 800c138:	701a      	strb	r2, [r3, #0]
      	pbuf[4] = tempbuf[4];
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	3304      	adds	r3, #4
 800c13e:	7b3a      	ldrb	r2, [r7, #12]
 800c140:	701a      	strb	r2, [r3, #0]
      	pbuf[5] = tempbuf[5];
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	3305      	adds	r3, #5
 800c146:	7b7a      	ldrb	r2, [r7, #13]
 800c148:	701a      	strb	r2, [r3, #0]
      	pbuf[6] = tempbuf[6];
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	3306      	adds	r3, #6
 800c14e:	7bba      	ldrb	r2, [r7, #14]
 800c150:	701a      	strb	r2, [r3, #0]
      	break;
 800c152:	e000      	b.n	800c156 <CDC_Control_FS+0x11e>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c154:	bf00      	nop
  }

  return (USBD_OK);
 800c156:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c158:	4618      	mov	r0, r3
 800c15a:	3714      	adds	r7, #20
 800c15c:	46bd      	mov	sp, r7
 800c15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c162:	4770      	bx	lr

0800c164 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b082      	sub	sp, #8
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
 800c16c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c16e:	6879      	ldr	r1, [r7, #4]
 800c170:	4805      	ldr	r0, [pc, #20]	; (800c188 <CDC_Receive_FS+0x24>)
 800c172:	f7fe fdf2 	bl	800ad5a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c176:	4804      	ldr	r0, [pc, #16]	; (800c188 <CDC_Receive_FS+0x24>)
 800c178:	f7fe fe32 	bl	800ade0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c17c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c17e:	4618      	mov	r0, r3
 800c180:	3708      	adds	r7, #8
 800c182:	46bd      	mov	sp, r7
 800c184:	bd80      	pop	{r7, pc}
 800c186:	bf00      	nop
 800c188:	20000f90 	.word	0x20000f90

0800c18c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b084      	sub	sp, #16
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
 800c194:	460b      	mov	r3, r1
 800c196:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c198:	2300      	movs	r3, #0
 800c19a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c19c:	4b0d      	ldr	r3, [pc, #52]	; (800c1d4 <CDC_Transmit_FS+0x48>)
 800c19e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c1a2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c1a4:	68bb      	ldr	r3, [r7, #8]
 800c1a6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d001      	beq.n	800c1b2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c1ae:	2301      	movs	r3, #1
 800c1b0:	e00b      	b.n	800c1ca <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c1b2:	887b      	ldrh	r3, [r7, #2]
 800c1b4:	461a      	mov	r2, r3
 800c1b6:	6879      	ldr	r1, [r7, #4]
 800c1b8:	4806      	ldr	r0, [pc, #24]	; (800c1d4 <CDC_Transmit_FS+0x48>)
 800c1ba:	f7fe fdb4 	bl	800ad26 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c1be:	4805      	ldr	r0, [pc, #20]	; (800c1d4 <CDC_Transmit_FS+0x48>)
 800c1c0:	f7fe fddf 	bl	800ad82 <USBD_CDC_TransmitPacket>
 800c1c4:	4603      	mov	r3, r0
 800c1c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c1c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	3710      	adds	r7, #16
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bd80      	pop	{r7, pc}
 800c1d2:	bf00      	nop
 800c1d4:	20000f90 	.word	0x20000f90

0800c1d8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c1d8:	b480      	push	{r7}
 800c1da:	b083      	sub	sp, #12
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	4603      	mov	r3, r0
 800c1e0:	6039      	str	r1, [r7, #0]
 800c1e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	2212      	movs	r2, #18
 800c1e8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c1ea:	4b03      	ldr	r3, [pc, #12]	; (800c1f8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	370c      	adds	r7, #12
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f6:	4770      	bx	lr
 800c1f8:	2000014c 	.word	0x2000014c

0800c1fc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c1fc:	b480      	push	{r7}
 800c1fe:	b083      	sub	sp, #12
 800c200:	af00      	add	r7, sp, #0
 800c202:	4603      	mov	r3, r0
 800c204:	6039      	str	r1, [r7, #0]
 800c206:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	2204      	movs	r2, #4
 800c20c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c20e:	4b03      	ldr	r3, [pc, #12]	; (800c21c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c210:	4618      	mov	r0, r3
 800c212:	370c      	adds	r7, #12
 800c214:	46bd      	mov	sp, r7
 800c216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21a:	4770      	bx	lr
 800c21c:	20000160 	.word	0x20000160

0800c220 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c220:	b580      	push	{r7, lr}
 800c222:	b082      	sub	sp, #8
 800c224:	af00      	add	r7, sp, #0
 800c226:	4603      	mov	r3, r0
 800c228:	6039      	str	r1, [r7, #0]
 800c22a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c22c:	79fb      	ldrb	r3, [r7, #7]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d105      	bne.n	800c23e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c232:	683a      	ldr	r2, [r7, #0]
 800c234:	4907      	ldr	r1, [pc, #28]	; (800c254 <USBD_FS_ProductStrDescriptor+0x34>)
 800c236:	4808      	ldr	r0, [pc, #32]	; (800c258 <USBD_FS_ProductStrDescriptor+0x38>)
 800c238:	f7ff fd78 	bl	800bd2c <USBD_GetString>
 800c23c:	e004      	b.n	800c248 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c23e:	683a      	ldr	r2, [r7, #0]
 800c240:	4904      	ldr	r1, [pc, #16]	; (800c254 <USBD_FS_ProductStrDescriptor+0x34>)
 800c242:	4805      	ldr	r0, [pc, #20]	; (800c258 <USBD_FS_ProductStrDescriptor+0x38>)
 800c244:	f7ff fd72 	bl	800bd2c <USBD_GetString>
  }
  return USBD_StrDesc;
 800c248:	4b02      	ldr	r3, [pc, #8]	; (800c254 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c24a:	4618      	mov	r0, r3
 800c24c:	3708      	adds	r7, #8
 800c24e:	46bd      	mov	sp, r7
 800c250:	bd80      	pop	{r7, pc}
 800c252:	bf00      	nop
 800c254:	2000222c 	.word	0x2000222c
 800c258:	0801064c 	.word	0x0801064c

0800c25c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b082      	sub	sp, #8
 800c260:	af00      	add	r7, sp, #0
 800c262:	4603      	mov	r3, r0
 800c264:	6039      	str	r1, [r7, #0]
 800c266:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c268:	683a      	ldr	r2, [r7, #0]
 800c26a:	4904      	ldr	r1, [pc, #16]	; (800c27c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c26c:	4804      	ldr	r0, [pc, #16]	; (800c280 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c26e:	f7ff fd5d 	bl	800bd2c <USBD_GetString>
  return USBD_StrDesc;
 800c272:	4b02      	ldr	r3, [pc, #8]	; (800c27c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c274:	4618      	mov	r0, r3
 800c276:	3708      	adds	r7, #8
 800c278:	46bd      	mov	sp, r7
 800c27a:	bd80      	pop	{r7, pc}
 800c27c:	2000222c 	.word	0x2000222c
 800c280:	08010664 	.word	0x08010664

0800c284 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b082      	sub	sp, #8
 800c288:	af00      	add	r7, sp, #0
 800c28a:	4603      	mov	r3, r0
 800c28c:	6039      	str	r1, [r7, #0]
 800c28e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c290:	683b      	ldr	r3, [r7, #0]
 800c292:	221a      	movs	r2, #26
 800c294:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c296:	f000 f843 	bl	800c320 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c29a:	4b02      	ldr	r3, [pc, #8]	; (800c2a4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c29c:	4618      	mov	r0, r3
 800c29e:	3708      	adds	r7, #8
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	bd80      	pop	{r7, pc}
 800c2a4:	20000164 	.word	0x20000164

0800c2a8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b082      	sub	sp, #8
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	6039      	str	r1, [r7, #0]
 800c2b2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c2b4:	79fb      	ldrb	r3, [r7, #7]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d105      	bne.n	800c2c6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c2ba:	683a      	ldr	r2, [r7, #0]
 800c2bc:	4907      	ldr	r1, [pc, #28]	; (800c2dc <USBD_FS_ConfigStrDescriptor+0x34>)
 800c2be:	4808      	ldr	r0, [pc, #32]	; (800c2e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c2c0:	f7ff fd34 	bl	800bd2c <USBD_GetString>
 800c2c4:	e004      	b.n	800c2d0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c2c6:	683a      	ldr	r2, [r7, #0]
 800c2c8:	4904      	ldr	r1, [pc, #16]	; (800c2dc <USBD_FS_ConfigStrDescriptor+0x34>)
 800c2ca:	4805      	ldr	r0, [pc, #20]	; (800c2e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c2cc:	f7ff fd2e 	bl	800bd2c <USBD_GetString>
  }
  return USBD_StrDesc;
 800c2d0:	4b02      	ldr	r3, [pc, #8]	; (800c2dc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	3708      	adds	r7, #8
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	bd80      	pop	{r7, pc}
 800c2da:	bf00      	nop
 800c2dc:	2000222c 	.word	0x2000222c
 800c2e0:	08010678 	.word	0x08010678

0800c2e4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b082      	sub	sp, #8
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	4603      	mov	r3, r0
 800c2ec:	6039      	str	r1, [r7, #0]
 800c2ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c2f0:	79fb      	ldrb	r3, [r7, #7]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d105      	bne.n	800c302 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c2f6:	683a      	ldr	r2, [r7, #0]
 800c2f8:	4907      	ldr	r1, [pc, #28]	; (800c318 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c2fa:	4808      	ldr	r0, [pc, #32]	; (800c31c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c2fc:	f7ff fd16 	bl	800bd2c <USBD_GetString>
 800c300:	e004      	b.n	800c30c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c302:	683a      	ldr	r2, [r7, #0]
 800c304:	4904      	ldr	r1, [pc, #16]	; (800c318 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c306:	4805      	ldr	r0, [pc, #20]	; (800c31c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c308:	f7ff fd10 	bl	800bd2c <USBD_GetString>
  }
  return USBD_StrDesc;
 800c30c:	4b02      	ldr	r3, [pc, #8]	; (800c318 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c30e:	4618      	mov	r0, r3
 800c310:	3708      	adds	r7, #8
 800c312:	46bd      	mov	sp, r7
 800c314:	bd80      	pop	{r7, pc}
 800c316:	bf00      	nop
 800c318:	2000222c 	.word	0x2000222c
 800c31c:	08010684 	.word	0x08010684

0800c320 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b084      	sub	sp, #16
 800c324:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c326:	4b0f      	ldr	r3, [pc, #60]	; (800c364 <Get_SerialNum+0x44>)
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c32c:	4b0e      	ldr	r3, [pc, #56]	; (800c368 <Get_SerialNum+0x48>)
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c332:	4b0e      	ldr	r3, [pc, #56]	; (800c36c <Get_SerialNum+0x4c>)
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c338:	68fa      	ldr	r2, [r7, #12]
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	4413      	add	r3, r2
 800c33e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d009      	beq.n	800c35a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c346:	2208      	movs	r2, #8
 800c348:	4909      	ldr	r1, [pc, #36]	; (800c370 <Get_SerialNum+0x50>)
 800c34a:	68f8      	ldr	r0, [r7, #12]
 800c34c:	f000 f814 	bl	800c378 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c350:	2204      	movs	r2, #4
 800c352:	4908      	ldr	r1, [pc, #32]	; (800c374 <Get_SerialNum+0x54>)
 800c354:	68b8      	ldr	r0, [r7, #8]
 800c356:	f000 f80f 	bl	800c378 <IntToUnicode>
  }
}
 800c35a:	bf00      	nop
 800c35c:	3710      	adds	r7, #16
 800c35e:	46bd      	mov	sp, r7
 800c360:	bd80      	pop	{r7, pc}
 800c362:	bf00      	nop
 800c364:	1fff7a10 	.word	0x1fff7a10
 800c368:	1fff7a14 	.word	0x1fff7a14
 800c36c:	1fff7a18 	.word	0x1fff7a18
 800c370:	20000166 	.word	0x20000166
 800c374:	20000176 	.word	0x20000176

0800c378 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c378:	b480      	push	{r7}
 800c37a:	b087      	sub	sp, #28
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	60f8      	str	r0, [r7, #12]
 800c380:	60b9      	str	r1, [r7, #8]
 800c382:	4613      	mov	r3, r2
 800c384:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c386:	2300      	movs	r3, #0
 800c388:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c38a:	2300      	movs	r3, #0
 800c38c:	75fb      	strb	r3, [r7, #23]
 800c38e:	e027      	b.n	800c3e0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	0f1b      	lsrs	r3, r3, #28
 800c394:	2b09      	cmp	r3, #9
 800c396:	d80b      	bhi.n	800c3b0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	0f1b      	lsrs	r3, r3, #28
 800c39c:	b2da      	uxtb	r2, r3
 800c39e:	7dfb      	ldrb	r3, [r7, #23]
 800c3a0:	005b      	lsls	r3, r3, #1
 800c3a2:	4619      	mov	r1, r3
 800c3a4:	68bb      	ldr	r3, [r7, #8]
 800c3a6:	440b      	add	r3, r1
 800c3a8:	3230      	adds	r2, #48	; 0x30
 800c3aa:	b2d2      	uxtb	r2, r2
 800c3ac:	701a      	strb	r2, [r3, #0]
 800c3ae:	e00a      	b.n	800c3c6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	0f1b      	lsrs	r3, r3, #28
 800c3b4:	b2da      	uxtb	r2, r3
 800c3b6:	7dfb      	ldrb	r3, [r7, #23]
 800c3b8:	005b      	lsls	r3, r3, #1
 800c3ba:	4619      	mov	r1, r3
 800c3bc:	68bb      	ldr	r3, [r7, #8]
 800c3be:	440b      	add	r3, r1
 800c3c0:	3237      	adds	r2, #55	; 0x37
 800c3c2:	b2d2      	uxtb	r2, r2
 800c3c4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	011b      	lsls	r3, r3, #4
 800c3ca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c3cc:	7dfb      	ldrb	r3, [r7, #23]
 800c3ce:	005b      	lsls	r3, r3, #1
 800c3d0:	3301      	adds	r3, #1
 800c3d2:	68ba      	ldr	r2, [r7, #8]
 800c3d4:	4413      	add	r3, r2
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c3da:	7dfb      	ldrb	r3, [r7, #23]
 800c3dc:	3301      	adds	r3, #1
 800c3de:	75fb      	strb	r3, [r7, #23]
 800c3e0:	7dfa      	ldrb	r2, [r7, #23]
 800c3e2:	79fb      	ldrb	r3, [r7, #7]
 800c3e4:	429a      	cmp	r2, r3
 800c3e6:	d3d3      	bcc.n	800c390 <IntToUnicode+0x18>
  }
}
 800c3e8:	bf00      	nop
 800c3ea:	371c      	adds	r7, #28
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f2:	4770      	bx	lr

0800c3f4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b08a      	sub	sp, #40	; 0x28
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c3fc:	f107 0314 	add.w	r3, r7, #20
 800c400:	2200      	movs	r2, #0
 800c402:	601a      	str	r2, [r3, #0]
 800c404:	605a      	str	r2, [r3, #4]
 800c406:	609a      	str	r2, [r3, #8]
 800c408:	60da      	str	r2, [r3, #12]
 800c40a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c414:	d13a      	bne.n	800c48c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c416:	2300      	movs	r3, #0
 800c418:	613b      	str	r3, [r7, #16]
 800c41a:	4b1e      	ldr	r3, [pc, #120]	; (800c494 <HAL_PCD_MspInit+0xa0>)
 800c41c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c41e:	4a1d      	ldr	r2, [pc, #116]	; (800c494 <HAL_PCD_MspInit+0xa0>)
 800c420:	f043 0301 	orr.w	r3, r3, #1
 800c424:	6313      	str	r3, [r2, #48]	; 0x30
 800c426:	4b1b      	ldr	r3, [pc, #108]	; (800c494 <HAL_PCD_MspInit+0xa0>)
 800c428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c42a:	f003 0301 	and.w	r3, r3, #1
 800c42e:	613b      	str	r3, [r7, #16]
 800c430:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c432:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c436:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c438:	2302      	movs	r3, #2
 800c43a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c43c:	2300      	movs	r3, #0
 800c43e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c440:	2303      	movs	r3, #3
 800c442:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c444:	230a      	movs	r3, #10
 800c446:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c448:	f107 0314 	add.w	r3, r7, #20
 800c44c:	4619      	mov	r1, r3
 800c44e:	4812      	ldr	r0, [pc, #72]	; (800c498 <HAL_PCD_MspInit+0xa4>)
 800c450:	f7f6 fc94 	bl	8002d7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c454:	4b0f      	ldr	r3, [pc, #60]	; (800c494 <HAL_PCD_MspInit+0xa0>)
 800c456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c458:	4a0e      	ldr	r2, [pc, #56]	; (800c494 <HAL_PCD_MspInit+0xa0>)
 800c45a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c45e:	6353      	str	r3, [r2, #52]	; 0x34
 800c460:	2300      	movs	r3, #0
 800c462:	60fb      	str	r3, [r7, #12]
 800c464:	4b0b      	ldr	r3, [pc, #44]	; (800c494 <HAL_PCD_MspInit+0xa0>)
 800c466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c468:	4a0a      	ldr	r2, [pc, #40]	; (800c494 <HAL_PCD_MspInit+0xa0>)
 800c46a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c46e:	6453      	str	r3, [r2, #68]	; 0x44
 800c470:	4b08      	ldr	r3, [pc, #32]	; (800c494 <HAL_PCD_MspInit+0xa0>)
 800c472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c474:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c478:	60fb      	str	r3, [r7, #12]
 800c47a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c47c:	2200      	movs	r2, #0
 800c47e:	2100      	movs	r1, #0
 800c480:	2043      	movs	r0, #67	; 0x43
 800c482:	f7f6 f8a8 	bl	80025d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c486:	2043      	movs	r0, #67	; 0x43
 800c488:	f7f6 f8c1 	bl	800260e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c48c:	bf00      	nop
 800c48e:	3728      	adds	r7, #40	; 0x28
 800c490:	46bd      	mov	sp, r7
 800c492:	bd80      	pop	{r7, pc}
 800c494:	40023800 	.word	0x40023800
 800c498:	40020000 	.word	0x40020000

0800c49c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b082      	sub	sp, #8
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c4b0:	4619      	mov	r1, r3
 800c4b2:	4610      	mov	r0, r2
 800c4b4:	f7fe fd4c 	bl	800af50 <USBD_LL_SetupStage>
}
 800c4b8:	bf00      	nop
 800c4ba:	3708      	adds	r7, #8
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bd80      	pop	{r7, pc}

0800c4c0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b082      	sub	sp, #8
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
 800c4c8:	460b      	mov	r3, r1
 800c4ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800c4d2:	78fa      	ldrb	r2, [r7, #3]
 800c4d4:	6879      	ldr	r1, [r7, #4]
 800c4d6:	4613      	mov	r3, r2
 800c4d8:	00db      	lsls	r3, r3, #3
 800c4da:	1a9b      	subs	r3, r3, r2
 800c4dc:	009b      	lsls	r3, r3, #2
 800c4de:	440b      	add	r3, r1
 800c4e0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c4e4:	681a      	ldr	r2, [r3, #0]
 800c4e6:	78fb      	ldrb	r3, [r7, #3]
 800c4e8:	4619      	mov	r1, r3
 800c4ea:	f7fe fd7c 	bl	800afe6 <USBD_LL_DataOutStage>
}
 800c4ee:	bf00      	nop
 800c4f0:	3708      	adds	r7, #8
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	bd80      	pop	{r7, pc}

0800c4f6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4f6:	b580      	push	{r7, lr}
 800c4f8:	b082      	sub	sp, #8
 800c4fa:	af00      	add	r7, sp, #0
 800c4fc:	6078      	str	r0, [r7, #4]
 800c4fe:	460b      	mov	r3, r1
 800c500:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800c508:	78fa      	ldrb	r2, [r7, #3]
 800c50a:	6879      	ldr	r1, [r7, #4]
 800c50c:	4613      	mov	r3, r2
 800c50e:	00db      	lsls	r3, r3, #3
 800c510:	1a9b      	subs	r3, r3, r2
 800c512:	009b      	lsls	r3, r3, #2
 800c514:	440b      	add	r3, r1
 800c516:	3348      	adds	r3, #72	; 0x48
 800c518:	681a      	ldr	r2, [r3, #0]
 800c51a:	78fb      	ldrb	r3, [r7, #3]
 800c51c:	4619      	mov	r1, r3
 800c51e:	f7fe fdd3 	bl	800b0c8 <USBD_LL_DataInStage>
}
 800c522:	bf00      	nop
 800c524:	3708      	adds	r7, #8
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}

0800c52a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c52a:	b580      	push	{r7, lr}
 800c52c:	b082      	sub	sp, #8
 800c52e:	af00      	add	r7, sp, #0
 800c530:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c538:	4618      	mov	r0, r3
 800c53a:	f7fe fee1 	bl	800b300 <USBD_LL_SOF>
}
 800c53e:	bf00      	nop
 800c540:	3708      	adds	r7, #8
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}

0800c546 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800c546:	b580      	push	{r7, lr}
 800c548:	b084      	sub	sp, #16
 800c54a:	af00      	add	r7, sp, #0
 800c54c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c54e:	2301      	movs	r3, #1
 800c550:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	68db      	ldr	r3, [r3, #12]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d102      	bne.n	800c560 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c55a:	2300      	movs	r3, #0
 800c55c:	73fb      	strb	r3, [r7, #15]
 800c55e:	e008      	b.n	800c572 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	68db      	ldr	r3, [r3, #12]
 800c564:	2b02      	cmp	r3, #2
 800c566:	d102      	bne.n	800c56e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c568:	2301      	movs	r3, #1
 800c56a:	73fb      	strb	r3, [r7, #15]
 800c56c:	e001      	b.n	800c572 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c56e:	f7f5 fb73 	bl	8001c58 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c578:	7bfa      	ldrb	r2, [r7, #15]
 800c57a:	4611      	mov	r1, r2
 800c57c:	4618      	mov	r0, r3
 800c57e:	f7fe fe89 	bl	800b294 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c588:	4618      	mov	r0, r3
 800c58a:	f7fe fe42 	bl	800b212 <USBD_LL_Reset>
}
 800c58e:	bf00      	nop
 800c590:	3710      	adds	r7, #16
 800c592:	46bd      	mov	sp, r7
 800c594:	bd80      	pop	{r7, pc}
	...

0800c598 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b082      	sub	sp, #8
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	f7fe fe84 	bl	800b2b4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	687a      	ldr	r2, [r7, #4]
 800c5b8:	6812      	ldr	r2, [r2, #0]
 800c5ba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c5be:	f043 0301 	orr.w	r3, r3, #1
 800c5c2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	6a1b      	ldr	r3, [r3, #32]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d005      	beq.n	800c5d8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c5cc:	4b04      	ldr	r3, [pc, #16]	; (800c5e0 <HAL_PCD_SuspendCallback+0x48>)
 800c5ce:	691b      	ldr	r3, [r3, #16]
 800c5d0:	4a03      	ldr	r2, [pc, #12]	; (800c5e0 <HAL_PCD_SuspendCallback+0x48>)
 800c5d2:	f043 0306 	orr.w	r3, r3, #6
 800c5d6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c5d8:	bf00      	nop
 800c5da:	3708      	adds	r7, #8
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	bd80      	pop	{r7, pc}
 800c5e0:	e000ed00 	.word	0xe000ed00

0800c5e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b082      	sub	sp, #8
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	f7fe fe73 	bl	800b2de <USBD_LL_Resume>
}
 800c5f8:	bf00      	nop
 800c5fa:	3708      	adds	r7, #8
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	bd80      	pop	{r7, pc}

0800c600 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b082      	sub	sp, #8
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
 800c608:	460b      	mov	r3, r1
 800c60a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c612:	78fa      	ldrb	r2, [r7, #3]
 800c614:	4611      	mov	r1, r2
 800c616:	4618      	mov	r0, r3
 800c618:	f7fe fe99 	bl	800b34e <USBD_LL_IsoOUTIncomplete>
}
 800c61c:	bf00      	nop
 800c61e:	3708      	adds	r7, #8
 800c620:	46bd      	mov	sp, r7
 800c622:	bd80      	pop	{r7, pc}

0800c624 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b082      	sub	sp, #8
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
 800c62c:	460b      	mov	r3, r1
 800c62e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c636:	78fa      	ldrb	r2, [r7, #3]
 800c638:	4611      	mov	r1, r2
 800c63a:	4618      	mov	r0, r3
 800c63c:	f7fe fe7a 	bl	800b334 <USBD_LL_IsoINIncomplete>
}
 800c640:	bf00      	nop
 800c642:	3708      	adds	r7, #8
 800c644:	46bd      	mov	sp, r7
 800c646:	bd80      	pop	{r7, pc}

0800c648 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b082      	sub	sp, #8
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c656:	4618      	mov	r0, r3
 800c658:	f7fe fe86 	bl	800b368 <USBD_LL_DevConnected>
}
 800c65c:	bf00      	nop
 800c65e:	3708      	adds	r7, #8
 800c660:	46bd      	mov	sp, r7
 800c662:	bd80      	pop	{r7, pc}

0800c664 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b082      	sub	sp, #8
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c672:	4618      	mov	r0, r3
 800c674:	f7fe fe83 	bl	800b37e <USBD_LL_DevDisconnected>
}
 800c678:	bf00      	nop
 800c67a:	3708      	adds	r7, #8
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bd80      	pop	{r7, pc}

0800c680 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b082      	sub	sp, #8
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	781b      	ldrb	r3, [r3, #0]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d13c      	bne.n	800c70a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c690:	4a20      	ldr	r2, [pc, #128]	; (800c714 <USBD_LL_Init+0x94>)
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	4a1e      	ldr	r2, [pc, #120]	; (800c714 <USBD_LL_Init+0x94>)
 800c69c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c6a0:	4b1c      	ldr	r3, [pc, #112]	; (800c714 <USBD_LL_Init+0x94>)
 800c6a2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c6a6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c6a8:	4b1a      	ldr	r3, [pc, #104]	; (800c714 <USBD_LL_Init+0x94>)
 800c6aa:	2204      	movs	r2, #4
 800c6ac:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c6ae:	4b19      	ldr	r3, [pc, #100]	; (800c714 <USBD_LL_Init+0x94>)
 800c6b0:	2202      	movs	r2, #2
 800c6b2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c6b4:	4b17      	ldr	r3, [pc, #92]	; (800c714 <USBD_LL_Init+0x94>)
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c6ba:	4b16      	ldr	r3, [pc, #88]	; (800c714 <USBD_LL_Init+0x94>)
 800c6bc:	2202      	movs	r2, #2
 800c6be:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c6c0:	4b14      	ldr	r3, [pc, #80]	; (800c714 <USBD_LL_Init+0x94>)
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c6c6:	4b13      	ldr	r3, [pc, #76]	; (800c714 <USBD_LL_Init+0x94>)
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c6cc:	4b11      	ldr	r3, [pc, #68]	; (800c714 <USBD_LL_Init+0x94>)
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c6d2:	4b10      	ldr	r3, [pc, #64]	; (800c714 <USBD_LL_Init+0x94>)
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c6d8:	4b0e      	ldr	r3, [pc, #56]	; (800c714 <USBD_LL_Init+0x94>)
 800c6da:	2200      	movs	r2, #0
 800c6dc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c6de:	480d      	ldr	r0, [pc, #52]	; (800c714 <USBD_LL_Init+0x94>)
 800c6e0:	f7f6 fe68 	bl	80033b4 <HAL_PCD_Init>
 800c6e4:	4603      	mov	r3, r0
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d001      	beq.n	800c6ee <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c6ea:	f7f5 fab5 	bl	8001c58 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c6ee:	2180      	movs	r1, #128	; 0x80
 800c6f0:	4808      	ldr	r0, [pc, #32]	; (800c714 <USBD_LL_Init+0x94>)
 800c6f2:	f7f7 ffcc 	bl	800468e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c6f6:	2240      	movs	r2, #64	; 0x40
 800c6f8:	2100      	movs	r1, #0
 800c6fa:	4806      	ldr	r0, [pc, #24]	; (800c714 <USBD_LL_Init+0x94>)
 800c6fc:	f7f7 ff80 	bl	8004600 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c700:	2280      	movs	r2, #128	; 0x80
 800c702:	2101      	movs	r1, #1
 800c704:	4803      	ldr	r0, [pc, #12]	; (800c714 <USBD_LL_Init+0x94>)
 800c706:	f7f7 ff7b 	bl	8004600 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c70a:	2300      	movs	r3, #0
}
 800c70c:	4618      	mov	r0, r3
 800c70e:	3708      	adds	r7, #8
 800c710:	46bd      	mov	sp, r7
 800c712:	bd80      	pop	{r7, pc}
 800c714:	2000242c 	.word	0x2000242c

0800c718 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b084      	sub	sp, #16
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c720:	2300      	movs	r3, #0
 800c722:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c724:	2300      	movs	r3, #0
 800c726:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800c72e:	4618      	mov	r0, r3
 800c730:	f7f6 ff5d 	bl	80035ee <HAL_PCD_Start>
 800c734:	4603      	mov	r3, r0
 800c736:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 800c738:	7bfb      	ldrb	r3, [r7, #15]
 800c73a:	4618      	mov	r0, r3
 800c73c:	f000 f92e 	bl	800c99c <USBD_Get_USB_Status>
 800c740:	4603      	mov	r3, r0
 800c742:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800c744:	7bbb      	ldrb	r3, [r7, #14]
}
 800c746:	4618      	mov	r0, r3
 800c748:	3710      	adds	r7, #16
 800c74a:	46bd      	mov	sp, r7
 800c74c:	bd80      	pop	{r7, pc}

0800c74e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c74e:	b580      	push	{r7, lr}
 800c750:	b084      	sub	sp, #16
 800c752:	af00      	add	r7, sp, #0
 800c754:	6078      	str	r0, [r7, #4]
 800c756:	4608      	mov	r0, r1
 800c758:	4611      	mov	r1, r2
 800c75a:	461a      	mov	r2, r3
 800c75c:	4603      	mov	r3, r0
 800c75e:	70fb      	strb	r3, [r7, #3]
 800c760:	460b      	mov	r3, r1
 800c762:	70bb      	strb	r3, [r7, #2]
 800c764:	4613      	mov	r3, r2
 800c766:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c768:	2300      	movs	r3, #0
 800c76a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c76c:	2300      	movs	r3, #0
 800c76e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800c776:	78bb      	ldrb	r3, [r7, #2]
 800c778:	883a      	ldrh	r2, [r7, #0]
 800c77a:	78f9      	ldrb	r1, [r7, #3]
 800c77c:	f7f7 fb32 	bl	8003de4 <HAL_PCD_EP_Open>
 800c780:	4603      	mov	r3, r0
 800c782:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c784:	7bfb      	ldrb	r3, [r7, #15]
 800c786:	4618      	mov	r0, r3
 800c788:	f000 f908 	bl	800c99c <USBD_Get_USB_Status>
 800c78c:	4603      	mov	r3, r0
 800c78e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800c790:	7bbb      	ldrb	r3, [r7, #14]
}
 800c792:	4618      	mov	r0, r3
 800c794:	3710      	adds	r7, #16
 800c796:	46bd      	mov	sp, r7
 800c798:	bd80      	pop	{r7, pc}

0800c79a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c79a:	b580      	push	{r7, lr}
 800c79c:	b084      	sub	sp, #16
 800c79e:	af00      	add	r7, sp, #0
 800c7a0:	6078      	str	r0, [r7, #4]
 800c7a2:	460b      	mov	r3, r1
 800c7a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800c7b4:	78fa      	ldrb	r2, [r7, #3]
 800c7b6:	4611      	mov	r1, r2
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f7f7 fb7b 	bl	8003eb4 <HAL_PCD_EP_Close>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800c7c2:	7bfb      	ldrb	r3, [r7, #15]
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	f000 f8e9 	bl	800c99c <USBD_Get_USB_Status>
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800c7ce:	7bbb      	ldrb	r3, [r7, #14]
}
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	3710      	adds	r7, #16
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	bd80      	pop	{r7, pc}

0800c7d8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b084      	sub	sp, #16
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
 800c7e0:	460b      	mov	r3, r1
 800c7e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800c7f2:	78fa      	ldrb	r2, [r7, #3]
 800c7f4:	4611      	mov	r1, r2
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	f7f7 fc53 	bl	80040a2 <HAL_PCD_EP_SetStall>
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c800:	7bfb      	ldrb	r3, [r7, #15]
 800c802:	4618      	mov	r0, r3
 800c804:	f000 f8ca 	bl	800c99c <USBD_Get_USB_Status>
 800c808:	4603      	mov	r3, r0
 800c80a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800c80c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c80e:	4618      	mov	r0, r3
 800c810:	3710      	adds	r7, #16
 800c812:	46bd      	mov	sp, r7
 800c814:	bd80      	pop	{r7, pc}

0800c816 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c816:	b580      	push	{r7, lr}
 800c818:	b084      	sub	sp, #16
 800c81a:	af00      	add	r7, sp, #0
 800c81c:	6078      	str	r0, [r7, #4]
 800c81e:	460b      	mov	r3, r1
 800c820:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c822:	2300      	movs	r3, #0
 800c824:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c826:	2300      	movs	r3, #0
 800c828:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800c830:	78fa      	ldrb	r2, [r7, #3]
 800c832:	4611      	mov	r1, r2
 800c834:	4618      	mov	r0, r3
 800c836:	f7f7 fc98 	bl	800416a <HAL_PCD_EP_ClrStall>
 800c83a:	4603      	mov	r3, r0
 800c83c:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800c83e:	7bfb      	ldrb	r3, [r7, #15]
 800c840:	4618      	mov	r0, r3
 800c842:	f000 f8ab 	bl	800c99c <USBD_Get_USB_Status>
 800c846:	4603      	mov	r3, r0
 800c848:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800c84a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c84c:	4618      	mov	r0, r3
 800c84e:	3710      	adds	r7, #16
 800c850:	46bd      	mov	sp, r7
 800c852:	bd80      	pop	{r7, pc}

0800c854 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c854:	b480      	push	{r7}
 800c856:	b085      	sub	sp, #20
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
 800c85c:	460b      	mov	r3, r1
 800c85e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800c866:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800c868:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	da0b      	bge.n	800c888 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800c870:	78fb      	ldrb	r3, [r7, #3]
 800c872:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c876:	68f9      	ldr	r1, [r7, #12]
 800c878:	4613      	mov	r3, r2
 800c87a:	00db      	lsls	r3, r3, #3
 800c87c:	1a9b      	subs	r3, r3, r2
 800c87e:	009b      	lsls	r3, r3, #2
 800c880:	440b      	add	r3, r1
 800c882:	333e      	adds	r3, #62	; 0x3e
 800c884:	781b      	ldrb	r3, [r3, #0]
 800c886:	e00b      	b.n	800c8a0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800c888:	78fb      	ldrb	r3, [r7, #3]
 800c88a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c88e:	68f9      	ldr	r1, [r7, #12]
 800c890:	4613      	mov	r3, r2
 800c892:	00db      	lsls	r3, r3, #3
 800c894:	1a9b      	subs	r3, r3, r2
 800c896:	009b      	lsls	r3, r3, #2
 800c898:	440b      	add	r3, r1
 800c89a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c89e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	3714      	adds	r7, #20
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8aa:	4770      	bx	lr

0800c8ac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b084      	sub	sp, #16
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
 800c8b4:	460b      	mov	r3, r1
 800c8b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c8bc:	2300      	movs	r3, #0
 800c8be:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800c8c6:	78fa      	ldrb	r2, [r7, #3]
 800c8c8:	4611      	mov	r1, r2
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	f7f7 fa65 	bl	8003d9a <HAL_PCD_SetAddress>
 800c8d0:	4603      	mov	r3, r0
 800c8d2:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 800c8d4:	7bfb      	ldrb	r3, [r7, #15]
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	f000 f860 	bl	800c99c <USBD_Get_USB_Status>
 800c8dc:	4603      	mov	r3, r0
 800c8de:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800c8e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	3710      	adds	r7, #16
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	bd80      	pop	{r7, pc}

0800c8ea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c8ea:	b580      	push	{r7, lr}
 800c8ec:	b086      	sub	sp, #24
 800c8ee:	af00      	add	r7, sp, #0
 800c8f0:	60f8      	str	r0, [r7, #12]
 800c8f2:	607a      	str	r2, [r7, #4]
 800c8f4:	461a      	mov	r2, r3
 800c8f6:	460b      	mov	r3, r1
 800c8f8:	72fb      	strb	r3, [r7, #11]
 800c8fa:	4613      	mov	r3, r2
 800c8fc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8fe:	2300      	movs	r3, #0
 800c900:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c902:	2300      	movs	r3, #0
 800c904:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800c90c:	893b      	ldrh	r3, [r7, #8]
 800c90e:	7af9      	ldrb	r1, [r7, #11]
 800c910:	687a      	ldr	r2, [r7, #4]
 800c912:	f7f7 fb7c 	bl	800400e <HAL_PCD_EP_Transmit>
 800c916:	4603      	mov	r3, r0
 800c918:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800c91a:	7dfb      	ldrb	r3, [r7, #23]
 800c91c:	4618      	mov	r0, r3
 800c91e:	f000 f83d 	bl	800c99c <USBD_Get_USB_Status>
 800c922:	4603      	mov	r3, r0
 800c924:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800c926:	7dbb      	ldrb	r3, [r7, #22]
}
 800c928:	4618      	mov	r0, r3
 800c92a:	3718      	adds	r7, #24
 800c92c:	46bd      	mov	sp, r7
 800c92e:	bd80      	pop	{r7, pc}

0800c930 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b086      	sub	sp, #24
 800c934:	af00      	add	r7, sp, #0
 800c936:	60f8      	str	r0, [r7, #12]
 800c938:	607a      	str	r2, [r7, #4]
 800c93a:	461a      	mov	r2, r3
 800c93c:	460b      	mov	r3, r1
 800c93e:	72fb      	strb	r3, [r7, #11]
 800c940:	4613      	mov	r3, r2
 800c942:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c944:	2300      	movs	r3, #0
 800c946:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c948:	2300      	movs	r3, #0
 800c94a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800c952:	893b      	ldrh	r3, [r7, #8]
 800c954:	7af9      	ldrb	r1, [r7, #11]
 800c956:	687a      	ldr	r2, [r7, #4]
 800c958:	f7f7 faf6 	bl	8003f48 <HAL_PCD_EP_Receive>
 800c95c:	4603      	mov	r3, r0
 800c95e:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800c960:	7dfb      	ldrb	r3, [r7, #23]
 800c962:	4618      	mov	r0, r3
 800c964:	f000 f81a 	bl	800c99c <USBD_Get_USB_Status>
 800c968:	4603      	mov	r3, r0
 800c96a:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 800c96c:	7dbb      	ldrb	r3, [r7, #22]
}
 800c96e:	4618      	mov	r0, r3
 800c970:	3718      	adds	r7, #24
 800c972:	46bd      	mov	sp, r7
 800c974:	bd80      	pop	{r7, pc}

0800c976 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c976:	b580      	push	{r7, lr}
 800c978:	b082      	sub	sp, #8
 800c97a:	af00      	add	r7, sp, #0
 800c97c:	6078      	str	r0, [r7, #4]
 800c97e:	460b      	mov	r3, r1
 800c980:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800c988:	78fa      	ldrb	r2, [r7, #3]
 800c98a:	4611      	mov	r1, r2
 800c98c:	4618      	mov	r0, r3
 800c98e:	f7f7 fb26 	bl	8003fde <HAL_PCD_EP_GetRxCount>
 800c992:	4603      	mov	r3, r0
}
 800c994:	4618      	mov	r0, r3
 800c996:	3708      	adds	r7, #8
 800c998:	46bd      	mov	sp, r7
 800c99a:	bd80      	pop	{r7, pc}

0800c99c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c99c:	b480      	push	{r7}
 800c99e:	b085      	sub	sp, #20
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c9aa:	79fb      	ldrb	r3, [r7, #7]
 800c9ac:	2b03      	cmp	r3, #3
 800c9ae:	d817      	bhi.n	800c9e0 <USBD_Get_USB_Status+0x44>
 800c9b0:	a201      	add	r2, pc, #4	; (adr r2, 800c9b8 <USBD_Get_USB_Status+0x1c>)
 800c9b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9b6:	bf00      	nop
 800c9b8:	0800c9c9 	.word	0x0800c9c9
 800c9bc:	0800c9cf 	.word	0x0800c9cf
 800c9c0:	0800c9d5 	.word	0x0800c9d5
 800c9c4:	0800c9db 	.word	0x0800c9db
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	73fb      	strb	r3, [r7, #15]
    break;
 800c9cc:	e00b      	b.n	800c9e6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c9ce:	2302      	movs	r3, #2
 800c9d0:	73fb      	strb	r3, [r7, #15]
    break;
 800c9d2:	e008      	b.n	800c9e6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c9d4:	2301      	movs	r3, #1
 800c9d6:	73fb      	strb	r3, [r7, #15]
    break;
 800c9d8:	e005      	b.n	800c9e6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c9da:	2302      	movs	r3, #2
 800c9dc:	73fb      	strb	r3, [r7, #15]
    break;
 800c9de:	e002      	b.n	800c9e6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c9e0:	2302      	movs	r3, #2
 800c9e2:	73fb      	strb	r3, [r7, #15]
    break;
 800c9e4:	bf00      	nop
  }
  return usb_status;
 800c9e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	3714      	adds	r7, #20
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f2:	4770      	bx	lr

0800c9f4 <__libc_init_array>:
 800c9f4:	b570      	push	{r4, r5, r6, lr}
 800c9f6:	4e0d      	ldr	r6, [pc, #52]	; (800ca2c <__libc_init_array+0x38>)
 800c9f8:	4c0d      	ldr	r4, [pc, #52]	; (800ca30 <__libc_init_array+0x3c>)
 800c9fa:	1ba4      	subs	r4, r4, r6
 800c9fc:	10a4      	asrs	r4, r4, #2
 800c9fe:	2500      	movs	r5, #0
 800ca00:	42a5      	cmp	r5, r4
 800ca02:	d109      	bne.n	800ca18 <__libc_init_array+0x24>
 800ca04:	4e0b      	ldr	r6, [pc, #44]	; (800ca34 <__libc_init_array+0x40>)
 800ca06:	4c0c      	ldr	r4, [pc, #48]	; (800ca38 <__libc_init_array+0x44>)
 800ca08:	f003 fd70 	bl	80104ec <_init>
 800ca0c:	1ba4      	subs	r4, r4, r6
 800ca0e:	10a4      	asrs	r4, r4, #2
 800ca10:	2500      	movs	r5, #0
 800ca12:	42a5      	cmp	r5, r4
 800ca14:	d105      	bne.n	800ca22 <__libc_init_array+0x2e>
 800ca16:	bd70      	pop	{r4, r5, r6, pc}
 800ca18:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ca1c:	4798      	blx	r3
 800ca1e:	3501      	adds	r5, #1
 800ca20:	e7ee      	b.n	800ca00 <__libc_init_array+0xc>
 800ca22:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ca26:	4798      	blx	r3
 800ca28:	3501      	adds	r5, #1
 800ca2a:	e7f2      	b.n	800ca12 <__libc_init_array+0x1e>
 800ca2c:	08010988 	.word	0x08010988
 800ca30:	08010988 	.word	0x08010988
 800ca34:	08010988 	.word	0x08010988
 800ca38:	0801098c 	.word	0x0801098c

0800ca3c <malloc>:
 800ca3c:	4b02      	ldr	r3, [pc, #8]	; (800ca48 <malloc+0xc>)
 800ca3e:	4601      	mov	r1, r0
 800ca40:	6818      	ldr	r0, [r3, #0]
 800ca42:	f000 b86d 	b.w	800cb20 <_malloc_r>
 800ca46:	bf00      	nop
 800ca48:	20000180 	.word	0x20000180

0800ca4c <free>:
 800ca4c:	4b02      	ldr	r3, [pc, #8]	; (800ca58 <free+0xc>)
 800ca4e:	4601      	mov	r1, r0
 800ca50:	6818      	ldr	r0, [r3, #0]
 800ca52:	f000 b817 	b.w	800ca84 <_free_r>
 800ca56:	bf00      	nop
 800ca58:	20000180 	.word	0x20000180

0800ca5c <memcpy>:
 800ca5c:	b510      	push	{r4, lr}
 800ca5e:	1e43      	subs	r3, r0, #1
 800ca60:	440a      	add	r2, r1
 800ca62:	4291      	cmp	r1, r2
 800ca64:	d100      	bne.n	800ca68 <memcpy+0xc>
 800ca66:	bd10      	pop	{r4, pc}
 800ca68:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca70:	e7f7      	b.n	800ca62 <memcpy+0x6>

0800ca72 <memset>:
 800ca72:	4402      	add	r2, r0
 800ca74:	4603      	mov	r3, r0
 800ca76:	4293      	cmp	r3, r2
 800ca78:	d100      	bne.n	800ca7c <memset+0xa>
 800ca7a:	4770      	bx	lr
 800ca7c:	f803 1b01 	strb.w	r1, [r3], #1
 800ca80:	e7f9      	b.n	800ca76 <memset+0x4>
	...

0800ca84 <_free_r>:
 800ca84:	b538      	push	{r3, r4, r5, lr}
 800ca86:	4605      	mov	r5, r0
 800ca88:	2900      	cmp	r1, #0
 800ca8a:	d045      	beq.n	800cb18 <_free_r+0x94>
 800ca8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca90:	1f0c      	subs	r4, r1, #4
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	bfb8      	it	lt
 800ca96:	18e4      	addlt	r4, r4, r3
 800ca98:	f002 ff52 	bl	800f940 <__malloc_lock>
 800ca9c:	4a1f      	ldr	r2, [pc, #124]	; (800cb1c <_free_r+0x98>)
 800ca9e:	6813      	ldr	r3, [r2, #0]
 800caa0:	4610      	mov	r0, r2
 800caa2:	b933      	cbnz	r3, 800cab2 <_free_r+0x2e>
 800caa4:	6063      	str	r3, [r4, #4]
 800caa6:	6014      	str	r4, [r2, #0]
 800caa8:	4628      	mov	r0, r5
 800caaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800caae:	f002 bf48 	b.w	800f942 <__malloc_unlock>
 800cab2:	42a3      	cmp	r3, r4
 800cab4:	d90c      	bls.n	800cad0 <_free_r+0x4c>
 800cab6:	6821      	ldr	r1, [r4, #0]
 800cab8:	1862      	adds	r2, r4, r1
 800caba:	4293      	cmp	r3, r2
 800cabc:	bf04      	itt	eq
 800cabe:	681a      	ldreq	r2, [r3, #0]
 800cac0:	685b      	ldreq	r3, [r3, #4]
 800cac2:	6063      	str	r3, [r4, #4]
 800cac4:	bf04      	itt	eq
 800cac6:	1852      	addeq	r2, r2, r1
 800cac8:	6022      	streq	r2, [r4, #0]
 800caca:	6004      	str	r4, [r0, #0]
 800cacc:	e7ec      	b.n	800caa8 <_free_r+0x24>
 800cace:	4613      	mov	r3, r2
 800cad0:	685a      	ldr	r2, [r3, #4]
 800cad2:	b10a      	cbz	r2, 800cad8 <_free_r+0x54>
 800cad4:	42a2      	cmp	r2, r4
 800cad6:	d9fa      	bls.n	800cace <_free_r+0x4a>
 800cad8:	6819      	ldr	r1, [r3, #0]
 800cada:	1858      	adds	r0, r3, r1
 800cadc:	42a0      	cmp	r0, r4
 800cade:	d10b      	bne.n	800caf8 <_free_r+0x74>
 800cae0:	6820      	ldr	r0, [r4, #0]
 800cae2:	4401      	add	r1, r0
 800cae4:	1858      	adds	r0, r3, r1
 800cae6:	4282      	cmp	r2, r0
 800cae8:	6019      	str	r1, [r3, #0]
 800caea:	d1dd      	bne.n	800caa8 <_free_r+0x24>
 800caec:	6810      	ldr	r0, [r2, #0]
 800caee:	6852      	ldr	r2, [r2, #4]
 800caf0:	605a      	str	r2, [r3, #4]
 800caf2:	4401      	add	r1, r0
 800caf4:	6019      	str	r1, [r3, #0]
 800caf6:	e7d7      	b.n	800caa8 <_free_r+0x24>
 800caf8:	d902      	bls.n	800cb00 <_free_r+0x7c>
 800cafa:	230c      	movs	r3, #12
 800cafc:	602b      	str	r3, [r5, #0]
 800cafe:	e7d3      	b.n	800caa8 <_free_r+0x24>
 800cb00:	6820      	ldr	r0, [r4, #0]
 800cb02:	1821      	adds	r1, r4, r0
 800cb04:	428a      	cmp	r2, r1
 800cb06:	bf04      	itt	eq
 800cb08:	6811      	ldreq	r1, [r2, #0]
 800cb0a:	6852      	ldreq	r2, [r2, #4]
 800cb0c:	6062      	str	r2, [r4, #4]
 800cb0e:	bf04      	itt	eq
 800cb10:	1809      	addeq	r1, r1, r0
 800cb12:	6021      	streq	r1, [r4, #0]
 800cb14:	605c      	str	r4, [r3, #4]
 800cb16:	e7c7      	b.n	800caa8 <_free_r+0x24>
 800cb18:	bd38      	pop	{r3, r4, r5, pc}
 800cb1a:	bf00      	nop
 800cb1c:	20000588 	.word	0x20000588

0800cb20 <_malloc_r>:
 800cb20:	b570      	push	{r4, r5, r6, lr}
 800cb22:	1ccd      	adds	r5, r1, #3
 800cb24:	f025 0503 	bic.w	r5, r5, #3
 800cb28:	3508      	adds	r5, #8
 800cb2a:	2d0c      	cmp	r5, #12
 800cb2c:	bf38      	it	cc
 800cb2e:	250c      	movcc	r5, #12
 800cb30:	2d00      	cmp	r5, #0
 800cb32:	4606      	mov	r6, r0
 800cb34:	db01      	blt.n	800cb3a <_malloc_r+0x1a>
 800cb36:	42a9      	cmp	r1, r5
 800cb38:	d903      	bls.n	800cb42 <_malloc_r+0x22>
 800cb3a:	230c      	movs	r3, #12
 800cb3c:	6033      	str	r3, [r6, #0]
 800cb3e:	2000      	movs	r0, #0
 800cb40:	bd70      	pop	{r4, r5, r6, pc}
 800cb42:	f002 fefd 	bl	800f940 <__malloc_lock>
 800cb46:	4a21      	ldr	r2, [pc, #132]	; (800cbcc <_malloc_r+0xac>)
 800cb48:	6814      	ldr	r4, [r2, #0]
 800cb4a:	4621      	mov	r1, r4
 800cb4c:	b991      	cbnz	r1, 800cb74 <_malloc_r+0x54>
 800cb4e:	4c20      	ldr	r4, [pc, #128]	; (800cbd0 <_malloc_r+0xb0>)
 800cb50:	6823      	ldr	r3, [r4, #0]
 800cb52:	b91b      	cbnz	r3, 800cb5c <_malloc_r+0x3c>
 800cb54:	4630      	mov	r0, r6
 800cb56:	f000 fe7b 	bl	800d850 <_sbrk_r>
 800cb5a:	6020      	str	r0, [r4, #0]
 800cb5c:	4629      	mov	r1, r5
 800cb5e:	4630      	mov	r0, r6
 800cb60:	f000 fe76 	bl	800d850 <_sbrk_r>
 800cb64:	1c43      	adds	r3, r0, #1
 800cb66:	d124      	bne.n	800cbb2 <_malloc_r+0x92>
 800cb68:	230c      	movs	r3, #12
 800cb6a:	6033      	str	r3, [r6, #0]
 800cb6c:	4630      	mov	r0, r6
 800cb6e:	f002 fee8 	bl	800f942 <__malloc_unlock>
 800cb72:	e7e4      	b.n	800cb3e <_malloc_r+0x1e>
 800cb74:	680b      	ldr	r3, [r1, #0]
 800cb76:	1b5b      	subs	r3, r3, r5
 800cb78:	d418      	bmi.n	800cbac <_malloc_r+0x8c>
 800cb7a:	2b0b      	cmp	r3, #11
 800cb7c:	d90f      	bls.n	800cb9e <_malloc_r+0x7e>
 800cb7e:	600b      	str	r3, [r1, #0]
 800cb80:	50cd      	str	r5, [r1, r3]
 800cb82:	18cc      	adds	r4, r1, r3
 800cb84:	4630      	mov	r0, r6
 800cb86:	f002 fedc 	bl	800f942 <__malloc_unlock>
 800cb8a:	f104 000b 	add.w	r0, r4, #11
 800cb8e:	1d23      	adds	r3, r4, #4
 800cb90:	f020 0007 	bic.w	r0, r0, #7
 800cb94:	1ac3      	subs	r3, r0, r3
 800cb96:	d0d3      	beq.n	800cb40 <_malloc_r+0x20>
 800cb98:	425a      	negs	r2, r3
 800cb9a:	50e2      	str	r2, [r4, r3]
 800cb9c:	e7d0      	b.n	800cb40 <_malloc_r+0x20>
 800cb9e:	428c      	cmp	r4, r1
 800cba0:	684b      	ldr	r3, [r1, #4]
 800cba2:	bf16      	itet	ne
 800cba4:	6063      	strne	r3, [r4, #4]
 800cba6:	6013      	streq	r3, [r2, #0]
 800cba8:	460c      	movne	r4, r1
 800cbaa:	e7eb      	b.n	800cb84 <_malloc_r+0x64>
 800cbac:	460c      	mov	r4, r1
 800cbae:	6849      	ldr	r1, [r1, #4]
 800cbb0:	e7cc      	b.n	800cb4c <_malloc_r+0x2c>
 800cbb2:	1cc4      	adds	r4, r0, #3
 800cbb4:	f024 0403 	bic.w	r4, r4, #3
 800cbb8:	42a0      	cmp	r0, r4
 800cbba:	d005      	beq.n	800cbc8 <_malloc_r+0xa8>
 800cbbc:	1a21      	subs	r1, r4, r0
 800cbbe:	4630      	mov	r0, r6
 800cbc0:	f000 fe46 	bl	800d850 <_sbrk_r>
 800cbc4:	3001      	adds	r0, #1
 800cbc6:	d0cf      	beq.n	800cb68 <_malloc_r+0x48>
 800cbc8:	6025      	str	r5, [r4, #0]
 800cbca:	e7db      	b.n	800cb84 <_malloc_r+0x64>
 800cbcc:	20000588 	.word	0x20000588
 800cbd0:	2000058c 	.word	0x2000058c

0800cbd4 <__cvt>:
 800cbd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cbd8:	ec55 4b10 	vmov	r4, r5, d0
 800cbdc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800cbde:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800cbe2:	2d00      	cmp	r5, #0
 800cbe4:	460e      	mov	r6, r1
 800cbe6:	4691      	mov	r9, r2
 800cbe8:	4619      	mov	r1, r3
 800cbea:	bfb8      	it	lt
 800cbec:	4622      	movlt	r2, r4
 800cbee:	462b      	mov	r3, r5
 800cbf0:	f027 0720 	bic.w	r7, r7, #32
 800cbf4:	bfbb      	ittet	lt
 800cbf6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800cbfa:	461d      	movlt	r5, r3
 800cbfc:	2300      	movge	r3, #0
 800cbfe:	232d      	movlt	r3, #45	; 0x2d
 800cc00:	bfb8      	it	lt
 800cc02:	4614      	movlt	r4, r2
 800cc04:	2f46      	cmp	r7, #70	; 0x46
 800cc06:	700b      	strb	r3, [r1, #0]
 800cc08:	d004      	beq.n	800cc14 <__cvt+0x40>
 800cc0a:	2f45      	cmp	r7, #69	; 0x45
 800cc0c:	d100      	bne.n	800cc10 <__cvt+0x3c>
 800cc0e:	3601      	adds	r6, #1
 800cc10:	2102      	movs	r1, #2
 800cc12:	e000      	b.n	800cc16 <__cvt+0x42>
 800cc14:	2103      	movs	r1, #3
 800cc16:	ab03      	add	r3, sp, #12
 800cc18:	9301      	str	r3, [sp, #4]
 800cc1a:	ab02      	add	r3, sp, #8
 800cc1c:	9300      	str	r3, [sp, #0]
 800cc1e:	4632      	mov	r2, r6
 800cc20:	4653      	mov	r3, sl
 800cc22:	ec45 4b10 	vmov	d0, r4, r5
 800cc26:	f001 fd87 	bl	800e738 <_dtoa_r>
 800cc2a:	2f47      	cmp	r7, #71	; 0x47
 800cc2c:	4680      	mov	r8, r0
 800cc2e:	d102      	bne.n	800cc36 <__cvt+0x62>
 800cc30:	f019 0f01 	tst.w	r9, #1
 800cc34:	d026      	beq.n	800cc84 <__cvt+0xb0>
 800cc36:	2f46      	cmp	r7, #70	; 0x46
 800cc38:	eb08 0906 	add.w	r9, r8, r6
 800cc3c:	d111      	bne.n	800cc62 <__cvt+0x8e>
 800cc3e:	f898 3000 	ldrb.w	r3, [r8]
 800cc42:	2b30      	cmp	r3, #48	; 0x30
 800cc44:	d10a      	bne.n	800cc5c <__cvt+0x88>
 800cc46:	2200      	movs	r2, #0
 800cc48:	2300      	movs	r3, #0
 800cc4a:	4620      	mov	r0, r4
 800cc4c:	4629      	mov	r1, r5
 800cc4e:	f7f3 ff3b 	bl	8000ac8 <__aeabi_dcmpeq>
 800cc52:	b918      	cbnz	r0, 800cc5c <__cvt+0x88>
 800cc54:	f1c6 0601 	rsb	r6, r6, #1
 800cc58:	f8ca 6000 	str.w	r6, [sl]
 800cc5c:	f8da 3000 	ldr.w	r3, [sl]
 800cc60:	4499      	add	r9, r3
 800cc62:	2200      	movs	r2, #0
 800cc64:	2300      	movs	r3, #0
 800cc66:	4620      	mov	r0, r4
 800cc68:	4629      	mov	r1, r5
 800cc6a:	f7f3 ff2d 	bl	8000ac8 <__aeabi_dcmpeq>
 800cc6e:	b938      	cbnz	r0, 800cc80 <__cvt+0xac>
 800cc70:	2230      	movs	r2, #48	; 0x30
 800cc72:	9b03      	ldr	r3, [sp, #12]
 800cc74:	454b      	cmp	r3, r9
 800cc76:	d205      	bcs.n	800cc84 <__cvt+0xb0>
 800cc78:	1c59      	adds	r1, r3, #1
 800cc7a:	9103      	str	r1, [sp, #12]
 800cc7c:	701a      	strb	r2, [r3, #0]
 800cc7e:	e7f8      	b.n	800cc72 <__cvt+0x9e>
 800cc80:	f8cd 900c 	str.w	r9, [sp, #12]
 800cc84:	9b03      	ldr	r3, [sp, #12]
 800cc86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cc88:	eba3 0308 	sub.w	r3, r3, r8
 800cc8c:	4640      	mov	r0, r8
 800cc8e:	6013      	str	r3, [r2, #0]
 800cc90:	b004      	add	sp, #16
 800cc92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800cc96 <__exponent>:
 800cc96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cc98:	2900      	cmp	r1, #0
 800cc9a:	4604      	mov	r4, r0
 800cc9c:	bfba      	itte	lt
 800cc9e:	4249      	neglt	r1, r1
 800cca0:	232d      	movlt	r3, #45	; 0x2d
 800cca2:	232b      	movge	r3, #43	; 0x2b
 800cca4:	2909      	cmp	r1, #9
 800cca6:	f804 2b02 	strb.w	r2, [r4], #2
 800ccaa:	7043      	strb	r3, [r0, #1]
 800ccac:	dd20      	ble.n	800ccf0 <__exponent+0x5a>
 800ccae:	f10d 0307 	add.w	r3, sp, #7
 800ccb2:	461f      	mov	r7, r3
 800ccb4:	260a      	movs	r6, #10
 800ccb6:	fb91 f5f6 	sdiv	r5, r1, r6
 800ccba:	fb06 1115 	mls	r1, r6, r5, r1
 800ccbe:	3130      	adds	r1, #48	; 0x30
 800ccc0:	2d09      	cmp	r5, #9
 800ccc2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ccc6:	f103 32ff 	add.w	r2, r3, #4294967295
 800ccca:	4629      	mov	r1, r5
 800cccc:	dc09      	bgt.n	800cce2 <__exponent+0x4c>
 800ccce:	3130      	adds	r1, #48	; 0x30
 800ccd0:	3b02      	subs	r3, #2
 800ccd2:	f802 1c01 	strb.w	r1, [r2, #-1]
 800ccd6:	42bb      	cmp	r3, r7
 800ccd8:	4622      	mov	r2, r4
 800ccda:	d304      	bcc.n	800cce6 <__exponent+0x50>
 800ccdc:	1a10      	subs	r0, r2, r0
 800ccde:	b003      	add	sp, #12
 800cce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cce2:	4613      	mov	r3, r2
 800cce4:	e7e7      	b.n	800ccb6 <__exponent+0x20>
 800cce6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ccea:	f804 2b01 	strb.w	r2, [r4], #1
 800ccee:	e7f2      	b.n	800ccd6 <__exponent+0x40>
 800ccf0:	2330      	movs	r3, #48	; 0x30
 800ccf2:	4419      	add	r1, r3
 800ccf4:	7083      	strb	r3, [r0, #2]
 800ccf6:	1d02      	adds	r2, r0, #4
 800ccf8:	70c1      	strb	r1, [r0, #3]
 800ccfa:	e7ef      	b.n	800ccdc <__exponent+0x46>

0800ccfc <_printf_float>:
 800ccfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd00:	b08d      	sub	sp, #52	; 0x34
 800cd02:	460c      	mov	r4, r1
 800cd04:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800cd08:	4616      	mov	r6, r2
 800cd0a:	461f      	mov	r7, r3
 800cd0c:	4605      	mov	r5, r0
 800cd0e:	f002 fdf7 	bl	800f900 <_localeconv_r>
 800cd12:	6803      	ldr	r3, [r0, #0]
 800cd14:	9304      	str	r3, [sp, #16]
 800cd16:	4618      	mov	r0, r3
 800cd18:	f7f3 fa5a 	bl	80001d0 <strlen>
 800cd1c:	2300      	movs	r3, #0
 800cd1e:	930a      	str	r3, [sp, #40]	; 0x28
 800cd20:	f8d8 3000 	ldr.w	r3, [r8]
 800cd24:	9005      	str	r0, [sp, #20]
 800cd26:	3307      	adds	r3, #7
 800cd28:	f023 0307 	bic.w	r3, r3, #7
 800cd2c:	f103 0208 	add.w	r2, r3, #8
 800cd30:	f894 a018 	ldrb.w	sl, [r4, #24]
 800cd34:	f8d4 b000 	ldr.w	fp, [r4]
 800cd38:	f8c8 2000 	str.w	r2, [r8]
 800cd3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd40:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800cd44:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800cd48:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cd4c:	9307      	str	r3, [sp, #28]
 800cd4e:	f8cd 8018 	str.w	r8, [sp, #24]
 800cd52:	f04f 32ff 	mov.w	r2, #4294967295
 800cd56:	4ba7      	ldr	r3, [pc, #668]	; (800cff4 <_printf_float+0x2f8>)
 800cd58:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cd5c:	f7f3 fee6 	bl	8000b2c <__aeabi_dcmpun>
 800cd60:	bb70      	cbnz	r0, 800cdc0 <_printf_float+0xc4>
 800cd62:	f04f 32ff 	mov.w	r2, #4294967295
 800cd66:	4ba3      	ldr	r3, [pc, #652]	; (800cff4 <_printf_float+0x2f8>)
 800cd68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cd6c:	f7f3 fec0 	bl	8000af0 <__aeabi_dcmple>
 800cd70:	bb30      	cbnz	r0, 800cdc0 <_printf_float+0xc4>
 800cd72:	2200      	movs	r2, #0
 800cd74:	2300      	movs	r3, #0
 800cd76:	4640      	mov	r0, r8
 800cd78:	4649      	mov	r1, r9
 800cd7a:	f7f3 feaf 	bl	8000adc <__aeabi_dcmplt>
 800cd7e:	b110      	cbz	r0, 800cd86 <_printf_float+0x8a>
 800cd80:	232d      	movs	r3, #45	; 0x2d
 800cd82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd86:	4a9c      	ldr	r2, [pc, #624]	; (800cff8 <_printf_float+0x2fc>)
 800cd88:	4b9c      	ldr	r3, [pc, #624]	; (800cffc <_printf_float+0x300>)
 800cd8a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800cd8e:	bf8c      	ite	hi
 800cd90:	4690      	movhi	r8, r2
 800cd92:	4698      	movls	r8, r3
 800cd94:	2303      	movs	r3, #3
 800cd96:	f02b 0204 	bic.w	r2, fp, #4
 800cd9a:	6123      	str	r3, [r4, #16]
 800cd9c:	6022      	str	r2, [r4, #0]
 800cd9e:	f04f 0900 	mov.w	r9, #0
 800cda2:	9700      	str	r7, [sp, #0]
 800cda4:	4633      	mov	r3, r6
 800cda6:	aa0b      	add	r2, sp, #44	; 0x2c
 800cda8:	4621      	mov	r1, r4
 800cdaa:	4628      	mov	r0, r5
 800cdac:	f000 f9e6 	bl	800d17c <_printf_common>
 800cdb0:	3001      	adds	r0, #1
 800cdb2:	f040 808d 	bne.w	800ced0 <_printf_float+0x1d4>
 800cdb6:	f04f 30ff 	mov.w	r0, #4294967295
 800cdba:	b00d      	add	sp, #52	; 0x34
 800cdbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdc0:	4642      	mov	r2, r8
 800cdc2:	464b      	mov	r3, r9
 800cdc4:	4640      	mov	r0, r8
 800cdc6:	4649      	mov	r1, r9
 800cdc8:	f7f3 feb0 	bl	8000b2c <__aeabi_dcmpun>
 800cdcc:	b110      	cbz	r0, 800cdd4 <_printf_float+0xd8>
 800cdce:	4a8c      	ldr	r2, [pc, #560]	; (800d000 <_printf_float+0x304>)
 800cdd0:	4b8c      	ldr	r3, [pc, #560]	; (800d004 <_printf_float+0x308>)
 800cdd2:	e7da      	b.n	800cd8a <_printf_float+0x8e>
 800cdd4:	6861      	ldr	r1, [r4, #4]
 800cdd6:	1c4b      	adds	r3, r1, #1
 800cdd8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800cddc:	a80a      	add	r0, sp, #40	; 0x28
 800cdde:	d13e      	bne.n	800ce5e <_printf_float+0x162>
 800cde0:	2306      	movs	r3, #6
 800cde2:	6063      	str	r3, [r4, #4]
 800cde4:	2300      	movs	r3, #0
 800cde6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800cdea:	ab09      	add	r3, sp, #36	; 0x24
 800cdec:	9300      	str	r3, [sp, #0]
 800cdee:	ec49 8b10 	vmov	d0, r8, r9
 800cdf2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cdf6:	6022      	str	r2, [r4, #0]
 800cdf8:	f8cd a004 	str.w	sl, [sp, #4]
 800cdfc:	6861      	ldr	r1, [r4, #4]
 800cdfe:	4628      	mov	r0, r5
 800ce00:	f7ff fee8 	bl	800cbd4 <__cvt>
 800ce04:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800ce08:	2b47      	cmp	r3, #71	; 0x47
 800ce0a:	4680      	mov	r8, r0
 800ce0c:	d109      	bne.n	800ce22 <_printf_float+0x126>
 800ce0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce10:	1cd8      	adds	r0, r3, #3
 800ce12:	db02      	blt.n	800ce1a <_printf_float+0x11e>
 800ce14:	6862      	ldr	r2, [r4, #4]
 800ce16:	4293      	cmp	r3, r2
 800ce18:	dd47      	ble.n	800ceaa <_printf_float+0x1ae>
 800ce1a:	f1aa 0a02 	sub.w	sl, sl, #2
 800ce1e:	fa5f fa8a 	uxtb.w	sl, sl
 800ce22:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800ce26:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ce28:	d824      	bhi.n	800ce74 <_printf_float+0x178>
 800ce2a:	3901      	subs	r1, #1
 800ce2c:	4652      	mov	r2, sl
 800ce2e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ce32:	9109      	str	r1, [sp, #36]	; 0x24
 800ce34:	f7ff ff2f 	bl	800cc96 <__exponent>
 800ce38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce3a:	1813      	adds	r3, r2, r0
 800ce3c:	2a01      	cmp	r2, #1
 800ce3e:	4681      	mov	r9, r0
 800ce40:	6123      	str	r3, [r4, #16]
 800ce42:	dc02      	bgt.n	800ce4a <_printf_float+0x14e>
 800ce44:	6822      	ldr	r2, [r4, #0]
 800ce46:	07d1      	lsls	r1, r2, #31
 800ce48:	d501      	bpl.n	800ce4e <_printf_float+0x152>
 800ce4a:	3301      	adds	r3, #1
 800ce4c:	6123      	str	r3, [r4, #16]
 800ce4e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d0a5      	beq.n	800cda2 <_printf_float+0xa6>
 800ce56:	232d      	movs	r3, #45	; 0x2d
 800ce58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce5c:	e7a1      	b.n	800cda2 <_printf_float+0xa6>
 800ce5e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800ce62:	f000 8177 	beq.w	800d154 <_printf_float+0x458>
 800ce66:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800ce6a:	d1bb      	bne.n	800cde4 <_printf_float+0xe8>
 800ce6c:	2900      	cmp	r1, #0
 800ce6e:	d1b9      	bne.n	800cde4 <_printf_float+0xe8>
 800ce70:	2301      	movs	r3, #1
 800ce72:	e7b6      	b.n	800cde2 <_printf_float+0xe6>
 800ce74:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800ce78:	d119      	bne.n	800ceae <_printf_float+0x1b2>
 800ce7a:	2900      	cmp	r1, #0
 800ce7c:	6863      	ldr	r3, [r4, #4]
 800ce7e:	dd0c      	ble.n	800ce9a <_printf_float+0x19e>
 800ce80:	6121      	str	r1, [r4, #16]
 800ce82:	b913      	cbnz	r3, 800ce8a <_printf_float+0x18e>
 800ce84:	6822      	ldr	r2, [r4, #0]
 800ce86:	07d2      	lsls	r2, r2, #31
 800ce88:	d502      	bpl.n	800ce90 <_printf_float+0x194>
 800ce8a:	3301      	adds	r3, #1
 800ce8c:	440b      	add	r3, r1
 800ce8e:	6123      	str	r3, [r4, #16]
 800ce90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce92:	65a3      	str	r3, [r4, #88]	; 0x58
 800ce94:	f04f 0900 	mov.w	r9, #0
 800ce98:	e7d9      	b.n	800ce4e <_printf_float+0x152>
 800ce9a:	b913      	cbnz	r3, 800cea2 <_printf_float+0x1a6>
 800ce9c:	6822      	ldr	r2, [r4, #0]
 800ce9e:	07d0      	lsls	r0, r2, #31
 800cea0:	d501      	bpl.n	800cea6 <_printf_float+0x1aa>
 800cea2:	3302      	adds	r3, #2
 800cea4:	e7f3      	b.n	800ce8e <_printf_float+0x192>
 800cea6:	2301      	movs	r3, #1
 800cea8:	e7f1      	b.n	800ce8e <_printf_float+0x192>
 800ceaa:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800ceae:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ceb2:	4293      	cmp	r3, r2
 800ceb4:	db05      	blt.n	800cec2 <_printf_float+0x1c6>
 800ceb6:	6822      	ldr	r2, [r4, #0]
 800ceb8:	6123      	str	r3, [r4, #16]
 800ceba:	07d1      	lsls	r1, r2, #31
 800cebc:	d5e8      	bpl.n	800ce90 <_printf_float+0x194>
 800cebe:	3301      	adds	r3, #1
 800cec0:	e7e5      	b.n	800ce8e <_printf_float+0x192>
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	bfd4      	ite	le
 800cec6:	f1c3 0302 	rsble	r3, r3, #2
 800ceca:	2301      	movgt	r3, #1
 800cecc:	4413      	add	r3, r2
 800cece:	e7de      	b.n	800ce8e <_printf_float+0x192>
 800ced0:	6823      	ldr	r3, [r4, #0]
 800ced2:	055a      	lsls	r2, r3, #21
 800ced4:	d407      	bmi.n	800cee6 <_printf_float+0x1ea>
 800ced6:	6923      	ldr	r3, [r4, #16]
 800ced8:	4642      	mov	r2, r8
 800ceda:	4631      	mov	r1, r6
 800cedc:	4628      	mov	r0, r5
 800cede:	47b8      	blx	r7
 800cee0:	3001      	adds	r0, #1
 800cee2:	d12b      	bne.n	800cf3c <_printf_float+0x240>
 800cee4:	e767      	b.n	800cdb6 <_printf_float+0xba>
 800cee6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800ceea:	f240 80dc 	bls.w	800d0a6 <_printf_float+0x3aa>
 800ceee:	2200      	movs	r2, #0
 800cef0:	2300      	movs	r3, #0
 800cef2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cef6:	f7f3 fde7 	bl	8000ac8 <__aeabi_dcmpeq>
 800cefa:	2800      	cmp	r0, #0
 800cefc:	d033      	beq.n	800cf66 <_printf_float+0x26a>
 800cefe:	2301      	movs	r3, #1
 800cf00:	4a41      	ldr	r2, [pc, #260]	; (800d008 <_printf_float+0x30c>)
 800cf02:	4631      	mov	r1, r6
 800cf04:	4628      	mov	r0, r5
 800cf06:	47b8      	blx	r7
 800cf08:	3001      	adds	r0, #1
 800cf0a:	f43f af54 	beq.w	800cdb6 <_printf_float+0xba>
 800cf0e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cf12:	429a      	cmp	r2, r3
 800cf14:	db02      	blt.n	800cf1c <_printf_float+0x220>
 800cf16:	6823      	ldr	r3, [r4, #0]
 800cf18:	07d8      	lsls	r0, r3, #31
 800cf1a:	d50f      	bpl.n	800cf3c <_printf_float+0x240>
 800cf1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cf20:	4631      	mov	r1, r6
 800cf22:	4628      	mov	r0, r5
 800cf24:	47b8      	blx	r7
 800cf26:	3001      	adds	r0, #1
 800cf28:	f43f af45 	beq.w	800cdb6 <_printf_float+0xba>
 800cf2c:	f04f 0800 	mov.w	r8, #0
 800cf30:	f104 091a 	add.w	r9, r4, #26
 800cf34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf36:	3b01      	subs	r3, #1
 800cf38:	4543      	cmp	r3, r8
 800cf3a:	dc09      	bgt.n	800cf50 <_printf_float+0x254>
 800cf3c:	6823      	ldr	r3, [r4, #0]
 800cf3e:	079b      	lsls	r3, r3, #30
 800cf40:	f100 8103 	bmi.w	800d14a <_printf_float+0x44e>
 800cf44:	68e0      	ldr	r0, [r4, #12]
 800cf46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf48:	4298      	cmp	r0, r3
 800cf4a:	bfb8      	it	lt
 800cf4c:	4618      	movlt	r0, r3
 800cf4e:	e734      	b.n	800cdba <_printf_float+0xbe>
 800cf50:	2301      	movs	r3, #1
 800cf52:	464a      	mov	r2, r9
 800cf54:	4631      	mov	r1, r6
 800cf56:	4628      	mov	r0, r5
 800cf58:	47b8      	blx	r7
 800cf5a:	3001      	adds	r0, #1
 800cf5c:	f43f af2b 	beq.w	800cdb6 <_printf_float+0xba>
 800cf60:	f108 0801 	add.w	r8, r8, #1
 800cf64:	e7e6      	b.n	800cf34 <_printf_float+0x238>
 800cf66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	dc2b      	bgt.n	800cfc4 <_printf_float+0x2c8>
 800cf6c:	2301      	movs	r3, #1
 800cf6e:	4a26      	ldr	r2, [pc, #152]	; (800d008 <_printf_float+0x30c>)
 800cf70:	4631      	mov	r1, r6
 800cf72:	4628      	mov	r0, r5
 800cf74:	47b8      	blx	r7
 800cf76:	3001      	adds	r0, #1
 800cf78:	f43f af1d 	beq.w	800cdb6 <_printf_float+0xba>
 800cf7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf7e:	b923      	cbnz	r3, 800cf8a <_printf_float+0x28e>
 800cf80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf82:	b913      	cbnz	r3, 800cf8a <_printf_float+0x28e>
 800cf84:	6823      	ldr	r3, [r4, #0]
 800cf86:	07d9      	lsls	r1, r3, #31
 800cf88:	d5d8      	bpl.n	800cf3c <_printf_float+0x240>
 800cf8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cf8e:	4631      	mov	r1, r6
 800cf90:	4628      	mov	r0, r5
 800cf92:	47b8      	blx	r7
 800cf94:	3001      	adds	r0, #1
 800cf96:	f43f af0e 	beq.w	800cdb6 <_printf_float+0xba>
 800cf9a:	f04f 0900 	mov.w	r9, #0
 800cf9e:	f104 0a1a 	add.w	sl, r4, #26
 800cfa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfa4:	425b      	negs	r3, r3
 800cfa6:	454b      	cmp	r3, r9
 800cfa8:	dc01      	bgt.n	800cfae <_printf_float+0x2b2>
 800cfaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cfac:	e794      	b.n	800ced8 <_printf_float+0x1dc>
 800cfae:	2301      	movs	r3, #1
 800cfb0:	4652      	mov	r2, sl
 800cfb2:	4631      	mov	r1, r6
 800cfb4:	4628      	mov	r0, r5
 800cfb6:	47b8      	blx	r7
 800cfb8:	3001      	adds	r0, #1
 800cfba:	f43f aefc 	beq.w	800cdb6 <_printf_float+0xba>
 800cfbe:	f109 0901 	add.w	r9, r9, #1
 800cfc2:	e7ee      	b.n	800cfa2 <_printf_float+0x2a6>
 800cfc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cfc6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cfc8:	429a      	cmp	r2, r3
 800cfca:	bfa8      	it	ge
 800cfcc:	461a      	movge	r2, r3
 800cfce:	2a00      	cmp	r2, #0
 800cfd0:	4691      	mov	r9, r2
 800cfd2:	dd07      	ble.n	800cfe4 <_printf_float+0x2e8>
 800cfd4:	4613      	mov	r3, r2
 800cfd6:	4631      	mov	r1, r6
 800cfd8:	4642      	mov	r2, r8
 800cfda:	4628      	mov	r0, r5
 800cfdc:	47b8      	blx	r7
 800cfde:	3001      	adds	r0, #1
 800cfe0:	f43f aee9 	beq.w	800cdb6 <_printf_float+0xba>
 800cfe4:	f104 031a 	add.w	r3, r4, #26
 800cfe8:	f04f 0b00 	mov.w	fp, #0
 800cfec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cff0:	9306      	str	r3, [sp, #24]
 800cff2:	e015      	b.n	800d020 <_printf_float+0x324>
 800cff4:	7fefffff 	.word	0x7fefffff
 800cff8:	080106cc 	.word	0x080106cc
 800cffc:	080106c8 	.word	0x080106c8
 800d000:	080106d4 	.word	0x080106d4
 800d004:	080106d0 	.word	0x080106d0
 800d008:	080106d8 	.word	0x080106d8
 800d00c:	2301      	movs	r3, #1
 800d00e:	9a06      	ldr	r2, [sp, #24]
 800d010:	4631      	mov	r1, r6
 800d012:	4628      	mov	r0, r5
 800d014:	47b8      	blx	r7
 800d016:	3001      	adds	r0, #1
 800d018:	f43f aecd 	beq.w	800cdb6 <_printf_float+0xba>
 800d01c:	f10b 0b01 	add.w	fp, fp, #1
 800d020:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800d024:	ebaa 0309 	sub.w	r3, sl, r9
 800d028:	455b      	cmp	r3, fp
 800d02a:	dcef      	bgt.n	800d00c <_printf_float+0x310>
 800d02c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d030:	429a      	cmp	r2, r3
 800d032:	44d0      	add	r8, sl
 800d034:	db15      	blt.n	800d062 <_printf_float+0x366>
 800d036:	6823      	ldr	r3, [r4, #0]
 800d038:	07da      	lsls	r2, r3, #31
 800d03a:	d412      	bmi.n	800d062 <_printf_float+0x366>
 800d03c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d03e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d040:	eba3 020a 	sub.w	r2, r3, sl
 800d044:	eba3 0a01 	sub.w	sl, r3, r1
 800d048:	4592      	cmp	sl, r2
 800d04a:	bfa8      	it	ge
 800d04c:	4692      	movge	sl, r2
 800d04e:	f1ba 0f00 	cmp.w	sl, #0
 800d052:	dc0e      	bgt.n	800d072 <_printf_float+0x376>
 800d054:	f04f 0800 	mov.w	r8, #0
 800d058:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d05c:	f104 091a 	add.w	r9, r4, #26
 800d060:	e019      	b.n	800d096 <_printf_float+0x39a>
 800d062:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d066:	4631      	mov	r1, r6
 800d068:	4628      	mov	r0, r5
 800d06a:	47b8      	blx	r7
 800d06c:	3001      	adds	r0, #1
 800d06e:	d1e5      	bne.n	800d03c <_printf_float+0x340>
 800d070:	e6a1      	b.n	800cdb6 <_printf_float+0xba>
 800d072:	4653      	mov	r3, sl
 800d074:	4642      	mov	r2, r8
 800d076:	4631      	mov	r1, r6
 800d078:	4628      	mov	r0, r5
 800d07a:	47b8      	blx	r7
 800d07c:	3001      	adds	r0, #1
 800d07e:	d1e9      	bne.n	800d054 <_printf_float+0x358>
 800d080:	e699      	b.n	800cdb6 <_printf_float+0xba>
 800d082:	2301      	movs	r3, #1
 800d084:	464a      	mov	r2, r9
 800d086:	4631      	mov	r1, r6
 800d088:	4628      	mov	r0, r5
 800d08a:	47b8      	blx	r7
 800d08c:	3001      	adds	r0, #1
 800d08e:	f43f ae92 	beq.w	800cdb6 <_printf_float+0xba>
 800d092:	f108 0801 	add.w	r8, r8, #1
 800d096:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d09a:	1a9b      	subs	r3, r3, r2
 800d09c:	eba3 030a 	sub.w	r3, r3, sl
 800d0a0:	4543      	cmp	r3, r8
 800d0a2:	dcee      	bgt.n	800d082 <_printf_float+0x386>
 800d0a4:	e74a      	b.n	800cf3c <_printf_float+0x240>
 800d0a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d0a8:	2a01      	cmp	r2, #1
 800d0aa:	dc01      	bgt.n	800d0b0 <_printf_float+0x3b4>
 800d0ac:	07db      	lsls	r3, r3, #31
 800d0ae:	d53a      	bpl.n	800d126 <_printf_float+0x42a>
 800d0b0:	2301      	movs	r3, #1
 800d0b2:	4642      	mov	r2, r8
 800d0b4:	4631      	mov	r1, r6
 800d0b6:	4628      	mov	r0, r5
 800d0b8:	47b8      	blx	r7
 800d0ba:	3001      	adds	r0, #1
 800d0bc:	f43f ae7b 	beq.w	800cdb6 <_printf_float+0xba>
 800d0c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d0c4:	4631      	mov	r1, r6
 800d0c6:	4628      	mov	r0, r5
 800d0c8:	47b8      	blx	r7
 800d0ca:	3001      	adds	r0, #1
 800d0cc:	f108 0801 	add.w	r8, r8, #1
 800d0d0:	f43f ae71 	beq.w	800cdb6 <_printf_float+0xba>
 800d0d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	f103 3aff 	add.w	sl, r3, #4294967295
 800d0dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	f7f3 fcf1 	bl	8000ac8 <__aeabi_dcmpeq>
 800d0e6:	b9c8      	cbnz	r0, 800d11c <_printf_float+0x420>
 800d0e8:	4653      	mov	r3, sl
 800d0ea:	4642      	mov	r2, r8
 800d0ec:	4631      	mov	r1, r6
 800d0ee:	4628      	mov	r0, r5
 800d0f0:	47b8      	blx	r7
 800d0f2:	3001      	adds	r0, #1
 800d0f4:	d10e      	bne.n	800d114 <_printf_float+0x418>
 800d0f6:	e65e      	b.n	800cdb6 <_printf_float+0xba>
 800d0f8:	2301      	movs	r3, #1
 800d0fa:	4652      	mov	r2, sl
 800d0fc:	4631      	mov	r1, r6
 800d0fe:	4628      	mov	r0, r5
 800d100:	47b8      	blx	r7
 800d102:	3001      	adds	r0, #1
 800d104:	f43f ae57 	beq.w	800cdb6 <_printf_float+0xba>
 800d108:	f108 0801 	add.w	r8, r8, #1
 800d10c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d10e:	3b01      	subs	r3, #1
 800d110:	4543      	cmp	r3, r8
 800d112:	dcf1      	bgt.n	800d0f8 <_printf_float+0x3fc>
 800d114:	464b      	mov	r3, r9
 800d116:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d11a:	e6de      	b.n	800ceda <_printf_float+0x1de>
 800d11c:	f04f 0800 	mov.w	r8, #0
 800d120:	f104 0a1a 	add.w	sl, r4, #26
 800d124:	e7f2      	b.n	800d10c <_printf_float+0x410>
 800d126:	2301      	movs	r3, #1
 800d128:	e7df      	b.n	800d0ea <_printf_float+0x3ee>
 800d12a:	2301      	movs	r3, #1
 800d12c:	464a      	mov	r2, r9
 800d12e:	4631      	mov	r1, r6
 800d130:	4628      	mov	r0, r5
 800d132:	47b8      	blx	r7
 800d134:	3001      	adds	r0, #1
 800d136:	f43f ae3e 	beq.w	800cdb6 <_printf_float+0xba>
 800d13a:	f108 0801 	add.w	r8, r8, #1
 800d13e:	68e3      	ldr	r3, [r4, #12]
 800d140:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d142:	1a9b      	subs	r3, r3, r2
 800d144:	4543      	cmp	r3, r8
 800d146:	dcf0      	bgt.n	800d12a <_printf_float+0x42e>
 800d148:	e6fc      	b.n	800cf44 <_printf_float+0x248>
 800d14a:	f04f 0800 	mov.w	r8, #0
 800d14e:	f104 0919 	add.w	r9, r4, #25
 800d152:	e7f4      	b.n	800d13e <_printf_float+0x442>
 800d154:	2900      	cmp	r1, #0
 800d156:	f43f ae8b 	beq.w	800ce70 <_printf_float+0x174>
 800d15a:	2300      	movs	r3, #0
 800d15c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800d160:	ab09      	add	r3, sp, #36	; 0x24
 800d162:	9300      	str	r3, [sp, #0]
 800d164:	ec49 8b10 	vmov	d0, r8, r9
 800d168:	6022      	str	r2, [r4, #0]
 800d16a:	f8cd a004 	str.w	sl, [sp, #4]
 800d16e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d172:	4628      	mov	r0, r5
 800d174:	f7ff fd2e 	bl	800cbd4 <__cvt>
 800d178:	4680      	mov	r8, r0
 800d17a:	e648      	b.n	800ce0e <_printf_float+0x112>

0800d17c <_printf_common>:
 800d17c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d180:	4691      	mov	r9, r2
 800d182:	461f      	mov	r7, r3
 800d184:	688a      	ldr	r2, [r1, #8]
 800d186:	690b      	ldr	r3, [r1, #16]
 800d188:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d18c:	4293      	cmp	r3, r2
 800d18e:	bfb8      	it	lt
 800d190:	4613      	movlt	r3, r2
 800d192:	f8c9 3000 	str.w	r3, [r9]
 800d196:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d19a:	4606      	mov	r6, r0
 800d19c:	460c      	mov	r4, r1
 800d19e:	b112      	cbz	r2, 800d1a6 <_printf_common+0x2a>
 800d1a0:	3301      	adds	r3, #1
 800d1a2:	f8c9 3000 	str.w	r3, [r9]
 800d1a6:	6823      	ldr	r3, [r4, #0]
 800d1a8:	0699      	lsls	r1, r3, #26
 800d1aa:	bf42      	ittt	mi
 800d1ac:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d1b0:	3302      	addmi	r3, #2
 800d1b2:	f8c9 3000 	strmi.w	r3, [r9]
 800d1b6:	6825      	ldr	r5, [r4, #0]
 800d1b8:	f015 0506 	ands.w	r5, r5, #6
 800d1bc:	d107      	bne.n	800d1ce <_printf_common+0x52>
 800d1be:	f104 0a19 	add.w	sl, r4, #25
 800d1c2:	68e3      	ldr	r3, [r4, #12]
 800d1c4:	f8d9 2000 	ldr.w	r2, [r9]
 800d1c8:	1a9b      	subs	r3, r3, r2
 800d1ca:	42ab      	cmp	r3, r5
 800d1cc:	dc28      	bgt.n	800d220 <_printf_common+0xa4>
 800d1ce:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d1d2:	6822      	ldr	r2, [r4, #0]
 800d1d4:	3300      	adds	r3, #0
 800d1d6:	bf18      	it	ne
 800d1d8:	2301      	movne	r3, #1
 800d1da:	0692      	lsls	r2, r2, #26
 800d1dc:	d42d      	bmi.n	800d23a <_printf_common+0xbe>
 800d1de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d1e2:	4639      	mov	r1, r7
 800d1e4:	4630      	mov	r0, r6
 800d1e6:	47c0      	blx	r8
 800d1e8:	3001      	adds	r0, #1
 800d1ea:	d020      	beq.n	800d22e <_printf_common+0xb2>
 800d1ec:	6823      	ldr	r3, [r4, #0]
 800d1ee:	68e5      	ldr	r5, [r4, #12]
 800d1f0:	f8d9 2000 	ldr.w	r2, [r9]
 800d1f4:	f003 0306 	and.w	r3, r3, #6
 800d1f8:	2b04      	cmp	r3, #4
 800d1fa:	bf08      	it	eq
 800d1fc:	1aad      	subeq	r5, r5, r2
 800d1fe:	68a3      	ldr	r3, [r4, #8]
 800d200:	6922      	ldr	r2, [r4, #16]
 800d202:	bf0c      	ite	eq
 800d204:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d208:	2500      	movne	r5, #0
 800d20a:	4293      	cmp	r3, r2
 800d20c:	bfc4      	itt	gt
 800d20e:	1a9b      	subgt	r3, r3, r2
 800d210:	18ed      	addgt	r5, r5, r3
 800d212:	f04f 0900 	mov.w	r9, #0
 800d216:	341a      	adds	r4, #26
 800d218:	454d      	cmp	r5, r9
 800d21a:	d11a      	bne.n	800d252 <_printf_common+0xd6>
 800d21c:	2000      	movs	r0, #0
 800d21e:	e008      	b.n	800d232 <_printf_common+0xb6>
 800d220:	2301      	movs	r3, #1
 800d222:	4652      	mov	r2, sl
 800d224:	4639      	mov	r1, r7
 800d226:	4630      	mov	r0, r6
 800d228:	47c0      	blx	r8
 800d22a:	3001      	adds	r0, #1
 800d22c:	d103      	bne.n	800d236 <_printf_common+0xba>
 800d22e:	f04f 30ff 	mov.w	r0, #4294967295
 800d232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d236:	3501      	adds	r5, #1
 800d238:	e7c3      	b.n	800d1c2 <_printf_common+0x46>
 800d23a:	18e1      	adds	r1, r4, r3
 800d23c:	1c5a      	adds	r2, r3, #1
 800d23e:	2030      	movs	r0, #48	; 0x30
 800d240:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d244:	4422      	add	r2, r4
 800d246:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d24a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d24e:	3302      	adds	r3, #2
 800d250:	e7c5      	b.n	800d1de <_printf_common+0x62>
 800d252:	2301      	movs	r3, #1
 800d254:	4622      	mov	r2, r4
 800d256:	4639      	mov	r1, r7
 800d258:	4630      	mov	r0, r6
 800d25a:	47c0      	blx	r8
 800d25c:	3001      	adds	r0, #1
 800d25e:	d0e6      	beq.n	800d22e <_printf_common+0xb2>
 800d260:	f109 0901 	add.w	r9, r9, #1
 800d264:	e7d8      	b.n	800d218 <_printf_common+0x9c>
	...

0800d268 <_printf_i>:
 800d268:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d26c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800d270:	460c      	mov	r4, r1
 800d272:	7e09      	ldrb	r1, [r1, #24]
 800d274:	b085      	sub	sp, #20
 800d276:	296e      	cmp	r1, #110	; 0x6e
 800d278:	4617      	mov	r7, r2
 800d27a:	4606      	mov	r6, r0
 800d27c:	4698      	mov	r8, r3
 800d27e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d280:	f000 80b3 	beq.w	800d3ea <_printf_i+0x182>
 800d284:	d822      	bhi.n	800d2cc <_printf_i+0x64>
 800d286:	2963      	cmp	r1, #99	; 0x63
 800d288:	d036      	beq.n	800d2f8 <_printf_i+0x90>
 800d28a:	d80a      	bhi.n	800d2a2 <_printf_i+0x3a>
 800d28c:	2900      	cmp	r1, #0
 800d28e:	f000 80b9 	beq.w	800d404 <_printf_i+0x19c>
 800d292:	2958      	cmp	r1, #88	; 0x58
 800d294:	f000 8083 	beq.w	800d39e <_printf_i+0x136>
 800d298:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d29c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d2a0:	e032      	b.n	800d308 <_printf_i+0xa0>
 800d2a2:	2964      	cmp	r1, #100	; 0x64
 800d2a4:	d001      	beq.n	800d2aa <_printf_i+0x42>
 800d2a6:	2969      	cmp	r1, #105	; 0x69
 800d2a8:	d1f6      	bne.n	800d298 <_printf_i+0x30>
 800d2aa:	6820      	ldr	r0, [r4, #0]
 800d2ac:	6813      	ldr	r3, [r2, #0]
 800d2ae:	0605      	lsls	r5, r0, #24
 800d2b0:	f103 0104 	add.w	r1, r3, #4
 800d2b4:	d52a      	bpl.n	800d30c <_printf_i+0xa4>
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	6011      	str	r1, [r2, #0]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	da03      	bge.n	800d2c6 <_printf_i+0x5e>
 800d2be:	222d      	movs	r2, #45	; 0x2d
 800d2c0:	425b      	negs	r3, r3
 800d2c2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d2c6:	486f      	ldr	r0, [pc, #444]	; (800d484 <_printf_i+0x21c>)
 800d2c8:	220a      	movs	r2, #10
 800d2ca:	e039      	b.n	800d340 <_printf_i+0xd8>
 800d2cc:	2973      	cmp	r1, #115	; 0x73
 800d2ce:	f000 809d 	beq.w	800d40c <_printf_i+0x1a4>
 800d2d2:	d808      	bhi.n	800d2e6 <_printf_i+0x7e>
 800d2d4:	296f      	cmp	r1, #111	; 0x6f
 800d2d6:	d020      	beq.n	800d31a <_printf_i+0xb2>
 800d2d8:	2970      	cmp	r1, #112	; 0x70
 800d2da:	d1dd      	bne.n	800d298 <_printf_i+0x30>
 800d2dc:	6823      	ldr	r3, [r4, #0]
 800d2de:	f043 0320 	orr.w	r3, r3, #32
 800d2e2:	6023      	str	r3, [r4, #0]
 800d2e4:	e003      	b.n	800d2ee <_printf_i+0x86>
 800d2e6:	2975      	cmp	r1, #117	; 0x75
 800d2e8:	d017      	beq.n	800d31a <_printf_i+0xb2>
 800d2ea:	2978      	cmp	r1, #120	; 0x78
 800d2ec:	d1d4      	bne.n	800d298 <_printf_i+0x30>
 800d2ee:	2378      	movs	r3, #120	; 0x78
 800d2f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d2f4:	4864      	ldr	r0, [pc, #400]	; (800d488 <_printf_i+0x220>)
 800d2f6:	e055      	b.n	800d3a4 <_printf_i+0x13c>
 800d2f8:	6813      	ldr	r3, [r2, #0]
 800d2fa:	1d19      	adds	r1, r3, #4
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	6011      	str	r1, [r2, #0]
 800d300:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d304:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d308:	2301      	movs	r3, #1
 800d30a:	e08c      	b.n	800d426 <_printf_i+0x1be>
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	6011      	str	r1, [r2, #0]
 800d310:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d314:	bf18      	it	ne
 800d316:	b21b      	sxthne	r3, r3
 800d318:	e7cf      	b.n	800d2ba <_printf_i+0x52>
 800d31a:	6813      	ldr	r3, [r2, #0]
 800d31c:	6825      	ldr	r5, [r4, #0]
 800d31e:	1d18      	adds	r0, r3, #4
 800d320:	6010      	str	r0, [r2, #0]
 800d322:	0628      	lsls	r0, r5, #24
 800d324:	d501      	bpl.n	800d32a <_printf_i+0xc2>
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	e002      	b.n	800d330 <_printf_i+0xc8>
 800d32a:	0668      	lsls	r0, r5, #25
 800d32c:	d5fb      	bpl.n	800d326 <_printf_i+0xbe>
 800d32e:	881b      	ldrh	r3, [r3, #0]
 800d330:	4854      	ldr	r0, [pc, #336]	; (800d484 <_printf_i+0x21c>)
 800d332:	296f      	cmp	r1, #111	; 0x6f
 800d334:	bf14      	ite	ne
 800d336:	220a      	movne	r2, #10
 800d338:	2208      	moveq	r2, #8
 800d33a:	2100      	movs	r1, #0
 800d33c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d340:	6865      	ldr	r5, [r4, #4]
 800d342:	60a5      	str	r5, [r4, #8]
 800d344:	2d00      	cmp	r5, #0
 800d346:	f2c0 8095 	blt.w	800d474 <_printf_i+0x20c>
 800d34a:	6821      	ldr	r1, [r4, #0]
 800d34c:	f021 0104 	bic.w	r1, r1, #4
 800d350:	6021      	str	r1, [r4, #0]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d13d      	bne.n	800d3d2 <_printf_i+0x16a>
 800d356:	2d00      	cmp	r5, #0
 800d358:	f040 808e 	bne.w	800d478 <_printf_i+0x210>
 800d35c:	4665      	mov	r5, ip
 800d35e:	2a08      	cmp	r2, #8
 800d360:	d10b      	bne.n	800d37a <_printf_i+0x112>
 800d362:	6823      	ldr	r3, [r4, #0]
 800d364:	07db      	lsls	r3, r3, #31
 800d366:	d508      	bpl.n	800d37a <_printf_i+0x112>
 800d368:	6923      	ldr	r3, [r4, #16]
 800d36a:	6862      	ldr	r2, [r4, #4]
 800d36c:	429a      	cmp	r2, r3
 800d36e:	bfde      	ittt	le
 800d370:	2330      	movle	r3, #48	; 0x30
 800d372:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d376:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d37a:	ebac 0305 	sub.w	r3, ip, r5
 800d37e:	6123      	str	r3, [r4, #16]
 800d380:	f8cd 8000 	str.w	r8, [sp]
 800d384:	463b      	mov	r3, r7
 800d386:	aa03      	add	r2, sp, #12
 800d388:	4621      	mov	r1, r4
 800d38a:	4630      	mov	r0, r6
 800d38c:	f7ff fef6 	bl	800d17c <_printf_common>
 800d390:	3001      	adds	r0, #1
 800d392:	d14d      	bne.n	800d430 <_printf_i+0x1c8>
 800d394:	f04f 30ff 	mov.w	r0, #4294967295
 800d398:	b005      	add	sp, #20
 800d39a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d39e:	4839      	ldr	r0, [pc, #228]	; (800d484 <_printf_i+0x21c>)
 800d3a0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d3a4:	6813      	ldr	r3, [r2, #0]
 800d3a6:	6821      	ldr	r1, [r4, #0]
 800d3a8:	1d1d      	adds	r5, r3, #4
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	6015      	str	r5, [r2, #0]
 800d3ae:	060a      	lsls	r2, r1, #24
 800d3b0:	d50b      	bpl.n	800d3ca <_printf_i+0x162>
 800d3b2:	07ca      	lsls	r2, r1, #31
 800d3b4:	bf44      	itt	mi
 800d3b6:	f041 0120 	orrmi.w	r1, r1, #32
 800d3ba:	6021      	strmi	r1, [r4, #0]
 800d3bc:	b91b      	cbnz	r3, 800d3c6 <_printf_i+0x15e>
 800d3be:	6822      	ldr	r2, [r4, #0]
 800d3c0:	f022 0220 	bic.w	r2, r2, #32
 800d3c4:	6022      	str	r2, [r4, #0]
 800d3c6:	2210      	movs	r2, #16
 800d3c8:	e7b7      	b.n	800d33a <_printf_i+0xd2>
 800d3ca:	064d      	lsls	r5, r1, #25
 800d3cc:	bf48      	it	mi
 800d3ce:	b29b      	uxthmi	r3, r3
 800d3d0:	e7ef      	b.n	800d3b2 <_printf_i+0x14a>
 800d3d2:	4665      	mov	r5, ip
 800d3d4:	fbb3 f1f2 	udiv	r1, r3, r2
 800d3d8:	fb02 3311 	mls	r3, r2, r1, r3
 800d3dc:	5cc3      	ldrb	r3, [r0, r3]
 800d3de:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d3e2:	460b      	mov	r3, r1
 800d3e4:	2900      	cmp	r1, #0
 800d3e6:	d1f5      	bne.n	800d3d4 <_printf_i+0x16c>
 800d3e8:	e7b9      	b.n	800d35e <_printf_i+0xf6>
 800d3ea:	6813      	ldr	r3, [r2, #0]
 800d3ec:	6825      	ldr	r5, [r4, #0]
 800d3ee:	6961      	ldr	r1, [r4, #20]
 800d3f0:	1d18      	adds	r0, r3, #4
 800d3f2:	6010      	str	r0, [r2, #0]
 800d3f4:	0628      	lsls	r0, r5, #24
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	d501      	bpl.n	800d3fe <_printf_i+0x196>
 800d3fa:	6019      	str	r1, [r3, #0]
 800d3fc:	e002      	b.n	800d404 <_printf_i+0x19c>
 800d3fe:	066a      	lsls	r2, r5, #25
 800d400:	d5fb      	bpl.n	800d3fa <_printf_i+0x192>
 800d402:	8019      	strh	r1, [r3, #0]
 800d404:	2300      	movs	r3, #0
 800d406:	6123      	str	r3, [r4, #16]
 800d408:	4665      	mov	r5, ip
 800d40a:	e7b9      	b.n	800d380 <_printf_i+0x118>
 800d40c:	6813      	ldr	r3, [r2, #0]
 800d40e:	1d19      	adds	r1, r3, #4
 800d410:	6011      	str	r1, [r2, #0]
 800d412:	681d      	ldr	r5, [r3, #0]
 800d414:	6862      	ldr	r2, [r4, #4]
 800d416:	2100      	movs	r1, #0
 800d418:	4628      	mov	r0, r5
 800d41a:	f7f2 fee1 	bl	80001e0 <memchr>
 800d41e:	b108      	cbz	r0, 800d424 <_printf_i+0x1bc>
 800d420:	1b40      	subs	r0, r0, r5
 800d422:	6060      	str	r0, [r4, #4]
 800d424:	6863      	ldr	r3, [r4, #4]
 800d426:	6123      	str	r3, [r4, #16]
 800d428:	2300      	movs	r3, #0
 800d42a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d42e:	e7a7      	b.n	800d380 <_printf_i+0x118>
 800d430:	6923      	ldr	r3, [r4, #16]
 800d432:	462a      	mov	r2, r5
 800d434:	4639      	mov	r1, r7
 800d436:	4630      	mov	r0, r6
 800d438:	47c0      	blx	r8
 800d43a:	3001      	adds	r0, #1
 800d43c:	d0aa      	beq.n	800d394 <_printf_i+0x12c>
 800d43e:	6823      	ldr	r3, [r4, #0]
 800d440:	079b      	lsls	r3, r3, #30
 800d442:	d413      	bmi.n	800d46c <_printf_i+0x204>
 800d444:	68e0      	ldr	r0, [r4, #12]
 800d446:	9b03      	ldr	r3, [sp, #12]
 800d448:	4298      	cmp	r0, r3
 800d44a:	bfb8      	it	lt
 800d44c:	4618      	movlt	r0, r3
 800d44e:	e7a3      	b.n	800d398 <_printf_i+0x130>
 800d450:	2301      	movs	r3, #1
 800d452:	464a      	mov	r2, r9
 800d454:	4639      	mov	r1, r7
 800d456:	4630      	mov	r0, r6
 800d458:	47c0      	blx	r8
 800d45a:	3001      	adds	r0, #1
 800d45c:	d09a      	beq.n	800d394 <_printf_i+0x12c>
 800d45e:	3501      	adds	r5, #1
 800d460:	68e3      	ldr	r3, [r4, #12]
 800d462:	9a03      	ldr	r2, [sp, #12]
 800d464:	1a9b      	subs	r3, r3, r2
 800d466:	42ab      	cmp	r3, r5
 800d468:	dcf2      	bgt.n	800d450 <_printf_i+0x1e8>
 800d46a:	e7eb      	b.n	800d444 <_printf_i+0x1dc>
 800d46c:	2500      	movs	r5, #0
 800d46e:	f104 0919 	add.w	r9, r4, #25
 800d472:	e7f5      	b.n	800d460 <_printf_i+0x1f8>
 800d474:	2b00      	cmp	r3, #0
 800d476:	d1ac      	bne.n	800d3d2 <_printf_i+0x16a>
 800d478:	7803      	ldrb	r3, [r0, #0]
 800d47a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d47e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d482:	e76c      	b.n	800d35e <_printf_i+0xf6>
 800d484:	080106da 	.word	0x080106da
 800d488:	080106eb 	.word	0x080106eb

0800d48c <_scanf_float>:
 800d48c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d490:	469a      	mov	sl, r3
 800d492:	688b      	ldr	r3, [r1, #8]
 800d494:	4616      	mov	r6, r2
 800d496:	1e5a      	subs	r2, r3, #1
 800d498:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800d49c:	b087      	sub	sp, #28
 800d49e:	bf83      	ittte	hi
 800d4a0:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800d4a4:	189b      	addhi	r3, r3, r2
 800d4a6:	9301      	strhi	r3, [sp, #4]
 800d4a8:	2300      	movls	r3, #0
 800d4aa:	bf86      	itte	hi
 800d4ac:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d4b0:	608b      	strhi	r3, [r1, #8]
 800d4b2:	9301      	strls	r3, [sp, #4]
 800d4b4:	680b      	ldr	r3, [r1, #0]
 800d4b6:	4688      	mov	r8, r1
 800d4b8:	f04f 0b00 	mov.w	fp, #0
 800d4bc:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800d4c0:	f848 3b1c 	str.w	r3, [r8], #28
 800d4c4:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800d4c8:	4607      	mov	r7, r0
 800d4ca:	460c      	mov	r4, r1
 800d4cc:	4645      	mov	r5, r8
 800d4ce:	465a      	mov	r2, fp
 800d4d0:	46d9      	mov	r9, fp
 800d4d2:	f8cd b008 	str.w	fp, [sp, #8]
 800d4d6:	68a1      	ldr	r1, [r4, #8]
 800d4d8:	b181      	cbz	r1, 800d4fc <_scanf_float+0x70>
 800d4da:	6833      	ldr	r3, [r6, #0]
 800d4dc:	781b      	ldrb	r3, [r3, #0]
 800d4de:	2b49      	cmp	r3, #73	; 0x49
 800d4e0:	d071      	beq.n	800d5c6 <_scanf_float+0x13a>
 800d4e2:	d84d      	bhi.n	800d580 <_scanf_float+0xf4>
 800d4e4:	2b39      	cmp	r3, #57	; 0x39
 800d4e6:	d840      	bhi.n	800d56a <_scanf_float+0xde>
 800d4e8:	2b31      	cmp	r3, #49	; 0x31
 800d4ea:	f080 8088 	bcs.w	800d5fe <_scanf_float+0x172>
 800d4ee:	2b2d      	cmp	r3, #45	; 0x2d
 800d4f0:	f000 8090 	beq.w	800d614 <_scanf_float+0x188>
 800d4f4:	d815      	bhi.n	800d522 <_scanf_float+0x96>
 800d4f6:	2b2b      	cmp	r3, #43	; 0x2b
 800d4f8:	f000 808c 	beq.w	800d614 <_scanf_float+0x188>
 800d4fc:	f1b9 0f00 	cmp.w	r9, #0
 800d500:	d003      	beq.n	800d50a <_scanf_float+0x7e>
 800d502:	6823      	ldr	r3, [r4, #0]
 800d504:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d508:	6023      	str	r3, [r4, #0]
 800d50a:	3a01      	subs	r2, #1
 800d50c:	2a01      	cmp	r2, #1
 800d50e:	f200 80ea 	bhi.w	800d6e6 <_scanf_float+0x25a>
 800d512:	4545      	cmp	r5, r8
 800d514:	f200 80dc 	bhi.w	800d6d0 <_scanf_float+0x244>
 800d518:	2601      	movs	r6, #1
 800d51a:	4630      	mov	r0, r6
 800d51c:	b007      	add	sp, #28
 800d51e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d522:	2b2e      	cmp	r3, #46	; 0x2e
 800d524:	f000 809f 	beq.w	800d666 <_scanf_float+0x1da>
 800d528:	2b30      	cmp	r3, #48	; 0x30
 800d52a:	d1e7      	bne.n	800d4fc <_scanf_float+0x70>
 800d52c:	6820      	ldr	r0, [r4, #0]
 800d52e:	f410 7f80 	tst.w	r0, #256	; 0x100
 800d532:	d064      	beq.n	800d5fe <_scanf_float+0x172>
 800d534:	9b01      	ldr	r3, [sp, #4]
 800d536:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800d53a:	6020      	str	r0, [r4, #0]
 800d53c:	f109 0901 	add.w	r9, r9, #1
 800d540:	b11b      	cbz	r3, 800d54a <_scanf_float+0xbe>
 800d542:	3b01      	subs	r3, #1
 800d544:	3101      	adds	r1, #1
 800d546:	9301      	str	r3, [sp, #4]
 800d548:	60a1      	str	r1, [r4, #8]
 800d54a:	68a3      	ldr	r3, [r4, #8]
 800d54c:	3b01      	subs	r3, #1
 800d54e:	60a3      	str	r3, [r4, #8]
 800d550:	6923      	ldr	r3, [r4, #16]
 800d552:	3301      	adds	r3, #1
 800d554:	6123      	str	r3, [r4, #16]
 800d556:	6873      	ldr	r3, [r6, #4]
 800d558:	3b01      	subs	r3, #1
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	6073      	str	r3, [r6, #4]
 800d55e:	f340 80ac 	ble.w	800d6ba <_scanf_float+0x22e>
 800d562:	6833      	ldr	r3, [r6, #0]
 800d564:	3301      	adds	r3, #1
 800d566:	6033      	str	r3, [r6, #0]
 800d568:	e7b5      	b.n	800d4d6 <_scanf_float+0x4a>
 800d56a:	2b45      	cmp	r3, #69	; 0x45
 800d56c:	f000 8085 	beq.w	800d67a <_scanf_float+0x1ee>
 800d570:	2b46      	cmp	r3, #70	; 0x46
 800d572:	d06a      	beq.n	800d64a <_scanf_float+0x1be>
 800d574:	2b41      	cmp	r3, #65	; 0x41
 800d576:	d1c1      	bne.n	800d4fc <_scanf_float+0x70>
 800d578:	2a01      	cmp	r2, #1
 800d57a:	d1bf      	bne.n	800d4fc <_scanf_float+0x70>
 800d57c:	2202      	movs	r2, #2
 800d57e:	e046      	b.n	800d60e <_scanf_float+0x182>
 800d580:	2b65      	cmp	r3, #101	; 0x65
 800d582:	d07a      	beq.n	800d67a <_scanf_float+0x1ee>
 800d584:	d818      	bhi.n	800d5b8 <_scanf_float+0x12c>
 800d586:	2b54      	cmp	r3, #84	; 0x54
 800d588:	d066      	beq.n	800d658 <_scanf_float+0x1cc>
 800d58a:	d811      	bhi.n	800d5b0 <_scanf_float+0x124>
 800d58c:	2b4e      	cmp	r3, #78	; 0x4e
 800d58e:	d1b5      	bne.n	800d4fc <_scanf_float+0x70>
 800d590:	2a00      	cmp	r2, #0
 800d592:	d146      	bne.n	800d622 <_scanf_float+0x196>
 800d594:	f1b9 0f00 	cmp.w	r9, #0
 800d598:	d145      	bne.n	800d626 <_scanf_float+0x19a>
 800d59a:	6821      	ldr	r1, [r4, #0]
 800d59c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800d5a0:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800d5a4:	d13f      	bne.n	800d626 <_scanf_float+0x19a>
 800d5a6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800d5aa:	6021      	str	r1, [r4, #0]
 800d5ac:	2201      	movs	r2, #1
 800d5ae:	e02e      	b.n	800d60e <_scanf_float+0x182>
 800d5b0:	2b59      	cmp	r3, #89	; 0x59
 800d5b2:	d01e      	beq.n	800d5f2 <_scanf_float+0x166>
 800d5b4:	2b61      	cmp	r3, #97	; 0x61
 800d5b6:	e7de      	b.n	800d576 <_scanf_float+0xea>
 800d5b8:	2b6e      	cmp	r3, #110	; 0x6e
 800d5ba:	d0e9      	beq.n	800d590 <_scanf_float+0x104>
 800d5bc:	d815      	bhi.n	800d5ea <_scanf_float+0x15e>
 800d5be:	2b66      	cmp	r3, #102	; 0x66
 800d5c0:	d043      	beq.n	800d64a <_scanf_float+0x1be>
 800d5c2:	2b69      	cmp	r3, #105	; 0x69
 800d5c4:	d19a      	bne.n	800d4fc <_scanf_float+0x70>
 800d5c6:	f1bb 0f00 	cmp.w	fp, #0
 800d5ca:	d138      	bne.n	800d63e <_scanf_float+0x1b2>
 800d5cc:	f1b9 0f00 	cmp.w	r9, #0
 800d5d0:	d197      	bne.n	800d502 <_scanf_float+0x76>
 800d5d2:	6821      	ldr	r1, [r4, #0]
 800d5d4:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800d5d8:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800d5dc:	d195      	bne.n	800d50a <_scanf_float+0x7e>
 800d5de:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800d5e2:	6021      	str	r1, [r4, #0]
 800d5e4:	f04f 0b01 	mov.w	fp, #1
 800d5e8:	e011      	b.n	800d60e <_scanf_float+0x182>
 800d5ea:	2b74      	cmp	r3, #116	; 0x74
 800d5ec:	d034      	beq.n	800d658 <_scanf_float+0x1cc>
 800d5ee:	2b79      	cmp	r3, #121	; 0x79
 800d5f0:	d184      	bne.n	800d4fc <_scanf_float+0x70>
 800d5f2:	f1bb 0f07 	cmp.w	fp, #7
 800d5f6:	d181      	bne.n	800d4fc <_scanf_float+0x70>
 800d5f8:	f04f 0b08 	mov.w	fp, #8
 800d5fc:	e007      	b.n	800d60e <_scanf_float+0x182>
 800d5fe:	eb12 0f0b 	cmn.w	r2, fp
 800d602:	f47f af7b 	bne.w	800d4fc <_scanf_float+0x70>
 800d606:	6821      	ldr	r1, [r4, #0]
 800d608:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800d60c:	6021      	str	r1, [r4, #0]
 800d60e:	702b      	strb	r3, [r5, #0]
 800d610:	3501      	adds	r5, #1
 800d612:	e79a      	b.n	800d54a <_scanf_float+0xbe>
 800d614:	6821      	ldr	r1, [r4, #0]
 800d616:	0608      	lsls	r0, r1, #24
 800d618:	f57f af70 	bpl.w	800d4fc <_scanf_float+0x70>
 800d61c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800d620:	e7f4      	b.n	800d60c <_scanf_float+0x180>
 800d622:	2a02      	cmp	r2, #2
 800d624:	d047      	beq.n	800d6b6 <_scanf_float+0x22a>
 800d626:	f1bb 0f01 	cmp.w	fp, #1
 800d62a:	d003      	beq.n	800d634 <_scanf_float+0x1a8>
 800d62c:	f1bb 0f04 	cmp.w	fp, #4
 800d630:	f47f af64 	bne.w	800d4fc <_scanf_float+0x70>
 800d634:	f10b 0b01 	add.w	fp, fp, #1
 800d638:	fa5f fb8b 	uxtb.w	fp, fp
 800d63c:	e7e7      	b.n	800d60e <_scanf_float+0x182>
 800d63e:	f1bb 0f03 	cmp.w	fp, #3
 800d642:	d0f7      	beq.n	800d634 <_scanf_float+0x1a8>
 800d644:	f1bb 0f05 	cmp.w	fp, #5
 800d648:	e7f2      	b.n	800d630 <_scanf_float+0x1a4>
 800d64a:	f1bb 0f02 	cmp.w	fp, #2
 800d64e:	f47f af55 	bne.w	800d4fc <_scanf_float+0x70>
 800d652:	f04f 0b03 	mov.w	fp, #3
 800d656:	e7da      	b.n	800d60e <_scanf_float+0x182>
 800d658:	f1bb 0f06 	cmp.w	fp, #6
 800d65c:	f47f af4e 	bne.w	800d4fc <_scanf_float+0x70>
 800d660:	f04f 0b07 	mov.w	fp, #7
 800d664:	e7d3      	b.n	800d60e <_scanf_float+0x182>
 800d666:	6821      	ldr	r1, [r4, #0]
 800d668:	0588      	lsls	r0, r1, #22
 800d66a:	f57f af47 	bpl.w	800d4fc <_scanf_float+0x70>
 800d66e:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800d672:	6021      	str	r1, [r4, #0]
 800d674:	f8cd 9008 	str.w	r9, [sp, #8]
 800d678:	e7c9      	b.n	800d60e <_scanf_float+0x182>
 800d67a:	6821      	ldr	r1, [r4, #0]
 800d67c:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800d680:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800d684:	d006      	beq.n	800d694 <_scanf_float+0x208>
 800d686:	0548      	lsls	r0, r1, #21
 800d688:	f57f af38 	bpl.w	800d4fc <_scanf_float+0x70>
 800d68c:	f1b9 0f00 	cmp.w	r9, #0
 800d690:	f43f af3b 	beq.w	800d50a <_scanf_float+0x7e>
 800d694:	0588      	lsls	r0, r1, #22
 800d696:	bf58      	it	pl
 800d698:	9802      	ldrpl	r0, [sp, #8]
 800d69a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800d69e:	bf58      	it	pl
 800d6a0:	eba9 0000 	subpl.w	r0, r9, r0
 800d6a4:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800d6a8:	bf58      	it	pl
 800d6aa:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800d6ae:	6021      	str	r1, [r4, #0]
 800d6b0:	f04f 0900 	mov.w	r9, #0
 800d6b4:	e7ab      	b.n	800d60e <_scanf_float+0x182>
 800d6b6:	2203      	movs	r2, #3
 800d6b8:	e7a9      	b.n	800d60e <_scanf_float+0x182>
 800d6ba:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d6be:	9205      	str	r2, [sp, #20]
 800d6c0:	4631      	mov	r1, r6
 800d6c2:	4638      	mov	r0, r7
 800d6c4:	4798      	blx	r3
 800d6c6:	9a05      	ldr	r2, [sp, #20]
 800d6c8:	2800      	cmp	r0, #0
 800d6ca:	f43f af04 	beq.w	800d4d6 <_scanf_float+0x4a>
 800d6ce:	e715      	b.n	800d4fc <_scanf_float+0x70>
 800d6d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d6d4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800d6d8:	4632      	mov	r2, r6
 800d6da:	4638      	mov	r0, r7
 800d6dc:	4798      	blx	r3
 800d6de:	6923      	ldr	r3, [r4, #16]
 800d6e0:	3b01      	subs	r3, #1
 800d6e2:	6123      	str	r3, [r4, #16]
 800d6e4:	e715      	b.n	800d512 <_scanf_float+0x86>
 800d6e6:	f10b 33ff 	add.w	r3, fp, #4294967295
 800d6ea:	2b06      	cmp	r3, #6
 800d6ec:	d80a      	bhi.n	800d704 <_scanf_float+0x278>
 800d6ee:	f1bb 0f02 	cmp.w	fp, #2
 800d6f2:	d968      	bls.n	800d7c6 <_scanf_float+0x33a>
 800d6f4:	f1ab 0b03 	sub.w	fp, fp, #3
 800d6f8:	fa5f fb8b 	uxtb.w	fp, fp
 800d6fc:	eba5 0b0b 	sub.w	fp, r5, fp
 800d700:	455d      	cmp	r5, fp
 800d702:	d14b      	bne.n	800d79c <_scanf_float+0x310>
 800d704:	6823      	ldr	r3, [r4, #0]
 800d706:	05da      	lsls	r2, r3, #23
 800d708:	d51f      	bpl.n	800d74a <_scanf_float+0x2be>
 800d70a:	055b      	lsls	r3, r3, #21
 800d70c:	d468      	bmi.n	800d7e0 <_scanf_float+0x354>
 800d70e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800d712:	6923      	ldr	r3, [r4, #16]
 800d714:	2965      	cmp	r1, #101	; 0x65
 800d716:	f103 33ff 	add.w	r3, r3, #4294967295
 800d71a:	f105 3bff 	add.w	fp, r5, #4294967295
 800d71e:	6123      	str	r3, [r4, #16]
 800d720:	d00d      	beq.n	800d73e <_scanf_float+0x2b2>
 800d722:	2945      	cmp	r1, #69	; 0x45
 800d724:	d00b      	beq.n	800d73e <_scanf_float+0x2b2>
 800d726:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d72a:	4632      	mov	r2, r6
 800d72c:	4638      	mov	r0, r7
 800d72e:	4798      	blx	r3
 800d730:	6923      	ldr	r3, [r4, #16]
 800d732:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800d736:	3b01      	subs	r3, #1
 800d738:	f1a5 0b02 	sub.w	fp, r5, #2
 800d73c:	6123      	str	r3, [r4, #16]
 800d73e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d742:	4632      	mov	r2, r6
 800d744:	4638      	mov	r0, r7
 800d746:	4798      	blx	r3
 800d748:	465d      	mov	r5, fp
 800d74a:	6826      	ldr	r6, [r4, #0]
 800d74c:	f016 0610 	ands.w	r6, r6, #16
 800d750:	d17a      	bne.n	800d848 <_scanf_float+0x3bc>
 800d752:	702e      	strb	r6, [r5, #0]
 800d754:	6823      	ldr	r3, [r4, #0]
 800d756:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d75a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d75e:	d142      	bne.n	800d7e6 <_scanf_float+0x35a>
 800d760:	9b02      	ldr	r3, [sp, #8]
 800d762:	eba9 0303 	sub.w	r3, r9, r3
 800d766:	425a      	negs	r2, r3
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d149      	bne.n	800d800 <_scanf_float+0x374>
 800d76c:	2200      	movs	r2, #0
 800d76e:	4641      	mov	r1, r8
 800d770:	4638      	mov	r0, r7
 800d772:	f000 feb5 	bl	800e4e0 <_strtod_r>
 800d776:	6825      	ldr	r5, [r4, #0]
 800d778:	f8da 3000 	ldr.w	r3, [sl]
 800d77c:	f015 0f02 	tst.w	r5, #2
 800d780:	f103 0204 	add.w	r2, r3, #4
 800d784:	ec59 8b10 	vmov	r8, r9, d0
 800d788:	f8ca 2000 	str.w	r2, [sl]
 800d78c:	d043      	beq.n	800d816 <_scanf_float+0x38a>
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	e9c3 8900 	strd	r8, r9, [r3]
 800d794:	68e3      	ldr	r3, [r4, #12]
 800d796:	3301      	adds	r3, #1
 800d798:	60e3      	str	r3, [r4, #12]
 800d79a:	e6be      	b.n	800d51a <_scanf_float+0x8e>
 800d79c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d7a0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800d7a4:	4632      	mov	r2, r6
 800d7a6:	4638      	mov	r0, r7
 800d7a8:	4798      	blx	r3
 800d7aa:	6923      	ldr	r3, [r4, #16]
 800d7ac:	3b01      	subs	r3, #1
 800d7ae:	6123      	str	r3, [r4, #16]
 800d7b0:	e7a6      	b.n	800d700 <_scanf_float+0x274>
 800d7b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d7b6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800d7ba:	4632      	mov	r2, r6
 800d7bc:	4638      	mov	r0, r7
 800d7be:	4798      	blx	r3
 800d7c0:	6923      	ldr	r3, [r4, #16]
 800d7c2:	3b01      	subs	r3, #1
 800d7c4:	6123      	str	r3, [r4, #16]
 800d7c6:	4545      	cmp	r5, r8
 800d7c8:	d8f3      	bhi.n	800d7b2 <_scanf_float+0x326>
 800d7ca:	e6a5      	b.n	800d518 <_scanf_float+0x8c>
 800d7cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d7d0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800d7d4:	4632      	mov	r2, r6
 800d7d6:	4638      	mov	r0, r7
 800d7d8:	4798      	blx	r3
 800d7da:	6923      	ldr	r3, [r4, #16]
 800d7dc:	3b01      	subs	r3, #1
 800d7de:	6123      	str	r3, [r4, #16]
 800d7e0:	4545      	cmp	r5, r8
 800d7e2:	d8f3      	bhi.n	800d7cc <_scanf_float+0x340>
 800d7e4:	e698      	b.n	800d518 <_scanf_float+0x8c>
 800d7e6:	9b03      	ldr	r3, [sp, #12]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d0bf      	beq.n	800d76c <_scanf_float+0x2e0>
 800d7ec:	9904      	ldr	r1, [sp, #16]
 800d7ee:	230a      	movs	r3, #10
 800d7f0:	4632      	mov	r2, r6
 800d7f2:	3101      	adds	r1, #1
 800d7f4:	4638      	mov	r0, r7
 800d7f6:	f000 feff 	bl	800e5f8 <_strtol_r>
 800d7fa:	9b03      	ldr	r3, [sp, #12]
 800d7fc:	9d04      	ldr	r5, [sp, #16]
 800d7fe:	1ac2      	subs	r2, r0, r3
 800d800:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800d804:	429d      	cmp	r5, r3
 800d806:	bf28      	it	cs
 800d808:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800d80c:	490f      	ldr	r1, [pc, #60]	; (800d84c <_scanf_float+0x3c0>)
 800d80e:	4628      	mov	r0, r5
 800d810:	f000 f834 	bl	800d87c <siprintf>
 800d814:	e7aa      	b.n	800d76c <_scanf_float+0x2e0>
 800d816:	f015 0504 	ands.w	r5, r5, #4
 800d81a:	d1b8      	bne.n	800d78e <_scanf_float+0x302>
 800d81c:	681f      	ldr	r7, [r3, #0]
 800d81e:	ee10 2a10 	vmov	r2, s0
 800d822:	464b      	mov	r3, r9
 800d824:	ee10 0a10 	vmov	r0, s0
 800d828:	4649      	mov	r1, r9
 800d82a:	f7f3 f97f 	bl	8000b2c <__aeabi_dcmpun>
 800d82e:	b128      	cbz	r0, 800d83c <_scanf_float+0x3b0>
 800d830:	4628      	mov	r0, r5
 800d832:	f000 f81d 	bl	800d870 <nanf>
 800d836:	ed87 0a00 	vstr	s0, [r7]
 800d83a:	e7ab      	b.n	800d794 <_scanf_float+0x308>
 800d83c:	4640      	mov	r0, r8
 800d83e:	4649      	mov	r1, r9
 800d840:	f7f3 f9d2 	bl	8000be8 <__aeabi_d2f>
 800d844:	6038      	str	r0, [r7, #0]
 800d846:	e7a5      	b.n	800d794 <_scanf_float+0x308>
 800d848:	2600      	movs	r6, #0
 800d84a:	e666      	b.n	800d51a <_scanf_float+0x8e>
 800d84c:	080106fc 	.word	0x080106fc

0800d850 <_sbrk_r>:
 800d850:	b538      	push	{r3, r4, r5, lr}
 800d852:	4c06      	ldr	r4, [pc, #24]	; (800d86c <_sbrk_r+0x1c>)
 800d854:	2300      	movs	r3, #0
 800d856:	4605      	mov	r5, r0
 800d858:	4608      	mov	r0, r1
 800d85a:	6023      	str	r3, [r4, #0]
 800d85c:	f002 fe38 	bl	80104d0 <_sbrk>
 800d860:	1c43      	adds	r3, r0, #1
 800d862:	d102      	bne.n	800d86a <_sbrk_r+0x1a>
 800d864:	6823      	ldr	r3, [r4, #0]
 800d866:	b103      	cbz	r3, 800d86a <_sbrk_r+0x1a>
 800d868:	602b      	str	r3, [r5, #0]
 800d86a:	bd38      	pop	{r3, r4, r5, pc}
 800d86c:	20002834 	.word	0x20002834

0800d870 <nanf>:
 800d870:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d878 <nanf+0x8>
 800d874:	4770      	bx	lr
 800d876:	bf00      	nop
 800d878:	7fc00000 	.word	0x7fc00000

0800d87c <siprintf>:
 800d87c:	b40e      	push	{r1, r2, r3}
 800d87e:	b500      	push	{lr}
 800d880:	b09c      	sub	sp, #112	; 0x70
 800d882:	ab1d      	add	r3, sp, #116	; 0x74
 800d884:	9002      	str	r0, [sp, #8]
 800d886:	9006      	str	r0, [sp, #24]
 800d888:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d88c:	4809      	ldr	r0, [pc, #36]	; (800d8b4 <siprintf+0x38>)
 800d88e:	9107      	str	r1, [sp, #28]
 800d890:	9104      	str	r1, [sp, #16]
 800d892:	4909      	ldr	r1, [pc, #36]	; (800d8b8 <siprintf+0x3c>)
 800d894:	f853 2b04 	ldr.w	r2, [r3], #4
 800d898:	9105      	str	r1, [sp, #20]
 800d89a:	6800      	ldr	r0, [r0, #0]
 800d89c:	9301      	str	r3, [sp, #4]
 800d89e:	a902      	add	r1, sp, #8
 800d8a0:	f002 fcb8 	bl	8010214 <_svfiprintf_r>
 800d8a4:	9b02      	ldr	r3, [sp, #8]
 800d8a6:	2200      	movs	r2, #0
 800d8a8:	701a      	strb	r2, [r3, #0]
 800d8aa:	b01c      	add	sp, #112	; 0x70
 800d8ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800d8b0:	b003      	add	sp, #12
 800d8b2:	4770      	bx	lr
 800d8b4:	20000180 	.word	0x20000180
 800d8b8:	ffff0208 	.word	0xffff0208

0800d8bc <sulp>:
 800d8bc:	b570      	push	{r4, r5, r6, lr}
 800d8be:	4604      	mov	r4, r0
 800d8c0:	460d      	mov	r5, r1
 800d8c2:	ec45 4b10 	vmov	d0, r4, r5
 800d8c6:	4616      	mov	r6, r2
 800d8c8:	f002 fb08 	bl	800fedc <__ulp>
 800d8cc:	ec51 0b10 	vmov	r0, r1, d0
 800d8d0:	b17e      	cbz	r6, 800d8f2 <sulp+0x36>
 800d8d2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d8d6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	dd09      	ble.n	800d8f2 <sulp+0x36>
 800d8de:	051b      	lsls	r3, r3, #20
 800d8e0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d8e4:	2400      	movs	r4, #0
 800d8e6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d8ea:	4622      	mov	r2, r4
 800d8ec:	462b      	mov	r3, r5
 800d8ee:	f7f2 fe83 	bl	80005f8 <__aeabi_dmul>
 800d8f2:	bd70      	pop	{r4, r5, r6, pc}
 800d8f4:	0000      	movs	r0, r0
	...

0800d8f8 <_strtod_l>:
 800d8f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8fc:	461f      	mov	r7, r3
 800d8fe:	b0a1      	sub	sp, #132	; 0x84
 800d900:	2300      	movs	r3, #0
 800d902:	4681      	mov	r9, r0
 800d904:	4638      	mov	r0, r7
 800d906:	460e      	mov	r6, r1
 800d908:	9217      	str	r2, [sp, #92]	; 0x5c
 800d90a:	931c      	str	r3, [sp, #112]	; 0x70
 800d90c:	f001 fff5 	bl	800f8fa <__localeconv_l>
 800d910:	4680      	mov	r8, r0
 800d912:	6800      	ldr	r0, [r0, #0]
 800d914:	f7f2 fc5c 	bl	80001d0 <strlen>
 800d918:	f04f 0a00 	mov.w	sl, #0
 800d91c:	4604      	mov	r4, r0
 800d91e:	f04f 0b00 	mov.w	fp, #0
 800d922:	961b      	str	r6, [sp, #108]	; 0x6c
 800d924:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d926:	781a      	ldrb	r2, [r3, #0]
 800d928:	2a0d      	cmp	r2, #13
 800d92a:	d832      	bhi.n	800d992 <_strtod_l+0x9a>
 800d92c:	2a09      	cmp	r2, #9
 800d92e:	d236      	bcs.n	800d99e <_strtod_l+0xa6>
 800d930:	2a00      	cmp	r2, #0
 800d932:	d03e      	beq.n	800d9b2 <_strtod_l+0xba>
 800d934:	2300      	movs	r3, #0
 800d936:	930d      	str	r3, [sp, #52]	; 0x34
 800d938:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800d93a:	782b      	ldrb	r3, [r5, #0]
 800d93c:	2b30      	cmp	r3, #48	; 0x30
 800d93e:	f040 80ac 	bne.w	800da9a <_strtod_l+0x1a2>
 800d942:	786b      	ldrb	r3, [r5, #1]
 800d944:	2b58      	cmp	r3, #88	; 0x58
 800d946:	d001      	beq.n	800d94c <_strtod_l+0x54>
 800d948:	2b78      	cmp	r3, #120	; 0x78
 800d94a:	d167      	bne.n	800da1c <_strtod_l+0x124>
 800d94c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d94e:	9301      	str	r3, [sp, #4]
 800d950:	ab1c      	add	r3, sp, #112	; 0x70
 800d952:	9300      	str	r3, [sp, #0]
 800d954:	9702      	str	r7, [sp, #8]
 800d956:	ab1d      	add	r3, sp, #116	; 0x74
 800d958:	4a88      	ldr	r2, [pc, #544]	; (800db7c <_strtod_l+0x284>)
 800d95a:	a91b      	add	r1, sp, #108	; 0x6c
 800d95c:	4648      	mov	r0, r9
 800d95e:	f001 fcf2 	bl	800f346 <__gethex>
 800d962:	f010 0407 	ands.w	r4, r0, #7
 800d966:	4606      	mov	r6, r0
 800d968:	d005      	beq.n	800d976 <_strtod_l+0x7e>
 800d96a:	2c06      	cmp	r4, #6
 800d96c:	d12b      	bne.n	800d9c6 <_strtod_l+0xce>
 800d96e:	3501      	adds	r5, #1
 800d970:	2300      	movs	r3, #0
 800d972:	951b      	str	r5, [sp, #108]	; 0x6c
 800d974:	930d      	str	r3, [sp, #52]	; 0x34
 800d976:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d978:	2b00      	cmp	r3, #0
 800d97a:	f040 859a 	bne.w	800e4b2 <_strtod_l+0xbba>
 800d97e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d980:	b1e3      	cbz	r3, 800d9bc <_strtod_l+0xc4>
 800d982:	4652      	mov	r2, sl
 800d984:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d988:	ec43 2b10 	vmov	d0, r2, r3
 800d98c:	b021      	add	sp, #132	; 0x84
 800d98e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d992:	2a2b      	cmp	r2, #43	; 0x2b
 800d994:	d015      	beq.n	800d9c2 <_strtod_l+0xca>
 800d996:	2a2d      	cmp	r2, #45	; 0x2d
 800d998:	d004      	beq.n	800d9a4 <_strtod_l+0xac>
 800d99a:	2a20      	cmp	r2, #32
 800d99c:	d1ca      	bne.n	800d934 <_strtod_l+0x3c>
 800d99e:	3301      	adds	r3, #1
 800d9a0:	931b      	str	r3, [sp, #108]	; 0x6c
 800d9a2:	e7bf      	b.n	800d924 <_strtod_l+0x2c>
 800d9a4:	2201      	movs	r2, #1
 800d9a6:	920d      	str	r2, [sp, #52]	; 0x34
 800d9a8:	1c5a      	adds	r2, r3, #1
 800d9aa:	921b      	str	r2, [sp, #108]	; 0x6c
 800d9ac:	785b      	ldrb	r3, [r3, #1]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d1c2      	bne.n	800d938 <_strtod_l+0x40>
 800d9b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d9b4:	961b      	str	r6, [sp, #108]	; 0x6c
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	f040 8579 	bne.w	800e4ae <_strtod_l+0xbb6>
 800d9bc:	4652      	mov	r2, sl
 800d9be:	465b      	mov	r3, fp
 800d9c0:	e7e2      	b.n	800d988 <_strtod_l+0x90>
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	e7ef      	b.n	800d9a6 <_strtod_l+0xae>
 800d9c6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d9c8:	b13a      	cbz	r2, 800d9da <_strtod_l+0xe2>
 800d9ca:	2135      	movs	r1, #53	; 0x35
 800d9cc:	a81e      	add	r0, sp, #120	; 0x78
 800d9ce:	f002 fb7d 	bl	80100cc <__copybits>
 800d9d2:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d9d4:	4648      	mov	r0, r9
 800d9d6:	f001 ffe9 	bl	800f9ac <_Bfree>
 800d9da:	3c01      	subs	r4, #1
 800d9dc:	2c04      	cmp	r4, #4
 800d9de:	d806      	bhi.n	800d9ee <_strtod_l+0xf6>
 800d9e0:	e8df f004 	tbb	[pc, r4]
 800d9e4:	1714030a 	.word	0x1714030a
 800d9e8:	0a          	.byte	0x0a
 800d9e9:	00          	.byte	0x00
 800d9ea:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800d9ee:	0730      	lsls	r0, r6, #28
 800d9f0:	d5c1      	bpl.n	800d976 <_strtod_l+0x7e>
 800d9f2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800d9f6:	e7be      	b.n	800d976 <_strtod_l+0x7e>
 800d9f8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800d9fc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d9fe:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800da02:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800da06:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800da0a:	e7f0      	b.n	800d9ee <_strtod_l+0xf6>
 800da0c:	f8df b170 	ldr.w	fp, [pc, #368]	; 800db80 <_strtod_l+0x288>
 800da10:	e7ed      	b.n	800d9ee <_strtod_l+0xf6>
 800da12:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800da16:	f04f 3aff 	mov.w	sl, #4294967295
 800da1a:	e7e8      	b.n	800d9ee <_strtod_l+0xf6>
 800da1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800da1e:	1c5a      	adds	r2, r3, #1
 800da20:	921b      	str	r2, [sp, #108]	; 0x6c
 800da22:	785b      	ldrb	r3, [r3, #1]
 800da24:	2b30      	cmp	r3, #48	; 0x30
 800da26:	d0f9      	beq.n	800da1c <_strtod_l+0x124>
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d0a4      	beq.n	800d976 <_strtod_l+0x7e>
 800da2c:	2301      	movs	r3, #1
 800da2e:	2500      	movs	r5, #0
 800da30:	9306      	str	r3, [sp, #24]
 800da32:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800da34:	9308      	str	r3, [sp, #32]
 800da36:	9507      	str	r5, [sp, #28]
 800da38:	9505      	str	r5, [sp, #20]
 800da3a:	220a      	movs	r2, #10
 800da3c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800da3e:	7807      	ldrb	r7, [r0, #0]
 800da40:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800da44:	b2d9      	uxtb	r1, r3
 800da46:	2909      	cmp	r1, #9
 800da48:	d929      	bls.n	800da9e <_strtod_l+0x1a6>
 800da4a:	4622      	mov	r2, r4
 800da4c:	f8d8 1000 	ldr.w	r1, [r8]
 800da50:	f002 fcd8 	bl	8010404 <strncmp>
 800da54:	2800      	cmp	r0, #0
 800da56:	d031      	beq.n	800dabc <_strtod_l+0x1c4>
 800da58:	2000      	movs	r0, #0
 800da5a:	9c05      	ldr	r4, [sp, #20]
 800da5c:	9004      	str	r0, [sp, #16]
 800da5e:	463b      	mov	r3, r7
 800da60:	4602      	mov	r2, r0
 800da62:	2b65      	cmp	r3, #101	; 0x65
 800da64:	d001      	beq.n	800da6a <_strtod_l+0x172>
 800da66:	2b45      	cmp	r3, #69	; 0x45
 800da68:	d114      	bne.n	800da94 <_strtod_l+0x19c>
 800da6a:	b924      	cbnz	r4, 800da76 <_strtod_l+0x17e>
 800da6c:	b910      	cbnz	r0, 800da74 <_strtod_l+0x17c>
 800da6e:	9b06      	ldr	r3, [sp, #24]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d09e      	beq.n	800d9b2 <_strtod_l+0xba>
 800da74:	2400      	movs	r4, #0
 800da76:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800da78:	1c73      	adds	r3, r6, #1
 800da7a:	931b      	str	r3, [sp, #108]	; 0x6c
 800da7c:	7873      	ldrb	r3, [r6, #1]
 800da7e:	2b2b      	cmp	r3, #43	; 0x2b
 800da80:	d078      	beq.n	800db74 <_strtod_l+0x27c>
 800da82:	2b2d      	cmp	r3, #45	; 0x2d
 800da84:	d070      	beq.n	800db68 <_strtod_l+0x270>
 800da86:	f04f 0c00 	mov.w	ip, #0
 800da8a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800da8e:	2f09      	cmp	r7, #9
 800da90:	d97c      	bls.n	800db8c <_strtod_l+0x294>
 800da92:	961b      	str	r6, [sp, #108]	; 0x6c
 800da94:	f04f 0e00 	mov.w	lr, #0
 800da98:	e09a      	b.n	800dbd0 <_strtod_l+0x2d8>
 800da9a:	2300      	movs	r3, #0
 800da9c:	e7c7      	b.n	800da2e <_strtod_l+0x136>
 800da9e:	9905      	ldr	r1, [sp, #20]
 800daa0:	2908      	cmp	r1, #8
 800daa2:	bfdd      	ittte	le
 800daa4:	9907      	ldrle	r1, [sp, #28]
 800daa6:	fb02 3301 	mlale	r3, r2, r1, r3
 800daaa:	9307      	strle	r3, [sp, #28]
 800daac:	fb02 3505 	mlagt	r5, r2, r5, r3
 800dab0:	9b05      	ldr	r3, [sp, #20]
 800dab2:	3001      	adds	r0, #1
 800dab4:	3301      	adds	r3, #1
 800dab6:	9305      	str	r3, [sp, #20]
 800dab8:	901b      	str	r0, [sp, #108]	; 0x6c
 800daba:	e7bf      	b.n	800da3c <_strtod_l+0x144>
 800dabc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800dabe:	191a      	adds	r2, r3, r4
 800dac0:	921b      	str	r2, [sp, #108]	; 0x6c
 800dac2:	9a05      	ldr	r2, [sp, #20]
 800dac4:	5d1b      	ldrb	r3, [r3, r4]
 800dac6:	2a00      	cmp	r2, #0
 800dac8:	d037      	beq.n	800db3a <_strtod_l+0x242>
 800daca:	9c05      	ldr	r4, [sp, #20]
 800dacc:	4602      	mov	r2, r0
 800dace:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800dad2:	2909      	cmp	r1, #9
 800dad4:	d913      	bls.n	800dafe <_strtod_l+0x206>
 800dad6:	2101      	movs	r1, #1
 800dad8:	9104      	str	r1, [sp, #16]
 800dada:	e7c2      	b.n	800da62 <_strtod_l+0x16a>
 800dadc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800dade:	1c5a      	adds	r2, r3, #1
 800dae0:	921b      	str	r2, [sp, #108]	; 0x6c
 800dae2:	785b      	ldrb	r3, [r3, #1]
 800dae4:	3001      	adds	r0, #1
 800dae6:	2b30      	cmp	r3, #48	; 0x30
 800dae8:	d0f8      	beq.n	800dadc <_strtod_l+0x1e4>
 800daea:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800daee:	2a08      	cmp	r2, #8
 800daf0:	f200 84e4 	bhi.w	800e4bc <_strtod_l+0xbc4>
 800daf4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800daf6:	9208      	str	r2, [sp, #32]
 800daf8:	4602      	mov	r2, r0
 800dafa:	2000      	movs	r0, #0
 800dafc:	4604      	mov	r4, r0
 800dafe:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800db02:	f100 0101 	add.w	r1, r0, #1
 800db06:	d012      	beq.n	800db2e <_strtod_l+0x236>
 800db08:	440a      	add	r2, r1
 800db0a:	eb00 0c04 	add.w	ip, r0, r4
 800db0e:	4621      	mov	r1, r4
 800db10:	270a      	movs	r7, #10
 800db12:	458c      	cmp	ip, r1
 800db14:	d113      	bne.n	800db3e <_strtod_l+0x246>
 800db16:	1821      	adds	r1, r4, r0
 800db18:	2908      	cmp	r1, #8
 800db1a:	f104 0401 	add.w	r4, r4, #1
 800db1e:	4404      	add	r4, r0
 800db20:	dc19      	bgt.n	800db56 <_strtod_l+0x25e>
 800db22:	9b07      	ldr	r3, [sp, #28]
 800db24:	210a      	movs	r1, #10
 800db26:	fb01 e303 	mla	r3, r1, r3, lr
 800db2a:	9307      	str	r3, [sp, #28]
 800db2c:	2100      	movs	r1, #0
 800db2e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800db30:	1c58      	adds	r0, r3, #1
 800db32:	901b      	str	r0, [sp, #108]	; 0x6c
 800db34:	785b      	ldrb	r3, [r3, #1]
 800db36:	4608      	mov	r0, r1
 800db38:	e7c9      	b.n	800dace <_strtod_l+0x1d6>
 800db3a:	9805      	ldr	r0, [sp, #20]
 800db3c:	e7d3      	b.n	800dae6 <_strtod_l+0x1ee>
 800db3e:	2908      	cmp	r1, #8
 800db40:	f101 0101 	add.w	r1, r1, #1
 800db44:	dc03      	bgt.n	800db4e <_strtod_l+0x256>
 800db46:	9b07      	ldr	r3, [sp, #28]
 800db48:	437b      	muls	r3, r7
 800db4a:	9307      	str	r3, [sp, #28]
 800db4c:	e7e1      	b.n	800db12 <_strtod_l+0x21a>
 800db4e:	2910      	cmp	r1, #16
 800db50:	bfd8      	it	le
 800db52:	437d      	mulle	r5, r7
 800db54:	e7dd      	b.n	800db12 <_strtod_l+0x21a>
 800db56:	2c10      	cmp	r4, #16
 800db58:	bfdc      	itt	le
 800db5a:	210a      	movle	r1, #10
 800db5c:	fb01 e505 	mlale	r5, r1, r5, lr
 800db60:	e7e4      	b.n	800db2c <_strtod_l+0x234>
 800db62:	2301      	movs	r3, #1
 800db64:	9304      	str	r3, [sp, #16]
 800db66:	e781      	b.n	800da6c <_strtod_l+0x174>
 800db68:	f04f 0c01 	mov.w	ip, #1
 800db6c:	1cb3      	adds	r3, r6, #2
 800db6e:	931b      	str	r3, [sp, #108]	; 0x6c
 800db70:	78b3      	ldrb	r3, [r6, #2]
 800db72:	e78a      	b.n	800da8a <_strtod_l+0x192>
 800db74:	f04f 0c00 	mov.w	ip, #0
 800db78:	e7f8      	b.n	800db6c <_strtod_l+0x274>
 800db7a:	bf00      	nop
 800db7c:	08010704 	.word	0x08010704
 800db80:	7ff00000 	.word	0x7ff00000
 800db84:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800db86:	1c5f      	adds	r7, r3, #1
 800db88:	971b      	str	r7, [sp, #108]	; 0x6c
 800db8a:	785b      	ldrb	r3, [r3, #1]
 800db8c:	2b30      	cmp	r3, #48	; 0x30
 800db8e:	d0f9      	beq.n	800db84 <_strtod_l+0x28c>
 800db90:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800db94:	2f08      	cmp	r7, #8
 800db96:	f63f af7d 	bhi.w	800da94 <_strtod_l+0x19c>
 800db9a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800db9e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800dba0:	930a      	str	r3, [sp, #40]	; 0x28
 800dba2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800dba4:	1c5f      	adds	r7, r3, #1
 800dba6:	971b      	str	r7, [sp, #108]	; 0x6c
 800dba8:	785b      	ldrb	r3, [r3, #1]
 800dbaa:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800dbae:	f1b8 0f09 	cmp.w	r8, #9
 800dbb2:	d937      	bls.n	800dc24 <_strtod_l+0x32c>
 800dbb4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800dbb6:	1a7f      	subs	r7, r7, r1
 800dbb8:	2f08      	cmp	r7, #8
 800dbba:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800dbbe:	dc37      	bgt.n	800dc30 <_strtod_l+0x338>
 800dbc0:	45be      	cmp	lr, r7
 800dbc2:	bfa8      	it	ge
 800dbc4:	46be      	movge	lr, r7
 800dbc6:	f1bc 0f00 	cmp.w	ip, #0
 800dbca:	d001      	beq.n	800dbd0 <_strtod_l+0x2d8>
 800dbcc:	f1ce 0e00 	rsb	lr, lr, #0
 800dbd0:	2c00      	cmp	r4, #0
 800dbd2:	d151      	bne.n	800dc78 <_strtod_l+0x380>
 800dbd4:	2800      	cmp	r0, #0
 800dbd6:	f47f aece 	bne.w	800d976 <_strtod_l+0x7e>
 800dbda:	9a06      	ldr	r2, [sp, #24]
 800dbdc:	2a00      	cmp	r2, #0
 800dbde:	f47f aeca 	bne.w	800d976 <_strtod_l+0x7e>
 800dbe2:	9a04      	ldr	r2, [sp, #16]
 800dbe4:	2a00      	cmp	r2, #0
 800dbe6:	f47f aee4 	bne.w	800d9b2 <_strtod_l+0xba>
 800dbea:	2b4e      	cmp	r3, #78	; 0x4e
 800dbec:	d027      	beq.n	800dc3e <_strtod_l+0x346>
 800dbee:	dc21      	bgt.n	800dc34 <_strtod_l+0x33c>
 800dbf0:	2b49      	cmp	r3, #73	; 0x49
 800dbf2:	f47f aede 	bne.w	800d9b2 <_strtod_l+0xba>
 800dbf6:	49a0      	ldr	r1, [pc, #640]	; (800de78 <_strtod_l+0x580>)
 800dbf8:	a81b      	add	r0, sp, #108	; 0x6c
 800dbfa:	f001 fdd7 	bl	800f7ac <__match>
 800dbfe:	2800      	cmp	r0, #0
 800dc00:	f43f aed7 	beq.w	800d9b2 <_strtod_l+0xba>
 800dc04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800dc06:	499d      	ldr	r1, [pc, #628]	; (800de7c <_strtod_l+0x584>)
 800dc08:	3b01      	subs	r3, #1
 800dc0a:	a81b      	add	r0, sp, #108	; 0x6c
 800dc0c:	931b      	str	r3, [sp, #108]	; 0x6c
 800dc0e:	f001 fdcd 	bl	800f7ac <__match>
 800dc12:	b910      	cbnz	r0, 800dc1a <_strtod_l+0x322>
 800dc14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800dc16:	3301      	adds	r3, #1
 800dc18:	931b      	str	r3, [sp, #108]	; 0x6c
 800dc1a:	f8df b274 	ldr.w	fp, [pc, #628]	; 800de90 <_strtod_l+0x598>
 800dc1e:	f04f 0a00 	mov.w	sl, #0
 800dc22:	e6a8      	b.n	800d976 <_strtod_l+0x7e>
 800dc24:	210a      	movs	r1, #10
 800dc26:	fb01 3e0e 	mla	lr, r1, lr, r3
 800dc2a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800dc2e:	e7b8      	b.n	800dba2 <_strtod_l+0x2aa>
 800dc30:	46be      	mov	lr, r7
 800dc32:	e7c8      	b.n	800dbc6 <_strtod_l+0x2ce>
 800dc34:	2b69      	cmp	r3, #105	; 0x69
 800dc36:	d0de      	beq.n	800dbf6 <_strtod_l+0x2fe>
 800dc38:	2b6e      	cmp	r3, #110	; 0x6e
 800dc3a:	f47f aeba 	bne.w	800d9b2 <_strtod_l+0xba>
 800dc3e:	4990      	ldr	r1, [pc, #576]	; (800de80 <_strtod_l+0x588>)
 800dc40:	a81b      	add	r0, sp, #108	; 0x6c
 800dc42:	f001 fdb3 	bl	800f7ac <__match>
 800dc46:	2800      	cmp	r0, #0
 800dc48:	f43f aeb3 	beq.w	800d9b2 <_strtod_l+0xba>
 800dc4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800dc4e:	781b      	ldrb	r3, [r3, #0]
 800dc50:	2b28      	cmp	r3, #40	; 0x28
 800dc52:	d10e      	bne.n	800dc72 <_strtod_l+0x37a>
 800dc54:	aa1e      	add	r2, sp, #120	; 0x78
 800dc56:	498b      	ldr	r1, [pc, #556]	; (800de84 <_strtod_l+0x58c>)
 800dc58:	a81b      	add	r0, sp, #108	; 0x6c
 800dc5a:	f001 fdbb 	bl	800f7d4 <__hexnan>
 800dc5e:	2805      	cmp	r0, #5
 800dc60:	d107      	bne.n	800dc72 <_strtod_l+0x37a>
 800dc62:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800dc64:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800dc68:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800dc6c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800dc70:	e681      	b.n	800d976 <_strtod_l+0x7e>
 800dc72:	f8df b224 	ldr.w	fp, [pc, #548]	; 800de98 <_strtod_l+0x5a0>
 800dc76:	e7d2      	b.n	800dc1e <_strtod_l+0x326>
 800dc78:	ebae 0302 	sub.w	r3, lr, r2
 800dc7c:	9306      	str	r3, [sp, #24]
 800dc7e:	9b05      	ldr	r3, [sp, #20]
 800dc80:	9807      	ldr	r0, [sp, #28]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	bf08      	it	eq
 800dc86:	4623      	moveq	r3, r4
 800dc88:	2c10      	cmp	r4, #16
 800dc8a:	9305      	str	r3, [sp, #20]
 800dc8c:	46a0      	mov	r8, r4
 800dc8e:	bfa8      	it	ge
 800dc90:	f04f 0810 	movge.w	r8, #16
 800dc94:	f7f2 fc36 	bl	8000504 <__aeabi_ui2d>
 800dc98:	2c09      	cmp	r4, #9
 800dc9a:	4682      	mov	sl, r0
 800dc9c:	468b      	mov	fp, r1
 800dc9e:	dc13      	bgt.n	800dcc8 <_strtod_l+0x3d0>
 800dca0:	9b06      	ldr	r3, [sp, #24]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	f43f ae67 	beq.w	800d976 <_strtod_l+0x7e>
 800dca8:	9b06      	ldr	r3, [sp, #24]
 800dcaa:	dd7a      	ble.n	800dda2 <_strtod_l+0x4aa>
 800dcac:	2b16      	cmp	r3, #22
 800dcae:	dc61      	bgt.n	800dd74 <_strtod_l+0x47c>
 800dcb0:	4a75      	ldr	r2, [pc, #468]	; (800de88 <_strtod_l+0x590>)
 800dcb2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800dcb6:	e9de 0100 	ldrd	r0, r1, [lr]
 800dcba:	4652      	mov	r2, sl
 800dcbc:	465b      	mov	r3, fp
 800dcbe:	f7f2 fc9b 	bl	80005f8 <__aeabi_dmul>
 800dcc2:	4682      	mov	sl, r0
 800dcc4:	468b      	mov	fp, r1
 800dcc6:	e656      	b.n	800d976 <_strtod_l+0x7e>
 800dcc8:	4b6f      	ldr	r3, [pc, #444]	; (800de88 <_strtod_l+0x590>)
 800dcca:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800dcce:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800dcd2:	f7f2 fc91 	bl	80005f8 <__aeabi_dmul>
 800dcd6:	4606      	mov	r6, r0
 800dcd8:	4628      	mov	r0, r5
 800dcda:	460f      	mov	r7, r1
 800dcdc:	f7f2 fc12 	bl	8000504 <__aeabi_ui2d>
 800dce0:	4602      	mov	r2, r0
 800dce2:	460b      	mov	r3, r1
 800dce4:	4630      	mov	r0, r6
 800dce6:	4639      	mov	r1, r7
 800dce8:	f7f2 fad0 	bl	800028c <__adddf3>
 800dcec:	2c0f      	cmp	r4, #15
 800dcee:	4682      	mov	sl, r0
 800dcf0:	468b      	mov	fp, r1
 800dcf2:	ddd5      	ble.n	800dca0 <_strtod_l+0x3a8>
 800dcf4:	9b06      	ldr	r3, [sp, #24]
 800dcf6:	eba4 0808 	sub.w	r8, r4, r8
 800dcfa:	4498      	add	r8, r3
 800dcfc:	f1b8 0f00 	cmp.w	r8, #0
 800dd00:	f340 8096 	ble.w	800de30 <_strtod_l+0x538>
 800dd04:	f018 030f 	ands.w	r3, r8, #15
 800dd08:	d00a      	beq.n	800dd20 <_strtod_l+0x428>
 800dd0a:	495f      	ldr	r1, [pc, #380]	; (800de88 <_strtod_l+0x590>)
 800dd0c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800dd10:	4652      	mov	r2, sl
 800dd12:	465b      	mov	r3, fp
 800dd14:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd18:	f7f2 fc6e 	bl	80005f8 <__aeabi_dmul>
 800dd1c:	4682      	mov	sl, r0
 800dd1e:	468b      	mov	fp, r1
 800dd20:	f038 080f 	bics.w	r8, r8, #15
 800dd24:	d073      	beq.n	800de0e <_strtod_l+0x516>
 800dd26:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800dd2a:	dd47      	ble.n	800ddbc <_strtod_l+0x4c4>
 800dd2c:	2400      	movs	r4, #0
 800dd2e:	46a0      	mov	r8, r4
 800dd30:	9407      	str	r4, [sp, #28]
 800dd32:	9405      	str	r4, [sp, #20]
 800dd34:	2322      	movs	r3, #34	; 0x22
 800dd36:	f8df b158 	ldr.w	fp, [pc, #344]	; 800de90 <_strtod_l+0x598>
 800dd3a:	f8c9 3000 	str.w	r3, [r9]
 800dd3e:	f04f 0a00 	mov.w	sl, #0
 800dd42:	9b07      	ldr	r3, [sp, #28]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	f43f ae16 	beq.w	800d976 <_strtod_l+0x7e>
 800dd4a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800dd4c:	4648      	mov	r0, r9
 800dd4e:	f001 fe2d 	bl	800f9ac <_Bfree>
 800dd52:	9905      	ldr	r1, [sp, #20]
 800dd54:	4648      	mov	r0, r9
 800dd56:	f001 fe29 	bl	800f9ac <_Bfree>
 800dd5a:	4641      	mov	r1, r8
 800dd5c:	4648      	mov	r0, r9
 800dd5e:	f001 fe25 	bl	800f9ac <_Bfree>
 800dd62:	9907      	ldr	r1, [sp, #28]
 800dd64:	4648      	mov	r0, r9
 800dd66:	f001 fe21 	bl	800f9ac <_Bfree>
 800dd6a:	4621      	mov	r1, r4
 800dd6c:	4648      	mov	r0, r9
 800dd6e:	f001 fe1d 	bl	800f9ac <_Bfree>
 800dd72:	e600      	b.n	800d976 <_strtod_l+0x7e>
 800dd74:	9a06      	ldr	r2, [sp, #24]
 800dd76:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800dd7a:	4293      	cmp	r3, r2
 800dd7c:	dbba      	blt.n	800dcf4 <_strtod_l+0x3fc>
 800dd7e:	4d42      	ldr	r5, [pc, #264]	; (800de88 <_strtod_l+0x590>)
 800dd80:	f1c4 040f 	rsb	r4, r4, #15
 800dd84:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800dd88:	4652      	mov	r2, sl
 800dd8a:	465b      	mov	r3, fp
 800dd8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd90:	f7f2 fc32 	bl	80005f8 <__aeabi_dmul>
 800dd94:	9b06      	ldr	r3, [sp, #24]
 800dd96:	1b1c      	subs	r4, r3, r4
 800dd98:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800dd9c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dda0:	e78d      	b.n	800dcbe <_strtod_l+0x3c6>
 800dda2:	f113 0f16 	cmn.w	r3, #22
 800dda6:	dba5      	blt.n	800dcf4 <_strtod_l+0x3fc>
 800dda8:	4a37      	ldr	r2, [pc, #220]	; (800de88 <_strtod_l+0x590>)
 800ddaa:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800ddae:	e9d2 2300 	ldrd	r2, r3, [r2]
 800ddb2:	4650      	mov	r0, sl
 800ddb4:	4659      	mov	r1, fp
 800ddb6:	f7f2 fd49 	bl	800084c <__aeabi_ddiv>
 800ddba:	e782      	b.n	800dcc2 <_strtod_l+0x3ca>
 800ddbc:	2300      	movs	r3, #0
 800ddbe:	4e33      	ldr	r6, [pc, #204]	; (800de8c <_strtod_l+0x594>)
 800ddc0:	ea4f 1828 	mov.w	r8, r8, asr #4
 800ddc4:	4650      	mov	r0, sl
 800ddc6:	4659      	mov	r1, fp
 800ddc8:	461d      	mov	r5, r3
 800ddca:	f1b8 0f01 	cmp.w	r8, #1
 800ddce:	dc21      	bgt.n	800de14 <_strtod_l+0x51c>
 800ddd0:	b10b      	cbz	r3, 800ddd6 <_strtod_l+0x4de>
 800ddd2:	4682      	mov	sl, r0
 800ddd4:	468b      	mov	fp, r1
 800ddd6:	4b2d      	ldr	r3, [pc, #180]	; (800de8c <_strtod_l+0x594>)
 800ddd8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800dddc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800dde0:	4652      	mov	r2, sl
 800dde2:	465b      	mov	r3, fp
 800dde4:	e9d5 0100 	ldrd	r0, r1, [r5]
 800dde8:	f7f2 fc06 	bl	80005f8 <__aeabi_dmul>
 800ddec:	4b28      	ldr	r3, [pc, #160]	; (800de90 <_strtod_l+0x598>)
 800ddee:	460a      	mov	r2, r1
 800ddf0:	400b      	ands	r3, r1
 800ddf2:	4928      	ldr	r1, [pc, #160]	; (800de94 <_strtod_l+0x59c>)
 800ddf4:	428b      	cmp	r3, r1
 800ddf6:	4682      	mov	sl, r0
 800ddf8:	d898      	bhi.n	800dd2c <_strtod_l+0x434>
 800ddfa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ddfe:	428b      	cmp	r3, r1
 800de00:	bf86      	itte	hi
 800de02:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800de9c <_strtod_l+0x5a4>
 800de06:	f04f 3aff 	movhi.w	sl, #4294967295
 800de0a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800de0e:	2300      	movs	r3, #0
 800de10:	9304      	str	r3, [sp, #16]
 800de12:	e077      	b.n	800df04 <_strtod_l+0x60c>
 800de14:	f018 0f01 	tst.w	r8, #1
 800de18:	d006      	beq.n	800de28 <_strtod_l+0x530>
 800de1a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800de1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de22:	f7f2 fbe9 	bl	80005f8 <__aeabi_dmul>
 800de26:	2301      	movs	r3, #1
 800de28:	3501      	adds	r5, #1
 800de2a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800de2e:	e7cc      	b.n	800ddca <_strtod_l+0x4d2>
 800de30:	d0ed      	beq.n	800de0e <_strtod_l+0x516>
 800de32:	f1c8 0800 	rsb	r8, r8, #0
 800de36:	f018 020f 	ands.w	r2, r8, #15
 800de3a:	d00a      	beq.n	800de52 <_strtod_l+0x55a>
 800de3c:	4b12      	ldr	r3, [pc, #72]	; (800de88 <_strtod_l+0x590>)
 800de3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800de42:	4650      	mov	r0, sl
 800de44:	4659      	mov	r1, fp
 800de46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de4a:	f7f2 fcff 	bl	800084c <__aeabi_ddiv>
 800de4e:	4682      	mov	sl, r0
 800de50:	468b      	mov	fp, r1
 800de52:	ea5f 1828 	movs.w	r8, r8, asr #4
 800de56:	d0da      	beq.n	800de0e <_strtod_l+0x516>
 800de58:	f1b8 0f1f 	cmp.w	r8, #31
 800de5c:	dd20      	ble.n	800dea0 <_strtod_l+0x5a8>
 800de5e:	2400      	movs	r4, #0
 800de60:	46a0      	mov	r8, r4
 800de62:	9407      	str	r4, [sp, #28]
 800de64:	9405      	str	r4, [sp, #20]
 800de66:	2322      	movs	r3, #34	; 0x22
 800de68:	f04f 0a00 	mov.w	sl, #0
 800de6c:	f04f 0b00 	mov.w	fp, #0
 800de70:	f8c9 3000 	str.w	r3, [r9]
 800de74:	e765      	b.n	800dd42 <_strtod_l+0x44a>
 800de76:	bf00      	nop
 800de78:	080106cd 	.word	0x080106cd
 800de7c:	0801075b 	.word	0x0801075b
 800de80:	080106d5 	.word	0x080106d5
 800de84:	08010718 	.word	0x08010718
 800de88:	08010798 	.word	0x08010798
 800de8c:	08010770 	.word	0x08010770
 800de90:	7ff00000 	.word	0x7ff00000
 800de94:	7ca00000 	.word	0x7ca00000
 800de98:	fff80000 	.word	0xfff80000
 800de9c:	7fefffff 	.word	0x7fefffff
 800dea0:	f018 0310 	ands.w	r3, r8, #16
 800dea4:	bf18      	it	ne
 800dea6:	236a      	movne	r3, #106	; 0x6a
 800dea8:	4da0      	ldr	r5, [pc, #640]	; (800e12c <_strtod_l+0x834>)
 800deaa:	9304      	str	r3, [sp, #16]
 800deac:	4650      	mov	r0, sl
 800deae:	4659      	mov	r1, fp
 800deb0:	2300      	movs	r3, #0
 800deb2:	f1b8 0f00 	cmp.w	r8, #0
 800deb6:	f300 810a 	bgt.w	800e0ce <_strtod_l+0x7d6>
 800deba:	b10b      	cbz	r3, 800dec0 <_strtod_l+0x5c8>
 800debc:	4682      	mov	sl, r0
 800debe:	468b      	mov	fp, r1
 800dec0:	9b04      	ldr	r3, [sp, #16]
 800dec2:	b1bb      	cbz	r3, 800def4 <_strtod_l+0x5fc>
 800dec4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800dec8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800decc:	2b00      	cmp	r3, #0
 800dece:	4659      	mov	r1, fp
 800ded0:	dd10      	ble.n	800def4 <_strtod_l+0x5fc>
 800ded2:	2b1f      	cmp	r3, #31
 800ded4:	f340 8107 	ble.w	800e0e6 <_strtod_l+0x7ee>
 800ded8:	2b34      	cmp	r3, #52	; 0x34
 800deda:	bfde      	ittt	le
 800dedc:	3b20      	suble	r3, #32
 800dede:	f04f 32ff 	movle.w	r2, #4294967295
 800dee2:	fa02 f303 	lslle.w	r3, r2, r3
 800dee6:	f04f 0a00 	mov.w	sl, #0
 800deea:	bfcc      	ite	gt
 800deec:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800def0:	ea03 0b01 	andle.w	fp, r3, r1
 800def4:	2200      	movs	r2, #0
 800def6:	2300      	movs	r3, #0
 800def8:	4650      	mov	r0, sl
 800defa:	4659      	mov	r1, fp
 800defc:	f7f2 fde4 	bl	8000ac8 <__aeabi_dcmpeq>
 800df00:	2800      	cmp	r0, #0
 800df02:	d1ac      	bne.n	800de5e <_strtod_l+0x566>
 800df04:	9b07      	ldr	r3, [sp, #28]
 800df06:	9300      	str	r3, [sp, #0]
 800df08:	9a05      	ldr	r2, [sp, #20]
 800df0a:	9908      	ldr	r1, [sp, #32]
 800df0c:	4623      	mov	r3, r4
 800df0e:	4648      	mov	r0, r9
 800df10:	f001 fd9e 	bl	800fa50 <__s2b>
 800df14:	9007      	str	r0, [sp, #28]
 800df16:	2800      	cmp	r0, #0
 800df18:	f43f af08 	beq.w	800dd2c <_strtod_l+0x434>
 800df1c:	9a06      	ldr	r2, [sp, #24]
 800df1e:	9b06      	ldr	r3, [sp, #24]
 800df20:	2a00      	cmp	r2, #0
 800df22:	f1c3 0300 	rsb	r3, r3, #0
 800df26:	bfa8      	it	ge
 800df28:	2300      	movge	r3, #0
 800df2a:	930e      	str	r3, [sp, #56]	; 0x38
 800df2c:	2400      	movs	r4, #0
 800df2e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800df32:	9316      	str	r3, [sp, #88]	; 0x58
 800df34:	46a0      	mov	r8, r4
 800df36:	9b07      	ldr	r3, [sp, #28]
 800df38:	4648      	mov	r0, r9
 800df3a:	6859      	ldr	r1, [r3, #4]
 800df3c:	f001 fd02 	bl	800f944 <_Balloc>
 800df40:	9005      	str	r0, [sp, #20]
 800df42:	2800      	cmp	r0, #0
 800df44:	f43f aef6 	beq.w	800dd34 <_strtod_l+0x43c>
 800df48:	9b07      	ldr	r3, [sp, #28]
 800df4a:	691a      	ldr	r2, [r3, #16]
 800df4c:	3202      	adds	r2, #2
 800df4e:	f103 010c 	add.w	r1, r3, #12
 800df52:	0092      	lsls	r2, r2, #2
 800df54:	300c      	adds	r0, #12
 800df56:	f7fe fd81 	bl	800ca5c <memcpy>
 800df5a:	aa1e      	add	r2, sp, #120	; 0x78
 800df5c:	a91d      	add	r1, sp, #116	; 0x74
 800df5e:	ec4b ab10 	vmov	d0, sl, fp
 800df62:	4648      	mov	r0, r9
 800df64:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800df68:	f002 f82e 	bl	800ffc8 <__d2b>
 800df6c:	901c      	str	r0, [sp, #112]	; 0x70
 800df6e:	2800      	cmp	r0, #0
 800df70:	f43f aee0 	beq.w	800dd34 <_strtod_l+0x43c>
 800df74:	2101      	movs	r1, #1
 800df76:	4648      	mov	r0, r9
 800df78:	f001 fdf6 	bl	800fb68 <__i2b>
 800df7c:	4680      	mov	r8, r0
 800df7e:	2800      	cmp	r0, #0
 800df80:	f43f aed8 	beq.w	800dd34 <_strtod_l+0x43c>
 800df84:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800df86:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800df88:	2e00      	cmp	r6, #0
 800df8a:	bfab      	itete	ge
 800df8c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800df8e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800df90:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800df92:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800df94:	bfac      	ite	ge
 800df96:	18f7      	addge	r7, r6, r3
 800df98:	1b9d      	sublt	r5, r3, r6
 800df9a:	9b04      	ldr	r3, [sp, #16]
 800df9c:	1af6      	subs	r6, r6, r3
 800df9e:	4416      	add	r6, r2
 800dfa0:	4b63      	ldr	r3, [pc, #396]	; (800e130 <_strtod_l+0x838>)
 800dfa2:	3e01      	subs	r6, #1
 800dfa4:	429e      	cmp	r6, r3
 800dfa6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800dfaa:	f280 80af 	bge.w	800e10c <_strtod_l+0x814>
 800dfae:	1b9b      	subs	r3, r3, r6
 800dfb0:	2b1f      	cmp	r3, #31
 800dfb2:	eba2 0203 	sub.w	r2, r2, r3
 800dfb6:	f04f 0101 	mov.w	r1, #1
 800dfba:	f300 809b 	bgt.w	800e0f4 <_strtod_l+0x7fc>
 800dfbe:	fa01 f303 	lsl.w	r3, r1, r3
 800dfc2:	930f      	str	r3, [sp, #60]	; 0x3c
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	930a      	str	r3, [sp, #40]	; 0x28
 800dfc8:	18be      	adds	r6, r7, r2
 800dfca:	9b04      	ldr	r3, [sp, #16]
 800dfcc:	42b7      	cmp	r7, r6
 800dfce:	4415      	add	r5, r2
 800dfd0:	441d      	add	r5, r3
 800dfd2:	463b      	mov	r3, r7
 800dfd4:	bfa8      	it	ge
 800dfd6:	4633      	movge	r3, r6
 800dfd8:	42ab      	cmp	r3, r5
 800dfda:	bfa8      	it	ge
 800dfdc:	462b      	movge	r3, r5
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	bfc2      	ittt	gt
 800dfe2:	1af6      	subgt	r6, r6, r3
 800dfe4:	1aed      	subgt	r5, r5, r3
 800dfe6:	1aff      	subgt	r7, r7, r3
 800dfe8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dfea:	b1bb      	cbz	r3, 800e01c <_strtod_l+0x724>
 800dfec:	4641      	mov	r1, r8
 800dfee:	461a      	mov	r2, r3
 800dff0:	4648      	mov	r0, r9
 800dff2:	f001 fe59 	bl	800fca8 <__pow5mult>
 800dff6:	4680      	mov	r8, r0
 800dff8:	2800      	cmp	r0, #0
 800dffa:	f43f ae9b 	beq.w	800dd34 <_strtod_l+0x43c>
 800dffe:	4601      	mov	r1, r0
 800e000:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800e002:	4648      	mov	r0, r9
 800e004:	f001 fdb9 	bl	800fb7a <__multiply>
 800e008:	900c      	str	r0, [sp, #48]	; 0x30
 800e00a:	2800      	cmp	r0, #0
 800e00c:	f43f ae92 	beq.w	800dd34 <_strtod_l+0x43c>
 800e010:	991c      	ldr	r1, [sp, #112]	; 0x70
 800e012:	4648      	mov	r0, r9
 800e014:	f001 fcca 	bl	800f9ac <_Bfree>
 800e018:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e01a:	931c      	str	r3, [sp, #112]	; 0x70
 800e01c:	2e00      	cmp	r6, #0
 800e01e:	dc7a      	bgt.n	800e116 <_strtod_l+0x81e>
 800e020:	9b06      	ldr	r3, [sp, #24]
 800e022:	2b00      	cmp	r3, #0
 800e024:	dd08      	ble.n	800e038 <_strtod_l+0x740>
 800e026:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e028:	9905      	ldr	r1, [sp, #20]
 800e02a:	4648      	mov	r0, r9
 800e02c:	f001 fe3c 	bl	800fca8 <__pow5mult>
 800e030:	9005      	str	r0, [sp, #20]
 800e032:	2800      	cmp	r0, #0
 800e034:	f43f ae7e 	beq.w	800dd34 <_strtod_l+0x43c>
 800e038:	2d00      	cmp	r5, #0
 800e03a:	dd08      	ble.n	800e04e <_strtod_l+0x756>
 800e03c:	462a      	mov	r2, r5
 800e03e:	9905      	ldr	r1, [sp, #20]
 800e040:	4648      	mov	r0, r9
 800e042:	f001 fe7f 	bl	800fd44 <__lshift>
 800e046:	9005      	str	r0, [sp, #20]
 800e048:	2800      	cmp	r0, #0
 800e04a:	f43f ae73 	beq.w	800dd34 <_strtod_l+0x43c>
 800e04e:	2f00      	cmp	r7, #0
 800e050:	dd08      	ble.n	800e064 <_strtod_l+0x76c>
 800e052:	4641      	mov	r1, r8
 800e054:	463a      	mov	r2, r7
 800e056:	4648      	mov	r0, r9
 800e058:	f001 fe74 	bl	800fd44 <__lshift>
 800e05c:	4680      	mov	r8, r0
 800e05e:	2800      	cmp	r0, #0
 800e060:	f43f ae68 	beq.w	800dd34 <_strtod_l+0x43c>
 800e064:	9a05      	ldr	r2, [sp, #20]
 800e066:	991c      	ldr	r1, [sp, #112]	; 0x70
 800e068:	4648      	mov	r0, r9
 800e06a:	f001 fed9 	bl	800fe20 <__mdiff>
 800e06e:	4604      	mov	r4, r0
 800e070:	2800      	cmp	r0, #0
 800e072:	f43f ae5f 	beq.w	800dd34 <_strtod_l+0x43c>
 800e076:	68c3      	ldr	r3, [r0, #12]
 800e078:	930c      	str	r3, [sp, #48]	; 0x30
 800e07a:	2300      	movs	r3, #0
 800e07c:	60c3      	str	r3, [r0, #12]
 800e07e:	4641      	mov	r1, r8
 800e080:	f001 feb4 	bl	800fdec <__mcmp>
 800e084:	2800      	cmp	r0, #0
 800e086:	da55      	bge.n	800e134 <_strtod_l+0x83c>
 800e088:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e08a:	b9e3      	cbnz	r3, 800e0c6 <_strtod_l+0x7ce>
 800e08c:	f1ba 0f00 	cmp.w	sl, #0
 800e090:	d119      	bne.n	800e0c6 <_strtod_l+0x7ce>
 800e092:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e096:	b9b3      	cbnz	r3, 800e0c6 <_strtod_l+0x7ce>
 800e098:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e09c:	0d1b      	lsrs	r3, r3, #20
 800e09e:	051b      	lsls	r3, r3, #20
 800e0a0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800e0a4:	d90f      	bls.n	800e0c6 <_strtod_l+0x7ce>
 800e0a6:	6963      	ldr	r3, [r4, #20]
 800e0a8:	b913      	cbnz	r3, 800e0b0 <_strtod_l+0x7b8>
 800e0aa:	6923      	ldr	r3, [r4, #16]
 800e0ac:	2b01      	cmp	r3, #1
 800e0ae:	dd0a      	ble.n	800e0c6 <_strtod_l+0x7ce>
 800e0b0:	4621      	mov	r1, r4
 800e0b2:	2201      	movs	r2, #1
 800e0b4:	4648      	mov	r0, r9
 800e0b6:	f001 fe45 	bl	800fd44 <__lshift>
 800e0ba:	4641      	mov	r1, r8
 800e0bc:	4604      	mov	r4, r0
 800e0be:	f001 fe95 	bl	800fdec <__mcmp>
 800e0c2:	2800      	cmp	r0, #0
 800e0c4:	dc67      	bgt.n	800e196 <_strtod_l+0x89e>
 800e0c6:	9b04      	ldr	r3, [sp, #16]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d171      	bne.n	800e1b0 <_strtod_l+0x8b8>
 800e0cc:	e63d      	b.n	800dd4a <_strtod_l+0x452>
 800e0ce:	f018 0f01 	tst.w	r8, #1
 800e0d2:	d004      	beq.n	800e0de <_strtod_l+0x7e6>
 800e0d4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e0d8:	f7f2 fa8e 	bl	80005f8 <__aeabi_dmul>
 800e0dc:	2301      	movs	r3, #1
 800e0de:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e0e2:	3508      	adds	r5, #8
 800e0e4:	e6e5      	b.n	800deb2 <_strtod_l+0x5ba>
 800e0e6:	f04f 32ff 	mov.w	r2, #4294967295
 800e0ea:	fa02 f303 	lsl.w	r3, r2, r3
 800e0ee:	ea03 0a0a 	and.w	sl, r3, sl
 800e0f2:	e6ff      	b.n	800def4 <_strtod_l+0x5fc>
 800e0f4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800e0f8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800e0fc:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800e100:	36e2      	adds	r6, #226	; 0xe2
 800e102:	fa01 f306 	lsl.w	r3, r1, r6
 800e106:	930a      	str	r3, [sp, #40]	; 0x28
 800e108:	910f      	str	r1, [sp, #60]	; 0x3c
 800e10a:	e75d      	b.n	800dfc8 <_strtod_l+0x6d0>
 800e10c:	2300      	movs	r3, #0
 800e10e:	930a      	str	r3, [sp, #40]	; 0x28
 800e110:	2301      	movs	r3, #1
 800e112:	930f      	str	r3, [sp, #60]	; 0x3c
 800e114:	e758      	b.n	800dfc8 <_strtod_l+0x6d0>
 800e116:	4632      	mov	r2, r6
 800e118:	991c      	ldr	r1, [sp, #112]	; 0x70
 800e11a:	4648      	mov	r0, r9
 800e11c:	f001 fe12 	bl	800fd44 <__lshift>
 800e120:	901c      	str	r0, [sp, #112]	; 0x70
 800e122:	2800      	cmp	r0, #0
 800e124:	f47f af7c 	bne.w	800e020 <_strtod_l+0x728>
 800e128:	e604      	b.n	800dd34 <_strtod_l+0x43c>
 800e12a:	bf00      	nop
 800e12c:	08010730 	.word	0x08010730
 800e130:	fffffc02 	.word	0xfffffc02
 800e134:	465d      	mov	r5, fp
 800e136:	f040 8086 	bne.w	800e246 <_strtod_l+0x94e>
 800e13a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e13c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e140:	b32a      	cbz	r2, 800e18e <_strtod_l+0x896>
 800e142:	4aaf      	ldr	r2, [pc, #700]	; (800e400 <_strtod_l+0xb08>)
 800e144:	4293      	cmp	r3, r2
 800e146:	d153      	bne.n	800e1f0 <_strtod_l+0x8f8>
 800e148:	9b04      	ldr	r3, [sp, #16]
 800e14a:	4650      	mov	r0, sl
 800e14c:	b1d3      	cbz	r3, 800e184 <_strtod_l+0x88c>
 800e14e:	4aad      	ldr	r2, [pc, #692]	; (800e404 <_strtod_l+0xb0c>)
 800e150:	402a      	ands	r2, r5
 800e152:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800e156:	f04f 31ff 	mov.w	r1, #4294967295
 800e15a:	d816      	bhi.n	800e18a <_strtod_l+0x892>
 800e15c:	0d12      	lsrs	r2, r2, #20
 800e15e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800e162:	fa01 f303 	lsl.w	r3, r1, r3
 800e166:	4298      	cmp	r0, r3
 800e168:	d142      	bne.n	800e1f0 <_strtod_l+0x8f8>
 800e16a:	4ba7      	ldr	r3, [pc, #668]	; (800e408 <_strtod_l+0xb10>)
 800e16c:	429d      	cmp	r5, r3
 800e16e:	d102      	bne.n	800e176 <_strtod_l+0x87e>
 800e170:	3001      	adds	r0, #1
 800e172:	f43f addf 	beq.w	800dd34 <_strtod_l+0x43c>
 800e176:	4ba3      	ldr	r3, [pc, #652]	; (800e404 <_strtod_l+0xb0c>)
 800e178:	402b      	ands	r3, r5
 800e17a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800e17e:	f04f 0a00 	mov.w	sl, #0
 800e182:	e7a0      	b.n	800e0c6 <_strtod_l+0x7ce>
 800e184:	f04f 33ff 	mov.w	r3, #4294967295
 800e188:	e7ed      	b.n	800e166 <_strtod_l+0x86e>
 800e18a:	460b      	mov	r3, r1
 800e18c:	e7eb      	b.n	800e166 <_strtod_l+0x86e>
 800e18e:	bb7b      	cbnz	r3, 800e1f0 <_strtod_l+0x8f8>
 800e190:	f1ba 0f00 	cmp.w	sl, #0
 800e194:	d12c      	bne.n	800e1f0 <_strtod_l+0x8f8>
 800e196:	9904      	ldr	r1, [sp, #16]
 800e198:	4a9a      	ldr	r2, [pc, #616]	; (800e404 <_strtod_l+0xb0c>)
 800e19a:	465b      	mov	r3, fp
 800e19c:	b1f1      	cbz	r1, 800e1dc <_strtod_l+0x8e4>
 800e19e:	ea02 010b 	and.w	r1, r2, fp
 800e1a2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800e1a6:	dc19      	bgt.n	800e1dc <_strtod_l+0x8e4>
 800e1a8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800e1ac:	f77f ae5b 	ble.w	800de66 <_strtod_l+0x56e>
 800e1b0:	4a96      	ldr	r2, [pc, #600]	; (800e40c <_strtod_l+0xb14>)
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800e1b8:	4650      	mov	r0, sl
 800e1ba:	4659      	mov	r1, fp
 800e1bc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800e1c0:	f7f2 fa1a 	bl	80005f8 <__aeabi_dmul>
 800e1c4:	4682      	mov	sl, r0
 800e1c6:	468b      	mov	fp, r1
 800e1c8:	2900      	cmp	r1, #0
 800e1ca:	f47f adbe 	bne.w	800dd4a <_strtod_l+0x452>
 800e1ce:	2800      	cmp	r0, #0
 800e1d0:	f47f adbb 	bne.w	800dd4a <_strtod_l+0x452>
 800e1d4:	2322      	movs	r3, #34	; 0x22
 800e1d6:	f8c9 3000 	str.w	r3, [r9]
 800e1da:	e5b6      	b.n	800dd4a <_strtod_l+0x452>
 800e1dc:	4013      	ands	r3, r2
 800e1de:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e1e2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e1e6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e1ea:	f04f 3aff 	mov.w	sl, #4294967295
 800e1ee:	e76a      	b.n	800e0c6 <_strtod_l+0x7ce>
 800e1f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e1f2:	b193      	cbz	r3, 800e21a <_strtod_l+0x922>
 800e1f4:	422b      	tst	r3, r5
 800e1f6:	f43f af66 	beq.w	800e0c6 <_strtod_l+0x7ce>
 800e1fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e1fc:	9a04      	ldr	r2, [sp, #16]
 800e1fe:	4650      	mov	r0, sl
 800e200:	4659      	mov	r1, fp
 800e202:	b173      	cbz	r3, 800e222 <_strtod_l+0x92a>
 800e204:	f7ff fb5a 	bl	800d8bc <sulp>
 800e208:	4602      	mov	r2, r0
 800e20a:	460b      	mov	r3, r1
 800e20c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e210:	f7f2 f83c 	bl	800028c <__adddf3>
 800e214:	4682      	mov	sl, r0
 800e216:	468b      	mov	fp, r1
 800e218:	e755      	b.n	800e0c6 <_strtod_l+0x7ce>
 800e21a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e21c:	ea13 0f0a 	tst.w	r3, sl
 800e220:	e7e9      	b.n	800e1f6 <_strtod_l+0x8fe>
 800e222:	f7ff fb4b 	bl	800d8bc <sulp>
 800e226:	4602      	mov	r2, r0
 800e228:	460b      	mov	r3, r1
 800e22a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e22e:	f7f2 f82b 	bl	8000288 <__aeabi_dsub>
 800e232:	2200      	movs	r2, #0
 800e234:	2300      	movs	r3, #0
 800e236:	4682      	mov	sl, r0
 800e238:	468b      	mov	fp, r1
 800e23a:	f7f2 fc45 	bl	8000ac8 <__aeabi_dcmpeq>
 800e23e:	2800      	cmp	r0, #0
 800e240:	f47f ae11 	bne.w	800de66 <_strtod_l+0x56e>
 800e244:	e73f      	b.n	800e0c6 <_strtod_l+0x7ce>
 800e246:	4641      	mov	r1, r8
 800e248:	4620      	mov	r0, r4
 800e24a:	f001 ff0c 	bl	8010066 <__ratio>
 800e24e:	ec57 6b10 	vmov	r6, r7, d0
 800e252:	2200      	movs	r2, #0
 800e254:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e258:	ee10 0a10 	vmov	r0, s0
 800e25c:	4639      	mov	r1, r7
 800e25e:	f7f2 fc47 	bl	8000af0 <__aeabi_dcmple>
 800e262:	2800      	cmp	r0, #0
 800e264:	d077      	beq.n	800e356 <_strtod_l+0xa5e>
 800e266:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d04a      	beq.n	800e302 <_strtod_l+0xa0a>
 800e26c:	4b68      	ldr	r3, [pc, #416]	; (800e410 <_strtod_l+0xb18>)
 800e26e:	2200      	movs	r2, #0
 800e270:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800e274:	4f66      	ldr	r7, [pc, #408]	; (800e410 <_strtod_l+0xb18>)
 800e276:	2600      	movs	r6, #0
 800e278:	4b62      	ldr	r3, [pc, #392]	; (800e404 <_strtod_l+0xb0c>)
 800e27a:	402b      	ands	r3, r5
 800e27c:	930f      	str	r3, [sp, #60]	; 0x3c
 800e27e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e280:	4b64      	ldr	r3, [pc, #400]	; (800e414 <_strtod_l+0xb1c>)
 800e282:	429a      	cmp	r2, r3
 800e284:	f040 80ce 	bne.w	800e424 <_strtod_l+0xb2c>
 800e288:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e28c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e290:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800e294:	ec4b ab10 	vmov	d0, sl, fp
 800e298:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800e29c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800e2a0:	f001 fe1c 	bl	800fedc <__ulp>
 800e2a4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e2a8:	ec53 2b10 	vmov	r2, r3, d0
 800e2ac:	f7f2 f9a4 	bl	80005f8 <__aeabi_dmul>
 800e2b0:	4652      	mov	r2, sl
 800e2b2:	465b      	mov	r3, fp
 800e2b4:	f7f1 ffea 	bl	800028c <__adddf3>
 800e2b8:	460b      	mov	r3, r1
 800e2ba:	4952      	ldr	r1, [pc, #328]	; (800e404 <_strtod_l+0xb0c>)
 800e2bc:	4a56      	ldr	r2, [pc, #344]	; (800e418 <_strtod_l+0xb20>)
 800e2be:	4019      	ands	r1, r3
 800e2c0:	4291      	cmp	r1, r2
 800e2c2:	4682      	mov	sl, r0
 800e2c4:	d95b      	bls.n	800e37e <_strtod_l+0xa86>
 800e2c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2c8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800e2cc:	4293      	cmp	r3, r2
 800e2ce:	d103      	bne.n	800e2d8 <_strtod_l+0x9e0>
 800e2d0:	9b08      	ldr	r3, [sp, #32]
 800e2d2:	3301      	adds	r3, #1
 800e2d4:	f43f ad2e 	beq.w	800dd34 <_strtod_l+0x43c>
 800e2d8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800e408 <_strtod_l+0xb10>
 800e2dc:	f04f 3aff 	mov.w	sl, #4294967295
 800e2e0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800e2e2:	4648      	mov	r0, r9
 800e2e4:	f001 fb62 	bl	800f9ac <_Bfree>
 800e2e8:	9905      	ldr	r1, [sp, #20]
 800e2ea:	4648      	mov	r0, r9
 800e2ec:	f001 fb5e 	bl	800f9ac <_Bfree>
 800e2f0:	4641      	mov	r1, r8
 800e2f2:	4648      	mov	r0, r9
 800e2f4:	f001 fb5a 	bl	800f9ac <_Bfree>
 800e2f8:	4621      	mov	r1, r4
 800e2fa:	4648      	mov	r0, r9
 800e2fc:	f001 fb56 	bl	800f9ac <_Bfree>
 800e300:	e619      	b.n	800df36 <_strtod_l+0x63e>
 800e302:	f1ba 0f00 	cmp.w	sl, #0
 800e306:	d11a      	bne.n	800e33e <_strtod_l+0xa46>
 800e308:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e30c:	b9eb      	cbnz	r3, 800e34a <_strtod_l+0xa52>
 800e30e:	2200      	movs	r2, #0
 800e310:	4b3f      	ldr	r3, [pc, #252]	; (800e410 <_strtod_l+0xb18>)
 800e312:	4630      	mov	r0, r6
 800e314:	4639      	mov	r1, r7
 800e316:	f7f2 fbe1 	bl	8000adc <__aeabi_dcmplt>
 800e31a:	b9c8      	cbnz	r0, 800e350 <_strtod_l+0xa58>
 800e31c:	4630      	mov	r0, r6
 800e31e:	4639      	mov	r1, r7
 800e320:	2200      	movs	r2, #0
 800e322:	4b3e      	ldr	r3, [pc, #248]	; (800e41c <_strtod_l+0xb24>)
 800e324:	f7f2 f968 	bl	80005f8 <__aeabi_dmul>
 800e328:	4606      	mov	r6, r0
 800e32a:	460f      	mov	r7, r1
 800e32c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800e330:	9618      	str	r6, [sp, #96]	; 0x60
 800e332:	9319      	str	r3, [sp, #100]	; 0x64
 800e334:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800e338:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800e33c:	e79c      	b.n	800e278 <_strtod_l+0x980>
 800e33e:	f1ba 0f01 	cmp.w	sl, #1
 800e342:	d102      	bne.n	800e34a <_strtod_l+0xa52>
 800e344:	2d00      	cmp	r5, #0
 800e346:	f43f ad8e 	beq.w	800de66 <_strtod_l+0x56e>
 800e34a:	2200      	movs	r2, #0
 800e34c:	4b34      	ldr	r3, [pc, #208]	; (800e420 <_strtod_l+0xb28>)
 800e34e:	e78f      	b.n	800e270 <_strtod_l+0x978>
 800e350:	2600      	movs	r6, #0
 800e352:	4f32      	ldr	r7, [pc, #200]	; (800e41c <_strtod_l+0xb24>)
 800e354:	e7ea      	b.n	800e32c <_strtod_l+0xa34>
 800e356:	4b31      	ldr	r3, [pc, #196]	; (800e41c <_strtod_l+0xb24>)
 800e358:	4630      	mov	r0, r6
 800e35a:	4639      	mov	r1, r7
 800e35c:	2200      	movs	r2, #0
 800e35e:	f7f2 f94b 	bl	80005f8 <__aeabi_dmul>
 800e362:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e364:	4606      	mov	r6, r0
 800e366:	460f      	mov	r7, r1
 800e368:	b933      	cbnz	r3, 800e378 <_strtod_l+0xa80>
 800e36a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e36e:	9010      	str	r0, [sp, #64]	; 0x40
 800e370:	9311      	str	r3, [sp, #68]	; 0x44
 800e372:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e376:	e7df      	b.n	800e338 <_strtod_l+0xa40>
 800e378:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800e37c:	e7f9      	b.n	800e372 <_strtod_l+0xa7a>
 800e37e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800e382:	9b04      	ldr	r3, [sp, #16]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d1ab      	bne.n	800e2e0 <_strtod_l+0x9e8>
 800e388:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e38c:	0d1b      	lsrs	r3, r3, #20
 800e38e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e390:	051b      	lsls	r3, r3, #20
 800e392:	429a      	cmp	r2, r3
 800e394:	465d      	mov	r5, fp
 800e396:	d1a3      	bne.n	800e2e0 <_strtod_l+0x9e8>
 800e398:	4639      	mov	r1, r7
 800e39a:	4630      	mov	r0, r6
 800e39c:	f7f2 fbdc 	bl	8000b58 <__aeabi_d2iz>
 800e3a0:	f7f2 f8c0 	bl	8000524 <__aeabi_i2d>
 800e3a4:	460b      	mov	r3, r1
 800e3a6:	4602      	mov	r2, r0
 800e3a8:	4639      	mov	r1, r7
 800e3aa:	4630      	mov	r0, r6
 800e3ac:	f7f1 ff6c 	bl	8000288 <__aeabi_dsub>
 800e3b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e3b2:	4606      	mov	r6, r0
 800e3b4:	460f      	mov	r7, r1
 800e3b6:	b933      	cbnz	r3, 800e3c6 <_strtod_l+0xace>
 800e3b8:	f1ba 0f00 	cmp.w	sl, #0
 800e3bc:	d103      	bne.n	800e3c6 <_strtod_l+0xace>
 800e3be:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800e3c2:	2d00      	cmp	r5, #0
 800e3c4:	d06d      	beq.n	800e4a2 <_strtod_l+0xbaa>
 800e3c6:	a30a      	add	r3, pc, #40	; (adr r3, 800e3f0 <_strtod_l+0xaf8>)
 800e3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3cc:	4630      	mov	r0, r6
 800e3ce:	4639      	mov	r1, r7
 800e3d0:	f7f2 fb84 	bl	8000adc <__aeabi_dcmplt>
 800e3d4:	2800      	cmp	r0, #0
 800e3d6:	f47f acb8 	bne.w	800dd4a <_strtod_l+0x452>
 800e3da:	a307      	add	r3, pc, #28	; (adr r3, 800e3f8 <_strtod_l+0xb00>)
 800e3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3e0:	4630      	mov	r0, r6
 800e3e2:	4639      	mov	r1, r7
 800e3e4:	f7f2 fb98 	bl	8000b18 <__aeabi_dcmpgt>
 800e3e8:	2800      	cmp	r0, #0
 800e3ea:	f43f af79 	beq.w	800e2e0 <_strtod_l+0x9e8>
 800e3ee:	e4ac      	b.n	800dd4a <_strtod_l+0x452>
 800e3f0:	94a03595 	.word	0x94a03595
 800e3f4:	3fdfffff 	.word	0x3fdfffff
 800e3f8:	35afe535 	.word	0x35afe535
 800e3fc:	3fe00000 	.word	0x3fe00000
 800e400:	000fffff 	.word	0x000fffff
 800e404:	7ff00000 	.word	0x7ff00000
 800e408:	7fefffff 	.word	0x7fefffff
 800e40c:	39500000 	.word	0x39500000
 800e410:	3ff00000 	.word	0x3ff00000
 800e414:	7fe00000 	.word	0x7fe00000
 800e418:	7c9fffff 	.word	0x7c9fffff
 800e41c:	3fe00000 	.word	0x3fe00000
 800e420:	bff00000 	.word	0xbff00000
 800e424:	9b04      	ldr	r3, [sp, #16]
 800e426:	b333      	cbz	r3, 800e476 <_strtod_l+0xb7e>
 800e428:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e42a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e42e:	d822      	bhi.n	800e476 <_strtod_l+0xb7e>
 800e430:	a327      	add	r3, pc, #156	; (adr r3, 800e4d0 <_strtod_l+0xbd8>)
 800e432:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e436:	4630      	mov	r0, r6
 800e438:	4639      	mov	r1, r7
 800e43a:	f7f2 fb59 	bl	8000af0 <__aeabi_dcmple>
 800e43e:	b1a0      	cbz	r0, 800e46a <_strtod_l+0xb72>
 800e440:	4639      	mov	r1, r7
 800e442:	4630      	mov	r0, r6
 800e444:	f7f2 fbb0 	bl	8000ba8 <__aeabi_d2uiz>
 800e448:	2800      	cmp	r0, #0
 800e44a:	bf08      	it	eq
 800e44c:	2001      	moveq	r0, #1
 800e44e:	f7f2 f859 	bl	8000504 <__aeabi_ui2d>
 800e452:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e454:	4606      	mov	r6, r0
 800e456:	460f      	mov	r7, r1
 800e458:	bb03      	cbnz	r3, 800e49c <_strtod_l+0xba4>
 800e45a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e45e:	9012      	str	r0, [sp, #72]	; 0x48
 800e460:	9313      	str	r3, [sp, #76]	; 0x4c
 800e462:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800e466:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800e46a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e46c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e46e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800e472:	1a9b      	subs	r3, r3, r2
 800e474:	930b      	str	r3, [sp, #44]	; 0x2c
 800e476:	ed9d 0b08 	vldr	d0, [sp, #32]
 800e47a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800e47e:	f001 fd2d 	bl	800fedc <__ulp>
 800e482:	4650      	mov	r0, sl
 800e484:	ec53 2b10 	vmov	r2, r3, d0
 800e488:	4659      	mov	r1, fp
 800e48a:	f7f2 f8b5 	bl	80005f8 <__aeabi_dmul>
 800e48e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e492:	f7f1 fefb 	bl	800028c <__adddf3>
 800e496:	4682      	mov	sl, r0
 800e498:	468b      	mov	fp, r1
 800e49a:	e772      	b.n	800e382 <_strtod_l+0xa8a>
 800e49c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800e4a0:	e7df      	b.n	800e462 <_strtod_l+0xb6a>
 800e4a2:	a30d      	add	r3, pc, #52	; (adr r3, 800e4d8 <_strtod_l+0xbe0>)
 800e4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4a8:	f7f2 fb18 	bl	8000adc <__aeabi_dcmplt>
 800e4ac:	e79c      	b.n	800e3e8 <_strtod_l+0xaf0>
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	930d      	str	r3, [sp, #52]	; 0x34
 800e4b2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e4b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e4b6:	6013      	str	r3, [r2, #0]
 800e4b8:	f7ff ba61 	b.w	800d97e <_strtod_l+0x86>
 800e4bc:	2b65      	cmp	r3, #101	; 0x65
 800e4be:	f04f 0200 	mov.w	r2, #0
 800e4c2:	f43f ab4e 	beq.w	800db62 <_strtod_l+0x26a>
 800e4c6:	2101      	movs	r1, #1
 800e4c8:	4614      	mov	r4, r2
 800e4ca:	9104      	str	r1, [sp, #16]
 800e4cc:	f7ff bacb 	b.w	800da66 <_strtod_l+0x16e>
 800e4d0:	ffc00000 	.word	0xffc00000
 800e4d4:	41dfffff 	.word	0x41dfffff
 800e4d8:	94a03595 	.word	0x94a03595
 800e4dc:	3fcfffff 	.word	0x3fcfffff

0800e4e0 <_strtod_r>:
 800e4e0:	4b05      	ldr	r3, [pc, #20]	; (800e4f8 <_strtod_r+0x18>)
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	b410      	push	{r4}
 800e4e6:	6a1b      	ldr	r3, [r3, #32]
 800e4e8:	4c04      	ldr	r4, [pc, #16]	; (800e4fc <_strtod_r+0x1c>)
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	bf08      	it	eq
 800e4ee:	4623      	moveq	r3, r4
 800e4f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e4f4:	f7ff ba00 	b.w	800d8f8 <_strtod_l>
 800e4f8:	20000180 	.word	0x20000180
 800e4fc:	200001e4 	.word	0x200001e4

0800e500 <_strtol_l.isra.0>:
 800e500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e504:	4680      	mov	r8, r0
 800e506:	4689      	mov	r9, r1
 800e508:	4692      	mov	sl, r2
 800e50a:	461e      	mov	r6, r3
 800e50c:	460f      	mov	r7, r1
 800e50e:	463d      	mov	r5, r7
 800e510:	9808      	ldr	r0, [sp, #32]
 800e512:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e516:	f001 f9ed 	bl	800f8f4 <__locale_ctype_ptr_l>
 800e51a:	4420      	add	r0, r4
 800e51c:	7843      	ldrb	r3, [r0, #1]
 800e51e:	f013 0308 	ands.w	r3, r3, #8
 800e522:	d132      	bne.n	800e58a <_strtol_l.isra.0+0x8a>
 800e524:	2c2d      	cmp	r4, #45	; 0x2d
 800e526:	d132      	bne.n	800e58e <_strtol_l.isra.0+0x8e>
 800e528:	787c      	ldrb	r4, [r7, #1]
 800e52a:	1cbd      	adds	r5, r7, #2
 800e52c:	2201      	movs	r2, #1
 800e52e:	2e00      	cmp	r6, #0
 800e530:	d05d      	beq.n	800e5ee <_strtol_l.isra.0+0xee>
 800e532:	2e10      	cmp	r6, #16
 800e534:	d109      	bne.n	800e54a <_strtol_l.isra.0+0x4a>
 800e536:	2c30      	cmp	r4, #48	; 0x30
 800e538:	d107      	bne.n	800e54a <_strtol_l.isra.0+0x4a>
 800e53a:	782b      	ldrb	r3, [r5, #0]
 800e53c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e540:	2b58      	cmp	r3, #88	; 0x58
 800e542:	d14f      	bne.n	800e5e4 <_strtol_l.isra.0+0xe4>
 800e544:	786c      	ldrb	r4, [r5, #1]
 800e546:	2610      	movs	r6, #16
 800e548:	3502      	adds	r5, #2
 800e54a:	2a00      	cmp	r2, #0
 800e54c:	bf14      	ite	ne
 800e54e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800e552:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800e556:	2700      	movs	r7, #0
 800e558:	fbb1 fcf6 	udiv	ip, r1, r6
 800e55c:	4638      	mov	r0, r7
 800e55e:	fb06 1e1c 	mls	lr, r6, ip, r1
 800e562:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800e566:	2b09      	cmp	r3, #9
 800e568:	d817      	bhi.n	800e59a <_strtol_l.isra.0+0x9a>
 800e56a:	461c      	mov	r4, r3
 800e56c:	42a6      	cmp	r6, r4
 800e56e:	dd23      	ble.n	800e5b8 <_strtol_l.isra.0+0xb8>
 800e570:	1c7b      	adds	r3, r7, #1
 800e572:	d007      	beq.n	800e584 <_strtol_l.isra.0+0x84>
 800e574:	4584      	cmp	ip, r0
 800e576:	d31c      	bcc.n	800e5b2 <_strtol_l.isra.0+0xb2>
 800e578:	d101      	bne.n	800e57e <_strtol_l.isra.0+0x7e>
 800e57a:	45a6      	cmp	lr, r4
 800e57c:	db19      	blt.n	800e5b2 <_strtol_l.isra.0+0xb2>
 800e57e:	fb00 4006 	mla	r0, r0, r6, r4
 800e582:	2701      	movs	r7, #1
 800e584:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e588:	e7eb      	b.n	800e562 <_strtol_l.isra.0+0x62>
 800e58a:	462f      	mov	r7, r5
 800e58c:	e7bf      	b.n	800e50e <_strtol_l.isra.0+0xe>
 800e58e:	2c2b      	cmp	r4, #43	; 0x2b
 800e590:	bf04      	itt	eq
 800e592:	1cbd      	addeq	r5, r7, #2
 800e594:	787c      	ldrbeq	r4, [r7, #1]
 800e596:	461a      	mov	r2, r3
 800e598:	e7c9      	b.n	800e52e <_strtol_l.isra.0+0x2e>
 800e59a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800e59e:	2b19      	cmp	r3, #25
 800e5a0:	d801      	bhi.n	800e5a6 <_strtol_l.isra.0+0xa6>
 800e5a2:	3c37      	subs	r4, #55	; 0x37
 800e5a4:	e7e2      	b.n	800e56c <_strtol_l.isra.0+0x6c>
 800e5a6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800e5aa:	2b19      	cmp	r3, #25
 800e5ac:	d804      	bhi.n	800e5b8 <_strtol_l.isra.0+0xb8>
 800e5ae:	3c57      	subs	r4, #87	; 0x57
 800e5b0:	e7dc      	b.n	800e56c <_strtol_l.isra.0+0x6c>
 800e5b2:	f04f 37ff 	mov.w	r7, #4294967295
 800e5b6:	e7e5      	b.n	800e584 <_strtol_l.isra.0+0x84>
 800e5b8:	1c7b      	adds	r3, r7, #1
 800e5ba:	d108      	bne.n	800e5ce <_strtol_l.isra.0+0xce>
 800e5bc:	2322      	movs	r3, #34	; 0x22
 800e5be:	f8c8 3000 	str.w	r3, [r8]
 800e5c2:	4608      	mov	r0, r1
 800e5c4:	f1ba 0f00 	cmp.w	sl, #0
 800e5c8:	d107      	bne.n	800e5da <_strtol_l.isra.0+0xda>
 800e5ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5ce:	b102      	cbz	r2, 800e5d2 <_strtol_l.isra.0+0xd2>
 800e5d0:	4240      	negs	r0, r0
 800e5d2:	f1ba 0f00 	cmp.w	sl, #0
 800e5d6:	d0f8      	beq.n	800e5ca <_strtol_l.isra.0+0xca>
 800e5d8:	b10f      	cbz	r7, 800e5de <_strtol_l.isra.0+0xde>
 800e5da:	f105 39ff 	add.w	r9, r5, #4294967295
 800e5de:	f8ca 9000 	str.w	r9, [sl]
 800e5e2:	e7f2      	b.n	800e5ca <_strtol_l.isra.0+0xca>
 800e5e4:	2430      	movs	r4, #48	; 0x30
 800e5e6:	2e00      	cmp	r6, #0
 800e5e8:	d1af      	bne.n	800e54a <_strtol_l.isra.0+0x4a>
 800e5ea:	2608      	movs	r6, #8
 800e5ec:	e7ad      	b.n	800e54a <_strtol_l.isra.0+0x4a>
 800e5ee:	2c30      	cmp	r4, #48	; 0x30
 800e5f0:	d0a3      	beq.n	800e53a <_strtol_l.isra.0+0x3a>
 800e5f2:	260a      	movs	r6, #10
 800e5f4:	e7a9      	b.n	800e54a <_strtol_l.isra.0+0x4a>
	...

0800e5f8 <_strtol_r>:
 800e5f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e5fa:	4c06      	ldr	r4, [pc, #24]	; (800e614 <_strtol_r+0x1c>)
 800e5fc:	4d06      	ldr	r5, [pc, #24]	; (800e618 <_strtol_r+0x20>)
 800e5fe:	6824      	ldr	r4, [r4, #0]
 800e600:	6a24      	ldr	r4, [r4, #32]
 800e602:	2c00      	cmp	r4, #0
 800e604:	bf08      	it	eq
 800e606:	462c      	moveq	r4, r5
 800e608:	9400      	str	r4, [sp, #0]
 800e60a:	f7ff ff79 	bl	800e500 <_strtol_l.isra.0>
 800e60e:	b003      	add	sp, #12
 800e610:	bd30      	pop	{r4, r5, pc}
 800e612:	bf00      	nop
 800e614:	20000180 	.word	0x20000180
 800e618:	200001e4 	.word	0x200001e4

0800e61c <quorem>:
 800e61c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e620:	6903      	ldr	r3, [r0, #16]
 800e622:	690c      	ldr	r4, [r1, #16]
 800e624:	42a3      	cmp	r3, r4
 800e626:	4680      	mov	r8, r0
 800e628:	f2c0 8082 	blt.w	800e730 <quorem+0x114>
 800e62c:	3c01      	subs	r4, #1
 800e62e:	f101 0714 	add.w	r7, r1, #20
 800e632:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800e636:	f100 0614 	add.w	r6, r0, #20
 800e63a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800e63e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800e642:	eb06 030c 	add.w	r3, r6, ip
 800e646:	3501      	adds	r5, #1
 800e648:	eb07 090c 	add.w	r9, r7, ip
 800e64c:	9301      	str	r3, [sp, #4]
 800e64e:	fbb0 f5f5 	udiv	r5, r0, r5
 800e652:	b395      	cbz	r5, 800e6ba <quorem+0x9e>
 800e654:	f04f 0a00 	mov.w	sl, #0
 800e658:	4638      	mov	r0, r7
 800e65a:	46b6      	mov	lr, r6
 800e65c:	46d3      	mov	fp, sl
 800e65e:	f850 2b04 	ldr.w	r2, [r0], #4
 800e662:	b293      	uxth	r3, r2
 800e664:	fb05 a303 	mla	r3, r5, r3, sl
 800e668:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e66c:	b29b      	uxth	r3, r3
 800e66e:	ebab 0303 	sub.w	r3, fp, r3
 800e672:	0c12      	lsrs	r2, r2, #16
 800e674:	f8de b000 	ldr.w	fp, [lr]
 800e678:	fb05 a202 	mla	r2, r5, r2, sl
 800e67c:	fa13 f38b 	uxtah	r3, r3, fp
 800e680:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800e684:	fa1f fb82 	uxth.w	fp, r2
 800e688:	f8de 2000 	ldr.w	r2, [lr]
 800e68c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800e690:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e694:	b29b      	uxth	r3, r3
 800e696:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e69a:	4581      	cmp	r9, r0
 800e69c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800e6a0:	f84e 3b04 	str.w	r3, [lr], #4
 800e6a4:	d2db      	bcs.n	800e65e <quorem+0x42>
 800e6a6:	f856 300c 	ldr.w	r3, [r6, ip]
 800e6aa:	b933      	cbnz	r3, 800e6ba <quorem+0x9e>
 800e6ac:	9b01      	ldr	r3, [sp, #4]
 800e6ae:	3b04      	subs	r3, #4
 800e6b0:	429e      	cmp	r6, r3
 800e6b2:	461a      	mov	r2, r3
 800e6b4:	d330      	bcc.n	800e718 <quorem+0xfc>
 800e6b6:	f8c8 4010 	str.w	r4, [r8, #16]
 800e6ba:	4640      	mov	r0, r8
 800e6bc:	f001 fb96 	bl	800fdec <__mcmp>
 800e6c0:	2800      	cmp	r0, #0
 800e6c2:	db25      	blt.n	800e710 <quorem+0xf4>
 800e6c4:	3501      	adds	r5, #1
 800e6c6:	4630      	mov	r0, r6
 800e6c8:	f04f 0c00 	mov.w	ip, #0
 800e6cc:	f857 2b04 	ldr.w	r2, [r7], #4
 800e6d0:	f8d0 e000 	ldr.w	lr, [r0]
 800e6d4:	b293      	uxth	r3, r2
 800e6d6:	ebac 0303 	sub.w	r3, ip, r3
 800e6da:	0c12      	lsrs	r2, r2, #16
 800e6dc:	fa13 f38e 	uxtah	r3, r3, lr
 800e6e0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e6e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e6e8:	b29b      	uxth	r3, r3
 800e6ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e6ee:	45b9      	cmp	r9, r7
 800e6f0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e6f4:	f840 3b04 	str.w	r3, [r0], #4
 800e6f8:	d2e8      	bcs.n	800e6cc <quorem+0xb0>
 800e6fa:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800e6fe:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800e702:	b92a      	cbnz	r2, 800e710 <quorem+0xf4>
 800e704:	3b04      	subs	r3, #4
 800e706:	429e      	cmp	r6, r3
 800e708:	461a      	mov	r2, r3
 800e70a:	d30b      	bcc.n	800e724 <quorem+0x108>
 800e70c:	f8c8 4010 	str.w	r4, [r8, #16]
 800e710:	4628      	mov	r0, r5
 800e712:	b003      	add	sp, #12
 800e714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e718:	6812      	ldr	r2, [r2, #0]
 800e71a:	3b04      	subs	r3, #4
 800e71c:	2a00      	cmp	r2, #0
 800e71e:	d1ca      	bne.n	800e6b6 <quorem+0x9a>
 800e720:	3c01      	subs	r4, #1
 800e722:	e7c5      	b.n	800e6b0 <quorem+0x94>
 800e724:	6812      	ldr	r2, [r2, #0]
 800e726:	3b04      	subs	r3, #4
 800e728:	2a00      	cmp	r2, #0
 800e72a:	d1ef      	bne.n	800e70c <quorem+0xf0>
 800e72c:	3c01      	subs	r4, #1
 800e72e:	e7ea      	b.n	800e706 <quorem+0xea>
 800e730:	2000      	movs	r0, #0
 800e732:	e7ee      	b.n	800e712 <quorem+0xf6>
 800e734:	0000      	movs	r0, r0
	...

0800e738 <_dtoa_r>:
 800e738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e73c:	ec57 6b10 	vmov	r6, r7, d0
 800e740:	b097      	sub	sp, #92	; 0x5c
 800e742:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e744:	9106      	str	r1, [sp, #24]
 800e746:	4604      	mov	r4, r0
 800e748:	920b      	str	r2, [sp, #44]	; 0x2c
 800e74a:	9312      	str	r3, [sp, #72]	; 0x48
 800e74c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e750:	e9cd 6700 	strd	r6, r7, [sp]
 800e754:	b93d      	cbnz	r5, 800e766 <_dtoa_r+0x2e>
 800e756:	2010      	movs	r0, #16
 800e758:	f7fe f970 	bl	800ca3c <malloc>
 800e75c:	6260      	str	r0, [r4, #36]	; 0x24
 800e75e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e762:	6005      	str	r5, [r0, #0]
 800e764:	60c5      	str	r5, [r0, #12]
 800e766:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e768:	6819      	ldr	r1, [r3, #0]
 800e76a:	b151      	cbz	r1, 800e782 <_dtoa_r+0x4a>
 800e76c:	685a      	ldr	r2, [r3, #4]
 800e76e:	604a      	str	r2, [r1, #4]
 800e770:	2301      	movs	r3, #1
 800e772:	4093      	lsls	r3, r2
 800e774:	608b      	str	r3, [r1, #8]
 800e776:	4620      	mov	r0, r4
 800e778:	f001 f918 	bl	800f9ac <_Bfree>
 800e77c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e77e:	2200      	movs	r2, #0
 800e780:	601a      	str	r2, [r3, #0]
 800e782:	1e3b      	subs	r3, r7, #0
 800e784:	bfbb      	ittet	lt
 800e786:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e78a:	9301      	strlt	r3, [sp, #4]
 800e78c:	2300      	movge	r3, #0
 800e78e:	2201      	movlt	r2, #1
 800e790:	bfac      	ite	ge
 800e792:	f8c8 3000 	strge.w	r3, [r8]
 800e796:	f8c8 2000 	strlt.w	r2, [r8]
 800e79a:	4baf      	ldr	r3, [pc, #700]	; (800ea58 <_dtoa_r+0x320>)
 800e79c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e7a0:	ea33 0308 	bics.w	r3, r3, r8
 800e7a4:	d114      	bne.n	800e7d0 <_dtoa_r+0x98>
 800e7a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e7a8:	f242 730f 	movw	r3, #9999	; 0x270f
 800e7ac:	6013      	str	r3, [r2, #0]
 800e7ae:	9b00      	ldr	r3, [sp, #0]
 800e7b0:	b923      	cbnz	r3, 800e7bc <_dtoa_r+0x84>
 800e7b2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800e7b6:	2800      	cmp	r0, #0
 800e7b8:	f000 8542 	beq.w	800f240 <_dtoa_r+0xb08>
 800e7bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e7be:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800ea6c <_dtoa_r+0x334>
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	f000 8544 	beq.w	800f250 <_dtoa_r+0xb18>
 800e7c8:	f10b 0303 	add.w	r3, fp, #3
 800e7cc:	f000 bd3e 	b.w	800f24c <_dtoa_r+0xb14>
 800e7d0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e7d4:	2200      	movs	r2, #0
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	4630      	mov	r0, r6
 800e7da:	4639      	mov	r1, r7
 800e7dc:	f7f2 f974 	bl	8000ac8 <__aeabi_dcmpeq>
 800e7e0:	4681      	mov	r9, r0
 800e7e2:	b168      	cbz	r0, 800e800 <_dtoa_r+0xc8>
 800e7e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e7e6:	2301      	movs	r3, #1
 800e7e8:	6013      	str	r3, [r2, #0]
 800e7ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	f000 8524 	beq.w	800f23a <_dtoa_r+0xb02>
 800e7f2:	4b9a      	ldr	r3, [pc, #616]	; (800ea5c <_dtoa_r+0x324>)
 800e7f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e7f6:	f103 3bff 	add.w	fp, r3, #4294967295
 800e7fa:	6013      	str	r3, [r2, #0]
 800e7fc:	f000 bd28 	b.w	800f250 <_dtoa_r+0xb18>
 800e800:	aa14      	add	r2, sp, #80	; 0x50
 800e802:	a915      	add	r1, sp, #84	; 0x54
 800e804:	ec47 6b10 	vmov	d0, r6, r7
 800e808:	4620      	mov	r0, r4
 800e80a:	f001 fbdd 	bl	800ffc8 <__d2b>
 800e80e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800e812:	9004      	str	r0, [sp, #16]
 800e814:	2d00      	cmp	r5, #0
 800e816:	d07c      	beq.n	800e912 <_dtoa_r+0x1da>
 800e818:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e81c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800e820:	46b2      	mov	sl, r6
 800e822:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800e826:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e82a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800e82e:	2200      	movs	r2, #0
 800e830:	4b8b      	ldr	r3, [pc, #556]	; (800ea60 <_dtoa_r+0x328>)
 800e832:	4650      	mov	r0, sl
 800e834:	4659      	mov	r1, fp
 800e836:	f7f1 fd27 	bl	8000288 <__aeabi_dsub>
 800e83a:	a381      	add	r3, pc, #516	; (adr r3, 800ea40 <_dtoa_r+0x308>)
 800e83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e840:	f7f1 feda 	bl	80005f8 <__aeabi_dmul>
 800e844:	a380      	add	r3, pc, #512	; (adr r3, 800ea48 <_dtoa_r+0x310>)
 800e846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e84a:	f7f1 fd1f 	bl	800028c <__adddf3>
 800e84e:	4606      	mov	r6, r0
 800e850:	4628      	mov	r0, r5
 800e852:	460f      	mov	r7, r1
 800e854:	f7f1 fe66 	bl	8000524 <__aeabi_i2d>
 800e858:	a37d      	add	r3, pc, #500	; (adr r3, 800ea50 <_dtoa_r+0x318>)
 800e85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e85e:	f7f1 fecb 	bl	80005f8 <__aeabi_dmul>
 800e862:	4602      	mov	r2, r0
 800e864:	460b      	mov	r3, r1
 800e866:	4630      	mov	r0, r6
 800e868:	4639      	mov	r1, r7
 800e86a:	f7f1 fd0f 	bl	800028c <__adddf3>
 800e86e:	4606      	mov	r6, r0
 800e870:	460f      	mov	r7, r1
 800e872:	f7f2 f971 	bl	8000b58 <__aeabi_d2iz>
 800e876:	2200      	movs	r2, #0
 800e878:	4682      	mov	sl, r0
 800e87a:	2300      	movs	r3, #0
 800e87c:	4630      	mov	r0, r6
 800e87e:	4639      	mov	r1, r7
 800e880:	f7f2 f92c 	bl	8000adc <__aeabi_dcmplt>
 800e884:	b148      	cbz	r0, 800e89a <_dtoa_r+0x162>
 800e886:	4650      	mov	r0, sl
 800e888:	f7f1 fe4c 	bl	8000524 <__aeabi_i2d>
 800e88c:	4632      	mov	r2, r6
 800e88e:	463b      	mov	r3, r7
 800e890:	f7f2 f91a 	bl	8000ac8 <__aeabi_dcmpeq>
 800e894:	b908      	cbnz	r0, 800e89a <_dtoa_r+0x162>
 800e896:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e89a:	f1ba 0f16 	cmp.w	sl, #22
 800e89e:	d859      	bhi.n	800e954 <_dtoa_r+0x21c>
 800e8a0:	4970      	ldr	r1, [pc, #448]	; (800ea64 <_dtoa_r+0x32c>)
 800e8a2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800e8a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e8aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e8ae:	f7f2 f933 	bl	8000b18 <__aeabi_dcmpgt>
 800e8b2:	2800      	cmp	r0, #0
 800e8b4:	d050      	beq.n	800e958 <_dtoa_r+0x220>
 800e8b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	930f      	str	r3, [sp, #60]	; 0x3c
 800e8be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e8c0:	1b5d      	subs	r5, r3, r5
 800e8c2:	f1b5 0801 	subs.w	r8, r5, #1
 800e8c6:	bf49      	itett	mi
 800e8c8:	f1c5 0301 	rsbmi	r3, r5, #1
 800e8cc:	2300      	movpl	r3, #0
 800e8ce:	9305      	strmi	r3, [sp, #20]
 800e8d0:	f04f 0800 	movmi.w	r8, #0
 800e8d4:	bf58      	it	pl
 800e8d6:	9305      	strpl	r3, [sp, #20]
 800e8d8:	f1ba 0f00 	cmp.w	sl, #0
 800e8dc:	db3e      	blt.n	800e95c <_dtoa_r+0x224>
 800e8de:	2300      	movs	r3, #0
 800e8e0:	44d0      	add	r8, sl
 800e8e2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800e8e6:	9307      	str	r3, [sp, #28]
 800e8e8:	9b06      	ldr	r3, [sp, #24]
 800e8ea:	2b09      	cmp	r3, #9
 800e8ec:	f200 8090 	bhi.w	800ea10 <_dtoa_r+0x2d8>
 800e8f0:	2b05      	cmp	r3, #5
 800e8f2:	bfc4      	itt	gt
 800e8f4:	3b04      	subgt	r3, #4
 800e8f6:	9306      	strgt	r3, [sp, #24]
 800e8f8:	9b06      	ldr	r3, [sp, #24]
 800e8fa:	f1a3 0302 	sub.w	r3, r3, #2
 800e8fe:	bfcc      	ite	gt
 800e900:	2500      	movgt	r5, #0
 800e902:	2501      	movle	r5, #1
 800e904:	2b03      	cmp	r3, #3
 800e906:	f200 808f 	bhi.w	800ea28 <_dtoa_r+0x2f0>
 800e90a:	e8df f003 	tbb	[pc, r3]
 800e90e:	7f7d      	.short	0x7f7d
 800e910:	7131      	.short	0x7131
 800e912:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800e916:	441d      	add	r5, r3
 800e918:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800e91c:	2820      	cmp	r0, #32
 800e91e:	dd13      	ble.n	800e948 <_dtoa_r+0x210>
 800e920:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800e924:	9b00      	ldr	r3, [sp, #0]
 800e926:	fa08 f800 	lsl.w	r8, r8, r0
 800e92a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800e92e:	fa23 f000 	lsr.w	r0, r3, r0
 800e932:	ea48 0000 	orr.w	r0, r8, r0
 800e936:	f7f1 fde5 	bl	8000504 <__aeabi_ui2d>
 800e93a:	2301      	movs	r3, #1
 800e93c:	4682      	mov	sl, r0
 800e93e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800e942:	3d01      	subs	r5, #1
 800e944:	9313      	str	r3, [sp, #76]	; 0x4c
 800e946:	e772      	b.n	800e82e <_dtoa_r+0xf6>
 800e948:	9b00      	ldr	r3, [sp, #0]
 800e94a:	f1c0 0020 	rsb	r0, r0, #32
 800e94e:	fa03 f000 	lsl.w	r0, r3, r0
 800e952:	e7f0      	b.n	800e936 <_dtoa_r+0x1fe>
 800e954:	2301      	movs	r3, #1
 800e956:	e7b1      	b.n	800e8bc <_dtoa_r+0x184>
 800e958:	900f      	str	r0, [sp, #60]	; 0x3c
 800e95a:	e7b0      	b.n	800e8be <_dtoa_r+0x186>
 800e95c:	9b05      	ldr	r3, [sp, #20]
 800e95e:	eba3 030a 	sub.w	r3, r3, sl
 800e962:	9305      	str	r3, [sp, #20]
 800e964:	f1ca 0300 	rsb	r3, sl, #0
 800e968:	9307      	str	r3, [sp, #28]
 800e96a:	2300      	movs	r3, #0
 800e96c:	930e      	str	r3, [sp, #56]	; 0x38
 800e96e:	e7bb      	b.n	800e8e8 <_dtoa_r+0x1b0>
 800e970:	2301      	movs	r3, #1
 800e972:	930a      	str	r3, [sp, #40]	; 0x28
 800e974:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e976:	2b00      	cmp	r3, #0
 800e978:	dd59      	ble.n	800ea2e <_dtoa_r+0x2f6>
 800e97a:	9302      	str	r3, [sp, #8]
 800e97c:	4699      	mov	r9, r3
 800e97e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e980:	2200      	movs	r2, #0
 800e982:	6072      	str	r2, [r6, #4]
 800e984:	2204      	movs	r2, #4
 800e986:	f102 0014 	add.w	r0, r2, #20
 800e98a:	4298      	cmp	r0, r3
 800e98c:	6871      	ldr	r1, [r6, #4]
 800e98e:	d953      	bls.n	800ea38 <_dtoa_r+0x300>
 800e990:	4620      	mov	r0, r4
 800e992:	f000 ffd7 	bl	800f944 <_Balloc>
 800e996:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e998:	6030      	str	r0, [r6, #0]
 800e99a:	f1b9 0f0e 	cmp.w	r9, #14
 800e99e:	f8d3 b000 	ldr.w	fp, [r3]
 800e9a2:	f200 80e6 	bhi.w	800eb72 <_dtoa_r+0x43a>
 800e9a6:	2d00      	cmp	r5, #0
 800e9a8:	f000 80e3 	beq.w	800eb72 <_dtoa_r+0x43a>
 800e9ac:	ed9d 7b00 	vldr	d7, [sp]
 800e9b0:	f1ba 0f00 	cmp.w	sl, #0
 800e9b4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800e9b8:	dd74      	ble.n	800eaa4 <_dtoa_r+0x36c>
 800e9ba:	4a2a      	ldr	r2, [pc, #168]	; (800ea64 <_dtoa_r+0x32c>)
 800e9bc:	f00a 030f 	and.w	r3, sl, #15
 800e9c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e9c4:	ed93 7b00 	vldr	d7, [r3]
 800e9c8:	ea4f 162a 	mov.w	r6, sl, asr #4
 800e9cc:	06f0      	lsls	r0, r6, #27
 800e9ce:	ed8d 7b08 	vstr	d7, [sp, #32]
 800e9d2:	d565      	bpl.n	800eaa0 <_dtoa_r+0x368>
 800e9d4:	4b24      	ldr	r3, [pc, #144]	; (800ea68 <_dtoa_r+0x330>)
 800e9d6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e9da:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e9de:	f7f1 ff35 	bl	800084c <__aeabi_ddiv>
 800e9e2:	e9cd 0100 	strd	r0, r1, [sp]
 800e9e6:	f006 060f 	and.w	r6, r6, #15
 800e9ea:	2503      	movs	r5, #3
 800e9ec:	4f1e      	ldr	r7, [pc, #120]	; (800ea68 <_dtoa_r+0x330>)
 800e9ee:	e04c      	b.n	800ea8a <_dtoa_r+0x352>
 800e9f0:	2301      	movs	r3, #1
 800e9f2:	930a      	str	r3, [sp, #40]	; 0x28
 800e9f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e9f6:	4453      	add	r3, sl
 800e9f8:	f103 0901 	add.w	r9, r3, #1
 800e9fc:	9302      	str	r3, [sp, #8]
 800e9fe:	464b      	mov	r3, r9
 800ea00:	2b01      	cmp	r3, #1
 800ea02:	bfb8      	it	lt
 800ea04:	2301      	movlt	r3, #1
 800ea06:	e7ba      	b.n	800e97e <_dtoa_r+0x246>
 800ea08:	2300      	movs	r3, #0
 800ea0a:	e7b2      	b.n	800e972 <_dtoa_r+0x23a>
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	e7f0      	b.n	800e9f2 <_dtoa_r+0x2ba>
 800ea10:	2501      	movs	r5, #1
 800ea12:	2300      	movs	r3, #0
 800ea14:	9306      	str	r3, [sp, #24]
 800ea16:	950a      	str	r5, [sp, #40]	; 0x28
 800ea18:	f04f 33ff 	mov.w	r3, #4294967295
 800ea1c:	9302      	str	r3, [sp, #8]
 800ea1e:	4699      	mov	r9, r3
 800ea20:	2200      	movs	r2, #0
 800ea22:	2312      	movs	r3, #18
 800ea24:	920b      	str	r2, [sp, #44]	; 0x2c
 800ea26:	e7aa      	b.n	800e97e <_dtoa_r+0x246>
 800ea28:	2301      	movs	r3, #1
 800ea2a:	930a      	str	r3, [sp, #40]	; 0x28
 800ea2c:	e7f4      	b.n	800ea18 <_dtoa_r+0x2e0>
 800ea2e:	2301      	movs	r3, #1
 800ea30:	9302      	str	r3, [sp, #8]
 800ea32:	4699      	mov	r9, r3
 800ea34:	461a      	mov	r2, r3
 800ea36:	e7f5      	b.n	800ea24 <_dtoa_r+0x2ec>
 800ea38:	3101      	adds	r1, #1
 800ea3a:	6071      	str	r1, [r6, #4]
 800ea3c:	0052      	lsls	r2, r2, #1
 800ea3e:	e7a2      	b.n	800e986 <_dtoa_r+0x24e>
 800ea40:	636f4361 	.word	0x636f4361
 800ea44:	3fd287a7 	.word	0x3fd287a7
 800ea48:	8b60c8b3 	.word	0x8b60c8b3
 800ea4c:	3fc68a28 	.word	0x3fc68a28
 800ea50:	509f79fb 	.word	0x509f79fb
 800ea54:	3fd34413 	.word	0x3fd34413
 800ea58:	7ff00000 	.word	0x7ff00000
 800ea5c:	080106d9 	.word	0x080106d9
 800ea60:	3ff80000 	.word	0x3ff80000
 800ea64:	08010798 	.word	0x08010798
 800ea68:	08010770 	.word	0x08010770
 800ea6c:	08010761 	.word	0x08010761
 800ea70:	07f1      	lsls	r1, r6, #31
 800ea72:	d508      	bpl.n	800ea86 <_dtoa_r+0x34e>
 800ea74:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ea78:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ea7c:	f7f1 fdbc 	bl	80005f8 <__aeabi_dmul>
 800ea80:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ea84:	3501      	adds	r5, #1
 800ea86:	1076      	asrs	r6, r6, #1
 800ea88:	3708      	adds	r7, #8
 800ea8a:	2e00      	cmp	r6, #0
 800ea8c:	d1f0      	bne.n	800ea70 <_dtoa_r+0x338>
 800ea8e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ea92:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ea96:	f7f1 fed9 	bl	800084c <__aeabi_ddiv>
 800ea9a:	e9cd 0100 	strd	r0, r1, [sp]
 800ea9e:	e01a      	b.n	800ead6 <_dtoa_r+0x39e>
 800eaa0:	2502      	movs	r5, #2
 800eaa2:	e7a3      	b.n	800e9ec <_dtoa_r+0x2b4>
 800eaa4:	f000 80a0 	beq.w	800ebe8 <_dtoa_r+0x4b0>
 800eaa8:	f1ca 0600 	rsb	r6, sl, #0
 800eaac:	4b9f      	ldr	r3, [pc, #636]	; (800ed2c <_dtoa_r+0x5f4>)
 800eaae:	4fa0      	ldr	r7, [pc, #640]	; (800ed30 <_dtoa_r+0x5f8>)
 800eab0:	f006 020f 	and.w	r2, r6, #15
 800eab4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eabc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800eac0:	f7f1 fd9a 	bl	80005f8 <__aeabi_dmul>
 800eac4:	e9cd 0100 	strd	r0, r1, [sp]
 800eac8:	1136      	asrs	r6, r6, #4
 800eaca:	2300      	movs	r3, #0
 800eacc:	2502      	movs	r5, #2
 800eace:	2e00      	cmp	r6, #0
 800ead0:	d17f      	bne.n	800ebd2 <_dtoa_r+0x49a>
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d1e1      	bne.n	800ea9a <_dtoa_r+0x362>
 800ead6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ead8:	2b00      	cmp	r3, #0
 800eada:	f000 8087 	beq.w	800ebec <_dtoa_r+0x4b4>
 800eade:	e9dd 6700 	ldrd	r6, r7, [sp]
 800eae2:	2200      	movs	r2, #0
 800eae4:	4b93      	ldr	r3, [pc, #588]	; (800ed34 <_dtoa_r+0x5fc>)
 800eae6:	4630      	mov	r0, r6
 800eae8:	4639      	mov	r1, r7
 800eaea:	f7f1 fff7 	bl	8000adc <__aeabi_dcmplt>
 800eaee:	2800      	cmp	r0, #0
 800eaf0:	d07c      	beq.n	800ebec <_dtoa_r+0x4b4>
 800eaf2:	f1b9 0f00 	cmp.w	r9, #0
 800eaf6:	d079      	beq.n	800ebec <_dtoa_r+0x4b4>
 800eaf8:	9b02      	ldr	r3, [sp, #8]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	dd35      	ble.n	800eb6a <_dtoa_r+0x432>
 800eafe:	f10a 33ff 	add.w	r3, sl, #4294967295
 800eb02:	9308      	str	r3, [sp, #32]
 800eb04:	4639      	mov	r1, r7
 800eb06:	2200      	movs	r2, #0
 800eb08:	4b8b      	ldr	r3, [pc, #556]	; (800ed38 <_dtoa_r+0x600>)
 800eb0a:	4630      	mov	r0, r6
 800eb0c:	f7f1 fd74 	bl	80005f8 <__aeabi_dmul>
 800eb10:	e9cd 0100 	strd	r0, r1, [sp]
 800eb14:	9f02      	ldr	r7, [sp, #8]
 800eb16:	3501      	adds	r5, #1
 800eb18:	4628      	mov	r0, r5
 800eb1a:	f7f1 fd03 	bl	8000524 <__aeabi_i2d>
 800eb1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eb22:	f7f1 fd69 	bl	80005f8 <__aeabi_dmul>
 800eb26:	2200      	movs	r2, #0
 800eb28:	4b84      	ldr	r3, [pc, #528]	; (800ed3c <_dtoa_r+0x604>)
 800eb2a:	f7f1 fbaf 	bl	800028c <__adddf3>
 800eb2e:	4605      	mov	r5, r0
 800eb30:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800eb34:	2f00      	cmp	r7, #0
 800eb36:	d15d      	bne.n	800ebf4 <_dtoa_r+0x4bc>
 800eb38:	2200      	movs	r2, #0
 800eb3a:	4b81      	ldr	r3, [pc, #516]	; (800ed40 <_dtoa_r+0x608>)
 800eb3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eb40:	f7f1 fba2 	bl	8000288 <__aeabi_dsub>
 800eb44:	462a      	mov	r2, r5
 800eb46:	4633      	mov	r3, r6
 800eb48:	e9cd 0100 	strd	r0, r1, [sp]
 800eb4c:	f7f1 ffe4 	bl	8000b18 <__aeabi_dcmpgt>
 800eb50:	2800      	cmp	r0, #0
 800eb52:	f040 8288 	bne.w	800f066 <_dtoa_r+0x92e>
 800eb56:	462a      	mov	r2, r5
 800eb58:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800eb5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eb60:	f7f1 ffbc 	bl	8000adc <__aeabi_dcmplt>
 800eb64:	2800      	cmp	r0, #0
 800eb66:	f040 827c 	bne.w	800f062 <_dtoa_r+0x92a>
 800eb6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800eb6e:	e9cd 2300 	strd	r2, r3, [sp]
 800eb72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	f2c0 8150 	blt.w	800ee1a <_dtoa_r+0x6e2>
 800eb7a:	f1ba 0f0e 	cmp.w	sl, #14
 800eb7e:	f300 814c 	bgt.w	800ee1a <_dtoa_r+0x6e2>
 800eb82:	4b6a      	ldr	r3, [pc, #424]	; (800ed2c <_dtoa_r+0x5f4>)
 800eb84:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800eb88:	ed93 7b00 	vldr	d7, [r3]
 800eb8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	ed8d 7b02 	vstr	d7, [sp, #8]
 800eb94:	f280 80d8 	bge.w	800ed48 <_dtoa_r+0x610>
 800eb98:	f1b9 0f00 	cmp.w	r9, #0
 800eb9c:	f300 80d4 	bgt.w	800ed48 <_dtoa_r+0x610>
 800eba0:	f040 825e 	bne.w	800f060 <_dtoa_r+0x928>
 800eba4:	2200      	movs	r2, #0
 800eba6:	4b66      	ldr	r3, [pc, #408]	; (800ed40 <_dtoa_r+0x608>)
 800eba8:	ec51 0b17 	vmov	r0, r1, d7
 800ebac:	f7f1 fd24 	bl	80005f8 <__aeabi_dmul>
 800ebb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ebb4:	f7f1 ffa6 	bl	8000b04 <__aeabi_dcmpge>
 800ebb8:	464f      	mov	r7, r9
 800ebba:	464e      	mov	r6, r9
 800ebbc:	2800      	cmp	r0, #0
 800ebbe:	f040 8234 	bne.w	800f02a <_dtoa_r+0x8f2>
 800ebc2:	2331      	movs	r3, #49	; 0x31
 800ebc4:	f10b 0501 	add.w	r5, fp, #1
 800ebc8:	f88b 3000 	strb.w	r3, [fp]
 800ebcc:	f10a 0a01 	add.w	sl, sl, #1
 800ebd0:	e22f      	b.n	800f032 <_dtoa_r+0x8fa>
 800ebd2:	07f2      	lsls	r2, r6, #31
 800ebd4:	d505      	bpl.n	800ebe2 <_dtoa_r+0x4aa>
 800ebd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ebda:	f7f1 fd0d 	bl	80005f8 <__aeabi_dmul>
 800ebde:	3501      	adds	r5, #1
 800ebe0:	2301      	movs	r3, #1
 800ebe2:	1076      	asrs	r6, r6, #1
 800ebe4:	3708      	adds	r7, #8
 800ebe6:	e772      	b.n	800eace <_dtoa_r+0x396>
 800ebe8:	2502      	movs	r5, #2
 800ebea:	e774      	b.n	800ead6 <_dtoa_r+0x39e>
 800ebec:	f8cd a020 	str.w	sl, [sp, #32]
 800ebf0:	464f      	mov	r7, r9
 800ebf2:	e791      	b.n	800eb18 <_dtoa_r+0x3e0>
 800ebf4:	4b4d      	ldr	r3, [pc, #308]	; (800ed2c <_dtoa_r+0x5f4>)
 800ebf6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ebfa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800ebfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d047      	beq.n	800ec94 <_dtoa_r+0x55c>
 800ec04:	4602      	mov	r2, r0
 800ec06:	460b      	mov	r3, r1
 800ec08:	2000      	movs	r0, #0
 800ec0a:	494e      	ldr	r1, [pc, #312]	; (800ed44 <_dtoa_r+0x60c>)
 800ec0c:	f7f1 fe1e 	bl	800084c <__aeabi_ddiv>
 800ec10:	462a      	mov	r2, r5
 800ec12:	4633      	mov	r3, r6
 800ec14:	f7f1 fb38 	bl	8000288 <__aeabi_dsub>
 800ec18:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ec1c:	465d      	mov	r5, fp
 800ec1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ec22:	f7f1 ff99 	bl	8000b58 <__aeabi_d2iz>
 800ec26:	4606      	mov	r6, r0
 800ec28:	f7f1 fc7c 	bl	8000524 <__aeabi_i2d>
 800ec2c:	4602      	mov	r2, r0
 800ec2e:	460b      	mov	r3, r1
 800ec30:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ec34:	f7f1 fb28 	bl	8000288 <__aeabi_dsub>
 800ec38:	3630      	adds	r6, #48	; 0x30
 800ec3a:	f805 6b01 	strb.w	r6, [r5], #1
 800ec3e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ec42:	e9cd 0100 	strd	r0, r1, [sp]
 800ec46:	f7f1 ff49 	bl	8000adc <__aeabi_dcmplt>
 800ec4a:	2800      	cmp	r0, #0
 800ec4c:	d163      	bne.n	800ed16 <_dtoa_r+0x5de>
 800ec4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ec52:	2000      	movs	r0, #0
 800ec54:	4937      	ldr	r1, [pc, #220]	; (800ed34 <_dtoa_r+0x5fc>)
 800ec56:	f7f1 fb17 	bl	8000288 <__aeabi_dsub>
 800ec5a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ec5e:	f7f1 ff3d 	bl	8000adc <__aeabi_dcmplt>
 800ec62:	2800      	cmp	r0, #0
 800ec64:	f040 80b7 	bne.w	800edd6 <_dtoa_r+0x69e>
 800ec68:	eba5 030b 	sub.w	r3, r5, fp
 800ec6c:	429f      	cmp	r7, r3
 800ec6e:	f77f af7c 	ble.w	800eb6a <_dtoa_r+0x432>
 800ec72:	2200      	movs	r2, #0
 800ec74:	4b30      	ldr	r3, [pc, #192]	; (800ed38 <_dtoa_r+0x600>)
 800ec76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ec7a:	f7f1 fcbd 	bl	80005f8 <__aeabi_dmul>
 800ec7e:	2200      	movs	r2, #0
 800ec80:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ec84:	4b2c      	ldr	r3, [pc, #176]	; (800ed38 <_dtoa_r+0x600>)
 800ec86:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ec8a:	f7f1 fcb5 	bl	80005f8 <__aeabi_dmul>
 800ec8e:	e9cd 0100 	strd	r0, r1, [sp]
 800ec92:	e7c4      	b.n	800ec1e <_dtoa_r+0x4e6>
 800ec94:	462a      	mov	r2, r5
 800ec96:	4633      	mov	r3, r6
 800ec98:	f7f1 fcae 	bl	80005f8 <__aeabi_dmul>
 800ec9c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800eca0:	eb0b 0507 	add.w	r5, fp, r7
 800eca4:	465e      	mov	r6, fp
 800eca6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ecaa:	f7f1 ff55 	bl	8000b58 <__aeabi_d2iz>
 800ecae:	4607      	mov	r7, r0
 800ecb0:	f7f1 fc38 	bl	8000524 <__aeabi_i2d>
 800ecb4:	3730      	adds	r7, #48	; 0x30
 800ecb6:	4602      	mov	r2, r0
 800ecb8:	460b      	mov	r3, r1
 800ecba:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ecbe:	f7f1 fae3 	bl	8000288 <__aeabi_dsub>
 800ecc2:	f806 7b01 	strb.w	r7, [r6], #1
 800ecc6:	42ae      	cmp	r6, r5
 800ecc8:	e9cd 0100 	strd	r0, r1, [sp]
 800eccc:	f04f 0200 	mov.w	r2, #0
 800ecd0:	d126      	bne.n	800ed20 <_dtoa_r+0x5e8>
 800ecd2:	4b1c      	ldr	r3, [pc, #112]	; (800ed44 <_dtoa_r+0x60c>)
 800ecd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ecd8:	f7f1 fad8 	bl	800028c <__adddf3>
 800ecdc:	4602      	mov	r2, r0
 800ecde:	460b      	mov	r3, r1
 800ece0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ece4:	f7f1 ff18 	bl	8000b18 <__aeabi_dcmpgt>
 800ece8:	2800      	cmp	r0, #0
 800ecea:	d174      	bne.n	800edd6 <_dtoa_r+0x69e>
 800ecec:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ecf0:	2000      	movs	r0, #0
 800ecf2:	4914      	ldr	r1, [pc, #80]	; (800ed44 <_dtoa_r+0x60c>)
 800ecf4:	f7f1 fac8 	bl	8000288 <__aeabi_dsub>
 800ecf8:	4602      	mov	r2, r0
 800ecfa:	460b      	mov	r3, r1
 800ecfc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ed00:	f7f1 feec 	bl	8000adc <__aeabi_dcmplt>
 800ed04:	2800      	cmp	r0, #0
 800ed06:	f43f af30 	beq.w	800eb6a <_dtoa_r+0x432>
 800ed0a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ed0e:	2b30      	cmp	r3, #48	; 0x30
 800ed10:	f105 32ff 	add.w	r2, r5, #4294967295
 800ed14:	d002      	beq.n	800ed1c <_dtoa_r+0x5e4>
 800ed16:	f8dd a020 	ldr.w	sl, [sp, #32]
 800ed1a:	e04a      	b.n	800edb2 <_dtoa_r+0x67a>
 800ed1c:	4615      	mov	r5, r2
 800ed1e:	e7f4      	b.n	800ed0a <_dtoa_r+0x5d2>
 800ed20:	4b05      	ldr	r3, [pc, #20]	; (800ed38 <_dtoa_r+0x600>)
 800ed22:	f7f1 fc69 	bl	80005f8 <__aeabi_dmul>
 800ed26:	e9cd 0100 	strd	r0, r1, [sp]
 800ed2a:	e7bc      	b.n	800eca6 <_dtoa_r+0x56e>
 800ed2c:	08010798 	.word	0x08010798
 800ed30:	08010770 	.word	0x08010770
 800ed34:	3ff00000 	.word	0x3ff00000
 800ed38:	40240000 	.word	0x40240000
 800ed3c:	401c0000 	.word	0x401c0000
 800ed40:	40140000 	.word	0x40140000
 800ed44:	3fe00000 	.word	0x3fe00000
 800ed48:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ed4c:	465d      	mov	r5, fp
 800ed4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ed52:	4630      	mov	r0, r6
 800ed54:	4639      	mov	r1, r7
 800ed56:	f7f1 fd79 	bl	800084c <__aeabi_ddiv>
 800ed5a:	f7f1 fefd 	bl	8000b58 <__aeabi_d2iz>
 800ed5e:	4680      	mov	r8, r0
 800ed60:	f7f1 fbe0 	bl	8000524 <__aeabi_i2d>
 800ed64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ed68:	f7f1 fc46 	bl	80005f8 <__aeabi_dmul>
 800ed6c:	4602      	mov	r2, r0
 800ed6e:	460b      	mov	r3, r1
 800ed70:	4630      	mov	r0, r6
 800ed72:	4639      	mov	r1, r7
 800ed74:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800ed78:	f7f1 fa86 	bl	8000288 <__aeabi_dsub>
 800ed7c:	f805 6b01 	strb.w	r6, [r5], #1
 800ed80:	eba5 060b 	sub.w	r6, r5, fp
 800ed84:	45b1      	cmp	r9, r6
 800ed86:	4602      	mov	r2, r0
 800ed88:	460b      	mov	r3, r1
 800ed8a:	d139      	bne.n	800ee00 <_dtoa_r+0x6c8>
 800ed8c:	f7f1 fa7e 	bl	800028c <__adddf3>
 800ed90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ed94:	4606      	mov	r6, r0
 800ed96:	460f      	mov	r7, r1
 800ed98:	f7f1 febe 	bl	8000b18 <__aeabi_dcmpgt>
 800ed9c:	b9c8      	cbnz	r0, 800edd2 <_dtoa_r+0x69a>
 800ed9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eda2:	4630      	mov	r0, r6
 800eda4:	4639      	mov	r1, r7
 800eda6:	f7f1 fe8f 	bl	8000ac8 <__aeabi_dcmpeq>
 800edaa:	b110      	cbz	r0, 800edb2 <_dtoa_r+0x67a>
 800edac:	f018 0f01 	tst.w	r8, #1
 800edb0:	d10f      	bne.n	800edd2 <_dtoa_r+0x69a>
 800edb2:	9904      	ldr	r1, [sp, #16]
 800edb4:	4620      	mov	r0, r4
 800edb6:	f000 fdf9 	bl	800f9ac <_Bfree>
 800edba:	2300      	movs	r3, #0
 800edbc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800edbe:	702b      	strb	r3, [r5, #0]
 800edc0:	f10a 0301 	add.w	r3, sl, #1
 800edc4:	6013      	str	r3, [r2, #0]
 800edc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800edc8:	2b00      	cmp	r3, #0
 800edca:	f000 8241 	beq.w	800f250 <_dtoa_r+0xb18>
 800edce:	601d      	str	r5, [r3, #0]
 800edd0:	e23e      	b.n	800f250 <_dtoa_r+0xb18>
 800edd2:	f8cd a020 	str.w	sl, [sp, #32]
 800edd6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800edda:	2a39      	cmp	r2, #57	; 0x39
 800eddc:	f105 33ff 	add.w	r3, r5, #4294967295
 800ede0:	d108      	bne.n	800edf4 <_dtoa_r+0x6bc>
 800ede2:	459b      	cmp	fp, r3
 800ede4:	d10a      	bne.n	800edfc <_dtoa_r+0x6c4>
 800ede6:	9b08      	ldr	r3, [sp, #32]
 800ede8:	3301      	adds	r3, #1
 800edea:	9308      	str	r3, [sp, #32]
 800edec:	2330      	movs	r3, #48	; 0x30
 800edee:	f88b 3000 	strb.w	r3, [fp]
 800edf2:	465b      	mov	r3, fp
 800edf4:	781a      	ldrb	r2, [r3, #0]
 800edf6:	3201      	adds	r2, #1
 800edf8:	701a      	strb	r2, [r3, #0]
 800edfa:	e78c      	b.n	800ed16 <_dtoa_r+0x5de>
 800edfc:	461d      	mov	r5, r3
 800edfe:	e7ea      	b.n	800edd6 <_dtoa_r+0x69e>
 800ee00:	2200      	movs	r2, #0
 800ee02:	4b9b      	ldr	r3, [pc, #620]	; (800f070 <_dtoa_r+0x938>)
 800ee04:	f7f1 fbf8 	bl	80005f8 <__aeabi_dmul>
 800ee08:	2200      	movs	r2, #0
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	4606      	mov	r6, r0
 800ee0e:	460f      	mov	r7, r1
 800ee10:	f7f1 fe5a 	bl	8000ac8 <__aeabi_dcmpeq>
 800ee14:	2800      	cmp	r0, #0
 800ee16:	d09a      	beq.n	800ed4e <_dtoa_r+0x616>
 800ee18:	e7cb      	b.n	800edb2 <_dtoa_r+0x67a>
 800ee1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ee1c:	2a00      	cmp	r2, #0
 800ee1e:	f000 808b 	beq.w	800ef38 <_dtoa_r+0x800>
 800ee22:	9a06      	ldr	r2, [sp, #24]
 800ee24:	2a01      	cmp	r2, #1
 800ee26:	dc6e      	bgt.n	800ef06 <_dtoa_r+0x7ce>
 800ee28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ee2a:	2a00      	cmp	r2, #0
 800ee2c:	d067      	beq.n	800eefe <_dtoa_r+0x7c6>
 800ee2e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ee32:	9f07      	ldr	r7, [sp, #28]
 800ee34:	9d05      	ldr	r5, [sp, #20]
 800ee36:	9a05      	ldr	r2, [sp, #20]
 800ee38:	2101      	movs	r1, #1
 800ee3a:	441a      	add	r2, r3
 800ee3c:	4620      	mov	r0, r4
 800ee3e:	9205      	str	r2, [sp, #20]
 800ee40:	4498      	add	r8, r3
 800ee42:	f000 fe91 	bl	800fb68 <__i2b>
 800ee46:	4606      	mov	r6, r0
 800ee48:	2d00      	cmp	r5, #0
 800ee4a:	dd0c      	ble.n	800ee66 <_dtoa_r+0x72e>
 800ee4c:	f1b8 0f00 	cmp.w	r8, #0
 800ee50:	dd09      	ble.n	800ee66 <_dtoa_r+0x72e>
 800ee52:	4545      	cmp	r5, r8
 800ee54:	9a05      	ldr	r2, [sp, #20]
 800ee56:	462b      	mov	r3, r5
 800ee58:	bfa8      	it	ge
 800ee5a:	4643      	movge	r3, r8
 800ee5c:	1ad2      	subs	r2, r2, r3
 800ee5e:	9205      	str	r2, [sp, #20]
 800ee60:	1aed      	subs	r5, r5, r3
 800ee62:	eba8 0803 	sub.w	r8, r8, r3
 800ee66:	9b07      	ldr	r3, [sp, #28]
 800ee68:	b1eb      	cbz	r3, 800eea6 <_dtoa_r+0x76e>
 800ee6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d067      	beq.n	800ef40 <_dtoa_r+0x808>
 800ee70:	b18f      	cbz	r7, 800ee96 <_dtoa_r+0x75e>
 800ee72:	4631      	mov	r1, r6
 800ee74:	463a      	mov	r2, r7
 800ee76:	4620      	mov	r0, r4
 800ee78:	f000 ff16 	bl	800fca8 <__pow5mult>
 800ee7c:	9a04      	ldr	r2, [sp, #16]
 800ee7e:	4601      	mov	r1, r0
 800ee80:	4606      	mov	r6, r0
 800ee82:	4620      	mov	r0, r4
 800ee84:	f000 fe79 	bl	800fb7a <__multiply>
 800ee88:	9904      	ldr	r1, [sp, #16]
 800ee8a:	9008      	str	r0, [sp, #32]
 800ee8c:	4620      	mov	r0, r4
 800ee8e:	f000 fd8d 	bl	800f9ac <_Bfree>
 800ee92:	9b08      	ldr	r3, [sp, #32]
 800ee94:	9304      	str	r3, [sp, #16]
 800ee96:	9b07      	ldr	r3, [sp, #28]
 800ee98:	1bda      	subs	r2, r3, r7
 800ee9a:	d004      	beq.n	800eea6 <_dtoa_r+0x76e>
 800ee9c:	9904      	ldr	r1, [sp, #16]
 800ee9e:	4620      	mov	r0, r4
 800eea0:	f000 ff02 	bl	800fca8 <__pow5mult>
 800eea4:	9004      	str	r0, [sp, #16]
 800eea6:	2101      	movs	r1, #1
 800eea8:	4620      	mov	r0, r4
 800eeaa:	f000 fe5d 	bl	800fb68 <__i2b>
 800eeae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eeb0:	4607      	mov	r7, r0
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	f000 81d0 	beq.w	800f258 <_dtoa_r+0xb20>
 800eeb8:	461a      	mov	r2, r3
 800eeba:	4601      	mov	r1, r0
 800eebc:	4620      	mov	r0, r4
 800eebe:	f000 fef3 	bl	800fca8 <__pow5mult>
 800eec2:	9b06      	ldr	r3, [sp, #24]
 800eec4:	2b01      	cmp	r3, #1
 800eec6:	4607      	mov	r7, r0
 800eec8:	dc40      	bgt.n	800ef4c <_dtoa_r+0x814>
 800eeca:	9b00      	ldr	r3, [sp, #0]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d139      	bne.n	800ef44 <_dtoa_r+0x80c>
 800eed0:	9b01      	ldr	r3, [sp, #4]
 800eed2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d136      	bne.n	800ef48 <_dtoa_r+0x810>
 800eeda:	9b01      	ldr	r3, [sp, #4]
 800eedc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800eee0:	0d1b      	lsrs	r3, r3, #20
 800eee2:	051b      	lsls	r3, r3, #20
 800eee4:	b12b      	cbz	r3, 800eef2 <_dtoa_r+0x7ba>
 800eee6:	9b05      	ldr	r3, [sp, #20]
 800eee8:	3301      	adds	r3, #1
 800eeea:	9305      	str	r3, [sp, #20]
 800eeec:	f108 0801 	add.w	r8, r8, #1
 800eef0:	2301      	movs	r3, #1
 800eef2:	9307      	str	r3, [sp, #28]
 800eef4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d12a      	bne.n	800ef50 <_dtoa_r+0x818>
 800eefa:	2001      	movs	r0, #1
 800eefc:	e030      	b.n	800ef60 <_dtoa_r+0x828>
 800eefe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ef00:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ef04:	e795      	b.n	800ee32 <_dtoa_r+0x6fa>
 800ef06:	9b07      	ldr	r3, [sp, #28]
 800ef08:	f109 37ff 	add.w	r7, r9, #4294967295
 800ef0c:	42bb      	cmp	r3, r7
 800ef0e:	bfbf      	itttt	lt
 800ef10:	9b07      	ldrlt	r3, [sp, #28]
 800ef12:	9707      	strlt	r7, [sp, #28]
 800ef14:	1afa      	sublt	r2, r7, r3
 800ef16:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800ef18:	bfbb      	ittet	lt
 800ef1a:	189b      	addlt	r3, r3, r2
 800ef1c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800ef1e:	1bdf      	subge	r7, r3, r7
 800ef20:	2700      	movlt	r7, #0
 800ef22:	f1b9 0f00 	cmp.w	r9, #0
 800ef26:	bfb5      	itete	lt
 800ef28:	9b05      	ldrlt	r3, [sp, #20]
 800ef2a:	9d05      	ldrge	r5, [sp, #20]
 800ef2c:	eba3 0509 	sublt.w	r5, r3, r9
 800ef30:	464b      	movge	r3, r9
 800ef32:	bfb8      	it	lt
 800ef34:	2300      	movlt	r3, #0
 800ef36:	e77e      	b.n	800ee36 <_dtoa_r+0x6fe>
 800ef38:	9f07      	ldr	r7, [sp, #28]
 800ef3a:	9d05      	ldr	r5, [sp, #20]
 800ef3c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800ef3e:	e783      	b.n	800ee48 <_dtoa_r+0x710>
 800ef40:	9a07      	ldr	r2, [sp, #28]
 800ef42:	e7ab      	b.n	800ee9c <_dtoa_r+0x764>
 800ef44:	2300      	movs	r3, #0
 800ef46:	e7d4      	b.n	800eef2 <_dtoa_r+0x7ba>
 800ef48:	9b00      	ldr	r3, [sp, #0]
 800ef4a:	e7d2      	b.n	800eef2 <_dtoa_r+0x7ba>
 800ef4c:	2300      	movs	r3, #0
 800ef4e:	9307      	str	r3, [sp, #28]
 800ef50:	693b      	ldr	r3, [r7, #16]
 800ef52:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800ef56:	6918      	ldr	r0, [r3, #16]
 800ef58:	f000 fdb8 	bl	800facc <__hi0bits>
 800ef5c:	f1c0 0020 	rsb	r0, r0, #32
 800ef60:	4440      	add	r0, r8
 800ef62:	f010 001f 	ands.w	r0, r0, #31
 800ef66:	d047      	beq.n	800eff8 <_dtoa_r+0x8c0>
 800ef68:	f1c0 0320 	rsb	r3, r0, #32
 800ef6c:	2b04      	cmp	r3, #4
 800ef6e:	dd3b      	ble.n	800efe8 <_dtoa_r+0x8b0>
 800ef70:	9b05      	ldr	r3, [sp, #20]
 800ef72:	f1c0 001c 	rsb	r0, r0, #28
 800ef76:	4403      	add	r3, r0
 800ef78:	9305      	str	r3, [sp, #20]
 800ef7a:	4405      	add	r5, r0
 800ef7c:	4480      	add	r8, r0
 800ef7e:	9b05      	ldr	r3, [sp, #20]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	dd05      	ble.n	800ef90 <_dtoa_r+0x858>
 800ef84:	461a      	mov	r2, r3
 800ef86:	9904      	ldr	r1, [sp, #16]
 800ef88:	4620      	mov	r0, r4
 800ef8a:	f000 fedb 	bl	800fd44 <__lshift>
 800ef8e:	9004      	str	r0, [sp, #16]
 800ef90:	f1b8 0f00 	cmp.w	r8, #0
 800ef94:	dd05      	ble.n	800efa2 <_dtoa_r+0x86a>
 800ef96:	4639      	mov	r1, r7
 800ef98:	4642      	mov	r2, r8
 800ef9a:	4620      	mov	r0, r4
 800ef9c:	f000 fed2 	bl	800fd44 <__lshift>
 800efa0:	4607      	mov	r7, r0
 800efa2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800efa4:	b353      	cbz	r3, 800effc <_dtoa_r+0x8c4>
 800efa6:	4639      	mov	r1, r7
 800efa8:	9804      	ldr	r0, [sp, #16]
 800efaa:	f000 ff1f 	bl	800fdec <__mcmp>
 800efae:	2800      	cmp	r0, #0
 800efb0:	da24      	bge.n	800effc <_dtoa_r+0x8c4>
 800efb2:	2300      	movs	r3, #0
 800efb4:	220a      	movs	r2, #10
 800efb6:	9904      	ldr	r1, [sp, #16]
 800efb8:	4620      	mov	r0, r4
 800efba:	f000 fd0e 	bl	800f9da <__multadd>
 800efbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800efc0:	9004      	str	r0, [sp, #16]
 800efc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	f000 814d 	beq.w	800f266 <_dtoa_r+0xb2e>
 800efcc:	2300      	movs	r3, #0
 800efce:	4631      	mov	r1, r6
 800efd0:	220a      	movs	r2, #10
 800efd2:	4620      	mov	r0, r4
 800efd4:	f000 fd01 	bl	800f9da <__multadd>
 800efd8:	9b02      	ldr	r3, [sp, #8]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	4606      	mov	r6, r0
 800efde:	dc4f      	bgt.n	800f080 <_dtoa_r+0x948>
 800efe0:	9b06      	ldr	r3, [sp, #24]
 800efe2:	2b02      	cmp	r3, #2
 800efe4:	dd4c      	ble.n	800f080 <_dtoa_r+0x948>
 800efe6:	e011      	b.n	800f00c <_dtoa_r+0x8d4>
 800efe8:	d0c9      	beq.n	800ef7e <_dtoa_r+0x846>
 800efea:	9a05      	ldr	r2, [sp, #20]
 800efec:	331c      	adds	r3, #28
 800efee:	441a      	add	r2, r3
 800eff0:	9205      	str	r2, [sp, #20]
 800eff2:	441d      	add	r5, r3
 800eff4:	4498      	add	r8, r3
 800eff6:	e7c2      	b.n	800ef7e <_dtoa_r+0x846>
 800eff8:	4603      	mov	r3, r0
 800effa:	e7f6      	b.n	800efea <_dtoa_r+0x8b2>
 800effc:	f1b9 0f00 	cmp.w	r9, #0
 800f000:	dc38      	bgt.n	800f074 <_dtoa_r+0x93c>
 800f002:	9b06      	ldr	r3, [sp, #24]
 800f004:	2b02      	cmp	r3, #2
 800f006:	dd35      	ble.n	800f074 <_dtoa_r+0x93c>
 800f008:	f8cd 9008 	str.w	r9, [sp, #8]
 800f00c:	9b02      	ldr	r3, [sp, #8]
 800f00e:	b963      	cbnz	r3, 800f02a <_dtoa_r+0x8f2>
 800f010:	4639      	mov	r1, r7
 800f012:	2205      	movs	r2, #5
 800f014:	4620      	mov	r0, r4
 800f016:	f000 fce0 	bl	800f9da <__multadd>
 800f01a:	4601      	mov	r1, r0
 800f01c:	4607      	mov	r7, r0
 800f01e:	9804      	ldr	r0, [sp, #16]
 800f020:	f000 fee4 	bl	800fdec <__mcmp>
 800f024:	2800      	cmp	r0, #0
 800f026:	f73f adcc 	bgt.w	800ebc2 <_dtoa_r+0x48a>
 800f02a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f02c:	465d      	mov	r5, fp
 800f02e:	ea6f 0a03 	mvn.w	sl, r3
 800f032:	f04f 0900 	mov.w	r9, #0
 800f036:	4639      	mov	r1, r7
 800f038:	4620      	mov	r0, r4
 800f03a:	f000 fcb7 	bl	800f9ac <_Bfree>
 800f03e:	2e00      	cmp	r6, #0
 800f040:	f43f aeb7 	beq.w	800edb2 <_dtoa_r+0x67a>
 800f044:	f1b9 0f00 	cmp.w	r9, #0
 800f048:	d005      	beq.n	800f056 <_dtoa_r+0x91e>
 800f04a:	45b1      	cmp	r9, r6
 800f04c:	d003      	beq.n	800f056 <_dtoa_r+0x91e>
 800f04e:	4649      	mov	r1, r9
 800f050:	4620      	mov	r0, r4
 800f052:	f000 fcab 	bl	800f9ac <_Bfree>
 800f056:	4631      	mov	r1, r6
 800f058:	4620      	mov	r0, r4
 800f05a:	f000 fca7 	bl	800f9ac <_Bfree>
 800f05e:	e6a8      	b.n	800edb2 <_dtoa_r+0x67a>
 800f060:	2700      	movs	r7, #0
 800f062:	463e      	mov	r6, r7
 800f064:	e7e1      	b.n	800f02a <_dtoa_r+0x8f2>
 800f066:	f8dd a020 	ldr.w	sl, [sp, #32]
 800f06a:	463e      	mov	r6, r7
 800f06c:	e5a9      	b.n	800ebc2 <_dtoa_r+0x48a>
 800f06e:	bf00      	nop
 800f070:	40240000 	.word	0x40240000
 800f074:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f076:	f8cd 9008 	str.w	r9, [sp, #8]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	f000 80fa 	beq.w	800f274 <_dtoa_r+0xb3c>
 800f080:	2d00      	cmp	r5, #0
 800f082:	dd05      	ble.n	800f090 <_dtoa_r+0x958>
 800f084:	4631      	mov	r1, r6
 800f086:	462a      	mov	r2, r5
 800f088:	4620      	mov	r0, r4
 800f08a:	f000 fe5b 	bl	800fd44 <__lshift>
 800f08e:	4606      	mov	r6, r0
 800f090:	9b07      	ldr	r3, [sp, #28]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d04c      	beq.n	800f130 <_dtoa_r+0x9f8>
 800f096:	6871      	ldr	r1, [r6, #4]
 800f098:	4620      	mov	r0, r4
 800f09a:	f000 fc53 	bl	800f944 <_Balloc>
 800f09e:	6932      	ldr	r2, [r6, #16]
 800f0a0:	3202      	adds	r2, #2
 800f0a2:	4605      	mov	r5, r0
 800f0a4:	0092      	lsls	r2, r2, #2
 800f0a6:	f106 010c 	add.w	r1, r6, #12
 800f0aa:	300c      	adds	r0, #12
 800f0ac:	f7fd fcd6 	bl	800ca5c <memcpy>
 800f0b0:	2201      	movs	r2, #1
 800f0b2:	4629      	mov	r1, r5
 800f0b4:	4620      	mov	r0, r4
 800f0b6:	f000 fe45 	bl	800fd44 <__lshift>
 800f0ba:	9b00      	ldr	r3, [sp, #0]
 800f0bc:	f8cd b014 	str.w	fp, [sp, #20]
 800f0c0:	f003 0301 	and.w	r3, r3, #1
 800f0c4:	46b1      	mov	r9, r6
 800f0c6:	9307      	str	r3, [sp, #28]
 800f0c8:	4606      	mov	r6, r0
 800f0ca:	4639      	mov	r1, r7
 800f0cc:	9804      	ldr	r0, [sp, #16]
 800f0ce:	f7ff faa5 	bl	800e61c <quorem>
 800f0d2:	4649      	mov	r1, r9
 800f0d4:	4605      	mov	r5, r0
 800f0d6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800f0da:	9804      	ldr	r0, [sp, #16]
 800f0dc:	f000 fe86 	bl	800fdec <__mcmp>
 800f0e0:	4632      	mov	r2, r6
 800f0e2:	9000      	str	r0, [sp, #0]
 800f0e4:	4639      	mov	r1, r7
 800f0e6:	4620      	mov	r0, r4
 800f0e8:	f000 fe9a 	bl	800fe20 <__mdiff>
 800f0ec:	68c3      	ldr	r3, [r0, #12]
 800f0ee:	4602      	mov	r2, r0
 800f0f0:	bb03      	cbnz	r3, 800f134 <_dtoa_r+0x9fc>
 800f0f2:	4601      	mov	r1, r0
 800f0f4:	9008      	str	r0, [sp, #32]
 800f0f6:	9804      	ldr	r0, [sp, #16]
 800f0f8:	f000 fe78 	bl	800fdec <__mcmp>
 800f0fc:	9a08      	ldr	r2, [sp, #32]
 800f0fe:	4603      	mov	r3, r0
 800f100:	4611      	mov	r1, r2
 800f102:	4620      	mov	r0, r4
 800f104:	9308      	str	r3, [sp, #32]
 800f106:	f000 fc51 	bl	800f9ac <_Bfree>
 800f10a:	9b08      	ldr	r3, [sp, #32]
 800f10c:	b9a3      	cbnz	r3, 800f138 <_dtoa_r+0xa00>
 800f10e:	9a06      	ldr	r2, [sp, #24]
 800f110:	b992      	cbnz	r2, 800f138 <_dtoa_r+0xa00>
 800f112:	9a07      	ldr	r2, [sp, #28]
 800f114:	b982      	cbnz	r2, 800f138 <_dtoa_r+0xa00>
 800f116:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800f11a:	d029      	beq.n	800f170 <_dtoa_r+0xa38>
 800f11c:	9b00      	ldr	r3, [sp, #0]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	dd01      	ble.n	800f126 <_dtoa_r+0x9ee>
 800f122:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800f126:	9b05      	ldr	r3, [sp, #20]
 800f128:	1c5d      	adds	r5, r3, #1
 800f12a:	f883 8000 	strb.w	r8, [r3]
 800f12e:	e782      	b.n	800f036 <_dtoa_r+0x8fe>
 800f130:	4630      	mov	r0, r6
 800f132:	e7c2      	b.n	800f0ba <_dtoa_r+0x982>
 800f134:	2301      	movs	r3, #1
 800f136:	e7e3      	b.n	800f100 <_dtoa_r+0x9c8>
 800f138:	9a00      	ldr	r2, [sp, #0]
 800f13a:	2a00      	cmp	r2, #0
 800f13c:	db04      	blt.n	800f148 <_dtoa_r+0xa10>
 800f13e:	d125      	bne.n	800f18c <_dtoa_r+0xa54>
 800f140:	9a06      	ldr	r2, [sp, #24]
 800f142:	bb1a      	cbnz	r2, 800f18c <_dtoa_r+0xa54>
 800f144:	9a07      	ldr	r2, [sp, #28]
 800f146:	bb0a      	cbnz	r2, 800f18c <_dtoa_r+0xa54>
 800f148:	2b00      	cmp	r3, #0
 800f14a:	ddec      	ble.n	800f126 <_dtoa_r+0x9ee>
 800f14c:	2201      	movs	r2, #1
 800f14e:	9904      	ldr	r1, [sp, #16]
 800f150:	4620      	mov	r0, r4
 800f152:	f000 fdf7 	bl	800fd44 <__lshift>
 800f156:	4639      	mov	r1, r7
 800f158:	9004      	str	r0, [sp, #16]
 800f15a:	f000 fe47 	bl	800fdec <__mcmp>
 800f15e:	2800      	cmp	r0, #0
 800f160:	dc03      	bgt.n	800f16a <_dtoa_r+0xa32>
 800f162:	d1e0      	bne.n	800f126 <_dtoa_r+0x9ee>
 800f164:	f018 0f01 	tst.w	r8, #1
 800f168:	d0dd      	beq.n	800f126 <_dtoa_r+0x9ee>
 800f16a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800f16e:	d1d8      	bne.n	800f122 <_dtoa_r+0x9ea>
 800f170:	9b05      	ldr	r3, [sp, #20]
 800f172:	9a05      	ldr	r2, [sp, #20]
 800f174:	1c5d      	adds	r5, r3, #1
 800f176:	2339      	movs	r3, #57	; 0x39
 800f178:	7013      	strb	r3, [r2, #0]
 800f17a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f17e:	2b39      	cmp	r3, #57	; 0x39
 800f180:	f105 32ff 	add.w	r2, r5, #4294967295
 800f184:	d04f      	beq.n	800f226 <_dtoa_r+0xaee>
 800f186:	3301      	adds	r3, #1
 800f188:	7013      	strb	r3, [r2, #0]
 800f18a:	e754      	b.n	800f036 <_dtoa_r+0x8fe>
 800f18c:	9a05      	ldr	r2, [sp, #20]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	f102 0501 	add.w	r5, r2, #1
 800f194:	dd06      	ble.n	800f1a4 <_dtoa_r+0xa6c>
 800f196:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800f19a:	d0e9      	beq.n	800f170 <_dtoa_r+0xa38>
 800f19c:	f108 0801 	add.w	r8, r8, #1
 800f1a0:	9b05      	ldr	r3, [sp, #20]
 800f1a2:	e7c2      	b.n	800f12a <_dtoa_r+0x9f2>
 800f1a4:	9a02      	ldr	r2, [sp, #8]
 800f1a6:	f805 8c01 	strb.w	r8, [r5, #-1]
 800f1aa:	eba5 030b 	sub.w	r3, r5, fp
 800f1ae:	4293      	cmp	r3, r2
 800f1b0:	d021      	beq.n	800f1f6 <_dtoa_r+0xabe>
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	220a      	movs	r2, #10
 800f1b6:	9904      	ldr	r1, [sp, #16]
 800f1b8:	4620      	mov	r0, r4
 800f1ba:	f000 fc0e 	bl	800f9da <__multadd>
 800f1be:	45b1      	cmp	r9, r6
 800f1c0:	9004      	str	r0, [sp, #16]
 800f1c2:	f04f 0300 	mov.w	r3, #0
 800f1c6:	f04f 020a 	mov.w	r2, #10
 800f1ca:	4649      	mov	r1, r9
 800f1cc:	4620      	mov	r0, r4
 800f1ce:	d105      	bne.n	800f1dc <_dtoa_r+0xaa4>
 800f1d0:	f000 fc03 	bl	800f9da <__multadd>
 800f1d4:	4681      	mov	r9, r0
 800f1d6:	4606      	mov	r6, r0
 800f1d8:	9505      	str	r5, [sp, #20]
 800f1da:	e776      	b.n	800f0ca <_dtoa_r+0x992>
 800f1dc:	f000 fbfd 	bl	800f9da <__multadd>
 800f1e0:	4631      	mov	r1, r6
 800f1e2:	4681      	mov	r9, r0
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	220a      	movs	r2, #10
 800f1e8:	4620      	mov	r0, r4
 800f1ea:	f000 fbf6 	bl	800f9da <__multadd>
 800f1ee:	4606      	mov	r6, r0
 800f1f0:	e7f2      	b.n	800f1d8 <_dtoa_r+0xaa0>
 800f1f2:	f04f 0900 	mov.w	r9, #0
 800f1f6:	2201      	movs	r2, #1
 800f1f8:	9904      	ldr	r1, [sp, #16]
 800f1fa:	4620      	mov	r0, r4
 800f1fc:	f000 fda2 	bl	800fd44 <__lshift>
 800f200:	4639      	mov	r1, r7
 800f202:	9004      	str	r0, [sp, #16]
 800f204:	f000 fdf2 	bl	800fdec <__mcmp>
 800f208:	2800      	cmp	r0, #0
 800f20a:	dcb6      	bgt.n	800f17a <_dtoa_r+0xa42>
 800f20c:	d102      	bne.n	800f214 <_dtoa_r+0xadc>
 800f20e:	f018 0f01 	tst.w	r8, #1
 800f212:	d1b2      	bne.n	800f17a <_dtoa_r+0xa42>
 800f214:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f218:	2b30      	cmp	r3, #48	; 0x30
 800f21a:	f105 32ff 	add.w	r2, r5, #4294967295
 800f21e:	f47f af0a 	bne.w	800f036 <_dtoa_r+0x8fe>
 800f222:	4615      	mov	r5, r2
 800f224:	e7f6      	b.n	800f214 <_dtoa_r+0xadc>
 800f226:	4593      	cmp	fp, r2
 800f228:	d105      	bne.n	800f236 <_dtoa_r+0xafe>
 800f22a:	2331      	movs	r3, #49	; 0x31
 800f22c:	f10a 0a01 	add.w	sl, sl, #1
 800f230:	f88b 3000 	strb.w	r3, [fp]
 800f234:	e6ff      	b.n	800f036 <_dtoa_r+0x8fe>
 800f236:	4615      	mov	r5, r2
 800f238:	e79f      	b.n	800f17a <_dtoa_r+0xa42>
 800f23a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800f2a0 <_dtoa_r+0xb68>
 800f23e:	e007      	b.n	800f250 <_dtoa_r+0xb18>
 800f240:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f242:	f8df b060 	ldr.w	fp, [pc, #96]	; 800f2a4 <_dtoa_r+0xb6c>
 800f246:	b11b      	cbz	r3, 800f250 <_dtoa_r+0xb18>
 800f248:	f10b 0308 	add.w	r3, fp, #8
 800f24c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f24e:	6013      	str	r3, [r2, #0]
 800f250:	4658      	mov	r0, fp
 800f252:	b017      	add	sp, #92	; 0x5c
 800f254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f258:	9b06      	ldr	r3, [sp, #24]
 800f25a:	2b01      	cmp	r3, #1
 800f25c:	f77f ae35 	ble.w	800eeca <_dtoa_r+0x792>
 800f260:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f262:	9307      	str	r3, [sp, #28]
 800f264:	e649      	b.n	800eefa <_dtoa_r+0x7c2>
 800f266:	9b02      	ldr	r3, [sp, #8]
 800f268:	2b00      	cmp	r3, #0
 800f26a:	dc03      	bgt.n	800f274 <_dtoa_r+0xb3c>
 800f26c:	9b06      	ldr	r3, [sp, #24]
 800f26e:	2b02      	cmp	r3, #2
 800f270:	f73f aecc 	bgt.w	800f00c <_dtoa_r+0x8d4>
 800f274:	465d      	mov	r5, fp
 800f276:	4639      	mov	r1, r7
 800f278:	9804      	ldr	r0, [sp, #16]
 800f27a:	f7ff f9cf 	bl	800e61c <quorem>
 800f27e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800f282:	f805 8b01 	strb.w	r8, [r5], #1
 800f286:	9a02      	ldr	r2, [sp, #8]
 800f288:	eba5 030b 	sub.w	r3, r5, fp
 800f28c:	429a      	cmp	r2, r3
 800f28e:	ddb0      	ble.n	800f1f2 <_dtoa_r+0xaba>
 800f290:	2300      	movs	r3, #0
 800f292:	220a      	movs	r2, #10
 800f294:	9904      	ldr	r1, [sp, #16]
 800f296:	4620      	mov	r0, r4
 800f298:	f000 fb9f 	bl	800f9da <__multadd>
 800f29c:	9004      	str	r0, [sp, #16]
 800f29e:	e7ea      	b.n	800f276 <_dtoa_r+0xb3e>
 800f2a0:	080106d8 	.word	0x080106d8
 800f2a4:	08010758 	.word	0x08010758

0800f2a8 <rshift>:
 800f2a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f2aa:	6906      	ldr	r6, [r0, #16]
 800f2ac:	114b      	asrs	r3, r1, #5
 800f2ae:	429e      	cmp	r6, r3
 800f2b0:	f100 0414 	add.w	r4, r0, #20
 800f2b4:	dd30      	ble.n	800f318 <rshift+0x70>
 800f2b6:	f011 011f 	ands.w	r1, r1, #31
 800f2ba:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800f2be:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800f2c2:	d108      	bne.n	800f2d6 <rshift+0x2e>
 800f2c4:	4621      	mov	r1, r4
 800f2c6:	42b2      	cmp	r2, r6
 800f2c8:	460b      	mov	r3, r1
 800f2ca:	d211      	bcs.n	800f2f0 <rshift+0x48>
 800f2cc:	f852 3b04 	ldr.w	r3, [r2], #4
 800f2d0:	f841 3b04 	str.w	r3, [r1], #4
 800f2d4:	e7f7      	b.n	800f2c6 <rshift+0x1e>
 800f2d6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800f2da:	f1c1 0c20 	rsb	ip, r1, #32
 800f2de:	40cd      	lsrs	r5, r1
 800f2e0:	3204      	adds	r2, #4
 800f2e2:	4623      	mov	r3, r4
 800f2e4:	42b2      	cmp	r2, r6
 800f2e6:	4617      	mov	r7, r2
 800f2e8:	d30c      	bcc.n	800f304 <rshift+0x5c>
 800f2ea:	601d      	str	r5, [r3, #0]
 800f2ec:	b105      	cbz	r5, 800f2f0 <rshift+0x48>
 800f2ee:	3304      	adds	r3, #4
 800f2f0:	1b1a      	subs	r2, r3, r4
 800f2f2:	42a3      	cmp	r3, r4
 800f2f4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f2f8:	bf08      	it	eq
 800f2fa:	2300      	moveq	r3, #0
 800f2fc:	6102      	str	r2, [r0, #16]
 800f2fe:	bf08      	it	eq
 800f300:	6143      	streq	r3, [r0, #20]
 800f302:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f304:	683f      	ldr	r7, [r7, #0]
 800f306:	fa07 f70c 	lsl.w	r7, r7, ip
 800f30a:	433d      	orrs	r5, r7
 800f30c:	f843 5b04 	str.w	r5, [r3], #4
 800f310:	f852 5b04 	ldr.w	r5, [r2], #4
 800f314:	40cd      	lsrs	r5, r1
 800f316:	e7e5      	b.n	800f2e4 <rshift+0x3c>
 800f318:	4623      	mov	r3, r4
 800f31a:	e7e9      	b.n	800f2f0 <rshift+0x48>

0800f31c <__hexdig_fun>:
 800f31c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f320:	2b09      	cmp	r3, #9
 800f322:	d802      	bhi.n	800f32a <__hexdig_fun+0xe>
 800f324:	3820      	subs	r0, #32
 800f326:	b2c0      	uxtb	r0, r0
 800f328:	4770      	bx	lr
 800f32a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f32e:	2b05      	cmp	r3, #5
 800f330:	d801      	bhi.n	800f336 <__hexdig_fun+0x1a>
 800f332:	3847      	subs	r0, #71	; 0x47
 800f334:	e7f7      	b.n	800f326 <__hexdig_fun+0xa>
 800f336:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f33a:	2b05      	cmp	r3, #5
 800f33c:	d801      	bhi.n	800f342 <__hexdig_fun+0x26>
 800f33e:	3827      	subs	r0, #39	; 0x27
 800f340:	e7f1      	b.n	800f326 <__hexdig_fun+0xa>
 800f342:	2000      	movs	r0, #0
 800f344:	4770      	bx	lr

0800f346 <__gethex>:
 800f346:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f34a:	b08b      	sub	sp, #44	; 0x2c
 800f34c:	468a      	mov	sl, r1
 800f34e:	9002      	str	r0, [sp, #8]
 800f350:	9816      	ldr	r0, [sp, #88]	; 0x58
 800f352:	9306      	str	r3, [sp, #24]
 800f354:	4690      	mov	r8, r2
 800f356:	f000 fad0 	bl	800f8fa <__localeconv_l>
 800f35a:	6803      	ldr	r3, [r0, #0]
 800f35c:	9303      	str	r3, [sp, #12]
 800f35e:	4618      	mov	r0, r3
 800f360:	f7f0 ff36 	bl	80001d0 <strlen>
 800f364:	9b03      	ldr	r3, [sp, #12]
 800f366:	9001      	str	r0, [sp, #4]
 800f368:	4403      	add	r3, r0
 800f36a:	f04f 0b00 	mov.w	fp, #0
 800f36e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800f372:	9307      	str	r3, [sp, #28]
 800f374:	f8da 3000 	ldr.w	r3, [sl]
 800f378:	3302      	adds	r3, #2
 800f37a:	461f      	mov	r7, r3
 800f37c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f380:	2830      	cmp	r0, #48	; 0x30
 800f382:	d06c      	beq.n	800f45e <__gethex+0x118>
 800f384:	f7ff ffca 	bl	800f31c <__hexdig_fun>
 800f388:	4604      	mov	r4, r0
 800f38a:	2800      	cmp	r0, #0
 800f38c:	d16a      	bne.n	800f464 <__gethex+0x11e>
 800f38e:	9a01      	ldr	r2, [sp, #4]
 800f390:	9903      	ldr	r1, [sp, #12]
 800f392:	4638      	mov	r0, r7
 800f394:	f001 f836 	bl	8010404 <strncmp>
 800f398:	2800      	cmp	r0, #0
 800f39a:	d166      	bne.n	800f46a <__gethex+0x124>
 800f39c:	9b01      	ldr	r3, [sp, #4]
 800f39e:	5cf8      	ldrb	r0, [r7, r3]
 800f3a0:	18fe      	adds	r6, r7, r3
 800f3a2:	f7ff ffbb 	bl	800f31c <__hexdig_fun>
 800f3a6:	2800      	cmp	r0, #0
 800f3a8:	d062      	beq.n	800f470 <__gethex+0x12a>
 800f3aa:	4633      	mov	r3, r6
 800f3ac:	7818      	ldrb	r0, [r3, #0]
 800f3ae:	2830      	cmp	r0, #48	; 0x30
 800f3b0:	461f      	mov	r7, r3
 800f3b2:	f103 0301 	add.w	r3, r3, #1
 800f3b6:	d0f9      	beq.n	800f3ac <__gethex+0x66>
 800f3b8:	f7ff ffb0 	bl	800f31c <__hexdig_fun>
 800f3bc:	fab0 f580 	clz	r5, r0
 800f3c0:	096d      	lsrs	r5, r5, #5
 800f3c2:	4634      	mov	r4, r6
 800f3c4:	f04f 0b01 	mov.w	fp, #1
 800f3c8:	463a      	mov	r2, r7
 800f3ca:	4616      	mov	r6, r2
 800f3cc:	3201      	adds	r2, #1
 800f3ce:	7830      	ldrb	r0, [r6, #0]
 800f3d0:	f7ff ffa4 	bl	800f31c <__hexdig_fun>
 800f3d4:	2800      	cmp	r0, #0
 800f3d6:	d1f8      	bne.n	800f3ca <__gethex+0x84>
 800f3d8:	9a01      	ldr	r2, [sp, #4]
 800f3da:	9903      	ldr	r1, [sp, #12]
 800f3dc:	4630      	mov	r0, r6
 800f3de:	f001 f811 	bl	8010404 <strncmp>
 800f3e2:	b950      	cbnz	r0, 800f3fa <__gethex+0xb4>
 800f3e4:	b954      	cbnz	r4, 800f3fc <__gethex+0xb6>
 800f3e6:	9b01      	ldr	r3, [sp, #4]
 800f3e8:	18f4      	adds	r4, r6, r3
 800f3ea:	4622      	mov	r2, r4
 800f3ec:	4616      	mov	r6, r2
 800f3ee:	3201      	adds	r2, #1
 800f3f0:	7830      	ldrb	r0, [r6, #0]
 800f3f2:	f7ff ff93 	bl	800f31c <__hexdig_fun>
 800f3f6:	2800      	cmp	r0, #0
 800f3f8:	d1f8      	bne.n	800f3ec <__gethex+0xa6>
 800f3fa:	b10c      	cbz	r4, 800f400 <__gethex+0xba>
 800f3fc:	1ba4      	subs	r4, r4, r6
 800f3fe:	00a4      	lsls	r4, r4, #2
 800f400:	7833      	ldrb	r3, [r6, #0]
 800f402:	2b50      	cmp	r3, #80	; 0x50
 800f404:	d001      	beq.n	800f40a <__gethex+0xc4>
 800f406:	2b70      	cmp	r3, #112	; 0x70
 800f408:	d140      	bne.n	800f48c <__gethex+0x146>
 800f40a:	7873      	ldrb	r3, [r6, #1]
 800f40c:	2b2b      	cmp	r3, #43	; 0x2b
 800f40e:	d031      	beq.n	800f474 <__gethex+0x12e>
 800f410:	2b2d      	cmp	r3, #45	; 0x2d
 800f412:	d033      	beq.n	800f47c <__gethex+0x136>
 800f414:	1c71      	adds	r1, r6, #1
 800f416:	f04f 0900 	mov.w	r9, #0
 800f41a:	7808      	ldrb	r0, [r1, #0]
 800f41c:	f7ff ff7e 	bl	800f31c <__hexdig_fun>
 800f420:	1e43      	subs	r3, r0, #1
 800f422:	b2db      	uxtb	r3, r3
 800f424:	2b18      	cmp	r3, #24
 800f426:	d831      	bhi.n	800f48c <__gethex+0x146>
 800f428:	f1a0 0210 	sub.w	r2, r0, #16
 800f42c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f430:	f7ff ff74 	bl	800f31c <__hexdig_fun>
 800f434:	1e43      	subs	r3, r0, #1
 800f436:	b2db      	uxtb	r3, r3
 800f438:	2b18      	cmp	r3, #24
 800f43a:	d922      	bls.n	800f482 <__gethex+0x13c>
 800f43c:	f1b9 0f00 	cmp.w	r9, #0
 800f440:	d000      	beq.n	800f444 <__gethex+0xfe>
 800f442:	4252      	negs	r2, r2
 800f444:	4414      	add	r4, r2
 800f446:	f8ca 1000 	str.w	r1, [sl]
 800f44a:	b30d      	cbz	r5, 800f490 <__gethex+0x14a>
 800f44c:	f1bb 0f00 	cmp.w	fp, #0
 800f450:	bf0c      	ite	eq
 800f452:	2706      	moveq	r7, #6
 800f454:	2700      	movne	r7, #0
 800f456:	4638      	mov	r0, r7
 800f458:	b00b      	add	sp, #44	; 0x2c
 800f45a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f45e:	f10b 0b01 	add.w	fp, fp, #1
 800f462:	e78a      	b.n	800f37a <__gethex+0x34>
 800f464:	2500      	movs	r5, #0
 800f466:	462c      	mov	r4, r5
 800f468:	e7ae      	b.n	800f3c8 <__gethex+0x82>
 800f46a:	463e      	mov	r6, r7
 800f46c:	2501      	movs	r5, #1
 800f46e:	e7c7      	b.n	800f400 <__gethex+0xba>
 800f470:	4604      	mov	r4, r0
 800f472:	e7fb      	b.n	800f46c <__gethex+0x126>
 800f474:	f04f 0900 	mov.w	r9, #0
 800f478:	1cb1      	adds	r1, r6, #2
 800f47a:	e7ce      	b.n	800f41a <__gethex+0xd4>
 800f47c:	f04f 0901 	mov.w	r9, #1
 800f480:	e7fa      	b.n	800f478 <__gethex+0x132>
 800f482:	230a      	movs	r3, #10
 800f484:	fb03 0202 	mla	r2, r3, r2, r0
 800f488:	3a10      	subs	r2, #16
 800f48a:	e7cf      	b.n	800f42c <__gethex+0xe6>
 800f48c:	4631      	mov	r1, r6
 800f48e:	e7da      	b.n	800f446 <__gethex+0x100>
 800f490:	1bf3      	subs	r3, r6, r7
 800f492:	3b01      	subs	r3, #1
 800f494:	4629      	mov	r1, r5
 800f496:	2b07      	cmp	r3, #7
 800f498:	dc49      	bgt.n	800f52e <__gethex+0x1e8>
 800f49a:	9802      	ldr	r0, [sp, #8]
 800f49c:	f000 fa52 	bl	800f944 <_Balloc>
 800f4a0:	9b01      	ldr	r3, [sp, #4]
 800f4a2:	f100 0914 	add.w	r9, r0, #20
 800f4a6:	f04f 0b00 	mov.w	fp, #0
 800f4aa:	f1c3 0301 	rsb	r3, r3, #1
 800f4ae:	4605      	mov	r5, r0
 800f4b0:	f8cd 9010 	str.w	r9, [sp, #16]
 800f4b4:	46da      	mov	sl, fp
 800f4b6:	9308      	str	r3, [sp, #32]
 800f4b8:	42b7      	cmp	r7, r6
 800f4ba:	d33b      	bcc.n	800f534 <__gethex+0x1ee>
 800f4bc:	9804      	ldr	r0, [sp, #16]
 800f4be:	f840 ab04 	str.w	sl, [r0], #4
 800f4c2:	eba0 0009 	sub.w	r0, r0, r9
 800f4c6:	1080      	asrs	r0, r0, #2
 800f4c8:	6128      	str	r0, [r5, #16]
 800f4ca:	0147      	lsls	r7, r0, #5
 800f4cc:	4650      	mov	r0, sl
 800f4ce:	f000 fafd 	bl	800facc <__hi0bits>
 800f4d2:	f8d8 6000 	ldr.w	r6, [r8]
 800f4d6:	1a3f      	subs	r7, r7, r0
 800f4d8:	42b7      	cmp	r7, r6
 800f4da:	dd64      	ble.n	800f5a6 <__gethex+0x260>
 800f4dc:	1bbf      	subs	r7, r7, r6
 800f4de:	4639      	mov	r1, r7
 800f4e0:	4628      	mov	r0, r5
 800f4e2:	f000 fe0d 	bl	8010100 <__any_on>
 800f4e6:	4682      	mov	sl, r0
 800f4e8:	b178      	cbz	r0, 800f50a <__gethex+0x1c4>
 800f4ea:	1e7b      	subs	r3, r7, #1
 800f4ec:	1159      	asrs	r1, r3, #5
 800f4ee:	f003 021f 	and.w	r2, r3, #31
 800f4f2:	f04f 0a01 	mov.w	sl, #1
 800f4f6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f4fa:	fa0a f202 	lsl.w	r2, sl, r2
 800f4fe:	420a      	tst	r2, r1
 800f500:	d003      	beq.n	800f50a <__gethex+0x1c4>
 800f502:	4553      	cmp	r3, sl
 800f504:	dc46      	bgt.n	800f594 <__gethex+0x24e>
 800f506:	f04f 0a02 	mov.w	sl, #2
 800f50a:	4639      	mov	r1, r7
 800f50c:	4628      	mov	r0, r5
 800f50e:	f7ff fecb 	bl	800f2a8 <rshift>
 800f512:	443c      	add	r4, r7
 800f514:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f518:	42a3      	cmp	r3, r4
 800f51a:	da52      	bge.n	800f5c2 <__gethex+0x27c>
 800f51c:	4629      	mov	r1, r5
 800f51e:	9802      	ldr	r0, [sp, #8]
 800f520:	f000 fa44 	bl	800f9ac <_Bfree>
 800f524:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f526:	2300      	movs	r3, #0
 800f528:	6013      	str	r3, [r2, #0]
 800f52a:	27a3      	movs	r7, #163	; 0xa3
 800f52c:	e793      	b.n	800f456 <__gethex+0x110>
 800f52e:	3101      	adds	r1, #1
 800f530:	105b      	asrs	r3, r3, #1
 800f532:	e7b0      	b.n	800f496 <__gethex+0x150>
 800f534:	1e73      	subs	r3, r6, #1
 800f536:	9305      	str	r3, [sp, #20]
 800f538:	9a07      	ldr	r2, [sp, #28]
 800f53a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f53e:	4293      	cmp	r3, r2
 800f540:	d018      	beq.n	800f574 <__gethex+0x22e>
 800f542:	f1bb 0f20 	cmp.w	fp, #32
 800f546:	d107      	bne.n	800f558 <__gethex+0x212>
 800f548:	9b04      	ldr	r3, [sp, #16]
 800f54a:	f8c3 a000 	str.w	sl, [r3]
 800f54e:	3304      	adds	r3, #4
 800f550:	f04f 0a00 	mov.w	sl, #0
 800f554:	9304      	str	r3, [sp, #16]
 800f556:	46d3      	mov	fp, sl
 800f558:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f55c:	f7ff fede 	bl	800f31c <__hexdig_fun>
 800f560:	f000 000f 	and.w	r0, r0, #15
 800f564:	fa00 f00b 	lsl.w	r0, r0, fp
 800f568:	ea4a 0a00 	orr.w	sl, sl, r0
 800f56c:	f10b 0b04 	add.w	fp, fp, #4
 800f570:	9b05      	ldr	r3, [sp, #20]
 800f572:	e00d      	b.n	800f590 <__gethex+0x24a>
 800f574:	9b05      	ldr	r3, [sp, #20]
 800f576:	9a08      	ldr	r2, [sp, #32]
 800f578:	4413      	add	r3, r2
 800f57a:	42bb      	cmp	r3, r7
 800f57c:	d3e1      	bcc.n	800f542 <__gethex+0x1fc>
 800f57e:	4618      	mov	r0, r3
 800f580:	9a01      	ldr	r2, [sp, #4]
 800f582:	9903      	ldr	r1, [sp, #12]
 800f584:	9309      	str	r3, [sp, #36]	; 0x24
 800f586:	f000 ff3d 	bl	8010404 <strncmp>
 800f58a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f58c:	2800      	cmp	r0, #0
 800f58e:	d1d8      	bne.n	800f542 <__gethex+0x1fc>
 800f590:	461e      	mov	r6, r3
 800f592:	e791      	b.n	800f4b8 <__gethex+0x172>
 800f594:	1eb9      	subs	r1, r7, #2
 800f596:	4628      	mov	r0, r5
 800f598:	f000 fdb2 	bl	8010100 <__any_on>
 800f59c:	2800      	cmp	r0, #0
 800f59e:	d0b2      	beq.n	800f506 <__gethex+0x1c0>
 800f5a0:	f04f 0a03 	mov.w	sl, #3
 800f5a4:	e7b1      	b.n	800f50a <__gethex+0x1c4>
 800f5a6:	da09      	bge.n	800f5bc <__gethex+0x276>
 800f5a8:	1bf7      	subs	r7, r6, r7
 800f5aa:	4629      	mov	r1, r5
 800f5ac:	463a      	mov	r2, r7
 800f5ae:	9802      	ldr	r0, [sp, #8]
 800f5b0:	f000 fbc8 	bl	800fd44 <__lshift>
 800f5b4:	1be4      	subs	r4, r4, r7
 800f5b6:	4605      	mov	r5, r0
 800f5b8:	f100 0914 	add.w	r9, r0, #20
 800f5bc:	f04f 0a00 	mov.w	sl, #0
 800f5c0:	e7a8      	b.n	800f514 <__gethex+0x1ce>
 800f5c2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f5c6:	42a0      	cmp	r0, r4
 800f5c8:	dd6a      	ble.n	800f6a0 <__gethex+0x35a>
 800f5ca:	1b04      	subs	r4, r0, r4
 800f5cc:	42a6      	cmp	r6, r4
 800f5ce:	dc2e      	bgt.n	800f62e <__gethex+0x2e8>
 800f5d0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f5d4:	2b02      	cmp	r3, #2
 800f5d6:	d022      	beq.n	800f61e <__gethex+0x2d8>
 800f5d8:	2b03      	cmp	r3, #3
 800f5da:	d024      	beq.n	800f626 <__gethex+0x2e0>
 800f5dc:	2b01      	cmp	r3, #1
 800f5de:	d115      	bne.n	800f60c <__gethex+0x2c6>
 800f5e0:	42a6      	cmp	r6, r4
 800f5e2:	d113      	bne.n	800f60c <__gethex+0x2c6>
 800f5e4:	2e01      	cmp	r6, #1
 800f5e6:	dc0b      	bgt.n	800f600 <__gethex+0x2ba>
 800f5e8:	9a06      	ldr	r2, [sp, #24]
 800f5ea:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f5ee:	6013      	str	r3, [r2, #0]
 800f5f0:	2301      	movs	r3, #1
 800f5f2:	612b      	str	r3, [r5, #16]
 800f5f4:	f8c9 3000 	str.w	r3, [r9]
 800f5f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f5fa:	2762      	movs	r7, #98	; 0x62
 800f5fc:	601d      	str	r5, [r3, #0]
 800f5fe:	e72a      	b.n	800f456 <__gethex+0x110>
 800f600:	1e71      	subs	r1, r6, #1
 800f602:	4628      	mov	r0, r5
 800f604:	f000 fd7c 	bl	8010100 <__any_on>
 800f608:	2800      	cmp	r0, #0
 800f60a:	d1ed      	bne.n	800f5e8 <__gethex+0x2a2>
 800f60c:	4629      	mov	r1, r5
 800f60e:	9802      	ldr	r0, [sp, #8]
 800f610:	f000 f9cc 	bl	800f9ac <_Bfree>
 800f614:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f616:	2300      	movs	r3, #0
 800f618:	6013      	str	r3, [r2, #0]
 800f61a:	2750      	movs	r7, #80	; 0x50
 800f61c:	e71b      	b.n	800f456 <__gethex+0x110>
 800f61e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f620:	2b00      	cmp	r3, #0
 800f622:	d0e1      	beq.n	800f5e8 <__gethex+0x2a2>
 800f624:	e7f2      	b.n	800f60c <__gethex+0x2c6>
 800f626:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d1dd      	bne.n	800f5e8 <__gethex+0x2a2>
 800f62c:	e7ee      	b.n	800f60c <__gethex+0x2c6>
 800f62e:	1e67      	subs	r7, r4, #1
 800f630:	f1ba 0f00 	cmp.w	sl, #0
 800f634:	d131      	bne.n	800f69a <__gethex+0x354>
 800f636:	b127      	cbz	r7, 800f642 <__gethex+0x2fc>
 800f638:	4639      	mov	r1, r7
 800f63a:	4628      	mov	r0, r5
 800f63c:	f000 fd60 	bl	8010100 <__any_on>
 800f640:	4682      	mov	sl, r0
 800f642:	117a      	asrs	r2, r7, #5
 800f644:	2301      	movs	r3, #1
 800f646:	f007 071f 	and.w	r7, r7, #31
 800f64a:	fa03 f707 	lsl.w	r7, r3, r7
 800f64e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800f652:	4621      	mov	r1, r4
 800f654:	421f      	tst	r7, r3
 800f656:	4628      	mov	r0, r5
 800f658:	bf18      	it	ne
 800f65a:	f04a 0a02 	orrne.w	sl, sl, #2
 800f65e:	1b36      	subs	r6, r6, r4
 800f660:	f7ff fe22 	bl	800f2a8 <rshift>
 800f664:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800f668:	2702      	movs	r7, #2
 800f66a:	f1ba 0f00 	cmp.w	sl, #0
 800f66e:	d048      	beq.n	800f702 <__gethex+0x3bc>
 800f670:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f674:	2b02      	cmp	r3, #2
 800f676:	d015      	beq.n	800f6a4 <__gethex+0x35e>
 800f678:	2b03      	cmp	r3, #3
 800f67a:	d017      	beq.n	800f6ac <__gethex+0x366>
 800f67c:	2b01      	cmp	r3, #1
 800f67e:	d109      	bne.n	800f694 <__gethex+0x34e>
 800f680:	f01a 0f02 	tst.w	sl, #2
 800f684:	d006      	beq.n	800f694 <__gethex+0x34e>
 800f686:	f8d9 3000 	ldr.w	r3, [r9]
 800f68a:	ea4a 0a03 	orr.w	sl, sl, r3
 800f68e:	f01a 0f01 	tst.w	sl, #1
 800f692:	d10e      	bne.n	800f6b2 <__gethex+0x36c>
 800f694:	f047 0710 	orr.w	r7, r7, #16
 800f698:	e033      	b.n	800f702 <__gethex+0x3bc>
 800f69a:	f04f 0a01 	mov.w	sl, #1
 800f69e:	e7d0      	b.n	800f642 <__gethex+0x2fc>
 800f6a0:	2701      	movs	r7, #1
 800f6a2:	e7e2      	b.n	800f66a <__gethex+0x324>
 800f6a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f6a6:	f1c3 0301 	rsb	r3, r3, #1
 800f6aa:	9315      	str	r3, [sp, #84]	; 0x54
 800f6ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d0f0      	beq.n	800f694 <__gethex+0x34e>
 800f6b2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800f6b6:	f105 0314 	add.w	r3, r5, #20
 800f6ba:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800f6be:	eb03 010a 	add.w	r1, r3, sl
 800f6c2:	f04f 0c00 	mov.w	ip, #0
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800f6cc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f6d0:	d01c      	beq.n	800f70c <__gethex+0x3c6>
 800f6d2:	3201      	adds	r2, #1
 800f6d4:	6002      	str	r2, [r0, #0]
 800f6d6:	2f02      	cmp	r7, #2
 800f6d8:	f105 0314 	add.w	r3, r5, #20
 800f6dc:	d138      	bne.n	800f750 <__gethex+0x40a>
 800f6de:	f8d8 2000 	ldr.w	r2, [r8]
 800f6e2:	3a01      	subs	r2, #1
 800f6e4:	42b2      	cmp	r2, r6
 800f6e6:	d10a      	bne.n	800f6fe <__gethex+0x3b8>
 800f6e8:	1171      	asrs	r1, r6, #5
 800f6ea:	2201      	movs	r2, #1
 800f6ec:	f006 061f 	and.w	r6, r6, #31
 800f6f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f6f4:	fa02 f606 	lsl.w	r6, r2, r6
 800f6f8:	421e      	tst	r6, r3
 800f6fa:	bf18      	it	ne
 800f6fc:	4617      	movne	r7, r2
 800f6fe:	f047 0720 	orr.w	r7, r7, #32
 800f702:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f704:	601d      	str	r5, [r3, #0]
 800f706:	9b06      	ldr	r3, [sp, #24]
 800f708:	601c      	str	r4, [r3, #0]
 800f70a:	e6a4      	b.n	800f456 <__gethex+0x110>
 800f70c:	4299      	cmp	r1, r3
 800f70e:	f843 cc04 	str.w	ip, [r3, #-4]
 800f712:	d8d8      	bhi.n	800f6c6 <__gethex+0x380>
 800f714:	68ab      	ldr	r3, [r5, #8]
 800f716:	4599      	cmp	r9, r3
 800f718:	db12      	blt.n	800f740 <__gethex+0x3fa>
 800f71a:	6869      	ldr	r1, [r5, #4]
 800f71c:	9802      	ldr	r0, [sp, #8]
 800f71e:	3101      	adds	r1, #1
 800f720:	f000 f910 	bl	800f944 <_Balloc>
 800f724:	692a      	ldr	r2, [r5, #16]
 800f726:	3202      	adds	r2, #2
 800f728:	f105 010c 	add.w	r1, r5, #12
 800f72c:	4683      	mov	fp, r0
 800f72e:	0092      	lsls	r2, r2, #2
 800f730:	300c      	adds	r0, #12
 800f732:	f7fd f993 	bl	800ca5c <memcpy>
 800f736:	4629      	mov	r1, r5
 800f738:	9802      	ldr	r0, [sp, #8]
 800f73a:	f000 f937 	bl	800f9ac <_Bfree>
 800f73e:	465d      	mov	r5, fp
 800f740:	692b      	ldr	r3, [r5, #16]
 800f742:	1c5a      	adds	r2, r3, #1
 800f744:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800f748:	612a      	str	r2, [r5, #16]
 800f74a:	2201      	movs	r2, #1
 800f74c:	615a      	str	r2, [r3, #20]
 800f74e:	e7c2      	b.n	800f6d6 <__gethex+0x390>
 800f750:	692a      	ldr	r2, [r5, #16]
 800f752:	454a      	cmp	r2, r9
 800f754:	dd0b      	ble.n	800f76e <__gethex+0x428>
 800f756:	2101      	movs	r1, #1
 800f758:	4628      	mov	r0, r5
 800f75a:	f7ff fda5 	bl	800f2a8 <rshift>
 800f75e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f762:	3401      	adds	r4, #1
 800f764:	42a3      	cmp	r3, r4
 800f766:	f6ff aed9 	blt.w	800f51c <__gethex+0x1d6>
 800f76a:	2701      	movs	r7, #1
 800f76c:	e7c7      	b.n	800f6fe <__gethex+0x3b8>
 800f76e:	f016 061f 	ands.w	r6, r6, #31
 800f772:	d0fa      	beq.n	800f76a <__gethex+0x424>
 800f774:	449a      	add	sl, r3
 800f776:	f1c6 0620 	rsb	r6, r6, #32
 800f77a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800f77e:	f000 f9a5 	bl	800facc <__hi0bits>
 800f782:	42b0      	cmp	r0, r6
 800f784:	dbe7      	blt.n	800f756 <__gethex+0x410>
 800f786:	e7f0      	b.n	800f76a <__gethex+0x424>

0800f788 <L_shift>:
 800f788:	f1c2 0208 	rsb	r2, r2, #8
 800f78c:	0092      	lsls	r2, r2, #2
 800f78e:	b570      	push	{r4, r5, r6, lr}
 800f790:	f1c2 0620 	rsb	r6, r2, #32
 800f794:	6843      	ldr	r3, [r0, #4]
 800f796:	6804      	ldr	r4, [r0, #0]
 800f798:	fa03 f506 	lsl.w	r5, r3, r6
 800f79c:	432c      	orrs	r4, r5
 800f79e:	40d3      	lsrs	r3, r2
 800f7a0:	6004      	str	r4, [r0, #0]
 800f7a2:	f840 3f04 	str.w	r3, [r0, #4]!
 800f7a6:	4288      	cmp	r0, r1
 800f7a8:	d3f4      	bcc.n	800f794 <L_shift+0xc>
 800f7aa:	bd70      	pop	{r4, r5, r6, pc}

0800f7ac <__match>:
 800f7ac:	b530      	push	{r4, r5, lr}
 800f7ae:	6803      	ldr	r3, [r0, #0]
 800f7b0:	3301      	adds	r3, #1
 800f7b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f7b6:	b914      	cbnz	r4, 800f7be <__match+0x12>
 800f7b8:	6003      	str	r3, [r0, #0]
 800f7ba:	2001      	movs	r0, #1
 800f7bc:	bd30      	pop	{r4, r5, pc}
 800f7be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f7c2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f7c6:	2d19      	cmp	r5, #25
 800f7c8:	bf98      	it	ls
 800f7ca:	3220      	addls	r2, #32
 800f7cc:	42a2      	cmp	r2, r4
 800f7ce:	d0f0      	beq.n	800f7b2 <__match+0x6>
 800f7d0:	2000      	movs	r0, #0
 800f7d2:	e7f3      	b.n	800f7bc <__match+0x10>

0800f7d4 <__hexnan>:
 800f7d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7d8:	680b      	ldr	r3, [r1, #0]
 800f7da:	6801      	ldr	r1, [r0, #0]
 800f7dc:	115f      	asrs	r7, r3, #5
 800f7de:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800f7e2:	f013 031f 	ands.w	r3, r3, #31
 800f7e6:	b087      	sub	sp, #28
 800f7e8:	bf18      	it	ne
 800f7ea:	3704      	addne	r7, #4
 800f7ec:	2500      	movs	r5, #0
 800f7ee:	1f3e      	subs	r6, r7, #4
 800f7f0:	4682      	mov	sl, r0
 800f7f2:	4690      	mov	r8, r2
 800f7f4:	9301      	str	r3, [sp, #4]
 800f7f6:	f847 5c04 	str.w	r5, [r7, #-4]
 800f7fa:	46b1      	mov	r9, r6
 800f7fc:	4634      	mov	r4, r6
 800f7fe:	9502      	str	r5, [sp, #8]
 800f800:	46ab      	mov	fp, r5
 800f802:	784a      	ldrb	r2, [r1, #1]
 800f804:	1c4b      	adds	r3, r1, #1
 800f806:	9303      	str	r3, [sp, #12]
 800f808:	b342      	cbz	r2, 800f85c <__hexnan+0x88>
 800f80a:	4610      	mov	r0, r2
 800f80c:	9105      	str	r1, [sp, #20]
 800f80e:	9204      	str	r2, [sp, #16]
 800f810:	f7ff fd84 	bl	800f31c <__hexdig_fun>
 800f814:	2800      	cmp	r0, #0
 800f816:	d143      	bne.n	800f8a0 <__hexnan+0xcc>
 800f818:	9a04      	ldr	r2, [sp, #16]
 800f81a:	9905      	ldr	r1, [sp, #20]
 800f81c:	2a20      	cmp	r2, #32
 800f81e:	d818      	bhi.n	800f852 <__hexnan+0x7e>
 800f820:	9b02      	ldr	r3, [sp, #8]
 800f822:	459b      	cmp	fp, r3
 800f824:	dd13      	ble.n	800f84e <__hexnan+0x7a>
 800f826:	454c      	cmp	r4, r9
 800f828:	d206      	bcs.n	800f838 <__hexnan+0x64>
 800f82a:	2d07      	cmp	r5, #7
 800f82c:	dc04      	bgt.n	800f838 <__hexnan+0x64>
 800f82e:	462a      	mov	r2, r5
 800f830:	4649      	mov	r1, r9
 800f832:	4620      	mov	r0, r4
 800f834:	f7ff ffa8 	bl	800f788 <L_shift>
 800f838:	4544      	cmp	r4, r8
 800f83a:	d944      	bls.n	800f8c6 <__hexnan+0xf2>
 800f83c:	2300      	movs	r3, #0
 800f83e:	f1a4 0904 	sub.w	r9, r4, #4
 800f842:	f844 3c04 	str.w	r3, [r4, #-4]
 800f846:	f8cd b008 	str.w	fp, [sp, #8]
 800f84a:	464c      	mov	r4, r9
 800f84c:	461d      	mov	r5, r3
 800f84e:	9903      	ldr	r1, [sp, #12]
 800f850:	e7d7      	b.n	800f802 <__hexnan+0x2e>
 800f852:	2a29      	cmp	r2, #41	; 0x29
 800f854:	d14a      	bne.n	800f8ec <__hexnan+0x118>
 800f856:	3102      	adds	r1, #2
 800f858:	f8ca 1000 	str.w	r1, [sl]
 800f85c:	f1bb 0f00 	cmp.w	fp, #0
 800f860:	d044      	beq.n	800f8ec <__hexnan+0x118>
 800f862:	454c      	cmp	r4, r9
 800f864:	d206      	bcs.n	800f874 <__hexnan+0xa0>
 800f866:	2d07      	cmp	r5, #7
 800f868:	dc04      	bgt.n	800f874 <__hexnan+0xa0>
 800f86a:	462a      	mov	r2, r5
 800f86c:	4649      	mov	r1, r9
 800f86e:	4620      	mov	r0, r4
 800f870:	f7ff ff8a 	bl	800f788 <L_shift>
 800f874:	4544      	cmp	r4, r8
 800f876:	d928      	bls.n	800f8ca <__hexnan+0xf6>
 800f878:	4643      	mov	r3, r8
 800f87a:	f854 2b04 	ldr.w	r2, [r4], #4
 800f87e:	f843 2b04 	str.w	r2, [r3], #4
 800f882:	42a6      	cmp	r6, r4
 800f884:	d2f9      	bcs.n	800f87a <__hexnan+0xa6>
 800f886:	2200      	movs	r2, #0
 800f888:	f843 2b04 	str.w	r2, [r3], #4
 800f88c:	429e      	cmp	r6, r3
 800f88e:	d2fb      	bcs.n	800f888 <__hexnan+0xb4>
 800f890:	6833      	ldr	r3, [r6, #0]
 800f892:	b91b      	cbnz	r3, 800f89c <__hexnan+0xc8>
 800f894:	4546      	cmp	r6, r8
 800f896:	d127      	bne.n	800f8e8 <__hexnan+0x114>
 800f898:	2301      	movs	r3, #1
 800f89a:	6033      	str	r3, [r6, #0]
 800f89c:	2005      	movs	r0, #5
 800f89e:	e026      	b.n	800f8ee <__hexnan+0x11a>
 800f8a0:	3501      	adds	r5, #1
 800f8a2:	2d08      	cmp	r5, #8
 800f8a4:	f10b 0b01 	add.w	fp, fp, #1
 800f8a8:	dd06      	ble.n	800f8b8 <__hexnan+0xe4>
 800f8aa:	4544      	cmp	r4, r8
 800f8ac:	d9cf      	bls.n	800f84e <__hexnan+0x7a>
 800f8ae:	2300      	movs	r3, #0
 800f8b0:	f844 3c04 	str.w	r3, [r4, #-4]
 800f8b4:	2501      	movs	r5, #1
 800f8b6:	3c04      	subs	r4, #4
 800f8b8:	6822      	ldr	r2, [r4, #0]
 800f8ba:	f000 000f 	and.w	r0, r0, #15
 800f8be:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f8c2:	6020      	str	r0, [r4, #0]
 800f8c4:	e7c3      	b.n	800f84e <__hexnan+0x7a>
 800f8c6:	2508      	movs	r5, #8
 800f8c8:	e7c1      	b.n	800f84e <__hexnan+0x7a>
 800f8ca:	9b01      	ldr	r3, [sp, #4]
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d0df      	beq.n	800f890 <__hexnan+0xbc>
 800f8d0:	f04f 32ff 	mov.w	r2, #4294967295
 800f8d4:	f1c3 0320 	rsb	r3, r3, #32
 800f8d8:	fa22 f303 	lsr.w	r3, r2, r3
 800f8dc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800f8e0:	401a      	ands	r2, r3
 800f8e2:	f847 2c04 	str.w	r2, [r7, #-4]
 800f8e6:	e7d3      	b.n	800f890 <__hexnan+0xbc>
 800f8e8:	3e04      	subs	r6, #4
 800f8ea:	e7d1      	b.n	800f890 <__hexnan+0xbc>
 800f8ec:	2004      	movs	r0, #4
 800f8ee:	b007      	add	sp, #28
 800f8f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f8f4 <__locale_ctype_ptr_l>:
 800f8f4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800f8f8:	4770      	bx	lr

0800f8fa <__localeconv_l>:
 800f8fa:	30f0      	adds	r0, #240	; 0xf0
 800f8fc:	4770      	bx	lr
	...

0800f900 <_localeconv_r>:
 800f900:	4b04      	ldr	r3, [pc, #16]	; (800f914 <_localeconv_r+0x14>)
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	6a18      	ldr	r0, [r3, #32]
 800f906:	4b04      	ldr	r3, [pc, #16]	; (800f918 <_localeconv_r+0x18>)
 800f908:	2800      	cmp	r0, #0
 800f90a:	bf08      	it	eq
 800f90c:	4618      	moveq	r0, r3
 800f90e:	30f0      	adds	r0, #240	; 0xf0
 800f910:	4770      	bx	lr
 800f912:	bf00      	nop
 800f914:	20000180 	.word	0x20000180
 800f918:	200001e4 	.word	0x200001e4

0800f91c <__ascii_mbtowc>:
 800f91c:	b082      	sub	sp, #8
 800f91e:	b901      	cbnz	r1, 800f922 <__ascii_mbtowc+0x6>
 800f920:	a901      	add	r1, sp, #4
 800f922:	b142      	cbz	r2, 800f936 <__ascii_mbtowc+0x1a>
 800f924:	b14b      	cbz	r3, 800f93a <__ascii_mbtowc+0x1e>
 800f926:	7813      	ldrb	r3, [r2, #0]
 800f928:	600b      	str	r3, [r1, #0]
 800f92a:	7812      	ldrb	r2, [r2, #0]
 800f92c:	1c10      	adds	r0, r2, #0
 800f92e:	bf18      	it	ne
 800f930:	2001      	movne	r0, #1
 800f932:	b002      	add	sp, #8
 800f934:	4770      	bx	lr
 800f936:	4610      	mov	r0, r2
 800f938:	e7fb      	b.n	800f932 <__ascii_mbtowc+0x16>
 800f93a:	f06f 0001 	mvn.w	r0, #1
 800f93e:	e7f8      	b.n	800f932 <__ascii_mbtowc+0x16>

0800f940 <__malloc_lock>:
 800f940:	4770      	bx	lr

0800f942 <__malloc_unlock>:
 800f942:	4770      	bx	lr

0800f944 <_Balloc>:
 800f944:	b570      	push	{r4, r5, r6, lr}
 800f946:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f948:	4604      	mov	r4, r0
 800f94a:	460e      	mov	r6, r1
 800f94c:	b93d      	cbnz	r5, 800f95e <_Balloc+0x1a>
 800f94e:	2010      	movs	r0, #16
 800f950:	f7fd f874 	bl	800ca3c <malloc>
 800f954:	6260      	str	r0, [r4, #36]	; 0x24
 800f956:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f95a:	6005      	str	r5, [r0, #0]
 800f95c:	60c5      	str	r5, [r0, #12]
 800f95e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800f960:	68eb      	ldr	r3, [r5, #12]
 800f962:	b183      	cbz	r3, 800f986 <_Balloc+0x42>
 800f964:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f966:	68db      	ldr	r3, [r3, #12]
 800f968:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800f96c:	b9b8      	cbnz	r0, 800f99e <_Balloc+0x5a>
 800f96e:	2101      	movs	r1, #1
 800f970:	fa01 f506 	lsl.w	r5, r1, r6
 800f974:	1d6a      	adds	r2, r5, #5
 800f976:	0092      	lsls	r2, r2, #2
 800f978:	4620      	mov	r0, r4
 800f97a:	f000 fbe2 	bl	8010142 <_calloc_r>
 800f97e:	b160      	cbz	r0, 800f99a <_Balloc+0x56>
 800f980:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800f984:	e00e      	b.n	800f9a4 <_Balloc+0x60>
 800f986:	2221      	movs	r2, #33	; 0x21
 800f988:	2104      	movs	r1, #4
 800f98a:	4620      	mov	r0, r4
 800f98c:	f000 fbd9 	bl	8010142 <_calloc_r>
 800f990:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f992:	60e8      	str	r0, [r5, #12]
 800f994:	68db      	ldr	r3, [r3, #12]
 800f996:	2b00      	cmp	r3, #0
 800f998:	d1e4      	bne.n	800f964 <_Balloc+0x20>
 800f99a:	2000      	movs	r0, #0
 800f99c:	bd70      	pop	{r4, r5, r6, pc}
 800f99e:	6802      	ldr	r2, [r0, #0]
 800f9a0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f9aa:	e7f7      	b.n	800f99c <_Balloc+0x58>

0800f9ac <_Bfree>:
 800f9ac:	b570      	push	{r4, r5, r6, lr}
 800f9ae:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800f9b0:	4606      	mov	r6, r0
 800f9b2:	460d      	mov	r5, r1
 800f9b4:	b93c      	cbnz	r4, 800f9c6 <_Bfree+0x1a>
 800f9b6:	2010      	movs	r0, #16
 800f9b8:	f7fd f840 	bl	800ca3c <malloc>
 800f9bc:	6270      	str	r0, [r6, #36]	; 0x24
 800f9be:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f9c2:	6004      	str	r4, [r0, #0]
 800f9c4:	60c4      	str	r4, [r0, #12]
 800f9c6:	b13d      	cbz	r5, 800f9d8 <_Bfree+0x2c>
 800f9c8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800f9ca:	686a      	ldr	r2, [r5, #4]
 800f9cc:	68db      	ldr	r3, [r3, #12]
 800f9ce:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f9d2:	6029      	str	r1, [r5, #0]
 800f9d4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800f9d8:	bd70      	pop	{r4, r5, r6, pc}

0800f9da <__multadd>:
 800f9da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9de:	690d      	ldr	r5, [r1, #16]
 800f9e0:	461f      	mov	r7, r3
 800f9e2:	4606      	mov	r6, r0
 800f9e4:	460c      	mov	r4, r1
 800f9e6:	f101 0c14 	add.w	ip, r1, #20
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	f8dc 0000 	ldr.w	r0, [ip]
 800f9f0:	b281      	uxth	r1, r0
 800f9f2:	fb02 7101 	mla	r1, r2, r1, r7
 800f9f6:	0c0f      	lsrs	r7, r1, #16
 800f9f8:	0c00      	lsrs	r0, r0, #16
 800f9fa:	fb02 7000 	mla	r0, r2, r0, r7
 800f9fe:	b289      	uxth	r1, r1
 800fa00:	3301      	adds	r3, #1
 800fa02:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800fa06:	429d      	cmp	r5, r3
 800fa08:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800fa0c:	f84c 1b04 	str.w	r1, [ip], #4
 800fa10:	dcec      	bgt.n	800f9ec <__multadd+0x12>
 800fa12:	b1d7      	cbz	r7, 800fa4a <__multadd+0x70>
 800fa14:	68a3      	ldr	r3, [r4, #8]
 800fa16:	42ab      	cmp	r3, r5
 800fa18:	dc12      	bgt.n	800fa40 <__multadd+0x66>
 800fa1a:	6861      	ldr	r1, [r4, #4]
 800fa1c:	4630      	mov	r0, r6
 800fa1e:	3101      	adds	r1, #1
 800fa20:	f7ff ff90 	bl	800f944 <_Balloc>
 800fa24:	6922      	ldr	r2, [r4, #16]
 800fa26:	3202      	adds	r2, #2
 800fa28:	f104 010c 	add.w	r1, r4, #12
 800fa2c:	4680      	mov	r8, r0
 800fa2e:	0092      	lsls	r2, r2, #2
 800fa30:	300c      	adds	r0, #12
 800fa32:	f7fd f813 	bl	800ca5c <memcpy>
 800fa36:	4621      	mov	r1, r4
 800fa38:	4630      	mov	r0, r6
 800fa3a:	f7ff ffb7 	bl	800f9ac <_Bfree>
 800fa3e:	4644      	mov	r4, r8
 800fa40:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fa44:	3501      	adds	r5, #1
 800fa46:	615f      	str	r7, [r3, #20]
 800fa48:	6125      	str	r5, [r4, #16]
 800fa4a:	4620      	mov	r0, r4
 800fa4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fa50 <__s2b>:
 800fa50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa54:	460c      	mov	r4, r1
 800fa56:	4615      	mov	r5, r2
 800fa58:	461f      	mov	r7, r3
 800fa5a:	2209      	movs	r2, #9
 800fa5c:	3308      	adds	r3, #8
 800fa5e:	4606      	mov	r6, r0
 800fa60:	fb93 f3f2 	sdiv	r3, r3, r2
 800fa64:	2100      	movs	r1, #0
 800fa66:	2201      	movs	r2, #1
 800fa68:	429a      	cmp	r2, r3
 800fa6a:	db20      	blt.n	800faae <__s2b+0x5e>
 800fa6c:	4630      	mov	r0, r6
 800fa6e:	f7ff ff69 	bl	800f944 <_Balloc>
 800fa72:	9b08      	ldr	r3, [sp, #32]
 800fa74:	6143      	str	r3, [r0, #20]
 800fa76:	2d09      	cmp	r5, #9
 800fa78:	f04f 0301 	mov.w	r3, #1
 800fa7c:	6103      	str	r3, [r0, #16]
 800fa7e:	dd19      	ble.n	800fab4 <__s2b+0x64>
 800fa80:	f104 0809 	add.w	r8, r4, #9
 800fa84:	46c1      	mov	r9, r8
 800fa86:	442c      	add	r4, r5
 800fa88:	f819 3b01 	ldrb.w	r3, [r9], #1
 800fa8c:	4601      	mov	r1, r0
 800fa8e:	3b30      	subs	r3, #48	; 0x30
 800fa90:	220a      	movs	r2, #10
 800fa92:	4630      	mov	r0, r6
 800fa94:	f7ff ffa1 	bl	800f9da <__multadd>
 800fa98:	45a1      	cmp	r9, r4
 800fa9a:	d1f5      	bne.n	800fa88 <__s2b+0x38>
 800fa9c:	eb08 0405 	add.w	r4, r8, r5
 800faa0:	3c08      	subs	r4, #8
 800faa2:	1b2d      	subs	r5, r5, r4
 800faa4:	1963      	adds	r3, r4, r5
 800faa6:	42bb      	cmp	r3, r7
 800faa8:	db07      	blt.n	800faba <__s2b+0x6a>
 800faaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800faae:	0052      	lsls	r2, r2, #1
 800fab0:	3101      	adds	r1, #1
 800fab2:	e7d9      	b.n	800fa68 <__s2b+0x18>
 800fab4:	340a      	adds	r4, #10
 800fab6:	2509      	movs	r5, #9
 800fab8:	e7f3      	b.n	800faa2 <__s2b+0x52>
 800faba:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fabe:	4601      	mov	r1, r0
 800fac0:	3b30      	subs	r3, #48	; 0x30
 800fac2:	220a      	movs	r2, #10
 800fac4:	4630      	mov	r0, r6
 800fac6:	f7ff ff88 	bl	800f9da <__multadd>
 800faca:	e7eb      	b.n	800faa4 <__s2b+0x54>

0800facc <__hi0bits>:
 800facc:	0c02      	lsrs	r2, r0, #16
 800face:	0412      	lsls	r2, r2, #16
 800fad0:	4603      	mov	r3, r0
 800fad2:	b9b2      	cbnz	r2, 800fb02 <__hi0bits+0x36>
 800fad4:	0403      	lsls	r3, r0, #16
 800fad6:	2010      	movs	r0, #16
 800fad8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800fadc:	bf04      	itt	eq
 800fade:	021b      	lsleq	r3, r3, #8
 800fae0:	3008      	addeq	r0, #8
 800fae2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800fae6:	bf04      	itt	eq
 800fae8:	011b      	lsleq	r3, r3, #4
 800faea:	3004      	addeq	r0, #4
 800faec:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800faf0:	bf04      	itt	eq
 800faf2:	009b      	lsleq	r3, r3, #2
 800faf4:	3002      	addeq	r0, #2
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	db06      	blt.n	800fb08 <__hi0bits+0x3c>
 800fafa:	005b      	lsls	r3, r3, #1
 800fafc:	d503      	bpl.n	800fb06 <__hi0bits+0x3a>
 800fafe:	3001      	adds	r0, #1
 800fb00:	4770      	bx	lr
 800fb02:	2000      	movs	r0, #0
 800fb04:	e7e8      	b.n	800fad8 <__hi0bits+0xc>
 800fb06:	2020      	movs	r0, #32
 800fb08:	4770      	bx	lr

0800fb0a <__lo0bits>:
 800fb0a:	6803      	ldr	r3, [r0, #0]
 800fb0c:	f013 0207 	ands.w	r2, r3, #7
 800fb10:	4601      	mov	r1, r0
 800fb12:	d00b      	beq.n	800fb2c <__lo0bits+0x22>
 800fb14:	07da      	lsls	r2, r3, #31
 800fb16:	d423      	bmi.n	800fb60 <__lo0bits+0x56>
 800fb18:	0798      	lsls	r0, r3, #30
 800fb1a:	bf49      	itett	mi
 800fb1c:	085b      	lsrmi	r3, r3, #1
 800fb1e:	089b      	lsrpl	r3, r3, #2
 800fb20:	2001      	movmi	r0, #1
 800fb22:	600b      	strmi	r3, [r1, #0]
 800fb24:	bf5c      	itt	pl
 800fb26:	600b      	strpl	r3, [r1, #0]
 800fb28:	2002      	movpl	r0, #2
 800fb2a:	4770      	bx	lr
 800fb2c:	b298      	uxth	r0, r3
 800fb2e:	b9a8      	cbnz	r0, 800fb5c <__lo0bits+0x52>
 800fb30:	0c1b      	lsrs	r3, r3, #16
 800fb32:	2010      	movs	r0, #16
 800fb34:	f013 0fff 	tst.w	r3, #255	; 0xff
 800fb38:	bf04      	itt	eq
 800fb3a:	0a1b      	lsreq	r3, r3, #8
 800fb3c:	3008      	addeq	r0, #8
 800fb3e:	071a      	lsls	r2, r3, #28
 800fb40:	bf04      	itt	eq
 800fb42:	091b      	lsreq	r3, r3, #4
 800fb44:	3004      	addeq	r0, #4
 800fb46:	079a      	lsls	r2, r3, #30
 800fb48:	bf04      	itt	eq
 800fb4a:	089b      	lsreq	r3, r3, #2
 800fb4c:	3002      	addeq	r0, #2
 800fb4e:	07da      	lsls	r2, r3, #31
 800fb50:	d402      	bmi.n	800fb58 <__lo0bits+0x4e>
 800fb52:	085b      	lsrs	r3, r3, #1
 800fb54:	d006      	beq.n	800fb64 <__lo0bits+0x5a>
 800fb56:	3001      	adds	r0, #1
 800fb58:	600b      	str	r3, [r1, #0]
 800fb5a:	4770      	bx	lr
 800fb5c:	4610      	mov	r0, r2
 800fb5e:	e7e9      	b.n	800fb34 <__lo0bits+0x2a>
 800fb60:	2000      	movs	r0, #0
 800fb62:	4770      	bx	lr
 800fb64:	2020      	movs	r0, #32
 800fb66:	4770      	bx	lr

0800fb68 <__i2b>:
 800fb68:	b510      	push	{r4, lr}
 800fb6a:	460c      	mov	r4, r1
 800fb6c:	2101      	movs	r1, #1
 800fb6e:	f7ff fee9 	bl	800f944 <_Balloc>
 800fb72:	2201      	movs	r2, #1
 800fb74:	6144      	str	r4, [r0, #20]
 800fb76:	6102      	str	r2, [r0, #16]
 800fb78:	bd10      	pop	{r4, pc}

0800fb7a <__multiply>:
 800fb7a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb7e:	4614      	mov	r4, r2
 800fb80:	690a      	ldr	r2, [r1, #16]
 800fb82:	6923      	ldr	r3, [r4, #16]
 800fb84:	429a      	cmp	r2, r3
 800fb86:	bfb8      	it	lt
 800fb88:	460b      	movlt	r3, r1
 800fb8a:	4688      	mov	r8, r1
 800fb8c:	bfbc      	itt	lt
 800fb8e:	46a0      	movlt	r8, r4
 800fb90:	461c      	movlt	r4, r3
 800fb92:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fb96:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800fb9a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fb9e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fba2:	eb07 0609 	add.w	r6, r7, r9
 800fba6:	42b3      	cmp	r3, r6
 800fba8:	bfb8      	it	lt
 800fbaa:	3101      	addlt	r1, #1
 800fbac:	f7ff feca 	bl	800f944 <_Balloc>
 800fbb0:	f100 0514 	add.w	r5, r0, #20
 800fbb4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800fbb8:	462b      	mov	r3, r5
 800fbba:	2200      	movs	r2, #0
 800fbbc:	4573      	cmp	r3, lr
 800fbbe:	d316      	bcc.n	800fbee <__multiply+0x74>
 800fbc0:	f104 0214 	add.w	r2, r4, #20
 800fbc4:	f108 0114 	add.w	r1, r8, #20
 800fbc8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800fbcc:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800fbd0:	9300      	str	r3, [sp, #0]
 800fbd2:	9b00      	ldr	r3, [sp, #0]
 800fbd4:	9201      	str	r2, [sp, #4]
 800fbd6:	4293      	cmp	r3, r2
 800fbd8:	d80c      	bhi.n	800fbf4 <__multiply+0x7a>
 800fbda:	2e00      	cmp	r6, #0
 800fbdc:	dd03      	ble.n	800fbe6 <__multiply+0x6c>
 800fbde:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d05d      	beq.n	800fca2 <__multiply+0x128>
 800fbe6:	6106      	str	r6, [r0, #16]
 800fbe8:	b003      	add	sp, #12
 800fbea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbee:	f843 2b04 	str.w	r2, [r3], #4
 800fbf2:	e7e3      	b.n	800fbbc <__multiply+0x42>
 800fbf4:	f8b2 b000 	ldrh.w	fp, [r2]
 800fbf8:	f1bb 0f00 	cmp.w	fp, #0
 800fbfc:	d023      	beq.n	800fc46 <__multiply+0xcc>
 800fbfe:	4689      	mov	r9, r1
 800fc00:	46ac      	mov	ip, r5
 800fc02:	f04f 0800 	mov.w	r8, #0
 800fc06:	f859 4b04 	ldr.w	r4, [r9], #4
 800fc0a:	f8dc a000 	ldr.w	sl, [ip]
 800fc0e:	b2a3      	uxth	r3, r4
 800fc10:	fa1f fa8a 	uxth.w	sl, sl
 800fc14:	fb0b a303 	mla	r3, fp, r3, sl
 800fc18:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800fc1c:	f8dc 4000 	ldr.w	r4, [ip]
 800fc20:	4443      	add	r3, r8
 800fc22:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800fc26:	fb0b 840a 	mla	r4, fp, sl, r8
 800fc2a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800fc2e:	46e2      	mov	sl, ip
 800fc30:	b29b      	uxth	r3, r3
 800fc32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800fc36:	454f      	cmp	r7, r9
 800fc38:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800fc3c:	f84a 3b04 	str.w	r3, [sl], #4
 800fc40:	d82b      	bhi.n	800fc9a <__multiply+0x120>
 800fc42:	f8cc 8004 	str.w	r8, [ip, #4]
 800fc46:	9b01      	ldr	r3, [sp, #4]
 800fc48:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800fc4c:	3204      	adds	r2, #4
 800fc4e:	f1ba 0f00 	cmp.w	sl, #0
 800fc52:	d020      	beq.n	800fc96 <__multiply+0x11c>
 800fc54:	682b      	ldr	r3, [r5, #0]
 800fc56:	4689      	mov	r9, r1
 800fc58:	46a8      	mov	r8, r5
 800fc5a:	f04f 0b00 	mov.w	fp, #0
 800fc5e:	f8b9 c000 	ldrh.w	ip, [r9]
 800fc62:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800fc66:	fb0a 440c 	mla	r4, sl, ip, r4
 800fc6a:	445c      	add	r4, fp
 800fc6c:	46c4      	mov	ip, r8
 800fc6e:	b29b      	uxth	r3, r3
 800fc70:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800fc74:	f84c 3b04 	str.w	r3, [ip], #4
 800fc78:	f859 3b04 	ldr.w	r3, [r9], #4
 800fc7c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800fc80:	0c1b      	lsrs	r3, r3, #16
 800fc82:	fb0a b303 	mla	r3, sl, r3, fp
 800fc86:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800fc8a:	454f      	cmp	r7, r9
 800fc8c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800fc90:	d805      	bhi.n	800fc9e <__multiply+0x124>
 800fc92:	f8c8 3004 	str.w	r3, [r8, #4]
 800fc96:	3504      	adds	r5, #4
 800fc98:	e79b      	b.n	800fbd2 <__multiply+0x58>
 800fc9a:	46d4      	mov	ip, sl
 800fc9c:	e7b3      	b.n	800fc06 <__multiply+0x8c>
 800fc9e:	46e0      	mov	r8, ip
 800fca0:	e7dd      	b.n	800fc5e <__multiply+0xe4>
 800fca2:	3e01      	subs	r6, #1
 800fca4:	e799      	b.n	800fbda <__multiply+0x60>
	...

0800fca8 <__pow5mult>:
 800fca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fcac:	4615      	mov	r5, r2
 800fcae:	f012 0203 	ands.w	r2, r2, #3
 800fcb2:	4606      	mov	r6, r0
 800fcb4:	460f      	mov	r7, r1
 800fcb6:	d007      	beq.n	800fcc8 <__pow5mult+0x20>
 800fcb8:	3a01      	subs	r2, #1
 800fcba:	4c21      	ldr	r4, [pc, #132]	; (800fd40 <__pow5mult+0x98>)
 800fcbc:	2300      	movs	r3, #0
 800fcbe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fcc2:	f7ff fe8a 	bl	800f9da <__multadd>
 800fcc6:	4607      	mov	r7, r0
 800fcc8:	10ad      	asrs	r5, r5, #2
 800fcca:	d035      	beq.n	800fd38 <__pow5mult+0x90>
 800fccc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800fcce:	b93c      	cbnz	r4, 800fce0 <__pow5mult+0x38>
 800fcd0:	2010      	movs	r0, #16
 800fcd2:	f7fc feb3 	bl	800ca3c <malloc>
 800fcd6:	6270      	str	r0, [r6, #36]	; 0x24
 800fcd8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fcdc:	6004      	str	r4, [r0, #0]
 800fcde:	60c4      	str	r4, [r0, #12]
 800fce0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fce4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fce8:	b94c      	cbnz	r4, 800fcfe <__pow5mult+0x56>
 800fcea:	f240 2171 	movw	r1, #625	; 0x271
 800fcee:	4630      	mov	r0, r6
 800fcf0:	f7ff ff3a 	bl	800fb68 <__i2b>
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	f8c8 0008 	str.w	r0, [r8, #8]
 800fcfa:	4604      	mov	r4, r0
 800fcfc:	6003      	str	r3, [r0, #0]
 800fcfe:	f04f 0800 	mov.w	r8, #0
 800fd02:	07eb      	lsls	r3, r5, #31
 800fd04:	d50a      	bpl.n	800fd1c <__pow5mult+0x74>
 800fd06:	4639      	mov	r1, r7
 800fd08:	4622      	mov	r2, r4
 800fd0a:	4630      	mov	r0, r6
 800fd0c:	f7ff ff35 	bl	800fb7a <__multiply>
 800fd10:	4639      	mov	r1, r7
 800fd12:	4681      	mov	r9, r0
 800fd14:	4630      	mov	r0, r6
 800fd16:	f7ff fe49 	bl	800f9ac <_Bfree>
 800fd1a:	464f      	mov	r7, r9
 800fd1c:	106d      	asrs	r5, r5, #1
 800fd1e:	d00b      	beq.n	800fd38 <__pow5mult+0x90>
 800fd20:	6820      	ldr	r0, [r4, #0]
 800fd22:	b938      	cbnz	r0, 800fd34 <__pow5mult+0x8c>
 800fd24:	4622      	mov	r2, r4
 800fd26:	4621      	mov	r1, r4
 800fd28:	4630      	mov	r0, r6
 800fd2a:	f7ff ff26 	bl	800fb7a <__multiply>
 800fd2e:	6020      	str	r0, [r4, #0]
 800fd30:	f8c0 8000 	str.w	r8, [r0]
 800fd34:	4604      	mov	r4, r0
 800fd36:	e7e4      	b.n	800fd02 <__pow5mult+0x5a>
 800fd38:	4638      	mov	r0, r7
 800fd3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd3e:	bf00      	nop
 800fd40:	08010860 	.word	0x08010860

0800fd44 <__lshift>:
 800fd44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd48:	460c      	mov	r4, r1
 800fd4a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fd4e:	6923      	ldr	r3, [r4, #16]
 800fd50:	6849      	ldr	r1, [r1, #4]
 800fd52:	eb0a 0903 	add.w	r9, sl, r3
 800fd56:	68a3      	ldr	r3, [r4, #8]
 800fd58:	4607      	mov	r7, r0
 800fd5a:	4616      	mov	r6, r2
 800fd5c:	f109 0501 	add.w	r5, r9, #1
 800fd60:	42ab      	cmp	r3, r5
 800fd62:	db32      	blt.n	800fdca <__lshift+0x86>
 800fd64:	4638      	mov	r0, r7
 800fd66:	f7ff fded 	bl	800f944 <_Balloc>
 800fd6a:	2300      	movs	r3, #0
 800fd6c:	4680      	mov	r8, r0
 800fd6e:	f100 0114 	add.w	r1, r0, #20
 800fd72:	461a      	mov	r2, r3
 800fd74:	4553      	cmp	r3, sl
 800fd76:	db2b      	blt.n	800fdd0 <__lshift+0x8c>
 800fd78:	6920      	ldr	r0, [r4, #16]
 800fd7a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fd7e:	f104 0314 	add.w	r3, r4, #20
 800fd82:	f016 021f 	ands.w	r2, r6, #31
 800fd86:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fd8a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fd8e:	d025      	beq.n	800fddc <__lshift+0x98>
 800fd90:	f1c2 0e20 	rsb	lr, r2, #32
 800fd94:	2000      	movs	r0, #0
 800fd96:	681e      	ldr	r6, [r3, #0]
 800fd98:	468a      	mov	sl, r1
 800fd9a:	4096      	lsls	r6, r2
 800fd9c:	4330      	orrs	r0, r6
 800fd9e:	f84a 0b04 	str.w	r0, [sl], #4
 800fda2:	f853 0b04 	ldr.w	r0, [r3], #4
 800fda6:	459c      	cmp	ip, r3
 800fda8:	fa20 f00e 	lsr.w	r0, r0, lr
 800fdac:	d814      	bhi.n	800fdd8 <__lshift+0x94>
 800fdae:	6048      	str	r0, [r1, #4]
 800fdb0:	b108      	cbz	r0, 800fdb6 <__lshift+0x72>
 800fdb2:	f109 0502 	add.w	r5, r9, #2
 800fdb6:	3d01      	subs	r5, #1
 800fdb8:	4638      	mov	r0, r7
 800fdba:	f8c8 5010 	str.w	r5, [r8, #16]
 800fdbe:	4621      	mov	r1, r4
 800fdc0:	f7ff fdf4 	bl	800f9ac <_Bfree>
 800fdc4:	4640      	mov	r0, r8
 800fdc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fdca:	3101      	adds	r1, #1
 800fdcc:	005b      	lsls	r3, r3, #1
 800fdce:	e7c7      	b.n	800fd60 <__lshift+0x1c>
 800fdd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800fdd4:	3301      	adds	r3, #1
 800fdd6:	e7cd      	b.n	800fd74 <__lshift+0x30>
 800fdd8:	4651      	mov	r1, sl
 800fdda:	e7dc      	b.n	800fd96 <__lshift+0x52>
 800fddc:	3904      	subs	r1, #4
 800fdde:	f853 2b04 	ldr.w	r2, [r3], #4
 800fde2:	f841 2f04 	str.w	r2, [r1, #4]!
 800fde6:	459c      	cmp	ip, r3
 800fde8:	d8f9      	bhi.n	800fdde <__lshift+0x9a>
 800fdea:	e7e4      	b.n	800fdb6 <__lshift+0x72>

0800fdec <__mcmp>:
 800fdec:	6903      	ldr	r3, [r0, #16]
 800fdee:	690a      	ldr	r2, [r1, #16]
 800fdf0:	1a9b      	subs	r3, r3, r2
 800fdf2:	b530      	push	{r4, r5, lr}
 800fdf4:	d10c      	bne.n	800fe10 <__mcmp+0x24>
 800fdf6:	0092      	lsls	r2, r2, #2
 800fdf8:	3014      	adds	r0, #20
 800fdfa:	3114      	adds	r1, #20
 800fdfc:	1884      	adds	r4, r0, r2
 800fdfe:	4411      	add	r1, r2
 800fe00:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800fe04:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800fe08:	4295      	cmp	r5, r2
 800fe0a:	d003      	beq.n	800fe14 <__mcmp+0x28>
 800fe0c:	d305      	bcc.n	800fe1a <__mcmp+0x2e>
 800fe0e:	2301      	movs	r3, #1
 800fe10:	4618      	mov	r0, r3
 800fe12:	bd30      	pop	{r4, r5, pc}
 800fe14:	42a0      	cmp	r0, r4
 800fe16:	d3f3      	bcc.n	800fe00 <__mcmp+0x14>
 800fe18:	e7fa      	b.n	800fe10 <__mcmp+0x24>
 800fe1a:	f04f 33ff 	mov.w	r3, #4294967295
 800fe1e:	e7f7      	b.n	800fe10 <__mcmp+0x24>

0800fe20 <__mdiff>:
 800fe20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe24:	460d      	mov	r5, r1
 800fe26:	4607      	mov	r7, r0
 800fe28:	4611      	mov	r1, r2
 800fe2a:	4628      	mov	r0, r5
 800fe2c:	4614      	mov	r4, r2
 800fe2e:	f7ff ffdd 	bl	800fdec <__mcmp>
 800fe32:	1e06      	subs	r6, r0, #0
 800fe34:	d108      	bne.n	800fe48 <__mdiff+0x28>
 800fe36:	4631      	mov	r1, r6
 800fe38:	4638      	mov	r0, r7
 800fe3a:	f7ff fd83 	bl	800f944 <_Balloc>
 800fe3e:	2301      	movs	r3, #1
 800fe40:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800fe44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe48:	bfa4      	itt	ge
 800fe4a:	4623      	movge	r3, r4
 800fe4c:	462c      	movge	r4, r5
 800fe4e:	4638      	mov	r0, r7
 800fe50:	6861      	ldr	r1, [r4, #4]
 800fe52:	bfa6      	itte	ge
 800fe54:	461d      	movge	r5, r3
 800fe56:	2600      	movge	r6, #0
 800fe58:	2601      	movlt	r6, #1
 800fe5a:	f7ff fd73 	bl	800f944 <_Balloc>
 800fe5e:	692b      	ldr	r3, [r5, #16]
 800fe60:	60c6      	str	r6, [r0, #12]
 800fe62:	6926      	ldr	r6, [r4, #16]
 800fe64:	f105 0914 	add.w	r9, r5, #20
 800fe68:	f104 0214 	add.w	r2, r4, #20
 800fe6c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800fe70:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800fe74:	f100 0514 	add.w	r5, r0, #20
 800fe78:	f04f 0e00 	mov.w	lr, #0
 800fe7c:	f852 ab04 	ldr.w	sl, [r2], #4
 800fe80:	f859 4b04 	ldr.w	r4, [r9], #4
 800fe84:	fa1e f18a 	uxtah	r1, lr, sl
 800fe88:	b2a3      	uxth	r3, r4
 800fe8a:	1ac9      	subs	r1, r1, r3
 800fe8c:	0c23      	lsrs	r3, r4, #16
 800fe8e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800fe92:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800fe96:	b289      	uxth	r1, r1
 800fe98:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800fe9c:	45c8      	cmp	r8, r9
 800fe9e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800fea2:	4694      	mov	ip, r2
 800fea4:	f845 3b04 	str.w	r3, [r5], #4
 800fea8:	d8e8      	bhi.n	800fe7c <__mdiff+0x5c>
 800feaa:	45bc      	cmp	ip, r7
 800feac:	d304      	bcc.n	800feb8 <__mdiff+0x98>
 800feae:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800feb2:	b183      	cbz	r3, 800fed6 <__mdiff+0xb6>
 800feb4:	6106      	str	r6, [r0, #16]
 800feb6:	e7c5      	b.n	800fe44 <__mdiff+0x24>
 800feb8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800febc:	fa1e f381 	uxtah	r3, lr, r1
 800fec0:	141a      	asrs	r2, r3, #16
 800fec2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800fec6:	b29b      	uxth	r3, r3
 800fec8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fecc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800fed0:	f845 3b04 	str.w	r3, [r5], #4
 800fed4:	e7e9      	b.n	800feaa <__mdiff+0x8a>
 800fed6:	3e01      	subs	r6, #1
 800fed8:	e7e9      	b.n	800feae <__mdiff+0x8e>
	...

0800fedc <__ulp>:
 800fedc:	4b12      	ldr	r3, [pc, #72]	; (800ff28 <__ulp+0x4c>)
 800fede:	ee10 2a90 	vmov	r2, s1
 800fee2:	401a      	ands	r2, r3
 800fee4:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800fee8:	2b00      	cmp	r3, #0
 800feea:	dd04      	ble.n	800fef6 <__ulp+0x1a>
 800feec:	2000      	movs	r0, #0
 800feee:	4619      	mov	r1, r3
 800fef0:	ec41 0b10 	vmov	d0, r0, r1
 800fef4:	4770      	bx	lr
 800fef6:	425b      	negs	r3, r3
 800fef8:	151b      	asrs	r3, r3, #20
 800fefa:	2b13      	cmp	r3, #19
 800fefc:	f04f 0000 	mov.w	r0, #0
 800ff00:	f04f 0100 	mov.w	r1, #0
 800ff04:	dc04      	bgt.n	800ff10 <__ulp+0x34>
 800ff06:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800ff0a:	fa42 f103 	asr.w	r1, r2, r3
 800ff0e:	e7ef      	b.n	800fef0 <__ulp+0x14>
 800ff10:	3b14      	subs	r3, #20
 800ff12:	2b1e      	cmp	r3, #30
 800ff14:	f04f 0201 	mov.w	r2, #1
 800ff18:	bfda      	itte	le
 800ff1a:	f1c3 031f 	rsble	r3, r3, #31
 800ff1e:	fa02 f303 	lslle.w	r3, r2, r3
 800ff22:	4613      	movgt	r3, r2
 800ff24:	4618      	mov	r0, r3
 800ff26:	e7e3      	b.n	800fef0 <__ulp+0x14>
 800ff28:	7ff00000 	.word	0x7ff00000

0800ff2c <__b2d>:
 800ff2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff2e:	6905      	ldr	r5, [r0, #16]
 800ff30:	f100 0714 	add.w	r7, r0, #20
 800ff34:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ff38:	1f2e      	subs	r6, r5, #4
 800ff3a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800ff3e:	4620      	mov	r0, r4
 800ff40:	f7ff fdc4 	bl	800facc <__hi0bits>
 800ff44:	f1c0 0320 	rsb	r3, r0, #32
 800ff48:	280a      	cmp	r0, #10
 800ff4a:	600b      	str	r3, [r1, #0]
 800ff4c:	f8df c074 	ldr.w	ip, [pc, #116]	; 800ffc4 <__b2d+0x98>
 800ff50:	dc14      	bgt.n	800ff7c <__b2d+0x50>
 800ff52:	f1c0 0e0b 	rsb	lr, r0, #11
 800ff56:	fa24 f10e 	lsr.w	r1, r4, lr
 800ff5a:	42b7      	cmp	r7, r6
 800ff5c:	ea41 030c 	orr.w	r3, r1, ip
 800ff60:	bf34      	ite	cc
 800ff62:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ff66:	2100      	movcs	r1, #0
 800ff68:	3015      	adds	r0, #21
 800ff6a:	fa04 f000 	lsl.w	r0, r4, r0
 800ff6e:	fa21 f10e 	lsr.w	r1, r1, lr
 800ff72:	ea40 0201 	orr.w	r2, r0, r1
 800ff76:	ec43 2b10 	vmov	d0, r2, r3
 800ff7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff7c:	42b7      	cmp	r7, r6
 800ff7e:	bf3a      	itte	cc
 800ff80:	f1a5 0608 	subcc.w	r6, r5, #8
 800ff84:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ff88:	2100      	movcs	r1, #0
 800ff8a:	380b      	subs	r0, #11
 800ff8c:	d015      	beq.n	800ffba <__b2d+0x8e>
 800ff8e:	4084      	lsls	r4, r0
 800ff90:	f1c0 0520 	rsb	r5, r0, #32
 800ff94:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800ff98:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800ff9c:	42be      	cmp	r6, r7
 800ff9e:	fa21 fc05 	lsr.w	ip, r1, r5
 800ffa2:	ea44 030c 	orr.w	r3, r4, ip
 800ffa6:	bf8c      	ite	hi
 800ffa8:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ffac:	2400      	movls	r4, #0
 800ffae:	fa01 f000 	lsl.w	r0, r1, r0
 800ffb2:	40ec      	lsrs	r4, r5
 800ffb4:	ea40 0204 	orr.w	r2, r0, r4
 800ffb8:	e7dd      	b.n	800ff76 <__b2d+0x4a>
 800ffba:	ea44 030c 	orr.w	r3, r4, ip
 800ffbe:	460a      	mov	r2, r1
 800ffc0:	e7d9      	b.n	800ff76 <__b2d+0x4a>
 800ffc2:	bf00      	nop
 800ffc4:	3ff00000 	.word	0x3ff00000

0800ffc8 <__d2b>:
 800ffc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ffcc:	460e      	mov	r6, r1
 800ffce:	2101      	movs	r1, #1
 800ffd0:	ec59 8b10 	vmov	r8, r9, d0
 800ffd4:	4615      	mov	r5, r2
 800ffd6:	f7ff fcb5 	bl	800f944 <_Balloc>
 800ffda:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800ffde:	4607      	mov	r7, r0
 800ffe0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ffe4:	bb34      	cbnz	r4, 8010034 <__d2b+0x6c>
 800ffe6:	9301      	str	r3, [sp, #4]
 800ffe8:	f1b8 0300 	subs.w	r3, r8, #0
 800ffec:	d027      	beq.n	801003e <__d2b+0x76>
 800ffee:	a802      	add	r0, sp, #8
 800fff0:	f840 3d08 	str.w	r3, [r0, #-8]!
 800fff4:	f7ff fd89 	bl	800fb0a <__lo0bits>
 800fff8:	9900      	ldr	r1, [sp, #0]
 800fffa:	b1f0      	cbz	r0, 801003a <__d2b+0x72>
 800fffc:	9a01      	ldr	r2, [sp, #4]
 800fffe:	f1c0 0320 	rsb	r3, r0, #32
 8010002:	fa02 f303 	lsl.w	r3, r2, r3
 8010006:	430b      	orrs	r3, r1
 8010008:	40c2      	lsrs	r2, r0
 801000a:	617b      	str	r3, [r7, #20]
 801000c:	9201      	str	r2, [sp, #4]
 801000e:	9b01      	ldr	r3, [sp, #4]
 8010010:	61bb      	str	r3, [r7, #24]
 8010012:	2b00      	cmp	r3, #0
 8010014:	bf14      	ite	ne
 8010016:	2102      	movne	r1, #2
 8010018:	2101      	moveq	r1, #1
 801001a:	6139      	str	r1, [r7, #16]
 801001c:	b1c4      	cbz	r4, 8010050 <__d2b+0x88>
 801001e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8010022:	4404      	add	r4, r0
 8010024:	6034      	str	r4, [r6, #0]
 8010026:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801002a:	6028      	str	r0, [r5, #0]
 801002c:	4638      	mov	r0, r7
 801002e:	b003      	add	sp, #12
 8010030:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010034:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010038:	e7d5      	b.n	800ffe6 <__d2b+0x1e>
 801003a:	6179      	str	r1, [r7, #20]
 801003c:	e7e7      	b.n	801000e <__d2b+0x46>
 801003e:	a801      	add	r0, sp, #4
 8010040:	f7ff fd63 	bl	800fb0a <__lo0bits>
 8010044:	9b01      	ldr	r3, [sp, #4]
 8010046:	617b      	str	r3, [r7, #20]
 8010048:	2101      	movs	r1, #1
 801004a:	6139      	str	r1, [r7, #16]
 801004c:	3020      	adds	r0, #32
 801004e:	e7e5      	b.n	801001c <__d2b+0x54>
 8010050:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8010054:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010058:	6030      	str	r0, [r6, #0]
 801005a:	6918      	ldr	r0, [r3, #16]
 801005c:	f7ff fd36 	bl	800facc <__hi0bits>
 8010060:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8010064:	e7e1      	b.n	801002a <__d2b+0x62>

08010066 <__ratio>:
 8010066:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801006a:	4688      	mov	r8, r1
 801006c:	4669      	mov	r1, sp
 801006e:	4681      	mov	r9, r0
 8010070:	f7ff ff5c 	bl	800ff2c <__b2d>
 8010074:	a901      	add	r1, sp, #4
 8010076:	4640      	mov	r0, r8
 8010078:	ec57 6b10 	vmov	r6, r7, d0
 801007c:	f7ff ff56 	bl	800ff2c <__b2d>
 8010080:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010084:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8010088:	eba3 0c02 	sub.w	ip, r3, r2
 801008c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010090:	1a9b      	subs	r3, r3, r2
 8010092:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8010096:	ec5b ab10 	vmov	sl, fp, d0
 801009a:	2b00      	cmp	r3, #0
 801009c:	bfce      	itee	gt
 801009e:	463a      	movgt	r2, r7
 80100a0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80100a4:	465a      	movle	r2, fp
 80100a6:	4659      	mov	r1, fp
 80100a8:	463d      	mov	r5, r7
 80100aa:	bfd4      	ite	le
 80100ac:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80100b0:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80100b4:	4630      	mov	r0, r6
 80100b6:	ee10 2a10 	vmov	r2, s0
 80100ba:	460b      	mov	r3, r1
 80100bc:	4629      	mov	r1, r5
 80100be:	f7f0 fbc5 	bl	800084c <__aeabi_ddiv>
 80100c2:	ec41 0b10 	vmov	d0, r0, r1
 80100c6:	b003      	add	sp, #12
 80100c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080100cc <__copybits>:
 80100cc:	3901      	subs	r1, #1
 80100ce:	b510      	push	{r4, lr}
 80100d0:	1149      	asrs	r1, r1, #5
 80100d2:	6914      	ldr	r4, [r2, #16]
 80100d4:	3101      	adds	r1, #1
 80100d6:	f102 0314 	add.w	r3, r2, #20
 80100da:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80100de:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80100e2:	42a3      	cmp	r3, r4
 80100e4:	4602      	mov	r2, r0
 80100e6:	d303      	bcc.n	80100f0 <__copybits+0x24>
 80100e8:	2300      	movs	r3, #0
 80100ea:	428a      	cmp	r2, r1
 80100ec:	d305      	bcc.n	80100fa <__copybits+0x2e>
 80100ee:	bd10      	pop	{r4, pc}
 80100f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80100f4:	f840 2b04 	str.w	r2, [r0], #4
 80100f8:	e7f3      	b.n	80100e2 <__copybits+0x16>
 80100fa:	f842 3b04 	str.w	r3, [r2], #4
 80100fe:	e7f4      	b.n	80100ea <__copybits+0x1e>

08010100 <__any_on>:
 8010100:	f100 0214 	add.w	r2, r0, #20
 8010104:	6900      	ldr	r0, [r0, #16]
 8010106:	114b      	asrs	r3, r1, #5
 8010108:	4298      	cmp	r0, r3
 801010a:	b510      	push	{r4, lr}
 801010c:	db11      	blt.n	8010132 <__any_on+0x32>
 801010e:	dd0a      	ble.n	8010126 <__any_on+0x26>
 8010110:	f011 011f 	ands.w	r1, r1, #31
 8010114:	d007      	beq.n	8010126 <__any_on+0x26>
 8010116:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801011a:	fa24 f001 	lsr.w	r0, r4, r1
 801011e:	fa00 f101 	lsl.w	r1, r0, r1
 8010122:	428c      	cmp	r4, r1
 8010124:	d10b      	bne.n	801013e <__any_on+0x3e>
 8010126:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801012a:	4293      	cmp	r3, r2
 801012c:	d803      	bhi.n	8010136 <__any_on+0x36>
 801012e:	2000      	movs	r0, #0
 8010130:	bd10      	pop	{r4, pc}
 8010132:	4603      	mov	r3, r0
 8010134:	e7f7      	b.n	8010126 <__any_on+0x26>
 8010136:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801013a:	2900      	cmp	r1, #0
 801013c:	d0f5      	beq.n	801012a <__any_on+0x2a>
 801013e:	2001      	movs	r0, #1
 8010140:	e7f6      	b.n	8010130 <__any_on+0x30>

08010142 <_calloc_r>:
 8010142:	b538      	push	{r3, r4, r5, lr}
 8010144:	fb02 f401 	mul.w	r4, r2, r1
 8010148:	4621      	mov	r1, r4
 801014a:	f7fc fce9 	bl	800cb20 <_malloc_r>
 801014e:	4605      	mov	r5, r0
 8010150:	b118      	cbz	r0, 801015a <_calloc_r+0x18>
 8010152:	4622      	mov	r2, r4
 8010154:	2100      	movs	r1, #0
 8010156:	f7fc fc8c 	bl	800ca72 <memset>
 801015a:	4628      	mov	r0, r5
 801015c:	bd38      	pop	{r3, r4, r5, pc}

0801015e <__ssputs_r>:
 801015e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010162:	688e      	ldr	r6, [r1, #8]
 8010164:	429e      	cmp	r6, r3
 8010166:	4682      	mov	sl, r0
 8010168:	460c      	mov	r4, r1
 801016a:	4690      	mov	r8, r2
 801016c:	4699      	mov	r9, r3
 801016e:	d837      	bhi.n	80101e0 <__ssputs_r+0x82>
 8010170:	898a      	ldrh	r2, [r1, #12]
 8010172:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010176:	d031      	beq.n	80101dc <__ssputs_r+0x7e>
 8010178:	6825      	ldr	r5, [r4, #0]
 801017a:	6909      	ldr	r1, [r1, #16]
 801017c:	1a6f      	subs	r7, r5, r1
 801017e:	6965      	ldr	r5, [r4, #20]
 8010180:	2302      	movs	r3, #2
 8010182:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010186:	fb95 f5f3 	sdiv	r5, r5, r3
 801018a:	f109 0301 	add.w	r3, r9, #1
 801018e:	443b      	add	r3, r7
 8010190:	429d      	cmp	r5, r3
 8010192:	bf38      	it	cc
 8010194:	461d      	movcc	r5, r3
 8010196:	0553      	lsls	r3, r2, #21
 8010198:	d530      	bpl.n	80101fc <__ssputs_r+0x9e>
 801019a:	4629      	mov	r1, r5
 801019c:	f7fc fcc0 	bl	800cb20 <_malloc_r>
 80101a0:	4606      	mov	r6, r0
 80101a2:	b950      	cbnz	r0, 80101ba <__ssputs_r+0x5c>
 80101a4:	230c      	movs	r3, #12
 80101a6:	f8ca 3000 	str.w	r3, [sl]
 80101aa:	89a3      	ldrh	r3, [r4, #12]
 80101ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80101b0:	81a3      	strh	r3, [r4, #12]
 80101b2:	f04f 30ff 	mov.w	r0, #4294967295
 80101b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101ba:	463a      	mov	r2, r7
 80101bc:	6921      	ldr	r1, [r4, #16]
 80101be:	f7fc fc4d 	bl	800ca5c <memcpy>
 80101c2:	89a3      	ldrh	r3, [r4, #12]
 80101c4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80101c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80101cc:	81a3      	strh	r3, [r4, #12]
 80101ce:	6126      	str	r6, [r4, #16]
 80101d0:	6165      	str	r5, [r4, #20]
 80101d2:	443e      	add	r6, r7
 80101d4:	1bed      	subs	r5, r5, r7
 80101d6:	6026      	str	r6, [r4, #0]
 80101d8:	60a5      	str	r5, [r4, #8]
 80101da:	464e      	mov	r6, r9
 80101dc:	454e      	cmp	r6, r9
 80101de:	d900      	bls.n	80101e2 <__ssputs_r+0x84>
 80101e0:	464e      	mov	r6, r9
 80101e2:	4632      	mov	r2, r6
 80101e4:	4641      	mov	r1, r8
 80101e6:	6820      	ldr	r0, [r4, #0]
 80101e8:	f000 f92b 	bl	8010442 <memmove>
 80101ec:	68a3      	ldr	r3, [r4, #8]
 80101ee:	1b9b      	subs	r3, r3, r6
 80101f0:	60a3      	str	r3, [r4, #8]
 80101f2:	6823      	ldr	r3, [r4, #0]
 80101f4:	441e      	add	r6, r3
 80101f6:	6026      	str	r6, [r4, #0]
 80101f8:	2000      	movs	r0, #0
 80101fa:	e7dc      	b.n	80101b6 <__ssputs_r+0x58>
 80101fc:	462a      	mov	r2, r5
 80101fe:	f000 f939 	bl	8010474 <_realloc_r>
 8010202:	4606      	mov	r6, r0
 8010204:	2800      	cmp	r0, #0
 8010206:	d1e2      	bne.n	80101ce <__ssputs_r+0x70>
 8010208:	6921      	ldr	r1, [r4, #16]
 801020a:	4650      	mov	r0, sl
 801020c:	f7fc fc3a 	bl	800ca84 <_free_r>
 8010210:	e7c8      	b.n	80101a4 <__ssputs_r+0x46>
	...

08010214 <_svfiprintf_r>:
 8010214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010218:	461d      	mov	r5, r3
 801021a:	898b      	ldrh	r3, [r1, #12]
 801021c:	061f      	lsls	r7, r3, #24
 801021e:	b09d      	sub	sp, #116	; 0x74
 8010220:	4680      	mov	r8, r0
 8010222:	460c      	mov	r4, r1
 8010224:	4616      	mov	r6, r2
 8010226:	d50f      	bpl.n	8010248 <_svfiprintf_r+0x34>
 8010228:	690b      	ldr	r3, [r1, #16]
 801022a:	b96b      	cbnz	r3, 8010248 <_svfiprintf_r+0x34>
 801022c:	2140      	movs	r1, #64	; 0x40
 801022e:	f7fc fc77 	bl	800cb20 <_malloc_r>
 8010232:	6020      	str	r0, [r4, #0]
 8010234:	6120      	str	r0, [r4, #16]
 8010236:	b928      	cbnz	r0, 8010244 <_svfiprintf_r+0x30>
 8010238:	230c      	movs	r3, #12
 801023a:	f8c8 3000 	str.w	r3, [r8]
 801023e:	f04f 30ff 	mov.w	r0, #4294967295
 8010242:	e0c8      	b.n	80103d6 <_svfiprintf_r+0x1c2>
 8010244:	2340      	movs	r3, #64	; 0x40
 8010246:	6163      	str	r3, [r4, #20]
 8010248:	2300      	movs	r3, #0
 801024a:	9309      	str	r3, [sp, #36]	; 0x24
 801024c:	2320      	movs	r3, #32
 801024e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010252:	2330      	movs	r3, #48	; 0x30
 8010254:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010258:	9503      	str	r5, [sp, #12]
 801025a:	f04f 0b01 	mov.w	fp, #1
 801025e:	4637      	mov	r7, r6
 8010260:	463d      	mov	r5, r7
 8010262:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010266:	b10b      	cbz	r3, 801026c <_svfiprintf_r+0x58>
 8010268:	2b25      	cmp	r3, #37	; 0x25
 801026a:	d13e      	bne.n	80102ea <_svfiprintf_r+0xd6>
 801026c:	ebb7 0a06 	subs.w	sl, r7, r6
 8010270:	d00b      	beq.n	801028a <_svfiprintf_r+0x76>
 8010272:	4653      	mov	r3, sl
 8010274:	4632      	mov	r2, r6
 8010276:	4621      	mov	r1, r4
 8010278:	4640      	mov	r0, r8
 801027a:	f7ff ff70 	bl	801015e <__ssputs_r>
 801027e:	3001      	adds	r0, #1
 8010280:	f000 80a4 	beq.w	80103cc <_svfiprintf_r+0x1b8>
 8010284:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010286:	4453      	add	r3, sl
 8010288:	9309      	str	r3, [sp, #36]	; 0x24
 801028a:	783b      	ldrb	r3, [r7, #0]
 801028c:	2b00      	cmp	r3, #0
 801028e:	f000 809d 	beq.w	80103cc <_svfiprintf_r+0x1b8>
 8010292:	2300      	movs	r3, #0
 8010294:	f04f 32ff 	mov.w	r2, #4294967295
 8010298:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801029c:	9304      	str	r3, [sp, #16]
 801029e:	9307      	str	r3, [sp, #28]
 80102a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80102a4:	931a      	str	r3, [sp, #104]	; 0x68
 80102a6:	462f      	mov	r7, r5
 80102a8:	2205      	movs	r2, #5
 80102aa:	f817 1b01 	ldrb.w	r1, [r7], #1
 80102ae:	4850      	ldr	r0, [pc, #320]	; (80103f0 <_svfiprintf_r+0x1dc>)
 80102b0:	f7ef ff96 	bl	80001e0 <memchr>
 80102b4:	9b04      	ldr	r3, [sp, #16]
 80102b6:	b9d0      	cbnz	r0, 80102ee <_svfiprintf_r+0xda>
 80102b8:	06d9      	lsls	r1, r3, #27
 80102ba:	bf44      	itt	mi
 80102bc:	2220      	movmi	r2, #32
 80102be:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80102c2:	071a      	lsls	r2, r3, #28
 80102c4:	bf44      	itt	mi
 80102c6:	222b      	movmi	r2, #43	; 0x2b
 80102c8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80102cc:	782a      	ldrb	r2, [r5, #0]
 80102ce:	2a2a      	cmp	r2, #42	; 0x2a
 80102d0:	d015      	beq.n	80102fe <_svfiprintf_r+0xea>
 80102d2:	9a07      	ldr	r2, [sp, #28]
 80102d4:	462f      	mov	r7, r5
 80102d6:	2000      	movs	r0, #0
 80102d8:	250a      	movs	r5, #10
 80102da:	4639      	mov	r1, r7
 80102dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80102e0:	3b30      	subs	r3, #48	; 0x30
 80102e2:	2b09      	cmp	r3, #9
 80102e4:	d94d      	bls.n	8010382 <_svfiprintf_r+0x16e>
 80102e6:	b1b8      	cbz	r0, 8010318 <_svfiprintf_r+0x104>
 80102e8:	e00f      	b.n	801030a <_svfiprintf_r+0xf6>
 80102ea:	462f      	mov	r7, r5
 80102ec:	e7b8      	b.n	8010260 <_svfiprintf_r+0x4c>
 80102ee:	4a40      	ldr	r2, [pc, #256]	; (80103f0 <_svfiprintf_r+0x1dc>)
 80102f0:	1a80      	subs	r0, r0, r2
 80102f2:	fa0b f000 	lsl.w	r0, fp, r0
 80102f6:	4318      	orrs	r0, r3
 80102f8:	9004      	str	r0, [sp, #16]
 80102fa:	463d      	mov	r5, r7
 80102fc:	e7d3      	b.n	80102a6 <_svfiprintf_r+0x92>
 80102fe:	9a03      	ldr	r2, [sp, #12]
 8010300:	1d11      	adds	r1, r2, #4
 8010302:	6812      	ldr	r2, [r2, #0]
 8010304:	9103      	str	r1, [sp, #12]
 8010306:	2a00      	cmp	r2, #0
 8010308:	db01      	blt.n	801030e <_svfiprintf_r+0xfa>
 801030a:	9207      	str	r2, [sp, #28]
 801030c:	e004      	b.n	8010318 <_svfiprintf_r+0x104>
 801030e:	4252      	negs	r2, r2
 8010310:	f043 0302 	orr.w	r3, r3, #2
 8010314:	9207      	str	r2, [sp, #28]
 8010316:	9304      	str	r3, [sp, #16]
 8010318:	783b      	ldrb	r3, [r7, #0]
 801031a:	2b2e      	cmp	r3, #46	; 0x2e
 801031c:	d10c      	bne.n	8010338 <_svfiprintf_r+0x124>
 801031e:	787b      	ldrb	r3, [r7, #1]
 8010320:	2b2a      	cmp	r3, #42	; 0x2a
 8010322:	d133      	bne.n	801038c <_svfiprintf_r+0x178>
 8010324:	9b03      	ldr	r3, [sp, #12]
 8010326:	1d1a      	adds	r2, r3, #4
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	9203      	str	r2, [sp, #12]
 801032c:	2b00      	cmp	r3, #0
 801032e:	bfb8      	it	lt
 8010330:	f04f 33ff 	movlt.w	r3, #4294967295
 8010334:	3702      	adds	r7, #2
 8010336:	9305      	str	r3, [sp, #20]
 8010338:	4d2e      	ldr	r5, [pc, #184]	; (80103f4 <_svfiprintf_r+0x1e0>)
 801033a:	7839      	ldrb	r1, [r7, #0]
 801033c:	2203      	movs	r2, #3
 801033e:	4628      	mov	r0, r5
 8010340:	f7ef ff4e 	bl	80001e0 <memchr>
 8010344:	b138      	cbz	r0, 8010356 <_svfiprintf_r+0x142>
 8010346:	2340      	movs	r3, #64	; 0x40
 8010348:	1b40      	subs	r0, r0, r5
 801034a:	fa03 f000 	lsl.w	r0, r3, r0
 801034e:	9b04      	ldr	r3, [sp, #16]
 8010350:	4303      	orrs	r3, r0
 8010352:	3701      	adds	r7, #1
 8010354:	9304      	str	r3, [sp, #16]
 8010356:	7839      	ldrb	r1, [r7, #0]
 8010358:	4827      	ldr	r0, [pc, #156]	; (80103f8 <_svfiprintf_r+0x1e4>)
 801035a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801035e:	2206      	movs	r2, #6
 8010360:	1c7e      	adds	r6, r7, #1
 8010362:	f7ef ff3d 	bl	80001e0 <memchr>
 8010366:	2800      	cmp	r0, #0
 8010368:	d038      	beq.n	80103dc <_svfiprintf_r+0x1c8>
 801036a:	4b24      	ldr	r3, [pc, #144]	; (80103fc <_svfiprintf_r+0x1e8>)
 801036c:	bb13      	cbnz	r3, 80103b4 <_svfiprintf_r+0x1a0>
 801036e:	9b03      	ldr	r3, [sp, #12]
 8010370:	3307      	adds	r3, #7
 8010372:	f023 0307 	bic.w	r3, r3, #7
 8010376:	3308      	adds	r3, #8
 8010378:	9303      	str	r3, [sp, #12]
 801037a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801037c:	444b      	add	r3, r9
 801037e:	9309      	str	r3, [sp, #36]	; 0x24
 8010380:	e76d      	b.n	801025e <_svfiprintf_r+0x4a>
 8010382:	fb05 3202 	mla	r2, r5, r2, r3
 8010386:	2001      	movs	r0, #1
 8010388:	460f      	mov	r7, r1
 801038a:	e7a6      	b.n	80102da <_svfiprintf_r+0xc6>
 801038c:	2300      	movs	r3, #0
 801038e:	3701      	adds	r7, #1
 8010390:	9305      	str	r3, [sp, #20]
 8010392:	4619      	mov	r1, r3
 8010394:	250a      	movs	r5, #10
 8010396:	4638      	mov	r0, r7
 8010398:	f810 2b01 	ldrb.w	r2, [r0], #1
 801039c:	3a30      	subs	r2, #48	; 0x30
 801039e:	2a09      	cmp	r2, #9
 80103a0:	d903      	bls.n	80103aa <_svfiprintf_r+0x196>
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d0c8      	beq.n	8010338 <_svfiprintf_r+0x124>
 80103a6:	9105      	str	r1, [sp, #20]
 80103a8:	e7c6      	b.n	8010338 <_svfiprintf_r+0x124>
 80103aa:	fb05 2101 	mla	r1, r5, r1, r2
 80103ae:	2301      	movs	r3, #1
 80103b0:	4607      	mov	r7, r0
 80103b2:	e7f0      	b.n	8010396 <_svfiprintf_r+0x182>
 80103b4:	ab03      	add	r3, sp, #12
 80103b6:	9300      	str	r3, [sp, #0]
 80103b8:	4622      	mov	r2, r4
 80103ba:	4b11      	ldr	r3, [pc, #68]	; (8010400 <_svfiprintf_r+0x1ec>)
 80103bc:	a904      	add	r1, sp, #16
 80103be:	4640      	mov	r0, r8
 80103c0:	f7fc fc9c 	bl	800ccfc <_printf_float>
 80103c4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80103c8:	4681      	mov	r9, r0
 80103ca:	d1d6      	bne.n	801037a <_svfiprintf_r+0x166>
 80103cc:	89a3      	ldrh	r3, [r4, #12]
 80103ce:	065b      	lsls	r3, r3, #25
 80103d0:	f53f af35 	bmi.w	801023e <_svfiprintf_r+0x2a>
 80103d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80103d6:	b01d      	add	sp, #116	; 0x74
 80103d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103dc:	ab03      	add	r3, sp, #12
 80103de:	9300      	str	r3, [sp, #0]
 80103e0:	4622      	mov	r2, r4
 80103e2:	4b07      	ldr	r3, [pc, #28]	; (8010400 <_svfiprintf_r+0x1ec>)
 80103e4:	a904      	add	r1, sp, #16
 80103e6:	4640      	mov	r0, r8
 80103e8:	f7fc ff3e 	bl	800d268 <_printf_i>
 80103ec:	e7ea      	b.n	80103c4 <_svfiprintf_r+0x1b0>
 80103ee:	bf00      	nop
 80103f0:	0801086c 	.word	0x0801086c
 80103f4:	08010872 	.word	0x08010872
 80103f8:	08010876 	.word	0x08010876
 80103fc:	0800ccfd 	.word	0x0800ccfd
 8010400:	0801015f 	.word	0x0801015f

08010404 <strncmp>:
 8010404:	b510      	push	{r4, lr}
 8010406:	b16a      	cbz	r2, 8010424 <strncmp+0x20>
 8010408:	3901      	subs	r1, #1
 801040a:	1884      	adds	r4, r0, r2
 801040c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010410:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010414:	4293      	cmp	r3, r2
 8010416:	d103      	bne.n	8010420 <strncmp+0x1c>
 8010418:	42a0      	cmp	r0, r4
 801041a:	d001      	beq.n	8010420 <strncmp+0x1c>
 801041c:	2b00      	cmp	r3, #0
 801041e:	d1f5      	bne.n	801040c <strncmp+0x8>
 8010420:	1a98      	subs	r0, r3, r2
 8010422:	bd10      	pop	{r4, pc}
 8010424:	4610      	mov	r0, r2
 8010426:	e7fc      	b.n	8010422 <strncmp+0x1e>

08010428 <__ascii_wctomb>:
 8010428:	b149      	cbz	r1, 801043e <__ascii_wctomb+0x16>
 801042a:	2aff      	cmp	r2, #255	; 0xff
 801042c:	bf85      	ittet	hi
 801042e:	238a      	movhi	r3, #138	; 0x8a
 8010430:	6003      	strhi	r3, [r0, #0]
 8010432:	700a      	strbls	r2, [r1, #0]
 8010434:	f04f 30ff 	movhi.w	r0, #4294967295
 8010438:	bf98      	it	ls
 801043a:	2001      	movls	r0, #1
 801043c:	4770      	bx	lr
 801043e:	4608      	mov	r0, r1
 8010440:	4770      	bx	lr

08010442 <memmove>:
 8010442:	4288      	cmp	r0, r1
 8010444:	b510      	push	{r4, lr}
 8010446:	eb01 0302 	add.w	r3, r1, r2
 801044a:	d807      	bhi.n	801045c <memmove+0x1a>
 801044c:	1e42      	subs	r2, r0, #1
 801044e:	4299      	cmp	r1, r3
 8010450:	d00a      	beq.n	8010468 <memmove+0x26>
 8010452:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010456:	f802 4f01 	strb.w	r4, [r2, #1]!
 801045a:	e7f8      	b.n	801044e <memmove+0xc>
 801045c:	4283      	cmp	r3, r0
 801045e:	d9f5      	bls.n	801044c <memmove+0xa>
 8010460:	1881      	adds	r1, r0, r2
 8010462:	1ad2      	subs	r2, r2, r3
 8010464:	42d3      	cmn	r3, r2
 8010466:	d100      	bne.n	801046a <memmove+0x28>
 8010468:	bd10      	pop	{r4, pc}
 801046a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801046e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8010472:	e7f7      	b.n	8010464 <memmove+0x22>

08010474 <_realloc_r>:
 8010474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010476:	4607      	mov	r7, r0
 8010478:	4614      	mov	r4, r2
 801047a:	460e      	mov	r6, r1
 801047c:	b921      	cbnz	r1, 8010488 <_realloc_r+0x14>
 801047e:	4611      	mov	r1, r2
 8010480:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010484:	f7fc bb4c 	b.w	800cb20 <_malloc_r>
 8010488:	b922      	cbnz	r2, 8010494 <_realloc_r+0x20>
 801048a:	f7fc fafb 	bl	800ca84 <_free_r>
 801048e:	4625      	mov	r5, r4
 8010490:	4628      	mov	r0, r5
 8010492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010494:	f000 f814 	bl	80104c0 <_malloc_usable_size_r>
 8010498:	42a0      	cmp	r0, r4
 801049a:	d20f      	bcs.n	80104bc <_realloc_r+0x48>
 801049c:	4621      	mov	r1, r4
 801049e:	4638      	mov	r0, r7
 80104a0:	f7fc fb3e 	bl	800cb20 <_malloc_r>
 80104a4:	4605      	mov	r5, r0
 80104a6:	2800      	cmp	r0, #0
 80104a8:	d0f2      	beq.n	8010490 <_realloc_r+0x1c>
 80104aa:	4631      	mov	r1, r6
 80104ac:	4622      	mov	r2, r4
 80104ae:	f7fc fad5 	bl	800ca5c <memcpy>
 80104b2:	4631      	mov	r1, r6
 80104b4:	4638      	mov	r0, r7
 80104b6:	f7fc fae5 	bl	800ca84 <_free_r>
 80104ba:	e7e9      	b.n	8010490 <_realloc_r+0x1c>
 80104bc:	4635      	mov	r5, r6
 80104be:	e7e7      	b.n	8010490 <_realloc_r+0x1c>

080104c0 <_malloc_usable_size_r>:
 80104c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80104c4:	1f18      	subs	r0, r3, #4
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	bfbc      	itt	lt
 80104ca:	580b      	ldrlt	r3, [r1, r0]
 80104cc:	18c0      	addlt	r0, r0, r3
 80104ce:	4770      	bx	lr

080104d0 <_sbrk>:
 80104d0:	4b04      	ldr	r3, [pc, #16]	; (80104e4 <_sbrk+0x14>)
 80104d2:	6819      	ldr	r1, [r3, #0]
 80104d4:	4602      	mov	r2, r0
 80104d6:	b909      	cbnz	r1, 80104dc <_sbrk+0xc>
 80104d8:	4903      	ldr	r1, [pc, #12]	; (80104e8 <_sbrk+0x18>)
 80104da:	6019      	str	r1, [r3, #0]
 80104dc:	6818      	ldr	r0, [r3, #0]
 80104de:	4402      	add	r2, r0
 80104e0:	601a      	str	r2, [r3, #0]
 80104e2:	4770      	bx	lr
 80104e4:	20000590 	.word	0x20000590
 80104e8:	20002838 	.word	0x20002838

080104ec <_init>:
 80104ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104ee:	bf00      	nop
 80104f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104f2:	bc08      	pop	{r3}
 80104f4:	469e      	mov	lr, r3
 80104f6:	4770      	bx	lr

080104f8 <_fini>:
 80104f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104fa:	bf00      	nop
 80104fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104fe:	bc08      	pop	{r3}
 8010500:	469e      	mov	lr, r3
 8010502:	4770      	bx	lr
